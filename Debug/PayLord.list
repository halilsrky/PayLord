
PayLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011cb8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000658  08011e88  08011e88  00012e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124e0  080124e0  00014210  2**0
                  CONTENTS
  4 .ARM          00000008  080124e0  080124e0  000134e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080124e8  080124e8  00014210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124e8  080124e8  000134e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080124ec  080124ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  080124f0  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015a0  20000210  08012700  00014210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017b0  08012700  000147b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c22  00000000  00000000  00014240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003784  00000000  00000000  0002de62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001478  00000000  00000000  000315e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000101e  00000000  00000000  00032a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026674  00000000  00000000  00033a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb1d  00000000  00000000  0005a0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e49f7  00000000  00000000  00076c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015b606  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007428  00000000  00000000  0015b64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00162a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011e70 	.word	0x08011e70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08011e70 	.word	0x08011e70

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f006 fe7b 	bl	8007ff8 <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f006 fe57 	bl	8007ff8 <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f00b fa16 	bl	800c792 <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000022c 	.word	0x2000022c
 80013dc:	20000230 	.word	0x20000230
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f00f f8f7 	bl	8010608 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000230 	.word	0x20000230
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <bme280_config>:

void bme280_config()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <bme280_config+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800149c:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <bme280_config+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fc7f 	bl	8007da4 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014a6:	2005      	movs	r0, #5
 80014a8:	f004 fea6 	bl	80061f8 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014ac:	4b93      	ldr	r3, [pc, #588]	@ (80016fc <bme280_config+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f006 fb33 	bl	8007b1c <HAL_I2C_Init>
    HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f004 fe9e 	bl	80061f8 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <bme280_config+0x270>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	23c8      	movs	r3, #200	@ 0xc8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2319      	movs	r3, #25
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2288      	movs	r2, #136	@ 0x88
 80014d0:	21ec      	movs	r1, #236	@ 0xec
 80014d2:	f006 fd91 	bl	8007ff8 <HAL_I2C_Mem_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <bme280_config+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <bme280_config+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	b212      	sxth	r2, r2
 8001504:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b219      	sxth	r1, r3
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <bme280_config+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800151c:	7abb      	ldrb	r3, [r7, #10]
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <bme280_config+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b219      	sxth	r1, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <bme280_config+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	b219      	sxth	r1, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <bme280_config+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	b212      	sxth	r2, r2
 800155e:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	b219      	sxth	r1, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <bme280_config+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	b212      	sxth	r2, r2
 8001574:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b219      	sxth	r1, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <bme280_config+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	b219      	sxth	r1, r3
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <bme280_config+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <bme280_config+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b212      	sxth	r2, r2
 80015b6:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b219      	sxth	r1, r3
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <bme280_config+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015ce:	7ebb      	ldrb	r3, [r7, #26]
 80015d0:	b219      	sxth	r1, r3
 80015d2:	7efb      	ldrb	r3, [r7, #27]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <bme280_config+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b212      	sxth	r2, r2
 80015e2:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <bme280_config+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	7f3a      	ldrb	r2, [r7, #28]
 80015ec:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <bme280_config+0x270>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2332      	movs	r3, #50	@ 0x32
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2307      	movs	r3, #7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e1      	movs	r2, #225	@ 0xe1
 8001602:	21ec      	movs	r1, #236	@ 0xec
 8001604:	f006 fcf8 	bl	8007ff8 <HAL_I2C_Mem_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800160c:	793b      	ldrb	r3, [r7, #4]
 800160e:	b219      	sxth	r1, r3
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <bme280_config+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	b212      	sxth	r2, r2
 8001620:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <bme280_config+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21b      	sxth	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b219      	sxth	r1, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <bme280_config+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <bme280_config+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	b212      	sxth	r2, r2
 8001660:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001662:	7aba      	ldrb	r2, [r7, #10]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <bme280_config+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b252      	sxtb	r2, r2
 800166c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <bme280_config+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <bme280_config+0x270>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f2      	movs	r2, #242	@ 0xf2
 8001690:	21ec      	movs	r1, #236	@ 0xec
 8001692:	f006 fbb7 	bl	8007e04 <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <bme280_config+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <bme280_config+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <bme280_config+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <bme280_config+0x270>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2332      	movs	r3, #50	@ 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f4      	movs	r2, #244	@ 0xf4
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	f006 fb92 	bl	8007e04 <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <bme280_config+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	79db      	ldrb	r3, [r3, #7]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <bme280_config+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e003      	b.n	8001700 <bme280_config+0x274>
 80016f8:	20000230 	.word	0x20000230
 80016fc:	2000022c 	.word	0x2000022c
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <bme280_config+0x2fc>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	22f5      	movs	r2, #245	@ 0xf5
 8001722:	21ec      	movs	r1, #236	@ 0xec
 8001724:	f006 fb6e 	bl	8007e04 <HAL_I2C_Mem_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f004 fd60 	bl	80061f8 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e011      	b.n	8001762 <bme280_config+0x2d6>
        bme280_update();
 800173e:	f000 f861 	bl	8001804 <bme280_update>
        base += BME->altitude;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <bme280_config+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f004 fd4e 	bl	80061f8 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	ddea      	ble.n	800173e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <bme280_config+0x300>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001770:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001790 <bme280_config+0x304>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 800177c:	f000 f842 	bl	8001804 <bme280_update>

    UNUSED(retVal);
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000022c 	.word	0x2000022c
 800178c:	20000230 	.word	0x20000230
 8001790:	42480000 	.word	0x42480000

08001794 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <bme280_init+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <bme280_init+0x60>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <bme280_init+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <bme280_init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <bme280_init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <bme280_init+0x60>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22d0      	movs	r2, #208	@ 0xd0
 80017ce:	21ec      	movs	r1, #236	@ 0xec
 80017d0:	f006 fc12 	bl	8007ff8 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b60      	cmp	r3, #96	@ 0x60
 80017d8:	d103      	bne.n	80017e2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <bme280_init+0x6c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80017e0:	e002      	b.n	80017e8 <bme280_init+0x54>
        is_BME_ok = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <bme280_init+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000230 	.word	0x20000230
 80017f4:	2000022c 	.word	0x2000022c
 80017f8:	20001464 	.word	0x20001464
 80017fc:	20000234 	.word	0x20000234
 8001800:	20001554 	.word	0x20001554

08001804 <bme280_update>:

void bme280_update() {
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b0d2      	sub	sp, #328	@ 0x148
 800180a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800180c:	f7ff fd68 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <bme280_update+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 840d 	bne.w	8002038 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <bme280_update+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <bme280_update+0x8c>)
 8001828:	2301      	movs	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800182c:	f004 fcd8 	bl	80061e0 <HAL_GetTick>
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <bme280_update+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <bme280_update+0x88>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	e041      	b.n	80018d0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800184c:	f004 fcc8 	bl	80061e0 <HAL_GetTick>
 8001850:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001854:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <bme280_update+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd12      	ble.n	8001898 <bme280_update+0x94>
 8001872:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <bme280_update+0x88>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	e007      	b.n	800189c <bme280_update+0x98>
 800188c:	20000230 	.word	0x20000230
 8001890:	20000234 	.word	0x20000234
 8001894:	00000000 	.word	0x00000000
 8001898:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001894 <bme280_update+0x90>
 800189c:	4bda      	ldr	r3, [pc, #872]	@ (8001c08 <bme280_update+0x404>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80018a4:	4bd8      	ldr	r3, [pc, #864]	@ (8001c08 <bme280_update+0x404>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018ac:	4bd6      	ldr	r3, [pc, #856]	@ (8001c08 <bme280_update+0x404>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c0c <bme280_update+0x408>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80018bc:	4bd2      	ldr	r3, [pc, #840]	@ (8001c08 <bme280_update+0x404>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80018c4:	ee07 2a90 	vmov	s15, r2
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80018d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001c08 <bme280_update+0x404>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80018da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c08 <bme280_update+0x404>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4bc6      	ldr	r3, [pc, #792]	@ (8001c08 <bme280_update+0x404>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	12db      	asrs	r3, r3, #11
 80018fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001904:	111a      	asrs	r2, r3, #4
 8001906:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <bme280_update+0x404>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001914:	111a      	asrs	r2, r3, #4
 8001916:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <bme280_update+0x404>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	131a      	asrs	r2, r3, #12
 8001926:	4bb8      	ldr	r3, [pc, #736]	@ (8001c08 <bme280_update+0x404>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	139b      	asrs	r3, r3, #14
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800193a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800193e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001948:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3380      	adds	r3, #128	@ 0x80
 8001954:	121b      	asrs	r3, r3, #8
 8001956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800195a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <bme280_update+0x404>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c10 <bme280_update+0x40c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001976:	4ba4      	ldr	r3, [pc, #656]	@ (8001c08 <bme280_update+0x404>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001980:	657a      	str	r2, [r7, #84]	@ 0x54
 8001982:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001986:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800199c:	460b      	mov	r3, r1
 800199e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	4613      	mov	r3, r2
 80019a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 80019b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019bc:	fb03 f102 	mul.w	r1, r3, r2
 80019c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d2:	fba3 4503 	umull	r4, r5, r3, r3
 80019d6:	1953      	adds	r3, r2, r5
 80019d8:	461d      	mov	r5, r3
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <bme280_update+0x404>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019f4:	4603      	mov	r3, r0
 80019f6:	fb03 f205 	mul.w	r2, r3, r5
 80019fa:	460b      	mov	r3, r1
 80019fc:	fb04 f303 	mul.w	r3, r4, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4602      	mov	r2, r0
 8001a04:	fba4 1202 	umull	r1, r2, r4, r2
 8001a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a24:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <bme280_update+0x404>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a46:	462a      	mov	r2, r5
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	441a      	add	r2, r3
 8001a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a62:	eb02 030b 	add.w	r3, r2, fp
 8001a66:	469b      	mov	fp, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a74:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a78:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a80:	1814      	adds	r4, r2, r0
 8001a82:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a84:	414b      	adcs	r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a8c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a90:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <bme280_update+0x404>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001aba:	1814      	adds	r4, r2, r0
 8001abc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001abe:	414b      	adcs	r3, r1
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ac6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	fb03 f102 	mul.w	r1, r3, r2
 8001ad6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	18ca      	adds	r2, r1, r3
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae8:	fba3 8903 	umull	r8, r9, r3, r3
 8001aec:	eb02 0309 	add.w	r3, r2, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <bme280_update+0x404>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	fb03 f209 	mul.w	r2, r3, r9
 8001b12:	460b      	mov	r3, r1
 8001b14:	fb08 f303 	mul.w	r3, r8, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	fba8 1202 	umull	r1, r2, r8, r2
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	460a      	mov	r2, r1
 8001b26:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b40:	4623      	mov	r3, r4
 8001b42:	0a18      	lsrs	r0, r3, #8
 8001b44:	462b      	mov	r3, r5
 8001b46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1219      	asrs	r1, r3, #8
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b68:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b76:	4644      	mov	r4, r8
 8001b78:	fb04 f303 	mul.w	r3, r4, r3
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b82:	4644      	mov	r4, r8
 8001b84:	fba3 4304 	umull	r4, r3, r3, r4
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001ba8:	464c      	mov	r4, r9
 8001baa:	0323      	lsls	r3, r4, #12
 8001bac:	4644      	mov	r4, r8
 8001bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bb2:	4644      	mov	r4, r8
 8001bb4:	0322      	lsls	r2, r4, #12
 8001bb6:	1884      	adds	r4, r0, r2
 8001bb8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001bba:	eb41 0303 	adc.w	r3, r1, r3
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001bc8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bcc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001bd0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001bd4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <bme280_update+0x404>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	88db      	ldrh	r3, [r3, #6]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001be8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	e005      	b.n	8001c14 <bme280_update+0x410>
 8001c08:	20000230 	.word	0x20000230
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c20:	460a      	mov	r2, r1
 8001c22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	104a      	asrs	r2, r1, #1
 8001c40:	4629      	mov	r1, r5
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001c48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <bme280_update+0x45a>
        {
            P = 0;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c5c:	e14b      	b.n	8001ef6 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c62:	2100      	movs	r1, #0
 8001c64:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c68:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c78:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8a:	07d0      	lsls	r0, r2, #31
 8001c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c96:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	1891      	adds	r1, r2, r2
 8001ca8:	6239      	str	r1, [r7, #32]
 8001caa:	415b      	adcs	r3, r3
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1851      	adds	r1, r2, r1
 8001cb6:	61b9      	str	r1, [r7, #24]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	414b      	adcs	r3, r1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001cca:	4649      	mov	r1, r9
 8001ccc:	018b      	lsls	r3, r1, #6
 8001cce:	4641      	mov	r1, r8
 8001cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	018a      	lsls	r2, r1, #6
 8001cd8:	4641      	mov	r1, r8
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	462a      	mov	r2, r5
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d22:	4649      	mov	r1, r9
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	4641      	mov	r1, r8
 8001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	008a      	lsls	r2, r1, #2
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	4622      	mov	r2, r4
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3e:	462b      	mov	r3, r5
 8001d40:	460a      	mov	r2, r1
 8001d42:	eb42 0303 	adc.w	r3, r2, r3
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d52:	f7ff f8c7 	bl	8000ee4 <__aeabi_ldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002044 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0b50      	lsrs	r0, r2, #13
 8001d7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d82:	1359      	asrs	r1, r3, #13
 8001d84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d88:	462b      	mov	r3, r5
 8001d8a:	fb00 f203 	mul.w	r2, r0, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	fb03 f301 	mul.w	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4622      	mov	r2, r4
 8001d98:	fba2 1200 	umull	r1, r2, r2, r0
 8001d9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001da0:	460a      	mov	r2, r1
 8001da2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001db0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0b50      	lsrs	r0, r2, #13
 8001dbe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc2:	1359      	asrs	r1, r3, #13
 8001dc4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dc8:	462b      	mov	r3, r5
 8001dca:	fb00 f203 	mul.w	r2, r0, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	fb03 f301 	mul.w	r3, r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	fba2 1200 	umull	r1, r2, r2, r0
 8001ddc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001de0:	460a      	mov	r2, r1
 8001de2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dea:	4413      	add	r3, r2
 8001dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	0e4a      	lsrs	r2, r1, #25
 8001e00:	4629      	mov	r1, r5
 8001e02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e06:	4629      	mov	r1, r5
 8001e08:	164b      	asrs	r3, r1, #25
 8001e0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002044 <bme280_update+0x840>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e24:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba2 1201 	umull	r1, r2, r2, r1
 8001e44:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e48:	460a      	mov	r2, r1
 8001e4a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e52:	4413      	add	r3, r2
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e64:	4621      	mov	r1, r4
 8001e66:	0cca      	lsrs	r2, r1, #19
 8001e68:	4629      	mov	r1, r5
 8001e6a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e6e:	4629      	mov	r1, r5
 8001e70:	14cb      	asrs	r3, r1, #19
 8001e72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e76:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	1884      	adds	r4, r0, r2
 8001e80:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e82:	eb41 0303 	adc.w	r3, r1, r3
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e8c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e90:	4621      	mov	r1, r4
 8001e92:	1889      	adds	r1, r1, r2
 8001e94:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e96:	4629      	mov	r1, r5
 8001e98:	eb43 0101 	adc.w	r1, r3, r1
 8001e9c:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eaa:	4623      	mov	r3, r4
 8001eac:	0a18      	lsrs	r0, r3, #8
 8001eae:	462b      	mov	r3, r5
 8001eb0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1219      	asrs	r1, r3, #8
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <bme280_update+0x840>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	17da      	asrs	r2, r3, #31
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001ed6:	464c      	mov	r4, r9
 8001ed8:	0123      	lsls	r3, r4, #4
 8001eda:	4644      	mov	r4, r8
 8001edc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	0122      	lsls	r2, r4, #4
 8001ee4:	1884      	adds	r4, r0, r2
 8001ee6:	603c      	str	r4, [r7, #0]
 8001ee8:	eb41 0303 	adc.w	r3, r1, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001ef6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001efa:	f7fe ffb5 	bl	8000e68 <__aeabi_l2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <bme280_update+0x844>)
 8001f0c:	f7fe fcbe 	bl	800088c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <bme280_update+0x848>)
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4947      	ldr	r1, [pc, #284]	@ (8002044 <bme280_update+0x840>)
 8001f28:	680c      	ldr	r4, [r1, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe7b 	bl	8000c28 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <bme280_update+0x840>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f44:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001f48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f50:	039a      	lsls	r2, r3, #14
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <bme280_update+0x840>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <bme280_update+0x840>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <bme280_update+0x840>)
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f86:	4611      	mov	r1, r2
 8001f88:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8c:	fb01 f202 	mul.w	r2, r1, r2
 8001f90:	0a92      	lsrs	r2, r2, #10
 8001f92:	492c      	ldr	r1, [pc, #176]	@ (8002044 <bme280_update+0x840>)
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	7f09      	ldrb	r1, [r1, #28]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001fa0:	fb00 f101 	mul.w	r1, r0, r1
 8001fa4:	0ac9      	lsrs	r1, r1, #11
 8001fa6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	0a92      	lsrs	r2, r2, #10
 8001fb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <bme280_update+0x840>)
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	6809      	ldr	r1, [r1, #0]
 8001fba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001fc6:	0b92      	lsrs	r2, r2, #14
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fda:	0bd2      	lsrs	r2, r2, #15
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <bme280_update+0x840>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	7e12      	ldrb	r2, [r2, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ffe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002002:	bf28      	it	cs
 8002004:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	0b1b      	lsrs	r3, r3, #12
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <bme280_update+0x840>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002050 <bme280_update+0x84c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800202a:	f7ff f9dd 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <bme280_update+0x840>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002038:	bf00      	nop
 800203a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002044:	20000230 	.word	0x20000230
 8002048:	40700000 	.word	0x40700000
 800204c:	40590000 	.word	0x40590000
 8002050:	44800000 	.word	0x44800000

08002054 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 800206c:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <bmi088_init+0xa8>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002072:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <bmi088_init+0xac>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002084:	2101      	movs	r1, #1
 8002086:	2018      	movs	r0, #24
 8002088:	f009 fafc 	bl	800b684 <calloc>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68d8      	ldr	r0, [r3, #12]
 8002098:	2332      	movs	r3, #50	@ 0x32
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	2301      	movs	r3, #1
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	2200      	movs	r2, #0
 80020aa:	2130      	movs	r1, #48	@ 0x30
 80020ac:	f005 ffa4 	bl	8007ff8 <HAL_I2C_Mem_Read>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68d8      	ldr	r0, [r3, #12]
 80020b8:	2332      	movs	r3, #50	@ 0x32
 80020ba:	9302      	str	r3, [sp, #8]
 80020bc:	2301      	movs	r3, #1
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	3301      	adds	r3, #1
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2301      	movs	r3, #1
 80020ca:	2200      	movs	r2, #0
 80020cc:	21d0      	movs	r1, #208	@ 0xd0
 80020ce:	f005 ff93 	bl	8007ff8 <HAL_I2C_Mem_Read>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	2b1e      	cmp	r3, #30
 80020da:	d003      	beq.n	80020e4 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d003      	beq.n	80020f2 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000235 	.word	0x20000235
 8002100:	20000236 	.word	0x20000236

08002104 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af04      	add	r7, sp, #16
 800210a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 fdcd 	bl	8006cb2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800211e:	4618      	mov	r0, r3
 8002120:	f004 fdc7 	bl	8006cb2 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002128:	2301      	movs	r3, #1
 800212a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68d8      	ldr	r0, [r3, #12]
 8002130:	2364      	movs	r3, #100	@ 0x64
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	227c      	movs	r2, #124	@ 0x7c
 8002142:	2130      	movs	r1, #48	@ 0x30
 8002144:	f005 fe5e 	bl	8007e04 <HAL_I2C_Mem_Write>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	4313      	orrs	r3, r2
 8002150:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68d8      	ldr	r0, [r3, #12]
 800215a:	2364      	movs	r3, #100	@ 0x64
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	2301      	movs	r3, #1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f107 030c 	add.w	r3, r7, #12
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	227d      	movs	r2, #125	@ 0x7d
 800216c:	2130      	movs	r1, #48	@ 0x30
 800216e:	f005 fe49 	bl	8007e04 <HAL_I2C_Mem_Write>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	4313      	orrs	r3, r2
 800217a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 800217c:	2014      	movs	r0, #20
 800217e:	f004 f83b 	bl	80061f8 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002182:	23b6      	movs	r3, #182	@ 0xb6
 8002184:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68d8      	ldr	r0, [r3, #12]
 800218a:	2364      	movs	r3, #100	@ 0x64
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	2301      	movs	r3, #1
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	227e      	movs	r2, #126	@ 0x7e
 800219c:	2130      	movs	r1, #48	@ 0x30
 800219e:	f005 fe31 	bl	8007e04 <HAL_I2C_Mem_Write>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <bmi088_config+0xb4>
 80021b2:	4bb4      	ldr	r3, [pc, #720]	@ (8002484 <bmi088_config+0x380>)
 80021b4:	22a1      	movs	r2, #161	@ 0xa1
 80021b6:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021b8:	200a      	movs	r0, #10
 80021ba:	f004 f81d 	bl	80061f8 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80021be:	23b0      	movs	r3, #176	@ 0xb0
 80021c0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68d8      	ldr	r0, [r3, #12]
 80021c6:	2364      	movs	r3, #100	@ 0x64
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	227e      	movs	r2, #126	@ 0x7e
 80021d8:	2130      	movs	r1, #48	@ 0x30
 80021da:	f005 fe13 	bl	8007e04 <HAL_I2C_Mem_Write>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <bmi088_config+0xf0>
 80021ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002484 <bmi088_config+0x380>)
 80021f0:	22a6      	movs	r2, #166	@ 0xa6
 80021f2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021f4:	200a      	movs	r0, #10
 80021f6:	f003 ffff 	bl	80061f8 <HAL_Delay>

	buf[0] = GYRO_RESET;
 80021fa:	23b6      	movs	r3, #182	@ 0xb6
 80021fc:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68d8      	ldr	r0, [r3, #12]
 8002202:	2364      	movs	r3, #100	@ 0x64
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	2214      	movs	r2, #20
 8002214:	21d0      	movs	r1, #208	@ 0xd0
 8002216:	f005 fdf5 	bl	8007e04 <HAL_I2C_Mem_Write>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4313      	orrs	r3, r2
 8002222:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <bmi088_config+0x12c>
 800222a:	4b96      	ldr	r3, [pc, #600]	@ (8002484 <bmi088_config+0x380>)
 800222c:	22ab      	movs	r2, #171	@ 0xab
 800222e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002230:	200a      	movs	r0, #10
 8002232:	f003 ffe1 	bl	80061f8 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7a9b      	ldrb	r3, [r3, #10]
 800223a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68d8      	ldr	r0, [r3, #12]
 8002240:	2364      	movs	r3, #100	@ 0x64
 8002242:	9302      	str	r3, [sp, #8]
 8002244:	2301      	movs	r3, #1
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	220f      	movs	r2, #15
 8002252:	21d0      	movs	r1, #208	@ 0xd0
 8002254:	f005 fdd6 	bl	8007e04 <HAL_I2C_Mem_Write>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	4313      	orrs	r3, r2
 8002260:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <bmi088_config+0x16a>
 8002268:	4b86      	ldr	r3, [pc, #536]	@ (8002484 <bmi088_config+0x380>)
 800226a:	22b1      	movs	r2, #177	@ 0xb1
 800226c:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7a5b      	ldrb	r3, [r3, #9]
 8002272:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68d8      	ldr	r0, [r3, #12]
 8002278:	2314      	movs	r3, #20
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2301      	movs	r3, #1
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	2210      	movs	r2, #16
 800228a:	21d0      	movs	r1, #208	@ 0xd0
 800228c:	f005 fdba 	bl	8007e04 <HAL_I2C_Mem_Write>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <bmi088_config+0x1a2>
 80022a0:	4b78      	ldr	r3, [pc, #480]	@ (8002484 <bmi088_config+0x380>)
 80022a2:	22b5      	movs	r2, #181	@ 0xb5
 80022a4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7a1b      	ldrb	r3, [r3, #8]
 80022aa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	2314      	movs	r3, #20
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	2211      	movs	r2, #17
 80022c2:	21d0      	movs	r1, #208	@ 0xd0
 80022c4:	f005 fd9e 	bl	8007e04 <HAL_I2C_Mem_Write>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <bmi088_config+0x1da>
 80022d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <bmi088_config+0x380>)
 80022da:	22b9      	movs	r2, #185	@ 0xb9
 80022dc:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80022de:	2014      	movs	r0, #20
 80022e0:	f003 ff8a 	bl	80061f8 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68d8      	ldr	r0, [r3, #12]
 80022ec:	2314      	movs	r3, #20
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2301      	movs	r3, #1
 80022fc:	2215      	movs	r2, #21
 80022fe:	21d0      	movs	r1, #208	@ 0xd0
 8002300:	f005 fd80 	bl	8007e04 <HAL_I2C_Mem_Write>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4313      	orrs	r3, r2
 800230c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <bmi088_config+0x216>
 8002314:	4b5b      	ldr	r3, [pc, #364]	@ (8002484 <bmi088_config+0x380>)
 8002316:	22bf      	movs	r2, #191	@ 0xbf
 8002318:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800231a:	2305      	movs	r3, #5
 800231c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68d8      	ldr	r0, [r3, #12]
 8002322:	2314      	movs	r3, #20
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	2216      	movs	r2, #22
 8002334:	21d0      	movs	r1, #208	@ 0xd0
 8002336:	f005 fd65 	bl	8007e04 <HAL_I2C_Mem_Write>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	4313      	orrs	r3, r2
 8002342:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <bmi088_config+0x24c>
 800234a:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <bmi088_config+0x380>)
 800234c:	22c3      	movs	r2, #195	@ 0xc3
 800234e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002350:	2381      	movs	r3, #129	@ 0x81
 8002352:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68d8      	ldr	r0, [r3, #12]
 8002358:	2314      	movs	r3, #20
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	2301      	movs	r3, #1
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	2218      	movs	r2, #24
 800236a:	21d0      	movs	r1, #208	@ 0xd0
 800236c:	f005 fd4a 	bl	8007e04 <HAL_I2C_Mem_Write>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4313      	orrs	r3, r2
 8002378:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <bmi088_config+0x282>
 8002380:	4b40      	ldr	r3, [pc, #256]	@ (8002484 <bmi088_config+0x380>)
 8002382:	22c7      	movs	r2, #199	@ 0xc7
 8002384:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002386:	2304      	movs	r3, #4
 8002388:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68d8      	ldr	r0, [r3, #12]
 800238e:	2314      	movs	r3, #20
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2301      	movs	r3, #1
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	227d      	movs	r2, #125	@ 0x7d
 80023a0:	2130      	movs	r1, #48	@ 0x30
 80023a2:	f005 fd2f 	bl	8007e04 <HAL_I2C_Mem_Write>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <bmi088_config+0x2b8>
 80023b6:	4b33      	ldr	r3, [pc, #204]	@ (8002484 <bmi088_config+0x380>)
 80023b8:	22cc      	movs	r2, #204	@ 0xcc
 80023ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023bc:	2008      	movs	r0, #8
 80023be:	f003 ff1b 	bl	80061f8 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68d8      	ldr	r0, [r3, #12]
 80023cc:	2314      	movs	r3, #20
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2301      	movs	r3, #1
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	227c      	movs	r2, #124	@ 0x7c
 80023de:	2130      	movs	r1, #48	@ 0x30
 80023e0:	f005 fd10 	bl	8007e04 <HAL_I2C_Mem_Write>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <bmi088_config+0x2f6>
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <bmi088_config+0x380>)
 80023f6:	22d1      	movs	r2, #209	@ 0xd1
 80023f8:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023fa:	2008      	movs	r0, #8
 80023fc:	f003 fefc 	bl	80061f8 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	799b      	ldrb	r3, [r3, #6]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	b25a      	sxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	79db      	ldrb	r3, [r3, #7]
 800240c:	b25b      	sxtb	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b25b      	sxtb	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68d8      	ldr	r0, [r3, #12]
 800241a:	2314      	movs	r3, #20
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	2301      	movs	r3, #1
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	2130      	movs	r1, #48	@ 0x30
 800242e:	f005 fce9 	bl	8007e04 <HAL_I2C_Mem_Write>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	4313      	orrs	r3, r2
 800243a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <bmi088_config+0x344>
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <bmi088_config+0x380>)
 8002444:	22d6      	movs	r2, #214	@ 0xd6
 8002446:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	795b      	ldrb	r3, [r3, #5]
 800244c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68d8      	ldr	r0, [r3, #12]
 8002452:	2314      	movs	r3, #20
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	2301      	movs	r3, #1
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	2241      	movs	r2, #65	@ 0x41
 8002464:	2130      	movs	r1, #48	@ 0x30
 8002466:	f005 fccd 	bl	8007e04 <HAL_I2C_Mem_Write>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	4313      	orrs	r3, r2
 8002472:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <bmi088_config+0x384>
 800247a:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <bmi088_config+0x380>)
 800247c:	22da      	movs	r2, #218	@ 0xda
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e002      	b.n	8002488 <bmi088_config+0x384>
 8002482:	bf00      	nop
 8002484:	20000238 	.word	0x20000238

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002488:	230a      	movs	r3, #10
 800248a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68d8      	ldr	r0, [r3, #12]
 8002490:	2314      	movs	r3, #20
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2301      	movs	r3, #1
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	2253      	movs	r2, #83	@ 0x53
 80024a2:	2130      	movs	r1, #48	@ 0x30
 80024a4:	f005 fcae 	bl	8007e04 <HAL_I2C_Mem_Write>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80024b2:	2304      	movs	r3, #4
 80024b4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68d8      	ldr	r0, [r3, #12]
 80024ba:	2314      	movs	r3, #20
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2301      	movs	r3, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	2258      	movs	r2, #88	@ 0x58
 80024cc:	2130      	movs	r1, #48	@ 0x30
 80024ce:	f005 fc99 	bl	8007e04 <HAL_I2C_Mem_Write>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4313      	orrs	r3, r2
 80024da:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 fbd7 	bl	8006c96 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fbd1 	bl	8006c96 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 80024f4:	2046      	movs	r0, #70	@ 0x46
 80024f6:	f003 fe7f 	bl	80061f8 <HAL_Delay>
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	0000      	movs	r0, r0
	...

08002508 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b092      	sub	sp, #72	@ 0x48
 800250c:	af04      	add	r7, sp, #16
 800250e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 820d 	beq.w	800293a <bmi088_update+0x432>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68d8      	ldr	r0, [r3, #12]
 8002524:	2314      	movs	r3, #20
 8002526:	9302      	str	r3, [sp, #8]
 8002528:	2309      	movs	r3, #9
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	2212      	movs	r2, #18
 8002536:	2130      	movs	r1, #48	@ 0x30
 8002538:	f005 fd5e 	bl	8007ff8 <HAL_I2C_Mem_Read>
 800253c:	4603      	mov	r3, r0
 800253e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68d8      	ldr	r0, [r3, #12]
 8002546:	2314      	movs	r3, #20
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	2302      	movs	r3, #2
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	2222      	movs	r2, #34	@ 0x22
 8002558:	2130      	movs	r1, #48	@ 0x30
 800255a:	f005 fd4d 	bl	8007ff8 <HAL_I2C_Mem_Read>
 800255e:	4603      	mov	r3, r0
 8002560:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 8002564:	7c3b      	ldrb	r3, [r7, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	b21a      	sxth	r2, r3
 800256a:	7c7b      	ldrb	r3, [r7, #17]
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	b21b      	sxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b21b      	sxth	r3, r3
 8002576:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 800257c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002582:	d305      	bcc.n	8002590 <bmi088_update+0x88>
				Temp_int11 = Temp_uint11 - 2048;
 8002584:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002586:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800258a:	b29b      	uxth	r3, r3
 800258c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800258e:	e023      	b.n	80025d8 <bmi088_update+0xd0>
			}
			else{
				Temp_int11 = Temp_uint11;
 8002590:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002592:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 8002594:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a0:	ee17 0a90 	vmov	r0, s15
 80025a4:	f7fd fff0 	bl	8000588 <__aeabi_f2d>
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80025b0:	f7fe f842 	bl	8000638 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	4bcf      	ldr	r3, [pc, #828]	@ (8002900 <bmi088_update+0x3f8>)
 80025c2:	f7fd fe83 	bl	80002cc <__adddf3>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fb2b 	bl	8000c28 <__aeabi_d2f>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 80025d8:	7f3b      	ldrb	r3, [r7, #28]
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	7efb      	ldrb	r3, [r7, #27]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	4313      	orrs	r3, r2
 80025e2:	7eba      	ldrb	r2, [r7, #26]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 80025e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	ee17 0a90 	vmov	r0, s15
 80025f6:	f7fd ffc7 	bl	8000588 <__aeabi_f2d>
 80025fa:	a3b9      	add	r3, pc, #740	@ (adr r3, 80028e0 <bmi088_update+0x3d8>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f81a 	bl	8000638 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	a3b6      	add	r3, pc, #728	@ (adr r3, 80028e8 <bmi088_update+0x3e0>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fe f93b 	bl	800088c <__aeabi_ddiv>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe fb03 	bl	8000c28 <__aeabi_d2f>
 8002622:	4602      	mov	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002628:	7e7b      	ldrb	r3, [r7, #25]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	b21a      	sxth	r2, r3
 800262e:	7e3b      	ldrb	r3, [r7, #24]
 8002630:	b21b      	sxth	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21a      	sxth	r2, r3
 800263c:	7dbb      	ldrb	r3, [r7, #22]
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 8002644:	7d7b      	ldrb	r3, [r7, #21]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21a      	sxth	r2, r3
 800264a:	7d3b      	ldrb	r3, [r7, #20]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 8002652:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265e:	ee17 0a90 	vmov	r0, s15
 8002662:	f7fd ff91 	bl	8000588 <__aeabi_f2d>
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4ba6      	ldr	r3, [pc, #664]	@ (8002904 <bmi088_update+0x3fc>)
 800266c:	f7fe f90e 	bl	800088c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4ba2      	ldr	r3, [pc, #648]	@ (8002908 <bmi088_update+0x400>)
 800267e:	f7fd ffdb 	bl	8000638 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b9f      	ldr	r3, [pc, #636]	@ (800290c <bmi088_update+0x404>)
 8002690:	f7fd ffd2 	bl	8000638 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	795b      	ldrb	r3, [r3, #5]
 80026a0:	3301      	adds	r3, #1
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026aa:	ee17 0a90 	vmov	r0, s15
 80026ae:	f7fd ff6b 	bl	8000588 <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	ec43 2b11 	vmov	d1, r2, r3
 80026ba:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80028f0 <bmi088_update+0x3e8>
 80026be:	f00d ffa3 	bl	8010608 <pow>
 80026c2:	ec53 2b10 	vmov	r2, r3, d0
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd ffb5 	bl	8000638 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b8d      	ldr	r3, [pc, #564]	@ (8002910 <bmi088_update+0x408>)
 80026dc:	f7fd fdf4 	bl	80002c8 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	a383      	add	r3, pc, #524	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ffa3 	bl	8000638 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <bmi088_update+0x400>)
 8002700:	f7fe f8c4 	bl	800088c <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa8c 	bl	8000c28 <__aeabi_d2f>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002716:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002722:	ee17 0a90 	vmov	r0, s15
 8002726:	f7fd ff2f 	bl	8000588 <__aeabi_f2d>
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <bmi088_update+0x3fc>)
 8002730:	f7fe f8ac 	bl	800088c <__aeabi_ddiv>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b71      	ldr	r3, [pc, #452]	@ (8002908 <bmi088_update+0x400>)
 8002742:	f7fd ff79 	bl	8000638 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b6e      	ldr	r3, [pc, #440]	@ (800290c <bmi088_update+0x404>)
 8002754:	f7fd ff70 	bl	8000638 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4614      	mov	r4, r2
 800275e:	461d      	mov	r5, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	795b      	ldrb	r3, [r3, #5]
 8002764:	3301      	adds	r3, #1
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800276e:	ee17 0a90 	vmov	r0, s15
 8002772:	f7fd ff09 	bl	8000588 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ec43 2b11 	vmov	d1, r2, r3
 800277e:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 80028f0 <bmi088_update+0x3e8>
 8002782:	f00d ff41 	bl	8010608 <pow>
 8002786:	ec53 2b10 	vmov	r2, r3, d0
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd ff53 	bl	8000638 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b5d      	ldr	r3, [pc, #372]	@ (8002914 <bmi088_update+0x40c>)
 80027a0:	f7fd fd94 	bl	80002cc <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	a352      	add	r3, pc, #328	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <bmi088_update+0x400>)
 80027c4:	f7fe f862 	bl	800088c <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe fa2a 	bl	8000c28 <__aeabi_d2f>
 80027d4:	4602      	mov	r2, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 80027da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e6:	ee17 0a90 	vmov	r0, s15
 80027ea:	f7fd fecd 	bl	8000588 <__aeabi_f2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b44      	ldr	r3, [pc, #272]	@ (8002904 <bmi088_update+0x3fc>)
 80027f4:	f7fe f84a 	bl	800088c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <bmi088_update+0x400>)
 8002806:	f7fd ff17 	bl	8000638 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <bmi088_update+0x404>)
 8002818:	f7fd ff0e 	bl	8000638 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	795b      	ldrb	r3, [r3, #5]
 8002828:	3301      	adds	r3, #1
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd fea7 	bl	8000588 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ec43 2b11 	vmov	d1, r2, r3
 8002842:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 80028f0 <bmi088_update+0x3e8>
 8002846:	f00d fedf 	bl	8010608 <pow>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4620      	mov	r0, r4
 8002850:	4629      	mov	r1, r5
 8002852:	f7fd fef1 	bl	8000638 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <bmi088_update+0x408>)
 8002864:	f7fd fd32 	bl	80002cc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	a321      	add	r3, pc, #132	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <bmi088_update+0x400>)
 8002888:	f7fe f800 	bl	800088c <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f7fe f9c8 	bl	8000c28 <__aeabi_d2f>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <bmi088_update+0x410>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03c      	beq.n	8002920 <bmi088_update+0x418>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	d502      	bpl.n	80028c6 <bmi088_update+0x3be>
 80028c0:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800291c <bmi088_update+0x414>
 80028c4:	e007      	b.n	80028d6 <bmi088_update+0x3ce>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 80028dc:	e023      	b.n	8002926 <bmi088_update+0x41e>
 80028de:	bf00      	nop
 80028e0:	00000000 	.word	0x00000000
 80028e4:	40438800 	.word	0x40438800
 80028e8:	00000000 	.word	0x00000000
 80028ec:	412e8480 	.word	0x412e8480
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40000000 	.word	0x40000000
 80028f8:	51eb851f 	.word	0x51eb851f
 80028fc:	40239eb8 	.word	0x40239eb8
 8002900:	40370000 	.word	0x40370000
 8002904:	40e00000 	.word	0x40e00000
 8002908:	408f4000 	.word	0x408f4000
 800290c:	3ff80000 	.word	0x3ff80000
 8002910:	40100000 	.word	0x40100000
 8002914:	402e0000 	.word	0x402e0000
 8002918:	20000236 	.word	0x20000236
 800291c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002920:	4bd1      	ldr	r3, [pc, #836]	@ (8002c68 <bmi088_update+0x760>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002934:	4bcd      	ldr	r3, [pc, #820]	@ (8002c6c <bmi088_update+0x764>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81b1 	beq.w	8002ca6 <bmi088_update+0x79e>
 8002944:	4bc9      	ldr	r3, [pc, #804]	@ (8002c6c <bmi088_update+0x764>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 81ac 	beq.w	8002ca6 <bmi088_update+0x79e>
		{
			if(is_starded){
 800294e:	4bc6      	ldr	r3, [pc, #792]	@ (8002c68 <bmi088_update+0x760>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 819f 	beq.w	8002c96 <bmi088_update+0x78e>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68d8      	ldr	r0, [r3, #12]
 800295c:	230a      	movs	r3, #10
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	2306      	movs	r3, #6
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2301      	movs	r3, #1
 800296c:	2202      	movs	r2, #2
 800296e:	21d0      	movs	r1, #208	@ 0xd0
 8002970:	f005 fb42 	bl	8007ff8 <HAL_I2C_Mem_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 800297a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8190 	bne.w	8002ca4 <bmi088_update+0x79c>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 8002984:	7a7b      	ldrb	r3, [r7, #9]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b21a      	sxth	r2, r3
 800298a:	7a3b      	ldrb	r3, [r7, #8]
 800298c:	b21b      	sxth	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b21a      	sxth	r2, r3
 8002998:	7abb      	ldrb	r3, [r7, #10]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	7b3b      	ldrb	r3, [r7, #12]
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	4313      	orrs	r3, r2
 80029ac:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80029ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ba:	ee17 0a90 	vmov	r0, s15
 80029be:	f7fd fde3 	bl	8000588 <__aeabi_f2d>
 80029c2:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd ff60 	bl	800088c <__aeabi_ddiv>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7a9b      	ldrb	r3, [r3, #10]
 80029d8:	461a      	mov	r2, r3
 80029da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029de:	4113      	asrs	r3, r2
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e8:	ee17 0a90 	vmov	r0, s15
 80029ec:	f7fd fdcc 	bl	8000588 <__aeabi_f2d>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fe1e 	bl	8000638 <__aeabi_dmul>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fdbc 	bl	8000588 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fd fc56 	bl	80002c8 <__aeabi_dsub>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	a38e      	add	r3, pc, #568	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fe05 	bl	8000638 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe f8f7 	bl	8000c28 <__aeabi_d2f>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002a40:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	ee17 0a90 	vmov	r0, s15
 8002a50:	f7fd fd9a 	bl	8000588 <__aeabi_f2d>
 8002a54:	a380      	add	r3, pc, #512	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd ff17 	bl	800088c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	461d      	mov	r5, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7a9b      	ldrb	r3, [r3, #10]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a70:	4113      	asrs	r3, r2
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd83 	bl	8000588 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd fdd5 	bl	8000638 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4614      	mov	r4, r2
 8002a94:	461d      	mov	r5, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd73 	bl	8000588 <__aeabi_f2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f7fd fc0d 	bl	80002c8 <__aeabi_dsub>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	a36a      	add	r3, pc, #424	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fdbc 	bl	8000638 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f8ae 	bl	8000c28 <__aeabi_d2f>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002ad2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ade:	ee17 0a90 	vmov	r0, s15
 8002ae2:	f7fd fd51 	bl	8000588 <__aeabi_f2d>
 8002ae6:	a35c      	add	r3, pc, #368	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fece 	bl	800088c <__aeabi_ddiv>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7a9b      	ldrb	r3, [r3, #10]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b02:	4113      	asrs	r3, r2
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fd3a 	bl	8000588 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd fd8c 	bl	8000638 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd2a 	bl	8000588 <__aeabi_f2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4620      	mov	r0, r4
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	f7fd fbc4 	bl	80002c8 <__aeabi_dsub>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	a345      	add	r3, pc, #276	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd73 	bl	8000638 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f865 	bl	8000c28 <__aeabi_d2f>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b70:	eef1 6a67 	vneg.f32	s13, s15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ed93 6a08 	vldr	s12, [r3, #32]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002b86:	eef1 7a67 	vneg.f32	s15, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002b96:	eeb0 3a64 	vmov.f32	s6, s9
 8002b9a:	eef0 2a45 	vmov.f32	s5, s10
 8002b9e:	eeb0 2a67 	vmov.f32	s4, s15
 8002ba2:	eef0 1a65 	vmov.f32	s3, s11
 8002ba6:	eeb0 1a46 	vmov.f32	s2, s12
 8002baa:	eef0 0a66 	vmov.f32	s1, s13
 8002bae:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb2:	f001 fd9f 	bl	80046f4 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002bb6:	f002 fb39 	bl	800522c <quaternionToYaw>
 8002bba:	eef0 7a40 	vmov.f32	s15, s0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002bc4:	f002 fb90 	bl	80052e8 <quaternionToPitch>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002bd2:	f002 fbc1 	bl	8005358 <quaternionToRoll>
 8002bd6:	eef0 7a40 	vmov.f32	s15, s0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002be0:	f002 f9fc 	bl	8004fdc <quaternionToThetaZ>
 8002be4:	eef0 7a40 	vmov.f32	s15, s0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002bee:	f001 fb6d 	bl	80042cc <quaternionToYawDegree1>
 8002bf2:	eef0 7a40 	vmov.f32	s15, s0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002bfc:	f002 fa7e 	bl	80050fc <quaternionToPitchDegree>
 8002c00:	eef0 7a40 	vmov.f32	s15, s0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002c0a:	f002 fac7 	bl	800519c <quaternionToRollDegree>
 8002c0e:	eef0 7a40 	vmov.f32	s15, s0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c24:	eef1 7a67 	vneg.f32	s15, s15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002c34:	eef0 1a46 	vmov.f32	s3, s12
 8002c38:	eeb0 1a66 	vmov.f32	s2, s13
 8002c3c:	eef0 0a67 	vmov.f32	s1, s15
 8002c40:	eeb0 0a47 	vmov.f32	s0, s14
 8002c44:	f001 f928 	bl	8003e98 <ekf_predict>
				BMI->datas.yaw1 = quaternionToYaw1();
 8002c48:	f001 fa4c 	bl	80040e4 <quaternionToYaw1>
 8002c4c:	eef0 7a40 	vmov.f32	s15, s0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	e00d      	b.n	8002c70 <bmi088_update+0x768>
 8002c54:	f3af 8000 	nop.w
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	40dfffc0 	.word	0x40dfffc0
 8002c60:	a0000000 	.word	0xa0000000
 8002c64:	3f91df46 	.word	0x3f91df46
 8002c68:	20000236 	.word	0x20000236
 8002c6c:	20000235 	.word	0x20000235
 8002c70:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002c74:	f001 fa94 	bl	80041a0 <quaternionToPitch1>
 8002c78:	eef0 7a40 	vmov.f32	s15, s0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002c82:	f001 fac5 	bl	8004210 <quaternionToRoll1>
 8002c86:	eef0 7a40 	vmov.f32	s15, s0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <bmi088_update+0x7a4>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <bmi088_update+0x7a8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <bmi088_update+0x79e>
					return;
 8002ca4:	bf00      	nop
		}
}
 8002ca6:	3738      	adds	r7, #56	@ 0x38
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cac:	20000237 	.word	0x20000237
 8002cb0:	20000235 	.word	0x20000235

08002cb4 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e01f      	b.n	8002d4e <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	e016      	b.n	8002d42 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d101      	bne.n	8002d20 <KalmanFilter_Init+0x38>
 8002d1c:	491b      	ldr	r1, [pc, #108]	@ (8002d8c <KalmanFilter_Init+0xa4>)
 8002d1e:	e001      	b.n	8002d24 <KalmanFilter_Init+0x3c>
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4413      	add	r3, r2
 8002d32:	3302      	adds	r3, #2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4403      	add	r3, r0
 8002d38:	3304      	adds	r3, #4
 8002d3a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	dde5      	ble.n	8002d14 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	dddc      	ble.n	8002d0e <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0e      	ldr	r2, [pc, #56]	@ (8002d90 <KalmanFilter_Init+0xa8>)
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d94 <KalmanFilter_Init+0xac>)
 8002d5e:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0d      	ldr	r2, [pc, #52]	@ (8002d98 <KalmanFilter_Init+0xb0>)
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	42c80000 	.word	0x42c80000
 8002d90:	3c23d70a 	.word	0x3c23d70a
 8002d94:	3ba3d70a 	.word	0x3ba3d70a
 8002d98:	40a00000 	.word	0x40a00000

08002d9c <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	huart_gnss = huart_gnss_;
 8002da4:	4a07      	ldr	r2, [pc, #28]	@ (8002dc4 <L86_GNSS_Init+0x28>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <L86_GNSS_Init+0x28>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002db2:	4905      	ldr	r1, [pc, #20]	@ (8002dc8 <L86_GNSS_Init+0x2c>)
 8002db4:	4618      	mov	r0, r3
 8002db6:	f007 fae7 	bl	800a388 <HAL_UART_Receive_DMA>
}
 8002dba:	bf00      	nop
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000023c 	.word	0x2000023c
 8002dc8:	20000240 	.word	0x20000240

08002dcc <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HAL_UART_RxHalfCpltCallback+0x38>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d10e      	bne.n	8002dfc <HAL_UART_RxHalfCpltCallback+0x30>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002dde:	b672      	cpsid	i
}
 8002de0:	bf00      	nop
	{
		// Disable interrupts briefly to prevent race condition
		__disable_irq();
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 8002de2:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002de6:	4808      	ldr	r0, [pc, #32]	@ (8002e08 <HAL_UART_RxHalfCpltCallback+0x3c>)
 8002de8:	f000 f858 	bl	8002e9c <process_data>
		active_buffer = 0;
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <HAL_UART_RxHalfCpltCallback+0x40>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	701a      	strb	r2, [r3, #0]
		buffer_ready_flag = 1;
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <HAL_UART_RxHalfCpltCallback+0x44>)
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002df8:	b662      	cpsie	i
}
 8002dfa:	bf00      	nop
		__enable_irq();
	}
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	2000023c 	.word	0x2000023c
 8002e08:	20000240 	.word	0x20000240
 8002e0c:	20001051 	.word	0x20001051
 8002e10:	20001050 	.word	0x20001050

08002e14 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e4c <HAL_UART_RxCpltCallback+0x38>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d10e      	bne.n	8002e44 <HAL_UART_RxCpltCallback+0x30>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e26:	b672      	cpsid	i
}
 8002e28:	bf00      	nop
	{
		// Disable interrupts briefly to prevent race condition
		__disable_irq();
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 8002e2a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002e2e:	4808      	ldr	r0, [pc, #32]	@ (8002e50 <HAL_UART_RxCpltCallback+0x3c>)
 8002e30:	f000 f834 	bl	8002e9c <process_data>
		active_buffer = 1;
 8002e34:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <HAL_UART_RxCpltCallback+0x40>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]
		buffer_ready_flag = 1;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	@ (8002e58 <HAL_UART_RxCpltCallback+0x44>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e40:	b662      	cpsie	i
}
 8002e42:	bf00      	nop
		__enable_irq();
	}
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	2000023c 	.word	0x2000023c
 8002e50:	200006f0 	.word	0x200006f0
 8002e54:	20001051 	.word	0x20001051
 8002e58:	20001050 	.word	0x20001050

08002e5c <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	// Only process if new data is available
	if (buffer_ready_flag)
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <L86_GNSS_Update+0x3c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00f      	beq.n	8002e8e <L86_GNSS_Update+0x32>
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6e:	b672      	cpsid	i
}
 8002e70:	bf00      	nop
	{
		__disable_irq();
		buffer_ready_flag = 0;
 8002e72:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <L86_GNSS_Update+0x3c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e78:	b662      	cpsie	i
}
 8002e7a:	bf00      	nop
		__enable_irq();
		
		get_GNRMC_data(gps_data_);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f82d 	bl	8002edc <get_GNRMC_data>
		get_GPGGA_data(gps_data_);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8cc 	bl	8003020 <get_GPGGA_data>
		format_data(gps_data_);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f951 	bl	8003130 <format_data>
	}
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20001050 	.word	0x20001050

08002e9c <process_data>:

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	807b      	strh	r3, [r7, #2]
	// Ensure null termination for string functions
	memcpy(gps_buffer, rx_buffer, buffer_size);
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	480a      	ldr	r0, [pc, #40]	@ (8002ed8 <process_data+0x3c>)
 8002eb0:	f009 fd25 	bl	800c8fe <memcpy>
	
	// Add null termination at the end to prevent buffer overflow
	if (buffer_size < BUFFER_SIZE) {
 8002eb4:	887b      	ldrh	r3, [r7, #2]
 8002eb6:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8002eba:	d204      	bcs.n	8002ec6 <process_data+0x2a>
		gps_buffer[buffer_size] = '\0';
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	4a06      	ldr	r2, [pc, #24]	@ (8002ed8 <process_data+0x3c>)
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	54d1      	strb	r1, [r2, r3]
	} else {
		gps_buffer[BUFFER_SIZE - 1] = '\0';
	}
}
 8002ec4:	e003      	b.n	8002ece <process_data+0x32>
		gps_buffer[BUFFER_SIZE - 1] = '\0';
 8002ec6:	4b04      	ldr	r3, [pc, #16]	@ (8002ed8 <process_data+0x3c>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f883 24af 	strb.w	r2, [r3, #1199]	@ 0x4af
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000ba0 	.word	0x20000ba0

08002edc <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 8002edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ede:	b08d      	sub	sp, #52	@ 0x34
 8002ee0:	af08      	add	r7, sp, #32
 8002ee2:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 8002ee4:	4945      	ldr	r1, [pc, #276]	@ (8002ffc <get_GNRMC_data+0x120>)
 8002ee6:	4846      	ldr	r0, [pc, #280]	@ (8003000 <get_GNRMC_data+0x124>)
 8002ee8:	f009 fc6b 	bl	800c7c2 <strstr>
 8002eec:	4603      	mov	r3, r0
 8002eee:	4a45      	ldr	r2, [pc, #276]	@ (8003004 <get_GNRMC_data+0x128>)
 8002ef0:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && (gps_GNRMC_start_point + 17) < (gps_buffer + BUFFER_SIZE))
 8002ef2:	4b44      	ldr	r3, [pc, #272]	@ (8003004 <get_GNRMC_data+0x128>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <get_GNRMC_data+0x4c>
 8002efa:	4b42      	ldr	r3, [pc, #264]	@ (8003004 <get_GNRMC_data+0x128>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3311      	adds	r3, #17
 8002f00:	4a41      	ldr	r2, [pc, #260]	@ (8003008 <get_GNRMC_data+0x12c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d210      	bcs.n	8002f28 <get_GNRMC_data+0x4c>
	{
		if (*(gps_GNRMC_start_point + 17) == VALID)
 8002f06:	4b3f      	ldr	r3, [pc, #252]	@ (8003004 <get_GNRMC_data+0x128>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	3311      	adds	r3, #17
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b41      	cmp	r3, #65	@ 0x41
 8002f10:	d103      	bne.n	8002f1a <get_GNRMC_data+0x3e>
		{
			is_data_valid = 1;
 8002f12:	4b3e      	ldr	r3, [pc, #248]	@ (800300c <get_GNRMC_data+0x130>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	701a      	strb	r2, [r3, #0]
		if (*(gps_GNRMC_start_point + 17) == VALID)
 8002f18:	e00c      	b.n	8002f34 <get_GNRMC_data+0x58>
		}
		else
		{
			is_data_valid = 0;
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	@ (800300c <get_GNRMC_data+0x130>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	701a      	strb	r2, [r3, #0]
			gps_data_->is_valid = INVALID;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2256      	movs	r2, #86	@ 0x56
 8002f24:	711a      	strb	r2, [r3, #4]
		if (*(gps_GNRMC_start_point + 17) == VALID)
 8002f26:	e005      	b.n	8002f34 <get_GNRMC_data+0x58>
		}
	}
	else
	{
		is_data_valid = 0;
 8002f28:	4b38      	ldr	r3, [pc, #224]	@ (800300c <get_GNRMC_data+0x130>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2256      	movs	r2, #86	@ 0x56
 8002f32:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 8002f34:	4b35      	ldr	r3, [pc, #212]	@ (800300c <get_GNRMC_data+0x130>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d157      	bne.n	8002fec <get_GNRMC_data+0x110>
	{
		memset(current_data, 0, DATA_SIZE);
 8002f3c:	2278      	movs	r2, #120	@ 0x78
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4833      	ldr	r0, [pc, #204]	@ (8003010 <get_GNRMC_data+0x134>)
 8002f42:	f009 fc36 	bl	800c7b2 <memset>
		counter = 0;
 8002f46:	4b33      	ldr	r3, [pc, #204]	@ (8003014 <get_GNRMC_data+0x138>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 8002f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003004 <get_GNRMC_data+0x128>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a31      	ldr	r2, [pc, #196]	@ (8003018 <get_GNRMC_data+0x13c>)
 8002f52:	6013      	str	r3, [r2, #0]
		
		// Improved bounds checking
		while(*current_char != '*' && counter < (DATA_SIZE - 1) && 
 8002f54:	e011      	b.n	8002f7a <get_GNRMC_data+0x9e>
			  current_char < (gps_buffer + BUFFER_SIZE))
		{
			current_data[counter] = *current_char;
 8002f56:	4b30      	ldr	r3, [pc, #192]	@ (8003018 <get_GNRMC_data+0x13c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8003014 <get_GNRMC_data+0x138>)
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	7819      	ldrb	r1, [r3, #0]
 8002f60:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <get_GNRMC_data+0x134>)
 8002f62:	5499      	strb	r1, [r3, r2]
			counter++;
 8002f64:	4b2b      	ldr	r3, [pc, #172]	@ (8003014 <get_GNRMC_data+0x138>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b29      	ldr	r3, [pc, #164]	@ (8003014 <get_GNRMC_data+0x138>)
 8002f6e:	701a      	strb	r2, [r3, #0]
			current_char++;
 8002f70:	4b29      	ldr	r3, [pc, #164]	@ (8003018 <get_GNRMC_data+0x13c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	3301      	adds	r3, #1
 8002f76:	4a28      	ldr	r2, [pc, #160]	@ (8003018 <get_GNRMC_data+0x13c>)
 8002f78:	6013      	str	r3, [r2, #0]
		while(*current_char != '*' && counter < (DATA_SIZE - 1) && 
 8002f7a:	4b27      	ldr	r3, [pc, #156]	@ (8003018 <get_GNRMC_data+0x13c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f82:	d008      	beq.n	8002f96 <get_GNRMC_data+0xba>
 8002f84:	4b23      	ldr	r3, [pc, #140]	@ (8003014 <get_GNRMC_data+0x138>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b76      	cmp	r3, #118	@ 0x76
 8002f8a:	d804      	bhi.n	8002f96 <get_GNRMC_data+0xba>
			  current_char < (gps_buffer + BUFFER_SIZE))
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <get_GNRMC_data+0x13c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	@ (8003008 <get_GNRMC_data+0x12c>)
		while(*current_char != '*' && counter < (DATA_SIZE - 1) && 
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d3df      	bcc.n	8002f56 <get_GNRMC_data+0x7a>
		}
		current_data[counter] = '\0'; // Ensure null termination
 8002f96:	4b1f      	ldr	r3, [pc, #124]	@ (8003014 <get_GNRMC_data+0x138>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8003010 <get_GNRMC_data+0x134>)
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f103 0c04 	add.w	ip, r3, #4
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	320c      	adds	r2, #12
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	3110      	adds	r1, #16
 8002fb8:	6079      	str	r1, [r7, #4]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	3014      	adds	r0, #20
 8002fbe:	68fc      	ldr	r4, [r7, #12]
 8002fc0:	3418      	adds	r4, #24
 8002fc2:	68fd      	ldr	r5, [r7, #12]
 8002fc4:	351c      	adds	r5, #28
 8002fc6:	68fe      	ldr	r6, [r7, #12]
 8002fc8:	3620      	adds	r6, #32
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	3124      	adds	r1, #36	@ 0x24
 8002fce:	9107      	str	r1, [sp, #28]
 8002fd0:	9606      	str	r6, [sp, #24]
 8002fd2:	9505      	str	r5, [sp, #20]
 8002fd4:	9404      	str	r4, [sp, #16]
 8002fd6:	9003      	str	r0, [sp, #12]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	9102      	str	r1, [sp, #8]
 8002fdc:	9201      	str	r2, [sp, #4]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	4663      	mov	r3, ip
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	490d      	ldr	r1, [pc, #52]	@ (800301c <get_GNRMC_data+0x140>)
 8002fe6:	480a      	ldr	r0, [pc, #40]	@ (8003010 <get_GNRMC_data+0x134>)
 8002fe8:	f009 fb64 	bl	800c6b4 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 8002fec:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <get_GNRMC_data+0x128>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	08011f4c 	.word	0x08011f4c
 8003000:	20000ba0 	.word	0x20000ba0
 8003004:	20001054 	.word	0x20001054
 8003008:	20001050 	.word	0x20001050
 800300c:	2000105c 	.word	0x2000105c
 8003010:	20001064 	.word	0x20001064
 8003014:	200010dc 	.word	0x200010dc
 8003018:	20001060 	.word	0x20001060
 800301c:	08011f54 	.word	0x08011f54

08003020 <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 8003020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003022:	b08d      	sub	sp, #52	@ 0x34
 8003024:	af08      	add	r7, sp, #32
 8003026:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 8003028:	4939      	ldr	r1, [pc, #228]	@ (8003110 <get_GPGGA_data+0xf0>)
 800302a:	483a      	ldr	r0, [pc, #232]	@ (8003114 <get_GPGGA_data+0xf4>)
 800302c:	f009 fbc9 	bl	800c7c2 <strstr>
 8003030:	4603      	mov	r3, r0
 8003032:	4a39      	ldr	r2, [pc, #228]	@ (8003118 <get_GPGGA_data+0xf8>)
 8003034:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL && gps_GPGGA_start_point < (gps_buffer + BUFFER_SIZE))
 8003036:	4b38      	ldr	r3, [pc, #224]	@ (8003118 <get_GPGGA_data+0xf8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <get_GPGGA_data+0xe6>
 800303e:	4b36      	ldr	r3, [pc, #216]	@ (8003118 <get_GPGGA_data+0xf8>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a36      	ldr	r2, [pc, #216]	@ (800311c <get_GPGGA_data+0xfc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d25e      	bcs.n	8003106 <get_GPGGA_data+0xe6>
	{
		if(gps_data_->is_valid == VALID)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	791b      	ldrb	r3, [r3, #4]
 800304c:	2b41      	cmp	r3, #65	@ 0x41
 800304e:	d157      	bne.n	8003100 <get_GPGGA_data+0xe0>
		{
			memset(current_data, 0, DATA_SIZE);
 8003050:	2278      	movs	r2, #120	@ 0x78
 8003052:	2100      	movs	r1, #0
 8003054:	4832      	ldr	r0, [pc, #200]	@ (8003120 <get_GPGGA_data+0x100>)
 8003056:	f009 fbac 	bl	800c7b2 <memset>
			counter = 0;
 800305a:	4b32      	ldr	r3, [pc, #200]	@ (8003124 <get_GPGGA_data+0x104>)
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 8003060:	4b2d      	ldr	r3, [pc, #180]	@ (8003118 <get_GPGGA_data+0xf8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a30      	ldr	r2, [pc, #192]	@ (8003128 <get_GPGGA_data+0x108>)
 8003066:	6013      	str	r3, [r2, #0]
			
			// Improved bounds checking
			while(*(current_char) != '*' && counter < (DATA_SIZE - 1) && 
 8003068:	e011      	b.n	800308e <get_GPGGA_data+0x6e>
				  current_char < (gps_buffer + BUFFER_SIZE))
			{
				current_data[counter] = *current_char;
 800306a:	4b2f      	ldr	r3, [pc, #188]	@ (8003128 <get_GPGGA_data+0x108>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a2d      	ldr	r2, [pc, #180]	@ (8003124 <get_GPGGA_data+0x104>)
 8003070:	7812      	ldrb	r2, [r2, #0]
 8003072:	7819      	ldrb	r1, [r3, #0]
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <get_GPGGA_data+0x100>)
 8003076:	5499      	strb	r1, [r3, r2]
				counter++;
 8003078:	4b2a      	ldr	r3, [pc, #168]	@ (8003124 <get_GPGGA_data+0x104>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <get_GPGGA_data+0x104>)
 8003082:	701a      	strb	r2, [r3, #0]
				current_char++;
 8003084:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <get_GPGGA_data+0x108>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	3301      	adds	r3, #1
 800308a:	4a27      	ldr	r2, [pc, #156]	@ (8003128 <get_GPGGA_data+0x108>)
 800308c:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*' && counter < (DATA_SIZE - 1) && 
 800308e:	4b26      	ldr	r3, [pc, #152]	@ (8003128 <get_GPGGA_data+0x108>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	2b2a      	cmp	r3, #42	@ 0x2a
 8003096:	d008      	beq.n	80030aa <get_GPGGA_data+0x8a>
 8003098:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <get_GPGGA_data+0x104>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b76      	cmp	r3, #118	@ 0x76
 800309e:	d804      	bhi.n	80030aa <get_GPGGA_data+0x8a>
				  current_char < (gps_buffer + BUFFER_SIZE))
 80030a0:	4b21      	ldr	r3, [pc, #132]	@ (8003128 <get_GPGGA_data+0x108>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1d      	ldr	r2, [pc, #116]	@ (800311c <get_GPGGA_data+0xfc>)
			while(*(current_char) != '*' && counter < (DATA_SIZE - 1) && 
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d3df      	bcc.n	800306a <get_GPGGA_data+0x4a>
			}
			current_data[counter] = '\0'; // Ensure null termination
 80030aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003124 <get_GPGGA_data+0x104>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <get_GPGGA_data+0x100>)
 80030b2:	2100      	movs	r1, #0
 80030b4:	5499      	strb	r1, [r3, r2]

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f103 0c08 	add.w	ip, r3, #8
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	330c      	adds	r3, #12
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	3210      	adds	r2, #16
 80030c8:	68f9      	ldr	r1, [r7, #12]
 80030ca:	3114      	adds	r1, #20
 80030cc:	6079      	str	r1, [r7, #4]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	3025      	adds	r0, #37	@ 0x25
 80030d2:	68fc      	ldr	r4, [r7, #12]
 80030d4:	3426      	adds	r4, #38	@ 0x26
 80030d6:	68fd      	ldr	r5, [r7, #12]
 80030d8:	3528      	adds	r5, #40	@ 0x28
 80030da:	68fe      	ldr	r6, [r7, #12]
 80030dc:	362c      	adds	r6, #44	@ 0x2c
 80030de:	68f9      	ldr	r1, [r7, #12]
 80030e0:	3130      	adds	r1, #48	@ 0x30
 80030e2:	9107      	str	r1, [sp, #28]
 80030e4:	9606      	str	r6, [sp, #24]
 80030e6:	9505      	str	r5, [sp, #20]
 80030e8:	9404      	str	r4, [sp, #16]
 80030ea:	9003      	str	r0, [sp, #12]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	9102      	str	r1, [sp, #8]
 80030f0:	9201      	str	r2, [sp, #4]
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4663      	mov	r3, ip
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	490c      	ldr	r1, [pc, #48]	@ (800312c <get_GPGGA_data+0x10c>)
 80030fa:	4809      	ldr	r0, [pc, #36]	@ (8003120 <get_GPGGA_data+0x100>)
 80030fc:	f009 fada 	bl	800c6b4 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 8003100:	4b05      	ldr	r3, [pc, #20]	@ (8003118 <get_GPGGA_data+0xf8>)
 8003102:	2200      	movs	r2, #0
 8003104:	601a      	str	r2, [r3, #0]
	}
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800310e:	bf00      	nop
 8003110:	08011f7c 	.word	0x08011f7c
 8003114:	20000ba0 	.word	0x20000ba0
 8003118:	20001058 	.word	0x20001058
 800311c:	20001050 	.word	0x20001050
 8003120:	20001064 	.word	0x20001064
 8003124:	200010dc 	.word	0x200010dc
 8003128:	20001060 	.word	0x20001060
 800312c:	08011f84 	.word	0x08011f84

08003130 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	791b      	ldrb	r3, [r3, #4]
 800313c:	2b41      	cmp	r3, #65	@ 0x41
 800313e:	f040 8154 	bne.w	80033ea <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	4aab      	ldr	r2, [pc, #684]	@ (80033f4 <format_data+0x2c4>)
 8003148:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 800314a:	4baa      	ldr	r3, [pc, #680]	@ (80033f4 <format_data+0x2c4>)
 800314c:	edd3 7a00 	vldr	s15, [r3]
 8003150:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 80033f8 <format_data+0x2c8>
 8003154:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003158:	ee16 0a90 	vmov	r0, s13
 800315c:	f7fd fa14 	bl	8000588 <__aeabi_f2d>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	ec43 2b10 	vmov	d0, r2, r3
 8003168:	f00d fcaa 	bl	8010ac0 <floor>
 800316c:	ec53 2b10 	vmov	r2, r3, d0
 8003170:	4610      	mov	r0, r2
 8003172:	4619      	mov	r1, r3
 8003174:	f7fd fd58 	bl	8000c28 <__aeabi_d2f>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 800317e:	4b9d      	ldr	r3, [pc, #628]	@ (80033f4 <format_data+0x2c4>)
 8003180:	ed93 7a00 	vldr	s14, [r3]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800318a:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 80033f8 <format_data+0x2c8>
 800318e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	4b97      	ldr	r3, [pc, #604]	@ (80033f4 <format_data+0x2c4>)
 8003198:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 800319c:	4b95      	ldr	r3, [pc, #596]	@ (80033f4 <format_data+0x2c4>)
 800319e:	ed93 7a00 	vldr	s14, [r3]
 80031a2:	eddf 6a96 	vldr	s13, [pc, #600]	@ 80033fc <format_data+0x2cc>
 80031a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031aa:	4b92      	ldr	r3, [pc, #584]	@ (80033f4 <format_data+0x2c4>)
 80031ac:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80031b6:	4b8f      	ldr	r3, [pc, #572]	@ (80033f4 <format_data+0x2c4>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	4a8d      	ldr	r2, [pc, #564]	@ (8003400 <format_data+0x2d0>)
 80031cc:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 80031ce:	4b8c      	ldr	r3, [pc, #560]	@ (8003400 <format_data+0x2d0>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80033f8 <format_data+0x2c8>
 80031d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031dc:	ee16 0a90 	vmov	r0, s13
 80031e0:	f7fd f9d2 	bl	8000588 <__aeabi_f2d>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	ec43 2b10 	vmov	d0, r2, r3
 80031ec:	f00d fc68 	bl	8010ac0 <floor>
 80031f0:	ec53 2b10 	vmov	r2, r3, d0
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fd16 	bl	8000c28 <__aeabi_d2f>
 80031fc:	4602      	mov	r2, r0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 8003202:	4b7f      	ldr	r3, [pc, #508]	@ (8003400 <format_data+0x2d0>)
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800320e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 80033f8 <format_data+0x2c8>
 8003212:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321a:	4b79      	ldr	r3, [pc, #484]	@ (8003400 <format_data+0x2d0>)
 800321c:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8003220:	4b77      	ldr	r3, [pc, #476]	@ (8003400 <format_data+0x2d0>)
 8003222:	ed93 7a00 	vldr	s14, [r3]
 8003226:	eddf 6a75 	vldr	s13, [pc, #468]	@ 80033fc <format_data+0x2cc>
 800322a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800322e:	4b74      	ldr	r3, [pc, #464]	@ (8003400 <format_data+0x2d0>)
 8003230:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800323a:	4b71      	ldr	r3, [pc, #452]	@ (8003400 <format_data+0x2d0>)
 800323c:	edd3 7a00 	vldr	s15, [r3]
 8003240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6d      	ldr	r2, [pc, #436]	@ (8003404 <format_data+0x2d4>)
 8003250:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 8003252:	4b6c      	ldr	r3, [pc, #432]	@ (8003404 <format_data+0x2d4>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8003408 <format_data+0x2d8>
 800325c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003260:	ee16 0a90 	vmov	r0, s13
 8003264:	f7fd f990 	bl	8000588 <__aeabi_f2d>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	ec43 2b10 	vmov	d0, r2, r3
 8003270:	f00d fc26 	bl	8010ac0 <floor>
 8003274:	ec53 2b10 	vmov	r2, r3, d0
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f7fd fcb4 	bl	8000be8 <__aeabi_d2uiz>
 8003280:	4603      	mov	r3, r0
 8003282:	b2da      	uxtb	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 800328a:	4b5e      	ldr	r3, [pc, #376]	@ (8003404 <format_data+0x2d4>)
 800328c:	ed93 7a00 	vldr	s14, [r3]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003296:	461a      	mov	r2, r3
 8003298:	f242 7310 	movw	r3, #10000	@ 0x2710
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ac:	4b55      	ldr	r3, [pc, #340]	@ (8003404 <format_data+0x2d4>)
 80032ae:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032b8:	3303      	adds	r3, #3
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c8:	2b17      	cmp	r3, #23
 80032ca:	d907      	bls.n	80032dc <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032d2:	3b18      	subs	r3, #24
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 80032dc:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <format_data+0x2d4>)
 80032de:	edd3 7a00 	vldr	s15, [r3]
 80032e2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80033f8 <format_data+0x2c8>
 80032e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032ea:	ee16 0a90 	vmov	r0, s13
 80032ee:	f7fd f94b 	bl	8000588 <__aeabi_f2d>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	ec43 2b10 	vmov	d0, r2, r3
 80032fa:	f00d fbe1 	bl	8010ac0 <floor>
 80032fe:	ec53 2b10 	vmov	r2, r3, d0
 8003302:	4610      	mov	r0, r2
 8003304:	4619      	mov	r1, r3
 8003306:	f7fd fc6f 	bl	8000be8 <__aeabi_d2uiz>
 800330a:	4603      	mov	r3, r0
 800330c:	b2da      	uxtb	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 8003314:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <format_data+0x2d4>)
 8003316:	ed93 7a00 	vldr	s14, [r3]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003320:	461a      	mov	r2, r3
 8003322:	2364      	movs	r3, #100	@ 0x64
 8003324:	fb02 f303 	mul.w	r3, r2, r3
 8003328:	ee07 3a90 	vmov	s15, r3
 800332c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003334:	4b33      	ldr	r3, [pc, #204]	@ (8003404 <format_data+0x2d4>)
 8003336:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 800333a:	4b32      	ldr	r3, [pc, #200]	@ (8003404 <format_data+0x2d4>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd f922 	bl	8000588 <__aeabi_f2d>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	ec43 2b10 	vmov	d0, r2, r3
 800334c:	f00d fbb8 	bl	8010ac0 <floor>
 8003350:	ec53 2b10 	vmov	r2, r3, d0
 8003354:	4610      	mov	r0, r2
 8003356:	4619      	mov	r1, r3
 8003358:	f7fd fc46 	bl	8000be8 <__aeabi_d2uiz>
 800335c:	4603      	mov	r3, r0
 800335e:	b2da      	uxtb	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	4a28      	ldr	r2, [pc, #160]	@ (800340c <format_data+0x2dc>)
 800336c:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 800336e:	4b27      	ldr	r3, [pc, #156]	@ (800340c <format_data+0x2dc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a27      	ldr	r2, [pc, #156]	@ (8003410 <format_data+0x2e0>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	0b5b      	lsrs	r3, r3, #13
 800337a:	b2da      	uxtb	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 8003382:	4b22      	ldr	r3, [pc, #136]	@ (800340c <format_data+0x2dc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 800338c:	4611      	mov	r1, r2
 800338e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003392:	fb01 f202 	mul.w	r2, r1, r2
 8003396:	1a9b      	subs	r3, r3, r2
 8003398:	4a1c      	ldr	r2, [pc, #112]	@ (800340c <format_data+0x2dc>)
 800339a:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 800339c:	4b1b      	ldr	r3, [pc, #108]	@ (800340c <format_data+0x2dc>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003414 <format_data+0x2e4>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 80033b0:	4b16      	ldr	r3, [pc, #88]	@ (800340c <format_data+0x2dc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 80033ba:	4611      	mov	r1, r2
 80033bc:	2264      	movs	r2, #100	@ 0x64
 80033be:	fb01 f202 	mul.w	r2, r1, r2
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	4a11      	ldr	r2, [pc, #68]	@ (800340c <format_data+0x2dc>)
 80033c6:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 80033c8:	4b10      	ldr	r3, [pc, #64]	@ (800340c <format_data+0x2dc>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80033e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200010e0 	.word	0x200010e0
 80033f8:	42c80000 	.word	0x42c80000
 80033fc:	42700000 	.word	0x42700000
 8003400:	200010e4 	.word	0x200010e4
 8003404:	200010e8 	.word	0x200010e8
 8003408:	461c4000 	.word	0x461c4000
 800340c:	200010ec 	.word	0x200010ec
 8003410:	d1b71759 	.word	0xd1b71759
 8003414:	51eb851f 	.word	0x51eb851f

08003418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800341c:	f002 fe7a 	bl	8006114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003420:	f000 f898 	bl	8003554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003424:	f000 faba 	bl	800399c <MX_GPIO_Init>
  MX_DMA_Init();
 8003428:	f000 fa7a 	bl	8003920 <MX_DMA_Init>
  MX_I2C1_Init();
 800342c:	f000 f950 	bl	80036d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003430:	f000 f97c 	bl	800372c <MX_I2C3_Init>
  MX_TIM2_Init();
 8003434:	f000 f9a8 	bl	8003788 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8003438:	f000 fa1e 	bl	8003878 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800343c:	f000 f8f6 	bl	800362c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8003440:	f000 fa44 	bl	80038cc <MX_USART6_UART_Init>
  MX_UART4_Init();
 8003444:	f000 f9ee 	bl	8003824 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 8003448:	f000 f99e 	bl	8003788 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 800344c:	4836      	ldr	r0, [pc, #216]	@ (8003528 <main+0x110>)
 800344e:	f006 f9f1 	bl	8009834 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2101      	movs	r1, #1
 8003456:	201c      	movs	r0, #28
 8003458:	f003 fc01 	bl	8006c5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800345c:	201c      	movs	r0, #28
 800345e:	f003 fc1a 	bl	8006c96 <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8003462:	2201      	movs	r2, #1
 8003464:	2100      	movs	r1, #0
 8003466:	2009      	movs	r0, #9
 8003468:	f003 fbf9 	bl	8006c5e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 800346c:	2201      	movs	r2, #1
 800346e:	2100      	movs	r1, #0
 8003470:	200a      	movs	r0, #10
 8003472:	f003 fbf4 	bl	8006c5e <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003476:	200a      	movs	r0, #10
 8003478:	f003 fc0d 	bl	8006c96 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800347c:	2009      	movs	r0, #9
 800347e:	f003 fc0a 	bl	8006c96 <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 8003482:	f000 fb1d 	bl	8003ac0 <bme280_begin>
	HAL_Delay(1000);
 8003486:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800348a:	f002 feb5 	bl	80061f8 <HAL_Delay>
	bme280_config();
 800348e:	f7fd fffd 	bl	800148c <bme280_config>
	bme280_update();
 8003492:	f7fe f9b7 	bl	8001804 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 8003496:	f000 fb2b 	bl	8003af0 <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 800349a:	4824      	ldr	r0, [pc, #144]	@ (800352c <main+0x114>)
 800349c:	f7fe fe32 	bl	8002104 <bmi088_config>
	//get_offset(&BMI_sensor);


	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 80034a0:	f001 ffb8 	bl	8005414 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 80034a4:	4822      	ldr	r0, [pc, #136]	@ (8003530 <main+0x118>)
 80034a6:	f002 f92d 	bl	8005704 <sensor_fusion_init>
	//loraBegin();
	//lora_activate();

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize L86 GPS/GNSS module
	HAL_UART_Transmit(&huart6, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 80034aa:	2364      	movs	r3, #100	@ 0x64
 80034ac:	2213      	movs	r2, #19
 80034ae:	4921      	ldr	r1, [pc, #132]	@ (8003534 <main+0x11c>)
 80034b0:	4821      	ldr	r0, [pc, #132]	@ (8003538 <main+0x120>)
 80034b2:	f006 fe61 	bl	800a178 <HAL_UART_Transmit>
    HAL_UART_DeInit(&huart6);
 80034b6:	4820      	ldr	r0, [pc, #128]	@ (8003538 <main+0x120>)
 80034b8:	f006 fe2c 	bl	800a114 <HAL_UART_DeInit>
    huart6.Init.BaudRate = 57600;
 80034bc:	4b1e      	ldr	r3, [pc, #120]	@ (8003538 <main+0x120>)
 80034be:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80034c2:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&huart6);
 80034c4:	481c      	ldr	r0, [pc, #112]	@ (8003538 <main+0x120>)
 80034c6:	f006 fdd5 	bl	800a074 <HAL_UART_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 80034ca:	481c      	ldr	r0, [pc, #112]	@ (800353c <main+0x124>)
 80034cc:	f003 fc0c 	bl	8006ce8 <HAL_DMA_Init>
	L86_GNSS_Init(&huart6);
 80034d0:	4819      	ldr	r0, [pc, #100]	@ (8003538 <main+0x120>)
 80034d2:	f7ff fc63 	bl	8002d9c <L86_GNSS_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 80034d6:	4815      	ldr	r0, [pc, #84]	@ (800352c <main+0x114>)
 80034d8:	f7ff f816 	bl	8002508 <bmi088_update>
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 80034dc:	f7fe f992 	bl	8001804 <bme280_update>
		//read_value();	// Transmit current sensor readings


		/*PERIODIC OPERATIONS (100ms)*/
		// Execute operations every 100ms
		if (tx_timer_flag_100ms >= 1) {
 80034e0:	4b17      	ldr	r3, [pc, #92]	@ (8003540 <main+0x128>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d015      	beq.n	8003516 <main+0xfe>
		  tx_timer_flag_100ms = 0;
 80034ea:	4b15      	ldr	r3, [pc, #84]	@ (8003540 <main+0x128>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]

		  // Read magnetometer ADC values
		  read_ADC();
 80034f0:	f000 fb2c 	bl	8003b4c <read_ADC>

		  // Update GPS/GNSS data
		  L86_GNSS_Update(&gnss_data);
 80034f4:	4813      	ldr	r0, [pc, #76]	@ (8003544 <main+0x12c>)
 80034f6:	f7ff fcb1 	bl	8002e5c <L86_GNSS_Update>
		  //L86_GNSS_Print_Info(&gnss_data,&huart2);

		  // Package all sensor data into telemetry packet for ground station transmission
		  addDataPacketNormal(&BME280_sensor, &BMI_sensor, &gnss_data, hmc1021_gauss);
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <main+0x130>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	eeb0 0a67 	vmov.f32	s0, s15
 8003504:	4a0f      	ldr	r2, [pc, #60]	@ (8003544 <main+0x12c>)
 8003506:	4909      	ldr	r1, [pc, #36]	@ (800352c <main+0x114>)
 8003508:	4809      	ldr	r0, [pc, #36]	@ (8003530 <main+0x118>)
 800350a:	f000 fc07 	bl	8003d1c <addDataPacketNormal>
		  uart2_send_packet_dma((uint8_t*)normal_paket, 38);
 800350e:	2126      	movs	r1, #38	@ 0x26
 8003510:	480e      	ldr	r0, [pc, #56]	@ (800354c <main+0x134>)
 8003512:	f000 fbb9 	bl	8003c88 <uart2_send_packet_dma>
		  //read_value();
		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 10) {
 8003516:	4b0e      	ldr	r3, [pc, #56]	@ (8003550 <main+0x138>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b09      	cmp	r3, #9
 800351e:	d9da      	bls.n	80034d6 <main+0xbe>
		  tx_timer_flag_1s = 0;
 8003520:	4b0b      	ldr	r3, [pc, #44]	@ (8003550 <main+0x138>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 8003526:	e7d6      	b.n	80034d6 <main+0xbe>
 8003528:	200011e0 	.word	0x200011e0
 800352c:	20001488 	.word	0x20001488
 8003530:	20001420 	.word	0x20001420
 8003534:	08011fb0 	.word	0x08011fb0
 8003538:	200012b8 	.word	0x200012b8
 800353c:	200013c0 	.word	0x200013c0
 8003540:	20001552 	.word	0x20001552
 8003544:	20001508 	.word	0x20001508
 8003548:	2000155c 	.word	0x2000155c
 800354c:	20001564 	.word	0x20001564
 8003550:	20001553 	.word	0x20001553

08003554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b094      	sub	sp, #80	@ 0x50
 8003558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800355a:	f107 031c 	add.w	r3, r7, #28
 800355e:	2234      	movs	r2, #52	@ 0x34
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f009 f925 	bl	800c7b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	2300      	movs	r3, #0
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	4b29      	ldr	r3, [pc, #164]	@ (8003624 <SystemClock_Config+0xd0>)
 800357e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003580:	4a28      	ldr	r2, [pc, #160]	@ (8003624 <SystemClock_Config+0xd0>)
 8003582:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003586:	6413      	str	r3, [r2, #64]	@ 0x40
 8003588:	4b26      	ldr	r3, [pc, #152]	@ (8003624 <SystemClock_Config+0xd0>)
 800358a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003594:	2300      	movs	r3, #0
 8003596:	603b      	str	r3, [r7, #0]
 8003598:	4b23      	ldr	r3, [pc, #140]	@ (8003628 <SystemClock_Config+0xd4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <SystemClock_Config+0xd4>)
 800359e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b20      	ldr	r3, [pc, #128]	@ (8003628 <SystemClock_Config+0xd4>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80035b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035ba:	2302      	movs	r3, #2
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035be:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80035c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80035c4:	2308      	movs	r3, #8
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80035c8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80035cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80035ce:	2302      	movs	r3, #2
 80035d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80035d2:	2302      	movs	r3, #2
 80035d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80035d6:	2302      	movs	r3, #2
 80035d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	4618      	mov	r0, r3
 80035e0:	f005 fe3a 	bl	8009258 <HAL_RCC_OscConfig>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80035ea:	f000 fb69 	bl	8003cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ee:	230f      	movs	r3, #15
 80035f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035f2:	2302      	movs	r3, #2
 80035f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035f6:	2300      	movs	r3, #0
 80035f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80035fa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80035fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003604:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003606:	f107 0308 	add.w	r3, r7, #8
 800360a:	2105      	movs	r1, #5
 800360c:	4618      	mov	r0, r3
 800360e:	f005 fad9 	bl	8008bc4 <HAL_RCC_ClockConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003618:	f000 fb52 	bl	8003cc0 <Error_Handler>
  }
}
 800361c:	bf00      	nop
 800361e:	3750      	adds	r7, #80	@ 0x50
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000

0800362c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003632:	463b      	mov	r3, r7
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800363e:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <MX_ADC1_Init+0x98>)
 8003640:	4a21      	ldr	r2, [pc, #132]	@ (80036c8 <MX_ADC1_Init+0x9c>)
 8003642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003644:	4b1f      	ldr	r3, [pc, #124]	@ (80036c4 <MX_ADC1_Init+0x98>)
 8003646:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800364a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800364c:	4b1d      	ldr	r3, [pc, #116]	@ (80036c4 <MX_ADC1_Init+0x98>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003652:	4b1c      	ldr	r3, [pc, #112]	@ (80036c4 <MX_ADC1_Init+0x98>)
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003658:	4b1a      	ldr	r3, [pc, #104]	@ (80036c4 <MX_ADC1_Init+0x98>)
 800365a:	2200      	movs	r2, #0
 800365c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800365e:	4b19      	ldr	r3, [pc, #100]	@ (80036c4 <MX_ADC1_Init+0x98>)
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003666:	4b17      	ldr	r3, [pc, #92]	@ (80036c4 <MX_ADC1_Init+0x98>)
 8003668:	2200      	movs	r2, #0
 800366a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800366c:	4b15      	ldr	r3, [pc, #84]	@ (80036c4 <MX_ADC1_Init+0x98>)
 800366e:	4a17      	ldr	r2, [pc, #92]	@ (80036cc <MX_ADC1_Init+0xa0>)
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003672:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <MX_ADC1_Init+0x98>)
 8003674:	2200      	movs	r2, #0
 8003676:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003678:	4b12      	ldr	r3, [pc, #72]	@ (80036c4 <MX_ADC1_Init+0x98>)
 800367a:	2201      	movs	r2, #1
 800367c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800367e:	4b11      	ldr	r3, [pc, #68]	@ (80036c4 <MX_ADC1_Init+0x98>)
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003686:	4b0f      	ldr	r3, [pc, #60]	@ (80036c4 <MX_ADC1_Init+0x98>)
 8003688:	2201      	movs	r2, #1
 800368a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800368c:	480d      	ldr	r0, [pc, #52]	@ (80036c4 <MX_ADC1_Init+0x98>)
 800368e:	f002 fdd7 	bl	8006240 <HAL_ADC_Init>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003698:	f000 fb12 	bl	8003cc0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800369c:	2309      	movs	r3, #9
 800369e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80036a0:	2301      	movs	r3, #1
 80036a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036a8:	463b      	mov	r3, r7
 80036aa:	4619      	mov	r1, r3
 80036ac:	4805      	ldr	r0, [pc, #20]	@ (80036c4 <MX_ADC1_Init+0x98>)
 80036ae:	f002 ffa9 	bl	8006604 <HAL_ADC_ConfigChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80036b8:	f000 fb02 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036bc:	bf00      	nop
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	200010f0 	.word	0x200010f0
 80036c8:	40012000 	.word	0x40012000
 80036cc:	0f000001 	.word	0x0f000001

080036d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036d4:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <MX_I2C1_Init+0x50>)
 80036d6:	4a13      	ldr	r2, [pc, #76]	@ (8003724 <MX_I2C1_Init+0x54>)
 80036d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80036da:	4b11      	ldr	r3, [pc, #68]	@ (8003720 <MX_I2C1_Init+0x50>)
 80036dc:	4a12      	ldr	r2, [pc, #72]	@ (8003728 <MX_I2C1_Init+0x58>)
 80036de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003720 <MX_I2C1_Init+0x50>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003720 <MX_I2C1_Init+0x50>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003720 <MX_I2C1_Init+0x50>)
 80036ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003720 <MX_I2C1_Init+0x50>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80036fa:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <MX_I2C1_Init+0x50>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003700:	4b07      	ldr	r3, [pc, #28]	@ (8003720 <MX_I2C1_Init+0x50>)
 8003702:	2200      	movs	r2, #0
 8003704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <MX_I2C1_Init+0x50>)
 8003708:	2200      	movs	r2, #0
 800370a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800370c:	4804      	ldr	r0, [pc, #16]	@ (8003720 <MX_I2C1_Init+0x50>)
 800370e:	f004 fa05 	bl	8007b1c <HAL_I2C_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003718:	f000 fad2 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800371c:	bf00      	nop
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20001138 	.word	0x20001138
 8003724:	40005400 	.word	0x40005400
 8003728:	000186a0 	.word	0x000186a0

0800372c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003730:	4b12      	ldr	r3, [pc, #72]	@ (800377c <MX_I2C3_Init+0x50>)
 8003732:	4a13      	ldr	r2, [pc, #76]	@ (8003780 <MX_I2C3_Init+0x54>)
 8003734:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003736:	4b11      	ldr	r3, [pc, #68]	@ (800377c <MX_I2C3_Init+0x50>)
 8003738:	4a12      	ldr	r2, [pc, #72]	@ (8003784 <MX_I2C3_Init+0x58>)
 800373a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800373c:	4b0f      	ldr	r3, [pc, #60]	@ (800377c <MX_I2C3_Init+0x50>)
 800373e:	2200      	movs	r2, #0
 8003740:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003742:	4b0e      	ldr	r3, [pc, #56]	@ (800377c <MX_I2C3_Init+0x50>)
 8003744:	2200      	movs	r2, #0
 8003746:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003748:	4b0c      	ldr	r3, [pc, #48]	@ (800377c <MX_I2C3_Init+0x50>)
 800374a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800374e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003750:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <MX_I2C3_Init+0x50>)
 8003752:	2200      	movs	r2, #0
 8003754:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003756:	4b09      	ldr	r3, [pc, #36]	@ (800377c <MX_I2C3_Init+0x50>)
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800375c:	4b07      	ldr	r3, [pc, #28]	@ (800377c <MX_I2C3_Init+0x50>)
 800375e:	2200      	movs	r2, #0
 8003760:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003762:	4b06      	ldr	r3, [pc, #24]	@ (800377c <MX_I2C3_Init+0x50>)
 8003764:	2200      	movs	r2, #0
 8003766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003768:	4804      	ldr	r0, [pc, #16]	@ (800377c <MX_I2C3_Init+0x50>)
 800376a:	f004 f9d7 	bl	8007b1c <HAL_I2C_Init>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003774:	f000 faa4 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	2000118c 	.word	0x2000118c
 8003780:	40005c00 	.word	0x40005c00
 8003784:	000186a0 	.word	0x000186a0

08003788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800378e:	f107 0308 	add.w	r3, r7, #8
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	605a      	str	r2, [r3, #4]
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800379c:	463b      	mov	r3, r7
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003820 <MX_TIM2_Init+0x98>)
 80037a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80037aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 80037ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003820 <MX_TIM2_Init+0x98>)
 80037ae:	f242 3227 	movw	r2, #8999	@ 0x2327
 80037b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003820 <MX_TIM2_Init+0x98>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80037ba:	4b19      	ldr	r3, [pc, #100]	@ (8003820 <MX_TIM2_Init+0x98>)
 80037bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80037c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037c2:	4b17      	ldr	r3, [pc, #92]	@ (8003820 <MX_TIM2_Init+0x98>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037c8:	4b15      	ldr	r3, [pc, #84]	@ (8003820 <MX_TIM2_Init+0x98>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037ce:	4814      	ldr	r0, [pc, #80]	@ (8003820 <MX_TIM2_Init+0x98>)
 80037d0:	f005 ffe0 	bl	8009794 <HAL_TIM_Base_Init>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80037da:	f000 fa71 	bl	8003cc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037e4:	f107 0308 	add.w	r3, r7, #8
 80037e8:	4619      	mov	r1, r3
 80037ea:	480d      	ldr	r0, [pc, #52]	@ (8003820 <MX_TIM2_Init+0x98>)
 80037ec:	f006 f982 	bl	8009af4 <HAL_TIM_ConfigClockSource>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80037f6:	f000 fa63 	bl	8003cc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037fa:	2300      	movs	r3, #0
 80037fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037fe:	2300      	movs	r3, #0
 8003800:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003802:	463b      	mov	r3, r7
 8003804:	4619      	mov	r1, r3
 8003806:	4806      	ldr	r0, [pc, #24]	@ (8003820 <MX_TIM2_Init+0x98>)
 8003808:	f006 fba4 	bl	8009f54 <HAL_TIMEx_MasterConfigSynchronization>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003812:	f000 fa55 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200011e0 	.word	0x200011e0

08003824 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <MX_UART4_Init+0x4c>)
 800382a:	4a12      	ldr	r2, [pc, #72]	@ (8003874 <MX_UART4_Init+0x50>)
 800382c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <MX_UART4_Init+0x4c>)
 8003830:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003834:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003836:	4b0e      	ldr	r3, [pc, #56]	@ (8003870 <MX_UART4_Init+0x4c>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800383c:	4b0c      	ldr	r3, [pc, #48]	@ (8003870 <MX_UART4_Init+0x4c>)
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003842:	4b0b      	ldr	r3, [pc, #44]	@ (8003870 <MX_UART4_Init+0x4c>)
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <MX_UART4_Init+0x4c>)
 800384a:	220c      	movs	r2, #12
 800384c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800384e:	4b08      	ldr	r3, [pc, #32]	@ (8003870 <MX_UART4_Init+0x4c>)
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <MX_UART4_Init+0x4c>)
 8003856:	2200      	movs	r2, #0
 8003858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800385a:	4805      	ldr	r0, [pc, #20]	@ (8003870 <MX_UART4_Init+0x4c>)
 800385c:	f006 fc0a 	bl	800a074 <HAL_UART_Init>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003866:	f000 fa2b 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800386a:	bf00      	nop
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20001228 	.word	0x20001228
 8003874:	40004c00 	.word	0x40004c00

08003878 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800387c:	4b11      	ldr	r3, [pc, #68]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 800387e:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <MX_USART2_UART_Init+0x50>)
 8003880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003882:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 8003884:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800388a:	4b0e      	ldr	r3, [pc, #56]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003890:	4b0c      	ldr	r3, [pc, #48]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003896:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 8003898:	2200      	movs	r2, #0
 800389a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 800389e:	220c      	movs	r2, #12
 80038a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a2:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038a8:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038ae:	4805      	ldr	r0, [pc, #20]	@ (80038c4 <MX_USART2_UART_Init+0x4c>)
 80038b0:	f006 fbe0 	bl	800a074 <HAL_UART_Init>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80038ba:	f000 fa01 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038be:	bf00      	nop
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20001270 	.word	0x20001270
 80038c8:	40004400 	.word	0x40004400

080038cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80038d0:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <MX_USART6_UART_Init+0x50>)
 80038d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 80038d8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80038dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80038de:	4b0e      	ldr	r3, [pc, #56]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80038e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80038ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80038f0:	4b09      	ldr	r3, [pc, #36]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 80038f2:	220c      	movs	r2, #12
 80038f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038f6:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003902:	4805      	ldr	r0, [pc, #20]	@ (8003918 <MX_USART6_UART_Init+0x4c>)
 8003904:	f006 fbb6 	bl	800a074 <HAL_UART_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800390e:	f000 f9d7 	bl	8003cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	200012b8 	.word	0x200012b8
 800391c:	40011400 	.word	0x40011400

08003920 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003926:	2300      	movs	r3, #0
 8003928:	607b      	str	r3, [r7, #4]
 800392a:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <MX_DMA_Init+0x78>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	4a1a      	ldr	r2, [pc, #104]	@ (8003998 <MX_DMA_Init+0x78>)
 8003930:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003934:	6313      	str	r3, [r2, #48]	@ 0x30
 8003936:	4b18      	ldr	r3, [pc, #96]	@ (8003998 <MX_DMA_Init+0x78>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003942:	2300      	movs	r3, #0
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	4b14      	ldr	r3, [pc, #80]	@ (8003998 <MX_DMA_Init+0x78>)
 8003948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800394a:	4a13      	ldr	r2, [pc, #76]	@ (8003998 <MX_DMA_Init+0x78>)
 800394c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003950:	6313      	str	r3, [r2, #48]	@ 0x30
 8003952:	4b11      	ldr	r3, [pc, #68]	@ (8003998 <MX_DMA_Init+0x78>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003956:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800395a:	603b      	str	r3, [r7, #0]
 800395c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800395e:	2200      	movs	r2, #0
 8003960:	2100      	movs	r1, #0
 8003962:	200f      	movs	r0, #15
 8003964:	f003 f97b 	bl	8006c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003968:	200f      	movs	r0, #15
 800396a:	f003 f994 	bl	8006c96 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800396e:	2200      	movs	r2, #0
 8003970:	2100      	movs	r1, #0
 8003972:	2011      	movs	r0, #17
 8003974:	f003 f973 	bl	8006c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003978:	2011      	movs	r0, #17
 800397a:	f003 f98c 	bl	8006c96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	203a      	movs	r0, #58	@ 0x3a
 8003984:	f003 f96b 	bl	8006c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003988:	203a      	movs	r0, #58	@ 0x3a
 800398a:	f003 f984 	bl	8006c96 <HAL_NVIC_EnableIRQ>

}
 800398e:	bf00      	nop
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b08a      	sub	sp, #40	@ 0x28
 80039a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a2:	f107 0314 	add.w	r3, r7, #20
 80039a6:	2200      	movs	r2, #0
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	609a      	str	r2, [r3, #8]
 80039ae:	60da      	str	r2, [r3, #12]
 80039b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ba:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80039c2:	4b3c      	ldr	r3, [pc, #240]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b38      	ldr	r3, [pc, #224]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a37      	ldr	r2, [pc, #220]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b35      	ldr	r3, [pc, #212]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	4b31      	ldr	r3, [pc, #196]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	4a30      	ldr	r2, [pc, #192]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fa:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a06:	2300      	movs	r3, #0
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	4a29      	ldr	r2, [pc, #164]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 8003a10:	f043 0302 	orr.w	r3, r3, #2
 8003a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a16:	4b27      	ldr	r3, [pc, #156]	@ (8003ab4 <MX_GPIO_Init+0x118>)
 8003a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 8003a22:	2200      	movs	r2, #0
 8003a24:	210c      	movs	r1, #12
 8003a26:	4824      	ldr	r0, [pc, #144]	@ (8003ab8 <MX_GPIO_Init+0x11c>)
 8003a28:	f004 f846 	bl	8007ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003a32:	4822      	ldr	r0, [pc, #136]	@ (8003abc <MX_GPIO_Init+0x120>)
 8003a34:	f004 f840 	bl	8007ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 8003a38:	230c      	movs	r3, #12
 8003a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a44:	2300      	movs	r3, #0
 8003a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a48:	f107 0314 	add.w	r3, r7, #20
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	481a      	ldr	r0, [pc, #104]	@ (8003ab8 <MX_GPIO_Init+0x11c>)
 8003a50:	f003 fdaa 	bl	80075a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a62:	2303      	movs	r3, #3
 8003a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a66:	f107 0314 	add.w	r3, r7, #20
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4813      	ldr	r0, [pc, #76]	@ (8003abc <MX_GPIO_Init+0x120>)
 8003a6e:	f003 fd9b 	bl	80075a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003a72:	2318      	movs	r3, #24
 8003a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a76:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a80:	f107 0314 	add.w	r3, r7, #20
 8003a84:	4619      	mov	r1, r3
 8003a86:	480d      	ldr	r0, [pc, #52]	@ (8003abc <MX_GPIO_Init+0x120>)
 8003a88:	f003 fd8e 	bl	80075a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2100      	movs	r1, #0
 8003a90:	2009      	movs	r0, #9
 8003a92:	f003 f8e4 	bl	8006c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003a96:	2009      	movs	r0, #9
 8003a98:	f003 f8fd 	bl	8006c96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	200a      	movs	r0, #10
 8003aa2:	f003 f8dc 	bl	8006c5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003aa6:	200a      	movs	r0, #10
 8003aa8:	f003 f8f5 	bl	8006c96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003aac:	bf00      	nop
 8003aae:	3728      	adds	r7, #40	@ 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020400 	.word	0x40020400

08003ac0 <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_8;
 8003ac4:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <bme280_begin+0x28>)
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 8003aca:	4b07      	ldr	r3, [pc, #28]	@ (8003ae8 <bme280_begin+0x28>)
 8003acc:	2203      	movs	r2, #3
 8003ace:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_8;
 8003ad0:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <bme280_begin+0x28>)
 8003ad2:	2204      	movs	r2, #4
 8003ad4:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_20;
 8003ad6:	4b04      	ldr	r3, [pc, #16]	@ (8003ae8 <bme280_begin+0x28>)
 8003ad8:	2207      	movs	r2, #7
 8003ada:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 8003adc:	4903      	ldr	r1, [pc, #12]	@ (8003aec <bme280_begin+0x2c>)
 8003ade:	4802      	ldr	r0, [pc, #8]	@ (8003ae8 <bme280_begin+0x28>)
 8003ae0:	f7fd fe58 	bl	8001794 <bme280_init>
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20001420 	.word	0x20001420
 8003aec:	2000118c 	.word	0x2000118c

08003af0 <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8003af4:	4b13      	ldr	r3, [pc, #76]	@ (8003b44 <bmi_imu_init+0x54>)
 8003af6:	2208      	movs	r2, #8
 8003af8:	719a      	strb	r2, [r3, #6]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 8003afa:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <bmi_imu_init+0x54>)
 8003afc:	2209      	movs	r2, #9
 8003afe:	71da      	strb	r2, [r3, #7]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8003b00:	4b10      	ldr	r3, [pc, #64]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	711a      	strb	r2, [r3, #4]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8003b06:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b08:	2203      	movs	r2, #3
 8003b0a:	715a      	strb	r2, [r3, #5]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b0e:	2202      	movs	r2, #2
 8003b10:	725a      	strb	r2, [r3, #9]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8003b18:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	721a      	strb	r2, [r3, #8]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 8003b1e:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b20:	2209      	movs	r2, #9
 8003b22:	741a      	strb	r2, [r3, #16]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b26:	220a      	movs	r2, #10
 8003b28:	745a      	strb	r2, [r3, #17]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b2c:	4a06      	ldr	r2, [pc, #24]	@ (8003b48 <bmi_imu_init+0x58>)
 8003b2e:	60da      	str	r2, [r3, #12]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 8003b30:	4b04      	ldr	r3, [pc, #16]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	615a      	str	r2, [r3, #20]

  return bmi088_init(&BMI_sensor);
 8003b36:	4803      	ldr	r0, [pc, #12]	@ (8003b44 <bmi_imu_init+0x54>)
 8003b38:	f7fe fa8c 	bl	8002054 <bmi088_init>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20001488 	.word	0x20001488
 8003b48:	20001138 	.word	0x20001138

08003b4c <read_ADC>:
/**
 * @brief Read HMC1021 magnetometer ADC values
 * @note Converts ADC readings to magnetic field strength and transmits data
 */
void read_ADC()
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
    static uint16_t adc1_raw = 0;  // ADC1 değeri (Channel 9)

    // ADC1 okuma
    HAL_ADC_Start(&hadc1);
 8003b50:	4818      	ldr	r0, [pc, #96]	@ (8003bb4 <read_ADC+0x68>)
 8003b52:	f002 fbb9 	bl	80062c8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK) {
 8003b56:	2105      	movs	r1, #5
 8003b58:	4816      	ldr	r0, [pc, #88]	@ (8003bb4 <read_ADC+0x68>)
 8003b5a:	f002 fcba 	bl	80064d2 <HAL_ADC_PollForConversion>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <read_ADC+0x26>
        adc1_raw = HAL_ADC_GetValue(&hadc1);
 8003b64:	4813      	ldr	r0, [pc, #76]	@ (8003bb4 <read_ADC+0x68>)
 8003b66:	f002 fd3f 	bl	80065e8 <HAL_ADC_GetValue>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <read_ADC+0x6c>)
 8003b70:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8003b72:	4810      	ldr	r0, [pc, #64]	@ (8003bb4 <read_ADC+0x68>)
 8003b74:	f002 fc7a 	bl	800646c <HAL_ADC_Stop>


    // Kalibrasyonlu değerleri hesapla
    hmc1021_voltage = (adc1_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 8003b78:	4b0f      	ldr	r3, [pc, #60]	@ (8003bb8 <read_ADC+0x6c>)
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	ee07 3a90 	vmov	s15, r3
 8003b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b84:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003bbc <read_ADC+0x70>
 8003b88:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b8c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003bc0 <read_ADC+0x74>
 8003b90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b94:	4b0b      	ldr	r3, [pc, #44]	@ (8003bc4 <read_ADC+0x78>)
 8003b96:	edc3 7a00 	vstr	s15, [r3]
    hmc1021_gauss = (hmc1021_voltage - 1.65f) / 1.0f;  // 1V/Gauss sensitivity
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <read_ADC+0x78>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003bc8 <read_ADC+0x7c>
 8003ba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <read_ADC+0x80>)
 8003baa:	edc3 7a00 	vstr	s15, [r3]

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	200010f0 	.word	0x200010f0
 8003bb8:	20001560 	.word	0x20001560
 8003bbc:	40533333 	.word	0x40533333
 8003bc0:	45800000 	.word	0x45800000
 8003bc4:	20001558 	.word	0x20001558
 8003bc8:	3fd33333 	.word	0x3fd33333
 8003bcc:	2000155c 	.word	0x2000155c

08003bd0 <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_4)
 8003bda:	88fb      	ldrh	r3, [r7, #6]
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d102      	bne.n	8003be6 <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 8003be0:	4806      	ldr	r0, [pc, #24]	@ (8003bfc <HAL_GPIO_EXTI_Callback+0x2c>)
 8003be2:	f7ff f867 	bl	8002cb4 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_3)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	2b08      	cmp	r3, #8
 8003bea:	d102      	bne.n	8003bf2 <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 8003bec:	4803      	ldr	r0, [pc, #12]	@ (8003bfc <HAL_GPIO_EXTI_Callback+0x2c>)
 8003bee:	f7ff f86e 	bl	8002cce <bmi088_set_gyro_INT>
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20001488 	.word	0x20001488

08003c00 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c10:	d10d      	bne.n	8003c2e <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	b2da      	uxtb	r2, r3
 8003c1c:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003c1e:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 8003c20:	4b07      	ldr	r3, [pc, #28]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	3301      	adds	r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4b05      	ldr	r3, [pc, #20]	@ (8003c40 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003c2c:	701a      	strb	r2, [r3, #0]
  }
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	20001552 	.word	0x20001552
 8003c40:	20001553 	.word	0x20001553

08003c44 <HAL_UART_TxCpltCallback>:
 * @brief UART transmission complete callback
 * @param huart UART handle
 * @note Clears transmission busy flag
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a09      	ldr	r2, [pc, #36]	@ (8003c78 <HAL_UART_TxCpltCallback+0x34>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d102      	bne.n	8003c5c <HAL_UART_TxCpltCallback+0x18>
		usart4_tx_busy = 0;
 8003c56:	4b09      	ldr	r3, [pc, #36]	@ (8003c7c <HAL_UART_TxCpltCallback+0x38>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == USART2) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	@ (8003c80 <HAL_UART_TxCpltCallback+0x3c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d102      	bne.n	8003c6c <HAL_UART_TxCpltCallback+0x28>
		usart2_tx_busy = 0;
 8003c66:	4b07      	ldr	r3, [pc, #28]	@ (8003c84 <HAL_UART_TxCpltCallback+0x40>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
	}
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40004c00 	.word	0x40004c00
 8003c7c:	20001550 	.word	0x20001550
 8003c80:	40004400 	.word	0x40004400
 8003c84:	20001551 	.word	0x20001551

08003c88 <uart2_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void uart2_send_packet_dma(uint8_t *data, uint16_t size)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	460b      	mov	r3, r1
 8003c92:	807b      	strh	r3, [r7, #2]
	if (!usart2_tx_busy) {
 8003c94:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <uart2_send_packet_dma+0x30>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d108      	bne.n	8003cb0 <uart2_send_packet_dma+0x28>
		usart2_tx_busy = 1;
 8003c9e:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <uart2_send_packet_dma+0x30>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, data, size);
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4804      	ldr	r0, [pc, #16]	@ (8003cbc <uart2_send_packet_dma+0x34>)
 8003cac:	f006 faf0 	bl	800a290 <HAL_UART_Transmit_DMA>
	}
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20001551 	.word	0x20001551
 8003cbc:	20001270 	.word	0x20001270

08003cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc4:	b672      	cpsid	i
}
 8003cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <Error_Handler+0x8>

08003ccc <check_sum_hesapla_normal>:
#include "packet.h"
#include <math.h>

unsigned char normal_paket[38];

unsigned char check_sum_hesapla_normal(int a){
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
    for(int i = 4; i < a; i++){
 8003cd8:	2304      	movs	r3, #4
 8003cda:	60bb      	str	r3, [r7, #8]
 8003cdc:	e00a      	b.n	8003cf4 <check_sum_hesapla_normal+0x28>
        check_sum += normal_paket[i];
 8003cde:	4a0e      	ldr	r2, [pc, #56]	@ (8003d18 <check_sum_hesapla_normal+0x4c>)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4413      	add	r3, r2
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
    for(int i = 4; i < a; i++){
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	60bb      	str	r3, [r7, #8]
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	dbf0      	blt.n	8003cde <check_sum_hesapla_normal+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	425a      	negs	r2, r3
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	bf58      	it	pl
 8003d06:	4253      	negpl	r3, r2
 8003d08:	b2db      	uxtb	r3, r3
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	20001564 	.word	0x20001564

08003d1c <addDataPacketNormal>:
  normal_paket[48] = check_sum_hesapla_normal(48); // Check_sum = check_sum_hesapla();
  normal_paket[49] = 0x0D; // Sabit
  normal_paket[50] = 0x0A;
}*/

void addDataPacketNormal(BME_280_t* BME, bmi088_struct_t* BMI, gps_data_t* GPS, float hmc1021_gauss){
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08e      	sub	sp, #56	@ 0x38
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6178      	str	r0, [r7, #20]
 8003d24:	6139      	str	r1, [r7, #16]
 8003d26:	60fa      	str	r2, [r7, #12]
 8003d28:	ed87 0a02 	vstr	s0, [r7, #8]
  normal_paket[0] = 0xFF; // Sabit
 8003d2c:	4b59      	ldr	r3, [pc, #356]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d2e:	22ff      	movs	r2, #255	@ 0xff
 8003d30:	701a      	strb	r2, [r3, #0]
  normal_paket[1] = 0xFF; // Sabit
 8003d32:	4b58      	ldr	r3, [pc, #352]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d34:	22ff      	movs	r2, #255	@ 0xff
 8003d36:	705a      	strb	r2, [r3, #1]
  normal_paket[2] = 0x54; // Sabit
 8003d38:	4b56      	ldr	r3, [pc, #344]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d3a:	2254      	movs	r2, #84	@ 0x54
 8003d3c:	709a      	strb	r2, [r3, #2]
  normal_paket[3] = 0x52; // Sabit
 8003d3e:	4b55      	ldr	r3, [pc, #340]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d40:	2252      	movs	r2, #82	@ 0x52
 8003d42:	70da      	strb	r2, [r3, #3]

  normal_paket[4] = 0;   // Takim ID = 0
 8003d44:	4b53      	ldr	r3, [pc, #332]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	711a      	strb	r2, [r3, #4]
  normal_paket[5] = 0; // Sayac degeri = 0
 8003d4a:	4b52      	ldr	r3, [pc, #328]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	715a      	strb	r2, [r3, #5]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = BME->altitude; // Irtifa degerinin atamasini yapiyoruz.
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	6a1b      	ldr	r3, [r3, #32]
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
  normal_paket[6] = irtifa_float32_uint8_donusturucu.array[0];
 8003d56:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8003d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d5c:	719a      	strb	r2, [r3, #6]
  normal_paket[7] = irtifa_float32_uint8_donusturucu.array[1];
 8003d5e:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8003d62:	4b4c      	ldr	r3, [pc, #304]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d64:	71da      	strb	r2, [r3, #7]
  normal_paket[8] = irtifa_float32_uint8_donusturucu.array[2];
 8003d66:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8003d6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d6c:	721a      	strb	r2, [r3, #8]
  normal_paket[9] = irtifa_float32_uint8_donusturucu.array[3];
 8003d6e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003d72:	4b48      	ldr	r3, [pc, #288]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d74:	725a      	strb	r2, [r3, #9]


  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
  roket_gps_irtifa_float32_uint8_donusturucu.sayi = GPS->altitude; // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30
  normal_paket[10] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 8003d7c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003d80:	4b44      	ldr	r3, [pc, #272]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d82:	729a      	strb	r2, [r3, #10]
  normal_paket[11] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 8003d84:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8003d88:	4b42      	ldr	r3, [pc, #264]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d8a:	72da      	strb	r2, [r3, #11]
  normal_paket[12] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 8003d8c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8003d90:	4b40      	ldr	r3, [pc, #256]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d92:	731a      	strb	r2, [r3, #12]
  normal_paket[13] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 8003d94:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003d98:	4b3e      	ldr	r3, [pc, #248]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003d9a:	735a      	strb	r2, [r3, #13]

   // Roket Enlem
  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
  roket_enlem_float32_uint8_donusturucu.sayi = GPS->latitude; // Roket enlem degerinin atamasini yapiyoruz.
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  normal_paket[14] = roket_enlem_float32_uint8_donusturucu.array[0];
 8003da2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003da6:	4b3b      	ldr	r3, [pc, #236]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003da8:	739a      	strb	r2, [r3, #14]
  normal_paket[15] = roket_enlem_float32_uint8_donusturucu.array[1];
 8003daa:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003dae:	4b39      	ldr	r3, [pc, #228]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003db0:	73da      	strb	r2, [r3, #15]
  normal_paket[16] = roket_enlem_float32_uint8_donusturucu.array[2];
 8003db2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8003db6:	4b37      	ldr	r3, [pc, #220]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003db8:	741a      	strb	r2, [r3, #16]
  normal_paket[17] = roket_enlem_float32_uint8_donusturucu.array[3];
 8003dba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003dbe:	4b35      	ldr	r3, [pc, #212]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003dc0:	745a      	strb	r2, [r3, #17]

  // Roket Boylam
  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = GPS->longitude; // Roket boylam degerinin atamasini yapiyoruz.
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  normal_paket[18] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 8003dc8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003dcc:	4b31      	ldr	r3, [pc, #196]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003dce:	749a      	strb	r2, [r3, #18]
  normal_paket[19] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 8003dd0:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003dd4:	4b2f      	ldr	r3, [pc, #188]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003dd6:	74da      	strb	r2, [r3, #19]
  normal_paket[20] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 8003dd8:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8003ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003dde:	751a      	strb	r2, [r3, #20]
  normal_paket[21] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 8003de0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003de4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003de6:	755a      	strb	r2, [r3, #21]


  FLOAT32_UINT8_DONUSTURUCU sicaklik_float32_uint8_donusturucu;
  sicaklik_float32_uint8_donusturucu.sayi = BME->temperature; // Sicaklik degerinin atamasini yapiyoruz.
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
  normal_paket[22] = sicaklik_float32_uint8_donusturucu.array[0];
 8003dee:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003df2:	4b28      	ldr	r3, [pc, #160]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003df4:	759a      	strb	r2, [r3, #22]
  normal_paket[23] = sicaklik_float32_uint8_donusturucu.array[1];
 8003df6:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003dfa:	4b26      	ldr	r3, [pc, #152]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003dfc:	75da      	strb	r2, [r3, #23]
  normal_paket[24] = sicaklik_float32_uint8_donusturucu.array[2];
 8003dfe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003e02:	4b24      	ldr	r3, [pc, #144]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e04:	761a      	strb	r2, [r3, #24]
  normal_paket[25] = sicaklik_float32_uint8_donusturucu.array[3];
 8003e06:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003e0a:	4b22      	ldr	r3, [pc, #136]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e0c:	765a      	strb	r2, [r3, #25]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = BME->pressure; // Basinc degerinin atamasini yapiyoruz.
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	623b      	str	r3, [r7, #32]
  normal_paket[26] = basinc_float32_uint8_donusturucu.array[0];
 8003e14:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003e18:	4b1e      	ldr	r3, [pc, #120]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e1a:	769a      	strb	r2, [r3, #26]
  normal_paket[27] = basinc_float32_uint8_donusturucu.array[1];
 8003e1c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003e20:	4b1c      	ldr	r3, [pc, #112]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e22:	76da      	strb	r2, [r3, #27]
  normal_paket[28] = basinc_float32_uint8_donusturucu.array[2];
 8003e24:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003e28:	4b1a      	ldr	r3, [pc, #104]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e2a:	771a      	strb	r2, [r3, #28]
  normal_paket[29] = basinc_float32_uint8_donusturucu.array[3];
 8003e2c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003e30:	4b18      	ldr	r3, [pc, #96]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e32:	775a      	strb	r2, [r3, #29]

  FLOAT32_UINT8_DONUSTURUCU gorevVeri_float32_uint8_donusturucu;
  gorevVeri_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Basinc degerinin atamasini yapiyoruz.
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	61fb      	str	r3, [r7, #28]
  normal_paket[30] = gorevVeri_float32_uint8_donusturucu.array[0];
 8003e38:	7f3a      	ldrb	r2, [r7, #28]
 8003e3a:	4b16      	ldr	r3, [pc, #88]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e3c:	779a      	strb	r2, [r3, #30]
  normal_paket[31] = gorevVeri_float32_uint8_donusturucu.array[1];
 8003e3e:	7f7a      	ldrb	r2, [r7, #29]
 8003e40:	4b14      	ldr	r3, [pc, #80]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e42:	77da      	strb	r2, [r3, #31]
  normal_paket[32] = gorevVeri_float32_uint8_donusturucu.array[2];
 8003e44:	7fba      	ldrb	r2, [r7, #30]
 8003e46:	4b13      	ldr	r3, [pc, #76]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e48:	f883 2020 	strb.w	r2, [r3, #32]
  normal_paket[33] = gorevVeri_float32_uint8_donusturucu.array[3];
 8003e4c:	7ffa      	ldrb	r2, [r7, #31]
 8003e4e:	4b11      	ldr	r3, [pc, #68]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  normal_paket[34] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	edd3 7a07 	vldr	s15, [r3, #28]
 8003e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8003e62:	793b      	ldrb	r3, [r7, #4]
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e68:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  normal_paket[35] = check_sum_hesapla_normal(35); // Check_sum = check_sum_hesapla();
 8003e6c:	2023      	movs	r0, #35	@ 0x23
 8003e6e:	f7ff ff2d 	bl	8003ccc <check_sum_hesapla_normal>
 8003e72:	4603      	mov	r3, r0
 8003e74:	461a      	mov	r2, r3
 8003e76:	4b07      	ldr	r3, [pc, #28]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e78:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  normal_paket[36] = 0x0D; // Sabit
 8003e7c:	4b05      	ldr	r3, [pc, #20]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e7e:	220d      	movs	r2, #13
 8003e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  normal_paket[37] = 0x0A;
 8003e84:	4b03      	ldr	r3, [pc, #12]	@ (8003e94 <addDataPacketNormal+0x178>)
 8003e86:	220a      	movs	r2, #10
 8003e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8003e8c:	bf00      	nop
 8003e8e:	3738      	adds	r7, #56	@ 0x38
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	20001564 	.word	0x20001564

08003e98 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b09e      	sub	sp, #120	@ 0x78
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ea2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ea6:	ed87 1a01 	vstr	s2, [r7, #4]
 8003eaa:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8003eb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eb8:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003ebc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8003ec0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ec4:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003ec8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 8003ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ed0:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003ed4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	633b      	str	r3, [r7, #48]	@ 0x30
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8003ee6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eea:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003eee:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8003ef6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003efa:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003efe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8003f14:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f18:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8003f1c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 8003f26:	f107 0310 	add.w	r3, r7, #16
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	605a      	str	r2, [r3, #4]
 8003f30:	609a      	str	r2, [r3, #8]
 8003f32:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 8003f34:	2300      	movs	r3, #0
 8003f36:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f38:	e043      	b.n	8003fc2 <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f3e:	e024      	b.n	8003f8a <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 8003f40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	3378      	adds	r3, #120	@ 0x78
 8003f46:	443b      	add	r3, r7
 8003f48:	3b68      	subs	r3, #104	@ 0x68
 8003f4a:	ed93 7a00 	vldr	s14, [r3]
 8003f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f50:	009a      	lsls	r2, r3, #2
 8003f52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	3378      	adds	r3, #120	@ 0x78
 8003f5a:	443b      	add	r3, r7
 8003f5c:	3b58      	subs	r3, #88	@ 0x58
 8003f5e:	edd3 6a00 	vldr	s13, [r3]
 8003f62:	4a5d      	ldr	r2, [pc, #372]	@ (80040d8 <ekf_predict+0x240>)
 8003f64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	edd3 7a00 	vldr	s15, [r3]
 8003f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	3378      	adds	r3, #120	@ 0x78
 8003f7c:	443b      	add	r3, r7
 8003f7e:	3b68      	subs	r3, #104	@ 0x68
 8003f80:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8003f84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f86:	3301      	adds	r3, #1
 8003f88:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	ddd7      	ble.n	8003f40 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8003f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	3378      	adds	r3, #120	@ 0x78
 8003f96:	443b      	add	r3, r7
 8003f98:	3b68      	subs	r3, #104	@ 0x68
 8003f9a:	ed93 7a00 	vldr	s14, [r3]
 8003f9e:	edd7 7a00 	vldr	s15, [r7]
 8003fa2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003fa6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	3378      	adds	r3, #120	@ 0x78
 8003fb4:	443b      	add	r3, r7
 8003fb6:	3b68      	subs	r3, #104	@ 0x68
 8003fb8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 8003fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc4:	2b03      	cmp	r3, #3
 8003fc6:	ddb8      	ble.n	8003f3a <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 8003fc8:	2300      	movs	r3, #0
 8003fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fcc:	e017      	b.n	8003ffe <ekf_predict+0x166>
        q[i] += dq[i];
 8003fce:	4a42      	ldr	r2, [pc, #264]	@ (80040d8 <ekf_predict+0x240>)
 8003fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	ed93 7a00 	vldr	s14, [r3]
 8003fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	3378      	adds	r3, #120	@ 0x78
 8003fe0:	443b      	add	r3, r7
 8003fe2:	3b68      	subs	r3, #104	@ 0x68
 8003fe4:	edd3 7a00 	vldr	s15, [r3]
 8003fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fec:	4a3a      	ldr	r2, [pc, #232]	@ (80040d8 <ekf_predict+0x240>)
 8003fee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8003ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ffe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004000:	2b03      	cmp	r3, #3
 8004002:	dde4      	ble.n	8003fce <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004004:	4b34      	ldr	r3, [pc, #208]	@ (80040d8 <ekf_predict+0x240>)
 8004006:	ed93 7a00 	vldr	s14, [r3]
 800400a:	4b33      	ldr	r3, [pc, #204]	@ (80040d8 <ekf_predict+0x240>)
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004014:	4b30      	ldr	r3, [pc, #192]	@ (80040d8 <ekf_predict+0x240>)
 8004016:	edd3 6a01 	vldr	s13, [r3, #4]
 800401a:	4b2f      	ldr	r3, [pc, #188]	@ (80040d8 <ekf_predict+0x240>)
 800401c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004020:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004024:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <ekf_predict+0x240>)
 800402a:	edd3 6a02 	vldr	s13, [r3, #8]
 800402e:	4b2a      	ldr	r3, [pc, #168]	@ (80040d8 <ekf_predict+0x240>)
 8004030:	edd3 7a02 	vldr	s15, [r3, #8]
 8004034:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800403c:	4b26      	ldr	r3, [pc, #152]	@ (80040d8 <ekf_predict+0x240>)
 800403e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004042:	4b25      	ldr	r3, [pc, #148]	@ (80040d8 <ekf_predict+0x240>)
 8004044:	edd3 7a03 	vldr	s15, [r3, #12]
 8004048:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800404c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004050:	eeb0 0a67 	vmov.f32	s0, s15
 8004054:	f00c fbce 	bl	80107f4 <sqrtf>
 8004058:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 800405c:	2300      	movs	r3, #0
 800405e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004060:	e012      	b.n	8004088 <ekf_predict+0x1f0>
        q[i] /= norm;
 8004062:	4a1d      	ldr	r2, [pc, #116]	@ (80040d8 <ekf_predict+0x240>)
 8004064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	edd3 6a00 	vldr	s13, [r3]
 800406e:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004076:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <ekf_predict+0x240>)
 8004078:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8004082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004084:	3301      	adds	r3, #1
 8004086:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004088:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800408a:	2b03      	cmp	r3, #3
 800408c:	dde9      	ble.n	8004062 <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 800408e:	2300      	movs	r3, #0
 8004090:	667b      	str	r3, [r7, #100]	@ 0x64
 8004092:	e018      	b.n	80040c6 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8004094:	4911      	ldr	r1, [pc, #68]	@ (80040dc <ekf_predict+0x244>)
 8004096:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	edd3 7a00 	vldr	s15, [r3]
 80040a6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80040e0 <ekf_predict+0x248>
 80040aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80040ae:	490b      	ldr	r1, [pc, #44]	@ (80040dc <ekf_predict+0x244>)
 80040b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 80040c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c2:	3301      	adds	r3, #1
 80040c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80040c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	dde3      	ble.n	8004094 <ekf_predict+0x1fc>
}
 80040cc:	bf00      	nop
 80040ce:	bf00      	nop
 80040d0:	3778      	adds	r7, #120	@ 0x78
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000004 	.word	0x20000004
 80040dc:	2000158c 	.word	0x2000158c
 80040e0:	3727c5ac 	.word	0x3727c5ac

080040e4 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 80040ea:	4b2a      	ldr	r3, [pc, #168]	@ (8004194 <quaternionToYaw1+0xb0>)
 80040ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80040f0:	4b28      	ldr	r3, [pc, #160]	@ (8004194 <quaternionToYaw1+0xb0>)
 80040f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80040f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040fa:	4b26      	ldr	r3, [pc, #152]	@ (8004194 <quaternionToYaw1+0xb0>)
 80040fc:	edd3 6a00 	vldr	s13, [r3]
 8004100:	4b24      	ldr	r3, [pc, #144]	@ (8004194 <quaternionToYaw1+0xb0>)
 8004102:	edd3 7a03 	vldr	s15, [r3, #12]
 8004106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800410a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8004112:	4b20      	ldr	r3, [pc, #128]	@ (8004194 <quaternionToYaw1+0xb0>)
 8004114:	ed93 7a00 	vldr	s14, [r3]
 8004118:	4b1e      	ldr	r3, [pc, #120]	@ (8004194 <quaternionToYaw1+0xb0>)
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004122:	4b1c      	ldr	r3, [pc, #112]	@ (8004194 <quaternionToYaw1+0xb0>)
 8004124:	edd3 6a01 	vldr	s13, [r3, #4]
 8004128:	4b1a      	ldr	r3, [pc, #104]	@ (8004194 <quaternionToYaw1+0xb0>)
 800412a:	edd3 7a01 	vldr	s15, [r3, #4]
 800412e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004132:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004136:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <quaternionToYaw1+0xb0>)
 8004138:	edd3 6a02 	vldr	s13, [r3, #8]
 800413c:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <quaternionToYaw1+0xb0>)
 800413e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004146:	ee37 7a67 	vsub.f32	s14, s14, s15
 800414a:	4b12      	ldr	r3, [pc, #72]	@ (8004194 <quaternionToYaw1+0xb0>)
 800414c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <quaternionToYaw1+0xb0>)
 8004152:	edd3 7a03 	vldr	s15, [r3, #12]
 8004156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800415a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415e:	eef0 0a67 	vmov.f32	s1, s15
 8004162:	eeb0 0a46 	vmov.f32	s0, s12
 8004166:	f00c fb43 	bl	80107f0 <atan2f>
 800416a:	eef0 7a40 	vmov.f32	s15, s0
 800416e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004198 <quaternionToYaw1+0xb4>
 8004172:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004176:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800419c <quaternionToYaw1+0xb8>
 800417a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800417e:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	ee07 3a90 	vmov	s15, r3
}
 8004188:	eeb0 0a67 	vmov.f32	s0, s15
 800418c:	3708      	adds	r7, #8
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20000004 	.word	0x20000004
 8004198:	43340000 	.word	0x43340000
 800419c:	40490fd0 	.word	0x40490fd0

080041a0 <quaternionToPitch1>:

float quaternionToPitch1(){
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80041a6:	4b17      	ldr	r3, [pc, #92]	@ (8004204 <quaternionToPitch1+0x64>)
 80041a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80041ac:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <quaternionToPitch1+0x64>)
 80041ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80041b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041b6:	4b13      	ldr	r3, [pc, #76]	@ (8004204 <quaternionToPitch1+0x64>)
 80041b8:	edd3 6a00 	vldr	s13, [r3]
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <quaternionToPitch1+0x64>)
 80041be:	edd3 7a02 	vldr	s15, [r3, #8]
 80041c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80041ce:	eeb0 0a67 	vmov.f32	s0, s15
 80041d2:	f00c fae1 	bl	8010798 <asinf>
 80041d6:	eef0 7a40 	vmov.f32	s15, s0
 80041da:	eef1 7a67 	vneg.f32	s15, s15
 80041de:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004208 <quaternionToPitch1+0x68>
 80041e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041e6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800420c <quaternionToPitch1+0x6c>
 80041ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041ee:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	ee07 3a90 	vmov	s15, r3
}
 80041f8:	eeb0 0a67 	vmov.f32	s0, s15
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000004 	.word	0x20000004
 8004208:	43340000 	.word	0x43340000
 800420c:	40490fd0 	.word	0x40490fd0

08004210 <quaternionToRoll1>:

float quaternionToRoll1(){
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8004216:	4b2a      	ldr	r3, [pc, #168]	@ (80042c0 <quaternionToRoll1+0xb0>)
 8004218:	ed93 7a00 	vldr	s14, [r3]
 800421c:	4b28      	ldr	r3, [pc, #160]	@ (80042c0 <quaternionToRoll1+0xb0>)
 800421e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004222:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004226:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <quaternionToRoll1+0xb0>)
 8004228:	edd3 6a02 	vldr	s13, [r3, #8]
 800422c:	4b24      	ldr	r3, [pc, #144]	@ (80042c0 <quaternionToRoll1+0xb0>)
 800422e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800423a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800423e:	4b20      	ldr	r3, [pc, #128]	@ (80042c0 <quaternionToRoll1+0xb0>)
 8004240:	ed93 7a00 	vldr	s14, [r3]
 8004244:	4b1e      	ldr	r3, [pc, #120]	@ (80042c0 <quaternionToRoll1+0xb0>)
 8004246:	edd3 7a00 	vldr	s15, [r3]
 800424a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800424e:	4b1c      	ldr	r3, [pc, #112]	@ (80042c0 <quaternionToRoll1+0xb0>)
 8004250:	edd3 6a01 	vldr	s13, [r3, #4]
 8004254:	4b1a      	ldr	r3, [pc, #104]	@ (80042c0 <quaternionToRoll1+0xb0>)
 8004256:	edd3 7a01 	vldr	s15, [r3, #4]
 800425a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800425e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004262:	4b17      	ldr	r3, [pc, #92]	@ (80042c0 <quaternionToRoll1+0xb0>)
 8004264:	edd3 6a02 	vldr	s13, [r3, #8]
 8004268:	4b15      	ldr	r3, [pc, #84]	@ (80042c0 <quaternionToRoll1+0xb0>)
 800426a:	edd3 7a02 	vldr	s15, [r3, #8]
 800426e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004272:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004276:	4b12      	ldr	r3, [pc, #72]	@ (80042c0 <quaternionToRoll1+0xb0>)
 8004278:	edd3 6a03 	vldr	s13, [r3, #12]
 800427c:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <quaternionToRoll1+0xb0>)
 800427e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004282:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800428a:	eef0 0a67 	vmov.f32	s1, s15
 800428e:	eeb0 0a46 	vmov.f32	s0, s12
 8004292:	f00c faad 	bl	80107f0 <atan2f>
 8004296:	eef0 7a40 	vmov.f32	s15, s0
 800429a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80042c4 <quaternionToRoll1+0xb4>
 800429e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042a2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80042c8 <quaternionToRoll1+0xb8>
 80042a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042aa:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	ee07 3a90 	vmov	s15, r3
}
 80042b4:	eeb0 0a67 	vmov.f32	s0, s15
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000004 	.word	0x20000004
 80042c4:	43340000 	.word	0x43340000
 80042c8:	40490fd0 	.word	0x40490fd0

080042cc <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80042d2:	4b20      	ldr	r3, [pc, #128]	@ (8004354 <quaternionToYawDegree1+0x88>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <quaternionToYawDegree1+0x88>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	4b1d      	ldr	r3, [pc, #116]	@ (8004354 <quaternionToYawDegree1+0x88>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004354 <quaternionToYawDegree1+0x88>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 80042ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80042ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80042f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042f6:	edd7 6a04 	vldr	s13, [r7, #16]
 80042fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80042fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004306:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800430a:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 800430e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004312:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004316:	edd7 7a02 	vldr	s15, [r7, #8]
 800431a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800431e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004322:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800432a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800432e:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 8004332:	edd7 0a00 	vldr	s1, [r7]
 8004336:	ed97 0a01 	vldr	s0, [r7, #4]
 800433a:	f00c fa59 	bl	80107f0 <atan2f>
 800433e:	eef0 7a40 	vmov.f32	s15, s0
 8004342:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8004358 <quaternionToYawDegree1+0x8c>
 8004346:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800434a:	eeb0 0a67 	vmov.f32	s0, s15
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000004 	.word	0x20000004
 8004358:	42652ee0 	.word	0x42652ee0

0800435c <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 800435c:	b580      	push	{r7, lr}
 800435e:	b08c      	sub	sp, #48	@ 0x30
 8004360:	af00      	add	r7, sp, #0
 8004362:	ed87 0a03 	vstr	s0, [r7, #12]
 8004366:	edc7 0a02 	vstr	s1, [r7, #8]
 800436a:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 800436e:	4bd5      	ldr	r3, [pc, #852]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004370:	ed93 7a00 	vldr	s14, [r3]
 8004374:	4bd3      	ldr	r3, [pc, #844]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800437e:	4bd1      	ldr	r3, [pc, #836]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004380:	edd3 6a01 	vldr	s13, [r3, #4]
 8004384:	4bcf      	ldr	r3, [pc, #828]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004386:	edd3 7a01 	vldr	s15, [r3, #4]
 800438a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800438e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004392:	4bcc      	ldr	r3, [pc, #816]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004394:	edd3 6a02 	vldr	s13, [r3, #8]
 8004398:	4bca      	ldr	r3, [pc, #808]	@ (80046c4 <UpdateMahonyGains+0x368>)
 800439a:	edd3 7a02 	vldr	s15, [r3, #8]
 800439e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043a6:	4bc7      	ldr	r3, [pc, #796]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80043a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80043ac:	4bc5      	ldr	r3, [pc, #788]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80043ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80043b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ba:	eeb0 0a67 	vmov.f32	s0, s15
 80043be:	f00c fa19 	bl	80107f4 <sqrtf>
 80043c2:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 80043c6:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d2:	f000 8172 	beq.w	80046ba <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 80043d6:	4bbb      	ldr	r3, [pc, #748]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80043d8:	edd3 6a00 	vldr	s13, [r3]
 80043dc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80043e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043e4:	4bb7      	ldr	r3, [pc, #732]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80043e6:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 80043ea:	4bb6      	ldr	r3, [pc, #728]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80043ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80043f0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80043f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f8:	4bb2      	ldr	r3, [pc, #712]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80043fa:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 80043fe:	4bb1      	ldr	r3, [pc, #708]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004400:	edd3 6a02 	vldr	s13, [r3, #8]
 8004404:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800440c:	4bad      	ldr	r3, [pc, #692]	@ (80046c4 <UpdateMahonyGains+0x368>)
 800440e:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 8004412:	4bac      	ldr	r3, [pc, #688]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004414:	edd3 6a03 	vldr	s13, [r3, #12]
 8004418:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	4ba8      	ldr	r3, [pc, #672]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004422:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8004426:	4ba7      	ldr	r3, [pc, #668]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004428:	ed93 7a01 	vldr	s14, [r3, #4]
 800442c:	4ba5      	ldr	r3, [pc, #660]	@ (80046c4 <UpdateMahonyGains+0x368>)
 800442e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004432:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004436:	4ba3      	ldr	r3, [pc, #652]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004438:	edd3 6a00 	vldr	s13, [r3]
 800443c:	4ba1      	ldr	r3, [pc, #644]	@ (80046c4 <UpdateMahonyGains+0x368>)
 800443e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800444a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800444e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8004452:	4b9c      	ldr	r3, [pc, #624]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004454:	ed93 7a00 	vldr	s14, [r3]
 8004458:	4b9a      	ldr	r3, [pc, #616]	@ (80046c4 <UpdateMahonyGains+0x368>)
 800445a:	edd3 7a01 	vldr	s15, [r3, #4]
 800445e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004462:	4b98      	ldr	r3, [pc, #608]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004464:	edd3 6a02 	vldr	s13, [r3, #8]
 8004468:	4b96      	ldr	r3, [pc, #600]	@ (80046c4 <UpdateMahonyGains+0x368>)
 800446a:	edd3 7a03 	vldr	s15, [r3, #12]
 800446e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004476:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800447a:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 800447e:	4b91      	ldr	r3, [pc, #580]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004480:	ed93 7a00 	vldr	s14, [r3]
 8004484:	4b8f      	ldr	r3, [pc, #572]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004486:	edd3 7a00 	vldr	s15, [r3]
 800448a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800448e:	4b8d      	ldr	r3, [pc, #564]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004490:	edd3 6a01 	vldr	s13, [r3, #4]
 8004494:	4b8b      	ldr	r3, [pc, #556]	@ (80046c4 <UpdateMahonyGains+0x368>)
 8004496:	edd3 7a01 	vldr	s15, [r3, #4]
 800449a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800449e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044a2:	4b88      	ldr	r3, [pc, #544]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80044a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80044a8:	4b86      	ldr	r3, [pc, #536]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80044aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80044ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044b6:	4b83      	ldr	r3, [pc, #524]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80044b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80044bc:	4b81      	ldr	r3, [pc, #516]	@ (80046c4 <UpdateMahonyGains+0x368>)
 80044be:	edd3 7a03 	vldr	s15, [r3, #12]
 80044c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ca:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 80044ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80044d2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80044d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80044da:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80044e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80044ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044ee:	eeb0 0a67 	vmov.f32	s0, s15
 80044f2:	f001 f8cb 	bl	800568c <invSqrt>
 80044f6:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 80044fa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80044fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 800450a:	ed97 7a08 	vldr	s14, [r7, #32]
 800450e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 800451a:	ed97 7a07 	vldr	s14, [r7, #28]
 800451e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 800452a:	edd7 7a03 	vldr	s15, [r7, #12]
 800452e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004532:	edd7 7a02 	vldr	s15, [r7, #8]
 8004536:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800453a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800453e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004542:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800454a:	eeb0 0a67 	vmov.f32	s0, s15
 800454e:	f001 f89d 	bl	800568c <invSqrt>
 8004552:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 8004556:	ed97 7a03 	vldr	s14, [r7, #12]
 800455a:	edd7 7a05 	vldr	s15, [r7, #20]
 800455e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004562:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 8004566:	ed97 7a02 	vldr	s14, [r7, #8]
 800456a:	edd7 7a05 	vldr	s15, [r7, #20]
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 8004576:	ed97 7a01 	vldr	s14, [r7, #4]
 800457a:	edd7 7a05 	vldr	s15, [r7, #20]
 800457e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004582:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8004586:	ed97 7a03 	vldr	s14, [r7, #12]
 800458a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800458e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004592:	edd7 6a02 	vldr	s13, [r7, #8]
 8004596:	edd7 7a08 	vldr	s15, [r7, #32]
 800459a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800459e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a2:	edd7 6a01 	vldr	s13, [r7, #4]
 80045a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80045aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 80045b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80045ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	dd02      	ble.n	80045ce <UpdateMahonyGains+0x272>
 80045c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80045cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 80045ce:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80045d2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80045d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045de:	d501      	bpl.n	80045e4 <UpdateMahonyGains+0x288>
 80045e0:	4b39      	ldr	r3, [pc, #228]	@ (80046c8 <UpdateMahonyGains+0x36c>)
 80045e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 80045e4:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80045e8:	f00c f8aa 	bl	8010740 <acosf>
 80045ec:	eef0 7a40 	vmov.f32	s15, s0
 80045f0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80046cc <UpdateMahonyGains+0x370>
 80045f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f8:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 80045fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8004600:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004604:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460c:	dd0a      	ble.n	8004624 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 800460e:	4b30      	ldr	r3, [pc, #192]	@ (80046d0 <UpdateMahonyGains+0x374>)
 8004610:	2201      	movs	r2, #1
 8004612:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8004614:	4b2f      	ldr	r3, [pc, #188]	@ (80046d4 <UpdateMahonyGains+0x378>)
 8004616:	4a30      	ldr	r2, [pc, #192]	@ (80046d8 <UpdateMahonyGains+0x37c>)
 8004618:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 800461a:	4b30      	ldr	r3, [pc, #192]	@ (80046dc <UpdateMahonyGains+0x380>)
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	e01d      	b.n	8004660 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8004624:	edd7 7a04 	vldr	s15, [r7, #16]
 8004628:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800462c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004634:	dd0a      	ble.n	800464c <UpdateMahonyGains+0x2f0>
        Gain = 2;
 8004636:	4b26      	ldr	r3, [pc, #152]	@ (80046d0 <UpdateMahonyGains+0x374>)
 8004638:	2202      	movs	r2, #2
 800463a:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 800463c:	4b25      	ldr	r3, [pc, #148]	@ (80046d4 <UpdateMahonyGains+0x378>)
 800463e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004642:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8004644:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <UpdateMahonyGains+0x380>)
 8004646:	4a26      	ldr	r2, [pc, #152]	@ (80046e0 <UpdateMahonyGains+0x384>)
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	e009      	b.n	8004660 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 800464c:	4b20      	ldr	r3, [pc, #128]	@ (80046d0 <UpdateMahonyGains+0x374>)
 800464e:	2203      	movs	r2, #3
 8004650:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8004652:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <UpdateMahonyGains+0x378>)
 8004654:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8004658:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 800465a:	4b20      	ldr	r3, [pc, #128]	@ (80046dc <UpdateMahonyGains+0x380>)
 800465c:	4a21      	ldr	r2, [pc, #132]	@ (80046e4 <UpdateMahonyGains+0x388>)
 800465e:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8004660:	4b1c      	ldr	r3, [pc, #112]	@ (80046d4 <UpdateMahonyGains+0x378>)
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 800466a:	eeb0 0a67 	vmov.f32	s0, s15
 800466e:	f00c f90e 	bl	801088e <fminf>
 8004672:	eef0 7a40 	vmov.f32	s15, s0
 8004676:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80046e8 <UpdateMahonyGains+0x38c>
 800467a:	eeb0 0a67 	vmov.f32	s0, s15
 800467e:	f00c f8e9 	bl	8010854 <fmaxf>
 8004682:	eef0 7a40 	vmov.f32	s15, s0
 8004686:	4b13      	ldr	r3, [pc, #76]	@ (80046d4 <UpdateMahonyGains+0x378>)
 8004688:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 800468c:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <UpdateMahonyGains+0x380>)
 800468e:	edd3 7a00 	vldr	s15, [r3]
 8004692:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80046ec <UpdateMahonyGains+0x390>
 8004696:	eeb0 0a67 	vmov.f32	s0, s15
 800469a:	f00c f8f8 	bl	801088e <fminf>
 800469e:	eef0 7a40 	vmov.f32	s15, s0
 80046a2:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80046f0 <UpdateMahonyGains+0x394>
 80046a6:	eeb0 0a67 	vmov.f32	s0, s15
 80046aa:	f00c f8d3 	bl	8010854 <fmaxf>
 80046ae:	eef0 7a40 	vmov.f32	s15, s0
 80046b2:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <UpdateMahonyGains+0x380>)
 80046b4:	edc3 7a00 	vstr	s15, [r3]
 80046b8:	e000      	b.n	80046bc <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 80046ba:	bf00      	nop
}
 80046bc:	3730      	adds	r7, #48	@ 0x30
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000014 	.word	0x20000014
 80046c8:	bf800000 	.word	0xbf800000
 80046cc:	42652ee2 	.word	0x42652ee2
 80046d0:	200015d8 	.word	0x200015d8
 80046d4:	20000024 	.word	0x20000024
 80046d8:	3e4ccccd 	.word	0x3e4ccccd
 80046dc:	20000028 	.word	0x20000028
 80046e0:	3c23d70a 	.word	0x3c23d70a
 80046e4:	3d4ccccd 	.word	0x3d4ccccd
 80046e8:	3dcccccd 	.word	0x3dcccccd
 80046ec:	3d4ccccd 	.word	0x3d4ccccd
 80046f0:	00000000 	.word	0x00000000

080046f4 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08a      	sub	sp, #40	@ 0x28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	ed87 0a07 	vstr	s0, [r7, #28]
 80046fe:	edc7 0a06 	vstr	s1, [r7, #24]
 8004702:	ed87 1a05 	vstr	s2, [r7, #20]
 8004706:	edc7 1a04 	vstr	s3, [r7, #16]
 800470a:	ed87 2a03 	vstr	s4, [r7, #12]
 800470e:	edc7 2a02 	vstr	s5, [r7, #8]
 8004712:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8004716:	4b60      	ldr	r3, [pc, #384]	@ (8004898 <Orientation_Update+0x1a4>)
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 800471a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800471e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004726:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800472a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800472e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004732:	4b5a      	ldr	r3, [pc, #360]	@ (800489c <Orientation_Update+0x1a8>)
 8004734:	edd3 7a00 	vldr	s15, [r3]
 8004738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800473c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004740:	4b56      	ldr	r3, [pc, #344]	@ (800489c <Orientation_Update+0x1a8>)
 8004742:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 8004746:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800474a:	edd7 7a03 	vldr	s15, [r7, #12]
 800474e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004756:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800475a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800475e:	4b50      	ldr	r3, [pc, #320]	@ (80048a0 <Orientation_Update+0x1ac>)
 8004760:	edd3 7a00 	vldr	s15, [r3]
 8004764:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476c:	4b4c      	ldr	r3, [pc, #304]	@ (80048a0 <Orientation_Update+0x1ac>)
 800476e:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 8004772:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004776:	edd7 7a02 	vldr	s15, [r7, #8]
 800477a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800477e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004782:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004786:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800478a:	4b46      	ldr	r3, [pc, #280]	@ (80048a4 <Orientation_Update+0x1b0>)
 800478c:	edd3 7a00 	vldr	s15, [r3]
 8004790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004798:	4b42      	ldr	r3, [pc, #264]	@ (80048a4 <Orientation_Update+0x1b0>)
 800479a:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 800479e:	4b3f      	ldr	r3, [pc, #252]	@ (800489c <Orientation_Update+0x1a8>)
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	4b3e      	ldr	r3, [pc, #248]	@ (80048a0 <Orientation_Update+0x1ac>)
 80047a6:	ed93 7a00 	vldr	s14, [r3]
 80047aa:	4b3e      	ldr	r3, [pc, #248]	@ (80048a4 <Orientation_Update+0x1b0>)
 80047ac:	edd3 6a00 	vldr	s13, [r3]
 80047b0:	eeb0 1a66 	vmov.f32	s2, s13
 80047b4:	eef0 0a47 	vmov.f32	s1, s14
 80047b8:	eeb0 0a67 	vmov.f32	s0, s15
 80047bc:	f7ff fdce 	bl	800435c <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 80047c0:	4b36      	ldr	r3, [pc, #216]	@ (800489c <Orientation_Update+0x1a8>)
 80047c2:	ed93 7a00 	vldr	s14, [r3]
 80047c6:	4b35      	ldr	r3, [pc, #212]	@ (800489c <Orientation_Update+0x1a8>)
 80047c8:	edd3 7a00 	vldr	s15, [r3]
 80047cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047d0:	4b33      	ldr	r3, [pc, #204]	@ (80048a0 <Orientation_Update+0x1ac>)
 80047d2:	edd3 6a00 	vldr	s13, [r3]
 80047d6:	4b32      	ldr	r3, [pc, #200]	@ (80048a0 <Orientation_Update+0x1ac>)
 80047d8:	edd3 7a00 	vldr	s15, [r3]
 80047dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047e4:	4b2f      	ldr	r3, [pc, #188]	@ (80048a4 <Orientation_Update+0x1b0>)
 80047e6:	edd3 6a00 	vldr	s13, [r3]
 80047ea:	4b2e      	ldr	r3, [pc, #184]	@ (80048a4 <Orientation_Update+0x1b0>)
 80047ec:	edd3 7a00 	vldr	s15, [r3]
 80047f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047f8:	eeb0 0a67 	vmov.f32	s0, s15
 80047fc:	f00b fffa 	bl	80107f4 <sqrtf>
 8004800:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8004804:	4b28      	ldr	r3, [pc, #160]	@ (80048a8 <Orientation_Update+0x1b4>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00c      	beq.n	8004826 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 800480c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004810:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80048ac <Orientation_Update+0x1b8>
 8004814:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481c:	d50f      	bpl.n	800483e <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 800481e:	4b22      	ldr	r3, [pc, #136]	@ (80048a8 <Orientation_Update+0x1b4>)
 8004820:	2200      	movs	r2, #0
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e00b      	b.n	800483e <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 8004826:	edd7 7a08 	vldr	s15, [r7, #32]
 800482a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80048b0 <Orientation_Update+0x1bc>
 800482e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004836:	dd02      	ble.n	800483e <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8004838:	4b1b      	ldr	r3, [pc, #108]	@ (80048a8 <Orientation_Update+0x1b4>)
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 800483e:	4b1a      	ldr	r3, [pc, #104]	@ (80048a8 <Orientation_Update+0x1b4>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 8004846:	edd7 1a01 	vldr	s3, [r7, #4]
 800484a:	ed97 1a05 	vldr	s2, [r7, #20]
 800484e:	edd7 0a06 	vldr	s1, [r7, #24]
 8004852:	ed97 0a07 	vldr	s0, [r7, #28]
 8004856:	f000 f82d 	bl	80048b4 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 800485a:	e018      	b.n	800488e <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 800485c:	4b0f      	ldr	r3, [pc, #60]	@ (800489c <Orientation_Update+0x1a8>)
 800485e:	edd3 7a00 	vldr	s15, [r3]
 8004862:	4b0f      	ldr	r3, [pc, #60]	@ (80048a0 <Orientation_Update+0x1ac>)
 8004864:	ed93 7a00 	vldr	s14, [r3]
 8004868:	4b0e      	ldr	r3, [pc, #56]	@ (80048a4 <Orientation_Update+0x1b0>)
 800486a:	edd3 6a00 	vldr	s13, [r3]
 800486e:	ed97 3a01 	vldr	s6, [r7, #4]
 8004872:	eef0 2a66 	vmov.f32	s5, s13
 8004876:	eeb0 2a47 	vmov.f32	s4, s14
 800487a:	eef0 1a67 	vmov.f32	s3, s15
 800487e:	ed97 1a05 	vldr	s2, [r7, #20]
 8004882:	edd7 0a06 	vldr	s1, [r7, #24]
 8004886:	ed97 0a07 	vldr	s0, [r7, #28]
 800488a:	f000 f93b 	bl	8004b04 <MahonyAHRSupdateIMU>
}
 800488e:	bf00      	nop
 8004890:	3728      	adds	r7, #40	@ 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	3e99999a 	.word	0x3e99999a
 800489c:	200015dc 	.word	0x200015dc
 80048a0:	200015e0 	.word	0x200015e0
 80048a4:	200015e4 	.word	0x200015e4
 80048a8:	200015d9 	.word	0x200015d9
 80048ac:	41d3d2db 	.word	0x41d3d2db
 80048b0:	420172a2 	.word	0x420172a2

080048b4 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	@ 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	ed87 0a03 	vstr	s0, [r7, #12]
 80048be:	edc7 0a02 	vstr	s1, [r7, #8]
 80048c2:	ed87 1a01 	vstr	s2, [r7, #4]
 80048c6:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 80048ca:	4b8c      	ldr	r3, [pc, #560]	@ (8004afc <updateQuaternion+0x248>)
 80048cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80048d0:	eeb1 7a67 	vneg.f32	s14, s15
 80048d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80048d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048dc:	4b87      	ldr	r3, [pc, #540]	@ (8004afc <updateQuaternion+0x248>)
 80048de:	edd3 6a02 	vldr	s13, [r3, #8]
 80048e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80048e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048ee:	4b83      	ldr	r3, [pc, #524]	@ (8004afc <updateQuaternion+0x248>)
 80048f0:	edd3 6a03 	vldr	s13, [r3, #12]
 80048f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80048f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004900:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004908:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 800490c:	4b7b      	ldr	r3, [pc, #492]	@ (8004afc <updateQuaternion+0x248>)
 800490e:	ed93 7a00 	vldr	s14, [r3]
 8004912:	edd7 7a03 	vldr	s15, [r7, #12]
 8004916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800491a:	4b78      	ldr	r3, [pc, #480]	@ (8004afc <updateQuaternion+0x248>)
 800491c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004920:	edd7 7a01 	vldr	s15, [r7, #4]
 8004924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004928:	ee37 7a27 	vadd.f32	s14, s14, s15
 800492c:	4b73      	ldr	r3, [pc, #460]	@ (8004afc <updateQuaternion+0x248>)
 800492e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004932:	edd7 7a02 	vldr	s15, [r7, #8]
 8004936:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800493a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800493e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004946:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 800494a:	4b6c      	ldr	r3, [pc, #432]	@ (8004afc <updateQuaternion+0x248>)
 800494c:	ed93 7a00 	vldr	s14, [r3]
 8004950:	edd7 7a02 	vldr	s15, [r7, #8]
 8004954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004958:	4b68      	ldr	r3, [pc, #416]	@ (8004afc <updateQuaternion+0x248>)
 800495a:	edd3 6a01 	vldr	s13, [r3, #4]
 800495e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004966:	ee37 7a67 	vsub.f32	s14, s14, s15
 800496a:	4b64      	ldr	r3, [pc, #400]	@ (8004afc <updateQuaternion+0x248>)
 800496c:	edd3 6a03 	vldr	s13, [r3, #12]
 8004970:	edd7 7a03 	vldr	s15, [r7, #12]
 8004974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800497c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004984:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8004988:	4b5c      	ldr	r3, [pc, #368]	@ (8004afc <updateQuaternion+0x248>)
 800498a:	ed93 7a00 	vldr	s14, [r3]
 800498e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004996:	4b59      	ldr	r3, [pc, #356]	@ (8004afc <updateQuaternion+0x248>)
 8004998:	edd3 6a01 	vldr	s13, [r3, #4]
 800499c:	edd7 7a02 	vldr	s15, [r7, #8]
 80049a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049a8:	4b54      	ldr	r3, [pc, #336]	@ (8004afc <updateQuaternion+0x248>)
 80049aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80049ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80049b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80049be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049c2:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 80049c6:	4b4d      	ldr	r3, [pc, #308]	@ (8004afc <updateQuaternion+0x248>)
 80049c8:	ed93 7a00 	vldr	s14, [r3]
 80049cc:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80049d0:	edd7 7a00 	vldr	s15, [r7]
 80049d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049dc:	4b47      	ldr	r3, [pc, #284]	@ (8004afc <updateQuaternion+0x248>)
 80049de:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 80049e2:	4b46      	ldr	r3, [pc, #280]	@ (8004afc <updateQuaternion+0x248>)
 80049e4:	ed93 7a01 	vldr	s14, [r3, #4]
 80049e8:	edd7 6a08 	vldr	s13, [r7, #32]
 80049ec:	edd7 7a00 	vldr	s15, [r7]
 80049f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f8:	4b40      	ldr	r3, [pc, #256]	@ (8004afc <updateQuaternion+0x248>)
 80049fa:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 80049fe:	4b3f      	ldr	r3, [pc, #252]	@ (8004afc <updateQuaternion+0x248>)
 8004a00:	ed93 7a02 	vldr	s14, [r3, #8]
 8004a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a08:	edd7 7a00 	vldr	s15, [r7]
 8004a0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a14:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <updateQuaternion+0x248>)
 8004a16:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8004a1a:	4b38      	ldr	r3, [pc, #224]	@ (8004afc <updateQuaternion+0x248>)
 8004a1c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a20:	edd7 6a06 	vldr	s13, [r7, #24]
 8004a24:	edd7 7a00 	vldr	s15, [r7]
 8004a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a30:	4b32      	ldr	r3, [pc, #200]	@ (8004afc <updateQuaternion+0x248>)
 8004a32:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004a36:	4b31      	ldr	r3, [pc, #196]	@ (8004afc <updateQuaternion+0x248>)
 8004a38:	ed93 7a00 	vldr	s14, [r3]
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	@ (8004afc <updateQuaternion+0x248>)
 8004a3e:	edd3 7a00 	vldr	s15, [r3]
 8004a42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a46:	4b2d      	ldr	r3, [pc, #180]	@ (8004afc <updateQuaternion+0x248>)
 8004a48:	edd3 6a01 	vldr	s13, [r3, #4]
 8004a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004afc <updateQuaternion+0x248>)
 8004a4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a5a:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <updateQuaternion+0x248>)
 8004a5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a60:	4b26      	ldr	r3, [pc, #152]	@ (8004afc <updateQuaternion+0x248>)
 8004a62:	edd3 7a02 	vldr	s15, [r3, #8]
 8004a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a6e:	4b23      	ldr	r3, [pc, #140]	@ (8004afc <updateQuaternion+0x248>)
 8004a70:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a74:	4b21      	ldr	r3, [pc, #132]	@ (8004afc <updateQuaternion+0x248>)
 8004a76:	edd3 7a03 	vldr	s15, [r3, #12]
 8004a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a82:	eeb0 0a67 	vmov.f32	s0, s15
 8004a86:	f00b feb5 	bl	80107f4 <sqrtf>
 8004a8a:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8004a8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a92:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004b00 <updateQuaternion+0x24c>
 8004a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9e:	dc00      	bgt.n	8004aa2 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8004aa0:	e027      	b.n	8004af2 <updateQuaternion+0x23e>
        q[0] /= norm;
 8004aa2:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <updateQuaternion+0x248>)
 8004aa4:	edd3 6a00 	vldr	s13, [r3]
 8004aa8:	ed97 7a05 	vldr	s14, [r7, #20]
 8004aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab0:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <updateQuaternion+0x248>)
 8004ab2:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8004ab6:	4b11      	ldr	r3, [pc, #68]	@ (8004afc <updateQuaternion+0x248>)
 8004ab8:	edd3 6a01 	vldr	s13, [r3, #4]
 8004abc:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8004afc <updateQuaternion+0x248>)
 8004ac6:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8004aca:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <updateQuaternion+0x248>)
 8004acc:	edd3 6a02 	vldr	s13, [r3, #8]
 8004ad0:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad8:	4b08      	ldr	r3, [pc, #32]	@ (8004afc <updateQuaternion+0x248>)
 8004ada:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8004ade:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <updateQuaternion+0x248>)
 8004ae0:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ae4:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aec:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <updateQuaternion+0x248>)
 8004aee:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004af2:	bf00      	nop
 8004af4:	3728      	adds	r7, #40	@ 0x28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000014 	.word	0x20000014
 8004b00:	358637bd 	.word	0x358637bd

08004b04 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b092      	sub	sp, #72	@ 0x48
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	ed87 0a07 	vstr	s0, [r7, #28]
 8004b0e:	edc7 0a06 	vstr	s1, [r7, #24]
 8004b12:	ed87 1a05 	vstr	s2, [r7, #20]
 8004b16:	edc7 1a04 	vstr	s3, [r7, #16]
 8004b1a:	ed87 2a03 	vstr	s4, [r7, #12]
 8004b1e:	edc7 2a02 	vstr	s5, [r7, #8]
 8004b22:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8004b26:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b32:	d10e      	bne.n	8004b52 <MahonyAHRSupdateIMU+0x4e>
 8004b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b38:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b40:	d107      	bne.n	8004b52 <MahonyAHRSupdateIMU+0x4e>
 8004b42:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4e:	f000 8138 	beq.w	8004dc2 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8004b52:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b56:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b66:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b72:	eeb0 0a67 	vmov.f32	s0, s15
 8004b76:	f000 fd89 	bl	800568c <invSqrt>
 8004b7a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8004b7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004b82:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8004b8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b92:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8004b9e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ba2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004baa:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8004bae:	4b66      	ldr	r3, [pc, #408]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004bb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004bb4:	4b64      	ldr	r3, [pc, #400]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004bb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bbe:	4b62      	ldr	r3, [pc, #392]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004bc0:	edd3 6a00 	vldr	s13, [r3]
 8004bc4:	4b60      	ldr	r3, [pc, #384]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004bc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8004bd6:	4b5c      	ldr	r3, [pc, #368]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004bd8:	ed93 7a00 	vldr	s14, [r3]
 8004bdc:	4b5a      	ldr	r3, [pc, #360]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004bde:	edd3 7a01 	vldr	s15, [r3, #4]
 8004be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004be6:	4b58      	ldr	r3, [pc, #352]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004be8:	edd3 6a02 	vldr	s13, [r3, #8]
 8004bec:	4b56      	ldr	r3, [pc, #344]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004bee:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bfa:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8004bfe:	4b52      	ldr	r3, [pc, #328]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004c00:	ed93 7a00 	vldr	s14, [r3]
 8004c04:	4b50      	ldr	r3, [pc, #320]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004c06:	edd3 7a00 	vldr	s15, [r3]
 8004c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c0e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004c12:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004c16:	4b4c      	ldr	r3, [pc, #304]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004c18:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d48 <MahonyAHRSupdateIMU+0x244>)
 8004c1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c2a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8004c2e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c32:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c3a:	edd7 6a02 	vldr	s13, [r7, #8]
 8004c3e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c4a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8004c4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004c52:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c5a:	edd7 6a04 	vldr	s13, [r7, #16]
 8004c5e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8004c6e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004c72:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004c76:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c7a:	edd7 6a03 	vldr	s13, [r7, #12]
 8004c7e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c8a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8004c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d4c <MahonyAHRSupdateIMU+0x248>)
 8004c90:	edd3 7a00 	vldr	s15, [r3]
 8004c94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c9c:	dd5e      	ble.n	8004d5c <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8004c9e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d4c <MahonyAHRSupdateIMU+0x248>)
 8004ca0:	ed93 7a00 	vldr	s14, [r3]
 8004ca4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cb4:	4b26      	ldr	r3, [pc, #152]	@ (8004d50 <MahonyAHRSupdateIMU+0x24c>)
 8004cb6:	edd3 7a00 	vldr	s15, [r3]
 8004cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cbe:	4b24      	ldr	r3, [pc, #144]	@ (8004d50 <MahonyAHRSupdateIMU+0x24c>)
 8004cc0:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8004cc4:	4b21      	ldr	r3, [pc, #132]	@ (8004d4c <MahonyAHRSupdateIMU+0x248>)
 8004cc6:	ed93 7a00 	vldr	s14, [r3]
 8004cca:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cda:	4b1e      	ldr	r3, [pc, #120]	@ (8004d54 <MahonyAHRSupdateIMU+0x250>)
 8004cdc:	edd3 7a00 	vldr	s15, [r3]
 8004ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d54 <MahonyAHRSupdateIMU+0x250>)
 8004ce6:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8004cea:	4b18      	ldr	r3, [pc, #96]	@ (8004d4c <MahonyAHRSupdateIMU+0x248>)
 8004cec:	ed93 7a00 	vldr	s14, [r3]
 8004cf0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004cf8:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d00:	4b15      	ldr	r3, [pc, #84]	@ (8004d58 <MahonyAHRSupdateIMU+0x254>)
 8004d02:	edd3 7a00 	vldr	s15, [r3]
 8004d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d0a:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <MahonyAHRSupdateIMU+0x254>)
 8004d0c:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8004d10:	4b0f      	ldr	r3, [pc, #60]	@ (8004d50 <MahonyAHRSupdateIMU+0x24c>)
 8004d12:	edd3 7a00 	vldr	s15, [r3]
 8004d16:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d1e:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8004d22:	4b0c      	ldr	r3, [pc, #48]	@ (8004d54 <MahonyAHRSupdateIMU+0x250>)
 8004d24:	edd3 7a00 	vldr	s15, [r3]
 8004d28:	ed97 7a06 	vldr	s14, [r7, #24]
 8004d2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d30:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8004d34:	4b08      	ldr	r3, [pc, #32]	@ (8004d58 <MahonyAHRSupdateIMU+0x254>)
 8004d36:	edd3 7a00 	vldr	s15, [r3]
 8004d3a:	ed97 7a05 	vldr	s14, [r7, #20]
 8004d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d42:	edc7 7a05 	vstr	s15, [r7, #20]
 8004d46:	e015      	b.n	8004d74 <MahonyAHRSupdateIMU+0x270>
 8004d48:	20000014 	.word	0x20000014
 8004d4c:	20000028 	.word	0x20000028
 8004d50:	200015cc 	.word	0x200015cc
 8004d54:	200015d0 	.word	0x200015d0
 8004d58:	200015d4 	.word	0x200015d4
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8004d5c:	4b9a      	ldr	r3, [pc, #616]	@ (8004fc8 <MahonyAHRSupdateIMU+0x4c4>)
 8004d5e:	f04f 0200 	mov.w	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8004d64:	4b99      	ldr	r3, [pc, #612]	@ (8004fcc <MahonyAHRSupdateIMU+0x4c8>)
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8004d6c:	4b98      	ldr	r3, [pc, #608]	@ (8004fd0 <MahonyAHRSupdateIMU+0x4cc>)
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8004d74:	4b97      	ldr	r3, [pc, #604]	@ (8004fd4 <MahonyAHRSupdateIMU+0x4d0>)
 8004d76:	ed93 7a00 	vldr	s14, [r3]
 8004d7a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d82:	ed97 7a07 	vldr	s14, [r7, #28]
 8004d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d8a:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8004d8e:	4b91      	ldr	r3, [pc, #580]	@ (8004fd4 <MahonyAHRSupdateIMU+0x4d0>)
 8004d90:	ed93 7a00 	vldr	s14, [r3]
 8004d94:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da4:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8004da8:	4b8a      	ldr	r3, [pc, #552]	@ (8004fd4 <MahonyAHRSupdateIMU+0x4d0>)
 8004daa:	ed93 7a00 	vldr	s14, [r3]
 8004dae:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004db6:	ed97 7a05 	vldr	s14, [r7, #20]
 8004dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dbe:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8004dc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004dca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dce:	ed97 7a07 	vldr	s14, [r7, #28]
 8004dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dd6:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8004dda:	edd7 7a01 	vldr	s15, [r7, #4]
 8004dde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004de6:	ed97 7a06 	vldr	s14, [r7, #24]
 8004dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dee:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8004df2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004df6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004dfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8004e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e06:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8004e0a:	4b73      	ldr	r3, [pc, #460]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8004e10:	4b71      	ldr	r3, [pc, #452]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8004e16:	4b70      	ldr	r3, [pc, #448]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8004e1c:	4b6e      	ldr	r3, [pc, #440]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e1e:	ed93 7a00 	vldr	s14, [r3]
 8004e22:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004e26:	eef1 6a67 	vneg.f32	s13, s15
 8004e2a:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e2e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e32:	ed97 6a08 	vldr	s12, [r7, #32]
 8004e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e3a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e3e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004e42:	4b65      	ldr	r3, [pc, #404]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e44:	ed93 6a03 	vldr	s12, [r3, #12]
 8004e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e4c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e50:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e58:	4b5f      	ldr	r3, [pc, #380]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e5a:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8004e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e60:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e64:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004e68:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004e70:	ed97 6a08 	vldr	s12, [r7, #32]
 8004e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8004e78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e7c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004e80:	4b55      	ldr	r3, [pc, #340]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e82:	ed93 6a03 	vldr	s12, [r3, #12]
 8004e86:	edd7 7a06 	vldr	s15, [r7, #24]
 8004e8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004e8e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e96:	4b50      	ldr	r3, [pc, #320]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e98:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8004e9c:	4b4e      	ldr	r3, [pc, #312]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004e9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004ea2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004ea6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004eaa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004eae:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8004eb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8004eb6:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004eba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004ebe:	4b46      	ldr	r3, [pc, #280]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004ec0:	ed93 6a03 	vldr	s12, [r3, #12]
 8004ec4:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ec8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004ecc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ed4:	4b40      	ldr	r3, [pc, #256]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004ed6:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8004eda:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004edc:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ee0:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ee8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004eec:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8004ef0:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ef4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004ef8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004efc:	ed97 6a08 	vldr	s12, [r7, #32]
 8004f00:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f04:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004f08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f10:	4b31      	ldr	r3, [pc, #196]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f12:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8004f16:	4b30      	ldr	r3, [pc, #192]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f18:	ed93 7a00 	vldr	s14, [r3]
 8004f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f1e:	edd3 7a00 	vldr	s15, [r3]
 8004f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004f26:	4b2c      	ldr	r3, [pc, #176]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f28:	edd3 6a01 	vldr	s13, [r3, #4]
 8004f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f3a:	4b27      	ldr	r3, [pc, #156]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f3c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f40:	4b25      	ldr	r3, [pc, #148]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f42:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f4e:	4b22      	ldr	r3, [pc, #136]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f50:	edd3 6a03 	vldr	s13, [r3, #12]
 8004f54:	4b20      	ldr	r3, [pc, #128]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f56:	edd3 7a03 	vldr	s15, [r3, #12]
 8004f5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f62:	eeb0 0a67 	vmov.f32	s0, s15
 8004f66:	f000 fb91 	bl	800568c <invSqrt>
 8004f6a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8004f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f70:	ed93 7a00 	vldr	s14, [r3]
 8004f74:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f7c:	4b16      	ldr	r3, [pc, #88]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f7e:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8004f82:	4b15      	ldr	r3, [pc, #84]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f84:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f88:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f90:	4b11      	ldr	r3, [pc, #68]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f92:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8004f96:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004f98:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f9c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004fa6:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8004faa:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004fac:	ed93 7a03 	vldr	s14, [r3, #12]
 8004fb0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fb8:	4b07      	ldr	r3, [pc, #28]	@ (8004fd8 <MahonyAHRSupdateIMU+0x4d4>)
 8004fba:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004fbe:	bf00      	nop
 8004fc0:	3748      	adds	r7, #72	@ 0x48
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	200015cc 	.word	0x200015cc
 8004fcc:	200015d0 	.word	0x200015d0
 8004fd0:	200015d4 	.word	0x200015d4
 8004fd4:	20000024 	.word	0x20000024
 8004fd8:	20000014 	.word	0x20000014

08004fdc <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 8004fe2:	4b44      	ldr	r3, [pc, #272]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8004fe4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fe8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004fec:	4b41      	ldr	r3, [pc, #260]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8004fee:	edd3 7a03 	vldr	s15, [r3, #12]
 8004ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8004ff8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004ffc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005000:	4b3c      	ldr	r3, [pc, #240]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8005002:	edd3 7a00 	vldr	s15, [r3]
 8005006:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800500a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800500e:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 8005012:	4b38      	ldr	r3, [pc, #224]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8005014:	edd3 7a02 	vldr	s15, [r3, #8]
 8005018:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800501c:	4b35      	ldr	r3, [pc, #212]	@ (80050f4 <quaternionToThetaZ+0x118>)
 800501e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005022:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005026:	4b33      	ldr	r3, [pc, #204]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8005028:	edd3 7a01 	vldr	s15, [r3, #4]
 800502c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005030:	4b30      	ldr	r3, [pc, #192]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8005032:	edd3 7a00 	vldr	s15, [r3]
 8005036:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800503a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800503e:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 8005042:	4b2c      	ldr	r3, [pc, #176]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8005044:	edd3 7a01 	vldr	s15, [r3, #4]
 8005048:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800504c:	4b29      	ldr	r3, [pc, #164]	@ (80050f4 <quaternionToThetaZ+0x118>)
 800504e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005056:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800505a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800505e:	4b25      	ldr	r3, [pc, #148]	@ (80050f4 <quaternionToThetaZ+0x118>)
 8005060:	edd3 7a02 	vldr	s15, [r3, #8]
 8005064:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005068:	4b22      	ldr	r3, [pc, #136]	@ (80050f4 <quaternionToThetaZ+0x118>)
 800506a:	edd3 7a02 	vldr	s15, [r3, #8]
 800506e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005076:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 800507e:	edd7 7a05 	vldr	s15, [r7, #20]
 8005082:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005086:	edd7 7a04 	vldr	s15, [r7, #16]
 800508a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800508e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005092:	edd7 7a03 	vldr	s15, [r7, #12]
 8005096:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800509a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800509e:	eeb0 0a67 	vmov.f32	s0, s15
 80050a2:	f00b fba7 	bl	80107f4 <sqrtf>
 80050a6:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 80050aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80050ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80050b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80050b6:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80050ba:	eeb0 0a66 	vmov.f32	s0, s13
 80050be:	f00b fbe6 	bl	801088e <fminf>
 80050c2:	eef0 7a40 	vmov.f32	s15, s0
 80050c6:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80050ca:	eeb0 0a67 	vmov.f32	s0, s15
 80050ce:	f00b fbc1 	bl	8010854 <fmaxf>
 80050d2:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 80050d6:	ed97 0a00 	vldr	s0, [r7]
 80050da:	f00b fb31 	bl	8010740 <acosf>
 80050de:	eef0 7a40 	vmov.f32	s15, s0
 80050e2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80050f8 <quaternionToThetaZ+0x11c>
 80050e6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80050ea:	eeb0 0a67 	vmov.f32	s0, s15
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000014 	.word	0x20000014
 80050f8:	42654ca3 	.word	0x42654ca3

080050fc <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8005102:	4b22      	ldr	r3, [pc, #136]	@ (800518c <quaternionToPitchDegree+0x90>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	617b      	str	r3, [r7, #20]
 8005108:	4b20      	ldr	r3, [pc, #128]	@ (800518c <quaternionToPitchDegree+0x90>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	4b1f      	ldr	r3, [pc, #124]	@ (800518c <quaternionToPitchDegree+0x90>)
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	4b1d      	ldr	r3, [pc, #116]	@ (800518c <quaternionToPitchDegree+0x90>)
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 800511a:	ed97 7a05 	vldr	s14, [r7, #20]
 800511e:	edd7 7a03 	vldr	s15, [r7, #12]
 8005122:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005126:	edd7 6a02 	vldr	s13, [r7, #8]
 800512a:	edd7 7a04 	vldr	s15, [r7, #16]
 800512e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005132:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005136:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800513a:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 800513e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005142:	eef0 7ae7 	vabs.f32	s15, s15
 8005146:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800514a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800514e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005152:	db0c      	blt.n	800516e <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 8005154:	edd7 7a01 	vldr	s15, [r7, #4]
 8005158:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800515c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005160:	dd02      	ble.n	8005168 <quaternionToPitchDegree+0x6c>
 8005162:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8005190 <quaternionToPitchDegree+0x94>
 8005166:	e00c      	b.n	8005182 <quaternionToPitchDegree+0x86>
 8005168:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8005194 <quaternionToPitchDegree+0x98>
 800516c:	e009      	b.n	8005182 <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 800516e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005172:	f00b fb11 	bl	8010798 <asinf>
 8005176:	eef0 7a40 	vmov.f32	s15, s0
 800517a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005198 <quaternionToPitchDegree+0x9c>
 800517e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005182:	eeb0 0a67 	vmov.f32	s0, s15
 8005186:	3718      	adds	r7, #24
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000014 	.word	0x20000014
 8005190:	42b40000 	.word	0x42b40000
 8005194:	c2b40000 	.word	0xc2b40000
 8005198:	42652ee0 	.word	0x42652ee0

0800519c <quaternionToRollDegree>:

float quaternionToRollDegree(){
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 80051a2:	4b20      	ldr	r3, [pc, #128]	@ (8005224 <quaternionToRollDegree+0x88>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	617b      	str	r3, [r7, #20]
 80051a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005224 <quaternionToRollDegree+0x88>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]
 80051ae:	4b1d      	ldr	r3, [pc, #116]	@ (8005224 <quaternionToRollDegree+0x88>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005224 <quaternionToRollDegree+0x88>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 80051ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80051be:	edd7 7a04 	vldr	s15, [r7, #16]
 80051c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051c6:	edd7 6a03 	vldr	s13, [r7, #12]
 80051ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80051ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051da:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 80051de:	edd7 7a04 	vldr	s15, [r7, #16]
 80051e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80051e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80051ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80051ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80051f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051fe:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 8005202:	edd7 0a00 	vldr	s1, [r7]
 8005206:	ed97 0a01 	vldr	s0, [r7, #4]
 800520a:	f00b faf1 	bl	80107f0 <atan2f>
 800520e:	eef0 7a40 	vmov.f32	s15, s0
 8005212:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005228 <quaternionToRollDegree+0x8c>
 8005216:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800521a:	eeb0 0a67 	vmov.f32	s0, s15
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20000014 	.word	0x20000014
 8005228:	42652ee0 	.word	0x42652ee0

0800522c <quaternionToYaw>:


float quaternionToYaw(){
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 8005232:	4b2a      	ldr	r3, [pc, #168]	@ (80052dc <quaternionToYaw+0xb0>)
 8005234:	ed93 7a01 	vldr	s14, [r3, #4]
 8005238:	4b28      	ldr	r3, [pc, #160]	@ (80052dc <quaternionToYaw+0xb0>)
 800523a:	edd3 7a02 	vldr	s15, [r3, #8]
 800523e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005242:	4b26      	ldr	r3, [pc, #152]	@ (80052dc <quaternionToYaw+0xb0>)
 8005244:	edd3 6a00 	vldr	s13, [r3]
 8005248:	4b24      	ldr	r3, [pc, #144]	@ (80052dc <quaternionToYaw+0xb0>)
 800524a:	edd3 7a03 	vldr	s15, [r3, #12]
 800524e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005252:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005256:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800525a:	4b20      	ldr	r3, [pc, #128]	@ (80052dc <quaternionToYaw+0xb0>)
 800525c:	ed93 7a00 	vldr	s14, [r3]
 8005260:	4b1e      	ldr	r3, [pc, #120]	@ (80052dc <quaternionToYaw+0xb0>)
 8005262:	edd3 7a00 	vldr	s15, [r3]
 8005266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800526a:	4b1c      	ldr	r3, [pc, #112]	@ (80052dc <quaternionToYaw+0xb0>)
 800526c:	edd3 6a01 	vldr	s13, [r3, #4]
 8005270:	4b1a      	ldr	r3, [pc, #104]	@ (80052dc <quaternionToYaw+0xb0>)
 8005272:	edd3 7a01 	vldr	s15, [r3, #4]
 8005276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800527a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800527e:	4b17      	ldr	r3, [pc, #92]	@ (80052dc <quaternionToYaw+0xb0>)
 8005280:	edd3 6a02 	vldr	s13, [r3, #8]
 8005284:	4b15      	ldr	r3, [pc, #84]	@ (80052dc <quaternionToYaw+0xb0>)
 8005286:	edd3 7a02 	vldr	s15, [r3, #8]
 800528a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800528e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005292:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <quaternionToYaw+0xb0>)
 8005294:	edd3 6a03 	vldr	s13, [r3, #12]
 8005298:	4b10      	ldr	r3, [pc, #64]	@ (80052dc <quaternionToYaw+0xb0>)
 800529a:	edd3 7a03 	vldr	s15, [r3, #12]
 800529e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052a6:	eef0 0a67 	vmov.f32	s1, s15
 80052aa:	eeb0 0a46 	vmov.f32	s0, s12
 80052ae:	f00b fa9f 	bl	80107f0 <atan2f>
 80052b2:	eef0 7a40 	vmov.f32	s15, s0
 80052b6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80052e0 <quaternionToYaw+0xb4>
 80052ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80052be:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80052e4 <quaternionToYaw+0xb8>
 80052c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052c6:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	ee07 3a90 	vmov	s15, r3
}
 80052d0:	eeb0 0a67 	vmov.f32	s0, s15
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000014 	.word	0x20000014
 80052e0:	43340000 	.word	0x43340000
 80052e4:	40490fd0 	.word	0x40490fd0

080052e8 <quaternionToPitch>:

float quaternionToPitch(){
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 80052ee:	4b17      	ldr	r3, [pc, #92]	@ (800534c <quaternionToPitch+0x64>)
 80052f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80052f4:	4b15      	ldr	r3, [pc, #84]	@ (800534c <quaternionToPitch+0x64>)
 80052f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80052fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052fe:	4b13      	ldr	r3, [pc, #76]	@ (800534c <quaternionToPitch+0x64>)
 8005300:	edd3 6a00 	vldr	s13, [r3]
 8005304:	4b11      	ldr	r3, [pc, #68]	@ (800534c <quaternionToPitch+0x64>)
 8005306:	edd3 7a02 	vldr	s15, [r3, #8]
 800530a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800530e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005312:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005316:	eeb0 0a67 	vmov.f32	s0, s15
 800531a:	f00b fa3d 	bl	8010798 <asinf>
 800531e:	eef0 7a40 	vmov.f32	s15, s0
 8005322:	eef1 7a67 	vneg.f32	s15, s15
 8005326:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005350 <quaternionToPitch+0x68>
 800532a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800532e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005354 <quaternionToPitch+0x6c>
 8005332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005336:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	ee07 3a90 	vmov	s15, r3
}
 8005340:	eeb0 0a67 	vmov.f32	s0, s15
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000014 	.word	0x20000014
 8005350:	43340000 	.word	0x43340000
 8005354:	40490fd0 	.word	0x40490fd0

08005358 <quaternionToRoll>:

float quaternionToRoll(){
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 800535e:	4b2a      	ldr	r3, [pc, #168]	@ (8005408 <quaternionToRoll+0xb0>)
 8005360:	ed93 7a00 	vldr	s14, [r3]
 8005364:	4b28      	ldr	r3, [pc, #160]	@ (8005408 <quaternionToRoll+0xb0>)
 8005366:	edd3 7a01 	vldr	s15, [r3, #4]
 800536a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800536e:	4b26      	ldr	r3, [pc, #152]	@ (8005408 <quaternionToRoll+0xb0>)
 8005370:	edd3 6a02 	vldr	s13, [r3, #8]
 8005374:	4b24      	ldr	r3, [pc, #144]	@ (8005408 <quaternionToRoll+0xb0>)
 8005376:	edd3 7a03 	vldr	s15, [r3, #12]
 800537a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800537e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005382:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8005386:	4b20      	ldr	r3, [pc, #128]	@ (8005408 <quaternionToRoll+0xb0>)
 8005388:	ed93 7a00 	vldr	s14, [r3]
 800538c:	4b1e      	ldr	r3, [pc, #120]	@ (8005408 <quaternionToRoll+0xb0>)
 800538e:	edd3 7a00 	vldr	s15, [r3]
 8005392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005396:	4b1c      	ldr	r3, [pc, #112]	@ (8005408 <quaternionToRoll+0xb0>)
 8005398:	edd3 6a01 	vldr	s13, [r3, #4]
 800539c:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <quaternionToRoll+0xb0>)
 800539e:	edd3 7a01 	vldr	s15, [r3, #4]
 80053a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053aa:	4b17      	ldr	r3, [pc, #92]	@ (8005408 <quaternionToRoll+0xb0>)
 80053ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80053b0:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <quaternionToRoll+0xb0>)
 80053b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80053b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80053be:	4b12      	ldr	r3, [pc, #72]	@ (8005408 <quaternionToRoll+0xb0>)
 80053c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80053c4:	4b10      	ldr	r3, [pc, #64]	@ (8005408 <quaternionToRoll+0xb0>)
 80053c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80053ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d2:	eef0 0a67 	vmov.f32	s1, s15
 80053d6:	eeb0 0a46 	vmov.f32	s0, s12
 80053da:	f00b fa09 	bl	80107f0 <atan2f>
 80053de:	eef0 7a40 	vmov.f32	s15, s0
 80053e2:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800540c <quaternionToRoll+0xb4>
 80053e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80053ea:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005410 <quaternionToRoll+0xb8>
 80053ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80053f2:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	ee07 3a90 	vmov	s15, r3
}
 80053fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000014 	.word	0x20000014
 800540c:	43340000 	.word	0x43340000
 8005410:	40490fd0 	.word	0x40490fd0

08005414 <getInitialQuaternion>:

void getInitialQuaternion() {
 8005414:	b5b0      	push	{r4, r5, r7, lr}
 8005416:	b092      	sub	sp, #72	@ 0x48
 8005418:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 800541a:	4b98      	ldr	r3, [pc, #608]	@ (800567c <getInitialQuaternion+0x268>)
 800541c:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 8005420:	4b96      	ldr	r3, [pc, #600]	@ (800567c <getInitialQuaternion+0x268>)
 8005422:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8005426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800542a:	4b94      	ldr	r3, [pc, #592]	@ (800567c <getInitialQuaternion+0x268>)
 800542c:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 8005430:	4b92      	ldr	r3, [pc, #584]	@ (800567c <getInitialQuaternion+0x268>)
 8005432:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8005436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800543a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800543e:	4b8f      	ldr	r3, [pc, #572]	@ (800567c <getInitialQuaternion+0x268>)
 8005440:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8005444:	4b8d      	ldr	r3, [pc, #564]	@ (800567c <getInitialQuaternion+0x268>)
 8005446:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800544a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800544e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005452:	ee17 0a90 	vmov	r0, s15
 8005456:	f7fb f897 	bl	8000588 <__aeabi_f2d>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	ec43 2b10 	vmov	d0, r2, r3
 8005462:	f00b f941 	bl	80106e8 <sqrt>
 8005466:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 800546a:	4b84      	ldr	r3, [pc, #528]	@ (800567c <getInitialQuaternion+0x268>)
 800546c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546e:	4618      	mov	r0, r3
 8005470:	f7fb f88a 	bl	8000588 <__aeabi_f2d>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 800547c:	4b7f      	ldr	r3, [pc, #508]	@ (800567c <getInitialQuaternion+0x268>)
 800547e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8005482:	eef1 7a67 	vneg.f32	s15, s15
 8005486:	ee17 3a90 	vmov	r3, s15
 800548a:	4618      	mov	r0, r3
 800548c:	f7fb f87c 	bl	8000588 <__aeabi_f2d>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8005498:	4b78      	ldr	r3, [pc, #480]	@ (800567c <getInitialQuaternion+0x268>)
 800549a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549c:	4618      	mov	r0, r3
 800549e:	f7fb f873 	bl	8000588 <__aeabi_f2d>
 80054a2:	4602      	mov	r2, r0
 80054a4:	460b      	mov	r3, r1
 80054a6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 80054aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80054ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054b2:	f7fb f9eb 	bl	800088c <__aeabi_ddiv>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 80054be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80054c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054c6:	f7fb f9e1 	bl	800088c <__aeabi_ddiv>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 80054d2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80054d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80054da:	f7fb f9d7 	bl	800088c <__aeabi_ddiv>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 80054e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054ea:	f04f 0000 	mov.w	r0, #0
 80054ee:	4964      	ldr	r1, [pc, #400]	@ (8005680 <getInitialQuaternion+0x26c>)
 80054f0:	f7fa feea 	bl	80002c8 <__aeabi_dsub>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	ec43 2b17 	vmov	d7, r2, r3
 80054fc:	eeb0 0a47 	vmov.f32	s0, s14
 8005500:	eef0 0a67 	vmov.f32	s1, s15
 8005504:	f00b f8f0 	bl	80106e8 <sqrt>
 8005508:	ec51 0b10 	vmov	r0, r1, d0
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	4b5c      	ldr	r3, [pc, #368]	@ (8005684 <getInitialQuaternion+0x270>)
 8005512:	f7fb f891 	bl	8000638 <__aeabi_dmul>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 800551e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	4957      	ldr	r1, [pc, #348]	@ (8005684 <getInitialQuaternion+0x270>)
 8005528:	f7fb f9b0 	bl	800088c <__aeabi_ddiv>
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8005534:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800553c:	f7fb f87c 	bl	8000638 <__aeabi_dmul>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	4b4d      	ldr	r3, [pc, #308]	@ (8005684 <getInitialQuaternion+0x270>)
 800554e:	f7fb f873 	bl	8000638 <__aeabi_dmul>
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 800555a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800555e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005562:	f7fb f869 	bl	8000638 <__aeabi_dmul>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4610      	mov	r0, r2
 800556c:	4619      	mov	r1, r3
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	4b44      	ldr	r3, [pc, #272]	@ (8005684 <getInitialQuaternion+0x270>)
 8005574:	f7fb f860 	bl	8000638 <__aeabi_dmul>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 800558c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005594:	f7fb f850 	bl	8000638 <__aeabi_dmul>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4614      	mov	r4, r2
 800559e:	461d      	mov	r5, r3
 80055a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a8:	f7fb f846 	bl	8000638 <__aeabi_dmul>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4620      	mov	r0, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	f7fa fe8a 	bl	80002cc <__adddf3>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4614      	mov	r4, r2
 80055be:	461d      	mov	r5, r3
 80055c0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80055c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055c8:	f7fb f836 	bl	8000638 <__aeabi_dmul>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4620      	mov	r0, r4
 80055d2:	4629      	mov	r1, r5
 80055d4:	f7fa fe7a 	bl	80002cc <__adddf3>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4614      	mov	r4, r2
 80055de:	461d      	mov	r5, r3
 80055e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e8:	f7fb f826 	bl	8000638 <__aeabi_dmul>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4620      	mov	r0, r4
 80055f2:	4629      	mov	r1, r5
 80055f4:	f7fa fe6a 	bl	80002cc <__adddf3>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	ec43 2b17 	vmov	d7, r2, r3
 8005600:	eeb0 0a47 	vmov.f32	s0, s14
 8005604:	eef0 0a67 	vmov.f32	s1, s15
 8005608:	f00b f86e 	bl	80106e8 <sqrt>
 800560c:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8005610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005614:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005618:	f7fb f938 	bl	800088c <__aeabi_ddiv>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	f7fb fb00 	bl	8000c28 <__aeabi_d2f>
 8005628:	4603      	mov	r3, r0
 800562a:	4a17      	ldr	r2, [pc, #92]	@ (8005688 <getInitialQuaternion+0x274>)
 800562c:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 800562e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005632:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005636:	f7fb f929 	bl	800088c <__aeabi_ddiv>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	f7fb faf1 	bl	8000c28 <__aeabi_d2f>
 8005646:	4603      	mov	r3, r0
 8005648:	4a0f      	ldr	r2, [pc, #60]	@ (8005688 <getInitialQuaternion+0x274>)
 800564a:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 800564c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005650:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005654:	f7fb f91a 	bl	800088c <__aeabi_ddiv>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4610      	mov	r0, r2
 800565e:	4619      	mov	r1, r3
 8005660:	f7fb fae2 	bl	8000c28 <__aeabi_d2f>
 8005664:	4603      	mov	r3, r0
 8005666:	4a08      	ldr	r2, [pc, #32]	@ (8005688 <getInitialQuaternion+0x274>)
 8005668:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 800566a:	4b07      	ldr	r3, [pc, #28]	@ (8005688 <getInitialQuaternion+0x274>)
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	60da      	str	r2, [r3, #12]
}
 8005672:	bf00      	nop
 8005674:	3748      	adds	r7, #72	@ 0x48
 8005676:	46bd      	mov	sp, r7
 8005678:	bdb0      	pop	{r4, r5, r7, pc}
 800567a:	bf00      	nop
 800567c:	20001488 	.word	0x20001488
 8005680:	3ff00000 	.word	0x3ff00000
 8005684:	3fe00000 	.word	0x3fe00000
 8005688:	20000014 	.word	0x20000014

0800568c <invSqrt>:

float invSqrt(float x) {
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8005696:	edd7 7a01 	vldr	s15, [r7, #4]
 800569a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800569e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80056a2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80056aa:	f107 0310 	add.w	r3, r7, #16
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	105a      	asrs	r2, r3, #1
 80056b6:	4b12      	ldr	r3, [pc, #72]	@ (8005700 <invSqrt+0x74>)
 80056b8:	1a9b      	subs	r3, r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 80056c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80056c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80056cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80056d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 80056dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80056e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	ee07 3a90 	vmov	s15, r3
}
 80056f2:	eeb0 0a67 	vmov.f32	s0, s15
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	5f3759df 	.word	0x5f3759df

08005704 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 800570c:	481b      	ldr	r0, [pc, #108]	@ (800577c <sensor_fusion_init+0x78>)
 800570e:	f7fd faeb 	bl	8002ce8 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8005712:	4b1a      	ldr	r3, [pc, #104]	@ (800577c <sensor_fusion_init+0x78>)
 8005714:	4a1a      	ldr	r2, [pc, #104]	@ (8005780 <sensor_fusion_init+0x7c>)
 8005716:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8005718:	4b18      	ldr	r3, [pc, #96]	@ (800577c <sensor_fusion_init+0x78>)
 800571a:	4a1a      	ldr	r2, [pc, #104]	@ (8005784 <sensor_fusion_init+0x80>)
 800571c:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 800571e:	4b17      	ldr	r3, [pc, #92]	@ (800577c <sensor_fusion_init+0x78>)
 8005720:	4a19      	ldr	r2, [pc, #100]	@ (8005788 <sensor_fusion_init+0x84>)
 8005722:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e009      	b.n	800573e <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 800572a:	4a18      	ldr	r2, [pc, #96]	@ (800578c <sensor_fusion_init+0x88>)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b04      	cmp	r3, #4
 8005742:	ddf2      	ble.n	800572a <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8005744:	4b12      	ldr	r3, [pc, #72]	@ (8005790 <sensor_fusion_init+0x8c>)
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 800574a:	4b12      	ldr	r3, [pc, #72]	@ (8005794 <sensor_fusion_init+0x90>)
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8005750:	4b11      	ldr	r3, [pc, #68]	@ (8005798 <sensor_fusion_init+0x94>)
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8005756:	4b11      	ldr	r3, [pc, #68]	@ (800579c <sensor_fusion_init+0x98>)
 8005758:	2201      	movs	r2, #1
 800575a:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005760:	4a0f      	ldr	r2, [pc, #60]	@ (80057a0 <sensor_fusion_init+0x9c>)
 8005762:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8005764:	f000 fd3c 	bl	80061e0 <HAL_GetTick>
 8005768:	4603      	mov	r3, r0
 800576a:	4a0e      	ldr	r2, [pc, #56]	@ (80057a4 <sensor_fusion_init+0xa0>)
 800576c:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 800576e:	4b0e      	ldr	r3, [pc, #56]	@ (80057a8 <sensor_fusion_init+0xa4>)
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	200015e8 	.word	0x200015e8
 8005780:	3dcccccd 	.word	0x3dcccccd
 8005784:	3ba3d70a 	.word	0x3ba3d70a
 8005788:	40a00000 	.word	0x40a00000
 800578c:	20001644 	.word	0x20001644
 8005790:	20001658 	.word	0x20001658
 8005794:	20001659 	.word	0x20001659
 8005798:	2000165a 	.word	0x2000165a
 800579c:	20001634 	.word	0x20001634
 80057a0:	20001638 	.word	0x20001638
 80057a4:	2000163c 	.word	0x2000163c
 80057a8:	20001640 	.word	0x20001640

080057ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057b2:	2300      	movs	r3, #0
 80057b4:	607b      	str	r3, [r7, #4]
 80057b6:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ba:	4a0f      	ldr	r2, [pc, #60]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80057c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80057c2:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80057ca:	607b      	str	r3, [r7, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057ce:	2300      	movs	r3, #0
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4b09      	ldr	r3, [pc, #36]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d6:	4a08      	ldr	r2, [pc, #32]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80057de:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <HAL_MspInit+0x4c>)
 80057e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057ea:	bf00      	nop
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40023800 	.word	0x40023800

080057fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	@ 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005804:	f107 0314 	add.w	r3, r7, #20
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	609a      	str	r2, [r3, #8]
 8005810:	60da      	str	r2, [r3, #12]
 8005812:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a17      	ldr	r2, [pc, #92]	@ (8005878 <HAL_ADC_MspInit+0x7c>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d127      	bne.n	800586e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800581e:	2300      	movs	r3, #0
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	4b16      	ldr	r3, [pc, #88]	@ (800587c <HAL_ADC_MspInit+0x80>)
 8005824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005826:	4a15      	ldr	r2, [pc, #84]	@ (800587c <HAL_ADC_MspInit+0x80>)
 8005828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800582c:	6453      	str	r3, [r2, #68]	@ 0x44
 800582e:	4b13      	ldr	r3, [pc, #76]	@ (800587c <HAL_ADC_MspInit+0x80>)
 8005830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800583a:	2300      	movs	r3, #0
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	4b0f      	ldr	r3, [pc, #60]	@ (800587c <HAL_ADC_MspInit+0x80>)
 8005840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005842:	4a0e      	ldr	r2, [pc, #56]	@ (800587c <HAL_ADC_MspInit+0x80>)
 8005844:	f043 0302 	orr.w	r3, r3, #2
 8005848:	6313      	str	r3, [r2, #48]	@ 0x30
 800584a:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <HAL_ADC_MspInit+0x80>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005856:	2302      	movs	r3, #2
 8005858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800585a:	2303      	movs	r3, #3
 800585c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005862:	f107 0314 	add.w	r3, r7, #20
 8005866:	4619      	mov	r1, r3
 8005868:	4805      	ldr	r0, [pc, #20]	@ (8005880 <HAL_ADC_MspInit+0x84>)
 800586a:	f001 fe9d 	bl	80075a8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800586e:	bf00      	nop
 8005870:	3728      	adds	r7, #40	@ 0x28
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	40012000 	.word	0x40012000
 800587c:	40023800 	.word	0x40023800
 8005880:	40020400 	.word	0x40020400

08005884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08c      	sub	sp, #48	@ 0x30
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800588c:	f107 031c 	add.w	r3, r7, #28
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	609a      	str	r2, [r3, #8]
 8005898:	60da      	str	r2, [r3, #12]
 800589a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a42      	ldr	r2, [pc, #264]	@ (80059ac <HAL_I2C_MspInit+0x128>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d12d      	bne.n	8005902 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a6:	2300      	movs	r3, #0
 80058a8:	61bb      	str	r3, [r7, #24]
 80058aa:	4b41      	ldr	r3, [pc, #260]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	4a40      	ldr	r2, [pc, #256]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80058b6:	4b3e      	ldr	r3, [pc, #248]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 80058b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	61bb      	str	r3, [r7, #24]
 80058c0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80058c2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80058c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80058c8:	2312      	movs	r3, #18
 80058ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058cc:	2300      	movs	r3, #0
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058d0:	2303      	movs	r3, #3
 80058d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80058d4:	2304      	movs	r3, #4
 80058d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058d8:	f107 031c 	add.w	r3, r7, #28
 80058dc:	4619      	mov	r1, r3
 80058de:	4835      	ldr	r0, [pc, #212]	@ (80059b4 <HAL_I2C_MspInit+0x130>)
 80058e0:	f001 fe62 	bl	80075a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	4b31      	ldr	r3, [pc, #196]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	4a30      	ldr	r2, [pc, #192]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 80058ee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80058f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80058f4:	4b2e      	ldr	r3, [pc, #184]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005900:	e050      	b.n	80059a4 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2c      	ldr	r2, [pc, #176]	@ (80059b8 <HAL_I2C_MspInit+0x134>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d14b      	bne.n	80059a4 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800590c:	2300      	movs	r3, #0
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	4b27      	ldr	r3, [pc, #156]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 8005912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005914:	4a26      	ldr	r2, [pc, #152]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 8005916:	f043 0304 	orr.w	r3, r3, #4
 800591a:	6313      	str	r3, [r2, #48]	@ 0x30
 800591c:	4b24      	ldr	r3, [pc, #144]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 800591e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	613b      	str	r3, [r7, #16]
 8005926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	4b20      	ldr	r3, [pc, #128]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 800592e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005930:	4a1f      	ldr	r2, [pc, #124]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 8005932:	f043 0301 	orr.w	r3, r3, #1
 8005936:	6313      	str	r3, [r2, #48]	@ 0x30
 8005938:	4b1d      	ldr	r3, [pc, #116]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 800593a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800593c:	f003 0301 	and.w	r3, r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005944:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800594a:	2312      	movs	r3, #18
 800594c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800594e:	2300      	movs	r3, #0
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005952:	2303      	movs	r3, #3
 8005954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005956:	2304      	movs	r3, #4
 8005958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800595a:	f107 031c 	add.w	r3, r7, #28
 800595e:	4619      	mov	r1, r3
 8005960:	4816      	ldr	r0, [pc, #88]	@ (80059bc <HAL_I2C_MspInit+0x138>)
 8005962:	f001 fe21 	bl	80075a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005966:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800596a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800596c:	2312      	movs	r3, #18
 800596e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005970:	2300      	movs	r3, #0
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005974:	2303      	movs	r3, #3
 8005976:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005978:	2304      	movs	r3, #4
 800597a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800597c:	f107 031c 	add.w	r3, r7, #28
 8005980:	4619      	mov	r1, r3
 8005982:	480f      	ldr	r0, [pc, #60]	@ (80059c0 <HAL_I2C_MspInit+0x13c>)
 8005984:	f001 fe10 	bl	80075a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005988:	2300      	movs	r3, #0
 800598a:	60bb      	str	r3, [r7, #8]
 800598c:	4b08      	ldr	r3, [pc, #32]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 800598e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005990:	4a07      	ldr	r2, [pc, #28]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 8005992:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005996:	6413      	str	r3, [r2, #64]	@ 0x40
 8005998:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <HAL_I2C_MspInit+0x12c>)
 800599a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	68bb      	ldr	r3, [r7, #8]
}
 80059a4:	bf00      	nop
 80059a6:	3730      	adds	r7, #48	@ 0x30
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	40005400 	.word	0x40005400
 80059b0:	40023800 	.word	0x40023800
 80059b4:	40020400 	.word	0x40020400
 80059b8:	40005c00 	.word	0x40005c00
 80059bc:	40020800 	.word	0x40020800
 80059c0:	40020000 	.word	0x40020000

080059c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a16      	ldr	r2, [pc, #88]	@ (8005a2c <HAL_I2C_MspDeInit+0x68>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d110      	bne.n	80059f8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80059d6:	4b16      	ldr	r3, [pc, #88]	@ (8005a30 <HAL_I2C_MspDeInit+0x6c>)
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	4a15      	ldr	r2, [pc, #84]	@ (8005a30 <HAL_I2C_MspDeInit+0x6c>)
 80059dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059e0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80059e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059e6:	4813      	ldr	r0, [pc, #76]	@ (8005a34 <HAL_I2C_MspDeInit+0x70>)
 80059e8:	f001 ff72 	bl	80078d0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80059ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80059f0:	4810      	ldr	r0, [pc, #64]	@ (8005a34 <HAL_I2C_MspDeInit+0x70>)
 80059f2:	f001 ff6d 	bl	80078d0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80059f6:	e014      	b.n	8005a22 <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C3)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005a38 <HAL_I2C_MspDeInit+0x74>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d10f      	bne.n	8005a22 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005a02:	4b0b      	ldr	r3, [pc, #44]	@ (8005a30 <HAL_I2C_MspDeInit+0x6c>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	4a0a      	ldr	r2, [pc, #40]	@ (8005a30 <HAL_I2C_MspDeInit+0x6c>)
 8005a08:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005a0c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8005a0e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a12:	480a      	ldr	r0, [pc, #40]	@ (8005a3c <HAL_I2C_MspDeInit+0x78>)
 8005a14:	f001 ff5c 	bl	80078d0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005a18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a1c:	4808      	ldr	r0, [pc, #32]	@ (8005a40 <HAL_I2C_MspDeInit+0x7c>)
 8005a1e:	f001 ff57 	bl	80078d0 <HAL_GPIO_DeInit>
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	40005400 	.word	0x40005400
 8005a30:	40023800 	.word	0x40023800
 8005a34:	40020400 	.word	0x40020400
 8005a38:	40005c00 	.word	0x40005c00
 8005a3c:	40020800 	.word	0x40020800
 8005a40:	40020000 	.word	0x40020000

08005a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a54:	d115      	bne.n	8005a82 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <HAL_TIM_Base_MspInit+0x48>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5e:	4a0b      	ldr	r2, [pc, #44]	@ (8005a8c <HAL_TIM_Base_MspInit+0x48>)
 8005a60:	f043 0301 	orr.w	r3, r3, #1
 8005a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a66:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <HAL_TIM_Base_MspInit+0x48>)
 8005a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	60fb      	str	r3, [r7, #12]
 8005a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005a72:	2200      	movs	r2, #0
 8005a74:	2100      	movs	r1, #0
 8005a76:	201c      	movs	r0, #28
 8005a78:	f001 f8f1 	bl	8006c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005a7c:	201c      	movs	r0, #28
 8005a7e:	f001 f90a 	bl	8006c96 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005a82:	bf00      	nop
 8005a84:	3710      	adds	r7, #16
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40023800 	.word	0x40023800

08005a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08e      	sub	sp, #56	@ 0x38
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	605a      	str	r2, [r3, #4]
 8005aa2:	609a      	str	r2, [r3, #8]
 8005aa4:	60da      	str	r2, [r3, #12]
 8005aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a9c      	ldr	r2, [pc, #624]	@ (8005d20 <HAL_UART_MspInit+0x290>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d162      	bne.n	8005b78 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	4b9b      	ldr	r3, [pc, #620]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aba:	4a9a      	ldr	r2, [pc, #616]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005abc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ac2:	4b98      	ldr	r3, [pc, #608]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005aca:	623b      	str	r3, [r7, #32]
 8005acc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
 8005ad2:	4b94      	ldr	r3, [pc, #592]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad6:	4a93      	ldr	r2, [pc, #588]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8005ade:	4b91      	ldr	r3, [pc, #580]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005aea:	2303      	movs	r3, #3
 8005aec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aee:	2302      	movs	r3, #2
 8005af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005af6:	2303      	movs	r3, #3
 8005af8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005afa:	2308      	movs	r3, #8
 8005afc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b02:	4619      	mov	r1, r3
 8005b04:	4888      	ldr	r0, [pc, #544]	@ (8005d28 <HAL_UART_MspInit+0x298>)
 8005b06:	f001 fd4f 	bl	80075a8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8005b0a:	4b88      	ldr	r3, [pc, #544]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b0c:	4a88      	ldr	r2, [pc, #544]	@ (8005d30 <HAL_UART_MspInit+0x2a0>)
 8005b0e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8005b10:	4b86      	ldr	r3, [pc, #536]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b12:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005b16:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005b18:	4b84      	ldr	r3, [pc, #528]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b1a:	2240      	movs	r2, #64	@ 0x40
 8005b1c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005b1e:	4b83      	ldr	r3, [pc, #524]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005b24:	4b81      	ldr	r3, [pc, #516]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005b2a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005b2c:	4b7f      	ldr	r3, [pc, #508]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005b32:	4b7e      	ldr	r3, [pc, #504]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b34:	2200      	movs	r2, #0
 8005b36:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005b38:	4b7c      	ldr	r3, [pc, #496]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005b44:	4b79      	ldr	r3, [pc, #484]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8005b4a:	4878      	ldr	r0, [pc, #480]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b4c:	f001 f8cc 	bl	8006ce8 <HAL_DMA_Init>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8005b56:	f7fe f8b3 	bl	8003cc0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a73      	ldr	r2, [pc, #460]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b60:	4a72      	ldr	r2, [pc, #456]	@ (8005d2c <HAL_UART_MspInit+0x29c>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005b66:	2200      	movs	r2, #0
 8005b68:	2100      	movs	r1, #0
 8005b6a:	2034      	movs	r0, #52	@ 0x34
 8005b6c:	f001 f877 	bl	8006c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005b70:	2034      	movs	r0, #52	@ 0x34
 8005b72:	f001 f890 	bl	8006c96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005b76:	e0cf      	b.n	8005d18 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a6d      	ldr	r2, [pc, #436]	@ (8005d34 <HAL_UART_MspInit+0x2a4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d162      	bne.n	8005c48 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	4b67      	ldr	r3, [pc, #412]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8a:	4a66      	ldr	r2, [pc, #408]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005b8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b92:	4b64      	ldr	r3, [pc, #400]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b9a:	61bb      	str	r3, [r7, #24]
 8005b9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	4b60      	ldr	r3, [pc, #384]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bae:	4b5d      	ldr	r3, [pc, #372]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005bba:	230c      	movs	r3, #12
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bca:	2307      	movs	r3, #7
 8005bcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4854      	ldr	r0, [pc, #336]	@ (8005d28 <HAL_UART_MspInit+0x298>)
 8005bd6:	f001 fce7 	bl	80075a8 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005bda:	4b57      	ldr	r3, [pc, #348]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005bdc:	4a57      	ldr	r2, [pc, #348]	@ (8005d3c <HAL_UART_MspInit+0x2ac>)
 8005bde:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005be0:	4b55      	ldr	r3, [pc, #340]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005be2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005be6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005be8:	4b53      	ldr	r3, [pc, #332]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005bea:	2240      	movs	r2, #64	@ 0x40
 8005bec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005bee:	4b52      	ldr	r3, [pc, #328]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005bf4:	4b50      	ldr	r3, [pc, #320]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005bf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005bfa:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005c02:	4b4d      	ldr	r3, [pc, #308]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005c08:	4b4b      	ldr	r3, [pc, #300]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005c14:	4b48      	ldr	r3, [pc, #288]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005c16:	2200      	movs	r2, #0
 8005c18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005c1a:	4847      	ldr	r0, [pc, #284]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005c1c:	f001 f864 	bl	8006ce8 <HAL_DMA_Init>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d001      	beq.n	8005c2a <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8005c26:	f7fe f84b 	bl	8003cc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a42      	ldr	r2, [pc, #264]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005c2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005c30:	4a41      	ldr	r2, [pc, #260]	@ (8005d38 <HAL_UART_MspInit+0x2a8>)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005c36:	2200      	movs	r2, #0
 8005c38:	2100      	movs	r1, #0
 8005c3a:	2026      	movs	r0, #38	@ 0x26
 8005c3c:	f001 f80f 	bl	8006c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005c40:	2026      	movs	r0, #38	@ 0x26
 8005c42:	f001 f828 	bl	8006c96 <HAL_NVIC_EnableIRQ>
}
 8005c46:	e067      	b.n	8005d18 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART6)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005d40 <HAL_UART_MspInit+0x2b0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d162      	bne.n	8005d18 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005c52:	2300      	movs	r3, #0
 8005c54:	613b      	str	r3, [r7, #16]
 8005c56:	4b33      	ldr	r3, [pc, #204]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5a:	4a32      	ldr	r2, [pc, #200]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005c5c:	f043 0320 	orr.w	r3, r3, #32
 8005c60:	6453      	str	r3, [r2, #68]	@ 0x44
 8005c62:	4b30      	ldr	r3, [pc, #192]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	613b      	str	r3, [r7, #16]
 8005c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
 8005c72:	4b2c      	ldr	r3, [pc, #176]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c76:	4a2b      	ldr	r2, [pc, #172]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005c7e:	4b29      	ldr	r3, [pc, #164]	@ (8005d24 <HAL_UART_MspInit+0x294>)
 8005c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c8a:	23c0      	movs	r3, #192	@ 0xc0
 8005c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c8e:	2302      	movs	r3, #2
 8005c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c96:	2303      	movs	r3, #3
 8005c98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	4827      	ldr	r0, [pc, #156]	@ (8005d44 <HAL_UART_MspInit+0x2b4>)
 8005ca6:	f001 fc7f 	bl	80075a8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8005caa:	4b27      	ldr	r3, [pc, #156]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cac:	4a27      	ldr	r2, [pc, #156]	@ (8005d4c <HAL_UART_MspInit+0x2bc>)
 8005cae:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005cb0:	4b25      	ldr	r3, [pc, #148]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cb2:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005cb6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005cb8:	4b23      	ldr	r3, [pc, #140]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cbe:	4b22      	ldr	r3, [pc, #136]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cc4:	4b20      	ldr	r3, [pc, #128]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005cca:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cde:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ce0:	4b19      	ldr	r3, [pc, #100]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ce6:	4b18      	ldr	r3, [pc, #96]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005cec:	4816      	ldr	r0, [pc, #88]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005cee:	f000 fffb 	bl	8006ce8 <HAL_DMA_Init>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8005cf8:	f7fd ffe2 	bl	8003cc0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a12      	ldr	r2, [pc, #72]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005d00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d02:	4a11      	ldr	r2, [pc, #68]	@ (8005d48 <HAL_UART_MspInit+0x2b8>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	2047      	movs	r0, #71	@ 0x47
 8005d0e:	f000 ffa6 	bl	8006c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005d12:	2047      	movs	r0, #71	@ 0x47
 8005d14:	f000 ffbf 	bl	8006c96 <HAL_NVIC_EnableIRQ>
}
 8005d18:	bf00      	nop
 8005d1a:	3738      	adds	r7, #56	@ 0x38
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40004c00 	.word	0x40004c00
 8005d24:	40023800 	.word	0x40023800
 8005d28:	40020000 	.word	0x40020000
 8005d2c:	20001300 	.word	0x20001300
 8005d30:	40026070 	.word	0x40026070
 8005d34:	40004400 	.word	0x40004400
 8005d38:	20001360 	.word	0x20001360
 8005d3c:	400260a0 	.word	0x400260a0
 8005d40:	40011400 	.word	0x40011400
 8005d44:	40020800 	.word	0x40020800
 8005d48:	200013c0 	.word	0x200013c0
 8005d4c:	40026440 	.word	0x40026440

08005d50 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a24      	ldr	r2, [pc, #144]	@ (8005df0 <HAL_UART_MspDeInit+0xa0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d112      	bne.n	8005d88 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8005d62:	4b24      	ldr	r3, [pc, #144]	@ (8005df4 <HAL_UART_MspDeInit+0xa4>)
 8005d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d66:	4a23      	ldr	r2, [pc, #140]	@ (8005df4 <HAL_UART_MspDeInit+0xa4>)
 8005d68:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005d6c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8005d6e:	2103      	movs	r1, #3
 8005d70:	4821      	ldr	r0, [pc, #132]	@ (8005df8 <HAL_UART_MspDeInit+0xa8>)
 8005d72:	f001 fdad 	bl	80078d0 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 f862 	bl	8006e44 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8005d80:	2034      	movs	r0, #52	@ 0x34
 8005d82:	f000 ff96 	bl	8006cb2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8005d86:	e02e      	b.n	8005de6 <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART2)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8005dfc <HAL_UART_MspDeInit+0xac>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d112      	bne.n	8005db8 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005d92:	4b18      	ldr	r3, [pc, #96]	@ (8005df4 <HAL_UART_MspDeInit+0xa4>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d96:	4a17      	ldr	r2, [pc, #92]	@ (8005df4 <HAL_UART_MspDeInit+0xa4>)
 8005d98:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d9c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8005d9e:	210c      	movs	r1, #12
 8005da0:	4815      	ldr	r0, [pc, #84]	@ (8005df8 <HAL_UART_MspDeInit+0xa8>)
 8005da2:	f001 fd95 	bl	80078d0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	4618      	mov	r0, r3
 8005dac:	f001 f84a 	bl	8006e44 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005db0:	2026      	movs	r0, #38	@ 0x26
 8005db2:	f000 ff7e 	bl	8006cb2 <HAL_NVIC_DisableIRQ>
}
 8005db6:	e016      	b.n	8005de6 <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART6)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a10      	ldr	r2, [pc, #64]	@ (8005e00 <HAL_UART_MspDeInit+0xb0>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d111      	bne.n	8005de6 <HAL_UART_MspDeInit+0x96>
    __HAL_RCC_USART6_CLK_DISABLE();
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005df4 <HAL_UART_MspDeInit+0xa4>)
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8005df4 <HAL_UART_MspDeInit+0xa4>)
 8005dc8:	f023 0320 	bic.w	r3, r3, #32
 8005dcc:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8005dce:	21c0      	movs	r1, #192	@ 0xc0
 8005dd0:	480c      	ldr	r0, [pc, #48]	@ (8005e04 <HAL_UART_MspDeInit+0xb4>)
 8005dd2:	f001 fd7d 	bl	80078d0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 f832 	bl	8006e44 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8005de0:	2047      	movs	r0, #71	@ 0x47
 8005de2:	f000 ff66 	bl	8006cb2 <HAL_NVIC_DisableIRQ>
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	40004c00 	.word	0x40004c00
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40020000 	.word	0x40020000
 8005dfc:	40004400 	.word	0x40004400
 8005e00:	40011400 	.word	0x40011400
 8005e04:	40020800 	.word	0x40020800

08005e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e0c:	bf00      	nop
 8005e0e:	e7fd      	b.n	8005e0c <NMI_Handler+0x4>

08005e10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <HardFault_Handler+0x4>

08005e18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e1c:	bf00      	nop
 8005e1e:	e7fd      	b.n	8005e1c <MemManage_Handler+0x4>

08005e20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <BusFault_Handler+0x4>

08005e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <UsageFault_Handler+0x4>

08005e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e34:	bf00      	nop
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e42:	bf00      	nop
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e50:	bf00      	nop
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e5e:	f000 f9ab 	bl	80061b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e62:	bf00      	nop
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005e6a:	2008      	movs	r0, #8
 8005e6c:	f001 fe3e 	bl	8007aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005e70:	bf00      	nop
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005e78:	2010      	movs	r0, #16
 8005e7a:	f001 fe37 	bl	8007aec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005e7e:	bf00      	nop
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8005e88:	4802      	ldr	r0, [pc, #8]	@ (8005e94 <DMA1_Stream4_IRQHandler+0x10>)
 8005e8a:	f001 f923 	bl	80070d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005e8e:	bf00      	nop
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20001300 	.word	0x20001300

08005e98 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005e9c:	4802      	ldr	r0, [pc, #8]	@ (8005ea8 <DMA1_Stream6_IRQHandler+0x10>)
 8005e9e:	f001 f919 	bl	80070d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8005ea2:	bf00      	nop
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20001360 	.word	0x20001360

08005eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005eb0:	4802      	ldr	r0, [pc, #8]	@ (8005ebc <TIM2_IRQHandler+0x10>)
 8005eb2:	f003 fd2f 	bl	8009914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005eb6:	bf00      	nop
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	200011e0 	.word	0x200011e0

08005ec0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ec4:	4802      	ldr	r0, [pc, #8]	@ (8005ed0 <USART2_IRQHandler+0x10>)
 8005ec6:	f004 fa85 	bl	800a3d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005eca:	bf00      	nop
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20001270 	.word	0x20001270

08005ed4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005ed8:	4802      	ldr	r0, [pc, #8]	@ (8005ee4 <UART4_IRQHandler+0x10>)
 8005eda:	f004 fa7b 	bl	800a3d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20001228 	.word	0x20001228

08005ee8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005eec:	4802      	ldr	r0, [pc, #8]	@ (8005ef8 <DMA2_Stream2_IRQHandler+0x10>)
 8005eee:	f001 f8f1 	bl	80070d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005ef2:	bf00      	nop
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200013c0 	.word	0x200013c0

08005efc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005f00:	4802      	ldr	r0, [pc, #8]	@ (8005f0c <USART6_IRQHandler+0x10>)
 8005f02:	f004 fa67 	bl	800a3d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005f06:	bf00      	nop
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	200012b8 	.word	0x200012b8

08005f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	af00      	add	r7, sp, #0
  return 1;
 8005f14:	2301      	movs	r3, #1
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <_kill>:

int _kill(int pid, int sig)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005f2a:	f006 fcbb 	bl	800c8a4 <__errno>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2216      	movs	r2, #22
 8005f32:	601a      	str	r2, [r3, #0]
  return -1;
 8005f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3708      	adds	r7, #8
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <_exit>:

void _exit (int status)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005f48:	f04f 31ff 	mov.w	r1, #4294967295
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff ffe7 	bl	8005f20 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005f52:	bf00      	nop
 8005f54:	e7fd      	b.n	8005f52 <_exit+0x12>

08005f56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f62:	2300      	movs	r3, #0
 8005f64:	617b      	str	r3, [r7, #20]
 8005f66:	e00a      	b.n	8005f7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f68:	f3af 8000 	nop.w
 8005f6c:	4601      	mov	r1, r0
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	60ba      	str	r2, [r7, #8]
 8005f74:	b2ca      	uxtb	r2, r1
 8005f76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	617b      	str	r3, [r7, #20]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	dbf0      	blt.n	8005f68 <_read+0x12>
  }

  return len;
 8005f86:	687b      	ldr	r3, [r7, #4]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	617b      	str	r3, [r7, #20]
 8005fa0:	e009      	b.n	8005fb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	60ba      	str	r2, [r7, #8]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	617b      	str	r3, [r7, #20]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	dbf1      	blt.n	8005fa2 <_write+0x12>
  }
  return len;
 8005fbe:	687b      	ldr	r3, [r7, #4]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3718      	adds	r7, #24
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <_close>:

int _close(int file)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b083      	sub	sp, #12
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ff0:	605a      	str	r2, [r3, #4]
  return 0;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <_isatty>:

int _isatty(int file)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006008:	2301      	movs	r3, #1
}
 800600a:	4618      	mov	r0, r3
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	60f8      	str	r0, [r7, #12]
 800601e:	60b9      	str	r1, [r7, #8]
 8006020:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006038:	4a14      	ldr	r2, [pc, #80]	@ (800608c <_sbrk+0x5c>)
 800603a:	4b15      	ldr	r3, [pc, #84]	@ (8006090 <_sbrk+0x60>)
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006044:	4b13      	ldr	r3, [pc, #76]	@ (8006094 <_sbrk+0x64>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d102      	bne.n	8006052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800604c:	4b11      	ldr	r3, [pc, #68]	@ (8006094 <_sbrk+0x64>)
 800604e:	4a12      	ldr	r2, [pc, #72]	@ (8006098 <_sbrk+0x68>)
 8006050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006052:	4b10      	ldr	r3, [pc, #64]	@ (8006094 <_sbrk+0x64>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	429a      	cmp	r2, r3
 800605e:	d207      	bcs.n	8006070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006060:	f006 fc20 	bl	800c8a4 <__errno>
 8006064:	4603      	mov	r3, r0
 8006066:	220c      	movs	r2, #12
 8006068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800606a:	f04f 33ff 	mov.w	r3, #4294967295
 800606e:	e009      	b.n	8006084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006070:	4b08      	ldr	r3, [pc, #32]	@ (8006094 <_sbrk+0x64>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006076:	4b07      	ldr	r3, [pc, #28]	@ (8006094 <_sbrk+0x64>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4413      	add	r3, r2
 800607e:	4a05      	ldr	r2, [pc, #20]	@ (8006094 <_sbrk+0x64>)
 8006080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006082:	68fb      	ldr	r3, [r7, #12]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3718      	adds	r7, #24
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20020000 	.word	0x20020000
 8006090:	00000400 	.word	0x00000400
 8006094:	2000165c 	.word	0x2000165c
 8006098:	200017b0 	.word	0x200017b0

0800609c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060a0:	4b06      	ldr	r3, [pc, #24]	@ (80060bc <SystemInit+0x20>)
 80060a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a6:	4a05      	ldr	r2, [pc, #20]	@ (80060bc <SystemInit+0x20>)
 80060a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060b0:	bf00      	nop
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	e000ed00 	.word	0xe000ed00

080060c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80060c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80060f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80060c4:	f7ff ffea 	bl	800609c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060c8:	480c      	ldr	r0, [pc, #48]	@ (80060fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80060ca:	490d      	ldr	r1, [pc, #52]	@ (8006100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80060cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80060ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80060d0:	e002      	b.n	80060d8 <LoopCopyDataInit>

080060d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80060d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80060d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80060d6:	3304      	adds	r3, #4

080060d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80060d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80060da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060dc:	d3f9      	bcc.n	80060d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060de:	4a0a      	ldr	r2, [pc, #40]	@ (8006108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80060e0:	4c0a      	ldr	r4, [pc, #40]	@ (800610c <LoopFillZerobss+0x22>)
  movs r3, #0
 80060e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060e4:	e001      	b.n	80060ea <LoopFillZerobss>

080060e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060e8:	3204      	adds	r2, #4

080060ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060ec:	d3fb      	bcc.n	80060e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80060ee:	f006 fbdf 	bl	800c8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060f2:	f7fd f991 	bl	8003418 <main>
  bx  lr    
 80060f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80060f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80060fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006100:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8006104:	080124f0 	.word	0x080124f0
  ldr r2, =_sbss
 8006108:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800610c:	200017b0 	.word	0x200017b0

08006110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006110:	e7fe      	b.n	8006110 <ADC_IRQHandler>
	...

08006114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006118:	4b0e      	ldr	r3, [pc, #56]	@ (8006154 <HAL_Init+0x40>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a0d      	ldr	r2, [pc, #52]	@ (8006154 <HAL_Init+0x40>)
 800611e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006124:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <HAL_Init+0x40>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a0a      	ldr	r2, [pc, #40]	@ (8006154 <HAL_Init+0x40>)
 800612a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800612e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006130:	4b08      	ldr	r3, [pc, #32]	@ (8006154 <HAL_Init+0x40>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a07      	ldr	r2, [pc, #28]	@ (8006154 <HAL_Init+0x40>)
 8006136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800613a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800613c:	2003      	movs	r0, #3
 800613e:	f000 fd83 	bl	8006c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006142:	200f      	movs	r0, #15
 8006144:	f000 f808 	bl	8006158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006148:	f7ff fb30 	bl	80057ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	bd80      	pop	{r7, pc}
 8006152:	bf00      	nop
 8006154:	40023c00 	.word	0x40023c00

08006158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006160:	4b12      	ldr	r3, [pc, #72]	@ (80061ac <HAL_InitTick+0x54>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4b12      	ldr	r3, [pc, #72]	@ (80061b0 <HAL_InitTick+0x58>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	4619      	mov	r1, r3
 800616a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800616e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006172:	fbb2 f3f3 	udiv	r3, r2, r3
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fda9 	bl	8006cce <HAL_SYSTICK_Config>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e00e      	b.n	80061a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b0f      	cmp	r3, #15
 800618a:	d80a      	bhi.n	80061a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800618c:	2200      	movs	r2, #0
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	f04f 30ff 	mov.w	r0, #4294967295
 8006194:	f000 fd63 	bl	8006c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006198:	4a06      	ldr	r2, [pc, #24]	@ (80061b4 <HAL_InitTick+0x5c>)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e000      	b.n	80061a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	2000002c 	.word	0x2000002c
 80061b0:	20000034 	.word	0x20000034
 80061b4:	20000030 	.word	0x20000030

080061b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061bc:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <HAL_IncTick+0x20>)
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	461a      	mov	r2, r3
 80061c2:	4b06      	ldr	r3, [pc, #24]	@ (80061dc <HAL_IncTick+0x24>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4413      	add	r3, r2
 80061c8:	4a04      	ldr	r2, [pc, #16]	@ (80061dc <HAL_IncTick+0x24>)
 80061ca:	6013      	str	r3, [r2, #0]
}
 80061cc:	bf00      	nop
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000034 	.word	0x20000034
 80061dc:	20001660 	.word	0x20001660

080061e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061e0:	b480      	push	{r7}
 80061e2:	af00      	add	r7, sp, #0
  return uwTick;
 80061e4:	4b03      	ldr	r3, [pc, #12]	@ (80061f4 <HAL_GetTick+0x14>)
 80061e6:	681b      	ldr	r3, [r3, #0]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	20001660 	.word	0x20001660

080061f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006200:	f7ff ffee 	bl	80061e0 <HAL_GetTick>
 8006204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006210:	d005      	beq.n	800621e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006212:	4b0a      	ldr	r3, [pc, #40]	@ (800623c <HAL_Delay+0x44>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800621e:	bf00      	nop
 8006220:	f7ff ffde 	bl	80061e0 <HAL_GetTick>
 8006224:	4602      	mov	r2, r0
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	429a      	cmp	r2, r3
 800622e:	d8f7      	bhi.n	8006220 <HAL_Delay+0x28>
  {
  }
}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	20000034 	.word	0x20000034

08006240 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d101      	bne.n	8006256 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e033      	b.n	80062be <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff facc 	bl	80057fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	f003 0310 	and.w	r3, r3, #16
 800627a:	2b00      	cmp	r3, #0
 800627c:	d118      	bne.n	80062b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006286:	f023 0302 	bic.w	r3, r3, #2
 800628a:	f043 0202 	orr.w	r2, r3, #2
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f000 fae8 	bl	8006868 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	f043 0201 	orr.w	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80062ae:	e001      	b.n	80062b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_ADC_Start+0x1a>
 80062de:	2302      	movs	r3, #2
 80062e0:	e0b2      	b.n	8006448 <HAL_ADC_Start+0x180>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d018      	beq.n	800632a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689a      	ldr	r2, [r3, #8]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006308:	4b52      	ldr	r3, [pc, #328]	@ (8006454 <HAL_ADC_Start+0x18c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a52      	ldr	r2, [pc, #328]	@ (8006458 <HAL_ADC_Start+0x190>)
 800630e:	fba2 2303 	umull	r2, r3, r2, r3
 8006312:	0c9a      	lsrs	r2, r3, #18
 8006314:	4613      	mov	r3, r2
 8006316:	005b      	lsls	r3, r3, #1
 8006318:	4413      	add	r3, r2
 800631a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800631c:	e002      	b.n	8006324 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	3b01      	subs	r3, #1
 8006322:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1f9      	bne.n	800631e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	f003 0301 	and.w	r3, r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d17a      	bne.n	800642e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8006362:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006376:	d106      	bne.n	8006386 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637c:	f023 0206 	bic.w	r2, r3, #6
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	645a      	str	r2, [r3, #68]	@ 0x44
 8006384:	e002      	b.n	800638c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006394:	4b31      	ldr	r3, [pc, #196]	@ (800645c <HAL_ADC_Start+0x194>)
 8006396:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80063a0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d12a      	bne.n	8006404 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006460 <HAL_ADC_Start+0x198>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d015      	beq.n	80063e4 <HAL_ADC_Start+0x11c>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a29      	ldr	r2, [pc, #164]	@ (8006464 <HAL_ADC_Start+0x19c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d105      	bne.n	80063ce <HAL_ADC_Start+0x106>
 80063c2:	4b26      	ldr	r3, [pc, #152]	@ (800645c <HAL_ADC_Start+0x194>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f003 031f 	and.w	r3, r3, #31
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00a      	beq.n	80063e4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a25      	ldr	r2, [pc, #148]	@ (8006468 <HAL_ADC_Start+0x1a0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d136      	bne.n	8006446 <HAL_ADC_Start+0x17e>
 80063d8:	4b20      	ldr	r3, [pc, #128]	@ (800645c <HAL_ADC_Start+0x194>)
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d130      	bne.n	8006446 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d129      	bne.n	8006446 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689a      	ldr	r2, [r3, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8006400:	609a      	str	r2, [r3, #8]
 8006402:	e020      	b.n	8006446 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a15      	ldr	r2, [pc, #84]	@ (8006460 <HAL_ADC_Start+0x198>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d11b      	bne.n	8006446 <HAL_ADC_Start+0x17e>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d114      	bne.n	8006446 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800642a:	609a      	str	r2, [r3, #8]
 800642c:	e00b      	b.n	8006446 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f043 0210 	orr.w	r2, r3, #16
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	f043 0201 	orr.w	r2, r3, #1
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	2000002c 	.word	0x2000002c
 8006458:	431bde83 	.word	0x431bde83
 800645c:	40012300 	.word	0x40012300
 8006460:	40012000 	.word	0x40012000
 8006464:	40012100 	.word	0x40012100
 8006468:	40012200 	.word	0x40012200

0800646c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_ADC_Stop+0x16>
 800647e:	2302      	movs	r3, #2
 8006480:	e021      	b.n	80064c6 <HAL_ADC_Stop+0x5a>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 0201 	bic.w	r2, r2, #1
 8006498:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d109      	bne.n	80064bc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	f043 0201 	orr.w	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064ee:	d113      	bne.n	8006518 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fe:	d10b      	bne.n	8006518 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e063      	b.n	80065e0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006518:	f7ff fe62 	bl	80061e0 <HAL_GetTick>
 800651c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800651e:	e021      	b.n	8006564 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d01d      	beq.n	8006564 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d007      	beq.n	800653e <HAL_ADC_PollForConversion+0x6c>
 800652e:	f7ff fe57 	bl	80061e0 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	429a      	cmp	r2, r3
 800653c:	d212      	bcs.n	8006564 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b02      	cmp	r3, #2
 800654a:	d00b      	beq.n	8006564 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006550:	f043 0204 	orr.w	r2, r3, #4
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8006560:	2303      	movs	r3, #3
 8006562:	e03d      	b.n	80065e0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b02      	cmp	r3, #2
 8006570:	d1d6      	bne.n	8006520 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f06f 0212 	mvn.w	r2, #18
 800657a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006580:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d123      	bne.n	80065de <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800659a:	2b00      	cmp	r3, #0
 800659c:	d11f      	bne.n	80065de <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d111      	bne.n	80065de <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d105      	bne.n	80065de <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	f043 0201 	orr.w	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b083      	sub	sp, #12
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d101      	bne.n	8006620 <HAL_ADC_ConfigChannel+0x1c>
 800661c:	2302      	movs	r3, #2
 800661e:	e113      	b.n	8006848 <HAL_ADC_ConfigChannel+0x244>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b09      	cmp	r3, #9
 800662e:	d925      	bls.n	800667c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68d9      	ldr	r1, [r3, #12]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	b29b      	uxth	r3, r3
 800663c:	461a      	mov	r2, r3
 800663e:	4613      	mov	r3, r2
 8006640:	005b      	lsls	r3, r3, #1
 8006642:	4413      	add	r3, r2
 8006644:	3b1e      	subs	r3, #30
 8006646:	2207      	movs	r2, #7
 8006648:	fa02 f303 	lsl.w	r3, r2, r3
 800664c:	43da      	mvns	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	400a      	ands	r2, r1
 8006654:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68d9      	ldr	r1, [r3, #12]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	b29b      	uxth	r3, r3
 8006666:	4618      	mov	r0, r3
 8006668:	4603      	mov	r3, r0
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	4403      	add	r3, r0
 800666e:	3b1e      	subs	r3, #30
 8006670:	409a      	lsls	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	60da      	str	r2, [r3, #12]
 800667a:	e022      	b.n	80066c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6919      	ldr	r1, [r3, #16]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	461a      	mov	r2, r3
 800668a:	4613      	mov	r3, r2
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	4413      	add	r3, r2
 8006690:	2207      	movs	r2, #7
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	43da      	mvns	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	400a      	ands	r2, r1
 800669e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6919      	ldr	r1, [r3, #16]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	4618      	mov	r0, r3
 80066b2:	4603      	mov	r3, r0
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	4403      	add	r3, r0
 80066b8:	409a      	lsls	r2, r3
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	2b06      	cmp	r3, #6
 80066c8:	d824      	bhi.n	8006714 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	3b05      	subs	r3, #5
 80066dc:	221f      	movs	r2, #31
 80066de:	fa02 f303 	lsl.w	r3, r2, r3
 80066e2:	43da      	mvns	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	400a      	ands	r2, r1
 80066ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	4618      	mov	r0, r3
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	3b05      	subs	r3, #5
 8006706:	fa00 f203 	lsl.w	r2, r0, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	430a      	orrs	r2, r1
 8006710:	635a      	str	r2, [r3, #52]	@ 0x34
 8006712:	e04c      	b.n	80067ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	2b0c      	cmp	r3, #12
 800671a:	d824      	bhi.n	8006766 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	3b23      	subs	r3, #35	@ 0x23
 800672e:	221f      	movs	r2, #31
 8006730:	fa02 f303 	lsl.w	r3, r2, r3
 8006734:	43da      	mvns	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	400a      	ands	r2, r1
 800673c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	4618      	mov	r0, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	685a      	ldr	r2, [r3, #4]
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	3b23      	subs	r3, #35	@ 0x23
 8006758:	fa00 f203 	lsl.w	r2, r0, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	631a      	str	r2, [r3, #48]	@ 0x30
 8006764:	e023      	b.n	80067ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	685a      	ldr	r2, [r3, #4]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	3b41      	subs	r3, #65	@ 0x41
 8006778:	221f      	movs	r2, #31
 800677a:	fa02 f303 	lsl.w	r3, r2, r3
 800677e:	43da      	mvns	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	400a      	ands	r2, r1
 8006786:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	4618      	mov	r0, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	685a      	ldr	r2, [r3, #4]
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	3b41      	subs	r3, #65	@ 0x41
 80067a2:	fa00 f203 	lsl.w	r2, r0, r3
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067ae:	4b29      	ldr	r3, [pc, #164]	@ (8006854 <HAL_ADC_ConfigChannel+0x250>)
 80067b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a28      	ldr	r2, [pc, #160]	@ (8006858 <HAL_ADC_ConfigChannel+0x254>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d10f      	bne.n	80067dc <HAL_ADC_ConfigChannel+0x1d8>
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b12      	cmp	r3, #18
 80067c2:	d10b      	bne.n	80067dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006858 <HAL_ADC_ConfigChannel+0x254>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d12b      	bne.n	800683e <HAL_ADC_ConfigChannel+0x23a>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a1c      	ldr	r2, [pc, #112]	@ (800685c <HAL_ADC_ConfigChannel+0x258>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d003      	beq.n	80067f8 <HAL_ADC_ConfigChannel+0x1f4>
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2b11      	cmp	r3, #17
 80067f6:	d122      	bne.n	800683e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a11      	ldr	r2, [pc, #68]	@ (800685c <HAL_ADC_ConfigChannel+0x258>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d111      	bne.n	800683e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800681a:	4b11      	ldr	r3, [pc, #68]	@ (8006860 <HAL_ADC_ConfigChannel+0x25c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a11      	ldr	r2, [pc, #68]	@ (8006864 <HAL_ADC_ConfigChannel+0x260>)
 8006820:	fba2 2303 	umull	r2, r3, r2, r3
 8006824:	0c9a      	lsrs	r2, r3, #18
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006830:	e002      	b.n	8006838 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	3b01      	subs	r3, #1
 8006836:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1f9      	bne.n	8006832 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40012300 	.word	0x40012300
 8006858:	40012000 	.word	0x40012000
 800685c:	10000012 	.word	0x10000012
 8006860:	2000002c 	.word	0x2000002c
 8006864:	431bde83 	.word	0x431bde83

08006868 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006868:	b480      	push	{r7}
 800686a:	b085      	sub	sp, #20
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006870:	4b79      	ldr	r3, [pc, #484]	@ (8006a58 <ADC_Init+0x1f0>)
 8006872:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	431a      	orrs	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800689c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6859      	ldr	r1, [r3, #4]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	021a      	lsls	r2, r3, #8
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	430a      	orrs	r2, r1
 80068b0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80068c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6859      	ldr	r1, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	689a      	ldr	r2, [r3, #8]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6899      	ldr	r1, [r3, #8]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68da      	ldr	r2, [r3, #12]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	430a      	orrs	r2, r1
 80068f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fa:	4a58      	ldr	r2, [pc, #352]	@ (8006a5c <ADC_Init+0x1f4>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d022      	beq.n	8006946 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800690e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6899      	ldr	r1, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006930:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6899      	ldr	r1, [r3, #8]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	430a      	orrs	r2, r1
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	e00f      	b.n	8006966 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006964:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689a      	ldr	r2, [r3, #8]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0202 	bic.w	r2, r2, #2
 8006974:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6899      	ldr	r1, [r3, #8]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	7e1b      	ldrb	r3, [r3, #24]
 8006980:	005a      	lsls	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	430a      	orrs	r2, r1
 8006988:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069a2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80069b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6859      	ldr	r1, [r3, #4]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069be:	3b01      	subs	r3, #1
 80069c0:	035a      	lsls	r2, r3, #13
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
 80069ca:	e007      	b.n	80069dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069da:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80069ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	3b01      	subs	r3, #1
 80069f8:	051a      	lsls	r2, r3, #20
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006a10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6899      	ldr	r1, [r3, #8]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a1e:	025a      	lsls	r2, r3, #9
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	6899      	ldr	r1, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	029a      	lsls	r2, r3, #10
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
}
 8006a4c:	bf00      	nop
 8006a4e:	3714      	adds	r7, #20
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40012300 	.word	0x40012300
 8006a5c:	0f000001 	.word	0x0f000001

08006a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f003 0307 	and.w	r3, r3, #7
 8006a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a70:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a92:	4a04      	ldr	r2, [pc, #16]	@ (8006aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	60d3      	str	r3, [r2, #12]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	e000ed00 	.word	0xe000ed00

08006aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006aac:	4b04      	ldr	r3, [pc, #16]	@ (8006ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	0a1b      	lsrs	r3, r3, #8
 8006ab2:	f003 0307 	and.w	r3, r3, #7
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	e000ed00 	.word	0xe000ed00

08006ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	4603      	mov	r3, r0
 8006acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	db0b      	blt.n	8006aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ad6:	79fb      	ldrb	r3, [r7, #7]
 8006ad8:	f003 021f 	and.w	r2, r3, #31
 8006adc:	4907      	ldr	r1, [pc, #28]	@ (8006afc <__NVIC_EnableIRQ+0x38>)
 8006ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	2001      	movs	r0, #1
 8006ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8006aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006aee:	bf00      	nop
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	e000e100 	.word	0xe000e100

08006b00 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	4603      	mov	r3, r0
 8006b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	db12      	blt.n	8006b38 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	f003 021f 	and.w	r2, r3, #31
 8006b18:	490a      	ldr	r1, [pc, #40]	@ (8006b44 <__NVIC_DisableIRQ+0x44>)
 8006b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	2001      	movs	r0, #1
 8006b22:	fa00 f202 	lsl.w	r2, r0, r2
 8006b26:	3320      	adds	r3, #32
 8006b28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b2c:	f3bf 8f4f 	dsb	sy
}
 8006b30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006b32:	f3bf 8f6f 	isb	sy
}
 8006b36:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	e000e100 	.word	0xe000e100

08006b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	6039      	str	r1, [r7, #0]
 8006b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	db0a      	blt.n	8006b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	b2da      	uxtb	r2, r3
 8006b60:	490c      	ldr	r1, [pc, #48]	@ (8006b94 <__NVIC_SetPriority+0x4c>)
 8006b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b66:	0112      	lsls	r2, r2, #4
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b70:	e00a      	b.n	8006b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	b2da      	uxtb	r2, r3
 8006b76:	4908      	ldr	r1, [pc, #32]	@ (8006b98 <__NVIC_SetPriority+0x50>)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	f003 030f 	and.w	r3, r3, #15
 8006b7e:	3b04      	subs	r3, #4
 8006b80:	0112      	lsls	r2, r2, #4
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	440b      	add	r3, r1
 8006b86:	761a      	strb	r2, [r3, #24]
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr
 8006b94:	e000e100 	.word	0xe000e100
 8006b98:	e000ed00 	.word	0xe000ed00

08006b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b089      	sub	sp, #36	@ 0x24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f1c3 0307 	rsb	r3, r3, #7
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	bf28      	it	cs
 8006bba:	2304      	movcs	r3, #4
 8006bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	2b06      	cmp	r3, #6
 8006bc4:	d902      	bls.n	8006bcc <NVIC_EncodePriority+0x30>
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	3b03      	subs	r3, #3
 8006bca:	e000      	b.n	8006bce <NVIC_EncodePriority+0x32>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	43da      	mvns	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	401a      	ands	r2, r3
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006be4:	f04f 31ff 	mov.w	r1, #4294967295
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	fa01 f303 	lsl.w	r3, r1, r3
 8006bee:	43d9      	mvns	r1, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bf4:	4313      	orrs	r3, r2
         );
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3724      	adds	r7, #36	@ 0x24
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
	...

08006c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c14:	d301      	bcc.n	8006c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c16:	2301      	movs	r3, #1
 8006c18:	e00f      	b.n	8006c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8006c44 <SysTick_Config+0x40>)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c22:	210f      	movs	r1, #15
 8006c24:	f04f 30ff 	mov.w	r0, #4294967295
 8006c28:	f7ff ff8e 	bl	8006b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c2c:	4b05      	ldr	r3, [pc, #20]	@ (8006c44 <SysTick_Config+0x40>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c32:	4b04      	ldr	r3, [pc, #16]	@ (8006c44 <SysTick_Config+0x40>)
 8006c34:	2207      	movs	r2, #7
 8006c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	e000e010 	.word	0xe000e010

08006c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7ff ff05 	bl	8006a60 <__NVIC_SetPriorityGrouping>
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b086      	sub	sp, #24
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	4603      	mov	r3, r0
 8006c66:	60b9      	str	r1, [r7, #8]
 8006c68:	607a      	str	r2, [r7, #4]
 8006c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c70:	f7ff ff1a 	bl	8006aa8 <__NVIC_GetPriorityGrouping>
 8006c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	6978      	ldr	r0, [r7, #20]
 8006c7c:	f7ff ff8e 	bl	8006b9c <NVIC_EncodePriority>
 8006c80:	4602      	mov	r2, r0
 8006c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c86:	4611      	mov	r1, r2
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f7ff ff5d 	bl	8006b48 <__NVIC_SetPriority>
}
 8006c8e:	bf00      	nop
 8006c90:	3718      	adds	r7, #24
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff ff0d 	bl	8006ac4 <__NVIC_EnableIRQ>
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	4603      	mov	r3, r0
 8006cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7ff ff1d 	bl	8006b00 <__NVIC_DisableIRQ>
}
 8006cc6:	bf00      	nop
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7ff ff94 	bl	8006c04 <SysTick_Config>
 8006cdc:	4603      	mov	r3, r0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006cf4:	f7ff fa74 	bl	80061e0 <HAL_GetTick>
 8006cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e099      	b.n	8006e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d24:	e00f      	b.n	8006d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d26:	f7ff fa5b 	bl	80061e0 <HAL_GetTick>
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	1ad3      	subs	r3, r2, r3
 8006d30:	2b05      	cmp	r3, #5
 8006d32:	d908      	bls.n	8006d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2203      	movs	r2, #3
 8006d3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e078      	b.n	8006e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d1e8      	bne.n	8006d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4b38      	ldr	r3, [pc, #224]	@ (8006e40 <HAL_DMA_Init+0x158>)
 8006d60:	4013      	ands	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d107      	bne.n	8006db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da8:	4313      	orrs	r3, r2
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	f023 0307 	bic.w	r3, r3, #7
 8006dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	2b04      	cmp	r3, #4
 8006dd8:	d117      	bne.n	8006e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00e      	beq.n	8006e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f000 fb5f 	bl	80074b0 <DMA_CheckFifoParam>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d008      	beq.n	8006e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2240      	movs	r2, #64	@ 0x40
 8006dfc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8006e06:	2301      	movs	r3, #1
 8006e08:	e016      	b.n	8006e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fb16 	bl	8007444 <DMA_CalcBaseAndBitshift>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e20:	223f      	movs	r2, #63	@ 0x3f
 8006e22:	409a      	lsls	r2, r3
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3718      	adds	r7, #24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	f010803f 	.word	0xf010803f

08006e44 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e050      	b.n	8006ef8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d101      	bne.n	8006e66 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006e62:	2302      	movs	r3, #2
 8006e64:	e048      	b.n	8006ef8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0201 	bic.w	r2, r2, #1
 8006e74:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2221      	movs	r2, #33	@ 0x21
 8006ea4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 facc 	bl	8007444 <DMA_CalcBaseAndBitshift>
 8006eac:	4603      	mov	r3, r0
 8006eae:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed8:	223f      	movs	r2, #63	@ 0x3f
 8006eda:	409a      	lsls	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f16:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d101      	bne.n	8006f26 <HAL_DMA_Start_IT+0x26>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e040      	b.n	8006fa8 <HAL_DMA_Start_IT+0xa8>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2201      	movs	r2, #1
 8006f2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d12f      	bne.n	8006f9a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2200      	movs	r2, #0
 8006f46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	68b9      	ldr	r1, [r7, #8]
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 fa4a 	bl	80073e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f58:	223f      	movs	r2, #63	@ 0x3f
 8006f5a:	409a      	lsls	r2, r3
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0216 	orr.w	r2, r2, #22
 8006f6e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0208 	orr.w	r2, r2, #8
 8006f86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e005      	b.n	8006fa6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fbc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006fbe:	f7ff f90f 	bl	80061e0 <HAL_GetTick>
 8006fc2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d008      	beq.n	8006fe2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2280      	movs	r2, #128	@ 0x80
 8006fd4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e052      	b.n	8007088 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0216 	bic.w	r2, r2, #22
 8006ff0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695a      	ldr	r2, [r3, #20]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007000:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007006:	2b00      	cmp	r3, #0
 8007008:	d103      	bne.n	8007012 <HAL_DMA_Abort+0x62>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0208 	bic.w	r2, r2, #8
 8007020:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007032:	e013      	b.n	800705c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007034:	f7ff f8d4 	bl	80061e0 <HAL_GetTick>
 8007038:	4602      	mov	r2, r0
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	1ad3      	subs	r3, r2, r3
 800703e:	2b05      	cmp	r3, #5
 8007040:	d90c      	bls.n	800705c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2203      	movs	r2, #3
 800704c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e015      	b.n	8007088 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e4      	bne.n	8007034 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800706e:	223f      	movs	r2, #63	@ 0x3f
 8007070:	409a      	lsls	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3710      	adds	r7, #16
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d004      	beq.n	80070ae <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2280      	movs	r2, #128	@ 0x80
 80070a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e00c      	b.n	80070c8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2205      	movs	r2, #5
 80070b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f022 0201 	bic.w	r2, r2, #1
 80070c4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80070dc:	2300      	movs	r3, #0
 80070de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070e0:	4b8e      	ldr	r3, [pc, #568]	@ (800731c <HAL_DMA_IRQHandler+0x248>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a8e      	ldr	r2, [pc, #568]	@ (8007320 <HAL_DMA_IRQHandler+0x24c>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	0a9b      	lsrs	r3, r3, #10
 80070ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fe:	2208      	movs	r2, #8
 8007100:	409a      	lsls	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4013      	ands	r3, r2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d01a      	beq.n	8007140 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d013      	beq.n	8007140 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0204 	bic.w	r2, r2, #4
 8007126:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712c:	2208      	movs	r2, #8
 800712e:	409a      	lsls	r2, r3
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007138:	f043 0201 	orr.w	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007144:	2201      	movs	r2, #1
 8007146:	409a      	lsls	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d012      	beq.n	8007176 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007162:	2201      	movs	r2, #1
 8007164:	409a      	lsls	r2, r3
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800716e:	f043 0202 	orr.w	r2, r3, #2
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800717a:	2204      	movs	r2, #4
 800717c:	409a      	lsls	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4013      	ands	r3, r2
 8007182:	2b00      	cmp	r3, #0
 8007184:	d012      	beq.n	80071ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007198:	2204      	movs	r2, #4
 800719a:	409a      	lsls	r2, r3
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071a4:	f043 0204 	orr.w	r2, r3, #4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071b0:	2210      	movs	r2, #16
 80071b2:	409a      	lsls	r2, r3
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	4013      	ands	r3, r2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d043      	beq.n	8007244 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f003 0308 	and.w	r3, r3, #8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d03c      	beq.n	8007244 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071ce:	2210      	movs	r2, #16
 80071d0:	409a      	lsls	r2, r3
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d018      	beq.n	8007216 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d108      	bne.n	8007204 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d024      	beq.n	8007244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
 8007202:	e01f      	b.n	8007244 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01b      	beq.n	8007244 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
 8007214:	e016      	b.n	8007244 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007220:	2b00      	cmp	r3, #0
 8007222:	d107      	bne.n	8007234 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f022 0208 	bic.w	r2, r2, #8
 8007232:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007248:	2220      	movs	r2, #32
 800724a:	409a      	lsls	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4013      	ands	r3, r2
 8007250:	2b00      	cmp	r3, #0
 8007252:	f000 808f 	beq.w	8007374 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f003 0310 	and.w	r3, r3, #16
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 8087 	beq.w	8007374 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800726a:	2220      	movs	r2, #32
 800726c:	409a      	lsls	r2, r3
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b05      	cmp	r3, #5
 800727c:	d136      	bne.n	80072ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0216 	bic.w	r2, r2, #22
 800728c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	695a      	ldr	r2, [r3, #20]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800729c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d103      	bne.n	80072ae <HAL_DMA_IRQHandler+0x1da>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d007      	beq.n	80072be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0208 	bic.w	r2, r2, #8
 80072bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072c2:	223f      	movs	r2, #63	@ 0x3f
 80072c4:	409a      	lsls	r2, r3
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d07e      	beq.n	80073e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3
        }
        return;
 80072ea:	e079      	b.n	80073e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d01d      	beq.n	8007336 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10d      	bne.n	8007324 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730c:	2b00      	cmp	r3, #0
 800730e:	d031      	beq.n	8007374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
 8007318:	e02c      	b.n	8007374 <HAL_DMA_IRQHandler+0x2a0>
 800731a:	bf00      	nop
 800731c:	2000002c 	.word	0x2000002c
 8007320:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007328:	2b00      	cmp	r3, #0
 800732a:	d023      	beq.n	8007374 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	4798      	blx	r3
 8007334:	e01e      	b.n	8007374 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10f      	bne.n	8007364 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f022 0210 	bic.w	r2, r2, #16
 8007352:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007378:	2b00      	cmp	r3, #0
 800737a:	d032      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d022      	beq.n	80073ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2205      	movs	r2, #5
 800738c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60bb      	str	r3, [r7, #8]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d307      	bcc.n	80073bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0301 	and.w	r3, r3, #1
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1f2      	bne.n	80073a0 <HAL_DMA_IRQHandler+0x2cc>
 80073ba:	e000      	b.n	80073be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80073bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d005      	beq.n	80073e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	4798      	blx	r3
 80073de:	e000      	b.n	80073e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80073e0:	bf00      	nop
    }
  }
}
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	607a      	str	r2, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b40      	cmp	r3, #64	@ 0x40
 8007414:	d108      	bne.n	8007428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007426:	e007      	b.n	8007438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	b2db      	uxtb	r3, r3
 8007452:	3b10      	subs	r3, #16
 8007454:	4a14      	ldr	r2, [pc, #80]	@ (80074a8 <DMA_CalcBaseAndBitshift+0x64>)
 8007456:	fba2 2303 	umull	r2, r3, r2, r3
 800745a:	091b      	lsrs	r3, r3, #4
 800745c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800745e:	4a13      	ldr	r2, [pc, #76]	@ (80074ac <DMA_CalcBaseAndBitshift+0x68>)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4413      	add	r3, r2
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	461a      	mov	r2, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b03      	cmp	r3, #3
 8007470:	d909      	bls.n	8007486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800747a:	f023 0303 	bic.w	r3, r3, #3
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	659a      	str	r2, [r3, #88]	@ 0x58
 8007484:	e007      	b.n	8007496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800748e:	f023 0303 	bic.w	r3, r3, #3
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
 80074a6:	bf00      	nop
 80074a8:	aaaaaaab 	.word	0xaaaaaaab
 80074ac:	08012020 	.word	0x08012020

080074b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d11f      	bne.n	800750a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d856      	bhi.n	800757e <DMA_CheckFifoParam+0xce>
 80074d0:	a201      	add	r2, pc, #4	@ (adr r2, 80074d8 <DMA_CheckFifoParam+0x28>)
 80074d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d6:	bf00      	nop
 80074d8:	080074e9 	.word	0x080074e9
 80074dc:	080074fb 	.word	0x080074fb
 80074e0:	080074e9 	.word	0x080074e9
 80074e4:	0800757f 	.word	0x0800757f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d046      	beq.n	8007582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074f8:	e043      	b.n	8007582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007502:	d140      	bne.n	8007586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007508:	e03d      	b.n	8007586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007512:	d121      	bne.n	8007558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	2b03      	cmp	r3, #3
 8007518:	d837      	bhi.n	800758a <DMA_CheckFifoParam+0xda>
 800751a:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <DMA_CheckFifoParam+0x70>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	08007531 	.word	0x08007531
 8007524:	08007537 	.word	0x08007537
 8007528:	08007531 	.word	0x08007531
 800752c:	08007549 	.word	0x08007549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
      break;
 8007534:	e030      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d025      	beq.n	800758e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007546:	e022      	b.n	800758e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800754c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007550:	d11f      	bne.n	8007592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007556:	e01c      	b.n	8007592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b02      	cmp	r3, #2
 800755c:	d903      	bls.n	8007566 <DMA_CheckFifoParam+0xb6>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b03      	cmp	r3, #3
 8007562:	d003      	beq.n	800756c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007564:	e018      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	73fb      	strb	r3, [r7, #15]
      break;
 800756a:	e015      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00e      	beq.n	8007596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
      break;
 800757c:	e00b      	b.n	8007596 <DMA_CheckFifoParam+0xe6>
      break;
 800757e:	bf00      	nop
 8007580:	e00a      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
      break;
 8007582:	bf00      	nop
 8007584:	e008      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
      break;
 8007586:	bf00      	nop
 8007588:	e006      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
      break;
 800758a:	bf00      	nop
 800758c:	e004      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
      break;
 800758e:	bf00      	nop
 8007590:	e002      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
      break;   
 8007592:	bf00      	nop
 8007594:	e000      	b.n	8007598 <DMA_CheckFifoParam+0xe8>
      break;
 8007596:	bf00      	nop
    }
  } 
  
  return status; 
 8007598:	7bfb      	ldrb	r3, [r7, #15]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop

080075a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b089      	sub	sp, #36	@ 0x24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075be:	2300      	movs	r3, #0
 80075c0:	61fb      	str	r3, [r7, #28]
 80075c2:	e165      	b.n	8007890 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80075c4:	2201      	movs	r2, #1
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	697a      	ldr	r2, [r7, #20]
 80075d4:	4013      	ands	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	429a      	cmp	r2, r3
 80075de:	f040 8154 	bne.w	800788a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	f003 0303 	and.w	r3, r3, #3
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d005      	beq.n	80075fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d130      	bne.n	800765c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007600:	69fb      	ldr	r3, [r7, #28]
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	2203      	movs	r2, #3
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43db      	mvns	r3, r3
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	4013      	ands	r3, r2
 8007610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	fa02 f303 	lsl.w	r3, r2, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4313      	orrs	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69ba      	ldr	r2, [r7, #24]
 8007628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007630:	2201      	movs	r2, #1
 8007632:	69fb      	ldr	r3, [r7, #28]
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	43db      	mvns	r3, r3
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	4013      	ands	r3, r2
 800763e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	091b      	lsrs	r3, r3, #4
 8007646:	f003 0201 	and.w	r2, r3, #1
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4313      	orrs	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f003 0303 	and.w	r3, r3, #3
 8007664:	2b03      	cmp	r3, #3
 8007666:	d017      	beq.n	8007698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	005b      	lsls	r3, r3, #1
 8007672:	2203      	movs	r2, #3
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	43db      	mvns	r3, r3
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	4013      	ands	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	005b      	lsls	r3, r3, #1
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	4313      	orrs	r3, r2
 8007690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	f003 0303 	and.w	r3, r3, #3
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d123      	bne.n	80076ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	08da      	lsrs	r2, r3, #3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3208      	adds	r2, #8
 80076ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	f003 0307 	and.w	r3, r3, #7
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	220f      	movs	r2, #15
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	43db      	mvns	r3, r3
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	4013      	ands	r3, r2
 80076c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	4313      	orrs	r3, r2
 80076dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076de:	69fb      	ldr	r3, [r7, #28]
 80076e0:	08da      	lsrs	r2, r3, #3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	3208      	adds	r2, #8
 80076e6:	69b9      	ldr	r1, [r7, #24]
 80076e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	005b      	lsls	r3, r3, #1
 80076f6:	2203      	movs	r2, #3
 80076f8:	fa02 f303 	lsl.w	r3, r2, r3
 80076fc:	43db      	mvns	r3, r3
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	4013      	ands	r3, r2
 8007702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f003 0203 	and.w	r2, r3, #3
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	005b      	lsls	r3, r3, #1
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	69ba      	ldr	r2, [r7, #24]
 8007716:	4313      	orrs	r3, r2
 8007718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007728:	2b00      	cmp	r3, #0
 800772a:	f000 80ae 	beq.w	800788a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800772e:	2300      	movs	r3, #0
 8007730:	60fb      	str	r3, [r7, #12]
 8007732:	4b5d      	ldr	r3, [pc, #372]	@ (80078a8 <HAL_GPIO_Init+0x300>)
 8007734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007736:	4a5c      	ldr	r2, [pc, #368]	@ (80078a8 <HAL_GPIO_Init+0x300>)
 8007738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800773c:	6453      	str	r3, [r2, #68]	@ 0x44
 800773e:	4b5a      	ldr	r3, [pc, #360]	@ (80078a8 <HAL_GPIO_Init+0x300>)
 8007740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800774a:	4a58      	ldr	r2, [pc, #352]	@ (80078ac <HAL_GPIO_Init+0x304>)
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	089b      	lsrs	r3, r3, #2
 8007750:	3302      	adds	r3, #2
 8007752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	220f      	movs	r2, #15
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	43db      	mvns	r3, r3
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	4013      	ands	r3, r2
 800776c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a4f      	ldr	r2, [pc, #316]	@ (80078b0 <HAL_GPIO_Init+0x308>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d025      	beq.n	80077c2 <HAL_GPIO_Init+0x21a>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a4e      	ldr	r2, [pc, #312]	@ (80078b4 <HAL_GPIO_Init+0x30c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01f      	beq.n	80077be <HAL_GPIO_Init+0x216>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a4d      	ldr	r2, [pc, #308]	@ (80078b8 <HAL_GPIO_Init+0x310>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d019      	beq.n	80077ba <HAL_GPIO_Init+0x212>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a4c      	ldr	r2, [pc, #304]	@ (80078bc <HAL_GPIO_Init+0x314>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d013      	beq.n	80077b6 <HAL_GPIO_Init+0x20e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a4b      	ldr	r2, [pc, #300]	@ (80078c0 <HAL_GPIO_Init+0x318>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d00d      	beq.n	80077b2 <HAL_GPIO_Init+0x20a>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a4a      	ldr	r2, [pc, #296]	@ (80078c4 <HAL_GPIO_Init+0x31c>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d007      	beq.n	80077ae <HAL_GPIO_Init+0x206>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a49      	ldr	r2, [pc, #292]	@ (80078c8 <HAL_GPIO_Init+0x320>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d101      	bne.n	80077aa <HAL_GPIO_Init+0x202>
 80077a6:	2306      	movs	r3, #6
 80077a8:	e00c      	b.n	80077c4 <HAL_GPIO_Init+0x21c>
 80077aa:	2307      	movs	r3, #7
 80077ac:	e00a      	b.n	80077c4 <HAL_GPIO_Init+0x21c>
 80077ae:	2305      	movs	r3, #5
 80077b0:	e008      	b.n	80077c4 <HAL_GPIO_Init+0x21c>
 80077b2:	2304      	movs	r3, #4
 80077b4:	e006      	b.n	80077c4 <HAL_GPIO_Init+0x21c>
 80077b6:	2303      	movs	r3, #3
 80077b8:	e004      	b.n	80077c4 <HAL_GPIO_Init+0x21c>
 80077ba:	2302      	movs	r3, #2
 80077bc:	e002      	b.n	80077c4 <HAL_GPIO_Init+0x21c>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <HAL_GPIO_Init+0x21c>
 80077c2:	2300      	movs	r3, #0
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	f002 0203 	and.w	r2, r2, #3
 80077ca:	0092      	lsls	r2, r2, #2
 80077cc:	4093      	lsls	r3, r2
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077d4:	4935      	ldr	r1, [pc, #212]	@ (80078ac <HAL_GPIO_Init+0x304>)
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	089b      	lsrs	r3, r3, #2
 80077da:	3302      	adds	r3, #2
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077e2:	4b3a      	ldr	r3, [pc, #232]	@ (80078cc <HAL_GPIO_Init+0x324>)
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	43db      	mvns	r3, r3
 80077ec:	69ba      	ldr	r2, [r7, #24]
 80077ee:	4013      	ands	r3, r2
 80077f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d003      	beq.n	8007806 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	4313      	orrs	r3, r2
 8007804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007806:	4a31      	ldr	r2, [pc, #196]	@ (80078cc <HAL_GPIO_Init+0x324>)
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800780c:	4b2f      	ldr	r3, [pc, #188]	@ (80078cc <HAL_GPIO_Init+0x324>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	43db      	mvns	r3, r3
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	4013      	ands	r3, r2
 800781a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	4313      	orrs	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007830:	4a26      	ldr	r2, [pc, #152]	@ (80078cc <HAL_GPIO_Init+0x324>)
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007836:	4b25      	ldr	r3, [pc, #148]	@ (80078cc <HAL_GPIO_Init+0x324>)
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	43db      	mvns	r3, r3
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	4013      	ands	r3, r2
 8007844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007852:	69ba      	ldr	r2, [r7, #24]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	4313      	orrs	r3, r2
 8007858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800785a:	4a1c      	ldr	r2, [pc, #112]	@ (80078cc <HAL_GPIO_Init+0x324>)
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007860:	4b1a      	ldr	r3, [pc, #104]	@ (80078cc <HAL_GPIO_Init+0x324>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	43db      	mvns	r3, r3
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	4013      	ands	r3, r2
 800786e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	4313      	orrs	r3, r2
 8007882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007884:	4a11      	ldr	r2, [pc, #68]	@ (80078cc <HAL_GPIO_Init+0x324>)
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	3301      	adds	r3, #1
 800788e:	61fb      	str	r3, [r7, #28]
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	2b0f      	cmp	r3, #15
 8007894:	f67f ae96 	bls.w	80075c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	3724      	adds	r7, #36	@ 0x24
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	40023800 	.word	0x40023800
 80078ac:	40013800 	.word	0x40013800
 80078b0:	40020000 	.word	0x40020000
 80078b4:	40020400 	.word	0x40020400
 80078b8:	40020800 	.word	0x40020800
 80078bc:	40020c00 	.word	0x40020c00
 80078c0:	40021000 	.word	0x40021000
 80078c4:	40021400 	.word	0x40021400
 80078c8:	40021800 	.word	0x40021800
 80078cc:	40013c00 	.word	0x40013c00

080078d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80078da:	2300      	movs	r3, #0
 80078dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078e6:	2300      	movs	r3, #0
 80078e8:	617b      	str	r3, [r7, #20]
 80078ea:	e0c7      	b.n	8007a7c <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80078ec:	2201      	movs	r2, #1
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	fa02 f303 	lsl.w	r3, r2, r3
 80078f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	4013      	ands	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	429a      	cmp	r2, r3
 8007904:	f040 80b7 	bne.w	8007a76 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007908:	4a62      	ldr	r2, [pc, #392]	@ (8007a94 <HAL_GPIO_DeInit+0x1c4>)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	089b      	lsrs	r3, r3, #2
 800790e:	3302      	adds	r3, #2
 8007910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007914:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	f003 0303 	and.w	r3, r3, #3
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	220f      	movs	r2, #15
 8007920:	fa02 f303 	lsl.w	r3, r2, r3
 8007924:	68ba      	ldr	r2, [r7, #8]
 8007926:	4013      	ands	r3, r2
 8007928:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a5a      	ldr	r2, [pc, #360]	@ (8007a98 <HAL_GPIO_DeInit+0x1c8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d025      	beq.n	800797e <HAL_GPIO_DeInit+0xae>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a59      	ldr	r2, [pc, #356]	@ (8007a9c <HAL_GPIO_DeInit+0x1cc>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d01f      	beq.n	800797a <HAL_GPIO_DeInit+0xaa>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a58      	ldr	r2, [pc, #352]	@ (8007aa0 <HAL_GPIO_DeInit+0x1d0>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d019      	beq.n	8007976 <HAL_GPIO_DeInit+0xa6>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a57      	ldr	r2, [pc, #348]	@ (8007aa4 <HAL_GPIO_DeInit+0x1d4>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d013      	beq.n	8007972 <HAL_GPIO_DeInit+0xa2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a56      	ldr	r2, [pc, #344]	@ (8007aa8 <HAL_GPIO_DeInit+0x1d8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d00d      	beq.n	800796e <HAL_GPIO_DeInit+0x9e>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a55      	ldr	r2, [pc, #340]	@ (8007aac <HAL_GPIO_DeInit+0x1dc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d007      	beq.n	800796a <HAL_GPIO_DeInit+0x9a>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a54      	ldr	r2, [pc, #336]	@ (8007ab0 <HAL_GPIO_DeInit+0x1e0>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d101      	bne.n	8007966 <HAL_GPIO_DeInit+0x96>
 8007962:	2306      	movs	r3, #6
 8007964:	e00c      	b.n	8007980 <HAL_GPIO_DeInit+0xb0>
 8007966:	2307      	movs	r3, #7
 8007968:	e00a      	b.n	8007980 <HAL_GPIO_DeInit+0xb0>
 800796a:	2305      	movs	r3, #5
 800796c:	e008      	b.n	8007980 <HAL_GPIO_DeInit+0xb0>
 800796e:	2304      	movs	r3, #4
 8007970:	e006      	b.n	8007980 <HAL_GPIO_DeInit+0xb0>
 8007972:	2303      	movs	r3, #3
 8007974:	e004      	b.n	8007980 <HAL_GPIO_DeInit+0xb0>
 8007976:	2302      	movs	r3, #2
 8007978:	e002      	b.n	8007980 <HAL_GPIO_DeInit+0xb0>
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <HAL_GPIO_DeInit+0xb0>
 800797e:	2300      	movs	r3, #0
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	f002 0203 	and.w	r2, r2, #3
 8007986:	0092      	lsls	r2, r2, #2
 8007988:	4093      	lsls	r3, r2
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	429a      	cmp	r2, r3
 800798e:	d132      	bne.n	80079f6 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007990:	4b48      	ldr	r3, [pc, #288]	@ (8007ab4 <HAL_GPIO_DeInit+0x1e4>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	43db      	mvns	r3, r3
 8007998:	4946      	ldr	r1, [pc, #280]	@ (8007ab4 <HAL_GPIO_DeInit+0x1e4>)
 800799a:	4013      	ands	r3, r2
 800799c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800799e:	4b45      	ldr	r3, [pc, #276]	@ (8007ab4 <HAL_GPIO_DeInit+0x1e4>)
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	43db      	mvns	r3, r3
 80079a6:	4943      	ldr	r1, [pc, #268]	@ (8007ab4 <HAL_GPIO_DeInit+0x1e4>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80079ac:	4b41      	ldr	r3, [pc, #260]	@ (8007ab4 <HAL_GPIO_DeInit+0x1e4>)
 80079ae:	68da      	ldr	r2, [r3, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	43db      	mvns	r3, r3
 80079b4:	493f      	ldr	r1, [pc, #252]	@ (8007ab4 <HAL_GPIO_DeInit+0x1e4>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80079ba:	4b3e      	ldr	r3, [pc, #248]	@ (8007ab4 <HAL_GPIO_DeInit+0x1e4>)
 80079bc:	689a      	ldr	r2, [r3, #8]
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	43db      	mvns	r3, r3
 80079c2:	493c      	ldr	r1, [pc, #240]	@ (8007ab4 <HAL_GPIO_DeInit+0x1e4>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	220f      	movs	r2, #15
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80079d8:	4a2e      	ldr	r2, [pc, #184]	@ (8007a94 <HAL_GPIO_DeInit+0x1c4>)
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	089b      	lsrs	r3, r3, #2
 80079de:	3302      	adds	r3, #2
 80079e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	43da      	mvns	r2, r3
 80079e8:	482a      	ldr	r0, [pc, #168]	@ (8007a94 <HAL_GPIO_DeInit+0x1c4>)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	089b      	lsrs	r3, r3, #2
 80079ee:	400a      	ands	r2, r1
 80079f0:	3302      	adds	r3, #2
 80079f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	2103      	movs	r1, #3
 8007a00:	fa01 f303 	lsl.w	r3, r1, r3
 8007a04:	43db      	mvns	r3, r3
 8007a06:	401a      	ands	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	08da      	lsrs	r2, r3, #3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	3208      	adds	r2, #8
 8007a14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	220f      	movs	r2, #15
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	43db      	mvns	r3, r3
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	08d2      	lsrs	r2, r2, #3
 8007a2c:	4019      	ands	r1, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	3208      	adds	r2, #8
 8007a32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	2103      	movs	r1, #3
 8007a40:	fa01 f303 	lsl.w	r3, r1, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	401a      	ands	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	2101      	movs	r1, #1
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	fa01 f303 	lsl.w	r3, r1, r3
 8007a58:	43db      	mvns	r3, r3
 8007a5a:	401a      	ands	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	689a      	ldr	r2, [r3, #8]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	2103      	movs	r1, #3
 8007a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	401a      	ands	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b0f      	cmp	r3, #15
 8007a80:	f67f af34 	bls.w	80078ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	371c      	adds	r7, #28
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	40013800 	.word	0x40013800
 8007a98:	40020000 	.word	0x40020000
 8007a9c:	40020400 	.word	0x40020400
 8007aa0:	40020800 	.word	0x40020800
 8007aa4:	40020c00 	.word	0x40020c00
 8007aa8:	40021000 	.word	0x40021000
 8007aac:	40021400 	.word	0x40021400
 8007ab0:	40021800 	.word	0x40021800
 8007ab4:	40013c00 	.word	0x40013c00

08007ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	807b      	strh	r3, [r7, #2]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007ac8:	787b      	ldrb	r3, [r7, #1]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ace:	887a      	ldrh	r2, [r7, #2]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ad4:	e003      	b.n	8007ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007ad6:	887b      	ldrh	r3, [r7, #2]
 8007ad8:	041a      	lsls	r2, r3, #16
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	619a      	str	r2, [r3, #24]
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
	...

08007aec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007af6:	4b08      	ldr	r3, [pc, #32]	@ (8007b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007af8:	695a      	ldr	r2, [r3, #20]
 8007afa:	88fb      	ldrh	r3, [r7, #6]
 8007afc:	4013      	ands	r3, r2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d006      	beq.n	8007b10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007b02:	4a05      	ldr	r2, [pc, #20]	@ (8007b18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007b04:	88fb      	ldrh	r3, [r7, #6]
 8007b06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007b08:	88fb      	ldrh	r3, [r7, #6]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fc f860 	bl	8003bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007b10:	bf00      	nop
 8007b12:	3708      	adds	r7, #8
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}
 8007b18:	40013c00 	.word	0x40013c00

08007b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e12b      	b.n	8007d86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d106      	bne.n	8007b48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fd fe9e 	bl	8005884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2224      	movs	r2, #36	@ 0x24
 8007b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b80:	f001 f912 	bl	8008da8 <HAL_RCC_GetPCLK1Freq>
 8007b84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	4a81      	ldr	r2, [pc, #516]	@ (8007d90 <HAL_I2C_Init+0x274>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d807      	bhi.n	8007ba0 <HAL_I2C_Init+0x84>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	4a80      	ldr	r2, [pc, #512]	@ (8007d94 <HAL_I2C_Init+0x278>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	bf94      	ite	ls
 8007b98:	2301      	movls	r3, #1
 8007b9a:	2300      	movhi	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	e006      	b.n	8007bae <HAL_I2C_Init+0x92>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4a7d      	ldr	r2, [pc, #500]	@ (8007d98 <HAL_I2C_Init+0x27c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	bf94      	ite	ls
 8007ba8:	2301      	movls	r3, #1
 8007baa:	2300      	movhi	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e0e7      	b.n	8007d86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a78      	ldr	r2, [pc, #480]	@ (8007d9c <HAL_I2C_Init+0x280>)
 8007bba:	fba2 2303 	umull	r2, r3, r2, r3
 8007bbe:	0c9b      	lsrs	r3, r3, #18
 8007bc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	430a      	orrs	r2, r1
 8007bd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6a1b      	ldr	r3, [r3, #32]
 8007bdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	4a6a      	ldr	r2, [pc, #424]	@ (8007d90 <HAL_I2C_Init+0x274>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d802      	bhi.n	8007bf0 <HAL_I2C_Init+0xd4>
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	3301      	adds	r3, #1
 8007bee:	e009      	b.n	8007c04 <HAL_I2C_Init+0xe8>
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007bf6:	fb02 f303 	mul.w	r3, r2, r3
 8007bfa:	4a69      	ldr	r2, [pc, #420]	@ (8007da0 <HAL_I2C_Init+0x284>)
 8007bfc:	fba2 2303 	umull	r2, r3, r2, r3
 8007c00:	099b      	lsrs	r3, r3, #6
 8007c02:	3301      	adds	r3, #1
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	6812      	ldr	r2, [r2, #0]
 8007c08:	430b      	orrs	r3, r1
 8007c0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	69db      	ldr	r3, [r3, #28]
 8007c12:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007c16:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	685b      	ldr	r3, [r3, #4]
 8007c1e:	495c      	ldr	r1, [pc, #368]	@ (8007d90 <HAL_I2C_Init+0x274>)
 8007c20:	428b      	cmp	r3, r1
 8007c22:	d819      	bhi.n	8007c58 <HAL_I2C_Init+0x13c>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	1e59      	subs	r1, r3, #1
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c32:	1c59      	adds	r1, r3, #1
 8007c34:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007c38:	400b      	ands	r3, r1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <HAL_I2C_Init+0x138>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	1e59      	subs	r1, r3, #1
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	005b      	lsls	r3, r3, #1
 8007c48:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c52:	e051      	b.n	8007cf8 <HAL_I2C_Init+0x1dc>
 8007c54:	2304      	movs	r3, #4
 8007c56:	e04f      	b.n	8007cf8 <HAL_I2C_Init+0x1dc>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d111      	bne.n	8007c84 <HAL_I2C_Init+0x168>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	1e58      	subs	r0, r3, #1
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6859      	ldr	r1, [r3, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	440b      	add	r3, r1
 8007c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c72:	3301      	adds	r3, #1
 8007c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2301      	moveq	r3, #1
 8007c7e:	2300      	movne	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e012      	b.n	8007caa <HAL_I2C_Init+0x18e>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	1e58      	subs	r0, r3, #1
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6859      	ldr	r1, [r3, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	0099      	lsls	r1, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2301      	moveq	r3, #1
 8007ca6:	2300      	movne	r3, #0
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d001      	beq.n	8007cb2 <HAL_I2C_Init+0x196>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e022      	b.n	8007cf8 <HAL_I2C_Init+0x1dc>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10e      	bne.n	8007cd8 <HAL_I2C_Init+0x1bc>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	1e58      	subs	r0, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6859      	ldr	r1, [r3, #4]
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	440b      	add	r3, r1
 8007cc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ccc:	3301      	adds	r3, #1
 8007cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cd6:	e00f      	b.n	8007cf8 <HAL_I2C_Init+0x1dc>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	1e58      	subs	r0, r3, #1
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6859      	ldr	r1, [r3, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	440b      	add	r3, r1
 8007ce6:	0099      	lsls	r1, r3, #2
 8007ce8:	440b      	add	r3, r1
 8007cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cee:	3301      	adds	r3, #1
 8007cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cf8:	6879      	ldr	r1, [r7, #4]
 8007cfa:	6809      	ldr	r1, [r1, #0]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	69da      	ldr	r2, [r3, #28]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6a1b      	ldr	r3, [r3, #32]
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007d26:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	6911      	ldr	r1, [r2, #16]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	68d2      	ldr	r2, [r2, #12]
 8007d32:	4311      	orrs	r1, r2
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	6812      	ldr	r2, [r2, #0]
 8007d38:	430b      	orrs	r3, r1
 8007d3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	695a      	ldr	r2, [r3, #20]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	699b      	ldr	r3, [r3, #24]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f042 0201 	orr.w	r2, r2, #1
 8007d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	000186a0 	.word	0x000186a0
 8007d94:	001e847f 	.word	0x001e847f
 8007d98:	003d08ff 	.word	0x003d08ff
 8007d9c:	431bde83 	.word	0x431bde83
 8007da0:	10624dd3 	.word	0x10624dd3

08007da4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e021      	b.n	8007dfa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2224      	movs	r2, #36	@ 0x24
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681a      	ldr	r2, [r3, #0]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f022 0201 	bic.w	r2, r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f7fd fdf8 	bl	80059c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007df8:	2300      	movs	r3, #0
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
	...

08007e04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b088      	sub	sp, #32
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	4608      	mov	r0, r1
 8007e0e:	4611      	mov	r1, r2
 8007e10:	461a      	mov	r2, r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	817b      	strh	r3, [r7, #10]
 8007e16:	460b      	mov	r3, r1
 8007e18:	813b      	strh	r3, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e1e:	f7fe f9df 	bl	80061e0 <HAL_GetTick>
 8007e22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	f040 80d9 	bne.w	8007fe4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	9300      	str	r3, [sp, #0]
 8007e36:	2319      	movs	r3, #25
 8007e38:	2201      	movs	r2, #1
 8007e3a:	496d      	ldr	r1, [pc, #436]	@ (8007ff0 <HAL_I2C_Mem_Write+0x1ec>)
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fc8b 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d001      	beq.n	8007e4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e0cc      	b.n	8007fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d101      	bne.n	8007e5a <HAL_I2C_Mem_Write+0x56>
 8007e56:	2302      	movs	r3, #2
 8007e58:	e0c5      	b.n	8007fe6 <HAL_I2C_Mem_Write+0x1e2>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d007      	beq.n	8007e80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0201 	orr.w	r2, r2, #1
 8007e7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2221      	movs	r2, #33	@ 0x21
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2240      	movs	r2, #64	@ 0x40
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6a3a      	ldr	r2, [r7, #32]
 8007eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4a4d      	ldr	r2, [pc, #308]	@ (8007ff4 <HAL_I2C_Mem_Write+0x1f0>)
 8007ec0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007ec2:	88f8      	ldrh	r0, [r7, #6]
 8007ec4:	893a      	ldrh	r2, [r7, #8]
 8007ec6:	8979      	ldrh	r1, [r7, #10]
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f000 fac2 	bl	800845c <I2C_RequestMemoryWrite>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d052      	beq.n	8007f84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e081      	b.n	8007fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ee2:	697a      	ldr	r2, [r7, #20]
 8007ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f000 fd50 	bl	800898c <I2C_WaitOnTXEFlagUntilTimeout>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00d      	beq.n	8007f0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef6:	2b04      	cmp	r3, #4
 8007ef8:	d107      	bne.n	8007f0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e06b      	b.n	8007fe6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f12:	781a      	ldrb	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f1e:	1c5a      	adds	r2, r3, #1
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	3b01      	subs	r3, #1
 8007f38:	b29a      	uxth	r2, r3
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	f003 0304 	and.w	r3, r3, #4
 8007f48:	2b04      	cmp	r3, #4
 8007f4a:	d11b      	bne.n	8007f84 <HAL_I2C_Mem_Write+0x180>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d017      	beq.n	8007f84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f58:	781a      	ldrb	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1aa      	bne.n	8007ee2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f8c:	697a      	ldr	r2, [r7, #20]
 8007f8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fd43 	bl	8008a1c <I2C_WaitOnBTFFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00d      	beq.n	8007fb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	d107      	bne.n	8007fb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e016      	b.n	8007fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e000      	b.n	8007fe6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007fe4:	2302      	movs	r3, #2
  }
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3718      	adds	r7, #24
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	00100002 	.word	0x00100002
 8007ff4:	ffff0000 	.word	0xffff0000

08007ff8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b08c      	sub	sp, #48	@ 0x30
 8007ffc:	af02      	add	r7, sp, #8
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	4608      	mov	r0, r1
 8008002:	4611      	mov	r1, r2
 8008004:	461a      	mov	r2, r3
 8008006:	4603      	mov	r3, r0
 8008008:	817b      	strh	r3, [r7, #10]
 800800a:	460b      	mov	r3, r1
 800800c:	813b      	strh	r3, [r7, #8]
 800800e:	4613      	mov	r3, r2
 8008010:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008012:	f7fe f8e5 	bl	80061e0 <HAL_GetTick>
 8008016:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b20      	cmp	r3, #32
 8008022:	f040 8214 	bne.w	800844e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	2319      	movs	r3, #25
 800802c:	2201      	movs	r2, #1
 800802e:	497b      	ldr	r1, [pc, #492]	@ (800821c <HAL_I2C_Mem_Read+0x224>)
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 fb91 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800803c:	2302      	movs	r3, #2
 800803e:	e207      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d101      	bne.n	800804e <HAL_I2C_Mem_Read+0x56>
 800804a:	2302      	movs	r3, #2
 800804c:	e200      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2201      	movs	r2, #1
 8008052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b01      	cmp	r3, #1
 8008062:	d007      	beq.n	8008074 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f042 0201 	orr.w	r2, r2, #1
 8008072:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008082:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2222      	movs	r2, #34	@ 0x22
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2240      	movs	r2, #64	@ 0x40
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800809e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80080a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a5b      	ldr	r2, [pc, #364]	@ (8008220 <HAL_I2C_Mem_Read+0x228>)
 80080b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80080b6:	88f8      	ldrh	r0, [r7, #6]
 80080b8:	893a      	ldrh	r2, [r7, #8]
 80080ba:	8979      	ldrh	r1, [r7, #10]
 80080bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4603      	mov	r3, r0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 fa5e 	bl	8008588 <I2C_RequestMemoryRead>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80080d2:	2301      	movs	r3, #1
 80080d4:	e1bc      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d113      	bne.n	8008106 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080de:	2300      	movs	r3, #0
 80080e0:	623b      	str	r3, [r7, #32]
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	623b      	str	r3, [r7, #32]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	623b      	str	r3, [r7, #32]
 80080f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e190      	b.n	8008428 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800810a:	2b01      	cmp	r3, #1
 800810c:	d11b      	bne.n	8008146 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800811c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	61fb      	str	r3, [r7, #28]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008142:	601a      	str	r2, [r3, #0]
 8008144:	e170      	b.n	8008428 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800814a:	2b02      	cmp	r3, #2
 800814c:	d11b      	bne.n	8008186 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681a      	ldr	r2, [r3, #0]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800815c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800816c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800816e:	2300      	movs	r3, #0
 8008170:	61bb      	str	r3, [r7, #24]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	61bb      	str	r3, [r7, #24]
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	e150      	b.n	8008428 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	695b      	ldr	r3, [r3, #20]
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800819c:	e144      	b.n	8008428 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081a2:	2b03      	cmp	r3, #3
 80081a4:	f200 80f1 	bhi.w	800838a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d123      	bne.n	80081f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fc79 	bl	8008aac <I2C_WaitOnRXNEFlagUntilTimeout>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e145      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691a      	ldr	r2, [r3, #16]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081e0:	3b01      	subs	r3, #1
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3b01      	subs	r3, #1
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80081f6:	e117      	b.n	8008428 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80081fc:	2b02      	cmp	r3, #2
 80081fe:	d14e      	bne.n	800829e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	9300      	str	r3, [sp, #0]
 8008204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008206:	2200      	movs	r2, #0
 8008208:	4906      	ldr	r1, [pc, #24]	@ (8008224 <HAL_I2C_Mem_Read+0x22c>)
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 faa4 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8008210:	4603      	mov	r3, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d008      	beq.n	8008228 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e11a      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
 800821a:	bf00      	nop
 800821c:	00100002 	.word	0x00100002
 8008220:	ffff0000 	.word	0xffff0000
 8008224:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	691a      	ldr	r2, [r3, #16]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008242:	b2d2      	uxtb	r2, r2
 8008244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008274:	b2d2      	uxtb	r2, r2
 8008276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008286:	3b01      	subs	r3, #1
 8008288:	b29a      	uxth	r2, r3
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008292:	b29b      	uxth	r3, r3
 8008294:	3b01      	subs	r3, #1
 8008296:	b29a      	uxth	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800829c:	e0c4      	b.n	8008428 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800829e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a4:	2200      	movs	r2, #0
 80082a6:	496c      	ldr	r1, [pc, #432]	@ (8008458 <HAL_I2C_Mem_Read+0x460>)
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fa55 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	e0cb      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691a      	ldr	r2, [r3, #16]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d2:	b2d2      	uxtb	r2, r2
 80082d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082e4:	3b01      	subs	r3, #1
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	3b01      	subs	r3, #1
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	9300      	str	r3, [sp, #0]
 80082fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008300:	2200      	movs	r2, #0
 8008302:	4955      	ldr	r1, [pc, #340]	@ (8008458 <HAL_I2C_Mem_Read+0x460>)
 8008304:	68f8      	ldr	r0, [r7, #12]
 8008306:	f000 fa27 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e09d      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800832e:	b2d2      	uxtb	r2, r2
 8008330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008336:	1c5a      	adds	r2, r3, #1
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800834c:	b29b      	uxth	r3, r3
 800834e:	3b01      	subs	r3, #1
 8008350:	b29a      	uxth	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	691a      	ldr	r2, [r3, #16]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008360:	b2d2      	uxtb	r2, r2
 8008362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008372:	3b01      	subs	r3, #1
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800837e:	b29b      	uxth	r3, r3
 8008380:	3b01      	subs	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008388:	e04e      	b.n	8008428 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800838a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800838c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fb8c 	bl	8008aac <I2C_WaitOnRXNEFlagUntilTimeout>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d001      	beq.n	800839e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e058      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	691a      	ldr	r2, [r3, #16]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a8:	b2d2      	uxtb	r2, r2
 80083aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b0:	1c5a      	adds	r2, r3, #1
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083ba:	3b01      	subs	r3, #1
 80083bc:	b29a      	uxth	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083c6:	b29b      	uxth	r3, r3
 80083c8:	3b01      	subs	r3, #1
 80083ca:	b29a      	uxth	r2, r3
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	f003 0304 	and.w	r3, r3, #4
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d124      	bne.n	8008428 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d107      	bne.n	80083f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008408:	1c5a      	adds	r2, r3, #1
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008412:	3b01      	subs	r3, #1
 8008414:	b29a      	uxth	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800841e:	b29b      	uxth	r3, r3
 8008420:	3b01      	subs	r3, #1
 8008422:	b29a      	uxth	r2, r3
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800842c:	2b00      	cmp	r3, #0
 800842e:	f47f aeb6 	bne.w	800819e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2220      	movs	r2, #32
 8008436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	e000      	b.n	8008450 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800844e:	2302      	movs	r3, #2
  }
}
 8008450:	4618      	mov	r0, r3
 8008452:	3728      	adds	r7, #40	@ 0x28
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	00010004 	.word	0x00010004

0800845c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	461a      	mov	r2, r3
 800846a:	4603      	mov	r3, r0
 800846c:	817b      	strh	r3, [r7, #10]
 800846e:	460b      	mov	r3, r1
 8008470:	813b      	strh	r3, [r7, #8]
 8008472:	4613      	mov	r3, r2
 8008474:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	6a3b      	ldr	r3, [r7, #32]
 800848c:	2200      	movs	r2, #0
 800848e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f960 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00d      	beq.n	80084ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084ac:	d103      	bne.n	80084b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80084b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e05f      	b.n	800857a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084ba:	897b      	ldrh	r3, [r7, #10]
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80084c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084cc:	6a3a      	ldr	r2, [r7, #32]
 80084ce:	492d      	ldr	r1, [pc, #180]	@ (8008584 <I2C_RequestMemoryWrite+0x128>)
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f000 f9bb 	bl	800884c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d001      	beq.n	80084e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e04c      	b.n	800857a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084e0:	2300      	movs	r3, #0
 80084e2:	617b      	str	r3, [r7, #20]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	617b      	str	r3, [r7, #20]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80084f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084f8:	6a39      	ldr	r1, [r7, #32]
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f000 fa46 	bl	800898c <I2C_WaitOnTXEFlagUntilTimeout>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	2b04      	cmp	r3, #4
 800850c:	d107      	bne.n	800851e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800851c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e02b      	b.n	800857a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008522:	88fb      	ldrh	r3, [r7, #6]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d105      	bne.n	8008534 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008528:	893b      	ldrh	r3, [r7, #8]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	611a      	str	r2, [r3, #16]
 8008532:	e021      	b.n	8008578 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008534:	893b      	ldrh	r3, [r7, #8]
 8008536:	0a1b      	lsrs	r3, r3, #8
 8008538:	b29b      	uxth	r3, r3
 800853a:	b2da      	uxtb	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008544:	6a39      	ldr	r1, [r7, #32]
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f000 fa20 	bl	800898c <I2C_WaitOnTXEFlagUntilTimeout>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00d      	beq.n	800856e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008556:	2b04      	cmp	r3, #4
 8008558:	d107      	bne.n	800856a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e005      	b.n	800857a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800856e:	893b      	ldrh	r3, [r7, #8]
 8008570:	b2da      	uxtb	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	00010002 	.word	0x00010002

08008588 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b088      	sub	sp, #32
 800858c:	af02      	add	r7, sp, #8
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	4608      	mov	r0, r1
 8008592:	4611      	mov	r1, r2
 8008594:	461a      	mov	r2, r3
 8008596:	4603      	mov	r3, r0
 8008598:	817b      	strh	r3, [r7, #10]
 800859a:	460b      	mov	r3, r1
 800859c:	813b      	strh	r3, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f8c2 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085e8:	d103      	bne.n	80085f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80085f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80085f2:	2303      	movs	r3, #3
 80085f4:	e0aa      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085f6:	897b      	ldrh	r3, [r7, #10]
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	461a      	mov	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008604:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	4952      	ldr	r1, [pc, #328]	@ (8008754 <I2C_RequestMemoryRead+0x1cc>)
 800860c:	68f8      	ldr	r0, [r7, #12]
 800860e:	f000 f91d 	bl	800884c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d001      	beq.n	800861c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e097      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800861c:	2300      	movs	r3, #0
 800861e:	617b      	str	r3, [r7, #20]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	695b      	ldr	r3, [r3, #20]
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	617b      	str	r3, [r7, #20]
 8008630:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008634:	6a39      	ldr	r1, [r7, #32]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 f9a8 	bl	800898c <I2C_WaitOnTXEFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00d      	beq.n	800865e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008646:	2b04      	cmp	r3, #4
 8008648:	d107      	bne.n	800865a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008658:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e076      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800865e:	88fb      	ldrh	r3, [r7, #6]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d105      	bne.n	8008670 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008664:	893b      	ldrh	r3, [r7, #8]
 8008666:	b2da      	uxtb	r2, r3
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	611a      	str	r2, [r3, #16]
 800866e:	e021      	b.n	80086b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008670:	893b      	ldrh	r3, [r7, #8]
 8008672:	0a1b      	lsrs	r3, r3, #8
 8008674:	b29b      	uxth	r3, r3
 8008676:	b2da      	uxtb	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800867e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008680:	6a39      	ldr	r1, [r7, #32]
 8008682:	68f8      	ldr	r0, [r7, #12]
 8008684:	f000 f982 	bl	800898c <I2C_WaitOnTXEFlagUntilTimeout>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00d      	beq.n	80086aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008692:	2b04      	cmp	r3, #4
 8008694:	d107      	bne.n	80086a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80086a6:	2301      	movs	r3, #1
 80086a8:	e050      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086aa:	893b      	ldrh	r3, [r7, #8]
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b6:	6a39      	ldr	r1, [r7, #32]
 80086b8:	68f8      	ldr	r0, [r7, #12]
 80086ba:	f000 f967 	bl	800898c <I2C_WaitOnTXEFlagUntilTimeout>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00d      	beq.n	80086e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d107      	bne.n	80086dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e035      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80086f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f2:	9300      	str	r3, [sp, #0]
 80086f4:	6a3b      	ldr	r3, [r7, #32]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 f82b 	bl	8008758 <I2C_WaitOnFlagUntilTimeout>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00d      	beq.n	8008724 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008716:	d103      	bne.n	8008720 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800871e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e013      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008724:	897b      	ldrh	r3, [r7, #10]
 8008726:	b2db      	uxtb	r3, r3
 8008728:	f043 0301 	orr.w	r3, r3, #1
 800872c:	b2da      	uxtb	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	6a3a      	ldr	r2, [r7, #32]
 8008738:	4906      	ldr	r1, [pc, #24]	@ (8008754 <I2C_RequestMemoryRead+0x1cc>)
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 f886 	bl	800884c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008740:	4603      	mov	r3, r0
 8008742:	2b00      	cmp	r3, #0
 8008744:	d001      	beq.n	800874a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e000      	b.n	800874c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3718      	adds	r7, #24
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	00010002 	.word	0x00010002

08008758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	60b9      	str	r1, [r7, #8]
 8008762:	603b      	str	r3, [r7, #0]
 8008764:	4613      	mov	r3, r2
 8008766:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008768:	e048      	b.n	80087fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008770:	d044      	beq.n	80087fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008772:	f7fd fd35 	bl	80061e0 <HAL_GetTick>
 8008776:	4602      	mov	r2, r0
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	429a      	cmp	r2, r3
 8008780:	d302      	bcc.n	8008788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d139      	bne.n	80087fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	0c1b      	lsrs	r3, r3, #16
 800878c:	b2db      	uxtb	r3, r3
 800878e:	2b01      	cmp	r3, #1
 8008790:	d10d      	bne.n	80087ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	695b      	ldr	r3, [r3, #20]
 8008798:	43da      	mvns	r2, r3
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	4013      	ands	r3, r2
 800879e:	b29b      	uxth	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	bf0c      	ite	eq
 80087a4:	2301      	moveq	r3, #1
 80087a6:	2300      	movne	r3, #0
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	461a      	mov	r2, r3
 80087ac:	e00c      	b.n	80087c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	43da      	mvns	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4013      	ands	r3, r2
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bf0c      	ite	eq
 80087c0:	2301      	moveq	r3, #1
 80087c2:	2300      	movne	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d116      	bne.n	80087fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087e8:	f043 0220 	orr.w	r2, r3, #32
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e023      	b.n	8008844 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b01      	cmp	r3, #1
 8008804:	d10d      	bne.n	8008822 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	43da      	mvns	r2, r3
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	4013      	ands	r3, r2
 8008812:	b29b      	uxth	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	bf0c      	ite	eq
 8008818:	2301      	moveq	r3, #1
 800881a:	2300      	movne	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	e00c      	b.n	800883c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	43da      	mvns	r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	4013      	ands	r3, r2
 800882e:	b29b      	uxth	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	bf0c      	ite	eq
 8008834:	2301      	moveq	r3, #1
 8008836:	2300      	movne	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	461a      	mov	r2, r3
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	429a      	cmp	r2, r3
 8008840:	d093      	beq.n	800876a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800885a:	e071      	b.n	8008940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800886a:	d123      	bne.n	80088b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800887a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008884:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2200      	movs	r2, #0
 800888a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2220      	movs	r2, #32
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a0:	f043 0204 	orr.w	r2, r3, #4
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e067      	b.n	8008984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ba:	d041      	beq.n	8008940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088bc:	f7fd fc90 	bl	80061e0 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d302      	bcc.n	80088d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d136      	bne.n	8008940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	0c1b      	lsrs	r3, r3, #16
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d10c      	bne.n	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	43da      	mvns	r2, r3
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	4013      	ands	r3, r2
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bf14      	ite	ne
 80088ee:	2301      	movne	r3, #1
 80088f0:	2300      	moveq	r3, #0
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	e00b      	b.n	800890e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	43da      	mvns	r2, r3
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	4013      	ands	r3, r2
 8008902:	b29b      	uxth	r3, r3
 8008904:	2b00      	cmp	r3, #0
 8008906:	bf14      	ite	ne
 8008908:	2301      	movne	r3, #1
 800890a:	2300      	moveq	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d016      	beq.n	8008940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2220      	movs	r2, #32
 800891c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892c:	f043 0220 	orr.w	r2, r3, #32
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2200      	movs	r2, #0
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	e021      	b.n	8008984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	0c1b      	lsrs	r3, r3, #16
 8008944:	b2db      	uxtb	r3, r3
 8008946:	2b01      	cmp	r3, #1
 8008948:	d10c      	bne.n	8008964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	695b      	ldr	r3, [r3, #20]
 8008950:	43da      	mvns	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	4013      	ands	r3, r2
 8008956:	b29b      	uxth	r3, r3
 8008958:	2b00      	cmp	r3, #0
 800895a:	bf14      	ite	ne
 800895c:	2301      	movne	r3, #1
 800895e:	2300      	moveq	r3, #0
 8008960:	b2db      	uxtb	r3, r3
 8008962:	e00b      	b.n	800897c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	43da      	mvns	r2, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	4013      	ands	r3, r2
 8008970:	b29b      	uxth	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	bf14      	ite	ne
 8008976:	2301      	movne	r3, #1
 8008978:	2300      	moveq	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	f47f af6d 	bne.w	800885c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008998:	e034      	b.n	8008a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 f8e3 	bl	8008b66 <I2C_IsAcknowledgeFailed>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e034      	b.n	8008a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d028      	beq.n	8008a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b2:	f7fd fc15 	bl	80061e0 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d302      	bcc.n	80089c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d11d      	bne.n	8008a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d2:	2b80      	cmp	r3, #128	@ 0x80
 80089d4:	d016      	beq.n	8008a04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2220      	movs	r2, #32
 80089e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f0:	f043 0220 	orr.w	r2, r3, #32
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e007      	b.n	8008a14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a0e:	2b80      	cmp	r3, #128	@ 0x80
 8008a10:	d1c3      	bne.n	800899a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	60f8      	str	r0, [r7, #12]
 8008a24:	60b9      	str	r1, [r7, #8]
 8008a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a28:	e034      	b.n	8008a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a2a:	68f8      	ldr	r0, [r7, #12]
 8008a2c:	f000 f89b 	bl	8008b66 <I2C_IsAcknowledgeFailed>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e034      	b.n	8008aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a40:	d028      	beq.n	8008a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a42:	f7fd fbcd 	bl	80061e0 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	68ba      	ldr	r2, [r7, #8]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d302      	bcc.n	8008a58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d11d      	bne.n	8008a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d016      	beq.n	8008a94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a80:	f043 0220 	orr.w	r2, r3, #32
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e007      	b.n	8008aa4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	f003 0304 	and.w	r3, r3, #4
 8008a9e:	2b04      	cmp	r3, #4
 8008aa0:	d1c3      	bne.n	8008a2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ab8:	e049      	b.n	8008b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	f003 0310 	and.w	r3, r3, #16
 8008ac4:	2b10      	cmp	r3, #16
 8008ac6:	d119      	bne.n	8008afc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f06f 0210 	mvn.w	r2, #16
 8008ad0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2220      	movs	r2, #32
 8008adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e030      	b.n	8008b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008afc:	f7fd fb70 	bl	80061e0 <HAL_GetTick>
 8008b00:	4602      	mov	r2, r0
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	1ad3      	subs	r3, r2, r3
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d11d      	bne.n	8008b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695b      	ldr	r3, [r3, #20]
 8008b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1c:	2b40      	cmp	r3, #64	@ 0x40
 8008b1e:	d016      	beq.n	8008b4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2200      	movs	r2, #0
 8008b24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b3a:	f043 0220 	orr.w	r2, r3, #32
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e007      	b.n	8008b5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b58:	2b40      	cmp	r3, #64	@ 0x40
 8008b5a:	d1ae      	bne.n	8008aba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b7c:	d11b      	bne.n	8008bb6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008b86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba2:	f043 0204 	orr.w	r2, r3, #4
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e000      	b.n	8008bb8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d101      	bne.n	8008bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e0cc      	b.n	8008d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008bd8:	4b68      	ldr	r3, [pc, #416]	@ (8008d7c <HAL_RCC_ClockConfig+0x1b8>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	683a      	ldr	r2, [r7, #0]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d90c      	bls.n	8008c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008be6:	4b65      	ldr	r3, [pc, #404]	@ (8008d7c <HAL_RCC_ClockConfig+0x1b8>)
 8008be8:	683a      	ldr	r2, [r7, #0]
 8008bea:	b2d2      	uxtb	r2, r2
 8008bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bee:	4b63      	ldr	r3, [pc, #396]	@ (8008d7c <HAL_RCC_ClockConfig+0x1b8>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d001      	beq.n	8008c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e0b8      	b.n	8008d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0302 	and.w	r3, r3, #2
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d020      	beq.n	8008c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c18:	4b59      	ldr	r3, [pc, #356]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	4a58      	ldr	r2, [pc, #352]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0308 	and.w	r3, r3, #8
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d005      	beq.n	8008c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c30:	4b53      	ldr	r3, [pc, #332]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	4a52      	ldr	r2, [pc, #328]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c3c:	4b50      	ldr	r3, [pc, #320]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	494d      	ldr	r1, [pc, #308]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 0301 	and.w	r3, r3, #1
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d044      	beq.n	8008ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d107      	bne.n	8008c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c62:	4b47      	ldr	r3, [pc, #284]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d119      	bne.n	8008ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e07f      	b.n	8008d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d003      	beq.n	8008c82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c7e:	2b03      	cmp	r3, #3
 8008c80:	d107      	bne.n	8008c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c82:	4b3f      	ldr	r3, [pc, #252]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d109      	bne.n	8008ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e06f      	b.n	8008d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c92:	4b3b      	ldr	r3, [pc, #236]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e067      	b.n	8008d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ca2:	4b37      	ldr	r3, [pc, #220]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f023 0203 	bic.w	r2, r3, #3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	4934      	ldr	r1, [pc, #208]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008cb4:	f7fd fa94 	bl	80061e0 <HAL_GetTick>
 8008cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cba:	e00a      	b.n	8008cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008cbc:	f7fd fa90 	bl	80061e0 <HAL_GetTick>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d901      	bls.n	8008cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e04f      	b.n	8008d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cd2:	4b2b      	ldr	r3, [pc, #172]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f003 020c 	and.w	r2, r3, #12
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d1eb      	bne.n	8008cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008ce4:	4b25      	ldr	r3, [pc, #148]	@ (8008d7c <HAL_RCC_ClockConfig+0x1b8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 030f 	and.w	r3, r3, #15
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d20c      	bcs.n	8008d0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cf2:	4b22      	ldr	r3, [pc, #136]	@ (8008d7c <HAL_RCC_ClockConfig+0x1b8>)
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cfa:	4b20      	ldr	r3, [pc, #128]	@ (8008d7c <HAL_RCC_ClockConfig+0x1b8>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 030f 	and.w	r3, r3, #15
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d001      	beq.n	8008d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e032      	b.n	8008d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0304 	and.w	r3, r3, #4
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d008      	beq.n	8008d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d18:	4b19      	ldr	r3, [pc, #100]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	4916      	ldr	r1, [pc, #88]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0308 	and.w	r3, r3, #8
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d009      	beq.n	8008d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d36:	4b12      	ldr	r3, [pc, #72]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d38:	689b      	ldr	r3, [r3, #8]
 8008d3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	490e      	ldr	r1, [pc, #56]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d4a:	f000 f855 	bl	8008df8 <HAL_RCC_GetSysClockFreq>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	4b0b      	ldr	r3, [pc, #44]	@ (8008d80 <HAL_RCC_ClockConfig+0x1bc>)
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	091b      	lsrs	r3, r3, #4
 8008d56:	f003 030f 	and.w	r3, r3, #15
 8008d5a:	490a      	ldr	r1, [pc, #40]	@ (8008d84 <HAL_RCC_ClockConfig+0x1c0>)
 8008d5c:	5ccb      	ldrb	r3, [r1, r3]
 8008d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d62:	4a09      	ldr	r2, [pc, #36]	@ (8008d88 <HAL_RCC_ClockConfig+0x1c4>)
 8008d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008d66:	4b09      	ldr	r3, [pc, #36]	@ (8008d8c <HAL_RCC_ClockConfig+0x1c8>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fd f9f4 	bl	8006158 <HAL_InitTick>

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3710      	adds	r7, #16
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40023c00 	.word	0x40023c00
 8008d80:	40023800 	.word	0x40023800
 8008d84:	08012008 	.word	0x08012008
 8008d88:	2000002c 	.word	0x2000002c
 8008d8c:	20000030 	.word	0x20000030

08008d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d94:	4b03      	ldr	r3, [pc, #12]	@ (8008da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d96:	681b      	ldr	r3, [r3, #0]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	2000002c 	.word	0x2000002c

08008da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008dac:	f7ff fff0 	bl	8008d90 <HAL_RCC_GetHCLKFreq>
 8008db0:	4602      	mov	r2, r0
 8008db2:	4b05      	ldr	r3, [pc, #20]	@ (8008dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	0a9b      	lsrs	r3, r3, #10
 8008db8:	f003 0307 	and.w	r3, r3, #7
 8008dbc:	4903      	ldr	r1, [pc, #12]	@ (8008dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8008dbe:	5ccb      	ldrb	r3, [r1, r3]
 8008dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	08012018 	.word	0x08012018

08008dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008dd4:	f7ff ffdc 	bl	8008d90 <HAL_RCC_GetHCLKFreq>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	4b05      	ldr	r3, [pc, #20]	@ (8008df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	0b5b      	lsrs	r3, r3, #13
 8008de0:	f003 0307 	and.w	r3, r3, #7
 8008de4:	4903      	ldr	r1, [pc, #12]	@ (8008df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008de6:	5ccb      	ldrb	r3, [r1, r3]
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	40023800 	.word	0x40023800
 8008df4:	08012018 	.word	0x08012018

08008df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dfc:	b0ae      	sub	sp, #184	@ 0xb8
 8008dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008e06:	2300      	movs	r3, #0
 8008e08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008e12:	2300      	movs	r3, #0
 8008e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e1e:	4bcb      	ldr	r3, [pc, #812]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f003 030c 	and.w	r3, r3, #12
 8008e26:	2b0c      	cmp	r3, #12
 8008e28:	f200 8206 	bhi.w	8009238 <HAL_RCC_GetSysClockFreq+0x440>
 8008e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e34 <HAL_RCC_GetSysClockFreq+0x3c>)
 8008e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e32:	bf00      	nop
 8008e34:	08008e69 	.word	0x08008e69
 8008e38:	08009239 	.word	0x08009239
 8008e3c:	08009239 	.word	0x08009239
 8008e40:	08009239 	.word	0x08009239
 8008e44:	08008e71 	.word	0x08008e71
 8008e48:	08009239 	.word	0x08009239
 8008e4c:	08009239 	.word	0x08009239
 8008e50:	08009239 	.word	0x08009239
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08009239 	.word	0x08009239
 8008e5c:	08009239 	.word	0x08009239
 8008e60:	08009239 	.word	0x08009239
 8008e64:	08009069 	.word	0x08009069
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e68:	4bb9      	ldr	r3, [pc, #740]	@ (8009150 <HAL_RCC_GetSysClockFreq+0x358>)
 8008e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008e6e:	e1e7      	b.n	8009240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e70:	4bb8      	ldr	r3, [pc, #736]	@ (8009154 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008e72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8008e76:	e1e3      	b.n	8009240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e78:	4bb4      	ldr	r3, [pc, #720]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008e80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e84:	4bb1      	ldr	r3, [pc, #708]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d071      	beq.n	8008f74 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e90:	4bae      	ldr	r3, [pc, #696]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	099b      	lsrs	r3, r3, #6
 8008e96:	2200      	movs	r2, #0
 8008e98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e9c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8008ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008eac:	2300      	movs	r3, #0
 8008eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	462b      	mov	r3, r5
 8008eba:	f04f 0000 	mov.w	r0, #0
 8008ebe:	f04f 0100 	mov.w	r1, #0
 8008ec2:	0159      	lsls	r1, r3, #5
 8008ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ec8:	0150      	lsls	r0, r2, #5
 8008eca:	4602      	mov	r2, r0
 8008ecc:	460b      	mov	r3, r1
 8008ece:	4621      	mov	r1, r4
 8008ed0:	1a51      	subs	r1, r2, r1
 8008ed2:	6439      	str	r1, [r7, #64]	@ 0x40
 8008ed4:	4629      	mov	r1, r5
 8008ed6:	eb63 0301 	sbc.w	r3, r3, r1
 8008eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8008edc:	f04f 0200 	mov.w	r2, #0
 8008ee0:	f04f 0300 	mov.w	r3, #0
 8008ee4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8008ee8:	4649      	mov	r1, r9
 8008eea:	018b      	lsls	r3, r1, #6
 8008eec:	4641      	mov	r1, r8
 8008eee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008ef2:	4641      	mov	r1, r8
 8008ef4:	018a      	lsls	r2, r1, #6
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	1a51      	subs	r1, r2, r1
 8008efa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008efc:	4649      	mov	r1, r9
 8008efe:	eb63 0301 	sbc.w	r3, r3, r1
 8008f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f04:	f04f 0200 	mov.w	r2, #0
 8008f08:	f04f 0300 	mov.w	r3, #0
 8008f0c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8008f10:	4649      	mov	r1, r9
 8008f12:	00cb      	lsls	r3, r1, #3
 8008f14:	4641      	mov	r1, r8
 8008f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f1a:	4641      	mov	r1, r8
 8008f1c:	00ca      	lsls	r2, r1, #3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	4619      	mov	r1, r3
 8008f22:	4603      	mov	r3, r0
 8008f24:	4622      	mov	r2, r4
 8008f26:	189b      	adds	r3, r3, r2
 8008f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f2a:	462b      	mov	r3, r5
 8008f2c:	460a      	mov	r2, r1
 8008f2e:	eb42 0303 	adc.w	r3, r2, r3
 8008f32:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8008f40:	4629      	mov	r1, r5
 8008f42:	024b      	lsls	r3, r1, #9
 8008f44:	4621      	mov	r1, r4
 8008f46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	024a      	lsls	r2, r1, #9
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4619      	mov	r1, r3
 8008f52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f56:	2200      	movs	r2, #0
 8008f58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008f5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008f60:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8008f64:	f7f8 f80e 	bl	8000f84 <__aeabi_uldivmod>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f72:	e067      	b.n	8009044 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f74:	4b75      	ldr	r3, [pc, #468]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	099b      	lsrs	r3, r3, #6
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f80:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8008f84:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f8e:	2300      	movs	r3, #0
 8008f90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f92:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8008f96:	4622      	mov	r2, r4
 8008f98:	462b      	mov	r3, r5
 8008f9a:	f04f 0000 	mov.w	r0, #0
 8008f9e:	f04f 0100 	mov.w	r1, #0
 8008fa2:	0159      	lsls	r1, r3, #5
 8008fa4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008fa8:	0150      	lsls	r0, r2, #5
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4621      	mov	r1, r4
 8008fb0:	1a51      	subs	r1, r2, r1
 8008fb2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008fb4:	4629      	mov	r1, r5
 8008fb6:	eb63 0301 	sbc.w	r3, r3, r1
 8008fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fbc:	f04f 0200 	mov.w	r2, #0
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8008fc8:	4649      	mov	r1, r9
 8008fca:	018b      	lsls	r3, r1, #6
 8008fcc:	4641      	mov	r1, r8
 8008fce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008fd2:	4641      	mov	r1, r8
 8008fd4:	018a      	lsls	r2, r1, #6
 8008fd6:	4641      	mov	r1, r8
 8008fd8:	ebb2 0a01 	subs.w	sl, r2, r1
 8008fdc:	4649      	mov	r1, r9
 8008fde:	eb63 0b01 	sbc.w	fp, r3, r1
 8008fe2:	f04f 0200 	mov.w	r2, #0
 8008fe6:	f04f 0300 	mov.w	r3, #0
 8008fea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008fee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ff2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ff6:	4692      	mov	sl, r2
 8008ff8:	469b      	mov	fp, r3
 8008ffa:	4623      	mov	r3, r4
 8008ffc:	eb1a 0303 	adds.w	r3, sl, r3
 8009000:	623b      	str	r3, [r7, #32]
 8009002:	462b      	mov	r3, r5
 8009004:	eb4b 0303 	adc.w	r3, fp, r3
 8009008:	627b      	str	r3, [r7, #36]	@ 0x24
 800900a:	f04f 0200 	mov.w	r2, #0
 800900e:	f04f 0300 	mov.w	r3, #0
 8009012:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009016:	4629      	mov	r1, r5
 8009018:	028b      	lsls	r3, r1, #10
 800901a:	4621      	mov	r1, r4
 800901c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009020:	4621      	mov	r1, r4
 8009022:	028a      	lsls	r2, r1, #10
 8009024:	4610      	mov	r0, r2
 8009026:	4619      	mov	r1, r3
 8009028:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800902c:	2200      	movs	r2, #0
 800902e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009030:	677a      	str	r2, [r7, #116]	@ 0x74
 8009032:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009036:	f7f7 ffa5 	bl	8000f84 <__aeabi_uldivmod>
 800903a:	4602      	mov	r2, r0
 800903c:	460b      	mov	r3, r1
 800903e:	4613      	mov	r3, r2
 8009040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009044:	4b41      	ldr	r3, [pc, #260]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	0c1b      	lsrs	r3, r3, #16
 800904a:	f003 0303 	and.w	r3, r3, #3
 800904e:	3301      	adds	r3, #1
 8009050:	005b      	lsls	r3, r3, #1
 8009052:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8009056:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800905a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800905e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009062:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009066:	e0eb      	b.n	8009240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009068:	4b38      	ldr	r3, [pc, #224]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009070:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009074:	4b35      	ldr	r3, [pc, #212]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d06b      	beq.n	8009158 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009080:	4b32      	ldr	r3, [pc, #200]	@ (800914c <HAL_RCC_GetSysClockFreq+0x354>)
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	099b      	lsrs	r3, r3, #6
 8009086:	2200      	movs	r2, #0
 8009088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800908a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800908c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800908e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009092:	663b      	str	r3, [r7, #96]	@ 0x60
 8009094:	2300      	movs	r3, #0
 8009096:	667b      	str	r3, [r7, #100]	@ 0x64
 8009098:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800909c:	4622      	mov	r2, r4
 800909e:	462b      	mov	r3, r5
 80090a0:	f04f 0000 	mov.w	r0, #0
 80090a4:	f04f 0100 	mov.w	r1, #0
 80090a8:	0159      	lsls	r1, r3, #5
 80090aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090ae:	0150      	lsls	r0, r2, #5
 80090b0:	4602      	mov	r2, r0
 80090b2:	460b      	mov	r3, r1
 80090b4:	4621      	mov	r1, r4
 80090b6:	1a51      	subs	r1, r2, r1
 80090b8:	61b9      	str	r1, [r7, #24]
 80090ba:	4629      	mov	r1, r5
 80090bc:	eb63 0301 	sbc.w	r3, r3, r1
 80090c0:	61fb      	str	r3, [r7, #28]
 80090c2:	f04f 0200 	mov.w	r2, #0
 80090c6:	f04f 0300 	mov.w	r3, #0
 80090ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80090ce:	4659      	mov	r1, fp
 80090d0:	018b      	lsls	r3, r1, #6
 80090d2:	4651      	mov	r1, sl
 80090d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090d8:	4651      	mov	r1, sl
 80090da:	018a      	lsls	r2, r1, #6
 80090dc:	4651      	mov	r1, sl
 80090de:	ebb2 0801 	subs.w	r8, r2, r1
 80090e2:	4659      	mov	r1, fp
 80090e4:	eb63 0901 	sbc.w	r9, r3, r1
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	f04f 0300 	mov.w	r3, #0
 80090f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80090f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80090f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80090fc:	4690      	mov	r8, r2
 80090fe:	4699      	mov	r9, r3
 8009100:	4623      	mov	r3, r4
 8009102:	eb18 0303 	adds.w	r3, r8, r3
 8009106:	613b      	str	r3, [r7, #16]
 8009108:	462b      	mov	r3, r5
 800910a:	eb49 0303 	adc.w	r3, r9, r3
 800910e:	617b      	str	r3, [r7, #20]
 8009110:	f04f 0200 	mov.w	r2, #0
 8009114:	f04f 0300 	mov.w	r3, #0
 8009118:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800911c:	4629      	mov	r1, r5
 800911e:	024b      	lsls	r3, r1, #9
 8009120:	4621      	mov	r1, r4
 8009122:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009126:	4621      	mov	r1, r4
 8009128:	024a      	lsls	r2, r1, #9
 800912a:	4610      	mov	r0, r2
 800912c:	4619      	mov	r1, r3
 800912e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009132:	2200      	movs	r2, #0
 8009134:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009136:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009138:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800913c:	f7f7 ff22 	bl	8000f84 <__aeabi_uldivmod>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4613      	mov	r3, r2
 8009146:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800914a:	e065      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0x420>
 800914c:	40023800 	.word	0x40023800
 8009150:	00f42400 	.word	0x00f42400
 8009154:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009158:	4b3d      	ldr	r3, [pc, #244]	@ (8009250 <HAL_RCC_GetSysClockFreq+0x458>)
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	099b      	lsrs	r3, r3, #6
 800915e:	2200      	movs	r2, #0
 8009160:	4618      	mov	r0, r3
 8009162:	4611      	mov	r1, r2
 8009164:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009168:	653b      	str	r3, [r7, #80]	@ 0x50
 800916a:	2300      	movs	r3, #0
 800916c:	657b      	str	r3, [r7, #84]	@ 0x54
 800916e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009172:	4642      	mov	r2, r8
 8009174:	464b      	mov	r3, r9
 8009176:	f04f 0000 	mov.w	r0, #0
 800917a:	f04f 0100 	mov.w	r1, #0
 800917e:	0159      	lsls	r1, r3, #5
 8009180:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009184:	0150      	lsls	r0, r2, #5
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4641      	mov	r1, r8
 800918c:	1a51      	subs	r1, r2, r1
 800918e:	60b9      	str	r1, [r7, #8]
 8009190:	4649      	mov	r1, r9
 8009192:	eb63 0301 	sbc.w	r3, r3, r1
 8009196:	60fb      	str	r3, [r7, #12]
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80091a4:	4659      	mov	r1, fp
 80091a6:	018b      	lsls	r3, r1, #6
 80091a8:	4651      	mov	r1, sl
 80091aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091ae:	4651      	mov	r1, sl
 80091b0:	018a      	lsls	r2, r1, #6
 80091b2:	4651      	mov	r1, sl
 80091b4:	1a54      	subs	r4, r2, r1
 80091b6:	4659      	mov	r1, fp
 80091b8:	eb63 0501 	sbc.w	r5, r3, r1
 80091bc:	f04f 0200 	mov.w	r2, #0
 80091c0:	f04f 0300 	mov.w	r3, #0
 80091c4:	00eb      	lsls	r3, r5, #3
 80091c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091ca:	00e2      	lsls	r2, r4, #3
 80091cc:	4614      	mov	r4, r2
 80091ce:	461d      	mov	r5, r3
 80091d0:	4643      	mov	r3, r8
 80091d2:	18e3      	adds	r3, r4, r3
 80091d4:	603b      	str	r3, [r7, #0]
 80091d6:	464b      	mov	r3, r9
 80091d8:	eb45 0303 	adc.w	r3, r5, r3
 80091dc:	607b      	str	r3, [r7, #4]
 80091de:	f04f 0200 	mov.w	r2, #0
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091ea:	4629      	mov	r1, r5
 80091ec:	028b      	lsls	r3, r1, #10
 80091ee:	4621      	mov	r1, r4
 80091f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091f4:	4621      	mov	r1, r4
 80091f6:	028a      	lsls	r2, r1, #10
 80091f8:	4610      	mov	r0, r2
 80091fa:	4619      	mov	r1, r3
 80091fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009200:	2200      	movs	r2, #0
 8009202:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009204:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009206:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800920a:	f7f7 febb 	bl	8000f84 <__aeabi_uldivmod>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4613      	mov	r3, r2
 8009214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8009218:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <HAL_RCC_GetSysClockFreq+0x458>)
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	0f1b      	lsrs	r3, r3, #28
 800921e:	f003 0307 	and.w	r3, r3, #7
 8009222:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8009226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800922a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800922e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009236:	e003      	b.n	8009240 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009238:	4b06      	ldr	r3, [pc, #24]	@ (8009254 <HAL_RCC_GetSysClockFreq+0x45c>)
 800923a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800923e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009240:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009244:	4618      	mov	r0, r3
 8009246:	37b8      	adds	r7, #184	@ 0xb8
 8009248:	46bd      	mov	sp, r7
 800924a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800924e:	bf00      	nop
 8009250:	40023800 	.word	0x40023800
 8009254:	00f42400 	.word	0x00f42400

08009258 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b086      	sub	sp, #24
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	e28d      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0301 	and.w	r3, r3, #1
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 8083 	beq.w	800937e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009278:	4b94      	ldr	r3, [pc, #592]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f003 030c 	and.w	r3, r3, #12
 8009280:	2b04      	cmp	r3, #4
 8009282:	d019      	beq.n	80092b8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009284:	4b91      	ldr	r3, [pc, #580]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009286:	689b      	ldr	r3, [r3, #8]
 8009288:	f003 030c 	and.w	r3, r3, #12
        || \
 800928c:	2b08      	cmp	r3, #8
 800928e:	d106      	bne.n	800929e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009290:	4b8e      	ldr	r3, [pc, #568]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009298:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800929c:	d00c      	beq.n	80092b8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800929e:	4b8b      	ldr	r3, [pc, #556]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80092a6:	2b0c      	cmp	r3, #12
 80092a8:	d112      	bne.n	80092d0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80092aa:	4b88      	ldr	r3, [pc, #544]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80092b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80092b6:	d10b      	bne.n	80092d0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092b8:	4b84      	ldr	r3, [pc, #528]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d05b      	beq.n	800937c <HAL_RCC_OscConfig+0x124>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d157      	bne.n	800937c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e25a      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80092d8:	d106      	bne.n	80092e8 <HAL_RCC_OscConfig+0x90>
 80092da:	4b7c      	ldr	r3, [pc, #496]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a7b      	ldr	r2, [pc, #492]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80092e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092e4:	6013      	str	r3, [r2, #0]
 80092e6:	e01d      	b.n	8009324 <HAL_RCC_OscConfig+0xcc>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80092f0:	d10c      	bne.n	800930c <HAL_RCC_OscConfig+0xb4>
 80092f2:	4b76      	ldr	r3, [pc, #472]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a75      	ldr	r2, [pc, #468]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80092f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	4b73      	ldr	r3, [pc, #460]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a72      	ldr	r2, [pc, #456]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	e00b      	b.n	8009324 <HAL_RCC_OscConfig+0xcc>
 800930c:	4b6f      	ldr	r3, [pc, #444]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a6e      	ldr	r2, [pc, #440]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009316:	6013      	str	r3, [r2, #0]
 8009318:	4b6c      	ldr	r3, [pc, #432]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a6b      	ldr	r2, [pc, #428]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 800931e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d013      	beq.n	8009354 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800932c:	f7fc ff58 	bl	80061e0 <HAL_GetTick>
 8009330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009332:	e008      	b.n	8009346 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009334:	f7fc ff54 	bl	80061e0 <HAL_GetTick>
 8009338:	4602      	mov	r2, r0
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	2b64      	cmp	r3, #100	@ 0x64
 8009340:	d901      	bls.n	8009346 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e21f      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009346:	4b61      	ldr	r3, [pc, #388]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0f0      	beq.n	8009334 <HAL_RCC_OscConfig+0xdc>
 8009352:	e014      	b.n	800937e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009354:	f7fc ff44 	bl	80061e0 <HAL_GetTick>
 8009358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800935a:	e008      	b.n	800936e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800935c:	f7fc ff40 	bl	80061e0 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b64      	cmp	r3, #100	@ 0x64
 8009368:	d901      	bls.n	800936e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800936a:	2303      	movs	r3, #3
 800936c:	e20b      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800936e:	4b57      	ldr	r3, [pc, #348]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1f0      	bne.n	800935c <HAL_RCC_OscConfig+0x104>
 800937a:	e000      	b.n	800937e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800937c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d06f      	beq.n	800946a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800938a:	4b50      	ldr	r3, [pc, #320]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 030c 	and.w	r3, r3, #12
 8009392:	2b00      	cmp	r3, #0
 8009394:	d017      	beq.n	80093c6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009396:	4b4d      	ldr	r3, [pc, #308]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	f003 030c 	and.w	r3, r3, #12
        || \
 800939e:	2b08      	cmp	r3, #8
 80093a0:	d105      	bne.n	80093ae <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80093a2:	4b4a      	ldr	r3, [pc, #296]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00b      	beq.n	80093c6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093ae:	4b47      	ldr	r3, [pc, #284]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80093b6:	2b0c      	cmp	r3, #12
 80093b8:	d11c      	bne.n	80093f4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80093ba:	4b44      	ldr	r3, [pc, #272]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d116      	bne.n	80093f4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093c6:	4b41      	ldr	r3, [pc, #260]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f003 0302 	and.w	r3, r3, #2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d005      	beq.n	80093de <HAL_RCC_OscConfig+0x186>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	68db      	ldr	r3, [r3, #12]
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d001      	beq.n	80093de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	e1d3      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093de:	4b3b      	ldr	r3, [pc, #236]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	4937      	ldr	r1, [pc, #220]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80093f2:	e03a      	b.n	800946a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d020      	beq.n	800943e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80093fc:	4b34      	ldr	r3, [pc, #208]	@ (80094d0 <HAL_RCC_OscConfig+0x278>)
 80093fe:	2201      	movs	r2, #1
 8009400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009402:	f7fc feed 	bl	80061e0 <HAL_GetTick>
 8009406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009408:	e008      	b.n	800941c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800940a:	f7fc fee9 	bl	80061e0 <HAL_GetTick>
 800940e:	4602      	mov	r2, r0
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	2b02      	cmp	r3, #2
 8009416:	d901      	bls.n	800941c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e1b4      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800941c:	4b2b      	ldr	r3, [pc, #172]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0302 	and.w	r3, r3, #2
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0f0      	beq.n	800940a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009428:	4b28      	ldr	r3, [pc, #160]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	4925      	ldr	r1, [pc, #148]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009438:	4313      	orrs	r3, r2
 800943a:	600b      	str	r3, [r1, #0]
 800943c:	e015      	b.n	800946a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800943e:	4b24      	ldr	r3, [pc, #144]	@ (80094d0 <HAL_RCC_OscConfig+0x278>)
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009444:	f7fc fecc 	bl	80061e0 <HAL_GetTick>
 8009448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800944a:	e008      	b.n	800945e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800944c:	f7fc fec8 	bl	80061e0 <HAL_GetTick>
 8009450:	4602      	mov	r2, r0
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	2b02      	cmp	r3, #2
 8009458:	d901      	bls.n	800945e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e193      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800945e:	4b1b      	ldr	r3, [pc, #108]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1f0      	bne.n	800944c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b00      	cmp	r3, #0
 8009474:	d036      	beq.n	80094e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d016      	beq.n	80094ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800947e:	4b15      	ldr	r3, [pc, #84]	@ (80094d4 <HAL_RCC_OscConfig+0x27c>)
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009484:	f7fc feac 	bl	80061e0 <HAL_GetTick>
 8009488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800948a:	e008      	b.n	800949e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800948c:	f7fc fea8 	bl	80061e0 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	2b02      	cmp	r3, #2
 8009498:	d901      	bls.n	800949e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e173      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800949e:	4b0b      	ldr	r3, [pc, #44]	@ (80094cc <HAL_RCC_OscConfig+0x274>)
 80094a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094a2:	f003 0302 	and.w	r3, r3, #2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d0f0      	beq.n	800948c <HAL_RCC_OscConfig+0x234>
 80094aa:	e01b      	b.n	80094e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80094ac:	4b09      	ldr	r3, [pc, #36]	@ (80094d4 <HAL_RCC_OscConfig+0x27c>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094b2:	f7fc fe95 	bl	80061e0 <HAL_GetTick>
 80094b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094b8:	e00e      	b.n	80094d8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80094ba:	f7fc fe91 	bl	80061e0 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d907      	bls.n	80094d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e15c      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
 80094cc:	40023800 	.word	0x40023800
 80094d0:	42470000 	.word	0x42470000
 80094d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80094d8:	4b8a      	ldr	r3, [pc, #552]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 80094da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80094dc:	f003 0302 	and.w	r3, r3, #2
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1ea      	bne.n	80094ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 8097 	beq.w	8009620 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094f2:	2300      	movs	r3, #0
 80094f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094f6:	4b83      	ldr	r3, [pc, #524]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 80094f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10f      	bne.n	8009522 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]
 8009506:	4b7f      	ldr	r3, [pc, #508]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800950a:	4a7e      	ldr	r2, [pc, #504]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 800950c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009510:	6413      	str	r3, [r2, #64]	@ 0x40
 8009512:	4b7c      	ldr	r3, [pc, #496]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800951a:	60bb      	str	r3, [r7, #8]
 800951c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800951e:	2301      	movs	r3, #1
 8009520:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009522:	4b79      	ldr	r3, [pc, #484]	@ (8009708 <HAL_RCC_OscConfig+0x4b0>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800952a:	2b00      	cmp	r3, #0
 800952c:	d118      	bne.n	8009560 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800952e:	4b76      	ldr	r3, [pc, #472]	@ (8009708 <HAL_RCC_OscConfig+0x4b0>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4a75      	ldr	r2, [pc, #468]	@ (8009708 <HAL_RCC_OscConfig+0x4b0>)
 8009534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800953a:	f7fc fe51 	bl	80061e0 <HAL_GetTick>
 800953e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009540:	e008      	b.n	8009554 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009542:	f7fc fe4d 	bl	80061e0 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	693b      	ldr	r3, [r7, #16]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	2b02      	cmp	r3, #2
 800954e:	d901      	bls.n	8009554 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009550:	2303      	movs	r3, #3
 8009552:	e118      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009554:	4b6c      	ldr	r3, [pc, #432]	@ (8009708 <HAL_RCC_OscConfig+0x4b0>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800955c:	2b00      	cmp	r3, #0
 800955e:	d0f0      	beq.n	8009542 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	2b01      	cmp	r3, #1
 8009566:	d106      	bne.n	8009576 <HAL_RCC_OscConfig+0x31e>
 8009568:	4b66      	ldr	r3, [pc, #408]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 800956a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800956c:	4a65      	ldr	r2, [pc, #404]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 800956e:	f043 0301 	orr.w	r3, r3, #1
 8009572:	6713      	str	r3, [r2, #112]	@ 0x70
 8009574:	e01c      	b.n	80095b0 <HAL_RCC_OscConfig+0x358>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	2b05      	cmp	r3, #5
 800957c:	d10c      	bne.n	8009598 <HAL_RCC_OscConfig+0x340>
 800957e:	4b61      	ldr	r3, [pc, #388]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009582:	4a60      	ldr	r2, [pc, #384]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009584:	f043 0304 	orr.w	r3, r3, #4
 8009588:	6713      	str	r3, [r2, #112]	@ 0x70
 800958a:	4b5e      	ldr	r3, [pc, #376]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 800958c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800958e:	4a5d      	ldr	r2, [pc, #372]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009590:	f043 0301 	orr.w	r3, r3, #1
 8009594:	6713      	str	r3, [r2, #112]	@ 0x70
 8009596:	e00b      	b.n	80095b0 <HAL_RCC_OscConfig+0x358>
 8009598:	4b5a      	ldr	r3, [pc, #360]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 800959a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800959c:	4a59      	ldr	r2, [pc, #356]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 800959e:	f023 0301 	bic.w	r3, r3, #1
 80095a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80095a4:	4b57      	ldr	r3, [pc, #348]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 80095a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a8:	4a56      	ldr	r2, [pc, #344]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 80095aa:	f023 0304 	bic.w	r3, r3, #4
 80095ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d015      	beq.n	80095e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095b8:	f7fc fe12 	bl	80061e0 <HAL_GetTick>
 80095bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095be:	e00a      	b.n	80095d6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095c0:	f7fc fe0e 	bl	80061e0 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d901      	bls.n	80095d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e0d7      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80095d6:	4b4b      	ldr	r3, [pc, #300]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 80095d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095da:	f003 0302 	and.w	r3, r3, #2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d0ee      	beq.n	80095c0 <HAL_RCC_OscConfig+0x368>
 80095e2:	e014      	b.n	800960e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095e4:	f7fc fdfc 	bl	80061e0 <HAL_GetTick>
 80095e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80095ea:	e00a      	b.n	8009602 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ec:	f7fc fdf8 	bl	80061e0 <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d901      	bls.n	8009602 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e0c1      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009602:	4b40      	ldr	r3, [pc, #256]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009606:	f003 0302 	and.w	r3, r3, #2
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1ee      	bne.n	80095ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	2b01      	cmp	r3, #1
 8009612:	d105      	bne.n	8009620 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009614:	4b3b      	ldr	r3, [pc, #236]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009618:	4a3a      	ldr	r2, [pc, #232]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 800961a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800961e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	2b00      	cmp	r3, #0
 8009626:	f000 80ad 	beq.w	8009784 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800962a:	4b36      	ldr	r3, [pc, #216]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f003 030c 	and.w	r3, r3, #12
 8009632:	2b08      	cmp	r3, #8
 8009634:	d060      	beq.n	80096f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	2b02      	cmp	r3, #2
 800963c:	d145      	bne.n	80096ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800963e:	4b33      	ldr	r3, [pc, #204]	@ (800970c <HAL_RCC_OscConfig+0x4b4>)
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009644:	f7fc fdcc 	bl	80061e0 <HAL_GetTick>
 8009648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800964a:	e008      	b.n	800965e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800964c:	f7fc fdc8 	bl	80061e0 <HAL_GetTick>
 8009650:	4602      	mov	r2, r0
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	1ad3      	subs	r3, r2, r3
 8009656:	2b02      	cmp	r3, #2
 8009658:	d901      	bls.n	800965e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e093      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800965e:	4b29      	ldr	r3, [pc, #164]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d1f0      	bne.n	800964c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	69da      	ldr	r2, [r3, #28]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a1b      	ldr	r3, [r3, #32]
 8009672:	431a      	orrs	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009678:	019b      	lsls	r3, r3, #6
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009680:	085b      	lsrs	r3, r3, #1
 8009682:	3b01      	subs	r3, #1
 8009684:	041b      	lsls	r3, r3, #16
 8009686:	431a      	orrs	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968c:	061b      	lsls	r3, r3, #24
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009694:	071b      	lsls	r3, r3, #28
 8009696:	491b      	ldr	r1, [pc, #108]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 8009698:	4313      	orrs	r3, r2
 800969a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800969c:	4b1b      	ldr	r3, [pc, #108]	@ (800970c <HAL_RCC_OscConfig+0x4b4>)
 800969e:	2201      	movs	r2, #1
 80096a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096a2:	f7fc fd9d 	bl	80061e0 <HAL_GetTick>
 80096a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096a8:	e008      	b.n	80096bc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096aa:	f7fc fd99 	bl	80061e0 <HAL_GetTick>
 80096ae:	4602      	mov	r2, r0
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	1ad3      	subs	r3, r2, r3
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d901      	bls.n	80096bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e064      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096bc:	4b11      	ldr	r3, [pc, #68]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d0f0      	beq.n	80096aa <HAL_RCC_OscConfig+0x452>
 80096c8:	e05c      	b.n	8009784 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80096ca:	4b10      	ldr	r3, [pc, #64]	@ (800970c <HAL_RCC_OscConfig+0x4b4>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096d0:	f7fc fd86 	bl	80061e0 <HAL_GetTick>
 80096d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096d6:	e008      	b.n	80096ea <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096d8:	f7fc fd82 	bl	80061e0 <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d901      	bls.n	80096ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80096e6:	2303      	movs	r3, #3
 80096e8:	e04d      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80096ea:	4b06      	ldr	r3, [pc, #24]	@ (8009704 <HAL_RCC_OscConfig+0x4ac>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1f0      	bne.n	80096d8 <HAL_RCC_OscConfig+0x480>
 80096f6:	e045      	b.n	8009784 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d107      	bne.n	8009710 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e040      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
 8009704:	40023800 	.word	0x40023800
 8009708:	40007000 	.word	0x40007000
 800970c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009710:	4b1f      	ldr	r3, [pc, #124]	@ (8009790 <HAL_RCC_OscConfig+0x538>)
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	2b01      	cmp	r3, #1
 800971c:	d030      	beq.n	8009780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009728:	429a      	cmp	r2, r3
 800972a:	d129      	bne.n	8009780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009736:	429a      	cmp	r2, r3
 8009738:	d122      	bne.n	8009780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009740:	4013      	ands	r3, r2
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009746:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009748:	4293      	cmp	r3, r2
 800974a:	d119      	bne.n	8009780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009756:	085b      	lsrs	r3, r3, #1
 8009758:	3b01      	subs	r3, #1
 800975a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800975c:	429a      	cmp	r2, r3
 800975e:	d10f      	bne.n	8009780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800976c:	429a      	cmp	r2, r3
 800976e:	d107      	bne.n	8009780 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800977c:	429a      	cmp	r2, r3
 800977e:	d001      	beq.n	8009784 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e000      	b.n	8009786 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	40023800 	.word	0x40023800

08009794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d101      	bne.n	80097a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e041      	b.n	800982a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7fc f942 	bl	8005a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2202      	movs	r2, #2
 80097c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	3304      	adds	r3, #4
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f000 fa7e 	bl	8009cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
	...

08009834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b085      	sub	sp, #20
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b01      	cmp	r3, #1
 8009846:	d001      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e04e      	b.n	80098ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0201 	orr.w	r2, r2, #1
 8009862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a23      	ldr	r2, [pc, #140]	@ (80098f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d022      	beq.n	80098b4 <HAL_TIM_Base_Start_IT+0x80>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009876:	d01d      	beq.n	80098b4 <HAL_TIM_Base_Start_IT+0x80>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a1f      	ldr	r2, [pc, #124]	@ (80098fc <HAL_TIM_Base_Start_IT+0xc8>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d018      	beq.n	80098b4 <HAL_TIM_Base_Start_IT+0x80>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a1e      	ldr	r2, [pc, #120]	@ (8009900 <HAL_TIM_Base_Start_IT+0xcc>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d013      	beq.n	80098b4 <HAL_TIM_Base_Start_IT+0x80>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a1c      	ldr	r2, [pc, #112]	@ (8009904 <HAL_TIM_Base_Start_IT+0xd0>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d00e      	beq.n	80098b4 <HAL_TIM_Base_Start_IT+0x80>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a1b      	ldr	r2, [pc, #108]	@ (8009908 <HAL_TIM_Base_Start_IT+0xd4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d009      	beq.n	80098b4 <HAL_TIM_Base_Start_IT+0x80>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a19      	ldr	r2, [pc, #100]	@ (800990c <HAL_TIM_Base_Start_IT+0xd8>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d004      	beq.n	80098b4 <HAL_TIM_Base_Start_IT+0x80>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a18      	ldr	r2, [pc, #96]	@ (8009910 <HAL_TIM_Base_Start_IT+0xdc>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d111      	bne.n	80098d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	689b      	ldr	r3, [r3, #8]
 80098ba:	f003 0307 	and.w	r3, r3, #7
 80098be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b06      	cmp	r3, #6
 80098c4:	d010      	beq.n	80098e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f042 0201 	orr.w	r2, r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d6:	e007      	b.n	80098e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f042 0201 	orr.w	r2, r2, #1
 80098e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	40010000 	.word	0x40010000
 80098fc:	40000400 	.word	0x40000400
 8009900:	40000800 	.word	0x40000800
 8009904:	40000c00 	.word	0x40000c00
 8009908:	40010400 	.word	0x40010400
 800990c:	40014000 	.word	0x40014000
 8009910:	40001800 	.word	0x40001800

08009914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	f003 0302 	and.w	r3, r3, #2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d020      	beq.n	8009978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f003 0302 	and.w	r3, r3, #2
 800993c:	2b00      	cmp	r3, #0
 800993e:	d01b      	beq.n	8009978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f06f 0202 	mvn.w	r2, #2
 8009948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	699b      	ldr	r3, [r3, #24]
 8009956:	f003 0303 	and.w	r3, r3, #3
 800995a:	2b00      	cmp	r3, #0
 800995c:	d003      	beq.n	8009966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f999 	bl	8009c96 <HAL_TIM_IC_CaptureCallback>
 8009964:	e005      	b.n	8009972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 f98b 	bl	8009c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 f99c 	bl	8009caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	f003 0304 	and.w	r3, r3, #4
 800997e:	2b00      	cmp	r3, #0
 8009980:	d020      	beq.n	80099c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f003 0304 	and.w	r3, r3, #4
 8009988:	2b00      	cmp	r3, #0
 800998a:	d01b      	beq.n	80099c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f06f 0204 	mvn.w	r2, #4
 8009994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2202      	movs	r2, #2
 800999a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f973 	bl	8009c96 <HAL_TIM_IC_CaptureCallback>
 80099b0:	e005      	b.n	80099be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f965 	bl	8009c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f976 	bl	8009caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	f003 0308 	and.w	r3, r3, #8
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d020      	beq.n	8009a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f003 0308 	and.w	r3, r3, #8
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01b      	beq.n	8009a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f06f 0208 	mvn.w	r2, #8
 80099e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2204      	movs	r2, #4
 80099e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	f003 0303 	and.w	r3, r3, #3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d003      	beq.n	80099fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f94d 	bl	8009c96 <HAL_TIM_IC_CaptureCallback>
 80099fc:	e005      	b.n	8009a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f93f 	bl	8009c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f950 	bl	8009caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f003 0310 	and.w	r3, r3, #16
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d020      	beq.n	8009a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f003 0310 	and.w	r3, r3, #16
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d01b      	beq.n	8009a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f06f 0210 	mvn.w	r2, #16
 8009a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2208      	movs	r2, #8
 8009a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d003      	beq.n	8009a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f927 	bl	8009c96 <HAL_TIM_IC_CaptureCallback>
 8009a48:	e005      	b.n	8009a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 f919 	bl	8009c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 f92a 	bl	8009caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00c      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d007      	beq.n	8009a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f06f 0201 	mvn.w	r2, #1
 8009a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7fa f8c0 	bl	8003c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00c      	beq.n	8009aa4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d007      	beq.n	8009aa4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fade 	bl	800a060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00c      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d007      	beq.n	8009ac8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 f8fb 	bl	8009cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f003 0320 	and.w	r3, r3, #32
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00c      	beq.n	8009aec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d007      	beq.n	8009aec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f06f 0220 	mvn.w	r2, #32
 8009ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fab0 	bl	800a04c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009aec:	bf00      	nop
 8009aee:	3710      	adds	r7, #16
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d101      	bne.n	8009b10 <HAL_TIM_ConfigClockSource+0x1c>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	e0b4      	b.n	8009c7a <HAL_TIM_ConfigClockSource+0x186>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	689b      	ldr	r3, [r3, #8]
 8009b26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009b2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b48:	d03e      	beq.n	8009bc8 <HAL_TIM_ConfigClockSource+0xd4>
 8009b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009b4e:	f200 8087 	bhi.w	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
 8009b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b56:	f000 8086 	beq.w	8009c66 <HAL_TIM_ConfigClockSource+0x172>
 8009b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b5e:	d87f      	bhi.n	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
 8009b60:	2b70      	cmp	r3, #112	@ 0x70
 8009b62:	d01a      	beq.n	8009b9a <HAL_TIM_ConfigClockSource+0xa6>
 8009b64:	2b70      	cmp	r3, #112	@ 0x70
 8009b66:	d87b      	bhi.n	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
 8009b68:	2b60      	cmp	r3, #96	@ 0x60
 8009b6a:	d050      	beq.n	8009c0e <HAL_TIM_ConfigClockSource+0x11a>
 8009b6c:	2b60      	cmp	r3, #96	@ 0x60
 8009b6e:	d877      	bhi.n	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
 8009b70:	2b50      	cmp	r3, #80	@ 0x50
 8009b72:	d03c      	beq.n	8009bee <HAL_TIM_ConfigClockSource+0xfa>
 8009b74:	2b50      	cmp	r3, #80	@ 0x50
 8009b76:	d873      	bhi.n	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
 8009b78:	2b40      	cmp	r3, #64	@ 0x40
 8009b7a:	d058      	beq.n	8009c2e <HAL_TIM_ConfigClockSource+0x13a>
 8009b7c:	2b40      	cmp	r3, #64	@ 0x40
 8009b7e:	d86f      	bhi.n	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
 8009b80:	2b30      	cmp	r3, #48	@ 0x30
 8009b82:	d064      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x15a>
 8009b84:	2b30      	cmp	r3, #48	@ 0x30
 8009b86:	d86b      	bhi.n	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
 8009b88:	2b20      	cmp	r3, #32
 8009b8a:	d060      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x15a>
 8009b8c:	2b20      	cmp	r3, #32
 8009b8e:	d867      	bhi.n	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d05c      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x15a>
 8009b94:	2b10      	cmp	r3, #16
 8009b96:	d05a      	beq.n	8009c4e <HAL_TIM_ConfigClockSource+0x15a>
 8009b98:	e062      	b.n	8009c60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009baa:	f000 f9b3 	bl	8009f14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009bbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	609a      	str	r2, [r3, #8]
      break;
 8009bc6:	e04f      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009bd8:	f000 f99c 	bl	8009f14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689a      	ldr	r2, [r3, #8]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009bea:	609a      	str	r2, [r3, #8]
      break;
 8009bec:	e03c      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	f000 f910 	bl	8009e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2150      	movs	r1, #80	@ 0x50
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f969 	bl	8009ede <TIM_ITRx_SetConfig>
      break;
 8009c0c:	e02c      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f000 f92f 	bl	8009e7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	2160      	movs	r1, #96	@ 0x60
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f959 	bl	8009ede <TIM_ITRx_SetConfig>
      break;
 8009c2c:	e01c      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f000 f8f0 	bl	8009e20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2140      	movs	r1, #64	@ 0x40
 8009c46:	4618      	mov	r0, r3
 8009c48:	f000 f949 	bl	8009ede <TIM_ITRx_SetConfig>
      break;
 8009c4c:	e00c      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4619      	mov	r1, r3
 8009c58:	4610      	mov	r0, r2
 8009c5a:	f000 f940 	bl	8009ede <TIM_ITRx_SetConfig>
      break;
 8009c5e:	e003      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	73fb      	strb	r3, [r7, #15]
      break;
 8009c64:	e000      	b.n	8009c68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009c66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3710      	adds	r7, #16
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c82:	b480      	push	{r7}
 8009c84:	b083      	sub	sp, #12
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c8a:	bf00      	nop
 8009c8c:	370c      	adds	r7, #12
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c9e:	bf00      	nop
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b083      	sub	sp, #12
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009cb2:	bf00      	nop
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009cbe:	b480      	push	{r7}
 8009cc0:	b083      	sub	sp, #12
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009cc6:	bf00      	nop
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
	...

08009cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a43      	ldr	r2, [pc, #268]	@ (8009df4 <TIM_Base_SetConfig+0x120>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d013      	beq.n	8009d14 <TIM_Base_SetConfig+0x40>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf2:	d00f      	beq.n	8009d14 <TIM_Base_SetConfig+0x40>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a40      	ldr	r2, [pc, #256]	@ (8009df8 <TIM_Base_SetConfig+0x124>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d00b      	beq.n	8009d14 <TIM_Base_SetConfig+0x40>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8009dfc <TIM_Base_SetConfig+0x128>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d007      	beq.n	8009d14 <TIM_Base_SetConfig+0x40>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a3e      	ldr	r2, [pc, #248]	@ (8009e00 <TIM_Base_SetConfig+0x12c>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d003      	beq.n	8009d14 <TIM_Base_SetConfig+0x40>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8009e04 <TIM_Base_SetConfig+0x130>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d108      	bne.n	8009d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4a32      	ldr	r2, [pc, #200]	@ (8009df4 <TIM_Base_SetConfig+0x120>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d02b      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d34:	d027      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a2f      	ldr	r2, [pc, #188]	@ (8009df8 <TIM_Base_SetConfig+0x124>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d023      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a2e      	ldr	r2, [pc, #184]	@ (8009dfc <TIM_Base_SetConfig+0x128>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d01f      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a2d      	ldr	r2, [pc, #180]	@ (8009e00 <TIM_Base_SetConfig+0x12c>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d01b      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a2c      	ldr	r2, [pc, #176]	@ (8009e04 <TIM_Base_SetConfig+0x130>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d017      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a2b      	ldr	r2, [pc, #172]	@ (8009e08 <TIM_Base_SetConfig+0x134>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d013      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a2a      	ldr	r2, [pc, #168]	@ (8009e0c <TIM_Base_SetConfig+0x138>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d00f      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a29      	ldr	r2, [pc, #164]	@ (8009e10 <TIM_Base_SetConfig+0x13c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00b      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a28      	ldr	r2, [pc, #160]	@ (8009e14 <TIM_Base_SetConfig+0x140>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d007      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a27      	ldr	r2, [pc, #156]	@ (8009e18 <TIM_Base_SetConfig+0x144>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d003      	beq.n	8009d86 <TIM_Base_SetConfig+0xb2>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a26      	ldr	r2, [pc, #152]	@ (8009e1c <TIM_Base_SetConfig+0x148>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d108      	bne.n	8009d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	68fa      	ldr	r2, [r7, #12]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	689a      	ldr	r2, [r3, #8]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a0e      	ldr	r2, [pc, #56]	@ (8009df4 <TIM_Base_SetConfig+0x120>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d003      	beq.n	8009dc6 <TIM_Base_SetConfig+0xf2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a10      	ldr	r2, [pc, #64]	@ (8009e04 <TIM_Base_SetConfig+0x130>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d103      	bne.n	8009dce <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	691a      	ldr	r2, [r3, #16]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f043 0204 	orr.w	r2, r3, #4
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68fa      	ldr	r2, [r7, #12]
 8009de4:	601a      	str	r2, [r3, #0]
}
 8009de6:	bf00      	nop
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	40010000 	.word	0x40010000
 8009df8:	40000400 	.word	0x40000400
 8009dfc:	40000800 	.word	0x40000800
 8009e00:	40000c00 	.word	0x40000c00
 8009e04:	40010400 	.word	0x40010400
 8009e08:	40014000 	.word	0x40014000
 8009e0c:	40014400 	.word	0x40014400
 8009e10:	40014800 	.word	0x40014800
 8009e14:	40001800 	.word	0x40001800
 8009e18:	40001c00 	.word	0x40001c00
 8009e1c:	40002000 	.word	0x40002000

08009e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b087      	sub	sp, #28
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6a1b      	ldr	r3, [r3, #32]
 8009e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6a1b      	ldr	r3, [r3, #32]
 8009e36:	f023 0201 	bic.w	r2, r3, #1
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	693a      	ldr	r2, [r7, #16]
 8009e52:	4313      	orrs	r3, r2
 8009e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	f023 030a 	bic.w	r3, r3, #10
 8009e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009e5e:	697a      	ldr	r2, [r7, #20]
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	4313      	orrs	r3, r2
 8009e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	621a      	str	r2, [r3, #32]
}
 8009e72:	bf00      	nop
 8009e74:	371c      	adds	r7, #28
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b087      	sub	sp, #28
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	60f8      	str	r0, [r7, #12]
 8009e86:	60b9      	str	r1, [r7, #8]
 8009e88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	f023 0210 	bic.w	r2, r3, #16
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	699b      	ldr	r3, [r3, #24]
 8009ea0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	031b      	lsls	r3, r3, #12
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009eba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	011b      	lsls	r3, r3, #4
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	621a      	str	r2, [r3, #32]
}
 8009ed2:	bf00      	nop
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b085      	sub	sp, #20
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
 8009ee6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ef4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009ef6:	683a      	ldr	r2, [r7, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	f043 0307 	orr.w	r3, r3, #7
 8009f00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68fa      	ldr	r2, [r7, #12]
 8009f06:	609a      	str	r2, [r3, #8]
}
 8009f08:	bf00      	nop
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b087      	sub	sp, #28
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	021a      	lsls	r2, r3, #8
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	697a      	ldr	r2, [r7, #20]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	697a      	ldr	r2, [r7, #20]
 8009f46:	609a      	str	r2, [r3, #8]
}
 8009f48:	bf00      	nop
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d101      	bne.n	8009f6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009f68:	2302      	movs	r3, #2
 8009f6a:	e05a      	b.n	800a022 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4a21      	ldr	r2, [pc, #132]	@ (800a030 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d022      	beq.n	8009ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fb8:	d01d      	beq.n	8009ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a1d      	ldr	r2, [pc, #116]	@ (800a034 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d018      	beq.n	8009ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a1b      	ldr	r2, [pc, #108]	@ (800a038 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d013      	beq.n	8009ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800a03c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d00e      	beq.n	8009ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a18      	ldr	r2, [pc, #96]	@ (800a040 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d009      	beq.n	8009ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a17      	ldr	r2, [pc, #92]	@ (800a044 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d004      	beq.n	8009ff6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a15      	ldr	r2, [pc, #84]	@ (800a048 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d10c      	bne.n	800a010 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ffc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	68ba      	ldr	r2, [r7, #8]
 800a004:	4313      	orrs	r3, r2
 800a006:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	40010000 	.word	0x40010000
 800a034:	40000400 	.word	0x40000400
 800a038:	40000800 	.word	0x40000800
 800a03c:	40000c00 	.word	0x40000c00
 800a040:	40010400 	.word	0x40010400
 800a044:	40014000 	.word	0x40014000
 800a048:	40001800 	.word	0x40001800

0800a04c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a054:	bf00      	nop
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a068:	bf00      	nop
 800a06a:	370c      	adds	r7, #12
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d101      	bne.n	800a086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a082:	2301      	movs	r3, #1
 800a084:	e042      	b.n	800a10c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d106      	bne.n	800a0a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7fb fcf8 	bl	8005a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2224      	movs	r2, #36	@ 0x24
 800a0a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68da      	ldr	r2, [r3, #12]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a0b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f001 f86f 	bl	800b19c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	691a      	ldr	r2, [r3, #16]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a0cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	695a      	ldr	r2, [r3, #20]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a0dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68da      	ldr	r2, [r3, #12]
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a0ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a10a:	2300      	movs	r3, #0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3708      	adds	r7, #8
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d101      	bne.n	800a126 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a122:	2301      	movs	r3, #1
 800a124:	e024      	b.n	800a170 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2224      	movs	r2, #36	@ 0x24
 800a12a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68da      	ldr	r2, [r3, #12]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a13c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f7fb fe06 	bl	8005d50 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3708      	adds	r7, #8
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b08a      	sub	sp, #40	@ 0x28
 800a17c:	af02      	add	r7, sp, #8
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	603b      	str	r3, [r7, #0]
 800a184:	4613      	mov	r3, r2
 800a186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b20      	cmp	r3, #32
 800a196:	d175      	bne.n	800a284 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d002      	beq.n	800a1a4 <HAL_UART_Transmit+0x2c>
 800a19e:	88fb      	ldrh	r3, [r7, #6]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e06e      	b.n	800a286 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2221      	movs	r2, #33	@ 0x21
 800a1b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1b6:	f7fc f813 	bl	80061e0 <HAL_GetTick>
 800a1ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	88fa      	ldrh	r2, [r7, #6]
 800a1c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	88fa      	ldrh	r2, [r7, #6]
 800a1c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	689b      	ldr	r3, [r3, #8]
 800a1cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d0:	d108      	bne.n	800a1e4 <HAL_UART_Transmit+0x6c>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d104      	bne.n	800a1e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	61bb      	str	r3, [r7, #24]
 800a1e2:	e003      	b.n	800a1ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a1ec:	e02e      	b.n	800a24c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	2180      	movs	r1, #128	@ 0x80
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f000 fd0e 	bl	800ac1a <UART_WaitOnFlagUntilTimeout>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2220      	movs	r2, #32
 800a208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e03a      	b.n	800a286 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10b      	bne.n	800a22e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a216:	69bb      	ldr	r3, [r7, #24]
 800a218:	881b      	ldrh	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a226:	69bb      	ldr	r3, [r7, #24]
 800a228:	3302      	adds	r3, #2
 800a22a:	61bb      	str	r3, [r7, #24]
 800a22c:	e007      	b.n	800a23e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	781a      	ldrb	r2, [r3, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	3301      	adds	r3, #1
 800a23c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a242:	b29b      	uxth	r3, r3
 800a244:	3b01      	subs	r3, #1
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a250:	b29b      	uxth	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1cb      	bne.n	800a1ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2200      	movs	r2, #0
 800a25e:	2140      	movs	r1, #64	@ 0x40
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f000 fcda 	bl	800ac1a <UART_WaitOnFlagUntilTimeout>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d005      	beq.n	800a278 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2220      	movs	r2, #32
 800a270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a274:	2303      	movs	r3, #3
 800a276:	e006      	b.n	800a286 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a280:	2300      	movs	r3, #0
 800a282:	e000      	b.n	800a286 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a284:	2302      	movs	r3, #2
  }
}
 800a286:	4618      	mov	r0, r3
 800a288:	3720      	adds	r7, #32
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
	...

0800a290 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08c      	sub	sp, #48	@ 0x30
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	4613      	mov	r3, r2
 800a29c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d162      	bne.n	800a370 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <HAL_UART_Transmit_DMA+0x26>
 800a2b0:	88fb      	ldrh	r3, [r7, #6]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e05b      	b.n	800a372 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	88fa      	ldrh	r2, [r7, #6]
 800a2c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	88fa      	ldrh	r2, [r7, #6]
 800a2ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2221      	movs	r2, #33	@ 0x21
 800a2d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2de:	4a27      	ldr	r2, [pc, #156]	@ (800a37c <HAL_UART_Transmit_DMA+0xec>)
 800a2e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e6:	4a26      	ldr	r2, [pc, #152]	@ (800a380 <HAL_UART_Transmit_DMA+0xf0>)
 800a2e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ee:	4a25      	ldr	r2, [pc, #148]	@ (800a384 <HAL_UART_Transmit_DMA+0xf4>)
 800a2f0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800a2fa:	f107 0308 	add.w	r3, r7, #8
 800a2fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a306:	6819      	ldr	r1, [r3, #0]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3304      	adds	r3, #4
 800a30e:	461a      	mov	r2, r3
 800a310:	88fb      	ldrh	r3, [r7, #6]
 800a312:	f7fc fdf5 	bl	8006f00 <HAL_DMA_Start_IT>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d008      	beq.n	800a32e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2210      	movs	r2, #16
 800a320:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2220      	movs	r2, #32
 800a326:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e021      	b.n	800a372 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a336:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	3314      	adds	r3, #20
 800a33e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	e853 3f00 	ldrex	r3, [r3]
 800a346:	617b      	str	r3, [r7, #20]
   return(result);
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a34e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	3314      	adds	r3, #20
 800a356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a358:	627a      	str	r2, [r7, #36]	@ 0x24
 800a35a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a35c:	6a39      	ldr	r1, [r7, #32]
 800a35e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a360:	e841 2300 	strex	r3, r2, [r1]
 800a364:	61fb      	str	r3, [r7, #28]
   return(result);
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d1e5      	bne.n	800a338 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	e000      	b.n	800a372 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800a370:	2302      	movs	r3, #2
  }
}
 800a372:	4618      	mov	r0, r3
 800a374:	3730      	adds	r7, #48	@ 0x30
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	0800a969 	.word	0x0800a969
 800a380:	0800aa03 	.word	0x0800aa03
 800a384:	0800ab87 	.word	0x0800ab87

0800a388 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	4613      	mov	r3, r2
 800a394:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a39c:	b2db      	uxtb	r3, r3
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d112      	bne.n	800a3c8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <HAL_UART_Receive_DMA+0x26>
 800a3a8:	88fb      	ldrh	r3, [r7, #6]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d101      	bne.n	800a3b2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e00b      	b.n	800a3ca <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a3b8:	88fb      	ldrh	r3, [r7, #6]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 fc84 	bl	800accc <UART_Start_Receive_DMA>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	e000      	b.n	800a3ca <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a3c8:	2302      	movs	r3, #2
  }
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b0ba      	sub	sp, #232	@ 0xe8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	695b      	ldr	r3, [r3, #20]
 800a3f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a400:	2300      	movs	r3, #0
 800a402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a40a:	f003 030f 	and.w	r3, r3, #15
 800a40e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a416:	2b00      	cmp	r3, #0
 800a418:	d10f      	bne.n	800a43a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a41e:	f003 0320 	and.w	r3, r3, #32
 800a422:	2b00      	cmp	r3, #0
 800a424:	d009      	beq.n	800a43a <HAL_UART_IRQHandler+0x66>
 800a426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a42a:	f003 0320 	and.w	r3, r3, #32
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d003      	beq.n	800a43a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fdf4 	bl	800b020 <UART_Receive_IT>
      return;
 800a438:	e273      	b.n	800a922 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a43a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 80de 	beq.w	800a600 <HAL_UART_IRQHandler+0x22c>
 800a444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d106      	bne.n	800a45e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a454:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f000 80d1 	beq.w	800a600 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00b      	beq.n	800a482 <HAL_UART_IRQHandler+0xae>
 800a46a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a46e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a472:	2b00      	cmp	r3, #0
 800a474:	d005      	beq.n	800a482 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a47a:	f043 0201 	orr.w	r2, r3, #1
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a486:	f003 0304 	and.w	r3, r3, #4
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00b      	beq.n	800a4a6 <HAL_UART_IRQHandler+0xd2>
 800a48e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a492:	f003 0301 	and.w	r3, r3, #1
 800a496:	2b00      	cmp	r3, #0
 800a498:	d005      	beq.n	800a4a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a49e:	f043 0202 	orr.w	r2, r3, #2
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a4a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00b      	beq.n	800a4ca <HAL_UART_IRQHandler+0xf6>
 800a4b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4b6:	f003 0301 	and.w	r3, r3, #1
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d005      	beq.n	800a4ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4c2:	f043 0204 	orr.w	r2, r3, #4
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ce:	f003 0308 	and.w	r3, r3, #8
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d011      	beq.n	800a4fa <HAL_UART_IRQHandler+0x126>
 800a4d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4da:	f003 0320 	and.w	r3, r3, #32
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d105      	bne.n	800a4ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a4e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4e6:	f003 0301 	and.w	r3, r3, #1
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d005      	beq.n	800a4fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4f2:	f043 0208 	orr.w	r2, r3, #8
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	f000 820a 	beq.w	800a918 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a508:	f003 0320 	and.w	r3, r3, #32
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d008      	beq.n	800a522 <HAL_UART_IRQHandler+0x14e>
 800a510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a514:	f003 0320 	and.w	r3, r3, #32
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fd7f 	bl	800b020 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	695b      	ldr	r3, [r3, #20]
 800a528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a52c:	2b40      	cmp	r3, #64	@ 0x40
 800a52e:	bf0c      	ite	eq
 800a530:	2301      	moveq	r3, #1
 800a532:	2300      	movne	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a53e:	f003 0308 	and.w	r3, r3, #8
 800a542:	2b00      	cmp	r3, #0
 800a544:	d103      	bne.n	800a54e <HAL_UART_IRQHandler+0x17a>
 800a546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d04f      	beq.n	800a5ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fc8a 	bl	800ae68 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	695b      	ldr	r3, [r3, #20]
 800a55a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a55e:	2b40      	cmp	r3, #64	@ 0x40
 800a560:	d141      	bne.n	800a5e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3314      	adds	r3, #20
 800a568:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a570:	e853 3f00 	ldrex	r3, [r3]
 800a574:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a57c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a580:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	3314      	adds	r3, #20
 800a58a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a58e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a592:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a59a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a59e:	e841 2300 	strex	r3, r2, [r1]
 800a5a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a5a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1d9      	bne.n	800a562 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d013      	beq.n	800a5de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5ba:	4a8a      	ldr	r2, [pc, #552]	@ (800a7e4 <HAL_UART_IRQHandler+0x410>)
 800a5bc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7fc fd64 	bl	8007090 <HAL_DMA_Abort_IT>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d016      	beq.n	800a5fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a5d8:	4610      	mov	r0, r2
 800a5da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5dc:	e00e      	b.n	800a5fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f9ac 	bl	800a93c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5e4:	e00a      	b.n	800a5fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f000 f9a8 	bl	800a93c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5ec:	e006      	b.n	800a5fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 f9a4 	bl	800a93c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a5fa:	e18d      	b.n	800a918 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a5fc:	bf00      	nop
    return;
 800a5fe:	e18b      	b.n	800a918 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a604:	2b01      	cmp	r3, #1
 800a606:	f040 8167 	bne.w	800a8d8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a60a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a60e:	f003 0310 	and.w	r3, r3, #16
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 8160 	beq.w	800a8d8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a61c:	f003 0310 	and.w	r3, r3, #16
 800a620:	2b00      	cmp	r3, #0
 800a622:	f000 8159 	beq.w	800a8d8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a626:	2300      	movs	r3, #0
 800a628:	60bb      	str	r3, [r7, #8]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60bb      	str	r3, [r7, #8]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	60bb      	str	r3, [r7, #8]
 800a63a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a646:	2b40      	cmp	r3, #64	@ 0x40
 800a648:	f040 80ce 	bne.w	800a7e8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a658:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	f000 80a9 	beq.w	800a7b4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a66a:	429a      	cmp	r2, r3
 800a66c:	f080 80a2 	bcs.w	800a7b4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a676:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a67c:	69db      	ldr	r3, [r3, #28]
 800a67e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a682:	f000 8088 	beq.w	800a796 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	330c      	adds	r3, #12
 800a68c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a690:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a694:	e853 3f00 	ldrex	r3, [r3]
 800a698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a69c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a6a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	330c      	adds	r3, #12
 800a6ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a6b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a6b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a6be:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a6c2:	e841 2300 	strex	r3, r2, [r1]
 800a6c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a6ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d1d9      	bne.n	800a686 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3314      	adds	r3, #20
 800a6d8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a6dc:	e853 3f00 	ldrex	r3, [r3]
 800a6e0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a6e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a6e4:	f023 0301 	bic.w	r3, r3, #1
 800a6e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3314      	adds	r3, #20
 800a6f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a6f6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a6fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a6fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a702:	e841 2300 	strex	r3, r2, [r1]
 800a706:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d1e1      	bne.n	800a6d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3314      	adds	r3, #20
 800a714:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a716:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a718:	e853 3f00 	ldrex	r3, [r3]
 800a71c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a71e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a724:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	3314      	adds	r3, #20
 800a72e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a732:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a734:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a738:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a740:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e3      	bne.n	800a70e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2220      	movs	r2, #32
 800a74a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	330c      	adds	r3, #12
 800a75a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a75e:	e853 3f00 	ldrex	r3, [r3]
 800a762:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a766:	f023 0310 	bic.w	r3, r3, #16
 800a76a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	330c      	adds	r3, #12
 800a774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a778:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a77a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a77c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a77e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a780:	e841 2300 	strex	r3, r2, [r1]
 800a784:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a786:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d1e3      	bne.n	800a754 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a790:	4618      	mov	r0, r3
 800a792:	f7fc fc0d 	bl	8006fb0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2202      	movs	r2, #2
 800a79a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	1ad3      	subs	r3, r2, r3
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f8cf 	bl	800a950 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a7b2:	e0b3      	b.n	800a91c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a7b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	f040 80ad 	bne.w	800a91c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c6:	69db      	ldr	r3, [r3, #28]
 800a7c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7cc:	f040 80a6 	bne.w	800a91c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2202      	movs	r2, #2
 800a7d4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f8b7 	bl	800a950 <HAL_UARTEx_RxEventCallback>
      return;
 800a7e2:	e09b      	b.n	800a91c <HAL_UART_IRQHandler+0x548>
 800a7e4:	0800af2f 	.word	0x0800af2f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 808e 	beq.w	800a920 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a804:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a808:	2b00      	cmp	r3, #0
 800a80a:	f000 8089 	beq.w	800a920 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	330c      	adds	r3, #12
 800a814:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a818:	e853 3f00 	ldrex	r3, [r3]
 800a81c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a81e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a824:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	330c      	adds	r3, #12
 800a82e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a832:	647a      	str	r2, [r7, #68]	@ 0x44
 800a834:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a836:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a838:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a83a:	e841 2300 	strex	r3, r2, [r1]
 800a83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1e3      	bne.n	800a80e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3314      	adds	r3, #20
 800a84c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	623b      	str	r3, [r7, #32]
   return(result);
 800a856:	6a3b      	ldr	r3, [r7, #32]
 800a858:	f023 0301 	bic.w	r3, r3, #1
 800a85c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3314      	adds	r3, #20
 800a866:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a86a:	633a      	str	r2, [r7, #48]	@ 0x30
 800a86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a872:	e841 2300 	strex	r3, r2, [r1]
 800a876:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1e3      	bne.n	800a846 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2220      	movs	r2, #32
 800a882:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	330c      	adds	r3, #12
 800a892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	e853 3f00 	ldrex	r3, [r3]
 800a89a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f023 0310 	bic.w	r3, r3, #16
 800a8a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	330c      	adds	r3, #12
 800a8ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800a8b0:	61fa      	str	r2, [r7, #28]
 800a8b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b4:	69b9      	ldr	r1, [r7, #24]
 800a8b6:	69fa      	ldr	r2, [r7, #28]
 800a8b8:	e841 2300 	strex	r3, r2, [r1]
 800a8bc:	617b      	str	r3, [r7, #20]
   return(result);
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1e3      	bne.n	800a88c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a8ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 f83d 	bl	800a950 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a8d6:	e023      	b.n	800a920 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d009      	beq.n	800a8f8 <HAL_UART_IRQHandler+0x524>
 800a8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a8e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d003      	beq.n	800a8f8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fb2d 	bl	800af50 <UART_Transmit_IT>
    return;
 800a8f6:	e014      	b.n	800a922 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a8f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00e      	beq.n	800a922 <HAL_UART_IRQHandler+0x54e>
 800a904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d008      	beq.n	800a922 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fb6d 	bl	800aff0 <UART_EndTransmit_IT>
    return;
 800a916:	e004      	b.n	800a922 <HAL_UART_IRQHandler+0x54e>
    return;
 800a918:	bf00      	nop
 800a91a:	e002      	b.n	800a922 <HAL_UART_IRQHandler+0x54e>
      return;
 800a91c:	bf00      	nop
 800a91e:	e000      	b.n	800a922 <HAL_UART_IRQHandler+0x54e>
      return;
 800a920:	bf00      	nop
  }
}
 800a922:	37e8      	adds	r7, #232	@ 0xe8
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a944:	bf00      	nop
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a950:	b480      	push	{r7}
 800a952:	b083      	sub	sp, #12
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a95c:	bf00      	nop
 800a95e:	370c      	adds	r7, #12
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b090      	sub	sp, #64	@ 0x40
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a980:	2b00      	cmp	r3, #0
 800a982:	d137      	bne.n	800a9f4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800a984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a986:	2200      	movs	r2, #0
 800a988:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a98a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	3314      	adds	r3, #20
 800a990:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a994:	e853 3f00 	ldrex	r3, [r3]
 800a998:	623b      	str	r3, [r7, #32]
   return(result);
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	3314      	adds	r3, #20
 800a9a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9aa:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9b2:	e841 2300 	strex	r3, r2, [r1]
 800a9b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e5      	bne.n	800a98a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	330c      	adds	r3, #12
 800a9c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	e853 3f00 	ldrex	r3, [r3]
 800a9cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	330c      	adds	r3, #12
 800a9dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9de:	61fa      	str	r2, [r7, #28]
 800a9e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	69b9      	ldr	r1, [r7, #24]
 800a9e4:	69fa      	ldr	r2, [r7, #28]
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	617b      	str	r3, [r7, #20]
   return(result);
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e5      	bne.n	800a9be <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9f2:	e002      	b.n	800a9fa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a9f4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800a9f6:	f7f9 f925 	bl	8003c44 <HAL_UART_TxCpltCallback>
}
 800a9fa:	bf00      	nop
 800a9fc:	3740      	adds	r7, #64	@ 0x40
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b084      	sub	sp, #16
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f7ff ff89 	bl	800a928 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa16:	bf00      	nop
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b09c      	sub	sp, #112	@ 0x70
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa2a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d172      	bne.n	800ab20 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aa3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	330c      	adds	r3, #12
 800aa46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa4a:	e853 3f00 	ldrex	r3, [r3]
 800aa4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800aa50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aa52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aa56:	66bb      	str	r3, [r7, #104]	@ 0x68
 800aa58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	330c      	adds	r3, #12
 800aa5e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800aa60:	65ba      	str	r2, [r7, #88]	@ 0x58
 800aa62:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800aa66:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800aa68:	e841 2300 	strex	r3, r2, [r1]
 800aa6c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800aa6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1e5      	bne.n	800aa40 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	3314      	adds	r3, #20
 800aa7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aa84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa86:	f023 0301 	bic.w	r3, r3, #1
 800aa8a:	667b      	str	r3, [r7, #100]	@ 0x64
 800aa8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	3314      	adds	r3, #20
 800aa92:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aa94:	647a      	str	r2, [r7, #68]	@ 0x44
 800aa96:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aaa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e5      	bne.n	800aa74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aaa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3314      	adds	r3, #20
 800aaae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	e853 3f00 	ldrex	r3, [r3]
 800aab6:	623b      	str	r3, [r7, #32]
   return(result);
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aabe:	663b      	str	r3, [r7, #96]	@ 0x60
 800aac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3314      	adds	r3, #20
 800aac6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800aac8:	633a      	str	r2, [r7, #48]	@ 0x30
 800aaca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e5      	bne.n	800aaa8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aadc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aade:	2220      	movs	r2, #32
 800aae0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d119      	bne.n	800ab20 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aaec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	330c      	adds	r3, #12
 800aaf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	e853 3f00 	ldrex	r3, [r3]
 800aafa:	60fb      	str	r3, [r7, #12]
   return(result);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f023 0310 	bic.w	r3, r3, #16
 800ab02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ab04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	330c      	adds	r3, #12
 800ab0a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ab0c:	61fa      	str	r2, [r7, #28]
 800ab0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab10:	69b9      	ldr	r1, [r7, #24]
 800ab12:	69fa      	ldr	r2, [r7, #28]
 800ab14:	e841 2300 	strex	r3, r2, [r1]
 800ab18:	617b      	str	r3, [r7, #20]
   return(result);
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e5      	bne.n	800aaec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab22:	2200      	movs	r2, #0
 800ab24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d106      	bne.n	800ab3c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ab2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab32:	4619      	mov	r1, r3
 800ab34:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab36:	f7ff ff0b 	bl	800a950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab3a:	e002      	b.n	800ab42 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800ab3c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab3e:	f7f8 f969 	bl	8002e14 <HAL_UART_RxCpltCallback>
}
 800ab42:	bf00      	nop
 800ab44:	3770      	adds	r7, #112	@ 0x70
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d108      	bne.n	800ab78 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ab6a:	085b      	lsrs	r3, r3, #1
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	4619      	mov	r1, r3
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7ff feed 	bl	800a950 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ab76:	e002      	b.n	800ab7e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	f7f8 f927 	bl	8002dcc <HAL_UART_RxHalfCpltCallback>
}
 800ab7e:	bf00      	nop
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}

0800ab86 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ab86:	b580      	push	{r7, lr}
 800ab88:	b084      	sub	sp, #16
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aba2:	2b80      	cmp	r3, #128	@ 0x80
 800aba4:	bf0c      	ite	eq
 800aba6:	2301      	moveq	r3, #1
 800aba8:	2300      	movne	r3, #0
 800abaa:	b2db      	uxtb	r3, r3
 800abac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	2b21      	cmp	r3, #33	@ 0x21
 800abb8:	d108      	bne.n	800abcc <UART_DMAError+0x46>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	2200      	movs	r2, #0
 800abc4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800abc6:	68b8      	ldr	r0, [r7, #8]
 800abc8:	f000 f926 	bl	800ae18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	695b      	ldr	r3, [r3, #20]
 800abd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abd6:	2b40      	cmp	r3, #64	@ 0x40
 800abd8:	bf0c      	ite	eq
 800abda:	2301      	moveq	r3, #1
 800abdc:	2300      	movne	r3, #0
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	2b22      	cmp	r3, #34	@ 0x22
 800abec:	d108      	bne.n	800ac00 <UART_DMAError+0x7a>
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d005      	beq.n	800ac00 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2200      	movs	r2, #0
 800abf8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800abfa:	68b8      	ldr	r0, [r7, #8]
 800abfc:	f000 f934 	bl	800ae68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac04:	f043 0210 	orr.w	r2, r3, #16
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ac0c:	68b8      	ldr	r0, [r7, #8]
 800ac0e:	f7ff fe95 	bl	800a93c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac12:	bf00      	nop
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b086      	sub	sp, #24
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	603b      	str	r3, [r7, #0]
 800ac26:	4613      	mov	r3, r2
 800ac28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac2a:	e03b      	b.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac32:	d037      	beq.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac34:	f7fb fad4 	bl	80061e0 <HAL_GetTick>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	1ad3      	subs	r3, r2, r3
 800ac3e:	6a3a      	ldr	r2, [r7, #32]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d302      	bcc.n	800ac4a <UART_WaitOnFlagUntilTimeout+0x30>
 800ac44:	6a3b      	ldr	r3, [r7, #32]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d101      	bne.n	800ac4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e03a      	b.n	800acc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	68db      	ldr	r3, [r3, #12]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d023      	beq.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2b80      	cmp	r3, #128	@ 0x80
 800ac60:	d020      	beq.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	2b40      	cmp	r3, #64	@ 0x40
 800ac66:	d01d      	beq.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 0308 	and.w	r3, r3, #8
 800ac72:	2b08      	cmp	r3, #8
 800ac74:	d116      	bne.n	800aca4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ac76:	2300      	movs	r3, #0
 800ac78:	617b      	str	r3, [r7, #20]
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	617b      	str	r3, [r7, #20]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	617b      	str	r3, [r7, #20]
 800ac8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 f8eb 	bl	800ae68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2208      	movs	r2, #8
 800ac96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800aca0:	2301      	movs	r3, #1
 800aca2:	e00f      	b.n	800acc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	4013      	ands	r3, r2
 800acae:	68ba      	ldr	r2, [r7, #8]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	bf0c      	ite	eq
 800acb4:	2301      	moveq	r3, #1
 800acb6:	2300      	movne	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d0b4      	beq.n	800ac2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}

0800accc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b098      	sub	sp, #96	@ 0x60
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800acda:	68ba      	ldr	r2, [r7, #8]
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	88fa      	ldrh	r2, [r7, #6]
 800ace4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2200      	movs	r2, #0
 800acea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2222      	movs	r2, #34	@ 0x22
 800acf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf8:	4a44      	ldr	r2, [pc, #272]	@ (800ae0c <UART_Start_Receive_DMA+0x140>)
 800acfa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad00:	4a43      	ldr	r2, [pc, #268]	@ (800ae10 <UART_Start_Receive_DMA+0x144>)
 800ad02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad08:	4a42      	ldr	r2, [pc, #264]	@ (800ae14 <UART_Start_Receive_DMA+0x148>)
 800ad0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad10:	2200      	movs	r2, #0
 800ad12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ad14:	f107 0308 	add.w	r3, r7, #8
 800ad18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	3304      	adds	r3, #4
 800ad24:	4619      	mov	r1, r3
 800ad26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	88fb      	ldrh	r3, [r7, #6]
 800ad2c:	f7fc f8e8 	bl	8006f00 <HAL_DMA_Start_IT>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d008      	beq.n	800ad48 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2210      	movs	r2, #16
 800ad3a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	2220      	movs	r2, #32
 800ad40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e05d      	b.n	800ae04 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ad48:	2300      	movs	r3, #0
 800ad4a:	613b      	str	r3, [r7, #16]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	613b      	str	r3, [r7, #16]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	613b      	str	r3, [r7, #16]
 800ad5c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d019      	beq.n	800ad9a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	330c      	adds	r3, #12
 800ad6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ad76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	330c      	adds	r3, #12
 800ad84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad86:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ad88:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ad8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ad8e:	e841 2300 	strex	r3, r2, [r1]
 800ad92:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ad94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e5      	bne.n	800ad66 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	3314      	adds	r3, #20
 800ada0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada4:	e853 3f00 	ldrex	r3, [r3]
 800ada8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800adaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adac:	f043 0301 	orr.w	r3, r3, #1
 800adb0:	657b      	str	r3, [r7, #84]	@ 0x54
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	3314      	adds	r3, #20
 800adb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800adba:	63ba      	str	r2, [r7, #56]	@ 0x38
 800adbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adbe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800adc0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adc2:	e841 2300 	strex	r3, r2, [r1]
 800adc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800adc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d1e5      	bne.n	800ad9a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	3314      	adds	r3, #20
 800add4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add6:	69bb      	ldr	r3, [r7, #24]
 800add8:	e853 3f00 	ldrex	r3, [r3]
 800addc:	617b      	str	r3, [r7, #20]
   return(result);
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade4:	653b      	str	r3, [r7, #80]	@ 0x50
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3314      	adds	r3, #20
 800adec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800adee:	627a      	str	r2, [r7, #36]	@ 0x24
 800adf0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf2:	6a39      	ldr	r1, [r7, #32]
 800adf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adf6:	e841 2300 	strex	r3, r2, [r1]
 800adfa:	61fb      	str	r3, [r7, #28]
   return(result);
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e5      	bne.n	800adce <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3760      	adds	r7, #96	@ 0x60
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}
 800ae0c:	0800aa1f 	.word	0x0800aa1f
 800ae10:	0800ab4b 	.word	0x0800ab4b
 800ae14:	0800ab87 	.word	0x0800ab87

0800ae18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b089      	sub	sp, #36	@ 0x24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	330c      	adds	r3, #12
 800ae26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	e853 3f00 	ldrex	r3, [r3]
 800ae2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae36:	61fb      	str	r3, [r7, #28]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	69fa      	ldr	r2, [r7, #28]
 800ae40:	61ba      	str	r2, [r7, #24]
 800ae42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae44:	6979      	ldr	r1, [r7, #20]
 800ae46:	69ba      	ldr	r2, [r7, #24]
 800ae48:	e841 2300 	strex	r3, r2, [r1]
 800ae4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1e5      	bne.n	800ae20 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2220      	movs	r2, #32
 800ae58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800ae5c:	bf00      	nop
 800ae5e:	3724      	adds	r7, #36	@ 0x24
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b095      	sub	sp, #84	@ 0x54
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	330c      	adds	r3, #12
 800ae76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae7a:	e853 3f00 	ldrex	r3, [r3]
 800ae7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	330c      	adds	r3, #12
 800ae8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae90:	643a      	str	r2, [r7, #64]	@ 0x40
 800ae92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae98:	e841 2300 	strex	r3, r2, [r1]
 800ae9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e5      	bne.n	800ae70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	3314      	adds	r3, #20
 800aeaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	e853 3f00 	ldrex	r3, [r3]
 800aeb2:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	f023 0301 	bic.w	r3, r3, #1
 800aeba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	3314      	adds	r3, #20
 800aec2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aec4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aeca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aecc:	e841 2300 	strex	r3, r2, [r1]
 800aed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d1e5      	bne.n	800aea4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d119      	bne.n	800af14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	330c      	adds	r3, #12
 800aee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	60bb      	str	r3, [r7, #8]
   return(result);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	f023 0310 	bic.w	r3, r3, #16
 800aef6:	647b      	str	r3, [r7, #68]	@ 0x44
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	330c      	adds	r3, #12
 800aefe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af00:	61ba      	str	r2, [r7, #24]
 800af02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	6979      	ldr	r1, [r7, #20]
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	613b      	str	r3, [r7, #16]
   return(result);
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e5      	bne.n	800aee0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2220      	movs	r2, #32
 800af18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800af22:	bf00      	nop
 800af24:	3754      	adds	r7, #84	@ 0x54
 800af26:	46bd      	mov	sp, r7
 800af28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2c:	4770      	bx	lr

0800af2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af2e:	b580      	push	{r7, lr}
 800af30:	b084      	sub	sp, #16
 800af32:	af00      	add	r7, sp, #0
 800af34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2200      	movs	r2, #0
 800af40:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af42:	68f8      	ldr	r0, [r7, #12]
 800af44:	f7ff fcfa 	bl	800a93c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af48:	bf00      	nop
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b21      	cmp	r3, #33	@ 0x21
 800af62:	d13e      	bne.n	800afe2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800af6c:	d114      	bne.n	800af98 <UART_Transmit_IT+0x48>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d110      	bne.n	800af98 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a1b      	ldr	r3, [r3, #32]
 800af7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af8a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	1c9a      	adds	r2, r3, #2
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	621a      	str	r2, [r3, #32]
 800af96:	e008      	b.n	800afaa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	1c59      	adds	r1, r3, #1
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	6211      	str	r1, [r2, #32]
 800afa2:	781a      	ldrb	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800afae:	b29b      	uxth	r3, r3
 800afb0:	3b01      	subs	r3, #1
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	4619      	mov	r1, r3
 800afb8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d10f      	bne.n	800afde <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68da      	ldr	r2, [r3, #12]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800afcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800afdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	e000      	b.n	800afe4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800afe2:	2302      	movs	r3, #2
  }
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3714      	adds	r7, #20
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b082      	sub	sp, #8
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68da      	ldr	r2, [r3, #12]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b006:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2220      	movs	r2, #32
 800b00c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7f8 fe17 	bl	8003c44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b08c      	sub	sp, #48	@ 0x30
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b036:	b2db      	uxtb	r3, r3
 800b038:	2b22      	cmp	r3, #34	@ 0x22
 800b03a:	f040 80aa 	bne.w	800b192 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b046:	d115      	bne.n	800b074 <UART_Receive_IT+0x54>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d111      	bne.n	800b074 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b054:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b062:	b29a      	uxth	r2, r3
 800b064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b066:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b06c:	1c9a      	adds	r2, r3, #2
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	629a      	str	r2, [r3, #40]	@ 0x28
 800b072:	e024      	b.n	800b0be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b078:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b082:	d007      	beq.n	800b094 <UART_Receive_IT+0x74>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	689b      	ldr	r3, [r3, #8]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10a      	bne.n	800b0a2 <UART_Receive_IT+0x82>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	691b      	ldr	r3, [r3, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d106      	bne.n	800b0a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b09e:	701a      	strb	r2, [r3, #0]
 800b0a0:	e008      	b.n	800b0b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	3b01      	subs	r3, #1
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	687a      	ldr	r2, [r7, #4]
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d15d      	bne.n	800b18e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	68da      	ldr	r2, [r3, #12]
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f022 0220 	bic.w	r2, r2, #32
 800b0e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	68da      	ldr	r2, [r3, #12]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b0f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	695a      	ldr	r2, [r3, #20]
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f022 0201 	bic.w	r2, r2, #1
 800b100:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2220      	movs	r2, #32
 800b106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b114:	2b01      	cmp	r3, #1
 800b116:	d135      	bne.n	800b184 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	330c      	adds	r3, #12
 800b124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	e853 3f00 	ldrex	r3, [r3]
 800b12c:	613b      	str	r3, [r7, #16]
   return(result);
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	f023 0310 	bic.w	r3, r3, #16
 800b134:	627b      	str	r3, [r7, #36]	@ 0x24
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	330c      	adds	r3, #12
 800b13c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b13e:	623a      	str	r2, [r7, #32]
 800b140:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b142:	69f9      	ldr	r1, [r7, #28]
 800b144:	6a3a      	ldr	r2, [r7, #32]
 800b146:	e841 2300 	strex	r3, r2, [r1]
 800b14a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e5      	bne.n	800b11e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0310 	and.w	r3, r3, #16
 800b15c:	2b10      	cmp	r3, #16
 800b15e:	d10a      	bne.n	800b176 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b160:	2300      	movs	r3, #0
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	60fb      	str	r3, [r7, #12]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b17a:	4619      	mov	r1, r3
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f7ff fbe7 	bl	800a950 <HAL_UARTEx_RxEventCallback>
 800b182:	e002      	b.n	800b18a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f7f7 fe45 	bl	8002e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b18a:	2300      	movs	r3, #0
 800b18c:	e002      	b.n	800b194 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	e000      	b.n	800b194 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b192:	2302      	movs	r3, #2
  }
}
 800b194:	4618      	mov	r0, r3
 800b196:	3730      	adds	r7, #48	@ 0x30
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b19c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1a0:	b0c0      	sub	sp, #256	@ 0x100
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b1a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	691b      	ldr	r3, [r3, #16]
 800b1b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b1b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1b8:	68d9      	ldr	r1, [r3, #12]
 800b1ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	ea40 0301 	orr.w	r3, r0, r1
 800b1c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b1c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ca:	689a      	ldr	r2, [r3, #8]
 800b1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	431a      	orrs	r2, r3
 800b1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1e0:	69db      	ldr	r3, [r3, #28]
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b1e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b1f4:	f021 010c 	bic.w	r1, r1, #12
 800b1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b202:	430b      	orrs	r3, r1
 800b204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b216:	6999      	ldr	r1, [r3, #24]
 800b218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	ea40 0301 	orr.w	r3, r0, r1
 800b222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	4b8f      	ldr	r3, [pc, #572]	@ (800b468 <UART_SetConfig+0x2cc>)
 800b22c:	429a      	cmp	r2, r3
 800b22e:	d005      	beq.n	800b23c <UART_SetConfig+0xa0>
 800b230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	4b8d      	ldr	r3, [pc, #564]	@ (800b46c <UART_SetConfig+0x2d0>)
 800b238:	429a      	cmp	r2, r3
 800b23a:	d104      	bne.n	800b246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b23c:	f7fd fdc8 	bl	8008dd0 <HAL_RCC_GetPCLK2Freq>
 800b240:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b244:	e003      	b.n	800b24e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b246:	f7fd fdaf 	bl	8008da8 <HAL_RCC_GetPCLK1Freq>
 800b24a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b24e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b252:	69db      	ldr	r3, [r3, #28]
 800b254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b258:	f040 810c 	bne.w	800b474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b25c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b260:	2200      	movs	r2, #0
 800b262:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b266:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b26a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b26e:	4622      	mov	r2, r4
 800b270:	462b      	mov	r3, r5
 800b272:	1891      	adds	r1, r2, r2
 800b274:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b276:	415b      	adcs	r3, r3
 800b278:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b27a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b27e:	4621      	mov	r1, r4
 800b280:	eb12 0801 	adds.w	r8, r2, r1
 800b284:	4629      	mov	r1, r5
 800b286:	eb43 0901 	adc.w	r9, r3, r1
 800b28a:	f04f 0200 	mov.w	r2, #0
 800b28e:	f04f 0300 	mov.w	r3, #0
 800b292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b29a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b29e:	4690      	mov	r8, r2
 800b2a0:	4699      	mov	r9, r3
 800b2a2:	4623      	mov	r3, r4
 800b2a4:	eb18 0303 	adds.w	r3, r8, r3
 800b2a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b2ac:	462b      	mov	r3, r5
 800b2ae:	eb49 0303 	adc.w	r3, r9, r3
 800b2b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b2c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b2c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b2ca:	460b      	mov	r3, r1
 800b2cc:	18db      	adds	r3, r3, r3
 800b2ce:	653b      	str	r3, [r7, #80]	@ 0x50
 800b2d0:	4613      	mov	r3, r2
 800b2d2:	eb42 0303 	adc.w	r3, r2, r3
 800b2d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800b2d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b2dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b2e0:	f7f5 fe50 	bl	8000f84 <__aeabi_uldivmod>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4b61      	ldr	r3, [pc, #388]	@ (800b470 <UART_SetConfig+0x2d4>)
 800b2ea:	fba3 2302 	umull	r2, r3, r3, r2
 800b2ee:	095b      	lsrs	r3, r3, #5
 800b2f0:	011c      	lsls	r4, r3, #4
 800b2f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b2fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b304:	4642      	mov	r2, r8
 800b306:	464b      	mov	r3, r9
 800b308:	1891      	adds	r1, r2, r2
 800b30a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b30c:	415b      	adcs	r3, r3
 800b30e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b314:	4641      	mov	r1, r8
 800b316:	eb12 0a01 	adds.w	sl, r2, r1
 800b31a:	4649      	mov	r1, r9
 800b31c:	eb43 0b01 	adc.w	fp, r3, r1
 800b320:	f04f 0200 	mov.w	r2, #0
 800b324:	f04f 0300 	mov.w	r3, #0
 800b328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b32c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b334:	4692      	mov	sl, r2
 800b336:	469b      	mov	fp, r3
 800b338:	4643      	mov	r3, r8
 800b33a:	eb1a 0303 	adds.w	r3, sl, r3
 800b33e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b342:	464b      	mov	r3, r9
 800b344:	eb4b 0303 	adc.w	r3, fp, r3
 800b348:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b34c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b358:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b35c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b360:	460b      	mov	r3, r1
 800b362:	18db      	adds	r3, r3, r3
 800b364:	643b      	str	r3, [r7, #64]	@ 0x40
 800b366:	4613      	mov	r3, r2
 800b368:	eb42 0303 	adc.w	r3, r2, r3
 800b36c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b36e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b376:	f7f5 fe05 	bl	8000f84 <__aeabi_uldivmod>
 800b37a:	4602      	mov	r2, r0
 800b37c:	460b      	mov	r3, r1
 800b37e:	4611      	mov	r1, r2
 800b380:	4b3b      	ldr	r3, [pc, #236]	@ (800b470 <UART_SetConfig+0x2d4>)
 800b382:	fba3 2301 	umull	r2, r3, r3, r1
 800b386:	095b      	lsrs	r3, r3, #5
 800b388:	2264      	movs	r2, #100	@ 0x64
 800b38a:	fb02 f303 	mul.w	r3, r2, r3
 800b38e:	1acb      	subs	r3, r1, r3
 800b390:	00db      	lsls	r3, r3, #3
 800b392:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b396:	4b36      	ldr	r3, [pc, #216]	@ (800b470 <UART_SetConfig+0x2d4>)
 800b398:	fba3 2302 	umull	r2, r3, r3, r2
 800b39c:	095b      	lsrs	r3, r3, #5
 800b39e:	005b      	lsls	r3, r3, #1
 800b3a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b3a4:	441c      	add	r4, r3
 800b3a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b3b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b3b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b3b8:	4642      	mov	r2, r8
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	1891      	adds	r1, r2, r2
 800b3be:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b3c0:	415b      	adcs	r3, r3
 800b3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b3c8:	4641      	mov	r1, r8
 800b3ca:	1851      	adds	r1, r2, r1
 800b3cc:	6339      	str	r1, [r7, #48]	@ 0x30
 800b3ce:	4649      	mov	r1, r9
 800b3d0:	414b      	adcs	r3, r1
 800b3d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3d4:	f04f 0200 	mov.w	r2, #0
 800b3d8:	f04f 0300 	mov.w	r3, #0
 800b3dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b3e0:	4659      	mov	r1, fp
 800b3e2:	00cb      	lsls	r3, r1, #3
 800b3e4:	4651      	mov	r1, sl
 800b3e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b3ea:	4651      	mov	r1, sl
 800b3ec:	00ca      	lsls	r2, r1, #3
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	4642      	mov	r2, r8
 800b3f6:	189b      	adds	r3, r3, r2
 800b3f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3fc:	464b      	mov	r3, r9
 800b3fe:	460a      	mov	r2, r1
 800b400:	eb42 0303 	adc.w	r3, r2, r3
 800b404:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	2200      	movs	r2, #0
 800b410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b414:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b41c:	460b      	mov	r3, r1
 800b41e:	18db      	adds	r3, r3, r3
 800b420:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b422:	4613      	mov	r3, r2
 800b424:	eb42 0303 	adc.w	r3, r2, r3
 800b428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b42a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b42e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b432:	f7f5 fda7 	bl	8000f84 <__aeabi_uldivmod>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	4b0d      	ldr	r3, [pc, #52]	@ (800b470 <UART_SetConfig+0x2d4>)
 800b43c:	fba3 1302 	umull	r1, r3, r3, r2
 800b440:	095b      	lsrs	r3, r3, #5
 800b442:	2164      	movs	r1, #100	@ 0x64
 800b444:	fb01 f303 	mul.w	r3, r1, r3
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	00db      	lsls	r3, r3, #3
 800b44c:	3332      	adds	r3, #50	@ 0x32
 800b44e:	4a08      	ldr	r2, [pc, #32]	@ (800b470 <UART_SetConfig+0x2d4>)
 800b450:	fba2 2303 	umull	r2, r3, r2, r3
 800b454:	095b      	lsrs	r3, r3, #5
 800b456:	f003 0207 	and.w	r2, r3, #7
 800b45a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4422      	add	r2, r4
 800b462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b464:	e106      	b.n	800b674 <UART_SetConfig+0x4d8>
 800b466:	bf00      	nop
 800b468:	40011000 	.word	0x40011000
 800b46c:	40011400 	.word	0x40011400
 800b470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b478:	2200      	movs	r2, #0
 800b47a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b47e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b486:	4642      	mov	r2, r8
 800b488:	464b      	mov	r3, r9
 800b48a:	1891      	adds	r1, r2, r2
 800b48c:	6239      	str	r1, [r7, #32]
 800b48e:	415b      	adcs	r3, r3
 800b490:	627b      	str	r3, [r7, #36]	@ 0x24
 800b492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b496:	4641      	mov	r1, r8
 800b498:	1854      	adds	r4, r2, r1
 800b49a:	4649      	mov	r1, r9
 800b49c:	eb43 0501 	adc.w	r5, r3, r1
 800b4a0:	f04f 0200 	mov.w	r2, #0
 800b4a4:	f04f 0300 	mov.w	r3, #0
 800b4a8:	00eb      	lsls	r3, r5, #3
 800b4aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b4ae:	00e2      	lsls	r2, r4, #3
 800b4b0:	4614      	mov	r4, r2
 800b4b2:	461d      	mov	r5, r3
 800b4b4:	4643      	mov	r3, r8
 800b4b6:	18e3      	adds	r3, r4, r3
 800b4b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b4bc:	464b      	mov	r3, r9
 800b4be:	eb45 0303 	adc.w	r3, r5, r3
 800b4c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b4c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b4d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	f04f 0300 	mov.w	r3, #0
 800b4de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	008b      	lsls	r3, r1, #2
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	008a      	lsls	r2, r1, #2
 800b4f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b4f4:	f7f5 fd46 	bl	8000f84 <__aeabi_uldivmod>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4b60      	ldr	r3, [pc, #384]	@ (800b680 <UART_SetConfig+0x4e4>)
 800b4fe:	fba3 2302 	umull	r2, r3, r3, r2
 800b502:	095b      	lsrs	r3, r3, #5
 800b504:	011c      	lsls	r4, r3, #4
 800b506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b50a:	2200      	movs	r2, #0
 800b50c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b510:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b518:	4642      	mov	r2, r8
 800b51a:	464b      	mov	r3, r9
 800b51c:	1891      	adds	r1, r2, r2
 800b51e:	61b9      	str	r1, [r7, #24]
 800b520:	415b      	adcs	r3, r3
 800b522:	61fb      	str	r3, [r7, #28]
 800b524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b528:	4641      	mov	r1, r8
 800b52a:	1851      	adds	r1, r2, r1
 800b52c:	6139      	str	r1, [r7, #16]
 800b52e:	4649      	mov	r1, r9
 800b530:	414b      	adcs	r3, r1
 800b532:	617b      	str	r3, [r7, #20]
 800b534:	f04f 0200 	mov.w	r2, #0
 800b538:	f04f 0300 	mov.w	r3, #0
 800b53c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b540:	4659      	mov	r1, fp
 800b542:	00cb      	lsls	r3, r1, #3
 800b544:	4651      	mov	r1, sl
 800b546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b54a:	4651      	mov	r1, sl
 800b54c:	00ca      	lsls	r2, r1, #3
 800b54e:	4610      	mov	r0, r2
 800b550:	4619      	mov	r1, r3
 800b552:	4603      	mov	r3, r0
 800b554:	4642      	mov	r2, r8
 800b556:	189b      	adds	r3, r3, r2
 800b558:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b55c:	464b      	mov	r3, r9
 800b55e:	460a      	mov	r2, r1
 800b560:	eb42 0303 	adc.w	r3, r2, r3
 800b564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	2200      	movs	r2, #0
 800b570:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b572:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b574:	f04f 0200 	mov.w	r2, #0
 800b578:	f04f 0300 	mov.w	r3, #0
 800b57c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b580:	4649      	mov	r1, r9
 800b582:	008b      	lsls	r3, r1, #2
 800b584:	4641      	mov	r1, r8
 800b586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b58a:	4641      	mov	r1, r8
 800b58c:	008a      	lsls	r2, r1, #2
 800b58e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b592:	f7f5 fcf7 	bl	8000f84 <__aeabi_uldivmod>
 800b596:	4602      	mov	r2, r0
 800b598:	460b      	mov	r3, r1
 800b59a:	4611      	mov	r1, r2
 800b59c:	4b38      	ldr	r3, [pc, #224]	@ (800b680 <UART_SetConfig+0x4e4>)
 800b59e:	fba3 2301 	umull	r2, r3, r3, r1
 800b5a2:	095b      	lsrs	r3, r3, #5
 800b5a4:	2264      	movs	r2, #100	@ 0x64
 800b5a6:	fb02 f303 	mul.w	r3, r2, r3
 800b5aa:	1acb      	subs	r3, r1, r3
 800b5ac:	011b      	lsls	r3, r3, #4
 800b5ae:	3332      	adds	r3, #50	@ 0x32
 800b5b0:	4a33      	ldr	r2, [pc, #204]	@ (800b680 <UART_SetConfig+0x4e4>)
 800b5b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b5b6:	095b      	lsrs	r3, r3, #5
 800b5b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5bc:	441c      	add	r4, r3
 800b5be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5c6:	677a      	str	r2, [r7, #116]	@ 0x74
 800b5c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b5cc:	4642      	mov	r2, r8
 800b5ce:	464b      	mov	r3, r9
 800b5d0:	1891      	adds	r1, r2, r2
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	415b      	adcs	r3, r3
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b5dc:	4641      	mov	r1, r8
 800b5de:	1851      	adds	r1, r2, r1
 800b5e0:	6039      	str	r1, [r7, #0]
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	414b      	adcs	r3, r1
 800b5e6:	607b      	str	r3, [r7, #4]
 800b5e8:	f04f 0200 	mov.w	r2, #0
 800b5ec:	f04f 0300 	mov.w	r3, #0
 800b5f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b5f4:	4659      	mov	r1, fp
 800b5f6:	00cb      	lsls	r3, r1, #3
 800b5f8:	4651      	mov	r1, sl
 800b5fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b5fe:	4651      	mov	r1, sl
 800b600:	00ca      	lsls	r2, r1, #3
 800b602:	4610      	mov	r0, r2
 800b604:	4619      	mov	r1, r3
 800b606:	4603      	mov	r3, r0
 800b608:	4642      	mov	r2, r8
 800b60a:	189b      	adds	r3, r3, r2
 800b60c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b60e:	464b      	mov	r3, r9
 800b610:	460a      	mov	r2, r1
 800b612:	eb42 0303 	adc.w	r3, r2, r3
 800b616:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	663b      	str	r3, [r7, #96]	@ 0x60
 800b622:	667a      	str	r2, [r7, #100]	@ 0x64
 800b624:	f04f 0200 	mov.w	r2, #0
 800b628:	f04f 0300 	mov.w	r3, #0
 800b62c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b630:	4649      	mov	r1, r9
 800b632:	008b      	lsls	r3, r1, #2
 800b634:	4641      	mov	r1, r8
 800b636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b63a:	4641      	mov	r1, r8
 800b63c:	008a      	lsls	r2, r1, #2
 800b63e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b642:	f7f5 fc9f 	bl	8000f84 <__aeabi_uldivmod>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4b0d      	ldr	r3, [pc, #52]	@ (800b680 <UART_SetConfig+0x4e4>)
 800b64c:	fba3 1302 	umull	r1, r3, r3, r2
 800b650:	095b      	lsrs	r3, r3, #5
 800b652:	2164      	movs	r1, #100	@ 0x64
 800b654:	fb01 f303 	mul.w	r3, r1, r3
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	3332      	adds	r3, #50	@ 0x32
 800b65e:	4a08      	ldr	r2, [pc, #32]	@ (800b680 <UART_SetConfig+0x4e4>)
 800b660:	fba2 2303 	umull	r2, r3, r2, r3
 800b664:	095b      	lsrs	r3, r3, #5
 800b666:	f003 020f 	and.w	r2, r3, #15
 800b66a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4422      	add	r2, r4
 800b672:	609a      	str	r2, [r3, #8]
}
 800b674:	bf00      	nop
 800b676:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b67a:	46bd      	mov	sp, r7
 800b67c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b680:	51eb851f 	.word	0x51eb851f

0800b684 <calloc>:
 800b684:	4b02      	ldr	r3, [pc, #8]	@ (800b690 <calloc+0xc>)
 800b686:	460a      	mov	r2, r1
 800b688:	4601      	mov	r1, r0
 800b68a:	6818      	ldr	r0, [r3, #0]
 800b68c:	f000 b802 	b.w	800b694 <_calloc_r>
 800b690:	20000044 	.word	0x20000044

0800b694 <_calloc_r>:
 800b694:	b570      	push	{r4, r5, r6, lr}
 800b696:	fba1 5402 	umull	r5, r4, r1, r2
 800b69a:	b93c      	cbnz	r4, 800b6ac <_calloc_r+0x18>
 800b69c:	4629      	mov	r1, r5
 800b69e:	f000 f82f 	bl	800b700 <_malloc_r>
 800b6a2:	4606      	mov	r6, r0
 800b6a4:	b928      	cbnz	r0, 800b6b2 <_calloc_r+0x1e>
 800b6a6:	2600      	movs	r6, #0
 800b6a8:	4630      	mov	r0, r6
 800b6aa:	bd70      	pop	{r4, r5, r6, pc}
 800b6ac:	220c      	movs	r2, #12
 800b6ae:	6002      	str	r2, [r0, #0]
 800b6b0:	e7f9      	b.n	800b6a6 <_calloc_r+0x12>
 800b6b2:	462a      	mov	r2, r5
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	f001 f87c 	bl	800c7b2 <memset>
 800b6ba:	e7f5      	b.n	800b6a8 <_calloc_r+0x14>

0800b6bc <sbrk_aligned>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4e0f      	ldr	r6, [pc, #60]	@ (800b6fc <sbrk_aligned+0x40>)
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	6831      	ldr	r1, [r6, #0]
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	b911      	cbnz	r1, 800b6ce <sbrk_aligned+0x12>
 800b6c8:	f001 f8ca 	bl	800c860 <_sbrk_r>
 800b6cc:	6030      	str	r0, [r6, #0]
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f001 f8c5 	bl	800c860 <_sbrk_r>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	d103      	bne.n	800b6e2 <sbrk_aligned+0x26>
 800b6da:	f04f 34ff 	mov.w	r4, #4294967295
 800b6de:	4620      	mov	r0, r4
 800b6e0:	bd70      	pop	{r4, r5, r6, pc}
 800b6e2:	1cc4      	adds	r4, r0, #3
 800b6e4:	f024 0403 	bic.w	r4, r4, #3
 800b6e8:	42a0      	cmp	r0, r4
 800b6ea:	d0f8      	beq.n	800b6de <sbrk_aligned+0x22>
 800b6ec:	1a21      	subs	r1, r4, r0
 800b6ee:	4628      	mov	r0, r5
 800b6f0:	f001 f8b6 	bl	800c860 <_sbrk_r>
 800b6f4:	3001      	adds	r0, #1
 800b6f6:	d1f2      	bne.n	800b6de <sbrk_aligned+0x22>
 800b6f8:	e7ef      	b.n	800b6da <sbrk_aligned+0x1e>
 800b6fa:	bf00      	nop
 800b6fc:	20001664 	.word	0x20001664

0800b700 <_malloc_r>:
 800b700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b704:	1ccd      	adds	r5, r1, #3
 800b706:	f025 0503 	bic.w	r5, r5, #3
 800b70a:	3508      	adds	r5, #8
 800b70c:	2d0c      	cmp	r5, #12
 800b70e:	bf38      	it	cc
 800b710:	250c      	movcc	r5, #12
 800b712:	2d00      	cmp	r5, #0
 800b714:	4606      	mov	r6, r0
 800b716:	db01      	blt.n	800b71c <_malloc_r+0x1c>
 800b718:	42a9      	cmp	r1, r5
 800b71a:	d904      	bls.n	800b726 <_malloc_r+0x26>
 800b71c:	230c      	movs	r3, #12
 800b71e:	6033      	str	r3, [r6, #0]
 800b720:	2000      	movs	r0, #0
 800b722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b726:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b7fc <_malloc_r+0xfc>
 800b72a:	f000 f869 	bl	800b800 <__malloc_lock>
 800b72e:	f8d8 3000 	ldr.w	r3, [r8]
 800b732:	461c      	mov	r4, r3
 800b734:	bb44      	cbnz	r4, 800b788 <_malloc_r+0x88>
 800b736:	4629      	mov	r1, r5
 800b738:	4630      	mov	r0, r6
 800b73a:	f7ff ffbf 	bl	800b6bc <sbrk_aligned>
 800b73e:	1c43      	adds	r3, r0, #1
 800b740:	4604      	mov	r4, r0
 800b742:	d158      	bne.n	800b7f6 <_malloc_r+0xf6>
 800b744:	f8d8 4000 	ldr.w	r4, [r8]
 800b748:	4627      	mov	r7, r4
 800b74a:	2f00      	cmp	r7, #0
 800b74c:	d143      	bne.n	800b7d6 <_malloc_r+0xd6>
 800b74e:	2c00      	cmp	r4, #0
 800b750:	d04b      	beq.n	800b7ea <_malloc_r+0xea>
 800b752:	6823      	ldr	r3, [r4, #0]
 800b754:	4639      	mov	r1, r7
 800b756:	4630      	mov	r0, r6
 800b758:	eb04 0903 	add.w	r9, r4, r3
 800b75c:	f001 f880 	bl	800c860 <_sbrk_r>
 800b760:	4581      	cmp	r9, r0
 800b762:	d142      	bne.n	800b7ea <_malloc_r+0xea>
 800b764:	6821      	ldr	r1, [r4, #0]
 800b766:	1a6d      	subs	r5, r5, r1
 800b768:	4629      	mov	r1, r5
 800b76a:	4630      	mov	r0, r6
 800b76c:	f7ff ffa6 	bl	800b6bc <sbrk_aligned>
 800b770:	3001      	adds	r0, #1
 800b772:	d03a      	beq.n	800b7ea <_malloc_r+0xea>
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	442b      	add	r3, r5
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	f8d8 3000 	ldr.w	r3, [r8]
 800b77e:	685a      	ldr	r2, [r3, #4]
 800b780:	bb62      	cbnz	r2, 800b7dc <_malloc_r+0xdc>
 800b782:	f8c8 7000 	str.w	r7, [r8]
 800b786:	e00f      	b.n	800b7a8 <_malloc_r+0xa8>
 800b788:	6822      	ldr	r2, [r4, #0]
 800b78a:	1b52      	subs	r2, r2, r5
 800b78c:	d420      	bmi.n	800b7d0 <_malloc_r+0xd0>
 800b78e:	2a0b      	cmp	r2, #11
 800b790:	d917      	bls.n	800b7c2 <_malloc_r+0xc2>
 800b792:	1961      	adds	r1, r4, r5
 800b794:	42a3      	cmp	r3, r4
 800b796:	6025      	str	r5, [r4, #0]
 800b798:	bf18      	it	ne
 800b79a:	6059      	strne	r1, [r3, #4]
 800b79c:	6863      	ldr	r3, [r4, #4]
 800b79e:	bf08      	it	eq
 800b7a0:	f8c8 1000 	streq.w	r1, [r8]
 800b7a4:	5162      	str	r2, [r4, r5]
 800b7a6:	604b      	str	r3, [r1, #4]
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	f000 f82f 	bl	800b80c <__malloc_unlock>
 800b7ae:	f104 000b 	add.w	r0, r4, #11
 800b7b2:	1d23      	adds	r3, r4, #4
 800b7b4:	f020 0007 	bic.w	r0, r0, #7
 800b7b8:	1ac2      	subs	r2, r0, r3
 800b7ba:	bf1c      	itt	ne
 800b7bc:	1a1b      	subne	r3, r3, r0
 800b7be:	50a3      	strne	r3, [r4, r2]
 800b7c0:	e7af      	b.n	800b722 <_malloc_r+0x22>
 800b7c2:	6862      	ldr	r2, [r4, #4]
 800b7c4:	42a3      	cmp	r3, r4
 800b7c6:	bf0c      	ite	eq
 800b7c8:	f8c8 2000 	streq.w	r2, [r8]
 800b7cc:	605a      	strne	r2, [r3, #4]
 800b7ce:	e7eb      	b.n	800b7a8 <_malloc_r+0xa8>
 800b7d0:	4623      	mov	r3, r4
 800b7d2:	6864      	ldr	r4, [r4, #4]
 800b7d4:	e7ae      	b.n	800b734 <_malloc_r+0x34>
 800b7d6:	463c      	mov	r4, r7
 800b7d8:	687f      	ldr	r7, [r7, #4]
 800b7da:	e7b6      	b.n	800b74a <_malloc_r+0x4a>
 800b7dc:	461a      	mov	r2, r3
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	42a3      	cmp	r3, r4
 800b7e2:	d1fb      	bne.n	800b7dc <_malloc_r+0xdc>
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	6053      	str	r3, [r2, #4]
 800b7e8:	e7de      	b.n	800b7a8 <_malloc_r+0xa8>
 800b7ea:	230c      	movs	r3, #12
 800b7ec:	6033      	str	r3, [r6, #0]
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	f000 f80c 	bl	800b80c <__malloc_unlock>
 800b7f4:	e794      	b.n	800b720 <_malloc_r+0x20>
 800b7f6:	6005      	str	r5, [r0, #0]
 800b7f8:	e7d6      	b.n	800b7a8 <_malloc_r+0xa8>
 800b7fa:	bf00      	nop
 800b7fc:	20001668 	.word	0x20001668

0800b800 <__malloc_lock>:
 800b800:	4801      	ldr	r0, [pc, #4]	@ (800b808 <__malloc_lock+0x8>)
 800b802:	f001 b87a 	b.w	800c8fa <__retarget_lock_acquire_recursive>
 800b806:	bf00      	nop
 800b808:	200017ac 	.word	0x200017ac

0800b80c <__malloc_unlock>:
 800b80c:	4801      	ldr	r0, [pc, #4]	@ (800b814 <__malloc_unlock+0x8>)
 800b80e:	f001 b875 	b.w	800c8fc <__retarget_lock_release_recursive>
 800b812:	bf00      	nop
 800b814:	200017ac 	.word	0x200017ac

0800b818 <__cvt>:
 800b818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b81c:	ec57 6b10 	vmov	r6, r7, d0
 800b820:	2f00      	cmp	r7, #0
 800b822:	460c      	mov	r4, r1
 800b824:	4619      	mov	r1, r3
 800b826:	463b      	mov	r3, r7
 800b828:	bfbb      	ittet	lt
 800b82a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b82e:	461f      	movlt	r7, r3
 800b830:	2300      	movge	r3, #0
 800b832:	232d      	movlt	r3, #45	@ 0x2d
 800b834:	700b      	strb	r3, [r1, #0]
 800b836:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b838:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b83c:	4691      	mov	r9, r2
 800b83e:	f023 0820 	bic.w	r8, r3, #32
 800b842:	bfbc      	itt	lt
 800b844:	4632      	movlt	r2, r6
 800b846:	4616      	movlt	r6, r2
 800b848:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b84c:	d005      	beq.n	800b85a <__cvt+0x42>
 800b84e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b852:	d100      	bne.n	800b856 <__cvt+0x3e>
 800b854:	3401      	adds	r4, #1
 800b856:	2102      	movs	r1, #2
 800b858:	e000      	b.n	800b85c <__cvt+0x44>
 800b85a:	2103      	movs	r1, #3
 800b85c:	ab03      	add	r3, sp, #12
 800b85e:	9301      	str	r3, [sp, #4]
 800b860:	ab02      	add	r3, sp, #8
 800b862:	9300      	str	r3, [sp, #0]
 800b864:	ec47 6b10 	vmov	d0, r6, r7
 800b868:	4653      	mov	r3, sl
 800b86a:	4622      	mov	r2, r4
 800b86c:	f001 f8e4 	bl	800ca38 <_dtoa_r>
 800b870:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b874:	4605      	mov	r5, r0
 800b876:	d119      	bne.n	800b8ac <__cvt+0x94>
 800b878:	f019 0f01 	tst.w	r9, #1
 800b87c:	d00e      	beq.n	800b89c <__cvt+0x84>
 800b87e:	eb00 0904 	add.w	r9, r0, r4
 800b882:	2200      	movs	r2, #0
 800b884:	2300      	movs	r3, #0
 800b886:	4630      	mov	r0, r6
 800b888:	4639      	mov	r1, r7
 800b88a:	f7f5 f93d 	bl	8000b08 <__aeabi_dcmpeq>
 800b88e:	b108      	cbz	r0, 800b894 <__cvt+0x7c>
 800b890:	f8cd 900c 	str.w	r9, [sp, #12]
 800b894:	2230      	movs	r2, #48	@ 0x30
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	454b      	cmp	r3, r9
 800b89a:	d31e      	bcc.n	800b8da <__cvt+0xc2>
 800b89c:	9b03      	ldr	r3, [sp, #12]
 800b89e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8a0:	1b5b      	subs	r3, r3, r5
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	b004      	add	sp, #16
 800b8a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8b0:	eb00 0904 	add.w	r9, r0, r4
 800b8b4:	d1e5      	bne.n	800b882 <__cvt+0x6a>
 800b8b6:	7803      	ldrb	r3, [r0, #0]
 800b8b8:	2b30      	cmp	r3, #48	@ 0x30
 800b8ba:	d10a      	bne.n	800b8d2 <__cvt+0xba>
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4630      	mov	r0, r6
 800b8c2:	4639      	mov	r1, r7
 800b8c4:	f7f5 f920 	bl	8000b08 <__aeabi_dcmpeq>
 800b8c8:	b918      	cbnz	r0, 800b8d2 <__cvt+0xba>
 800b8ca:	f1c4 0401 	rsb	r4, r4, #1
 800b8ce:	f8ca 4000 	str.w	r4, [sl]
 800b8d2:	f8da 3000 	ldr.w	r3, [sl]
 800b8d6:	4499      	add	r9, r3
 800b8d8:	e7d3      	b.n	800b882 <__cvt+0x6a>
 800b8da:	1c59      	adds	r1, r3, #1
 800b8dc:	9103      	str	r1, [sp, #12]
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	e7d9      	b.n	800b896 <__cvt+0x7e>

0800b8e2 <__exponent>:
 800b8e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8e4:	2900      	cmp	r1, #0
 800b8e6:	bfba      	itte	lt
 800b8e8:	4249      	neglt	r1, r1
 800b8ea:	232d      	movlt	r3, #45	@ 0x2d
 800b8ec:	232b      	movge	r3, #43	@ 0x2b
 800b8ee:	2909      	cmp	r1, #9
 800b8f0:	7002      	strb	r2, [r0, #0]
 800b8f2:	7043      	strb	r3, [r0, #1]
 800b8f4:	dd29      	ble.n	800b94a <__exponent+0x68>
 800b8f6:	f10d 0307 	add.w	r3, sp, #7
 800b8fa:	461d      	mov	r5, r3
 800b8fc:	270a      	movs	r7, #10
 800b8fe:	461a      	mov	r2, r3
 800b900:	fbb1 f6f7 	udiv	r6, r1, r7
 800b904:	fb07 1416 	mls	r4, r7, r6, r1
 800b908:	3430      	adds	r4, #48	@ 0x30
 800b90a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b90e:	460c      	mov	r4, r1
 800b910:	2c63      	cmp	r4, #99	@ 0x63
 800b912:	f103 33ff 	add.w	r3, r3, #4294967295
 800b916:	4631      	mov	r1, r6
 800b918:	dcf1      	bgt.n	800b8fe <__exponent+0x1c>
 800b91a:	3130      	adds	r1, #48	@ 0x30
 800b91c:	1e94      	subs	r4, r2, #2
 800b91e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b922:	1c41      	adds	r1, r0, #1
 800b924:	4623      	mov	r3, r4
 800b926:	42ab      	cmp	r3, r5
 800b928:	d30a      	bcc.n	800b940 <__exponent+0x5e>
 800b92a:	f10d 0309 	add.w	r3, sp, #9
 800b92e:	1a9b      	subs	r3, r3, r2
 800b930:	42ac      	cmp	r4, r5
 800b932:	bf88      	it	hi
 800b934:	2300      	movhi	r3, #0
 800b936:	3302      	adds	r3, #2
 800b938:	4403      	add	r3, r0
 800b93a:	1a18      	subs	r0, r3, r0
 800b93c:	b003      	add	sp, #12
 800b93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b940:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b944:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b948:	e7ed      	b.n	800b926 <__exponent+0x44>
 800b94a:	2330      	movs	r3, #48	@ 0x30
 800b94c:	3130      	adds	r1, #48	@ 0x30
 800b94e:	7083      	strb	r3, [r0, #2]
 800b950:	70c1      	strb	r1, [r0, #3]
 800b952:	1d03      	adds	r3, r0, #4
 800b954:	e7f1      	b.n	800b93a <__exponent+0x58>
	...

0800b958 <_printf_float>:
 800b958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b95c:	b08d      	sub	sp, #52	@ 0x34
 800b95e:	460c      	mov	r4, r1
 800b960:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b964:	4616      	mov	r6, r2
 800b966:	461f      	mov	r7, r3
 800b968:	4605      	mov	r5, r0
 800b96a:	f000 ff41 	bl	800c7f0 <_localeconv_r>
 800b96e:	6803      	ldr	r3, [r0, #0]
 800b970:	9304      	str	r3, [sp, #16]
 800b972:	4618      	mov	r0, r3
 800b974:	f7f4 fc9c 	bl	80002b0 <strlen>
 800b978:	2300      	movs	r3, #0
 800b97a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b97c:	f8d8 3000 	ldr.w	r3, [r8]
 800b980:	9005      	str	r0, [sp, #20]
 800b982:	3307      	adds	r3, #7
 800b984:	f023 0307 	bic.w	r3, r3, #7
 800b988:	f103 0208 	add.w	r2, r3, #8
 800b98c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b990:	f8d4 b000 	ldr.w	fp, [r4]
 800b994:	f8c8 2000 	str.w	r2, [r8]
 800b998:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b99c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b9a0:	9307      	str	r3, [sp, #28]
 800b9a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b9aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9ae:	4b9c      	ldr	r3, [pc, #624]	@ (800bc20 <_printf_float+0x2c8>)
 800b9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b4:	f7f5 f8da 	bl	8000b6c <__aeabi_dcmpun>
 800b9b8:	bb70      	cbnz	r0, 800ba18 <_printf_float+0xc0>
 800b9ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9be:	4b98      	ldr	r3, [pc, #608]	@ (800bc20 <_printf_float+0x2c8>)
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	f7f5 f8b4 	bl	8000b30 <__aeabi_dcmple>
 800b9c8:	bb30      	cbnz	r0, 800ba18 <_printf_float+0xc0>
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	4640      	mov	r0, r8
 800b9d0:	4649      	mov	r1, r9
 800b9d2:	f7f5 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 800b9d6:	b110      	cbz	r0, 800b9de <_printf_float+0x86>
 800b9d8:	232d      	movs	r3, #45	@ 0x2d
 800b9da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b9de:	4a91      	ldr	r2, [pc, #580]	@ (800bc24 <_printf_float+0x2cc>)
 800b9e0:	4b91      	ldr	r3, [pc, #580]	@ (800bc28 <_printf_float+0x2d0>)
 800b9e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b9e6:	bf94      	ite	ls
 800b9e8:	4690      	movls	r8, r2
 800b9ea:	4698      	movhi	r8, r3
 800b9ec:	2303      	movs	r3, #3
 800b9ee:	6123      	str	r3, [r4, #16]
 800b9f0:	f02b 0304 	bic.w	r3, fp, #4
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	f04f 0900 	mov.w	r9, #0
 800b9fa:	9700      	str	r7, [sp, #0]
 800b9fc:	4633      	mov	r3, r6
 800b9fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ba00:	4621      	mov	r1, r4
 800ba02:	4628      	mov	r0, r5
 800ba04:	f000 f9d2 	bl	800bdac <_printf_common>
 800ba08:	3001      	adds	r0, #1
 800ba0a:	f040 808d 	bne.w	800bb28 <_printf_float+0x1d0>
 800ba0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba12:	b00d      	add	sp, #52	@ 0x34
 800ba14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba18:	4642      	mov	r2, r8
 800ba1a:	464b      	mov	r3, r9
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f5 f8a4 	bl	8000b6c <__aeabi_dcmpun>
 800ba24:	b140      	cbz	r0, 800ba38 <_printf_float+0xe0>
 800ba26:	464b      	mov	r3, r9
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	bfbc      	itt	lt
 800ba2c:	232d      	movlt	r3, #45	@ 0x2d
 800ba2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ba32:	4a7e      	ldr	r2, [pc, #504]	@ (800bc2c <_printf_float+0x2d4>)
 800ba34:	4b7e      	ldr	r3, [pc, #504]	@ (800bc30 <_printf_float+0x2d8>)
 800ba36:	e7d4      	b.n	800b9e2 <_printf_float+0x8a>
 800ba38:	6863      	ldr	r3, [r4, #4]
 800ba3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ba3e:	9206      	str	r2, [sp, #24]
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	d13b      	bne.n	800babc <_printf_float+0x164>
 800ba44:	2306      	movs	r3, #6
 800ba46:	6063      	str	r3, [r4, #4]
 800ba48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	6022      	str	r2, [r4, #0]
 800ba50:	9303      	str	r3, [sp, #12]
 800ba52:	ab0a      	add	r3, sp, #40	@ 0x28
 800ba54:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ba58:	ab09      	add	r3, sp, #36	@ 0x24
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	6861      	ldr	r1, [r4, #4]
 800ba5e:	ec49 8b10 	vmov	d0, r8, r9
 800ba62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ba66:	4628      	mov	r0, r5
 800ba68:	f7ff fed6 	bl	800b818 <__cvt>
 800ba6c:	9b06      	ldr	r3, [sp, #24]
 800ba6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ba70:	2b47      	cmp	r3, #71	@ 0x47
 800ba72:	4680      	mov	r8, r0
 800ba74:	d129      	bne.n	800baca <_printf_float+0x172>
 800ba76:	1cc8      	adds	r0, r1, #3
 800ba78:	db02      	blt.n	800ba80 <_printf_float+0x128>
 800ba7a:	6863      	ldr	r3, [r4, #4]
 800ba7c:	4299      	cmp	r1, r3
 800ba7e:	dd41      	ble.n	800bb04 <_printf_float+0x1ac>
 800ba80:	f1aa 0a02 	sub.w	sl, sl, #2
 800ba84:	fa5f fa8a 	uxtb.w	sl, sl
 800ba88:	3901      	subs	r1, #1
 800ba8a:	4652      	mov	r2, sl
 800ba8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ba90:	9109      	str	r1, [sp, #36]	@ 0x24
 800ba92:	f7ff ff26 	bl	800b8e2 <__exponent>
 800ba96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ba98:	1813      	adds	r3, r2, r0
 800ba9a:	2a01      	cmp	r2, #1
 800ba9c:	4681      	mov	r9, r0
 800ba9e:	6123      	str	r3, [r4, #16]
 800baa0:	dc02      	bgt.n	800baa8 <_printf_float+0x150>
 800baa2:	6822      	ldr	r2, [r4, #0]
 800baa4:	07d2      	lsls	r2, r2, #31
 800baa6:	d501      	bpl.n	800baac <_printf_float+0x154>
 800baa8:	3301      	adds	r3, #1
 800baaa:	6123      	str	r3, [r4, #16]
 800baac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0a2      	beq.n	800b9fa <_printf_float+0xa2>
 800bab4:	232d      	movs	r3, #45	@ 0x2d
 800bab6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800baba:	e79e      	b.n	800b9fa <_printf_float+0xa2>
 800babc:	9a06      	ldr	r2, [sp, #24]
 800babe:	2a47      	cmp	r2, #71	@ 0x47
 800bac0:	d1c2      	bne.n	800ba48 <_printf_float+0xf0>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1c0      	bne.n	800ba48 <_printf_float+0xf0>
 800bac6:	2301      	movs	r3, #1
 800bac8:	e7bd      	b.n	800ba46 <_printf_float+0xee>
 800baca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bace:	d9db      	bls.n	800ba88 <_printf_float+0x130>
 800bad0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bad4:	d118      	bne.n	800bb08 <_printf_float+0x1b0>
 800bad6:	2900      	cmp	r1, #0
 800bad8:	6863      	ldr	r3, [r4, #4]
 800bada:	dd0b      	ble.n	800baf4 <_printf_float+0x19c>
 800badc:	6121      	str	r1, [r4, #16]
 800bade:	b913      	cbnz	r3, 800bae6 <_printf_float+0x18e>
 800bae0:	6822      	ldr	r2, [r4, #0]
 800bae2:	07d0      	lsls	r0, r2, #31
 800bae4:	d502      	bpl.n	800baec <_printf_float+0x194>
 800bae6:	3301      	adds	r3, #1
 800bae8:	440b      	add	r3, r1
 800baea:	6123      	str	r3, [r4, #16]
 800baec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800baee:	f04f 0900 	mov.w	r9, #0
 800baf2:	e7db      	b.n	800baac <_printf_float+0x154>
 800baf4:	b913      	cbnz	r3, 800bafc <_printf_float+0x1a4>
 800baf6:	6822      	ldr	r2, [r4, #0]
 800baf8:	07d2      	lsls	r2, r2, #31
 800bafa:	d501      	bpl.n	800bb00 <_printf_float+0x1a8>
 800bafc:	3302      	adds	r3, #2
 800bafe:	e7f4      	b.n	800baea <_printf_float+0x192>
 800bb00:	2301      	movs	r3, #1
 800bb02:	e7f2      	b.n	800baea <_printf_float+0x192>
 800bb04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb0a:	4299      	cmp	r1, r3
 800bb0c:	db05      	blt.n	800bb1a <_printf_float+0x1c2>
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	6121      	str	r1, [r4, #16]
 800bb12:	07d8      	lsls	r0, r3, #31
 800bb14:	d5ea      	bpl.n	800baec <_printf_float+0x194>
 800bb16:	1c4b      	adds	r3, r1, #1
 800bb18:	e7e7      	b.n	800baea <_printf_float+0x192>
 800bb1a:	2900      	cmp	r1, #0
 800bb1c:	bfd4      	ite	le
 800bb1e:	f1c1 0202 	rsble	r2, r1, #2
 800bb22:	2201      	movgt	r2, #1
 800bb24:	4413      	add	r3, r2
 800bb26:	e7e0      	b.n	800baea <_printf_float+0x192>
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	055a      	lsls	r2, r3, #21
 800bb2c:	d407      	bmi.n	800bb3e <_printf_float+0x1e6>
 800bb2e:	6923      	ldr	r3, [r4, #16]
 800bb30:	4642      	mov	r2, r8
 800bb32:	4631      	mov	r1, r6
 800bb34:	4628      	mov	r0, r5
 800bb36:	47b8      	blx	r7
 800bb38:	3001      	adds	r0, #1
 800bb3a:	d12b      	bne.n	800bb94 <_printf_float+0x23c>
 800bb3c:	e767      	b.n	800ba0e <_printf_float+0xb6>
 800bb3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb42:	f240 80dd 	bls.w	800bd00 <_printf_float+0x3a8>
 800bb46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	f7f4 ffdb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d033      	beq.n	800bbbe <_printf_float+0x266>
 800bb56:	4a37      	ldr	r2, [pc, #220]	@ (800bc34 <_printf_float+0x2dc>)
 800bb58:	2301      	movs	r3, #1
 800bb5a:	4631      	mov	r1, r6
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	47b8      	blx	r7
 800bb60:	3001      	adds	r0, #1
 800bb62:	f43f af54 	beq.w	800ba0e <_printf_float+0xb6>
 800bb66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bb6a:	4543      	cmp	r3, r8
 800bb6c:	db02      	blt.n	800bb74 <_printf_float+0x21c>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	07d8      	lsls	r0, r3, #31
 800bb72:	d50f      	bpl.n	800bb94 <_printf_float+0x23c>
 800bb74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb78:	4631      	mov	r1, r6
 800bb7a:	4628      	mov	r0, r5
 800bb7c:	47b8      	blx	r7
 800bb7e:	3001      	adds	r0, #1
 800bb80:	f43f af45 	beq.w	800ba0e <_printf_float+0xb6>
 800bb84:	f04f 0900 	mov.w	r9, #0
 800bb88:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb8c:	f104 0a1a 	add.w	sl, r4, #26
 800bb90:	45c8      	cmp	r8, r9
 800bb92:	dc09      	bgt.n	800bba8 <_printf_float+0x250>
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	079b      	lsls	r3, r3, #30
 800bb98:	f100 8103 	bmi.w	800bda2 <_printf_float+0x44a>
 800bb9c:	68e0      	ldr	r0, [r4, #12]
 800bb9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bba0:	4298      	cmp	r0, r3
 800bba2:	bfb8      	it	lt
 800bba4:	4618      	movlt	r0, r3
 800bba6:	e734      	b.n	800ba12 <_printf_float+0xba>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	4652      	mov	r2, sl
 800bbac:	4631      	mov	r1, r6
 800bbae:	4628      	mov	r0, r5
 800bbb0:	47b8      	blx	r7
 800bbb2:	3001      	adds	r0, #1
 800bbb4:	f43f af2b 	beq.w	800ba0e <_printf_float+0xb6>
 800bbb8:	f109 0901 	add.w	r9, r9, #1
 800bbbc:	e7e8      	b.n	800bb90 <_printf_float+0x238>
 800bbbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	dc39      	bgt.n	800bc38 <_printf_float+0x2e0>
 800bbc4:	4a1b      	ldr	r2, [pc, #108]	@ (800bc34 <_printf_float+0x2dc>)
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	4631      	mov	r1, r6
 800bbca:	4628      	mov	r0, r5
 800bbcc:	47b8      	blx	r7
 800bbce:	3001      	adds	r0, #1
 800bbd0:	f43f af1d 	beq.w	800ba0e <_printf_float+0xb6>
 800bbd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bbd8:	ea59 0303 	orrs.w	r3, r9, r3
 800bbdc:	d102      	bne.n	800bbe4 <_printf_float+0x28c>
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	07d9      	lsls	r1, r3, #31
 800bbe2:	d5d7      	bpl.n	800bb94 <_printf_float+0x23c>
 800bbe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbe8:	4631      	mov	r1, r6
 800bbea:	4628      	mov	r0, r5
 800bbec:	47b8      	blx	r7
 800bbee:	3001      	adds	r0, #1
 800bbf0:	f43f af0d 	beq.w	800ba0e <_printf_float+0xb6>
 800bbf4:	f04f 0a00 	mov.w	sl, #0
 800bbf8:	f104 0b1a 	add.w	fp, r4, #26
 800bbfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbfe:	425b      	negs	r3, r3
 800bc00:	4553      	cmp	r3, sl
 800bc02:	dc01      	bgt.n	800bc08 <_printf_float+0x2b0>
 800bc04:	464b      	mov	r3, r9
 800bc06:	e793      	b.n	800bb30 <_printf_float+0x1d8>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	465a      	mov	r2, fp
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b8      	blx	r7
 800bc12:	3001      	adds	r0, #1
 800bc14:	f43f aefb 	beq.w	800ba0e <_printf_float+0xb6>
 800bc18:	f10a 0a01 	add.w	sl, sl, #1
 800bc1c:	e7ee      	b.n	800bbfc <_printf_float+0x2a4>
 800bc1e:	bf00      	nop
 800bc20:	7fefffff 	.word	0x7fefffff
 800bc24:	08012028 	.word	0x08012028
 800bc28:	0801202c 	.word	0x0801202c
 800bc2c:	08012030 	.word	0x08012030
 800bc30:	08012034 	.word	0x08012034
 800bc34:	080123c8 	.word	0x080123c8
 800bc38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bc3e:	4553      	cmp	r3, sl
 800bc40:	bfa8      	it	ge
 800bc42:	4653      	movge	r3, sl
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	4699      	mov	r9, r3
 800bc48:	dc36      	bgt.n	800bcb8 <_printf_float+0x360>
 800bc4a:	f04f 0b00 	mov.w	fp, #0
 800bc4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc52:	f104 021a 	add.w	r2, r4, #26
 800bc56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc58:	9306      	str	r3, [sp, #24]
 800bc5a:	eba3 0309 	sub.w	r3, r3, r9
 800bc5e:	455b      	cmp	r3, fp
 800bc60:	dc31      	bgt.n	800bcc6 <_printf_float+0x36e>
 800bc62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc64:	459a      	cmp	sl, r3
 800bc66:	dc3a      	bgt.n	800bcde <_printf_float+0x386>
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	07da      	lsls	r2, r3, #31
 800bc6c:	d437      	bmi.n	800bcde <_printf_float+0x386>
 800bc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc70:	ebaa 0903 	sub.w	r9, sl, r3
 800bc74:	9b06      	ldr	r3, [sp, #24]
 800bc76:	ebaa 0303 	sub.w	r3, sl, r3
 800bc7a:	4599      	cmp	r9, r3
 800bc7c:	bfa8      	it	ge
 800bc7e:	4699      	movge	r9, r3
 800bc80:	f1b9 0f00 	cmp.w	r9, #0
 800bc84:	dc33      	bgt.n	800bcee <_printf_float+0x396>
 800bc86:	f04f 0800 	mov.w	r8, #0
 800bc8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc8e:	f104 0b1a 	add.w	fp, r4, #26
 800bc92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc94:	ebaa 0303 	sub.w	r3, sl, r3
 800bc98:	eba3 0309 	sub.w	r3, r3, r9
 800bc9c:	4543      	cmp	r3, r8
 800bc9e:	f77f af79 	ble.w	800bb94 <_printf_float+0x23c>
 800bca2:	2301      	movs	r3, #1
 800bca4:	465a      	mov	r2, fp
 800bca6:	4631      	mov	r1, r6
 800bca8:	4628      	mov	r0, r5
 800bcaa:	47b8      	blx	r7
 800bcac:	3001      	adds	r0, #1
 800bcae:	f43f aeae 	beq.w	800ba0e <_printf_float+0xb6>
 800bcb2:	f108 0801 	add.w	r8, r8, #1
 800bcb6:	e7ec      	b.n	800bc92 <_printf_float+0x33a>
 800bcb8:	4642      	mov	r2, r8
 800bcba:	4631      	mov	r1, r6
 800bcbc:	4628      	mov	r0, r5
 800bcbe:	47b8      	blx	r7
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	d1c2      	bne.n	800bc4a <_printf_float+0x2f2>
 800bcc4:	e6a3      	b.n	800ba0e <_printf_float+0xb6>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4628      	mov	r0, r5
 800bccc:	9206      	str	r2, [sp, #24]
 800bcce:	47b8      	blx	r7
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	f43f ae9c 	beq.w	800ba0e <_printf_float+0xb6>
 800bcd6:	9a06      	ldr	r2, [sp, #24]
 800bcd8:	f10b 0b01 	add.w	fp, fp, #1
 800bcdc:	e7bb      	b.n	800bc56 <_printf_float+0x2fe>
 800bcde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bce2:	4631      	mov	r1, r6
 800bce4:	4628      	mov	r0, r5
 800bce6:	47b8      	blx	r7
 800bce8:	3001      	adds	r0, #1
 800bcea:	d1c0      	bne.n	800bc6e <_printf_float+0x316>
 800bcec:	e68f      	b.n	800ba0e <_printf_float+0xb6>
 800bcee:	9a06      	ldr	r2, [sp, #24]
 800bcf0:	464b      	mov	r3, r9
 800bcf2:	4442      	add	r2, r8
 800bcf4:	4631      	mov	r1, r6
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	47b8      	blx	r7
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d1c3      	bne.n	800bc86 <_printf_float+0x32e>
 800bcfe:	e686      	b.n	800ba0e <_printf_float+0xb6>
 800bd00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bd04:	f1ba 0f01 	cmp.w	sl, #1
 800bd08:	dc01      	bgt.n	800bd0e <_printf_float+0x3b6>
 800bd0a:	07db      	lsls	r3, r3, #31
 800bd0c:	d536      	bpl.n	800bd7c <_printf_float+0x424>
 800bd0e:	2301      	movs	r3, #1
 800bd10:	4642      	mov	r2, r8
 800bd12:	4631      	mov	r1, r6
 800bd14:	4628      	mov	r0, r5
 800bd16:	47b8      	blx	r7
 800bd18:	3001      	adds	r0, #1
 800bd1a:	f43f ae78 	beq.w	800ba0e <_printf_float+0xb6>
 800bd1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f43f ae70 	beq.w	800ba0e <_printf_float+0xb6>
 800bd2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd32:	2200      	movs	r2, #0
 800bd34:	2300      	movs	r3, #0
 800bd36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd3a:	f7f4 fee5 	bl	8000b08 <__aeabi_dcmpeq>
 800bd3e:	b9c0      	cbnz	r0, 800bd72 <_printf_float+0x41a>
 800bd40:	4653      	mov	r3, sl
 800bd42:	f108 0201 	add.w	r2, r8, #1
 800bd46:	4631      	mov	r1, r6
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b8      	blx	r7
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	d10c      	bne.n	800bd6a <_printf_float+0x412>
 800bd50:	e65d      	b.n	800ba0e <_printf_float+0xb6>
 800bd52:	2301      	movs	r3, #1
 800bd54:	465a      	mov	r2, fp
 800bd56:	4631      	mov	r1, r6
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b8      	blx	r7
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f43f ae56 	beq.w	800ba0e <_printf_float+0xb6>
 800bd62:	f108 0801 	add.w	r8, r8, #1
 800bd66:	45d0      	cmp	r8, sl
 800bd68:	dbf3      	blt.n	800bd52 <_printf_float+0x3fa>
 800bd6a:	464b      	mov	r3, r9
 800bd6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bd70:	e6df      	b.n	800bb32 <_printf_float+0x1da>
 800bd72:	f04f 0800 	mov.w	r8, #0
 800bd76:	f104 0b1a 	add.w	fp, r4, #26
 800bd7a:	e7f4      	b.n	800bd66 <_printf_float+0x40e>
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	4642      	mov	r2, r8
 800bd80:	e7e1      	b.n	800bd46 <_printf_float+0x3ee>
 800bd82:	2301      	movs	r3, #1
 800bd84:	464a      	mov	r2, r9
 800bd86:	4631      	mov	r1, r6
 800bd88:	4628      	mov	r0, r5
 800bd8a:	47b8      	blx	r7
 800bd8c:	3001      	adds	r0, #1
 800bd8e:	f43f ae3e 	beq.w	800ba0e <_printf_float+0xb6>
 800bd92:	f108 0801 	add.w	r8, r8, #1
 800bd96:	68e3      	ldr	r3, [r4, #12]
 800bd98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bd9a:	1a5b      	subs	r3, r3, r1
 800bd9c:	4543      	cmp	r3, r8
 800bd9e:	dcf0      	bgt.n	800bd82 <_printf_float+0x42a>
 800bda0:	e6fc      	b.n	800bb9c <_printf_float+0x244>
 800bda2:	f04f 0800 	mov.w	r8, #0
 800bda6:	f104 0919 	add.w	r9, r4, #25
 800bdaa:	e7f4      	b.n	800bd96 <_printf_float+0x43e>

0800bdac <_printf_common>:
 800bdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdb0:	4616      	mov	r6, r2
 800bdb2:	4698      	mov	r8, r3
 800bdb4:	688a      	ldr	r2, [r1, #8]
 800bdb6:	690b      	ldr	r3, [r1, #16]
 800bdb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	bfb8      	it	lt
 800bdc0:	4613      	movlt	r3, r2
 800bdc2:	6033      	str	r3, [r6, #0]
 800bdc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bdc8:	4607      	mov	r7, r0
 800bdca:	460c      	mov	r4, r1
 800bdcc:	b10a      	cbz	r2, 800bdd2 <_printf_common+0x26>
 800bdce:	3301      	adds	r3, #1
 800bdd0:	6033      	str	r3, [r6, #0]
 800bdd2:	6823      	ldr	r3, [r4, #0]
 800bdd4:	0699      	lsls	r1, r3, #26
 800bdd6:	bf42      	ittt	mi
 800bdd8:	6833      	ldrmi	r3, [r6, #0]
 800bdda:	3302      	addmi	r3, #2
 800bddc:	6033      	strmi	r3, [r6, #0]
 800bdde:	6825      	ldr	r5, [r4, #0]
 800bde0:	f015 0506 	ands.w	r5, r5, #6
 800bde4:	d106      	bne.n	800bdf4 <_printf_common+0x48>
 800bde6:	f104 0a19 	add.w	sl, r4, #25
 800bdea:	68e3      	ldr	r3, [r4, #12]
 800bdec:	6832      	ldr	r2, [r6, #0]
 800bdee:	1a9b      	subs	r3, r3, r2
 800bdf0:	42ab      	cmp	r3, r5
 800bdf2:	dc26      	bgt.n	800be42 <_printf_common+0x96>
 800bdf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bdf8:	6822      	ldr	r2, [r4, #0]
 800bdfa:	3b00      	subs	r3, #0
 800bdfc:	bf18      	it	ne
 800bdfe:	2301      	movne	r3, #1
 800be00:	0692      	lsls	r2, r2, #26
 800be02:	d42b      	bmi.n	800be5c <_printf_common+0xb0>
 800be04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be08:	4641      	mov	r1, r8
 800be0a:	4638      	mov	r0, r7
 800be0c:	47c8      	blx	r9
 800be0e:	3001      	adds	r0, #1
 800be10:	d01e      	beq.n	800be50 <_printf_common+0xa4>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	6922      	ldr	r2, [r4, #16]
 800be16:	f003 0306 	and.w	r3, r3, #6
 800be1a:	2b04      	cmp	r3, #4
 800be1c:	bf02      	ittt	eq
 800be1e:	68e5      	ldreq	r5, [r4, #12]
 800be20:	6833      	ldreq	r3, [r6, #0]
 800be22:	1aed      	subeq	r5, r5, r3
 800be24:	68a3      	ldr	r3, [r4, #8]
 800be26:	bf0c      	ite	eq
 800be28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be2c:	2500      	movne	r5, #0
 800be2e:	4293      	cmp	r3, r2
 800be30:	bfc4      	itt	gt
 800be32:	1a9b      	subgt	r3, r3, r2
 800be34:	18ed      	addgt	r5, r5, r3
 800be36:	2600      	movs	r6, #0
 800be38:	341a      	adds	r4, #26
 800be3a:	42b5      	cmp	r5, r6
 800be3c:	d11a      	bne.n	800be74 <_printf_common+0xc8>
 800be3e:	2000      	movs	r0, #0
 800be40:	e008      	b.n	800be54 <_printf_common+0xa8>
 800be42:	2301      	movs	r3, #1
 800be44:	4652      	mov	r2, sl
 800be46:	4641      	mov	r1, r8
 800be48:	4638      	mov	r0, r7
 800be4a:	47c8      	blx	r9
 800be4c:	3001      	adds	r0, #1
 800be4e:	d103      	bne.n	800be58 <_printf_common+0xac>
 800be50:	f04f 30ff 	mov.w	r0, #4294967295
 800be54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be58:	3501      	adds	r5, #1
 800be5a:	e7c6      	b.n	800bdea <_printf_common+0x3e>
 800be5c:	18e1      	adds	r1, r4, r3
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	2030      	movs	r0, #48	@ 0x30
 800be62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be66:	4422      	add	r2, r4
 800be68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be70:	3302      	adds	r3, #2
 800be72:	e7c7      	b.n	800be04 <_printf_common+0x58>
 800be74:	2301      	movs	r3, #1
 800be76:	4622      	mov	r2, r4
 800be78:	4641      	mov	r1, r8
 800be7a:	4638      	mov	r0, r7
 800be7c:	47c8      	blx	r9
 800be7e:	3001      	adds	r0, #1
 800be80:	d0e6      	beq.n	800be50 <_printf_common+0xa4>
 800be82:	3601      	adds	r6, #1
 800be84:	e7d9      	b.n	800be3a <_printf_common+0x8e>
	...

0800be88 <_printf_i>:
 800be88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be8c:	7e0f      	ldrb	r7, [r1, #24]
 800be8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be90:	2f78      	cmp	r7, #120	@ 0x78
 800be92:	4691      	mov	r9, r2
 800be94:	4680      	mov	r8, r0
 800be96:	460c      	mov	r4, r1
 800be98:	469a      	mov	sl, r3
 800be9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be9e:	d807      	bhi.n	800beb0 <_printf_i+0x28>
 800bea0:	2f62      	cmp	r7, #98	@ 0x62
 800bea2:	d80a      	bhi.n	800beba <_printf_i+0x32>
 800bea4:	2f00      	cmp	r7, #0
 800bea6:	f000 80d2 	beq.w	800c04e <_printf_i+0x1c6>
 800beaa:	2f58      	cmp	r7, #88	@ 0x58
 800beac:	f000 80b9 	beq.w	800c022 <_printf_i+0x19a>
 800beb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800beb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800beb8:	e03a      	b.n	800bf30 <_printf_i+0xa8>
 800beba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bebe:	2b15      	cmp	r3, #21
 800bec0:	d8f6      	bhi.n	800beb0 <_printf_i+0x28>
 800bec2:	a101      	add	r1, pc, #4	@ (adr r1, 800bec8 <_printf_i+0x40>)
 800bec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bec8:	0800bf21 	.word	0x0800bf21
 800becc:	0800bf35 	.word	0x0800bf35
 800bed0:	0800beb1 	.word	0x0800beb1
 800bed4:	0800beb1 	.word	0x0800beb1
 800bed8:	0800beb1 	.word	0x0800beb1
 800bedc:	0800beb1 	.word	0x0800beb1
 800bee0:	0800bf35 	.word	0x0800bf35
 800bee4:	0800beb1 	.word	0x0800beb1
 800bee8:	0800beb1 	.word	0x0800beb1
 800beec:	0800beb1 	.word	0x0800beb1
 800bef0:	0800beb1 	.word	0x0800beb1
 800bef4:	0800c035 	.word	0x0800c035
 800bef8:	0800bf5f 	.word	0x0800bf5f
 800befc:	0800bfef 	.word	0x0800bfef
 800bf00:	0800beb1 	.word	0x0800beb1
 800bf04:	0800beb1 	.word	0x0800beb1
 800bf08:	0800c057 	.word	0x0800c057
 800bf0c:	0800beb1 	.word	0x0800beb1
 800bf10:	0800bf5f 	.word	0x0800bf5f
 800bf14:	0800beb1 	.word	0x0800beb1
 800bf18:	0800beb1 	.word	0x0800beb1
 800bf1c:	0800bff7 	.word	0x0800bff7
 800bf20:	6833      	ldr	r3, [r6, #0]
 800bf22:	1d1a      	adds	r2, r3, #4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	6032      	str	r2, [r6, #0]
 800bf28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf30:	2301      	movs	r3, #1
 800bf32:	e09d      	b.n	800c070 <_printf_i+0x1e8>
 800bf34:	6833      	ldr	r3, [r6, #0]
 800bf36:	6820      	ldr	r0, [r4, #0]
 800bf38:	1d19      	adds	r1, r3, #4
 800bf3a:	6031      	str	r1, [r6, #0]
 800bf3c:	0606      	lsls	r6, r0, #24
 800bf3e:	d501      	bpl.n	800bf44 <_printf_i+0xbc>
 800bf40:	681d      	ldr	r5, [r3, #0]
 800bf42:	e003      	b.n	800bf4c <_printf_i+0xc4>
 800bf44:	0645      	lsls	r5, r0, #25
 800bf46:	d5fb      	bpl.n	800bf40 <_printf_i+0xb8>
 800bf48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf4c:	2d00      	cmp	r5, #0
 800bf4e:	da03      	bge.n	800bf58 <_printf_i+0xd0>
 800bf50:	232d      	movs	r3, #45	@ 0x2d
 800bf52:	426d      	negs	r5, r5
 800bf54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf58:	4859      	ldr	r0, [pc, #356]	@ (800c0c0 <_printf_i+0x238>)
 800bf5a:	230a      	movs	r3, #10
 800bf5c:	e011      	b.n	800bf82 <_printf_i+0xfa>
 800bf5e:	6821      	ldr	r1, [r4, #0]
 800bf60:	6833      	ldr	r3, [r6, #0]
 800bf62:	0608      	lsls	r0, r1, #24
 800bf64:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf68:	d402      	bmi.n	800bf70 <_printf_i+0xe8>
 800bf6a:	0649      	lsls	r1, r1, #25
 800bf6c:	bf48      	it	mi
 800bf6e:	b2ad      	uxthmi	r5, r5
 800bf70:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf72:	4853      	ldr	r0, [pc, #332]	@ (800c0c0 <_printf_i+0x238>)
 800bf74:	6033      	str	r3, [r6, #0]
 800bf76:	bf14      	ite	ne
 800bf78:	230a      	movne	r3, #10
 800bf7a:	2308      	moveq	r3, #8
 800bf7c:	2100      	movs	r1, #0
 800bf7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf82:	6866      	ldr	r6, [r4, #4]
 800bf84:	60a6      	str	r6, [r4, #8]
 800bf86:	2e00      	cmp	r6, #0
 800bf88:	bfa2      	ittt	ge
 800bf8a:	6821      	ldrge	r1, [r4, #0]
 800bf8c:	f021 0104 	bicge.w	r1, r1, #4
 800bf90:	6021      	strge	r1, [r4, #0]
 800bf92:	b90d      	cbnz	r5, 800bf98 <_printf_i+0x110>
 800bf94:	2e00      	cmp	r6, #0
 800bf96:	d04b      	beq.n	800c030 <_printf_i+0x1a8>
 800bf98:	4616      	mov	r6, r2
 800bf9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf9e:	fb03 5711 	mls	r7, r3, r1, r5
 800bfa2:	5dc7      	ldrb	r7, [r0, r7]
 800bfa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfa8:	462f      	mov	r7, r5
 800bfaa:	42bb      	cmp	r3, r7
 800bfac:	460d      	mov	r5, r1
 800bfae:	d9f4      	bls.n	800bf9a <_printf_i+0x112>
 800bfb0:	2b08      	cmp	r3, #8
 800bfb2:	d10b      	bne.n	800bfcc <_printf_i+0x144>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	07df      	lsls	r7, r3, #31
 800bfb8:	d508      	bpl.n	800bfcc <_printf_i+0x144>
 800bfba:	6923      	ldr	r3, [r4, #16]
 800bfbc:	6861      	ldr	r1, [r4, #4]
 800bfbe:	4299      	cmp	r1, r3
 800bfc0:	bfde      	ittt	le
 800bfc2:	2330      	movle	r3, #48	@ 0x30
 800bfc4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfc8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bfcc:	1b92      	subs	r2, r2, r6
 800bfce:	6122      	str	r2, [r4, #16]
 800bfd0:	f8cd a000 	str.w	sl, [sp]
 800bfd4:	464b      	mov	r3, r9
 800bfd6:	aa03      	add	r2, sp, #12
 800bfd8:	4621      	mov	r1, r4
 800bfda:	4640      	mov	r0, r8
 800bfdc:	f7ff fee6 	bl	800bdac <_printf_common>
 800bfe0:	3001      	adds	r0, #1
 800bfe2:	d14a      	bne.n	800c07a <_printf_i+0x1f2>
 800bfe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe8:	b004      	add	sp, #16
 800bfea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	f043 0320 	orr.w	r3, r3, #32
 800bff4:	6023      	str	r3, [r4, #0]
 800bff6:	4833      	ldr	r0, [pc, #204]	@ (800c0c4 <_printf_i+0x23c>)
 800bff8:	2778      	movs	r7, #120	@ 0x78
 800bffa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bffe:	6823      	ldr	r3, [r4, #0]
 800c000:	6831      	ldr	r1, [r6, #0]
 800c002:	061f      	lsls	r7, r3, #24
 800c004:	f851 5b04 	ldr.w	r5, [r1], #4
 800c008:	d402      	bmi.n	800c010 <_printf_i+0x188>
 800c00a:	065f      	lsls	r7, r3, #25
 800c00c:	bf48      	it	mi
 800c00e:	b2ad      	uxthmi	r5, r5
 800c010:	6031      	str	r1, [r6, #0]
 800c012:	07d9      	lsls	r1, r3, #31
 800c014:	bf44      	itt	mi
 800c016:	f043 0320 	orrmi.w	r3, r3, #32
 800c01a:	6023      	strmi	r3, [r4, #0]
 800c01c:	b11d      	cbz	r5, 800c026 <_printf_i+0x19e>
 800c01e:	2310      	movs	r3, #16
 800c020:	e7ac      	b.n	800bf7c <_printf_i+0xf4>
 800c022:	4827      	ldr	r0, [pc, #156]	@ (800c0c0 <_printf_i+0x238>)
 800c024:	e7e9      	b.n	800bffa <_printf_i+0x172>
 800c026:	6823      	ldr	r3, [r4, #0]
 800c028:	f023 0320 	bic.w	r3, r3, #32
 800c02c:	6023      	str	r3, [r4, #0]
 800c02e:	e7f6      	b.n	800c01e <_printf_i+0x196>
 800c030:	4616      	mov	r6, r2
 800c032:	e7bd      	b.n	800bfb0 <_printf_i+0x128>
 800c034:	6833      	ldr	r3, [r6, #0]
 800c036:	6825      	ldr	r5, [r4, #0]
 800c038:	6961      	ldr	r1, [r4, #20]
 800c03a:	1d18      	adds	r0, r3, #4
 800c03c:	6030      	str	r0, [r6, #0]
 800c03e:	062e      	lsls	r6, r5, #24
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	d501      	bpl.n	800c048 <_printf_i+0x1c0>
 800c044:	6019      	str	r1, [r3, #0]
 800c046:	e002      	b.n	800c04e <_printf_i+0x1c6>
 800c048:	0668      	lsls	r0, r5, #25
 800c04a:	d5fb      	bpl.n	800c044 <_printf_i+0x1bc>
 800c04c:	8019      	strh	r1, [r3, #0]
 800c04e:	2300      	movs	r3, #0
 800c050:	6123      	str	r3, [r4, #16]
 800c052:	4616      	mov	r6, r2
 800c054:	e7bc      	b.n	800bfd0 <_printf_i+0x148>
 800c056:	6833      	ldr	r3, [r6, #0]
 800c058:	1d1a      	adds	r2, r3, #4
 800c05a:	6032      	str	r2, [r6, #0]
 800c05c:	681e      	ldr	r6, [r3, #0]
 800c05e:	6862      	ldr	r2, [r4, #4]
 800c060:	2100      	movs	r1, #0
 800c062:	4630      	mov	r0, r6
 800c064:	f7f4 f8d4 	bl	8000210 <memchr>
 800c068:	b108      	cbz	r0, 800c06e <_printf_i+0x1e6>
 800c06a:	1b80      	subs	r0, r0, r6
 800c06c:	6060      	str	r0, [r4, #4]
 800c06e:	6863      	ldr	r3, [r4, #4]
 800c070:	6123      	str	r3, [r4, #16]
 800c072:	2300      	movs	r3, #0
 800c074:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c078:	e7aa      	b.n	800bfd0 <_printf_i+0x148>
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	4632      	mov	r2, r6
 800c07e:	4649      	mov	r1, r9
 800c080:	4640      	mov	r0, r8
 800c082:	47d0      	blx	sl
 800c084:	3001      	adds	r0, #1
 800c086:	d0ad      	beq.n	800bfe4 <_printf_i+0x15c>
 800c088:	6823      	ldr	r3, [r4, #0]
 800c08a:	079b      	lsls	r3, r3, #30
 800c08c:	d413      	bmi.n	800c0b6 <_printf_i+0x22e>
 800c08e:	68e0      	ldr	r0, [r4, #12]
 800c090:	9b03      	ldr	r3, [sp, #12]
 800c092:	4298      	cmp	r0, r3
 800c094:	bfb8      	it	lt
 800c096:	4618      	movlt	r0, r3
 800c098:	e7a6      	b.n	800bfe8 <_printf_i+0x160>
 800c09a:	2301      	movs	r3, #1
 800c09c:	4632      	mov	r2, r6
 800c09e:	4649      	mov	r1, r9
 800c0a0:	4640      	mov	r0, r8
 800c0a2:	47d0      	blx	sl
 800c0a4:	3001      	adds	r0, #1
 800c0a6:	d09d      	beq.n	800bfe4 <_printf_i+0x15c>
 800c0a8:	3501      	adds	r5, #1
 800c0aa:	68e3      	ldr	r3, [r4, #12]
 800c0ac:	9903      	ldr	r1, [sp, #12]
 800c0ae:	1a5b      	subs	r3, r3, r1
 800c0b0:	42ab      	cmp	r3, r5
 800c0b2:	dcf2      	bgt.n	800c09a <_printf_i+0x212>
 800c0b4:	e7eb      	b.n	800c08e <_printf_i+0x206>
 800c0b6:	2500      	movs	r5, #0
 800c0b8:	f104 0619 	add.w	r6, r4, #25
 800c0bc:	e7f5      	b.n	800c0aa <_printf_i+0x222>
 800c0be:	bf00      	nop
 800c0c0:	08012038 	.word	0x08012038
 800c0c4:	08012049 	.word	0x08012049

0800c0c8 <_scanf_float>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	b087      	sub	sp, #28
 800c0ce:	4617      	mov	r7, r2
 800c0d0:	9303      	str	r3, [sp, #12]
 800c0d2:	688b      	ldr	r3, [r1, #8]
 800c0d4:	1e5a      	subs	r2, r3, #1
 800c0d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c0da:	bf81      	itttt	hi
 800c0dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c0e0:	eb03 0b05 	addhi.w	fp, r3, r5
 800c0e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c0e8:	608b      	strhi	r3, [r1, #8]
 800c0ea:	680b      	ldr	r3, [r1, #0]
 800c0ec:	460a      	mov	r2, r1
 800c0ee:	f04f 0500 	mov.w	r5, #0
 800c0f2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c0f6:	f842 3b1c 	str.w	r3, [r2], #28
 800c0fa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c0fe:	4680      	mov	r8, r0
 800c100:	460c      	mov	r4, r1
 800c102:	bf98      	it	ls
 800c104:	f04f 0b00 	movls.w	fp, #0
 800c108:	9201      	str	r2, [sp, #4]
 800c10a:	4616      	mov	r6, r2
 800c10c:	46aa      	mov	sl, r5
 800c10e:	46a9      	mov	r9, r5
 800c110:	9502      	str	r5, [sp, #8]
 800c112:	68a2      	ldr	r2, [r4, #8]
 800c114:	b152      	cbz	r2, 800c12c <_scanf_float+0x64>
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	2b4e      	cmp	r3, #78	@ 0x4e
 800c11c:	d864      	bhi.n	800c1e8 <_scanf_float+0x120>
 800c11e:	2b40      	cmp	r3, #64	@ 0x40
 800c120:	d83c      	bhi.n	800c19c <_scanf_float+0xd4>
 800c122:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c126:	b2c8      	uxtb	r0, r1
 800c128:	280e      	cmp	r0, #14
 800c12a:	d93a      	bls.n	800c1a2 <_scanf_float+0xda>
 800c12c:	f1b9 0f00 	cmp.w	r9, #0
 800c130:	d003      	beq.n	800c13a <_scanf_float+0x72>
 800c132:	6823      	ldr	r3, [r4, #0]
 800c134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c138:	6023      	str	r3, [r4, #0]
 800c13a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c13e:	f1ba 0f01 	cmp.w	sl, #1
 800c142:	f200 8117 	bhi.w	800c374 <_scanf_float+0x2ac>
 800c146:	9b01      	ldr	r3, [sp, #4]
 800c148:	429e      	cmp	r6, r3
 800c14a:	f200 8108 	bhi.w	800c35e <_scanf_float+0x296>
 800c14e:	2001      	movs	r0, #1
 800c150:	b007      	add	sp, #28
 800c152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c156:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c15a:	2a0d      	cmp	r2, #13
 800c15c:	d8e6      	bhi.n	800c12c <_scanf_float+0x64>
 800c15e:	a101      	add	r1, pc, #4	@ (adr r1, 800c164 <_scanf_float+0x9c>)
 800c160:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c164:	0800c2ab 	.word	0x0800c2ab
 800c168:	0800c12d 	.word	0x0800c12d
 800c16c:	0800c12d 	.word	0x0800c12d
 800c170:	0800c12d 	.word	0x0800c12d
 800c174:	0800c30b 	.word	0x0800c30b
 800c178:	0800c2e3 	.word	0x0800c2e3
 800c17c:	0800c12d 	.word	0x0800c12d
 800c180:	0800c12d 	.word	0x0800c12d
 800c184:	0800c2b9 	.word	0x0800c2b9
 800c188:	0800c12d 	.word	0x0800c12d
 800c18c:	0800c12d 	.word	0x0800c12d
 800c190:	0800c12d 	.word	0x0800c12d
 800c194:	0800c12d 	.word	0x0800c12d
 800c198:	0800c271 	.word	0x0800c271
 800c19c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c1a0:	e7db      	b.n	800c15a <_scanf_float+0x92>
 800c1a2:	290e      	cmp	r1, #14
 800c1a4:	d8c2      	bhi.n	800c12c <_scanf_float+0x64>
 800c1a6:	a001      	add	r0, pc, #4	@ (adr r0, 800c1ac <_scanf_float+0xe4>)
 800c1a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c1ac:	0800c261 	.word	0x0800c261
 800c1b0:	0800c12d 	.word	0x0800c12d
 800c1b4:	0800c261 	.word	0x0800c261
 800c1b8:	0800c2f7 	.word	0x0800c2f7
 800c1bc:	0800c12d 	.word	0x0800c12d
 800c1c0:	0800c209 	.word	0x0800c209
 800c1c4:	0800c247 	.word	0x0800c247
 800c1c8:	0800c247 	.word	0x0800c247
 800c1cc:	0800c247 	.word	0x0800c247
 800c1d0:	0800c247 	.word	0x0800c247
 800c1d4:	0800c247 	.word	0x0800c247
 800c1d8:	0800c247 	.word	0x0800c247
 800c1dc:	0800c247 	.word	0x0800c247
 800c1e0:	0800c247 	.word	0x0800c247
 800c1e4:	0800c247 	.word	0x0800c247
 800c1e8:	2b6e      	cmp	r3, #110	@ 0x6e
 800c1ea:	d809      	bhi.n	800c200 <_scanf_float+0x138>
 800c1ec:	2b60      	cmp	r3, #96	@ 0x60
 800c1ee:	d8b2      	bhi.n	800c156 <_scanf_float+0x8e>
 800c1f0:	2b54      	cmp	r3, #84	@ 0x54
 800c1f2:	d07b      	beq.n	800c2ec <_scanf_float+0x224>
 800c1f4:	2b59      	cmp	r3, #89	@ 0x59
 800c1f6:	d199      	bne.n	800c12c <_scanf_float+0x64>
 800c1f8:	2d07      	cmp	r5, #7
 800c1fa:	d197      	bne.n	800c12c <_scanf_float+0x64>
 800c1fc:	2508      	movs	r5, #8
 800c1fe:	e02c      	b.n	800c25a <_scanf_float+0x192>
 800c200:	2b74      	cmp	r3, #116	@ 0x74
 800c202:	d073      	beq.n	800c2ec <_scanf_float+0x224>
 800c204:	2b79      	cmp	r3, #121	@ 0x79
 800c206:	e7f6      	b.n	800c1f6 <_scanf_float+0x12e>
 800c208:	6821      	ldr	r1, [r4, #0]
 800c20a:	05c8      	lsls	r0, r1, #23
 800c20c:	d51b      	bpl.n	800c246 <_scanf_float+0x17e>
 800c20e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c212:	6021      	str	r1, [r4, #0]
 800c214:	f109 0901 	add.w	r9, r9, #1
 800c218:	f1bb 0f00 	cmp.w	fp, #0
 800c21c:	d003      	beq.n	800c226 <_scanf_float+0x15e>
 800c21e:	3201      	adds	r2, #1
 800c220:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c224:	60a2      	str	r2, [r4, #8]
 800c226:	68a3      	ldr	r3, [r4, #8]
 800c228:	3b01      	subs	r3, #1
 800c22a:	60a3      	str	r3, [r4, #8]
 800c22c:	6923      	ldr	r3, [r4, #16]
 800c22e:	3301      	adds	r3, #1
 800c230:	6123      	str	r3, [r4, #16]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	3b01      	subs	r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	607b      	str	r3, [r7, #4]
 800c23a:	f340 8087 	ble.w	800c34c <_scanf_float+0x284>
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	3301      	adds	r3, #1
 800c242:	603b      	str	r3, [r7, #0]
 800c244:	e765      	b.n	800c112 <_scanf_float+0x4a>
 800c246:	eb1a 0105 	adds.w	r1, sl, r5
 800c24a:	f47f af6f 	bne.w	800c12c <_scanf_float+0x64>
 800c24e:	6822      	ldr	r2, [r4, #0]
 800c250:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c254:	6022      	str	r2, [r4, #0]
 800c256:	460d      	mov	r5, r1
 800c258:	468a      	mov	sl, r1
 800c25a:	f806 3b01 	strb.w	r3, [r6], #1
 800c25e:	e7e2      	b.n	800c226 <_scanf_float+0x15e>
 800c260:	6822      	ldr	r2, [r4, #0]
 800c262:	0610      	lsls	r0, r2, #24
 800c264:	f57f af62 	bpl.w	800c12c <_scanf_float+0x64>
 800c268:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c26c:	6022      	str	r2, [r4, #0]
 800c26e:	e7f4      	b.n	800c25a <_scanf_float+0x192>
 800c270:	f1ba 0f00 	cmp.w	sl, #0
 800c274:	d10e      	bne.n	800c294 <_scanf_float+0x1cc>
 800c276:	f1b9 0f00 	cmp.w	r9, #0
 800c27a:	d10e      	bne.n	800c29a <_scanf_float+0x1d2>
 800c27c:	6822      	ldr	r2, [r4, #0]
 800c27e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c282:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c286:	d108      	bne.n	800c29a <_scanf_float+0x1d2>
 800c288:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c28c:	6022      	str	r2, [r4, #0]
 800c28e:	f04f 0a01 	mov.w	sl, #1
 800c292:	e7e2      	b.n	800c25a <_scanf_float+0x192>
 800c294:	f1ba 0f02 	cmp.w	sl, #2
 800c298:	d055      	beq.n	800c346 <_scanf_float+0x27e>
 800c29a:	2d01      	cmp	r5, #1
 800c29c:	d002      	beq.n	800c2a4 <_scanf_float+0x1dc>
 800c29e:	2d04      	cmp	r5, #4
 800c2a0:	f47f af44 	bne.w	800c12c <_scanf_float+0x64>
 800c2a4:	3501      	adds	r5, #1
 800c2a6:	b2ed      	uxtb	r5, r5
 800c2a8:	e7d7      	b.n	800c25a <_scanf_float+0x192>
 800c2aa:	f1ba 0f01 	cmp.w	sl, #1
 800c2ae:	f47f af3d 	bne.w	800c12c <_scanf_float+0x64>
 800c2b2:	f04f 0a02 	mov.w	sl, #2
 800c2b6:	e7d0      	b.n	800c25a <_scanf_float+0x192>
 800c2b8:	b97d      	cbnz	r5, 800c2da <_scanf_float+0x212>
 800c2ba:	f1b9 0f00 	cmp.w	r9, #0
 800c2be:	f47f af38 	bne.w	800c132 <_scanf_float+0x6a>
 800c2c2:	6822      	ldr	r2, [r4, #0]
 800c2c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c2c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c2cc:	f040 8108 	bne.w	800c4e0 <_scanf_float+0x418>
 800c2d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c2d4:	6022      	str	r2, [r4, #0]
 800c2d6:	2501      	movs	r5, #1
 800c2d8:	e7bf      	b.n	800c25a <_scanf_float+0x192>
 800c2da:	2d03      	cmp	r5, #3
 800c2dc:	d0e2      	beq.n	800c2a4 <_scanf_float+0x1dc>
 800c2de:	2d05      	cmp	r5, #5
 800c2e0:	e7de      	b.n	800c2a0 <_scanf_float+0x1d8>
 800c2e2:	2d02      	cmp	r5, #2
 800c2e4:	f47f af22 	bne.w	800c12c <_scanf_float+0x64>
 800c2e8:	2503      	movs	r5, #3
 800c2ea:	e7b6      	b.n	800c25a <_scanf_float+0x192>
 800c2ec:	2d06      	cmp	r5, #6
 800c2ee:	f47f af1d 	bne.w	800c12c <_scanf_float+0x64>
 800c2f2:	2507      	movs	r5, #7
 800c2f4:	e7b1      	b.n	800c25a <_scanf_float+0x192>
 800c2f6:	6822      	ldr	r2, [r4, #0]
 800c2f8:	0591      	lsls	r1, r2, #22
 800c2fa:	f57f af17 	bpl.w	800c12c <_scanf_float+0x64>
 800c2fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c302:	6022      	str	r2, [r4, #0]
 800c304:	f8cd 9008 	str.w	r9, [sp, #8]
 800c308:	e7a7      	b.n	800c25a <_scanf_float+0x192>
 800c30a:	6822      	ldr	r2, [r4, #0]
 800c30c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c310:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c314:	d006      	beq.n	800c324 <_scanf_float+0x25c>
 800c316:	0550      	lsls	r0, r2, #21
 800c318:	f57f af08 	bpl.w	800c12c <_scanf_float+0x64>
 800c31c:	f1b9 0f00 	cmp.w	r9, #0
 800c320:	f000 80de 	beq.w	800c4e0 <_scanf_float+0x418>
 800c324:	0591      	lsls	r1, r2, #22
 800c326:	bf58      	it	pl
 800c328:	9902      	ldrpl	r1, [sp, #8]
 800c32a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c32e:	bf58      	it	pl
 800c330:	eba9 0101 	subpl.w	r1, r9, r1
 800c334:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c338:	bf58      	it	pl
 800c33a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c33e:	6022      	str	r2, [r4, #0]
 800c340:	f04f 0900 	mov.w	r9, #0
 800c344:	e789      	b.n	800c25a <_scanf_float+0x192>
 800c346:	f04f 0a03 	mov.w	sl, #3
 800c34a:	e786      	b.n	800c25a <_scanf_float+0x192>
 800c34c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c350:	4639      	mov	r1, r7
 800c352:	4640      	mov	r0, r8
 800c354:	4798      	blx	r3
 800c356:	2800      	cmp	r0, #0
 800c358:	f43f aedb 	beq.w	800c112 <_scanf_float+0x4a>
 800c35c:	e6e6      	b.n	800c12c <_scanf_float+0x64>
 800c35e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c362:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c366:	463a      	mov	r2, r7
 800c368:	4640      	mov	r0, r8
 800c36a:	4798      	blx	r3
 800c36c:	6923      	ldr	r3, [r4, #16]
 800c36e:	3b01      	subs	r3, #1
 800c370:	6123      	str	r3, [r4, #16]
 800c372:	e6e8      	b.n	800c146 <_scanf_float+0x7e>
 800c374:	1e6b      	subs	r3, r5, #1
 800c376:	2b06      	cmp	r3, #6
 800c378:	d824      	bhi.n	800c3c4 <_scanf_float+0x2fc>
 800c37a:	2d02      	cmp	r5, #2
 800c37c:	d836      	bhi.n	800c3ec <_scanf_float+0x324>
 800c37e:	9b01      	ldr	r3, [sp, #4]
 800c380:	429e      	cmp	r6, r3
 800c382:	f67f aee4 	bls.w	800c14e <_scanf_float+0x86>
 800c386:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c38a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c38e:	463a      	mov	r2, r7
 800c390:	4640      	mov	r0, r8
 800c392:	4798      	blx	r3
 800c394:	6923      	ldr	r3, [r4, #16]
 800c396:	3b01      	subs	r3, #1
 800c398:	6123      	str	r3, [r4, #16]
 800c39a:	e7f0      	b.n	800c37e <_scanf_float+0x2b6>
 800c39c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3a0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c3a4:	463a      	mov	r2, r7
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	4798      	blx	r3
 800c3aa:	6923      	ldr	r3, [r4, #16]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	6123      	str	r3, [r4, #16]
 800c3b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3b4:	fa5f fa8a 	uxtb.w	sl, sl
 800c3b8:	f1ba 0f02 	cmp.w	sl, #2
 800c3bc:	d1ee      	bne.n	800c39c <_scanf_float+0x2d4>
 800c3be:	3d03      	subs	r5, #3
 800c3c0:	b2ed      	uxtb	r5, r5
 800c3c2:	1b76      	subs	r6, r6, r5
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	05da      	lsls	r2, r3, #23
 800c3c8:	d530      	bpl.n	800c42c <_scanf_float+0x364>
 800c3ca:	055b      	lsls	r3, r3, #21
 800c3cc:	d511      	bpl.n	800c3f2 <_scanf_float+0x32a>
 800c3ce:	9b01      	ldr	r3, [sp, #4]
 800c3d0:	429e      	cmp	r6, r3
 800c3d2:	f67f aebc 	bls.w	800c14e <_scanf_float+0x86>
 800c3d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c3da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3de:	463a      	mov	r2, r7
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	4798      	blx	r3
 800c3e4:	6923      	ldr	r3, [r4, #16]
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	6123      	str	r3, [r4, #16]
 800c3ea:	e7f0      	b.n	800c3ce <_scanf_float+0x306>
 800c3ec:	46aa      	mov	sl, r5
 800c3ee:	46b3      	mov	fp, r6
 800c3f0:	e7de      	b.n	800c3b0 <_scanf_float+0x2e8>
 800c3f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c3f6:	6923      	ldr	r3, [r4, #16]
 800c3f8:	2965      	cmp	r1, #101	@ 0x65
 800c3fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800c3fe:	f106 35ff 	add.w	r5, r6, #4294967295
 800c402:	6123      	str	r3, [r4, #16]
 800c404:	d00c      	beq.n	800c420 <_scanf_float+0x358>
 800c406:	2945      	cmp	r1, #69	@ 0x45
 800c408:	d00a      	beq.n	800c420 <_scanf_float+0x358>
 800c40a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c40e:	463a      	mov	r2, r7
 800c410:	4640      	mov	r0, r8
 800c412:	4798      	blx	r3
 800c414:	6923      	ldr	r3, [r4, #16]
 800c416:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c41a:	3b01      	subs	r3, #1
 800c41c:	1eb5      	subs	r5, r6, #2
 800c41e:	6123      	str	r3, [r4, #16]
 800c420:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c424:	463a      	mov	r2, r7
 800c426:	4640      	mov	r0, r8
 800c428:	4798      	blx	r3
 800c42a:	462e      	mov	r6, r5
 800c42c:	6822      	ldr	r2, [r4, #0]
 800c42e:	f012 0210 	ands.w	r2, r2, #16
 800c432:	d001      	beq.n	800c438 <_scanf_float+0x370>
 800c434:	2000      	movs	r0, #0
 800c436:	e68b      	b.n	800c150 <_scanf_float+0x88>
 800c438:	7032      	strb	r2, [r6, #0]
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c444:	d11c      	bne.n	800c480 <_scanf_float+0x3b8>
 800c446:	9b02      	ldr	r3, [sp, #8]
 800c448:	454b      	cmp	r3, r9
 800c44a:	eba3 0209 	sub.w	r2, r3, r9
 800c44e:	d123      	bne.n	800c498 <_scanf_float+0x3d0>
 800c450:	9901      	ldr	r1, [sp, #4]
 800c452:	2200      	movs	r2, #0
 800c454:	4640      	mov	r0, r8
 800c456:	f002 fbbb 	bl	800ebd0 <_strtod_r>
 800c45a:	9b03      	ldr	r3, [sp, #12]
 800c45c:	6821      	ldr	r1, [r4, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f011 0f02 	tst.w	r1, #2
 800c464:	ec57 6b10 	vmov	r6, r7, d0
 800c468:	f103 0204 	add.w	r2, r3, #4
 800c46c:	d01f      	beq.n	800c4ae <_scanf_float+0x3e6>
 800c46e:	9903      	ldr	r1, [sp, #12]
 800c470:	600a      	str	r2, [r1, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	e9c3 6700 	strd	r6, r7, [r3]
 800c478:	68e3      	ldr	r3, [r4, #12]
 800c47a:	3301      	adds	r3, #1
 800c47c:	60e3      	str	r3, [r4, #12]
 800c47e:	e7d9      	b.n	800c434 <_scanf_float+0x36c>
 800c480:	9b04      	ldr	r3, [sp, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d0e4      	beq.n	800c450 <_scanf_float+0x388>
 800c486:	9905      	ldr	r1, [sp, #20]
 800c488:	230a      	movs	r3, #10
 800c48a:	3101      	adds	r1, #1
 800c48c:	4640      	mov	r0, r8
 800c48e:	f002 fc1f 	bl	800ecd0 <_strtol_r>
 800c492:	9b04      	ldr	r3, [sp, #16]
 800c494:	9e05      	ldr	r6, [sp, #20]
 800c496:	1ac2      	subs	r2, r0, r3
 800c498:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c49c:	429e      	cmp	r6, r3
 800c49e:	bf28      	it	cs
 800c4a0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c4a4:	4910      	ldr	r1, [pc, #64]	@ (800c4e8 <_scanf_float+0x420>)
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f000 f8e4 	bl	800c674 <siprintf>
 800c4ac:	e7d0      	b.n	800c450 <_scanf_float+0x388>
 800c4ae:	f011 0f04 	tst.w	r1, #4
 800c4b2:	9903      	ldr	r1, [sp, #12]
 800c4b4:	600a      	str	r2, [r1, #0]
 800c4b6:	d1dc      	bne.n	800c472 <_scanf_float+0x3aa>
 800c4b8:	681d      	ldr	r5, [r3, #0]
 800c4ba:	4632      	mov	r2, r6
 800c4bc:	463b      	mov	r3, r7
 800c4be:	4630      	mov	r0, r6
 800c4c0:	4639      	mov	r1, r7
 800c4c2:	f7f4 fb53 	bl	8000b6c <__aeabi_dcmpun>
 800c4c6:	b128      	cbz	r0, 800c4d4 <_scanf_float+0x40c>
 800c4c8:	4808      	ldr	r0, [pc, #32]	@ (800c4ec <_scanf_float+0x424>)
 800c4ca:	f000 fa27 	bl	800c91c <nanf>
 800c4ce:	ed85 0a00 	vstr	s0, [r5]
 800c4d2:	e7d1      	b.n	800c478 <_scanf_float+0x3b0>
 800c4d4:	4630      	mov	r0, r6
 800c4d6:	4639      	mov	r1, r7
 800c4d8:	f7f4 fba6 	bl	8000c28 <__aeabi_d2f>
 800c4dc:	6028      	str	r0, [r5, #0]
 800c4de:	e7cb      	b.n	800c478 <_scanf_float+0x3b0>
 800c4e0:	f04f 0900 	mov.w	r9, #0
 800c4e4:	e629      	b.n	800c13a <_scanf_float+0x72>
 800c4e6:	bf00      	nop
 800c4e8:	0801205a 	.word	0x0801205a
 800c4ec:	08012410 	.word	0x08012410

0800c4f0 <std>:
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	b510      	push	{r4, lr}
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	e9c0 3300 	strd	r3, r3, [r0]
 800c4fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4fe:	6083      	str	r3, [r0, #8]
 800c500:	8181      	strh	r1, [r0, #12]
 800c502:	6643      	str	r3, [r0, #100]	@ 0x64
 800c504:	81c2      	strh	r2, [r0, #14]
 800c506:	6183      	str	r3, [r0, #24]
 800c508:	4619      	mov	r1, r3
 800c50a:	2208      	movs	r2, #8
 800c50c:	305c      	adds	r0, #92	@ 0x5c
 800c50e:	f000 f950 	bl	800c7b2 <memset>
 800c512:	4b0d      	ldr	r3, [pc, #52]	@ (800c548 <std+0x58>)
 800c514:	6263      	str	r3, [r4, #36]	@ 0x24
 800c516:	4b0d      	ldr	r3, [pc, #52]	@ (800c54c <std+0x5c>)
 800c518:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c51a:	4b0d      	ldr	r3, [pc, #52]	@ (800c550 <std+0x60>)
 800c51c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c51e:	4b0d      	ldr	r3, [pc, #52]	@ (800c554 <std+0x64>)
 800c520:	6323      	str	r3, [r4, #48]	@ 0x30
 800c522:	4b0d      	ldr	r3, [pc, #52]	@ (800c558 <std+0x68>)
 800c524:	6224      	str	r4, [r4, #32]
 800c526:	429c      	cmp	r4, r3
 800c528:	d006      	beq.n	800c538 <std+0x48>
 800c52a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c52e:	4294      	cmp	r4, r2
 800c530:	d002      	beq.n	800c538 <std+0x48>
 800c532:	33d0      	adds	r3, #208	@ 0xd0
 800c534:	429c      	cmp	r4, r3
 800c536:	d105      	bne.n	800c544 <std+0x54>
 800c538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c540:	f000 b9da 	b.w	800c8f8 <__retarget_lock_init_recursive>
 800c544:	bd10      	pop	{r4, pc}
 800c546:	bf00      	nop
 800c548:	0800c709 	.word	0x0800c709
 800c54c:	0800c72f 	.word	0x0800c72f
 800c550:	0800c767 	.word	0x0800c767
 800c554:	0800c78b 	.word	0x0800c78b
 800c558:	2000166c 	.word	0x2000166c

0800c55c <stdio_exit_handler>:
 800c55c:	4a02      	ldr	r2, [pc, #8]	@ (800c568 <stdio_exit_handler+0xc>)
 800c55e:	4903      	ldr	r1, [pc, #12]	@ (800c56c <stdio_exit_handler+0x10>)
 800c560:	4803      	ldr	r0, [pc, #12]	@ (800c570 <stdio_exit_handler+0x14>)
 800c562:	f000 b869 	b.w	800c638 <_fwalk_sglue>
 800c566:	bf00      	nop
 800c568:	20000038 	.word	0x20000038
 800c56c:	0800f6c1 	.word	0x0800f6c1
 800c570:	20000048 	.word	0x20000048

0800c574 <cleanup_stdio>:
 800c574:	6841      	ldr	r1, [r0, #4]
 800c576:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a8 <cleanup_stdio+0x34>)
 800c578:	4299      	cmp	r1, r3
 800c57a:	b510      	push	{r4, lr}
 800c57c:	4604      	mov	r4, r0
 800c57e:	d001      	beq.n	800c584 <cleanup_stdio+0x10>
 800c580:	f003 f89e 	bl	800f6c0 <_fflush_r>
 800c584:	68a1      	ldr	r1, [r4, #8]
 800c586:	4b09      	ldr	r3, [pc, #36]	@ (800c5ac <cleanup_stdio+0x38>)
 800c588:	4299      	cmp	r1, r3
 800c58a:	d002      	beq.n	800c592 <cleanup_stdio+0x1e>
 800c58c:	4620      	mov	r0, r4
 800c58e:	f003 f897 	bl	800f6c0 <_fflush_r>
 800c592:	68e1      	ldr	r1, [r4, #12]
 800c594:	4b06      	ldr	r3, [pc, #24]	@ (800c5b0 <cleanup_stdio+0x3c>)
 800c596:	4299      	cmp	r1, r3
 800c598:	d004      	beq.n	800c5a4 <cleanup_stdio+0x30>
 800c59a:	4620      	mov	r0, r4
 800c59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5a0:	f003 b88e 	b.w	800f6c0 <_fflush_r>
 800c5a4:	bd10      	pop	{r4, pc}
 800c5a6:	bf00      	nop
 800c5a8:	2000166c 	.word	0x2000166c
 800c5ac:	200016d4 	.word	0x200016d4
 800c5b0:	2000173c 	.word	0x2000173c

0800c5b4 <global_stdio_init.part.0>:
 800c5b4:	b510      	push	{r4, lr}
 800c5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e4 <global_stdio_init.part.0+0x30>)
 800c5b8:	4c0b      	ldr	r4, [pc, #44]	@ (800c5e8 <global_stdio_init.part.0+0x34>)
 800c5ba:	4a0c      	ldr	r2, [pc, #48]	@ (800c5ec <global_stdio_init.part.0+0x38>)
 800c5bc:	601a      	str	r2, [r3, #0]
 800c5be:	4620      	mov	r0, r4
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2104      	movs	r1, #4
 800c5c4:	f7ff ff94 	bl	800c4f0 <std>
 800c5c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	2109      	movs	r1, #9
 800c5d0:	f7ff ff8e 	bl	800c4f0 <std>
 800c5d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c5d8:	2202      	movs	r2, #2
 800c5da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5de:	2112      	movs	r1, #18
 800c5e0:	f7ff bf86 	b.w	800c4f0 <std>
 800c5e4:	200017a4 	.word	0x200017a4
 800c5e8:	2000166c 	.word	0x2000166c
 800c5ec:	0800c55d 	.word	0x0800c55d

0800c5f0 <__sfp_lock_acquire>:
 800c5f0:	4801      	ldr	r0, [pc, #4]	@ (800c5f8 <__sfp_lock_acquire+0x8>)
 800c5f2:	f000 b982 	b.w	800c8fa <__retarget_lock_acquire_recursive>
 800c5f6:	bf00      	nop
 800c5f8:	200017ad 	.word	0x200017ad

0800c5fc <__sfp_lock_release>:
 800c5fc:	4801      	ldr	r0, [pc, #4]	@ (800c604 <__sfp_lock_release+0x8>)
 800c5fe:	f000 b97d 	b.w	800c8fc <__retarget_lock_release_recursive>
 800c602:	bf00      	nop
 800c604:	200017ad 	.word	0x200017ad

0800c608 <__sinit>:
 800c608:	b510      	push	{r4, lr}
 800c60a:	4604      	mov	r4, r0
 800c60c:	f7ff fff0 	bl	800c5f0 <__sfp_lock_acquire>
 800c610:	6a23      	ldr	r3, [r4, #32]
 800c612:	b11b      	cbz	r3, 800c61c <__sinit+0x14>
 800c614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c618:	f7ff bff0 	b.w	800c5fc <__sfp_lock_release>
 800c61c:	4b04      	ldr	r3, [pc, #16]	@ (800c630 <__sinit+0x28>)
 800c61e:	6223      	str	r3, [r4, #32]
 800c620:	4b04      	ldr	r3, [pc, #16]	@ (800c634 <__sinit+0x2c>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d1f5      	bne.n	800c614 <__sinit+0xc>
 800c628:	f7ff ffc4 	bl	800c5b4 <global_stdio_init.part.0>
 800c62c:	e7f2      	b.n	800c614 <__sinit+0xc>
 800c62e:	bf00      	nop
 800c630:	0800c575 	.word	0x0800c575
 800c634:	200017a4 	.word	0x200017a4

0800c638 <_fwalk_sglue>:
 800c638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c63c:	4607      	mov	r7, r0
 800c63e:	4688      	mov	r8, r1
 800c640:	4614      	mov	r4, r2
 800c642:	2600      	movs	r6, #0
 800c644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c648:	f1b9 0901 	subs.w	r9, r9, #1
 800c64c:	d505      	bpl.n	800c65a <_fwalk_sglue+0x22>
 800c64e:	6824      	ldr	r4, [r4, #0]
 800c650:	2c00      	cmp	r4, #0
 800c652:	d1f7      	bne.n	800c644 <_fwalk_sglue+0xc>
 800c654:	4630      	mov	r0, r6
 800c656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c65a:	89ab      	ldrh	r3, [r5, #12]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d907      	bls.n	800c670 <_fwalk_sglue+0x38>
 800c660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c664:	3301      	adds	r3, #1
 800c666:	d003      	beq.n	800c670 <_fwalk_sglue+0x38>
 800c668:	4629      	mov	r1, r5
 800c66a:	4638      	mov	r0, r7
 800c66c:	47c0      	blx	r8
 800c66e:	4306      	orrs	r6, r0
 800c670:	3568      	adds	r5, #104	@ 0x68
 800c672:	e7e9      	b.n	800c648 <_fwalk_sglue+0x10>

0800c674 <siprintf>:
 800c674:	b40e      	push	{r1, r2, r3}
 800c676:	b500      	push	{lr}
 800c678:	b09c      	sub	sp, #112	@ 0x70
 800c67a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c67c:	9002      	str	r0, [sp, #8]
 800c67e:	9006      	str	r0, [sp, #24]
 800c680:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c684:	4809      	ldr	r0, [pc, #36]	@ (800c6ac <siprintf+0x38>)
 800c686:	9107      	str	r1, [sp, #28]
 800c688:	9104      	str	r1, [sp, #16]
 800c68a:	4909      	ldr	r1, [pc, #36]	@ (800c6b0 <siprintf+0x3c>)
 800c68c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c690:	9105      	str	r1, [sp, #20]
 800c692:	6800      	ldr	r0, [r0, #0]
 800c694:	9301      	str	r3, [sp, #4]
 800c696:	a902      	add	r1, sp, #8
 800c698:	f002 fb78 	bl	800ed8c <_svfiprintf_r>
 800c69c:	9b02      	ldr	r3, [sp, #8]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	701a      	strb	r2, [r3, #0]
 800c6a2:	b01c      	add	sp, #112	@ 0x70
 800c6a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6a8:	b003      	add	sp, #12
 800c6aa:	4770      	bx	lr
 800c6ac:	20000044 	.word	0x20000044
 800c6b0:	ffff0208 	.word	0xffff0208

0800c6b4 <siscanf>:
 800c6b4:	b40e      	push	{r1, r2, r3}
 800c6b6:	b530      	push	{r4, r5, lr}
 800c6b8:	b09c      	sub	sp, #112	@ 0x70
 800c6ba:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c6bc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c6c0:	f854 5b04 	ldr.w	r5, [r4], #4
 800c6c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c6c8:	9002      	str	r0, [sp, #8]
 800c6ca:	9006      	str	r0, [sp, #24]
 800c6cc:	f7f3 fdf0 	bl	80002b0 <strlen>
 800c6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800c700 <siscanf+0x4c>)
 800c6d2:	9003      	str	r0, [sp, #12]
 800c6d4:	9007      	str	r0, [sp, #28]
 800c6d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6d8:	480a      	ldr	r0, [pc, #40]	@ (800c704 <siscanf+0x50>)
 800c6da:	9401      	str	r4, [sp, #4]
 800c6dc:	2300      	movs	r3, #0
 800c6de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6e0:	9314      	str	r3, [sp, #80]	@ 0x50
 800c6e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c6e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c6ea:	462a      	mov	r2, r5
 800c6ec:	4623      	mov	r3, r4
 800c6ee:	a902      	add	r1, sp, #8
 800c6f0:	6800      	ldr	r0, [r0, #0]
 800c6f2:	f002 fc9f 	bl	800f034 <__ssvfiscanf_r>
 800c6f6:	b01c      	add	sp, #112	@ 0x70
 800c6f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c6fc:	b003      	add	sp, #12
 800c6fe:	4770      	bx	lr
 800c700:	0800c72b 	.word	0x0800c72b
 800c704:	20000044 	.word	0x20000044

0800c708 <__sread>:
 800c708:	b510      	push	{r4, lr}
 800c70a:	460c      	mov	r4, r1
 800c70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c710:	f000 f894 	bl	800c83c <_read_r>
 800c714:	2800      	cmp	r0, #0
 800c716:	bfab      	itete	ge
 800c718:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c71a:	89a3      	ldrhlt	r3, [r4, #12]
 800c71c:	181b      	addge	r3, r3, r0
 800c71e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c722:	bfac      	ite	ge
 800c724:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c726:	81a3      	strhlt	r3, [r4, #12]
 800c728:	bd10      	pop	{r4, pc}

0800c72a <__seofread>:
 800c72a:	2000      	movs	r0, #0
 800c72c:	4770      	bx	lr

0800c72e <__swrite>:
 800c72e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c732:	461f      	mov	r7, r3
 800c734:	898b      	ldrh	r3, [r1, #12]
 800c736:	05db      	lsls	r3, r3, #23
 800c738:	4605      	mov	r5, r0
 800c73a:	460c      	mov	r4, r1
 800c73c:	4616      	mov	r6, r2
 800c73e:	d505      	bpl.n	800c74c <__swrite+0x1e>
 800c740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c744:	2302      	movs	r3, #2
 800c746:	2200      	movs	r2, #0
 800c748:	f000 f866 	bl	800c818 <_lseek_r>
 800c74c:	89a3      	ldrh	r3, [r4, #12]
 800c74e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c752:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c756:	81a3      	strh	r3, [r4, #12]
 800c758:	4632      	mov	r2, r6
 800c75a:	463b      	mov	r3, r7
 800c75c:	4628      	mov	r0, r5
 800c75e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c762:	f000 b88d 	b.w	800c880 <_write_r>

0800c766 <__sseek>:
 800c766:	b510      	push	{r4, lr}
 800c768:	460c      	mov	r4, r1
 800c76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c76e:	f000 f853 	bl	800c818 <_lseek_r>
 800c772:	1c43      	adds	r3, r0, #1
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	bf15      	itete	ne
 800c778:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c77a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c77e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c782:	81a3      	strheq	r3, [r4, #12]
 800c784:	bf18      	it	ne
 800c786:	81a3      	strhne	r3, [r4, #12]
 800c788:	bd10      	pop	{r4, pc}

0800c78a <__sclose>:
 800c78a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c78e:	f000 b833 	b.w	800c7f8 <_close_r>

0800c792 <memcmp>:
 800c792:	b510      	push	{r4, lr}
 800c794:	3901      	subs	r1, #1
 800c796:	4402      	add	r2, r0
 800c798:	4290      	cmp	r0, r2
 800c79a:	d101      	bne.n	800c7a0 <memcmp+0xe>
 800c79c:	2000      	movs	r0, #0
 800c79e:	e005      	b.n	800c7ac <memcmp+0x1a>
 800c7a0:	7803      	ldrb	r3, [r0, #0]
 800c7a2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c7a6:	42a3      	cmp	r3, r4
 800c7a8:	d001      	beq.n	800c7ae <memcmp+0x1c>
 800c7aa:	1b18      	subs	r0, r3, r4
 800c7ac:	bd10      	pop	{r4, pc}
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	e7f2      	b.n	800c798 <memcmp+0x6>

0800c7b2 <memset>:
 800c7b2:	4402      	add	r2, r0
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d100      	bne.n	800c7bc <memset+0xa>
 800c7ba:	4770      	bx	lr
 800c7bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c7c0:	e7f9      	b.n	800c7b6 <memset+0x4>

0800c7c2 <strstr>:
 800c7c2:	780a      	ldrb	r2, [r1, #0]
 800c7c4:	b570      	push	{r4, r5, r6, lr}
 800c7c6:	b96a      	cbnz	r2, 800c7e4 <strstr+0x22>
 800c7c8:	bd70      	pop	{r4, r5, r6, pc}
 800c7ca:	429a      	cmp	r2, r3
 800c7cc:	d109      	bne.n	800c7e2 <strstr+0x20>
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	4605      	mov	r5, r0
 800c7d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d0f6      	beq.n	800c7c8 <strstr+0x6>
 800c7da:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c7de:	429e      	cmp	r6, r3
 800c7e0:	d0f7      	beq.n	800c7d2 <strstr+0x10>
 800c7e2:	3001      	adds	r0, #1
 800c7e4:	7803      	ldrb	r3, [r0, #0]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1ef      	bne.n	800c7ca <strstr+0x8>
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	e7ec      	b.n	800c7c8 <strstr+0x6>
	...

0800c7f0 <_localeconv_r>:
 800c7f0:	4800      	ldr	r0, [pc, #0]	@ (800c7f4 <_localeconv_r+0x4>)
 800c7f2:	4770      	bx	lr
 800c7f4:	20000184 	.word	0x20000184

0800c7f8 <_close_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4d06      	ldr	r5, [pc, #24]	@ (800c814 <_close_r+0x1c>)
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4604      	mov	r4, r0
 800c800:	4608      	mov	r0, r1
 800c802:	602b      	str	r3, [r5, #0]
 800c804:	f7f9 fbe0 	bl	8005fc8 <_close>
 800c808:	1c43      	adds	r3, r0, #1
 800c80a:	d102      	bne.n	800c812 <_close_r+0x1a>
 800c80c:	682b      	ldr	r3, [r5, #0]
 800c80e:	b103      	cbz	r3, 800c812 <_close_r+0x1a>
 800c810:	6023      	str	r3, [r4, #0]
 800c812:	bd38      	pop	{r3, r4, r5, pc}
 800c814:	200017a8 	.word	0x200017a8

0800c818 <_lseek_r>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	4d07      	ldr	r5, [pc, #28]	@ (800c838 <_lseek_r+0x20>)
 800c81c:	4604      	mov	r4, r0
 800c81e:	4608      	mov	r0, r1
 800c820:	4611      	mov	r1, r2
 800c822:	2200      	movs	r2, #0
 800c824:	602a      	str	r2, [r5, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	f7f9 fbf5 	bl	8006016 <_lseek>
 800c82c:	1c43      	adds	r3, r0, #1
 800c82e:	d102      	bne.n	800c836 <_lseek_r+0x1e>
 800c830:	682b      	ldr	r3, [r5, #0]
 800c832:	b103      	cbz	r3, 800c836 <_lseek_r+0x1e>
 800c834:	6023      	str	r3, [r4, #0]
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	200017a8 	.word	0x200017a8

0800c83c <_read_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d07      	ldr	r5, [pc, #28]	@ (800c85c <_read_r+0x20>)
 800c840:	4604      	mov	r4, r0
 800c842:	4608      	mov	r0, r1
 800c844:	4611      	mov	r1, r2
 800c846:	2200      	movs	r2, #0
 800c848:	602a      	str	r2, [r5, #0]
 800c84a:	461a      	mov	r2, r3
 800c84c:	f7f9 fb83 	bl	8005f56 <_read>
 800c850:	1c43      	adds	r3, r0, #1
 800c852:	d102      	bne.n	800c85a <_read_r+0x1e>
 800c854:	682b      	ldr	r3, [r5, #0]
 800c856:	b103      	cbz	r3, 800c85a <_read_r+0x1e>
 800c858:	6023      	str	r3, [r4, #0]
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
 800c85c:	200017a8 	.word	0x200017a8

0800c860 <_sbrk_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4d06      	ldr	r5, [pc, #24]	@ (800c87c <_sbrk_r+0x1c>)
 800c864:	2300      	movs	r3, #0
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	602b      	str	r3, [r5, #0]
 800c86c:	f7f9 fbe0 	bl	8006030 <_sbrk>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d102      	bne.n	800c87a <_sbrk_r+0x1a>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b103      	cbz	r3, 800c87a <_sbrk_r+0x1a>
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	200017a8 	.word	0x200017a8

0800c880 <_write_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4d07      	ldr	r5, [pc, #28]	@ (800c8a0 <_write_r+0x20>)
 800c884:	4604      	mov	r4, r0
 800c886:	4608      	mov	r0, r1
 800c888:	4611      	mov	r1, r2
 800c88a:	2200      	movs	r2, #0
 800c88c:	602a      	str	r2, [r5, #0]
 800c88e:	461a      	mov	r2, r3
 800c890:	f7f9 fb7e 	bl	8005f90 <_write>
 800c894:	1c43      	adds	r3, r0, #1
 800c896:	d102      	bne.n	800c89e <_write_r+0x1e>
 800c898:	682b      	ldr	r3, [r5, #0]
 800c89a:	b103      	cbz	r3, 800c89e <_write_r+0x1e>
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	bd38      	pop	{r3, r4, r5, pc}
 800c8a0:	200017a8 	.word	0x200017a8

0800c8a4 <__errno>:
 800c8a4:	4b01      	ldr	r3, [pc, #4]	@ (800c8ac <__errno+0x8>)
 800c8a6:	6818      	ldr	r0, [r3, #0]
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	20000044 	.word	0x20000044

0800c8b0 <__libc_init_array>:
 800c8b0:	b570      	push	{r4, r5, r6, lr}
 800c8b2:	4d0d      	ldr	r5, [pc, #52]	@ (800c8e8 <__libc_init_array+0x38>)
 800c8b4:	4c0d      	ldr	r4, [pc, #52]	@ (800c8ec <__libc_init_array+0x3c>)
 800c8b6:	1b64      	subs	r4, r4, r5
 800c8b8:	10a4      	asrs	r4, r4, #2
 800c8ba:	2600      	movs	r6, #0
 800c8bc:	42a6      	cmp	r6, r4
 800c8be:	d109      	bne.n	800c8d4 <__libc_init_array+0x24>
 800c8c0:	4d0b      	ldr	r5, [pc, #44]	@ (800c8f0 <__libc_init_array+0x40>)
 800c8c2:	4c0c      	ldr	r4, [pc, #48]	@ (800c8f4 <__libc_init_array+0x44>)
 800c8c4:	f005 fad4 	bl	8011e70 <_init>
 800c8c8:	1b64      	subs	r4, r4, r5
 800c8ca:	10a4      	asrs	r4, r4, #2
 800c8cc:	2600      	movs	r6, #0
 800c8ce:	42a6      	cmp	r6, r4
 800c8d0:	d105      	bne.n	800c8de <__libc_init_array+0x2e>
 800c8d2:	bd70      	pop	{r4, r5, r6, pc}
 800c8d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8d8:	4798      	blx	r3
 800c8da:	3601      	adds	r6, #1
 800c8dc:	e7ee      	b.n	800c8bc <__libc_init_array+0xc>
 800c8de:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8e2:	4798      	blx	r3
 800c8e4:	3601      	adds	r6, #1
 800c8e6:	e7f2      	b.n	800c8ce <__libc_init_array+0x1e>
 800c8e8:	080124e8 	.word	0x080124e8
 800c8ec:	080124e8 	.word	0x080124e8
 800c8f0:	080124e8 	.word	0x080124e8
 800c8f4:	080124ec 	.word	0x080124ec

0800c8f8 <__retarget_lock_init_recursive>:
 800c8f8:	4770      	bx	lr

0800c8fa <__retarget_lock_acquire_recursive>:
 800c8fa:	4770      	bx	lr

0800c8fc <__retarget_lock_release_recursive>:
 800c8fc:	4770      	bx	lr

0800c8fe <memcpy>:
 800c8fe:	440a      	add	r2, r1
 800c900:	4291      	cmp	r1, r2
 800c902:	f100 33ff 	add.w	r3, r0, #4294967295
 800c906:	d100      	bne.n	800c90a <memcpy+0xc>
 800c908:	4770      	bx	lr
 800c90a:	b510      	push	{r4, lr}
 800c90c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c910:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c914:	4291      	cmp	r1, r2
 800c916:	d1f9      	bne.n	800c90c <memcpy+0xe>
 800c918:	bd10      	pop	{r4, pc}
	...

0800c91c <nanf>:
 800c91c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c924 <nanf+0x8>
 800c920:	4770      	bx	lr
 800c922:	bf00      	nop
 800c924:	7fc00000 	.word	0x7fc00000

0800c928 <quorem>:
 800c928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c92c:	6903      	ldr	r3, [r0, #16]
 800c92e:	690c      	ldr	r4, [r1, #16]
 800c930:	42a3      	cmp	r3, r4
 800c932:	4607      	mov	r7, r0
 800c934:	db7e      	blt.n	800ca34 <quorem+0x10c>
 800c936:	3c01      	subs	r4, #1
 800c938:	f101 0814 	add.w	r8, r1, #20
 800c93c:	00a3      	lsls	r3, r4, #2
 800c93e:	f100 0514 	add.w	r5, r0, #20
 800c942:	9300      	str	r3, [sp, #0]
 800c944:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c948:	9301      	str	r3, [sp, #4]
 800c94a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c94e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c952:	3301      	adds	r3, #1
 800c954:	429a      	cmp	r2, r3
 800c956:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c95a:	fbb2 f6f3 	udiv	r6, r2, r3
 800c95e:	d32e      	bcc.n	800c9be <quorem+0x96>
 800c960:	f04f 0a00 	mov.w	sl, #0
 800c964:	46c4      	mov	ip, r8
 800c966:	46ae      	mov	lr, r5
 800c968:	46d3      	mov	fp, sl
 800c96a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c96e:	b298      	uxth	r0, r3
 800c970:	fb06 a000 	mla	r0, r6, r0, sl
 800c974:	0c02      	lsrs	r2, r0, #16
 800c976:	0c1b      	lsrs	r3, r3, #16
 800c978:	fb06 2303 	mla	r3, r6, r3, r2
 800c97c:	f8de 2000 	ldr.w	r2, [lr]
 800c980:	b280      	uxth	r0, r0
 800c982:	b292      	uxth	r2, r2
 800c984:	1a12      	subs	r2, r2, r0
 800c986:	445a      	add	r2, fp
 800c988:	f8de 0000 	ldr.w	r0, [lr]
 800c98c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c990:	b29b      	uxth	r3, r3
 800c992:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c996:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c99a:	b292      	uxth	r2, r2
 800c99c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c9a0:	45e1      	cmp	r9, ip
 800c9a2:	f84e 2b04 	str.w	r2, [lr], #4
 800c9a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c9aa:	d2de      	bcs.n	800c96a <quorem+0x42>
 800c9ac:	9b00      	ldr	r3, [sp, #0]
 800c9ae:	58eb      	ldr	r3, [r5, r3]
 800c9b0:	b92b      	cbnz	r3, 800c9be <quorem+0x96>
 800c9b2:	9b01      	ldr	r3, [sp, #4]
 800c9b4:	3b04      	subs	r3, #4
 800c9b6:	429d      	cmp	r5, r3
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	d32f      	bcc.n	800ca1c <quorem+0xf4>
 800c9bc:	613c      	str	r4, [r7, #16]
 800c9be:	4638      	mov	r0, r7
 800c9c0:	f001 f914 	bl	800dbec <__mcmp>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	db25      	blt.n	800ca14 <quorem+0xec>
 800c9c8:	4629      	mov	r1, r5
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	f858 2b04 	ldr.w	r2, [r8], #4
 800c9d0:	f8d1 c000 	ldr.w	ip, [r1]
 800c9d4:	fa1f fe82 	uxth.w	lr, r2
 800c9d8:	fa1f f38c 	uxth.w	r3, ip
 800c9dc:	eba3 030e 	sub.w	r3, r3, lr
 800c9e0:	4403      	add	r3, r0
 800c9e2:	0c12      	lsrs	r2, r2, #16
 800c9e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c9e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9f2:	45c1      	cmp	r9, r8
 800c9f4:	f841 3b04 	str.w	r3, [r1], #4
 800c9f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c9fc:	d2e6      	bcs.n	800c9cc <quorem+0xa4>
 800c9fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca06:	b922      	cbnz	r2, 800ca12 <quorem+0xea>
 800ca08:	3b04      	subs	r3, #4
 800ca0a:	429d      	cmp	r5, r3
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	d30b      	bcc.n	800ca28 <quorem+0x100>
 800ca10:	613c      	str	r4, [r7, #16]
 800ca12:	3601      	adds	r6, #1
 800ca14:	4630      	mov	r0, r6
 800ca16:	b003      	add	sp, #12
 800ca18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca1c:	6812      	ldr	r2, [r2, #0]
 800ca1e:	3b04      	subs	r3, #4
 800ca20:	2a00      	cmp	r2, #0
 800ca22:	d1cb      	bne.n	800c9bc <quorem+0x94>
 800ca24:	3c01      	subs	r4, #1
 800ca26:	e7c6      	b.n	800c9b6 <quorem+0x8e>
 800ca28:	6812      	ldr	r2, [r2, #0]
 800ca2a:	3b04      	subs	r3, #4
 800ca2c:	2a00      	cmp	r2, #0
 800ca2e:	d1ef      	bne.n	800ca10 <quorem+0xe8>
 800ca30:	3c01      	subs	r4, #1
 800ca32:	e7ea      	b.n	800ca0a <quorem+0xe2>
 800ca34:	2000      	movs	r0, #0
 800ca36:	e7ee      	b.n	800ca16 <quorem+0xee>

0800ca38 <_dtoa_r>:
 800ca38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3c:	69c7      	ldr	r7, [r0, #28]
 800ca3e:	b099      	sub	sp, #100	@ 0x64
 800ca40:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ca44:	ec55 4b10 	vmov	r4, r5, d0
 800ca48:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ca4a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca4c:	4683      	mov	fp, r0
 800ca4e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca50:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ca52:	b97f      	cbnz	r7, 800ca74 <_dtoa_r+0x3c>
 800ca54:	2010      	movs	r0, #16
 800ca56:	f000 fdfd 	bl	800d654 <malloc>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ca60:	b920      	cbnz	r0, 800ca6c <_dtoa_r+0x34>
 800ca62:	4ba7      	ldr	r3, [pc, #668]	@ (800cd00 <_dtoa_r+0x2c8>)
 800ca64:	21ef      	movs	r1, #239	@ 0xef
 800ca66:	48a7      	ldr	r0, [pc, #668]	@ (800cd04 <_dtoa_r+0x2cc>)
 800ca68:	f002 fefa 	bl	800f860 <__assert_func>
 800ca6c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ca70:	6007      	str	r7, [r0, #0]
 800ca72:	60c7      	str	r7, [r0, #12]
 800ca74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca78:	6819      	ldr	r1, [r3, #0]
 800ca7a:	b159      	cbz	r1, 800ca94 <_dtoa_r+0x5c>
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	604a      	str	r2, [r1, #4]
 800ca80:	2301      	movs	r3, #1
 800ca82:	4093      	lsls	r3, r2
 800ca84:	608b      	str	r3, [r1, #8]
 800ca86:	4658      	mov	r0, fp
 800ca88:	f000 fe2c 	bl	800d6e4 <_Bfree>
 800ca8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ca90:	2200      	movs	r2, #0
 800ca92:	601a      	str	r2, [r3, #0]
 800ca94:	1e2b      	subs	r3, r5, #0
 800ca96:	bfb9      	ittee	lt
 800ca98:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ca9c:	9303      	strlt	r3, [sp, #12]
 800ca9e:	2300      	movge	r3, #0
 800caa0:	6033      	strge	r3, [r6, #0]
 800caa2:	9f03      	ldr	r7, [sp, #12]
 800caa4:	4b98      	ldr	r3, [pc, #608]	@ (800cd08 <_dtoa_r+0x2d0>)
 800caa6:	bfbc      	itt	lt
 800caa8:	2201      	movlt	r2, #1
 800caaa:	6032      	strlt	r2, [r6, #0]
 800caac:	43bb      	bics	r3, r7
 800caae:	d112      	bne.n	800cad6 <_dtoa_r+0x9e>
 800cab0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cab2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cab6:	6013      	str	r3, [r2, #0]
 800cab8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cabc:	4323      	orrs	r3, r4
 800cabe:	f000 854d 	beq.w	800d55c <_dtoa_r+0xb24>
 800cac2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cac4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cd1c <_dtoa_r+0x2e4>
 800cac8:	2b00      	cmp	r3, #0
 800caca:	f000 854f 	beq.w	800d56c <_dtoa_r+0xb34>
 800cace:	f10a 0303 	add.w	r3, sl, #3
 800cad2:	f000 bd49 	b.w	800d568 <_dtoa_r+0xb30>
 800cad6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cada:	2200      	movs	r2, #0
 800cadc:	ec51 0b17 	vmov	r0, r1, d7
 800cae0:	2300      	movs	r3, #0
 800cae2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cae6:	f7f4 f80f 	bl	8000b08 <__aeabi_dcmpeq>
 800caea:	4680      	mov	r8, r0
 800caec:	b158      	cbz	r0, 800cb06 <_dtoa_r+0xce>
 800caee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800caf0:	2301      	movs	r3, #1
 800caf2:	6013      	str	r3, [r2, #0]
 800caf4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800caf6:	b113      	cbz	r3, 800cafe <_dtoa_r+0xc6>
 800caf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cafa:	4b84      	ldr	r3, [pc, #528]	@ (800cd0c <_dtoa_r+0x2d4>)
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cd20 <_dtoa_r+0x2e8>
 800cb02:	f000 bd33 	b.w	800d56c <_dtoa_r+0xb34>
 800cb06:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cb0a:	aa16      	add	r2, sp, #88	@ 0x58
 800cb0c:	a917      	add	r1, sp, #92	@ 0x5c
 800cb0e:	4658      	mov	r0, fp
 800cb10:	f001 f98c 	bl	800de2c <__d2b>
 800cb14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cb18:	4681      	mov	r9, r0
 800cb1a:	2e00      	cmp	r6, #0
 800cb1c:	d077      	beq.n	800cc0e <_dtoa_r+0x1d6>
 800cb1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cb20:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cb24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cb2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cb30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cb34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cb38:	4619      	mov	r1, r3
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	4b74      	ldr	r3, [pc, #464]	@ (800cd10 <_dtoa_r+0x2d8>)
 800cb3e:	f7f3 fbc3 	bl	80002c8 <__aeabi_dsub>
 800cb42:	a369      	add	r3, pc, #420	@ (adr r3, 800cce8 <_dtoa_r+0x2b0>)
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	f7f3 fd76 	bl	8000638 <__aeabi_dmul>
 800cb4c:	a368      	add	r3, pc, #416	@ (adr r3, 800ccf0 <_dtoa_r+0x2b8>)
 800cb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb52:	f7f3 fbbb 	bl	80002cc <__adddf3>
 800cb56:	4604      	mov	r4, r0
 800cb58:	4630      	mov	r0, r6
 800cb5a:	460d      	mov	r5, r1
 800cb5c:	f7f3 fd02 	bl	8000564 <__aeabi_i2d>
 800cb60:	a365      	add	r3, pc, #404	@ (adr r3, 800ccf8 <_dtoa_r+0x2c0>)
 800cb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb66:	f7f3 fd67 	bl	8000638 <__aeabi_dmul>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	4620      	mov	r0, r4
 800cb70:	4629      	mov	r1, r5
 800cb72:	f7f3 fbab 	bl	80002cc <__adddf3>
 800cb76:	4604      	mov	r4, r0
 800cb78:	460d      	mov	r5, r1
 800cb7a:	f7f4 f80d 	bl	8000b98 <__aeabi_d2iz>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4607      	mov	r7, r0
 800cb82:	2300      	movs	r3, #0
 800cb84:	4620      	mov	r0, r4
 800cb86:	4629      	mov	r1, r5
 800cb88:	f7f3 ffc8 	bl	8000b1c <__aeabi_dcmplt>
 800cb8c:	b140      	cbz	r0, 800cba0 <_dtoa_r+0x168>
 800cb8e:	4638      	mov	r0, r7
 800cb90:	f7f3 fce8 	bl	8000564 <__aeabi_i2d>
 800cb94:	4622      	mov	r2, r4
 800cb96:	462b      	mov	r3, r5
 800cb98:	f7f3 ffb6 	bl	8000b08 <__aeabi_dcmpeq>
 800cb9c:	b900      	cbnz	r0, 800cba0 <_dtoa_r+0x168>
 800cb9e:	3f01      	subs	r7, #1
 800cba0:	2f16      	cmp	r7, #22
 800cba2:	d851      	bhi.n	800cc48 <_dtoa_r+0x210>
 800cba4:	4b5b      	ldr	r3, [pc, #364]	@ (800cd14 <_dtoa_r+0x2dc>)
 800cba6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbb2:	f7f3 ffb3 	bl	8000b1c <__aeabi_dcmplt>
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d048      	beq.n	800cc4c <_dtoa_r+0x214>
 800cbba:	3f01      	subs	r7, #1
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	9312      	str	r3, [sp, #72]	@ 0x48
 800cbc0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cbc2:	1b9b      	subs	r3, r3, r6
 800cbc4:	1e5a      	subs	r2, r3, #1
 800cbc6:	bf44      	itt	mi
 800cbc8:	f1c3 0801 	rsbmi	r8, r3, #1
 800cbcc:	2300      	movmi	r3, #0
 800cbce:	9208      	str	r2, [sp, #32]
 800cbd0:	bf54      	ite	pl
 800cbd2:	f04f 0800 	movpl.w	r8, #0
 800cbd6:	9308      	strmi	r3, [sp, #32]
 800cbd8:	2f00      	cmp	r7, #0
 800cbda:	db39      	blt.n	800cc50 <_dtoa_r+0x218>
 800cbdc:	9b08      	ldr	r3, [sp, #32]
 800cbde:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cbe0:	443b      	add	r3, r7
 800cbe2:	9308      	str	r3, [sp, #32]
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cbe8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbea:	2b09      	cmp	r3, #9
 800cbec:	d864      	bhi.n	800ccb8 <_dtoa_r+0x280>
 800cbee:	2b05      	cmp	r3, #5
 800cbf0:	bfc4      	itt	gt
 800cbf2:	3b04      	subgt	r3, #4
 800cbf4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbf8:	f1a3 0302 	sub.w	r3, r3, #2
 800cbfc:	bfcc      	ite	gt
 800cbfe:	2400      	movgt	r4, #0
 800cc00:	2401      	movle	r4, #1
 800cc02:	2b03      	cmp	r3, #3
 800cc04:	d863      	bhi.n	800ccce <_dtoa_r+0x296>
 800cc06:	e8df f003 	tbb	[pc, r3]
 800cc0a:	372a      	.short	0x372a
 800cc0c:	5535      	.short	0x5535
 800cc0e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cc12:	441e      	add	r6, r3
 800cc14:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cc18:	2b20      	cmp	r3, #32
 800cc1a:	bfc1      	itttt	gt
 800cc1c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cc20:	409f      	lslgt	r7, r3
 800cc22:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cc26:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cc2a:	bfd6      	itet	le
 800cc2c:	f1c3 0320 	rsble	r3, r3, #32
 800cc30:	ea47 0003 	orrgt.w	r0, r7, r3
 800cc34:	fa04 f003 	lslle.w	r0, r4, r3
 800cc38:	f7f3 fc84 	bl	8000544 <__aeabi_ui2d>
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cc42:	3e01      	subs	r6, #1
 800cc44:	9214      	str	r2, [sp, #80]	@ 0x50
 800cc46:	e777      	b.n	800cb38 <_dtoa_r+0x100>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e7b8      	b.n	800cbbe <_dtoa_r+0x186>
 800cc4c:	9012      	str	r0, [sp, #72]	@ 0x48
 800cc4e:	e7b7      	b.n	800cbc0 <_dtoa_r+0x188>
 800cc50:	427b      	negs	r3, r7
 800cc52:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc54:	2300      	movs	r3, #0
 800cc56:	eba8 0807 	sub.w	r8, r8, r7
 800cc5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cc5c:	e7c4      	b.n	800cbe8 <_dtoa_r+0x1b0>
 800cc5e:	2300      	movs	r3, #0
 800cc60:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	dc35      	bgt.n	800ccd4 <_dtoa_r+0x29c>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	9300      	str	r3, [sp, #0]
 800cc6c:	9307      	str	r3, [sp, #28]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	920e      	str	r2, [sp, #56]	@ 0x38
 800cc72:	e00b      	b.n	800cc8c <_dtoa_r+0x254>
 800cc74:	2301      	movs	r3, #1
 800cc76:	e7f3      	b.n	800cc60 <_dtoa_r+0x228>
 800cc78:	2300      	movs	r3, #0
 800cc7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc7e:	18fb      	adds	r3, r7, r3
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	3301      	adds	r3, #1
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	9307      	str	r3, [sp, #28]
 800cc88:	bfb8      	it	lt
 800cc8a:	2301      	movlt	r3, #1
 800cc8c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cc90:	2100      	movs	r1, #0
 800cc92:	2204      	movs	r2, #4
 800cc94:	f102 0514 	add.w	r5, r2, #20
 800cc98:	429d      	cmp	r5, r3
 800cc9a:	d91f      	bls.n	800ccdc <_dtoa_r+0x2a4>
 800cc9c:	6041      	str	r1, [r0, #4]
 800cc9e:	4658      	mov	r0, fp
 800cca0:	f000 fce0 	bl	800d664 <_Balloc>
 800cca4:	4682      	mov	sl, r0
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d13c      	bne.n	800cd24 <_dtoa_r+0x2ec>
 800ccaa:	4b1b      	ldr	r3, [pc, #108]	@ (800cd18 <_dtoa_r+0x2e0>)
 800ccac:	4602      	mov	r2, r0
 800ccae:	f240 11af 	movw	r1, #431	@ 0x1af
 800ccb2:	e6d8      	b.n	800ca66 <_dtoa_r+0x2e>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e7e0      	b.n	800cc7a <_dtoa_r+0x242>
 800ccb8:	2401      	movs	r4, #1
 800ccba:	2300      	movs	r3, #0
 800ccbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ccbe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ccc0:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc4:	9300      	str	r3, [sp, #0]
 800ccc6:	9307      	str	r3, [sp, #28]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	2312      	movs	r3, #18
 800cccc:	e7d0      	b.n	800cc70 <_dtoa_r+0x238>
 800ccce:	2301      	movs	r3, #1
 800ccd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ccd2:	e7f5      	b.n	800ccc0 <_dtoa_r+0x288>
 800ccd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ccd6:	9300      	str	r3, [sp, #0]
 800ccd8:	9307      	str	r3, [sp, #28]
 800ccda:	e7d7      	b.n	800cc8c <_dtoa_r+0x254>
 800ccdc:	3101      	adds	r1, #1
 800ccde:	0052      	lsls	r2, r2, #1
 800cce0:	e7d8      	b.n	800cc94 <_dtoa_r+0x25c>
 800cce2:	bf00      	nop
 800cce4:	f3af 8000 	nop.w
 800cce8:	636f4361 	.word	0x636f4361
 800ccec:	3fd287a7 	.word	0x3fd287a7
 800ccf0:	8b60c8b3 	.word	0x8b60c8b3
 800ccf4:	3fc68a28 	.word	0x3fc68a28
 800ccf8:	509f79fb 	.word	0x509f79fb
 800ccfc:	3fd34413 	.word	0x3fd34413
 800cd00:	0801206c 	.word	0x0801206c
 800cd04:	08012083 	.word	0x08012083
 800cd08:	7ff00000 	.word	0x7ff00000
 800cd0c:	080123c9 	.word	0x080123c9
 800cd10:	3ff80000 	.word	0x3ff80000
 800cd14:	08012180 	.word	0x08012180
 800cd18:	080120db 	.word	0x080120db
 800cd1c:	08012068 	.word	0x08012068
 800cd20:	080123c8 	.word	0x080123c8
 800cd24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cd28:	6018      	str	r0, [r3, #0]
 800cd2a:	9b07      	ldr	r3, [sp, #28]
 800cd2c:	2b0e      	cmp	r3, #14
 800cd2e:	f200 80a4 	bhi.w	800ce7a <_dtoa_r+0x442>
 800cd32:	2c00      	cmp	r4, #0
 800cd34:	f000 80a1 	beq.w	800ce7a <_dtoa_r+0x442>
 800cd38:	2f00      	cmp	r7, #0
 800cd3a:	dd33      	ble.n	800cda4 <_dtoa_r+0x36c>
 800cd3c:	4bad      	ldr	r3, [pc, #692]	@ (800cff4 <_dtoa_r+0x5bc>)
 800cd3e:	f007 020f 	and.w	r2, r7, #15
 800cd42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd46:	ed93 7b00 	vldr	d7, [r3]
 800cd4a:	05f8      	lsls	r0, r7, #23
 800cd4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cd50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cd54:	d516      	bpl.n	800cd84 <_dtoa_r+0x34c>
 800cd56:	4ba8      	ldr	r3, [pc, #672]	@ (800cff8 <_dtoa_r+0x5c0>)
 800cd58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd60:	f7f3 fd94 	bl	800088c <__aeabi_ddiv>
 800cd64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd68:	f004 040f 	and.w	r4, r4, #15
 800cd6c:	2603      	movs	r6, #3
 800cd6e:	4da2      	ldr	r5, [pc, #648]	@ (800cff8 <_dtoa_r+0x5c0>)
 800cd70:	b954      	cbnz	r4, 800cd88 <_dtoa_r+0x350>
 800cd72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd7a:	f7f3 fd87 	bl	800088c <__aeabi_ddiv>
 800cd7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd82:	e028      	b.n	800cdd6 <_dtoa_r+0x39e>
 800cd84:	2602      	movs	r6, #2
 800cd86:	e7f2      	b.n	800cd6e <_dtoa_r+0x336>
 800cd88:	07e1      	lsls	r1, r4, #31
 800cd8a:	d508      	bpl.n	800cd9e <_dtoa_r+0x366>
 800cd8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cd90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cd94:	f7f3 fc50 	bl	8000638 <__aeabi_dmul>
 800cd98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cd9c:	3601      	adds	r6, #1
 800cd9e:	1064      	asrs	r4, r4, #1
 800cda0:	3508      	adds	r5, #8
 800cda2:	e7e5      	b.n	800cd70 <_dtoa_r+0x338>
 800cda4:	f000 80d2 	beq.w	800cf4c <_dtoa_r+0x514>
 800cda8:	427c      	negs	r4, r7
 800cdaa:	4b92      	ldr	r3, [pc, #584]	@ (800cff4 <_dtoa_r+0x5bc>)
 800cdac:	4d92      	ldr	r5, [pc, #584]	@ (800cff8 <_dtoa_r+0x5c0>)
 800cdae:	f004 020f 	and.w	r2, r4, #15
 800cdb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cdbe:	f7f3 fc3b 	bl	8000638 <__aeabi_dmul>
 800cdc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cdc6:	1124      	asrs	r4, r4, #4
 800cdc8:	2300      	movs	r3, #0
 800cdca:	2602      	movs	r6, #2
 800cdcc:	2c00      	cmp	r4, #0
 800cdce:	f040 80b2 	bne.w	800cf36 <_dtoa_r+0x4fe>
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d1d3      	bne.n	800cd7e <_dtoa_r+0x346>
 800cdd6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cdd8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 80b7 	beq.w	800cf50 <_dtoa_r+0x518>
 800cde2:	4b86      	ldr	r3, [pc, #536]	@ (800cffc <_dtoa_r+0x5c4>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	4620      	mov	r0, r4
 800cde8:	4629      	mov	r1, r5
 800cdea:	f7f3 fe97 	bl	8000b1c <__aeabi_dcmplt>
 800cdee:	2800      	cmp	r0, #0
 800cdf0:	f000 80ae 	beq.w	800cf50 <_dtoa_r+0x518>
 800cdf4:	9b07      	ldr	r3, [sp, #28]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 80aa 	beq.w	800cf50 <_dtoa_r+0x518>
 800cdfc:	9b00      	ldr	r3, [sp, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	dd37      	ble.n	800ce72 <_dtoa_r+0x43a>
 800ce02:	1e7b      	subs	r3, r7, #1
 800ce04:	9304      	str	r3, [sp, #16]
 800ce06:	4620      	mov	r0, r4
 800ce08:	4b7d      	ldr	r3, [pc, #500]	@ (800d000 <_dtoa_r+0x5c8>)
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	f7f3 fc13 	bl	8000638 <__aeabi_dmul>
 800ce12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce16:	9c00      	ldr	r4, [sp, #0]
 800ce18:	3601      	adds	r6, #1
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f7f3 fba2 	bl	8000564 <__aeabi_i2d>
 800ce20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce24:	f7f3 fc08 	bl	8000638 <__aeabi_dmul>
 800ce28:	4b76      	ldr	r3, [pc, #472]	@ (800d004 <_dtoa_r+0x5cc>)
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f7f3 fa4e 	bl	80002cc <__adddf3>
 800ce30:	4605      	mov	r5, r0
 800ce32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ce36:	2c00      	cmp	r4, #0
 800ce38:	f040 808d 	bne.w	800cf56 <_dtoa_r+0x51e>
 800ce3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce40:	4b71      	ldr	r3, [pc, #452]	@ (800d008 <_dtoa_r+0x5d0>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	f7f3 fa40 	bl	80002c8 <__aeabi_dsub>
 800ce48:	4602      	mov	r2, r0
 800ce4a:	460b      	mov	r3, r1
 800ce4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce50:	462a      	mov	r2, r5
 800ce52:	4633      	mov	r3, r6
 800ce54:	f7f3 fe80 	bl	8000b58 <__aeabi_dcmpgt>
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	f040 828b 	bne.w	800d374 <_dtoa_r+0x93c>
 800ce5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce62:	462a      	mov	r2, r5
 800ce64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ce68:	f7f3 fe58 	bl	8000b1c <__aeabi_dcmplt>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	f040 8128 	bne.w	800d0c2 <_dtoa_r+0x68a>
 800ce72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ce76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ce7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	f2c0 815a 	blt.w	800d136 <_dtoa_r+0x6fe>
 800ce82:	2f0e      	cmp	r7, #14
 800ce84:	f300 8157 	bgt.w	800d136 <_dtoa_r+0x6fe>
 800ce88:	4b5a      	ldr	r3, [pc, #360]	@ (800cff4 <_dtoa_r+0x5bc>)
 800ce8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ce8e:	ed93 7b00 	vldr	d7, [r3]
 800ce92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	ed8d 7b00 	vstr	d7, [sp]
 800ce9a:	da03      	bge.n	800cea4 <_dtoa_r+0x46c>
 800ce9c:	9b07      	ldr	r3, [sp, #28]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	f340 8101 	ble.w	800d0a6 <_dtoa_r+0x66e>
 800cea4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cea8:	4656      	mov	r6, sl
 800ceaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ceae:	4620      	mov	r0, r4
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f7f3 fceb 	bl	800088c <__aeabi_ddiv>
 800ceb6:	f7f3 fe6f 	bl	8000b98 <__aeabi_d2iz>
 800ceba:	4680      	mov	r8, r0
 800cebc:	f7f3 fb52 	bl	8000564 <__aeabi_i2d>
 800cec0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cec4:	f7f3 fbb8 	bl	8000638 <__aeabi_dmul>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	4620      	mov	r0, r4
 800cece:	4629      	mov	r1, r5
 800ced0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ced4:	f7f3 f9f8 	bl	80002c8 <__aeabi_dsub>
 800ced8:	f806 4b01 	strb.w	r4, [r6], #1
 800cedc:	9d07      	ldr	r5, [sp, #28]
 800cede:	eba6 040a 	sub.w	r4, r6, sl
 800cee2:	42a5      	cmp	r5, r4
 800cee4:	4602      	mov	r2, r0
 800cee6:	460b      	mov	r3, r1
 800cee8:	f040 8117 	bne.w	800d11a <_dtoa_r+0x6e2>
 800ceec:	f7f3 f9ee 	bl	80002cc <__adddf3>
 800cef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cef4:	4604      	mov	r4, r0
 800cef6:	460d      	mov	r5, r1
 800cef8:	f7f3 fe2e 	bl	8000b58 <__aeabi_dcmpgt>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	f040 80f9 	bne.w	800d0f4 <_dtoa_r+0x6bc>
 800cf02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf06:	4620      	mov	r0, r4
 800cf08:	4629      	mov	r1, r5
 800cf0a:	f7f3 fdfd 	bl	8000b08 <__aeabi_dcmpeq>
 800cf0e:	b118      	cbz	r0, 800cf18 <_dtoa_r+0x4e0>
 800cf10:	f018 0f01 	tst.w	r8, #1
 800cf14:	f040 80ee 	bne.w	800d0f4 <_dtoa_r+0x6bc>
 800cf18:	4649      	mov	r1, r9
 800cf1a:	4658      	mov	r0, fp
 800cf1c:	f000 fbe2 	bl	800d6e4 <_Bfree>
 800cf20:	2300      	movs	r3, #0
 800cf22:	7033      	strb	r3, [r6, #0]
 800cf24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cf26:	3701      	adds	r7, #1
 800cf28:	601f      	str	r7, [r3, #0]
 800cf2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 831d 	beq.w	800d56c <_dtoa_r+0xb34>
 800cf32:	601e      	str	r6, [r3, #0]
 800cf34:	e31a      	b.n	800d56c <_dtoa_r+0xb34>
 800cf36:	07e2      	lsls	r2, r4, #31
 800cf38:	d505      	bpl.n	800cf46 <_dtoa_r+0x50e>
 800cf3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cf3e:	f7f3 fb7b 	bl	8000638 <__aeabi_dmul>
 800cf42:	3601      	adds	r6, #1
 800cf44:	2301      	movs	r3, #1
 800cf46:	1064      	asrs	r4, r4, #1
 800cf48:	3508      	adds	r5, #8
 800cf4a:	e73f      	b.n	800cdcc <_dtoa_r+0x394>
 800cf4c:	2602      	movs	r6, #2
 800cf4e:	e742      	b.n	800cdd6 <_dtoa_r+0x39e>
 800cf50:	9c07      	ldr	r4, [sp, #28]
 800cf52:	9704      	str	r7, [sp, #16]
 800cf54:	e761      	b.n	800ce1a <_dtoa_r+0x3e2>
 800cf56:	4b27      	ldr	r3, [pc, #156]	@ (800cff4 <_dtoa_r+0x5bc>)
 800cf58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cf5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf62:	4454      	add	r4, sl
 800cf64:	2900      	cmp	r1, #0
 800cf66:	d053      	beq.n	800d010 <_dtoa_r+0x5d8>
 800cf68:	4928      	ldr	r1, [pc, #160]	@ (800d00c <_dtoa_r+0x5d4>)
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	f7f3 fc8e 	bl	800088c <__aeabi_ddiv>
 800cf70:	4633      	mov	r3, r6
 800cf72:	462a      	mov	r2, r5
 800cf74:	f7f3 f9a8 	bl	80002c8 <__aeabi_dsub>
 800cf78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf7c:	4656      	mov	r6, sl
 800cf7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf82:	f7f3 fe09 	bl	8000b98 <__aeabi_d2iz>
 800cf86:	4605      	mov	r5, r0
 800cf88:	f7f3 faec 	bl	8000564 <__aeabi_i2d>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf94:	f7f3 f998 	bl	80002c8 <__aeabi_dsub>
 800cf98:	3530      	adds	r5, #48	@ 0x30
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfa2:	f806 5b01 	strb.w	r5, [r6], #1
 800cfa6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cfaa:	f7f3 fdb7 	bl	8000b1c <__aeabi_dcmplt>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d171      	bne.n	800d096 <_dtoa_r+0x65e>
 800cfb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cfb6:	4911      	ldr	r1, [pc, #68]	@ (800cffc <_dtoa_r+0x5c4>)
 800cfb8:	2000      	movs	r0, #0
 800cfba:	f7f3 f985 	bl	80002c8 <__aeabi_dsub>
 800cfbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cfc2:	f7f3 fdab 	bl	8000b1c <__aeabi_dcmplt>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	f040 8095 	bne.w	800d0f6 <_dtoa_r+0x6be>
 800cfcc:	42a6      	cmp	r6, r4
 800cfce:	f43f af50 	beq.w	800ce72 <_dtoa_r+0x43a>
 800cfd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cfd6:	4b0a      	ldr	r3, [pc, #40]	@ (800d000 <_dtoa_r+0x5c8>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f7f3 fb2d 	bl	8000638 <__aeabi_dmul>
 800cfde:	4b08      	ldr	r3, [pc, #32]	@ (800d000 <_dtoa_r+0x5c8>)
 800cfe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfea:	f7f3 fb25 	bl	8000638 <__aeabi_dmul>
 800cfee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cff2:	e7c4      	b.n	800cf7e <_dtoa_r+0x546>
 800cff4:	08012180 	.word	0x08012180
 800cff8:	08012158 	.word	0x08012158
 800cffc:	3ff00000 	.word	0x3ff00000
 800d000:	40240000 	.word	0x40240000
 800d004:	401c0000 	.word	0x401c0000
 800d008:	40140000 	.word	0x40140000
 800d00c:	3fe00000 	.word	0x3fe00000
 800d010:	4631      	mov	r1, r6
 800d012:	4628      	mov	r0, r5
 800d014:	f7f3 fb10 	bl	8000638 <__aeabi_dmul>
 800d018:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d01c:	9415      	str	r4, [sp, #84]	@ 0x54
 800d01e:	4656      	mov	r6, sl
 800d020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d024:	f7f3 fdb8 	bl	8000b98 <__aeabi_d2iz>
 800d028:	4605      	mov	r5, r0
 800d02a:	f7f3 fa9b 	bl	8000564 <__aeabi_i2d>
 800d02e:	4602      	mov	r2, r0
 800d030:	460b      	mov	r3, r1
 800d032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d036:	f7f3 f947 	bl	80002c8 <__aeabi_dsub>
 800d03a:	3530      	adds	r5, #48	@ 0x30
 800d03c:	f806 5b01 	strb.w	r5, [r6], #1
 800d040:	4602      	mov	r2, r0
 800d042:	460b      	mov	r3, r1
 800d044:	42a6      	cmp	r6, r4
 800d046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d04a:	f04f 0200 	mov.w	r2, #0
 800d04e:	d124      	bne.n	800d09a <_dtoa_r+0x662>
 800d050:	4bac      	ldr	r3, [pc, #688]	@ (800d304 <_dtoa_r+0x8cc>)
 800d052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d056:	f7f3 f939 	bl	80002cc <__adddf3>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d062:	f7f3 fd79 	bl	8000b58 <__aeabi_dcmpgt>
 800d066:	2800      	cmp	r0, #0
 800d068:	d145      	bne.n	800d0f6 <_dtoa_r+0x6be>
 800d06a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d06e:	49a5      	ldr	r1, [pc, #660]	@ (800d304 <_dtoa_r+0x8cc>)
 800d070:	2000      	movs	r0, #0
 800d072:	f7f3 f929 	bl	80002c8 <__aeabi_dsub>
 800d076:	4602      	mov	r2, r0
 800d078:	460b      	mov	r3, r1
 800d07a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d07e:	f7f3 fd4d 	bl	8000b1c <__aeabi_dcmplt>
 800d082:	2800      	cmp	r0, #0
 800d084:	f43f aef5 	beq.w	800ce72 <_dtoa_r+0x43a>
 800d088:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d08a:	1e73      	subs	r3, r6, #1
 800d08c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d08e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d092:	2b30      	cmp	r3, #48	@ 0x30
 800d094:	d0f8      	beq.n	800d088 <_dtoa_r+0x650>
 800d096:	9f04      	ldr	r7, [sp, #16]
 800d098:	e73e      	b.n	800cf18 <_dtoa_r+0x4e0>
 800d09a:	4b9b      	ldr	r3, [pc, #620]	@ (800d308 <_dtoa_r+0x8d0>)
 800d09c:	f7f3 facc 	bl	8000638 <__aeabi_dmul>
 800d0a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0a4:	e7bc      	b.n	800d020 <_dtoa_r+0x5e8>
 800d0a6:	d10c      	bne.n	800d0c2 <_dtoa_r+0x68a>
 800d0a8:	4b98      	ldr	r3, [pc, #608]	@ (800d30c <_dtoa_r+0x8d4>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0b0:	f7f3 fac2 	bl	8000638 <__aeabi_dmul>
 800d0b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0b8:	f7f3 fd44 	bl	8000b44 <__aeabi_dcmpge>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	f000 8157 	beq.w	800d370 <_dtoa_r+0x938>
 800d0c2:	2400      	movs	r4, #0
 800d0c4:	4625      	mov	r5, r4
 800d0c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0c8:	43db      	mvns	r3, r3
 800d0ca:	9304      	str	r3, [sp, #16]
 800d0cc:	4656      	mov	r6, sl
 800d0ce:	2700      	movs	r7, #0
 800d0d0:	4621      	mov	r1, r4
 800d0d2:	4658      	mov	r0, fp
 800d0d4:	f000 fb06 	bl	800d6e4 <_Bfree>
 800d0d8:	2d00      	cmp	r5, #0
 800d0da:	d0dc      	beq.n	800d096 <_dtoa_r+0x65e>
 800d0dc:	b12f      	cbz	r7, 800d0ea <_dtoa_r+0x6b2>
 800d0de:	42af      	cmp	r7, r5
 800d0e0:	d003      	beq.n	800d0ea <_dtoa_r+0x6b2>
 800d0e2:	4639      	mov	r1, r7
 800d0e4:	4658      	mov	r0, fp
 800d0e6:	f000 fafd 	bl	800d6e4 <_Bfree>
 800d0ea:	4629      	mov	r1, r5
 800d0ec:	4658      	mov	r0, fp
 800d0ee:	f000 faf9 	bl	800d6e4 <_Bfree>
 800d0f2:	e7d0      	b.n	800d096 <_dtoa_r+0x65e>
 800d0f4:	9704      	str	r7, [sp, #16]
 800d0f6:	4633      	mov	r3, r6
 800d0f8:	461e      	mov	r6, r3
 800d0fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d0fe:	2a39      	cmp	r2, #57	@ 0x39
 800d100:	d107      	bne.n	800d112 <_dtoa_r+0x6da>
 800d102:	459a      	cmp	sl, r3
 800d104:	d1f8      	bne.n	800d0f8 <_dtoa_r+0x6c0>
 800d106:	9a04      	ldr	r2, [sp, #16]
 800d108:	3201      	adds	r2, #1
 800d10a:	9204      	str	r2, [sp, #16]
 800d10c:	2230      	movs	r2, #48	@ 0x30
 800d10e:	f88a 2000 	strb.w	r2, [sl]
 800d112:	781a      	ldrb	r2, [r3, #0]
 800d114:	3201      	adds	r2, #1
 800d116:	701a      	strb	r2, [r3, #0]
 800d118:	e7bd      	b.n	800d096 <_dtoa_r+0x65e>
 800d11a:	4b7b      	ldr	r3, [pc, #492]	@ (800d308 <_dtoa_r+0x8d0>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	f7f3 fa8b 	bl	8000638 <__aeabi_dmul>
 800d122:	2200      	movs	r2, #0
 800d124:	2300      	movs	r3, #0
 800d126:	4604      	mov	r4, r0
 800d128:	460d      	mov	r5, r1
 800d12a:	f7f3 fced 	bl	8000b08 <__aeabi_dcmpeq>
 800d12e:	2800      	cmp	r0, #0
 800d130:	f43f aebb 	beq.w	800ceaa <_dtoa_r+0x472>
 800d134:	e6f0      	b.n	800cf18 <_dtoa_r+0x4e0>
 800d136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d138:	2a00      	cmp	r2, #0
 800d13a:	f000 80db 	beq.w	800d2f4 <_dtoa_r+0x8bc>
 800d13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d140:	2a01      	cmp	r2, #1
 800d142:	f300 80bf 	bgt.w	800d2c4 <_dtoa_r+0x88c>
 800d146:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d148:	2a00      	cmp	r2, #0
 800d14a:	f000 80b7 	beq.w	800d2bc <_dtoa_r+0x884>
 800d14e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d152:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d154:	4646      	mov	r6, r8
 800d156:	9a08      	ldr	r2, [sp, #32]
 800d158:	2101      	movs	r1, #1
 800d15a:	441a      	add	r2, r3
 800d15c:	4658      	mov	r0, fp
 800d15e:	4498      	add	r8, r3
 800d160:	9208      	str	r2, [sp, #32]
 800d162:	f000 fbbd 	bl	800d8e0 <__i2b>
 800d166:	4605      	mov	r5, r0
 800d168:	b15e      	cbz	r6, 800d182 <_dtoa_r+0x74a>
 800d16a:	9b08      	ldr	r3, [sp, #32]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	dd08      	ble.n	800d182 <_dtoa_r+0x74a>
 800d170:	42b3      	cmp	r3, r6
 800d172:	9a08      	ldr	r2, [sp, #32]
 800d174:	bfa8      	it	ge
 800d176:	4633      	movge	r3, r6
 800d178:	eba8 0803 	sub.w	r8, r8, r3
 800d17c:	1af6      	subs	r6, r6, r3
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	9308      	str	r3, [sp, #32]
 800d182:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d184:	b1f3      	cbz	r3, 800d1c4 <_dtoa_r+0x78c>
 800d186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 80b7 	beq.w	800d2fc <_dtoa_r+0x8c4>
 800d18e:	b18c      	cbz	r4, 800d1b4 <_dtoa_r+0x77c>
 800d190:	4629      	mov	r1, r5
 800d192:	4622      	mov	r2, r4
 800d194:	4658      	mov	r0, fp
 800d196:	f000 fc63 	bl	800da60 <__pow5mult>
 800d19a:	464a      	mov	r2, r9
 800d19c:	4601      	mov	r1, r0
 800d19e:	4605      	mov	r5, r0
 800d1a0:	4658      	mov	r0, fp
 800d1a2:	f000 fbb3 	bl	800d90c <__multiply>
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	9004      	str	r0, [sp, #16]
 800d1aa:	4658      	mov	r0, fp
 800d1ac:	f000 fa9a 	bl	800d6e4 <_Bfree>
 800d1b0:	9b04      	ldr	r3, [sp, #16]
 800d1b2:	4699      	mov	r9, r3
 800d1b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1b6:	1b1a      	subs	r2, r3, r4
 800d1b8:	d004      	beq.n	800d1c4 <_dtoa_r+0x78c>
 800d1ba:	4649      	mov	r1, r9
 800d1bc:	4658      	mov	r0, fp
 800d1be:	f000 fc4f 	bl	800da60 <__pow5mult>
 800d1c2:	4681      	mov	r9, r0
 800d1c4:	2101      	movs	r1, #1
 800d1c6:	4658      	mov	r0, fp
 800d1c8:	f000 fb8a 	bl	800d8e0 <__i2b>
 800d1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1ce:	4604      	mov	r4, r0
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	f000 81cf 	beq.w	800d574 <_dtoa_r+0xb3c>
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	4601      	mov	r1, r0
 800d1da:	4658      	mov	r0, fp
 800d1dc:	f000 fc40 	bl	800da60 <__pow5mult>
 800d1e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	4604      	mov	r4, r0
 800d1e6:	f300 8095 	bgt.w	800d314 <_dtoa_r+0x8dc>
 800d1ea:	9b02      	ldr	r3, [sp, #8]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f040 8087 	bne.w	800d300 <_dtoa_r+0x8c8>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	f040 8089 	bne.w	800d310 <_dtoa_r+0x8d8>
 800d1fe:	9b03      	ldr	r3, [sp, #12]
 800d200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d204:	0d1b      	lsrs	r3, r3, #20
 800d206:	051b      	lsls	r3, r3, #20
 800d208:	b12b      	cbz	r3, 800d216 <_dtoa_r+0x7de>
 800d20a:	9b08      	ldr	r3, [sp, #32]
 800d20c:	3301      	adds	r3, #1
 800d20e:	9308      	str	r3, [sp, #32]
 800d210:	f108 0801 	add.w	r8, r8, #1
 800d214:	2301      	movs	r3, #1
 800d216:	930a      	str	r3, [sp, #40]	@ 0x28
 800d218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	f000 81b0 	beq.w	800d580 <_dtoa_r+0xb48>
 800d220:	6923      	ldr	r3, [r4, #16]
 800d222:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d226:	6918      	ldr	r0, [r3, #16]
 800d228:	f000 fb0e 	bl	800d848 <__hi0bits>
 800d22c:	f1c0 0020 	rsb	r0, r0, #32
 800d230:	9b08      	ldr	r3, [sp, #32]
 800d232:	4418      	add	r0, r3
 800d234:	f010 001f 	ands.w	r0, r0, #31
 800d238:	d077      	beq.n	800d32a <_dtoa_r+0x8f2>
 800d23a:	f1c0 0320 	rsb	r3, r0, #32
 800d23e:	2b04      	cmp	r3, #4
 800d240:	dd6b      	ble.n	800d31a <_dtoa_r+0x8e2>
 800d242:	9b08      	ldr	r3, [sp, #32]
 800d244:	f1c0 001c 	rsb	r0, r0, #28
 800d248:	4403      	add	r3, r0
 800d24a:	4480      	add	r8, r0
 800d24c:	4406      	add	r6, r0
 800d24e:	9308      	str	r3, [sp, #32]
 800d250:	f1b8 0f00 	cmp.w	r8, #0
 800d254:	dd05      	ble.n	800d262 <_dtoa_r+0x82a>
 800d256:	4649      	mov	r1, r9
 800d258:	4642      	mov	r2, r8
 800d25a:	4658      	mov	r0, fp
 800d25c:	f000 fc5a 	bl	800db14 <__lshift>
 800d260:	4681      	mov	r9, r0
 800d262:	9b08      	ldr	r3, [sp, #32]
 800d264:	2b00      	cmp	r3, #0
 800d266:	dd05      	ble.n	800d274 <_dtoa_r+0x83c>
 800d268:	4621      	mov	r1, r4
 800d26a:	461a      	mov	r2, r3
 800d26c:	4658      	mov	r0, fp
 800d26e:	f000 fc51 	bl	800db14 <__lshift>
 800d272:	4604      	mov	r4, r0
 800d274:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d276:	2b00      	cmp	r3, #0
 800d278:	d059      	beq.n	800d32e <_dtoa_r+0x8f6>
 800d27a:	4621      	mov	r1, r4
 800d27c:	4648      	mov	r0, r9
 800d27e:	f000 fcb5 	bl	800dbec <__mcmp>
 800d282:	2800      	cmp	r0, #0
 800d284:	da53      	bge.n	800d32e <_dtoa_r+0x8f6>
 800d286:	1e7b      	subs	r3, r7, #1
 800d288:	9304      	str	r3, [sp, #16]
 800d28a:	4649      	mov	r1, r9
 800d28c:	2300      	movs	r3, #0
 800d28e:	220a      	movs	r2, #10
 800d290:	4658      	mov	r0, fp
 800d292:	f000 fa49 	bl	800d728 <__multadd>
 800d296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d298:	4681      	mov	r9, r0
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	f000 8172 	beq.w	800d584 <_dtoa_r+0xb4c>
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	220a      	movs	r2, #10
 800d2a6:	4658      	mov	r0, fp
 800d2a8:	f000 fa3e 	bl	800d728 <__multadd>
 800d2ac:	9b00      	ldr	r3, [sp, #0]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	4605      	mov	r5, r0
 800d2b2:	dc67      	bgt.n	800d384 <_dtoa_r+0x94c>
 800d2b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2b6:	2b02      	cmp	r3, #2
 800d2b8:	dc41      	bgt.n	800d33e <_dtoa_r+0x906>
 800d2ba:	e063      	b.n	800d384 <_dtoa_r+0x94c>
 800d2bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d2be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d2c2:	e746      	b.n	800d152 <_dtoa_r+0x71a>
 800d2c4:	9b07      	ldr	r3, [sp, #28]
 800d2c6:	1e5c      	subs	r4, r3, #1
 800d2c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2ca:	42a3      	cmp	r3, r4
 800d2cc:	bfbf      	itttt	lt
 800d2ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d2d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d2d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d2d4:	1ae3      	sublt	r3, r4, r3
 800d2d6:	bfb4      	ite	lt
 800d2d8:	18d2      	addlt	r2, r2, r3
 800d2da:	1b1c      	subge	r4, r3, r4
 800d2dc:	9b07      	ldr	r3, [sp, #28]
 800d2de:	bfbc      	itt	lt
 800d2e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d2e2:	2400      	movlt	r4, #0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	bfb5      	itete	lt
 800d2e8:	eba8 0603 	sublt.w	r6, r8, r3
 800d2ec:	9b07      	ldrge	r3, [sp, #28]
 800d2ee:	2300      	movlt	r3, #0
 800d2f0:	4646      	movge	r6, r8
 800d2f2:	e730      	b.n	800d156 <_dtoa_r+0x71e>
 800d2f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d2f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d2f8:	4646      	mov	r6, r8
 800d2fa:	e735      	b.n	800d168 <_dtoa_r+0x730>
 800d2fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d2fe:	e75c      	b.n	800d1ba <_dtoa_r+0x782>
 800d300:	2300      	movs	r3, #0
 800d302:	e788      	b.n	800d216 <_dtoa_r+0x7de>
 800d304:	3fe00000 	.word	0x3fe00000
 800d308:	40240000 	.word	0x40240000
 800d30c:	40140000 	.word	0x40140000
 800d310:	9b02      	ldr	r3, [sp, #8]
 800d312:	e780      	b.n	800d216 <_dtoa_r+0x7de>
 800d314:	2300      	movs	r3, #0
 800d316:	930a      	str	r3, [sp, #40]	@ 0x28
 800d318:	e782      	b.n	800d220 <_dtoa_r+0x7e8>
 800d31a:	d099      	beq.n	800d250 <_dtoa_r+0x818>
 800d31c:	9a08      	ldr	r2, [sp, #32]
 800d31e:	331c      	adds	r3, #28
 800d320:	441a      	add	r2, r3
 800d322:	4498      	add	r8, r3
 800d324:	441e      	add	r6, r3
 800d326:	9208      	str	r2, [sp, #32]
 800d328:	e792      	b.n	800d250 <_dtoa_r+0x818>
 800d32a:	4603      	mov	r3, r0
 800d32c:	e7f6      	b.n	800d31c <_dtoa_r+0x8e4>
 800d32e:	9b07      	ldr	r3, [sp, #28]
 800d330:	9704      	str	r7, [sp, #16]
 800d332:	2b00      	cmp	r3, #0
 800d334:	dc20      	bgt.n	800d378 <_dtoa_r+0x940>
 800d336:	9300      	str	r3, [sp, #0]
 800d338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	dd1e      	ble.n	800d37c <_dtoa_r+0x944>
 800d33e:	9b00      	ldr	r3, [sp, #0]
 800d340:	2b00      	cmp	r3, #0
 800d342:	f47f aec0 	bne.w	800d0c6 <_dtoa_r+0x68e>
 800d346:	4621      	mov	r1, r4
 800d348:	2205      	movs	r2, #5
 800d34a:	4658      	mov	r0, fp
 800d34c:	f000 f9ec 	bl	800d728 <__multadd>
 800d350:	4601      	mov	r1, r0
 800d352:	4604      	mov	r4, r0
 800d354:	4648      	mov	r0, r9
 800d356:	f000 fc49 	bl	800dbec <__mcmp>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	f77f aeb3 	ble.w	800d0c6 <_dtoa_r+0x68e>
 800d360:	4656      	mov	r6, sl
 800d362:	2331      	movs	r3, #49	@ 0x31
 800d364:	f806 3b01 	strb.w	r3, [r6], #1
 800d368:	9b04      	ldr	r3, [sp, #16]
 800d36a:	3301      	adds	r3, #1
 800d36c:	9304      	str	r3, [sp, #16]
 800d36e:	e6ae      	b.n	800d0ce <_dtoa_r+0x696>
 800d370:	9c07      	ldr	r4, [sp, #28]
 800d372:	9704      	str	r7, [sp, #16]
 800d374:	4625      	mov	r5, r4
 800d376:	e7f3      	b.n	800d360 <_dtoa_r+0x928>
 800d378:	9b07      	ldr	r3, [sp, #28]
 800d37a:	9300      	str	r3, [sp, #0]
 800d37c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d37e:	2b00      	cmp	r3, #0
 800d380:	f000 8104 	beq.w	800d58c <_dtoa_r+0xb54>
 800d384:	2e00      	cmp	r6, #0
 800d386:	dd05      	ble.n	800d394 <_dtoa_r+0x95c>
 800d388:	4629      	mov	r1, r5
 800d38a:	4632      	mov	r2, r6
 800d38c:	4658      	mov	r0, fp
 800d38e:	f000 fbc1 	bl	800db14 <__lshift>
 800d392:	4605      	mov	r5, r0
 800d394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d396:	2b00      	cmp	r3, #0
 800d398:	d05a      	beq.n	800d450 <_dtoa_r+0xa18>
 800d39a:	6869      	ldr	r1, [r5, #4]
 800d39c:	4658      	mov	r0, fp
 800d39e:	f000 f961 	bl	800d664 <_Balloc>
 800d3a2:	4606      	mov	r6, r0
 800d3a4:	b928      	cbnz	r0, 800d3b2 <_dtoa_r+0x97a>
 800d3a6:	4b84      	ldr	r3, [pc, #528]	@ (800d5b8 <_dtoa_r+0xb80>)
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d3ae:	f7ff bb5a 	b.w	800ca66 <_dtoa_r+0x2e>
 800d3b2:	692a      	ldr	r2, [r5, #16]
 800d3b4:	3202      	adds	r2, #2
 800d3b6:	0092      	lsls	r2, r2, #2
 800d3b8:	f105 010c 	add.w	r1, r5, #12
 800d3bc:	300c      	adds	r0, #12
 800d3be:	f7ff fa9e 	bl	800c8fe <memcpy>
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	4631      	mov	r1, r6
 800d3c6:	4658      	mov	r0, fp
 800d3c8:	f000 fba4 	bl	800db14 <__lshift>
 800d3cc:	f10a 0301 	add.w	r3, sl, #1
 800d3d0:	9307      	str	r3, [sp, #28]
 800d3d2:	9b00      	ldr	r3, [sp, #0]
 800d3d4:	4453      	add	r3, sl
 800d3d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3d8:	9b02      	ldr	r3, [sp, #8]
 800d3da:	f003 0301 	and.w	r3, r3, #1
 800d3de:	462f      	mov	r7, r5
 800d3e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3e2:	4605      	mov	r5, r0
 800d3e4:	9b07      	ldr	r3, [sp, #28]
 800d3e6:	4621      	mov	r1, r4
 800d3e8:	3b01      	subs	r3, #1
 800d3ea:	4648      	mov	r0, r9
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	f7ff fa9b 	bl	800c928 <quorem>
 800d3f2:	4639      	mov	r1, r7
 800d3f4:	9002      	str	r0, [sp, #8]
 800d3f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d3fa:	4648      	mov	r0, r9
 800d3fc:	f000 fbf6 	bl	800dbec <__mcmp>
 800d400:	462a      	mov	r2, r5
 800d402:	9008      	str	r0, [sp, #32]
 800d404:	4621      	mov	r1, r4
 800d406:	4658      	mov	r0, fp
 800d408:	f000 fc0c 	bl	800dc24 <__mdiff>
 800d40c:	68c2      	ldr	r2, [r0, #12]
 800d40e:	4606      	mov	r6, r0
 800d410:	bb02      	cbnz	r2, 800d454 <_dtoa_r+0xa1c>
 800d412:	4601      	mov	r1, r0
 800d414:	4648      	mov	r0, r9
 800d416:	f000 fbe9 	bl	800dbec <__mcmp>
 800d41a:	4602      	mov	r2, r0
 800d41c:	4631      	mov	r1, r6
 800d41e:	4658      	mov	r0, fp
 800d420:	920e      	str	r2, [sp, #56]	@ 0x38
 800d422:	f000 f95f 	bl	800d6e4 <_Bfree>
 800d426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d428:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d42a:	9e07      	ldr	r6, [sp, #28]
 800d42c:	ea43 0102 	orr.w	r1, r3, r2
 800d430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d432:	4319      	orrs	r1, r3
 800d434:	d110      	bne.n	800d458 <_dtoa_r+0xa20>
 800d436:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d43a:	d029      	beq.n	800d490 <_dtoa_r+0xa58>
 800d43c:	9b08      	ldr	r3, [sp, #32]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	dd02      	ble.n	800d448 <_dtoa_r+0xa10>
 800d442:	9b02      	ldr	r3, [sp, #8]
 800d444:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d448:	9b00      	ldr	r3, [sp, #0]
 800d44a:	f883 8000 	strb.w	r8, [r3]
 800d44e:	e63f      	b.n	800d0d0 <_dtoa_r+0x698>
 800d450:	4628      	mov	r0, r5
 800d452:	e7bb      	b.n	800d3cc <_dtoa_r+0x994>
 800d454:	2201      	movs	r2, #1
 800d456:	e7e1      	b.n	800d41c <_dtoa_r+0x9e4>
 800d458:	9b08      	ldr	r3, [sp, #32]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	db04      	blt.n	800d468 <_dtoa_r+0xa30>
 800d45e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d460:	430b      	orrs	r3, r1
 800d462:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d464:	430b      	orrs	r3, r1
 800d466:	d120      	bne.n	800d4aa <_dtoa_r+0xa72>
 800d468:	2a00      	cmp	r2, #0
 800d46a:	dded      	ble.n	800d448 <_dtoa_r+0xa10>
 800d46c:	4649      	mov	r1, r9
 800d46e:	2201      	movs	r2, #1
 800d470:	4658      	mov	r0, fp
 800d472:	f000 fb4f 	bl	800db14 <__lshift>
 800d476:	4621      	mov	r1, r4
 800d478:	4681      	mov	r9, r0
 800d47a:	f000 fbb7 	bl	800dbec <__mcmp>
 800d47e:	2800      	cmp	r0, #0
 800d480:	dc03      	bgt.n	800d48a <_dtoa_r+0xa52>
 800d482:	d1e1      	bne.n	800d448 <_dtoa_r+0xa10>
 800d484:	f018 0f01 	tst.w	r8, #1
 800d488:	d0de      	beq.n	800d448 <_dtoa_r+0xa10>
 800d48a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d48e:	d1d8      	bne.n	800d442 <_dtoa_r+0xa0a>
 800d490:	9a00      	ldr	r2, [sp, #0]
 800d492:	2339      	movs	r3, #57	@ 0x39
 800d494:	7013      	strb	r3, [r2, #0]
 800d496:	4633      	mov	r3, r6
 800d498:	461e      	mov	r6, r3
 800d49a:	3b01      	subs	r3, #1
 800d49c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d4a0:	2a39      	cmp	r2, #57	@ 0x39
 800d4a2:	d052      	beq.n	800d54a <_dtoa_r+0xb12>
 800d4a4:	3201      	adds	r2, #1
 800d4a6:	701a      	strb	r2, [r3, #0]
 800d4a8:	e612      	b.n	800d0d0 <_dtoa_r+0x698>
 800d4aa:	2a00      	cmp	r2, #0
 800d4ac:	dd07      	ble.n	800d4be <_dtoa_r+0xa86>
 800d4ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4b2:	d0ed      	beq.n	800d490 <_dtoa_r+0xa58>
 800d4b4:	9a00      	ldr	r2, [sp, #0]
 800d4b6:	f108 0301 	add.w	r3, r8, #1
 800d4ba:	7013      	strb	r3, [r2, #0]
 800d4bc:	e608      	b.n	800d0d0 <_dtoa_r+0x698>
 800d4be:	9b07      	ldr	r3, [sp, #28]
 800d4c0:	9a07      	ldr	r2, [sp, #28]
 800d4c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d4c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	d028      	beq.n	800d51e <_dtoa_r+0xae6>
 800d4cc:	4649      	mov	r1, r9
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	220a      	movs	r2, #10
 800d4d2:	4658      	mov	r0, fp
 800d4d4:	f000 f928 	bl	800d728 <__multadd>
 800d4d8:	42af      	cmp	r7, r5
 800d4da:	4681      	mov	r9, r0
 800d4dc:	f04f 0300 	mov.w	r3, #0
 800d4e0:	f04f 020a 	mov.w	r2, #10
 800d4e4:	4639      	mov	r1, r7
 800d4e6:	4658      	mov	r0, fp
 800d4e8:	d107      	bne.n	800d4fa <_dtoa_r+0xac2>
 800d4ea:	f000 f91d 	bl	800d728 <__multadd>
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	4605      	mov	r5, r0
 800d4f2:	9b07      	ldr	r3, [sp, #28]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	9307      	str	r3, [sp, #28]
 800d4f8:	e774      	b.n	800d3e4 <_dtoa_r+0x9ac>
 800d4fa:	f000 f915 	bl	800d728 <__multadd>
 800d4fe:	4629      	mov	r1, r5
 800d500:	4607      	mov	r7, r0
 800d502:	2300      	movs	r3, #0
 800d504:	220a      	movs	r2, #10
 800d506:	4658      	mov	r0, fp
 800d508:	f000 f90e 	bl	800d728 <__multadd>
 800d50c:	4605      	mov	r5, r0
 800d50e:	e7f0      	b.n	800d4f2 <_dtoa_r+0xaba>
 800d510:	9b00      	ldr	r3, [sp, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	bfcc      	ite	gt
 800d516:	461e      	movgt	r6, r3
 800d518:	2601      	movle	r6, #1
 800d51a:	4456      	add	r6, sl
 800d51c:	2700      	movs	r7, #0
 800d51e:	4649      	mov	r1, r9
 800d520:	2201      	movs	r2, #1
 800d522:	4658      	mov	r0, fp
 800d524:	f000 faf6 	bl	800db14 <__lshift>
 800d528:	4621      	mov	r1, r4
 800d52a:	4681      	mov	r9, r0
 800d52c:	f000 fb5e 	bl	800dbec <__mcmp>
 800d530:	2800      	cmp	r0, #0
 800d532:	dcb0      	bgt.n	800d496 <_dtoa_r+0xa5e>
 800d534:	d102      	bne.n	800d53c <_dtoa_r+0xb04>
 800d536:	f018 0f01 	tst.w	r8, #1
 800d53a:	d1ac      	bne.n	800d496 <_dtoa_r+0xa5e>
 800d53c:	4633      	mov	r3, r6
 800d53e:	461e      	mov	r6, r3
 800d540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d544:	2a30      	cmp	r2, #48	@ 0x30
 800d546:	d0fa      	beq.n	800d53e <_dtoa_r+0xb06>
 800d548:	e5c2      	b.n	800d0d0 <_dtoa_r+0x698>
 800d54a:	459a      	cmp	sl, r3
 800d54c:	d1a4      	bne.n	800d498 <_dtoa_r+0xa60>
 800d54e:	9b04      	ldr	r3, [sp, #16]
 800d550:	3301      	adds	r3, #1
 800d552:	9304      	str	r3, [sp, #16]
 800d554:	2331      	movs	r3, #49	@ 0x31
 800d556:	f88a 3000 	strb.w	r3, [sl]
 800d55a:	e5b9      	b.n	800d0d0 <_dtoa_r+0x698>
 800d55c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d55e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d5bc <_dtoa_r+0xb84>
 800d562:	b11b      	cbz	r3, 800d56c <_dtoa_r+0xb34>
 800d564:	f10a 0308 	add.w	r3, sl, #8
 800d568:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d56a:	6013      	str	r3, [r2, #0]
 800d56c:	4650      	mov	r0, sl
 800d56e:	b019      	add	sp, #100	@ 0x64
 800d570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d576:	2b01      	cmp	r3, #1
 800d578:	f77f ae37 	ble.w	800d1ea <_dtoa_r+0x7b2>
 800d57c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d57e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d580:	2001      	movs	r0, #1
 800d582:	e655      	b.n	800d230 <_dtoa_r+0x7f8>
 800d584:	9b00      	ldr	r3, [sp, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	f77f aed6 	ble.w	800d338 <_dtoa_r+0x900>
 800d58c:	4656      	mov	r6, sl
 800d58e:	4621      	mov	r1, r4
 800d590:	4648      	mov	r0, r9
 800d592:	f7ff f9c9 	bl	800c928 <quorem>
 800d596:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d59a:	f806 8b01 	strb.w	r8, [r6], #1
 800d59e:	9b00      	ldr	r3, [sp, #0]
 800d5a0:	eba6 020a 	sub.w	r2, r6, sl
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	ddb3      	ble.n	800d510 <_dtoa_r+0xad8>
 800d5a8:	4649      	mov	r1, r9
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	220a      	movs	r2, #10
 800d5ae:	4658      	mov	r0, fp
 800d5b0:	f000 f8ba 	bl	800d728 <__multadd>
 800d5b4:	4681      	mov	r9, r0
 800d5b6:	e7ea      	b.n	800d58e <_dtoa_r+0xb56>
 800d5b8:	080120db 	.word	0x080120db
 800d5bc:	0801205f 	.word	0x0801205f

0800d5c0 <_free_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4605      	mov	r5, r0
 800d5c4:	2900      	cmp	r1, #0
 800d5c6:	d041      	beq.n	800d64c <_free_r+0x8c>
 800d5c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5cc:	1f0c      	subs	r4, r1, #4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	bfb8      	it	lt
 800d5d2:	18e4      	addlt	r4, r4, r3
 800d5d4:	f7fe f914 	bl	800b800 <__malloc_lock>
 800d5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800d650 <_free_r+0x90>)
 800d5da:	6813      	ldr	r3, [r2, #0]
 800d5dc:	b933      	cbnz	r3, 800d5ec <_free_r+0x2c>
 800d5de:	6063      	str	r3, [r4, #4]
 800d5e0:	6014      	str	r4, [r2, #0]
 800d5e2:	4628      	mov	r0, r5
 800d5e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5e8:	f7fe b910 	b.w	800b80c <__malloc_unlock>
 800d5ec:	42a3      	cmp	r3, r4
 800d5ee:	d908      	bls.n	800d602 <_free_r+0x42>
 800d5f0:	6820      	ldr	r0, [r4, #0]
 800d5f2:	1821      	adds	r1, r4, r0
 800d5f4:	428b      	cmp	r3, r1
 800d5f6:	bf01      	itttt	eq
 800d5f8:	6819      	ldreq	r1, [r3, #0]
 800d5fa:	685b      	ldreq	r3, [r3, #4]
 800d5fc:	1809      	addeq	r1, r1, r0
 800d5fe:	6021      	streq	r1, [r4, #0]
 800d600:	e7ed      	b.n	800d5de <_free_r+0x1e>
 800d602:	461a      	mov	r2, r3
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	b10b      	cbz	r3, 800d60c <_free_r+0x4c>
 800d608:	42a3      	cmp	r3, r4
 800d60a:	d9fa      	bls.n	800d602 <_free_r+0x42>
 800d60c:	6811      	ldr	r1, [r2, #0]
 800d60e:	1850      	adds	r0, r2, r1
 800d610:	42a0      	cmp	r0, r4
 800d612:	d10b      	bne.n	800d62c <_free_r+0x6c>
 800d614:	6820      	ldr	r0, [r4, #0]
 800d616:	4401      	add	r1, r0
 800d618:	1850      	adds	r0, r2, r1
 800d61a:	4283      	cmp	r3, r0
 800d61c:	6011      	str	r1, [r2, #0]
 800d61e:	d1e0      	bne.n	800d5e2 <_free_r+0x22>
 800d620:	6818      	ldr	r0, [r3, #0]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	6053      	str	r3, [r2, #4]
 800d626:	4408      	add	r0, r1
 800d628:	6010      	str	r0, [r2, #0]
 800d62a:	e7da      	b.n	800d5e2 <_free_r+0x22>
 800d62c:	d902      	bls.n	800d634 <_free_r+0x74>
 800d62e:	230c      	movs	r3, #12
 800d630:	602b      	str	r3, [r5, #0]
 800d632:	e7d6      	b.n	800d5e2 <_free_r+0x22>
 800d634:	6820      	ldr	r0, [r4, #0]
 800d636:	1821      	adds	r1, r4, r0
 800d638:	428b      	cmp	r3, r1
 800d63a:	bf04      	itt	eq
 800d63c:	6819      	ldreq	r1, [r3, #0]
 800d63e:	685b      	ldreq	r3, [r3, #4]
 800d640:	6063      	str	r3, [r4, #4]
 800d642:	bf04      	itt	eq
 800d644:	1809      	addeq	r1, r1, r0
 800d646:	6021      	streq	r1, [r4, #0]
 800d648:	6054      	str	r4, [r2, #4]
 800d64a:	e7ca      	b.n	800d5e2 <_free_r+0x22>
 800d64c:	bd38      	pop	{r3, r4, r5, pc}
 800d64e:	bf00      	nop
 800d650:	20001668 	.word	0x20001668

0800d654 <malloc>:
 800d654:	4b02      	ldr	r3, [pc, #8]	@ (800d660 <malloc+0xc>)
 800d656:	4601      	mov	r1, r0
 800d658:	6818      	ldr	r0, [r3, #0]
 800d65a:	f7fe b851 	b.w	800b700 <_malloc_r>
 800d65e:	bf00      	nop
 800d660:	20000044 	.word	0x20000044

0800d664 <_Balloc>:
 800d664:	b570      	push	{r4, r5, r6, lr}
 800d666:	69c6      	ldr	r6, [r0, #28]
 800d668:	4604      	mov	r4, r0
 800d66a:	460d      	mov	r5, r1
 800d66c:	b976      	cbnz	r6, 800d68c <_Balloc+0x28>
 800d66e:	2010      	movs	r0, #16
 800d670:	f7ff fff0 	bl	800d654 <malloc>
 800d674:	4602      	mov	r2, r0
 800d676:	61e0      	str	r0, [r4, #28]
 800d678:	b920      	cbnz	r0, 800d684 <_Balloc+0x20>
 800d67a:	4b18      	ldr	r3, [pc, #96]	@ (800d6dc <_Balloc+0x78>)
 800d67c:	4818      	ldr	r0, [pc, #96]	@ (800d6e0 <_Balloc+0x7c>)
 800d67e:	216b      	movs	r1, #107	@ 0x6b
 800d680:	f002 f8ee 	bl	800f860 <__assert_func>
 800d684:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d688:	6006      	str	r6, [r0, #0]
 800d68a:	60c6      	str	r6, [r0, #12]
 800d68c:	69e6      	ldr	r6, [r4, #28]
 800d68e:	68f3      	ldr	r3, [r6, #12]
 800d690:	b183      	cbz	r3, 800d6b4 <_Balloc+0x50>
 800d692:	69e3      	ldr	r3, [r4, #28]
 800d694:	68db      	ldr	r3, [r3, #12]
 800d696:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d69a:	b9b8      	cbnz	r0, 800d6cc <_Balloc+0x68>
 800d69c:	2101      	movs	r1, #1
 800d69e:	fa01 f605 	lsl.w	r6, r1, r5
 800d6a2:	1d72      	adds	r2, r6, #5
 800d6a4:	0092      	lsls	r2, r2, #2
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f7fd fff4 	bl	800b694 <_calloc_r>
 800d6ac:	b160      	cbz	r0, 800d6c8 <_Balloc+0x64>
 800d6ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6b2:	e00e      	b.n	800d6d2 <_Balloc+0x6e>
 800d6b4:	2221      	movs	r2, #33	@ 0x21
 800d6b6:	2104      	movs	r1, #4
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	f7fd ffeb 	bl	800b694 <_calloc_r>
 800d6be:	69e3      	ldr	r3, [r4, #28]
 800d6c0:	60f0      	str	r0, [r6, #12]
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d1e4      	bne.n	800d692 <_Balloc+0x2e>
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	bd70      	pop	{r4, r5, r6, pc}
 800d6cc:	6802      	ldr	r2, [r0, #0]
 800d6ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6d8:	e7f7      	b.n	800d6ca <_Balloc+0x66>
 800d6da:	bf00      	nop
 800d6dc:	0801206c 	.word	0x0801206c
 800d6e0:	080120ec 	.word	0x080120ec

0800d6e4 <_Bfree>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	69c6      	ldr	r6, [r0, #28]
 800d6e8:	4605      	mov	r5, r0
 800d6ea:	460c      	mov	r4, r1
 800d6ec:	b976      	cbnz	r6, 800d70c <_Bfree+0x28>
 800d6ee:	2010      	movs	r0, #16
 800d6f0:	f7ff ffb0 	bl	800d654 <malloc>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	61e8      	str	r0, [r5, #28]
 800d6f8:	b920      	cbnz	r0, 800d704 <_Bfree+0x20>
 800d6fa:	4b09      	ldr	r3, [pc, #36]	@ (800d720 <_Bfree+0x3c>)
 800d6fc:	4809      	ldr	r0, [pc, #36]	@ (800d724 <_Bfree+0x40>)
 800d6fe:	218f      	movs	r1, #143	@ 0x8f
 800d700:	f002 f8ae 	bl	800f860 <__assert_func>
 800d704:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d708:	6006      	str	r6, [r0, #0]
 800d70a:	60c6      	str	r6, [r0, #12]
 800d70c:	b13c      	cbz	r4, 800d71e <_Bfree+0x3a>
 800d70e:	69eb      	ldr	r3, [r5, #28]
 800d710:	6862      	ldr	r2, [r4, #4]
 800d712:	68db      	ldr	r3, [r3, #12]
 800d714:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d718:	6021      	str	r1, [r4, #0]
 800d71a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d71e:	bd70      	pop	{r4, r5, r6, pc}
 800d720:	0801206c 	.word	0x0801206c
 800d724:	080120ec 	.word	0x080120ec

0800d728 <__multadd>:
 800d728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d72c:	690d      	ldr	r5, [r1, #16]
 800d72e:	4607      	mov	r7, r0
 800d730:	460c      	mov	r4, r1
 800d732:	461e      	mov	r6, r3
 800d734:	f101 0c14 	add.w	ip, r1, #20
 800d738:	2000      	movs	r0, #0
 800d73a:	f8dc 3000 	ldr.w	r3, [ip]
 800d73e:	b299      	uxth	r1, r3
 800d740:	fb02 6101 	mla	r1, r2, r1, r6
 800d744:	0c1e      	lsrs	r6, r3, #16
 800d746:	0c0b      	lsrs	r3, r1, #16
 800d748:	fb02 3306 	mla	r3, r2, r6, r3
 800d74c:	b289      	uxth	r1, r1
 800d74e:	3001      	adds	r0, #1
 800d750:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d754:	4285      	cmp	r5, r0
 800d756:	f84c 1b04 	str.w	r1, [ip], #4
 800d75a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d75e:	dcec      	bgt.n	800d73a <__multadd+0x12>
 800d760:	b30e      	cbz	r6, 800d7a6 <__multadd+0x7e>
 800d762:	68a3      	ldr	r3, [r4, #8]
 800d764:	42ab      	cmp	r3, r5
 800d766:	dc19      	bgt.n	800d79c <__multadd+0x74>
 800d768:	6861      	ldr	r1, [r4, #4]
 800d76a:	4638      	mov	r0, r7
 800d76c:	3101      	adds	r1, #1
 800d76e:	f7ff ff79 	bl	800d664 <_Balloc>
 800d772:	4680      	mov	r8, r0
 800d774:	b928      	cbnz	r0, 800d782 <__multadd+0x5a>
 800d776:	4602      	mov	r2, r0
 800d778:	4b0c      	ldr	r3, [pc, #48]	@ (800d7ac <__multadd+0x84>)
 800d77a:	480d      	ldr	r0, [pc, #52]	@ (800d7b0 <__multadd+0x88>)
 800d77c:	21ba      	movs	r1, #186	@ 0xba
 800d77e:	f002 f86f 	bl	800f860 <__assert_func>
 800d782:	6922      	ldr	r2, [r4, #16]
 800d784:	3202      	adds	r2, #2
 800d786:	f104 010c 	add.w	r1, r4, #12
 800d78a:	0092      	lsls	r2, r2, #2
 800d78c:	300c      	adds	r0, #12
 800d78e:	f7ff f8b6 	bl	800c8fe <memcpy>
 800d792:	4621      	mov	r1, r4
 800d794:	4638      	mov	r0, r7
 800d796:	f7ff ffa5 	bl	800d6e4 <_Bfree>
 800d79a:	4644      	mov	r4, r8
 800d79c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d7a0:	3501      	adds	r5, #1
 800d7a2:	615e      	str	r6, [r3, #20]
 800d7a4:	6125      	str	r5, [r4, #16]
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7ac:	080120db 	.word	0x080120db
 800d7b0:	080120ec 	.word	0x080120ec

0800d7b4 <__s2b>:
 800d7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7b8:	460c      	mov	r4, r1
 800d7ba:	4615      	mov	r5, r2
 800d7bc:	461f      	mov	r7, r3
 800d7be:	2209      	movs	r2, #9
 800d7c0:	3308      	adds	r3, #8
 800d7c2:	4606      	mov	r6, r0
 800d7c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	db09      	blt.n	800d7e4 <__s2b+0x30>
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f7ff ff47 	bl	800d664 <_Balloc>
 800d7d6:	b940      	cbnz	r0, 800d7ea <__s2b+0x36>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	4b19      	ldr	r3, [pc, #100]	@ (800d840 <__s2b+0x8c>)
 800d7dc:	4819      	ldr	r0, [pc, #100]	@ (800d844 <__s2b+0x90>)
 800d7de:	21d3      	movs	r1, #211	@ 0xd3
 800d7e0:	f002 f83e 	bl	800f860 <__assert_func>
 800d7e4:	0052      	lsls	r2, r2, #1
 800d7e6:	3101      	adds	r1, #1
 800d7e8:	e7f0      	b.n	800d7cc <__s2b+0x18>
 800d7ea:	9b08      	ldr	r3, [sp, #32]
 800d7ec:	6143      	str	r3, [r0, #20]
 800d7ee:	2d09      	cmp	r5, #9
 800d7f0:	f04f 0301 	mov.w	r3, #1
 800d7f4:	6103      	str	r3, [r0, #16]
 800d7f6:	dd16      	ble.n	800d826 <__s2b+0x72>
 800d7f8:	f104 0909 	add.w	r9, r4, #9
 800d7fc:	46c8      	mov	r8, r9
 800d7fe:	442c      	add	r4, r5
 800d800:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d804:	4601      	mov	r1, r0
 800d806:	3b30      	subs	r3, #48	@ 0x30
 800d808:	220a      	movs	r2, #10
 800d80a:	4630      	mov	r0, r6
 800d80c:	f7ff ff8c 	bl	800d728 <__multadd>
 800d810:	45a0      	cmp	r8, r4
 800d812:	d1f5      	bne.n	800d800 <__s2b+0x4c>
 800d814:	f1a5 0408 	sub.w	r4, r5, #8
 800d818:	444c      	add	r4, r9
 800d81a:	1b2d      	subs	r5, r5, r4
 800d81c:	1963      	adds	r3, r4, r5
 800d81e:	42bb      	cmp	r3, r7
 800d820:	db04      	blt.n	800d82c <__s2b+0x78>
 800d822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d826:	340a      	adds	r4, #10
 800d828:	2509      	movs	r5, #9
 800d82a:	e7f6      	b.n	800d81a <__s2b+0x66>
 800d82c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d830:	4601      	mov	r1, r0
 800d832:	3b30      	subs	r3, #48	@ 0x30
 800d834:	220a      	movs	r2, #10
 800d836:	4630      	mov	r0, r6
 800d838:	f7ff ff76 	bl	800d728 <__multadd>
 800d83c:	e7ee      	b.n	800d81c <__s2b+0x68>
 800d83e:	bf00      	nop
 800d840:	080120db 	.word	0x080120db
 800d844:	080120ec 	.word	0x080120ec

0800d848 <__hi0bits>:
 800d848:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d84c:	4603      	mov	r3, r0
 800d84e:	bf36      	itet	cc
 800d850:	0403      	lslcc	r3, r0, #16
 800d852:	2000      	movcs	r0, #0
 800d854:	2010      	movcc	r0, #16
 800d856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d85a:	bf3c      	itt	cc
 800d85c:	021b      	lslcc	r3, r3, #8
 800d85e:	3008      	addcc	r0, #8
 800d860:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d864:	bf3c      	itt	cc
 800d866:	011b      	lslcc	r3, r3, #4
 800d868:	3004      	addcc	r0, #4
 800d86a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d86e:	bf3c      	itt	cc
 800d870:	009b      	lslcc	r3, r3, #2
 800d872:	3002      	addcc	r0, #2
 800d874:	2b00      	cmp	r3, #0
 800d876:	db05      	blt.n	800d884 <__hi0bits+0x3c>
 800d878:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d87c:	f100 0001 	add.w	r0, r0, #1
 800d880:	bf08      	it	eq
 800d882:	2020      	moveq	r0, #32
 800d884:	4770      	bx	lr

0800d886 <__lo0bits>:
 800d886:	6803      	ldr	r3, [r0, #0]
 800d888:	4602      	mov	r2, r0
 800d88a:	f013 0007 	ands.w	r0, r3, #7
 800d88e:	d00b      	beq.n	800d8a8 <__lo0bits+0x22>
 800d890:	07d9      	lsls	r1, r3, #31
 800d892:	d421      	bmi.n	800d8d8 <__lo0bits+0x52>
 800d894:	0798      	lsls	r0, r3, #30
 800d896:	bf49      	itett	mi
 800d898:	085b      	lsrmi	r3, r3, #1
 800d89a:	089b      	lsrpl	r3, r3, #2
 800d89c:	2001      	movmi	r0, #1
 800d89e:	6013      	strmi	r3, [r2, #0]
 800d8a0:	bf5c      	itt	pl
 800d8a2:	6013      	strpl	r3, [r2, #0]
 800d8a4:	2002      	movpl	r0, #2
 800d8a6:	4770      	bx	lr
 800d8a8:	b299      	uxth	r1, r3
 800d8aa:	b909      	cbnz	r1, 800d8b0 <__lo0bits+0x2a>
 800d8ac:	0c1b      	lsrs	r3, r3, #16
 800d8ae:	2010      	movs	r0, #16
 800d8b0:	b2d9      	uxtb	r1, r3
 800d8b2:	b909      	cbnz	r1, 800d8b8 <__lo0bits+0x32>
 800d8b4:	3008      	adds	r0, #8
 800d8b6:	0a1b      	lsrs	r3, r3, #8
 800d8b8:	0719      	lsls	r1, r3, #28
 800d8ba:	bf04      	itt	eq
 800d8bc:	091b      	lsreq	r3, r3, #4
 800d8be:	3004      	addeq	r0, #4
 800d8c0:	0799      	lsls	r1, r3, #30
 800d8c2:	bf04      	itt	eq
 800d8c4:	089b      	lsreq	r3, r3, #2
 800d8c6:	3002      	addeq	r0, #2
 800d8c8:	07d9      	lsls	r1, r3, #31
 800d8ca:	d403      	bmi.n	800d8d4 <__lo0bits+0x4e>
 800d8cc:	085b      	lsrs	r3, r3, #1
 800d8ce:	f100 0001 	add.w	r0, r0, #1
 800d8d2:	d003      	beq.n	800d8dc <__lo0bits+0x56>
 800d8d4:	6013      	str	r3, [r2, #0]
 800d8d6:	4770      	bx	lr
 800d8d8:	2000      	movs	r0, #0
 800d8da:	4770      	bx	lr
 800d8dc:	2020      	movs	r0, #32
 800d8de:	4770      	bx	lr

0800d8e0 <__i2b>:
 800d8e0:	b510      	push	{r4, lr}
 800d8e2:	460c      	mov	r4, r1
 800d8e4:	2101      	movs	r1, #1
 800d8e6:	f7ff febd 	bl	800d664 <_Balloc>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	b928      	cbnz	r0, 800d8fa <__i2b+0x1a>
 800d8ee:	4b05      	ldr	r3, [pc, #20]	@ (800d904 <__i2b+0x24>)
 800d8f0:	4805      	ldr	r0, [pc, #20]	@ (800d908 <__i2b+0x28>)
 800d8f2:	f240 1145 	movw	r1, #325	@ 0x145
 800d8f6:	f001 ffb3 	bl	800f860 <__assert_func>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	6144      	str	r4, [r0, #20]
 800d8fe:	6103      	str	r3, [r0, #16]
 800d900:	bd10      	pop	{r4, pc}
 800d902:	bf00      	nop
 800d904:	080120db 	.word	0x080120db
 800d908:	080120ec 	.word	0x080120ec

0800d90c <__multiply>:
 800d90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d910:	4614      	mov	r4, r2
 800d912:	690a      	ldr	r2, [r1, #16]
 800d914:	6923      	ldr	r3, [r4, #16]
 800d916:	429a      	cmp	r2, r3
 800d918:	bfa8      	it	ge
 800d91a:	4623      	movge	r3, r4
 800d91c:	460f      	mov	r7, r1
 800d91e:	bfa4      	itt	ge
 800d920:	460c      	movge	r4, r1
 800d922:	461f      	movge	r7, r3
 800d924:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d928:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d92c:	68a3      	ldr	r3, [r4, #8]
 800d92e:	6861      	ldr	r1, [r4, #4]
 800d930:	eb0a 0609 	add.w	r6, sl, r9
 800d934:	42b3      	cmp	r3, r6
 800d936:	b085      	sub	sp, #20
 800d938:	bfb8      	it	lt
 800d93a:	3101      	addlt	r1, #1
 800d93c:	f7ff fe92 	bl	800d664 <_Balloc>
 800d940:	b930      	cbnz	r0, 800d950 <__multiply+0x44>
 800d942:	4602      	mov	r2, r0
 800d944:	4b44      	ldr	r3, [pc, #272]	@ (800da58 <__multiply+0x14c>)
 800d946:	4845      	ldr	r0, [pc, #276]	@ (800da5c <__multiply+0x150>)
 800d948:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d94c:	f001 ff88 	bl	800f860 <__assert_func>
 800d950:	f100 0514 	add.w	r5, r0, #20
 800d954:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d958:	462b      	mov	r3, r5
 800d95a:	2200      	movs	r2, #0
 800d95c:	4543      	cmp	r3, r8
 800d95e:	d321      	bcc.n	800d9a4 <__multiply+0x98>
 800d960:	f107 0114 	add.w	r1, r7, #20
 800d964:	f104 0214 	add.w	r2, r4, #20
 800d968:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d96c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d970:	9302      	str	r3, [sp, #8]
 800d972:	1b13      	subs	r3, r2, r4
 800d974:	3b15      	subs	r3, #21
 800d976:	f023 0303 	bic.w	r3, r3, #3
 800d97a:	3304      	adds	r3, #4
 800d97c:	f104 0715 	add.w	r7, r4, #21
 800d980:	42ba      	cmp	r2, r7
 800d982:	bf38      	it	cc
 800d984:	2304      	movcc	r3, #4
 800d986:	9301      	str	r3, [sp, #4]
 800d988:	9b02      	ldr	r3, [sp, #8]
 800d98a:	9103      	str	r1, [sp, #12]
 800d98c:	428b      	cmp	r3, r1
 800d98e:	d80c      	bhi.n	800d9aa <__multiply+0x9e>
 800d990:	2e00      	cmp	r6, #0
 800d992:	dd03      	ble.n	800d99c <__multiply+0x90>
 800d994:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d05b      	beq.n	800da54 <__multiply+0x148>
 800d99c:	6106      	str	r6, [r0, #16]
 800d99e:	b005      	add	sp, #20
 800d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	f843 2b04 	str.w	r2, [r3], #4
 800d9a8:	e7d8      	b.n	800d95c <__multiply+0x50>
 800d9aa:	f8b1 a000 	ldrh.w	sl, [r1]
 800d9ae:	f1ba 0f00 	cmp.w	sl, #0
 800d9b2:	d024      	beq.n	800d9fe <__multiply+0xf2>
 800d9b4:	f104 0e14 	add.w	lr, r4, #20
 800d9b8:	46a9      	mov	r9, r5
 800d9ba:	f04f 0c00 	mov.w	ip, #0
 800d9be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9c2:	f8d9 3000 	ldr.w	r3, [r9]
 800d9c6:	fa1f fb87 	uxth.w	fp, r7
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	fb0a 330b 	mla	r3, sl, fp, r3
 800d9d0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d9d4:	f8d9 7000 	ldr.w	r7, [r9]
 800d9d8:	4463      	add	r3, ip
 800d9da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9de:	fb0a c70b 	mla	r7, sl, fp, ip
 800d9e2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9ec:	4572      	cmp	r2, lr
 800d9ee:	f849 3b04 	str.w	r3, [r9], #4
 800d9f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9f6:	d8e2      	bhi.n	800d9be <__multiply+0xb2>
 800d9f8:	9b01      	ldr	r3, [sp, #4]
 800d9fa:	f845 c003 	str.w	ip, [r5, r3]
 800d9fe:	9b03      	ldr	r3, [sp, #12]
 800da00:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da04:	3104      	adds	r1, #4
 800da06:	f1b9 0f00 	cmp.w	r9, #0
 800da0a:	d021      	beq.n	800da50 <__multiply+0x144>
 800da0c:	682b      	ldr	r3, [r5, #0]
 800da0e:	f104 0c14 	add.w	ip, r4, #20
 800da12:	46ae      	mov	lr, r5
 800da14:	f04f 0a00 	mov.w	sl, #0
 800da18:	f8bc b000 	ldrh.w	fp, [ip]
 800da1c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da20:	fb09 770b 	mla	r7, r9, fp, r7
 800da24:	4457      	add	r7, sl
 800da26:	b29b      	uxth	r3, r3
 800da28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da2c:	f84e 3b04 	str.w	r3, [lr], #4
 800da30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da34:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da38:	f8be 3000 	ldrh.w	r3, [lr]
 800da3c:	fb09 330a 	mla	r3, r9, sl, r3
 800da40:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da44:	4562      	cmp	r2, ip
 800da46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da4a:	d8e5      	bhi.n	800da18 <__multiply+0x10c>
 800da4c:	9f01      	ldr	r7, [sp, #4]
 800da4e:	51eb      	str	r3, [r5, r7]
 800da50:	3504      	adds	r5, #4
 800da52:	e799      	b.n	800d988 <__multiply+0x7c>
 800da54:	3e01      	subs	r6, #1
 800da56:	e79b      	b.n	800d990 <__multiply+0x84>
 800da58:	080120db 	.word	0x080120db
 800da5c:	080120ec 	.word	0x080120ec

0800da60 <__pow5mult>:
 800da60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da64:	4615      	mov	r5, r2
 800da66:	f012 0203 	ands.w	r2, r2, #3
 800da6a:	4607      	mov	r7, r0
 800da6c:	460e      	mov	r6, r1
 800da6e:	d007      	beq.n	800da80 <__pow5mult+0x20>
 800da70:	4c25      	ldr	r4, [pc, #148]	@ (800db08 <__pow5mult+0xa8>)
 800da72:	3a01      	subs	r2, #1
 800da74:	2300      	movs	r3, #0
 800da76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da7a:	f7ff fe55 	bl	800d728 <__multadd>
 800da7e:	4606      	mov	r6, r0
 800da80:	10ad      	asrs	r5, r5, #2
 800da82:	d03d      	beq.n	800db00 <__pow5mult+0xa0>
 800da84:	69fc      	ldr	r4, [r7, #28]
 800da86:	b97c      	cbnz	r4, 800daa8 <__pow5mult+0x48>
 800da88:	2010      	movs	r0, #16
 800da8a:	f7ff fde3 	bl	800d654 <malloc>
 800da8e:	4602      	mov	r2, r0
 800da90:	61f8      	str	r0, [r7, #28]
 800da92:	b928      	cbnz	r0, 800daa0 <__pow5mult+0x40>
 800da94:	4b1d      	ldr	r3, [pc, #116]	@ (800db0c <__pow5mult+0xac>)
 800da96:	481e      	ldr	r0, [pc, #120]	@ (800db10 <__pow5mult+0xb0>)
 800da98:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800da9c:	f001 fee0 	bl	800f860 <__assert_func>
 800daa0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daa4:	6004      	str	r4, [r0, #0]
 800daa6:	60c4      	str	r4, [r0, #12]
 800daa8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800daac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dab0:	b94c      	cbnz	r4, 800dac6 <__pow5mult+0x66>
 800dab2:	f240 2171 	movw	r1, #625	@ 0x271
 800dab6:	4638      	mov	r0, r7
 800dab8:	f7ff ff12 	bl	800d8e0 <__i2b>
 800dabc:	2300      	movs	r3, #0
 800dabe:	f8c8 0008 	str.w	r0, [r8, #8]
 800dac2:	4604      	mov	r4, r0
 800dac4:	6003      	str	r3, [r0, #0]
 800dac6:	f04f 0900 	mov.w	r9, #0
 800daca:	07eb      	lsls	r3, r5, #31
 800dacc:	d50a      	bpl.n	800dae4 <__pow5mult+0x84>
 800dace:	4631      	mov	r1, r6
 800dad0:	4622      	mov	r2, r4
 800dad2:	4638      	mov	r0, r7
 800dad4:	f7ff ff1a 	bl	800d90c <__multiply>
 800dad8:	4631      	mov	r1, r6
 800dada:	4680      	mov	r8, r0
 800dadc:	4638      	mov	r0, r7
 800dade:	f7ff fe01 	bl	800d6e4 <_Bfree>
 800dae2:	4646      	mov	r6, r8
 800dae4:	106d      	asrs	r5, r5, #1
 800dae6:	d00b      	beq.n	800db00 <__pow5mult+0xa0>
 800dae8:	6820      	ldr	r0, [r4, #0]
 800daea:	b938      	cbnz	r0, 800dafc <__pow5mult+0x9c>
 800daec:	4622      	mov	r2, r4
 800daee:	4621      	mov	r1, r4
 800daf0:	4638      	mov	r0, r7
 800daf2:	f7ff ff0b 	bl	800d90c <__multiply>
 800daf6:	6020      	str	r0, [r4, #0]
 800daf8:	f8c0 9000 	str.w	r9, [r0]
 800dafc:	4604      	mov	r4, r0
 800dafe:	e7e4      	b.n	800daca <__pow5mult+0x6a>
 800db00:	4630      	mov	r0, r6
 800db02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db06:	bf00      	nop
 800db08:	08012148 	.word	0x08012148
 800db0c:	0801206c 	.word	0x0801206c
 800db10:	080120ec 	.word	0x080120ec

0800db14 <__lshift>:
 800db14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db18:	460c      	mov	r4, r1
 800db1a:	6849      	ldr	r1, [r1, #4]
 800db1c:	6923      	ldr	r3, [r4, #16]
 800db1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db22:	68a3      	ldr	r3, [r4, #8]
 800db24:	4607      	mov	r7, r0
 800db26:	4691      	mov	r9, r2
 800db28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db2c:	f108 0601 	add.w	r6, r8, #1
 800db30:	42b3      	cmp	r3, r6
 800db32:	db0b      	blt.n	800db4c <__lshift+0x38>
 800db34:	4638      	mov	r0, r7
 800db36:	f7ff fd95 	bl	800d664 <_Balloc>
 800db3a:	4605      	mov	r5, r0
 800db3c:	b948      	cbnz	r0, 800db52 <__lshift+0x3e>
 800db3e:	4602      	mov	r2, r0
 800db40:	4b28      	ldr	r3, [pc, #160]	@ (800dbe4 <__lshift+0xd0>)
 800db42:	4829      	ldr	r0, [pc, #164]	@ (800dbe8 <__lshift+0xd4>)
 800db44:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db48:	f001 fe8a 	bl	800f860 <__assert_func>
 800db4c:	3101      	adds	r1, #1
 800db4e:	005b      	lsls	r3, r3, #1
 800db50:	e7ee      	b.n	800db30 <__lshift+0x1c>
 800db52:	2300      	movs	r3, #0
 800db54:	f100 0114 	add.w	r1, r0, #20
 800db58:	f100 0210 	add.w	r2, r0, #16
 800db5c:	4618      	mov	r0, r3
 800db5e:	4553      	cmp	r3, sl
 800db60:	db33      	blt.n	800dbca <__lshift+0xb6>
 800db62:	6920      	ldr	r0, [r4, #16]
 800db64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db68:	f104 0314 	add.w	r3, r4, #20
 800db6c:	f019 091f 	ands.w	r9, r9, #31
 800db70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db78:	d02b      	beq.n	800dbd2 <__lshift+0xbe>
 800db7a:	f1c9 0e20 	rsb	lr, r9, #32
 800db7e:	468a      	mov	sl, r1
 800db80:	2200      	movs	r2, #0
 800db82:	6818      	ldr	r0, [r3, #0]
 800db84:	fa00 f009 	lsl.w	r0, r0, r9
 800db88:	4310      	orrs	r0, r2
 800db8a:	f84a 0b04 	str.w	r0, [sl], #4
 800db8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800db92:	459c      	cmp	ip, r3
 800db94:	fa22 f20e 	lsr.w	r2, r2, lr
 800db98:	d8f3      	bhi.n	800db82 <__lshift+0x6e>
 800db9a:	ebac 0304 	sub.w	r3, ip, r4
 800db9e:	3b15      	subs	r3, #21
 800dba0:	f023 0303 	bic.w	r3, r3, #3
 800dba4:	3304      	adds	r3, #4
 800dba6:	f104 0015 	add.w	r0, r4, #21
 800dbaa:	4584      	cmp	ip, r0
 800dbac:	bf38      	it	cc
 800dbae:	2304      	movcc	r3, #4
 800dbb0:	50ca      	str	r2, [r1, r3]
 800dbb2:	b10a      	cbz	r2, 800dbb8 <__lshift+0xa4>
 800dbb4:	f108 0602 	add.w	r6, r8, #2
 800dbb8:	3e01      	subs	r6, #1
 800dbba:	4638      	mov	r0, r7
 800dbbc:	612e      	str	r6, [r5, #16]
 800dbbe:	4621      	mov	r1, r4
 800dbc0:	f7ff fd90 	bl	800d6e4 <_Bfree>
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbca:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbce:	3301      	adds	r3, #1
 800dbd0:	e7c5      	b.n	800db5e <__lshift+0x4a>
 800dbd2:	3904      	subs	r1, #4
 800dbd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbd8:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbdc:	459c      	cmp	ip, r3
 800dbde:	d8f9      	bhi.n	800dbd4 <__lshift+0xc0>
 800dbe0:	e7ea      	b.n	800dbb8 <__lshift+0xa4>
 800dbe2:	bf00      	nop
 800dbe4:	080120db 	.word	0x080120db
 800dbe8:	080120ec 	.word	0x080120ec

0800dbec <__mcmp>:
 800dbec:	690a      	ldr	r2, [r1, #16]
 800dbee:	4603      	mov	r3, r0
 800dbf0:	6900      	ldr	r0, [r0, #16]
 800dbf2:	1a80      	subs	r0, r0, r2
 800dbf4:	b530      	push	{r4, r5, lr}
 800dbf6:	d10e      	bne.n	800dc16 <__mcmp+0x2a>
 800dbf8:	3314      	adds	r3, #20
 800dbfa:	3114      	adds	r1, #20
 800dbfc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc00:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc04:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc08:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc0c:	4295      	cmp	r5, r2
 800dc0e:	d003      	beq.n	800dc18 <__mcmp+0x2c>
 800dc10:	d205      	bcs.n	800dc1e <__mcmp+0x32>
 800dc12:	f04f 30ff 	mov.w	r0, #4294967295
 800dc16:	bd30      	pop	{r4, r5, pc}
 800dc18:	42a3      	cmp	r3, r4
 800dc1a:	d3f3      	bcc.n	800dc04 <__mcmp+0x18>
 800dc1c:	e7fb      	b.n	800dc16 <__mcmp+0x2a>
 800dc1e:	2001      	movs	r0, #1
 800dc20:	e7f9      	b.n	800dc16 <__mcmp+0x2a>
	...

0800dc24 <__mdiff>:
 800dc24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc28:	4689      	mov	r9, r1
 800dc2a:	4606      	mov	r6, r0
 800dc2c:	4611      	mov	r1, r2
 800dc2e:	4648      	mov	r0, r9
 800dc30:	4614      	mov	r4, r2
 800dc32:	f7ff ffdb 	bl	800dbec <__mcmp>
 800dc36:	1e05      	subs	r5, r0, #0
 800dc38:	d112      	bne.n	800dc60 <__mdiff+0x3c>
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	f7ff fd11 	bl	800d664 <_Balloc>
 800dc42:	4602      	mov	r2, r0
 800dc44:	b928      	cbnz	r0, 800dc52 <__mdiff+0x2e>
 800dc46:	4b3f      	ldr	r3, [pc, #252]	@ (800dd44 <__mdiff+0x120>)
 800dc48:	f240 2137 	movw	r1, #567	@ 0x237
 800dc4c:	483e      	ldr	r0, [pc, #248]	@ (800dd48 <__mdiff+0x124>)
 800dc4e:	f001 fe07 	bl	800f860 <__assert_func>
 800dc52:	2301      	movs	r3, #1
 800dc54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc58:	4610      	mov	r0, r2
 800dc5a:	b003      	add	sp, #12
 800dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc60:	bfbc      	itt	lt
 800dc62:	464b      	movlt	r3, r9
 800dc64:	46a1      	movlt	r9, r4
 800dc66:	4630      	mov	r0, r6
 800dc68:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc6c:	bfba      	itte	lt
 800dc6e:	461c      	movlt	r4, r3
 800dc70:	2501      	movlt	r5, #1
 800dc72:	2500      	movge	r5, #0
 800dc74:	f7ff fcf6 	bl	800d664 <_Balloc>
 800dc78:	4602      	mov	r2, r0
 800dc7a:	b918      	cbnz	r0, 800dc84 <__mdiff+0x60>
 800dc7c:	4b31      	ldr	r3, [pc, #196]	@ (800dd44 <__mdiff+0x120>)
 800dc7e:	f240 2145 	movw	r1, #581	@ 0x245
 800dc82:	e7e3      	b.n	800dc4c <__mdiff+0x28>
 800dc84:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc88:	6926      	ldr	r6, [r4, #16]
 800dc8a:	60c5      	str	r5, [r0, #12]
 800dc8c:	f109 0310 	add.w	r3, r9, #16
 800dc90:	f109 0514 	add.w	r5, r9, #20
 800dc94:	f104 0e14 	add.w	lr, r4, #20
 800dc98:	f100 0b14 	add.w	fp, r0, #20
 800dc9c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dca0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dca4:	9301      	str	r3, [sp, #4]
 800dca6:	46d9      	mov	r9, fp
 800dca8:	f04f 0c00 	mov.w	ip, #0
 800dcac:	9b01      	ldr	r3, [sp, #4]
 800dcae:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dcb2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	fa1f f38a 	uxth.w	r3, sl
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	b283      	uxth	r3, r0
 800dcc0:	1acb      	subs	r3, r1, r3
 800dcc2:	0c00      	lsrs	r0, r0, #16
 800dcc4:	4463      	add	r3, ip
 800dcc6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dcca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dcd4:	4576      	cmp	r6, lr
 800dcd6:	f849 3b04 	str.w	r3, [r9], #4
 800dcda:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dcde:	d8e5      	bhi.n	800dcac <__mdiff+0x88>
 800dce0:	1b33      	subs	r3, r6, r4
 800dce2:	3b15      	subs	r3, #21
 800dce4:	f023 0303 	bic.w	r3, r3, #3
 800dce8:	3415      	adds	r4, #21
 800dcea:	3304      	adds	r3, #4
 800dcec:	42a6      	cmp	r6, r4
 800dcee:	bf38      	it	cc
 800dcf0:	2304      	movcc	r3, #4
 800dcf2:	441d      	add	r5, r3
 800dcf4:	445b      	add	r3, fp
 800dcf6:	461e      	mov	r6, r3
 800dcf8:	462c      	mov	r4, r5
 800dcfa:	4544      	cmp	r4, r8
 800dcfc:	d30e      	bcc.n	800dd1c <__mdiff+0xf8>
 800dcfe:	f108 0103 	add.w	r1, r8, #3
 800dd02:	1b49      	subs	r1, r1, r5
 800dd04:	f021 0103 	bic.w	r1, r1, #3
 800dd08:	3d03      	subs	r5, #3
 800dd0a:	45a8      	cmp	r8, r5
 800dd0c:	bf38      	it	cc
 800dd0e:	2100      	movcc	r1, #0
 800dd10:	440b      	add	r3, r1
 800dd12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd16:	b191      	cbz	r1, 800dd3e <__mdiff+0x11a>
 800dd18:	6117      	str	r7, [r2, #16]
 800dd1a:	e79d      	b.n	800dc58 <__mdiff+0x34>
 800dd1c:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd20:	46e6      	mov	lr, ip
 800dd22:	0c08      	lsrs	r0, r1, #16
 800dd24:	fa1c fc81 	uxtah	ip, ip, r1
 800dd28:	4471      	add	r1, lr
 800dd2a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd2e:	b289      	uxth	r1, r1
 800dd30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd34:	f846 1b04 	str.w	r1, [r6], #4
 800dd38:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd3c:	e7dd      	b.n	800dcfa <__mdiff+0xd6>
 800dd3e:	3f01      	subs	r7, #1
 800dd40:	e7e7      	b.n	800dd12 <__mdiff+0xee>
 800dd42:	bf00      	nop
 800dd44:	080120db 	.word	0x080120db
 800dd48:	080120ec 	.word	0x080120ec

0800dd4c <__ulp>:
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	ed8d 0b00 	vstr	d0, [sp]
 800dd52:	9a01      	ldr	r2, [sp, #4]
 800dd54:	4b0f      	ldr	r3, [pc, #60]	@ (800dd94 <__ulp+0x48>)
 800dd56:	4013      	ands	r3, r2
 800dd58:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	dc08      	bgt.n	800dd72 <__ulp+0x26>
 800dd60:	425b      	negs	r3, r3
 800dd62:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800dd66:	ea4f 5223 	mov.w	r2, r3, asr #20
 800dd6a:	da04      	bge.n	800dd76 <__ulp+0x2a>
 800dd6c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800dd70:	4113      	asrs	r3, r2
 800dd72:	2200      	movs	r2, #0
 800dd74:	e008      	b.n	800dd88 <__ulp+0x3c>
 800dd76:	f1a2 0314 	sub.w	r3, r2, #20
 800dd7a:	2b1e      	cmp	r3, #30
 800dd7c:	bfda      	itte	le
 800dd7e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800dd82:	40da      	lsrle	r2, r3
 800dd84:	2201      	movgt	r2, #1
 800dd86:	2300      	movs	r3, #0
 800dd88:	4619      	mov	r1, r3
 800dd8a:	4610      	mov	r0, r2
 800dd8c:	ec41 0b10 	vmov	d0, r0, r1
 800dd90:	b002      	add	sp, #8
 800dd92:	4770      	bx	lr
 800dd94:	7ff00000 	.word	0x7ff00000

0800dd98 <__b2d>:
 800dd98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd9c:	6906      	ldr	r6, [r0, #16]
 800dd9e:	f100 0814 	add.w	r8, r0, #20
 800dda2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dda6:	1f37      	subs	r7, r6, #4
 800dda8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ddac:	4610      	mov	r0, r2
 800ddae:	f7ff fd4b 	bl	800d848 <__hi0bits>
 800ddb2:	f1c0 0320 	rsb	r3, r0, #32
 800ddb6:	280a      	cmp	r0, #10
 800ddb8:	600b      	str	r3, [r1, #0]
 800ddba:	491b      	ldr	r1, [pc, #108]	@ (800de28 <__b2d+0x90>)
 800ddbc:	dc15      	bgt.n	800ddea <__b2d+0x52>
 800ddbe:	f1c0 0c0b 	rsb	ip, r0, #11
 800ddc2:	fa22 f30c 	lsr.w	r3, r2, ip
 800ddc6:	45b8      	cmp	r8, r7
 800ddc8:	ea43 0501 	orr.w	r5, r3, r1
 800ddcc:	bf34      	ite	cc
 800ddce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ddd2:	2300      	movcs	r3, #0
 800ddd4:	3015      	adds	r0, #21
 800ddd6:	fa02 f000 	lsl.w	r0, r2, r0
 800ddda:	fa23 f30c 	lsr.w	r3, r3, ip
 800ddde:	4303      	orrs	r3, r0
 800dde0:	461c      	mov	r4, r3
 800dde2:	ec45 4b10 	vmov	d0, r4, r5
 800dde6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddea:	45b8      	cmp	r8, r7
 800ddec:	bf3a      	itte	cc
 800ddee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ddf2:	f1a6 0708 	subcc.w	r7, r6, #8
 800ddf6:	2300      	movcs	r3, #0
 800ddf8:	380b      	subs	r0, #11
 800ddfa:	d012      	beq.n	800de22 <__b2d+0x8a>
 800ddfc:	f1c0 0120 	rsb	r1, r0, #32
 800de00:	fa23 f401 	lsr.w	r4, r3, r1
 800de04:	4082      	lsls	r2, r0
 800de06:	4322      	orrs	r2, r4
 800de08:	4547      	cmp	r7, r8
 800de0a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800de0e:	bf8c      	ite	hi
 800de10:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800de14:	2200      	movls	r2, #0
 800de16:	4083      	lsls	r3, r0
 800de18:	40ca      	lsrs	r2, r1
 800de1a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800de1e:	4313      	orrs	r3, r2
 800de20:	e7de      	b.n	800dde0 <__b2d+0x48>
 800de22:	ea42 0501 	orr.w	r5, r2, r1
 800de26:	e7db      	b.n	800dde0 <__b2d+0x48>
 800de28:	3ff00000 	.word	0x3ff00000

0800de2c <__d2b>:
 800de2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de30:	460f      	mov	r7, r1
 800de32:	2101      	movs	r1, #1
 800de34:	ec59 8b10 	vmov	r8, r9, d0
 800de38:	4616      	mov	r6, r2
 800de3a:	f7ff fc13 	bl	800d664 <_Balloc>
 800de3e:	4604      	mov	r4, r0
 800de40:	b930      	cbnz	r0, 800de50 <__d2b+0x24>
 800de42:	4602      	mov	r2, r0
 800de44:	4b23      	ldr	r3, [pc, #140]	@ (800ded4 <__d2b+0xa8>)
 800de46:	4824      	ldr	r0, [pc, #144]	@ (800ded8 <__d2b+0xac>)
 800de48:	f240 310f 	movw	r1, #783	@ 0x30f
 800de4c:	f001 fd08 	bl	800f860 <__assert_func>
 800de50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800de54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de58:	b10d      	cbz	r5, 800de5e <__d2b+0x32>
 800de5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de5e:	9301      	str	r3, [sp, #4]
 800de60:	f1b8 0300 	subs.w	r3, r8, #0
 800de64:	d023      	beq.n	800deae <__d2b+0x82>
 800de66:	4668      	mov	r0, sp
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	f7ff fd0c 	bl	800d886 <__lo0bits>
 800de6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800de72:	b1d0      	cbz	r0, 800deaa <__d2b+0x7e>
 800de74:	f1c0 0320 	rsb	r3, r0, #32
 800de78:	fa02 f303 	lsl.w	r3, r2, r3
 800de7c:	430b      	orrs	r3, r1
 800de7e:	40c2      	lsrs	r2, r0
 800de80:	6163      	str	r3, [r4, #20]
 800de82:	9201      	str	r2, [sp, #4]
 800de84:	9b01      	ldr	r3, [sp, #4]
 800de86:	61a3      	str	r3, [r4, #24]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	bf0c      	ite	eq
 800de8c:	2201      	moveq	r2, #1
 800de8e:	2202      	movne	r2, #2
 800de90:	6122      	str	r2, [r4, #16]
 800de92:	b1a5      	cbz	r5, 800debe <__d2b+0x92>
 800de94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800de98:	4405      	add	r5, r0
 800de9a:	603d      	str	r5, [r7, #0]
 800de9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dea0:	6030      	str	r0, [r6, #0]
 800dea2:	4620      	mov	r0, r4
 800dea4:	b003      	add	sp, #12
 800dea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800deaa:	6161      	str	r1, [r4, #20]
 800deac:	e7ea      	b.n	800de84 <__d2b+0x58>
 800deae:	a801      	add	r0, sp, #4
 800deb0:	f7ff fce9 	bl	800d886 <__lo0bits>
 800deb4:	9b01      	ldr	r3, [sp, #4]
 800deb6:	6163      	str	r3, [r4, #20]
 800deb8:	3020      	adds	r0, #32
 800deba:	2201      	movs	r2, #1
 800debc:	e7e8      	b.n	800de90 <__d2b+0x64>
 800debe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dec2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dec6:	6038      	str	r0, [r7, #0]
 800dec8:	6918      	ldr	r0, [r3, #16]
 800deca:	f7ff fcbd 	bl	800d848 <__hi0bits>
 800dece:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ded2:	e7e5      	b.n	800dea0 <__d2b+0x74>
 800ded4:	080120db 	.word	0x080120db
 800ded8:	080120ec 	.word	0x080120ec

0800dedc <__ratio>:
 800dedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee0:	b085      	sub	sp, #20
 800dee2:	e9cd 1000 	strd	r1, r0, [sp]
 800dee6:	a902      	add	r1, sp, #8
 800dee8:	f7ff ff56 	bl	800dd98 <__b2d>
 800deec:	9800      	ldr	r0, [sp, #0]
 800deee:	a903      	add	r1, sp, #12
 800def0:	ec55 4b10 	vmov	r4, r5, d0
 800def4:	f7ff ff50 	bl	800dd98 <__b2d>
 800def8:	9b01      	ldr	r3, [sp, #4]
 800defa:	6919      	ldr	r1, [r3, #16]
 800defc:	9b00      	ldr	r3, [sp, #0]
 800defe:	691b      	ldr	r3, [r3, #16]
 800df00:	1ac9      	subs	r1, r1, r3
 800df02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800df06:	1a9b      	subs	r3, r3, r2
 800df08:	ec5b ab10 	vmov	sl, fp, d0
 800df0c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800df10:	2b00      	cmp	r3, #0
 800df12:	bfce      	itee	gt
 800df14:	462a      	movgt	r2, r5
 800df16:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800df1a:	465a      	movle	r2, fp
 800df1c:	462f      	mov	r7, r5
 800df1e:	46d9      	mov	r9, fp
 800df20:	bfcc      	ite	gt
 800df22:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800df26:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800df2a:	464b      	mov	r3, r9
 800df2c:	4652      	mov	r2, sl
 800df2e:	4620      	mov	r0, r4
 800df30:	4639      	mov	r1, r7
 800df32:	f7f2 fcab 	bl	800088c <__aeabi_ddiv>
 800df36:	ec41 0b10 	vmov	d0, r0, r1
 800df3a:	b005      	add	sp, #20
 800df3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800df40 <__copybits>:
 800df40:	3901      	subs	r1, #1
 800df42:	b570      	push	{r4, r5, r6, lr}
 800df44:	1149      	asrs	r1, r1, #5
 800df46:	6914      	ldr	r4, [r2, #16]
 800df48:	3101      	adds	r1, #1
 800df4a:	f102 0314 	add.w	r3, r2, #20
 800df4e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800df52:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800df56:	1f05      	subs	r5, r0, #4
 800df58:	42a3      	cmp	r3, r4
 800df5a:	d30c      	bcc.n	800df76 <__copybits+0x36>
 800df5c:	1aa3      	subs	r3, r4, r2
 800df5e:	3b11      	subs	r3, #17
 800df60:	f023 0303 	bic.w	r3, r3, #3
 800df64:	3211      	adds	r2, #17
 800df66:	42a2      	cmp	r2, r4
 800df68:	bf88      	it	hi
 800df6a:	2300      	movhi	r3, #0
 800df6c:	4418      	add	r0, r3
 800df6e:	2300      	movs	r3, #0
 800df70:	4288      	cmp	r0, r1
 800df72:	d305      	bcc.n	800df80 <__copybits+0x40>
 800df74:	bd70      	pop	{r4, r5, r6, pc}
 800df76:	f853 6b04 	ldr.w	r6, [r3], #4
 800df7a:	f845 6f04 	str.w	r6, [r5, #4]!
 800df7e:	e7eb      	b.n	800df58 <__copybits+0x18>
 800df80:	f840 3b04 	str.w	r3, [r0], #4
 800df84:	e7f4      	b.n	800df70 <__copybits+0x30>

0800df86 <__any_on>:
 800df86:	f100 0214 	add.w	r2, r0, #20
 800df8a:	6900      	ldr	r0, [r0, #16]
 800df8c:	114b      	asrs	r3, r1, #5
 800df8e:	4298      	cmp	r0, r3
 800df90:	b510      	push	{r4, lr}
 800df92:	db11      	blt.n	800dfb8 <__any_on+0x32>
 800df94:	dd0a      	ble.n	800dfac <__any_on+0x26>
 800df96:	f011 011f 	ands.w	r1, r1, #31
 800df9a:	d007      	beq.n	800dfac <__any_on+0x26>
 800df9c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dfa0:	fa24 f001 	lsr.w	r0, r4, r1
 800dfa4:	fa00 f101 	lsl.w	r1, r0, r1
 800dfa8:	428c      	cmp	r4, r1
 800dfaa:	d10b      	bne.n	800dfc4 <__any_on+0x3e>
 800dfac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d803      	bhi.n	800dfbc <__any_on+0x36>
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	bd10      	pop	{r4, pc}
 800dfb8:	4603      	mov	r3, r0
 800dfba:	e7f7      	b.n	800dfac <__any_on+0x26>
 800dfbc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dfc0:	2900      	cmp	r1, #0
 800dfc2:	d0f5      	beq.n	800dfb0 <__any_on+0x2a>
 800dfc4:	2001      	movs	r0, #1
 800dfc6:	e7f6      	b.n	800dfb6 <__any_on+0x30>

0800dfc8 <sulp>:
 800dfc8:	b570      	push	{r4, r5, r6, lr}
 800dfca:	4604      	mov	r4, r0
 800dfcc:	460d      	mov	r5, r1
 800dfce:	ec45 4b10 	vmov	d0, r4, r5
 800dfd2:	4616      	mov	r6, r2
 800dfd4:	f7ff feba 	bl	800dd4c <__ulp>
 800dfd8:	ec51 0b10 	vmov	r0, r1, d0
 800dfdc:	b17e      	cbz	r6, 800dffe <sulp+0x36>
 800dfde:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dfe2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	dd09      	ble.n	800dffe <sulp+0x36>
 800dfea:	051b      	lsls	r3, r3, #20
 800dfec:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800dff0:	2400      	movs	r4, #0
 800dff2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800dff6:	4622      	mov	r2, r4
 800dff8:	462b      	mov	r3, r5
 800dffa:	f7f2 fb1d 	bl	8000638 <__aeabi_dmul>
 800dffe:	ec41 0b10 	vmov	d0, r0, r1
 800e002:	bd70      	pop	{r4, r5, r6, pc}
 800e004:	0000      	movs	r0, r0
	...

0800e008 <_strtod_l>:
 800e008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e00c:	b09f      	sub	sp, #124	@ 0x7c
 800e00e:	460c      	mov	r4, r1
 800e010:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e012:	2200      	movs	r2, #0
 800e014:	921a      	str	r2, [sp, #104]	@ 0x68
 800e016:	9005      	str	r0, [sp, #20]
 800e018:	f04f 0a00 	mov.w	sl, #0
 800e01c:	f04f 0b00 	mov.w	fp, #0
 800e020:	460a      	mov	r2, r1
 800e022:	9219      	str	r2, [sp, #100]	@ 0x64
 800e024:	7811      	ldrb	r1, [r2, #0]
 800e026:	292b      	cmp	r1, #43	@ 0x2b
 800e028:	d04a      	beq.n	800e0c0 <_strtod_l+0xb8>
 800e02a:	d838      	bhi.n	800e09e <_strtod_l+0x96>
 800e02c:	290d      	cmp	r1, #13
 800e02e:	d832      	bhi.n	800e096 <_strtod_l+0x8e>
 800e030:	2908      	cmp	r1, #8
 800e032:	d832      	bhi.n	800e09a <_strtod_l+0x92>
 800e034:	2900      	cmp	r1, #0
 800e036:	d03b      	beq.n	800e0b0 <_strtod_l+0xa8>
 800e038:	2200      	movs	r2, #0
 800e03a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e03c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e03e:	782a      	ldrb	r2, [r5, #0]
 800e040:	2a30      	cmp	r2, #48	@ 0x30
 800e042:	f040 80b3 	bne.w	800e1ac <_strtod_l+0x1a4>
 800e046:	786a      	ldrb	r2, [r5, #1]
 800e048:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e04c:	2a58      	cmp	r2, #88	@ 0x58
 800e04e:	d16e      	bne.n	800e12e <_strtod_l+0x126>
 800e050:	9302      	str	r3, [sp, #8]
 800e052:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e054:	9301      	str	r3, [sp, #4]
 800e056:	ab1a      	add	r3, sp, #104	@ 0x68
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	4a8e      	ldr	r2, [pc, #568]	@ (800e294 <_strtod_l+0x28c>)
 800e05c:	9805      	ldr	r0, [sp, #20]
 800e05e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e060:	a919      	add	r1, sp, #100	@ 0x64
 800e062:	f001 fc83 	bl	800f96c <__gethex>
 800e066:	f010 060f 	ands.w	r6, r0, #15
 800e06a:	4604      	mov	r4, r0
 800e06c:	d005      	beq.n	800e07a <_strtod_l+0x72>
 800e06e:	2e06      	cmp	r6, #6
 800e070:	d128      	bne.n	800e0c4 <_strtod_l+0xbc>
 800e072:	3501      	adds	r5, #1
 800e074:	2300      	movs	r3, #0
 800e076:	9519      	str	r5, [sp, #100]	@ 0x64
 800e078:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e07a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f040 858e 	bne.w	800eb9e <_strtod_l+0xb96>
 800e082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e084:	b1cb      	cbz	r3, 800e0ba <_strtod_l+0xb2>
 800e086:	4652      	mov	r2, sl
 800e088:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e08c:	ec43 2b10 	vmov	d0, r2, r3
 800e090:	b01f      	add	sp, #124	@ 0x7c
 800e092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e096:	2920      	cmp	r1, #32
 800e098:	d1ce      	bne.n	800e038 <_strtod_l+0x30>
 800e09a:	3201      	adds	r2, #1
 800e09c:	e7c1      	b.n	800e022 <_strtod_l+0x1a>
 800e09e:	292d      	cmp	r1, #45	@ 0x2d
 800e0a0:	d1ca      	bne.n	800e038 <_strtod_l+0x30>
 800e0a2:	2101      	movs	r1, #1
 800e0a4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e0a6:	1c51      	adds	r1, r2, #1
 800e0a8:	9119      	str	r1, [sp, #100]	@ 0x64
 800e0aa:	7852      	ldrb	r2, [r2, #1]
 800e0ac:	2a00      	cmp	r2, #0
 800e0ae:	d1c5      	bne.n	800e03c <_strtod_l+0x34>
 800e0b0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e0b2:	9419      	str	r4, [sp, #100]	@ 0x64
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	f040 8570 	bne.w	800eb9a <_strtod_l+0xb92>
 800e0ba:	4652      	mov	r2, sl
 800e0bc:	465b      	mov	r3, fp
 800e0be:	e7e5      	b.n	800e08c <_strtod_l+0x84>
 800e0c0:	2100      	movs	r1, #0
 800e0c2:	e7ef      	b.n	800e0a4 <_strtod_l+0x9c>
 800e0c4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e0c6:	b13a      	cbz	r2, 800e0d8 <_strtod_l+0xd0>
 800e0c8:	2135      	movs	r1, #53	@ 0x35
 800e0ca:	a81c      	add	r0, sp, #112	@ 0x70
 800e0cc:	f7ff ff38 	bl	800df40 <__copybits>
 800e0d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e0d2:	9805      	ldr	r0, [sp, #20]
 800e0d4:	f7ff fb06 	bl	800d6e4 <_Bfree>
 800e0d8:	3e01      	subs	r6, #1
 800e0da:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e0dc:	2e04      	cmp	r6, #4
 800e0de:	d806      	bhi.n	800e0ee <_strtod_l+0xe6>
 800e0e0:	e8df f006 	tbb	[pc, r6]
 800e0e4:	201d0314 	.word	0x201d0314
 800e0e8:	14          	.byte	0x14
 800e0e9:	00          	.byte	0x00
 800e0ea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e0ee:	05e1      	lsls	r1, r4, #23
 800e0f0:	bf48      	it	mi
 800e0f2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e0f6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e0fa:	0d1b      	lsrs	r3, r3, #20
 800e0fc:	051b      	lsls	r3, r3, #20
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1bb      	bne.n	800e07a <_strtod_l+0x72>
 800e102:	f7fe fbcf 	bl	800c8a4 <__errno>
 800e106:	2322      	movs	r3, #34	@ 0x22
 800e108:	6003      	str	r3, [r0, #0]
 800e10a:	e7b6      	b.n	800e07a <_strtod_l+0x72>
 800e10c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e110:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e114:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e118:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e11c:	e7e7      	b.n	800e0ee <_strtod_l+0xe6>
 800e11e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e29c <_strtod_l+0x294>
 800e122:	e7e4      	b.n	800e0ee <_strtod_l+0xe6>
 800e124:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e128:	f04f 3aff 	mov.w	sl, #4294967295
 800e12c:	e7df      	b.n	800e0ee <_strtod_l+0xe6>
 800e12e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e130:	1c5a      	adds	r2, r3, #1
 800e132:	9219      	str	r2, [sp, #100]	@ 0x64
 800e134:	785b      	ldrb	r3, [r3, #1]
 800e136:	2b30      	cmp	r3, #48	@ 0x30
 800e138:	d0f9      	beq.n	800e12e <_strtod_l+0x126>
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d09d      	beq.n	800e07a <_strtod_l+0x72>
 800e13e:	2301      	movs	r3, #1
 800e140:	9309      	str	r3, [sp, #36]	@ 0x24
 800e142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e144:	930c      	str	r3, [sp, #48]	@ 0x30
 800e146:	2300      	movs	r3, #0
 800e148:	9308      	str	r3, [sp, #32]
 800e14a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e14c:	461f      	mov	r7, r3
 800e14e:	220a      	movs	r2, #10
 800e150:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e152:	7805      	ldrb	r5, [r0, #0]
 800e154:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e158:	b2d9      	uxtb	r1, r3
 800e15a:	2909      	cmp	r1, #9
 800e15c:	d928      	bls.n	800e1b0 <_strtod_l+0x1a8>
 800e15e:	494e      	ldr	r1, [pc, #312]	@ (800e298 <_strtod_l+0x290>)
 800e160:	2201      	movs	r2, #1
 800e162:	f001 fb62 	bl	800f82a <strncmp>
 800e166:	2800      	cmp	r0, #0
 800e168:	d032      	beq.n	800e1d0 <_strtod_l+0x1c8>
 800e16a:	2000      	movs	r0, #0
 800e16c:	462a      	mov	r2, r5
 800e16e:	4681      	mov	r9, r0
 800e170:	463d      	mov	r5, r7
 800e172:	4603      	mov	r3, r0
 800e174:	2a65      	cmp	r2, #101	@ 0x65
 800e176:	d001      	beq.n	800e17c <_strtod_l+0x174>
 800e178:	2a45      	cmp	r2, #69	@ 0x45
 800e17a:	d114      	bne.n	800e1a6 <_strtod_l+0x19e>
 800e17c:	b91d      	cbnz	r5, 800e186 <_strtod_l+0x17e>
 800e17e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e180:	4302      	orrs	r2, r0
 800e182:	d095      	beq.n	800e0b0 <_strtod_l+0xa8>
 800e184:	2500      	movs	r5, #0
 800e186:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e188:	1c62      	adds	r2, r4, #1
 800e18a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e18c:	7862      	ldrb	r2, [r4, #1]
 800e18e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e190:	d077      	beq.n	800e282 <_strtod_l+0x27a>
 800e192:	2a2d      	cmp	r2, #45	@ 0x2d
 800e194:	d07b      	beq.n	800e28e <_strtod_l+0x286>
 800e196:	f04f 0c00 	mov.w	ip, #0
 800e19a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e19e:	2909      	cmp	r1, #9
 800e1a0:	f240 8082 	bls.w	800e2a8 <_strtod_l+0x2a0>
 800e1a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800e1a6:	f04f 0800 	mov.w	r8, #0
 800e1aa:	e0a2      	b.n	800e2f2 <_strtod_l+0x2ea>
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	e7c7      	b.n	800e140 <_strtod_l+0x138>
 800e1b0:	2f08      	cmp	r7, #8
 800e1b2:	bfd5      	itete	le
 800e1b4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e1b6:	9908      	ldrgt	r1, [sp, #32]
 800e1b8:	fb02 3301 	mlale	r3, r2, r1, r3
 800e1bc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e1c0:	f100 0001 	add.w	r0, r0, #1
 800e1c4:	bfd4      	ite	le
 800e1c6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e1c8:	9308      	strgt	r3, [sp, #32]
 800e1ca:	3701      	adds	r7, #1
 800e1cc:	9019      	str	r0, [sp, #100]	@ 0x64
 800e1ce:	e7bf      	b.n	800e150 <_strtod_l+0x148>
 800e1d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1d2:	1c5a      	adds	r2, r3, #1
 800e1d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1d6:	785a      	ldrb	r2, [r3, #1]
 800e1d8:	b37f      	cbz	r7, 800e23a <_strtod_l+0x232>
 800e1da:	4681      	mov	r9, r0
 800e1dc:	463d      	mov	r5, r7
 800e1de:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e1e2:	2b09      	cmp	r3, #9
 800e1e4:	d912      	bls.n	800e20c <_strtod_l+0x204>
 800e1e6:	2301      	movs	r3, #1
 800e1e8:	e7c4      	b.n	800e174 <_strtod_l+0x16c>
 800e1ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1f0:	785a      	ldrb	r2, [r3, #1]
 800e1f2:	3001      	adds	r0, #1
 800e1f4:	2a30      	cmp	r2, #48	@ 0x30
 800e1f6:	d0f8      	beq.n	800e1ea <_strtod_l+0x1e2>
 800e1f8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e1fc:	2b08      	cmp	r3, #8
 800e1fe:	f200 84d3 	bhi.w	800eba8 <_strtod_l+0xba0>
 800e202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e204:	930c      	str	r3, [sp, #48]	@ 0x30
 800e206:	4681      	mov	r9, r0
 800e208:	2000      	movs	r0, #0
 800e20a:	4605      	mov	r5, r0
 800e20c:	3a30      	subs	r2, #48	@ 0x30
 800e20e:	f100 0301 	add.w	r3, r0, #1
 800e212:	d02a      	beq.n	800e26a <_strtod_l+0x262>
 800e214:	4499      	add	r9, r3
 800e216:	eb00 0c05 	add.w	ip, r0, r5
 800e21a:	462b      	mov	r3, r5
 800e21c:	210a      	movs	r1, #10
 800e21e:	4563      	cmp	r3, ip
 800e220:	d10d      	bne.n	800e23e <_strtod_l+0x236>
 800e222:	1c69      	adds	r1, r5, #1
 800e224:	4401      	add	r1, r0
 800e226:	4428      	add	r0, r5
 800e228:	2808      	cmp	r0, #8
 800e22a:	dc16      	bgt.n	800e25a <_strtod_l+0x252>
 800e22c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e22e:	230a      	movs	r3, #10
 800e230:	fb03 2300 	mla	r3, r3, r0, r2
 800e234:	930a      	str	r3, [sp, #40]	@ 0x28
 800e236:	2300      	movs	r3, #0
 800e238:	e018      	b.n	800e26c <_strtod_l+0x264>
 800e23a:	4638      	mov	r0, r7
 800e23c:	e7da      	b.n	800e1f4 <_strtod_l+0x1ec>
 800e23e:	2b08      	cmp	r3, #8
 800e240:	f103 0301 	add.w	r3, r3, #1
 800e244:	dc03      	bgt.n	800e24e <_strtod_l+0x246>
 800e246:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e248:	434e      	muls	r6, r1
 800e24a:	960a      	str	r6, [sp, #40]	@ 0x28
 800e24c:	e7e7      	b.n	800e21e <_strtod_l+0x216>
 800e24e:	2b10      	cmp	r3, #16
 800e250:	bfde      	ittt	le
 800e252:	9e08      	ldrle	r6, [sp, #32]
 800e254:	434e      	mulle	r6, r1
 800e256:	9608      	strle	r6, [sp, #32]
 800e258:	e7e1      	b.n	800e21e <_strtod_l+0x216>
 800e25a:	280f      	cmp	r0, #15
 800e25c:	dceb      	bgt.n	800e236 <_strtod_l+0x22e>
 800e25e:	9808      	ldr	r0, [sp, #32]
 800e260:	230a      	movs	r3, #10
 800e262:	fb03 2300 	mla	r3, r3, r0, r2
 800e266:	9308      	str	r3, [sp, #32]
 800e268:	e7e5      	b.n	800e236 <_strtod_l+0x22e>
 800e26a:	4629      	mov	r1, r5
 800e26c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e26e:	1c50      	adds	r0, r2, #1
 800e270:	9019      	str	r0, [sp, #100]	@ 0x64
 800e272:	7852      	ldrb	r2, [r2, #1]
 800e274:	4618      	mov	r0, r3
 800e276:	460d      	mov	r5, r1
 800e278:	e7b1      	b.n	800e1de <_strtod_l+0x1d6>
 800e27a:	f04f 0900 	mov.w	r9, #0
 800e27e:	2301      	movs	r3, #1
 800e280:	e77d      	b.n	800e17e <_strtod_l+0x176>
 800e282:	f04f 0c00 	mov.w	ip, #0
 800e286:	1ca2      	adds	r2, r4, #2
 800e288:	9219      	str	r2, [sp, #100]	@ 0x64
 800e28a:	78a2      	ldrb	r2, [r4, #2]
 800e28c:	e785      	b.n	800e19a <_strtod_l+0x192>
 800e28e:	f04f 0c01 	mov.w	ip, #1
 800e292:	e7f8      	b.n	800e286 <_strtod_l+0x27e>
 800e294:	08012260 	.word	0x08012260
 800e298:	08012248 	.word	0x08012248
 800e29c:	7ff00000 	.word	0x7ff00000
 800e2a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e2a2:	1c51      	adds	r1, r2, #1
 800e2a4:	9119      	str	r1, [sp, #100]	@ 0x64
 800e2a6:	7852      	ldrb	r2, [r2, #1]
 800e2a8:	2a30      	cmp	r2, #48	@ 0x30
 800e2aa:	d0f9      	beq.n	800e2a0 <_strtod_l+0x298>
 800e2ac:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e2b0:	2908      	cmp	r1, #8
 800e2b2:	f63f af78 	bhi.w	800e1a6 <_strtod_l+0x19e>
 800e2b6:	3a30      	subs	r2, #48	@ 0x30
 800e2b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e2ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e2bc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e2be:	f04f 080a 	mov.w	r8, #10
 800e2c2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e2c4:	1c56      	adds	r6, r2, #1
 800e2c6:	9619      	str	r6, [sp, #100]	@ 0x64
 800e2c8:	7852      	ldrb	r2, [r2, #1]
 800e2ca:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e2ce:	f1be 0f09 	cmp.w	lr, #9
 800e2d2:	d939      	bls.n	800e348 <_strtod_l+0x340>
 800e2d4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e2d6:	1a76      	subs	r6, r6, r1
 800e2d8:	2e08      	cmp	r6, #8
 800e2da:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e2de:	dc03      	bgt.n	800e2e8 <_strtod_l+0x2e0>
 800e2e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e2e2:	4588      	cmp	r8, r1
 800e2e4:	bfa8      	it	ge
 800e2e6:	4688      	movge	r8, r1
 800e2e8:	f1bc 0f00 	cmp.w	ip, #0
 800e2ec:	d001      	beq.n	800e2f2 <_strtod_l+0x2ea>
 800e2ee:	f1c8 0800 	rsb	r8, r8, #0
 800e2f2:	2d00      	cmp	r5, #0
 800e2f4:	d14e      	bne.n	800e394 <_strtod_l+0x38c>
 800e2f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e2f8:	4308      	orrs	r0, r1
 800e2fa:	f47f aebe 	bne.w	800e07a <_strtod_l+0x72>
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	f47f aed6 	bne.w	800e0b0 <_strtod_l+0xa8>
 800e304:	2a69      	cmp	r2, #105	@ 0x69
 800e306:	d028      	beq.n	800e35a <_strtod_l+0x352>
 800e308:	dc25      	bgt.n	800e356 <_strtod_l+0x34e>
 800e30a:	2a49      	cmp	r2, #73	@ 0x49
 800e30c:	d025      	beq.n	800e35a <_strtod_l+0x352>
 800e30e:	2a4e      	cmp	r2, #78	@ 0x4e
 800e310:	f47f aece 	bne.w	800e0b0 <_strtod_l+0xa8>
 800e314:	499b      	ldr	r1, [pc, #620]	@ (800e584 <_strtod_l+0x57c>)
 800e316:	a819      	add	r0, sp, #100	@ 0x64
 800e318:	f001 fd4a 	bl	800fdb0 <__match>
 800e31c:	2800      	cmp	r0, #0
 800e31e:	f43f aec7 	beq.w	800e0b0 <_strtod_l+0xa8>
 800e322:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	2b28      	cmp	r3, #40	@ 0x28
 800e328:	d12e      	bne.n	800e388 <_strtod_l+0x380>
 800e32a:	4997      	ldr	r1, [pc, #604]	@ (800e588 <_strtod_l+0x580>)
 800e32c:	aa1c      	add	r2, sp, #112	@ 0x70
 800e32e:	a819      	add	r0, sp, #100	@ 0x64
 800e330:	f001 fd52 	bl	800fdd8 <__hexnan>
 800e334:	2805      	cmp	r0, #5
 800e336:	d127      	bne.n	800e388 <_strtod_l+0x380>
 800e338:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e33a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e33e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e342:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e346:	e698      	b.n	800e07a <_strtod_l+0x72>
 800e348:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e34a:	fb08 2101 	mla	r1, r8, r1, r2
 800e34e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e352:	920e      	str	r2, [sp, #56]	@ 0x38
 800e354:	e7b5      	b.n	800e2c2 <_strtod_l+0x2ba>
 800e356:	2a6e      	cmp	r2, #110	@ 0x6e
 800e358:	e7da      	b.n	800e310 <_strtod_l+0x308>
 800e35a:	498c      	ldr	r1, [pc, #560]	@ (800e58c <_strtod_l+0x584>)
 800e35c:	a819      	add	r0, sp, #100	@ 0x64
 800e35e:	f001 fd27 	bl	800fdb0 <__match>
 800e362:	2800      	cmp	r0, #0
 800e364:	f43f aea4 	beq.w	800e0b0 <_strtod_l+0xa8>
 800e368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e36a:	4989      	ldr	r1, [pc, #548]	@ (800e590 <_strtod_l+0x588>)
 800e36c:	3b01      	subs	r3, #1
 800e36e:	a819      	add	r0, sp, #100	@ 0x64
 800e370:	9319      	str	r3, [sp, #100]	@ 0x64
 800e372:	f001 fd1d 	bl	800fdb0 <__match>
 800e376:	b910      	cbnz	r0, 800e37e <_strtod_l+0x376>
 800e378:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e37a:	3301      	adds	r3, #1
 800e37c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e37e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e5a0 <_strtod_l+0x598>
 800e382:	f04f 0a00 	mov.w	sl, #0
 800e386:	e678      	b.n	800e07a <_strtod_l+0x72>
 800e388:	4882      	ldr	r0, [pc, #520]	@ (800e594 <_strtod_l+0x58c>)
 800e38a:	f001 fa61 	bl	800f850 <nan>
 800e38e:	ec5b ab10 	vmov	sl, fp, d0
 800e392:	e672      	b.n	800e07a <_strtod_l+0x72>
 800e394:	eba8 0309 	sub.w	r3, r8, r9
 800e398:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e39a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e39c:	2f00      	cmp	r7, #0
 800e39e:	bf08      	it	eq
 800e3a0:	462f      	moveq	r7, r5
 800e3a2:	2d10      	cmp	r5, #16
 800e3a4:	462c      	mov	r4, r5
 800e3a6:	bfa8      	it	ge
 800e3a8:	2410      	movge	r4, #16
 800e3aa:	f7f2 f8cb 	bl	8000544 <__aeabi_ui2d>
 800e3ae:	2d09      	cmp	r5, #9
 800e3b0:	4682      	mov	sl, r0
 800e3b2:	468b      	mov	fp, r1
 800e3b4:	dc13      	bgt.n	800e3de <_strtod_l+0x3d6>
 800e3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f43f ae5e 	beq.w	800e07a <_strtod_l+0x72>
 800e3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3c0:	dd78      	ble.n	800e4b4 <_strtod_l+0x4ac>
 800e3c2:	2b16      	cmp	r3, #22
 800e3c4:	dc5f      	bgt.n	800e486 <_strtod_l+0x47e>
 800e3c6:	4974      	ldr	r1, [pc, #464]	@ (800e598 <_strtod_l+0x590>)
 800e3c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e3cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e3d0:	4652      	mov	r2, sl
 800e3d2:	465b      	mov	r3, fp
 800e3d4:	f7f2 f930 	bl	8000638 <__aeabi_dmul>
 800e3d8:	4682      	mov	sl, r0
 800e3da:	468b      	mov	fp, r1
 800e3dc:	e64d      	b.n	800e07a <_strtod_l+0x72>
 800e3de:	4b6e      	ldr	r3, [pc, #440]	@ (800e598 <_strtod_l+0x590>)
 800e3e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e3e8:	f7f2 f926 	bl	8000638 <__aeabi_dmul>
 800e3ec:	4682      	mov	sl, r0
 800e3ee:	9808      	ldr	r0, [sp, #32]
 800e3f0:	468b      	mov	fp, r1
 800e3f2:	f7f2 f8a7 	bl	8000544 <__aeabi_ui2d>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	4650      	mov	r0, sl
 800e3fc:	4659      	mov	r1, fp
 800e3fe:	f7f1 ff65 	bl	80002cc <__adddf3>
 800e402:	2d0f      	cmp	r5, #15
 800e404:	4682      	mov	sl, r0
 800e406:	468b      	mov	fp, r1
 800e408:	ddd5      	ble.n	800e3b6 <_strtod_l+0x3ae>
 800e40a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e40c:	1b2c      	subs	r4, r5, r4
 800e40e:	441c      	add	r4, r3
 800e410:	2c00      	cmp	r4, #0
 800e412:	f340 8096 	ble.w	800e542 <_strtod_l+0x53a>
 800e416:	f014 030f 	ands.w	r3, r4, #15
 800e41a:	d00a      	beq.n	800e432 <_strtod_l+0x42a>
 800e41c:	495e      	ldr	r1, [pc, #376]	@ (800e598 <_strtod_l+0x590>)
 800e41e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e422:	4652      	mov	r2, sl
 800e424:	465b      	mov	r3, fp
 800e426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e42a:	f7f2 f905 	bl	8000638 <__aeabi_dmul>
 800e42e:	4682      	mov	sl, r0
 800e430:	468b      	mov	fp, r1
 800e432:	f034 040f 	bics.w	r4, r4, #15
 800e436:	d073      	beq.n	800e520 <_strtod_l+0x518>
 800e438:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e43c:	dd48      	ble.n	800e4d0 <_strtod_l+0x4c8>
 800e43e:	2400      	movs	r4, #0
 800e440:	46a0      	mov	r8, r4
 800e442:	940a      	str	r4, [sp, #40]	@ 0x28
 800e444:	46a1      	mov	r9, r4
 800e446:	9a05      	ldr	r2, [sp, #20]
 800e448:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e5a0 <_strtod_l+0x598>
 800e44c:	2322      	movs	r3, #34	@ 0x22
 800e44e:	6013      	str	r3, [r2, #0]
 800e450:	f04f 0a00 	mov.w	sl, #0
 800e454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e456:	2b00      	cmp	r3, #0
 800e458:	f43f ae0f 	beq.w	800e07a <_strtod_l+0x72>
 800e45c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e45e:	9805      	ldr	r0, [sp, #20]
 800e460:	f7ff f940 	bl	800d6e4 <_Bfree>
 800e464:	9805      	ldr	r0, [sp, #20]
 800e466:	4649      	mov	r1, r9
 800e468:	f7ff f93c 	bl	800d6e4 <_Bfree>
 800e46c:	9805      	ldr	r0, [sp, #20]
 800e46e:	4641      	mov	r1, r8
 800e470:	f7ff f938 	bl	800d6e4 <_Bfree>
 800e474:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e476:	9805      	ldr	r0, [sp, #20]
 800e478:	f7ff f934 	bl	800d6e4 <_Bfree>
 800e47c:	9805      	ldr	r0, [sp, #20]
 800e47e:	4621      	mov	r1, r4
 800e480:	f7ff f930 	bl	800d6e4 <_Bfree>
 800e484:	e5f9      	b.n	800e07a <_strtod_l+0x72>
 800e486:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e488:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e48c:	4293      	cmp	r3, r2
 800e48e:	dbbc      	blt.n	800e40a <_strtod_l+0x402>
 800e490:	4c41      	ldr	r4, [pc, #260]	@ (800e598 <_strtod_l+0x590>)
 800e492:	f1c5 050f 	rsb	r5, r5, #15
 800e496:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e49a:	4652      	mov	r2, sl
 800e49c:	465b      	mov	r3, fp
 800e49e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4a2:	f7f2 f8c9 	bl	8000638 <__aeabi_dmul>
 800e4a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4a8:	1b5d      	subs	r5, r3, r5
 800e4aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e4ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e4b2:	e78f      	b.n	800e3d4 <_strtod_l+0x3cc>
 800e4b4:	3316      	adds	r3, #22
 800e4b6:	dba8      	blt.n	800e40a <_strtod_l+0x402>
 800e4b8:	4b37      	ldr	r3, [pc, #220]	@ (800e598 <_strtod_l+0x590>)
 800e4ba:	eba9 0808 	sub.w	r8, r9, r8
 800e4be:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e4c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e4c6:	4650      	mov	r0, sl
 800e4c8:	4659      	mov	r1, fp
 800e4ca:	f7f2 f9df 	bl	800088c <__aeabi_ddiv>
 800e4ce:	e783      	b.n	800e3d8 <_strtod_l+0x3d0>
 800e4d0:	4b32      	ldr	r3, [pc, #200]	@ (800e59c <_strtod_l+0x594>)
 800e4d2:	9308      	str	r3, [sp, #32]
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	1124      	asrs	r4, r4, #4
 800e4d8:	4650      	mov	r0, sl
 800e4da:	4659      	mov	r1, fp
 800e4dc:	461e      	mov	r6, r3
 800e4de:	2c01      	cmp	r4, #1
 800e4e0:	dc21      	bgt.n	800e526 <_strtod_l+0x51e>
 800e4e2:	b10b      	cbz	r3, 800e4e8 <_strtod_l+0x4e0>
 800e4e4:	4682      	mov	sl, r0
 800e4e6:	468b      	mov	fp, r1
 800e4e8:	492c      	ldr	r1, [pc, #176]	@ (800e59c <_strtod_l+0x594>)
 800e4ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e4ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e4f2:	4652      	mov	r2, sl
 800e4f4:	465b      	mov	r3, fp
 800e4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4fa:	f7f2 f89d 	bl	8000638 <__aeabi_dmul>
 800e4fe:	4b28      	ldr	r3, [pc, #160]	@ (800e5a0 <_strtod_l+0x598>)
 800e500:	460a      	mov	r2, r1
 800e502:	400b      	ands	r3, r1
 800e504:	4927      	ldr	r1, [pc, #156]	@ (800e5a4 <_strtod_l+0x59c>)
 800e506:	428b      	cmp	r3, r1
 800e508:	4682      	mov	sl, r0
 800e50a:	d898      	bhi.n	800e43e <_strtod_l+0x436>
 800e50c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e510:	428b      	cmp	r3, r1
 800e512:	bf86      	itte	hi
 800e514:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e5a8 <_strtod_l+0x5a0>
 800e518:	f04f 3aff 	movhi.w	sl, #4294967295
 800e51c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e520:	2300      	movs	r3, #0
 800e522:	9308      	str	r3, [sp, #32]
 800e524:	e07a      	b.n	800e61c <_strtod_l+0x614>
 800e526:	07e2      	lsls	r2, r4, #31
 800e528:	d505      	bpl.n	800e536 <_strtod_l+0x52e>
 800e52a:	9b08      	ldr	r3, [sp, #32]
 800e52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e530:	f7f2 f882 	bl	8000638 <__aeabi_dmul>
 800e534:	2301      	movs	r3, #1
 800e536:	9a08      	ldr	r2, [sp, #32]
 800e538:	3208      	adds	r2, #8
 800e53a:	3601      	adds	r6, #1
 800e53c:	1064      	asrs	r4, r4, #1
 800e53e:	9208      	str	r2, [sp, #32]
 800e540:	e7cd      	b.n	800e4de <_strtod_l+0x4d6>
 800e542:	d0ed      	beq.n	800e520 <_strtod_l+0x518>
 800e544:	4264      	negs	r4, r4
 800e546:	f014 020f 	ands.w	r2, r4, #15
 800e54a:	d00a      	beq.n	800e562 <_strtod_l+0x55a>
 800e54c:	4b12      	ldr	r3, [pc, #72]	@ (800e598 <_strtod_l+0x590>)
 800e54e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e552:	4650      	mov	r0, sl
 800e554:	4659      	mov	r1, fp
 800e556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e55a:	f7f2 f997 	bl	800088c <__aeabi_ddiv>
 800e55e:	4682      	mov	sl, r0
 800e560:	468b      	mov	fp, r1
 800e562:	1124      	asrs	r4, r4, #4
 800e564:	d0dc      	beq.n	800e520 <_strtod_l+0x518>
 800e566:	2c1f      	cmp	r4, #31
 800e568:	dd20      	ble.n	800e5ac <_strtod_l+0x5a4>
 800e56a:	2400      	movs	r4, #0
 800e56c:	46a0      	mov	r8, r4
 800e56e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e570:	46a1      	mov	r9, r4
 800e572:	9a05      	ldr	r2, [sp, #20]
 800e574:	2322      	movs	r3, #34	@ 0x22
 800e576:	f04f 0a00 	mov.w	sl, #0
 800e57a:	f04f 0b00 	mov.w	fp, #0
 800e57e:	6013      	str	r3, [r2, #0]
 800e580:	e768      	b.n	800e454 <_strtod_l+0x44c>
 800e582:	bf00      	nop
 800e584:	08012035 	.word	0x08012035
 800e588:	0801224c 	.word	0x0801224c
 800e58c:	0801202d 	.word	0x0801202d
 800e590:	08012062 	.word	0x08012062
 800e594:	08012410 	.word	0x08012410
 800e598:	08012180 	.word	0x08012180
 800e59c:	08012158 	.word	0x08012158
 800e5a0:	7ff00000 	.word	0x7ff00000
 800e5a4:	7ca00000 	.word	0x7ca00000
 800e5a8:	7fefffff 	.word	0x7fefffff
 800e5ac:	f014 0310 	ands.w	r3, r4, #16
 800e5b0:	bf18      	it	ne
 800e5b2:	236a      	movne	r3, #106	@ 0x6a
 800e5b4:	4ea9      	ldr	r6, [pc, #676]	@ (800e85c <_strtod_l+0x854>)
 800e5b6:	9308      	str	r3, [sp, #32]
 800e5b8:	4650      	mov	r0, sl
 800e5ba:	4659      	mov	r1, fp
 800e5bc:	2300      	movs	r3, #0
 800e5be:	07e2      	lsls	r2, r4, #31
 800e5c0:	d504      	bpl.n	800e5cc <_strtod_l+0x5c4>
 800e5c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e5c6:	f7f2 f837 	bl	8000638 <__aeabi_dmul>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	1064      	asrs	r4, r4, #1
 800e5ce:	f106 0608 	add.w	r6, r6, #8
 800e5d2:	d1f4      	bne.n	800e5be <_strtod_l+0x5b6>
 800e5d4:	b10b      	cbz	r3, 800e5da <_strtod_l+0x5d2>
 800e5d6:	4682      	mov	sl, r0
 800e5d8:	468b      	mov	fp, r1
 800e5da:	9b08      	ldr	r3, [sp, #32]
 800e5dc:	b1b3      	cbz	r3, 800e60c <_strtod_l+0x604>
 800e5de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e5e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	4659      	mov	r1, fp
 800e5ea:	dd0f      	ble.n	800e60c <_strtod_l+0x604>
 800e5ec:	2b1f      	cmp	r3, #31
 800e5ee:	dd55      	ble.n	800e69c <_strtod_l+0x694>
 800e5f0:	2b34      	cmp	r3, #52	@ 0x34
 800e5f2:	bfde      	ittt	le
 800e5f4:	f04f 33ff 	movle.w	r3, #4294967295
 800e5f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e5fc:	4093      	lslle	r3, r2
 800e5fe:	f04f 0a00 	mov.w	sl, #0
 800e602:	bfcc      	ite	gt
 800e604:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e608:	ea03 0b01 	andle.w	fp, r3, r1
 800e60c:	2200      	movs	r2, #0
 800e60e:	2300      	movs	r3, #0
 800e610:	4650      	mov	r0, sl
 800e612:	4659      	mov	r1, fp
 800e614:	f7f2 fa78 	bl	8000b08 <__aeabi_dcmpeq>
 800e618:	2800      	cmp	r0, #0
 800e61a:	d1a6      	bne.n	800e56a <_strtod_l+0x562>
 800e61c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e61e:	9300      	str	r3, [sp, #0]
 800e620:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e622:	9805      	ldr	r0, [sp, #20]
 800e624:	462b      	mov	r3, r5
 800e626:	463a      	mov	r2, r7
 800e628:	f7ff f8c4 	bl	800d7b4 <__s2b>
 800e62c:	900a      	str	r0, [sp, #40]	@ 0x28
 800e62e:	2800      	cmp	r0, #0
 800e630:	f43f af05 	beq.w	800e43e <_strtod_l+0x436>
 800e634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e636:	2a00      	cmp	r2, #0
 800e638:	eba9 0308 	sub.w	r3, r9, r8
 800e63c:	bfa8      	it	ge
 800e63e:	2300      	movge	r3, #0
 800e640:	9312      	str	r3, [sp, #72]	@ 0x48
 800e642:	2400      	movs	r4, #0
 800e644:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e648:	9316      	str	r3, [sp, #88]	@ 0x58
 800e64a:	46a0      	mov	r8, r4
 800e64c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e64e:	9805      	ldr	r0, [sp, #20]
 800e650:	6859      	ldr	r1, [r3, #4]
 800e652:	f7ff f807 	bl	800d664 <_Balloc>
 800e656:	4681      	mov	r9, r0
 800e658:	2800      	cmp	r0, #0
 800e65a:	f43f aef4 	beq.w	800e446 <_strtod_l+0x43e>
 800e65e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e660:	691a      	ldr	r2, [r3, #16]
 800e662:	3202      	adds	r2, #2
 800e664:	f103 010c 	add.w	r1, r3, #12
 800e668:	0092      	lsls	r2, r2, #2
 800e66a:	300c      	adds	r0, #12
 800e66c:	f7fe f947 	bl	800c8fe <memcpy>
 800e670:	ec4b ab10 	vmov	d0, sl, fp
 800e674:	9805      	ldr	r0, [sp, #20]
 800e676:	aa1c      	add	r2, sp, #112	@ 0x70
 800e678:	a91b      	add	r1, sp, #108	@ 0x6c
 800e67a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e67e:	f7ff fbd5 	bl	800de2c <__d2b>
 800e682:	901a      	str	r0, [sp, #104]	@ 0x68
 800e684:	2800      	cmp	r0, #0
 800e686:	f43f aede 	beq.w	800e446 <_strtod_l+0x43e>
 800e68a:	9805      	ldr	r0, [sp, #20]
 800e68c:	2101      	movs	r1, #1
 800e68e:	f7ff f927 	bl	800d8e0 <__i2b>
 800e692:	4680      	mov	r8, r0
 800e694:	b948      	cbnz	r0, 800e6aa <_strtod_l+0x6a2>
 800e696:	f04f 0800 	mov.w	r8, #0
 800e69a:	e6d4      	b.n	800e446 <_strtod_l+0x43e>
 800e69c:	f04f 32ff 	mov.w	r2, #4294967295
 800e6a0:	fa02 f303 	lsl.w	r3, r2, r3
 800e6a4:	ea03 0a0a 	and.w	sl, r3, sl
 800e6a8:	e7b0      	b.n	800e60c <_strtod_l+0x604>
 800e6aa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e6ac:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e6ae:	2d00      	cmp	r5, #0
 800e6b0:	bfab      	itete	ge
 800e6b2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e6b4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e6b6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e6b8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e6ba:	bfac      	ite	ge
 800e6bc:	18ef      	addge	r7, r5, r3
 800e6be:	1b5e      	sublt	r6, r3, r5
 800e6c0:	9b08      	ldr	r3, [sp, #32]
 800e6c2:	1aed      	subs	r5, r5, r3
 800e6c4:	4415      	add	r5, r2
 800e6c6:	4b66      	ldr	r3, [pc, #408]	@ (800e860 <_strtod_l+0x858>)
 800e6c8:	3d01      	subs	r5, #1
 800e6ca:	429d      	cmp	r5, r3
 800e6cc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e6d0:	da50      	bge.n	800e774 <_strtod_l+0x76c>
 800e6d2:	1b5b      	subs	r3, r3, r5
 800e6d4:	2b1f      	cmp	r3, #31
 800e6d6:	eba2 0203 	sub.w	r2, r2, r3
 800e6da:	f04f 0101 	mov.w	r1, #1
 800e6de:	dc3d      	bgt.n	800e75c <_strtod_l+0x754>
 800e6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e6ea:	18bd      	adds	r5, r7, r2
 800e6ec:	9b08      	ldr	r3, [sp, #32]
 800e6ee:	42af      	cmp	r7, r5
 800e6f0:	4416      	add	r6, r2
 800e6f2:	441e      	add	r6, r3
 800e6f4:	463b      	mov	r3, r7
 800e6f6:	bfa8      	it	ge
 800e6f8:	462b      	movge	r3, r5
 800e6fa:	42b3      	cmp	r3, r6
 800e6fc:	bfa8      	it	ge
 800e6fe:	4633      	movge	r3, r6
 800e700:	2b00      	cmp	r3, #0
 800e702:	bfc2      	ittt	gt
 800e704:	1aed      	subgt	r5, r5, r3
 800e706:	1af6      	subgt	r6, r6, r3
 800e708:	1aff      	subgt	r7, r7, r3
 800e70a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	dd16      	ble.n	800e73e <_strtod_l+0x736>
 800e710:	4641      	mov	r1, r8
 800e712:	9805      	ldr	r0, [sp, #20]
 800e714:	461a      	mov	r2, r3
 800e716:	f7ff f9a3 	bl	800da60 <__pow5mult>
 800e71a:	4680      	mov	r8, r0
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d0ba      	beq.n	800e696 <_strtod_l+0x68e>
 800e720:	4601      	mov	r1, r0
 800e722:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e724:	9805      	ldr	r0, [sp, #20]
 800e726:	f7ff f8f1 	bl	800d90c <__multiply>
 800e72a:	900e      	str	r0, [sp, #56]	@ 0x38
 800e72c:	2800      	cmp	r0, #0
 800e72e:	f43f ae8a 	beq.w	800e446 <_strtod_l+0x43e>
 800e732:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e734:	9805      	ldr	r0, [sp, #20]
 800e736:	f7fe ffd5 	bl	800d6e4 <_Bfree>
 800e73a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e73c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e73e:	2d00      	cmp	r5, #0
 800e740:	dc1d      	bgt.n	800e77e <_strtod_l+0x776>
 800e742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e744:	2b00      	cmp	r3, #0
 800e746:	dd23      	ble.n	800e790 <_strtod_l+0x788>
 800e748:	4649      	mov	r1, r9
 800e74a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e74c:	9805      	ldr	r0, [sp, #20]
 800e74e:	f7ff f987 	bl	800da60 <__pow5mult>
 800e752:	4681      	mov	r9, r0
 800e754:	b9e0      	cbnz	r0, 800e790 <_strtod_l+0x788>
 800e756:	f04f 0900 	mov.w	r9, #0
 800e75a:	e674      	b.n	800e446 <_strtod_l+0x43e>
 800e75c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e760:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e764:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e768:	35e2      	adds	r5, #226	@ 0xe2
 800e76a:	fa01 f305 	lsl.w	r3, r1, r5
 800e76e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e770:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e772:	e7ba      	b.n	800e6ea <_strtod_l+0x6e2>
 800e774:	2300      	movs	r3, #0
 800e776:	9310      	str	r3, [sp, #64]	@ 0x40
 800e778:	2301      	movs	r3, #1
 800e77a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e77c:	e7b5      	b.n	800e6ea <_strtod_l+0x6e2>
 800e77e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e780:	9805      	ldr	r0, [sp, #20]
 800e782:	462a      	mov	r2, r5
 800e784:	f7ff f9c6 	bl	800db14 <__lshift>
 800e788:	901a      	str	r0, [sp, #104]	@ 0x68
 800e78a:	2800      	cmp	r0, #0
 800e78c:	d1d9      	bne.n	800e742 <_strtod_l+0x73a>
 800e78e:	e65a      	b.n	800e446 <_strtod_l+0x43e>
 800e790:	2e00      	cmp	r6, #0
 800e792:	dd07      	ble.n	800e7a4 <_strtod_l+0x79c>
 800e794:	4649      	mov	r1, r9
 800e796:	9805      	ldr	r0, [sp, #20]
 800e798:	4632      	mov	r2, r6
 800e79a:	f7ff f9bb 	bl	800db14 <__lshift>
 800e79e:	4681      	mov	r9, r0
 800e7a0:	2800      	cmp	r0, #0
 800e7a2:	d0d8      	beq.n	800e756 <_strtod_l+0x74e>
 800e7a4:	2f00      	cmp	r7, #0
 800e7a6:	dd08      	ble.n	800e7ba <_strtod_l+0x7b2>
 800e7a8:	4641      	mov	r1, r8
 800e7aa:	9805      	ldr	r0, [sp, #20]
 800e7ac:	463a      	mov	r2, r7
 800e7ae:	f7ff f9b1 	bl	800db14 <__lshift>
 800e7b2:	4680      	mov	r8, r0
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	f43f ae46 	beq.w	800e446 <_strtod_l+0x43e>
 800e7ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7bc:	9805      	ldr	r0, [sp, #20]
 800e7be:	464a      	mov	r2, r9
 800e7c0:	f7ff fa30 	bl	800dc24 <__mdiff>
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	2800      	cmp	r0, #0
 800e7c8:	f43f ae3d 	beq.w	800e446 <_strtod_l+0x43e>
 800e7cc:	68c3      	ldr	r3, [r0, #12]
 800e7ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60c3      	str	r3, [r0, #12]
 800e7d4:	4641      	mov	r1, r8
 800e7d6:	f7ff fa09 	bl	800dbec <__mcmp>
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	da46      	bge.n	800e86c <_strtod_l+0x864>
 800e7de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e7e0:	ea53 030a 	orrs.w	r3, r3, sl
 800e7e4:	d16c      	bne.n	800e8c0 <_strtod_l+0x8b8>
 800e7e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d168      	bne.n	800e8c0 <_strtod_l+0x8b8>
 800e7ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7f2:	0d1b      	lsrs	r3, r3, #20
 800e7f4:	051b      	lsls	r3, r3, #20
 800e7f6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e7fa:	d961      	bls.n	800e8c0 <_strtod_l+0x8b8>
 800e7fc:	6963      	ldr	r3, [r4, #20]
 800e7fe:	b913      	cbnz	r3, 800e806 <_strtod_l+0x7fe>
 800e800:	6923      	ldr	r3, [r4, #16]
 800e802:	2b01      	cmp	r3, #1
 800e804:	dd5c      	ble.n	800e8c0 <_strtod_l+0x8b8>
 800e806:	4621      	mov	r1, r4
 800e808:	2201      	movs	r2, #1
 800e80a:	9805      	ldr	r0, [sp, #20]
 800e80c:	f7ff f982 	bl	800db14 <__lshift>
 800e810:	4641      	mov	r1, r8
 800e812:	4604      	mov	r4, r0
 800e814:	f7ff f9ea 	bl	800dbec <__mcmp>
 800e818:	2800      	cmp	r0, #0
 800e81a:	dd51      	ble.n	800e8c0 <_strtod_l+0x8b8>
 800e81c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e820:	9a08      	ldr	r2, [sp, #32]
 800e822:	0d1b      	lsrs	r3, r3, #20
 800e824:	051b      	lsls	r3, r3, #20
 800e826:	2a00      	cmp	r2, #0
 800e828:	d06b      	beq.n	800e902 <_strtod_l+0x8fa>
 800e82a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e82e:	d868      	bhi.n	800e902 <_strtod_l+0x8fa>
 800e830:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e834:	f67f ae9d 	bls.w	800e572 <_strtod_l+0x56a>
 800e838:	4b0a      	ldr	r3, [pc, #40]	@ (800e864 <_strtod_l+0x85c>)
 800e83a:	4650      	mov	r0, sl
 800e83c:	4659      	mov	r1, fp
 800e83e:	2200      	movs	r2, #0
 800e840:	f7f1 fefa 	bl	8000638 <__aeabi_dmul>
 800e844:	4b08      	ldr	r3, [pc, #32]	@ (800e868 <_strtod_l+0x860>)
 800e846:	400b      	ands	r3, r1
 800e848:	4682      	mov	sl, r0
 800e84a:	468b      	mov	fp, r1
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	f47f ae05 	bne.w	800e45c <_strtod_l+0x454>
 800e852:	9a05      	ldr	r2, [sp, #20]
 800e854:	2322      	movs	r3, #34	@ 0x22
 800e856:	6013      	str	r3, [r2, #0]
 800e858:	e600      	b.n	800e45c <_strtod_l+0x454>
 800e85a:	bf00      	nop
 800e85c:	08012278 	.word	0x08012278
 800e860:	fffffc02 	.word	0xfffffc02
 800e864:	39500000 	.word	0x39500000
 800e868:	7ff00000 	.word	0x7ff00000
 800e86c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e870:	d165      	bne.n	800e93e <_strtod_l+0x936>
 800e872:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e874:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e878:	b35a      	cbz	r2, 800e8d2 <_strtod_l+0x8ca>
 800e87a:	4a9f      	ldr	r2, [pc, #636]	@ (800eaf8 <_strtod_l+0xaf0>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d12b      	bne.n	800e8d8 <_strtod_l+0x8d0>
 800e880:	9b08      	ldr	r3, [sp, #32]
 800e882:	4651      	mov	r1, sl
 800e884:	b303      	cbz	r3, 800e8c8 <_strtod_l+0x8c0>
 800e886:	4b9d      	ldr	r3, [pc, #628]	@ (800eafc <_strtod_l+0xaf4>)
 800e888:	465a      	mov	r2, fp
 800e88a:	4013      	ands	r3, r2
 800e88c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e890:	f04f 32ff 	mov.w	r2, #4294967295
 800e894:	d81b      	bhi.n	800e8ce <_strtod_l+0x8c6>
 800e896:	0d1b      	lsrs	r3, r3, #20
 800e898:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e89c:	fa02 f303 	lsl.w	r3, r2, r3
 800e8a0:	4299      	cmp	r1, r3
 800e8a2:	d119      	bne.n	800e8d8 <_strtod_l+0x8d0>
 800e8a4:	4b96      	ldr	r3, [pc, #600]	@ (800eb00 <_strtod_l+0xaf8>)
 800e8a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d102      	bne.n	800e8b2 <_strtod_l+0x8aa>
 800e8ac:	3101      	adds	r1, #1
 800e8ae:	f43f adca 	beq.w	800e446 <_strtod_l+0x43e>
 800e8b2:	4b92      	ldr	r3, [pc, #584]	@ (800eafc <_strtod_l+0xaf4>)
 800e8b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8b6:	401a      	ands	r2, r3
 800e8b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e8bc:	f04f 0a00 	mov.w	sl, #0
 800e8c0:	9b08      	ldr	r3, [sp, #32]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d1b8      	bne.n	800e838 <_strtod_l+0x830>
 800e8c6:	e5c9      	b.n	800e45c <_strtod_l+0x454>
 800e8c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8cc:	e7e8      	b.n	800e8a0 <_strtod_l+0x898>
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	e7e6      	b.n	800e8a0 <_strtod_l+0x898>
 800e8d2:	ea53 030a 	orrs.w	r3, r3, sl
 800e8d6:	d0a1      	beq.n	800e81c <_strtod_l+0x814>
 800e8d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8da:	b1db      	cbz	r3, 800e914 <_strtod_l+0x90c>
 800e8dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e8de:	4213      	tst	r3, r2
 800e8e0:	d0ee      	beq.n	800e8c0 <_strtod_l+0x8b8>
 800e8e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8e4:	9a08      	ldr	r2, [sp, #32]
 800e8e6:	4650      	mov	r0, sl
 800e8e8:	4659      	mov	r1, fp
 800e8ea:	b1bb      	cbz	r3, 800e91c <_strtod_l+0x914>
 800e8ec:	f7ff fb6c 	bl	800dfc8 <sulp>
 800e8f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e8f4:	ec53 2b10 	vmov	r2, r3, d0
 800e8f8:	f7f1 fce8 	bl	80002cc <__adddf3>
 800e8fc:	4682      	mov	sl, r0
 800e8fe:	468b      	mov	fp, r1
 800e900:	e7de      	b.n	800e8c0 <_strtod_l+0x8b8>
 800e902:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e906:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e90a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e90e:	f04f 3aff 	mov.w	sl, #4294967295
 800e912:	e7d5      	b.n	800e8c0 <_strtod_l+0x8b8>
 800e914:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e916:	ea13 0f0a 	tst.w	r3, sl
 800e91a:	e7e1      	b.n	800e8e0 <_strtod_l+0x8d8>
 800e91c:	f7ff fb54 	bl	800dfc8 <sulp>
 800e920:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e924:	ec53 2b10 	vmov	r2, r3, d0
 800e928:	f7f1 fcce 	bl	80002c8 <__aeabi_dsub>
 800e92c:	2200      	movs	r2, #0
 800e92e:	2300      	movs	r3, #0
 800e930:	4682      	mov	sl, r0
 800e932:	468b      	mov	fp, r1
 800e934:	f7f2 f8e8 	bl	8000b08 <__aeabi_dcmpeq>
 800e938:	2800      	cmp	r0, #0
 800e93a:	d0c1      	beq.n	800e8c0 <_strtod_l+0x8b8>
 800e93c:	e619      	b.n	800e572 <_strtod_l+0x56a>
 800e93e:	4641      	mov	r1, r8
 800e940:	4620      	mov	r0, r4
 800e942:	f7ff facb 	bl	800dedc <__ratio>
 800e946:	ec57 6b10 	vmov	r6, r7, d0
 800e94a:	2200      	movs	r2, #0
 800e94c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e950:	4630      	mov	r0, r6
 800e952:	4639      	mov	r1, r7
 800e954:	f7f2 f8ec 	bl	8000b30 <__aeabi_dcmple>
 800e958:	2800      	cmp	r0, #0
 800e95a:	d06f      	beq.n	800ea3c <_strtod_l+0xa34>
 800e95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d17a      	bne.n	800ea58 <_strtod_l+0xa50>
 800e962:	f1ba 0f00 	cmp.w	sl, #0
 800e966:	d158      	bne.n	800ea1a <_strtod_l+0xa12>
 800e968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e96a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d15a      	bne.n	800ea28 <_strtod_l+0xa20>
 800e972:	4b64      	ldr	r3, [pc, #400]	@ (800eb04 <_strtod_l+0xafc>)
 800e974:	2200      	movs	r2, #0
 800e976:	4630      	mov	r0, r6
 800e978:	4639      	mov	r1, r7
 800e97a:	f7f2 f8cf 	bl	8000b1c <__aeabi_dcmplt>
 800e97e:	2800      	cmp	r0, #0
 800e980:	d159      	bne.n	800ea36 <_strtod_l+0xa2e>
 800e982:	4630      	mov	r0, r6
 800e984:	4639      	mov	r1, r7
 800e986:	4b60      	ldr	r3, [pc, #384]	@ (800eb08 <_strtod_l+0xb00>)
 800e988:	2200      	movs	r2, #0
 800e98a:	f7f1 fe55 	bl	8000638 <__aeabi_dmul>
 800e98e:	4606      	mov	r6, r0
 800e990:	460f      	mov	r7, r1
 800e992:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800e996:	9606      	str	r6, [sp, #24]
 800e998:	9307      	str	r3, [sp, #28]
 800e99a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e99e:	4d57      	ldr	r5, [pc, #348]	@ (800eafc <_strtod_l+0xaf4>)
 800e9a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e9a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9a6:	401d      	ands	r5, r3
 800e9a8:	4b58      	ldr	r3, [pc, #352]	@ (800eb0c <_strtod_l+0xb04>)
 800e9aa:	429d      	cmp	r5, r3
 800e9ac:	f040 80b2 	bne.w	800eb14 <_strtod_l+0xb0c>
 800e9b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e9b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800e9b6:	ec4b ab10 	vmov	d0, sl, fp
 800e9ba:	f7ff f9c7 	bl	800dd4c <__ulp>
 800e9be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e9c2:	ec51 0b10 	vmov	r0, r1, d0
 800e9c6:	f7f1 fe37 	bl	8000638 <__aeabi_dmul>
 800e9ca:	4652      	mov	r2, sl
 800e9cc:	465b      	mov	r3, fp
 800e9ce:	f7f1 fc7d 	bl	80002cc <__adddf3>
 800e9d2:	460b      	mov	r3, r1
 800e9d4:	4949      	ldr	r1, [pc, #292]	@ (800eafc <_strtod_l+0xaf4>)
 800e9d6:	4a4e      	ldr	r2, [pc, #312]	@ (800eb10 <_strtod_l+0xb08>)
 800e9d8:	4019      	ands	r1, r3
 800e9da:	4291      	cmp	r1, r2
 800e9dc:	4682      	mov	sl, r0
 800e9de:	d942      	bls.n	800ea66 <_strtod_l+0xa5e>
 800e9e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e9e2:	4b47      	ldr	r3, [pc, #284]	@ (800eb00 <_strtod_l+0xaf8>)
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d103      	bne.n	800e9f0 <_strtod_l+0x9e8>
 800e9e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	f43f ad2b 	beq.w	800e446 <_strtod_l+0x43e>
 800e9f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800eb00 <_strtod_l+0xaf8>
 800e9f4:	f04f 3aff 	mov.w	sl, #4294967295
 800e9f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e9fa:	9805      	ldr	r0, [sp, #20]
 800e9fc:	f7fe fe72 	bl	800d6e4 <_Bfree>
 800ea00:	9805      	ldr	r0, [sp, #20]
 800ea02:	4649      	mov	r1, r9
 800ea04:	f7fe fe6e 	bl	800d6e4 <_Bfree>
 800ea08:	9805      	ldr	r0, [sp, #20]
 800ea0a:	4641      	mov	r1, r8
 800ea0c:	f7fe fe6a 	bl	800d6e4 <_Bfree>
 800ea10:	9805      	ldr	r0, [sp, #20]
 800ea12:	4621      	mov	r1, r4
 800ea14:	f7fe fe66 	bl	800d6e4 <_Bfree>
 800ea18:	e618      	b.n	800e64c <_strtod_l+0x644>
 800ea1a:	f1ba 0f01 	cmp.w	sl, #1
 800ea1e:	d103      	bne.n	800ea28 <_strtod_l+0xa20>
 800ea20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f43f ada5 	beq.w	800e572 <_strtod_l+0x56a>
 800ea28:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ead8 <_strtod_l+0xad0>
 800ea2c:	4f35      	ldr	r7, [pc, #212]	@ (800eb04 <_strtod_l+0xafc>)
 800ea2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea32:	2600      	movs	r6, #0
 800ea34:	e7b1      	b.n	800e99a <_strtod_l+0x992>
 800ea36:	4f34      	ldr	r7, [pc, #208]	@ (800eb08 <_strtod_l+0xb00>)
 800ea38:	2600      	movs	r6, #0
 800ea3a:	e7aa      	b.n	800e992 <_strtod_l+0x98a>
 800ea3c:	4b32      	ldr	r3, [pc, #200]	@ (800eb08 <_strtod_l+0xb00>)
 800ea3e:	4630      	mov	r0, r6
 800ea40:	4639      	mov	r1, r7
 800ea42:	2200      	movs	r2, #0
 800ea44:	f7f1 fdf8 	bl	8000638 <__aeabi_dmul>
 800ea48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea4a:	4606      	mov	r6, r0
 800ea4c:	460f      	mov	r7, r1
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d09f      	beq.n	800e992 <_strtod_l+0x98a>
 800ea52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ea56:	e7a0      	b.n	800e99a <_strtod_l+0x992>
 800ea58:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eae0 <_strtod_l+0xad8>
 800ea5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ea60:	ec57 6b17 	vmov	r6, r7, d7
 800ea64:	e799      	b.n	800e99a <_strtod_l+0x992>
 800ea66:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800ea6a:	9b08      	ldr	r3, [sp, #32]
 800ea6c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1c1      	bne.n	800e9f8 <_strtod_l+0x9f0>
 800ea74:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ea78:	0d1b      	lsrs	r3, r3, #20
 800ea7a:	051b      	lsls	r3, r3, #20
 800ea7c:	429d      	cmp	r5, r3
 800ea7e:	d1bb      	bne.n	800e9f8 <_strtod_l+0x9f0>
 800ea80:	4630      	mov	r0, r6
 800ea82:	4639      	mov	r1, r7
 800ea84:	f7f2 fa96 	bl	8000fb4 <__aeabi_d2lz>
 800ea88:	f7f1 fda8 	bl	80005dc <__aeabi_l2d>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	4630      	mov	r0, r6
 800ea92:	4639      	mov	r1, r7
 800ea94:	f7f1 fc18 	bl	80002c8 <__aeabi_dsub>
 800ea98:	460b      	mov	r3, r1
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eaa0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eaa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eaa6:	ea46 060a 	orr.w	r6, r6, sl
 800eaaa:	431e      	orrs	r6, r3
 800eaac:	d06f      	beq.n	800eb8e <_strtod_l+0xb86>
 800eaae:	a30e      	add	r3, pc, #56	@ (adr r3, 800eae8 <_strtod_l+0xae0>)
 800eab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab4:	f7f2 f832 	bl	8000b1c <__aeabi_dcmplt>
 800eab8:	2800      	cmp	r0, #0
 800eaba:	f47f accf 	bne.w	800e45c <_strtod_l+0x454>
 800eabe:	a30c      	add	r3, pc, #48	@ (adr r3, 800eaf0 <_strtod_l+0xae8>)
 800eac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eac8:	f7f2 f846 	bl	8000b58 <__aeabi_dcmpgt>
 800eacc:	2800      	cmp	r0, #0
 800eace:	d093      	beq.n	800e9f8 <_strtod_l+0x9f0>
 800ead0:	e4c4      	b.n	800e45c <_strtod_l+0x454>
 800ead2:	bf00      	nop
 800ead4:	f3af 8000 	nop.w
 800ead8:	00000000 	.word	0x00000000
 800eadc:	bff00000 	.word	0xbff00000
 800eae0:	00000000 	.word	0x00000000
 800eae4:	3ff00000 	.word	0x3ff00000
 800eae8:	94a03595 	.word	0x94a03595
 800eaec:	3fdfffff 	.word	0x3fdfffff
 800eaf0:	35afe535 	.word	0x35afe535
 800eaf4:	3fe00000 	.word	0x3fe00000
 800eaf8:	000fffff 	.word	0x000fffff
 800eafc:	7ff00000 	.word	0x7ff00000
 800eb00:	7fefffff 	.word	0x7fefffff
 800eb04:	3ff00000 	.word	0x3ff00000
 800eb08:	3fe00000 	.word	0x3fe00000
 800eb0c:	7fe00000 	.word	0x7fe00000
 800eb10:	7c9fffff 	.word	0x7c9fffff
 800eb14:	9b08      	ldr	r3, [sp, #32]
 800eb16:	b323      	cbz	r3, 800eb62 <_strtod_l+0xb5a>
 800eb18:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800eb1c:	d821      	bhi.n	800eb62 <_strtod_l+0xb5a>
 800eb1e:	a328      	add	r3, pc, #160	@ (adr r3, 800ebc0 <_strtod_l+0xbb8>)
 800eb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb24:	4630      	mov	r0, r6
 800eb26:	4639      	mov	r1, r7
 800eb28:	f7f2 f802 	bl	8000b30 <__aeabi_dcmple>
 800eb2c:	b1a0      	cbz	r0, 800eb58 <_strtod_l+0xb50>
 800eb2e:	4639      	mov	r1, r7
 800eb30:	4630      	mov	r0, r6
 800eb32:	f7f2 f859 	bl	8000be8 <__aeabi_d2uiz>
 800eb36:	2801      	cmp	r0, #1
 800eb38:	bf38      	it	cc
 800eb3a:	2001      	movcc	r0, #1
 800eb3c:	f7f1 fd02 	bl	8000544 <__aeabi_ui2d>
 800eb40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb42:	4606      	mov	r6, r0
 800eb44:	460f      	mov	r7, r1
 800eb46:	b9fb      	cbnz	r3, 800eb88 <_strtod_l+0xb80>
 800eb48:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb4c:	9014      	str	r0, [sp, #80]	@ 0x50
 800eb4e:	9315      	str	r3, [sp, #84]	@ 0x54
 800eb50:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800eb54:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800eb58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800eb5a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800eb5e:	1b5b      	subs	r3, r3, r5
 800eb60:	9311      	str	r3, [sp, #68]	@ 0x44
 800eb62:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eb66:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800eb6a:	f7ff f8ef 	bl	800dd4c <__ulp>
 800eb6e:	4650      	mov	r0, sl
 800eb70:	ec53 2b10 	vmov	r2, r3, d0
 800eb74:	4659      	mov	r1, fp
 800eb76:	f7f1 fd5f 	bl	8000638 <__aeabi_dmul>
 800eb7a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800eb7e:	f7f1 fba5 	bl	80002cc <__adddf3>
 800eb82:	4682      	mov	sl, r0
 800eb84:	468b      	mov	fp, r1
 800eb86:	e770      	b.n	800ea6a <_strtod_l+0xa62>
 800eb88:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800eb8c:	e7e0      	b.n	800eb50 <_strtod_l+0xb48>
 800eb8e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ebc8 <_strtod_l+0xbc0>)
 800eb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb94:	f7f1 ffc2 	bl	8000b1c <__aeabi_dcmplt>
 800eb98:	e798      	b.n	800eacc <_strtod_l+0xac4>
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb9e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800eba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eba2:	6013      	str	r3, [r2, #0]
 800eba4:	f7ff ba6d 	b.w	800e082 <_strtod_l+0x7a>
 800eba8:	2a65      	cmp	r2, #101	@ 0x65
 800ebaa:	f43f ab66 	beq.w	800e27a <_strtod_l+0x272>
 800ebae:	2a45      	cmp	r2, #69	@ 0x45
 800ebb0:	f43f ab63 	beq.w	800e27a <_strtod_l+0x272>
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	f7ff bb9e 	b.w	800e2f6 <_strtod_l+0x2ee>
 800ebba:	bf00      	nop
 800ebbc:	f3af 8000 	nop.w
 800ebc0:	ffc00000 	.word	0xffc00000
 800ebc4:	41dfffff 	.word	0x41dfffff
 800ebc8:	94a03595 	.word	0x94a03595
 800ebcc:	3fcfffff 	.word	0x3fcfffff

0800ebd0 <_strtod_r>:
 800ebd0:	4b01      	ldr	r3, [pc, #4]	@ (800ebd8 <_strtod_r+0x8>)
 800ebd2:	f7ff ba19 	b.w	800e008 <_strtod_l>
 800ebd6:	bf00      	nop
 800ebd8:	20000094 	.word	0x20000094

0800ebdc <_strtol_l.constprop.0>:
 800ebdc:	2b24      	cmp	r3, #36	@ 0x24
 800ebde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebe2:	4686      	mov	lr, r0
 800ebe4:	4690      	mov	r8, r2
 800ebe6:	d801      	bhi.n	800ebec <_strtol_l.constprop.0+0x10>
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d106      	bne.n	800ebfa <_strtol_l.constprop.0+0x1e>
 800ebec:	f7fd fe5a 	bl	800c8a4 <__errno>
 800ebf0:	2316      	movs	r3, #22
 800ebf2:	6003      	str	r3, [r0, #0]
 800ebf4:	2000      	movs	r0, #0
 800ebf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebfa:	4834      	ldr	r0, [pc, #208]	@ (800eccc <_strtol_l.constprop.0+0xf0>)
 800ebfc:	460d      	mov	r5, r1
 800ebfe:	462a      	mov	r2, r5
 800ec00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec04:	5d06      	ldrb	r6, [r0, r4]
 800ec06:	f016 0608 	ands.w	r6, r6, #8
 800ec0a:	d1f8      	bne.n	800ebfe <_strtol_l.constprop.0+0x22>
 800ec0c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ec0e:	d12d      	bne.n	800ec6c <_strtol_l.constprop.0+0x90>
 800ec10:	782c      	ldrb	r4, [r5, #0]
 800ec12:	2601      	movs	r6, #1
 800ec14:	1c95      	adds	r5, r2, #2
 800ec16:	f033 0210 	bics.w	r2, r3, #16
 800ec1a:	d109      	bne.n	800ec30 <_strtol_l.constprop.0+0x54>
 800ec1c:	2c30      	cmp	r4, #48	@ 0x30
 800ec1e:	d12a      	bne.n	800ec76 <_strtol_l.constprop.0+0x9a>
 800ec20:	782a      	ldrb	r2, [r5, #0]
 800ec22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ec26:	2a58      	cmp	r2, #88	@ 0x58
 800ec28:	d125      	bne.n	800ec76 <_strtol_l.constprop.0+0x9a>
 800ec2a:	786c      	ldrb	r4, [r5, #1]
 800ec2c:	2310      	movs	r3, #16
 800ec2e:	3502      	adds	r5, #2
 800ec30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ec34:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ec38:	2200      	movs	r2, #0
 800ec3a:	fbbc f9f3 	udiv	r9, ip, r3
 800ec3e:	4610      	mov	r0, r2
 800ec40:	fb03 ca19 	mls	sl, r3, r9, ip
 800ec44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ec48:	2f09      	cmp	r7, #9
 800ec4a:	d81b      	bhi.n	800ec84 <_strtol_l.constprop.0+0xa8>
 800ec4c:	463c      	mov	r4, r7
 800ec4e:	42a3      	cmp	r3, r4
 800ec50:	dd27      	ble.n	800eca2 <_strtol_l.constprop.0+0xc6>
 800ec52:	1c57      	adds	r7, r2, #1
 800ec54:	d007      	beq.n	800ec66 <_strtol_l.constprop.0+0x8a>
 800ec56:	4581      	cmp	r9, r0
 800ec58:	d320      	bcc.n	800ec9c <_strtol_l.constprop.0+0xc0>
 800ec5a:	d101      	bne.n	800ec60 <_strtol_l.constprop.0+0x84>
 800ec5c:	45a2      	cmp	sl, r4
 800ec5e:	db1d      	blt.n	800ec9c <_strtol_l.constprop.0+0xc0>
 800ec60:	fb00 4003 	mla	r0, r0, r3, r4
 800ec64:	2201      	movs	r2, #1
 800ec66:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ec6a:	e7eb      	b.n	800ec44 <_strtol_l.constprop.0+0x68>
 800ec6c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ec6e:	bf04      	itt	eq
 800ec70:	782c      	ldrbeq	r4, [r5, #0]
 800ec72:	1c95      	addeq	r5, r2, #2
 800ec74:	e7cf      	b.n	800ec16 <_strtol_l.constprop.0+0x3a>
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d1da      	bne.n	800ec30 <_strtol_l.constprop.0+0x54>
 800ec7a:	2c30      	cmp	r4, #48	@ 0x30
 800ec7c:	bf0c      	ite	eq
 800ec7e:	2308      	moveq	r3, #8
 800ec80:	230a      	movne	r3, #10
 800ec82:	e7d5      	b.n	800ec30 <_strtol_l.constprop.0+0x54>
 800ec84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ec88:	2f19      	cmp	r7, #25
 800ec8a:	d801      	bhi.n	800ec90 <_strtol_l.constprop.0+0xb4>
 800ec8c:	3c37      	subs	r4, #55	@ 0x37
 800ec8e:	e7de      	b.n	800ec4e <_strtol_l.constprop.0+0x72>
 800ec90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ec94:	2f19      	cmp	r7, #25
 800ec96:	d804      	bhi.n	800eca2 <_strtol_l.constprop.0+0xc6>
 800ec98:	3c57      	subs	r4, #87	@ 0x57
 800ec9a:	e7d8      	b.n	800ec4e <_strtol_l.constprop.0+0x72>
 800ec9c:	f04f 32ff 	mov.w	r2, #4294967295
 800eca0:	e7e1      	b.n	800ec66 <_strtol_l.constprop.0+0x8a>
 800eca2:	1c53      	adds	r3, r2, #1
 800eca4:	d108      	bne.n	800ecb8 <_strtol_l.constprop.0+0xdc>
 800eca6:	2322      	movs	r3, #34	@ 0x22
 800eca8:	f8ce 3000 	str.w	r3, [lr]
 800ecac:	4660      	mov	r0, ip
 800ecae:	f1b8 0f00 	cmp.w	r8, #0
 800ecb2:	d0a0      	beq.n	800ebf6 <_strtol_l.constprop.0+0x1a>
 800ecb4:	1e69      	subs	r1, r5, #1
 800ecb6:	e006      	b.n	800ecc6 <_strtol_l.constprop.0+0xea>
 800ecb8:	b106      	cbz	r6, 800ecbc <_strtol_l.constprop.0+0xe0>
 800ecba:	4240      	negs	r0, r0
 800ecbc:	f1b8 0f00 	cmp.w	r8, #0
 800ecc0:	d099      	beq.n	800ebf6 <_strtol_l.constprop.0+0x1a>
 800ecc2:	2a00      	cmp	r2, #0
 800ecc4:	d1f6      	bne.n	800ecb4 <_strtol_l.constprop.0+0xd8>
 800ecc6:	f8c8 1000 	str.w	r1, [r8]
 800ecca:	e794      	b.n	800ebf6 <_strtol_l.constprop.0+0x1a>
 800eccc:	080122a1 	.word	0x080122a1

0800ecd0 <_strtol_r>:
 800ecd0:	f7ff bf84 	b.w	800ebdc <_strtol_l.constprop.0>

0800ecd4 <__ssputs_r>:
 800ecd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd8:	688e      	ldr	r6, [r1, #8]
 800ecda:	461f      	mov	r7, r3
 800ecdc:	42be      	cmp	r6, r7
 800ecde:	680b      	ldr	r3, [r1, #0]
 800ece0:	4682      	mov	sl, r0
 800ece2:	460c      	mov	r4, r1
 800ece4:	4690      	mov	r8, r2
 800ece6:	d82d      	bhi.n	800ed44 <__ssputs_r+0x70>
 800ece8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ecec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ecf0:	d026      	beq.n	800ed40 <__ssputs_r+0x6c>
 800ecf2:	6965      	ldr	r5, [r4, #20]
 800ecf4:	6909      	ldr	r1, [r1, #16]
 800ecf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecfa:	eba3 0901 	sub.w	r9, r3, r1
 800ecfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed02:	1c7b      	adds	r3, r7, #1
 800ed04:	444b      	add	r3, r9
 800ed06:	106d      	asrs	r5, r5, #1
 800ed08:	429d      	cmp	r5, r3
 800ed0a:	bf38      	it	cc
 800ed0c:	461d      	movcc	r5, r3
 800ed0e:	0553      	lsls	r3, r2, #21
 800ed10:	d527      	bpl.n	800ed62 <__ssputs_r+0x8e>
 800ed12:	4629      	mov	r1, r5
 800ed14:	f7fc fcf4 	bl	800b700 <_malloc_r>
 800ed18:	4606      	mov	r6, r0
 800ed1a:	b360      	cbz	r0, 800ed76 <__ssputs_r+0xa2>
 800ed1c:	6921      	ldr	r1, [r4, #16]
 800ed1e:	464a      	mov	r2, r9
 800ed20:	f7fd fded 	bl	800c8fe <memcpy>
 800ed24:	89a3      	ldrh	r3, [r4, #12]
 800ed26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed2e:	81a3      	strh	r3, [r4, #12]
 800ed30:	6126      	str	r6, [r4, #16]
 800ed32:	6165      	str	r5, [r4, #20]
 800ed34:	444e      	add	r6, r9
 800ed36:	eba5 0509 	sub.w	r5, r5, r9
 800ed3a:	6026      	str	r6, [r4, #0]
 800ed3c:	60a5      	str	r5, [r4, #8]
 800ed3e:	463e      	mov	r6, r7
 800ed40:	42be      	cmp	r6, r7
 800ed42:	d900      	bls.n	800ed46 <__ssputs_r+0x72>
 800ed44:	463e      	mov	r6, r7
 800ed46:	6820      	ldr	r0, [r4, #0]
 800ed48:	4632      	mov	r2, r6
 800ed4a:	4641      	mov	r1, r8
 800ed4c:	f000 fd53 	bl	800f7f6 <memmove>
 800ed50:	68a3      	ldr	r3, [r4, #8]
 800ed52:	1b9b      	subs	r3, r3, r6
 800ed54:	60a3      	str	r3, [r4, #8]
 800ed56:	6823      	ldr	r3, [r4, #0]
 800ed58:	4433      	add	r3, r6
 800ed5a:	6023      	str	r3, [r4, #0]
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed62:	462a      	mov	r2, r5
 800ed64:	f001 f8e5 	bl	800ff32 <_realloc_r>
 800ed68:	4606      	mov	r6, r0
 800ed6a:	2800      	cmp	r0, #0
 800ed6c:	d1e0      	bne.n	800ed30 <__ssputs_r+0x5c>
 800ed6e:	6921      	ldr	r1, [r4, #16]
 800ed70:	4650      	mov	r0, sl
 800ed72:	f7fe fc25 	bl	800d5c0 <_free_r>
 800ed76:	230c      	movs	r3, #12
 800ed78:	f8ca 3000 	str.w	r3, [sl]
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed82:	81a3      	strh	r3, [r4, #12]
 800ed84:	f04f 30ff 	mov.w	r0, #4294967295
 800ed88:	e7e9      	b.n	800ed5e <__ssputs_r+0x8a>
	...

0800ed8c <_svfiprintf_r>:
 800ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	4698      	mov	r8, r3
 800ed92:	898b      	ldrh	r3, [r1, #12]
 800ed94:	061b      	lsls	r3, r3, #24
 800ed96:	b09d      	sub	sp, #116	@ 0x74
 800ed98:	4607      	mov	r7, r0
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	4614      	mov	r4, r2
 800ed9e:	d510      	bpl.n	800edc2 <_svfiprintf_r+0x36>
 800eda0:	690b      	ldr	r3, [r1, #16]
 800eda2:	b973      	cbnz	r3, 800edc2 <_svfiprintf_r+0x36>
 800eda4:	2140      	movs	r1, #64	@ 0x40
 800eda6:	f7fc fcab 	bl	800b700 <_malloc_r>
 800edaa:	6028      	str	r0, [r5, #0]
 800edac:	6128      	str	r0, [r5, #16]
 800edae:	b930      	cbnz	r0, 800edbe <_svfiprintf_r+0x32>
 800edb0:	230c      	movs	r3, #12
 800edb2:	603b      	str	r3, [r7, #0]
 800edb4:	f04f 30ff 	mov.w	r0, #4294967295
 800edb8:	b01d      	add	sp, #116	@ 0x74
 800edba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edbe:	2340      	movs	r3, #64	@ 0x40
 800edc0:	616b      	str	r3, [r5, #20]
 800edc2:	2300      	movs	r3, #0
 800edc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc6:	2320      	movs	r3, #32
 800edc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edcc:	f8cd 800c 	str.w	r8, [sp, #12]
 800edd0:	2330      	movs	r3, #48	@ 0x30
 800edd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ef70 <_svfiprintf_r+0x1e4>
 800edd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edda:	f04f 0901 	mov.w	r9, #1
 800edde:	4623      	mov	r3, r4
 800ede0:	469a      	mov	sl, r3
 800ede2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede6:	b10a      	cbz	r2, 800edec <_svfiprintf_r+0x60>
 800ede8:	2a25      	cmp	r2, #37	@ 0x25
 800edea:	d1f9      	bne.n	800ede0 <_svfiprintf_r+0x54>
 800edec:	ebba 0b04 	subs.w	fp, sl, r4
 800edf0:	d00b      	beq.n	800ee0a <_svfiprintf_r+0x7e>
 800edf2:	465b      	mov	r3, fp
 800edf4:	4622      	mov	r2, r4
 800edf6:	4629      	mov	r1, r5
 800edf8:	4638      	mov	r0, r7
 800edfa:	f7ff ff6b 	bl	800ecd4 <__ssputs_r>
 800edfe:	3001      	adds	r0, #1
 800ee00:	f000 80a7 	beq.w	800ef52 <_svfiprintf_r+0x1c6>
 800ee04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee06:	445a      	add	r2, fp
 800ee08:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 809f 	beq.w	800ef52 <_svfiprintf_r+0x1c6>
 800ee14:	2300      	movs	r3, #0
 800ee16:	f04f 32ff 	mov.w	r2, #4294967295
 800ee1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee1e:	f10a 0a01 	add.w	sl, sl, #1
 800ee22:	9304      	str	r3, [sp, #16]
 800ee24:	9307      	str	r3, [sp, #28]
 800ee26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee2c:	4654      	mov	r4, sl
 800ee2e:	2205      	movs	r2, #5
 800ee30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee34:	484e      	ldr	r0, [pc, #312]	@ (800ef70 <_svfiprintf_r+0x1e4>)
 800ee36:	f7f1 f9eb 	bl	8000210 <memchr>
 800ee3a:	9a04      	ldr	r2, [sp, #16]
 800ee3c:	b9d8      	cbnz	r0, 800ee76 <_svfiprintf_r+0xea>
 800ee3e:	06d0      	lsls	r0, r2, #27
 800ee40:	bf44      	itt	mi
 800ee42:	2320      	movmi	r3, #32
 800ee44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee48:	0711      	lsls	r1, r2, #28
 800ee4a:	bf44      	itt	mi
 800ee4c:	232b      	movmi	r3, #43	@ 0x2b
 800ee4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee52:	f89a 3000 	ldrb.w	r3, [sl]
 800ee56:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee58:	d015      	beq.n	800ee86 <_svfiprintf_r+0xfa>
 800ee5a:	9a07      	ldr	r2, [sp, #28]
 800ee5c:	4654      	mov	r4, sl
 800ee5e:	2000      	movs	r0, #0
 800ee60:	f04f 0c0a 	mov.w	ip, #10
 800ee64:	4621      	mov	r1, r4
 800ee66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee6a:	3b30      	subs	r3, #48	@ 0x30
 800ee6c:	2b09      	cmp	r3, #9
 800ee6e:	d94b      	bls.n	800ef08 <_svfiprintf_r+0x17c>
 800ee70:	b1b0      	cbz	r0, 800eea0 <_svfiprintf_r+0x114>
 800ee72:	9207      	str	r2, [sp, #28]
 800ee74:	e014      	b.n	800eea0 <_svfiprintf_r+0x114>
 800ee76:	eba0 0308 	sub.w	r3, r0, r8
 800ee7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	9304      	str	r3, [sp, #16]
 800ee82:	46a2      	mov	sl, r4
 800ee84:	e7d2      	b.n	800ee2c <_svfiprintf_r+0xa0>
 800ee86:	9b03      	ldr	r3, [sp, #12]
 800ee88:	1d19      	adds	r1, r3, #4
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	9103      	str	r1, [sp, #12]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	bfbb      	ittet	lt
 800ee92:	425b      	neglt	r3, r3
 800ee94:	f042 0202 	orrlt.w	r2, r2, #2
 800ee98:	9307      	strge	r3, [sp, #28]
 800ee9a:	9307      	strlt	r3, [sp, #28]
 800ee9c:	bfb8      	it	lt
 800ee9e:	9204      	strlt	r2, [sp, #16]
 800eea0:	7823      	ldrb	r3, [r4, #0]
 800eea2:	2b2e      	cmp	r3, #46	@ 0x2e
 800eea4:	d10a      	bne.n	800eebc <_svfiprintf_r+0x130>
 800eea6:	7863      	ldrb	r3, [r4, #1]
 800eea8:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeaa:	d132      	bne.n	800ef12 <_svfiprintf_r+0x186>
 800eeac:	9b03      	ldr	r3, [sp, #12]
 800eeae:	1d1a      	adds	r2, r3, #4
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	9203      	str	r2, [sp, #12]
 800eeb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eeb8:	3402      	adds	r4, #2
 800eeba:	9305      	str	r3, [sp, #20]
 800eebc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ef80 <_svfiprintf_r+0x1f4>
 800eec0:	7821      	ldrb	r1, [r4, #0]
 800eec2:	2203      	movs	r2, #3
 800eec4:	4650      	mov	r0, sl
 800eec6:	f7f1 f9a3 	bl	8000210 <memchr>
 800eeca:	b138      	cbz	r0, 800eedc <_svfiprintf_r+0x150>
 800eecc:	9b04      	ldr	r3, [sp, #16]
 800eece:	eba0 000a 	sub.w	r0, r0, sl
 800eed2:	2240      	movs	r2, #64	@ 0x40
 800eed4:	4082      	lsls	r2, r0
 800eed6:	4313      	orrs	r3, r2
 800eed8:	3401      	adds	r4, #1
 800eeda:	9304      	str	r3, [sp, #16]
 800eedc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee0:	4824      	ldr	r0, [pc, #144]	@ (800ef74 <_svfiprintf_r+0x1e8>)
 800eee2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eee6:	2206      	movs	r2, #6
 800eee8:	f7f1 f992 	bl	8000210 <memchr>
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d036      	beq.n	800ef5e <_svfiprintf_r+0x1d2>
 800eef0:	4b21      	ldr	r3, [pc, #132]	@ (800ef78 <_svfiprintf_r+0x1ec>)
 800eef2:	bb1b      	cbnz	r3, 800ef3c <_svfiprintf_r+0x1b0>
 800eef4:	9b03      	ldr	r3, [sp, #12]
 800eef6:	3307      	adds	r3, #7
 800eef8:	f023 0307 	bic.w	r3, r3, #7
 800eefc:	3308      	adds	r3, #8
 800eefe:	9303      	str	r3, [sp, #12]
 800ef00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef02:	4433      	add	r3, r6
 800ef04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef06:	e76a      	b.n	800edde <_svfiprintf_r+0x52>
 800ef08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef0c:	460c      	mov	r4, r1
 800ef0e:	2001      	movs	r0, #1
 800ef10:	e7a8      	b.n	800ee64 <_svfiprintf_r+0xd8>
 800ef12:	2300      	movs	r3, #0
 800ef14:	3401      	adds	r4, #1
 800ef16:	9305      	str	r3, [sp, #20]
 800ef18:	4619      	mov	r1, r3
 800ef1a:	f04f 0c0a 	mov.w	ip, #10
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef24:	3a30      	subs	r2, #48	@ 0x30
 800ef26:	2a09      	cmp	r2, #9
 800ef28:	d903      	bls.n	800ef32 <_svfiprintf_r+0x1a6>
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d0c6      	beq.n	800eebc <_svfiprintf_r+0x130>
 800ef2e:	9105      	str	r1, [sp, #20]
 800ef30:	e7c4      	b.n	800eebc <_svfiprintf_r+0x130>
 800ef32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef36:	4604      	mov	r4, r0
 800ef38:	2301      	movs	r3, #1
 800ef3a:	e7f0      	b.n	800ef1e <_svfiprintf_r+0x192>
 800ef3c:	ab03      	add	r3, sp, #12
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	462a      	mov	r2, r5
 800ef42:	4b0e      	ldr	r3, [pc, #56]	@ (800ef7c <_svfiprintf_r+0x1f0>)
 800ef44:	a904      	add	r1, sp, #16
 800ef46:	4638      	mov	r0, r7
 800ef48:	f7fc fd06 	bl	800b958 <_printf_float>
 800ef4c:	1c42      	adds	r2, r0, #1
 800ef4e:	4606      	mov	r6, r0
 800ef50:	d1d6      	bne.n	800ef00 <_svfiprintf_r+0x174>
 800ef52:	89ab      	ldrh	r3, [r5, #12]
 800ef54:	065b      	lsls	r3, r3, #25
 800ef56:	f53f af2d 	bmi.w	800edb4 <_svfiprintf_r+0x28>
 800ef5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef5c:	e72c      	b.n	800edb8 <_svfiprintf_r+0x2c>
 800ef5e:	ab03      	add	r3, sp, #12
 800ef60:	9300      	str	r3, [sp, #0]
 800ef62:	462a      	mov	r2, r5
 800ef64:	4b05      	ldr	r3, [pc, #20]	@ (800ef7c <_svfiprintf_r+0x1f0>)
 800ef66:	a904      	add	r1, sp, #16
 800ef68:	4638      	mov	r0, r7
 800ef6a:	f7fc ff8d 	bl	800be88 <_printf_i>
 800ef6e:	e7ed      	b.n	800ef4c <_svfiprintf_r+0x1c0>
 800ef70:	080123a1 	.word	0x080123a1
 800ef74:	080123ab 	.word	0x080123ab
 800ef78:	0800b959 	.word	0x0800b959
 800ef7c:	0800ecd5 	.word	0x0800ecd5
 800ef80:	080123a7 	.word	0x080123a7

0800ef84 <_sungetc_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	1c4b      	adds	r3, r1, #1
 800ef88:	4614      	mov	r4, r2
 800ef8a:	d103      	bne.n	800ef94 <_sungetc_r+0x10>
 800ef8c:	f04f 35ff 	mov.w	r5, #4294967295
 800ef90:	4628      	mov	r0, r5
 800ef92:	bd38      	pop	{r3, r4, r5, pc}
 800ef94:	8993      	ldrh	r3, [r2, #12]
 800ef96:	f023 0320 	bic.w	r3, r3, #32
 800ef9a:	8193      	strh	r3, [r2, #12]
 800ef9c:	6853      	ldr	r3, [r2, #4]
 800ef9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800efa0:	b2cd      	uxtb	r5, r1
 800efa2:	b18a      	cbz	r2, 800efc8 <_sungetc_r+0x44>
 800efa4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800efa6:	429a      	cmp	r2, r3
 800efa8:	dd08      	ble.n	800efbc <_sungetc_r+0x38>
 800efaa:	6823      	ldr	r3, [r4, #0]
 800efac:	1e5a      	subs	r2, r3, #1
 800efae:	6022      	str	r2, [r4, #0]
 800efb0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800efb4:	6863      	ldr	r3, [r4, #4]
 800efb6:	3301      	adds	r3, #1
 800efb8:	6063      	str	r3, [r4, #4]
 800efba:	e7e9      	b.n	800ef90 <_sungetc_r+0xc>
 800efbc:	4621      	mov	r1, r4
 800efbe:	f000 fbe0 	bl	800f782 <__submore>
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d0f1      	beq.n	800efaa <_sungetc_r+0x26>
 800efc6:	e7e1      	b.n	800ef8c <_sungetc_r+0x8>
 800efc8:	6921      	ldr	r1, [r4, #16]
 800efca:	6822      	ldr	r2, [r4, #0]
 800efcc:	b141      	cbz	r1, 800efe0 <_sungetc_r+0x5c>
 800efce:	4291      	cmp	r1, r2
 800efd0:	d206      	bcs.n	800efe0 <_sungetc_r+0x5c>
 800efd2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800efd6:	42a9      	cmp	r1, r5
 800efd8:	d102      	bne.n	800efe0 <_sungetc_r+0x5c>
 800efda:	3a01      	subs	r2, #1
 800efdc:	6022      	str	r2, [r4, #0]
 800efde:	e7ea      	b.n	800efb6 <_sungetc_r+0x32>
 800efe0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800efe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800efe8:	6363      	str	r3, [r4, #52]	@ 0x34
 800efea:	2303      	movs	r3, #3
 800efec:	63a3      	str	r3, [r4, #56]	@ 0x38
 800efee:	4623      	mov	r3, r4
 800eff0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800eff4:	6023      	str	r3, [r4, #0]
 800eff6:	2301      	movs	r3, #1
 800eff8:	e7de      	b.n	800efb8 <_sungetc_r+0x34>

0800effa <__ssrefill_r>:
 800effa:	b510      	push	{r4, lr}
 800effc:	460c      	mov	r4, r1
 800effe:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f000:	b169      	cbz	r1, 800f01e <__ssrefill_r+0x24>
 800f002:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f006:	4299      	cmp	r1, r3
 800f008:	d001      	beq.n	800f00e <__ssrefill_r+0x14>
 800f00a:	f7fe fad9 	bl	800d5c0 <_free_r>
 800f00e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f010:	6063      	str	r3, [r4, #4]
 800f012:	2000      	movs	r0, #0
 800f014:	6360      	str	r0, [r4, #52]	@ 0x34
 800f016:	b113      	cbz	r3, 800f01e <__ssrefill_r+0x24>
 800f018:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f01a:	6023      	str	r3, [r4, #0]
 800f01c:	bd10      	pop	{r4, pc}
 800f01e:	6923      	ldr	r3, [r4, #16]
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	2300      	movs	r3, #0
 800f024:	6063      	str	r3, [r4, #4]
 800f026:	89a3      	ldrh	r3, [r4, #12]
 800f028:	f043 0320 	orr.w	r3, r3, #32
 800f02c:	81a3      	strh	r3, [r4, #12]
 800f02e:	f04f 30ff 	mov.w	r0, #4294967295
 800f032:	e7f3      	b.n	800f01c <__ssrefill_r+0x22>

0800f034 <__ssvfiscanf_r>:
 800f034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f038:	460c      	mov	r4, r1
 800f03a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f03e:	2100      	movs	r1, #0
 800f040:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f044:	49a5      	ldr	r1, [pc, #660]	@ (800f2dc <__ssvfiscanf_r+0x2a8>)
 800f046:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f048:	f10d 0804 	add.w	r8, sp, #4
 800f04c:	49a4      	ldr	r1, [pc, #656]	@ (800f2e0 <__ssvfiscanf_r+0x2ac>)
 800f04e:	4fa5      	ldr	r7, [pc, #660]	@ (800f2e4 <__ssvfiscanf_r+0x2b0>)
 800f050:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f054:	4606      	mov	r6, r0
 800f056:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	7813      	ldrb	r3, [r2, #0]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f000 8158 	beq.w	800f312 <__ssvfiscanf_r+0x2de>
 800f062:	5cf9      	ldrb	r1, [r7, r3]
 800f064:	f011 0108 	ands.w	r1, r1, #8
 800f068:	f102 0501 	add.w	r5, r2, #1
 800f06c:	d019      	beq.n	800f0a2 <__ssvfiscanf_r+0x6e>
 800f06e:	6863      	ldr	r3, [r4, #4]
 800f070:	2b00      	cmp	r3, #0
 800f072:	dd0f      	ble.n	800f094 <__ssvfiscanf_r+0x60>
 800f074:	6823      	ldr	r3, [r4, #0]
 800f076:	781a      	ldrb	r2, [r3, #0]
 800f078:	5cba      	ldrb	r2, [r7, r2]
 800f07a:	0712      	lsls	r2, r2, #28
 800f07c:	d401      	bmi.n	800f082 <__ssvfiscanf_r+0x4e>
 800f07e:	462a      	mov	r2, r5
 800f080:	e7eb      	b.n	800f05a <__ssvfiscanf_r+0x26>
 800f082:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f084:	3201      	adds	r2, #1
 800f086:	9245      	str	r2, [sp, #276]	@ 0x114
 800f088:	6862      	ldr	r2, [r4, #4]
 800f08a:	3301      	adds	r3, #1
 800f08c:	3a01      	subs	r2, #1
 800f08e:	6062      	str	r2, [r4, #4]
 800f090:	6023      	str	r3, [r4, #0]
 800f092:	e7ec      	b.n	800f06e <__ssvfiscanf_r+0x3a>
 800f094:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f096:	4621      	mov	r1, r4
 800f098:	4630      	mov	r0, r6
 800f09a:	4798      	blx	r3
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d0e9      	beq.n	800f074 <__ssvfiscanf_r+0x40>
 800f0a0:	e7ed      	b.n	800f07e <__ssvfiscanf_r+0x4a>
 800f0a2:	2b25      	cmp	r3, #37	@ 0x25
 800f0a4:	d012      	beq.n	800f0cc <__ssvfiscanf_r+0x98>
 800f0a6:	4699      	mov	r9, r3
 800f0a8:	6863      	ldr	r3, [r4, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	f340 8093 	ble.w	800f1d6 <__ssvfiscanf_r+0x1a2>
 800f0b0:	6822      	ldr	r2, [r4, #0]
 800f0b2:	7813      	ldrb	r3, [r2, #0]
 800f0b4:	454b      	cmp	r3, r9
 800f0b6:	f040 812c 	bne.w	800f312 <__ssvfiscanf_r+0x2de>
 800f0ba:	6863      	ldr	r3, [r4, #4]
 800f0bc:	3b01      	subs	r3, #1
 800f0be:	6063      	str	r3, [r4, #4]
 800f0c0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f0c2:	3201      	adds	r2, #1
 800f0c4:	3301      	adds	r3, #1
 800f0c6:	6022      	str	r2, [r4, #0]
 800f0c8:	9345      	str	r3, [sp, #276]	@ 0x114
 800f0ca:	e7d8      	b.n	800f07e <__ssvfiscanf_r+0x4a>
 800f0cc:	9141      	str	r1, [sp, #260]	@ 0x104
 800f0ce:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f0d0:	7853      	ldrb	r3, [r2, #1]
 800f0d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0d4:	bf02      	ittt	eq
 800f0d6:	2310      	moveq	r3, #16
 800f0d8:	1c95      	addeq	r5, r2, #2
 800f0da:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f0dc:	220a      	movs	r2, #10
 800f0de:	46a9      	mov	r9, r5
 800f0e0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f0e4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f0e8:	2b09      	cmp	r3, #9
 800f0ea:	d91e      	bls.n	800f12a <__ssvfiscanf_r+0xf6>
 800f0ec:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f2e8 <__ssvfiscanf_r+0x2b4>
 800f0f0:	2203      	movs	r2, #3
 800f0f2:	4650      	mov	r0, sl
 800f0f4:	f7f1 f88c 	bl	8000210 <memchr>
 800f0f8:	b138      	cbz	r0, 800f10a <__ssvfiscanf_r+0xd6>
 800f0fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f0fc:	eba0 000a 	sub.w	r0, r0, sl
 800f100:	2301      	movs	r3, #1
 800f102:	4083      	lsls	r3, r0
 800f104:	4313      	orrs	r3, r2
 800f106:	9341      	str	r3, [sp, #260]	@ 0x104
 800f108:	464d      	mov	r5, r9
 800f10a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f10e:	2b78      	cmp	r3, #120	@ 0x78
 800f110:	d806      	bhi.n	800f120 <__ssvfiscanf_r+0xec>
 800f112:	2b57      	cmp	r3, #87	@ 0x57
 800f114:	d810      	bhi.n	800f138 <__ssvfiscanf_r+0x104>
 800f116:	2b25      	cmp	r3, #37	@ 0x25
 800f118:	d0c5      	beq.n	800f0a6 <__ssvfiscanf_r+0x72>
 800f11a:	d857      	bhi.n	800f1cc <__ssvfiscanf_r+0x198>
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d065      	beq.n	800f1ec <__ssvfiscanf_r+0x1b8>
 800f120:	2303      	movs	r3, #3
 800f122:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f124:	230a      	movs	r3, #10
 800f126:	9342      	str	r3, [sp, #264]	@ 0x108
 800f128:	e078      	b.n	800f21c <__ssvfiscanf_r+0x1e8>
 800f12a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f12c:	fb02 1103 	mla	r1, r2, r3, r1
 800f130:	3930      	subs	r1, #48	@ 0x30
 800f132:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f134:	464d      	mov	r5, r9
 800f136:	e7d2      	b.n	800f0de <__ssvfiscanf_r+0xaa>
 800f138:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f13c:	2a20      	cmp	r2, #32
 800f13e:	d8ef      	bhi.n	800f120 <__ssvfiscanf_r+0xec>
 800f140:	a101      	add	r1, pc, #4	@ (adr r1, 800f148 <__ssvfiscanf_r+0x114>)
 800f142:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f146:	bf00      	nop
 800f148:	0800f1fb 	.word	0x0800f1fb
 800f14c:	0800f121 	.word	0x0800f121
 800f150:	0800f121 	.word	0x0800f121
 800f154:	0800f255 	.word	0x0800f255
 800f158:	0800f121 	.word	0x0800f121
 800f15c:	0800f121 	.word	0x0800f121
 800f160:	0800f121 	.word	0x0800f121
 800f164:	0800f121 	.word	0x0800f121
 800f168:	0800f121 	.word	0x0800f121
 800f16c:	0800f121 	.word	0x0800f121
 800f170:	0800f121 	.word	0x0800f121
 800f174:	0800f26b 	.word	0x0800f26b
 800f178:	0800f251 	.word	0x0800f251
 800f17c:	0800f1d3 	.word	0x0800f1d3
 800f180:	0800f1d3 	.word	0x0800f1d3
 800f184:	0800f1d3 	.word	0x0800f1d3
 800f188:	0800f121 	.word	0x0800f121
 800f18c:	0800f20d 	.word	0x0800f20d
 800f190:	0800f121 	.word	0x0800f121
 800f194:	0800f121 	.word	0x0800f121
 800f198:	0800f121 	.word	0x0800f121
 800f19c:	0800f121 	.word	0x0800f121
 800f1a0:	0800f27b 	.word	0x0800f27b
 800f1a4:	0800f215 	.word	0x0800f215
 800f1a8:	0800f1f3 	.word	0x0800f1f3
 800f1ac:	0800f121 	.word	0x0800f121
 800f1b0:	0800f121 	.word	0x0800f121
 800f1b4:	0800f277 	.word	0x0800f277
 800f1b8:	0800f121 	.word	0x0800f121
 800f1bc:	0800f251 	.word	0x0800f251
 800f1c0:	0800f121 	.word	0x0800f121
 800f1c4:	0800f121 	.word	0x0800f121
 800f1c8:	0800f1fb 	.word	0x0800f1fb
 800f1cc:	3b45      	subs	r3, #69	@ 0x45
 800f1ce:	2b02      	cmp	r3, #2
 800f1d0:	d8a6      	bhi.n	800f120 <__ssvfiscanf_r+0xec>
 800f1d2:	2305      	movs	r3, #5
 800f1d4:	e021      	b.n	800f21a <__ssvfiscanf_r+0x1e6>
 800f1d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f1d8:	4621      	mov	r1, r4
 800f1da:	4630      	mov	r0, r6
 800f1dc:	4798      	blx	r3
 800f1de:	2800      	cmp	r0, #0
 800f1e0:	f43f af66 	beq.w	800f0b0 <__ssvfiscanf_r+0x7c>
 800f1e4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f1e6:	2800      	cmp	r0, #0
 800f1e8:	f040 808b 	bne.w	800f302 <__ssvfiscanf_r+0x2ce>
 800f1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f1f0:	e08b      	b.n	800f30a <__ssvfiscanf_r+0x2d6>
 800f1f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f1f4:	f042 0220 	orr.w	r2, r2, #32
 800f1f8:	9241      	str	r2, [sp, #260]	@ 0x104
 800f1fa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f1fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f200:	9241      	str	r2, [sp, #260]	@ 0x104
 800f202:	2210      	movs	r2, #16
 800f204:	2b6e      	cmp	r3, #110	@ 0x6e
 800f206:	9242      	str	r2, [sp, #264]	@ 0x108
 800f208:	d902      	bls.n	800f210 <__ssvfiscanf_r+0x1dc>
 800f20a:	e005      	b.n	800f218 <__ssvfiscanf_r+0x1e4>
 800f20c:	2300      	movs	r3, #0
 800f20e:	9342      	str	r3, [sp, #264]	@ 0x108
 800f210:	2303      	movs	r3, #3
 800f212:	e002      	b.n	800f21a <__ssvfiscanf_r+0x1e6>
 800f214:	2308      	movs	r3, #8
 800f216:	9342      	str	r3, [sp, #264]	@ 0x108
 800f218:	2304      	movs	r3, #4
 800f21a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f21c:	6863      	ldr	r3, [r4, #4]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	dd39      	ble.n	800f296 <__ssvfiscanf_r+0x262>
 800f222:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f224:	0659      	lsls	r1, r3, #25
 800f226:	d404      	bmi.n	800f232 <__ssvfiscanf_r+0x1fe>
 800f228:	6823      	ldr	r3, [r4, #0]
 800f22a:	781a      	ldrb	r2, [r3, #0]
 800f22c:	5cba      	ldrb	r2, [r7, r2]
 800f22e:	0712      	lsls	r2, r2, #28
 800f230:	d438      	bmi.n	800f2a4 <__ssvfiscanf_r+0x270>
 800f232:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f234:	2b02      	cmp	r3, #2
 800f236:	dc47      	bgt.n	800f2c8 <__ssvfiscanf_r+0x294>
 800f238:	466b      	mov	r3, sp
 800f23a:	4622      	mov	r2, r4
 800f23c:	a941      	add	r1, sp, #260	@ 0x104
 800f23e:	4630      	mov	r0, r6
 800f240:	f000 f86c 	bl	800f31c <_scanf_chars>
 800f244:	2801      	cmp	r0, #1
 800f246:	d064      	beq.n	800f312 <__ssvfiscanf_r+0x2de>
 800f248:	2802      	cmp	r0, #2
 800f24a:	f47f af18 	bne.w	800f07e <__ssvfiscanf_r+0x4a>
 800f24e:	e7c9      	b.n	800f1e4 <__ssvfiscanf_r+0x1b0>
 800f250:	220a      	movs	r2, #10
 800f252:	e7d7      	b.n	800f204 <__ssvfiscanf_r+0x1d0>
 800f254:	4629      	mov	r1, r5
 800f256:	4640      	mov	r0, r8
 800f258:	f000 fa5a 	bl	800f710 <__sccl>
 800f25c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f25e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f262:	9341      	str	r3, [sp, #260]	@ 0x104
 800f264:	4605      	mov	r5, r0
 800f266:	2301      	movs	r3, #1
 800f268:	e7d7      	b.n	800f21a <__ssvfiscanf_r+0x1e6>
 800f26a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f26c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f270:	9341      	str	r3, [sp, #260]	@ 0x104
 800f272:	2300      	movs	r3, #0
 800f274:	e7d1      	b.n	800f21a <__ssvfiscanf_r+0x1e6>
 800f276:	2302      	movs	r3, #2
 800f278:	e7cf      	b.n	800f21a <__ssvfiscanf_r+0x1e6>
 800f27a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f27c:	06c3      	lsls	r3, r0, #27
 800f27e:	f53f aefe 	bmi.w	800f07e <__ssvfiscanf_r+0x4a>
 800f282:	9b00      	ldr	r3, [sp, #0]
 800f284:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f286:	1d19      	adds	r1, r3, #4
 800f288:	9100      	str	r1, [sp, #0]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	07c0      	lsls	r0, r0, #31
 800f28e:	bf4c      	ite	mi
 800f290:	801a      	strhmi	r2, [r3, #0]
 800f292:	601a      	strpl	r2, [r3, #0]
 800f294:	e6f3      	b.n	800f07e <__ssvfiscanf_r+0x4a>
 800f296:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f298:	4621      	mov	r1, r4
 800f29a:	4630      	mov	r0, r6
 800f29c:	4798      	blx	r3
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d0bf      	beq.n	800f222 <__ssvfiscanf_r+0x1ee>
 800f2a2:	e79f      	b.n	800f1e4 <__ssvfiscanf_r+0x1b0>
 800f2a4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f2a6:	3201      	adds	r2, #1
 800f2a8:	9245      	str	r2, [sp, #276]	@ 0x114
 800f2aa:	6862      	ldr	r2, [r4, #4]
 800f2ac:	3a01      	subs	r2, #1
 800f2ae:	2a00      	cmp	r2, #0
 800f2b0:	6062      	str	r2, [r4, #4]
 800f2b2:	dd02      	ble.n	800f2ba <__ssvfiscanf_r+0x286>
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	6023      	str	r3, [r4, #0]
 800f2b8:	e7b6      	b.n	800f228 <__ssvfiscanf_r+0x1f4>
 800f2ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f2bc:	4621      	mov	r1, r4
 800f2be:	4630      	mov	r0, r6
 800f2c0:	4798      	blx	r3
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d0b0      	beq.n	800f228 <__ssvfiscanf_r+0x1f4>
 800f2c6:	e78d      	b.n	800f1e4 <__ssvfiscanf_r+0x1b0>
 800f2c8:	2b04      	cmp	r3, #4
 800f2ca:	dc0f      	bgt.n	800f2ec <__ssvfiscanf_r+0x2b8>
 800f2cc:	466b      	mov	r3, sp
 800f2ce:	4622      	mov	r2, r4
 800f2d0:	a941      	add	r1, sp, #260	@ 0x104
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	f000 f87c 	bl	800f3d0 <_scanf_i>
 800f2d8:	e7b4      	b.n	800f244 <__ssvfiscanf_r+0x210>
 800f2da:	bf00      	nop
 800f2dc:	0800ef85 	.word	0x0800ef85
 800f2e0:	0800effb 	.word	0x0800effb
 800f2e4:	080122a1 	.word	0x080122a1
 800f2e8:	080123a7 	.word	0x080123a7
 800f2ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f318 <__ssvfiscanf_r+0x2e4>)
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	f43f aec5 	beq.w	800f07e <__ssvfiscanf_r+0x4a>
 800f2f4:	466b      	mov	r3, sp
 800f2f6:	4622      	mov	r2, r4
 800f2f8:	a941      	add	r1, sp, #260	@ 0x104
 800f2fa:	4630      	mov	r0, r6
 800f2fc:	f7fc fee4 	bl	800c0c8 <_scanf_float>
 800f300:	e7a0      	b.n	800f244 <__ssvfiscanf_r+0x210>
 800f302:	89a3      	ldrh	r3, [r4, #12]
 800f304:	065b      	lsls	r3, r3, #25
 800f306:	f53f af71 	bmi.w	800f1ec <__ssvfiscanf_r+0x1b8>
 800f30a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f312:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f314:	e7f9      	b.n	800f30a <__ssvfiscanf_r+0x2d6>
 800f316:	bf00      	nop
 800f318:	0800c0c9 	.word	0x0800c0c9

0800f31c <_scanf_chars>:
 800f31c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f320:	4615      	mov	r5, r2
 800f322:	688a      	ldr	r2, [r1, #8]
 800f324:	4680      	mov	r8, r0
 800f326:	460c      	mov	r4, r1
 800f328:	b932      	cbnz	r2, 800f338 <_scanf_chars+0x1c>
 800f32a:	698a      	ldr	r2, [r1, #24]
 800f32c:	2a00      	cmp	r2, #0
 800f32e:	bf14      	ite	ne
 800f330:	f04f 32ff 	movne.w	r2, #4294967295
 800f334:	2201      	moveq	r2, #1
 800f336:	608a      	str	r2, [r1, #8]
 800f338:	6822      	ldr	r2, [r4, #0]
 800f33a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f3cc <_scanf_chars+0xb0>
 800f33e:	06d1      	lsls	r1, r2, #27
 800f340:	bf5f      	itttt	pl
 800f342:	681a      	ldrpl	r2, [r3, #0]
 800f344:	1d11      	addpl	r1, r2, #4
 800f346:	6019      	strpl	r1, [r3, #0]
 800f348:	6816      	ldrpl	r6, [r2, #0]
 800f34a:	2700      	movs	r7, #0
 800f34c:	69a0      	ldr	r0, [r4, #24]
 800f34e:	b188      	cbz	r0, 800f374 <_scanf_chars+0x58>
 800f350:	2801      	cmp	r0, #1
 800f352:	d107      	bne.n	800f364 <_scanf_chars+0x48>
 800f354:	682b      	ldr	r3, [r5, #0]
 800f356:	781a      	ldrb	r2, [r3, #0]
 800f358:	6963      	ldr	r3, [r4, #20]
 800f35a:	5c9b      	ldrb	r3, [r3, r2]
 800f35c:	b953      	cbnz	r3, 800f374 <_scanf_chars+0x58>
 800f35e:	2f00      	cmp	r7, #0
 800f360:	d031      	beq.n	800f3c6 <_scanf_chars+0xaa>
 800f362:	e022      	b.n	800f3aa <_scanf_chars+0x8e>
 800f364:	2802      	cmp	r0, #2
 800f366:	d120      	bne.n	800f3aa <_scanf_chars+0x8e>
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f370:	071b      	lsls	r3, r3, #28
 800f372:	d41a      	bmi.n	800f3aa <_scanf_chars+0x8e>
 800f374:	6823      	ldr	r3, [r4, #0]
 800f376:	06da      	lsls	r2, r3, #27
 800f378:	bf5e      	ittt	pl
 800f37a:	682b      	ldrpl	r3, [r5, #0]
 800f37c:	781b      	ldrbpl	r3, [r3, #0]
 800f37e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f382:	682a      	ldr	r2, [r5, #0]
 800f384:	686b      	ldr	r3, [r5, #4]
 800f386:	3201      	adds	r2, #1
 800f388:	602a      	str	r2, [r5, #0]
 800f38a:	68a2      	ldr	r2, [r4, #8]
 800f38c:	3b01      	subs	r3, #1
 800f38e:	3a01      	subs	r2, #1
 800f390:	606b      	str	r3, [r5, #4]
 800f392:	3701      	adds	r7, #1
 800f394:	60a2      	str	r2, [r4, #8]
 800f396:	b142      	cbz	r2, 800f3aa <_scanf_chars+0x8e>
 800f398:	2b00      	cmp	r3, #0
 800f39a:	dcd7      	bgt.n	800f34c <_scanf_chars+0x30>
 800f39c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4640      	mov	r0, r8
 800f3a4:	4798      	blx	r3
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	d0d0      	beq.n	800f34c <_scanf_chars+0x30>
 800f3aa:	6823      	ldr	r3, [r4, #0]
 800f3ac:	f013 0310 	ands.w	r3, r3, #16
 800f3b0:	d105      	bne.n	800f3be <_scanf_chars+0xa2>
 800f3b2:	68e2      	ldr	r2, [r4, #12]
 800f3b4:	3201      	adds	r2, #1
 800f3b6:	60e2      	str	r2, [r4, #12]
 800f3b8:	69a2      	ldr	r2, [r4, #24]
 800f3ba:	b102      	cbz	r2, 800f3be <_scanf_chars+0xa2>
 800f3bc:	7033      	strb	r3, [r6, #0]
 800f3be:	6923      	ldr	r3, [r4, #16]
 800f3c0:	443b      	add	r3, r7
 800f3c2:	6123      	str	r3, [r4, #16]
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ca:	bf00      	nop
 800f3cc:	080122a1 	.word	0x080122a1

0800f3d0 <_scanf_i>:
 800f3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3d4:	4698      	mov	r8, r3
 800f3d6:	4b74      	ldr	r3, [pc, #464]	@ (800f5a8 <_scanf_i+0x1d8>)
 800f3d8:	460c      	mov	r4, r1
 800f3da:	4682      	mov	sl, r0
 800f3dc:	4616      	mov	r6, r2
 800f3de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f3e2:	b087      	sub	sp, #28
 800f3e4:	ab03      	add	r3, sp, #12
 800f3e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f3ea:	4b70      	ldr	r3, [pc, #448]	@ (800f5ac <_scanf_i+0x1dc>)
 800f3ec:	69a1      	ldr	r1, [r4, #24]
 800f3ee:	4a70      	ldr	r2, [pc, #448]	@ (800f5b0 <_scanf_i+0x1e0>)
 800f3f0:	2903      	cmp	r1, #3
 800f3f2:	bf08      	it	eq
 800f3f4:	461a      	moveq	r2, r3
 800f3f6:	68a3      	ldr	r3, [r4, #8]
 800f3f8:	9201      	str	r2, [sp, #4]
 800f3fa:	1e5a      	subs	r2, r3, #1
 800f3fc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f400:	bf88      	it	hi
 800f402:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f406:	4627      	mov	r7, r4
 800f408:	bf82      	ittt	hi
 800f40a:	eb03 0905 	addhi.w	r9, r3, r5
 800f40e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f412:	60a3      	strhi	r3, [r4, #8]
 800f414:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f418:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f41c:	bf98      	it	ls
 800f41e:	f04f 0900 	movls.w	r9, #0
 800f422:	6023      	str	r3, [r4, #0]
 800f424:	463d      	mov	r5, r7
 800f426:	f04f 0b00 	mov.w	fp, #0
 800f42a:	6831      	ldr	r1, [r6, #0]
 800f42c:	ab03      	add	r3, sp, #12
 800f42e:	7809      	ldrb	r1, [r1, #0]
 800f430:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f434:	2202      	movs	r2, #2
 800f436:	f7f0 feeb 	bl	8000210 <memchr>
 800f43a:	b328      	cbz	r0, 800f488 <_scanf_i+0xb8>
 800f43c:	f1bb 0f01 	cmp.w	fp, #1
 800f440:	d159      	bne.n	800f4f6 <_scanf_i+0x126>
 800f442:	6862      	ldr	r2, [r4, #4]
 800f444:	b92a      	cbnz	r2, 800f452 <_scanf_i+0x82>
 800f446:	6822      	ldr	r2, [r4, #0]
 800f448:	2108      	movs	r1, #8
 800f44a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f44e:	6061      	str	r1, [r4, #4]
 800f450:	6022      	str	r2, [r4, #0]
 800f452:	6822      	ldr	r2, [r4, #0]
 800f454:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f458:	6022      	str	r2, [r4, #0]
 800f45a:	68a2      	ldr	r2, [r4, #8]
 800f45c:	1e51      	subs	r1, r2, #1
 800f45e:	60a1      	str	r1, [r4, #8]
 800f460:	b192      	cbz	r2, 800f488 <_scanf_i+0xb8>
 800f462:	6832      	ldr	r2, [r6, #0]
 800f464:	1c51      	adds	r1, r2, #1
 800f466:	6031      	str	r1, [r6, #0]
 800f468:	7812      	ldrb	r2, [r2, #0]
 800f46a:	f805 2b01 	strb.w	r2, [r5], #1
 800f46e:	6872      	ldr	r2, [r6, #4]
 800f470:	3a01      	subs	r2, #1
 800f472:	2a00      	cmp	r2, #0
 800f474:	6072      	str	r2, [r6, #4]
 800f476:	dc07      	bgt.n	800f488 <_scanf_i+0xb8>
 800f478:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f47c:	4631      	mov	r1, r6
 800f47e:	4650      	mov	r0, sl
 800f480:	4790      	blx	r2
 800f482:	2800      	cmp	r0, #0
 800f484:	f040 8085 	bne.w	800f592 <_scanf_i+0x1c2>
 800f488:	f10b 0b01 	add.w	fp, fp, #1
 800f48c:	f1bb 0f03 	cmp.w	fp, #3
 800f490:	d1cb      	bne.n	800f42a <_scanf_i+0x5a>
 800f492:	6863      	ldr	r3, [r4, #4]
 800f494:	b90b      	cbnz	r3, 800f49a <_scanf_i+0xca>
 800f496:	230a      	movs	r3, #10
 800f498:	6063      	str	r3, [r4, #4]
 800f49a:	6863      	ldr	r3, [r4, #4]
 800f49c:	4945      	ldr	r1, [pc, #276]	@ (800f5b4 <_scanf_i+0x1e4>)
 800f49e:	6960      	ldr	r0, [r4, #20]
 800f4a0:	1ac9      	subs	r1, r1, r3
 800f4a2:	f000 f935 	bl	800f710 <__sccl>
 800f4a6:	f04f 0b00 	mov.w	fp, #0
 800f4aa:	68a3      	ldr	r3, [r4, #8]
 800f4ac:	6822      	ldr	r2, [r4, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d03d      	beq.n	800f52e <_scanf_i+0x15e>
 800f4b2:	6831      	ldr	r1, [r6, #0]
 800f4b4:	6960      	ldr	r0, [r4, #20]
 800f4b6:	f891 c000 	ldrb.w	ip, [r1]
 800f4ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f4be:	2800      	cmp	r0, #0
 800f4c0:	d035      	beq.n	800f52e <_scanf_i+0x15e>
 800f4c2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f4c6:	d124      	bne.n	800f512 <_scanf_i+0x142>
 800f4c8:	0510      	lsls	r0, r2, #20
 800f4ca:	d522      	bpl.n	800f512 <_scanf_i+0x142>
 800f4cc:	f10b 0b01 	add.w	fp, fp, #1
 800f4d0:	f1b9 0f00 	cmp.w	r9, #0
 800f4d4:	d003      	beq.n	800f4de <_scanf_i+0x10e>
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	f109 39ff 	add.w	r9, r9, #4294967295
 800f4dc:	60a3      	str	r3, [r4, #8]
 800f4de:	6873      	ldr	r3, [r6, #4]
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	6073      	str	r3, [r6, #4]
 800f4e6:	dd1b      	ble.n	800f520 <_scanf_i+0x150>
 800f4e8:	6833      	ldr	r3, [r6, #0]
 800f4ea:	3301      	adds	r3, #1
 800f4ec:	6033      	str	r3, [r6, #0]
 800f4ee:	68a3      	ldr	r3, [r4, #8]
 800f4f0:	3b01      	subs	r3, #1
 800f4f2:	60a3      	str	r3, [r4, #8]
 800f4f4:	e7d9      	b.n	800f4aa <_scanf_i+0xda>
 800f4f6:	f1bb 0f02 	cmp.w	fp, #2
 800f4fa:	d1ae      	bne.n	800f45a <_scanf_i+0x8a>
 800f4fc:	6822      	ldr	r2, [r4, #0]
 800f4fe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f502:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f506:	d1bf      	bne.n	800f488 <_scanf_i+0xb8>
 800f508:	2110      	movs	r1, #16
 800f50a:	6061      	str	r1, [r4, #4]
 800f50c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f510:	e7a2      	b.n	800f458 <_scanf_i+0x88>
 800f512:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f516:	6022      	str	r2, [r4, #0]
 800f518:	780b      	ldrb	r3, [r1, #0]
 800f51a:	f805 3b01 	strb.w	r3, [r5], #1
 800f51e:	e7de      	b.n	800f4de <_scanf_i+0x10e>
 800f520:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f524:	4631      	mov	r1, r6
 800f526:	4650      	mov	r0, sl
 800f528:	4798      	blx	r3
 800f52a:	2800      	cmp	r0, #0
 800f52c:	d0df      	beq.n	800f4ee <_scanf_i+0x11e>
 800f52e:	6823      	ldr	r3, [r4, #0]
 800f530:	05d9      	lsls	r1, r3, #23
 800f532:	d50d      	bpl.n	800f550 <_scanf_i+0x180>
 800f534:	42bd      	cmp	r5, r7
 800f536:	d909      	bls.n	800f54c <_scanf_i+0x17c>
 800f538:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f53c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f540:	4632      	mov	r2, r6
 800f542:	4650      	mov	r0, sl
 800f544:	4798      	blx	r3
 800f546:	f105 39ff 	add.w	r9, r5, #4294967295
 800f54a:	464d      	mov	r5, r9
 800f54c:	42bd      	cmp	r5, r7
 800f54e:	d028      	beq.n	800f5a2 <_scanf_i+0x1d2>
 800f550:	6822      	ldr	r2, [r4, #0]
 800f552:	f012 0210 	ands.w	r2, r2, #16
 800f556:	d113      	bne.n	800f580 <_scanf_i+0x1b0>
 800f558:	702a      	strb	r2, [r5, #0]
 800f55a:	6863      	ldr	r3, [r4, #4]
 800f55c:	9e01      	ldr	r6, [sp, #4]
 800f55e:	4639      	mov	r1, r7
 800f560:	4650      	mov	r0, sl
 800f562:	47b0      	blx	r6
 800f564:	f8d8 3000 	ldr.w	r3, [r8]
 800f568:	6821      	ldr	r1, [r4, #0]
 800f56a:	1d1a      	adds	r2, r3, #4
 800f56c:	f8c8 2000 	str.w	r2, [r8]
 800f570:	f011 0f20 	tst.w	r1, #32
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	d00f      	beq.n	800f598 <_scanf_i+0x1c8>
 800f578:	6018      	str	r0, [r3, #0]
 800f57a:	68e3      	ldr	r3, [r4, #12]
 800f57c:	3301      	adds	r3, #1
 800f57e:	60e3      	str	r3, [r4, #12]
 800f580:	6923      	ldr	r3, [r4, #16]
 800f582:	1bed      	subs	r5, r5, r7
 800f584:	445d      	add	r5, fp
 800f586:	442b      	add	r3, r5
 800f588:	6123      	str	r3, [r4, #16]
 800f58a:	2000      	movs	r0, #0
 800f58c:	b007      	add	sp, #28
 800f58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f592:	f04f 0b00 	mov.w	fp, #0
 800f596:	e7ca      	b.n	800f52e <_scanf_i+0x15e>
 800f598:	07ca      	lsls	r2, r1, #31
 800f59a:	bf4c      	ite	mi
 800f59c:	8018      	strhmi	r0, [r3, #0]
 800f59e:	6018      	strpl	r0, [r3, #0]
 800f5a0:	e7eb      	b.n	800f57a <_scanf_i+0x1aa>
 800f5a2:	2001      	movs	r0, #1
 800f5a4:	e7f2      	b.n	800f58c <_scanf_i+0x1bc>
 800f5a6:	bf00      	nop
 800f5a8:	08011ffc 	.word	0x08011ffc
 800f5ac:	0800ecd1 	.word	0x0800ecd1
 800f5b0:	0801006d 	.word	0x0801006d
 800f5b4:	080123c2 	.word	0x080123c2

0800f5b8 <__sflush_r>:
 800f5b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c0:	0716      	lsls	r6, r2, #28
 800f5c2:	4605      	mov	r5, r0
 800f5c4:	460c      	mov	r4, r1
 800f5c6:	d454      	bmi.n	800f672 <__sflush_r+0xba>
 800f5c8:	684b      	ldr	r3, [r1, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	dc02      	bgt.n	800f5d4 <__sflush_r+0x1c>
 800f5ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	dd48      	ble.n	800f666 <__sflush_r+0xae>
 800f5d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5d6:	2e00      	cmp	r6, #0
 800f5d8:	d045      	beq.n	800f666 <__sflush_r+0xae>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f5e0:	682f      	ldr	r7, [r5, #0]
 800f5e2:	6a21      	ldr	r1, [r4, #32]
 800f5e4:	602b      	str	r3, [r5, #0]
 800f5e6:	d030      	beq.n	800f64a <__sflush_r+0x92>
 800f5e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f5ea:	89a3      	ldrh	r3, [r4, #12]
 800f5ec:	0759      	lsls	r1, r3, #29
 800f5ee:	d505      	bpl.n	800f5fc <__sflush_r+0x44>
 800f5f0:	6863      	ldr	r3, [r4, #4]
 800f5f2:	1ad2      	subs	r2, r2, r3
 800f5f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f5f6:	b10b      	cbz	r3, 800f5fc <__sflush_r+0x44>
 800f5f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f5fa:	1ad2      	subs	r2, r2, r3
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f600:	6a21      	ldr	r1, [r4, #32]
 800f602:	4628      	mov	r0, r5
 800f604:	47b0      	blx	r6
 800f606:	1c43      	adds	r3, r0, #1
 800f608:	89a3      	ldrh	r3, [r4, #12]
 800f60a:	d106      	bne.n	800f61a <__sflush_r+0x62>
 800f60c:	6829      	ldr	r1, [r5, #0]
 800f60e:	291d      	cmp	r1, #29
 800f610:	d82b      	bhi.n	800f66a <__sflush_r+0xb2>
 800f612:	4a2a      	ldr	r2, [pc, #168]	@ (800f6bc <__sflush_r+0x104>)
 800f614:	410a      	asrs	r2, r1
 800f616:	07d6      	lsls	r6, r2, #31
 800f618:	d427      	bmi.n	800f66a <__sflush_r+0xb2>
 800f61a:	2200      	movs	r2, #0
 800f61c:	6062      	str	r2, [r4, #4]
 800f61e:	04d9      	lsls	r1, r3, #19
 800f620:	6922      	ldr	r2, [r4, #16]
 800f622:	6022      	str	r2, [r4, #0]
 800f624:	d504      	bpl.n	800f630 <__sflush_r+0x78>
 800f626:	1c42      	adds	r2, r0, #1
 800f628:	d101      	bne.n	800f62e <__sflush_r+0x76>
 800f62a:	682b      	ldr	r3, [r5, #0]
 800f62c:	b903      	cbnz	r3, 800f630 <__sflush_r+0x78>
 800f62e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f630:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f632:	602f      	str	r7, [r5, #0]
 800f634:	b1b9      	cbz	r1, 800f666 <__sflush_r+0xae>
 800f636:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f63a:	4299      	cmp	r1, r3
 800f63c:	d002      	beq.n	800f644 <__sflush_r+0x8c>
 800f63e:	4628      	mov	r0, r5
 800f640:	f7fd ffbe 	bl	800d5c0 <_free_r>
 800f644:	2300      	movs	r3, #0
 800f646:	6363      	str	r3, [r4, #52]	@ 0x34
 800f648:	e00d      	b.n	800f666 <__sflush_r+0xae>
 800f64a:	2301      	movs	r3, #1
 800f64c:	4628      	mov	r0, r5
 800f64e:	47b0      	blx	r6
 800f650:	4602      	mov	r2, r0
 800f652:	1c50      	adds	r0, r2, #1
 800f654:	d1c9      	bne.n	800f5ea <__sflush_r+0x32>
 800f656:	682b      	ldr	r3, [r5, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d0c6      	beq.n	800f5ea <__sflush_r+0x32>
 800f65c:	2b1d      	cmp	r3, #29
 800f65e:	d001      	beq.n	800f664 <__sflush_r+0xac>
 800f660:	2b16      	cmp	r3, #22
 800f662:	d11e      	bne.n	800f6a2 <__sflush_r+0xea>
 800f664:	602f      	str	r7, [r5, #0]
 800f666:	2000      	movs	r0, #0
 800f668:	e022      	b.n	800f6b0 <__sflush_r+0xf8>
 800f66a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f66e:	b21b      	sxth	r3, r3
 800f670:	e01b      	b.n	800f6aa <__sflush_r+0xf2>
 800f672:	690f      	ldr	r7, [r1, #16]
 800f674:	2f00      	cmp	r7, #0
 800f676:	d0f6      	beq.n	800f666 <__sflush_r+0xae>
 800f678:	0793      	lsls	r3, r2, #30
 800f67a:	680e      	ldr	r6, [r1, #0]
 800f67c:	bf08      	it	eq
 800f67e:	694b      	ldreq	r3, [r1, #20]
 800f680:	600f      	str	r7, [r1, #0]
 800f682:	bf18      	it	ne
 800f684:	2300      	movne	r3, #0
 800f686:	eba6 0807 	sub.w	r8, r6, r7
 800f68a:	608b      	str	r3, [r1, #8]
 800f68c:	f1b8 0f00 	cmp.w	r8, #0
 800f690:	dde9      	ble.n	800f666 <__sflush_r+0xae>
 800f692:	6a21      	ldr	r1, [r4, #32]
 800f694:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f696:	4643      	mov	r3, r8
 800f698:	463a      	mov	r2, r7
 800f69a:	4628      	mov	r0, r5
 800f69c:	47b0      	blx	r6
 800f69e:	2800      	cmp	r0, #0
 800f6a0:	dc08      	bgt.n	800f6b4 <__sflush_r+0xfc>
 800f6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6aa:	81a3      	strh	r3, [r4, #12]
 800f6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6b4:	4407      	add	r7, r0
 800f6b6:	eba8 0800 	sub.w	r8, r8, r0
 800f6ba:	e7e7      	b.n	800f68c <__sflush_r+0xd4>
 800f6bc:	dfbffffe 	.word	0xdfbffffe

0800f6c0 <_fflush_r>:
 800f6c0:	b538      	push	{r3, r4, r5, lr}
 800f6c2:	690b      	ldr	r3, [r1, #16]
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	b913      	cbnz	r3, 800f6d0 <_fflush_r+0x10>
 800f6ca:	2500      	movs	r5, #0
 800f6cc:	4628      	mov	r0, r5
 800f6ce:	bd38      	pop	{r3, r4, r5, pc}
 800f6d0:	b118      	cbz	r0, 800f6da <_fflush_r+0x1a>
 800f6d2:	6a03      	ldr	r3, [r0, #32]
 800f6d4:	b90b      	cbnz	r3, 800f6da <_fflush_r+0x1a>
 800f6d6:	f7fc ff97 	bl	800c608 <__sinit>
 800f6da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d0f3      	beq.n	800f6ca <_fflush_r+0xa>
 800f6e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f6e4:	07d0      	lsls	r0, r2, #31
 800f6e6:	d404      	bmi.n	800f6f2 <_fflush_r+0x32>
 800f6e8:	0599      	lsls	r1, r3, #22
 800f6ea:	d402      	bmi.n	800f6f2 <_fflush_r+0x32>
 800f6ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6ee:	f7fd f904 	bl	800c8fa <__retarget_lock_acquire_recursive>
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	4621      	mov	r1, r4
 800f6f6:	f7ff ff5f 	bl	800f5b8 <__sflush_r>
 800f6fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6fc:	07da      	lsls	r2, r3, #31
 800f6fe:	4605      	mov	r5, r0
 800f700:	d4e4      	bmi.n	800f6cc <_fflush_r+0xc>
 800f702:	89a3      	ldrh	r3, [r4, #12]
 800f704:	059b      	lsls	r3, r3, #22
 800f706:	d4e1      	bmi.n	800f6cc <_fflush_r+0xc>
 800f708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f70a:	f7fd f8f7 	bl	800c8fc <__retarget_lock_release_recursive>
 800f70e:	e7dd      	b.n	800f6cc <_fflush_r+0xc>

0800f710 <__sccl>:
 800f710:	b570      	push	{r4, r5, r6, lr}
 800f712:	780b      	ldrb	r3, [r1, #0]
 800f714:	4604      	mov	r4, r0
 800f716:	2b5e      	cmp	r3, #94	@ 0x5e
 800f718:	bf0b      	itete	eq
 800f71a:	784b      	ldrbeq	r3, [r1, #1]
 800f71c:	1c4a      	addne	r2, r1, #1
 800f71e:	1c8a      	addeq	r2, r1, #2
 800f720:	2100      	movne	r1, #0
 800f722:	bf08      	it	eq
 800f724:	2101      	moveq	r1, #1
 800f726:	3801      	subs	r0, #1
 800f728:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f72c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f730:	42a8      	cmp	r0, r5
 800f732:	d1fb      	bne.n	800f72c <__sccl+0x1c>
 800f734:	b90b      	cbnz	r3, 800f73a <__sccl+0x2a>
 800f736:	1e50      	subs	r0, r2, #1
 800f738:	bd70      	pop	{r4, r5, r6, pc}
 800f73a:	f081 0101 	eor.w	r1, r1, #1
 800f73e:	54e1      	strb	r1, [r4, r3]
 800f740:	4610      	mov	r0, r2
 800f742:	4602      	mov	r2, r0
 800f744:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f748:	2d2d      	cmp	r5, #45	@ 0x2d
 800f74a:	d005      	beq.n	800f758 <__sccl+0x48>
 800f74c:	2d5d      	cmp	r5, #93	@ 0x5d
 800f74e:	d016      	beq.n	800f77e <__sccl+0x6e>
 800f750:	2d00      	cmp	r5, #0
 800f752:	d0f1      	beq.n	800f738 <__sccl+0x28>
 800f754:	462b      	mov	r3, r5
 800f756:	e7f2      	b.n	800f73e <__sccl+0x2e>
 800f758:	7846      	ldrb	r6, [r0, #1]
 800f75a:	2e5d      	cmp	r6, #93	@ 0x5d
 800f75c:	d0fa      	beq.n	800f754 <__sccl+0x44>
 800f75e:	42b3      	cmp	r3, r6
 800f760:	dcf8      	bgt.n	800f754 <__sccl+0x44>
 800f762:	3002      	adds	r0, #2
 800f764:	461a      	mov	r2, r3
 800f766:	3201      	adds	r2, #1
 800f768:	4296      	cmp	r6, r2
 800f76a:	54a1      	strb	r1, [r4, r2]
 800f76c:	dcfb      	bgt.n	800f766 <__sccl+0x56>
 800f76e:	1af2      	subs	r2, r6, r3
 800f770:	3a01      	subs	r2, #1
 800f772:	1c5d      	adds	r5, r3, #1
 800f774:	42b3      	cmp	r3, r6
 800f776:	bfa8      	it	ge
 800f778:	2200      	movge	r2, #0
 800f77a:	18ab      	adds	r3, r5, r2
 800f77c:	e7e1      	b.n	800f742 <__sccl+0x32>
 800f77e:	4610      	mov	r0, r2
 800f780:	e7da      	b.n	800f738 <__sccl+0x28>

0800f782 <__submore>:
 800f782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f786:	460c      	mov	r4, r1
 800f788:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f78a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f78e:	4299      	cmp	r1, r3
 800f790:	d11d      	bne.n	800f7ce <__submore+0x4c>
 800f792:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f796:	f7fb ffb3 	bl	800b700 <_malloc_r>
 800f79a:	b918      	cbnz	r0, 800f7a4 <__submore+0x22>
 800f79c:	f04f 30ff 	mov.w	r0, #4294967295
 800f7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f7a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f7aa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f7ae:	6360      	str	r0, [r4, #52]	@ 0x34
 800f7b0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f7b4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f7b8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f7bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f7c0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f7c4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f7c8:	6020      	str	r0, [r4, #0]
 800f7ca:	2000      	movs	r0, #0
 800f7cc:	e7e8      	b.n	800f7a0 <__submore+0x1e>
 800f7ce:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f7d0:	0077      	lsls	r7, r6, #1
 800f7d2:	463a      	mov	r2, r7
 800f7d4:	f000 fbad 	bl	800ff32 <_realloc_r>
 800f7d8:	4605      	mov	r5, r0
 800f7da:	2800      	cmp	r0, #0
 800f7dc:	d0de      	beq.n	800f79c <__submore+0x1a>
 800f7de:	eb00 0806 	add.w	r8, r0, r6
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	4632      	mov	r2, r6
 800f7e6:	4640      	mov	r0, r8
 800f7e8:	f7fd f889 	bl	800c8fe <memcpy>
 800f7ec:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f7f0:	f8c4 8000 	str.w	r8, [r4]
 800f7f4:	e7e9      	b.n	800f7ca <__submore+0x48>

0800f7f6 <memmove>:
 800f7f6:	4288      	cmp	r0, r1
 800f7f8:	b510      	push	{r4, lr}
 800f7fa:	eb01 0402 	add.w	r4, r1, r2
 800f7fe:	d902      	bls.n	800f806 <memmove+0x10>
 800f800:	4284      	cmp	r4, r0
 800f802:	4623      	mov	r3, r4
 800f804:	d807      	bhi.n	800f816 <memmove+0x20>
 800f806:	1e43      	subs	r3, r0, #1
 800f808:	42a1      	cmp	r1, r4
 800f80a:	d008      	beq.n	800f81e <memmove+0x28>
 800f80c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f810:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f814:	e7f8      	b.n	800f808 <memmove+0x12>
 800f816:	4402      	add	r2, r0
 800f818:	4601      	mov	r1, r0
 800f81a:	428a      	cmp	r2, r1
 800f81c:	d100      	bne.n	800f820 <memmove+0x2a>
 800f81e:	bd10      	pop	{r4, pc}
 800f820:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f824:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f828:	e7f7      	b.n	800f81a <memmove+0x24>

0800f82a <strncmp>:
 800f82a:	b510      	push	{r4, lr}
 800f82c:	b16a      	cbz	r2, 800f84a <strncmp+0x20>
 800f82e:	3901      	subs	r1, #1
 800f830:	1884      	adds	r4, r0, r2
 800f832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f836:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d103      	bne.n	800f846 <strncmp+0x1c>
 800f83e:	42a0      	cmp	r0, r4
 800f840:	d001      	beq.n	800f846 <strncmp+0x1c>
 800f842:	2a00      	cmp	r2, #0
 800f844:	d1f5      	bne.n	800f832 <strncmp+0x8>
 800f846:	1ad0      	subs	r0, r2, r3
 800f848:	bd10      	pop	{r4, pc}
 800f84a:	4610      	mov	r0, r2
 800f84c:	e7fc      	b.n	800f848 <strncmp+0x1e>
	...

0800f850 <nan>:
 800f850:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f858 <nan+0x8>
 800f854:	4770      	bx	lr
 800f856:	bf00      	nop
 800f858:	00000000 	.word	0x00000000
 800f85c:	7ff80000 	.word	0x7ff80000

0800f860 <__assert_func>:
 800f860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f862:	4614      	mov	r4, r2
 800f864:	461a      	mov	r2, r3
 800f866:	4b09      	ldr	r3, [pc, #36]	@ (800f88c <__assert_func+0x2c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	4605      	mov	r5, r0
 800f86c:	68d8      	ldr	r0, [r3, #12]
 800f86e:	b954      	cbnz	r4, 800f886 <__assert_func+0x26>
 800f870:	4b07      	ldr	r3, [pc, #28]	@ (800f890 <__assert_func+0x30>)
 800f872:	461c      	mov	r4, r3
 800f874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f878:	9100      	str	r1, [sp, #0]
 800f87a:	462b      	mov	r3, r5
 800f87c:	4905      	ldr	r1, [pc, #20]	@ (800f894 <__assert_func+0x34>)
 800f87e:	f000 fc05 	bl	801008c <fiprintf>
 800f882:	f000 fc15 	bl	80100b0 <abort>
 800f886:	4b04      	ldr	r3, [pc, #16]	@ (800f898 <__assert_func+0x38>)
 800f888:	e7f4      	b.n	800f874 <__assert_func+0x14>
 800f88a:	bf00      	nop
 800f88c:	20000044 	.word	0x20000044
 800f890:	08012410 	.word	0x08012410
 800f894:	080123e2 	.word	0x080123e2
 800f898:	080123d5 	.word	0x080123d5

0800f89c <rshift>:
 800f89c:	6903      	ldr	r3, [r0, #16]
 800f89e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f8a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f8a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f8aa:	f100 0414 	add.w	r4, r0, #20
 800f8ae:	dd45      	ble.n	800f93c <rshift+0xa0>
 800f8b0:	f011 011f 	ands.w	r1, r1, #31
 800f8b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f8b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f8bc:	d10c      	bne.n	800f8d8 <rshift+0x3c>
 800f8be:	f100 0710 	add.w	r7, r0, #16
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	42b1      	cmp	r1, r6
 800f8c6:	d334      	bcc.n	800f932 <rshift+0x96>
 800f8c8:	1a9b      	subs	r3, r3, r2
 800f8ca:	009b      	lsls	r3, r3, #2
 800f8cc:	1eea      	subs	r2, r5, #3
 800f8ce:	4296      	cmp	r6, r2
 800f8d0:	bf38      	it	cc
 800f8d2:	2300      	movcc	r3, #0
 800f8d4:	4423      	add	r3, r4
 800f8d6:	e015      	b.n	800f904 <rshift+0x68>
 800f8d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f8dc:	f1c1 0820 	rsb	r8, r1, #32
 800f8e0:	40cf      	lsrs	r7, r1
 800f8e2:	f105 0e04 	add.w	lr, r5, #4
 800f8e6:	46a1      	mov	r9, r4
 800f8e8:	4576      	cmp	r6, lr
 800f8ea:	46f4      	mov	ip, lr
 800f8ec:	d815      	bhi.n	800f91a <rshift+0x7e>
 800f8ee:	1a9a      	subs	r2, r3, r2
 800f8f0:	0092      	lsls	r2, r2, #2
 800f8f2:	3a04      	subs	r2, #4
 800f8f4:	3501      	adds	r5, #1
 800f8f6:	42ae      	cmp	r6, r5
 800f8f8:	bf38      	it	cc
 800f8fa:	2200      	movcc	r2, #0
 800f8fc:	18a3      	adds	r3, r4, r2
 800f8fe:	50a7      	str	r7, [r4, r2]
 800f900:	b107      	cbz	r7, 800f904 <rshift+0x68>
 800f902:	3304      	adds	r3, #4
 800f904:	1b1a      	subs	r2, r3, r4
 800f906:	42a3      	cmp	r3, r4
 800f908:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f90c:	bf08      	it	eq
 800f90e:	2300      	moveq	r3, #0
 800f910:	6102      	str	r2, [r0, #16]
 800f912:	bf08      	it	eq
 800f914:	6143      	streq	r3, [r0, #20]
 800f916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f91a:	f8dc c000 	ldr.w	ip, [ip]
 800f91e:	fa0c fc08 	lsl.w	ip, ip, r8
 800f922:	ea4c 0707 	orr.w	r7, ip, r7
 800f926:	f849 7b04 	str.w	r7, [r9], #4
 800f92a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f92e:	40cf      	lsrs	r7, r1
 800f930:	e7da      	b.n	800f8e8 <rshift+0x4c>
 800f932:	f851 cb04 	ldr.w	ip, [r1], #4
 800f936:	f847 cf04 	str.w	ip, [r7, #4]!
 800f93a:	e7c3      	b.n	800f8c4 <rshift+0x28>
 800f93c:	4623      	mov	r3, r4
 800f93e:	e7e1      	b.n	800f904 <rshift+0x68>

0800f940 <__hexdig_fun>:
 800f940:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f944:	2b09      	cmp	r3, #9
 800f946:	d802      	bhi.n	800f94e <__hexdig_fun+0xe>
 800f948:	3820      	subs	r0, #32
 800f94a:	b2c0      	uxtb	r0, r0
 800f94c:	4770      	bx	lr
 800f94e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f952:	2b05      	cmp	r3, #5
 800f954:	d801      	bhi.n	800f95a <__hexdig_fun+0x1a>
 800f956:	3847      	subs	r0, #71	@ 0x47
 800f958:	e7f7      	b.n	800f94a <__hexdig_fun+0xa>
 800f95a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f95e:	2b05      	cmp	r3, #5
 800f960:	d801      	bhi.n	800f966 <__hexdig_fun+0x26>
 800f962:	3827      	subs	r0, #39	@ 0x27
 800f964:	e7f1      	b.n	800f94a <__hexdig_fun+0xa>
 800f966:	2000      	movs	r0, #0
 800f968:	4770      	bx	lr
	...

0800f96c <__gethex>:
 800f96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f970:	b085      	sub	sp, #20
 800f972:	468a      	mov	sl, r1
 800f974:	9302      	str	r3, [sp, #8]
 800f976:	680b      	ldr	r3, [r1, #0]
 800f978:	9001      	str	r0, [sp, #4]
 800f97a:	4690      	mov	r8, r2
 800f97c:	1c9c      	adds	r4, r3, #2
 800f97e:	46a1      	mov	r9, r4
 800f980:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f984:	2830      	cmp	r0, #48	@ 0x30
 800f986:	d0fa      	beq.n	800f97e <__gethex+0x12>
 800f988:	eba9 0303 	sub.w	r3, r9, r3
 800f98c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f990:	f7ff ffd6 	bl	800f940 <__hexdig_fun>
 800f994:	4605      	mov	r5, r0
 800f996:	2800      	cmp	r0, #0
 800f998:	d168      	bne.n	800fa6c <__gethex+0x100>
 800f99a:	49a0      	ldr	r1, [pc, #640]	@ (800fc1c <__gethex+0x2b0>)
 800f99c:	2201      	movs	r2, #1
 800f99e:	4648      	mov	r0, r9
 800f9a0:	f7ff ff43 	bl	800f82a <strncmp>
 800f9a4:	4607      	mov	r7, r0
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	d167      	bne.n	800fa7a <__gethex+0x10e>
 800f9aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f9ae:	4626      	mov	r6, r4
 800f9b0:	f7ff ffc6 	bl	800f940 <__hexdig_fun>
 800f9b4:	2800      	cmp	r0, #0
 800f9b6:	d062      	beq.n	800fa7e <__gethex+0x112>
 800f9b8:	4623      	mov	r3, r4
 800f9ba:	7818      	ldrb	r0, [r3, #0]
 800f9bc:	2830      	cmp	r0, #48	@ 0x30
 800f9be:	4699      	mov	r9, r3
 800f9c0:	f103 0301 	add.w	r3, r3, #1
 800f9c4:	d0f9      	beq.n	800f9ba <__gethex+0x4e>
 800f9c6:	f7ff ffbb 	bl	800f940 <__hexdig_fun>
 800f9ca:	fab0 f580 	clz	r5, r0
 800f9ce:	096d      	lsrs	r5, r5, #5
 800f9d0:	f04f 0b01 	mov.w	fp, #1
 800f9d4:	464a      	mov	r2, r9
 800f9d6:	4616      	mov	r6, r2
 800f9d8:	3201      	adds	r2, #1
 800f9da:	7830      	ldrb	r0, [r6, #0]
 800f9dc:	f7ff ffb0 	bl	800f940 <__hexdig_fun>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d1f8      	bne.n	800f9d6 <__gethex+0x6a>
 800f9e4:	498d      	ldr	r1, [pc, #564]	@ (800fc1c <__gethex+0x2b0>)
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	4630      	mov	r0, r6
 800f9ea:	f7ff ff1e 	bl	800f82a <strncmp>
 800f9ee:	2800      	cmp	r0, #0
 800f9f0:	d13f      	bne.n	800fa72 <__gethex+0x106>
 800f9f2:	b944      	cbnz	r4, 800fa06 <__gethex+0x9a>
 800f9f4:	1c74      	adds	r4, r6, #1
 800f9f6:	4622      	mov	r2, r4
 800f9f8:	4616      	mov	r6, r2
 800f9fa:	3201      	adds	r2, #1
 800f9fc:	7830      	ldrb	r0, [r6, #0]
 800f9fe:	f7ff ff9f 	bl	800f940 <__hexdig_fun>
 800fa02:	2800      	cmp	r0, #0
 800fa04:	d1f8      	bne.n	800f9f8 <__gethex+0x8c>
 800fa06:	1ba4      	subs	r4, r4, r6
 800fa08:	00a7      	lsls	r7, r4, #2
 800fa0a:	7833      	ldrb	r3, [r6, #0]
 800fa0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fa10:	2b50      	cmp	r3, #80	@ 0x50
 800fa12:	d13e      	bne.n	800fa92 <__gethex+0x126>
 800fa14:	7873      	ldrb	r3, [r6, #1]
 800fa16:	2b2b      	cmp	r3, #43	@ 0x2b
 800fa18:	d033      	beq.n	800fa82 <__gethex+0x116>
 800fa1a:	2b2d      	cmp	r3, #45	@ 0x2d
 800fa1c:	d034      	beq.n	800fa88 <__gethex+0x11c>
 800fa1e:	1c71      	adds	r1, r6, #1
 800fa20:	2400      	movs	r4, #0
 800fa22:	7808      	ldrb	r0, [r1, #0]
 800fa24:	f7ff ff8c 	bl	800f940 <__hexdig_fun>
 800fa28:	1e43      	subs	r3, r0, #1
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	2b18      	cmp	r3, #24
 800fa2e:	d830      	bhi.n	800fa92 <__gethex+0x126>
 800fa30:	f1a0 0210 	sub.w	r2, r0, #16
 800fa34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fa38:	f7ff ff82 	bl	800f940 <__hexdig_fun>
 800fa3c:	f100 3cff 	add.w	ip, r0, #4294967295
 800fa40:	fa5f fc8c 	uxtb.w	ip, ip
 800fa44:	f1bc 0f18 	cmp.w	ip, #24
 800fa48:	f04f 030a 	mov.w	r3, #10
 800fa4c:	d91e      	bls.n	800fa8c <__gethex+0x120>
 800fa4e:	b104      	cbz	r4, 800fa52 <__gethex+0xe6>
 800fa50:	4252      	negs	r2, r2
 800fa52:	4417      	add	r7, r2
 800fa54:	f8ca 1000 	str.w	r1, [sl]
 800fa58:	b1ed      	cbz	r5, 800fa96 <__gethex+0x12a>
 800fa5a:	f1bb 0f00 	cmp.w	fp, #0
 800fa5e:	bf0c      	ite	eq
 800fa60:	2506      	moveq	r5, #6
 800fa62:	2500      	movne	r5, #0
 800fa64:	4628      	mov	r0, r5
 800fa66:	b005      	add	sp, #20
 800fa68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa6c:	2500      	movs	r5, #0
 800fa6e:	462c      	mov	r4, r5
 800fa70:	e7b0      	b.n	800f9d4 <__gethex+0x68>
 800fa72:	2c00      	cmp	r4, #0
 800fa74:	d1c7      	bne.n	800fa06 <__gethex+0x9a>
 800fa76:	4627      	mov	r7, r4
 800fa78:	e7c7      	b.n	800fa0a <__gethex+0x9e>
 800fa7a:	464e      	mov	r6, r9
 800fa7c:	462f      	mov	r7, r5
 800fa7e:	2501      	movs	r5, #1
 800fa80:	e7c3      	b.n	800fa0a <__gethex+0x9e>
 800fa82:	2400      	movs	r4, #0
 800fa84:	1cb1      	adds	r1, r6, #2
 800fa86:	e7cc      	b.n	800fa22 <__gethex+0xb6>
 800fa88:	2401      	movs	r4, #1
 800fa8a:	e7fb      	b.n	800fa84 <__gethex+0x118>
 800fa8c:	fb03 0002 	mla	r0, r3, r2, r0
 800fa90:	e7ce      	b.n	800fa30 <__gethex+0xc4>
 800fa92:	4631      	mov	r1, r6
 800fa94:	e7de      	b.n	800fa54 <__gethex+0xe8>
 800fa96:	eba6 0309 	sub.w	r3, r6, r9
 800fa9a:	3b01      	subs	r3, #1
 800fa9c:	4629      	mov	r1, r5
 800fa9e:	2b07      	cmp	r3, #7
 800faa0:	dc0a      	bgt.n	800fab8 <__gethex+0x14c>
 800faa2:	9801      	ldr	r0, [sp, #4]
 800faa4:	f7fd fdde 	bl	800d664 <_Balloc>
 800faa8:	4604      	mov	r4, r0
 800faaa:	b940      	cbnz	r0, 800fabe <__gethex+0x152>
 800faac:	4b5c      	ldr	r3, [pc, #368]	@ (800fc20 <__gethex+0x2b4>)
 800faae:	4602      	mov	r2, r0
 800fab0:	21e4      	movs	r1, #228	@ 0xe4
 800fab2:	485c      	ldr	r0, [pc, #368]	@ (800fc24 <__gethex+0x2b8>)
 800fab4:	f7ff fed4 	bl	800f860 <__assert_func>
 800fab8:	3101      	adds	r1, #1
 800faba:	105b      	asrs	r3, r3, #1
 800fabc:	e7ef      	b.n	800fa9e <__gethex+0x132>
 800fabe:	f100 0a14 	add.w	sl, r0, #20
 800fac2:	2300      	movs	r3, #0
 800fac4:	4655      	mov	r5, sl
 800fac6:	469b      	mov	fp, r3
 800fac8:	45b1      	cmp	r9, r6
 800faca:	d337      	bcc.n	800fb3c <__gethex+0x1d0>
 800facc:	f845 bb04 	str.w	fp, [r5], #4
 800fad0:	eba5 050a 	sub.w	r5, r5, sl
 800fad4:	10ad      	asrs	r5, r5, #2
 800fad6:	6125      	str	r5, [r4, #16]
 800fad8:	4658      	mov	r0, fp
 800fada:	f7fd feb5 	bl	800d848 <__hi0bits>
 800fade:	016d      	lsls	r5, r5, #5
 800fae0:	f8d8 6000 	ldr.w	r6, [r8]
 800fae4:	1a2d      	subs	r5, r5, r0
 800fae6:	42b5      	cmp	r5, r6
 800fae8:	dd54      	ble.n	800fb94 <__gethex+0x228>
 800faea:	1bad      	subs	r5, r5, r6
 800faec:	4629      	mov	r1, r5
 800faee:	4620      	mov	r0, r4
 800faf0:	f7fe fa49 	bl	800df86 <__any_on>
 800faf4:	4681      	mov	r9, r0
 800faf6:	b178      	cbz	r0, 800fb18 <__gethex+0x1ac>
 800faf8:	1e6b      	subs	r3, r5, #1
 800fafa:	1159      	asrs	r1, r3, #5
 800fafc:	f003 021f 	and.w	r2, r3, #31
 800fb00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fb04:	f04f 0901 	mov.w	r9, #1
 800fb08:	fa09 f202 	lsl.w	r2, r9, r2
 800fb0c:	420a      	tst	r2, r1
 800fb0e:	d003      	beq.n	800fb18 <__gethex+0x1ac>
 800fb10:	454b      	cmp	r3, r9
 800fb12:	dc36      	bgt.n	800fb82 <__gethex+0x216>
 800fb14:	f04f 0902 	mov.w	r9, #2
 800fb18:	4629      	mov	r1, r5
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	f7ff febe 	bl	800f89c <rshift>
 800fb20:	442f      	add	r7, r5
 800fb22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fb26:	42bb      	cmp	r3, r7
 800fb28:	da42      	bge.n	800fbb0 <__gethex+0x244>
 800fb2a:	9801      	ldr	r0, [sp, #4]
 800fb2c:	4621      	mov	r1, r4
 800fb2e:	f7fd fdd9 	bl	800d6e4 <_Bfree>
 800fb32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fb34:	2300      	movs	r3, #0
 800fb36:	6013      	str	r3, [r2, #0]
 800fb38:	25a3      	movs	r5, #163	@ 0xa3
 800fb3a:	e793      	b.n	800fa64 <__gethex+0xf8>
 800fb3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fb40:	2a2e      	cmp	r2, #46	@ 0x2e
 800fb42:	d012      	beq.n	800fb6a <__gethex+0x1fe>
 800fb44:	2b20      	cmp	r3, #32
 800fb46:	d104      	bne.n	800fb52 <__gethex+0x1e6>
 800fb48:	f845 bb04 	str.w	fp, [r5], #4
 800fb4c:	f04f 0b00 	mov.w	fp, #0
 800fb50:	465b      	mov	r3, fp
 800fb52:	7830      	ldrb	r0, [r6, #0]
 800fb54:	9303      	str	r3, [sp, #12]
 800fb56:	f7ff fef3 	bl	800f940 <__hexdig_fun>
 800fb5a:	9b03      	ldr	r3, [sp, #12]
 800fb5c:	f000 000f 	and.w	r0, r0, #15
 800fb60:	4098      	lsls	r0, r3
 800fb62:	ea4b 0b00 	orr.w	fp, fp, r0
 800fb66:	3304      	adds	r3, #4
 800fb68:	e7ae      	b.n	800fac8 <__gethex+0x15c>
 800fb6a:	45b1      	cmp	r9, r6
 800fb6c:	d8ea      	bhi.n	800fb44 <__gethex+0x1d8>
 800fb6e:	492b      	ldr	r1, [pc, #172]	@ (800fc1c <__gethex+0x2b0>)
 800fb70:	9303      	str	r3, [sp, #12]
 800fb72:	2201      	movs	r2, #1
 800fb74:	4630      	mov	r0, r6
 800fb76:	f7ff fe58 	bl	800f82a <strncmp>
 800fb7a:	9b03      	ldr	r3, [sp, #12]
 800fb7c:	2800      	cmp	r0, #0
 800fb7e:	d1e1      	bne.n	800fb44 <__gethex+0x1d8>
 800fb80:	e7a2      	b.n	800fac8 <__gethex+0x15c>
 800fb82:	1ea9      	subs	r1, r5, #2
 800fb84:	4620      	mov	r0, r4
 800fb86:	f7fe f9fe 	bl	800df86 <__any_on>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d0c2      	beq.n	800fb14 <__gethex+0x1a8>
 800fb8e:	f04f 0903 	mov.w	r9, #3
 800fb92:	e7c1      	b.n	800fb18 <__gethex+0x1ac>
 800fb94:	da09      	bge.n	800fbaa <__gethex+0x23e>
 800fb96:	1b75      	subs	r5, r6, r5
 800fb98:	4621      	mov	r1, r4
 800fb9a:	9801      	ldr	r0, [sp, #4]
 800fb9c:	462a      	mov	r2, r5
 800fb9e:	f7fd ffb9 	bl	800db14 <__lshift>
 800fba2:	1b7f      	subs	r7, r7, r5
 800fba4:	4604      	mov	r4, r0
 800fba6:	f100 0a14 	add.w	sl, r0, #20
 800fbaa:	f04f 0900 	mov.w	r9, #0
 800fbae:	e7b8      	b.n	800fb22 <__gethex+0x1b6>
 800fbb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fbb4:	42bd      	cmp	r5, r7
 800fbb6:	dd6f      	ble.n	800fc98 <__gethex+0x32c>
 800fbb8:	1bed      	subs	r5, r5, r7
 800fbba:	42ae      	cmp	r6, r5
 800fbbc:	dc34      	bgt.n	800fc28 <__gethex+0x2bc>
 800fbbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fbc2:	2b02      	cmp	r3, #2
 800fbc4:	d022      	beq.n	800fc0c <__gethex+0x2a0>
 800fbc6:	2b03      	cmp	r3, #3
 800fbc8:	d024      	beq.n	800fc14 <__gethex+0x2a8>
 800fbca:	2b01      	cmp	r3, #1
 800fbcc:	d115      	bne.n	800fbfa <__gethex+0x28e>
 800fbce:	42ae      	cmp	r6, r5
 800fbd0:	d113      	bne.n	800fbfa <__gethex+0x28e>
 800fbd2:	2e01      	cmp	r6, #1
 800fbd4:	d10b      	bne.n	800fbee <__gethex+0x282>
 800fbd6:	9a02      	ldr	r2, [sp, #8]
 800fbd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fbdc:	6013      	str	r3, [r2, #0]
 800fbde:	2301      	movs	r3, #1
 800fbe0:	6123      	str	r3, [r4, #16]
 800fbe2:	f8ca 3000 	str.w	r3, [sl]
 800fbe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbe8:	2562      	movs	r5, #98	@ 0x62
 800fbea:	601c      	str	r4, [r3, #0]
 800fbec:	e73a      	b.n	800fa64 <__gethex+0xf8>
 800fbee:	1e71      	subs	r1, r6, #1
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f7fe f9c8 	bl	800df86 <__any_on>
 800fbf6:	2800      	cmp	r0, #0
 800fbf8:	d1ed      	bne.n	800fbd6 <__gethex+0x26a>
 800fbfa:	9801      	ldr	r0, [sp, #4]
 800fbfc:	4621      	mov	r1, r4
 800fbfe:	f7fd fd71 	bl	800d6e4 <_Bfree>
 800fc02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc04:	2300      	movs	r3, #0
 800fc06:	6013      	str	r3, [r2, #0]
 800fc08:	2550      	movs	r5, #80	@ 0x50
 800fc0a:	e72b      	b.n	800fa64 <__gethex+0xf8>
 800fc0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d1f3      	bne.n	800fbfa <__gethex+0x28e>
 800fc12:	e7e0      	b.n	800fbd6 <__gethex+0x26a>
 800fc14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d1dd      	bne.n	800fbd6 <__gethex+0x26a>
 800fc1a:	e7ee      	b.n	800fbfa <__gethex+0x28e>
 800fc1c:	08012248 	.word	0x08012248
 800fc20:	080120db 	.word	0x080120db
 800fc24:	08012411 	.word	0x08012411
 800fc28:	1e6f      	subs	r7, r5, #1
 800fc2a:	f1b9 0f00 	cmp.w	r9, #0
 800fc2e:	d130      	bne.n	800fc92 <__gethex+0x326>
 800fc30:	b127      	cbz	r7, 800fc3c <__gethex+0x2d0>
 800fc32:	4639      	mov	r1, r7
 800fc34:	4620      	mov	r0, r4
 800fc36:	f7fe f9a6 	bl	800df86 <__any_on>
 800fc3a:	4681      	mov	r9, r0
 800fc3c:	117a      	asrs	r2, r7, #5
 800fc3e:	2301      	movs	r3, #1
 800fc40:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fc44:	f007 071f 	and.w	r7, r7, #31
 800fc48:	40bb      	lsls	r3, r7
 800fc4a:	4213      	tst	r3, r2
 800fc4c:	4629      	mov	r1, r5
 800fc4e:	4620      	mov	r0, r4
 800fc50:	bf18      	it	ne
 800fc52:	f049 0902 	orrne.w	r9, r9, #2
 800fc56:	f7ff fe21 	bl	800f89c <rshift>
 800fc5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fc5e:	1b76      	subs	r6, r6, r5
 800fc60:	2502      	movs	r5, #2
 800fc62:	f1b9 0f00 	cmp.w	r9, #0
 800fc66:	d047      	beq.n	800fcf8 <__gethex+0x38c>
 800fc68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc6c:	2b02      	cmp	r3, #2
 800fc6e:	d015      	beq.n	800fc9c <__gethex+0x330>
 800fc70:	2b03      	cmp	r3, #3
 800fc72:	d017      	beq.n	800fca4 <__gethex+0x338>
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d109      	bne.n	800fc8c <__gethex+0x320>
 800fc78:	f019 0f02 	tst.w	r9, #2
 800fc7c:	d006      	beq.n	800fc8c <__gethex+0x320>
 800fc7e:	f8da 3000 	ldr.w	r3, [sl]
 800fc82:	ea49 0903 	orr.w	r9, r9, r3
 800fc86:	f019 0f01 	tst.w	r9, #1
 800fc8a:	d10e      	bne.n	800fcaa <__gethex+0x33e>
 800fc8c:	f045 0510 	orr.w	r5, r5, #16
 800fc90:	e032      	b.n	800fcf8 <__gethex+0x38c>
 800fc92:	f04f 0901 	mov.w	r9, #1
 800fc96:	e7d1      	b.n	800fc3c <__gethex+0x2d0>
 800fc98:	2501      	movs	r5, #1
 800fc9a:	e7e2      	b.n	800fc62 <__gethex+0x2f6>
 800fc9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc9e:	f1c3 0301 	rsb	r3, r3, #1
 800fca2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d0f0      	beq.n	800fc8c <__gethex+0x320>
 800fcaa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fcae:	f104 0314 	add.w	r3, r4, #20
 800fcb2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fcb6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fcba:	f04f 0c00 	mov.w	ip, #0
 800fcbe:	4618      	mov	r0, r3
 800fcc0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fcc8:	d01b      	beq.n	800fd02 <__gethex+0x396>
 800fcca:	3201      	adds	r2, #1
 800fccc:	6002      	str	r2, [r0, #0]
 800fcce:	2d02      	cmp	r5, #2
 800fcd0:	f104 0314 	add.w	r3, r4, #20
 800fcd4:	d13c      	bne.n	800fd50 <__gethex+0x3e4>
 800fcd6:	f8d8 2000 	ldr.w	r2, [r8]
 800fcda:	3a01      	subs	r2, #1
 800fcdc:	42b2      	cmp	r2, r6
 800fcde:	d109      	bne.n	800fcf4 <__gethex+0x388>
 800fce0:	1171      	asrs	r1, r6, #5
 800fce2:	2201      	movs	r2, #1
 800fce4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fce8:	f006 061f 	and.w	r6, r6, #31
 800fcec:	fa02 f606 	lsl.w	r6, r2, r6
 800fcf0:	421e      	tst	r6, r3
 800fcf2:	d13a      	bne.n	800fd6a <__gethex+0x3fe>
 800fcf4:	f045 0520 	orr.w	r5, r5, #32
 800fcf8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fcfa:	601c      	str	r4, [r3, #0]
 800fcfc:	9b02      	ldr	r3, [sp, #8]
 800fcfe:	601f      	str	r7, [r3, #0]
 800fd00:	e6b0      	b.n	800fa64 <__gethex+0xf8>
 800fd02:	4299      	cmp	r1, r3
 800fd04:	f843 cc04 	str.w	ip, [r3, #-4]
 800fd08:	d8d9      	bhi.n	800fcbe <__gethex+0x352>
 800fd0a:	68a3      	ldr	r3, [r4, #8]
 800fd0c:	459b      	cmp	fp, r3
 800fd0e:	db17      	blt.n	800fd40 <__gethex+0x3d4>
 800fd10:	6861      	ldr	r1, [r4, #4]
 800fd12:	9801      	ldr	r0, [sp, #4]
 800fd14:	3101      	adds	r1, #1
 800fd16:	f7fd fca5 	bl	800d664 <_Balloc>
 800fd1a:	4681      	mov	r9, r0
 800fd1c:	b918      	cbnz	r0, 800fd26 <__gethex+0x3ba>
 800fd1e:	4b1a      	ldr	r3, [pc, #104]	@ (800fd88 <__gethex+0x41c>)
 800fd20:	4602      	mov	r2, r0
 800fd22:	2184      	movs	r1, #132	@ 0x84
 800fd24:	e6c5      	b.n	800fab2 <__gethex+0x146>
 800fd26:	6922      	ldr	r2, [r4, #16]
 800fd28:	3202      	adds	r2, #2
 800fd2a:	f104 010c 	add.w	r1, r4, #12
 800fd2e:	0092      	lsls	r2, r2, #2
 800fd30:	300c      	adds	r0, #12
 800fd32:	f7fc fde4 	bl	800c8fe <memcpy>
 800fd36:	4621      	mov	r1, r4
 800fd38:	9801      	ldr	r0, [sp, #4]
 800fd3a:	f7fd fcd3 	bl	800d6e4 <_Bfree>
 800fd3e:	464c      	mov	r4, r9
 800fd40:	6923      	ldr	r3, [r4, #16]
 800fd42:	1c5a      	adds	r2, r3, #1
 800fd44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fd48:	6122      	str	r2, [r4, #16]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	615a      	str	r2, [r3, #20]
 800fd4e:	e7be      	b.n	800fcce <__gethex+0x362>
 800fd50:	6922      	ldr	r2, [r4, #16]
 800fd52:	455a      	cmp	r2, fp
 800fd54:	dd0b      	ble.n	800fd6e <__gethex+0x402>
 800fd56:	2101      	movs	r1, #1
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f7ff fd9f 	bl	800f89c <rshift>
 800fd5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd62:	3701      	adds	r7, #1
 800fd64:	42bb      	cmp	r3, r7
 800fd66:	f6ff aee0 	blt.w	800fb2a <__gethex+0x1be>
 800fd6a:	2501      	movs	r5, #1
 800fd6c:	e7c2      	b.n	800fcf4 <__gethex+0x388>
 800fd6e:	f016 061f 	ands.w	r6, r6, #31
 800fd72:	d0fa      	beq.n	800fd6a <__gethex+0x3fe>
 800fd74:	4453      	add	r3, sl
 800fd76:	f1c6 0620 	rsb	r6, r6, #32
 800fd7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fd7e:	f7fd fd63 	bl	800d848 <__hi0bits>
 800fd82:	42b0      	cmp	r0, r6
 800fd84:	dbe7      	blt.n	800fd56 <__gethex+0x3ea>
 800fd86:	e7f0      	b.n	800fd6a <__gethex+0x3fe>
 800fd88:	080120db 	.word	0x080120db

0800fd8c <L_shift>:
 800fd8c:	f1c2 0208 	rsb	r2, r2, #8
 800fd90:	0092      	lsls	r2, r2, #2
 800fd92:	b570      	push	{r4, r5, r6, lr}
 800fd94:	f1c2 0620 	rsb	r6, r2, #32
 800fd98:	6843      	ldr	r3, [r0, #4]
 800fd9a:	6804      	ldr	r4, [r0, #0]
 800fd9c:	fa03 f506 	lsl.w	r5, r3, r6
 800fda0:	432c      	orrs	r4, r5
 800fda2:	40d3      	lsrs	r3, r2
 800fda4:	6004      	str	r4, [r0, #0]
 800fda6:	f840 3f04 	str.w	r3, [r0, #4]!
 800fdaa:	4288      	cmp	r0, r1
 800fdac:	d3f4      	bcc.n	800fd98 <L_shift+0xc>
 800fdae:	bd70      	pop	{r4, r5, r6, pc}

0800fdb0 <__match>:
 800fdb0:	b530      	push	{r4, r5, lr}
 800fdb2:	6803      	ldr	r3, [r0, #0]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fdba:	b914      	cbnz	r4, 800fdc2 <__match+0x12>
 800fdbc:	6003      	str	r3, [r0, #0]
 800fdbe:	2001      	movs	r0, #1
 800fdc0:	bd30      	pop	{r4, r5, pc}
 800fdc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fdc6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fdca:	2d19      	cmp	r5, #25
 800fdcc:	bf98      	it	ls
 800fdce:	3220      	addls	r2, #32
 800fdd0:	42a2      	cmp	r2, r4
 800fdd2:	d0f0      	beq.n	800fdb6 <__match+0x6>
 800fdd4:	2000      	movs	r0, #0
 800fdd6:	e7f3      	b.n	800fdc0 <__match+0x10>

0800fdd8 <__hexnan>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	680b      	ldr	r3, [r1, #0]
 800fdde:	6801      	ldr	r1, [r0, #0]
 800fde0:	115e      	asrs	r6, r3, #5
 800fde2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fde6:	f013 031f 	ands.w	r3, r3, #31
 800fdea:	b087      	sub	sp, #28
 800fdec:	bf18      	it	ne
 800fdee:	3604      	addne	r6, #4
 800fdf0:	2500      	movs	r5, #0
 800fdf2:	1f37      	subs	r7, r6, #4
 800fdf4:	4682      	mov	sl, r0
 800fdf6:	4690      	mov	r8, r2
 800fdf8:	9301      	str	r3, [sp, #4]
 800fdfa:	f846 5c04 	str.w	r5, [r6, #-4]
 800fdfe:	46b9      	mov	r9, r7
 800fe00:	463c      	mov	r4, r7
 800fe02:	9502      	str	r5, [sp, #8]
 800fe04:	46ab      	mov	fp, r5
 800fe06:	784a      	ldrb	r2, [r1, #1]
 800fe08:	1c4b      	adds	r3, r1, #1
 800fe0a:	9303      	str	r3, [sp, #12]
 800fe0c:	b342      	cbz	r2, 800fe60 <__hexnan+0x88>
 800fe0e:	4610      	mov	r0, r2
 800fe10:	9105      	str	r1, [sp, #20]
 800fe12:	9204      	str	r2, [sp, #16]
 800fe14:	f7ff fd94 	bl	800f940 <__hexdig_fun>
 800fe18:	2800      	cmp	r0, #0
 800fe1a:	d151      	bne.n	800fec0 <__hexnan+0xe8>
 800fe1c:	9a04      	ldr	r2, [sp, #16]
 800fe1e:	9905      	ldr	r1, [sp, #20]
 800fe20:	2a20      	cmp	r2, #32
 800fe22:	d818      	bhi.n	800fe56 <__hexnan+0x7e>
 800fe24:	9b02      	ldr	r3, [sp, #8]
 800fe26:	459b      	cmp	fp, r3
 800fe28:	dd13      	ble.n	800fe52 <__hexnan+0x7a>
 800fe2a:	454c      	cmp	r4, r9
 800fe2c:	d206      	bcs.n	800fe3c <__hexnan+0x64>
 800fe2e:	2d07      	cmp	r5, #7
 800fe30:	dc04      	bgt.n	800fe3c <__hexnan+0x64>
 800fe32:	462a      	mov	r2, r5
 800fe34:	4649      	mov	r1, r9
 800fe36:	4620      	mov	r0, r4
 800fe38:	f7ff ffa8 	bl	800fd8c <L_shift>
 800fe3c:	4544      	cmp	r4, r8
 800fe3e:	d952      	bls.n	800fee6 <__hexnan+0x10e>
 800fe40:	2300      	movs	r3, #0
 800fe42:	f1a4 0904 	sub.w	r9, r4, #4
 800fe46:	f844 3c04 	str.w	r3, [r4, #-4]
 800fe4a:	f8cd b008 	str.w	fp, [sp, #8]
 800fe4e:	464c      	mov	r4, r9
 800fe50:	461d      	mov	r5, r3
 800fe52:	9903      	ldr	r1, [sp, #12]
 800fe54:	e7d7      	b.n	800fe06 <__hexnan+0x2e>
 800fe56:	2a29      	cmp	r2, #41	@ 0x29
 800fe58:	d157      	bne.n	800ff0a <__hexnan+0x132>
 800fe5a:	3102      	adds	r1, #2
 800fe5c:	f8ca 1000 	str.w	r1, [sl]
 800fe60:	f1bb 0f00 	cmp.w	fp, #0
 800fe64:	d051      	beq.n	800ff0a <__hexnan+0x132>
 800fe66:	454c      	cmp	r4, r9
 800fe68:	d206      	bcs.n	800fe78 <__hexnan+0xa0>
 800fe6a:	2d07      	cmp	r5, #7
 800fe6c:	dc04      	bgt.n	800fe78 <__hexnan+0xa0>
 800fe6e:	462a      	mov	r2, r5
 800fe70:	4649      	mov	r1, r9
 800fe72:	4620      	mov	r0, r4
 800fe74:	f7ff ff8a 	bl	800fd8c <L_shift>
 800fe78:	4544      	cmp	r4, r8
 800fe7a:	d936      	bls.n	800feea <__hexnan+0x112>
 800fe7c:	f1a8 0204 	sub.w	r2, r8, #4
 800fe80:	4623      	mov	r3, r4
 800fe82:	f853 1b04 	ldr.w	r1, [r3], #4
 800fe86:	f842 1f04 	str.w	r1, [r2, #4]!
 800fe8a:	429f      	cmp	r7, r3
 800fe8c:	d2f9      	bcs.n	800fe82 <__hexnan+0xaa>
 800fe8e:	1b3b      	subs	r3, r7, r4
 800fe90:	f023 0303 	bic.w	r3, r3, #3
 800fe94:	3304      	adds	r3, #4
 800fe96:	3401      	adds	r4, #1
 800fe98:	3e03      	subs	r6, #3
 800fe9a:	42b4      	cmp	r4, r6
 800fe9c:	bf88      	it	hi
 800fe9e:	2304      	movhi	r3, #4
 800fea0:	4443      	add	r3, r8
 800fea2:	2200      	movs	r2, #0
 800fea4:	f843 2b04 	str.w	r2, [r3], #4
 800fea8:	429f      	cmp	r7, r3
 800feaa:	d2fb      	bcs.n	800fea4 <__hexnan+0xcc>
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	b91b      	cbnz	r3, 800feb8 <__hexnan+0xe0>
 800feb0:	4547      	cmp	r7, r8
 800feb2:	d128      	bne.n	800ff06 <__hexnan+0x12e>
 800feb4:	2301      	movs	r3, #1
 800feb6:	603b      	str	r3, [r7, #0]
 800feb8:	2005      	movs	r0, #5
 800feba:	b007      	add	sp, #28
 800febc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fec0:	3501      	adds	r5, #1
 800fec2:	2d08      	cmp	r5, #8
 800fec4:	f10b 0b01 	add.w	fp, fp, #1
 800fec8:	dd06      	ble.n	800fed8 <__hexnan+0x100>
 800feca:	4544      	cmp	r4, r8
 800fecc:	d9c1      	bls.n	800fe52 <__hexnan+0x7a>
 800fece:	2300      	movs	r3, #0
 800fed0:	f844 3c04 	str.w	r3, [r4, #-4]
 800fed4:	2501      	movs	r5, #1
 800fed6:	3c04      	subs	r4, #4
 800fed8:	6822      	ldr	r2, [r4, #0]
 800feda:	f000 000f 	and.w	r0, r0, #15
 800fede:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fee2:	6020      	str	r0, [r4, #0]
 800fee4:	e7b5      	b.n	800fe52 <__hexnan+0x7a>
 800fee6:	2508      	movs	r5, #8
 800fee8:	e7b3      	b.n	800fe52 <__hexnan+0x7a>
 800feea:	9b01      	ldr	r3, [sp, #4]
 800feec:	2b00      	cmp	r3, #0
 800feee:	d0dd      	beq.n	800feac <__hexnan+0xd4>
 800fef0:	f1c3 0320 	rsb	r3, r3, #32
 800fef4:	f04f 32ff 	mov.w	r2, #4294967295
 800fef8:	40da      	lsrs	r2, r3
 800fefa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fefe:	4013      	ands	r3, r2
 800ff00:	f846 3c04 	str.w	r3, [r6, #-4]
 800ff04:	e7d2      	b.n	800feac <__hexnan+0xd4>
 800ff06:	3f04      	subs	r7, #4
 800ff08:	e7d0      	b.n	800feac <__hexnan+0xd4>
 800ff0a:	2004      	movs	r0, #4
 800ff0c:	e7d5      	b.n	800feba <__hexnan+0xe2>

0800ff0e <__ascii_mbtowc>:
 800ff0e:	b082      	sub	sp, #8
 800ff10:	b901      	cbnz	r1, 800ff14 <__ascii_mbtowc+0x6>
 800ff12:	a901      	add	r1, sp, #4
 800ff14:	b142      	cbz	r2, 800ff28 <__ascii_mbtowc+0x1a>
 800ff16:	b14b      	cbz	r3, 800ff2c <__ascii_mbtowc+0x1e>
 800ff18:	7813      	ldrb	r3, [r2, #0]
 800ff1a:	600b      	str	r3, [r1, #0]
 800ff1c:	7812      	ldrb	r2, [r2, #0]
 800ff1e:	1e10      	subs	r0, r2, #0
 800ff20:	bf18      	it	ne
 800ff22:	2001      	movne	r0, #1
 800ff24:	b002      	add	sp, #8
 800ff26:	4770      	bx	lr
 800ff28:	4610      	mov	r0, r2
 800ff2a:	e7fb      	b.n	800ff24 <__ascii_mbtowc+0x16>
 800ff2c:	f06f 0001 	mvn.w	r0, #1
 800ff30:	e7f8      	b.n	800ff24 <__ascii_mbtowc+0x16>

0800ff32 <_realloc_r>:
 800ff32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff36:	4680      	mov	r8, r0
 800ff38:	4615      	mov	r5, r2
 800ff3a:	460c      	mov	r4, r1
 800ff3c:	b921      	cbnz	r1, 800ff48 <_realloc_r+0x16>
 800ff3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff42:	4611      	mov	r1, r2
 800ff44:	f7fb bbdc 	b.w	800b700 <_malloc_r>
 800ff48:	b92a      	cbnz	r2, 800ff56 <_realloc_r+0x24>
 800ff4a:	f7fd fb39 	bl	800d5c0 <_free_r>
 800ff4e:	2400      	movs	r4, #0
 800ff50:	4620      	mov	r0, r4
 800ff52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff56:	f000 f8b2 	bl	80100be <_malloc_usable_size_r>
 800ff5a:	4285      	cmp	r5, r0
 800ff5c:	4606      	mov	r6, r0
 800ff5e:	d802      	bhi.n	800ff66 <_realloc_r+0x34>
 800ff60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ff64:	d8f4      	bhi.n	800ff50 <_realloc_r+0x1e>
 800ff66:	4629      	mov	r1, r5
 800ff68:	4640      	mov	r0, r8
 800ff6a:	f7fb fbc9 	bl	800b700 <_malloc_r>
 800ff6e:	4607      	mov	r7, r0
 800ff70:	2800      	cmp	r0, #0
 800ff72:	d0ec      	beq.n	800ff4e <_realloc_r+0x1c>
 800ff74:	42b5      	cmp	r5, r6
 800ff76:	462a      	mov	r2, r5
 800ff78:	4621      	mov	r1, r4
 800ff7a:	bf28      	it	cs
 800ff7c:	4632      	movcs	r2, r6
 800ff7e:	f7fc fcbe 	bl	800c8fe <memcpy>
 800ff82:	4621      	mov	r1, r4
 800ff84:	4640      	mov	r0, r8
 800ff86:	f7fd fb1b 	bl	800d5c0 <_free_r>
 800ff8a:	463c      	mov	r4, r7
 800ff8c:	e7e0      	b.n	800ff50 <_realloc_r+0x1e>
	...

0800ff90 <_strtoul_l.constprop.0>:
 800ff90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff94:	4e34      	ldr	r6, [pc, #208]	@ (8010068 <_strtoul_l.constprop.0+0xd8>)
 800ff96:	4686      	mov	lr, r0
 800ff98:	460d      	mov	r5, r1
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffa0:	5d37      	ldrb	r7, [r6, r4]
 800ffa2:	f017 0708 	ands.w	r7, r7, #8
 800ffa6:	d1f8      	bne.n	800ff9a <_strtoul_l.constprop.0+0xa>
 800ffa8:	2c2d      	cmp	r4, #45	@ 0x2d
 800ffaa:	d12f      	bne.n	801000c <_strtoul_l.constprop.0+0x7c>
 800ffac:	782c      	ldrb	r4, [r5, #0]
 800ffae:	2701      	movs	r7, #1
 800ffb0:	1c85      	adds	r5, r0, #2
 800ffb2:	f033 0010 	bics.w	r0, r3, #16
 800ffb6:	d109      	bne.n	800ffcc <_strtoul_l.constprop.0+0x3c>
 800ffb8:	2c30      	cmp	r4, #48	@ 0x30
 800ffba:	d12c      	bne.n	8010016 <_strtoul_l.constprop.0+0x86>
 800ffbc:	7828      	ldrb	r0, [r5, #0]
 800ffbe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800ffc2:	2858      	cmp	r0, #88	@ 0x58
 800ffc4:	d127      	bne.n	8010016 <_strtoul_l.constprop.0+0x86>
 800ffc6:	786c      	ldrb	r4, [r5, #1]
 800ffc8:	2310      	movs	r3, #16
 800ffca:	3502      	adds	r5, #2
 800ffcc:	f04f 38ff 	mov.w	r8, #4294967295
 800ffd0:	2600      	movs	r6, #0
 800ffd2:	fbb8 f8f3 	udiv	r8, r8, r3
 800ffd6:	fb03 f908 	mul.w	r9, r3, r8
 800ffda:	ea6f 0909 	mvn.w	r9, r9
 800ffde:	4630      	mov	r0, r6
 800ffe0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ffe4:	f1bc 0f09 	cmp.w	ip, #9
 800ffe8:	d81c      	bhi.n	8010024 <_strtoul_l.constprop.0+0x94>
 800ffea:	4664      	mov	r4, ip
 800ffec:	42a3      	cmp	r3, r4
 800ffee:	dd2a      	ble.n	8010046 <_strtoul_l.constprop.0+0xb6>
 800fff0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fff4:	d007      	beq.n	8010006 <_strtoul_l.constprop.0+0x76>
 800fff6:	4580      	cmp	r8, r0
 800fff8:	d322      	bcc.n	8010040 <_strtoul_l.constprop.0+0xb0>
 800fffa:	d101      	bne.n	8010000 <_strtoul_l.constprop.0+0x70>
 800fffc:	45a1      	cmp	r9, r4
 800fffe:	db1f      	blt.n	8010040 <_strtoul_l.constprop.0+0xb0>
 8010000:	fb00 4003 	mla	r0, r0, r3, r4
 8010004:	2601      	movs	r6, #1
 8010006:	f815 4b01 	ldrb.w	r4, [r5], #1
 801000a:	e7e9      	b.n	800ffe0 <_strtoul_l.constprop.0+0x50>
 801000c:	2c2b      	cmp	r4, #43	@ 0x2b
 801000e:	bf04      	itt	eq
 8010010:	782c      	ldrbeq	r4, [r5, #0]
 8010012:	1c85      	addeq	r5, r0, #2
 8010014:	e7cd      	b.n	800ffb2 <_strtoul_l.constprop.0+0x22>
 8010016:	2b00      	cmp	r3, #0
 8010018:	d1d8      	bne.n	800ffcc <_strtoul_l.constprop.0+0x3c>
 801001a:	2c30      	cmp	r4, #48	@ 0x30
 801001c:	bf0c      	ite	eq
 801001e:	2308      	moveq	r3, #8
 8010020:	230a      	movne	r3, #10
 8010022:	e7d3      	b.n	800ffcc <_strtoul_l.constprop.0+0x3c>
 8010024:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010028:	f1bc 0f19 	cmp.w	ip, #25
 801002c:	d801      	bhi.n	8010032 <_strtoul_l.constprop.0+0xa2>
 801002e:	3c37      	subs	r4, #55	@ 0x37
 8010030:	e7dc      	b.n	800ffec <_strtoul_l.constprop.0+0x5c>
 8010032:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010036:	f1bc 0f19 	cmp.w	ip, #25
 801003a:	d804      	bhi.n	8010046 <_strtoul_l.constprop.0+0xb6>
 801003c:	3c57      	subs	r4, #87	@ 0x57
 801003e:	e7d5      	b.n	800ffec <_strtoul_l.constprop.0+0x5c>
 8010040:	f04f 36ff 	mov.w	r6, #4294967295
 8010044:	e7df      	b.n	8010006 <_strtoul_l.constprop.0+0x76>
 8010046:	1c73      	adds	r3, r6, #1
 8010048:	d106      	bne.n	8010058 <_strtoul_l.constprop.0+0xc8>
 801004a:	2322      	movs	r3, #34	@ 0x22
 801004c:	f8ce 3000 	str.w	r3, [lr]
 8010050:	4630      	mov	r0, r6
 8010052:	b932      	cbnz	r2, 8010062 <_strtoul_l.constprop.0+0xd2>
 8010054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010058:	b107      	cbz	r7, 801005c <_strtoul_l.constprop.0+0xcc>
 801005a:	4240      	negs	r0, r0
 801005c:	2a00      	cmp	r2, #0
 801005e:	d0f9      	beq.n	8010054 <_strtoul_l.constprop.0+0xc4>
 8010060:	b106      	cbz	r6, 8010064 <_strtoul_l.constprop.0+0xd4>
 8010062:	1e69      	subs	r1, r5, #1
 8010064:	6011      	str	r1, [r2, #0]
 8010066:	e7f5      	b.n	8010054 <_strtoul_l.constprop.0+0xc4>
 8010068:	080122a1 	.word	0x080122a1

0801006c <_strtoul_r>:
 801006c:	f7ff bf90 	b.w	800ff90 <_strtoul_l.constprop.0>

08010070 <__ascii_wctomb>:
 8010070:	4603      	mov	r3, r0
 8010072:	4608      	mov	r0, r1
 8010074:	b141      	cbz	r1, 8010088 <__ascii_wctomb+0x18>
 8010076:	2aff      	cmp	r2, #255	@ 0xff
 8010078:	d904      	bls.n	8010084 <__ascii_wctomb+0x14>
 801007a:	228a      	movs	r2, #138	@ 0x8a
 801007c:	601a      	str	r2, [r3, #0]
 801007e:	f04f 30ff 	mov.w	r0, #4294967295
 8010082:	4770      	bx	lr
 8010084:	700a      	strb	r2, [r1, #0]
 8010086:	2001      	movs	r0, #1
 8010088:	4770      	bx	lr
	...

0801008c <fiprintf>:
 801008c:	b40e      	push	{r1, r2, r3}
 801008e:	b503      	push	{r0, r1, lr}
 8010090:	4601      	mov	r1, r0
 8010092:	ab03      	add	r3, sp, #12
 8010094:	4805      	ldr	r0, [pc, #20]	@ (80100ac <fiprintf+0x20>)
 8010096:	f853 2b04 	ldr.w	r2, [r3], #4
 801009a:	6800      	ldr	r0, [r0, #0]
 801009c:	9301      	str	r3, [sp, #4]
 801009e:	f000 f83f 	bl	8010120 <_vfiprintf_r>
 80100a2:	b002      	add	sp, #8
 80100a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80100a8:	b003      	add	sp, #12
 80100aa:	4770      	bx	lr
 80100ac:	20000044 	.word	0x20000044

080100b0 <abort>:
 80100b0:	b508      	push	{r3, lr}
 80100b2:	2006      	movs	r0, #6
 80100b4:	f000 fa08 	bl	80104c8 <raise>
 80100b8:	2001      	movs	r0, #1
 80100ba:	f7f5 ff41 	bl	8005f40 <_exit>

080100be <_malloc_usable_size_r>:
 80100be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100c2:	1f18      	subs	r0, r3, #4
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	bfbc      	itt	lt
 80100c8:	580b      	ldrlt	r3, [r1, r0]
 80100ca:	18c0      	addlt	r0, r0, r3
 80100cc:	4770      	bx	lr

080100ce <__sfputc_r>:
 80100ce:	6893      	ldr	r3, [r2, #8]
 80100d0:	3b01      	subs	r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	b410      	push	{r4}
 80100d6:	6093      	str	r3, [r2, #8]
 80100d8:	da08      	bge.n	80100ec <__sfputc_r+0x1e>
 80100da:	6994      	ldr	r4, [r2, #24]
 80100dc:	42a3      	cmp	r3, r4
 80100de:	db01      	blt.n	80100e4 <__sfputc_r+0x16>
 80100e0:	290a      	cmp	r1, #10
 80100e2:	d103      	bne.n	80100ec <__sfputc_r+0x1e>
 80100e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100e8:	f000 b932 	b.w	8010350 <__swbuf_r>
 80100ec:	6813      	ldr	r3, [r2, #0]
 80100ee:	1c58      	adds	r0, r3, #1
 80100f0:	6010      	str	r0, [r2, #0]
 80100f2:	7019      	strb	r1, [r3, #0]
 80100f4:	4608      	mov	r0, r1
 80100f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <__sfputs_r>:
 80100fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100fe:	4606      	mov	r6, r0
 8010100:	460f      	mov	r7, r1
 8010102:	4614      	mov	r4, r2
 8010104:	18d5      	adds	r5, r2, r3
 8010106:	42ac      	cmp	r4, r5
 8010108:	d101      	bne.n	801010e <__sfputs_r+0x12>
 801010a:	2000      	movs	r0, #0
 801010c:	e007      	b.n	801011e <__sfputs_r+0x22>
 801010e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010112:	463a      	mov	r2, r7
 8010114:	4630      	mov	r0, r6
 8010116:	f7ff ffda 	bl	80100ce <__sfputc_r>
 801011a:	1c43      	adds	r3, r0, #1
 801011c:	d1f3      	bne.n	8010106 <__sfputs_r+0xa>
 801011e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010120 <_vfiprintf_r>:
 8010120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010124:	460d      	mov	r5, r1
 8010126:	b09d      	sub	sp, #116	@ 0x74
 8010128:	4614      	mov	r4, r2
 801012a:	4698      	mov	r8, r3
 801012c:	4606      	mov	r6, r0
 801012e:	b118      	cbz	r0, 8010138 <_vfiprintf_r+0x18>
 8010130:	6a03      	ldr	r3, [r0, #32]
 8010132:	b90b      	cbnz	r3, 8010138 <_vfiprintf_r+0x18>
 8010134:	f7fc fa68 	bl	800c608 <__sinit>
 8010138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801013a:	07d9      	lsls	r1, r3, #31
 801013c:	d405      	bmi.n	801014a <_vfiprintf_r+0x2a>
 801013e:	89ab      	ldrh	r3, [r5, #12]
 8010140:	059a      	lsls	r2, r3, #22
 8010142:	d402      	bmi.n	801014a <_vfiprintf_r+0x2a>
 8010144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010146:	f7fc fbd8 	bl	800c8fa <__retarget_lock_acquire_recursive>
 801014a:	89ab      	ldrh	r3, [r5, #12]
 801014c:	071b      	lsls	r3, r3, #28
 801014e:	d501      	bpl.n	8010154 <_vfiprintf_r+0x34>
 8010150:	692b      	ldr	r3, [r5, #16]
 8010152:	b99b      	cbnz	r3, 801017c <_vfiprintf_r+0x5c>
 8010154:	4629      	mov	r1, r5
 8010156:	4630      	mov	r0, r6
 8010158:	f000 f938 	bl	80103cc <__swsetup_r>
 801015c:	b170      	cbz	r0, 801017c <_vfiprintf_r+0x5c>
 801015e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010160:	07dc      	lsls	r4, r3, #31
 8010162:	d504      	bpl.n	801016e <_vfiprintf_r+0x4e>
 8010164:	f04f 30ff 	mov.w	r0, #4294967295
 8010168:	b01d      	add	sp, #116	@ 0x74
 801016a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016e:	89ab      	ldrh	r3, [r5, #12]
 8010170:	0598      	lsls	r0, r3, #22
 8010172:	d4f7      	bmi.n	8010164 <_vfiprintf_r+0x44>
 8010174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010176:	f7fc fbc1 	bl	800c8fc <__retarget_lock_release_recursive>
 801017a:	e7f3      	b.n	8010164 <_vfiprintf_r+0x44>
 801017c:	2300      	movs	r3, #0
 801017e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010180:	2320      	movs	r3, #32
 8010182:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010186:	f8cd 800c 	str.w	r8, [sp, #12]
 801018a:	2330      	movs	r3, #48	@ 0x30
 801018c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801033c <_vfiprintf_r+0x21c>
 8010190:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010194:	f04f 0901 	mov.w	r9, #1
 8010198:	4623      	mov	r3, r4
 801019a:	469a      	mov	sl, r3
 801019c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101a0:	b10a      	cbz	r2, 80101a6 <_vfiprintf_r+0x86>
 80101a2:	2a25      	cmp	r2, #37	@ 0x25
 80101a4:	d1f9      	bne.n	801019a <_vfiprintf_r+0x7a>
 80101a6:	ebba 0b04 	subs.w	fp, sl, r4
 80101aa:	d00b      	beq.n	80101c4 <_vfiprintf_r+0xa4>
 80101ac:	465b      	mov	r3, fp
 80101ae:	4622      	mov	r2, r4
 80101b0:	4629      	mov	r1, r5
 80101b2:	4630      	mov	r0, r6
 80101b4:	f7ff ffa2 	bl	80100fc <__sfputs_r>
 80101b8:	3001      	adds	r0, #1
 80101ba:	f000 80a7 	beq.w	801030c <_vfiprintf_r+0x1ec>
 80101be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80101c0:	445a      	add	r2, fp
 80101c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80101c4:	f89a 3000 	ldrb.w	r3, [sl]
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 809f 	beq.w	801030c <_vfiprintf_r+0x1ec>
 80101ce:	2300      	movs	r3, #0
 80101d0:	f04f 32ff 	mov.w	r2, #4294967295
 80101d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101d8:	f10a 0a01 	add.w	sl, sl, #1
 80101dc:	9304      	str	r3, [sp, #16]
 80101de:	9307      	str	r3, [sp, #28]
 80101e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80101e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80101e6:	4654      	mov	r4, sl
 80101e8:	2205      	movs	r2, #5
 80101ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101ee:	4853      	ldr	r0, [pc, #332]	@ (801033c <_vfiprintf_r+0x21c>)
 80101f0:	f7f0 f80e 	bl	8000210 <memchr>
 80101f4:	9a04      	ldr	r2, [sp, #16]
 80101f6:	b9d8      	cbnz	r0, 8010230 <_vfiprintf_r+0x110>
 80101f8:	06d1      	lsls	r1, r2, #27
 80101fa:	bf44      	itt	mi
 80101fc:	2320      	movmi	r3, #32
 80101fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010202:	0713      	lsls	r3, r2, #28
 8010204:	bf44      	itt	mi
 8010206:	232b      	movmi	r3, #43	@ 0x2b
 8010208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801020c:	f89a 3000 	ldrb.w	r3, [sl]
 8010210:	2b2a      	cmp	r3, #42	@ 0x2a
 8010212:	d015      	beq.n	8010240 <_vfiprintf_r+0x120>
 8010214:	9a07      	ldr	r2, [sp, #28]
 8010216:	4654      	mov	r4, sl
 8010218:	2000      	movs	r0, #0
 801021a:	f04f 0c0a 	mov.w	ip, #10
 801021e:	4621      	mov	r1, r4
 8010220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010224:	3b30      	subs	r3, #48	@ 0x30
 8010226:	2b09      	cmp	r3, #9
 8010228:	d94b      	bls.n	80102c2 <_vfiprintf_r+0x1a2>
 801022a:	b1b0      	cbz	r0, 801025a <_vfiprintf_r+0x13a>
 801022c:	9207      	str	r2, [sp, #28]
 801022e:	e014      	b.n	801025a <_vfiprintf_r+0x13a>
 8010230:	eba0 0308 	sub.w	r3, r0, r8
 8010234:	fa09 f303 	lsl.w	r3, r9, r3
 8010238:	4313      	orrs	r3, r2
 801023a:	9304      	str	r3, [sp, #16]
 801023c:	46a2      	mov	sl, r4
 801023e:	e7d2      	b.n	80101e6 <_vfiprintf_r+0xc6>
 8010240:	9b03      	ldr	r3, [sp, #12]
 8010242:	1d19      	adds	r1, r3, #4
 8010244:	681b      	ldr	r3, [r3, #0]
 8010246:	9103      	str	r1, [sp, #12]
 8010248:	2b00      	cmp	r3, #0
 801024a:	bfbb      	ittet	lt
 801024c:	425b      	neglt	r3, r3
 801024e:	f042 0202 	orrlt.w	r2, r2, #2
 8010252:	9307      	strge	r3, [sp, #28]
 8010254:	9307      	strlt	r3, [sp, #28]
 8010256:	bfb8      	it	lt
 8010258:	9204      	strlt	r2, [sp, #16]
 801025a:	7823      	ldrb	r3, [r4, #0]
 801025c:	2b2e      	cmp	r3, #46	@ 0x2e
 801025e:	d10a      	bne.n	8010276 <_vfiprintf_r+0x156>
 8010260:	7863      	ldrb	r3, [r4, #1]
 8010262:	2b2a      	cmp	r3, #42	@ 0x2a
 8010264:	d132      	bne.n	80102cc <_vfiprintf_r+0x1ac>
 8010266:	9b03      	ldr	r3, [sp, #12]
 8010268:	1d1a      	adds	r2, r3, #4
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	9203      	str	r2, [sp, #12]
 801026e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010272:	3402      	adds	r4, #2
 8010274:	9305      	str	r3, [sp, #20]
 8010276:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801034c <_vfiprintf_r+0x22c>
 801027a:	7821      	ldrb	r1, [r4, #0]
 801027c:	2203      	movs	r2, #3
 801027e:	4650      	mov	r0, sl
 8010280:	f7ef ffc6 	bl	8000210 <memchr>
 8010284:	b138      	cbz	r0, 8010296 <_vfiprintf_r+0x176>
 8010286:	9b04      	ldr	r3, [sp, #16]
 8010288:	eba0 000a 	sub.w	r0, r0, sl
 801028c:	2240      	movs	r2, #64	@ 0x40
 801028e:	4082      	lsls	r2, r0
 8010290:	4313      	orrs	r3, r2
 8010292:	3401      	adds	r4, #1
 8010294:	9304      	str	r3, [sp, #16]
 8010296:	f814 1b01 	ldrb.w	r1, [r4], #1
 801029a:	4829      	ldr	r0, [pc, #164]	@ (8010340 <_vfiprintf_r+0x220>)
 801029c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80102a0:	2206      	movs	r2, #6
 80102a2:	f7ef ffb5 	bl	8000210 <memchr>
 80102a6:	2800      	cmp	r0, #0
 80102a8:	d03f      	beq.n	801032a <_vfiprintf_r+0x20a>
 80102aa:	4b26      	ldr	r3, [pc, #152]	@ (8010344 <_vfiprintf_r+0x224>)
 80102ac:	bb1b      	cbnz	r3, 80102f6 <_vfiprintf_r+0x1d6>
 80102ae:	9b03      	ldr	r3, [sp, #12]
 80102b0:	3307      	adds	r3, #7
 80102b2:	f023 0307 	bic.w	r3, r3, #7
 80102b6:	3308      	adds	r3, #8
 80102b8:	9303      	str	r3, [sp, #12]
 80102ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102bc:	443b      	add	r3, r7
 80102be:	9309      	str	r3, [sp, #36]	@ 0x24
 80102c0:	e76a      	b.n	8010198 <_vfiprintf_r+0x78>
 80102c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80102c6:	460c      	mov	r4, r1
 80102c8:	2001      	movs	r0, #1
 80102ca:	e7a8      	b.n	801021e <_vfiprintf_r+0xfe>
 80102cc:	2300      	movs	r3, #0
 80102ce:	3401      	adds	r4, #1
 80102d0:	9305      	str	r3, [sp, #20]
 80102d2:	4619      	mov	r1, r3
 80102d4:	f04f 0c0a 	mov.w	ip, #10
 80102d8:	4620      	mov	r0, r4
 80102da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102de:	3a30      	subs	r2, #48	@ 0x30
 80102e0:	2a09      	cmp	r2, #9
 80102e2:	d903      	bls.n	80102ec <_vfiprintf_r+0x1cc>
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d0c6      	beq.n	8010276 <_vfiprintf_r+0x156>
 80102e8:	9105      	str	r1, [sp, #20]
 80102ea:	e7c4      	b.n	8010276 <_vfiprintf_r+0x156>
 80102ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80102f0:	4604      	mov	r4, r0
 80102f2:	2301      	movs	r3, #1
 80102f4:	e7f0      	b.n	80102d8 <_vfiprintf_r+0x1b8>
 80102f6:	ab03      	add	r3, sp, #12
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	462a      	mov	r2, r5
 80102fc:	4b12      	ldr	r3, [pc, #72]	@ (8010348 <_vfiprintf_r+0x228>)
 80102fe:	a904      	add	r1, sp, #16
 8010300:	4630      	mov	r0, r6
 8010302:	f7fb fb29 	bl	800b958 <_printf_float>
 8010306:	4607      	mov	r7, r0
 8010308:	1c78      	adds	r0, r7, #1
 801030a:	d1d6      	bne.n	80102ba <_vfiprintf_r+0x19a>
 801030c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801030e:	07d9      	lsls	r1, r3, #31
 8010310:	d405      	bmi.n	801031e <_vfiprintf_r+0x1fe>
 8010312:	89ab      	ldrh	r3, [r5, #12]
 8010314:	059a      	lsls	r2, r3, #22
 8010316:	d402      	bmi.n	801031e <_vfiprintf_r+0x1fe>
 8010318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801031a:	f7fc faef 	bl	800c8fc <__retarget_lock_release_recursive>
 801031e:	89ab      	ldrh	r3, [r5, #12]
 8010320:	065b      	lsls	r3, r3, #25
 8010322:	f53f af1f 	bmi.w	8010164 <_vfiprintf_r+0x44>
 8010326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010328:	e71e      	b.n	8010168 <_vfiprintf_r+0x48>
 801032a:	ab03      	add	r3, sp, #12
 801032c:	9300      	str	r3, [sp, #0]
 801032e:	462a      	mov	r2, r5
 8010330:	4b05      	ldr	r3, [pc, #20]	@ (8010348 <_vfiprintf_r+0x228>)
 8010332:	a904      	add	r1, sp, #16
 8010334:	4630      	mov	r0, r6
 8010336:	f7fb fda7 	bl	800be88 <_printf_i>
 801033a:	e7e4      	b.n	8010306 <_vfiprintf_r+0x1e6>
 801033c:	080123a1 	.word	0x080123a1
 8010340:	080123ab 	.word	0x080123ab
 8010344:	0800b959 	.word	0x0800b959
 8010348:	080100fd 	.word	0x080100fd
 801034c:	080123a7 	.word	0x080123a7

08010350 <__swbuf_r>:
 8010350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010352:	460e      	mov	r6, r1
 8010354:	4614      	mov	r4, r2
 8010356:	4605      	mov	r5, r0
 8010358:	b118      	cbz	r0, 8010362 <__swbuf_r+0x12>
 801035a:	6a03      	ldr	r3, [r0, #32]
 801035c:	b90b      	cbnz	r3, 8010362 <__swbuf_r+0x12>
 801035e:	f7fc f953 	bl	800c608 <__sinit>
 8010362:	69a3      	ldr	r3, [r4, #24]
 8010364:	60a3      	str	r3, [r4, #8]
 8010366:	89a3      	ldrh	r3, [r4, #12]
 8010368:	071a      	lsls	r2, r3, #28
 801036a:	d501      	bpl.n	8010370 <__swbuf_r+0x20>
 801036c:	6923      	ldr	r3, [r4, #16]
 801036e:	b943      	cbnz	r3, 8010382 <__swbuf_r+0x32>
 8010370:	4621      	mov	r1, r4
 8010372:	4628      	mov	r0, r5
 8010374:	f000 f82a 	bl	80103cc <__swsetup_r>
 8010378:	b118      	cbz	r0, 8010382 <__swbuf_r+0x32>
 801037a:	f04f 37ff 	mov.w	r7, #4294967295
 801037e:	4638      	mov	r0, r7
 8010380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010382:	6823      	ldr	r3, [r4, #0]
 8010384:	6922      	ldr	r2, [r4, #16]
 8010386:	1a98      	subs	r0, r3, r2
 8010388:	6963      	ldr	r3, [r4, #20]
 801038a:	b2f6      	uxtb	r6, r6
 801038c:	4283      	cmp	r3, r0
 801038e:	4637      	mov	r7, r6
 8010390:	dc05      	bgt.n	801039e <__swbuf_r+0x4e>
 8010392:	4621      	mov	r1, r4
 8010394:	4628      	mov	r0, r5
 8010396:	f7ff f993 	bl	800f6c0 <_fflush_r>
 801039a:	2800      	cmp	r0, #0
 801039c:	d1ed      	bne.n	801037a <__swbuf_r+0x2a>
 801039e:	68a3      	ldr	r3, [r4, #8]
 80103a0:	3b01      	subs	r3, #1
 80103a2:	60a3      	str	r3, [r4, #8]
 80103a4:	6823      	ldr	r3, [r4, #0]
 80103a6:	1c5a      	adds	r2, r3, #1
 80103a8:	6022      	str	r2, [r4, #0]
 80103aa:	701e      	strb	r6, [r3, #0]
 80103ac:	6962      	ldr	r2, [r4, #20]
 80103ae:	1c43      	adds	r3, r0, #1
 80103b0:	429a      	cmp	r2, r3
 80103b2:	d004      	beq.n	80103be <__swbuf_r+0x6e>
 80103b4:	89a3      	ldrh	r3, [r4, #12]
 80103b6:	07db      	lsls	r3, r3, #31
 80103b8:	d5e1      	bpl.n	801037e <__swbuf_r+0x2e>
 80103ba:	2e0a      	cmp	r6, #10
 80103bc:	d1df      	bne.n	801037e <__swbuf_r+0x2e>
 80103be:	4621      	mov	r1, r4
 80103c0:	4628      	mov	r0, r5
 80103c2:	f7ff f97d 	bl	800f6c0 <_fflush_r>
 80103c6:	2800      	cmp	r0, #0
 80103c8:	d0d9      	beq.n	801037e <__swbuf_r+0x2e>
 80103ca:	e7d6      	b.n	801037a <__swbuf_r+0x2a>

080103cc <__swsetup_r>:
 80103cc:	b538      	push	{r3, r4, r5, lr}
 80103ce:	4b29      	ldr	r3, [pc, #164]	@ (8010474 <__swsetup_r+0xa8>)
 80103d0:	4605      	mov	r5, r0
 80103d2:	6818      	ldr	r0, [r3, #0]
 80103d4:	460c      	mov	r4, r1
 80103d6:	b118      	cbz	r0, 80103e0 <__swsetup_r+0x14>
 80103d8:	6a03      	ldr	r3, [r0, #32]
 80103da:	b90b      	cbnz	r3, 80103e0 <__swsetup_r+0x14>
 80103dc:	f7fc f914 	bl	800c608 <__sinit>
 80103e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80103e4:	0719      	lsls	r1, r3, #28
 80103e6:	d422      	bmi.n	801042e <__swsetup_r+0x62>
 80103e8:	06da      	lsls	r2, r3, #27
 80103ea:	d407      	bmi.n	80103fc <__swsetup_r+0x30>
 80103ec:	2209      	movs	r2, #9
 80103ee:	602a      	str	r2, [r5, #0]
 80103f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103f4:	81a3      	strh	r3, [r4, #12]
 80103f6:	f04f 30ff 	mov.w	r0, #4294967295
 80103fa:	e033      	b.n	8010464 <__swsetup_r+0x98>
 80103fc:	0758      	lsls	r0, r3, #29
 80103fe:	d512      	bpl.n	8010426 <__swsetup_r+0x5a>
 8010400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010402:	b141      	cbz	r1, 8010416 <__swsetup_r+0x4a>
 8010404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010408:	4299      	cmp	r1, r3
 801040a:	d002      	beq.n	8010412 <__swsetup_r+0x46>
 801040c:	4628      	mov	r0, r5
 801040e:	f7fd f8d7 	bl	800d5c0 <_free_r>
 8010412:	2300      	movs	r3, #0
 8010414:	6363      	str	r3, [r4, #52]	@ 0x34
 8010416:	89a3      	ldrh	r3, [r4, #12]
 8010418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801041c:	81a3      	strh	r3, [r4, #12]
 801041e:	2300      	movs	r3, #0
 8010420:	6063      	str	r3, [r4, #4]
 8010422:	6923      	ldr	r3, [r4, #16]
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	f043 0308 	orr.w	r3, r3, #8
 801042c:	81a3      	strh	r3, [r4, #12]
 801042e:	6923      	ldr	r3, [r4, #16]
 8010430:	b94b      	cbnz	r3, 8010446 <__swsetup_r+0x7a>
 8010432:	89a3      	ldrh	r3, [r4, #12]
 8010434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801043c:	d003      	beq.n	8010446 <__swsetup_r+0x7a>
 801043e:	4621      	mov	r1, r4
 8010440:	4628      	mov	r0, r5
 8010442:	f000 f883 	bl	801054c <__smakebuf_r>
 8010446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801044a:	f013 0201 	ands.w	r2, r3, #1
 801044e:	d00a      	beq.n	8010466 <__swsetup_r+0x9a>
 8010450:	2200      	movs	r2, #0
 8010452:	60a2      	str	r2, [r4, #8]
 8010454:	6962      	ldr	r2, [r4, #20]
 8010456:	4252      	negs	r2, r2
 8010458:	61a2      	str	r2, [r4, #24]
 801045a:	6922      	ldr	r2, [r4, #16]
 801045c:	b942      	cbnz	r2, 8010470 <__swsetup_r+0xa4>
 801045e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010462:	d1c5      	bne.n	80103f0 <__swsetup_r+0x24>
 8010464:	bd38      	pop	{r3, r4, r5, pc}
 8010466:	0799      	lsls	r1, r3, #30
 8010468:	bf58      	it	pl
 801046a:	6962      	ldrpl	r2, [r4, #20]
 801046c:	60a2      	str	r2, [r4, #8]
 801046e:	e7f4      	b.n	801045a <__swsetup_r+0x8e>
 8010470:	2000      	movs	r0, #0
 8010472:	e7f7      	b.n	8010464 <__swsetup_r+0x98>
 8010474:	20000044 	.word	0x20000044

08010478 <_raise_r>:
 8010478:	291f      	cmp	r1, #31
 801047a:	b538      	push	{r3, r4, r5, lr}
 801047c:	4605      	mov	r5, r0
 801047e:	460c      	mov	r4, r1
 8010480:	d904      	bls.n	801048c <_raise_r+0x14>
 8010482:	2316      	movs	r3, #22
 8010484:	6003      	str	r3, [r0, #0]
 8010486:	f04f 30ff 	mov.w	r0, #4294967295
 801048a:	bd38      	pop	{r3, r4, r5, pc}
 801048c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801048e:	b112      	cbz	r2, 8010496 <_raise_r+0x1e>
 8010490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010494:	b94b      	cbnz	r3, 80104aa <_raise_r+0x32>
 8010496:	4628      	mov	r0, r5
 8010498:	f000 f830 	bl	80104fc <_getpid_r>
 801049c:	4622      	mov	r2, r4
 801049e:	4601      	mov	r1, r0
 80104a0:	4628      	mov	r0, r5
 80104a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80104a6:	f000 b817 	b.w	80104d8 <_kill_r>
 80104aa:	2b01      	cmp	r3, #1
 80104ac:	d00a      	beq.n	80104c4 <_raise_r+0x4c>
 80104ae:	1c59      	adds	r1, r3, #1
 80104b0:	d103      	bne.n	80104ba <_raise_r+0x42>
 80104b2:	2316      	movs	r3, #22
 80104b4:	6003      	str	r3, [r0, #0]
 80104b6:	2001      	movs	r0, #1
 80104b8:	e7e7      	b.n	801048a <_raise_r+0x12>
 80104ba:	2100      	movs	r1, #0
 80104bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80104c0:	4620      	mov	r0, r4
 80104c2:	4798      	blx	r3
 80104c4:	2000      	movs	r0, #0
 80104c6:	e7e0      	b.n	801048a <_raise_r+0x12>

080104c8 <raise>:
 80104c8:	4b02      	ldr	r3, [pc, #8]	@ (80104d4 <raise+0xc>)
 80104ca:	4601      	mov	r1, r0
 80104cc:	6818      	ldr	r0, [r3, #0]
 80104ce:	f7ff bfd3 	b.w	8010478 <_raise_r>
 80104d2:	bf00      	nop
 80104d4:	20000044 	.word	0x20000044

080104d8 <_kill_r>:
 80104d8:	b538      	push	{r3, r4, r5, lr}
 80104da:	4d07      	ldr	r5, [pc, #28]	@ (80104f8 <_kill_r+0x20>)
 80104dc:	2300      	movs	r3, #0
 80104de:	4604      	mov	r4, r0
 80104e0:	4608      	mov	r0, r1
 80104e2:	4611      	mov	r1, r2
 80104e4:	602b      	str	r3, [r5, #0]
 80104e6:	f7f5 fd1b 	bl	8005f20 <_kill>
 80104ea:	1c43      	adds	r3, r0, #1
 80104ec:	d102      	bne.n	80104f4 <_kill_r+0x1c>
 80104ee:	682b      	ldr	r3, [r5, #0]
 80104f0:	b103      	cbz	r3, 80104f4 <_kill_r+0x1c>
 80104f2:	6023      	str	r3, [r4, #0]
 80104f4:	bd38      	pop	{r3, r4, r5, pc}
 80104f6:	bf00      	nop
 80104f8:	200017a8 	.word	0x200017a8

080104fc <_getpid_r>:
 80104fc:	f7f5 bd08 	b.w	8005f10 <_getpid>

08010500 <__swhatbuf_r>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	460c      	mov	r4, r1
 8010504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010508:	2900      	cmp	r1, #0
 801050a:	b096      	sub	sp, #88	@ 0x58
 801050c:	4615      	mov	r5, r2
 801050e:	461e      	mov	r6, r3
 8010510:	da0d      	bge.n	801052e <__swhatbuf_r+0x2e>
 8010512:	89a3      	ldrh	r3, [r4, #12]
 8010514:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010518:	f04f 0100 	mov.w	r1, #0
 801051c:	bf14      	ite	ne
 801051e:	2340      	movne	r3, #64	@ 0x40
 8010520:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010524:	2000      	movs	r0, #0
 8010526:	6031      	str	r1, [r6, #0]
 8010528:	602b      	str	r3, [r5, #0]
 801052a:	b016      	add	sp, #88	@ 0x58
 801052c:	bd70      	pop	{r4, r5, r6, pc}
 801052e:	466a      	mov	r2, sp
 8010530:	f000 f848 	bl	80105c4 <_fstat_r>
 8010534:	2800      	cmp	r0, #0
 8010536:	dbec      	blt.n	8010512 <__swhatbuf_r+0x12>
 8010538:	9901      	ldr	r1, [sp, #4]
 801053a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801053e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010542:	4259      	negs	r1, r3
 8010544:	4159      	adcs	r1, r3
 8010546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801054a:	e7eb      	b.n	8010524 <__swhatbuf_r+0x24>

0801054c <__smakebuf_r>:
 801054c:	898b      	ldrh	r3, [r1, #12]
 801054e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010550:	079d      	lsls	r5, r3, #30
 8010552:	4606      	mov	r6, r0
 8010554:	460c      	mov	r4, r1
 8010556:	d507      	bpl.n	8010568 <__smakebuf_r+0x1c>
 8010558:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801055c:	6023      	str	r3, [r4, #0]
 801055e:	6123      	str	r3, [r4, #16]
 8010560:	2301      	movs	r3, #1
 8010562:	6163      	str	r3, [r4, #20]
 8010564:	b003      	add	sp, #12
 8010566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010568:	ab01      	add	r3, sp, #4
 801056a:	466a      	mov	r2, sp
 801056c:	f7ff ffc8 	bl	8010500 <__swhatbuf_r>
 8010570:	9f00      	ldr	r7, [sp, #0]
 8010572:	4605      	mov	r5, r0
 8010574:	4639      	mov	r1, r7
 8010576:	4630      	mov	r0, r6
 8010578:	f7fb f8c2 	bl	800b700 <_malloc_r>
 801057c:	b948      	cbnz	r0, 8010592 <__smakebuf_r+0x46>
 801057e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010582:	059a      	lsls	r2, r3, #22
 8010584:	d4ee      	bmi.n	8010564 <__smakebuf_r+0x18>
 8010586:	f023 0303 	bic.w	r3, r3, #3
 801058a:	f043 0302 	orr.w	r3, r3, #2
 801058e:	81a3      	strh	r3, [r4, #12]
 8010590:	e7e2      	b.n	8010558 <__smakebuf_r+0xc>
 8010592:	89a3      	ldrh	r3, [r4, #12]
 8010594:	6020      	str	r0, [r4, #0]
 8010596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801059a:	81a3      	strh	r3, [r4, #12]
 801059c:	9b01      	ldr	r3, [sp, #4]
 801059e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80105a2:	b15b      	cbz	r3, 80105bc <__smakebuf_r+0x70>
 80105a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80105a8:	4630      	mov	r0, r6
 80105aa:	f000 f81d 	bl	80105e8 <_isatty_r>
 80105ae:	b128      	cbz	r0, 80105bc <__smakebuf_r+0x70>
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	f023 0303 	bic.w	r3, r3, #3
 80105b6:	f043 0301 	orr.w	r3, r3, #1
 80105ba:	81a3      	strh	r3, [r4, #12]
 80105bc:	89a3      	ldrh	r3, [r4, #12]
 80105be:	431d      	orrs	r5, r3
 80105c0:	81a5      	strh	r5, [r4, #12]
 80105c2:	e7cf      	b.n	8010564 <__smakebuf_r+0x18>

080105c4 <_fstat_r>:
 80105c4:	b538      	push	{r3, r4, r5, lr}
 80105c6:	4d07      	ldr	r5, [pc, #28]	@ (80105e4 <_fstat_r+0x20>)
 80105c8:	2300      	movs	r3, #0
 80105ca:	4604      	mov	r4, r0
 80105cc:	4608      	mov	r0, r1
 80105ce:	4611      	mov	r1, r2
 80105d0:	602b      	str	r3, [r5, #0]
 80105d2:	f7f5 fd05 	bl	8005fe0 <_fstat>
 80105d6:	1c43      	adds	r3, r0, #1
 80105d8:	d102      	bne.n	80105e0 <_fstat_r+0x1c>
 80105da:	682b      	ldr	r3, [r5, #0]
 80105dc:	b103      	cbz	r3, 80105e0 <_fstat_r+0x1c>
 80105de:	6023      	str	r3, [r4, #0]
 80105e0:	bd38      	pop	{r3, r4, r5, pc}
 80105e2:	bf00      	nop
 80105e4:	200017a8 	.word	0x200017a8

080105e8 <_isatty_r>:
 80105e8:	b538      	push	{r3, r4, r5, lr}
 80105ea:	4d06      	ldr	r5, [pc, #24]	@ (8010604 <_isatty_r+0x1c>)
 80105ec:	2300      	movs	r3, #0
 80105ee:	4604      	mov	r4, r0
 80105f0:	4608      	mov	r0, r1
 80105f2:	602b      	str	r3, [r5, #0]
 80105f4:	f7f5 fd04 	bl	8006000 <_isatty>
 80105f8:	1c43      	adds	r3, r0, #1
 80105fa:	d102      	bne.n	8010602 <_isatty_r+0x1a>
 80105fc:	682b      	ldr	r3, [r5, #0]
 80105fe:	b103      	cbz	r3, 8010602 <_isatty_r+0x1a>
 8010600:	6023      	str	r3, [r4, #0]
 8010602:	bd38      	pop	{r3, r4, r5, pc}
 8010604:	200017a8 	.word	0x200017a8

08010608 <pow>:
 8010608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060a:	ed2d 8b02 	vpush	{d8}
 801060e:	eeb0 8a40 	vmov.f32	s16, s0
 8010612:	eef0 8a60 	vmov.f32	s17, s1
 8010616:	ec55 4b11 	vmov	r4, r5, d1
 801061a:	f000 facd 	bl	8010bb8 <__ieee754_pow>
 801061e:	4622      	mov	r2, r4
 8010620:	462b      	mov	r3, r5
 8010622:	4620      	mov	r0, r4
 8010624:	4629      	mov	r1, r5
 8010626:	ec57 6b10 	vmov	r6, r7, d0
 801062a:	f7f0 fa9f 	bl	8000b6c <__aeabi_dcmpun>
 801062e:	2800      	cmp	r0, #0
 8010630:	d13b      	bne.n	80106aa <pow+0xa2>
 8010632:	ec51 0b18 	vmov	r0, r1, d8
 8010636:	2200      	movs	r2, #0
 8010638:	2300      	movs	r3, #0
 801063a:	f7f0 fa65 	bl	8000b08 <__aeabi_dcmpeq>
 801063e:	b1b8      	cbz	r0, 8010670 <pow+0x68>
 8010640:	2200      	movs	r2, #0
 8010642:	2300      	movs	r3, #0
 8010644:	4620      	mov	r0, r4
 8010646:	4629      	mov	r1, r5
 8010648:	f7f0 fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 801064c:	2800      	cmp	r0, #0
 801064e:	d146      	bne.n	80106de <pow+0xd6>
 8010650:	ec45 4b10 	vmov	d0, r4, r5
 8010654:	f000 f8f3 	bl	801083e <finite>
 8010658:	b338      	cbz	r0, 80106aa <pow+0xa2>
 801065a:	2200      	movs	r2, #0
 801065c:	2300      	movs	r3, #0
 801065e:	4620      	mov	r0, r4
 8010660:	4629      	mov	r1, r5
 8010662:	f7f0 fa5b 	bl	8000b1c <__aeabi_dcmplt>
 8010666:	b300      	cbz	r0, 80106aa <pow+0xa2>
 8010668:	f7fc f91c 	bl	800c8a4 <__errno>
 801066c:	2322      	movs	r3, #34	@ 0x22
 801066e:	e01b      	b.n	80106a8 <pow+0xa0>
 8010670:	ec47 6b10 	vmov	d0, r6, r7
 8010674:	f000 f8e3 	bl	801083e <finite>
 8010678:	b9e0      	cbnz	r0, 80106b4 <pow+0xac>
 801067a:	eeb0 0a48 	vmov.f32	s0, s16
 801067e:	eef0 0a68 	vmov.f32	s1, s17
 8010682:	f000 f8dc 	bl	801083e <finite>
 8010686:	b1a8      	cbz	r0, 80106b4 <pow+0xac>
 8010688:	ec45 4b10 	vmov	d0, r4, r5
 801068c:	f000 f8d7 	bl	801083e <finite>
 8010690:	b180      	cbz	r0, 80106b4 <pow+0xac>
 8010692:	4632      	mov	r2, r6
 8010694:	463b      	mov	r3, r7
 8010696:	4630      	mov	r0, r6
 8010698:	4639      	mov	r1, r7
 801069a:	f7f0 fa67 	bl	8000b6c <__aeabi_dcmpun>
 801069e:	2800      	cmp	r0, #0
 80106a0:	d0e2      	beq.n	8010668 <pow+0x60>
 80106a2:	f7fc f8ff 	bl	800c8a4 <__errno>
 80106a6:	2321      	movs	r3, #33	@ 0x21
 80106a8:	6003      	str	r3, [r0, #0]
 80106aa:	ecbd 8b02 	vpop	{d8}
 80106ae:	ec47 6b10 	vmov	d0, r6, r7
 80106b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106b4:	2200      	movs	r2, #0
 80106b6:	2300      	movs	r3, #0
 80106b8:	4630      	mov	r0, r6
 80106ba:	4639      	mov	r1, r7
 80106bc:	f7f0 fa24 	bl	8000b08 <__aeabi_dcmpeq>
 80106c0:	2800      	cmp	r0, #0
 80106c2:	d0f2      	beq.n	80106aa <pow+0xa2>
 80106c4:	eeb0 0a48 	vmov.f32	s0, s16
 80106c8:	eef0 0a68 	vmov.f32	s1, s17
 80106cc:	f000 f8b7 	bl	801083e <finite>
 80106d0:	2800      	cmp	r0, #0
 80106d2:	d0ea      	beq.n	80106aa <pow+0xa2>
 80106d4:	ec45 4b10 	vmov	d0, r4, r5
 80106d8:	f000 f8b1 	bl	801083e <finite>
 80106dc:	e7c3      	b.n	8010666 <pow+0x5e>
 80106de:	4f01      	ldr	r7, [pc, #4]	@ (80106e4 <pow+0xdc>)
 80106e0:	2600      	movs	r6, #0
 80106e2:	e7e2      	b.n	80106aa <pow+0xa2>
 80106e4:	3ff00000 	.word	0x3ff00000

080106e8 <sqrt>:
 80106e8:	b538      	push	{r3, r4, r5, lr}
 80106ea:	ed2d 8b02 	vpush	{d8}
 80106ee:	ec55 4b10 	vmov	r4, r5, d0
 80106f2:	f000 f905 	bl	8010900 <__ieee754_sqrt>
 80106f6:	4622      	mov	r2, r4
 80106f8:	462b      	mov	r3, r5
 80106fa:	4620      	mov	r0, r4
 80106fc:	4629      	mov	r1, r5
 80106fe:	eeb0 8a40 	vmov.f32	s16, s0
 8010702:	eef0 8a60 	vmov.f32	s17, s1
 8010706:	f7f0 fa31 	bl	8000b6c <__aeabi_dcmpun>
 801070a:	b990      	cbnz	r0, 8010732 <sqrt+0x4a>
 801070c:	2200      	movs	r2, #0
 801070e:	2300      	movs	r3, #0
 8010710:	4620      	mov	r0, r4
 8010712:	4629      	mov	r1, r5
 8010714:	f7f0 fa02 	bl	8000b1c <__aeabi_dcmplt>
 8010718:	b158      	cbz	r0, 8010732 <sqrt+0x4a>
 801071a:	f7fc f8c3 	bl	800c8a4 <__errno>
 801071e:	2321      	movs	r3, #33	@ 0x21
 8010720:	6003      	str	r3, [r0, #0]
 8010722:	2200      	movs	r2, #0
 8010724:	2300      	movs	r3, #0
 8010726:	4610      	mov	r0, r2
 8010728:	4619      	mov	r1, r3
 801072a:	f7f0 f8af 	bl	800088c <__aeabi_ddiv>
 801072e:	ec41 0b18 	vmov	d8, r0, r1
 8010732:	eeb0 0a48 	vmov.f32	s0, s16
 8010736:	eef0 0a68 	vmov.f32	s1, s17
 801073a:	ecbd 8b02 	vpop	{d8}
 801073e:	bd38      	pop	{r3, r4, r5, pc}

08010740 <acosf>:
 8010740:	b508      	push	{r3, lr}
 8010742:	ed2d 8b02 	vpush	{d8}
 8010746:	eeb0 8a40 	vmov.f32	s16, s0
 801074a:	f000 ff81 	bl	8011650 <__ieee754_acosf>
 801074e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010756:	eef0 8a40 	vmov.f32	s17, s0
 801075a:	d615      	bvs.n	8010788 <acosf+0x48>
 801075c:	eeb0 0a48 	vmov.f32	s0, s16
 8010760:	f000 f866 	bl	8010830 <fabsf>
 8010764:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010768:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010770:	dd0a      	ble.n	8010788 <acosf+0x48>
 8010772:	f7fc f897 	bl	800c8a4 <__errno>
 8010776:	ecbd 8b02 	vpop	{d8}
 801077a:	2321      	movs	r3, #33	@ 0x21
 801077c:	6003      	str	r3, [r0, #0]
 801077e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010782:	4804      	ldr	r0, [pc, #16]	@ (8010794 <acosf+0x54>)
 8010784:	f7fc b8ca 	b.w	800c91c <nanf>
 8010788:	eeb0 0a68 	vmov.f32	s0, s17
 801078c:	ecbd 8b02 	vpop	{d8}
 8010790:	bd08      	pop	{r3, pc}
 8010792:	bf00      	nop
 8010794:	08012410 	.word	0x08012410

08010798 <asinf>:
 8010798:	b508      	push	{r3, lr}
 801079a:	ed2d 8b02 	vpush	{d8}
 801079e:	eeb0 8a40 	vmov.f32	s16, s0
 80107a2:	f001 f84d 	bl	8011840 <__ieee754_asinf>
 80107a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80107aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ae:	eef0 8a40 	vmov.f32	s17, s0
 80107b2:	d615      	bvs.n	80107e0 <asinf+0x48>
 80107b4:	eeb0 0a48 	vmov.f32	s0, s16
 80107b8:	f000 f83a 	bl	8010830 <fabsf>
 80107bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80107c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80107c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c8:	dd0a      	ble.n	80107e0 <asinf+0x48>
 80107ca:	f7fc f86b 	bl	800c8a4 <__errno>
 80107ce:	ecbd 8b02 	vpop	{d8}
 80107d2:	2321      	movs	r3, #33	@ 0x21
 80107d4:	6003      	str	r3, [r0, #0]
 80107d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80107da:	4804      	ldr	r0, [pc, #16]	@ (80107ec <asinf+0x54>)
 80107dc:	f7fc b89e 	b.w	800c91c <nanf>
 80107e0:	eeb0 0a68 	vmov.f32	s0, s17
 80107e4:	ecbd 8b02 	vpop	{d8}
 80107e8:	bd08      	pop	{r3, pc}
 80107ea:	bf00      	nop
 80107ec:	08012410 	.word	0x08012410

080107f0 <atan2f>:
 80107f0:	f001 b90c 	b.w	8011a0c <__ieee754_atan2f>

080107f4 <sqrtf>:
 80107f4:	b508      	push	{r3, lr}
 80107f6:	ed2d 8b02 	vpush	{d8}
 80107fa:	eeb0 8a40 	vmov.f32	s16, s0
 80107fe:	f000 f959 	bl	8010ab4 <__ieee754_sqrtf>
 8010802:	eeb4 8a48 	vcmp.f32	s16, s16
 8010806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801080a:	d60c      	bvs.n	8010826 <sqrtf+0x32>
 801080c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801082c <sqrtf+0x38>
 8010810:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010818:	d505      	bpl.n	8010826 <sqrtf+0x32>
 801081a:	f7fc f843 	bl	800c8a4 <__errno>
 801081e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010822:	2321      	movs	r3, #33	@ 0x21
 8010824:	6003      	str	r3, [r0, #0]
 8010826:	ecbd 8b02 	vpop	{d8}
 801082a:	bd08      	pop	{r3, pc}
 801082c:	00000000 	.word	0x00000000

08010830 <fabsf>:
 8010830:	ee10 3a10 	vmov	r3, s0
 8010834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010838:	ee00 3a10 	vmov	s0, r3
 801083c:	4770      	bx	lr

0801083e <finite>:
 801083e:	b082      	sub	sp, #8
 8010840:	ed8d 0b00 	vstr	d0, [sp]
 8010844:	9801      	ldr	r0, [sp, #4]
 8010846:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801084a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801084e:	0fc0      	lsrs	r0, r0, #31
 8010850:	b002      	add	sp, #8
 8010852:	4770      	bx	lr

08010854 <fmaxf>:
 8010854:	b508      	push	{r3, lr}
 8010856:	ed2d 8b02 	vpush	{d8}
 801085a:	eeb0 8a40 	vmov.f32	s16, s0
 801085e:	eef0 8a60 	vmov.f32	s17, s1
 8010862:	f000 f831 	bl	80108c8 <__fpclassifyf>
 8010866:	b930      	cbnz	r0, 8010876 <fmaxf+0x22>
 8010868:	eeb0 8a68 	vmov.f32	s16, s17
 801086c:	eeb0 0a48 	vmov.f32	s0, s16
 8010870:	ecbd 8b02 	vpop	{d8}
 8010874:	bd08      	pop	{r3, pc}
 8010876:	eeb0 0a68 	vmov.f32	s0, s17
 801087a:	f000 f825 	bl	80108c8 <__fpclassifyf>
 801087e:	2800      	cmp	r0, #0
 8010880:	d0f4      	beq.n	801086c <fmaxf+0x18>
 8010882:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088a:	dded      	ble.n	8010868 <fmaxf+0x14>
 801088c:	e7ee      	b.n	801086c <fmaxf+0x18>

0801088e <fminf>:
 801088e:	b508      	push	{r3, lr}
 8010890:	ed2d 8b02 	vpush	{d8}
 8010894:	eeb0 8a40 	vmov.f32	s16, s0
 8010898:	eef0 8a60 	vmov.f32	s17, s1
 801089c:	f000 f814 	bl	80108c8 <__fpclassifyf>
 80108a0:	b930      	cbnz	r0, 80108b0 <fminf+0x22>
 80108a2:	eeb0 8a68 	vmov.f32	s16, s17
 80108a6:	eeb0 0a48 	vmov.f32	s0, s16
 80108aa:	ecbd 8b02 	vpop	{d8}
 80108ae:	bd08      	pop	{r3, pc}
 80108b0:	eeb0 0a68 	vmov.f32	s0, s17
 80108b4:	f000 f808 	bl	80108c8 <__fpclassifyf>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	d0f4      	beq.n	80108a6 <fminf+0x18>
 80108bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80108c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c4:	d5ed      	bpl.n	80108a2 <fminf+0x14>
 80108c6:	e7ee      	b.n	80108a6 <fminf+0x18>

080108c8 <__fpclassifyf>:
 80108c8:	ee10 3a10 	vmov	r3, s0
 80108cc:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80108d0:	d00d      	beq.n	80108ee <__fpclassifyf+0x26>
 80108d2:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 80108d6:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 80108da:	d30a      	bcc.n	80108f2 <__fpclassifyf+0x2a>
 80108dc:	4b07      	ldr	r3, [pc, #28]	@ (80108fc <__fpclassifyf+0x34>)
 80108de:	1e42      	subs	r2, r0, #1
 80108e0:	429a      	cmp	r2, r3
 80108e2:	d908      	bls.n	80108f6 <__fpclassifyf+0x2e>
 80108e4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80108e8:	4258      	negs	r0, r3
 80108ea:	4158      	adcs	r0, r3
 80108ec:	4770      	bx	lr
 80108ee:	2002      	movs	r0, #2
 80108f0:	4770      	bx	lr
 80108f2:	2004      	movs	r0, #4
 80108f4:	4770      	bx	lr
 80108f6:	2003      	movs	r0, #3
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	007ffffe 	.word	0x007ffffe

08010900 <__ieee754_sqrt>:
 8010900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010904:	4a68      	ldr	r2, [pc, #416]	@ (8010aa8 <__ieee754_sqrt+0x1a8>)
 8010906:	ec55 4b10 	vmov	r4, r5, d0
 801090a:	43aa      	bics	r2, r5
 801090c:	462b      	mov	r3, r5
 801090e:	4621      	mov	r1, r4
 8010910:	d110      	bne.n	8010934 <__ieee754_sqrt+0x34>
 8010912:	4622      	mov	r2, r4
 8010914:	4620      	mov	r0, r4
 8010916:	4629      	mov	r1, r5
 8010918:	f7ef fe8e 	bl	8000638 <__aeabi_dmul>
 801091c:	4602      	mov	r2, r0
 801091e:	460b      	mov	r3, r1
 8010920:	4620      	mov	r0, r4
 8010922:	4629      	mov	r1, r5
 8010924:	f7ef fcd2 	bl	80002cc <__adddf3>
 8010928:	4604      	mov	r4, r0
 801092a:	460d      	mov	r5, r1
 801092c:	ec45 4b10 	vmov	d0, r4, r5
 8010930:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010934:	2d00      	cmp	r5, #0
 8010936:	dc0e      	bgt.n	8010956 <__ieee754_sqrt+0x56>
 8010938:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801093c:	4322      	orrs	r2, r4
 801093e:	d0f5      	beq.n	801092c <__ieee754_sqrt+0x2c>
 8010940:	b19d      	cbz	r5, 801096a <__ieee754_sqrt+0x6a>
 8010942:	4622      	mov	r2, r4
 8010944:	4620      	mov	r0, r4
 8010946:	4629      	mov	r1, r5
 8010948:	f7ef fcbe 	bl	80002c8 <__aeabi_dsub>
 801094c:	4602      	mov	r2, r0
 801094e:	460b      	mov	r3, r1
 8010950:	f7ef ff9c 	bl	800088c <__aeabi_ddiv>
 8010954:	e7e8      	b.n	8010928 <__ieee754_sqrt+0x28>
 8010956:	152a      	asrs	r2, r5, #20
 8010958:	d115      	bne.n	8010986 <__ieee754_sqrt+0x86>
 801095a:	2000      	movs	r0, #0
 801095c:	e009      	b.n	8010972 <__ieee754_sqrt+0x72>
 801095e:	0acb      	lsrs	r3, r1, #11
 8010960:	3a15      	subs	r2, #21
 8010962:	0549      	lsls	r1, r1, #21
 8010964:	2b00      	cmp	r3, #0
 8010966:	d0fa      	beq.n	801095e <__ieee754_sqrt+0x5e>
 8010968:	e7f7      	b.n	801095a <__ieee754_sqrt+0x5a>
 801096a:	462a      	mov	r2, r5
 801096c:	e7fa      	b.n	8010964 <__ieee754_sqrt+0x64>
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	3001      	adds	r0, #1
 8010972:	02dc      	lsls	r4, r3, #11
 8010974:	d5fb      	bpl.n	801096e <__ieee754_sqrt+0x6e>
 8010976:	1e44      	subs	r4, r0, #1
 8010978:	1b12      	subs	r2, r2, r4
 801097a:	f1c0 0420 	rsb	r4, r0, #32
 801097e:	fa21 f404 	lsr.w	r4, r1, r4
 8010982:	4323      	orrs	r3, r4
 8010984:	4081      	lsls	r1, r0
 8010986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801098a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801098e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010992:	07d2      	lsls	r2, r2, #31
 8010994:	bf5c      	itt	pl
 8010996:	005b      	lslpl	r3, r3, #1
 8010998:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801099c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80109a0:	bf58      	it	pl
 80109a2:	0049      	lslpl	r1, r1, #1
 80109a4:	2600      	movs	r6, #0
 80109a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80109aa:	106d      	asrs	r5, r5, #1
 80109ac:	0049      	lsls	r1, r1, #1
 80109ae:	2016      	movs	r0, #22
 80109b0:	4632      	mov	r2, r6
 80109b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80109b6:	1917      	adds	r7, r2, r4
 80109b8:	429f      	cmp	r7, r3
 80109ba:	bfde      	ittt	le
 80109bc:	193a      	addle	r2, r7, r4
 80109be:	1bdb      	suble	r3, r3, r7
 80109c0:	1936      	addle	r6, r6, r4
 80109c2:	0fcf      	lsrs	r7, r1, #31
 80109c4:	3801      	subs	r0, #1
 80109c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80109ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80109ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80109d2:	d1f0      	bne.n	80109b6 <__ieee754_sqrt+0xb6>
 80109d4:	4604      	mov	r4, r0
 80109d6:	2720      	movs	r7, #32
 80109d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80109dc:	429a      	cmp	r2, r3
 80109de:	eb00 0e0c 	add.w	lr, r0, ip
 80109e2:	db02      	blt.n	80109ea <__ieee754_sqrt+0xea>
 80109e4:	d113      	bne.n	8010a0e <__ieee754_sqrt+0x10e>
 80109e6:	458e      	cmp	lr, r1
 80109e8:	d811      	bhi.n	8010a0e <__ieee754_sqrt+0x10e>
 80109ea:	f1be 0f00 	cmp.w	lr, #0
 80109ee:	eb0e 000c 	add.w	r0, lr, ip
 80109f2:	da42      	bge.n	8010a7a <__ieee754_sqrt+0x17a>
 80109f4:	2800      	cmp	r0, #0
 80109f6:	db40      	blt.n	8010a7a <__ieee754_sqrt+0x17a>
 80109f8:	f102 0801 	add.w	r8, r2, #1
 80109fc:	1a9b      	subs	r3, r3, r2
 80109fe:	458e      	cmp	lr, r1
 8010a00:	bf88      	it	hi
 8010a02:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010a06:	eba1 010e 	sub.w	r1, r1, lr
 8010a0a:	4464      	add	r4, ip
 8010a0c:	4642      	mov	r2, r8
 8010a0e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010a12:	3f01      	subs	r7, #1
 8010a14:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010a18:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010a1c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010a20:	d1dc      	bne.n	80109dc <__ieee754_sqrt+0xdc>
 8010a22:	4319      	orrs	r1, r3
 8010a24:	d01b      	beq.n	8010a5e <__ieee754_sqrt+0x15e>
 8010a26:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010aac <__ieee754_sqrt+0x1ac>
 8010a2a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010ab0 <__ieee754_sqrt+0x1b0>
 8010a2e:	e9da 0100 	ldrd	r0, r1, [sl]
 8010a32:	e9db 2300 	ldrd	r2, r3, [fp]
 8010a36:	f7ef fc47 	bl	80002c8 <__aeabi_dsub>
 8010a3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a3e:	4602      	mov	r2, r0
 8010a40:	460b      	mov	r3, r1
 8010a42:	4640      	mov	r0, r8
 8010a44:	4649      	mov	r1, r9
 8010a46:	f7f0 f873 	bl	8000b30 <__aeabi_dcmple>
 8010a4a:	b140      	cbz	r0, 8010a5e <__ieee754_sqrt+0x15e>
 8010a4c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010a50:	e9da 0100 	ldrd	r0, r1, [sl]
 8010a54:	e9db 2300 	ldrd	r2, r3, [fp]
 8010a58:	d111      	bne.n	8010a7e <__ieee754_sqrt+0x17e>
 8010a5a:	3601      	adds	r6, #1
 8010a5c:	463c      	mov	r4, r7
 8010a5e:	1072      	asrs	r2, r6, #1
 8010a60:	0863      	lsrs	r3, r4, #1
 8010a62:	07f1      	lsls	r1, r6, #31
 8010a64:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010a68:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010a6c:	bf48      	it	mi
 8010a6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010a72:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010a76:	4618      	mov	r0, r3
 8010a78:	e756      	b.n	8010928 <__ieee754_sqrt+0x28>
 8010a7a:	4690      	mov	r8, r2
 8010a7c:	e7be      	b.n	80109fc <__ieee754_sqrt+0xfc>
 8010a7e:	f7ef fc25 	bl	80002cc <__adddf3>
 8010a82:	e9da 8900 	ldrd	r8, r9, [sl]
 8010a86:	4602      	mov	r2, r0
 8010a88:	460b      	mov	r3, r1
 8010a8a:	4640      	mov	r0, r8
 8010a8c:	4649      	mov	r1, r9
 8010a8e:	f7f0 f845 	bl	8000b1c <__aeabi_dcmplt>
 8010a92:	b120      	cbz	r0, 8010a9e <__ieee754_sqrt+0x19e>
 8010a94:	1ca0      	adds	r0, r4, #2
 8010a96:	bf08      	it	eq
 8010a98:	3601      	addeq	r6, #1
 8010a9a:	3402      	adds	r4, #2
 8010a9c:	e7df      	b.n	8010a5e <__ieee754_sqrt+0x15e>
 8010a9e:	1c63      	adds	r3, r4, #1
 8010aa0:	f023 0401 	bic.w	r4, r3, #1
 8010aa4:	e7db      	b.n	8010a5e <__ieee754_sqrt+0x15e>
 8010aa6:	bf00      	nop
 8010aa8:	7ff00000 	.word	0x7ff00000
 8010aac:	20000208 	.word	0x20000208
 8010ab0:	20000200 	.word	0x20000200

08010ab4 <__ieee754_sqrtf>:
 8010ab4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010ab8:	4770      	bx	lr
 8010aba:	0000      	movs	r0, r0
 8010abc:	0000      	movs	r0, r0
	...

08010ac0 <floor>:
 8010ac0:	ec51 0b10 	vmov	r0, r1, d0
 8010ac4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010ac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010acc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010ad0:	2e13      	cmp	r6, #19
 8010ad2:	460c      	mov	r4, r1
 8010ad4:	4605      	mov	r5, r0
 8010ad6:	4680      	mov	r8, r0
 8010ad8:	dc34      	bgt.n	8010b44 <floor+0x84>
 8010ada:	2e00      	cmp	r6, #0
 8010adc:	da17      	bge.n	8010b0e <floor+0x4e>
 8010ade:	a332      	add	r3, pc, #200	@ (adr r3, 8010ba8 <floor+0xe8>)
 8010ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ae4:	f7ef fbf2 	bl	80002cc <__adddf3>
 8010ae8:	2200      	movs	r2, #0
 8010aea:	2300      	movs	r3, #0
 8010aec:	f7f0 f834 	bl	8000b58 <__aeabi_dcmpgt>
 8010af0:	b150      	cbz	r0, 8010b08 <floor+0x48>
 8010af2:	2c00      	cmp	r4, #0
 8010af4:	da55      	bge.n	8010ba2 <floor+0xe2>
 8010af6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010afa:	432c      	orrs	r4, r5
 8010afc:	2500      	movs	r5, #0
 8010afe:	42ac      	cmp	r4, r5
 8010b00:	4c2b      	ldr	r4, [pc, #172]	@ (8010bb0 <floor+0xf0>)
 8010b02:	bf08      	it	eq
 8010b04:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010b08:	4621      	mov	r1, r4
 8010b0a:	4628      	mov	r0, r5
 8010b0c:	e023      	b.n	8010b56 <floor+0x96>
 8010b0e:	4f29      	ldr	r7, [pc, #164]	@ (8010bb4 <floor+0xf4>)
 8010b10:	4137      	asrs	r7, r6
 8010b12:	ea01 0307 	and.w	r3, r1, r7
 8010b16:	4303      	orrs	r3, r0
 8010b18:	d01d      	beq.n	8010b56 <floor+0x96>
 8010b1a:	a323      	add	r3, pc, #140	@ (adr r3, 8010ba8 <floor+0xe8>)
 8010b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b20:	f7ef fbd4 	bl	80002cc <__adddf3>
 8010b24:	2200      	movs	r2, #0
 8010b26:	2300      	movs	r3, #0
 8010b28:	f7f0 f816 	bl	8000b58 <__aeabi_dcmpgt>
 8010b2c:	2800      	cmp	r0, #0
 8010b2e:	d0eb      	beq.n	8010b08 <floor+0x48>
 8010b30:	2c00      	cmp	r4, #0
 8010b32:	bfbe      	ittt	lt
 8010b34:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010b38:	4133      	asrlt	r3, r6
 8010b3a:	18e4      	addlt	r4, r4, r3
 8010b3c:	ea24 0407 	bic.w	r4, r4, r7
 8010b40:	2500      	movs	r5, #0
 8010b42:	e7e1      	b.n	8010b08 <floor+0x48>
 8010b44:	2e33      	cmp	r6, #51	@ 0x33
 8010b46:	dd0a      	ble.n	8010b5e <floor+0x9e>
 8010b48:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010b4c:	d103      	bne.n	8010b56 <floor+0x96>
 8010b4e:	4602      	mov	r2, r0
 8010b50:	460b      	mov	r3, r1
 8010b52:	f7ef fbbb 	bl	80002cc <__adddf3>
 8010b56:	ec41 0b10 	vmov	d0, r0, r1
 8010b5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b5e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010b62:	f04f 37ff 	mov.w	r7, #4294967295
 8010b66:	40df      	lsrs	r7, r3
 8010b68:	4207      	tst	r7, r0
 8010b6a:	d0f4      	beq.n	8010b56 <floor+0x96>
 8010b6c:	a30e      	add	r3, pc, #56	@ (adr r3, 8010ba8 <floor+0xe8>)
 8010b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b72:	f7ef fbab 	bl	80002cc <__adddf3>
 8010b76:	2200      	movs	r2, #0
 8010b78:	2300      	movs	r3, #0
 8010b7a:	f7ef ffed 	bl	8000b58 <__aeabi_dcmpgt>
 8010b7e:	2800      	cmp	r0, #0
 8010b80:	d0c2      	beq.n	8010b08 <floor+0x48>
 8010b82:	2c00      	cmp	r4, #0
 8010b84:	da0a      	bge.n	8010b9c <floor+0xdc>
 8010b86:	2e14      	cmp	r6, #20
 8010b88:	d101      	bne.n	8010b8e <floor+0xce>
 8010b8a:	3401      	adds	r4, #1
 8010b8c:	e006      	b.n	8010b9c <floor+0xdc>
 8010b8e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010b92:	2301      	movs	r3, #1
 8010b94:	40b3      	lsls	r3, r6
 8010b96:	441d      	add	r5, r3
 8010b98:	4545      	cmp	r5, r8
 8010b9a:	d3f6      	bcc.n	8010b8a <floor+0xca>
 8010b9c:	ea25 0507 	bic.w	r5, r5, r7
 8010ba0:	e7b2      	b.n	8010b08 <floor+0x48>
 8010ba2:	2500      	movs	r5, #0
 8010ba4:	462c      	mov	r4, r5
 8010ba6:	e7af      	b.n	8010b08 <floor+0x48>
 8010ba8:	8800759c 	.word	0x8800759c
 8010bac:	7e37e43c 	.word	0x7e37e43c
 8010bb0:	bff00000 	.word	0xbff00000
 8010bb4:	000fffff 	.word	0x000fffff

08010bb8 <__ieee754_pow>:
 8010bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bbc:	b091      	sub	sp, #68	@ 0x44
 8010bbe:	ed8d 1b00 	vstr	d1, [sp]
 8010bc2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010bc6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8010bca:	ea5a 0001 	orrs.w	r0, sl, r1
 8010bce:	ec57 6b10 	vmov	r6, r7, d0
 8010bd2:	d113      	bne.n	8010bfc <__ieee754_pow+0x44>
 8010bd4:	19b3      	adds	r3, r6, r6
 8010bd6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8010bda:	4152      	adcs	r2, r2
 8010bdc:	4298      	cmp	r0, r3
 8010bde:	4b98      	ldr	r3, [pc, #608]	@ (8010e40 <__ieee754_pow+0x288>)
 8010be0:	4193      	sbcs	r3, r2
 8010be2:	f080 84ea 	bcs.w	80115ba <__ieee754_pow+0xa02>
 8010be6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bea:	4630      	mov	r0, r6
 8010bec:	4639      	mov	r1, r7
 8010bee:	f7ef fb6d 	bl	80002cc <__adddf3>
 8010bf2:	ec41 0b10 	vmov	d0, r0, r1
 8010bf6:	b011      	add	sp, #68	@ 0x44
 8010bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfc:	4a91      	ldr	r2, [pc, #580]	@ (8010e44 <__ieee754_pow+0x28c>)
 8010bfe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010c02:	4590      	cmp	r8, r2
 8010c04:	463d      	mov	r5, r7
 8010c06:	4633      	mov	r3, r6
 8010c08:	d806      	bhi.n	8010c18 <__ieee754_pow+0x60>
 8010c0a:	d101      	bne.n	8010c10 <__ieee754_pow+0x58>
 8010c0c:	2e00      	cmp	r6, #0
 8010c0e:	d1ea      	bne.n	8010be6 <__ieee754_pow+0x2e>
 8010c10:	4592      	cmp	sl, r2
 8010c12:	d801      	bhi.n	8010c18 <__ieee754_pow+0x60>
 8010c14:	d10e      	bne.n	8010c34 <__ieee754_pow+0x7c>
 8010c16:	b169      	cbz	r1, 8010c34 <__ieee754_pow+0x7c>
 8010c18:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010c1c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010c20:	431d      	orrs	r5, r3
 8010c22:	d1e0      	bne.n	8010be6 <__ieee754_pow+0x2e>
 8010c24:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c28:	18db      	adds	r3, r3, r3
 8010c2a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010c2e:	4152      	adcs	r2, r2
 8010c30:	429d      	cmp	r5, r3
 8010c32:	e7d4      	b.n	8010bde <__ieee754_pow+0x26>
 8010c34:	2d00      	cmp	r5, #0
 8010c36:	46c3      	mov	fp, r8
 8010c38:	da3a      	bge.n	8010cb0 <__ieee754_pow+0xf8>
 8010c3a:	4a83      	ldr	r2, [pc, #524]	@ (8010e48 <__ieee754_pow+0x290>)
 8010c3c:	4592      	cmp	sl, r2
 8010c3e:	d84d      	bhi.n	8010cdc <__ieee754_pow+0x124>
 8010c40:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010c44:	4592      	cmp	sl, r2
 8010c46:	f240 84c7 	bls.w	80115d8 <__ieee754_pow+0xa20>
 8010c4a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010c4e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010c52:	2a14      	cmp	r2, #20
 8010c54:	dd0f      	ble.n	8010c76 <__ieee754_pow+0xbe>
 8010c56:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010c5a:	fa21 f402 	lsr.w	r4, r1, r2
 8010c5e:	fa04 f202 	lsl.w	r2, r4, r2
 8010c62:	428a      	cmp	r2, r1
 8010c64:	f040 84b8 	bne.w	80115d8 <__ieee754_pow+0xa20>
 8010c68:	f004 0401 	and.w	r4, r4, #1
 8010c6c:	f1c4 0402 	rsb	r4, r4, #2
 8010c70:	2900      	cmp	r1, #0
 8010c72:	d158      	bne.n	8010d26 <__ieee754_pow+0x16e>
 8010c74:	e00e      	b.n	8010c94 <__ieee754_pow+0xdc>
 8010c76:	2900      	cmp	r1, #0
 8010c78:	d154      	bne.n	8010d24 <__ieee754_pow+0x16c>
 8010c7a:	f1c2 0214 	rsb	r2, r2, #20
 8010c7e:	fa4a f402 	asr.w	r4, sl, r2
 8010c82:	fa04 f202 	lsl.w	r2, r4, r2
 8010c86:	4552      	cmp	r2, sl
 8010c88:	f040 84a3 	bne.w	80115d2 <__ieee754_pow+0xa1a>
 8010c8c:	f004 0401 	and.w	r4, r4, #1
 8010c90:	f1c4 0402 	rsb	r4, r4, #2
 8010c94:	4a6d      	ldr	r2, [pc, #436]	@ (8010e4c <__ieee754_pow+0x294>)
 8010c96:	4592      	cmp	sl, r2
 8010c98:	d12e      	bne.n	8010cf8 <__ieee754_pow+0x140>
 8010c9a:	f1b9 0f00 	cmp.w	r9, #0
 8010c9e:	f280 8494 	bge.w	80115ca <__ieee754_pow+0xa12>
 8010ca2:	496a      	ldr	r1, [pc, #424]	@ (8010e4c <__ieee754_pow+0x294>)
 8010ca4:	4632      	mov	r2, r6
 8010ca6:	463b      	mov	r3, r7
 8010ca8:	2000      	movs	r0, #0
 8010caa:	f7ef fdef 	bl	800088c <__aeabi_ddiv>
 8010cae:	e7a0      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010cb0:	2400      	movs	r4, #0
 8010cb2:	bbc1      	cbnz	r1, 8010d26 <__ieee754_pow+0x16e>
 8010cb4:	4a63      	ldr	r2, [pc, #396]	@ (8010e44 <__ieee754_pow+0x28c>)
 8010cb6:	4592      	cmp	sl, r2
 8010cb8:	d1ec      	bne.n	8010c94 <__ieee754_pow+0xdc>
 8010cba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8010cbe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010cc2:	431a      	orrs	r2, r3
 8010cc4:	f000 8479 	beq.w	80115ba <__ieee754_pow+0xa02>
 8010cc8:	4b61      	ldr	r3, [pc, #388]	@ (8010e50 <__ieee754_pow+0x298>)
 8010cca:	4598      	cmp	r8, r3
 8010ccc:	d908      	bls.n	8010ce0 <__ieee754_pow+0x128>
 8010cce:	f1b9 0f00 	cmp.w	r9, #0
 8010cd2:	f2c0 8476 	blt.w	80115c2 <__ieee754_pow+0xa0a>
 8010cd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010cda:	e78a      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010cdc:	2402      	movs	r4, #2
 8010cde:	e7e8      	b.n	8010cb2 <__ieee754_pow+0xfa>
 8010ce0:	f1b9 0f00 	cmp.w	r9, #0
 8010ce4:	f04f 0000 	mov.w	r0, #0
 8010ce8:	f04f 0100 	mov.w	r1, #0
 8010cec:	da81      	bge.n	8010bf2 <__ieee754_pow+0x3a>
 8010cee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010cf2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010cf6:	e77c      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010cf8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010cfc:	d106      	bne.n	8010d0c <__ieee754_pow+0x154>
 8010cfe:	4632      	mov	r2, r6
 8010d00:	463b      	mov	r3, r7
 8010d02:	4630      	mov	r0, r6
 8010d04:	4639      	mov	r1, r7
 8010d06:	f7ef fc97 	bl	8000638 <__aeabi_dmul>
 8010d0a:	e772      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010d0c:	4a51      	ldr	r2, [pc, #324]	@ (8010e54 <__ieee754_pow+0x29c>)
 8010d0e:	4591      	cmp	r9, r2
 8010d10:	d109      	bne.n	8010d26 <__ieee754_pow+0x16e>
 8010d12:	2d00      	cmp	r5, #0
 8010d14:	db07      	blt.n	8010d26 <__ieee754_pow+0x16e>
 8010d16:	ec47 6b10 	vmov	d0, r6, r7
 8010d1a:	b011      	add	sp, #68	@ 0x44
 8010d1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	f7ff bdee 	b.w	8010900 <__ieee754_sqrt>
 8010d24:	2400      	movs	r4, #0
 8010d26:	ec47 6b10 	vmov	d0, r6, r7
 8010d2a:	9302      	str	r3, [sp, #8]
 8010d2c:	f000 fc88 	bl	8011640 <fabs>
 8010d30:	9b02      	ldr	r3, [sp, #8]
 8010d32:	ec51 0b10 	vmov	r0, r1, d0
 8010d36:	bb53      	cbnz	r3, 8010d8e <__ieee754_pow+0x1d6>
 8010d38:	4b44      	ldr	r3, [pc, #272]	@ (8010e4c <__ieee754_pow+0x294>)
 8010d3a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	d002      	beq.n	8010d48 <__ieee754_pow+0x190>
 8010d42:	f1b8 0f00 	cmp.w	r8, #0
 8010d46:	d122      	bne.n	8010d8e <__ieee754_pow+0x1d6>
 8010d48:	f1b9 0f00 	cmp.w	r9, #0
 8010d4c:	da05      	bge.n	8010d5a <__ieee754_pow+0x1a2>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	460b      	mov	r3, r1
 8010d52:	2000      	movs	r0, #0
 8010d54:	493d      	ldr	r1, [pc, #244]	@ (8010e4c <__ieee754_pow+0x294>)
 8010d56:	f7ef fd99 	bl	800088c <__aeabi_ddiv>
 8010d5a:	2d00      	cmp	r5, #0
 8010d5c:	f6bf af49 	bge.w	8010bf2 <__ieee754_pow+0x3a>
 8010d60:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010d64:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010d68:	ea58 0804 	orrs.w	r8, r8, r4
 8010d6c:	d108      	bne.n	8010d80 <__ieee754_pow+0x1c8>
 8010d6e:	4602      	mov	r2, r0
 8010d70:	460b      	mov	r3, r1
 8010d72:	4610      	mov	r0, r2
 8010d74:	4619      	mov	r1, r3
 8010d76:	f7ef faa7 	bl	80002c8 <__aeabi_dsub>
 8010d7a:	4602      	mov	r2, r0
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	e794      	b.n	8010caa <__ieee754_pow+0xf2>
 8010d80:	2c01      	cmp	r4, #1
 8010d82:	f47f af36 	bne.w	8010bf2 <__ieee754_pow+0x3a>
 8010d86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	e731      	b.n	8010bf2 <__ieee754_pow+0x3a>
 8010d8e:	0feb      	lsrs	r3, r5, #31
 8010d90:	3b01      	subs	r3, #1
 8010d92:	ea53 0204 	orrs.w	r2, r3, r4
 8010d96:	d102      	bne.n	8010d9e <__ieee754_pow+0x1e6>
 8010d98:	4632      	mov	r2, r6
 8010d9a:	463b      	mov	r3, r7
 8010d9c:	e7e9      	b.n	8010d72 <__ieee754_pow+0x1ba>
 8010d9e:	3c01      	subs	r4, #1
 8010da0:	431c      	orrs	r4, r3
 8010da2:	d016      	beq.n	8010dd2 <__ieee754_pow+0x21a>
 8010da4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010e30 <__ieee754_pow+0x278>
 8010da8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010dac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010db0:	f240 8112 	bls.w	8010fd8 <__ieee754_pow+0x420>
 8010db4:	4b28      	ldr	r3, [pc, #160]	@ (8010e58 <__ieee754_pow+0x2a0>)
 8010db6:	459a      	cmp	sl, r3
 8010db8:	4b25      	ldr	r3, [pc, #148]	@ (8010e50 <__ieee754_pow+0x298>)
 8010dba:	d916      	bls.n	8010dea <__ieee754_pow+0x232>
 8010dbc:	4598      	cmp	r8, r3
 8010dbe:	d80b      	bhi.n	8010dd8 <__ieee754_pow+0x220>
 8010dc0:	f1b9 0f00 	cmp.w	r9, #0
 8010dc4:	da0b      	bge.n	8010dde <__ieee754_pow+0x226>
 8010dc6:	2000      	movs	r0, #0
 8010dc8:	b011      	add	sp, #68	@ 0x44
 8010dca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dce:	f001 b847 	b.w	8011e60 <__math_oflow>
 8010dd2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010e38 <__ieee754_pow+0x280>
 8010dd6:	e7e7      	b.n	8010da8 <__ieee754_pow+0x1f0>
 8010dd8:	f1b9 0f00 	cmp.w	r9, #0
 8010ddc:	dcf3      	bgt.n	8010dc6 <__ieee754_pow+0x20e>
 8010dde:	2000      	movs	r0, #0
 8010de0:	b011      	add	sp, #68	@ 0x44
 8010de2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de6:	f001 b833 	b.w	8011e50 <__math_uflow>
 8010dea:	4598      	cmp	r8, r3
 8010dec:	d20c      	bcs.n	8010e08 <__ieee754_pow+0x250>
 8010dee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010df2:	2200      	movs	r2, #0
 8010df4:	2300      	movs	r3, #0
 8010df6:	f7ef fe91 	bl	8000b1c <__aeabi_dcmplt>
 8010dfa:	3800      	subs	r0, #0
 8010dfc:	bf18      	it	ne
 8010dfe:	2001      	movne	r0, #1
 8010e00:	f1b9 0f00 	cmp.w	r9, #0
 8010e04:	daec      	bge.n	8010de0 <__ieee754_pow+0x228>
 8010e06:	e7df      	b.n	8010dc8 <__ieee754_pow+0x210>
 8010e08:	4b10      	ldr	r3, [pc, #64]	@ (8010e4c <__ieee754_pow+0x294>)
 8010e0a:	4598      	cmp	r8, r3
 8010e0c:	f04f 0200 	mov.w	r2, #0
 8010e10:	d924      	bls.n	8010e5c <__ieee754_pow+0x2a4>
 8010e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e16:	2300      	movs	r3, #0
 8010e18:	f7ef fe80 	bl	8000b1c <__aeabi_dcmplt>
 8010e1c:	3800      	subs	r0, #0
 8010e1e:	bf18      	it	ne
 8010e20:	2001      	movne	r0, #1
 8010e22:	f1b9 0f00 	cmp.w	r9, #0
 8010e26:	dccf      	bgt.n	8010dc8 <__ieee754_pow+0x210>
 8010e28:	e7da      	b.n	8010de0 <__ieee754_pow+0x228>
 8010e2a:	bf00      	nop
 8010e2c:	f3af 8000 	nop.w
 8010e30:	00000000 	.word	0x00000000
 8010e34:	3ff00000 	.word	0x3ff00000
 8010e38:	00000000 	.word	0x00000000
 8010e3c:	bff00000 	.word	0xbff00000
 8010e40:	fff00000 	.word	0xfff00000
 8010e44:	7ff00000 	.word	0x7ff00000
 8010e48:	433fffff 	.word	0x433fffff
 8010e4c:	3ff00000 	.word	0x3ff00000
 8010e50:	3fefffff 	.word	0x3fefffff
 8010e54:	3fe00000 	.word	0x3fe00000
 8010e58:	43f00000 	.word	0x43f00000
 8010e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8010fc8 <__ieee754_pow+0x410>)
 8010e5e:	f7ef fa33 	bl	80002c8 <__aeabi_dsub>
 8010e62:	a351      	add	r3, pc, #324	@ (adr r3, 8010fa8 <__ieee754_pow+0x3f0>)
 8010e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e68:	4604      	mov	r4, r0
 8010e6a:	460d      	mov	r5, r1
 8010e6c:	f7ef fbe4 	bl	8000638 <__aeabi_dmul>
 8010e70:	a34f      	add	r3, pc, #316	@ (adr r3, 8010fb0 <__ieee754_pow+0x3f8>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	4606      	mov	r6, r0
 8010e78:	460f      	mov	r7, r1
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	4629      	mov	r1, r5
 8010e7e:	f7ef fbdb 	bl	8000638 <__aeabi_dmul>
 8010e82:	4b52      	ldr	r3, [pc, #328]	@ (8010fcc <__ieee754_pow+0x414>)
 8010e84:	4682      	mov	sl, r0
 8010e86:	468b      	mov	fp, r1
 8010e88:	2200      	movs	r2, #0
 8010e8a:	4620      	mov	r0, r4
 8010e8c:	4629      	mov	r1, r5
 8010e8e:	f7ef fbd3 	bl	8000638 <__aeabi_dmul>
 8010e92:	4602      	mov	r2, r0
 8010e94:	460b      	mov	r3, r1
 8010e96:	a148      	add	r1, pc, #288	@ (adr r1, 8010fb8 <__ieee754_pow+0x400>)
 8010e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e9c:	f7ef fa14 	bl	80002c8 <__aeabi_dsub>
 8010ea0:	4622      	mov	r2, r4
 8010ea2:	462b      	mov	r3, r5
 8010ea4:	f7ef fbc8 	bl	8000638 <__aeabi_dmul>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	460b      	mov	r3, r1
 8010eac:	2000      	movs	r0, #0
 8010eae:	4948      	ldr	r1, [pc, #288]	@ (8010fd0 <__ieee754_pow+0x418>)
 8010eb0:	f7ef fa0a 	bl	80002c8 <__aeabi_dsub>
 8010eb4:	4622      	mov	r2, r4
 8010eb6:	4680      	mov	r8, r0
 8010eb8:	4689      	mov	r9, r1
 8010eba:	462b      	mov	r3, r5
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	4629      	mov	r1, r5
 8010ec0:	f7ef fbba 	bl	8000638 <__aeabi_dmul>
 8010ec4:	4602      	mov	r2, r0
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	4640      	mov	r0, r8
 8010eca:	4649      	mov	r1, r9
 8010ecc:	f7ef fbb4 	bl	8000638 <__aeabi_dmul>
 8010ed0:	a33b      	add	r3, pc, #236	@ (adr r3, 8010fc0 <__ieee754_pow+0x408>)
 8010ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ed6:	f7ef fbaf 	bl	8000638 <__aeabi_dmul>
 8010eda:	4602      	mov	r2, r0
 8010edc:	460b      	mov	r3, r1
 8010ede:	4650      	mov	r0, sl
 8010ee0:	4659      	mov	r1, fp
 8010ee2:	f7ef f9f1 	bl	80002c8 <__aeabi_dsub>
 8010ee6:	4602      	mov	r2, r0
 8010ee8:	460b      	mov	r3, r1
 8010eea:	4680      	mov	r8, r0
 8010eec:	4689      	mov	r9, r1
 8010eee:	4630      	mov	r0, r6
 8010ef0:	4639      	mov	r1, r7
 8010ef2:	f7ef f9eb 	bl	80002cc <__adddf3>
 8010ef6:	2400      	movs	r4, #0
 8010ef8:	4632      	mov	r2, r6
 8010efa:	463b      	mov	r3, r7
 8010efc:	4620      	mov	r0, r4
 8010efe:	460d      	mov	r5, r1
 8010f00:	f7ef f9e2 	bl	80002c8 <__aeabi_dsub>
 8010f04:	4602      	mov	r2, r0
 8010f06:	460b      	mov	r3, r1
 8010f08:	4640      	mov	r0, r8
 8010f0a:	4649      	mov	r1, r9
 8010f0c:	f7ef f9dc 	bl	80002c8 <__aeabi_dsub>
 8010f10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010f18:	2300      	movs	r3, #0
 8010f1a:	9304      	str	r3, [sp, #16]
 8010f1c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010f20:	4606      	mov	r6, r0
 8010f22:	460f      	mov	r7, r1
 8010f24:	4652      	mov	r2, sl
 8010f26:	465b      	mov	r3, fp
 8010f28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010f2c:	f7ef f9cc 	bl	80002c8 <__aeabi_dsub>
 8010f30:	4622      	mov	r2, r4
 8010f32:	462b      	mov	r3, r5
 8010f34:	f7ef fb80 	bl	8000638 <__aeabi_dmul>
 8010f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f3c:	4680      	mov	r8, r0
 8010f3e:	4689      	mov	r9, r1
 8010f40:	4630      	mov	r0, r6
 8010f42:	4639      	mov	r1, r7
 8010f44:	f7ef fb78 	bl	8000638 <__aeabi_dmul>
 8010f48:	4602      	mov	r2, r0
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	4640      	mov	r0, r8
 8010f4e:	4649      	mov	r1, r9
 8010f50:	f7ef f9bc 	bl	80002cc <__adddf3>
 8010f54:	4652      	mov	r2, sl
 8010f56:	465b      	mov	r3, fp
 8010f58:	4606      	mov	r6, r0
 8010f5a:	460f      	mov	r7, r1
 8010f5c:	4620      	mov	r0, r4
 8010f5e:	4629      	mov	r1, r5
 8010f60:	f7ef fb6a 	bl	8000638 <__aeabi_dmul>
 8010f64:	460b      	mov	r3, r1
 8010f66:	4602      	mov	r2, r0
 8010f68:	4680      	mov	r8, r0
 8010f6a:	4689      	mov	r9, r1
 8010f6c:	4630      	mov	r0, r6
 8010f6e:	4639      	mov	r1, r7
 8010f70:	f7ef f9ac 	bl	80002cc <__adddf3>
 8010f74:	4b17      	ldr	r3, [pc, #92]	@ (8010fd4 <__ieee754_pow+0x41c>)
 8010f76:	4299      	cmp	r1, r3
 8010f78:	4604      	mov	r4, r0
 8010f7a:	460d      	mov	r5, r1
 8010f7c:	468a      	mov	sl, r1
 8010f7e:	468b      	mov	fp, r1
 8010f80:	f340 82ef 	ble.w	8011562 <__ieee754_pow+0x9aa>
 8010f84:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8010f88:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8010f8c:	4303      	orrs	r3, r0
 8010f8e:	f000 81e8 	beq.w	8011362 <__ieee754_pow+0x7aa>
 8010f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f96:	2200      	movs	r2, #0
 8010f98:	2300      	movs	r3, #0
 8010f9a:	f7ef fdbf 	bl	8000b1c <__aeabi_dcmplt>
 8010f9e:	3800      	subs	r0, #0
 8010fa0:	bf18      	it	ne
 8010fa2:	2001      	movne	r0, #1
 8010fa4:	e710      	b.n	8010dc8 <__ieee754_pow+0x210>
 8010fa6:	bf00      	nop
 8010fa8:	60000000 	.word	0x60000000
 8010fac:	3ff71547 	.word	0x3ff71547
 8010fb0:	f85ddf44 	.word	0xf85ddf44
 8010fb4:	3e54ae0b 	.word	0x3e54ae0b
 8010fb8:	55555555 	.word	0x55555555
 8010fbc:	3fd55555 	.word	0x3fd55555
 8010fc0:	652b82fe 	.word	0x652b82fe
 8010fc4:	3ff71547 	.word	0x3ff71547
 8010fc8:	3ff00000 	.word	0x3ff00000
 8010fcc:	3fd00000 	.word	0x3fd00000
 8010fd0:	3fe00000 	.word	0x3fe00000
 8010fd4:	408fffff 	.word	0x408fffff
 8010fd8:	4bd5      	ldr	r3, [pc, #852]	@ (8011330 <__ieee754_pow+0x778>)
 8010fda:	402b      	ands	r3, r5
 8010fdc:	2200      	movs	r2, #0
 8010fde:	b92b      	cbnz	r3, 8010fec <__ieee754_pow+0x434>
 8010fe0:	4bd4      	ldr	r3, [pc, #848]	@ (8011334 <__ieee754_pow+0x77c>)
 8010fe2:	f7ef fb29 	bl	8000638 <__aeabi_dmul>
 8010fe6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8010fea:	468b      	mov	fp, r1
 8010fec:	ea4f 532b 	mov.w	r3, fp, asr #20
 8010ff0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010ff4:	4413      	add	r3, r2
 8010ff6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ff8:	4bcf      	ldr	r3, [pc, #828]	@ (8011338 <__ieee754_pow+0x780>)
 8010ffa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8010ffe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8011002:	459b      	cmp	fp, r3
 8011004:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011008:	dd08      	ble.n	801101c <__ieee754_pow+0x464>
 801100a:	4bcc      	ldr	r3, [pc, #816]	@ (801133c <__ieee754_pow+0x784>)
 801100c:	459b      	cmp	fp, r3
 801100e:	f340 81a5 	ble.w	801135c <__ieee754_pow+0x7a4>
 8011012:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011014:	3301      	adds	r3, #1
 8011016:	930a      	str	r3, [sp, #40]	@ 0x28
 8011018:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801101c:	f04f 0a00 	mov.w	sl, #0
 8011020:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8011024:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011026:	4bc6      	ldr	r3, [pc, #792]	@ (8011340 <__ieee754_pow+0x788>)
 8011028:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801102c:	ed93 7b00 	vldr	d7, [r3]
 8011030:	4629      	mov	r1, r5
 8011032:	ec53 2b17 	vmov	r2, r3, d7
 8011036:	ed8d 7b06 	vstr	d7, [sp, #24]
 801103a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801103e:	f7ef f943 	bl	80002c8 <__aeabi_dsub>
 8011042:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011046:	4606      	mov	r6, r0
 8011048:	460f      	mov	r7, r1
 801104a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801104e:	f7ef f93d 	bl	80002cc <__adddf3>
 8011052:	4602      	mov	r2, r0
 8011054:	460b      	mov	r3, r1
 8011056:	2000      	movs	r0, #0
 8011058:	49ba      	ldr	r1, [pc, #744]	@ (8011344 <__ieee754_pow+0x78c>)
 801105a:	f7ef fc17 	bl	800088c <__aeabi_ddiv>
 801105e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8011062:	4602      	mov	r2, r0
 8011064:	460b      	mov	r3, r1
 8011066:	4630      	mov	r0, r6
 8011068:	4639      	mov	r1, r7
 801106a:	f7ef fae5 	bl	8000638 <__aeabi_dmul>
 801106e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011072:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8011076:	106d      	asrs	r5, r5, #1
 8011078:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801107c:	f04f 0b00 	mov.w	fp, #0
 8011080:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8011084:	4661      	mov	r1, ip
 8011086:	2200      	movs	r2, #0
 8011088:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801108c:	4658      	mov	r0, fp
 801108e:	46e1      	mov	r9, ip
 8011090:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8011094:	4614      	mov	r4, r2
 8011096:	461d      	mov	r5, r3
 8011098:	f7ef face 	bl	8000638 <__aeabi_dmul>
 801109c:	4602      	mov	r2, r0
 801109e:	460b      	mov	r3, r1
 80110a0:	4630      	mov	r0, r6
 80110a2:	4639      	mov	r1, r7
 80110a4:	f7ef f910 	bl	80002c8 <__aeabi_dsub>
 80110a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80110ac:	4606      	mov	r6, r0
 80110ae:	460f      	mov	r7, r1
 80110b0:	4620      	mov	r0, r4
 80110b2:	4629      	mov	r1, r5
 80110b4:	f7ef f908 	bl	80002c8 <__aeabi_dsub>
 80110b8:	4602      	mov	r2, r0
 80110ba:	460b      	mov	r3, r1
 80110bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80110c0:	f7ef f902 	bl	80002c8 <__aeabi_dsub>
 80110c4:	465a      	mov	r2, fp
 80110c6:	464b      	mov	r3, r9
 80110c8:	f7ef fab6 	bl	8000638 <__aeabi_dmul>
 80110cc:	4602      	mov	r2, r0
 80110ce:	460b      	mov	r3, r1
 80110d0:	4630      	mov	r0, r6
 80110d2:	4639      	mov	r1, r7
 80110d4:	f7ef f8f8 	bl	80002c8 <__aeabi_dsub>
 80110d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80110dc:	f7ef faac 	bl	8000638 <__aeabi_dmul>
 80110e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80110e8:	4610      	mov	r0, r2
 80110ea:	4619      	mov	r1, r3
 80110ec:	f7ef faa4 	bl	8000638 <__aeabi_dmul>
 80110f0:	a37d      	add	r3, pc, #500	@ (adr r3, 80112e8 <__ieee754_pow+0x730>)
 80110f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110f6:	4604      	mov	r4, r0
 80110f8:	460d      	mov	r5, r1
 80110fa:	f7ef fa9d 	bl	8000638 <__aeabi_dmul>
 80110fe:	a37c      	add	r3, pc, #496	@ (adr r3, 80112f0 <__ieee754_pow+0x738>)
 8011100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011104:	f7ef f8e2 	bl	80002cc <__adddf3>
 8011108:	4622      	mov	r2, r4
 801110a:	462b      	mov	r3, r5
 801110c:	f7ef fa94 	bl	8000638 <__aeabi_dmul>
 8011110:	a379      	add	r3, pc, #484	@ (adr r3, 80112f8 <__ieee754_pow+0x740>)
 8011112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011116:	f7ef f8d9 	bl	80002cc <__adddf3>
 801111a:	4622      	mov	r2, r4
 801111c:	462b      	mov	r3, r5
 801111e:	f7ef fa8b 	bl	8000638 <__aeabi_dmul>
 8011122:	a377      	add	r3, pc, #476	@ (adr r3, 8011300 <__ieee754_pow+0x748>)
 8011124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011128:	f7ef f8d0 	bl	80002cc <__adddf3>
 801112c:	4622      	mov	r2, r4
 801112e:	462b      	mov	r3, r5
 8011130:	f7ef fa82 	bl	8000638 <__aeabi_dmul>
 8011134:	a374      	add	r3, pc, #464	@ (adr r3, 8011308 <__ieee754_pow+0x750>)
 8011136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801113a:	f7ef f8c7 	bl	80002cc <__adddf3>
 801113e:	4622      	mov	r2, r4
 8011140:	462b      	mov	r3, r5
 8011142:	f7ef fa79 	bl	8000638 <__aeabi_dmul>
 8011146:	a372      	add	r3, pc, #456	@ (adr r3, 8011310 <__ieee754_pow+0x758>)
 8011148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114c:	f7ef f8be 	bl	80002cc <__adddf3>
 8011150:	4622      	mov	r2, r4
 8011152:	4606      	mov	r6, r0
 8011154:	460f      	mov	r7, r1
 8011156:	462b      	mov	r3, r5
 8011158:	4620      	mov	r0, r4
 801115a:	4629      	mov	r1, r5
 801115c:	f7ef fa6c 	bl	8000638 <__aeabi_dmul>
 8011160:	4602      	mov	r2, r0
 8011162:	460b      	mov	r3, r1
 8011164:	4630      	mov	r0, r6
 8011166:	4639      	mov	r1, r7
 8011168:	f7ef fa66 	bl	8000638 <__aeabi_dmul>
 801116c:	465a      	mov	r2, fp
 801116e:	4604      	mov	r4, r0
 8011170:	460d      	mov	r5, r1
 8011172:	464b      	mov	r3, r9
 8011174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011178:	f7ef f8a8 	bl	80002cc <__adddf3>
 801117c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011180:	f7ef fa5a 	bl	8000638 <__aeabi_dmul>
 8011184:	4622      	mov	r2, r4
 8011186:	462b      	mov	r3, r5
 8011188:	f7ef f8a0 	bl	80002cc <__adddf3>
 801118c:	465a      	mov	r2, fp
 801118e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011192:	464b      	mov	r3, r9
 8011194:	4658      	mov	r0, fp
 8011196:	4649      	mov	r1, r9
 8011198:	f7ef fa4e 	bl	8000638 <__aeabi_dmul>
 801119c:	4b6a      	ldr	r3, [pc, #424]	@ (8011348 <__ieee754_pow+0x790>)
 801119e:	2200      	movs	r2, #0
 80111a0:	4606      	mov	r6, r0
 80111a2:	460f      	mov	r7, r1
 80111a4:	f7ef f892 	bl	80002cc <__adddf3>
 80111a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80111ac:	f7ef f88e 	bl	80002cc <__adddf3>
 80111b0:	46d8      	mov	r8, fp
 80111b2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80111b6:	460d      	mov	r5, r1
 80111b8:	465a      	mov	r2, fp
 80111ba:	460b      	mov	r3, r1
 80111bc:	4640      	mov	r0, r8
 80111be:	4649      	mov	r1, r9
 80111c0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80111c4:	f7ef fa38 	bl	8000638 <__aeabi_dmul>
 80111c8:	465c      	mov	r4, fp
 80111ca:	4680      	mov	r8, r0
 80111cc:	4689      	mov	r9, r1
 80111ce:	4b5e      	ldr	r3, [pc, #376]	@ (8011348 <__ieee754_pow+0x790>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	4620      	mov	r0, r4
 80111d4:	4629      	mov	r1, r5
 80111d6:	f7ef f877 	bl	80002c8 <__aeabi_dsub>
 80111da:	4632      	mov	r2, r6
 80111dc:	463b      	mov	r3, r7
 80111de:	f7ef f873 	bl	80002c8 <__aeabi_dsub>
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80111ea:	f7ef f86d 	bl	80002c8 <__aeabi_dsub>
 80111ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111f2:	f7ef fa21 	bl	8000638 <__aeabi_dmul>
 80111f6:	4622      	mov	r2, r4
 80111f8:	4606      	mov	r6, r0
 80111fa:	460f      	mov	r7, r1
 80111fc:	462b      	mov	r3, r5
 80111fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011202:	f7ef fa19 	bl	8000638 <__aeabi_dmul>
 8011206:	4602      	mov	r2, r0
 8011208:	460b      	mov	r3, r1
 801120a:	4630      	mov	r0, r6
 801120c:	4639      	mov	r1, r7
 801120e:	f7ef f85d 	bl	80002cc <__adddf3>
 8011212:	4606      	mov	r6, r0
 8011214:	460f      	mov	r7, r1
 8011216:	4602      	mov	r2, r0
 8011218:	460b      	mov	r3, r1
 801121a:	4640      	mov	r0, r8
 801121c:	4649      	mov	r1, r9
 801121e:	f7ef f855 	bl	80002cc <__adddf3>
 8011222:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8011226:	a33c      	add	r3, pc, #240	@ (adr r3, 8011318 <__ieee754_pow+0x760>)
 8011228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122c:	4658      	mov	r0, fp
 801122e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8011232:	460d      	mov	r5, r1
 8011234:	f7ef fa00 	bl	8000638 <__aeabi_dmul>
 8011238:	465c      	mov	r4, fp
 801123a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801123e:	4642      	mov	r2, r8
 8011240:	464b      	mov	r3, r9
 8011242:	4620      	mov	r0, r4
 8011244:	4629      	mov	r1, r5
 8011246:	f7ef f83f 	bl	80002c8 <__aeabi_dsub>
 801124a:	4602      	mov	r2, r0
 801124c:	460b      	mov	r3, r1
 801124e:	4630      	mov	r0, r6
 8011250:	4639      	mov	r1, r7
 8011252:	f7ef f839 	bl	80002c8 <__aeabi_dsub>
 8011256:	a332      	add	r3, pc, #200	@ (adr r3, 8011320 <__ieee754_pow+0x768>)
 8011258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125c:	f7ef f9ec 	bl	8000638 <__aeabi_dmul>
 8011260:	a331      	add	r3, pc, #196	@ (adr r3, 8011328 <__ieee754_pow+0x770>)
 8011262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011266:	4606      	mov	r6, r0
 8011268:	460f      	mov	r7, r1
 801126a:	4620      	mov	r0, r4
 801126c:	4629      	mov	r1, r5
 801126e:	f7ef f9e3 	bl	8000638 <__aeabi_dmul>
 8011272:	4602      	mov	r2, r0
 8011274:	460b      	mov	r3, r1
 8011276:	4630      	mov	r0, r6
 8011278:	4639      	mov	r1, r7
 801127a:	f7ef f827 	bl	80002cc <__adddf3>
 801127e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011280:	4b32      	ldr	r3, [pc, #200]	@ (801134c <__ieee754_pow+0x794>)
 8011282:	4413      	add	r3, r2
 8011284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011288:	f7ef f820 	bl	80002cc <__adddf3>
 801128c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011290:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011292:	f7ef f967 	bl	8000564 <__aeabi_i2d>
 8011296:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011298:	4b2d      	ldr	r3, [pc, #180]	@ (8011350 <__ieee754_pow+0x798>)
 801129a:	4413      	add	r3, r2
 801129c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80112a0:	4606      	mov	r6, r0
 80112a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80112a6:	460f      	mov	r7, r1
 80112a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80112ac:	f7ef f80e 	bl	80002cc <__adddf3>
 80112b0:	4642      	mov	r2, r8
 80112b2:	464b      	mov	r3, r9
 80112b4:	f7ef f80a 	bl	80002cc <__adddf3>
 80112b8:	4632      	mov	r2, r6
 80112ba:	463b      	mov	r3, r7
 80112bc:	f7ef f806 	bl	80002cc <__adddf3>
 80112c0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80112c4:	4632      	mov	r2, r6
 80112c6:	463b      	mov	r3, r7
 80112c8:	4658      	mov	r0, fp
 80112ca:	460d      	mov	r5, r1
 80112cc:	f7ee fffc 	bl	80002c8 <__aeabi_dsub>
 80112d0:	4642      	mov	r2, r8
 80112d2:	464b      	mov	r3, r9
 80112d4:	f7ee fff8 	bl	80002c8 <__aeabi_dsub>
 80112d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112dc:	f7ee fff4 	bl	80002c8 <__aeabi_dsub>
 80112e0:	465c      	mov	r4, fp
 80112e2:	4602      	mov	r2, r0
 80112e4:	e036      	b.n	8011354 <__ieee754_pow+0x79c>
 80112e6:	bf00      	nop
 80112e8:	4a454eef 	.word	0x4a454eef
 80112ec:	3fca7e28 	.word	0x3fca7e28
 80112f0:	93c9db65 	.word	0x93c9db65
 80112f4:	3fcd864a 	.word	0x3fcd864a
 80112f8:	a91d4101 	.word	0xa91d4101
 80112fc:	3fd17460 	.word	0x3fd17460
 8011300:	518f264d 	.word	0x518f264d
 8011304:	3fd55555 	.word	0x3fd55555
 8011308:	db6fabff 	.word	0xdb6fabff
 801130c:	3fdb6db6 	.word	0x3fdb6db6
 8011310:	33333303 	.word	0x33333303
 8011314:	3fe33333 	.word	0x3fe33333
 8011318:	e0000000 	.word	0xe0000000
 801131c:	3feec709 	.word	0x3feec709
 8011320:	dc3a03fd 	.word	0xdc3a03fd
 8011324:	3feec709 	.word	0x3feec709
 8011328:	145b01f5 	.word	0x145b01f5
 801132c:	be3e2fe0 	.word	0xbe3e2fe0
 8011330:	7ff00000 	.word	0x7ff00000
 8011334:	43400000 	.word	0x43400000
 8011338:	0003988e 	.word	0x0003988e
 801133c:	000bb679 	.word	0x000bb679
 8011340:	08012498 	.word	0x08012498
 8011344:	3ff00000 	.word	0x3ff00000
 8011348:	40080000 	.word	0x40080000
 801134c:	08012478 	.word	0x08012478
 8011350:	08012488 	.word	0x08012488
 8011354:	460b      	mov	r3, r1
 8011356:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801135a:	e5d7      	b.n	8010f0c <__ieee754_pow+0x354>
 801135c:	f04f 0a01 	mov.w	sl, #1
 8011360:	e65e      	b.n	8011020 <__ieee754_pow+0x468>
 8011362:	a3b4      	add	r3, pc, #720	@ (adr r3, 8011634 <__ieee754_pow+0xa7c>)
 8011364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011368:	4630      	mov	r0, r6
 801136a:	4639      	mov	r1, r7
 801136c:	f7ee ffae 	bl	80002cc <__adddf3>
 8011370:	4642      	mov	r2, r8
 8011372:	e9cd 0100 	strd	r0, r1, [sp]
 8011376:	464b      	mov	r3, r9
 8011378:	4620      	mov	r0, r4
 801137a:	4629      	mov	r1, r5
 801137c:	f7ee ffa4 	bl	80002c8 <__aeabi_dsub>
 8011380:	4602      	mov	r2, r0
 8011382:	460b      	mov	r3, r1
 8011384:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011388:	f7ef fbe6 	bl	8000b58 <__aeabi_dcmpgt>
 801138c:	2800      	cmp	r0, #0
 801138e:	f47f ae00 	bne.w	8010f92 <__ieee754_pow+0x3da>
 8011392:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8011396:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801139a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801139e:	fa43 fa0a 	asr.w	sl, r3, sl
 80113a2:	44da      	add	sl, fp
 80113a4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80113a8:	489d      	ldr	r0, [pc, #628]	@ (8011620 <__ieee754_pow+0xa68>)
 80113aa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80113ae:	4108      	asrs	r0, r1
 80113b0:	ea00 030a 	and.w	r3, r0, sl
 80113b4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80113b8:	f1c1 0114 	rsb	r1, r1, #20
 80113bc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80113c0:	fa4a fa01 	asr.w	sl, sl, r1
 80113c4:	f1bb 0f00 	cmp.w	fp, #0
 80113c8:	4640      	mov	r0, r8
 80113ca:	4649      	mov	r1, r9
 80113cc:	f04f 0200 	mov.w	r2, #0
 80113d0:	bfb8      	it	lt
 80113d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80113d6:	f7ee ff77 	bl	80002c8 <__aeabi_dsub>
 80113da:	4680      	mov	r8, r0
 80113dc:	4689      	mov	r9, r1
 80113de:	4632      	mov	r2, r6
 80113e0:	463b      	mov	r3, r7
 80113e2:	4640      	mov	r0, r8
 80113e4:	4649      	mov	r1, r9
 80113e6:	f7ee ff71 	bl	80002cc <__adddf3>
 80113ea:	2400      	movs	r4, #0
 80113ec:	a37c      	add	r3, pc, #496	@ (adr r3, 80115e0 <__ieee754_pow+0xa28>)
 80113ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f2:	4620      	mov	r0, r4
 80113f4:	460d      	mov	r5, r1
 80113f6:	f7ef f91f 	bl	8000638 <__aeabi_dmul>
 80113fa:	4642      	mov	r2, r8
 80113fc:	e9cd 0100 	strd	r0, r1, [sp]
 8011400:	464b      	mov	r3, r9
 8011402:	4620      	mov	r0, r4
 8011404:	4629      	mov	r1, r5
 8011406:	f7ee ff5f 	bl	80002c8 <__aeabi_dsub>
 801140a:	4602      	mov	r2, r0
 801140c:	460b      	mov	r3, r1
 801140e:	4630      	mov	r0, r6
 8011410:	4639      	mov	r1, r7
 8011412:	f7ee ff59 	bl	80002c8 <__aeabi_dsub>
 8011416:	a374      	add	r3, pc, #464	@ (adr r3, 80115e8 <__ieee754_pow+0xa30>)
 8011418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141c:	f7ef f90c 	bl	8000638 <__aeabi_dmul>
 8011420:	a373      	add	r3, pc, #460	@ (adr r3, 80115f0 <__ieee754_pow+0xa38>)
 8011422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011426:	4680      	mov	r8, r0
 8011428:	4689      	mov	r9, r1
 801142a:	4620      	mov	r0, r4
 801142c:	4629      	mov	r1, r5
 801142e:	f7ef f903 	bl	8000638 <__aeabi_dmul>
 8011432:	4602      	mov	r2, r0
 8011434:	460b      	mov	r3, r1
 8011436:	4640      	mov	r0, r8
 8011438:	4649      	mov	r1, r9
 801143a:	f7ee ff47 	bl	80002cc <__adddf3>
 801143e:	4604      	mov	r4, r0
 8011440:	460d      	mov	r5, r1
 8011442:	4602      	mov	r2, r0
 8011444:	460b      	mov	r3, r1
 8011446:	e9dd 0100 	ldrd	r0, r1, [sp]
 801144a:	f7ee ff3f 	bl	80002cc <__adddf3>
 801144e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011452:	4680      	mov	r8, r0
 8011454:	4689      	mov	r9, r1
 8011456:	f7ee ff37 	bl	80002c8 <__aeabi_dsub>
 801145a:	4602      	mov	r2, r0
 801145c:	460b      	mov	r3, r1
 801145e:	4620      	mov	r0, r4
 8011460:	4629      	mov	r1, r5
 8011462:	f7ee ff31 	bl	80002c8 <__aeabi_dsub>
 8011466:	4642      	mov	r2, r8
 8011468:	4606      	mov	r6, r0
 801146a:	460f      	mov	r7, r1
 801146c:	464b      	mov	r3, r9
 801146e:	4640      	mov	r0, r8
 8011470:	4649      	mov	r1, r9
 8011472:	f7ef f8e1 	bl	8000638 <__aeabi_dmul>
 8011476:	a360      	add	r3, pc, #384	@ (adr r3, 80115f8 <__ieee754_pow+0xa40>)
 8011478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147c:	4604      	mov	r4, r0
 801147e:	460d      	mov	r5, r1
 8011480:	f7ef f8da 	bl	8000638 <__aeabi_dmul>
 8011484:	a35e      	add	r3, pc, #376	@ (adr r3, 8011600 <__ieee754_pow+0xa48>)
 8011486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148a:	f7ee ff1d 	bl	80002c8 <__aeabi_dsub>
 801148e:	4622      	mov	r2, r4
 8011490:	462b      	mov	r3, r5
 8011492:	f7ef f8d1 	bl	8000638 <__aeabi_dmul>
 8011496:	a35c      	add	r3, pc, #368	@ (adr r3, 8011608 <__ieee754_pow+0xa50>)
 8011498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801149c:	f7ee ff16 	bl	80002cc <__adddf3>
 80114a0:	4622      	mov	r2, r4
 80114a2:	462b      	mov	r3, r5
 80114a4:	f7ef f8c8 	bl	8000638 <__aeabi_dmul>
 80114a8:	a359      	add	r3, pc, #356	@ (adr r3, 8011610 <__ieee754_pow+0xa58>)
 80114aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ae:	f7ee ff0b 	bl	80002c8 <__aeabi_dsub>
 80114b2:	4622      	mov	r2, r4
 80114b4:	462b      	mov	r3, r5
 80114b6:	f7ef f8bf 	bl	8000638 <__aeabi_dmul>
 80114ba:	a357      	add	r3, pc, #348	@ (adr r3, 8011618 <__ieee754_pow+0xa60>)
 80114bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c0:	f7ee ff04 	bl	80002cc <__adddf3>
 80114c4:	4622      	mov	r2, r4
 80114c6:	462b      	mov	r3, r5
 80114c8:	f7ef f8b6 	bl	8000638 <__aeabi_dmul>
 80114cc:	4602      	mov	r2, r0
 80114ce:	460b      	mov	r3, r1
 80114d0:	4640      	mov	r0, r8
 80114d2:	4649      	mov	r1, r9
 80114d4:	f7ee fef8 	bl	80002c8 <__aeabi_dsub>
 80114d8:	4604      	mov	r4, r0
 80114da:	460d      	mov	r5, r1
 80114dc:	4602      	mov	r2, r0
 80114de:	460b      	mov	r3, r1
 80114e0:	4640      	mov	r0, r8
 80114e2:	4649      	mov	r1, r9
 80114e4:	f7ef f8a8 	bl	8000638 <__aeabi_dmul>
 80114e8:	2200      	movs	r2, #0
 80114ea:	e9cd 0100 	strd	r0, r1, [sp]
 80114ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80114f2:	4620      	mov	r0, r4
 80114f4:	4629      	mov	r1, r5
 80114f6:	f7ee fee7 	bl	80002c8 <__aeabi_dsub>
 80114fa:	4602      	mov	r2, r0
 80114fc:	460b      	mov	r3, r1
 80114fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011502:	f7ef f9c3 	bl	800088c <__aeabi_ddiv>
 8011506:	4632      	mov	r2, r6
 8011508:	4604      	mov	r4, r0
 801150a:	460d      	mov	r5, r1
 801150c:	463b      	mov	r3, r7
 801150e:	4640      	mov	r0, r8
 8011510:	4649      	mov	r1, r9
 8011512:	f7ef f891 	bl	8000638 <__aeabi_dmul>
 8011516:	4632      	mov	r2, r6
 8011518:	463b      	mov	r3, r7
 801151a:	f7ee fed7 	bl	80002cc <__adddf3>
 801151e:	4602      	mov	r2, r0
 8011520:	460b      	mov	r3, r1
 8011522:	4620      	mov	r0, r4
 8011524:	4629      	mov	r1, r5
 8011526:	f7ee fecf 	bl	80002c8 <__aeabi_dsub>
 801152a:	4642      	mov	r2, r8
 801152c:	464b      	mov	r3, r9
 801152e:	f7ee fecb 	bl	80002c8 <__aeabi_dsub>
 8011532:	460b      	mov	r3, r1
 8011534:	4602      	mov	r2, r0
 8011536:	493b      	ldr	r1, [pc, #236]	@ (8011624 <__ieee754_pow+0xa6c>)
 8011538:	2000      	movs	r0, #0
 801153a:	f7ee fec5 	bl	80002c8 <__aeabi_dsub>
 801153e:	ec41 0b10 	vmov	d0, r0, r1
 8011542:	ee10 3a90 	vmov	r3, s1
 8011546:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801154a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801154e:	da30      	bge.n	80115b2 <__ieee754_pow+0x9fa>
 8011550:	4650      	mov	r0, sl
 8011552:	f000 fbd1 	bl	8011cf8 <scalbn>
 8011556:	ec51 0b10 	vmov	r0, r1, d0
 801155a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801155e:	f7ff bbd2 	b.w	8010d06 <__ieee754_pow+0x14e>
 8011562:	4c31      	ldr	r4, [pc, #196]	@ (8011628 <__ieee754_pow+0xa70>)
 8011564:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011568:	42a3      	cmp	r3, r4
 801156a:	d91a      	bls.n	80115a2 <__ieee754_pow+0x9ea>
 801156c:	4b2f      	ldr	r3, [pc, #188]	@ (801162c <__ieee754_pow+0xa74>)
 801156e:	440b      	add	r3, r1
 8011570:	4303      	orrs	r3, r0
 8011572:	d009      	beq.n	8011588 <__ieee754_pow+0x9d0>
 8011574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011578:	2200      	movs	r2, #0
 801157a:	2300      	movs	r3, #0
 801157c:	f7ef face 	bl	8000b1c <__aeabi_dcmplt>
 8011580:	3800      	subs	r0, #0
 8011582:	bf18      	it	ne
 8011584:	2001      	movne	r0, #1
 8011586:	e42b      	b.n	8010de0 <__ieee754_pow+0x228>
 8011588:	4642      	mov	r2, r8
 801158a:	464b      	mov	r3, r9
 801158c:	f7ee fe9c 	bl	80002c8 <__aeabi_dsub>
 8011590:	4632      	mov	r2, r6
 8011592:	463b      	mov	r3, r7
 8011594:	f7ef fad6 	bl	8000b44 <__aeabi_dcmpge>
 8011598:	2800      	cmp	r0, #0
 801159a:	d1eb      	bne.n	8011574 <__ieee754_pow+0x9bc>
 801159c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801163c <__ieee754_pow+0xa84>
 80115a0:	e6f7      	b.n	8011392 <__ieee754_pow+0x7da>
 80115a2:	469a      	mov	sl, r3
 80115a4:	4b22      	ldr	r3, [pc, #136]	@ (8011630 <__ieee754_pow+0xa78>)
 80115a6:	459a      	cmp	sl, r3
 80115a8:	f63f aef3 	bhi.w	8011392 <__ieee754_pow+0x7da>
 80115ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 80115b0:	e715      	b.n	80113de <__ieee754_pow+0x826>
 80115b2:	ec51 0b10 	vmov	r0, r1, d0
 80115b6:	4619      	mov	r1, r3
 80115b8:	e7cf      	b.n	801155a <__ieee754_pow+0x9a2>
 80115ba:	491a      	ldr	r1, [pc, #104]	@ (8011624 <__ieee754_pow+0xa6c>)
 80115bc:	2000      	movs	r0, #0
 80115be:	f7ff bb18 	b.w	8010bf2 <__ieee754_pow+0x3a>
 80115c2:	2000      	movs	r0, #0
 80115c4:	2100      	movs	r1, #0
 80115c6:	f7ff bb14 	b.w	8010bf2 <__ieee754_pow+0x3a>
 80115ca:	4630      	mov	r0, r6
 80115cc:	4639      	mov	r1, r7
 80115ce:	f7ff bb10 	b.w	8010bf2 <__ieee754_pow+0x3a>
 80115d2:	460c      	mov	r4, r1
 80115d4:	f7ff bb5e 	b.w	8010c94 <__ieee754_pow+0xdc>
 80115d8:	2400      	movs	r4, #0
 80115da:	f7ff bb49 	b.w	8010c70 <__ieee754_pow+0xb8>
 80115de:	bf00      	nop
 80115e0:	00000000 	.word	0x00000000
 80115e4:	3fe62e43 	.word	0x3fe62e43
 80115e8:	fefa39ef 	.word	0xfefa39ef
 80115ec:	3fe62e42 	.word	0x3fe62e42
 80115f0:	0ca86c39 	.word	0x0ca86c39
 80115f4:	be205c61 	.word	0xbe205c61
 80115f8:	72bea4d0 	.word	0x72bea4d0
 80115fc:	3e663769 	.word	0x3e663769
 8011600:	c5d26bf1 	.word	0xc5d26bf1
 8011604:	3ebbbd41 	.word	0x3ebbbd41
 8011608:	af25de2c 	.word	0xaf25de2c
 801160c:	3f11566a 	.word	0x3f11566a
 8011610:	16bebd93 	.word	0x16bebd93
 8011614:	3f66c16c 	.word	0x3f66c16c
 8011618:	5555553e 	.word	0x5555553e
 801161c:	3fc55555 	.word	0x3fc55555
 8011620:	fff00000 	.word	0xfff00000
 8011624:	3ff00000 	.word	0x3ff00000
 8011628:	4090cbff 	.word	0x4090cbff
 801162c:	3f6f3400 	.word	0x3f6f3400
 8011630:	3fe00000 	.word	0x3fe00000
 8011634:	652b82fe 	.word	0x652b82fe
 8011638:	3c971547 	.word	0x3c971547
 801163c:	4090cc00 	.word	0x4090cc00

08011640 <fabs>:
 8011640:	ec51 0b10 	vmov	r0, r1, d0
 8011644:	4602      	mov	r2, r0
 8011646:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801164a:	ec43 2b10 	vmov	d0, r2, r3
 801164e:	4770      	bx	lr

08011650 <__ieee754_acosf>:
 8011650:	b508      	push	{r3, lr}
 8011652:	ee10 3a10 	vmov	r3, s0
 8011656:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801165a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801165e:	ed2d 8b0c 	vpush	{d8-d13}
 8011662:	d10a      	bne.n	801167a <__ieee754_acosf+0x2a>
 8011664:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80117fc <__ieee754_acosf+0x1ac>
 8011668:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8011800 <__ieee754_acosf+0x1b0>
 801166c:	2b00      	cmp	r3, #0
 801166e:	bfc8      	it	gt
 8011670:	eeb0 0a67 	vmovgt.f32	s0, s15
 8011674:	ecbd 8b0c 	vpop	{d8-d13}
 8011678:	bd08      	pop	{r3, pc}
 801167a:	d904      	bls.n	8011686 <__ieee754_acosf+0x36>
 801167c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8011680:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011684:	e7f6      	b.n	8011674 <__ieee754_acosf+0x24>
 8011686:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801168a:	d23c      	bcs.n	8011706 <__ieee754_acosf+0xb6>
 801168c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8011690:	f240 80b1 	bls.w	80117f6 <__ieee754_acosf+0x1a6>
 8011694:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011698:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8011804 <__ieee754_acosf+0x1b4>
 801169c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8011808 <__ieee754_acosf+0x1b8>
 80116a0:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801180c <__ieee754_acosf+0x1bc>
 80116a4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80116a8:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8011810 <__ieee754_acosf+0x1c0>
 80116ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 80116b0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011814 <__ieee754_acosf+0x1c4>
 80116b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116b8:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8011818 <__ieee754_acosf+0x1c8>
 80116bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 80116c0:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801181c <__ieee754_acosf+0x1cc>
 80116c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80116c8:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8011820 <__ieee754_acosf+0x1d0>
 80116cc:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80116d0:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8011824 <__ieee754_acosf+0x1d4>
 80116d4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80116d8:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8011828 <__ieee754_acosf+0x1d8>
 80116dc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80116e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80116e4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80116e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116ec:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801182c <__ieee754_acosf+0x1dc>
 80116f0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80116f4:	eee0 7a46 	vfms.f32	s15, s0, s12
 80116f8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80116fc:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8011830 <__ieee754_acosf+0x1e0>
 8011700:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011704:	e7b6      	b.n	8011674 <__ieee754_acosf+0x24>
 8011706:	2b00      	cmp	r3, #0
 8011708:	eddf da3e 	vldr	s27, [pc, #248]	@ 8011804 <__ieee754_acosf+0x1b4>
 801170c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8011808 <__ieee754_acosf+0x1b8>
 8011710:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8011810 <__ieee754_acosf+0x1c0>
 8011714:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8011814 <__ieee754_acosf+0x1c4>
 8011718:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8011818 <__ieee754_acosf+0x1c8>
 801171c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801181c <__ieee754_acosf+0x1cc>
 8011720:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8011820 <__ieee754_acosf+0x1d0>
 8011724:	eddf aa39 	vldr	s21, [pc, #228]	@ 801180c <__ieee754_acosf+0x1bc>
 8011728:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8011824 <__ieee754_acosf+0x1d4>
 801172c:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8011828 <__ieee754_acosf+0x1d8>
 8011730:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8011734:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011738:	da28      	bge.n	801178c <__ieee754_acosf+0x13c>
 801173a:	ee30 8a09 	vadd.f32	s16, s0, s18
 801173e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011742:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8011746:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801174a:	eeac ca80 	vfma.f32	s24, s25, s0
 801174e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8011752:	eeec ba00 	vfma.f32	s23, s24, s0
 8011756:	eeea 9a00 	vfma.f32	s19, s20, s0
 801175a:	eeab ba80 	vfma.f32	s22, s23, s0
 801175e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8011762:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8011766:	ee68 8a80 	vmul.f32	s17, s17, s0
 801176a:	f7ff f9a3 	bl	8010ab4 <__ieee754_sqrtf>
 801176e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8011772:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8011834 <__ieee754_acosf+0x1e4>
 8011776:	eee0 7a07 	vfma.f32	s15, s0, s14
 801177a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801177e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011782:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8011838 <__ieee754_acosf+0x1e8>
 8011786:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801178a:	e773      	b.n	8011674 <__ieee754_acosf+0x24>
 801178c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8011790:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011794:	eeb0 0a48 	vmov.f32	s0, s16
 8011798:	f7ff f98c 	bl	8010ab4 <__ieee754_sqrtf>
 801179c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80117a0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80117a4:	eeac ca88 	vfma.f32	s24, s25, s16
 80117a8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80117ac:	eeec ba08 	vfma.f32	s23, s24, s16
 80117b0:	ee10 3a10 	vmov	r3, s0
 80117b4:	eeab ba88 	vfma.f32	s22, s23, s16
 80117b8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80117bc:	f023 030f 	bic.w	r3, r3, #15
 80117c0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80117c4:	ee07 3a90 	vmov	s15, r3
 80117c8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80117cc:	eeb0 6a48 	vmov.f32	s12, s16
 80117d0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80117d4:	eea9 9a88 	vfma.f32	s18, s19, s16
 80117d8:	ee70 6a27 	vadd.f32	s13, s0, s15
 80117dc:	ee68 8a88 	vmul.f32	s17, s17, s16
 80117e0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80117e4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80117e8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80117ec:	ee37 0a87 	vadd.f32	s0, s15, s14
 80117f0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80117f4:	e73e      	b.n	8011674 <__ieee754_acosf+0x24>
 80117f6:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801183c <__ieee754_acosf+0x1ec>
 80117fa:	e73b      	b.n	8011674 <__ieee754_acosf+0x24>
 80117fc:	40490fdb 	.word	0x40490fdb
 8011800:	00000000 	.word	0x00000000
 8011804:	3811ef08 	.word	0x3811ef08
 8011808:	3a4f7f04 	.word	0x3a4f7f04
 801180c:	bf303361 	.word	0xbf303361
 8011810:	bd241146 	.word	0xbd241146
 8011814:	3e4e0aa8 	.word	0x3e4e0aa8
 8011818:	bea6b090 	.word	0xbea6b090
 801181c:	3e2aaaab 	.word	0x3e2aaaab
 8011820:	3d9dc62e 	.word	0x3d9dc62e
 8011824:	4001572d 	.word	0x4001572d
 8011828:	c019d139 	.word	0xc019d139
 801182c:	33a22168 	.word	0x33a22168
 8011830:	3fc90fda 	.word	0x3fc90fda
 8011834:	b3a22168 	.word	0xb3a22168
 8011838:	40490fda 	.word	0x40490fda
 801183c:	3fc90fdb 	.word	0x3fc90fdb

08011840 <__ieee754_asinf>:
 8011840:	b538      	push	{r3, r4, r5, lr}
 8011842:	ee10 5a10 	vmov	r5, s0
 8011846:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801184a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801184e:	ed2d 8b04 	vpush	{d8-d9}
 8011852:	d10c      	bne.n	801186e <__ieee754_asinf+0x2e>
 8011854:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80119cc <__ieee754_asinf+0x18c>
 8011858:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80119d0 <__ieee754_asinf+0x190>
 801185c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011860:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011864:	eeb0 0a67 	vmov.f32	s0, s15
 8011868:	ecbd 8b04 	vpop	{d8-d9}
 801186c:	bd38      	pop	{r3, r4, r5, pc}
 801186e:	d904      	bls.n	801187a <__ieee754_asinf+0x3a>
 8011870:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011874:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011878:	e7f6      	b.n	8011868 <__ieee754_asinf+0x28>
 801187a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801187e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011882:	d20b      	bcs.n	801189c <__ieee754_asinf+0x5c>
 8011884:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8011888:	d252      	bcs.n	8011930 <__ieee754_asinf+0xf0>
 801188a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80119d4 <__ieee754_asinf+0x194>
 801188e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011892:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189a:	dce5      	bgt.n	8011868 <__ieee754_asinf+0x28>
 801189c:	f7fe ffc8 	bl	8010830 <fabsf>
 80118a0:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80118a4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80118a8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80118ac:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80119d8 <__ieee754_asinf+0x198>
 80118b0:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80119dc <__ieee754_asinf+0x19c>
 80118b4:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80119e0 <__ieee754_asinf+0x1a0>
 80118b8:	eea8 7a27 	vfma.f32	s14, s16, s15
 80118bc:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80119e4 <__ieee754_asinf+0x1a4>
 80118c0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80118c4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80119e8 <__ieee754_asinf+0x1a8>
 80118c8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80118cc:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80119ec <__ieee754_asinf+0x1ac>
 80118d0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80118d4:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80119f0 <__ieee754_asinf+0x1b0>
 80118d8:	eea7 9a88 	vfma.f32	s18, s15, s16
 80118dc:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80119f4 <__ieee754_asinf+0x1b4>
 80118e0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80118e4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80119f8 <__ieee754_asinf+0x1b8>
 80118e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80118ec:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80119fc <__ieee754_asinf+0x1bc>
 80118f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80118f4:	eeb0 0a48 	vmov.f32	s0, s16
 80118f8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80118fc:	f7ff f8da 	bl	8010ab4 <__ieee754_sqrtf>
 8011900:	4b3f      	ldr	r3, [pc, #252]	@ (8011a00 <__ieee754_asinf+0x1c0>)
 8011902:	ee29 9a08 	vmul.f32	s18, s18, s16
 8011906:	429c      	cmp	r4, r3
 8011908:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801190c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011910:	d93d      	bls.n	801198e <__ieee754_asinf+0x14e>
 8011912:	eea0 0a06 	vfma.f32	s0, s0, s12
 8011916:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011a04 <__ieee754_asinf+0x1c4>
 801191a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801191e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80119d0 <__ieee754_asinf+0x190>
 8011922:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011926:	2d00      	cmp	r5, #0
 8011928:	bfd8      	it	le
 801192a:	eeb1 0a40 	vnegle.f32	s0, s0
 801192e:	e79b      	b.n	8011868 <__ieee754_asinf+0x28>
 8011930:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011934:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80119dc <__ieee754_asinf+0x19c>
 8011938:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80119d8 <__ieee754_asinf+0x198>
 801193c:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80119f0 <__ieee754_asinf+0x1b0>
 8011940:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011944:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80119e4 <__ieee754_asinf+0x1a4>
 8011948:	eee7 6a27 	vfma.f32	s13, s14, s15
 801194c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80119e8 <__ieee754_asinf+0x1a8>
 8011950:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011954:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80119ec <__ieee754_asinf+0x1ac>
 8011958:	eee7 6a27 	vfma.f32	s13, s14, s15
 801195c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80119e0 <__ieee754_asinf+0x1a0>
 8011960:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011964:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80119f4 <__ieee754_asinf+0x1b4>
 8011968:	eee7 6a86 	vfma.f32	s13, s15, s12
 801196c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80119f8 <__ieee754_asinf+0x1b8>
 8011970:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011974:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80119fc <__ieee754_asinf+0x1bc>
 8011978:	eee6 6a27 	vfma.f32	s13, s12, s15
 801197c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011980:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011984:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011988:	eea0 0a27 	vfma.f32	s0, s0, s15
 801198c:	e76c      	b.n	8011868 <__ieee754_asinf+0x28>
 801198e:	ee10 3a10 	vmov	r3, s0
 8011992:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011996:	f023 030f 	bic.w	r3, r3, #15
 801199a:	ee07 3a10 	vmov	s14, r3
 801199e:	eea7 8a47 	vfms.f32	s16, s14, s14
 80119a2:	ee70 5a00 	vadd.f32	s11, s0, s0
 80119a6:	ee30 0a07 	vadd.f32	s0, s0, s14
 80119aa:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80119cc <__ieee754_asinf+0x18c>
 80119ae:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80119b2:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011a08 <__ieee754_asinf+0x1c8>
 80119b6:	eee5 7a66 	vfms.f32	s15, s10, s13
 80119ba:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80119be:	eeb0 6a40 	vmov.f32	s12, s0
 80119c2:	eea7 6a66 	vfms.f32	s12, s14, s13
 80119c6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80119ca:	e7aa      	b.n	8011922 <__ieee754_asinf+0xe2>
 80119cc:	b33bbd2e 	.word	0xb33bbd2e
 80119d0:	3fc90fdb 	.word	0x3fc90fdb
 80119d4:	7149f2ca 	.word	0x7149f2ca
 80119d8:	3a4f7f04 	.word	0x3a4f7f04
 80119dc:	3811ef08 	.word	0x3811ef08
 80119e0:	3e2aaaab 	.word	0x3e2aaaab
 80119e4:	bd241146 	.word	0xbd241146
 80119e8:	3e4e0aa8 	.word	0x3e4e0aa8
 80119ec:	bea6b090 	.word	0xbea6b090
 80119f0:	3d9dc62e 	.word	0x3d9dc62e
 80119f4:	bf303361 	.word	0xbf303361
 80119f8:	4001572d 	.word	0x4001572d
 80119fc:	c019d139 	.word	0xc019d139
 8011a00:	3f799999 	.word	0x3f799999
 8011a04:	333bbd2e 	.word	0x333bbd2e
 8011a08:	3f490fdb 	.word	0x3f490fdb

08011a0c <__ieee754_atan2f>:
 8011a0c:	ee10 2a90 	vmov	r2, s1
 8011a10:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011a14:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011a18:	b510      	push	{r4, lr}
 8011a1a:	eef0 7a40 	vmov.f32	s15, s0
 8011a1e:	d806      	bhi.n	8011a2e <__ieee754_atan2f+0x22>
 8011a20:	ee10 0a10 	vmov	r0, s0
 8011a24:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011a28:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011a2c:	d904      	bls.n	8011a38 <__ieee754_atan2f+0x2c>
 8011a2e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011a32:	eeb0 0a67 	vmov.f32	s0, s15
 8011a36:	bd10      	pop	{r4, pc}
 8011a38:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011a3c:	d103      	bne.n	8011a46 <__ieee754_atan2f+0x3a>
 8011a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a42:	f000 b883 	b.w	8011b4c <atanf>
 8011a46:	1794      	asrs	r4, r2, #30
 8011a48:	f004 0402 	and.w	r4, r4, #2
 8011a4c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011a50:	b943      	cbnz	r3, 8011a64 <__ieee754_atan2f+0x58>
 8011a52:	2c02      	cmp	r4, #2
 8011a54:	d05e      	beq.n	8011b14 <__ieee754_atan2f+0x108>
 8011a56:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011b28 <__ieee754_atan2f+0x11c>
 8011a5a:	2c03      	cmp	r4, #3
 8011a5c:	bf08      	it	eq
 8011a5e:	eef0 7a47 	vmoveq.f32	s15, s14
 8011a62:	e7e6      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011a64:	b941      	cbnz	r1, 8011a78 <__ieee754_atan2f+0x6c>
 8011a66:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011b2c <__ieee754_atan2f+0x120>
 8011a6a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011b30 <__ieee754_atan2f+0x124>
 8011a6e:	2800      	cmp	r0, #0
 8011a70:	bfb8      	it	lt
 8011a72:	eef0 7a47 	vmovlt.f32	s15, s14
 8011a76:	e7dc      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011a78:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011a7c:	d110      	bne.n	8011aa0 <__ieee754_atan2f+0x94>
 8011a7e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011a82:	f104 34ff 	add.w	r4, r4, #4294967295
 8011a86:	d107      	bne.n	8011a98 <__ieee754_atan2f+0x8c>
 8011a88:	2c02      	cmp	r4, #2
 8011a8a:	d846      	bhi.n	8011b1a <__ieee754_atan2f+0x10e>
 8011a8c:	4b29      	ldr	r3, [pc, #164]	@ (8011b34 <__ieee754_atan2f+0x128>)
 8011a8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011a92:	edd3 7a00 	vldr	s15, [r3]
 8011a96:	e7cc      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011a98:	2c02      	cmp	r4, #2
 8011a9a:	d841      	bhi.n	8011b20 <__ieee754_atan2f+0x114>
 8011a9c:	4b26      	ldr	r3, [pc, #152]	@ (8011b38 <__ieee754_atan2f+0x12c>)
 8011a9e:	e7f6      	b.n	8011a8e <__ieee754_atan2f+0x82>
 8011aa0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011aa4:	d0df      	beq.n	8011a66 <__ieee754_atan2f+0x5a>
 8011aa6:	1a5b      	subs	r3, r3, r1
 8011aa8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011aac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011ab0:	da1a      	bge.n	8011ae8 <__ieee754_atan2f+0xdc>
 8011ab2:	2a00      	cmp	r2, #0
 8011ab4:	da01      	bge.n	8011aba <__ieee754_atan2f+0xae>
 8011ab6:	313c      	adds	r1, #60	@ 0x3c
 8011ab8:	db19      	blt.n	8011aee <__ieee754_atan2f+0xe2>
 8011aba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011abe:	f7fe feb7 	bl	8010830 <fabsf>
 8011ac2:	f000 f843 	bl	8011b4c <atanf>
 8011ac6:	eef0 7a40 	vmov.f32	s15, s0
 8011aca:	2c01      	cmp	r4, #1
 8011acc:	d012      	beq.n	8011af4 <__ieee754_atan2f+0xe8>
 8011ace:	2c02      	cmp	r4, #2
 8011ad0:	d017      	beq.n	8011b02 <__ieee754_atan2f+0xf6>
 8011ad2:	2c00      	cmp	r4, #0
 8011ad4:	d0ad      	beq.n	8011a32 <__ieee754_atan2f+0x26>
 8011ad6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011b3c <__ieee754_atan2f+0x130>
 8011ada:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011ade:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011b40 <__ieee754_atan2f+0x134>
 8011ae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ae6:	e7a4      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011ae8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011b2c <__ieee754_atan2f+0x120>
 8011aec:	e7ed      	b.n	8011aca <__ieee754_atan2f+0xbe>
 8011aee:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011b44 <__ieee754_atan2f+0x138>
 8011af2:	e7ea      	b.n	8011aca <__ieee754_atan2f+0xbe>
 8011af4:	ee17 3a90 	vmov	r3, s15
 8011af8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011afc:	ee07 3a90 	vmov	s15, r3
 8011b00:	e797      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011b02:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011b3c <__ieee754_atan2f+0x130>
 8011b06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b0a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011b40 <__ieee754_atan2f+0x134>
 8011b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b12:	e78e      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011b14:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011b40 <__ieee754_atan2f+0x134>
 8011b18:	e78b      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011b1a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011b48 <__ieee754_atan2f+0x13c>
 8011b1e:	e788      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011b20:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011b44 <__ieee754_atan2f+0x138>
 8011b24:	e785      	b.n	8011a32 <__ieee754_atan2f+0x26>
 8011b26:	bf00      	nop
 8011b28:	c0490fdb 	.word	0xc0490fdb
 8011b2c:	3fc90fdb 	.word	0x3fc90fdb
 8011b30:	bfc90fdb 	.word	0xbfc90fdb
 8011b34:	080124b4 	.word	0x080124b4
 8011b38:	080124a8 	.word	0x080124a8
 8011b3c:	33bbbd2e 	.word	0x33bbbd2e
 8011b40:	40490fdb 	.word	0x40490fdb
 8011b44:	00000000 	.word	0x00000000
 8011b48:	3f490fdb 	.word	0x3f490fdb

08011b4c <atanf>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	ee10 5a10 	vmov	r5, s0
 8011b52:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011b56:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011b5a:	eef0 7a40 	vmov.f32	s15, s0
 8011b5e:	d310      	bcc.n	8011b82 <atanf+0x36>
 8011b60:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011b64:	d904      	bls.n	8011b70 <atanf+0x24>
 8011b66:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8011b6e:	bd38      	pop	{r3, r4, r5, pc}
 8011b70:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011ca8 <atanf+0x15c>
 8011b74:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011cac <atanf+0x160>
 8011b78:	2d00      	cmp	r5, #0
 8011b7a:	bfc8      	it	gt
 8011b7c:	eef0 7a47 	vmovgt.f32	s15, s14
 8011b80:	e7f3      	b.n	8011b6a <atanf+0x1e>
 8011b82:	4b4b      	ldr	r3, [pc, #300]	@ (8011cb0 <atanf+0x164>)
 8011b84:	429c      	cmp	r4, r3
 8011b86:	d810      	bhi.n	8011baa <atanf+0x5e>
 8011b88:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011b8c:	d20a      	bcs.n	8011ba4 <atanf+0x58>
 8011b8e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011cb4 <atanf+0x168>
 8011b92:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011b9a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba2:	dce2      	bgt.n	8011b6a <atanf+0x1e>
 8011ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba8:	e013      	b.n	8011bd2 <atanf+0x86>
 8011baa:	f7fe fe41 	bl	8010830 <fabsf>
 8011bae:	4b42      	ldr	r3, [pc, #264]	@ (8011cb8 <atanf+0x16c>)
 8011bb0:	429c      	cmp	r4, r3
 8011bb2:	d84f      	bhi.n	8011c54 <atanf+0x108>
 8011bb4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011bb8:	429c      	cmp	r4, r3
 8011bba:	d841      	bhi.n	8011c40 <atanf+0xf4>
 8011bbc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011bc0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011bc4:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011bc8:	2300      	movs	r3, #0
 8011bca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011bce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011bd2:	1c5a      	adds	r2, r3, #1
 8011bd4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011bd8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011cbc <atanf+0x170>
 8011bdc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011cc0 <atanf+0x174>
 8011be0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011cc4 <atanf+0x178>
 8011be4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011be8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011bec:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011cc8 <atanf+0x17c>
 8011bf0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011bf4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011ccc <atanf+0x180>
 8011bf8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011bfc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011cd0 <atanf+0x184>
 8011c00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011c04:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011cd4 <atanf+0x188>
 8011c08:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011c0c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011cd8 <atanf+0x18c>
 8011c10:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011c14:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011cdc <atanf+0x190>
 8011c18:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011c1c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011ce0 <atanf+0x194>
 8011c20:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011c24:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011ce4 <atanf+0x198>
 8011c28:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011c2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011c30:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011c34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011c38:	d121      	bne.n	8011c7e <atanf+0x132>
 8011c3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011c3e:	e794      	b.n	8011b6a <atanf+0x1e>
 8011c40:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011c44:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011c48:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011c52:	e7be      	b.n	8011bd2 <atanf+0x86>
 8011c54:	4b24      	ldr	r3, [pc, #144]	@ (8011ce8 <atanf+0x19c>)
 8011c56:	429c      	cmp	r4, r3
 8011c58:	d80b      	bhi.n	8011c72 <atanf+0x126>
 8011c5a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011c5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011c62:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011c66:	2302      	movs	r3, #2
 8011c68:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011c6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011c70:	e7af      	b.n	8011bd2 <atanf+0x86>
 8011c72:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011c76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011c7a:	2303      	movs	r3, #3
 8011c7c:	e7a9      	b.n	8011bd2 <atanf+0x86>
 8011c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8011cec <atanf+0x1a0>)
 8011c80:	491b      	ldr	r1, [pc, #108]	@ (8011cf0 <atanf+0x1a4>)
 8011c82:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011c86:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011c8a:	edd3 6a00 	vldr	s13, [r3]
 8011c8e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011c92:	2d00      	cmp	r5, #0
 8011c94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c98:	edd2 7a00 	vldr	s15, [r2]
 8011c9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ca0:	bfb8      	it	lt
 8011ca2:	eef1 7a67 	vneglt.f32	s15, s15
 8011ca6:	e760      	b.n	8011b6a <atanf+0x1e>
 8011ca8:	bfc90fdb 	.word	0xbfc90fdb
 8011cac:	3fc90fdb 	.word	0x3fc90fdb
 8011cb0:	3edfffff 	.word	0x3edfffff
 8011cb4:	7149f2ca 	.word	0x7149f2ca
 8011cb8:	3f97ffff 	.word	0x3f97ffff
 8011cbc:	3c8569d7 	.word	0x3c8569d7
 8011cc0:	3d4bda59 	.word	0x3d4bda59
 8011cc4:	bd6ef16b 	.word	0xbd6ef16b
 8011cc8:	3d886b35 	.word	0x3d886b35
 8011ccc:	3dba2e6e 	.word	0x3dba2e6e
 8011cd0:	3e124925 	.word	0x3e124925
 8011cd4:	3eaaaaab 	.word	0x3eaaaaab
 8011cd8:	bd15a221 	.word	0xbd15a221
 8011cdc:	bd9d8795 	.word	0xbd9d8795
 8011ce0:	bde38e38 	.word	0xbde38e38
 8011ce4:	be4ccccd 	.word	0xbe4ccccd
 8011ce8:	401bffff 	.word	0x401bffff
 8011cec:	080124d0 	.word	0x080124d0
 8011cf0:	080124c0 	.word	0x080124c0
 8011cf4:	00000000 	.word	0x00000000

08011cf8 <scalbn>:
 8011cf8:	b570      	push	{r4, r5, r6, lr}
 8011cfa:	ec55 4b10 	vmov	r4, r5, d0
 8011cfe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011d02:	4606      	mov	r6, r0
 8011d04:	462b      	mov	r3, r5
 8011d06:	b991      	cbnz	r1, 8011d2e <scalbn+0x36>
 8011d08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011d0c:	4323      	orrs	r3, r4
 8011d0e:	d03d      	beq.n	8011d8c <scalbn+0x94>
 8011d10:	4b35      	ldr	r3, [pc, #212]	@ (8011de8 <scalbn+0xf0>)
 8011d12:	4620      	mov	r0, r4
 8011d14:	4629      	mov	r1, r5
 8011d16:	2200      	movs	r2, #0
 8011d18:	f7ee fc8e 	bl	8000638 <__aeabi_dmul>
 8011d1c:	4b33      	ldr	r3, [pc, #204]	@ (8011dec <scalbn+0xf4>)
 8011d1e:	429e      	cmp	r6, r3
 8011d20:	4604      	mov	r4, r0
 8011d22:	460d      	mov	r5, r1
 8011d24:	da0f      	bge.n	8011d46 <scalbn+0x4e>
 8011d26:	a328      	add	r3, pc, #160	@ (adr r3, 8011dc8 <scalbn+0xd0>)
 8011d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d2c:	e01e      	b.n	8011d6c <scalbn+0x74>
 8011d2e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011d32:	4291      	cmp	r1, r2
 8011d34:	d10b      	bne.n	8011d4e <scalbn+0x56>
 8011d36:	4622      	mov	r2, r4
 8011d38:	4620      	mov	r0, r4
 8011d3a:	4629      	mov	r1, r5
 8011d3c:	f7ee fac6 	bl	80002cc <__adddf3>
 8011d40:	4604      	mov	r4, r0
 8011d42:	460d      	mov	r5, r1
 8011d44:	e022      	b.n	8011d8c <scalbn+0x94>
 8011d46:	460b      	mov	r3, r1
 8011d48:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011d4c:	3936      	subs	r1, #54	@ 0x36
 8011d4e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011d52:	4296      	cmp	r6, r2
 8011d54:	dd0d      	ble.n	8011d72 <scalbn+0x7a>
 8011d56:	2d00      	cmp	r5, #0
 8011d58:	a11d      	add	r1, pc, #116	@ (adr r1, 8011dd0 <scalbn+0xd8>)
 8011d5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d5e:	da02      	bge.n	8011d66 <scalbn+0x6e>
 8011d60:	a11d      	add	r1, pc, #116	@ (adr r1, 8011dd8 <scalbn+0xe0>)
 8011d62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d66:	a31a      	add	r3, pc, #104	@ (adr r3, 8011dd0 <scalbn+0xd8>)
 8011d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6c:	f7ee fc64 	bl	8000638 <__aeabi_dmul>
 8011d70:	e7e6      	b.n	8011d40 <scalbn+0x48>
 8011d72:	1872      	adds	r2, r6, r1
 8011d74:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011d78:	428a      	cmp	r2, r1
 8011d7a:	dcec      	bgt.n	8011d56 <scalbn+0x5e>
 8011d7c:	2a00      	cmp	r2, #0
 8011d7e:	dd08      	ble.n	8011d92 <scalbn+0x9a>
 8011d80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011d84:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011d88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011d8c:	ec45 4b10 	vmov	d0, r4, r5
 8011d90:	bd70      	pop	{r4, r5, r6, pc}
 8011d92:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011d96:	da08      	bge.n	8011daa <scalbn+0xb2>
 8011d98:	2d00      	cmp	r5, #0
 8011d9a:	a10b      	add	r1, pc, #44	@ (adr r1, 8011dc8 <scalbn+0xd0>)
 8011d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011da0:	dac1      	bge.n	8011d26 <scalbn+0x2e>
 8011da2:	a10f      	add	r1, pc, #60	@ (adr r1, 8011de0 <scalbn+0xe8>)
 8011da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011da8:	e7bd      	b.n	8011d26 <scalbn+0x2e>
 8011daa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011dae:	3236      	adds	r2, #54	@ 0x36
 8011db0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011db4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011db8:	4620      	mov	r0, r4
 8011dba:	4b0d      	ldr	r3, [pc, #52]	@ (8011df0 <scalbn+0xf8>)
 8011dbc:	4629      	mov	r1, r5
 8011dbe:	2200      	movs	r2, #0
 8011dc0:	e7d4      	b.n	8011d6c <scalbn+0x74>
 8011dc2:	bf00      	nop
 8011dc4:	f3af 8000 	nop.w
 8011dc8:	c2f8f359 	.word	0xc2f8f359
 8011dcc:	01a56e1f 	.word	0x01a56e1f
 8011dd0:	8800759c 	.word	0x8800759c
 8011dd4:	7e37e43c 	.word	0x7e37e43c
 8011dd8:	8800759c 	.word	0x8800759c
 8011ddc:	fe37e43c 	.word	0xfe37e43c
 8011de0:	c2f8f359 	.word	0xc2f8f359
 8011de4:	81a56e1f 	.word	0x81a56e1f
 8011de8:	43500000 	.word	0x43500000
 8011dec:	ffff3cb0 	.word	0xffff3cb0
 8011df0:	3c900000 	.word	0x3c900000

08011df4 <with_errno>:
 8011df4:	b510      	push	{r4, lr}
 8011df6:	ed2d 8b02 	vpush	{d8}
 8011dfa:	eeb0 8a40 	vmov.f32	s16, s0
 8011dfe:	eef0 8a60 	vmov.f32	s17, s1
 8011e02:	4604      	mov	r4, r0
 8011e04:	f7fa fd4e 	bl	800c8a4 <__errno>
 8011e08:	eeb0 0a48 	vmov.f32	s0, s16
 8011e0c:	eef0 0a68 	vmov.f32	s1, s17
 8011e10:	ecbd 8b02 	vpop	{d8}
 8011e14:	6004      	str	r4, [r0, #0]
 8011e16:	bd10      	pop	{r4, pc}

08011e18 <xflow>:
 8011e18:	4603      	mov	r3, r0
 8011e1a:	b507      	push	{r0, r1, r2, lr}
 8011e1c:	ec51 0b10 	vmov	r0, r1, d0
 8011e20:	b183      	cbz	r3, 8011e44 <xflow+0x2c>
 8011e22:	4602      	mov	r2, r0
 8011e24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011e28:	e9cd 2300 	strd	r2, r3, [sp]
 8011e2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011e30:	f7ee fc02 	bl	8000638 <__aeabi_dmul>
 8011e34:	ec41 0b10 	vmov	d0, r0, r1
 8011e38:	2022      	movs	r0, #34	@ 0x22
 8011e3a:	b003      	add	sp, #12
 8011e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e40:	f7ff bfd8 	b.w	8011df4 <with_errno>
 8011e44:	4602      	mov	r2, r0
 8011e46:	460b      	mov	r3, r1
 8011e48:	e7ee      	b.n	8011e28 <xflow+0x10>
 8011e4a:	0000      	movs	r0, r0
 8011e4c:	0000      	movs	r0, r0
	...

08011e50 <__math_uflow>:
 8011e50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011e58 <__math_uflow+0x8>
 8011e54:	f7ff bfe0 	b.w	8011e18 <xflow>
 8011e58:	00000000 	.word	0x00000000
 8011e5c:	10000000 	.word	0x10000000

08011e60 <__math_oflow>:
 8011e60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011e68 <__math_oflow+0x8>
 8011e64:	f7ff bfd8 	b.w	8011e18 <xflow>
 8011e68:	00000000 	.word	0x00000000
 8011e6c:	70000000 	.word	0x70000000

08011e70 <_init>:
 8011e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e72:	bf00      	nop
 8011e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e76:	bc08      	pop	{r3}
 8011e78:	469e      	mov	lr, r3
 8011e7a:	4770      	bx	lr

08011e7c <_fini>:
 8011e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e7e:	bf00      	nop
 8011e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e82:	bc08      	pop	{r3}
 8011e84:	469e      	mov	lr, r3
 8011e86:	4770      	bx	lr
