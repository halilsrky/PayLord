
PayLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a510  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  0801a6e0  0801a6e0  0001b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b218  0801b218  0001d238  2**0
                  CONTENTS
  4 .ARM          00000008  0801b218  0801b218  0001c218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b220  0801b220  0001d238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b220  0801b220  0001c220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b224  0801b224  0001c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0801b228  0001d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003e88  20000238  0801b460  0001d238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200040c0  0801b460  0001e0c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001d238  2**0
                  CONTENTS, READONLY
 12 .debug_info   000227b4  00000000  00000000  0001d268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d2e  00000000  00000000  0003fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b50  00000000  00000000  00044750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001555  00000000  00000000  000462a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000298ab  00000000  00000000  000477f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002824e  00000000  00000000  000710a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95c5  00000000  00000000  000992ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001828b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009028  00000000  00000000  001828f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0018b920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000238 	.word	0x20000238
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a6c8 	.word	0x0801a6c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000023c 	.word	0x2000023c
 800020c:	0801a6c8 	.word	0x0801a6c8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint32_t last_freq_check_time = 0;
static float execution_frequency = 0.0f;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f009 fa31 	bl	800a764 <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f009 fa0d 	bl	800a764 <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f013 fb9c 	bl	8014a9e <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                HAL_UART_Transmit(&huart2, (uint8_t*)freq_msg, strlen(freq_msg), 100);
            }

*/

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000254 	.word	0x20000254
 80013dc:	20000258 	.word	0x20000258
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f017 fa7f 	bl	8018918 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000258 	.word	0x20000258
 8001488:	3ff00000 	.word	0x3ff00000
 800148c:	00000000 	.word	0x00000000

08001490 <bme280_config>:

void bme280_config()
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b092      	sub	sp, #72	@ 0x48
 8001494:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001496:	4b9b      	ldr	r3, [pc, #620]	@ (8001704 <bme280_config+0x274>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 80014a0:	4b99      	ldr	r3, [pc, #612]	@ (8001708 <bme280_config+0x278>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f009 f81f 	bl	800a4e8 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014aa:	2005      	movs	r0, #5
 80014ac:	f007 fa2c 	bl	8008908 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014b0:	4b95      	ldr	r3, [pc, #596]	@ (8001708 <bme280_config+0x278>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f008 fed3 	bl	800a260 <HAL_I2C_Init>
    HAL_Delay(5);
 80014ba:	2005      	movs	r0, #5
 80014bc:	f007 fa24 	bl	8008908 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014c0:	4b91      	ldr	r3, [pc, #580]	@ (8001708 <bme280_config+0x278>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	23c8      	movs	r3, #200	@ 0xc8
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2319      	movs	r3, #25
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	f107 0308 	add.w	r3, r7, #8
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2301      	movs	r3, #1
 80014d4:	2288      	movs	r2, #136	@ 0x88
 80014d6:	21ec      	movs	r1, #236	@ 0xec
 80014d8:	f009 f944 	bl	800a764 <HAL_I2C_Mem_Read>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014e2:	7a3b      	ldrb	r3, [r7, #8]
 80014e4:	4619      	mov	r1, r3
 80014e6:	7a7b      	ldrb	r3, [r7, #9]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	4b85      	ldr	r3, [pc, #532]	@ (8001704 <bme280_config+0x274>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	b292      	uxth	r2, r2
 80014f6:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f8:	7abb      	ldrb	r3, [r7, #10]
 80014fa:	b219      	sxth	r1, r3
 80014fc:	7afb      	ldrb	r3, [r7, #11]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b80      	ldr	r3, [pc, #512]	@ (8001704 <bme280_config+0x274>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	b212      	sxth	r2, r2
 800150c:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 800150e:	7b3b      	ldrb	r3, [r7, #12]
 8001510:	b219      	sxth	r1, r3
 8001512:	7b7b      	ldrb	r3, [r7, #13]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b7a      	ldr	r3, [pc, #488]	@ (8001704 <bme280_config+0x274>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	b212      	sxth	r2, r2
 8001522:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	b21a      	sxth	r2, r3
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21b      	sxth	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b21a      	sxth	r2, r3
 8001532:	4b74      	ldr	r3, [pc, #464]	@ (8001704 <bme280_config+0x274>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	b292      	uxth	r2, r2
 800153a:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 800153c:	7c3b      	ldrb	r3, [r7, #16]
 800153e:	b219      	sxth	r1, r3
 8001540:	7c7b      	ldrb	r3, [r7, #17]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b6f      	ldr	r3, [pc, #444]	@ (8001704 <bme280_config+0x274>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	b212      	sxth	r2, r2
 8001550:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 8001552:	7cbb      	ldrb	r3, [r7, #18]
 8001554:	b219      	sxth	r1, r3
 8001556:	7cfb      	ldrb	r3, [r7, #19]
 8001558:	021b      	lsls	r3, r3, #8
 800155a:	b21a      	sxth	r2, r3
 800155c:	4b69      	ldr	r3, [pc, #420]	@ (8001704 <bme280_config+0x274>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	b212      	sxth	r2, r2
 8001566:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001568:	7d3b      	ldrb	r3, [r7, #20]
 800156a:	b219      	sxth	r1, r3
 800156c:	7d7b      	ldrb	r3, [r7, #21]
 800156e:	021b      	lsls	r3, r3, #8
 8001570:	b21a      	sxth	r2, r3
 8001572:	4b64      	ldr	r3, [pc, #400]	@ (8001704 <bme280_config+0x274>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	b212      	sxth	r2, r2
 800157c:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 800157e:	7dbb      	ldrb	r3, [r7, #22]
 8001580:	b219      	sxth	r1, r3
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b5e      	ldr	r3, [pc, #376]	@ (8001704 <bme280_config+0x274>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	b212      	sxth	r2, r2
 8001592:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 8001594:	7e3b      	ldrb	r3, [r7, #24]
 8001596:	b219      	sxth	r1, r3
 8001598:	7e7b      	ldrb	r3, [r7, #25]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b59      	ldr	r3, [pc, #356]	@ (8001704 <bme280_config+0x274>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	b212      	sxth	r2, r2
 80015a8:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015aa:	7ebb      	ldrb	r3, [r7, #26]
 80015ac:	b219      	sxth	r1, r3
 80015ae:	7efb      	ldrb	r3, [r7, #27]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	4b53      	ldr	r3, [pc, #332]	@ (8001704 <bme280_config+0x274>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	b212      	sxth	r2, r2
 80015be:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015c0:	7f3b      	ldrb	r3, [r7, #28]
 80015c2:	b219      	sxth	r1, r3
 80015c4:	7f7b      	ldrb	r3, [r7, #29]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001704 <bme280_config+0x274>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	b212      	sxth	r2, r2
 80015d4:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015d6:	7fbb      	ldrb	r3, [r7, #30]
 80015d8:	b219      	sxth	r1, r3
 80015da:	7ffb      	ldrb	r3, [r7, #31]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	b21a      	sxth	r2, r3
 80015e0:	4b48      	ldr	r3, [pc, #288]	@ (8001704 <bme280_config+0x274>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	b212      	sxth	r2, r2
 80015ea:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015ec:	4b45      	ldr	r3, [pc, #276]	@ (8001704 <bme280_config+0x274>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80015f6:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015f8:	4b43      	ldr	r3, [pc, #268]	@ (8001708 <bme280_config+0x278>)
 80015fa:	6818      	ldr	r0, [r3, #0]
 80015fc:	2332      	movs	r3, #50	@ 0x32
 80015fe:	9302      	str	r3, [sp, #8]
 8001600:	2307      	movs	r3, #7
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	f107 0308 	add.w	r3, r7, #8
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2301      	movs	r3, #1
 800160c:	22e1      	movs	r2, #225	@ 0xe1
 800160e:	21ec      	movs	r1, #236	@ 0xec
 8001610:	f009 f8a8 	bl	800a764 <HAL_I2C_Mem_Read>
 8001614:	4603      	mov	r3, r0
 8001616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800161a:	7a3b      	ldrb	r3, [r7, #8]
 800161c:	b219      	sxth	r1, r3
 800161e:	7a7b      	ldrb	r3, [r7, #9]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	b21a      	sxth	r2, r3
 8001624:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <bme280_config+0x274>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	b212      	sxth	r2, r2
 800162e:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001630:	4b34      	ldr	r3, [pc, #208]	@ (8001704 <bme280_config+0x274>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	7aba      	ldrb	r2, [r7, #10]
 8001638:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800163a:	7b3b      	ldrb	r3, [r7, #12]
 800163c:	b21b      	sxth	r3, r3
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	b219      	sxth	r1, r3
 8001644:	7afb      	ldrb	r3, [r7, #11]
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	b21a      	sxth	r2, r3
 800164a:	4b2e      	ldr	r3, [pc, #184]	@ (8001704 <bme280_config+0x274>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	430a      	orrs	r2, r1
 8001652:	b212      	sxth	r2, r2
 8001654:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001656:	7b3b      	ldrb	r3, [r7, #12]
 8001658:	091b      	lsrs	r3, r3, #4
 800165a:	b2db      	uxtb	r3, r3
 800165c:	b219      	sxth	r1, r3
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	b21a      	sxth	r2, r3
 8001664:	4b27      	ldr	r3, [pc, #156]	@ (8001704 <bme280_config+0x274>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	430a      	orrs	r2, r1
 800166c:	b212      	sxth	r2, r2
 800166e:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001670:	7bba      	ldrb	r2, [r7, #14]
 8001672:	4b24      	ldr	r3, [pc, #144]	@ (8001704 <bme280_config+0x274>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b252      	sxtb	r2, r2
 800167a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	71fb      	strb	r3, [r7, #7]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <bme280_config+0x274>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	799b      	ldrb	r3, [r3, #6]
 8001688:	71fb      	strb	r3, [r7, #7]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <bme280_config+0x278>)
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	2332      	movs	r3, #50	@ 0x32
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	2301      	movs	r3, #1
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2301      	movs	r3, #1
 800169c:	22f2      	movs	r2, #242	@ 0xf2
 800169e:	21ec      	movs	r1, #236	@ 0xec
 80016a0:	f008 ff66 	bl	800a570 <HAL_I2C_Mem_Write>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    data_ctrl = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	71fb      	strb	r3, [r7, #7]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <bme280_config+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	795b      	ldrb	r3, [r3, #5]
 80016b4:	b25a      	sxtb	r2, r3
 80016b6:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <bme280_config+0x274>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	799b      	ldrb	r3, [r3, #6]
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b25a      	sxtb	r2, r3
 80016c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001704 <bme280_config+0x274>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	799b      	ldrb	r3, [r3, #6]
 80016ca:	015b      	lsls	r3, r3, #5
 80016cc:	b25b      	sxtb	r3, r3
 80016ce:	4313      	orrs	r3, r2
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	71fb      	strb	r3, [r7, #7]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001708 <bme280_config+0x278>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	2332      	movs	r3, #50	@ 0x32
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2301      	movs	r3, #1
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	1dfb      	adds	r3, r7, #7
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	2301      	movs	r3, #1
 80016e8:	22f4      	movs	r2, #244	@ 0xf4
 80016ea:	21ec      	movs	r1, #236	@ 0xec
 80016ec:	f008 ff40 	bl	800a570 <HAL_I2C_Mem_Write>
 80016f0:	4603      	mov	r3, r0
 80016f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    data_ctrl = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	71fb      	strb	r3, [r7, #7]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016fa:	4b02      	ldr	r3, [pc, #8]	@ (8001704 <bme280_config+0x274>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	79db      	ldrb	r3, [r3, #7]
 8001700:	e004      	b.n	800170c <bme280_config+0x27c>
 8001702:	bf00      	nop
 8001704:	20000258 	.word	0x20000258
 8001708:	20000254 	.word	0x20000254
 800170c:	015b      	lsls	r3, r3, #5
 800170e:	b25a      	sxtb	r2, r3
 8001710:	4b5d      	ldr	r3, [pc, #372]	@ (8001888 <bme280_config+0x3f8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	791b      	ldrb	r3, [r3, #4]
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	b25b      	sxtb	r3, r3
 800171a:	4313      	orrs	r3, r2
 800171c:	b25b      	sxtb	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	71fb      	strb	r3, [r7, #7]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 8001722:	4b5a      	ldr	r3, [pc, #360]	@ (800188c <bme280_config+0x3fc>)
 8001724:	6818      	ldr	r0, [r3, #0]
 8001726:	2332      	movs	r3, #50	@ 0x32
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	2301      	movs	r3, #1
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	22f5      	movs	r2, #245	@ 0xf5
 8001736:	21ec      	movs	r1, #236	@ 0xec
 8001738:	f008 ff1a 	bl	800a570 <HAL_I2C_Mem_Write>
 800173c:	4603      	mov	r3, r0
 800173e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b


    HAL_Delay(100);
 8001742:	2064      	movs	r0, #100	@ 0x64
 8001744:	f007 f8e0 	bl	8008908 <HAL_Delay>

        int valid_readings = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	637b      	str	r3, [r7, #52]	@ 0x34
        float readings_sum = 0.0f;
 800174c:	f04f 0300 	mov.w	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	@ 0x30

        for(int i = 0; i < 100; i++) {  // Daha fazla okuma
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001756:	e069      	b.n	800182c <bme280_config+0x39c>
            bme280_update();
 8001758:	f000 f8dc 	bl	8001914 <bme280_update>

            // Geçerli basınç okuması kontrolü
            if (BME->pressure > 300.0f && BME->pressure < 1200.0f) {  // Makul basınç aralığı
 800175c:	4b4a      	ldr	r3, [pc, #296]	@ (8001888 <bme280_config+0x3f8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	edd3 7a06 	vldr	s15, [r3, #24]
 8001764:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8001890 <bme280_config+0x400>
 8001768:	eef4 7ac7 	vcmpe.f32	s15, s14
 800176c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001770:	dd56      	ble.n	8001820 <bme280_config+0x390>
 8001772:	4b45      	ldr	r3, [pc, #276]	@ (8001888 <bme280_config+0x3f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	edd3 7a06 	vldr	s15, [r3, #24]
 800177a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8001894 <bme280_config+0x404>
 800177e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001786:	d54b      	bpl.n	8001820 <bme280_config+0x390>
                float temp_altitude = 44330.0 * (1.0 - pow((BME->pressure / 1013.25), (1.0 / 5.255)));
 8001788:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <bme280_config+0x3f8>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	4618      	mov	r0, r3
 8001790:	f7fe fefa 	bl	8000588 <__aeabi_f2d>
 8001794:	a336      	add	r3, pc, #216	@ (adr r3, 8001870 <bme280_config+0x3e0>)
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	f7ff f877 	bl	800088c <__aeabi_ddiv>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	ec43 2b17 	vmov	d7, r2, r3
 80017a6:	ed9f 1b34 	vldr	d1, [pc, #208]	@ 8001878 <bme280_config+0x3e8>
 80017aa:	eeb0 0a47 	vmov.f32	s0, s14
 80017ae:	eef0 0a67 	vmov.f32	s1, s15
 80017b2:	f017 f8b1 	bl	8018918 <pow>
 80017b6:	ec53 2b10 	vmov	r2, r3, d0
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	4936      	ldr	r1, [pc, #216]	@ (8001898 <bme280_config+0x408>)
 80017c0:	f7fe fd82 	bl	80002c8 <__aeabi_dsub>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	a32c      	add	r3, pc, #176	@ (adr r3, 8001880 <bme280_config+0x3f0>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe ff31 	bl	8000638 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff fa23 	bl	8000c28 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24

                // Aşırı değerleri filtrele
                if (temp_altitude > -1000.0f && temp_altitude < 10000.0f) {
 80017e6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017ea:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800189c <bme280_config+0x40c>
 80017ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f6:	dd13      	ble.n	8001820 <bme280_config+0x390>
 80017f8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80017fc:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80018a0 <bme280_config+0x410>
 8001800:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	d50a      	bpl.n	8001820 <bme280_config+0x390>
                    readings_sum += temp_altitude;
 800180a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800180e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001816:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
                    valid_readings++;
 800181a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800181c:	3301      	adds	r3, #1
 800181e:	637b      	str	r3, [r7, #52]	@ 0x34
                }
            }
            HAL_Delay(20);  // Kısa bekleme
 8001820:	2014      	movs	r0, #20
 8001822:	f007 f871 	bl	8008908 <HAL_Delay>
        for(int i = 0; i < 100; i++) {  // Daha fazla okuma
 8001826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001828:	3301      	adds	r3, #1
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800182c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800182e:	2b63      	cmp	r3, #99	@ 0x63
 8001830:	dd92      	ble.n	8001758 <bme280_config+0x2c8>
        }

        // Yeterli geçerli okuma varsa ortalama al
        if (valid_readings > 50) {
 8001832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001834:	2b32      	cmp	r3, #50	@ 0x32
 8001836:	dd0d      	ble.n	8001854 <bme280_config+0x3c4>
            BME->base_altitude = readings_sum / valid_readings;
 8001838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800183a:	ee07 3a90 	vmov	s15, r3
 800183e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <bme280_config+0x3f8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 800184a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8001852:	e004      	b.n	800185e <bme280_config+0x3ce>
        } else {
            BME->base_altitude = 0.0f;  // Güvenli varsayılan değer
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <bme280_config+0x3f8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        bme280_update();
 800185e:	f000 f859 	bl	8001914 <bme280_update>

    UNUSED(retVal);
}
 8001862:	bf00      	nop
 8001864:	3738      	adds	r7, #56	@ 0x38
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	f3af 8000 	nop.w
 8001870:	00000000 	.word	0x00000000
 8001874:	408faa00 	.word	0x408faa00
 8001878:	ccd9456c 	.word	0xccd9456c
 800187c:	3fc85b95 	.word	0x3fc85b95
 8001880:	00000000 	.word	0x00000000
 8001884:	40e5a540 	.word	0x40e5a540
 8001888:	20000258 	.word	0x20000258
 800188c:	20000254 	.word	0x20000254
 8001890:	43960000 	.word	0x43960000
 8001894:	44960000 	.word	0x44960000
 8001898:	3ff00000 	.word	0x3ff00000
 800189c:	c47a0000 	.word	0xc47a0000
 80018a0:	461c4000 	.word	0x461c4000

080018a4 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af04      	add	r7, sp, #16
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 80018ae:	4a14      	ldr	r2, [pc, #80]	@ (8001900 <bme280_init+0x5c>)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80018b4:	4a13      	ldr	r2, [pc, #76]	@ (8001904 <bme280_init+0x60>)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80018ba:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <bme280_init+0x5c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a12      	ldr	r2, [pc, #72]	@ (8001908 <bme280_init+0x64>)
 80018c0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80018c2:	4b12      	ldr	r3, [pc, #72]	@ (800190c <bme280_init+0x68>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
*/


    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <bme280_init+0x60>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	2332      	movs	r3, #50	@ 0x32
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	2301      	movs	r3, #1
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2301      	movs	r3, #1
 80018dc:	22d0      	movs	r2, #208	@ 0xd0
 80018de:	21ec      	movs	r1, #236	@ 0xec
 80018e0:	f008 ff40 	bl	800a764 <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80018e4:	7b3b      	ldrb	r3, [r7, #12]
 80018e6:	2b60      	cmp	r3, #96	@ 0x60
 80018e8:	d103      	bne.n	80018f2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <bme280_init+0x6c>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80018f0:	e002      	b.n	80018f8 <bme280_init+0x54>
        is_BME_ok = 0;
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <bme280_init+0x6c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000258 	.word	0x20000258
 8001904:	20000254 	.word	0x20000254
 8001908:	20001d68 	.word	0x20001d68
 800190c:	2000025c 	.word	0x2000025c
 8001910:	20001df8 	.word	0x20001df8

08001914 <bme280_update>:

void bme280_update() {
 8001914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001918:	b0d2      	sub	sp, #328	@ 0x148
 800191a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800191c:	f7ff fce0 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001920:	4b1e      	ldr	r3, [pc, #120]	@ (800199c <bme280_update+0x88>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001928:	2b01      	cmp	r3, #1
 800192a:	f040 840d 	bne.w	8002148 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <bme280_update+0x8c>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d112      	bne.n	800195c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001936:	4a1a      	ldr	r2, [pc, #104]	@ (80019a0 <bme280_update+0x8c>)
 8001938:	2301      	movs	r3, #1
 800193a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800193c:	f006 ffd8 	bl	80088f0 <HAL_GetTick>
 8001940:	ee07 0a90 	vmov	s15, r0
 8001944:	4b15      	ldr	r3, [pc, #84]	@ (800199c <bme280_update+0x88>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800194c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <bme280_update+0x88>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	e041      	b.n	80019e0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800195c:	f006 ffc8 	bl	80088f0 <HAL_GetTick>
 8001960:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001964:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <bme280_update+0x88>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800197c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001980:	dd12      	ble.n	80019a8 <bme280_update+0x94>
 8001982:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800198e:	4b03      	ldr	r3, [pc, #12]	@ (800199c <bme280_update+0x88>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	e007      	b.n	80019ac <bme280_update+0x98>
 800199c:	20000258 	.word	0x20000258
 80019a0:	2000025c 	.word	0x2000025c
 80019a4:	00000000 	.word	0x00000000
 80019a8:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 80019a4 <bme280_update+0x90>
 80019ac:	4bda      	ldr	r3, [pc, #872]	@ (8001d18 <bme280_update+0x404>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80019b4:	4bd8      	ldr	r3, [pc, #864]	@ (8001d18 <bme280_update+0x404>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80019bc:	4bd6      	ldr	r3, [pc, #856]	@ (8001d18 <bme280_update+0x404>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001d1c <bme280_update+0x408>
 80019c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019c8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80019cc:	4bd2      	ldr	r3, [pc, #840]	@ (8001d18 <bme280_update+0x404>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80019d4:	ee07 2a90 	vmov	s15, r2
 80019d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019dc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80019e0:	4bcd      	ldr	r3, [pc, #820]	@ (8001d18 <bme280_update+0x404>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80019ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019ee:	10da      	asrs	r2, r3, #3
 80019f0:	4bc9      	ldr	r3, [pc, #804]	@ (8001d18 <bme280_update+0x404>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	1ad2      	subs	r2, r2, r3
 80019fc:	4bc6      	ldr	r3, [pc, #792]	@ (8001d18 <bme280_update+0x404>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a06:	fb02 f303 	mul.w	r3, r2, r3
 8001a0a:	12db      	asrs	r3, r3, #11
 8001a0c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001a10:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001a14:	111a      	asrs	r2, r3, #4
 8001a16:	4bc0      	ldr	r3, [pc, #768]	@ (8001d18 <bme280_update+0x404>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	1ad1      	subs	r1, r2, r3
 8001a20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001a24:	111a      	asrs	r2, r3, #4
 8001a26:	4bbc      	ldr	r3, [pc, #752]	@ (8001d18 <bme280_update+0x404>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	881b      	ldrh	r3, [r3, #0]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	131a      	asrs	r2, r3, #12
 8001a36:	4bb8      	ldr	r3, [pc, #736]	@ (8001d18 <bme280_update+0x404>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	139b      	asrs	r3, r3, #14
 8001a46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 8001a4a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001a4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a52:	4413      	add	r3, r2
 8001a54:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001a58:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3380      	adds	r3, #128	@ 0x80
 8001a64:	121b      	asrs	r3, r3, #8
 8001a66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 8001a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a76:	4ba8      	ldr	r3, [pc, #672]	@ (8001d18 <bme280_update+0x404>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001d20 <bme280_update+0x40c>
 8001a7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a82:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001a86:	4ba4      	ldr	r3, [pc, #656]	@ (8001d18 <bme280_update+0x404>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	17da      	asrs	r2, r3, #31
 8001a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a90:	657a      	str	r2, [r7, #84]	@ 0x54
 8001a92:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001a96:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 8001a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001a9e:	17da      	asrs	r2, r3, #31
 8001aa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001aa4:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001aa8:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8001aac:	460b      	mov	r3, r1
 8001aae:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8001ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001aba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001abc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ac0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 8001ac4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ac8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001acc:	fb03 f102 	mul.w	r1, r3, r2
 8001ad0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ad4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad8:	fb02 f303 	mul.w	r3, r2, r3
 8001adc:	18ca      	adds	r2, r1, r3
 8001ade:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae2:	fba3 4503 	umull	r4, r5, r3, r3
 8001ae6:	1953      	adds	r3, r2, r5
 8001ae8:	461d      	mov	r5, r3
 8001aea:	4b8b      	ldr	r3, [pc, #556]	@ (8001d18 <bme280_update+0x404>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	17da      	asrs	r2, r3, #31
 8001af8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001afc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001b00:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8001b04:	4603      	mov	r3, r0
 8001b06:	fb03 f205 	mul.w	r2, r3, r5
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	fb04 f303 	mul.w	r3, r4, r3
 8001b10:	4413      	add	r3, r2
 8001b12:	4602      	mov	r2, r0
 8001b14:	fba4 1202 	umull	r1, r2, r4, r2
 8001b18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001b1c:	460a      	mov	r2, r1
 8001b1e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b22:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b26:	4413      	add	r3, r2
 8001b28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b2c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001b30:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001b34:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001b38:	4b77      	ldr	r3, [pc, #476]	@ (8001d18 <bme280_update+0x404>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	17da      	asrs	r2, r3, #31
 8001b46:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b4a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001b4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b52:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001b56:	462a      	mov	r2, r5
 8001b58:	fb02 f203 	mul.w	r2, r2, r3
 8001b5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b60:	4621      	mov	r1, r4
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	441a      	add	r2, r3
 8001b68:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001b72:	eb02 030b 	add.w	r3, r2, fp
 8001b76:	469b      	mov	fp, r3
 8001b78:	f04f 0000 	mov.w	r0, #0
 8001b7c:	f04f 0100 	mov.w	r1, #0
 8001b80:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001b84:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001b88:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001b8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b90:	1814      	adds	r4, r2, r0
 8001b92:	643c      	str	r4, [r7, #64]	@ 0x40
 8001b94:	414b      	adcs	r3, r1
 8001b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b98:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001b9c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001ba0:	4b5d      	ldr	r3, [pc, #372]	@ (8001d18 <bme280_update+0x404>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	17da      	asrs	r2, r3, #31
 8001bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001bb2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001bb6:	f04f 0000 	mov.w	r0, #0
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001bc2:	00d9      	lsls	r1, r3, #3
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001bca:	1814      	adds	r4, r2, r0
 8001bcc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001bce:	414b      	adcs	r3, r1
 8001bd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bd2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001bd6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001bda:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001bde:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001be2:	fb03 f102 	mul.w	r1, r3, r2
 8001be6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001bea:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bee:	fb02 f303 	mul.w	r3, r2, r3
 8001bf2:	18ca      	adds	r2, r1, r3
 8001bf4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001bf8:	fba3 8903 	umull	r8, r9, r3, r3
 8001bfc:	eb02 0309 	add.w	r3, r2, r9
 8001c00:	4699      	mov	r9, r3
 8001c02:	4b45      	ldr	r3, [pc, #276]	@ (8001d18 <bme280_update+0x404>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	17da      	asrs	r2, r3, #31
 8001c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001c14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001c18:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	fb03 f209 	mul.w	r2, r3, r9
 8001c22:	460b      	mov	r3, r1
 8001c24:	fb08 f303 	mul.w	r3, r8, r3
 8001c28:	4413      	add	r3, r2
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	fba8 1202 	umull	r1, r2, r8, r2
 8001c30:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001c34:	460a      	mov	r2, r1
 8001c36:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001c3a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001c3e:	4413      	add	r3, r2
 8001c40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001c44:	f04f 0000 	mov.w	r0, #0
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001c50:	4623      	mov	r3, r4
 8001c52:	0a18      	lsrs	r0, r3, #8
 8001c54:	462b      	mov	r3, r5
 8001c56:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	1219      	asrs	r1, r3, #8
 8001c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d18 <bme280_update+0x404>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	17da      	asrs	r2, r3, #31
 8001c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c70:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001c74:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001c78:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001c7c:	464a      	mov	r2, r9
 8001c7e:	fb02 f203 	mul.w	r2, r2, r3
 8001c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001c86:	4644      	mov	r4, r8
 8001c88:	fb04 f303 	mul.w	r3, r4, r3
 8001c8c:	441a      	add	r2, r3
 8001c8e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001c92:	4644      	mov	r4, r8
 8001c94:	fba3 4304 	umull	r4, r3, r3, r4
 8001c98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001c9c:	4623      	mov	r3, r4
 8001c9e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001ca2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ca6:	18d3      	adds	r3, r2, r3
 8001ca8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001cac:	f04f 0200 	mov.w	r2, #0
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001cb8:	464c      	mov	r4, r9
 8001cba:	0323      	lsls	r3, r4, #12
 8001cbc:	4644      	mov	r4, r8
 8001cbe:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001cc2:	4644      	mov	r4, r8
 8001cc4:	0322      	lsls	r2, r4, #12
 8001cc6:	1884      	adds	r4, r0, r2
 8001cc8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001cca:	eb41 0303 	adc.w	r3, r1, r3
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cd0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001cd4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001cd8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001cdc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001ce0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001ce4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d18 <bme280_update+0x404>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	88db      	ldrh	r3, [r3, #6]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001cf8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001cfc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001d00:	462b      	mov	r3, r5
 8001d02:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001d06:	4642      	mov	r2, r8
 8001d08:	fb02 f203 	mul.w	r2, r2, r3
 8001d0c:	464b      	mov	r3, r9
 8001d0e:	4621      	mov	r1, r4
 8001d10:	fb01 f303 	mul.w	r3, r1, r3
 8001d14:	4413      	add	r3, r2
 8001d16:	e005      	b.n	8001d24 <bme280_update+0x410>
 8001d18:	20000258 	.word	0x20000258
 8001d1c:	447a0000 	.word	0x447a0000
 8001d20:	42c80000 	.word	0x42c80000
 8001d24:	4622      	mov	r2, r4
 8001d26:	4641      	mov	r1, r8
 8001d28:	fba2 1201 	umull	r1, r2, r2, r1
 8001d2c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001d30:	460a      	mov	r2, r1
 8001d32:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001d36:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	104a      	asrs	r2, r1, #1
 8001d50:	4629      	mov	r1, r5
 8001d52:	17cb      	asrs	r3, r1, #31
 8001d54:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001d58:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	d106      	bne.n	8001d6e <bme280_update+0x45a>
        {
            P = 0;
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001d6c:	e14b      	b.n	8002006 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001d6e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001d72:	2100      	movs	r1, #0
 8001d74:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001d78:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8001d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d80:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001d84:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001d88:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d8c:	f04f 0000 	mov.w	r0, #0
 8001d90:	f04f 0100 	mov.w	r1, #0
 8001d94:	07d9      	lsls	r1, r3, #31
 8001d96:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001d9a:	07d0      	lsls	r0, r2, #31
 8001d9c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001da0:	1a84      	subs	r4, r0, r2
 8001da2:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001da6:	eb61 0303 	sbc.w	r3, r1, r3
 8001daa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001dae:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001db2:	4622      	mov	r2, r4
 8001db4:	462b      	mov	r3, r5
 8001db6:	1891      	adds	r1, r2, r2
 8001db8:	6239      	str	r1, [r7, #32]
 8001dba:	415b      	adcs	r3, r3
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dc2:	4621      	mov	r1, r4
 8001dc4:	1851      	adds	r1, r2, r1
 8001dc6:	61b9      	str	r1, [r7, #24]
 8001dc8:	4629      	mov	r1, r5
 8001dca:	414b      	adcs	r3, r1
 8001dcc:	61fb      	str	r3, [r7, #28]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001dda:	4649      	mov	r1, r9
 8001ddc:	018b      	lsls	r3, r1, #6
 8001dde:	4641      	mov	r1, r8
 8001de0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001de4:	4641      	mov	r1, r8
 8001de6:	018a      	lsls	r2, r1, #6
 8001de8:	4641      	mov	r1, r8
 8001dea:	1889      	adds	r1, r1, r2
 8001dec:	6139      	str	r1, [r7, #16]
 8001dee:	4649      	mov	r1, r9
 8001df0:	eb43 0101 	adc.w	r1, r3, r1
 8001df4:	6179      	str	r1, [r7, #20]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001e02:	4649      	mov	r1, r9
 8001e04:	008b      	lsls	r3, r1, #2
 8001e06:	4641      	mov	r1, r8
 8001e08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e0c:	4641      	mov	r1, r8
 8001e0e:	008a      	lsls	r2, r1, #2
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	4603      	mov	r3, r0
 8001e16:	4622      	mov	r2, r4
 8001e18:	189b      	adds	r3, r3, r2
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	462a      	mov	r2, r5
 8001e20:	eb42 0303 	adc.w	r3, r2, r3
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001e32:	4649      	mov	r1, r9
 8001e34:	008b      	lsls	r3, r1, #2
 8001e36:	4641      	mov	r1, r8
 8001e38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	008a      	lsls	r2, r1, #2
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	4603      	mov	r3, r0
 8001e46:	4622      	mov	r2, r4
 8001e48:	189b      	adds	r3, r3, r2
 8001e4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001e4e:	462b      	mov	r3, r5
 8001e50:	460a      	mov	r2, r1
 8001e52:	eb42 0303 	adc.w	r3, r2, r3
 8001e56:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001e5a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001e62:	f7ff f83f 	bl	8000ee4 <__aeabi_ldivmod>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001e6e:	4bb9      	ldr	r3, [pc, #740]	@ (8002154 <bme280_update+0x840>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	17da      	asrs	r2, r3, #31
 8001e7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001e7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001e80:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001e84:	f04f 0000 	mov.w	r0, #0
 8001e88:	f04f 0100 	mov.w	r1, #0
 8001e8c:	0b50      	lsrs	r0, r2, #13
 8001e8e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001e92:	1359      	asrs	r1, r3, #13
 8001e94:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001e98:	462b      	mov	r3, r5
 8001e9a:	fb00 f203 	mul.w	r2, r0, r3
 8001e9e:	4623      	mov	r3, r4
 8001ea0:	fb03 f301 	mul.w	r3, r3, r1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4622      	mov	r2, r4
 8001ea8:	fba2 1200 	umull	r1, r2, r2, r0
 8001eac:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001eb6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001eba:	4413      	add	r3, r2
 8001ebc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001ec0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001ec4:	f04f 0000 	mov.w	r0, #0
 8001ec8:	f04f 0100 	mov.w	r1, #0
 8001ecc:	0b50      	lsrs	r0, r2, #13
 8001ece:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001ed2:	1359      	asrs	r1, r3, #13
 8001ed4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001ed8:	462b      	mov	r3, r5
 8001eda:	fb00 f203 	mul.w	r2, r0, r3
 8001ede:	4623      	mov	r3, r4
 8001ee0:	fb03 f301 	mul.w	r3, r3, r1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	4622      	mov	r2, r4
 8001ee8:	fba2 1200 	umull	r1, r2, r2, r0
 8001eec:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001ef0:	460a      	mov	r2, r1
 8001ef2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001ef6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001efa:	4413      	add	r3, r2
 8001efc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	0e4a      	lsrs	r2, r1, #25
 8001f10:	4629      	mov	r1, r5
 8001f12:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001f16:	4629      	mov	r1, r5
 8001f18:	164b      	asrs	r3, r1, #25
 8001f1a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001f1e:	4b8d      	ldr	r3, [pc, #564]	@ (8002154 <bme280_update+0x840>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f28:	b21b      	sxth	r3, r3
 8001f2a:	17da      	asrs	r2, r3, #31
 8001f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001f30:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001f34:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001f38:	462a      	mov	r2, r5
 8001f3a:	fb02 f203 	mul.w	r2, r2, r3
 8001f3e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001f42:	4621      	mov	r1, r4
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001f4e:	4621      	mov	r1, r4
 8001f50:	fba2 1201 	umull	r1, r2, r2, r1
 8001f54:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f58:	460a      	mov	r2, r1
 8001f5a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001f5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001f62:	4413      	add	r3, r2
 8001f64:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	f04f 0300 	mov.w	r3, #0
 8001f70:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001f74:	4621      	mov	r1, r4
 8001f76:	0cca      	lsrs	r2, r1, #19
 8001f78:	4629      	mov	r1, r5
 8001f7a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001f7e:	4629      	mov	r1, r5
 8001f80:	14cb      	asrs	r3, r1, #19
 8001f82:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001f86:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001f8a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001f8e:	1884      	adds	r4, r0, r2
 8001f90:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001f92:	eb41 0303 	adc.w	r3, r1, r3
 8001f96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001f98:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001f9c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	1889      	adds	r1, r1, r2
 8001fa4:	6639      	str	r1, [r7, #96]	@ 0x60
 8001fa6:	4629      	mov	r1, r5
 8001fa8:	eb43 0101 	adc.w	r1, r3, r1
 8001fac:	6679      	str	r1, [r7, #100]	@ 0x64
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001fba:	4623      	mov	r3, r4
 8001fbc:	0a18      	lsrs	r0, r3, #8
 8001fbe:	462b      	mov	r3, r5
 8001fc0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001fc4:	462b      	mov	r3, r5
 8001fc6:	1219      	asrs	r1, r3, #8
 8001fc8:	4b62      	ldr	r3, [pc, #392]	@ (8002154 <bme280_update+0x840>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	17da      	asrs	r2, r3, #31
 8001fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001fd8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f04f 0300 	mov.w	r3, #0
 8001fe2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001fe6:	464c      	mov	r4, r9
 8001fe8:	0123      	lsls	r3, r4, #4
 8001fea:	4644      	mov	r4, r8
 8001fec:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ff0:	4644      	mov	r4, r8
 8001ff2:	0122      	lsls	r2, r4, #4
 8001ff4:	1884      	adds	r4, r0, r2
 8001ff6:	603c      	str	r4, [r7, #0]
 8001ff8:	eb41 0303 	adc.w	r3, r1, r3
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002002:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8002006:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 800200a:	f7fe ff2d 	bl	8000e68 <__aeabi_l2f>
 800200e:	4603      	mov	r3, r0
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fab9 	bl	8000588 <__aeabi_f2d>
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b4f      	ldr	r3, [pc, #316]	@ (8002158 <bme280_update+0x844>)
 800201c:	f7fe fc36 	bl	800088c <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	4b4b      	ldr	r3, [pc, #300]	@ (800215c <bme280_update+0x848>)
 800202e:	f7fe fc2d 	bl	800088c <__aeabi_ddiv>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4947      	ldr	r1, [pc, #284]	@ (8002154 <bme280_update+0x840>)
 8002038:	680c      	ldr	r4, [r1, #0]
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fdf3 	bl	8000c28 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8002046:	4b43      	ldr	r3, [pc, #268]	@ (8002154 <bme280_update+0x840>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8002050:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002054:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8002058:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 800205c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002060:	039a      	lsls	r2, r3, #14
 8002062:	4b3c      	ldr	r3, [pc, #240]	@ (8002154 <bme280_update+0x840>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800206c:	051b      	lsls	r3, r3, #20
 800206e:	1ad2      	subs	r2, r2, r3
 8002070:	4b38      	ldr	r3, [pc, #224]	@ (8002154 <bme280_update+0x840>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800207a:	4619      	mov	r1, r3
 800207c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002080:	fb01 f303 	mul.w	r3, r1, r3
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 800208a:	0bdb      	lsrs	r3, r3, #15
 800208c:	4a31      	ldr	r2, [pc, #196]	@ (8002154 <bme280_update+0x840>)
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8002096:	4611      	mov	r1, r2
 8002098:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 800209c:	fb01 f202 	mul.w	r2, r1, r2
 80020a0:	0a92      	lsrs	r2, r2, #10
 80020a2:	492c      	ldr	r1, [pc, #176]	@ (8002154 <bme280_update+0x840>)
 80020a4:	6809      	ldr	r1, [r1, #0]
 80020a6:	6809      	ldr	r1, [r1, #0]
 80020a8:	7f09      	ldrb	r1, [r1, #28]
 80020aa:	4608      	mov	r0, r1
 80020ac:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 80020b0:	fb00 f101 	mul.w	r1, r0, r1
 80020b4:	0ac9      	lsrs	r1, r1, #11
 80020b6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 80020ba:	fb01 f202 	mul.w	r2, r1, r2
 80020be:	0a92      	lsrs	r2, r2, #10
 80020c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80020c4:	4923      	ldr	r1, [pc, #140]	@ (8002154 <bme280_update+0x840>)
 80020c6:	6809      	ldr	r1, [r1, #0]
 80020c8:	6809      	ldr	r1, [r1, #0]
 80020ca:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80020ce:	fb01 f202 	mul.w	r2, r1, r2
 80020d2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 80020d6:	0b92      	lsrs	r2, r2, #14
 80020d8:	fb02 f303 	mul.w	r3, r2, r3
 80020dc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 80020e0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80020e4:	0bdb      	lsrs	r3, r3, #15
 80020e6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 80020ea:	0bd2      	lsrs	r2, r2, #15
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	09db      	lsrs	r3, r3, #7
 80020f2:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <bme280_update+0x840>)
 80020f4:	6812      	ldr	r2, [r2, #0]
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	7e12      	ldrb	r2, [r2, #24]
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 800210a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800210e:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002112:	bf28      	it	cs
 8002114:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002118:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800211c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002120:	0b1b      	lsrs	r3, r3, #12
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <bme280_update+0x840>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002160 <bme280_update+0x84c>
 8002132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002136:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800213a:	f7ff f955 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800213e:	4b05      	ldr	r3, [pc, #20]	@ (8002154 <bme280_update+0x840>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002148:	bf00      	nop
 800214a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800214e:	46bd      	mov	sp, r7
 8002150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002154:	20000258 	.word	0x20000258
 8002158:	40700000 	.word	0x40700000
 800215c:	40590000 	.word	0x40590000
 8002160:	44800000 	.word	0x44800000

08002164 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af04      	add	r7, sp, #16
 800216a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	705a      	strb	r2, [r3, #1]
	BMI->flags.isAccelDmaComplete = 0;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	709a      	strb	r2, [r3, #2]
	BMI->flags.isGyroDmaComplete = 0;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	711a      	strb	r2, [r3, #4]
	is_time_updated = 0;
 800218e:	4b24      	ldr	r3, [pc, #144]	@ (8002220 <bmi088_init+0xbc>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002194:	4b23      	ldr	r3, [pc, #140]	@ (8002224 <bmi088_init+0xc0>)
 8002196:	2200      	movs	r2, #0
 8002198:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d107      	bne.n	80021b6 <bmi088_init+0x52>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 80021a6:	2101      	movs	r1, #1
 80021a8:	2018      	movs	r0, #24
 80021aa:	f011 fbf1 	bl	8013990 <calloc>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	619a      	str	r2, [r3, #24]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6918      	ldr	r0, [r3, #16]
 80021ba:	2332      	movs	r3, #50	@ 0x32
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	2301      	movs	r3, #1
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	f107 030c 	add.w	r3, r7, #12
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	2301      	movs	r3, #1
 80021ca:	2200      	movs	r2, #0
 80021cc:	2130      	movs	r1, #48	@ 0x30
 80021ce:	f008 fac9 	bl	800a764 <HAL_I2C_Mem_Read>
 80021d2:	4603      	mov	r3, r0
 80021d4:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6918      	ldr	r0, [r3, #16]
 80021da:	2332      	movs	r3, #50	@ 0x32
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	3301      	adds	r3, #1
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2301      	movs	r3, #1
 80021ec:	2200      	movs	r2, #0
 80021ee:	21d0      	movs	r1, #208	@ 0xd0
 80021f0:	f008 fab8 	bl	800a764 <HAL_I2C_Mem_Read>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80021f8:	7b3b      	ldrb	r3, [r7, #12]
 80021fa:	2b1e      	cmp	r3, #30
 80021fc:	d003      	beq.n	8002206 <bmi088_init+0xa2>
	{
		ret_val = ret_val | 0x01;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 8002206:	7b7b      	ldrb	r3, [r7, #13]
 8002208:	2b0f      	cmp	r3, #15
 800220a:	d003      	beq.n	8002214 <bmi088_init+0xb0>
	{
		ret_val = ret_val | 0x02;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8002214:	7bfb      	ldrb	r3, [r7, #15]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2000025d 	.word	0x2000025d
 8002224:	2000025e 	.word	0x2000025e

08002228 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af04      	add	r7, sp, #16
 800222e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002236:	4618      	mov	r0, r3
 8002238:	f007 f8c3 	bl	80093c2 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002242:	4618      	mov	r0, r3
 8002244:	f007 f8bd 	bl	80093c2 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 800224c:	2301      	movs	r3, #1
 800224e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6918      	ldr	r0, [r3, #16]
 8002254:	2364      	movs	r3, #100	@ 0x64
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	227c      	movs	r2, #124	@ 0x7c
 8002266:	2130      	movs	r1, #48	@ 0x30
 8002268:	f008 f982 	bl	800a570 <HAL_I2C_Mem_Write>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4313      	orrs	r3, r2
 8002274:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6918      	ldr	r0, [r3, #16]
 800227e:	2364      	movs	r3, #100	@ 0x64
 8002280:	9302      	str	r3, [sp, #8]
 8002282:	2301      	movs	r3, #1
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	f107 030c 	add.w	r3, r7, #12
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	2301      	movs	r3, #1
 800228e:	227d      	movs	r2, #125	@ 0x7d
 8002290:	2130      	movs	r1, #48	@ 0x30
 8002292:	f008 f96d 	bl	800a570 <HAL_I2C_Mem_Write>
 8002296:	4603      	mov	r3, r0
 8002298:	461a      	mov	r2, r3
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	4313      	orrs	r3, r2
 800229e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 80022a0:	2014      	movs	r0, #20
 80022a2:	f006 fb31 	bl	8008908 <HAL_Delay>

	buf[0] = ACC_RESET;
 80022a6:	23b6      	movs	r3, #182	@ 0xb6
 80022a8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6918      	ldr	r0, [r3, #16]
 80022ae:	2364      	movs	r3, #100	@ 0x64
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2301      	movs	r3, #1
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	f107 030c 	add.w	r3, r7, #12
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2301      	movs	r3, #1
 80022be:	227e      	movs	r2, #126	@ 0x7e
 80022c0:	2130      	movs	r1, #48	@ 0x30
 80022c2:	f008 f955 	bl	800a570 <HAL_I2C_Mem_Write>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d002      	beq.n	80022dc <bmi088_config+0xb4>
 80022d6:	4bb4      	ldr	r3, [pc, #720]	@ (80025a8 <bmi088_config+0x380>)
 80022d8:	22a4      	movs	r2, #164	@ 0xa4
 80022da:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80022dc:	200a      	movs	r0, #10
 80022de:	f006 fb13 	bl	8008908 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80022e2:	23b0      	movs	r3, #176	@ 0xb0
 80022e4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6918      	ldr	r0, [r3, #16]
 80022ea:	2364      	movs	r3, #100	@ 0x64
 80022ec:	9302      	str	r3, [sp, #8]
 80022ee:	2301      	movs	r3, #1
 80022f0:	9301      	str	r3, [sp, #4]
 80022f2:	f107 030c 	add.w	r3, r7, #12
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2301      	movs	r3, #1
 80022fa:	227e      	movs	r2, #126	@ 0x7e
 80022fc:	2130      	movs	r1, #48	@ 0x30
 80022fe:	f008 f937 	bl	800a570 <HAL_I2C_Mem_Write>
 8002302:	4603      	mov	r3, r0
 8002304:	461a      	mov	r2, r3
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	4313      	orrs	r3, r2
 800230a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <bmi088_config+0xf0>
 8002312:	4ba5      	ldr	r3, [pc, #660]	@ (80025a8 <bmi088_config+0x380>)
 8002314:	22a9      	movs	r2, #169	@ 0xa9
 8002316:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002318:	200a      	movs	r0, #10
 800231a:	f006 faf5 	bl	8008908 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800231e:	23b6      	movs	r3, #182	@ 0xb6
 8002320:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6918      	ldr	r0, [r3, #16]
 8002326:	2364      	movs	r3, #100	@ 0x64
 8002328:	9302      	str	r3, [sp, #8]
 800232a:	2301      	movs	r3, #1
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	f107 030c 	add.w	r3, r7, #12
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2301      	movs	r3, #1
 8002336:	2214      	movs	r2, #20
 8002338:	21d0      	movs	r1, #208	@ 0xd0
 800233a:	f008 f919 	bl	800a570 <HAL_I2C_Mem_Write>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4313      	orrs	r3, r2
 8002346:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <bmi088_config+0x12c>
 800234e:	4b96      	ldr	r3, [pc, #600]	@ (80025a8 <bmi088_config+0x380>)
 8002350:	22ae      	movs	r2, #174	@ 0xae
 8002352:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002354:	200a      	movs	r0, #10
 8002356:	f006 fad7 	bl	8008908 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	7b9b      	ldrb	r3, [r3, #14]
 800235e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6918      	ldr	r0, [r3, #16]
 8002364:	2364      	movs	r3, #100	@ 0x64
 8002366:	9302      	str	r3, [sp, #8]
 8002368:	2301      	movs	r3, #1
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2301      	movs	r3, #1
 8002374:	220f      	movs	r2, #15
 8002376:	21d0      	movs	r1, #208	@ 0xd0
 8002378:	f008 f8fa 	bl	800a570 <HAL_I2C_Mem_Write>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	4313      	orrs	r3, r2
 8002384:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002386:	7bfb      	ldrb	r3, [r7, #15]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <bmi088_config+0x16a>
 800238c:	4b86      	ldr	r3, [pc, #536]	@ (80025a8 <bmi088_config+0x380>)
 800238e:	22b4      	movs	r2, #180	@ 0xb4
 8002390:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	7b5b      	ldrb	r3, [r3, #13]
 8002396:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6918      	ldr	r0, [r3, #16]
 800239c:	2314      	movs	r3, #20
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	2301      	movs	r3, #1
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	2301      	movs	r3, #1
 80023ac:	2210      	movs	r2, #16
 80023ae:	21d0      	movs	r1, #208	@ 0xd0
 80023b0:	f008 f8de 	bl	800a570 <HAL_I2C_Mem_Write>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <bmi088_config+0x1a2>
 80023c4:	4b78      	ldr	r3, [pc, #480]	@ (80025a8 <bmi088_config+0x380>)
 80023c6:	22b8      	movs	r2, #184	@ 0xb8
 80023c8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	7b1b      	ldrb	r3, [r3, #12]
 80023ce:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6918      	ldr	r0, [r3, #16]
 80023d4:	2314      	movs	r3, #20
 80023d6:	9302      	str	r3, [sp, #8]
 80023d8:	2301      	movs	r3, #1
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	9300      	str	r3, [sp, #0]
 80023e2:	2301      	movs	r3, #1
 80023e4:	2211      	movs	r2, #17
 80023e6:	21d0      	movs	r1, #208	@ 0xd0
 80023e8:	f008 f8c2 	bl	800a570 <HAL_I2C_Mem_Write>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <bmi088_config+0x1da>
 80023fc:	4b6a      	ldr	r3, [pc, #424]	@ (80025a8 <bmi088_config+0x380>)
 80023fe:	22bc      	movs	r2, #188	@ 0xbc
 8002400:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 8002402:	2014      	movs	r0, #20
 8002404:	f006 fa80 	bl	8008908 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6918      	ldr	r0, [r3, #16]
 8002410:	2314      	movs	r3, #20
 8002412:	9302      	str	r3, [sp, #8]
 8002414:	2301      	movs	r3, #1
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	f107 030c 	add.w	r3, r7, #12
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2301      	movs	r3, #1
 8002420:	2215      	movs	r2, #21
 8002422:	21d0      	movs	r1, #208	@ 0xd0
 8002424:	f008 f8a4 	bl	800a570 <HAL_I2C_Mem_Write>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	4313      	orrs	r3, r2
 8002430:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <bmi088_config+0x216>
 8002438:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <bmi088_config+0x380>)
 800243a:	22c2      	movs	r2, #194	@ 0xc2
 800243c:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800243e:	2305      	movs	r3, #5
 8002440:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6918      	ldr	r0, [r3, #16]
 8002446:	2314      	movs	r3, #20
 8002448:	9302      	str	r3, [sp, #8]
 800244a:	2301      	movs	r3, #1
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2301      	movs	r3, #1
 8002456:	2216      	movs	r2, #22
 8002458:	21d0      	movs	r1, #208	@ 0xd0
 800245a:	f008 f889 	bl	800a570 <HAL_I2C_Mem_Write>
 800245e:	4603      	mov	r3, r0
 8002460:	461a      	mov	r2, r3
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	4313      	orrs	r3, r2
 8002466:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <bmi088_config+0x24c>
 800246e:	4b4e      	ldr	r3, [pc, #312]	@ (80025a8 <bmi088_config+0x380>)
 8002470:	22c6      	movs	r2, #198	@ 0xc6
 8002472:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002474:	2381      	movs	r3, #129	@ 0x81
 8002476:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6918      	ldr	r0, [r3, #16]
 800247c:	2314      	movs	r3, #20
 800247e:	9302      	str	r3, [sp, #8]
 8002480:	2301      	movs	r3, #1
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	2301      	movs	r3, #1
 800248c:	2218      	movs	r2, #24
 800248e:	21d0      	movs	r1, #208	@ 0xd0
 8002490:	f008 f86e 	bl	800a570 <HAL_I2C_Mem_Write>
 8002494:	4603      	mov	r3, r0
 8002496:	461a      	mov	r2, r3
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	4313      	orrs	r3, r2
 800249c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <bmi088_config+0x282>
 80024a4:	4b40      	ldr	r3, [pc, #256]	@ (80025a8 <bmi088_config+0x380>)
 80024a6:	22ca      	movs	r2, #202	@ 0xca
 80024a8:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 80024aa:	2304      	movs	r3, #4
 80024ac:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6918      	ldr	r0, [r3, #16]
 80024b2:	2314      	movs	r3, #20
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	2301      	movs	r3, #1
 80024b8:	9301      	str	r3, [sp, #4]
 80024ba:	f107 030c 	add.w	r3, r7, #12
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2301      	movs	r3, #1
 80024c2:	227d      	movs	r2, #125	@ 0x7d
 80024c4:	2130      	movs	r1, #48	@ 0x30
 80024c6:	f008 f853 	bl	800a570 <HAL_I2C_Mem_Write>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	7bfb      	ldrb	r3, [r7, #15]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <bmi088_config+0x2b8>
 80024da:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <bmi088_config+0x380>)
 80024dc:	22cf      	movs	r2, #207	@ 0xcf
 80024de:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80024e0:	2008      	movs	r0, #8
 80024e2:	f006 fa11 	bl	8008908 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7a1b      	ldrb	r3, [r3, #8]
 80024ea:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6918      	ldr	r0, [r3, #16]
 80024f0:	2314      	movs	r3, #20
 80024f2:	9302      	str	r3, [sp, #8]
 80024f4:	2301      	movs	r3, #1
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	2301      	movs	r3, #1
 8002500:	227c      	movs	r2, #124	@ 0x7c
 8002502:	2130      	movs	r1, #48	@ 0x30
 8002504:	f008 f834 	bl	800a570 <HAL_I2C_Mem_Write>
 8002508:	4603      	mov	r3, r0
 800250a:	461a      	mov	r2, r3
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	4313      	orrs	r3, r2
 8002510:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <bmi088_config+0x2f6>
 8002518:	4b23      	ldr	r3, [pc, #140]	@ (80025a8 <bmi088_config+0x380>)
 800251a:	22d4      	movs	r2, #212	@ 0xd4
 800251c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800251e:	2008      	movs	r0, #8
 8002520:	f006 f9f2 	bl	8008908 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7a9b      	ldrb	r3, [r3, #10]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	b25a      	sxtb	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	7adb      	ldrb	r3, [r3, #11]
 8002530:	b25b      	sxtb	r3, r3
 8002532:	4313      	orrs	r3, r2
 8002534:	b25b      	sxtb	r3, r3
 8002536:	b2db      	uxtb	r3, r3
 8002538:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6918      	ldr	r0, [r3, #16]
 800253e:	2314      	movs	r3, #20
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2301      	movs	r3, #1
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2301      	movs	r3, #1
 800254e:	2240      	movs	r2, #64	@ 0x40
 8002550:	2130      	movs	r1, #48	@ 0x30
 8002552:	f008 f80d 	bl	800a570 <HAL_I2C_Mem_Write>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	4313      	orrs	r3, r2
 800255e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <bmi088_config+0x344>
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <bmi088_config+0x380>)
 8002568:	22d9      	movs	r2, #217	@ 0xd9
 800256a:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	7a5b      	ldrb	r3, [r3, #9]
 8002570:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6918      	ldr	r0, [r3, #16]
 8002576:	2314      	movs	r3, #20
 8002578:	9302      	str	r3, [sp, #8]
 800257a:	2301      	movs	r3, #1
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2301      	movs	r3, #1
 8002586:	2241      	movs	r2, #65	@ 0x41
 8002588:	2130      	movs	r1, #48	@ 0x30
 800258a:	f007 fff1 	bl	800a570 <HAL_I2C_Mem_Write>
 800258e:	4603      	mov	r3, r0
 8002590:	461a      	mov	r2, r3
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	4313      	orrs	r3, r2
 8002596:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <bmi088_config+0x384>
 800259e:	4b02      	ldr	r3, [pc, #8]	@ (80025a8 <bmi088_config+0x380>)
 80025a0:	22dd      	movs	r2, #221	@ 0xdd
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e002      	b.n	80025ac <bmi088_config+0x384>
 80025a6:	bf00      	nop
 80025a8:	20000260 	.word	0x20000260

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 80025ac:	230a      	movs	r3, #10
 80025ae:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6918      	ldr	r0, [r3, #16]
 80025b4:	2314      	movs	r3, #20
 80025b6:	9302      	str	r3, [sp, #8]
 80025b8:	2301      	movs	r3, #1
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2301      	movs	r3, #1
 80025c4:	2253      	movs	r2, #83	@ 0x53
 80025c6:	2130      	movs	r1, #48	@ 0x30
 80025c8:	f007 ffd2 	bl	800a570 <HAL_I2C_Mem_Write>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80025d6:	2304      	movs	r3, #4
 80025d8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6918      	ldr	r0, [r3, #16]
 80025de:	2314      	movs	r3, #20
 80025e0:	9302      	str	r3, [sp, #8]
 80025e2:	2301      	movs	r3, #1
 80025e4:	9301      	str	r3, [sp, #4]
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2301      	movs	r3, #1
 80025ee:	2258      	movs	r2, #88	@ 0x58
 80025f0:	2130      	movs	r1, #48	@ 0x30
 80025f2:	f007 ffbd 	bl	800a570 <HAL_I2C_Mem_Write>
 80025f6:	4603      	mov	r3, r0
 80025f8:	461a      	mov	r2, r3
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002606:	4618      	mov	r0, r3
 8002608:	f006 fecd 	bl	80093a6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002612:	4618      	mov	r0, r3
 8002614:	f006 fec7 	bl	80093a6 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002618:	2046      	movs	r0, #70	@ 0x46
 800261a:	f006 f975 	bl	8008908 <HAL_Delay>
}
 800261e:	bf00      	nop
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop

08002628 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002628:	b5b0      	push	{r4, r5, r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af02      	add	r7, sp, #8
 800262e:	6078      	str	r0, [r7, #4]
	if(BMI->flags.isAccelUpdated && !BMI->flags.isDmaTransferActive)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01d      	beq.n	8002674 <bmi088_update+0x4c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	791b      	ldrb	r3, [r3, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d119      	bne.n	8002674 <bmi088_update+0x4c>
	{
		// Start DMA transfer for accelerometer data (X,Y,Z + sensor time)
		BMI->flags.isDmaTransferActive = 1;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	711a      	strb	r2, [r3, #4]
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_accel_data, 9);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6918      	ldr	r0, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3384      	adds	r3, #132	@ 0x84
 800264e:	2209      	movs	r2, #9
 8002650:	9201      	str	r2, [sp, #4]
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	2301      	movs	r3, #1
 8002656:	2212      	movs	r2, #18
 8002658:	2130      	movs	r1, #48	@ 0x30
 800265a:	f008 fab5 	bl	800abc8 <HAL_I2C_Mem_Read_DMA>
 800265e:	4603      	mov	r3, r0
 8002660:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 8002662:	7ffb      	ldrb	r3, [r7, #31]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <bmi088_update+0x4c>
		{
			BMI->flags.isDmaTransferActive = 0;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	711a      	strb	r2, [r3, #4]
			BMI->flags.isAccelUpdated = 0;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	705a      	strb	r2, [r3, #1]
		}
	}

	if(BMI->flags.isGyroUpdated && !BMI->flags.isDmaTransferActive && is_time_updated)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d030      	beq.n	80026de <bmi088_update+0xb6>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	791b      	ldrb	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d12c      	bne.n	80026de <bmi088_update+0xb6>
 8002684:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <bmi088_update+0xa8>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d027      	beq.n	80026de <bmi088_update+0xb6>
	{
		if(is_starded){
 800268e:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <bmi088_update+0xac>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01f      	beq.n	80026d8 <bmi088_update+0xb0>
			// Start DMA transfer for gyroscope data
			BMI->flags.isDmaTransferActive = 1;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	711a      	strb	r2, [r3, #4]
			HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_gyro_data, 6);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6918      	ldr	r0, [r3, #16]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	338d      	adds	r3, #141	@ 0x8d
 80026a6:	2206      	movs	r2, #6
 80026a8:	9201      	str	r2, [sp, #4]
 80026aa:	9300      	str	r3, [sp, #0]
 80026ac:	2301      	movs	r3, #1
 80026ae:	2202      	movs	r2, #2
 80026b0:	21d0      	movs	r1, #208	@ 0xd0
 80026b2:	f008 fa89 	bl	800abc8 <HAL_I2C_Mem_Read_DMA>
 80026b6:	4603      	mov	r3, r0
 80026b8:	77bb      	strb	r3, [r7, #30]
			if(ret != HAL_OK)
 80026ba:	7fbb      	ldrb	r3, [r7, #30]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00e      	beq.n	80026de <bmi088_update+0xb6>
			{
				BMI->flags.isDmaTransferActive = 0;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	711a      	strb	r2, [r3, #4]
				BMI->flags.isGyroUpdated = 0;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
 80026cc:	e007      	b.n	80026de <bmi088_update+0xb6>
 80026ce:	bf00      	nop
 80026d0:	2000025d 	.word	0x2000025d
 80026d4:	2000025e 	.word	0x2000025e
			}
		}
		else
		{
			BMI->flags.isGyroUpdated = 0;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
		}
	}

	// Process accelerometer data if DMA transfer is complete
	if(BMI->flags.isAccelDmaComplete)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	789b      	ldrb	r3, [r3, #2]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 81c3 	beq.w	8002a6e <bmi088_update+0x446>
	{
		uint32_t sensorTime = (BMI->datas.raw_accel_data[8] << 16) | (BMI->datas.raw_accel_data[7] << 8) | BMI->datas.raw_accel_data[6];
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80026ee:	041a      	lsls	r2, r3, #16
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	4313      	orrs	r3, r2
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	f892 208a 	ldrb.w	r2, [r2, #138]	@ 0x8a
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
		BMI->datas.current_time = (float)sensorTime * 39.0625 / 1000000.0;
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270e:	ee17 0a90 	vmov	r0, s15
 8002712:	f7fd ff39 	bl	8000588 <__aeabi_f2d>
 8002716:	a3cb      	add	r3, pc, #812	@ (adr r3, 8002a44 <bmi088_update+0x41c>)
 8002718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271c:	f7fd ff8c 	bl	8000638 <__aeabi_dmul>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4610      	mov	r0, r2
 8002726:	4619      	mov	r1, r3
 8002728:	a3c8      	add	r3, pc, #800	@ (adr r3, 8002a4c <bmi088_update+0x424>)
 800272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272e:	f7fe f8ad 	bl	800088c <__aeabi_ddiv>
 8002732:	4602      	mov	r2, r0
 8002734:	460b      	mov	r3, r1
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	f7fe fa75 	bl	8000c28 <__aeabi_d2f>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	66da      	str	r2, [r3, #108]	@ 0x6c

		int16_t acc_x_16 = (BMI->datas.raw_accel_data[1] << 8) | BMI->datas.raw_accel_data[0];
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	b21a      	sxth	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002754:	b21b      	sxth	r3, r3
 8002756:	4313      	orrs	r3, r2
 8002758:	82fb      	strh	r3, [r7, #22]
		int16_t acc_y_16 = (BMI->datas.raw_accel_data[3] << 8) | BMI->datas.raw_accel_data[2];
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	b21a      	sxth	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800276a:	b21b      	sxth	r3, r3
 800276c:	4313      	orrs	r3, r2
 800276e:	82bb      	strh	r3, [r7, #20]
		int16_t acc_z_16 = (BMI->datas.raw_accel_data[5] << 8) | BMI->datas.raw_accel_data[4];
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	b21a      	sxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8002780:	b21b      	sxth	r3, r3
 8002782:	4313      	orrs	r3, r2
 8002784:	827b      	strh	r3, [r7, #18]

		BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 8002786:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002792:	ee17 0a90 	vmov	r0, s15
 8002796:	f7fd fef7 	bl	8000588 <__aeabi_f2d>
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4ba2      	ldr	r3, [pc, #648]	@ (8002a28 <bmi088_update+0x400>)
 80027a0:	f7fe f874 	bl	800088c <__aeabi_ddiv>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	4b9e      	ldr	r3, [pc, #632]	@ (8002a2c <bmi088_update+0x404>)
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b9b      	ldr	r3, [pc, #620]	@ (8002a30 <bmi088_update+0x408>)
 80027c4:	f7fd ff38 	bl	8000638 <__aeabi_dmul>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4614      	mov	r4, r2
 80027ce:	461d      	mov	r5, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	7a5b      	ldrb	r3, [r3, #9]
 80027d4:	3301      	adds	r3, #1
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027de:	ee17 0a90 	vmov	r0, s15
 80027e2:	f7fd fed1 	bl	8000588 <__aeabi_f2d>
 80027e6:	4602      	mov	r2, r0
 80027e8:	460b      	mov	r3, r1
 80027ea:	ec43 2b11 	vmov	d1, r2, r3
 80027ee:	ed9f 0b8a 	vldr	d0, [pc, #552]	@ 8002a18 <bmi088_update+0x3f0>
 80027f2:	f016 f891 	bl	8018918 <pow>
 80027f6:	ec53 2b10 	vmov	r2, r3, d0
 80027fa:	4620      	mov	r0, r4
 80027fc:	4629      	mov	r1, r5
 80027fe:	f7fd ff1b 	bl	8000638 <__aeabi_dmul>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b89      	ldr	r3, [pc, #548]	@ (8002a34 <bmi088_update+0x40c>)
 8002810:	f7fd fd5c 	bl	80002cc <__adddf3>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4610      	mov	r0, r2
 800281a:	4619      	mov	r1, r3
 800281c:	a380      	add	r3, pc, #512	@ (adr r3, 8002a20 <bmi088_update+0x3f8>)
 800281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002822:	f7fd ff09 	bl	8000638 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	4b7e      	ldr	r3, [pc, #504]	@ (8002a2c <bmi088_update+0x404>)
 8002834:	f7fe f82a 	bl	800088c <__aeabi_ddiv>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	f7fe f9f2 	bl	8000c28 <__aeabi_d2f>
 8002844:	4602      	mov	r2, r0
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	65da      	str	r2, [r3, #92]	@ 0x5c
		BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 800284a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002856:	ee17 0a90 	vmov	r0, s15
 800285a:	f7fd fe95 	bl	8000588 <__aeabi_f2d>
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b71      	ldr	r3, [pc, #452]	@ (8002a28 <bmi088_update+0x400>)
 8002864:	f7fe f812 	bl	800088c <__aeabi_ddiv>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	4b6d      	ldr	r3, [pc, #436]	@ (8002a2c <bmi088_update+0x404>)
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b6a      	ldr	r3, [pc, #424]	@ (8002a30 <bmi088_update+0x408>)
 8002888:	f7fd fed6 	bl	8000638 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4614      	mov	r4, r2
 8002892:	461d      	mov	r5, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7a5b      	ldrb	r3, [r3, #9]
 8002898:	3301      	adds	r3, #1
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028a2:	ee17 0a90 	vmov	r0, s15
 80028a6:	f7fd fe6f 	bl	8000588 <__aeabi_f2d>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	ec43 2b11 	vmov	d1, r2, r3
 80028b2:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8002a18 <bmi088_update+0x3f0>
 80028b6:	f016 f82f 	bl	8018918 <pow>
 80028ba:	ec53 2b10 	vmov	r2, r3, d0
 80028be:	4620      	mov	r0, r4
 80028c0:	4629      	mov	r1, r5
 80028c2:	f7fd feb9 	bl	8000638 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f04f 0200 	mov.w	r2, #0
 80028d2:	4b59      	ldr	r3, [pc, #356]	@ (8002a38 <bmi088_update+0x410>)
 80028d4:	f7fd fcfa 	bl	80002cc <__adddf3>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	a34f      	add	r3, pc, #316	@ (adr r3, 8002a20 <bmi088_update+0x3f8>)
 80028e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e6:	f7fd fea7 	bl	8000638 <__aeabi_dmul>
 80028ea:	4602      	mov	r2, r0
 80028ec:	460b      	mov	r3, r1
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	4b4d      	ldr	r3, [pc, #308]	@ (8002a2c <bmi088_update+0x404>)
 80028f8:	f7fd ffc8 	bl	800088c <__aeabi_ddiv>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4610      	mov	r0, r2
 8002902:	4619      	mov	r1, r3
 8002904:	f7fe f990 	bl	8000c28 <__aeabi_d2f>
 8002908:	4602      	mov	r2, r0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	661a      	str	r2, [r3, #96]	@ 0x60
		BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 800290e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291a:	ee17 0a90 	vmov	r0, s15
 800291e:	f7fd fe33 	bl	8000588 <__aeabi_f2d>
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4b40      	ldr	r3, [pc, #256]	@ (8002a28 <bmi088_update+0x400>)
 8002928:	f7fd ffb0 	bl	800088c <__aeabi_ddiv>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	4b3c      	ldr	r3, [pc, #240]	@ (8002a2c <bmi088_update+0x404>)
 800293a:	f7fd fe7d 	bl	8000638 <__aeabi_dmul>
 800293e:	4602      	mov	r2, r0
 8002940:	460b      	mov	r3, r1
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	f04f 0200 	mov.w	r2, #0
 800294a:	4b39      	ldr	r3, [pc, #228]	@ (8002a30 <bmi088_update+0x408>)
 800294c:	f7fd fe74 	bl	8000638 <__aeabi_dmul>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4614      	mov	r4, r2
 8002956:	461d      	mov	r5, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7a5b      	ldrb	r3, [r3, #9]
 800295c:	3301      	adds	r3, #1
 800295e:	ee07 3a90 	vmov	s15, r3
 8002962:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002966:	ee17 0a90 	vmov	r0, s15
 800296a:	f7fd fe0d 	bl	8000588 <__aeabi_f2d>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	ec43 2b11 	vmov	d1, r2, r3
 8002976:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8002a18 <bmi088_update+0x3f0>
 800297a:	f015 ffcd 	bl	8018918 <pow>
 800297e:	ec53 2b10 	vmov	r2, r3, d0
 8002982:	4620      	mov	r0, r4
 8002984:	4629      	mov	r1, r5
 8002986:	f7fd fe57 	bl	8000638 <__aeabi_dmul>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4610      	mov	r0, r2
 8002990:	4619      	mov	r1, r3
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b27      	ldr	r3, [pc, #156]	@ (8002a34 <bmi088_update+0x40c>)
 8002998:	f7fd fc96 	bl	80002c8 <__aeabi_dsub>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	a31e      	add	r3, pc, #120	@ (adr r3, 8002a20 <bmi088_update+0x3f8>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd fe45 	bl	8000638 <__aeabi_dmul>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	4b1c      	ldr	r3, [pc, #112]	@ (8002a2c <bmi088_update+0x404>)
 80029bc:	f7fd ff66 	bl	800088c <__aeabi_ddiv>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe f92e 	bl	8000c28 <__aeabi_d2f>
 80029cc:	4602      	mov	r2, r0
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	665a      	str	r2, [r3, #100]	@ 0x64

		if(is_starded)
 80029d2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a3c <bmi088_update+0x414>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d03b      	beq.n	8002a54 <bmi088_update+0x42c>
		{
			BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80029e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	d502      	bpl.n	80029fc <bmi088_update+0x3d4>
 80029f6:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002a40 <bmi088_update+0x418>
 80029fa:	e007      	b.n	8002a0c <bmi088_update+0x3e4>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 8002a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
 8002a12:	e022      	b.n	8002a5a <bmi088_update+0x432>
 8002a14:	f3af 8000 	nop.w
 8002a18:	00000000 	.word	0x00000000
 8002a1c:	40000000 	.word	0x40000000
 8002a20:	51eb851f 	.word	0x51eb851f
 8002a24:	40239eb8 	.word	0x40239eb8
 8002a28:	40e00000 	.word	0x40e00000
 8002a2c:	408f4000 	.word	0x408f4000
 8002a30:	3ff80000 	.word	0x3ff80000
 8002a34:	40100000 	.word	0x40100000
 8002a38:	402e0000 	.word	0x402e0000
 8002a3c:	2000025e 	.word	0x2000025e
	...
 8002a48:	40438800 	.word	0x40438800
 8002a4c:	00000000 	.word	0x00000000
 8002a50:	412e8480 	.word	0x412e8480
		}
		else
		{
			is_starded = 1;
 8002a54:	4bac      	ldr	r3, [pc, #688]	@ (8002d08 <bmi088_update+0x6e0>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	701a      	strb	r2, [r3, #0]
		}

		BMI->datas.last_time = BMI->datas.current_time;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	671a      	str	r2, [r3, #112]	@ 0x70
		BMI->flags.isAccelDmaComplete = 0;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	709a      	strb	r2, [r3, #2]
		is_time_updated = 1;
 8002a68:	4ba8      	ldr	r3, [pc, #672]	@ (8002d0c <bmi088_update+0x6e4>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]

		// Sıcaklık okuma kaldırıldı - sadece ivme ve gyro verisi kullanılacak
	}

	// Process gyroscope data if DMA transfer is complete
	if(BMI->flags.isGyroDmaComplete && is_time_updated)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	78db      	ldrb	r3, [r3, #3]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 813b 	beq.w	8002cee <bmi088_update+0x6c6>
 8002a78:	4ba4      	ldr	r3, [pc, #656]	@ (8002d0c <bmi088_update+0x6e4>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8135 	beq.w	8002cee <bmi088_update+0x6c6>
	{
		int16_t gyro_x_16 = (BMI->datas.raw_gyro_data[1] << 8) | BMI->datas.raw_gyro_data[0];
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	823b      	strh	r3, [r7, #16]
		int16_t gyro_y_16 = (BMI->datas.raw_gyro_data[3] << 8) | BMI->datas.raw_gyro_data[2];
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	b21a      	sxth	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 8002aaa:	b21b      	sxth	r3, r3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	81fb      	strh	r3, [r7, #14]
		int16_t gyro_z_16 = (BMI->datas.raw_gyro_data[5] << 8) | BMI->datas.raw_gyro_data[4];
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	b21a      	sxth	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8002ac0:	b21b      	sxth	r3, r3
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	81bb      	strh	r3, [r7, #12]

		BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 8002ac6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ad2:	ee17 0a90 	vmov	r0, s15
 8002ad6:	f7fd fd57 	bl	8000588 <__aeabi_f2d>
 8002ada:	a387      	add	r3, pc, #540	@ (adr r3, 8002cf8 <bmi088_update+0x6d0>)
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f7fd fed4 	bl	800088c <__aeabi_ddiv>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4614      	mov	r4, r2
 8002aea:	461d      	mov	r5, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7b9b      	ldrb	r3, [r3, #14]
 8002af0:	461a      	mov	r2, r3
 8002af2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002af6:	4113      	asrs	r3, r2
 8002af8:	ee07 3a90 	vmov	s15, r3
 8002afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b00:	ee17 0a90 	vmov	r0, s15
 8002b04:	f7fd fd40 	bl	8000588 <__aeabi_f2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fd92 	bl	8000638 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4614      	mov	r4, r2
 8002b1a:	461d      	mov	r5, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fd30 	bl	8000588 <__aeabi_f2d>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	4629      	mov	r1, r5
 8002b30:	f7fd fbca 	bl	80002c8 <__aeabi_dsub>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	a370      	add	r3, pc, #448	@ (adr r3, 8002d00 <bmi088_update+0x6d8>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd79 	bl	8000638 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7fe f86b 	bl	8000c28 <__aeabi_d2f>
 8002b52:	4602      	mov	r2, r0
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	61da      	str	r2, [r3, #28]
		BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002b58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b5c:	ee07 3a90 	vmov	s15, r3
 8002b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b64:	ee17 0a90 	vmov	r0, s15
 8002b68:	f7fd fd0e 	bl	8000588 <__aeabi_f2d>
 8002b6c:	a362      	add	r3, pc, #392	@ (adr r3, 8002cf8 <bmi088_update+0x6d0>)
 8002b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b72:	f7fd fe8b 	bl	800088c <__aeabi_ddiv>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4614      	mov	r4, r2
 8002b7c:	461d      	mov	r5, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	7b9b      	ldrb	r3, [r3, #14]
 8002b82:	461a      	mov	r2, r3
 8002b84:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b88:	4113      	asrs	r3, r2
 8002b8a:	ee07 3a90 	vmov	s15, r3
 8002b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b92:	ee17 0a90 	vmov	r0, s15
 8002b96:	f7fd fcf7 	bl	8000588 <__aeabi_f2d>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd fd49 	bl	8000638 <__aeabi_dmul>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4614      	mov	r4, r2
 8002bac:	461d      	mov	r5, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fce7 	bl	8000588 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f7fd fb81 	bl	80002c8 <__aeabi_dsub>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	a34c      	add	r3, pc, #304	@ (adr r3, 8002d00 <bmi088_update+0x6d8>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd fd30 	bl	8000638 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4610      	mov	r0, r2
 8002bde:	4619      	mov	r1, r3
 8002be0:	f7fe f822 	bl	8000c28 <__aeabi_d2f>
 8002be4:	4602      	mov	r2, r0
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	621a      	str	r2, [r3, #32]
		BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002bea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002bee:	ee07 3a90 	vmov	s15, r3
 8002bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf6:	ee17 0a90 	vmov	r0, s15
 8002bfa:	f7fd fcc5 	bl	8000588 <__aeabi_f2d>
 8002bfe:	a33e      	add	r3, pc, #248	@ (adr r3, 8002cf8 <bmi088_update+0x6d0>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd fe42 	bl	800088c <__aeabi_ddiv>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4614      	mov	r4, r2
 8002c0e:	461d      	mov	r5, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7b9b      	ldrb	r3, [r3, #14]
 8002c14:	461a      	mov	r2, r3
 8002c16:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002c1a:	4113      	asrs	r3, r2
 8002c1c:	ee07 3a90 	vmov	s15, r3
 8002c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c24:	ee17 0a90 	vmov	r0, s15
 8002c28:	f7fd fcae 	bl	8000588 <__aeabi_f2d>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	460b      	mov	r3, r1
 8002c30:	4620      	mov	r0, r4
 8002c32:	4629      	mov	r1, r5
 8002c34:	f7fd fd00 	bl	8000638 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fc9e 	bl	8000588 <__aeabi_f2d>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4620      	mov	r0, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	f7fd fb38 	bl	80002c8 <__aeabi_dsub>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	a327      	add	r3, pc, #156	@ (adr r3, 8002d00 <bmi088_update+0x6d8>)
 8002c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c66:	f7fd fce7 	bl	8000638 <__aeabi_dmul>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	4610      	mov	r0, r2
 8002c70:	4619      	mov	r1, r3
 8002c72:	f7fd ffd9 	bl	8000c28 <__aeabi_d2f>
 8002c76:	4602      	mov	r2, r0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24

		Orientation_Update(BMI->datas.gyro_z, BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.acc_z, BMI->datas.acc_y, -BMI->datas.acc_x, BMI->datas.delta_time);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c8e:	eeb1 6a67 	vneg.f32	s12, s15
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	edd3 5a19 	vldr	s11, [r3, #100]	@ 0x64
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002ca4:	eef1 7a67 	vneg.f32	s15, s15
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	edd3 4a1d 	vldr	s9, [r3, #116]	@ 0x74
 8002cae:	eeb0 3a64 	vmov.f32	s6, s9
 8002cb2:	eef0 2a67 	vmov.f32	s5, s15
 8002cb6:	eeb0 2a45 	vmov.f32	s4, s10
 8002cba:	eef0 1a65 	vmov.f32	s3, s11
 8002cbe:	eeb0 1a46 	vmov.f32	s2, s12
 8002cc2:	eef0 0a66 	vmov.f32	s1, s13
 8002cc6:	eeb0 0a47 	vmov.f32	s0, s14
 8002cca:	f003 fccf 	bl	800666c <Orientation_Update>
		BMI->datas.theta = quaternionToThetaZ();
 8002cce:	f004 f941 	bl	8006f54 <quaternionToThetaZ>
 8002cd2:	eef0 7a40 	vmov.f32	s15, s0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		is_gyro_renewed = 1;
 8002cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002d10 <bmi088_update+0x6e8>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	701a      	strb	r2, [r3, #0]

		BMI->flags.isGyroDmaComplete = 0;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	70da      	strb	r2, [r3, #3]
		is_time_updated = 0;
 8002ce8:	4b08      	ldr	r3, [pc, #32]	@ (8002d0c <bmi088_update+0x6e4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
	}
}
 8002cee:	bf00      	nop
 8002cf0:	3720      	adds	r7, #32
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	40dfffc0 	.word	0x40dfffc0
 8002d00:	a0000000 	.word	0xa0000000
 8002d04:	3f91df46 	.word	0x3f91df46
 8002d08:	2000025e 	.word	0x2000025e
 8002d0c:	2000025d 	.word	0x2000025d
 8002d10:	2000025f 	.word	0x2000025f

08002d14 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	705a      	strb	r2, [r3, #1]
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	701a      	strb	r2, [r3, #0]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
	uint32_t timeout_start = HAL_GetTick();
 8002d54:	f005 fdcc 	bl	80088f0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]
	const uint32_t TIMEOUT_MS = 10000; // 10 saniye timeout
 8002d5a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002d5e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		// Timeout kontrolü
		if(HAL_GetTick() - timeout_start > TIMEOUT_MS)
 8002d60:	f005 fdc6 	bl	80088f0 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	68fa      	ldr	r2, [r7, #12]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d35e      	bcc.n	8002e2e <get_offset+0xe6>
		{

			return;
		}
		
		bmi088_update(BMI);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff fc59 	bl	8002628 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002d76:	4b30      	ldr	r3, [pc, #192]	@ (8002e38 <get_offset+0xf0>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d1ef      	bne.n	8002d60 <get_offset+0x18>
		{
			if(offsetCounter < 1000)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d86:	da2d      	bge.n	8002de4 <get_offset+0x9c>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	ed93 7a00 	vldr	s14, [r3]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	edd3 7a07 	vldr	s15, [r3, #28]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9e:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	ed93 7a01 	vldr	s14, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	edd3 7a08 	vldr	s15, [r3, #32]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db8:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd2:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	617b      	str	r3, [r7, #20]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002ddc:	4b16      	ldr	r3, [pc, #88]	@ (8002e38 <get_offset+0xf0>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e7bd      	b.n	8002d60 <get_offset+0x18>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	ed93 7a00 	vldr	s14, [r3]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002e3c <get_offset+0xf4>
 8002df4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df8:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002e3c <get_offset+0xf4>
 8002e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e10:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002e3c <get_offset+0xf4>
 8002e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e28:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002e2c:	e000      	b.n	8002e30 <get_offset+0xe8>
			return;
 8002e2e:	bf00      	nop
		}

	}
}
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	2000025f 	.word	0x2000025f
 8002e3c:	447a0000 	.word	0x447a0000

08002e40 <bmi088_accel_dma_complete_callback>:
/**
 * @brief Accelerometer DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_accel_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelDmaComplete = 1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	709a      	strb	r2, [r3, #2]
	BMI->flags.isDmaTransferActive = 0;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	711a      	strb	r2, [r3, #4]
	BMI->flags.isAccelUpdated = 0;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	705a      	strb	r2, [r3, #1]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <bmi088_gyro_dma_complete_callback>:
/**
 * @brief Gyroscope DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_gyro_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroDmaComplete = 1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	711a      	strb	r2, [r3, #4]
	BMI->flags.isGyroUpdated = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <data_logger_init>:
FRESULT fres; 	//Result after operations

//For file operation functions look at https://elm-chan.org/fsw/ff/00index_e.html

void data_logger_init()
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
	// SD kartı mount et
	fres = f_mount(&FatFs, "", 1);
 8002e90:	2201      	movs	r2, #1
 8002e92:	4915      	ldr	r1, [pc, #84]	@ (8002ee8 <data_logger_init+0x5c>)
 8002e94:	4815      	ldr	r0, [pc, #84]	@ (8002eec <data_logger_init+0x60>)
 8002e96:	f00f fef9 	bl	8012c8c <f_mount>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <data_logger_init+0x64>)
 8002ea0:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8002ea2:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <data_logger_init+0x64>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d003      	beq.n	8002eb2 <data_logger_init+0x26>
		sd_open = 0;
 8002eaa:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <data_logger_init+0x68>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
		return;
 8002eb0:	e018      	b.n	8002ee4 <data_logger_init+0x58>
	}
	
	// packets.bin dosyasını oluştur (eğer yoksa)
	fres = f_open(&fil, "gorev.bin", FA_WRITE | FA_OPEN_ALWAYS);
 8002eb2:	2212      	movs	r2, #18
 8002eb4:	4910      	ldr	r1, [pc, #64]	@ (8002ef8 <data_logger_init+0x6c>)
 8002eb6:	4811      	ldr	r0, [pc, #68]	@ (8002efc <data_logger_init+0x70>)
 8002eb8:	f00f ff2e 	bl	8012d18 <f_open>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <data_logger_init+0x64>)
 8002ec2:	701a      	strb	r2, [r3, #0]
	if (fres == FR_OK) {
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <data_logger_init+0x64>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <data_logger_init+0x46>
		f_close(&fil);
 8002ecc:	480b      	ldr	r0, [pc, #44]	@ (8002efc <data_logger_init+0x70>)
 8002ece:	f010 fad0 	bl	8013472 <f_close>
	}
	
	// Buffer'ı sıfırla
	buffer_index = 0;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <data_logger_init+0x74>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	801a      	strh	r2, [r3, #0]
	flush_counter = 0;
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8002f04 <data_logger_init+0x78>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
	file_open = 0;
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <data_logger_init+0x7c>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	701a      	strb	r2, [r3, #0]
}
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	0801a6e0 	.word	0x0801a6e0
 8002eec:	20000468 	.word	0x20000468
 8002ef0:	200008c8 	.word	0x200008c8
 8002ef4:	20000001 	.word	0x20000001
 8002ef8:	0801a6e4 	.word	0x0801a6e4
 8002efc:	20000698 	.word	0x20000698
 8002f00:	20000464 	.word	0x20000464
 8002f04:	20000466 	.word	0x20000466
 8002f08:	20000467 	.word	0x20000467

08002f0c <log_normal_packet_data>:

void log_normal_packet_data(unsigned char* packet_data)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]

	if (sd_open == 0) {
 8002f14:	4b30      	ldr	r3, [pc, #192]	@ (8002fd8 <log_normal_packet_data+0xcc>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d058      	beq.n	8002fce <log_normal_packet_data+0xc2>
		return;
	}

	// Paketi buffer'a kopyala
	memcpy(&packet_buffer[buffer_index], packet_data, PACKET_SIZE);
 8002f1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002fdc <log_normal_packet_data+0xd0>)
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b2f      	ldr	r3, [pc, #188]	@ (8002fe0 <log_normal_packet_data+0xd4>)
 8002f24:	4413      	add	r3, r2
 8002f26:	2240      	movs	r2, #64	@ 0x40
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f011 fe6d 	bl	8014c0a <memcpy>
	buffer_index += PACKET_SIZE;
 8002f30:	4b2a      	ldr	r3, [pc, #168]	@ (8002fdc <log_normal_packet_data+0xd0>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	3340      	adds	r3, #64	@ 0x40
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	4b28      	ldr	r3, [pc, #160]	@ (8002fdc <log_normal_packet_data+0xd0>)
 8002f3a:	801a      	strh	r2, [r3, #0]
	
	// Buffer doldu mu kontrol et
	if (buffer_index >= BUFFER_SIZE) {
 8002f3c:	4b27      	ldr	r3, [pc, #156]	@ (8002fdc <log_normal_packet_data+0xd0>)
 8002f3e:	881b      	ldrh	r3, [r3, #0]
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f44:	d344      	bcc.n	8002fd0 <log_normal_packet_data+0xc4>
		// Dosya açık değilse aç
		if (!file_open) {
 8002f46:	4b27      	ldr	r3, [pc, #156]	@ (8002fe4 <log_normal_packet_data+0xd8>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d11d      	bne.n	8002f8a <log_normal_packet_data+0x7e>
			fres = f_open(&fil, "gorev.bin", FA_WRITE | FA_OPEN_ALWAYS);
 8002f4e:	2212      	movs	r2, #18
 8002f50:	4925      	ldr	r1, [pc, #148]	@ (8002fe8 <log_normal_packet_data+0xdc>)
 8002f52:	4826      	ldr	r0, [pc, #152]	@ (8002fec <log_normal_packet_data+0xe0>)
 8002f54:	f00f fee0 	bl	8012d18 <f_open>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <log_normal_packet_data+0xe4>)
 8002f5e:	701a      	strb	r2, [r3, #0]
			if (fres == FR_OK) {
 8002f60:	4b23      	ldr	r3, [pc, #140]	@ (8002ff0 <log_normal_packet_data+0xe4>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d109      	bne.n	8002f7c <log_normal_packet_data+0x70>
				f_lseek(&fil, f_size(&fil));  // Dosya sonuna git
 8002f68:	4b20      	ldr	r3, [pc, #128]	@ (8002fec <log_normal_packet_data+0xe0>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	481f      	ldr	r0, [pc, #124]	@ (8002fec <log_normal_packet_data+0xe0>)
 8002f70:	f010 faa9 	bl	80134c6 <f_lseek>
				file_open = 1;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <log_normal_packet_data+0xd8>)
 8002f76:	2201      	movs	r2, #1
 8002f78:	701a      	strb	r2, [r3, #0]
 8002f7a:	e006      	b.n	8002f8a <log_normal_packet_data+0x7e>
			} else {
				sd_open = 0;
 8002f7c:	4b16      	ldr	r3, [pc, #88]	@ (8002fd8 <log_normal_packet_data+0xcc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
				buffer_index = 0;
 8002f82:	4b16      	ldr	r3, [pc, #88]	@ (8002fdc <log_normal_packet_data+0xd0>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	801a      	strh	r2, [r3, #0]
 8002f88:	e022      	b.n	8002fd0 <log_normal_packet_data+0xc4>
				return;
			}
		}

		// Buffer'ı dosyaya yaz
		unsigned int file_res = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
		f_write(&fil, packet_buffer, buffer_index, &file_res);
 8002f8e:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <log_normal_packet_data+0xd0>)
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	4911      	ldr	r1, [pc, #68]	@ (8002fe0 <log_normal_packet_data+0xd4>)
 8002f9a:	4814      	ldr	r0, [pc, #80]	@ (8002fec <log_normal_packet_data+0xe0>)
 8002f9c:	f010 f876 	bl	801308c <f_write>

		// Buffer'ı sıfırla ve sayacı artır
		buffer_index = 0;
 8002fa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002fdc <log_normal_packet_data+0xd0>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	801a      	strh	r2, [r3, #0]
		flush_counter++;
 8002fa6:	4b13      	ldr	r3, [pc, #76]	@ (8002ff4 <log_normal_packet_data+0xe8>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	4b11      	ldr	r3, [pc, #68]	@ (8002ff4 <log_normal_packet_data+0xe8>)
 8002fb0:	701a      	strb	r2, [r3, #0]

		// 10 kez yazım yapıldıysa dosyayı kapat
		if (flush_counter >= FLUSH_THRESHOLD) {
 8002fb2:	4b10      	ldr	r3, [pc, #64]	@ (8002ff4 <log_normal_packet_data+0xe8>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	d90a      	bls.n	8002fd0 <log_normal_packet_data+0xc4>
			f_close(&fil);
 8002fba:	480c      	ldr	r0, [pc, #48]	@ (8002fec <log_normal_packet_data+0xe0>)
 8002fbc:	f010 fa59 	bl	8013472 <f_close>
			file_open = 0;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	@ (8002fe4 <log_normal_packet_data+0xd8>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
			flush_counter = 0;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff4 <log_normal_packet_data+0xe8>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e000      	b.n	8002fd0 <log_normal_packet_data+0xc4>
		return;
 8002fce:	bf00      	nop
		}
	}
}
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000001 	.word	0x20000001
 8002fdc:	20000464 	.word	0x20000464
 8002fe0:	20000264 	.word	0x20000264
 8002fe4:	20000467 	.word	0x20000467
 8002fe8:	0801a6e4 	.word	0x0801a6e4
 8002fec:	20000698 	.word	0x20000698
 8002ff0:	200008c8 	.word	0x200008c8
 8002ff4:	20000466 	.word	0x20000466

08002ff8 <e22_init>:
  * @param  lora_conf_struct: pointer to the lora configuration struct.
  * @param  huart: pointer to the uart handler typedef.
  * @retval None
  */
void e22_init(e22_conf_struct_t *lora_conf_struct, UART_HandleTypeDef* huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	data_packet[0] = 0xC0;	//Set register command.
 8003002:	4b4a      	ldr	r3, [pc, #296]	@ (800312c <e22_init+0x134>)
 8003004:	22c0      	movs	r2, #192	@ 0xc0
 8003006:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x03;	//Starting from byte 0x03
 8003008:	4b48      	ldr	r3, [pc, #288]	@ (800312c <e22_init+0x134>)
 800300a:	2203      	movs	r2, #3
 800300c:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x04;	//6 bytes will be configured.
 800300e:	4b47      	ldr	r3, [pc, #284]	@ (800312c <e22_init+0x134>)
 8003010:	2204      	movs	r2, #4
 8003012:	709a      	strb	r2, [r3, #2]
	data_packet[3] = lora_conf_struct->air_rate | (lora_conf_struct->parity_bit << 3) | (lora_conf_struct->baud_rate << 5);																									//Wireless air data rate（bps）, Serial parity bit, UART Serial port rate（bps).
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	7c5b      	ldrb	r3, [r3, #17]
 8003018:	b25a      	sxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7c1b      	ldrb	r3, [r3, #16]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	b25b      	sxtb	r3, r3
 8003022:	4313      	orrs	r3, r2
 8003024:	b25a      	sxtb	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	7bdb      	ldrb	r3, [r3, #15]
 800302a:	015b      	lsls	r3, r3, #5
 800302c:	b25b      	sxtb	r3, r3
 800302e:	4313      	orrs	r3, r2
 8003030:	b25b      	sxtb	r3, r3
 8003032:	b2da      	uxtb	r2, r3
 8003034:	4b3d      	ldr	r3, [pc, #244]	@ (800312c <e22_init+0x134>)
 8003036:	70da      	strb	r2, [r3, #3]
	data_packet[4] = lora_conf_struct->power | (lora_conf_struct->rssi_noise << 5) | (lora_conf_struct->packet_size << 6);																									//Transmitting power, RSSI anbient noise enable, Sub packet settings.
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7d1b      	ldrb	r3, [r3, #20]
 800303c:	b25a      	sxtb	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7cdb      	ldrb	r3, [r3, #19]
 8003042:	015b      	lsls	r3, r3, #5
 8003044:	b25b      	sxtb	r3, r3
 8003046:	4313      	orrs	r3, r2
 8003048:	b25a      	sxtb	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7c9b      	ldrb	r3, [r3, #18]
 800304e:	019b      	lsls	r3, r3, #6
 8003050:	b25b      	sxtb	r3, r3
 8003052:	4313      	orrs	r3, r2
 8003054:	b25b      	sxtb	r3, r3
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b34      	ldr	r3, [pc, #208]	@ (800312c <e22_init+0x134>)
 800305a:	711a      	strb	r2, [r3, #4]
	data_packet[5] = lora_conf_struct->channel;																																											//channel 0-83 (410.125 + CH *1M)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7d5a      	ldrb	r2, [r3, #21]
 8003060:	4b32      	ldr	r3, [pc, #200]	@ (800312c <e22_init+0x134>)
 8003062:	715a      	strb	r2, [r3, #5]
	data_packet[6] = lora_conf_struct->wor_cycle | (lora_conf_struct->wor << 3) | (lora_conf_struct->lbt << 4) | (lora_conf_struct->repeater_func << 5) | (lora_conf_struct->mode << 6) | (lora_conf_struct->rssi_enable << 7);	//WOR cycle time, WOR transceiver control, LBT enable, Repeater function, Transmission mode, Enable RSSI.
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	7edb      	ldrb	r3, [r3, #27]
 8003068:	b25a      	sxtb	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7e9b      	ldrb	r3, [r3, #26]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	b25b      	sxtb	r3, r3
 8003072:	4313      	orrs	r3, r2
 8003074:	b25a      	sxtb	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7e5b      	ldrb	r3, [r3, #25]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	b25b      	sxtb	r3, r3
 800307e:	4313      	orrs	r3, r2
 8003080:	b25a      	sxtb	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7e1b      	ldrb	r3, [r3, #24]
 8003086:	015b      	lsls	r3, r3, #5
 8003088:	b25b      	sxtb	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b25a      	sxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7ddb      	ldrb	r3, [r3, #23]
 8003092:	019b      	lsls	r3, r3, #6
 8003094:	b25b      	sxtb	r3, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	b25a      	sxtb	r2, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7d9b      	ldrb	r3, [r3, #22]
 800309e:	01db      	lsls	r3, r3, #7
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	4313      	orrs	r3, r2
 80030a4:	b25b      	sxtb	r3, r3
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	4b20      	ldr	r3, [pc, #128]	@ (800312c <e22_init+0x134>)
 80030aa:	719a      	strb	r2, [r3, #6]
	data_packet[7] = (uint8_t)(lora_conf_struct->key >> 8);																																								//high byte of key
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	8b9b      	ldrh	r3, [r3, #28]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b1d      	ldr	r3, [pc, #116]	@ (800312c <e22_init+0x134>)
 80030b8:	71da      	strb	r2, [r3, #7]
	data_packet[8] = (uint8_t)(lora_conf_struct->key);																																									//low byte of key
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	8b9b      	ldrh	r3, [r3, #28]
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4b1a      	ldr	r3, [pc, #104]	@ (800312c <e22_init+0x134>)
 80030c2:	721a      	strb	r2, [r3, #8]


	//UART transmits the configuration datas.
	uint8_t response[7] = {0};
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	2100      	movs	r1, #0
 80030ce:	460a      	mov	r2, r1
 80030d0:	801a      	strh	r2, [r3, #0]
 80030d2:	460a      	mov	r2, r1
 80030d4:	709a      	strb	r2, [r3, #2]
	for(int i = 0; i < 10; i++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
 80030da:	e01d      	b.n	8003118 <e22_init+0x120>
	{
		HAL_UART_Transmit(huart, data_packet, 7, 50);
 80030dc:	2332      	movs	r3, #50	@ 0x32
 80030de:	2207      	movs	r2, #7
 80030e0:	4912      	ldr	r1, [pc, #72]	@ (800312c <e22_init+0x134>)
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	f00c f830 	bl	800f148 <HAL_UART_Transmit>
		HAL_UART_Receive(huart, response, 7, 50);
 80030e8:	f107 010c 	add.w	r1, r7, #12
 80030ec:	2332      	movs	r3, #50	@ 0x32
 80030ee:	2207      	movs	r2, #7
 80030f0:	6838      	ldr	r0, [r7, #0]
 80030f2:	f00c f8b4 	bl	800f25e <HAL_UART_Receive>
		if(memcmp(&response[1], &data_packet[1], 6) == 0)
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	3301      	adds	r3, #1
 80030fc:	2206      	movs	r2, #6
 80030fe:	490c      	ldr	r1, [pc, #48]	@ (8003130 <e22_init+0x138>)
 8003100:	4618      	mov	r0, r3
 8003102:	f011 fccc 	bl	8014a9e <memcmp>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <e22_init+0x128>
			break;
		HAL_Delay(10);
 800310c:	200a      	movs	r0, #10
 800310e:	f005 fbfb 	bl	8008908 <HAL_Delay>
	for(int i = 0; i < 10; i++)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	2b09      	cmp	r3, #9
 800311c:	ddde      	ble.n	80030dc <e22_init+0xe4>
	  }
	}
	*/


}
 800311e:	e000      	b.n	8003122 <e22_init+0x12a>
			break;
 8003120:	bf00      	nop
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	200008cc 	.word	0x200008cc
 8003130:	200008cd 	.word	0x200008cd

08003134 <e22_sleep_mode>:
  * @brief  Makes the module asleep.
  * @param  lora_conf_struct: Pointer to the lora configuration struct.
  * @retval None
  */
void e22_sleep_mode(e22_conf_struct_t *lora_conf_struct)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	//For sleep mode M0 -> 1    M1 -> 1
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_SET);
 800313c:	2201      	movs	r2, #1
 800313e:	2104      	movs	r1, #4
 8003140:	4805      	ldr	r0, [pc, #20]	@ (8003158 <e22_sleep_mode+0x24>)
 8003142:	f007 f85b 	bl	800a1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_SET);
 8003146:	2201      	movs	r2, #1
 8003148:	2108      	movs	r1, #8
 800314a:	4803      	ldr	r0, [pc, #12]	@ (8003158 <e22_sleep_mode+0x24>)
 800314c:	f007 f856 	bl	800a1fc <HAL_GPIO_WritePin>
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40020800 	.word	0x40020800

0800315c <e22_config_mode>:


void e22_config_mode(e22_conf_struct_t *lora_conf_struct)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	//For config mode M0 -> 0    M1 -> 1
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_RESET);
 8003164:	2200      	movs	r2, #0
 8003166:	2104      	movs	r1, #4
 8003168:	4805      	ldr	r0, [pc, #20]	@ (8003180 <e22_config_mode+0x24>)
 800316a:	f007 f847 	bl	800a1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_SET);
 800316e:	2201      	movs	r2, #1
 8003170:	2108      	movs	r1, #8
 8003172:	4803      	ldr	r0, [pc, #12]	@ (8003180 <e22_config_mode+0x24>)
 8003174:	f007 f842 	bl	800a1fc <HAL_GPIO_WritePin>
}
 8003178:	bf00      	nop
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40020800 	.word	0x40020800

08003184 <e22_transmit_mode>:

void e22_transmit_mode(e22_conf_struct_t *lora_conf_struct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	//For transmission mode M0 -> 0    M1 -> 0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_RESET);
 800318c:	2200      	movs	r2, #0
 800318e:	2104      	movs	r1, #4
 8003190:	4805      	ldr	r0, [pc, #20]	@ (80031a8 <e22_transmit_mode+0x24>)
 8003192:	f007 f833 	bl	800a1fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_RESET);
 8003196:	2200      	movs	r2, #0
 8003198:	2108      	movs	r1, #8
 800319a:	4803      	ldr	r0, [pc, #12]	@ (80031a8 <e22_transmit_mode+0x24>)
 800319c:	f007 f82e 	bl	800a1fc <HAL_GPIO_WritePin>
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40020800 	.word	0x40020800

080031ac <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 80031b8:	68b8      	ldr	r0, [r7, #8]
 80031ba:	f000 f977 	bl	80034ac <calculate_total_acceleration>
 80031be:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 80031c2:	4ba2      	ldr	r3, [pc, #648]	@ (800344c <flight_algorithm_update+0x2a0>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	f200 8165 	bhi.w	8003496 <flight_algorithm_update+0x2ea>
 80031cc:	a201      	add	r2, pc, #4	@ (adr r2, 80031d4 <flight_algorithm_update+0x28>)
 80031ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d2:	bf00      	nop
 80031d4:	080031e9 	.word	0x080031e9
 80031d8:	0800326b 	.word	0x0800326b
 80031dc:	080032eb 	.word	0x080032eb
 80031e0:	08003497 	.word	0x08003497
 80031e4:	08003497 	.word	0x08003497
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 80031e8:	4b99      	ldr	r3, [pc, #612]	@ (8003450 <flight_algorithm_update+0x2a4>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80031f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	dd15      	ble.n	8003228 <flight_algorithm_update+0x7c>
                current_phase = PHASE_BOOST;
 80031fc:	4b93      	ldr	r3, [pc, #588]	@ (800344c <flight_algorithm_update+0x2a0>)
 80031fe:	2201      	movs	r2, #1
 8003200:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8003202:	4b94      	ldr	r3, [pc, #592]	@ (8003454 <flight_algorithm_update+0x2a8>)
 8003204:	2201      	movs	r2, #1
 8003206:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 8003208:	f005 fb72 	bl	80088f0 <HAL_GetTick>
 800320c:	4603      	mov	r3, r0
 800320e:	4a92      	ldr	r2, [pc, #584]	@ (8003458 <flight_algorithm_update+0x2ac>)
 8003210:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8003212:	4b92      	ldr	r3, [pc, #584]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	4b8f      	ldr	r3, [pc, #572]	@ (800345c <flight_algorithm_update+0x2b0>)
 800321e:	801a      	strh	r2, [r3, #0]
                durum_verisi = 2;
 8003220:	4b8f      	ldr	r3, [pc, #572]	@ (8003460 <flight_algorithm_update+0x2b4>)
 8003222:	2202      	movs	r2, #2
 8003224:	701a      	strb	r2, [r3, #0]
				is_rising = 1;
				flight_start_time = HAL_GetTick();
				status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
				durum_verisi = 2;
            }
            break;
 8003226:	e136      	b.n	8003496 <flight_algorithm_update+0x2ea>
            else if(sensor_fusion->velocity > RISING_VELOCITY_TRESHOLD){
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	edd3 7a01 	vldr	s15, [r3, #4]
 800322e:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323a:	dc00      	bgt.n	800323e <flight_algorithm_update+0x92>
            break;
 800323c:	e12b      	b.n	8003496 <flight_algorithm_update+0x2ea>
            	current_phase = PHASE_BOOST;
 800323e:	4b83      	ldr	r3, [pc, #524]	@ (800344c <flight_algorithm_update+0x2a0>)
 8003240:	2201      	movs	r2, #1
 8003242:	701a      	strb	r2, [r3, #0]
				is_rising = 1;
 8003244:	4b83      	ldr	r3, [pc, #524]	@ (8003454 <flight_algorithm_update+0x2a8>)
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
				flight_start_time = HAL_GetTick();
 800324a:	f005 fb51 	bl	80088f0 <HAL_GetTick>
 800324e:	4603      	mov	r3, r0
 8003250:	4a81      	ldr	r2, [pc, #516]	@ (8003458 <flight_algorithm_update+0x2ac>)
 8003252:	6013      	str	r3, [r2, #0]
				status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8003254:	4b81      	ldr	r3, [pc, #516]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b7f      	ldr	r3, [pc, #508]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003260:	801a      	strh	r2, [r3, #0]
				durum_verisi = 2;
 8003262:	4b7f      	ldr	r3, [pc, #508]	@ (8003460 <flight_algorithm_update+0x2b4>)
 8003264:	2202      	movs	r2, #2
 8003266:	701a      	strb	r2, [r3, #0]
            break;
 8003268:	e115      	b.n	8003496 <flight_algorithm_update+0x2ea>

        case PHASE_BOOST:
            // After boost phase (typically 7-9 seconds)
            if (HAL_GetTick() - flight_start_time > 8000) {
 800326a:	f005 fb41 	bl	80088f0 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	4b79      	ldr	r3, [pc, #484]	@ (8003458 <flight_algorithm_update+0x2ac>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800327a:	d90f      	bls.n	800329c <flight_algorithm_update+0xf0>
                current_phase = PHASE_COAST;
 800327c:	4b73      	ldr	r3, [pc, #460]	@ (800344c <flight_algorithm_update+0x2a0>)
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8003282:	4b78      	ldr	r3, [pc, #480]	@ (8003464 <flight_algorithm_update+0x2b8>)
 8003284:	2201      	movs	r2, #1
 8003286:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8003288:	4b74      	ldr	r3, [pc, #464]	@ (800345c <flight_algorithm_update+0x2b0>)
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	f043 0302 	orr.w	r3, r3, #2
 8003290:	b29a      	uxth	r2, r3
 8003292:	4b72      	ldr	r3, [pc, #456]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003294:	801a      	strh	r2, [r3, #0]
                durum_verisi = 3;
 8003296:	4b72      	ldr	r3, [pc, #456]	@ (8003460 <flight_algorithm_update+0x2b4>)
 8003298:	2203      	movs	r2, #3
 800329a:	701a      	strb	r2, [r3, #0]
            }
            if(bmi->datas.acc_x < 0.0 && burnout_counter < 10){
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80032a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	d508      	bpl.n	80032be <flight_algorithm_update+0x112>
 80032ac:	4b6e      	ldr	r3, [pc, #440]	@ (8003468 <flight_algorithm_update+0x2bc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	dc04      	bgt.n	80032be <flight_algorithm_update+0x112>
            	burnout_counter++;
 80032b4:	4b6c      	ldr	r3, [pc, #432]	@ (8003468 <flight_algorithm_update+0x2bc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3301      	adds	r3, #1
 80032ba:	4a6b      	ldr	r2, [pc, #428]	@ (8003468 <flight_algorithm_update+0x2bc>)
 80032bc:	6013      	str	r3, [r2, #0]
            }
            if(burnout_counter == 10){
 80032be:	4b6a      	ldr	r3, [pc, #424]	@ (8003468 <flight_algorithm_update+0x2bc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b0a      	cmp	r3, #10
 80032c4:	f040 80c0 	bne.w	8003448 <flight_algorithm_update+0x29c>
                current_phase = PHASE_COAST;
 80032c8:	4b60      	ldr	r3, [pc, #384]	@ (800344c <flight_algorithm_update+0x2a0>)
 80032ca:	2202      	movs	r2, #2
 80032cc:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 80032ce:	4b65      	ldr	r3, [pc, #404]	@ (8003464 <flight_algorithm_update+0x2b8>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 80032d4:	4b61      	ldr	r3, [pc, #388]	@ (800345c <flight_algorithm_update+0x2b0>)
 80032d6:	881b      	ldrh	r3, [r3, #0]
 80032d8:	f043 0302 	orr.w	r3, r3, #2
 80032dc:	b29a      	uxth	r2, r3
 80032de:	4b5f      	ldr	r3, [pc, #380]	@ (800345c <flight_algorithm_update+0x2b0>)
 80032e0:	801a      	strh	r2, [r3, #0]
                durum_verisi = 3;
 80032e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003460 <flight_algorithm_update+0x2b4>)
 80032e4:	2203      	movs	r2, #3
 80032e6:	701a      	strb	r2, [r3, #0]
            }
            break;
 80032e8:	e0ae      	b.n	8003448 <flight_algorithm_update+0x29c>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude && !is_armed) {
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	ed93 7a08 	vldr	s14, [r3, #32]
 80032f0:	4b5e      	ldr	r3, [pc, #376]	@ (800346c <flight_algorithm_update+0x2c0>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	dd10      	ble.n	8003322 <flight_algorithm_update+0x176>
 8003300:	4b5b      	ldr	r3, [pc, #364]	@ (8003470 <flight_algorithm_update+0x2c4>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10c      	bne.n	8003322 <flight_algorithm_update+0x176>
                is_armed = 1;
 8003308:	4b59      	ldr	r3, [pc, #356]	@ (8003470 <flight_algorithm_update+0x2c4>)
 800330a:	2201      	movs	r2, #1
 800330c:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 800330e:	4b53      	ldr	r3, [pc, #332]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003310:	881b      	ldrh	r3, [r3, #0]
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	b29a      	uxth	r2, r3
 8003318:	4b50      	ldr	r3, [pc, #320]	@ (800345c <flight_algorithm_update+0x2b0>)
 800331a:	801a      	strh	r2, [r3, #0]
                durum_verisi = 4;
 800331c:	4b50      	ldr	r3, [pc, #320]	@ (8003460 <flight_algorithm_update+0x2b4>)
 800331e:	2204      	movs	r2, #4
 8003320:	701a      	strb	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.theta) > max_angle_threshold) && deployed_angle) {
 8003322:	4b53      	ldr	r3, [pc, #332]	@ (8003470 <flight_algorithm_update+0x2c4>)
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d020      	beq.n	800336c <flight_algorithm_update+0x1c0>
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003330:	eeb0 7ae7 	vabs.f32	s14, s15
 8003334:	4b4f      	ldr	r3, [pc, #316]	@ (8003474 <flight_algorithm_update+0x2c8>)
 8003336:	edd3 7a00 	vldr	s15, [r3]
 800333a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800333e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003342:	dd13      	ble.n	800336c <flight_algorithm_update+0x1c0>
 8003344:	4b4c      	ldr	r3, [pc, #304]	@ (8003478 <flight_algorithm_update+0x2cc>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00f      	beq.n	800336c <flight_algorithm_update+0x1c0>
                drogue_deployed = 1;
 800334c:	4b4b      	ldr	r3, [pc, #300]	@ (800347c <flight_algorithm_update+0x2d0>)
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8003352:	4b49      	ldr	r3, [pc, #292]	@ (8003478 <flight_algorithm_update+0x2cc>)
 8003354:	2200      	movs	r2, #0
 8003356:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8003358:	4b40      	ldr	r3, [pc, #256]	@ (800345c <flight_algorithm_update+0x2b0>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	f043 0308 	orr.w	r3, r3, #8
 8003360:	b29a      	uxth	r2, r3
 8003362:	4b3e      	ldr	r3, [pc, #248]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003364:	801a      	strh	r2, [r3, #0]
                durum_verisi = 5;
 8003366:	4b3e      	ldr	r3, [pc, #248]	@ (8003460 <flight_algorithm_update+0x2b4>)
 8003368:	2205      	movs	r2, #5
 800336a:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 800336c:	4b40      	ldr	r3, [pc, #256]	@ (8003470 <flight_algorithm_update+0x2c4>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d037      	beq.n	80033e4 <flight_algorithm_update+0x238>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	edd3 7a01 	vldr	s15, [r3, #4]
 800337a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	d52f      	bpl.n	80033e4 <flight_algorithm_update+0x238>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	ed93 7a01 	vldr	s14, [r3, #4]
 800338a:	4b3d      	ldr	r3, [pc, #244]	@ (8003480 <flight_algorithm_update+0x2d4>)
 800338c:	edd3 7a00 	vldr	s15, [r3]
 8003390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003398:	d524      	bpl.n	80033e4 <flight_algorithm_update+0x238>
 800339a:	4b3a      	ldr	r3, [pc, #232]	@ (8003484 <flight_algorithm_update+0x2d8>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d020      	beq.n	80033e4 <flight_algorithm_update+0x238>
                apogee_counter++;
 80033a2:	4b39      	ldr	r3, [pc, #228]	@ (8003488 <flight_algorithm_update+0x2dc>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3301      	adds	r3, #1
 80033a8:	4a37      	ldr	r2, [pc, #220]	@ (8003488 <flight_algorithm_update+0x2dc>)
 80033aa:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 80033ac:	4b36      	ldr	r3, [pc, #216]	@ (8003488 <flight_algorithm_update+0x2dc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	dd1a      	ble.n	80033ea <flight_algorithm_update+0x23e>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 80033b4:	4b29      	ldr	r3, [pc, #164]	@ (800345c <flight_algorithm_update+0x2b0>)
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	f043 0310 	orr.w	r3, r3, #16
 80033bc:	b29a      	uxth	r2, r3
 80033be:	4b27      	ldr	r3, [pc, #156]	@ (800345c <flight_algorithm_update+0x2b0>)
 80033c0:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 80033c2:	4b26      	ldr	r3, [pc, #152]	@ (800345c <flight_algorithm_update+0x2b0>)
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	f043 0320 	orr.w	r3, r3, #32
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	4b23      	ldr	r3, [pc, #140]	@ (800345c <flight_algorithm_update+0x2b0>)
 80033ce:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 80033d0:	4b2a      	ldr	r3, [pc, #168]	@ (800347c <flight_algorithm_update+0x2d0>)
 80033d2:	2201      	movs	r2, #1
 80033d4:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 80033d6:	4b2b      	ldr	r3, [pc, #172]	@ (8003484 <flight_algorithm_update+0x2d8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	701a      	strb	r2, [r3, #0]
                    durum_verisi = 6;
 80033dc:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <flight_algorithm_update+0x2b4>)
 80033de:	2206      	movs	r2, #6
 80033e0:	701a      	strb	r2, [r3, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 80033e2:	e002      	b.n	80033ea <flight_algorithm_update+0x23e>
                }
            } else {
                apogee_counter = 0;
 80033e4:	4b28      	ldr	r3, [pc, #160]	@ (8003488 <flight_algorithm_update+0x2dc>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4a24      	ldr	r2, [pc, #144]	@ (8003480 <flight_algorithm_update+0x2d4>)
 80033f0:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 80033f2:	4b22      	ldr	r3, [pc, #136]	@ (800347c <flight_algorithm_update+0x2d0>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d04c      	beq.n	8003494 <flight_algorithm_update+0x2e8>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	ed93 7a08 	vldr	s14, [r3, #32]
 8003400:	4b22      	ldr	r3, [pc, #136]	@ (800348c <flight_algorithm_update+0x2e0>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800340a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340e:	d400      	bmi.n	8003412 <flight_algorithm_update+0x266>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                durum_verisi = 7;
            }
            break;
 8003410:	e040      	b.n	8003494 <flight_algorithm_update+0x2e8>
                current_phase = PHASE_MAIN_DESCENT;
 8003412:	4b0e      	ldr	r3, [pc, #56]	@ (800344c <flight_algorithm_update+0x2a0>)
 8003414:	2203      	movs	r2, #3
 8003416:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 8003418:	4b10      	ldr	r3, [pc, #64]	@ (800345c <flight_algorithm_update+0x2b0>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003420:	b29a      	uxth	r2, r3
 8003422:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003424:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800342e:	b29a      	uxth	r2, r3
 8003430:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <flight_algorithm_update+0x2b0>)
 8003432:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8003434:	4b16      	ldr	r3, [pc, #88]	@ (8003490 <flight_algorithm_update+0x2e4>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 800343a:	4b10      	ldr	r3, [pc, #64]	@ (800347c <flight_algorithm_update+0x2d0>)
 800343c:	2200      	movs	r2, #0
 800343e:	701a      	strb	r2, [r3, #0]
                durum_verisi = 7;
 8003440:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <flight_algorithm_update+0x2b4>)
 8003442:	2207      	movs	r2, #7
 8003444:	701a      	strb	r2, [r3, #0]
            break;
 8003446:	e025      	b.n	8003494 <flight_algorithm_update+0x2e8>
            break;
 8003448:	bf00      	nop
 800344a:	e024      	b.n	8003496 <flight_algorithm_update+0x2ea>
 800344c:	200008d5 	.word	0x200008d5
 8003450:	20000004 	.word	0x20000004
 8003454:	200008d6 	.word	0x200008d6
 8003458:	200008e4 	.word	0x200008e4
 800345c:	200008ec 	.word	0x200008ec
 8003460:	2000001c 	.word	0x2000001c
 8003464:	20000014 	.word	0x20000014
 8003468:	20000018 	.word	0x20000018
 800346c:	20000008 	.word	0x20000008
 8003470:	200008d7 	.word	0x200008d7
 8003474:	20000010 	.word	0x20000010
 8003478:	20000015 	.word	0x20000015
 800347c:	200008d8 	.word	0x200008d8
 8003480:	200008e0 	.word	0x200008e0
 8003484:	20000016 	.word	0x20000016
 8003488:	200008dc 	.word	0x200008dc
 800348c:	2000000c 	.word	0x2000000c
 8003490:	200008d9 	.word	0x200008d9
            break;
 8003494:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    prev_altitude = bme->altitude;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4a03      	ldr	r2, [pc, #12]	@ (80034a8 <flight_algorithm_update+0x2fc>)
 800349c:	6013      	str	r3, [r2, #0]
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	200008e8 	.word	0x200008e8

080034ac <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80034c0:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80034d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80034d4:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80034e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80034e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ec:	eeb0 0a67 	vmov.f32	s0, s15
 80034f0:	f015 fada 	bl	8018aa8 <sqrtf>
 80034f4:	eef0 7a40 	vmov.f32	s15, s0
}
 80034f8:	eeb0 0a67 	vmov.f32	s0, s15
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <flight_algorithm_get_durum_verisi>:
{
    return status_bits;
}

uint8_t flight_algorithm_get_durum_verisi(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
    return durum_verisi;
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <flight_algorithm_get_durum_verisi+0x14>)
 800350a:	781b      	ldrb	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	2000001c 	.word	0x2000001c

0800351c <flight_algorithm_get_start_time>:
    main_chute_altitude = main_chute_altitude_param;
    max_angle_threshold = max_angle_threshold_param;
}

uint32_t flight_algorithm_get_start_time(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
    return flight_start_time;
 8003520:	4b03      	ldr	r3, [pc, #12]	@ (8003530 <flight_algorithm_get_start_time+0x14>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	200008e4 	.word	0x200008e4

08003534 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    // Initialize state vector - başlangıçta güvenli değerler
    kf->x[0] = 0.0f;  // Altitude - başlangıç irtifa
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity - başlangıçta hız sıfır
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration - başlangıçta ivme sıfır
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with reasonable initial uncertainty
    for (int i = 0; i < 3; i++) {
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e019      	b.n	800358e <KalmanFilter_Init+0x5a>
        for (int j = 0; j < 3; j++) {
 800355a:	2300      	movs	r3, #0
 800355c:	60bb      	str	r3, [r7, #8]
 800355e:	e010      	b.n	8003582 <KalmanFilter_Init+0x4e>
            kf->P[i][j] = 0.0f;
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4613      	mov	r3, r2
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	4413      	add	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	4413      	add	r3, r2
 800356e:	3302      	adds	r3, #2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3304      	adds	r3, #4
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	3301      	adds	r3, #1
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2b02      	cmp	r3, #2
 8003586:	ddeb      	ble.n	8003560 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	3301      	adds	r3, #1
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2b02      	cmp	r3, #2
 8003592:	dde2      	ble.n	800355a <KalmanFilter_Init+0x26>
        }
    }

    // Başlangıç belirsizlikleri - daha konservatif değerler
    kf->P[0][0] = 1.0f;     // Altitude uncertainty (1 meter)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800359a:	60da      	str	r2, [r3, #12]
    kf->P[1][1] = 0.1f;     // Velocity uncertainty (0.1 m/s)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a11      	ldr	r2, [pc, #68]	@ (80035e4 <KalmanFilter_Init+0xb0>)
 80035a0:	61da      	str	r2, [r3, #28]
    kf->P[2][2] = 1.0f;     // Acceleration uncertainty (1 m/s²)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0e      	ldr	r2, [pc, #56]	@ (80035e8 <KalmanFilter_Init+0xb4>)
 80035ae:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0e      	ldr	r2, [pc, #56]	@ (80035ec <KalmanFilter_Init+0xb8>)
 80035b4:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a0d      	ldr	r2, [pc, #52]	@ (80035f0 <KalmanFilter_Init+0xbc>)
 80035ba:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	3dcccccd 	.word	0x3dcccccd
 80035e8:	3c23d70a 	.word	0x3c23d70a
 80035ec:	3ba3d70a 	.word	0x3ba3d70a
 80035f0:	40a00000 	.word	0x40a00000

080035f4 <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8003600:	edc7 0a01 	vstr	s1, [r7, #4]
 8003604:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	edd3 7a01 	vldr	s15, [r3, #4]
 800360e:	eef0 7ae7 	vabs.f32	s15, s15
 8003612:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003678 <KalmanFilter_Update+0x84>
 8003616:	eef4 7ac7 	vcmpe.f32	s15, s14
 800361a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361e:	dd0f      	ble.n	8003640 <KalmanFilter_Update+0x4c>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	edd3 7a01 	vldr	s15, [r3, #4]
 8003626:	eef0 7ae7 	vabs.f32	s15, s15
 800362a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800367c <KalmanFilter_Update+0x88>
 800362e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003636:	d503      	bpl.n	8003640 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	649a      	str	r2, [r3, #72]	@ 0x48
 800363e:	e002      	b.n	8003646 <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 8003646:	ed97 0a00 	vldr	s0, [r7]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 f818 	bl	8003680 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 8003650:	edd7 0a01 	vldr	s1, [r7, #4]
 8003654:	ed97 0a02 	vldr	s0, [r7, #8]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fa1d 	bl	8003a98 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f001 f96a 	bl	8004938 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	ee07 3a90 	vmov	s15, r3
}
 800366c:	eeb0 0a67 	vmov.f32	s0, s15
 8003670:	3710      	adds	r7, #16
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	43960000 	.word	0x43960000
 800367c:	43af0000 	.word	0x43af0000

08003680 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 8003680:	b580      	push	{r7, lr}
 8003682:	b0b6      	sub	sp, #216	@ 0xd8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 800368c:	edd7 7a00 	vldr	s15, [r7]
 8003690:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003694:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 8003698:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800369c:	edd7 7a00 	vldr	s15, [r7]
 80036a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a4:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 80036a8:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80036ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80036b0:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	ed93 7a00 	vldr	s14, [r3]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80036c0:	edd7 7a00 	vldr	s15, [r7]
 80036c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80036d2:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80036d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80036da:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80036de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80036e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e6:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80036f6:	edd7 7a00 	vldr	s15, [r7]
 80036fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003702:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003714:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800371c:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8003724:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800372e:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003732:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8003736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800373a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800373e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003742:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003746:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800374a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800374e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003752:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800375a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800375e:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003762:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003766:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800376a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800376e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003772:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003776:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800377a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800377e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003782:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800378a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 800378e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003792:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800379a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 800379e:	ed97 7a00 	vldr	s14, [r7]
 80037a2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80037aa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 80037ae:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80037b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80037b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037ba:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80037c2:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 80037c6:	ed97 7a00 	vldr	s14, [r7]
 80037ca:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80037d2:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 80037d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 80037de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 80037e8:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80037ec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80037f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 80037f4:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	663b      	str	r3, [r7, #96]	@ 0x60
 80037fe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003802:	667b      	str	r3, [r7, #100]	@ 0x64
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	673b      	str	r3, [r7, #112]	@ 0x70
 8003814:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003818:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 800381a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800381e:	2224      	movs	r2, #36	@ 0x24
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f011 f94b 	bl	8014abe <memset>
    float FPFT[3][3] = {0};
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	2224      	movs	r2, #36	@ 0x24
 800382e:	2100      	movs	r1, #0
 8003830:	4618      	mov	r0, r3
 8003832:	f011 f944 	bl	8014abe <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800383c:	e06a      	b.n	8003914 <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003844:	e05d      	b.n	8003902 <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 8003846:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800384a:	4613      	mov	r3, r2
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	4413      	add	r3, r2
 8003850:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	33d8      	adds	r3, #216	@ 0xd8
 800385a:	443b      	add	r3, r7
 800385c:	3ba8      	subs	r3, #168	@ 0xa8
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003864:	2300      	movs	r3, #0
 8003866:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800386a:	e041      	b.n	80038f0 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 800386c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	33d8      	adds	r3, #216	@ 0xd8
 8003880:	443b      	add	r3, r7
 8003882:	3ba8      	subs	r3, #168	@ 0xa8
 8003884:	ed93 7a00 	vldr	s14, [r3]
 8003888:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800388c:	4613      	mov	r3, r2
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	4413      	add	r3, r2
 8003892:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	33d8      	adds	r3, #216	@ 0xd8
 800389c:	443b      	add	r3, r7
 800389e:	3b84      	subs	r3, #132	@ 0x84
 80038a0:	edd3 6a00 	vldr	s13, [r3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80038aa:	4613      	mov	r3, r2
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	4413      	add	r3, r2
 80038b0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038b4:	4413      	add	r3, r2
 80038b6:	3302      	adds	r3, #2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	3304      	adds	r3, #4
 80038be:	edd3 7a00 	vldr	s15, [r3]
 80038c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80038ce:	4613      	mov	r3, r2
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	4413      	add	r3, r2
 80038d4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	33d8      	adds	r3, #216	@ 0xd8
 80038de:	443b      	add	r3, r7
 80038e0:	3ba8      	subs	r3, #168	@ 0xa8
 80038e2:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80038e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038ea:	3301      	adds	r3, #1
 80038ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	ddb9      	ble.n	800386c <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 80038f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80038fc:	3301      	adds	r3, #1
 80038fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003902:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003906:	2b02      	cmp	r3, #2
 8003908:	dd9d      	ble.n	8003846 <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 800390a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800390e:	3301      	adds	r3, #1
 8003910:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003914:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003918:	2b02      	cmp	r3, #2
 800391a:	dd90      	ble.n	800383e <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 800391c:	2300      	movs	r3, #0
 800391e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003922:	e069      	b.n	80039f8 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800392a:	e05c      	b.n	80039e6 <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 800392c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003930:	4613      	mov	r3, r2
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	4413      	add	r3, r2
 8003936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800393a:	4413      	add	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	33d8      	adds	r3, #216	@ 0xd8
 8003940:	443b      	add	r3, r7
 8003942:	3bcc      	subs	r3, #204	@ 0xcc
 8003944:	f04f 0200 	mov.w	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800394a:	2300      	movs	r3, #0
 800394c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003950:	e040      	b.n	80039d4 <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 8003952:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	33d8      	adds	r3, #216	@ 0xd8
 8003966:	443b      	add	r3, r7
 8003968:	3bcc      	subs	r3, #204	@ 0xcc
 800396a:	ed93 7a00 	vldr	s14, [r3]
 800396e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	33d8      	adds	r3, #216	@ 0xd8
 8003982:	443b      	add	r3, r7
 8003984:	3ba8      	subs	r3, #168	@ 0xa8
 8003986:	edd3 6a00 	vldr	s13, [r3]
 800398a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800398e:	4613      	mov	r3, r2
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4413      	add	r3, r2
 8003994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003998:	4413      	add	r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	33d8      	adds	r3, #216	@ 0xd8
 800399e:	443b      	add	r3, r7
 80039a0:	3b84      	subs	r3, #132	@ 0x84
 80039a2:	edd3 7a00 	vldr	s15, [r3]
 80039a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039b2:	4613      	mov	r3, r2
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	4413      	add	r3, r2
 80039b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	33d8      	adds	r3, #216	@ 0xd8
 80039c2:	443b      	add	r3, r7
 80039c4:	3bcc      	subs	r3, #204	@ 0xcc
 80039c6:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80039ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039ce:	3301      	adds	r3, #1
 80039d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80039d8:	2b02      	cmp	r3, #2
 80039da:	ddba      	ble.n	8003952 <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 80039dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039e0:	3301      	adds	r3, #1
 80039e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	dd9e      	ble.n	800392c <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 80039ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039f2:	3301      	adds	r3, #1
 80039f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	dd91      	ble.n	8003924 <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 8003a00:	2300      	movs	r3, #0
 8003a02:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a06:	e03e      	b.n	8003a86 <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a0e:	e031      	b.n	8003a74 <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 8003a10:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003a14:	4613      	mov	r3, r2
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	4413      	add	r3, r2
 8003a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	33d8      	adds	r3, #216	@ 0xd8
 8003a24:	443b      	add	r3, r7
 8003a26:	3bcc      	subs	r3, #204	@ 0xcc
 8003a28:	ed93 7a00 	vldr	s14, [r3]
 8003a2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003a30:	4613      	mov	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	33d8      	adds	r3, #216	@ 0xd8
 8003a40:	443b      	add	r3, r7
 8003a42:	3b60      	subs	r3, #96	@ 0x60
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003a52:	4613      	mov	r3, r2
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4413      	add	r3, r2
 8003a58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a5c:	4413      	add	r3, r2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	3304      	adds	r3, #4
 8003a66:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8003a6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a6e:	3301      	adds	r3, #1
 8003a70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	ddc9      	ble.n	8003a10 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 8003a7c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a80:	3301      	adds	r3, #1
 8003a82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	ddbc      	ble.n	8003a08 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 8003a8e:	bf00      	nop
 8003a90:	bf00      	nop
 8003a92:	37d8      	adds	r7, #216	@ 0xd8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 8003a98:	b5b0      	push	{r4, r5, r7, lr}
 8003a9a:	b0f6      	sub	sp, #472	@ 0x1d8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aa2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003aa6:	6018      	str	r0, [r3, #0]
 8003aa8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ab0:	ed83 0a00 	vstr	s0, [r3]
 8003ab4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ab8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003abc:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 8003ac0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ac4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 826b 	beq.w	8003fa8 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003ae2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003ae6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 8003aea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aee:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003af8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003afc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b06:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8003b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b0e:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 8003b12:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003b2c:	e044      	b.n	8003bb8 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 8003b2e:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 8003b32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b36:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b40:	3302      	adds	r3, #2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	edd3 7a00 	vldr	s15, [r3]
 8003b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b50:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 8003b54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b58:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b62:	3305      	adds	r3, #5
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	3304      	adds	r3, #4
 8003b6a:	edd3 7a00 	vldr	s15, [r3]
 8003b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b76:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 8003b7a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b7e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b88:	3308      	adds	r3, #8
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	3304      	adds	r3, #4
 8003b90:	edd3 7a00 	vldr	s15, [r3]
 8003b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ba6:	443b      	add	r3, r7
 8003ba8:	3bac      	subs	r3, #172	@ 0xac
 8003baa:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003bae:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003bb8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	ddb6      	ble.n	8003b2e <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 8003bc0:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003bc4:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003bc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bcc:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8003bd0:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003bd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bdc:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003be0:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003be4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bf0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bfe:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 8003c02:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 8003c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c12:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 8003c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1a:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003c24:	e04f      	b.n	8003cc6 <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 8003c26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c2a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c2e:	6819      	ldr	r1, [r3, #0]
 8003c30:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003c34:	4613      	mov	r3, r2
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	330c      	adds	r3, #12
 8003c40:	ed93 7a00 	vldr	s14, [r3]
 8003c44:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c4c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c50:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c54:	6819      	ldr	r1, [r3, #0]
 8003c56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	3304      	adds	r3, #4
 8003c68:	edd3 6a00 	vldr	s13, [r3]
 8003c6c:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c7c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	3314      	adds	r3, #20
 8003c92:	edd3 6a00 	vldr	s13, [r3]
 8003c96:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ca2:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003cb4:	443b      	add	r3, r7
 8003cb6:	3bb8      	subs	r3, #184	@ 0xb8
 8003cb8:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003cbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003cc6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	ddab      	ble.n	8003c26 <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003cd4:	e029      	b.n	8003d2a <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 8003cd6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cda:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	4413      	add	r3, r2
 8003ce8:	ed93 7a00 	vldr	s14, [r3]
 8003cec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003cf6:	443b      	add	r3, r7
 8003cf8:	3bb8      	subs	r3, #184	@ 0xb8
 8003cfa:	edd3 6a00 	vldr	s13, [r3]
 8003cfe:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d0e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003d20:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003d24:	3301      	adds	r3, #1
 8003d26:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003d2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	ddd1      	ble.n	8003cd6 <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003d32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d36:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	2324      	movs	r3, #36	@ 0x24
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2100      	movs	r1, #0
 8003d42:	f010 febc 	bl	8014abe <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8003d46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d4a:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003d4e:	4618      	mov	r0, r3
 8003d50:	2324      	movs	r3, #36	@ 0x24
 8003d52:	461a      	mov	r2, r3
 8003d54:	2100      	movs	r1, #0
 8003d56:	f010 feb2 	bl	8014abe <memset>

        for (int i = 0; i < 3; i++) {
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003d60:	e062      	b.n	8003e28 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003d68:	e055      	b.n	8003e16 <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003d6a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d74:	443b      	add	r3, r7
 8003d76:	3bb8      	subs	r3, #184	@ 0xb8
 8003d78:	ed93 7a00 	vldr	s14, [r3]
 8003d7c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d86:	443b      	add	r3, r7
 8003d88:	3ba0      	subs	r3, #160	@ 0xa0
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d96:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003d9a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003d9e:	4613      	mov	r3, r2
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003db2:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003db6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d102      	bne.n	8003dc4 <KalmanFilter_MeasurementUpdate+0x32c>
 8003dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dc2:	e001      	b.n	8003dc8 <KalmanFilter_MeasurementUpdate+0x330>
 8003dc4:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80040b4 <KalmanFilter_MeasurementUpdate+0x61c>
 8003dc8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dcc:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003dd0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003dde:	4413      	add	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	edd3 7a00 	vldr	s15, [r3]
 8003de8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003df0:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003df4:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003df8:	4613      	mov	r3, r2
 8003dfa:	005b      	lsls	r3, r3, #1
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003e0c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003e10:	3301      	adds	r3, #1
 8003e12:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003e16:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	dda5      	ble.n	8003d6a <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003e1e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e22:	3301      	adds	r3, #1
 8003e24:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003e28:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	dd98      	ble.n	8003d62 <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003e30:	2300      	movs	r3, #0
 8003e32:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003e36:	e076      	b.n	8003f26 <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003e3e:	e069      	b.n	8003f14 <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003e40:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e44:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003e48:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003e68:	e04b      	b.n	8003f02 <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003e6a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e6e:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003e72:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003e76:	4613      	mov	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	ed93 7a00 	vldr	s14, [r3]
 8003e8a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e8e:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003e92:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	edd3 6a00 	vldr	s13, [r3]
 8003eaa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003eb2:	6819      	ldr	r1, [r3, #0]
 8003eb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003eb8:	4613      	mov	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3302      	adds	r3, #2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	3304      	adds	r3, #4
 8003ecc:	edd3 7a00 	vldr	s15, [r3]
 8003ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003edc:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003ee0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ef8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003efc:	3301      	adds	r3, #1
 8003efe:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003f02:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	ddaf      	ble.n	8003e6a <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003f0a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003f0e:	3301      	adds	r3, #1
 8003f10:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003f14:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	dd91      	ble.n	8003e40 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003f1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003f20:	3301      	adds	r3, #1
 8003f22:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003f26:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	dd84      	ble.n	8003e38 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003f34:	e032      	b.n	8003f9c <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003f36:	2300      	movs	r3, #0
 8003f38:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003f3c:	e025      	b.n	8003f8a <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003f3e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f42:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003f46:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f60:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	4413      	add	r3, r2
 8003f70:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003f74:	4413      	add	r3, r2
 8003f76:	3302      	adds	r3, #2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4403      	add	r3, r0
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003f80:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f84:	3301      	adds	r3, #1
 8003f86:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003f8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	ddd5      	ble.n	8003f3e <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003f92:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003f96:	3301      	adds	r3, #1
 8003f98:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003f9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	ddc8      	ble.n	8003f36 <KalmanFilter_MeasurementUpdate+0x49e>
 8003fa4:	f000 bcc2 	b.w	800492c <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003fa8:	4b43      	ldr	r3, [pc, #268]	@ (80040b8 <KalmanFilter_MeasurementUpdate+0x620>)
 8003faa:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003fae:	461d      	mov	r5, r3
 8003fb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003fb8:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003fbc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fc0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003fca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fce:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003fd8:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003fdc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fe0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fee:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003ff2:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003ff6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ffa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	edd3 7a02 	vldr	s15, [r3, #8]
 8004004:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004008:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 800400c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	611a      	str	r2, [r3, #16]
 800401c:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 800401e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004026:	461a      	mov	r2, r3
 8004028:	2300      	movs	r3, #0
 800402a:	6013      	str	r3, [r2, #0]
 800402c:	6053      	str	r3, [r2, #4]
 800402e:	6093      	str	r3, [r2, #8]
 8004030:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8004032:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004036:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 800403e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004042:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800404c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800405a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8004064:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004068:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8004070:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004074:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004078:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 800407a:	2300      	movs	r3, #0
 800407c:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8004080:	e079      	b.n	8004176 <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004088:	e06c      	b.n	8004164 <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 800408a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800408e:	4613      	mov	r3, r2
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	4413      	add	r3, r2
 8004094:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80040a0:	443b      	add	r3, r7
 80040a2:	3bf8      	subs	r3, #248	@ 0xf8
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80040b0:	e04f      	b.n	8004152 <KalmanFilter_MeasurementUpdate+0x6ba>
 80040b2:	bf00      	nop
 80040b4:	00000000 	.word	0x00000000
 80040b8:	0801a6f0 	.word	0x0801a6f0
 80040bc:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 80040c0:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80040d6:	443b      	add	r3, r7
 80040d8:	3bf8      	subs	r3, #248	@ 0xf8
 80040da:	ed93 7a00 	vldr	s14, [r3]
 80040de:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80040e2:	4613      	mov	r3, r2
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80040f4:	443b      	add	r3, r7
 80040f6:	3bd0      	subs	r3, #208	@ 0xd0
 80040f8:	edd3 6a00 	vldr	s13, [r3]
 80040fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004100:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004104:	6819      	ldr	r1, [r3, #0]
 8004106:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8004114:	4413      	add	r3, r2
 8004116:	3302      	adds	r3, #2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3304      	adds	r3, #4
 800411e:	edd3 7a00 	vldr	s15, [r3]
 8004122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800412a:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800412e:	4613      	mov	r3, r2
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	4413      	add	r3, r2
 8004134:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004140:	443b      	add	r3, r7
 8004142:	3bf8      	subs	r3, #248	@ 0xf8
 8004144:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004148:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800414c:	3301      	adds	r3, #1
 800414e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004152:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004156:	2b02      	cmp	r3, #2
 8004158:	ddb2      	ble.n	80040c0 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 800415a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800415e:	3301      	adds	r3, #1
 8004160:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004164:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004168:	2b02      	cmp	r3, #2
 800416a:	dd8e      	ble.n	800408a <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 800416c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004170:	3301      	adds	r3, #1
 8004172:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8004176:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800417a:	2b01      	cmp	r3, #1
 800417c:	dd81      	ble.n	8004082 <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 800417e:	2300      	movs	r3, #0
 8004180:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004184:	e098      	b.n	80042b8 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8004186:	2300      	movs	r3, #0
 8004188:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800418c:	e08a      	b.n	80042a4 <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 800418e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004192:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8004196:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800419a:	0059      	lsls	r1, r3, #1
 800419c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80041a0:	440b      	add	r3, r1
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80041ac:	2300      	movs	r3, #0
 80041ae:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80041b2:	e042      	b.n	800423a <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 80041b4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041b8:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80041bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80041c0:	0059      	lsls	r1, r3, #1
 80041c2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80041c6:	440b      	add	r3, r1
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	ed93 7a00 	vldr	s14, [r3]
 80041d0:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80041e6:	443b      	add	r3, r7
 80041e8:	3bf8      	subs	r3, #248	@ 0xf8
 80041ea:	edd3 6a00 	vldr	s13, [r3]
 80041ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004204:	443b      	add	r3, r7
 8004206:	3bd0      	subs	r3, #208	@ 0xd0
 8004208:	edd3 7a00 	vldr	s15, [r3]
 800420c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004214:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004218:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800421c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004220:	0059      	lsls	r1, r3, #1
 8004222:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004226:	440b      	add	r3, r1
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004230:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004234:	3301      	adds	r3, #1
 8004236:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800423a:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800423e:	2b02      	cmp	r3, #2
 8004240:	ddb8      	ble.n	80041b4 <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 8004242:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004246:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800424a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800424e:	0059      	lsls	r1, r3, #1
 8004250:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004254:	440b      	add	r3, r1
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	ed93 7a00 	vldr	s14, [r3]
 800425e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004262:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 8004266:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800426a:	0059      	lsls	r1, r3, #1
 800426c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004270:	440b      	add	r3, r1
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	edd3 7a00 	vldr	s15, [r3]
 800427a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004282:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8004286:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800428a:	0059      	lsls	r1, r3, #1
 800428c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004290:	440b      	add	r3, r1
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 800429a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800429e:	3301      	adds	r3, #1
 80042a0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80042a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	f77f af70 	ble.w	800418e <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 80042ae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80042b2:	3301      	adds	r3, #1
 80042b4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80042b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80042bc:	2b01      	cmp	r3, #1
 80042be:	f77f af62 	ble.w	8004186 <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 80042c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042ca:	ed93 7a00 	vldr	s14, [r3]
 80042ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80042da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042de:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042e6:	edd3 6a01 	vldr	s13, [r3, #4]
 80042ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80042f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042fe:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 8004302:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 8004306:	eef0 7ae7 	vabs.f32	s15, s15
 800430a:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 80040bc <KalmanFilter_MeasurementUpdate+0x624>
 800430e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	f100 8308 	bmi.w	800492a <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 800431a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800431e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004322:	edd3 6a03 	vldr	s13, [r3, #12]
 8004326:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800432a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800432e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004332:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004336:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 800433a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800433e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004342:	edd3 7a01 	vldr	s15, [r3, #4]
 8004346:	eef1 6a67 	vneg.f32	s13, s15
 800434a:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800434e:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004352:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004356:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800435a:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 800435e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004362:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004366:	edd3 7a02 	vldr	s15, [r3, #8]
 800436a:	eef1 6a67 	vneg.f32	s13, s15
 800436e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004372:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004376:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800437a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800437e:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 8004382:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800438a:	edd3 6a00 	vldr	s13, [r3]
 800438e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004392:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004396:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800439a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800439e:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 80043a2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043a6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80043aa:	461a      	mov	r2, r3
 80043ac:	2300      	movs	r3, #0
 80043ae:	6013      	str	r3, [r2, #0]
 80043b0:	6053      	str	r3, [r2, #4]
 80043b2:	6093      	str	r3, [r2, #8]
 80043b4:	60d3      	str	r3, [r2, #12]
 80043b6:	6113      	str	r3, [r2, #16]
 80043b8:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 80043ba:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043be:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	6053      	str	r3, [r2, #4]
 80043ca:	6093      	str	r3, [r2, #8]
 80043cc:	60d3      	str	r3, [r2, #12]
 80043ce:	6113      	str	r3, [r2, #16]
 80043d0:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80043d8:	e06f      	b.n	80044ba <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 80043da:	2300      	movs	r3, #0
 80043dc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80043e0:	e062      	b.n	80044a8 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 80043e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043e6:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80043ea:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80043ee:	0059      	lsls	r1, r3, #1
 80043f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80043f4:	440b      	add	r3, r1
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004406:	e046      	b.n	8004496 <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8004408:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800440c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004410:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004414:	0059      	lsls	r1, r3, #1
 8004416:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800441a:	440b      	add	r3, r1
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	ed93 7a00 	vldr	s14, [r3]
 8004424:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004428:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800442c:	6819      	ldr	r1, [r3, #0]
 800442e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004432:	4613      	mov	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 800443c:	4413      	add	r3, r2
 800443e:	3302      	adds	r3, #2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3304      	adds	r3, #4
 8004446:	edd3 6a00 	vldr	s13, [r3]
 800444a:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 800444e:	4613      	mov	r3, r2
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	4413      	add	r3, r2
 8004454:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004458:	4413      	add	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004460:	443b      	add	r3, r7
 8004462:	3bd0      	subs	r3, #208	@ 0xd0
 8004464:	edd3 7a00 	vldr	s15, [r3]
 8004468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800446c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004470:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004474:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004478:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800447c:	0059      	lsls	r1, r3, #1
 800447e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004482:	440b      	add	r3, r1
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4413      	add	r3, r2
 8004488:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 800448c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004490:	3301      	adds	r3, #1
 8004492:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 8004496:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 800449a:	2b02      	cmp	r3, #2
 800449c:	ddb4      	ble.n	8004408 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 800449e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80044a2:	3301      	adds	r3, #1
 80044a4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80044a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	dd98      	ble.n	80043e2 <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 80044b0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80044b4:	3301      	adds	r3, #1
 80044b6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80044ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80044be:	2b02      	cmp	r3, #2
 80044c0:	dd8b      	ble.n	80043da <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80044c8:	e069      	b.n	800459e <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 80044ca:	2300      	movs	r3, #0
 80044cc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80044d0:	e05c      	b.n	800458c <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 80044d2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044d6:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80044da:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80044de:	0059      	lsls	r1, r3, #1
 80044e0:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80044e4:	440b      	add	r3, r1
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80044f0:	2300      	movs	r3, #0
 80044f2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80044f6:	e040      	b.n	800457a <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 80044f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044fc:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004500:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004504:	0059      	lsls	r1, r3, #1
 8004506:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800450a:	440b      	add	r3, r1
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	ed93 7a00 	vldr	s14, [r3]
 8004514:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004518:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 800451c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004520:	0059      	lsls	r1, r3, #1
 8004522:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004526:	440b      	add	r3, r1
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	edd3 6a00 	vldr	s13, [r3]
 8004530:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004534:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8004538:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800453c:	0059      	lsls	r1, r3, #1
 800453e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004542:	440b      	add	r3, r1
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	edd3 7a00 	vldr	s15, [r3]
 800454c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004554:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004558:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800455c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004560:	0059      	lsls	r1, r3, #1
 8004562:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004566:	440b      	add	r3, r1
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004570:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004574:	3301      	adds	r3, #1
 8004576:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800457a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800457e:	2b01      	cmp	r3, #1
 8004580:	ddba      	ble.n	80044f8 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 8004582:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004586:	3301      	adds	r3, #1
 8004588:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800458c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004590:	2b01      	cmp	r3, #1
 8004592:	dd9e      	ble.n	80044d2 <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 8004594:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004598:	3301      	adds	r3, #1
 800459a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800459e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	dd91      	ble.n	80044ca <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 80045a6:	2300      	movs	r3, #0
 80045a8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80045ac:	e042      	b.n	8004634 <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 80045ae:	2300      	movs	r3, #0
 80045b0:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80045b4:	e035      	b.n	8004622 <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 80045b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045ba:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4413      	add	r3, r2
 80045c8:	ed93 7a00 	vldr	s14, [r3]
 80045cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045d0:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80045d4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80045d8:	0059      	lsls	r1, r3, #1
 80045da:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80045de:	440b      	add	r3, r1
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	edd3 6a00 	vldr	s13, [r3]
 80045e8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80045f2:	443b      	add	r3, r7
 80045f4:	3be0      	subs	r3, #224	@ 0xe0
 80045f6:	edd3 7a00 	vldr	s15, [r3]
 80045fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004602:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004606:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8004618:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800461c:	3301      	adds	r3, #1
 800461e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8004622:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004626:	2b01      	cmp	r3, #1
 8004628:	ddc5      	ble.n	80045b6 <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 800462a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800462e:	3301      	adds	r3, #1
 8004630:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004634:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004638:	2b02      	cmp	r3, #2
 800463a:	ddb8      	ble.n	80045ae <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 800463c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004640:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004644:	4618      	mov	r0, r3
 8004646:	2324      	movs	r3, #36	@ 0x24
 8004648:	461a      	mov	r2, r3
 800464a:	2100      	movs	r1, #0
 800464c:	f010 fa37 	bl	8014abe <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8004650:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004654:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004658:	4618      	mov	r0, r3
 800465a:	2324      	movs	r3, #36	@ 0x24
 800465c:	461a      	mov	r2, r3
 800465e:	2100      	movs	r1, #0
 8004660:	f010 fa2d 	bl	8014abe <memset>

        for (int i = 0; i < 3; i++) {
 8004664:	2300      	movs	r3, #0
 8004666:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800466a:	e09e      	b.n	80047aa <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 800466c:	2300      	movs	r3, #0
 800466e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004672:	e090      	b.n	8004796 <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 8004674:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004678:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800467c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004680:	4613      	mov	r3, r2
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	4413      	add	r3, r2
 8004686:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004696:	2300      	movs	r3, #0
 8004698:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800469c:	e045      	b.n	800472a <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 800469e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80046a2:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80046a6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80046aa:	4613      	mov	r3, r2
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4413      	add	r3, r2
 80046b0:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	ed93 7a00 	vldr	s14, [r3]
 80046be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80046c2:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80046c6:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80046ca:	0059      	lsls	r1, r3, #1
 80046cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80046d0:	440b      	add	r3, r1
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	edd3 6a00 	vldr	s13, [r3]
 80046da:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80046e8:	4413      	add	r3, r2
 80046ea:	009b      	lsls	r3, r3, #2
 80046ec:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80046f0:	443b      	add	r3, r7
 80046f2:	3bd0      	subs	r3, #208	@ 0xd0
 80046f4:	edd3 7a00 	vldr	s15, [r3]
 80046f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004700:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004704:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004708:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800470c:	4613      	mov	r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4413      	add	r3, r2
 8004712:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004720:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004724:	3301      	adds	r3, #1
 8004726:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800472a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800472e:	2b01      	cmp	r3, #1
 8004730:	ddb5      	ble.n	800469e <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8004732:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004736:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800473a:	429a      	cmp	r2, r3
 800473c:	d102      	bne.n	8004744 <KalmanFilter_MeasurementUpdate+0xcac>
 800473e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004742:	e001      	b.n	8004748 <KalmanFilter_MeasurementUpdate+0xcb0>
 8004744:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8004934 <KalmanFilter_MeasurementUpdate+0xe9c>
 8004748:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800474c:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004750:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	edd3 7a00 	vldr	s15, [r3]
 8004768:	ee77 7a67 	vsub.f32	s15, s14, s15
 800476c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004770:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004774:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 800478c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004790:	3301      	adds	r3, #1
 8004792:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004796:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800479a:	2b02      	cmp	r3, #2
 800479c:	f77f af6a 	ble.w	8004674 <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 80047a0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80047a4:	3301      	adds	r3, #1
 80047a6:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80047aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	f77f af5c 	ble.w	800466c <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80047ba:	e076      	b.n	80048aa <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80047c2:	e069      	b.n	8004898 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 80047c4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80047c8:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80047cc:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80047e6:	2300      	movs	r3, #0
 80047e8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80047ec:	e04b      	b.n	8004886 <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 80047ee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80047f2:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80047f6:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80047fa:	4613      	mov	r3, r2
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	4413      	add	r3, r2
 8004800:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	ed93 7a00 	vldr	s14, [r3]
 800480e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004812:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8004816:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	edd3 6a00 	vldr	s13, [r3]
 800482e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004832:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004836:	6819      	ldr	r1, [r3, #0]
 8004838:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 800483c:	4613      	mov	r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4413      	add	r3, r2
 8004842:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004846:	4413      	add	r3, r2
 8004848:	3302      	adds	r3, #2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	3304      	adds	r3, #4
 8004850:	edd3 7a00 	vldr	s15, [r3]
 8004854:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800485c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004860:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004864:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 800487c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004880:	3301      	adds	r3, #1
 8004882:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004886:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800488a:	2b02      	cmp	r3, #2
 800488c:	ddaf      	ble.n	80047ee <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 800488e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004892:	3301      	adds	r3, #1
 8004894:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004898:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800489c:	2b02      	cmp	r3, #2
 800489e:	dd91      	ble.n	80047c4 <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 80048a0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80048a4:	3301      	adds	r3, #1
 80048a6:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80048aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	dd84      	ble.n	80047bc <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80048b8:	e032      	b.n	8004920 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80048c0:	e025      	b.n	800490e <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 80048c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80048c6:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80048ca:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80048d8:	4413      	add	r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	440b      	add	r3, r1
 80048de:	6819      	ldr	r1, [r3, #0]
 80048e0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80048e4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80048f8:	4413      	add	r3, r2
 80048fa:	3302      	adds	r3, #2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4403      	add	r3, r0
 8004900:	3304      	adds	r3, #4
 8004902:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8004904:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004908:	3301      	adds	r3, #1
 800490a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800490e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004912:	2b02      	cmp	r3, #2
 8004914:	ddd5      	ble.n	80048c2 <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 8004916:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800491a:	3301      	adds	r3, #1
 800491c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004920:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004924:	2b02      	cmp	r3, #2
 8004926:	ddc8      	ble.n	80048ba <KalmanFilter_MeasurementUpdate+0xe22>
 8004928:	e000      	b.n	800492c <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 800492a:	bf00      	nop
            }
        }
    }
}
 800492c:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8004930:	46bd      	mov	sp, r7
 8004932:	bdb0      	pop	{r4, r5, r7, pc}
 8004934:	00000000 	.word	0x00000000

08004938 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	edd3 7a01 	vldr	s15, [r3, #4]
 8004946:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800494a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800494e:	d517      	bpl.n	8004980 <KalmanFilter_DetectApogee+0x48>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	ed93 7a01 	vldr	s14, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800495c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004964:	d50c      	bpl.n	8004980 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	2b04      	cmp	r3, #4
 8004976:	dd06      	ble.n	8004986 <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 800497e:	e002      	b.n	8004986 <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685a      	ldr	r2, [r3, #4]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	ee07 3a90 	vmov	s15, r3
}
 80049ae:	eeb0 0a67 	vmov.f32	s0, s15
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	huart_gnss = huart_gnss_;
 80049dc:	4a07      	ldr	r2, [pc, #28]	@ (80049fc <L86_GNSS_Init+0x28>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 80049e2:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <L86_GNSS_Init+0x28>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80049ea:	4905      	ldr	r1, [pc, #20]	@ (8004a00 <L86_GNSS_Init+0x2c>)
 80049ec:	4618      	mov	r0, r3
 80049ee:	f00a fd49 	bl	800f484 <HAL_UART_Receive_DMA>
}
 80049f2:	bf00      	nop
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200008f0 	.word	0x200008f0
 8004a00:	200008f4 	.word	0x200008f4

08004a04 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <HAL_UART_RxHalfCpltCallback+0x24>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d104      	bne.n	8004a20 <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 8004a16:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8004a1a:	4804      	ldr	r0, [pc, #16]	@ (8004a2c <HAL_UART_RxHalfCpltCallback+0x28>)
 8004a1c:	f000 f830 	bl	8004a80 <process_data>
	}
}
 8004a20:	bf00      	nop
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	200008f0 	.word	0x200008f0
 8004a2c:	200008f4 	.word	0x200008f4

08004a30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8004a38:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <HAL_UART_RxCpltCallback+0x24>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d104      	bne.n	8004a4c <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 8004a42:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8004a46:	4804      	ldr	r0, [pc, #16]	@ (8004a58 <HAL_UART_RxCpltCallback+0x28>)
 8004a48:	f000 f81a 	bl	8004a80 <process_data>
	}
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	200008f0 	.word	0x200008f0
 8004a58:	20000da4 	.word	0x20000da4

08004a5c <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f81d 	bl	8004aa4 <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f89e 	bl	8004bac <get_GPGGA_data>
	format_data(gps_data_);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f90d 	bl	8004c90 <format_data>
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <process_data>:

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	4803      	ldr	r0, [pc, #12]	@ (8004aa0 <process_data+0x20>)
 8004a94:	f010 f8b9 	bl	8014c0a <memcpy>
}
 8004a98:	bf00      	nop
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20001254 	.word	0x20001254

08004aa4 <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 8004aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa6:	b08d      	sub	sp, #52	@ 0x34
 8004aa8:	af08      	add	r7, sp, #32
 8004aaa:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 8004aac:	4937      	ldr	r1, [pc, #220]	@ (8004b8c <get_GNRMC_data+0xe8>)
 8004aae:	4838      	ldr	r0, [pc, #224]	@ (8004b90 <get_GNRMC_data+0xec>)
 8004ab0:	f010 f80d 	bl	8014ace <strstr>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4a37      	ldr	r2, [pc, #220]	@ (8004b94 <get_GNRMC_data+0xf0>)
 8004ab8:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == VALID)
 8004aba:	4b36      	ldr	r3, [pc, #216]	@ (8004b94 <get_GNRMC_data+0xf0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <get_GNRMC_data+0x32>
 8004ac2:	4b34      	ldr	r3, [pc, #208]	@ (8004b94 <get_GNRMC_data+0xf0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3311      	adds	r3, #17
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b41      	cmp	r3, #65	@ 0x41
 8004acc:	d103      	bne.n	8004ad6 <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 8004ace:	4b32      	ldr	r3, [pc, #200]	@ (8004b98 <get_GNRMC_data+0xf4>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	701a      	strb	r2, [r3, #0]
 8004ad4:	e005      	b.n	8004ae2 <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 8004ad6:	4b30      	ldr	r3, [pc, #192]	@ (8004b98 <get_GNRMC_data+0xf4>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2256      	movs	r2, #86	@ 0x56
 8004ae0:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 8004ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b98 <get_GNRMC_data+0xf4>)
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d148      	bne.n	8004b7c <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 8004aea:	2278      	movs	r2, #120	@ 0x78
 8004aec:	2100      	movs	r1, #0
 8004aee:	482b      	ldr	r0, [pc, #172]	@ (8004b9c <get_GNRMC_data+0xf8>)
 8004af0:	f00f ffe5 	bl	8014abe <memset>
		counter = 0;
 8004af4:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba0 <get_GNRMC_data+0xfc>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 8004afa:	4b26      	ldr	r3, [pc, #152]	@ (8004b94 <get_GNRMC_data+0xf0>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a29      	ldr	r2, [pc, #164]	@ (8004ba4 <get_GNRMC_data+0x100>)
 8004b00:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8004b02:	e011      	b.n	8004b28 <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 8004b04:	4b27      	ldr	r3, [pc, #156]	@ (8004ba4 <get_GNRMC_data+0x100>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a25      	ldr	r2, [pc, #148]	@ (8004ba0 <get_GNRMC_data+0xfc>)
 8004b0a:	7812      	ldrb	r2, [r2, #0]
 8004b0c:	7819      	ldrb	r1, [r3, #0]
 8004b0e:	4b23      	ldr	r3, [pc, #140]	@ (8004b9c <get_GNRMC_data+0xf8>)
 8004b10:	5499      	strb	r1, [r3, r2]
			counter++;
 8004b12:	4b23      	ldr	r3, [pc, #140]	@ (8004ba0 <get_GNRMC_data+0xfc>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	3301      	adds	r3, #1
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	4b21      	ldr	r3, [pc, #132]	@ (8004ba0 <get_GNRMC_data+0xfc>)
 8004b1c:	701a      	strb	r2, [r3, #0]
			current_char++;
 8004b1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ba4 <get_GNRMC_data+0x100>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3301      	adds	r3, #1
 8004b24:	4a1f      	ldr	r2, [pc, #124]	@ (8004ba4 <get_GNRMC_data+0x100>)
 8004b26:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8004b28:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba4 <get_GNRMC_data+0x100>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b30:	d1e8      	bne.n	8004b04 <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	60bb      	str	r3, [r7, #8]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f103 0c04 	add.w	ip, r3, #4
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	320c      	adds	r2, #12
 8004b44:	68f9      	ldr	r1, [r7, #12]
 8004b46:	3110      	adds	r1, #16
 8004b48:	6079      	str	r1, [r7, #4]
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	3014      	adds	r0, #20
 8004b4e:	68fc      	ldr	r4, [r7, #12]
 8004b50:	3418      	adds	r4, #24
 8004b52:	68fd      	ldr	r5, [r7, #12]
 8004b54:	351c      	adds	r5, #28
 8004b56:	68fe      	ldr	r6, [r7, #12]
 8004b58:	3620      	adds	r6, #32
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	3124      	adds	r1, #36	@ 0x24
 8004b5e:	9107      	str	r1, [sp, #28]
 8004b60:	9606      	str	r6, [sp, #24]
 8004b62:	9505      	str	r5, [sp, #20]
 8004b64:	9404      	str	r4, [sp, #16]
 8004b66:	9003      	str	r0, [sp, #12]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	9102      	str	r1, [sp, #8]
 8004b6c:	9201      	str	r2, [sp, #4]
 8004b6e:	9300      	str	r3, [sp, #0]
 8004b70:	4663      	mov	r3, ip
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	490c      	ldr	r1, [pc, #48]	@ (8004ba8 <get_GNRMC_data+0x104>)
 8004b76:	4809      	ldr	r0, [pc, #36]	@ (8004b9c <get_GNRMC_data+0xf8>)
 8004b78:	f00f ff22 	bl	80149c0 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 8004b7c:	4b05      	ldr	r3, [pc, #20]	@ (8004b94 <get_GNRMC_data+0xf0>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	0801a7cc 	.word	0x0801a7cc
 8004b90:	20001254 	.word	0x20001254
 8004b94:	20001704 	.word	0x20001704
 8004b98:	2000170c 	.word	0x2000170c
 8004b9c:	20001714 	.word	0x20001714
 8004ba0:	2000178c 	.word	0x2000178c
 8004ba4:	20001710 	.word	0x20001710
 8004ba8:	0801a7d4 	.word	0x0801a7d4

08004bac <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 8004bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bae:	b08d      	sub	sp, #52	@ 0x34
 8004bb0:	af08      	add	r7, sp, #32
 8004bb2:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 8004bb4:	492f      	ldr	r1, [pc, #188]	@ (8004c74 <get_GPGGA_data+0xc8>)
 8004bb6:	4830      	ldr	r0, [pc, #192]	@ (8004c78 <get_GPGGA_data+0xcc>)
 8004bb8:	f00f ff89 	bl	8014ace <strstr>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4a2f      	ldr	r2, [pc, #188]	@ (8004c7c <get_GPGGA_data+0xd0>)
 8004bc0:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8004c7c <get_GPGGA_data+0xd0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d04f      	beq.n	8004c6a <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == VALID)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	791b      	ldrb	r3, [r3, #4]
 8004bce:	2b41      	cmp	r3, #65	@ 0x41
 8004bd0:	d148      	bne.n	8004c64 <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 8004bd2:	2278      	movs	r2, #120	@ 0x78
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	482a      	ldr	r0, [pc, #168]	@ (8004c80 <get_GPGGA_data+0xd4>)
 8004bd8:	f00f ff71 	bl	8014abe <memset>
			counter = 0;
 8004bdc:	4b29      	ldr	r3, [pc, #164]	@ (8004c84 <get_GPGGA_data+0xd8>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 8004be2:	4b26      	ldr	r3, [pc, #152]	@ (8004c7c <get_GPGGA_data+0xd0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a28      	ldr	r2, [pc, #160]	@ (8004c88 <get_GPGGA_data+0xdc>)
 8004be8:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8004bea:	e011      	b.n	8004c10 <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 8004bec:	4b26      	ldr	r3, [pc, #152]	@ (8004c88 <get_GPGGA_data+0xdc>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a24      	ldr	r2, [pc, #144]	@ (8004c84 <get_GPGGA_data+0xd8>)
 8004bf2:	7812      	ldrb	r2, [r2, #0]
 8004bf4:	7819      	ldrb	r1, [r3, #0]
 8004bf6:	4b22      	ldr	r3, [pc, #136]	@ (8004c80 <get_GPGGA_data+0xd4>)
 8004bf8:	5499      	strb	r1, [r3, r2]
				counter++;
 8004bfa:	4b22      	ldr	r3, [pc, #136]	@ (8004c84 <get_GPGGA_data+0xd8>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	4b20      	ldr	r3, [pc, #128]	@ (8004c84 <get_GPGGA_data+0xd8>)
 8004c04:	701a      	strb	r2, [r3, #0]
				current_char++;
 8004c06:	4b20      	ldr	r3, [pc, #128]	@ (8004c88 <get_GPGGA_data+0xdc>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	4a1e      	ldr	r2, [pc, #120]	@ (8004c88 <get_GPGGA_data+0xdc>)
 8004c0e:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8004c10:	4b1d      	ldr	r3, [pc, #116]	@ (8004c88 <get_GPGGA_data+0xdc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c18:	d1e8      	bne.n	8004bec <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	60bb      	str	r3, [r7, #8]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f103 0c08 	add.w	ip, r3, #8
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	330c      	adds	r3, #12
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	3210      	adds	r2, #16
 8004c2c:	68f9      	ldr	r1, [r7, #12]
 8004c2e:	3114      	adds	r1, #20
 8004c30:	6079      	str	r1, [r7, #4]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	3025      	adds	r0, #37	@ 0x25
 8004c36:	68fc      	ldr	r4, [r7, #12]
 8004c38:	3426      	adds	r4, #38	@ 0x26
 8004c3a:	68fd      	ldr	r5, [r7, #12]
 8004c3c:	3528      	adds	r5, #40	@ 0x28
 8004c3e:	68fe      	ldr	r6, [r7, #12]
 8004c40:	362c      	adds	r6, #44	@ 0x2c
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	3130      	adds	r1, #48	@ 0x30
 8004c46:	9107      	str	r1, [sp, #28]
 8004c48:	9606      	str	r6, [sp, #24]
 8004c4a:	9505      	str	r5, [sp, #20]
 8004c4c:	9404      	str	r4, [sp, #16]
 8004c4e:	9003      	str	r0, [sp, #12]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	9102      	str	r1, [sp, #8]
 8004c54:	9201      	str	r2, [sp, #4]
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	4663      	mov	r3, ip
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	490b      	ldr	r1, [pc, #44]	@ (8004c8c <get_GPGGA_data+0xe0>)
 8004c5e:	4808      	ldr	r0, [pc, #32]	@ (8004c80 <get_GPGGA_data+0xd4>)
 8004c60:	f00f feae 	bl	80149c0 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <get_GPGGA_data+0xd0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
	}
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c72:	bf00      	nop
 8004c74:	0801a7fc 	.word	0x0801a7fc
 8004c78:	20001254 	.word	0x20001254
 8004c7c:	20001708 	.word	0x20001708
 8004c80:	20001714 	.word	0x20001714
 8004c84:	2000178c 	.word	0x2000178c
 8004c88:	20001710 	.word	0x20001710
 8004c8c:	0801a804 	.word	0x0801a804

08004c90 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	791b      	ldrb	r3, [r3, #4]
 8004c9c:	2b41      	cmp	r3, #65	@ 0x41
 8004c9e:	f040 8154 	bne.w	8004f4a <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	4aab      	ldr	r2, [pc, #684]	@ (8004f54 <format_data+0x2c4>)
 8004ca8:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 8004caa:	4baa      	ldr	r3, [pc, #680]	@ (8004f54 <format_data+0x2c4>)
 8004cac:	edd3 7a00 	vldr	s15, [r3]
 8004cb0:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004f58 <format_data+0x2c8>
 8004cb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004cb8:	ee16 0a90 	vmov	r0, s13
 8004cbc:	f7fb fc64 	bl	8000588 <__aeabi_f2d>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	ec43 2b10 	vmov	d0, r2, r3
 8004cc8:	f014 f896 	bl	8018df8 <floor>
 8004ccc:	ec53 2b10 	vmov	r2, r3, d0
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f7fb ffa8 	bl	8000c28 <__aeabi_d2f>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 8004cde:	4b9d      	ldr	r3, [pc, #628]	@ (8004f54 <format_data+0x2c4>)
 8004ce0:	ed93 7a00 	vldr	s14, [r3]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004cea:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8004f58 <format_data+0x2c8>
 8004cee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cf6:	4b97      	ldr	r3, [pc, #604]	@ (8004f54 <format_data+0x2c4>)
 8004cf8:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8004cfc:	4b95      	ldr	r3, [pc, #596]	@ (8004f54 <format_data+0x2c4>)
 8004cfe:	ed93 7a00 	vldr	s14, [r3]
 8004d02:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8004f5c <format_data+0x2cc>
 8004d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d0a:	4b92      	ldr	r3, [pc, #584]	@ (8004f54 <format_data+0x2c4>)
 8004d0c:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004d16:	4b8f      	ldr	r3, [pc, #572]	@ (8004f54 <format_data+0x2c4>)
 8004d18:	edd3 7a00 	vldr	s15, [r3]
 8004d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	4a8d      	ldr	r2, [pc, #564]	@ (8004f60 <format_data+0x2d0>)
 8004d2c:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8004d2e:	4b8c      	ldr	r3, [pc, #560]	@ (8004f60 <format_data+0x2d0>)
 8004d30:	edd3 7a00 	vldr	s15, [r3]
 8004d34:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004f58 <format_data+0x2c8>
 8004d38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d3c:	ee16 0a90 	vmov	r0, s13
 8004d40:	f7fb fc22 	bl	8000588 <__aeabi_f2d>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	ec43 2b10 	vmov	d0, r2, r3
 8004d4c:	f014 f854 	bl	8018df8 <floor>
 8004d50:	ec53 2b10 	vmov	r2, r3, d0
 8004d54:	4610      	mov	r0, r2
 8004d56:	4619      	mov	r1, r3
 8004d58:	f7fb ff66 	bl	8000c28 <__aeabi_d2f>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 8004d62:	4b7f      	ldr	r3, [pc, #508]	@ (8004f60 <format_data+0x2d0>)
 8004d64:	ed93 7a00 	vldr	s14, [r3]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004d6e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004f58 <format_data+0x2c8>
 8004d72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d7a:	4b79      	ldr	r3, [pc, #484]	@ (8004f60 <format_data+0x2d0>)
 8004d7c:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8004d80:	4b77      	ldr	r3, [pc, #476]	@ (8004f60 <format_data+0x2d0>)
 8004d82:	ed93 7a00 	vldr	s14, [r3]
 8004d86:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004f5c <format_data+0x2cc>
 8004d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d8e:	4b74      	ldr	r3, [pc, #464]	@ (8004f60 <format_data+0x2d0>)
 8004d90:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004d9a:	4b71      	ldr	r3, [pc, #452]	@ (8004f60 <format_data+0x2d0>)
 8004d9c:	edd3 7a00 	vldr	s15, [r3]
 8004da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a6d      	ldr	r2, [pc, #436]	@ (8004f64 <format_data+0x2d4>)
 8004db0:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 8004db2:	4b6c      	ldr	r3, [pc, #432]	@ (8004f64 <format_data+0x2d4>)
 8004db4:	edd3 7a00 	vldr	s15, [r3]
 8004db8:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8004f68 <format_data+0x2d8>
 8004dbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004dc0:	ee16 0a90 	vmov	r0, s13
 8004dc4:	f7fb fbe0 	bl	8000588 <__aeabi_f2d>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	ec43 2b10 	vmov	d0, r2, r3
 8004dd0:	f014 f812 	bl	8018df8 <floor>
 8004dd4:	ec53 2b10 	vmov	r2, r3, d0
 8004dd8:	4610      	mov	r0, r2
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f7fb ff04 	bl	8000be8 <__aeabi_d2uiz>
 8004de0:	4603      	mov	r3, r0
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 8004dea:	4b5e      	ldr	r3, [pc, #376]	@ (8004f64 <format_data+0x2d4>)
 8004dec:	ed93 7a00 	vldr	s14, [r3]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004df6:	461a      	mov	r2, r3
 8004df8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004dfc:	fb02 f303 	mul.w	r3, r2, r3
 8004e00:	ee07 3a90 	vmov	s15, r3
 8004e04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0c:	4b55      	ldr	r3, [pc, #340]	@ (8004f64 <format_data+0x2d4>)
 8004e0e:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e18:	3303      	adds	r3, #3
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e28:	2b17      	cmp	r3, #23
 8004e2a:	d907      	bls.n	8004e3c <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e32:	3b18      	subs	r3, #24
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 8004e3c:	4b49      	ldr	r3, [pc, #292]	@ (8004f64 <format_data+0x2d4>)
 8004e3e:	edd3 7a00 	vldr	s15, [r3]
 8004e42:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8004f58 <format_data+0x2c8>
 8004e46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e4a:	ee16 0a90 	vmov	r0, s13
 8004e4e:	f7fb fb9b 	bl	8000588 <__aeabi_f2d>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	ec43 2b10 	vmov	d0, r2, r3
 8004e5a:	f013 ffcd 	bl	8018df8 <floor>
 8004e5e:	ec53 2b10 	vmov	r2, r3, d0
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	f7fb febf 	bl	8000be8 <__aeabi_d2uiz>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 8004e74:	4b3b      	ldr	r3, [pc, #236]	@ (8004f64 <format_data+0x2d4>)
 8004e76:	ed93 7a00 	vldr	s14, [r3]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e80:	461a      	mov	r2, r3
 8004e82:	2364      	movs	r3, #100	@ 0x64
 8004e84:	fb02 f303 	mul.w	r3, r2, r3
 8004e88:	ee07 3a90 	vmov	s15, r3
 8004e8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e94:	4b33      	ldr	r3, [pc, #204]	@ (8004f64 <format_data+0x2d4>)
 8004e96:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 8004e9a:	4b32      	ldr	r3, [pc, #200]	@ (8004f64 <format_data+0x2d4>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7fb fb72 	bl	8000588 <__aeabi_f2d>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	ec43 2b10 	vmov	d0, r2, r3
 8004eac:	f013 ffa4 	bl	8018df8 <floor>
 8004eb0:	ec53 2b10 	vmov	r2, r3, d0
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f7fb fe96 	bl	8000be8 <__aeabi_d2uiz>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	4a28      	ldr	r2, [pc, #160]	@ (8004f6c <format_data+0x2dc>)
 8004ecc:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8004ece:	4b27      	ldr	r3, [pc, #156]	@ (8004f6c <format_data+0x2dc>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a27      	ldr	r2, [pc, #156]	@ (8004f70 <format_data+0x2e0>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0b5b      	lsrs	r3, r3, #13
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 8004ee2:	4b22      	ldr	r3, [pc, #136]	@ (8004f6c <format_data+0x2dc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8004eec:	4611      	mov	r1, r2
 8004eee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004ef2:	fb01 f202 	mul.w	r2, r1, r2
 8004ef6:	1a9b      	subs	r3, r3, r2
 8004ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f6c <format_data+0x2dc>)
 8004efa:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8004efc:	4b1b      	ldr	r3, [pc, #108]	@ (8004f6c <format_data+0x2dc>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1c      	ldr	r2, [pc, #112]	@ (8004f74 <format_data+0x2e4>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8004f10:	4b16      	ldr	r3, [pc, #88]	@ (8004f6c <format_data+0x2dc>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	2264      	movs	r2, #100	@ 0x64
 8004f1e:	fb01 f202 	mul.w	r2, r1, r2
 8004f22:	1a9b      	subs	r3, r3, r2
 8004f24:	4a11      	ldr	r2, [pc, #68]	@ (8004f6c <format_data+0x2dc>)
 8004f26:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 8004f28:	4b10      	ldr	r3, [pc, #64]	@ (8004f6c <format_data+0x2dc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 8004f4a:	bf00      	nop
 8004f4c:	3708      	adds	r7, #8
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20001790 	.word	0x20001790
 8004f58:	42c80000 	.word	0x42c80000
 8004f5c:	42700000 	.word	0x42700000
 8004f60:	20001794 	.word	0x20001794
 8004f64:	20001798 	.word	0x20001798
 8004f68:	461c4000 	.word	0x461c4000
 8004f6c:	2000179c 	.word	0x2000179c
 8004f70:	d1b71759 	.word	0xd1b71759
 8004f74:	51eb851f 	.word	0x51eb851f

08004f78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f7c:	f003 fc52 	bl	8008824 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f80:	f000 f90a 	bl	8005198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f84:	f000 fc44 	bl	8005810 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f88:	f000 fbfc 	bl	8005784 <MX_DMA_Init>
  MX_I2C1_Init();
 8004f8c:	f000 fa66 	bl	800545c <MX_I2C1_Init>
  MX_I2C3_Init();
 8004f90:	f000 fa92 	bl	80054b8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004f94:	f000 fb2a 	bl	80055ec <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004f98:	f000 fba0 	bl	80056dc <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004f9c:	f000 f968 	bl	8005270 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8004fa0:	f000 fbc6 	bl	8005730 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004fa4:	f000 fb70 	bl	8005688 <MX_UART4_Init>
  MX_ADC2_Init();
 8004fa8:	f000 f9b4 	bl	8005314 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004fac:	f000 fa04 	bl	80053b8 <MX_ADC3_Init>
  MX_SPI1_Init();
 8004fb0:	f000 fab0 	bl	8005514 <MX_SPI1_Init>
  MX_FATFS_Init();
 8004fb4:	f00b fbe4 	bl	8010780 <MX_FATFS_Init>
  MX_SPI3_Init();
 8004fb8:	f000 fae2 	bl	8005580 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 8004fbc:	f000 fb16 	bl	80055ec <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8004fc0:	4863      	ldr	r0, [pc, #396]	@ (8005150 <main+0x1d8>)
 8004fc2:	f009 fc1f 	bl	800e804 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	2101      	movs	r1, #1
 8004fca:	201c      	movs	r0, #28
 8004fcc:	f004 f9cf 	bl	800936e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004fd0:	201c      	movs	r0, #28
 8004fd2:	f004 f9e8 	bl	80093a6 <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	2100      	movs	r1, #0
 8004fda:	2009      	movs	r0, #9
 8004fdc:	f004 f9c7 	bl	800936e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	200a      	movs	r0, #10
 8004fe6:	f004 f9c2 	bl	800936e <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004fea:	200a      	movs	r0, #10
 8004fec:	f004 f9db 	bl	80093a6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004ff0:	2009      	movs	r0, #9
 8004ff2:	f004 f9d8 	bl	80093a6 <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 8004ff6:	f000 fd07 	bl	8005a08 <bme280_begin>
	HAL_Delay(1000);
 8004ffa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004ffe:	f003 fc83 	bl	8008908 <HAL_Delay>
	bme280_config();
 8005002:	f7fc fa45 	bl	8001490 <bme280_config>
	bme280_update();
 8005006:	f7fc fc85 	bl	8001914 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 800500a:	f000 fd15 	bl	8005a38 <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 800500e:	4851      	ldr	r0, [pc, #324]	@ (8005154 <main+0x1dc>)
 8005010:	f7fd f90a 	bl	8002228 <bmi088_config>
	get_offset(&BMI_sensor);
 8005014:	484f      	ldr	r0, [pc, #316]	@ (8005154 <main+0x1dc>)
 8005016:	f7fd fe97 	bl	8002d48 <get_offset>

	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 800501a:	f002 f82b 	bl	8007074 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 800501e:	484e      	ldr	r0, [pc, #312]	@ (8005158 <main+0x1e0>)
 8005020:	f002 faa2 	bl	8007568 <sensor_fusion_init>
	/*==================== DWT PROFILER INITIALIZATION ====================*/
	// Initialize DWT profiler for performance monitoring
	//dwt_profiler_init();

	/* ==== LORA COMMUNICATION SETUP ==== */
    e22_config_mode(&lora_1);
 8005024:	484d      	ldr	r0, [pc, #308]	@ (800515c <main+0x1e4>)
 8005026:	f7fe f899 	bl	800315c <e22_config_mode>
    HAL_Delay(20);
 800502a:	2014      	movs	r0, #20
 800502c:	f003 fc6c 	bl	8008908 <HAL_Delay>
	lora_init();
 8005030:	f000 fca6 	bl	8005980 <lora_init>
    HAL_Delay(20);
 8005034:	2014      	movs	r0, #20
 8005036:	f003 fc67 	bl	8008908 <HAL_Delay>
	e22_transmit_mode(&lora_1);
 800503a:	4848      	ldr	r0, [pc, #288]	@ (800515c <main+0x1e4>)
 800503c:	f7fe f8a2 	bl	8003184 <e22_transmit_mode>

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize L86 GPS/GNSS module
	HAL_UART_Transmit(&huart6, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 8005040:	2364      	movs	r3, #100	@ 0x64
 8005042:	2213      	movs	r2, #19
 8005044:	4946      	ldr	r1, [pc, #280]	@ (8005160 <main+0x1e8>)
 8005046:	4847      	ldr	r0, [pc, #284]	@ (8005164 <main+0x1ec>)
 8005048:	f00a f87e 	bl	800f148 <HAL_UART_Transmit>
    HAL_UART_DeInit(&huart6);
 800504c:	4845      	ldr	r0, [pc, #276]	@ (8005164 <main+0x1ec>)
 800504e:	f00a f849 	bl	800f0e4 <HAL_UART_DeInit>
    huart6.Init.BaudRate = 57600;
 8005052:	4b44      	ldr	r3, [pc, #272]	@ (8005164 <main+0x1ec>)
 8005054:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8005058:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&huart6);
 800505a:	4842      	ldr	r0, [pc, #264]	@ (8005164 <main+0x1ec>)
 800505c:	f009 fff2 	bl	800f044 <HAL_UART_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 8005060:	4841      	ldr	r0, [pc, #260]	@ (8005168 <main+0x1f0>)
 8005062:	f004 f9c9 	bl	80093f8 <HAL_DMA_Init>
	L86_GNSS_Init(&huart6);
 8005066:	483f      	ldr	r0, [pc, #252]	@ (8005164 <main+0x1ec>)
 8005068:	f7ff fcb4 	bl	80049d4 <L86_GNSS_Init>

	data_logger_init();
 800506c:	f7fd ff0e 	bl	8002e8c <data_logger_init>
	W25Q_Init(&hspi3);
 8005070:	483e      	ldr	r0, [pc, #248]	@ (800516c <main+0x1f4>)
 8005072:	f003 f95f 	bl	8008334 <W25Q_Init>

    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8005076:	2201      	movs	r2, #1
 8005078:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800507c:	483c      	ldr	r0, [pc, #240]	@ (8005170 <main+0x1f8>)
 800507e:	f005 f8bd 	bl	800a1fc <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8005082:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8005086:	f003 fc3f 	bl	8008908 <HAL_Delay>
    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 800508a:	2200      	movs	r2, #0
 800508c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005090:	4837      	ldr	r0, [pc, #220]	@ (8005170 <main+0x1f8>)
 8005092:	f005 f8b3 	bl	800a1fc <HAL_GPIO_WritePin>
    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/

		//PROFILE_START(PROF_BMI088_UPDATE);
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 8005096:	482f      	ldr	r0, [pc, #188]	@ (8005154 <main+0x1dc>)
 8005098:	f7fd fac6 	bl	8002628 <bmi088_update>
		//PROFILE_END(PROF_BMI088_UPDATE);
		
		//PROFILE_START(PROF_BME280_UPDATE);
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 800509c:	f7fc fc3a 	bl	8001914 <bme280_update>
		//PROFILE_END(PROF_BME280_UPDATE);


		/*PERIODIC OPERATIONS (100ms)*/
		if (tx_timer_flag_100ms >= 1) {
 80050a0:	4b34      	ldr	r3, [pc, #208]	@ (8005174 <main+0x1fc>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d045      	beq.n	8005136 <main+0x1be>
		  tx_timer_flag_100ms = 0;
 80050aa:	4b32      	ldr	r3, [pc, #200]	@ (8005174 <main+0x1fc>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	701a      	strb	r2, [r3, #0]



		  // Read magnetometer ADC values
		  //PROFILE_START(PROF_ADC_READ);
		  read_ADC();
 80050b0:	f000 fcf0 	bl	8005a94 <read_ADC>
		  //PROFILE_END(PROF_ADC_READ);

		  // Sensor fusion and flight algorithm processing
		  //PROFILE_START(PROF_SENSOR_FUSION);
		  sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 80050b4:	4a30      	ldr	r2, [pc, #192]	@ (8005178 <main+0x200>)
 80050b6:	4927      	ldr	r1, [pc, #156]	@ (8005154 <main+0x1dc>)
 80050b8:	4827      	ldr	r0, [pc, #156]	@ (8005158 <main+0x1e0>)
 80050ba:	f002 faa1 	bl	8007600 <sensor_fusion_update_kalman>
		  //PROFILE_END(PROF_SENSOR_FUSION);
		  
		  //PROFILE_START(PROF_FLIGHT_ALGORITHM);
		  flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 80050be:	4a2e      	ldr	r2, [pc, #184]	@ (8005178 <main+0x200>)
 80050c0:	4924      	ldr	r1, [pc, #144]	@ (8005154 <main+0x1dc>)
 80050c2:	4825      	ldr	r0, [pc, #148]	@ (8005158 <main+0x1e0>)
 80050c4:	f7fe f872 	bl	80031ac <flight_algorithm_update>
		  //PROFILE_END(PROF_FLIGHT_ALGORITHM);
		  
		  // Update GPS/GNSS data
		  //PROFILE_START(PROF_GNSS_UPDATE);
		  L86_GNSS_Update(&gnss_data);
 80050c8:	482c      	ldr	r0, [pc, #176]	@ (800517c <main+0x204>)
 80050ca:	f7ff fcc7 	bl	8004a5c <L86_GNSS_Update>
		  //PROFILE_END(PROF_GNSS_UPDATE);

		  // Packet compose
		  //PROFILE_START(PROF_PACKET_COMPOSE);
		  addDataPacketNormal(&BME280_sensor, &BMI_sensor, &sensor_output, &gnss_data, hmc1021_gauss, voltage_V, current_mA);
 80050ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005180 <main+0x208>)
 80050d0:	edd3 7a00 	vldr	s15, [r3]
 80050d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005184 <main+0x20c>)
 80050d6:	ed93 7a00 	vldr	s14, [r3]
 80050da:	4b2b      	ldr	r3, [pc, #172]	@ (8005188 <main+0x210>)
 80050dc:	edd3 6a00 	vldr	s13, [r3]
 80050e0:	eeb0 1a66 	vmov.f32	s2, s13
 80050e4:	eef0 0a47 	vmov.f32	s1, s14
 80050e8:	eeb0 0a67 	vmov.f32	s0, s15
 80050ec:	4b23      	ldr	r3, [pc, #140]	@ (800517c <main+0x204>)
 80050ee:	4a22      	ldr	r2, [pc, #136]	@ (8005178 <main+0x200>)
 80050f0:	4918      	ldr	r1, [pc, #96]	@ (8005154 <main+0x1dc>)
 80050f2:	4819      	ldr	r0, [pc, #100]	@ (8005158 <main+0x1e0>)
 80050f4:	f000 fe66 	bl	8005dc4 <addDataPacketNormal>
		  //PROFILE_END(PROF_PACKET_COMPOSE);
		  
		  addDataPacketSD(&BME280_sensor, &BMI_sensor, &sensor_output, &gnss_data, hmc1021_gauss, voltage_V, current_mA);
 80050f8:	4b21      	ldr	r3, [pc, #132]	@ (8005180 <main+0x208>)
 80050fa:	edd3 7a00 	vldr	s15, [r3]
 80050fe:	4b21      	ldr	r3, [pc, #132]	@ (8005184 <main+0x20c>)
 8005100:	ed93 7a00 	vldr	s14, [r3]
 8005104:	4b20      	ldr	r3, [pc, #128]	@ (8005188 <main+0x210>)
 8005106:	edd3 6a00 	vldr	s13, [r3]
 800510a:	eeb0 1a66 	vmov.f32	s2, s13
 800510e:	eef0 0a47 	vmov.f32	s1, s14
 8005112:	eeb0 0a67 	vmov.f32	s0, s15
 8005116:	4b19      	ldr	r3, [pc, #100]	@ (800517c <main+0x204>)
 8005118:	4a17      	ldr	r2, [pc, #92]	@ (8005178 <main+0x200>)
 800511a:	490e      	ldr	r1, [pc, #56]	@ (8005154 <main+0x1dc>)
 800511c:	480e      	ldr	r0, [pc, #56]	@ (8005158 <main+0x1e0>)
 800511e:	f000 ff65 	bl	8005fec <addDataPacketSD>

		  //PROFILE_START(PROF_SD_LOGGER);
		  log_normal_packet_data(sd_paket);
 8005122:	481a      	ldr	r0, [pc, #104]	@ (800518c <main+0x214>)
 8005124:	f7fd fef2 	bl	8002f0c <log_normal_packet_data>
		  //PROFILE_END(PROF_SD_LOGGER);

		  W25Q_WriteToBufferFlushOnSectorFull(sd_paket);
 8005128:	4818      	ldr	r0, [pc, #96]	@ (800518c <main+0x214>)
 800512a:	f003 f92f 	bl	800838c <W25Q_WriteToBufferFlushOnSectorFull>

		  //Send telemetry packet via DMA (non-blocking)
		  //7PROFILE_START(PROF_UART2_SEND);
		  uart2_send_packet_dma((uint8_t*)normal_paket, 50);
 800512e:	2132      	movs	r1, #50	@ 0x32
 8005130:	4817      	ldr	r0, [pc, #92]	@ (8005190 <main+0x218>)
 8005132:	f000 fde1 	bl	8005cf8 <uart2_send_packet_dma>

		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 2) {
 8005136:	4b17      	ldr	r3, [pc, #92]	@ (8005194 <main+0x21c>)
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d9aa      	bls.n	8005096 <main+0x11e>
		  tx_timer_flag_1s = 0;
 8005140:	4b14      	ldr	r3, [pc, #80]	@ (8005194 <main+0x21c>)
 8005142:	2200      	movs	r2, #0
 8005144:	701a      	strb	r2, [r3, #0]

		  //PROFILE_START(PROF_LORA_SEND);
		  lora_send_packet_dma((uint8_t*)normal_paket, 50);
 8005146:	2132      	movs	r1, #50	@ 0x32
 8005148:	4811      	ldr	r0, [pc, #68]	@ (8005190 <main+0x218>)
 800514a:	f000 fdf1 	bl	8005d30 <lora_send_packet_dma>
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 800514e:	e7a2      	b.n	8005096 <main+0x11e>
 8005150:	20001a30 	.word	0x20001a30
 8005154:	20001cb4 	.word	0x20001cb4
 8005158:	20001c70 	.word	0x20001c70
 800515c:	20001dd4 	.word	0x20001dd4
 8005160:	0801a830 	.word	0x0801a830
 8005164:	20001b08 	.word	0x20001b08
 8005168:	20001c10 	.word	0x20001c10
 800516c:	200019d8 	.word	0x200019d8
 8005170:	40020400 	.word	0x40020400
 8005174:	20001df6 	.word	0x20001df6
 8005178:	20001d4c 	.word	0x20001d4c
 800517c:	20001d8c 	.word	0x20001d8c
 8005180:	20001e08 	.word	0x20001e08
 8005184:	20001e00 	.word	0x20001e00
 8005188:	20001dfc 	.word	0x20001dfc
 800518c:	20001e48 	.word	0x20001e48
 8005190:	20001e14 	.word	0x20001e14
 8005194:	20001df7 	.word	0x20001df7

08005198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b094      	sub	sp, #80	@ 0x50
 800519c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800519e:	f107 031c 	add.w	r3, r7, #28
 80051a2:	2234      	movs	r2, #52	@ 0x34
 80051a4:	2100      	movs	r1, #0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f00f fc89 	bl	8014abe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	605a      	str	r2, [r3, #4]
 80051b6:	609a      	str	r2, [r3, #8]
 80051b8:	60da      	str	r2, [r3, #12]
 80051ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80051bc:	2300      	movs	r3, #0
 80051be:	607b      	str	r3, [r7, #4]
 80051c0:	4b29      	ldr	r3, [pc, #164]	@ (8005268 <SystemClock_Config+0xd0>)
 80051c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c4:	4a28      	ldr	r2, [pc, #160]	@ (8005268 <SystemClock_Config+0xd0>)
 80051c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80051cc:	4b26      	ldr	r3, [pc, #152]	@ (8005268 <SystemClock_Config+0xd0>)
 80051ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80051d8:	2300      	movs	r3, #0
 80051da:	603b      	str	r3, [r7, #0]
 80051dc:	4b23      	ldr	r3, [pc, #140]	@ (800526c <SystemClock_Config+0xd4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a22      	ldr	r2, [pc, #136]	@ (800526c <SystemClock_Config+0xd4>)
 80051e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b20      	ldr	r3, [pc, #128]	@ (800526c <SystemClock_Config+0xd4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80051f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80051fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80051fe:	2302      	movs	r3, #2
 8005200:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005202:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005206:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005208:	2308      	movs	r3, #8
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800520c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8005210:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005212:	2302      	movs	r3, #2
 8005214:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005216:	2302      	movs	r3, #2
 8005218:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800521a:	2302      	movs	r3, #2
 800521c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800521e:	f107 031c 	add.w	r3, r7, #28
 8005222:	4618      	mov	r0, r3
 8005224:	f008 fa2e 	bl	800d684 <HAL_RCC_OscConfig>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800522e:	f000 fd9b 	bl	8005d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005232:	230f      	movs	r3, #15
 8005234:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005236:	2302      	movs	r3, #2
 8005238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800523a:	2300      	movs	r3, #0
 800523c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800523e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005248:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800524a:	f107 0308 	add.w	r3, r7, #8
 800524e:	2105      	movs	r1, #5
 8005250:	4618      	mov	r0, r3
 8005252:	f007 fecd 	bl	800cff0 <HAL_RCC_ClockConfig>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800525c:	f000 fd84 	bl	8005d68 <Error_Handler>
  }
}
 8005260:	bf00      	nop
 8005262:	3750      	adds	r7, #80	@ 0x50
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40023800 	.word	0x40023800
 800526c:	40007000 	.word	0x40007000

08005270 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005276:	463b      	mov	r3, r7
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	609a      	str	r2, [r3, #8]
 8005280:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005282:	4b21      	ldr	r3, [pc, #132]	@ (8005308 <MX_ADC1_Init+0x98>)
 8005284:	4a21      	ldr	r2, [pc, #132]	@ (800530c <MX_ADC1_Init+0x9c>)
 8005286:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005288:	4b1f      	ldr	r3, [pc, #124]	@ (8005308 <MX_ADC1_Init+0x98>)
 800528a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800528e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005290:	4b1d      	ldr	r3, [pc, #116]	@ (8005308 <MX_ADC1_Init+0x98>)
 8005292:	2200      	movs	r2, #0
 8005294:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005296:	4b1c      	ldr	r3, [pc, #112]	@ (8005308 <MX_ADC1_Init+0x98>)
 8005298:	2200      	movs	r2, #0
 800529a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800529c:	4b1a      	ldr	r3, [pc, #104]	@ (8005308 <MX_ADC1_Init+0x98>)
 800529e:	2200      	movs	r2, #0
 80052a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80052a2:	4b19      	ldr	r3, [pc, #100]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80052aa:	4b17      	ldr	r3, [pc, #92]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052b0:	4b15      	ldr	r3, [pc, #84]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052b2:	4a17      	ldr	r2, [pc, #92]	@ (8005310 <MX_ADC1_Init+0xa0>)
 80052b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052b6:	4b14      	ldr	r3, [pc, #80]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80052bc:	4b12      	ldr	r3, [pc, #72]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052be:	2201      	movs	r2, #1
 80052c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80052c2:	4b11      	ldr	r3, [pc, #68]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80052ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80052d0:	480d      	ldr	r0, [pc, #52]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052d2:	f003 fb3d 	bl	8008950 <HAL_ADC_Init>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d001      	beq.n	80052e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80052dc:	f000 fd44 	bl	8005d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80052e0:	2309      	movs	r3, #9
 80052e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80052e4:	2301      	movs	r3, #1
 80052e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80052e8:	2301      	movs	r3, #1
 80052ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80052ec:	463b      	mov	r3, r7
 80052ee:	4619      	mov	r1, r3
 80052f0:	4805      	ldr	r0, [pc, #20]	@ (8005308 <MX_ADC1_Init+0x98>)
 80052f2:	f003 fd0f 	bl	8008d14 <HAL_ADC_ConfigChannel>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80052fc:	f000 fd34 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005300:	bf00      	nop
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	200017a0 	.word	0x200017a0
 800530c:	40012000 	.word	0x40012000
 8005310:	0f000001 	.word	0x0f000001

08005314 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800531a:	463b      	mov	r3, r7
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	605a      	str	r2, [r3, #4]
 8005322:	609a      	str	r2, [r3, #8]
 8005324:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005326:	4b21      	ldr	r3, [pc, #132]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005328:	4a21      	ldr	r2, [pc, #132]	@ (80053b0 <MX_ADC2_Init+0x9c>)
 800532a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800532c:	4b1f      	ldr	r3, [pc, #124]	@ (80053ac <MX_ADC2_Init+0x98>)
 800532e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005332:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005334:	4b1d      	ldr	r3, [pc, #116]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800533a:	4b1c      	ldr	r3, [pc, #112]	@ (80053ac <MX_ADC2_Init+0x98>)
 800533c:	2200      	movs	r2, #0
 800533e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8005340:	4b1a      	ldr	r3, [pc, #104]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005342:	2200      	movs	r2, #0
 8005344:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005346:	4b19      	ldr	r3, [pc, #100]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800534e:	4b17      	ldr	r3, [pc, #92]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005350:	2200      	movs	r2, #0
 8005352:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005354:	4b15      	ldr	r3, [pc, #84]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005356:	4a17      	ldr	r2, [pc, #92]	@ (80053b4 <MX_ADC2_Init+0xa0>)
 8005358:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800535a:	4b14      	ldr	r3, [pc, #80]	@ (80053ac <MX_ADC2_Init+0x98>)
 800535c:	2200      	movs	r2, #0
 800535e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005360:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005362:	2201      	movs	r2, #1
 8005364:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005366:	4b11      	ldr	r3, [pc, #68]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800536e:	4b0f      	ldr	r3, [pc, #60]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005370:	2201      	movs	r2, #1
 8005372:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005374:	480d      	ldr	r0, [pc, #52]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005376:	f003 faeb 	bl	8008950 <HAL_ADC_Init>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005380:	f000 fcf2 	bl	8005d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005384:	230a      	movs	r3, #10
 8005386:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005388:	2301      	movs	r3, #1
 800538a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800538c:	2301      	movs	r3, #1
 800538e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005390:	463b      	mov	r3, r7
 8005392:	4619      	mov	r1, r3
 8005394:	4805      	ldr	r0, [pc, #20]	@ (80053ac <MX_ADC2_Init+0x98>)
 8005396:	f003 fcbd 	bl	8008d14 <HAL_ADC_ConfigChannel>
 800539a:	4603      	mov	r3, r0
 800539c:	2b00      	cmp	r3, #0
 800539e:	d001      	beq.n	80053a4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80053a0:	f000 fce2 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	200017e8 	.word	0x200017e8
 80053b0:	40012100 	.word	0x40012100
 80053b4:	0f000001 	.word	0x0f000001

080053b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80053be:	463b      	mov	r3, r7
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80053ca:	4b21      	ldr	r3, [pc, #132]	@ (8005450 <MX_ADC3_Init+0x98>)
 80053cc:	4a21      	ldr	r2, [pc, #132]	@ (8005454 <MX_ADC3_Init+0x9c>)
 80053ce:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80053d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005450 <MX_ADC3_Init+0x98>)
 80053d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80053d6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80053d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005450 <MX_ADC3_Init+0x98>)
 80053da:	2200      	movs	r2, #0
 80053dc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80053de:	4b1c      	ldr	r3, [pc, #112]	@ (8005450 <MX_ADC3_Init+0x98>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80053e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005450 <MX_ADC3_Init+0x98>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80053ea:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <MX_ADC3_Init+0x98>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80053f2:	4b17      	ldr	r3, [pc, #92]	@ (8005450 <MX_ADC3_Init+0x98>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80053f8:	4b15      	ldr	r3, [pc, #84]	@ (8005450 <MX_ADC3_Init+0x98>)
 80053fa:	4a17      	ldr	r2, [pc, #92]	@ (8005458 <MX_ADC3_Init+0xa0>)
 80053fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80053fe:	4b14      	ldr	r3, [pc, #80]	@ (8005450 <MX_ADC3_Init+0x98>)
 8005400:	2200      	movs	r2, #0
 8005402:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8005404:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <MX_ADC3_Init+0x98>)
 8005406:	2201      	movs	r2, #1
 8005408:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800540a:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <MX_ADC3_Init+0x98>)
 800540c:	2200      	movs	r2, #0
 800540e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005412:	4b0f      	ldr	r3, [pc, #60]	@ (8005450 <MX_ADC3_Init+0x98>)
 8005414:	2201      	movs	r2, #1
 8005416:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8005418:	480d      	ldr	r0, [pc, #52]	@ (8005450 <MX_ADC3_Init+0x98>)
 800541a:	f003 fa99 	bl	8008950 <HAL_ADC_Init>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8005424:	f000 fca0 	bl	8005d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005428:	230b      	movs	r3, #11
 800542a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800542c:	2301      	movs	r3, #1
 800542e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8005430:	2301      	movs	r3, #1
 8005432:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8005434:	463b      	mov	r3, r7
 8005436:	4619      	mov	r1, r3
 8005438:	4805      	ldr	r0, [pc, #20]	@ (8005450 <MX_ADC3_Init+0x98>)
 800543a:	f003 fc6b 	bl	8008d14 <HAL_ADC_ConfigChannel>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8005444:	f000 fc90 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20001830 	.word	0x20001830
 8005454:	40012200 	.word	0x40012200
 8005458:	0f000001 	.word	0x0f000001

0800545c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005460:	4b12      	ldr	r3, [pc, #72]	@ (80054ac <MX_I2C1_Init+0x50>)
 8005462:	4a13      	ldr	r2, [pc, #76]	@ (80054b0 <MX_I2C1_Init+0x54>)
 8005464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005466:	4b11      	ldr	r3, [pc, #68]	@ (80054ac <MX_I2C1_Init+0x50>)
 8005468:	4a12      	ldr	r2, [pc, #72]	@ (80054b4 <MX_I2C1_Init+0x58>)
 800546a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800546c:	4b0f      	ldr	r3, [pc, #60]	@ (80054ac <MX_I2C1_Init+0x50>)
 800546e:	2200      	movs	r2, #0
 8005470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005472:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <MX_I2C1_Init+0x50>)
 8005474:	2200      	movs	r2, #0
 8005476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005478:	4b0c      	ldr	r3, [pc, #48]	@ (80054ac <MX_I2C1_Init+0x50>)
 800547a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800547e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005480:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <MX_I2C1_Init+0x50>)
 8005482:	2200      	movs	r2, #0
 8005484:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005486:	4b09      	ldr	r3, [pc, #36]	@ (80054ac <MX_I2C1_Init+0x50>)
 8005488:	2200      	movs	r2, #0
 800548a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800548c:	4b07      	ldr	r3, [pc, #28]	@ (80054ac <MX_I2C1_Init+0x50>)
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005492:	4b06      	ldr	r3, [pc, #24]	@ (80054ac <MX_I2C1_Init+0x50>)
 8005494:	2200      	movs	r2, #0
 8005496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005498:	4804      	ldr	r0, [pc, #16]	@ (80054ac <MX_I2C1_Init+0x50>)
 800549a:	f004 fee1 	bl	800a260 <HAL_I2C_Init>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80054a4:	f000 fc60 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80054a8:	bf00      	nop
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20001878 	.word	0x20001878
 80054b0:	40005400 	.word	0x40005400
 80054b4:	000186a0 	.word	0x000186a0

080054b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80054bc:	4b12      	ldr	r3, [pc, #72]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054be:	4a13      	ldr	r2, [pc, #76]	@ (800550c <MX_I2C3_Init+0x54>)
 80054c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80054c2:	4b11      	ldr	r3, [pc, #68]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054c4:	4a12      	ldr	r2, [pc, #72]	@ (8005510 <MX_I2C3_Init+0x58>)
 80054c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80054c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80054ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054d4:	4b0c      	ldr	r3, [pc, #48]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80054da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054de:	2200      	movs	r2, #0
 80054e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80054e2:	4b09      	ldr	r3, [pc, #36]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054e8:	4b07      	ldr	r3, [pc, #28]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054ee:	4b06      	ldr	r3, [pc, #24]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80054f4:	4804      	ldr	r0, [pc, #16]	@ (8005508 <MX_I2C3_Init+0x50>)
 80054f6:	f004 feb3 	bl	800a260 <HAL_I2C_Init>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005500:	f000 fc32 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005504:	bf00      	nop
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200018cc 	.word	0x200018cc
 800550c:	40005c00 	.word	0x40005c00
 8005510:	000186a0 	.word	0x000186a0

08005514 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005518:	4b17      	ldr	r3, [pc, #92]	@ (8005578 <MX_SPI1_Init+0x64>)
 800551a:	4a18      	ldr	r2, [pc, #96]	@ (800557c <MX_SPI1_Init+0x68>)
 800551c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800551e:	4b16      	ldr	r3, [pc, #88]	@ (8005578 <MX_SPI1_Init+0x64>)
 8005520:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005526:	4b14      	ldr	r3, [pc, #80]	@ (8005578 <MX_SPI1_Init+0x64>)
 8005528:	2200      	movs	r2, #0
 800552a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800552c:	4b12      	ldr	r3, [pc, #72]	@ (8005578 <MX_SPI1_Init+0x64>)
 800552e:	2200      	movs	r2, #0
 8005530:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005532:	4b11      	ldr	r3, [pc, #68]	@ (8005578 <MX_SPI1_Init+0x64>)
 8005534:	2200      	movs	r2, #0
 8005536:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005538:	4b0f      	ldr	r3, [pc, #60]	@ (8005578 <MX_SPI1_Init+0x64>)
 800553a:	2200      	movs	r2, #0
 800553c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800553e:	4b0e      	ldr	r3, [pc, #56]	@ (8005578 <MX_SPI1_Init+0x64>)
 8005540:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005544:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005546:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <MX_SPI1_Init+0x64>)
 8005548:	2200      	movs	r2, #0
 800554a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800554c:	4b0a      	ldr	r3, [pc, #40]	@ (8005578 <MX_SPI1_Init+0x64>)
 800554e:	2200      	movs	r2, #0
 8005550:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005552:	4b09      	ldr	r3, [pc, #36]	@ (8005578 <MX_SPI1_Init+0x64>)
 8005554:	2200      	movs	r2, #0
 8005556:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005558:	4b07      	ldr	r3, [pc, #28]	@ (8005578 <MX_SPI1_Init+0x64>)
 800555a:	2200      	movs	r2, #0
 800555c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800555e:	4b06      	ldr	r3, [pc, #24]	@ (8005578 <MX_SPI1_Init+0x64>)
 8005560:	220a      	movs	r2, #10
 8005562:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005564:	4804      	ldr	r0, [pc, #16]	@ (8005578 <MX_SPI1_Init+0x64>)
 8005566:	f008 fb2b 	bl	800dbc0 <HAL_SPI_Init>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005570:	f000 fbfa 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005574:	bf00      	nop
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20001980 	.word	0x20001980
 800557c:	40013000 	.word	0x40013000

08005580 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005584:	4b17      	ldr	r3, [pc, #92]	@ (80055e4 <MX_SPI3_Init+0x64>)
 8005586:	4a18      	ldr	r2, [pc, #96]	@ (80055e8 <MX_SPI3_Init+0x68>)
 8005588:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800558a:	4b16      	ldr	r3, [pc, #88]	@ (80055e4 <MX_SPI3_Init+0x64>)
 800558c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005590:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005592:	4b14      	ldr	r3, [pc, #80]	@ (80055e4 <MX_SPI3_Init+0x64>)
 8005594:	2200      	movs	r2, #0
 8005596:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005598:	4b12      	ldr	r3, [pc, #72]	@ (80055e4 <MX_SPI3_Init+0x64>)
 800559a:	2200      	movs	r2, #0
 800559c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800559e:	4b11      	ldr	r3, [pc, #68]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80055a4:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80055aa:	4b0e      	ldr	r3, [pc, #56]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055b0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055b2:	4b0c      	ldr	r3, [pc, #48]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055ba:	2200      	movs	r2, #0
 80055bc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80055be:	4b09      	ldr	r3, [pc, #36]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055c4:	4b07      	ldr	r3, [pc, #28]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80055ca:	4b06      	ldr	r3, [pc, #24]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055cc:	220a      	movs	r2, #10
 80055ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80055d0:	4804      	ldr	r0, [pc, #16]	@ (80055e4 <MX_SPI3_Init+0x64>)
 80055d2:	f008 faf5 	bl	800dbc0 <HAL_SPI_Init>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d001      	beq.n	80055e0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80055dc:	f000 fbc4 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80055e0:	bf00      	nop
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	200019d8 	.word	0x200019d8
 80055e8:	40003c00 	.word	0x40003c00

080055ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055f2:	f107 0308 	add.w	r3, r7, #8
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
 80055fa:	605a      	str	r2, [r3, #4]
 80055fc:	609a      	str	r2, [r3, #8]
 80055fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005600:	463b      	mov	r3, r7
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005608:	4b1e      	ldr	r3, [pc, #120]	@ (8005684 <MX_TIM2_Init+0x98>)
 800560a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800560e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8005610:	4b1c      	ldr	r3, [pc, #112]	@ (8005684 <MX_TIM2_Init+0x98>)
 8005612:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8005616:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005618:	4b1a      	ldr	r3, [pc, #104]	@ (8005684 <MX_TIM2_Init+0x98>)
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800561e:	4b19      	ldr	r3, [pc, #100]	@ (8005684 <MX_TIM2_Init+0x98>)
 8005620:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005626:	4b17      	ldr	r3, [pc, #92]	@ (8005684 <MX_TIM2_Init+0x98>)
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800562c:	4b15      	ldr	r3, [pc, #84]	@ (8005684 <MX_TIM2_Init+0x98>)
 800562e:	2200      	movs	r2, #0
 8005630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005632:	4814      	ldr	r0, [pc, #80]	@ (8005684 <MX_TIM2_Init+0x98>)
 8005634:	f009 f896 	bl	800e764 <HAL_TIM_Base_Init>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800563e:	f000 fb93 	bl	8005d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005648:	f107 0308 	add.w	r3, r7, #8
 800564c:	4619      	mov	r1, r3
 800564e:	480d      	ldr	r0, [pc, #52]	@ (8005684 <MX_TIM2_Init+0x98>)
 8005650:	f009 fa38 	bl	800eac4 <HAL_TIM_ConfigClockSource>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d001      	beq.n	800565e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800565a:	f000 fb85 	bl	8005d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800565e:	2300      	movs	r3, #0
 8005660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005662:	2300      	movs	r3, #0
 8005664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005666:	463b      	mov	r3, r7
 8005668:	4619      	mov	r1, r3
 800566a:	4806      	ldr	r0, [pc, #24]	@ (8005684 <MX_TIM2_Init+0x98>)
 800566c:	f009 fc5a 	bl	800ef24 <HAL_TIMEx_MasterConfigSynchronization>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005676:	f000 fb77 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800567a:	bf00      	nop
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20001a30 	.word	0x20001a30

08005688 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800568c:	4b11      	ldr	r3, [pc, #68]	@ (80056d4 <MX_UART4_Init+0x4c>)
 800568e:	4a12      	ldr	r2, [pc, #72]	@ (80056d8 <MX_UART4_Init+0x50>)
 8005690:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8005692:	4b10      	ldr	r3, [pc, #64]	@ (80056d4 <MX_UART4_Init+0x4c>)
 8005694:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005698:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800569a:	4b0e      	ldr	r3, [pc, #56]	@ (80056d4 <MX_UART4_Init+0x4c>)
 800569c:	2200      	movs	r2, #0
 800569e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80056a0:	4b0c      	ldr	r3, [pc, #48]	@ (80056d4 <MX_UART4_Init+0x4c>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80056a6:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <MX_UART4_Init+0x4c>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80056ac:	4b09      	ldr	r3, [pc, #36]	@ (80056d4 <MX_UART4_Init+0x4c>)
 80056ae:	220c      	movs	r2, #12
 80056b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056b2:	4b08      	ldr	r3, [pc, #32]	@ (80056d4 <MX_UART4_Init+0x4c>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80056b8:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <MX_UART4_Init+0x4c>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80056be:	4805      	ldr	r0, [pc, #20]	@ (80056d4 <MX_UART4_Init+0x4c>)
 80056c0:	f009 fcc0 	bl	800f044 <HAL_UART_Init>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80056ca:	f000 fb4d 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20001a78 	.word	0x20001a78
 80056d8:	40004c00 	.word	0x40004c00

080056dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80056e0:	4b11      	ldr	r3, [pc, #68]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 80056e2:	4a12      	ldr	r2, [pc, #72]	@ (800572c <MX_USART2_UART_Init+0x50>)
 80056e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80056e6:	4b10      	ldr	r3, [pc, #64]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 80056e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80056ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80056f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80056fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005700:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 8005702:	220c      	movs	r2, #12
 8005704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005706:	4b08      	ldr	r3, [pc, #32]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 8005708:	2200      	movs	r2, #0
 800570a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800570c:	4b06      	ldr	r3, [pc, #24]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 800570e:	2200      	movs	r2, #0
 8005710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005712:	4805      	ldr	r0, [pc, #20]	@ (8005728 <MX_USART2_UART_Init+0x4c>)
 8005714:	f009 fc96 	bl	800f044 <HAL_UART_Init>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800571e:	f000 fb23 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005722:	bf00      	nop
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20001ac0 	.word	0x20001ac0
 800572c:	40004400 	.word	0x40004400

08005730 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005734:	4b11      	ldr	r3, [pc, #68]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 8005736:	4a12      	ldr	r2, [pc, #72]	@ (8005780 <MX_USART6_UART_Init+0x50>)
 8005738:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800573a:	4b10      	ldr	r3, [pc, #64]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 800573c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005740:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005742:	4b0e      	ldr	r3, [pc, #56]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 8005744:	2200      	movs	r2, #0
 8005746:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005748:	4b0c      	ldr	r3, [pc, #48]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 800574a:	2200      	movs	r2, #0
 800574c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800574e:	4b0b      	ldr	r3, [pc, #44]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 8005750:	2200      	movs	r2, #0
 8005752:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005754:	4b09      	ldr	r3, [pc, #36]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 8005756:	220c      	movs	r2, #12
 8005758:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800575a:	4b08      	ldr	r3, [pc, #32]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 800575c:	2200      	movs	r2, #0
 800575e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005760:	4b06      	ldr	r3, [pc, #24]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 8005762:	2200      	movs	r2, #0
 8005764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005766:	4805      	ldr	r0, [pc, #20]	@ (800577c <MX_USART6_UART_Init+0x4c>)
 8005768:	f009 fc6c 	bl	800f044 <HAL_UART_Init>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d001      	beq.n	8005776 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005772:	f000 faf9 	bl	8005d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005776:	bf00      	nop
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20001b08 	.word	0x20001b08
 8005780:	40011400 	.word	0x40011400

08005784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800578a:	2300      	movs	r3, #0
 800578c:	607b      	str	r3, [r7, #4]
 800578e:	4b1f      	ldr	r3, [pc, #124]	@ (800580c <MX_DMA_Init+0x88>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005792:	4a1e      	ldr	r2, [pc, #120]	@ (800580c <MX_DMA_Init+0x88>)
 8005794:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005798:	6313      	str	r3, [r2, #48]	@ 0x30
 800579a:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <MX_DMA_Init+0x88>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800579e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057a6:	2300      	movs	r3, #0
 80057a8:	603b      	str	r3, [r7, #0]
 80057aa:	4b18      	ldr	r3, [pc, #96]	@ (800580c <MX_DMA_Init+0x88>)
 80057ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ae:	4a17      	ldr	r2, [pc, #92]	@ (800580c <MX_DMA_Init+0x88>)
 80057b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80057b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80057b6:	4b15      	ldr	r3, [pc, #84]	@ (800580c <MX_DMA_Init+0x88>)
 80057b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057be:	603b      	str	r3, [r7, #0]
 80057c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80057c2:	2200      	movs	r2, #0
 80057c4:	2100      	movs	r1, #0
 80057c6:	200b      	movs	r0, #11
 80057c8:	f003 fdd1 	bl	800936e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80057cc:	200b      	movs	r0, #11
 80057ce:	f003 fdea 	bl	80093a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80057d2:	2200      	movs	r2, #0
 80057d4:	2100      	movs	r1, #0
 80057d6:	200f      	movs	r0, #15
 80057d8:	f003 fdc9 	bl	800936e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80057dc:	200f      	movs	r0, #15
 80057de:	f003 fde2 	bl	80093a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80057e2:	2200      	movs	r2, #0
 80057e4:	2100      	movs	r1, #0
 80057e6:	2011      	movs	r0, #17
 80057e8:	f003 fdc1 	bl	800936e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80057ec:	2011      	movs	r0, #17
 80057ee:	f003 fdda 	bl	80093a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80057f2:	2200      	movs	r2, #0
 80057f4:	2100      	movs	r1, #0
 80057f6:	203a      	movs	r0, #58	@ 0x3a
 80057f8:	f003 fdb9 	bl	800936e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80057fc:	203a      	movs	r0, #58	@ 0x3a
 80057fe:	f003 fdd2 	bl	80093a6 <HAL_NVIC_EnableIRQ>

}
 8005802:	bf00      	nop
 8005804:	3708      	adds	r7, #8
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	40023800 	.word	0x40023800

08005810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	@ 0x28
 8005814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005816:	f107 0314 	add.w	r3, r7, #20
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	609a      	str	r2, [r3, #8]
 8005822:	60da      	str	r2, [r3, #12]
 8005824:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005826:	2300      	movs	r3, #0
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	4b51      	ldr	r3, [pc, #324]	@ (8005970 <MX_GPIO_Init+0x160>)
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	4a50      	ldr	r2, [pc, #320]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005830:	f043 0304 	orr.w	r3, r3, #4
 8005834:	6313      	str	r3, [r2, #48]	@ 0x30
 8005836:	4b4e      	ldr	r3, [pc, #312]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	613b      	str	r3, [r7, #16]
 8005840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005842:	2300      	movs	r3, #0
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	4b4a      	ldr	r3, [pc, #296]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584a:	4a49      	ldr	r2, [pc, #292]	@ (8005970 <MX_GPIO_Init+0x160>)
 800584c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005850:	6313      	str	r3, [r2, #48]	@ 0x30
 8005852:	4b47      	ldr	r3, [pc, #284]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800585e:	2300      	movs	r3, #0
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	4b43      	ldr	r3, [pc, #268]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005866:	4a42      	ldr	r2, [pc, #264]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	6313      	str	r3, [r2, #48]	@ 0x30
 800586e:	4b40      	ldr	r3, [pc, #256]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800587a:	2300      	movs	r3, #0
 800587c:	607b      	str	r3, [r7, #4]
 800587e:	4b3c      	ldr	r3, [pc, #240]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005882:	4a3b      	ldr	r2, [pc, #236]	@ (8005970 <MX_GPIO_Init+0x160>)
 8005884:	f043 0302 	orr.w	r3, r3, #2
 8005888:	6313      	str	r3, [r2, #48]	@ 0x30
 800588a:	4b39      	ldr	r3, [pc, #228]	@ (8005970 <MX_GPIO_Init+0x160>)
 800588c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800588e:	f003 0302 	and.w	r3, r3, #2
 8005892:	607b      	str	r3, [r7, #4]
 8005894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 8005896:	2200      	movs	r2, #0
 8005898:	210c      	movs	r1, #12
 800589a:	4836      	ldr	r0, [pc, #216]	@ (8005974 <MX_GPIO_Init+0x164>)
 800589c:	f004 fcae 	bl	800a1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_CS_Pin|W25_FLASH_CS_Pin, GPIO_PIN_RESET);
 80058a0:	2200      	movs	r2, #0
 80058a2:	f248 0110 	movw	r1, #32784	@ 0x8010
 80058a6:	4834      	ldr	r0, [pc, #208]	@ (8005978 <MX_GPIO_Init+0x168>)
 80058a8:	f004 fca8 	bl	800a1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|BUZZER_Pin, GPIO_PIN_RESET);
 80058ac:	2200      	movs	r2, #0
 80058ae:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80058b2:	4832      	ldr	r0, [pc, #200]	@ (800597c <MX_GPIO_Init+0x16c>)
 80058b4:	f004 fca2 	bl	800a1fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 80058b8:	230c      	movs	r3, #12
 80058ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058bc:	2301      	movs	r3, #1
 80058be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058c4:	2300      	movs	r3, #0
 80058c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	4619      	mov	r1, r3
 80058ce:	4829      	ldr	r0, [pc, #164]	@ (8005974 <MX_GPIO_Init+0x164>)
 80058d0:	f004 fa0c 	bl	8009cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin W25_FLASH_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|W25_FLASH_CS_Pin;
 80058d4:	f248 0310 	movw	r3, #32784	@ 0x8010
 80058d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058da:	2301      	movs	r3, #1
 80058dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058de:	2300      	movs	r3, #0
 80058e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058e2:	2300      	movs	r3, #0
 80058e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e6:	f107 0314 	add.w	r3, r7, #20
 80058ea:	4619      	mov	r1, r3
 80058ec:	4822      	ldr	r0, [pc, #136]	@ (8005978 <MX_GPIO_Init+0x168>)
 80058ee:	f004 f9fd 	bl	8009cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80058f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058f8:	2301      	movs	r3, #1
 80058fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005900:	2303      	movs	r3, #3
 8005902:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005904:	f107 0314 	add.w	r3, r7, #20
 8005908:	4619      	mov	r1, r3
 800590a:	481c      	ldr	r0, [pc, #112]	@ (800597c <MX_GPIO_Init+0x16c>)
 800590c:	f004 f9ee 	bl	8009cec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8005910:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005916:	2301      	movs	r3, #1
 8005918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800591e:	2300      	movs	r3, #0
 8005920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8005922:	f107 0314 	add.w	r3, r7, #20
 8005926:	4619      	mov	r1, r3
 8005928:	4814      	ldr	r0, [pc, #80]	@ (800597c <MX_GPIO_Init+0x16c>)
 800592a:	f004 f9df 	bl	8009cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800592e:	2318      	movs	r3, #24
 8005930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005932:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005938:	2300      	movs	r3, #0
 800593a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800593c:	f107 0314 	add.w	r3, r7, #20
 8005940:	4619      	mov	r1, r3
 8005942:	480e      	ldr	r0, [pc, #56]	@ (800597c <MX_GPIO_Init+0x16c>)
 8005944:	f004 f9d2 	bl	8009cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005948:	2200      	movs	r2, #0
 800594a:	2100      	movs	r1, #0
 800594c:	2009      	movs	r0, #9
 800594e:	f003 fd0e 	bl	800936e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8005952:	2009      	movs	r0, #9
 8005954:	f003 fd27 	bl	80093a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005958:	2200      	movs	r2, #0
 800595a:	2100      	movs	r1, #0
 800595c:	200a      	movs	r0, #10
 800595e:	f003 fd06 	bl	800936e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005962:	200a      	movs	r0, #10
 8005964:	f003 fd1f 	bl	80093a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005968:	bf00      	nop
 800596a:	3728      	adds	r7, #40	@ 0x28
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40023800 	.word	0x40023800
 8005974:	40020800 	.word	0x40020800
 8005978:	40020000 	.word	0x40020000
 800597c:	40020400 	.word	0x40020400

08005980 <lora_init>:
/**
 * @brief Initialize LoRa E22 module
 * @note Configures LoRa module for telemetry transmission
 */
void lora_init(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
	lora_1.baud_rate 		= 	E22_BAUD_RATE_115200;
 8005984:	4b1e      	ldr	r3, [pc, #120]	@ (8005a00 <lora_init+0x80>)
 8005986:	2207      	movs	r2, #7
 8005988:	73da      	strb	r2, [r3, #15]
	lora_1.parity_bit		=	E22_PARITY_8N1;
 800598a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a00 <lora_init+0x80>)
 800598c:	2200      	movs	r2, #0
 800598e:	741a      	strb	r2, [r3, #16]
	lora_1.air_rate			=	E22_AIR_DATA_RATE_38400;
 8005990:	4b1b      	ldr	r3, [pc, #108]	@ (8005a00 <lora_init+0x80>)
 8005992:	2206      	movs	r2, #6
 8005994:	745a      	strb	r2, [r3, #17]
	lora_1.packet_size		=	E22_PACKET_SIZE_64;
 8005996:	4b1a      	ldr	r3, [pc, #104]	@ (8005a00 <lora_init+0x80>)
 8005998:	2202      	movs	r2, #2
 800599a:	749a      	strb	r2, [r3, #18]
	lora_1.rssi_noise		=	E22_RSSI_NOISE_DISABLE;
 800599c:	4b18      	ldr	r3, [pc, #96]	@ (8005a00 <lora_init+0x80>)
 800599e:	2200      	movs	r2, #0
 80059a0:	74da      	strb	r2, [r3, #19]
	lora_1.power			=	E22_TRANSMITTING_POWER_22;
 80059a2:	4b17      	ldr	r3, [pc, #92]	@ (8005a00 <lora_init+0x80>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	751a      	strb	r2, [r3, #20]
	lora_1.rssi_enable		=	E22_ENABLE_RSSI_DISABLE;
 80059a8:	4b15      	ldr	r3, [pc, #84]	@ (8005a00 <lora_init+0x80>)
 80059aa:	2200      	movs	r2, #0
 80059ac:	759a      	strb	r2, [r3, #22]
	lora_1.mode				= 	E22_TRANSMISSION_MODE_TRANSPARENT;
 80059ae:	4b14      	ldr	r3, [pc, #80]	@ (8005a00 <lora_init+0x80>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	75da      	strb	r2, [r3, #23]
	lora_1.repeater_func	=	E22_REPEATER_FUNC_DISABLE;
 80059b4:	4b12      	ldr	r3, [pc, #72]	@ (8005a00 <lora_init+0x80>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	761a      	strb	r2, [r3, #24]
	lora_1.lbt				=	E22_LBT_DISABLE;
 80059ba:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <lora_init+0x80>)
 80059bc:	2200      	movs	r2, #0
 80059be:	765a      	strb	r2, [r3, #25]
	lora_1.wor				=	E22_WOR_RECEIVER;
 80059c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <lora_init+0x80>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	769a      	strb	r2, [r3, #26]
	lora_1.wor_cycle		=	E22_WOR_CYCLE_1000;
 80059c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a00 <lora_init+0x80>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	76da      	strb	r2, [r3, #27]
	lora_1.channel			=	28;
 80059cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a00 <lora_init+0x80>)
 80059ce:	221c      	movs	r2, #28
 80059d0:	755a      	strb	r2, [r3, #21]

	e22_init(&lora_1, &huart4);
 80059d2:	490c      	ldr	r1, [pc, #48]	@ (8005a04 <lora_init+0x84>)
 80059d4:	480a      	ldr	r0, [pc, #40]	@ (8005a00 <lora_init+0x80>)
 80059d6:	f7fd fb0f 	bl	8002ff8 <e22_init>

	HAL_UART_DeInit(&huart4);
 80059da:	480a      	ldr	r0, [pc, #40]	@ (8005a04 <lora_init+0x84>)
 80059dc:	f009 fb82 	bl	800f0e4 <HAL_UART_DeInit>
	HAL_Delay(20);
 80059e0:	2014      	movs	r0, #20
 80059e2:	f002 ff91 	bl	8008908 <HAL_Delay>
	huart4.Init.BaudRate = 115200;
 80059e6:	4b07      	ldr	r3, [pc, #28]	@ (8005a04 <lora_init+0x84>)
 80059e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80059ec:	605a      	str	r2, [r3, #4]
	HAL_Delay(20);
 80059ee:	2014      	movs	r0, #20
 80059f0:	f002 ff8a 	bl	8008908 <HAL_Delay>
	HAL_UART_Init(&huart4);
 80059f4:	4803      	ldr	r0, [pc, #12]	@ (8005a04 <lora_init+0x84>)
 80059f6:	f009 fb25 	bl	800f044 <HAL_UART_Init>

}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20001dd4 	.word	0x20001dd4
 8005a04:	20001a78 	.word	0x20001a78

08005a08 <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_2;
 8005a0c:	4b08      	ldr	r3, [pc, #32]	@ (8005a30 <bme280_begin+0x28>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 8005a12:	4b07      	ldr	r3, [pc, #28]	@ (8005a30 <bme280_begin+0x28>)
 8005a14:	2203      	movs	r2, #3
 8005a16:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_4;
 8005a18:	4b05      	ldr	r3, [pc, #20]	@ (8005a30 <bme280_begin+0x28>)
 8005a1a:	2203      	movs	r2, #3
 8005a1c:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_125;
 8005a1e:	4b04      	ldr	r3, [pc, #16]	@ (8005a30 <bme280_begin+0x28>)
 8005a20:	2202      	movs	r2, #2
 8005a22:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 8005a24:	4903      	ldr	r1, [pc, #12]	@ (8005a34 <bme280_begin+0x2c>)
 8005a26:	4802      	ldr	r0, [pc, #8]	@ (8005a30 <bme280_begin+0x28>)
 8005a28:	f7fb ff3c 	bl	80018a4 <bme280_init>
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	20001c70 	.word	0x20001c70
 8005a34:	200018cc 	.word	0x200018cc

08005a38 <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8005a3c:	4b13      	ldr	r3, [pc, #76]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a3e:	2208      	movs	r2, #8
 8005a40:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a44:	2209      	movs	r2, #9
 8005a46:	72da      	strb	r2, [r3, #11]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8005a48:	4b10      	ldr	r3, [pc, #64]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	721a      	strb	r2, [r3, #8]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a50:	2203      	movs	r2, #3
 8005a52:	725a      	strb	r2, [r3, #9]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8005a54:	4b0d      	ldr	r3, [pc, #52]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a56:	2202      	movs	r2, #2
 8005a58:	735a      	strb	r2, [r3, #13]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8005a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	739a      	strb	r2, [r3, #14]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8005a60:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	731a      	strb	r2, [r3, #12]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 8005a66:	4b09      	ldr	r3, [pc, #36]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a68:	2209      	movs	r2, #9
 8005a6a:	751a      	strb	r2, [r3, #20]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a6e:	220a      	movs	r2, #10
 8005a70:	755a      	strb	r2, [r3, #21]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8005a72:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a74:	4a06      	ldr	r2, [pc, #24]	@ (8005a90 <bmi_imu_init+0x58>)
 8005a76:	611a      	str	r2, [r3, #16]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 8005a78:	4b04      	ldr	r3, [pc, #16]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	619a      	str	r2, [r3, #24]

  return bmi088_init(&BMI_sensor);
 8005a7e:	4803      	ldr	r0, [pc, #12]	@ (8005a8c <bmi_imu_init+0x54>)
 8005a80:	f7fc fb70 	bl	8002164 <bmi088_init>
 8005a84:	4603      	mov	r3, r0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20001cb4 	.word	0x20001cb4
 8005a90:	20001878 	.word	0x20001878

08005a94 <read_ADC>:
/**
 * @brief Read HMC1021 magnetometer ADC values
 * @note Converts ADC readings to magnetic field strength and transmits data
 */
void read_ADC()
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
    static uint16_t adc1_raw = 0;  // ADC1 değeri (Channel 9)
    static uint16_t adc2_raw = 0;  // ADC2 değeri (Channel 10)
    static uint16_t adc3_raw = 0;  // ADC3 değeri (Channel 11)

    // ADC1 okuma
    HAL_ADC_Start(&hadc1);
 8005a98:	4849      	ldr	r0, [pc, #292]	@ (8005bc0 <read_ADC+0x12c>)
 8005a9a:	f002 ff9d 	bl	80089d8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK) {
 8005a9e:	2105      	movs	r1, #5
 8005aa0:	4847      	ldr	r0, [pc, #284]	@ (8005bc0 <read_ADC+0x12c>)
 8005aa2:	f003 f89e 	bl	8008be2 <HAL_ADC_PollForConversion>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d106      	bne.n	8005aba <read_ADC+0x26>
        adc1_raw = HAL_ADC_GetValue(&hadc1);
 8005aac:	4844      	ldr	r0, [pc, #272]	@ (8005bc0 <read_ADC+0x12c>)
 8005aae:	f003 f923 	bl	8008cf8 <HAL_ADC_GetValue>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	4b43      	ldr	r3, [pc, #268]	@ (8005bc4 <read_ADC+0x130>)
 8005ab8:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8005aba:	4841      	ldr	r0, [pc, #260]	@ (8005bc0 <read_ADC+0x12c>)
 8005abc:	f003 f85e 	bl	8008b7c <HAL_ADC_Stop>


    // ADC2 okuma
    HAL_ADC_Start(&hadc2);
 8005ac0:	4841      	ldr	r0, [pc, #260]	@ (8005bc8 <read_ADC+0x134>)
 8005ac2:	f002 ff89 	bl	80089d8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, 5) == HAL_OK) {
 8005ac6:	2105      	movs	r1, #5
 8005ac8:	483f      	ldr	r0, [pc, #252]	@ (8005bc8 <read_ADC+0x134>)
 8005aca:	f003 f88a 	bl	8008be2 <HAL_ADC_PollForConversion>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d106      	bne.n	8005ae2 <read_ADC+0x4e>
        adc2_raw = HAL_ADC_GetValue(&hadc2);
 8005ad4:	483c      	ldr	r0, [pc, #240]	@ (8005bc8 <read_ADC+0x134>)
 8005ad6:	f003 f90f 	bl	8008cf8 <HAL_ADC_GetValue>
 8005ada:	4603      	mov	r3, r0
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	4b3b      	ldr	r3, [pc, #236]	@ (8005bcc <read_ADC+0x138>)
 8005ae0:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc2);
 8005ae2:	4839      	ldr	r0, [pc, #228]	@ (8005bc8 <read_ADC+0x134>)
 8005ae4:	f003 f84a 	bl	8008b7c <HAL_ADC_Stop>


    // ADC3 okuma
    HAL_ADC_Start(&hadc3);
 8005ae8:	4839      	ldr	r0, [pc, #228]	@ (8005bd0 <read_ADC+0x13c>)
 8005aea:	f002 ff75 	bl	80089d8 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc3, 5) == HAL_OK) {
 8005aee:	2105      	movs	r1, #5
 8005af0:	4837      	ldr	r0, [pc, #220]	@ (8005bd0 <read_ADC+0x13c>)
 8005af2:	f003 f876 	bl	8008be2 <HAL_ADC_PollForConversion>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <read_ADC+0x76>
        adc3_raw = HAL_ADC_GetValue(&hadc3);
 8005afc:	4834      	ldr	r0, [pc, #208]	@ (8005bd0 <read_ADC+0x13c>)
 8005afe:	f003 f8fb 	bl	8008cf8 <HAL_ADC_GetValue>
 8005b02:	4603      	mov	r3, r0
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	4b33      	ldr	r3, [pc, #204]	@ (8005bd4 <read_ADC+0x140>)
 8005b08:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc3);
 8005b0a:	4831      	ldr	r0, [pc, #196]	@ (8005bd0 <read_ADC+0x13c>)
 8005b0c:	f003 f836 	bl	8008b7c <HAL_ADC_Stop>


    // Kalibrasyonlu değerleri hesapla
    hmc1021_voltage = (adc1_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 8005b10:	4b2c      	ldr	r3, [pc, #176]	@ (8005bc4 <read_ADC+0x130>)
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	ee07 3a90 	vmov	s15, r3
 8005b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b1c:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8005bd8 <read_ADC+0x144>
 8005b20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b24:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8005bdc <read_ADC+0x148>
 8005b28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b2c:	4b2c      	ldr	r3, [pc, #176]	@ (8005be0 <read_ADC+0x14c>)
 8005b2e:	edc3 7a00 	vstr	s15, [r3]
    voltage_V = (adc2_raw * 13.2f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 8005b32:	4b26      	ldr	r3, [pc, #152]	@ (8005bcc <read_ADC+0x138>)
 8005b34:	881b      	ldrh	r3, [r3, #0]
 8005b36:	ee07 3a90 	vmov	s15, r3
 8005b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b3e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005be4 <read_ADC+0x150>
 8005b42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b46:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8005bdc <read_ADC+0x148>
 8005b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b4e:	4b26      	ldr	r3, [pc, #152]	@ (8005be8 <read_ADC+0x154>)
 8005b50:	edc3 7a00 	vstr	s15, [r3]
    current_mA = (adc3_raw * CRNT_COEF); // Gerekirse akım sensörüne göre kalibre edin
 8005b54:	4b1f      	ldr	r3, [pc, #124]	@ (8005bd4 <read_ADC+0x140>)
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	ee07 3a90 	vmov	s15, r3
 8005b5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b60:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8005bec <read_ADC+0x158>
 8005b64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b68:	4b21      	ldr	r3, [pc, #132]	@ (8005bf0 <read_ADC+0x15c>)
 8005b6a:	edc3 7a00 	vstr	s15, [r3]
    hmc1021_gauss = (hmc1021_voltage - 1.65f) / 1.0f;  // 1V/Gauss sensitivity
 8005b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005be0 <read_ADC+0x14c>)
 8005b70:	edd3 7a00 	vldr	s15, [r3]
 8005b74:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8005bf4 <read_ADC+0x160>
 8005b78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf8 <read_ADC+0x164>)
 8005b7e:	edc3 7a00 	vstr	s15, [r3]

	if(voltage_V < 7.0){
 8005b82:	4b19      	ldr	r3, [pc, #100]	@ (8005be8 <read_ADC+0x154>)
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8005b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b94:	d503      	bpl.n	8005b9e <read_ADC+0x10a>
		e22_sleep_mode(&lora_1);
 8005b96:	4819      	ldr	r0, [pc, #100]	@ (8005bfc <read_ADC+0x168>)
 8005b98:	f7fd facc 	bl	8003134 <e22_sleep_mode>

	}else if(voltage_V >= 7.0){
		e22_transmit_mode(&lora_1);
	}
}
 8005b9c:	e00d      	b.n	8005bba <read_ADC+0x126>
	}else if(voltage_V >= 7.0){
 8005b9e:	4b12      	ldr	r3, [pc, #72]	@ (8005be8 <read_ADC+0x154>)
 8005ba0:	edd3 7a00 	vldr	s15, [r3]
 8005ba4:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8005ba8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb0:	da00      	bge.n	8005bb4 <read_ADC+0x120>
}
 8005bb2:	e002      	b.n	8005bba <read_ADC+0x126>
		e22_transmit_mode(&lora_1);
 8005bb4:	4811      	ldr	r0, [pc, #68]	@ (8005bfc <read_ADC+0x168>)
 8005bb6:	f7fd fae5 	bl	8003184 <e22_transmit_mode>
}
 8005bba:	bf00      	nop
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200017a0 	.word	0x200017a0
 8005bc4:	20001e0c 	.word	0x20001e0c
 8005bc8:	200017e8 	.word	0x200017e8
 8005bcc:	20001e0e 	.word	0x20001e0e
 8005bd0:	20001830 	.word	0x20001830
 8005bd4:	20001e10 	.word	0x20001e10
 8005bd8:	40533333 	.word	0x40533333
 8005bdc:	45800000 	.word	0x45800000
 8005be0:	20001e04 	.word	0x20001e04
 8005be4:	41533333 	.word	0x41533333
 8005be8:	20001e00 	.word	0x20001e00
 8005bec:	3a533334 	.word	0x3a533334
 8005bf0:	20001dfc 	.word	0x20001dfc
 8005bf4:	3fd33333 	.word	0x3fd33333
 8005bf8:	20001e08 	.word	0x20001e08
 8005bfc:	20001dd4 	.word	0x20001dd4

08005c00 <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_3)
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d102      	bne.n	8005c16 <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 8005c10:	4806      	ldr	r0, [pc, #24]	@ (8005c2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8005c12:	f7fd f87f 	bl	8002d14 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_4)
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d102      	bne.n	8005c22 <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 8005c1c:	4803      	ldr	r0, [pc, #12]	@ (8005c2c <HAL_GPIO_EXTI_Callback+0x2c>)
 8005c1e:	f7fd f886 	bl	8002d2e <bmi088_set_gyro_INT>
  }
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20001cb4 	.word	0x20001cb4

08005c30 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c40:	d10d      	bne.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 8005c42:	4b0a      	ldr	r3, [pc, #40]	@ (8005c6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	3301      	adds	r3, #1
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	4b07      	ldr	r3, [pc, #28]	@ (8005c6c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005c4e:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 8005c50:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	3301      	adds	r3, #1
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005c5c:	701a      	strb	r2, [r3, #0]
  }
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	20001df6 	.word	0x20001df6
 8005c70:	20001df7 	.word	0x20001df7

08005c74 <HAL_UART_TxCpltCallback>:
 * @brief UART transmission complete callback
 * @param huart UART handle
 * @note Clears transmission busy flag
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <HAL_UART_TxCpltCallback+0x34>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d102      	bne.n	8005c8c <HAL_UART_TxCpltCallback+0x18>
		usart4_tx_busy = 0;
 8005c86:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <HAL_UART_TxCpltCallback+0x38>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == USART2) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a07      	ldr	r2, [pc, #28]	@ (8005cb0 <HAL_UART_TxCpltCallback+0x3c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d102      	bne.n	8005c9c <HAL_UART_TxCpltCallback+0x28>
		usart2_tx_busy = 0;
 8005c96:	4b07      	ldr	r3, [pc, #28]	@ (8005cb4 <HAL_UART_TxCpltCallback+0x40>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	701a      	strb	r2, [r3, #0]
	}
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40004c00 	.word	0x40004c00
 8005cac:	20001df4 	.word	0x20001df4
 8005cb0:	40004400 	.word	0x40004400
 8005cb4:	20001df5 	.word	0x20001df5

08005cb8 <HAL_I2C_MemRxCpltCallback>:
 * @brief I2C Memory read complete callback (DMA)
 * @param hi2c I2C handle
 * @note Handles BMI088 sensor data DMA transfer completion
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8005cf0 <HAL_I2C_MemRxCpltCallback+0x38>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10e      	bne.n	8005ce8 <HAL_I2C_MemRxCpltCallback+0x30>
        if (hi2c->Devaddress == ACC_I2C_ADD) {
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	2b30      	cmp	r3, #48	@ 0x30
 8005cd0:	d103      	bne.n	8005cda <HAL_I2C_MemRxCpltCallback+0x22>
            // Accelerometer data received (9 bytes: XYZ + sensor time)
            bmi088_accel_dma_complete_callback(&BMI_sensor);
 8005cd2:	4808      	ldr	r0, [pc, #32]	@ (8005cf4 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8005cd4:	f7fd f8b4 	bl	8002e40 <bmi088_accel_dma_complete_callback>
        else if (hi2c->Devaddress == GYRO_I2C_ADD) {
            // Gyroscope data received (6 bytes: XYZ)
            bmi088_gyro_dma_complete_callback(&BMI_sensor);
        }
    }
}
 8005cd8:	e006      	b.n	8005ce8 <HAL_I2C_MemRxCpltCallback+0x30>
        else if (hi2c->Devaddress == GYRO_I2C_ADD) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cde:	2bd0      	cmp	r3, #208	@ 0xd0
 8005ce0:	d102      	bne.n	8005ce8 <HAL_I2C_MemRxCpltCallback+0x30>
            bmi088_gyro_dma_complete_callback(&BMI_sensor);
 8005ce2:	4804      	ldr	r0, [pc, #16]	@ (8005cf4 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8005ce4:	f7fd f8bf 	bl	8002e66 <bmi088_gyro_dma_complete_callback>
}
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40005400 	.word	0x40005400
 8005cf4:	20001cb4 	.word	0x20001cb4

08005cf8 <uart2_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void uart2_send_packet_dma(uint8_t *data, uint16_t size)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	807b      	strh	r3, [r7, #2]
	if (!usart2_tx_busy) {
 8005d04:	4b08      	ldr	r3, [pc, #32]	@ (8005d28 <uart2_send_packet_dma+0x30>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d108      	bne.n	8005d20 <uart2_send_packet_dma+0x28>
		usart2_tx_busy = 1;
 8005d0e:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <uart2_send_packet_dma+0x30>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, data, size);
 8005d14:	887b      	ldrh	r3, [r7, #2]
 8005d16:	461a      	mov	r2, r3
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4804      	ldr	r0, [pc, #16]	@ (8005d2c <uart2_send_packet_dma+0x34>)
 8005d1c:	f009 fb36 	bl	800f38c <HAL_UART_Transmit_DMA>
	}
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	20001df5 	.word	0x20001df5
 8005d2c:	20001ac0 	.word	0x20001ac0

08005d30 <lora_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void lora_send_packet_dma(uint8_t *data, uint16_t size)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	807b      	strh	r3, [r7, #2]
	if (!usart4_tx_busy) {
 8005d3c:	4b08      	ldr	r3, [pc, #32]	@ (8005d60 <lora_send_packet_dma+0x30>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d108      	bne.n	8005d58 <lora_send_packet_dma+0x28>
		usart4_tx_busy = 1;
 8005d46:	4b06      	ldr	r3, [pc, #24]	@ (8005d60 <lora_send_packet_dma+0x30>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, data, size);
 8005d4c:	887b      	ldrh	r3, [r7, #2]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4804      	ldr	r0, [pc, #16]	@ (8005d64 <lora_send_packet_dma+0x34>)
 8005d54:	f009 fb1a 	bl	800f38c <HAL_UART_Transmit_DMA>
	}
}
 8005d58:	bf00      	nop
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	20001df4 	.word	0x20001df4
 8005d64:	20001a78 	.word	0x20001a78

08005d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d6c:	b672      	cpsid	i
}
 8005d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d70:	bf00      	nop
 8005d72:	e7fd      	b.n	8005d70 <Error_Handler+0x8>

08005d74 <check_sum_hesapla_normal>:

unsigned char normal_paket[50];
unsigned char sd_paket[64];


unsigned char check_sum_hesapla_normal(int a){
 8005d74:	b480      	push	{r7}
 8005d76:	b085      	sub	sp, #20
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005d80:	2300      	movs	r3, #0
 8005d82:	60bb      	str	r3, [r7, #8]
 8005d84:	e00a      	b.n	8005d9c <check_sum_hesapla_normal+0x28>
        check_sum += normal_paket[i];
 8005d86:	4a0e      	ldr	r2, [pc, #56]	@ (8005dc0 <check_sum_hesapla_normal+0x4c>)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	4413      	add	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60bb      	str	r3, [r7, #8]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	dbf0      	blt.n	8005d86 <check_sum_hesapla_normal+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	425a      	negs	r2, r3
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	b2d2      	uxtb	r2, r2
 8005dac:	bf58      	it	pl
 8005dae:	4253      	negpl	r3, r2
 8005db0:	b2db      	uxtb	r3, r3
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3714      	adds	r7, #20
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	20001e14 	.word	0x20001e14

08005dc4 <addDataPacketNormal>:

void addDataPacketNormal(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor, gps_data_t* GPS, float hmc1021_gauss, float voltage, float current){
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b094      	sub	sp, #80	@ 0x50
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	61f8      	str	r0, [r7, #28]
 8005dcc:	61b9      	str	r1, [r7, #24]
 8005dce:	617a      	str	r2, [r7, #20]
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	ed87 0a03 	vstr	s0, [r7, #12]
 8005dd6:	edc7 0a02 	vstr	s1, [r7, #8]
 8005dda:	ed87 1a01 	vstr	s2, [r7, #4]
  normal_paket[0] = 0xFF; // Sabit
 8005dde:	4b82      	ldr	r3, [pc, #520]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005de0:	22ff      	movs	r2, #255	@ 0xff
 8005de2:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  normal_paket[1] = irtifa_float32_uint8_donusturucu.array[0];
 8005dea:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8005dee:	4b7e      	ldr	r3, [pc, #504]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005df0:	705a      	strb	r2, [r3, #1]
  normal_paket[2] = irtifa_float32_uint8_donusturucu.array[1];
 8005df2:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005df6:	4b7c      	ldr	r3, [pc, #496]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005df8:	709a      	strb	r2, [r3, #2]
  normal_paket[3] = irtifa_float32_uint8_donusturucu.array[2];
 8005dfa:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8005dfe:	4b7a      	ldr	r3, [pc, #488]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e00:	70da      	strb	r2, [r3, #3]
  normal_paket[4] = irtifa_float32_uint8_donusturucu.array[3];
 8005e02:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005e06:	4b78      	ldr	r3, [pc, #480]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e08:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
  roket_gps_irtifa_float32_uint8_donusturucu.sayi = (GPS->altitude); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  normal_paket[5] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 8005e10:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8005e14:	4b74      	ldr	r3, [pc, #464]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e16:	715a      	strb	r2, [r3, #5]
  normal_paket[6] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 8005e18:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005e1c:	4b72      	ldr	r3, [pc, #456]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e1e:	719a      	strb	r2, [r3, #6]
  normal_paket[7] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 8005e20:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8005e24:	4b70      	ldr	r3, [pc, #448]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e26:	71da      	strb	r2, [r3, #7]
  normal_paket[8] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 8005e28:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8005e2c:	4b6e      	ldr	r3, [pc, #440]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e2e:	721a      	strb	r2, [r3, #8]

   // Roket Enlem
  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
  roket_enlem_float32_uint8_donusturucu.sayi = (GPS->latitude); // Roket enlem degerinin atamasini yapiyoruz.
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e34:	647b      	str	r3, [r7, #68]	@ 0x44
  normal_paket[9] = roket_enlem_float32_uint8_donusturucu.array[0];
 8005e36:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8005e3a:	4b6b      	ldr	r3, [pc, #428]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e3c:	725a      	strb	r2, [r3, #9]
  normal_paket[10] = roket_enlem_float32_uint8_donusturucu.array[1];
 8005e3e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005e42:	4b69      	ldr	r3, [pc, #420]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e44:	729a      	strb	r2, [r3, #10]
  normal_paket[11] = roket_enlem_float32_uint8_donusturucu.array[2];
 8005e46:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005e4a:	4b67      	ldr	r3, [pc, #412]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e4c:	72da      	strb	r2, [r3, #11]
  normal_paket[12] = roket_enlem_float32_uint8_donusturucu.array[3];
 8005e4e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005e52:	4b65      	ldr	r3, [pc, #404]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e54:	731a      	strb	r2, [r3, #12]

  // Roket Boylam
  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = (GPS->longitude); // Roket boylam degerinin atamasini yapiyoruz.
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5a:	643b      	str	r3, [r7, #64]	@ 0x40
  normal_paket[13] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 8005e5c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8005e60:	4b61      	ldr	r3, [pc, #388]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e62:	735a      	strb	r2, [r3, #13]
  normal_paket[14] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 8005e64:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8005e68:	4b5f      	ldr	r3, [pc, #380]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e6a:	739a      	strb	r2, [r3, #14]
  normal_paket[15] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 8005e6c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8005e70:	4b5d      	ldr	r3, [pc, #372]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e72:	73da      	strb	r2, [r3, #15]
  normal_paket[16] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 8005e74:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8005e78:	4b5b      	ldr	r3, [pc, #364]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e7a:	741a      	strb	r2, [r3, #16]


  FLOAT32_UINT8_DONUSTURUCU aci_float32_uint8_donusturucu;
  aci_float32_uint8_donusturucu.sayi = (BMI->datas.theta); // Theta acisinin atamasini yapiyoruz.
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  normal_paket[17] = aci_float32_uint8_donusturucu.array[0];
 8005e82:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8005e86:	4b58      	ldr	r3, [pc, #352]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e88:	745a      	strb	r2, [r3, #17]
  normal_paket[18] = aci_float32_uint8_donusturucu.array[1];
 8005e8a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005e8e:	4b56      	ldr	r3, [pc, #344]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e90:	749a      	strb	r2, [r3, #18]
  normal_paket[19] = aci_float32_uint8_donusturucu.array[2];
 8005e92:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8005e96:	4b54      	ldr	r3, [pc, #336]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005e98:	74da      	strb	r2, [r3, #19]
  normal_paket[20] = aci_float32_uint8_donusturucu.array[3];
 8005e9a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005e9e:	4b52      	ldr	r3, [pc, #328]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005ea0:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU volt_float32_uint8_donusturucu;
  volt_float32_uint8_donusturucu.sayi = (voltage); // Volt degerinin atamasini yapiyoruz.
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
  normal_paket[21] = volt_float32_uint8_donusturucu.array[0];
 8005ea6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005eac:	755a      	strb	r2, [r3, #21]
  normal_paket[22] = volt_float32_uint8_donusturucu.array[1];
 8005eae:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005eb4:	759a      	strb	r2, [r3, #22]
  normal_paket[23] = volt_float32_uint8_donusturucu.array[2];
 8005eb6:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8005eba:	4b4b      	ldr	r3, [pc, #300]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005ebc:	75da      	strb	r2, [r3, #23]
  normal_paket[24] = volt_float32_uint8_donusturucu.array[3];
 8005ebe:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8005ec2:	4b49      	ldr	r3, [pc, #292]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005ec4:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU akim_float32_uint8_donusturucu;
  akim_float32_uint8_donusturucu.sayi = (current); // Akim degerinin atamasini yapiyoruz.
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  normal_paket[25] = akim_float32_uint8_donusturucu.array[0];
 8005eca:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8005ece:	4b46      	ldr	r3, [pc, #280]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005ed0:	765a      	strb	r2, [r3, #25]
  normal_paket[26] = akim_float32_uint8_donusturucu.array[1];
 8005ed2:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8005ed6:	4b44      	ldr	r3, [pc, #272]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005ed8:	769a      	strb	r2, [r3, #26]
  normal_paket[27] = akim_float32_uint8_donusturucu.array[2];
 8005eda:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8005ede:	4b42      	ldr	r3, [pc, #264]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005ee0:	76da      	strb	r2, [r3, #27]
  normal_paket[28] = akim_float32_uint8_donusturucu.array[3];
 8005ee2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005ee6:	4b40      	ldr	r3, [pc, #256]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005ee8:	771a      	strb	r2, [r3, #28]

  FLOAT32_UINT8_DONUSTURUCU sicaklik_float32_uint8_donusturucu;
  sicaklik_float32_uint8_donusturucu.sayi = (BME->temperature); // Sicaklik degerinin atamasini yapiyoruz.
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	633b      	str	r3, [r7, #48]	@ 0x30
  normal_paket[29] = sicaklik_float32_uint8_donusturucu.array[0];
 8005ef0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005ef6:	775a      	strb	r2, [r3, #29]
  normal_paket[30] = sicaklik_float32_uint8_donusturucu.array[1];
 8005ef8:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8005efc:	4b3a      	ldr	r3, [pc, #232]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005efe:	779a      	strb	r2, [r3, #30]
  normal_paket[31] = sicaklik_float32_uint8_donusturucu.array[2];
 8005f00:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8005f04:	4b38      	ldr	r3, [pc, #224]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f06:	77da      	strb	r2, [r3, #31]
  normal_paket[32] = sicaklik_float32_uint8_donusturucu.array[3];
 8005f08:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005f0c:	4b36      	ldr	r3, [pc, #216]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f0e:	f883 2020 	strb.w	r2, [r3, #32]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (BME->pressure); // basinc degerinin atamasini yapiyoruz.
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  normal_paket[33] = basinc_float32_uint8_donusturucu.array[0];
 8005f18:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005f1c:	4b32      	ldr	r3, [pc, #200]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f1e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  normal_paket[34] = basinc_float32_uint8_donusturucu.array[1];
 8005f22:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005f26:	4b30      	ldr	r3, [pc, #192]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f28:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  normal_paket[35] = basinc_float32_uint8_donusturucu.array[2];
 8005f2c:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005f30:	4b2d      	ldr	r3, [pc, #180]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f32:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  normal_paket[36] = basinc_float32_uint8_donusturucu.array[3];
 8005f36:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  FLOAT32_UINT8_DONUSTURUCU manyetik_alan_float32_uint8_donusturucu;
  manyetik_alan_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Manyetik alan degerinin atamasini yapiyoruz.
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  normal_paket[37] = manyetik_alan_float32_uint8_donusturucu.array[0];
 8005f44:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005f48:	4b27      	ldr	r3, [pc, #156]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  normal_paket[38] = manyetik_alan_float32_uint8_donusturucu.array[1];
 8005f4e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005f52:	4b25      	ldr	r3, [pc, #148]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f54:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  normal_paket[39] = manyetik_alan_float32_uint8_donusturucu.array[2];
 8005f58:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8005f5c:	4b22      	ldr	r3, [pc, #136]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f5e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  normal_paket[40] = manyetik_alan_float32_uint8_donusturucu.array[3];
 8005f62:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005f66:	4b20      	ldr	r3, [pc, #128]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  FLOAT32_UINT8_DONUSTURUCU hiz_float32_uint8_donusturucu;
  hiz_float32_uint8_donusturucu.sayi = (sensor->velocity); // hiz degerinin atamasini yapiyoruz.
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	627b      	str	r3, [r7, #36]	@ 0x24
  normal_paket[41] = hiz_float32_uint8_donusturucu.array[0];
 8005f72:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005f76:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f78:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  normal_paket[42] = hiz_float32_uint8_donusturucu.array[1];
 8005f7c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005f80:	4b19      	ldr	r3, [pc, #100]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f82:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  normal_paket[43] = hiz_float32_uint8_donusturucu.array[2];
 8005f86:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005f8a:	4b17      	ldr	r3, [pc, #92]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f8c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  normal_paket[44] = hiz_float32_uint8_donusturucu.array[3];
 8005f90:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005f94:	4b14      	ldr	r3, [pc, #80]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005f96:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  //NEM
  normal_paket[45] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa4:	edc7 7a00 	vstr	s15, [r7]
 8005fa8:	783b      	ldrb	r3, [r7, #0]
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005fae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  normal_paket[46] = flight_algorithm_get_durum_verisi();
 8005fb2:	f7fd faa7 	bl	8003504 <flight_algorithm_get_durum_verisi>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	461a      	mov	r2, r3
 8005fba:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005fbc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  normal_paket[47] = check_sum_hesapla_normal(47); // Check_sum = check_sum_hesapla();
 8005fc0:	202f      	movs	r0, #47	@ 0x2f
 8005fc2:	f7ff fed7 	bl	8005d74 <check_sum_hesapla_normal>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005fcc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  normal_paket[48] = 0x0D; // Sabit
 8005fd0:	4b05      	ldr	r3, [pc, #20]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005fd2:	220d      	movs	r2, #13
 8005fd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  normal_paket[49] = 0x0A;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	@ (8005fe8 <addDataPacketNormal+0x224>)
 8005fda:	220a      	movs	r2, #10
 8005fdc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 8005fe0:	bf00      	nop
 8005fe2:	3750      	adds	r7, #80	@ 0x50
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	20001e14 	.word	0x20001e14

08005fec <addDataPacketSD>:

void addDataPacketSD(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor, gps_data_t* GPS, float hmc1021_gauss, float voltage, float current){
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b098      	sub	sp, #96	@ 0x60
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	61f8      	str	r0, [r7, #28]
 8005ff4:	61b9      	str	r1, [r7, #24]
 8005ff6:	617a      	str	r2, [r7, #20]
 8005ff8:	613b      	str	r3, [r7, #16]
 8005ffa:	ed87 0a03 	vstr	s0, [r7, #12]
 8005ffe:	edc7 0a02 	vstr	s1, [r7, #8]
 8006002:	ed87 1a01 	vstr	s2, [r7, #4]

	  uint32_t zaman = HAL_GetTick();
 8006006:	f002 fc73 	bl	80088f0 <HAL_GetTick>
 800600a:	65f8      	str	r0, [r7, #92]	@ 0x5c

	  sd_paket[0] = 0xFF; // Sabit
 800600c:	4bb0      	ldr	r3, [pc, #704]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800600e:	22ff      	movs	r2, #255	@ 0xff
 8006010:	701a      	strb	r2, [r3, #0]

	  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
	  irtifa_float32_uint8_donusturucu.sayi = (BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	65bb      	str	r3, [r7, #88]	@ 0x58
	  sd_paket[1] = irtifa_float32_uint8_donusturucu.array[0];
 8006018:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 800601c:	4bac      	ldr	r3, [pc, #688]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800601e:	705a      	strb	r2, [r3, #1]
	  sd_paket[2] = irtifa_float32_uint8_donusturucu.array[1];
 8006020:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8006024:	4baa      	ldr	r3, [pc, #680]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006026:	709a      	strb	r2, [r3, #2]
	  sd_paket[3] = irtifa_float32_uint8_donusturucu.array[2];
 8006028:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 800602c:	4ba8      	ldr	r3, [pc, #672]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800602e:	70da      	strb	r2, [r3, #3]
	  sd_paket[4] = irtifa_float32_uint8_donusturucu.array[3];
 8006030:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8006034:	4ba6      	ldr	r3, [pc, #664]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006036:	711a      	strb	r2, [r3, #4]

	  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
	  roket_gps_irtifa_float32_uint8_donusturucu.sayi = (GPS->altitude); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603c:	657b      	str	r3, [r7, #84]	@ 0x54
	  sd_paket[5] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 800603e:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8006042:	4ba3      	ldr	r3, [pc, #652]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006044:	715a      	strb	r2, [r3, #5]
	  sd_paket[6] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 8006046:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800604a:	4ba1      	ldr	r3, [pc, #644]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800604c:	719a      	strb	r2, [r3, #6]
	  sd_paket[7] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 800604e:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8006052:	4b9f      	ldr	r3, [pc, #636]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006054:	71da      	strb	r2, [r3, #7]
	  sd_paket[8] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 8006056:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800605a:	4b9d      	ldr	r3, [pc, #628]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800605c:	721a      	strb	r2, [r3, #8]

	   // Roket Enlem
	  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
	  roket_enlem_float32_uint8_donusturucu.sayi = (GPS->latitude); // Roket enlem degerinin atamasini yapiyoruz.
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006062:	653b      	str	r3, [r7, #80]	@ 0x50
	  sd_paket[9] = roket_enlem_float32_uint8_donusturucu.array[0];
 8006064:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8006068:	4b99      	ldr	r3, [pc, #612]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800606a:	725a      	strb	r2, [r3, #9]
	  sd_paket[10] = roket_enlem_float32_uint8_donusturucu.array[1];
 800606c:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8006070:	4b97      	ldr	r3, [pc, #604]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006072:	729a      	strb	r2, [r3, #10]
	  sd_paket[11] = roket_enlem_float32_uint8_donusturucu.array[2];
 8006074:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8006078:	4b95      	ldr	r3, [pc, #596]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800607a:	72da      	strb	r2, [r3, #11]
	  sd_paket[12] = roket_enlem_float32_uint8_donusturucu.array[3];
 800607c:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 8006080:	4b93      	ldr	r3, [pc, #588]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006082:	731a      	strb	r2, [r3, #12]

	  // Roket Boylam
	  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
	  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = (GPS->longitude); // Roket boylam degerinin atamasini yapiyoruz.
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  sd_paket[13] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 800608a:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 800608e:	4b90      	ldr	r3, [pc, #576]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006090:	735a      	strb	r2, [r3, #13]
	  sd_paket[14] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 8006092:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006096:	4b8e      	ldr	r3, [pc, #568]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006098:	739a      	strb	r2, [r3, #14]
	  sd_paket[15] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 800609a:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800609e:	4b8c      	ldr	r3, [pc, #560]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060a0:	73da      	strb	r2, [r3, #15]
	  sd_paket[16] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 80060a2:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80060a6:	4b8a      	ldr	r3, [pc, #552]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060a8:	741a      	strb	r2, [r3, #16]


	  FLOAT32_UINT8_DONUSTURUCU jiroskop_x_float32_uint8_donusturucu;
	  jiroskop_x_float32_uint8_donusturucu.sayi = (BMI->datas.gyro_x); // Jiroskop X degerinin atamasini yapiyoruz.
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	  sd_paket[17] = jiroskop_x_float32_uint8_donusturucu.array[0];
 80060b0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80060b4:	4b86      	ldr	r3, [pc, #536]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060b6:	745a      	strb	r2, [r3, #17]
	  sd_paket[18] = jiroskop_x_float32_uint8_donusturucu.array[1];
 80060b8:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 80060bc:	4b84      	ldr	r3, [pc, #528]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060be:	749a      	strb	r2, [r3, #18]
	  sd_paket[19] = jiroskop_x_float32_uint8_donusturucu.array[2];
 80060c0:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 80060c4:	4b82      	ldr	r3, [pc, #520]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060c6:	74da      	strb	r2, [r3, #19]
	  sd_paket[20] = jiroskop_x_float32_uint8_donusturucu.array[3];
 80060c8:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80060cc:	4b80      	ldr	r3, [pc, #512]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060ce:	751a      	strb	r2, [r3, #20]

	  FLOAT32_UINT8_DONUSTURUCU jiroskop_y_float32_uint8_donusturucu;
	  jiroskop_y_float32_uint8_donusturucu.sayi = (BMI->datas.gyro_y); // Jiroskop Y degerinin atamasini yapiyoruz.
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	6a1b      	ldr	r3, [r3, #32]
 80060d4:	647b      	str	r3, [r7, #68]	@ 0x44
	  sd_paket[21] = jiroskop_y_float32_uint8_donusturucu.array[0];
 80060d6:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 80060da:	4b7d      	ldr	r3, [pc, #500]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060dc:	755a      	strb	r2, [r3, #21]
	  sd_paket[22] = jiroskop_y_float32_uint8_donusturucu.array[1];
 80060de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80060e2:	4b7b      	ldr	r3, [pc, #492]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060e4:	759a      	strb	r2, [r3, #22]
	  sd_paket[23] = jiroskop_y_float32_uint8_donusturucu.array[2];
 80060e6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80060ea:	4b79      	ldr	r3, [pc, #484]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060ec:	75da      	strb	r2, [r3, #23]
	  sd_paket[24] = jiroskop_y_float32_uint8_donusturucu.array[3];
 80060ee:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80060f2:	4b77      	ldr	r3, [pc, #476]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80060f4:	761a      	strb	r2, [r3, #24]

	  FLOAT32_UINT8_DONUSTURUCU jiroskop_z_float32_uint8_donusturucu;
	  jiroskop_z_float32_uint8_donusturucu.sayi = (BMI->datas.gyro_z); // Jiroskop Z degerinin atamasini yapiyoruz.
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fa:	643b      	str	r3, [r7, #64]	@ 0x40
	  sd_paket[25] = jiroskop_z_float32_uint8_donusturucu.array[0];
 80060fc:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8006100:	4b73      	ldr	r3, [pc, #460]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006102:	765a      	strb	r2, [r3, #25]
	  sd_paket[26] = jiroskop_z_float32_uint8_donusturucu.array[1];
 8006104:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8006108:	4b71      	ldr	r3, [pc, #452]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800610a:	769a      	strb	r2, [r3, #26]
	  sd_paket[27] = jiroskop_z_float32_uint8_donusturucu.array[2];
 800610c:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8006110:	4b6f      	ldr	r3, [pc, #444]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006112:	76da      	strb	r2, [r3, #27]
	  sd_paket[28] = jiroskop_z_float32_uint8_donusturucu.array[3];
 8006114:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8006118:	4b6d      	ldr	r3, [pc, #436]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800611a:	771a      	strb	r2, [r3, #28]

	  FLOAT32_UINT8_DONUSTURUCU ivme_x_float32_uint8_donusturucu;
	  ivme_x_float32_uint8_donusturucu.sayi = (BMI->datas.acc_x); // Ivme X degerinin atamasini yapiyoruz.
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006120:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  sd_paket[29] = ivme_x_float32_uint8_donusturucu.array[0];
 8006122:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8006126:	4b6a      	ldr	r3, [pc, #424]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006128:	775a      	strb	r2, [r3, #29]
	  sd_paket[30] = ivme_x_float32_uint8_donusturucu.array[1];
 800612a:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800612e:	4b68      	ldr	r3, [pc, #416]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006130:	779a      	strb	r2, [r3, #30]
	  sd_paket[31] = ivme_x_float32_uint8_donusturucu.array[2];
 8006132:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8006136:	4b66      	ldr	r3, [pc, #408]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006138:	77da      	strb	r2, [r3, #31]
	  sd_paket[32] = ivme_x_float32_uint8_donusturucu.array[3];
 800613a:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800613e:	4b64      	ldr	r3, [pc, #400]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006140:	f883 2020 	strb.w	r2, [r3, #32]

	  FLOAT32_UINT8_DONUSTURUCU ivme_y_float32_uint8_donusturucu;
	  ivme_y_float32_uint8_donusturucu.sayi = (BMI->datas.acc_y); // Ivme Y degerinin atamasini yapiyoruz.
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006148:	63bb      	str	r3, [r7, #56]	@ 0x38
	  sd_paket[33] = ivme_y_float32_uint8_donusturucu.array[0];
 800614a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800614e:	4b60      	ldr	r3, [pc, #384]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006150:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	  sd_paket[34] = ivme_y_float32_uint8_donusturucu.array[1];
 8006154:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006158:	4b5d      	ldr	r3, [pc, #372]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800615a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	  sd_paket[35] = ivme_y_float32_uint8_donusturucu.array[2];
 800615e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8006162:	4b5b      	ldr	r3, [pc, #364]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006164:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	  sd_paket[36] = ivme_y_float32_uint8_donusturucu.array[3];
 8006168:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800616c:	4b58      	ldr	r3, [pc, #352]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800616e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	  FLOAT32_UINT8_DONUSTURUCU ivme_z_float32_uint8_donusturucu;
	  ivme_z_float32_uint8_donusturucu.sayi = (BMI->datas.acc_z); // Ivme Z degerinin atamasini yapiyoruz.
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
	  sd_paket[37] = ivme_z_float32_uint8_donusturucu.array[0];
 8006178:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800617c:	4b54      	ldr	r3, [pc, #336]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800617e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	  sd_paket[38] = ivme_z_float32_uint8_donusturucu.array[1];
 8006182:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8006186:	4b52      	ldr	r3, [pc, #328]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006188:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	  sd_paket[39] = ivme_z_float32_uint8_donusturucu.array[2];
 800618c:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8006190:	4b4f      	ldr	r3, [pc, #316]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006192:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	  sd_paket[40] = ivme_z_float32_uint8_donusturucu.array[3];
 8006196:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800619a:	4b4d      	ldr	r3, [pc, #308]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800619c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

	  FLOAT32_UINT8_DONUSTURUCU aci_float32_uint8_donusturucu;
	  aci_float32_uint8_donusturucu.sayi = (BMI->datas.theta); // Aci degerinin atamasini yapiyoruz.
 80061a0:	69bb      	ldr	r3, [r7, #24]
 80061a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061a4:	633b      	str	r3, [r7, #48]	@ 0x30
	  sd_paket[41] = aci_float32_uint8_donusturucu.array[0];
 80061a6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80061aa:	4b49      	ldr	r3, [pc, #292]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80061ac:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	  sd_paket[42] = aci_float32_uint8_donusturucu.array[1];
 80061b0:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80061b4:	4b46      	ldr	r3, [pc, #280]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80061b6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	  sd_paket[43] = aci_float32_uint8_donusturucu.array[2];
 80061ba:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80061be:	4b44      	ldr	r3, [pc, #272]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80061c0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	  sd_paket[44] = aci_float32_uint8_donusturucu.array[3];
 80061c4:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80061c8:	4b41      	ldr	r3, [pc, #260]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80061ca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	  FLOAT32_UINT8_DONUSTURUCU manyetik_float32_uint8_donusturucu;
	  manyetik_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Sicaklik degerinin atamasini yapiyoruz.
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  sd_paket[45] = manyetik_float32_uint8_donusturucu.array[0];
 80061d2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80061d6:	4b3e      	ldr	r3, [pc, #248]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80061d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	  sd_paket[46] = manyetik_float32_uint8_donusturucu.array[1];
 80061dc:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80061e0:	4b3b      	ldr	r3, [pc, #236]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80061e2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	  sd_paket[47] = manyetik_float32_uint8_donusturucu.array[2];
 80061e6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80061ea:	4b39      	ldr	r3, [pc, #228]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80061ec:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	  sd_paket[48] = manyetik_float32_uint8_donusturucu.array[3];
 80061f0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80061f4:	4b36      	ldr	r3, [pc, #216]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80061f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	  FLOAT32_UINT8_DONUSTURUCU hiz_float32_uint8_donusturucu;
	  hiz_float32_uint8_donusturucu.sayi = sensor->velocity; // HİZ degerinin atamasini yapiyoruz.
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	  sd_paket[49] = hiz_float32_uint8_donusturucu.array[0];
 8006200:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8006204:	4b32      	ldr	r3, [pc, #200]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006206:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
	  sd_paket[50] = hiz_float32_uint8_donusturucu.array[1];
 800620a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800620e:	4b30      	ldr	r3, [pc, #192]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006210:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	  sd_paket[51] = hiz_float32_uint8_donusturucu.array[2];
 8006214:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8006218:	4b2d      	ldr	r3, [pc, #180]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800621a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
	  sd_paket[52] = hiz_float32_uint8_donusturucu.array[3];
 800621e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006222:	4b2b      	ldr	r3, [pc, #172]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006224:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	  FLOAT32_UINT8_DONUSTURUCU zaman_float32_uint8_donusturucu;
	  zaman_float32_uint8_donusturucu.sayi = zaman; // zaman degerinin atamasini yapiyoruz.
 8006228:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800622a:	ee07 3a90 	vmov	s15, r3
 800622e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006232:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	  sd_paket[53] = zaman_float32_uint8_donusturucu.array[0];
 8006236:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800623a:	4b25      	ldr	r3, [pc, #148]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800623c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	  sd_paket[54] = zaman_float32_uint8_donusturucu.array[1];
 8006240:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8006244:	4b22      	ldr	r3, [pc, #136]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006246:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	  sd_paket[55] = zaman_float32_uint8_donusturucu.array[2];
 800624a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800624e:	4b20      	ldr	r3, [pc, #128]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006250:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
	  sd_paket[56] = zaman_float32_uint8_donusturucu.array[3];
 8006254:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8006258:	4b1d      	ldr	r3, [pc, #116]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800625a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

	  //VOLT (voltage değerini union ile 2 byte olarak saklıyoruz)
	  UINT16_UINT8_DONUSTURUCU voltage_uint16_uint8_donusturucu;
	  voltage_uint16_uint8_donusturucu.sayi = (uint16_t)(voltage);
 800625e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006262:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006266:	ee17 3a90 	vmov	r3, s15
 800626a:	b29b      	uxth	r3, r3
 800626c:	843b      	strh	r3, [r7, #32]
	  sd_paket[57] = voltage_uint16_uint8_donusturucu.array[0]; // High byte
 800626e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006272:	4b17      	ldr	r3, [pc, #92]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006274:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
	  sd_paket[58] = voltage_uint16_uint8_donusturucu.array[1]; // Low byte
 8006278:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800627c:	4b14      	ldr	r3, [pc, #80]	@ (80062d0 <addDataPacketSD+0x2e4>)
 800627e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

	  //NEM
	  sd_paket[59] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	edd3 7a07 	vldr	s15, [r3, #28]
 8006288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800628c:	edc7 7a00 	vstr	s15, [r7]
 8006290:	783b      	ldrb	r3, [r7, #0]
 8006292:	b2da      	uxtb	r2, r3
 8006294:	4b0e      	ldr	r3, [pc, #56]	@ (80062d0 <addDataPacketSD+0x2e4>)
 8006296:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
	  sd_paket[60] = flight_algorithm_get_durum_verisi(); // Durum bilgisi = Iki parasut de tetiklenmedi
 800629a:	f7fd f933 	bl	8003504 <flight_algorithm_get_durum_verisi>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	4b0b      	ldr	r3, [pc, #44]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c


	  sd_paket[61] = check_sum_hesapla_normal(61); // Check_sum = check_sum_hesapla();
 80062a8:	203d      	movs	r0, #61	@ 0x3d
 80062aa:	f7ff fd63 	bl	8005d74 <check_sum_hesapla_normal>
 80062ae:	4603      	mov	r3, r0
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b07      	ldr	r3, [pc, #28]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	  sd_paket[62] = 0x0D; // Sabit
 80062b8:	4b05      	ldr	r3, [pc, #20]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80062ba:	220d      	movs	r2, #13
 80062bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
	  sd_paket[63] = 0x0A;
 80062c0:	4b03      	ldr	r3, [pc, #12]	@ (80062d0 <addDataPacketSD+0x2e4>)
 80062c2:	220a      	movs	r2, #10
 80062c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
}
 80062c8:	bf00      	nop
 80062ca:	3760      	adds	r7, #96	@ 0x60
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20001e48 	.word	0x20001e48

080062d4 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08c      	sub	sp, #48	@ 0x30
 80062d8:	af00      	add	r7, sp, #0
 80062da:	ed87 0a03 	vstr	s0, [r7, #12]
 80062de:	edc7 0a02 	vstr	s1, [r7, #8]
 80062e2:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80062e6:	4bd5      	ldr	r3, [pc, #852]	@ (800663c <UpdateMahonyGains+0x368>)
 80062e8:	ed93 7a00 	vldr	s14, [r3]
 80062ec:	4bd3      	ldr	r3, [pc, #844]	@ (800663c <UpdateMahonyGains+0x368>)
 80062ee:	edd3 7a00 	vldr	s15, [r3]
 80062f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062f6:	4bd1      	ldr	r3, [pc, #836]	@ (800663c <UpdateMahonyGains+0x368>)
 80062f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80062fc:	4bcf      	ldr	r3, [pc, #828]	@ (800663c <UpdateMahonyGains+0x368>)
 80062fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8006302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800630a:	4bcc      	ldr	r3, [pc, #816]	@ (800663c <UpdateMahonyGains+0x368>)
 800630c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006310:	4bca      	ldr	r3, [pc, #808]	@ (800663c <UpdateMahonyGains+0x368>)
 8006312:	edd3 7a02 	vldr	s15, [r3, #8]
 8006316:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800631a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800631e:	4bc7      	ldr	r3, [pc, #796]	@ (800663c <UpdateMahonyGains+0x368>)
 8006320:	edd3 6a03 	vldr	s13, [r3, #12]
 8006324:	4bc5      	ldr	r3, [pc, #788]	@ (800663c <UpdateMahonyGains+0x368>)
 8006326:	edd3 7a03 	vldr	s15, [r3, #12]
 800632a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800632e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006332:	eeb0 0a67 	vmov.f32	s0, s15
 8006336:	f012 fbb7 	bl	8018aa8 <sqrtf>
 800633a:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 800633e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006342:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800634a:	f000 8172 	beq.w	8006632 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 800634e:	4bbb      	ldr	r3, [pc, #748]	@ (800663c <UpdateMahonyGains+0x368>)
 8006350:	edd3 6a00 	vldr	s13, [r3]
 8006354:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006358:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800635c:	4bb7      	ldr	r3, [pc, #732]	@ (800663c <UpdateMahonyGains+0x368>)
 800635e:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8006362:	4bb6      	ldr	r3, [pc, #728]	@ (800663c <UpdateMahonyGains+0x368>)
 8006364:	edd3 6a01 	vldr	s13, [r3, #4]
 8006368:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800636c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006370:	4bb2      	ldr	r3, [pc, #712]	@ (800663c <UpdateMahonyGains+0x368>)
 8006372:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 8006376:	4bb1      	ldr	r3, [pc, #708]	@ (800663c <UpdateMahonyGains+0x368>)
 8006378:	edd3 6a02 	vldr	s13, [r3, #8]
 800637c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006384:	4bad      	ldr	r3, [pc, #692]	@ (800663c <UpdateMahonyGains+0x368>)
 8006386:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 800638a:	4bac      	ldr	r3, [pc, #688]	@ (800663c <UpdateMahonyGains+0x368>)
 800638c:	edd3 6a03 	vldr	s13, [r3, #12]
 8006390:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8006394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006398:	4ba8      	ldr	r3, [pc, #672]	@ (800663c <UpdateMahonyGains+0x368>)
 800639a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 800639e:	4ba7      	ldr	r3, [pc, #668]	@ (800663c <UpdateMahonyGains+0x368>)
 80063a0:	ed93 7a01 	vldr	s14, [r3, #4]
 80063a4:	4ba5      	ldr	r3, [pc, #660]	@ (800663c <UpdateMahonyGains+0x368>)
 80063a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80063aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063ae:	4ba3      	ldr	r3, [pc, #652]	@ (800663c <UpdateMahonyGains+0x368>)
 80063b0:	edd3 6a00 	vldr	s13, [r3]
 80063b4:	4ba1      	ldr	r3, [pc, #644]	@ (800663c <UpdateMahonyGains+0x368>)
 80063b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80063ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 80063ca:	4b9c      	ldr	r3, [pc, #624]	@ (800663c <UpdateMahonyGains+0x368>)
 80063cc:	ed93 7a00 	vldr	s14, [r3]
 80063d0:	4b9a      	ldr	r3, [pc, #616]	@ (800663c <UpdateMahonyGains+0x368>)
 80063d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80063d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063da:	4b98      	ldr	r3, [pc, #608]	@ (800663c <UpdateMahonyGains+0x368>)
 80063dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80063e0:	4b96      	ldr	r3, [pc, #600]	@ (800663c <UpdateMahonyGains+0x368>)
 80063e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80063e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063f2:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 80063f6:	4b91      	ldr	r3, [pc, #580]	@ (800663c <UpdateMahonyGains+0x368>)
 80063f8:	ed93 7a00 	vldr	s14, [r3]
 80063fc:	4b8f      	ldr	r3, [pc, #572]	@ (800663c <UpdateMahonyGains+0x368>)
 80063fe:	edd3 7a00 	vldr	s15, [r3]
 8006402:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006406:	4b8d      	ldr	r3, [pc, #564]	@ (800663c <UpdateMahonyGains+0x368>)
 8006408:	edd3 6a01 	vldr	s13, [r3, #4]
 800640c:	4b8b      	ldr	r3, [pc, #556]	@ (800663c <UpdateMahonyGains+0x368>)
 800640e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006416:	ee37 7a67 	vsub.f32	s14, s14, s15
 800641a:	4b88      	ldr	r3, [pc, #544]	@ (800663c <UpdateMahonyGains+0x368>)
 800641c:	edd3 6a02 	vldr	s13, [r3, #8]
 8006420:	4b86      	ldr	r3, [pc, #536]	@ (800663c <UpdateMahonyGains+0x368>)
 8006422:	edd3 7a02 	vldr	s15, [r3, #8]
 8006426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800642a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800642e:	4b83      	ldr	r3, [pc, #524]	@ (800663c <UpdateMahonyGains+0x368>)
 8006430:	edd3 6a03 	vldr	s13, [r3, #12]
 8006434:	4b81      	ldr	r3, [pc, #516]	@ (800663c <UpdateMahonyGains+0x368>)
 8006436:	edd3 7a03 	vldr	s15, [r3, #12]
 800643a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800643e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006442:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8006446:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800644a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800644e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006452:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800645a:	edd7 7a07 	vldr	s15, [r7, #28]
 800645e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006462:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006466:	eeb0 0a67 	vmov.f32	s0, s15
 800646a:	f000 ff39 	bl	80072e0 <invSqrt>
 800646e:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8006472:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006476:	edd7 7a06 	vldr	s15, [r7, #24]
 800647a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8006482:	ed97 7a08 	vldr	s14, [r7, #32]
 8006486:	edd7 7a06 	vldr	s15, [r7, #24]
 800648a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648e:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8006492:	ed97 7a07 	vldr	s14, [r7, #28]
 8006496:	edd7 7a06 	vldr	s15, [r7, #24]
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 80064a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80064a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80064aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80064ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80064ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80064be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064c2:	eeb0 0a67 	vmov.f32	s0, s15
 80064c6:	f000 ff0b 	bl	80072e0 <invSqrt>
 80064ca:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 80064ce:	ed97 7a03 	vldr	s14, [r7, #12]
 80064d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80064d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064da:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 80064de:	ed97 7a02 	vldr	s14, [r7, #8]
 80064e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80064e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ea:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 80064ee:	ed97 7a01 	vldr	s14, [r7, #4]
 80064f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80064f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fa:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 80064fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8006502:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800650a:	edd7 6a02 	vldr	s13, [r7, #8]
 800650e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006516:	ee37 7a27 	vadd.f32	s14, s14, s15
 800651a:	edd7 6a01 	vldr	s13, [r7, #4]
 800651e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 800652e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006532:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006536:	eef4 7ac7 	vcmpe.f32	s15, s14
 800653a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653e:	dd02      	ble.n	8006546 <UpdateMahonyGains+0x272>
 8006540:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006544:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8006546:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800654a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800654e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006556:	d501      	bpl.n	800655c <UpdateMahonyGains+0x288>
 8006558:	4b39      	ldr	r3, [pc, #228]	@ (8006640 <UpdateMahonyGains+0x36c>)
 800655a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 800655c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8006560:	f012 fa76 	bl	8018a50 <acosf>
 8006564:	eef0 7a40 	vmov.f32	s15, s0
 8006568:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006644 <UpdateMahonyGains+0x370>
 800656c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006570:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8006574:	edd7 7a04 	vldr	s15, [r7, #16]
 8006578:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800657c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006584:	dd0a      	ble.n	800659c <UpdateMahonyGains+0x2c8>
        Gain = 1;
 8006586:	4b30      	ldr	r3, [pc, #192]	@ (8006648 <UpdateMahonyGains+0x374>)
 8006588:	2201      	movs	r2, #1
 800658a:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 800658c:	4b2f      	ldr	r3, [pc, #188]	@ (800664c <UpdateMahonyGains+0x378>)
 800658e:	4a30      	ldr	r2, [pc, #192]	@ (8006650 <UpdateMahonyGains+0x37c>)
 8006590:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8006592:	4b30      	ldr	r3, [pc, #192]	@ (8006654 <UpdateMahonyGains+0x380>)
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	601a      	str	r2, [r3, #0]
 800659a:	e01d      	b.n	80065d8 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 800659c:	edd7 7a04 	vldr	s15, [r7, #16]
 80065a0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80065a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ac:	dd0a      	ble.n	80065c4 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 80065ae:	4b26      	ldr	r3, [pc, #152]	@ (8006648 <UpdateMahonyGains+0x374>)
 80065b0:	2202      	movs	r2, #2
 80065b2:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 80065b4:	4b25      	ldr	r3, [pc, #148]	@ (800664c <UpdateMahonyGains+0x378>)
 80065b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80065ba:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 80065bc:	4b25      	ldr	r3, [pc, #148]	@ (8006654 <UpdateMahonyGains+0x380>)
 80065be:	4a26      	ldr	r2, [pc, #152]	@ (8006658 <UpdateMahonyGains+0x384>)
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	e009      	b.n	80065d8 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 80065c4:	4b20      	ldr	r3, [pc, #128]	@ (8006648 <UpdateMahonyGains+0x374>)
 80065c6:	2203      	movs	r2, #3
 80065c8:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 80065ca:	4b20      	ldr	r3, [pc, #128]	@ (800664c <UpdateMahonyGains+0x378>)
 80065cc:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80065d0:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 80065d2:	4b20      	ldr	r3, [pc, #128]	@ (8006654 <UpdateMahonyGains+0x380>)
 80065d4:	4a21      	ldr	r2, [pc, #132]	@ (800665c <UpdateMahonyGains+0x388>)
 80065d6:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 80065d8:	4b1c      	ldr	r3, [pc, #112]	@ (800664c <UpdateMahonyGains+0x378>)
 80065da:	edd3 7a00 	vldr	s15, [r3]
 80065de:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80065e2:	eeb0 0a67 	vmov.f32	s0, s15
 80065e6:	f012 faf0 	bl	8018bca <fminf>
 80065ea:	eef0 7a40 	vmov.f32	s15, s0
 80065ee:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006660 <UpdateMahonyGains+0x38c>
 80065f2:	eeb0 0a67 	vmov.f32	s0, s15
 80065f6:	f012 facb 	bl	8018b90 <fmaxf>
 80065fa:	eef0 7a40 	vmov.f32	s15, s0
 80065fe:	4b13      	ldr	r3, [pc, #76]	@ (800664c <UpdateMahonyGains+0x378>)
 8006600:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8006604:	4b13      	ldr	r3, [pc, #76]	@ (8006654 <UpdateMahonyGains+0x380>)
 8006606:	edd3 7a00 	vldr	s15, [r3]
 800660a:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8006664 <UpdateMahonyGains+0x390>
 800660e:	eeb0 0a67 	vmov.f32	s0, s15
 8006612:	f012 fada 	bl	8018bca <fminf>
 8006616:	eef0 7a40 	vmov.f32	s15, s0
 800661a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8006668 <UpdateMahonyGains+0x394>
 800661e:	eeb0 0a67 	vmov.f32	s0, s15
 8006622:	f012 fab5 	bl	8018b90 <fmaxf>
 8006626:	eef0 7a40 	vmov.f32	s15, s0
 800662a:	4b0a      	ldr	r3, [pc, #40]	@ (8006654 <UpdateMahonyGains+0x380>)
 800662c:	edc3 7a00 	vstr	s15, [r3]
 8006630:	e000      	b.n	8006634 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 8006632:	bf00      	nop
}
 8006634:	3730      	adds	r7, #48	@ 0x30
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000020 	.word	0x20000020
 8006640:	bf800000 	.word	0xbf800000
 8006644:	42652ee2 	.word	0x42652ee2
 8006648:	20001e94 	.word	0x20001e94
 800664c:	20000030 	.word	0x20000030
 8006650:	3e4ccccd 	.word	0x3e4ccccd
 8006654:	20000034 	.word	0x20000034
 8006658:	3c23d70a 	.word	0x3c23d70a
 800665c:	3d4ccccd 	.word	0x3d4ccccd
 8006660:	3dcccccd 	.word	0x3dcccccd
 8006664:	3d4ccccd 	.word	0x3d4ccccd
 8006668:	00000000 	.word	0x00000000

0800666c <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	@ 0x28
 8006670:	af00      	add	r7, sp, #0
 8006672:	ed87 0a07 	vstr	s0, [r7, #28]
 8006676:	edc7 0a06 	vstr	s1, [r7, #24]
 800667a:	ed87 1a05 	vstr	s2, [r7, #20]
 800667e:	edc7 1a04 	vstr	s3, [r7, #16]
 8006682:	ed87 2a03 	vstr	s4, [r7, #12]
 8006686:	edc7 2a02 	vstr	s5, [r7, #8]
 800668a:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 800668e:	4b60      	ldr	r3, [pc, #384]	@ (8006810 <Orientation_Update+0x1a4>)
 8006690:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8006692:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006696:	edd7 7a04 	vldr	s15, [r7, #16]
 800669a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800669e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80066a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80066aa:	4b5a      	ldr	r3, [pc, #360]	@ (8006814 <Orientation_Update+0x1a8>)
 80066ac:	edd3 7a00 	vldr	s15, [r3]
 80066b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b8:	4b56      	ldr	r3, [pc, #344]	@ (8006814 <Orientation_Update+0x1a8>)
 80066ba:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 80066be:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80066c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80066c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80066d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80066d6:	4b50      	ldr	r3, [pc, #320]	@ (8006818 <Orientation_Update+0x1ac>)
 80066d8:	edd3 7a00 	vldr	s15, [r3]
 80066dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066e4:	4b4c      	ldr	r3, [pc, #304]	@ (8006818 <Orientation_Update+0x1ac>)
 80066e6:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 80066ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80066ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80066f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80066fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006702:	4b46      	ldr	r3, [pc, #280]	@ (800681c <Orientation_Update+0x1b0>)
 8006704:	edd3 7a00 	vldr	s15, [r3]
 8006708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800670c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006710:	4b42      	ldr	r3, [pc, #264]	@ (800681c <Orientation_Update+0x1b0>)
 8006712:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8006716:	4b3f      	ldr	r3, [pc, #252]	@ (8006814 <Orientation_Update+0x1a8>)
 8006718:	edd3 7a00 	vldr	s15, [r3]
 800671c:	4b3e      	ldr	r3, [pc, #248]	@ (8006818 <Orientation_Update+0x1ac>)
 800671e:	ed93 7a00 	vldr	s14, [r3]
 8006722:	4b3e      	ldr	r3, [pc, #248]	@ (800681c <Orientation_Update+0x1b0>)
 8006724:	edd3 6a00 	vldr	s13, [r3]
 8006728:	eeb0 1a66 	vmov.f32	s2, s13
 800672c:	eef0 0a47 	vmov.f32	s1, s14
 8006730:	eeb0 0a67 	vmov.f32	s0, s15
 8006734:	f7ff fdce 	bl	80062d4 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8006738:	4b36      	ldr	r3, [pc, #216]	@ (8006814 <Orientation_Update+0x1a8>)
 800673a:	ed93 7a00 	vldr	s14, [r3]
 800673e:	4b35      	ldr	r3, [pc, #212]	@ (8006814 <Orientation_Update+0x1a8>)
 8006740:	edd3 7a00 	vldr	s15, [r3]
 8006744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006748:	4b33      	ldr	r3, [pc, #204]	@ (8006818 <Orientation_Update+0x1ac>)
 800674a:	edd3 6a00 	vldr	s13, [r3]
 800674e:	4b32      	ldr	r3, [pc, #200]	@ (8006818 <Orientation_Update+0x1ac>)
 8006750:	edd3 7a00 	vldr	s15, [r3]
 8006754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800675c:	4b2f      	ldr	r3, [pc, #188]	@ (800681c <Orientation_Update+0x1b0>)
 800675e:	edd3 6a00 	vldr	s13, [r3]
 8006762:	4b2e      	ldr	r3, [pc, #184]	@ (800681c <Orientation_Update+0x1b0>)
 8006764:	edd3 7a00 	vldr	s15, [r3]
 8006768:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800676c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006770:	eeb0 0a67 	vmov.f32	s0, s15
 8006774:	f012 f998 	bl	8018aa8 <sqrtf>
 8006778:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 800677c:	4b28      	ldr	r3, [pc, #160]	@ (8006820 <Orientation_Update+0x1b4>)
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d00c      	beq.n	800679e <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8006784:	edd7 7a08 	vldr	s15, [r7, #32]
 8006788:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006824 <Orientation_Update+0x1b8>
 800678c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006794:	d50f      	bpl.n	80067b6 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8006796:	4b22      	ldr	r3, [pc, #136]	@ (8006820 <Orientation_Update+0x1b4>)
 8006798:	2200      	movs	r2, #0
 800679a:	701a      	strb	r2, [r3, #0]
 800679c:	e00b      	b.n	80067b6 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 800679e:	edd7 7a08 	vldr	s15, [r7, #32]
 80067a2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006828 <Orientation_Update+0x1bc>
 80067a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80067aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ae:	dd02      	ble.n	80067b6 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 80067b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006820 <Orientation_Update+0x1b4>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 80067b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006820 <Orientation_Update+0x1b4>)
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 80067be:	edd7 1a01 	vldr	s3, [r7, #4]
 80067c2:	ed97 1a05 	vldr	s2, [r7, #20]
 80067c6:	edd7 0a06 	vldr	s1, [r7, #24]
 80067ca:	ed97 0a07 	vldr	s0, [r7, #28]
 80067ce:	f000 f82d 	bl	800682c <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 80067d2:	e018      	b.n	8006806 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 80067d4:	4b0f      	ldr	r3, [pc, #60]	@ (8006814 <Orientation_Update+0x1a8>)
 80067d6:	edd3 7a00 	vldr	s15, [r3]
 80067da:	4b0f      	ldr	r3, [pc, #60]	@ (8006818 <Orientation_Update+0x1ac>)
 80067dc:	ed93 7a00 	vldr	s14, [r3]
 80067e0:	4b0e      	ldr	r3, [pc, #56]	@ (800681c <Orientation_Update+0x1b0>)
 80067e2:	edd3 6a00 	vldr	s13, [r3]
 80067e6:	ed97 3a01 	vldr	s6, [r7, #4]
 80067ea:	eef0 2a66 	vmov.f32	s5, s13
 80067ee:	eeb0 2a47 	vmov.f32	s4, s14
 80067f2:	eef0 1a67 	vmov.f32	s3, s15
 80067f6:	ed97 1a05 	vldr	s2, [r7, #20]
 80067fa:	edd7 0a06 	vldr	s1, [r7, #24]
 80067fe:	ed97 0a07 	vldr	s0, [r7, #28]
 8006802:	f000 f93b 	bl	8006a7c <MahonyAHRSupdateIMU>
}
 8006806:	bf00      	nop
 8006808:	3728      	adds	r7, #40	@ 0x28
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	3e99999a 	.word	0x3e99999a
 8006814:	20001e98 	.word	0x20001e98
 8006818:	20001e9c 	.word	0x20001e9c
 800681c:	20001ea0 	.word	0x20001ea0
 8006820:	20001e95 	.word	0x20001e95
 8006824:	41d3d2db 	.word	0x41d3d2db
 8006828:	420172a2 	.word	0x420172a2

0800682c <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 800682c:	b580      	push	{r7, lr}
 800682e:	b08a      	sub	sp, #40	@ 0x28
 8006830:	af00      	add	r7, sp, #0
 8006832:	ed87 0a03 	vstr	s0, [r7, #12]
 8006836:	edc7 0a02 	vstr	s1, [r7, #8]
 800683a:	ed87 1a01 	vstr	s2, [r7, #4]
 800683e:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8006842:	4b8c      	ldr	r3, [pc, #560]	@ (8006a74 <updateQuaternion+0x248>)
 8006844:	edd3 7a01 	vldr	s15, [r3, #4]
 8006848:	eeb1 7a67 	vneg.f32	s14, s15
 800684c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006850:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006854:	4b87      	ldr	r3, [pc, #540]	@ (8006a74 <updateQuaternion+0x248>)
 8006856:	edd3 6a02 	vldr	s13, [r3, #8]
 800685a:	edd7 7a02 	vldr	s15, [r7, #8]
 800685e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006862:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006866:	4b83      	ldr	r3, [pc, #524]	@ (8006a74 <updateQuaternion+0x248>)
 8006868:	edd3 6a03 	vldr	s13, [r3, #12]
 800686c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006870:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006874:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006878:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800687c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006880:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8006884:	4b7b      	ldr	r3, [pc, #492]	@ (8006a74 <updateQuaternion+0x248>)
 8006886:	ed93 7a00 	vldr	s14, [r3]
 800688a:	edd7 7a03 	vldr	s15, [r7, #12]
 800688e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006892:	4b78      	ldr	r3, [pc, #480]	@ (8006a74 <updateQuaternion+0x248>)
 8006894:	edd3 6a02 	vldr	s13, [r3, #8]
 8006898:	edd7 7a01 	vldr	s15, [r7, #4]
 800689c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068a4:	4b73      	ldr	r3, [pc, #460]	@ (8006a74 <updateQuaternion+0x248>)
 80068a6:	edd3 6a03 	vldr	s13, [r3, #12]
 80068aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80068ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068be:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 80068c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006a74 <updateQuaternion+0x248>)
 80068c4:	ed93 7a00 	vldr	s14, [r3]
 80068c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80068cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068d0:	4b68      	ldr	r3, [pc, #416]	@ (8006a74 <updateQuaternion+0x248>)
 80068d2:	edd3 6a01 	vldr	s13, [r3, #4]
 80068d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80068da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80068e2:	4b64      	ldr	r3, [pc, #400]	@ (8006a74 <updateQuaternion+0x248>)
 80068e4:	edd3 6a03 	vldr	s13, [r3, #12]
 80068e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80068ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068f4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068fc:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8006900:	4b5c      	ldr	r3, [pc, #368]	@ (8006a74 <updateQuaternion+0x248>)
 8006902:	ed93 7a00 	vldr	s14, [r3]
 8006906:	edd7 7a01 	vldr	s15, [r7, #4]
 800690a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800690e:	4b59      	ldr	r3, [pc, #356]	@ (8006a74 <updateQuaternion+0x248>)
 8006910:	edd3 6a01 	vldr	s13, [r3, #4]
 8006914:	edd7 7a02 	vldr	s15, [r7, #8]
 8006918:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800691c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006920:	4b54      	ldr	r3, [pc, #336]	@ (8006a74 <updateQuaternion+0x248>)
 8006922:	edd3 6a02 	vldr	s13, [r3, #8]
 8006926:	edd7 7a03 	vldr	s15, [r7, #12]
 800692a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800692e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006932:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800693a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 800693e:	4b4d      	ldr	r3, [pc, #308]	@ (8006a74 <updateQuaternion+0x248>)
 8006940:	ed93 7a00 	vldr	s14, [r3]
 8006944:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006948:	edd7 7a00 	vldr	s15, [r7]
 800694c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006954:	4b47      	ldr	r3, [pc, #284]	@ (8006a74 <updateQuaternion+0x248>)
 8006956:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 800695a:	4b46      	ldr	r3, [pc, #280]	@ (8006a74 <updateQuaternion+0x248>)
 800695c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006960:	edd7 6a08 	vldr	s13, [r7, #32]
 8006964:	edd7 7a00 	vldr	s15, [r7]
 8006968:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800696c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006970:	4b40      	ldr	r3, [pc, #256]	@ (8006a74 <updateQuaternion+0x248>)
 8006972:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8006976:	4b3f      	ldr	r3, [pc, #252]	@ (8006a74 <updateQuaternion+0x248>)
 8006978:	ed93 7a02 	vldr	s14, [r3, #8]
 800697c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006980:	edd7 7a00 	vldr	s15, [r7]
 8006984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800698c:	4b39      	ldr	r3, [pc, #228]	@ (8006a74 <updateQuaternion+0x248>)
 800698e:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8006992:	4b38      	ldr	r3, [pc, #224]	@ (8006a74 <updateQuaternion+0x248>)
 8006994:	ed93 7a03 	vldr	s14, [r3, #12]
 8006998:	edd7 6a06 	vldr	s13, [r7, #24]
 800699c:	edd7 7a00 	vldr	s15, [r7]
 80069a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069a8:	4b32      	ldr	r3, [pc, #200]	@ (8006a74 <updateQuaternion+0x248>)
 80069aa:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80069ae:	4b31      	ldr	r3, [pc, #196]	@ (8006a74 <updateQuaternion+0x248>)
 80069b0:	ed93 7a00 	vldr	s14, [r3]
 80069b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006a74 <updateQuaternion+0x248>)
 80069b6:	edd3 7a00 	vldr	s15, [r3]
 80069ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069be:	4b2d      	ldr	r3, [pc, #180]	@ (8006a74 <updateQuaternion+0x248>)
 80069c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80069c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a74 <updateQuaternion+0x248>)
 80069c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80069ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069d2:	4b28      	ldr	r3, [pc, #160]	@ (8006a74 <updateQuaternion+0x248>)
 80069d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80069d8:	4b26      	ldr	r3, [pc, #152]	@ (8006a74 <updateQuaternion+0x248>)
 80069da:	edd3 7a02 	vldr	s15, [r3, #8]
 80069de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069e6:	4b23      	ldr	r3, [pc, #140]	@ (8006a74 <updateQuaternion+0x248>)
 80069e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80069ec:	4b21      	ldr	r3, [pc, #132]	@ (8006a74 <updateQuaternion+0x248>)
 80069ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80069f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069fa:	eeb0 0a67 	vmov.f32	s0, s15
 80069fe:	f012 f853 	bl	8018aa8 <sqrtf>
 8006a02:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8006a06:	edd7 7a05 	vldr	s15, [r7, #20]
 8006a0a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006a78 <updateQuaternion+0x24c>
 8006a0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a16:	dc00      	bgt.n	8006a1a <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8006a18:	e027      	b.n	8006a6a <updateQuaternion+0x23e>
        q[0] /= norm;
 8006a1a:	4b16      	ldr	r3, [pc, #88]	@ (8006a74 <updateQuaternion+0x248>)
 8006a1c:	edd3 6a00 	vldr	s13, [r3]
 8006a20:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a28:	4b12      	ldr	r3, [pc, #72]	@ (8006a74 <updateQuaternion+0x248>)
 8006a2a:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8006a2e:	4b11      	ldr	r3, [pc, #68]	@ (8006a74 <updateQuaternion+0x248>)
 8006a30:	edd3 6a01 	vldr	s13, [r3, #4]
 8006a34:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a74 <updateQuaternion+0x248>)
 8006a3e:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8006a42:	4b0c      	ldr	r3, [pc, #48]	@ (8006a74 <updateQuaternion+0x248>)
 8006a44:	edd3 6a02 	vldr	s13, [r3, #8]
 8006a48:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a50:	4b08      	ldr	r3, [pc, #32]	@ (8006a74 <updateQuaternion+0x248>)
 8006a52:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8006a56:	4b07      	ldr	r3, [pc, #28]	@ (8006a74 <updateQuaternion+0x248>)
 8006a58:	edd3 6a03 	vldr	s13, [r3, #12]
 8006a5c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a64:	4b03      	ldr	r3, [pc, #12]	@ (8006a74 <updateQuaternion+0x248>)
 8006a66:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006a6a:	bf00      	nop
 8006a6c:	3728      	adds	r7, #40	@ 0x28
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
 8006a72:	bf00      	nop
 8006a74:	20000020 	.word	0x20000020
 8006a78:	358637bd 	.word	0x358637bd

08006a7c <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b092      	sub	sp, #72	@ 0x48
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	ed87 0a07 	vstr	s0, [r7, #28]
 8006a86:	edc7 0a06 	vstr	s1, [r7, #24]
 8006a8a:	ed87 1a05 	vstr	s2, [r7, #20]
 8006a8e:	edc7 1a04 	vstr	s3, [r7, #16]
 8006a92:	ed87 2a03 	vstr	s4, [r7, #12]
 8006a96:	edc7 2a02 	vstr	s5, [r7, #8]
 8006a9a:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8006a9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006aa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aaa:	d10e      	bne.n	8006aca <MahonyAHRSupdateIMU+0x4e>
 8006aac:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ab0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab8:	d107      	bne.n	8006aca <MahonyAHRSupdateIMU+0x4e>
 8006aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8006abe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac6:	f000 8138 	beq.w	8006d3a <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8006aca:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ace:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006ad2:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ad6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ada:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ade:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ae2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aea:	eeb0 0a67 	vmov.f32	s0, s15
 8006aee:	f000 fbf7 	bl	80072e0 <invSqrt>
 8006af2:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8006af6:	ed97 7a04 	vldr	s14, [r7, #16]
 8006afa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b02:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8006b06:	ed97 7a03 	vldr	s14, [r7, #12]
 8006b0a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b12:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8006b16:	ed97 7a02 	vldr	s14, [r7, #8]
 8006b1a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b22:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8006b26:	4b66      	ldr	r3, [pc, #408]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b28:	ed93 7a01 	vldr	s14, [r3, #4]
 8006b2c:	4b64      	ldr	r3, [pc, #400]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b36:	4b62      	ldr	r3, [pc, #392]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b38:	edd3 6a00 	vldr	s13, [r3]
 8006b3c:	4b60      	ldr	r3, [pc, #384]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b4a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8006b4e:	4b5c      	ldr	r3, [pc, #368]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b50:	ed93 7a00 	vldr	s14, [r3]
 8006b54:	4b5a      	ldr	r3, [pc, #360]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b5e:	4b58      	ldr	r3, [pc, #352]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b60:	edd3 6a02 	vldr	s13, [r3, #8]
 8006b64:	4b56      	ldr	r3, [pc, #344]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b66:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b72:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8006b76:	4b52      	ldr	r3, [pc, #328]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b78:	ed93 7a00 	vldr	s14, [r3]
 8006b7c:	4b50      	ldr	r3, [pc, #320]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b7e:	edd3 7a00 	vldr	s15, [r3]
 8006b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006b8a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006b8e:	4b4c      	ldr	r3, [pc, #304]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b90:	edd3 6a03 	vldr	s13, [r3, #12]
 8006b94:	4b4a      	ldr	r3, [pc, #296]	@ (8006cc0 <MahonyAHRSupdateIMU+0x244>)
 8006b96:	edd3 7a03 	vldr	s15, [r3, #12]
 8006b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ba2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8006ba6:	ed97 7a03 	vldr	s14, [r7, #12]
 8006baa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bb2:	edd7 6a02 	vldr	s13, [r7, #8]
 8006bb6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006bba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bc2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8006bc6:	ed97 7a02 	vldr	s14, [r7, #8]
 8006bca:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bd2:	edd7 6a04 	vldr	s13, [r7, #16]
 8006bd6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8006bda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006be2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8006be6:	ed97 7a04 	vldr	s14, [r7, #16]
 8006bea:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bf2:	edd7 6a03 	vldr	s13, [r7, #12]
 8006bf6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c02:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8006c06:	4b2f      	ldr	r3, [pc, #188]	@ (8006cc4 <MahonyAHRSupdateIMU+0x248>)
 8006c08:	edd3 7a00 	vldr	s15, [r3]
 8006c0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c14:	dd5e      	ble.n	8006cd4 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8006c16:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc4 <MahonyAHRSupdateIMU+0x248>)
 8006c18:	ed93 7a00 	vldr	s14, [r3]
 8006c1c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c24:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c2c:	4b26      	ldr	r3, [pc, #152]	@ (8006cc8 <MahonyAHRSupdateIMU+0x24c>)
 8006c2e:	edd3 7a00 	vldr	s15, [r3]
 8006c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c36:	4b24      	ldr	r3, [pc, #144]	@ (8006cc8 <MahonyAHRSupdateIMU+0x24c>)
 8006c38:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8006c3c:	4b21      	ldr	r3, [pc, #132]	@ (8006cc4 <MahonyAHRSupdateIMU+0x248>)
 8006c3e:	ed93 7a00 	vldr	s14, [r3]
 8006c42:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c52:	4b1e      	ldr	r3, [pc, #120]	@ (8006ccc <MahonyAHRSupdateIMU+0x250>)
 8006c54:	edd3 7a00 	vldr	s15, [r3]
 8006c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8006ccc <MahonyAHRSupdateIMU+0x250>)
 8006c5e:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8006c62:	4b18      	ldr	r3, [pc, #96]	@ (8006cc4 <MahonyAHRSupdateIMU+0x248>)
 8006c64:	ed93 7a00 	vldr	s14, [r3]
 8006c68:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c70:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c78:	4b15      	ldr	r3, [pc, #84]	@ (8006cd0 <MahonyAHRSupdateIMU+0x254>)
 8006c7a:	edd3 7a00 	vldr	s15, [r3]
 8006c7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c82:	4b13      	ldr	r3, [pc, #76]	@ (8006cd0 <MahonyAHRSupdateIMU+0x254>)
 8006c84:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8006c88:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc8 <MahonyAHRSupdateIMU+0x24c>)
 8006c8a:	edd3 7a00 	vldr	s15, [r3]
 8006c8e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8006c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006ccc <MahonyAHRSupdateIMU+0x250>)
 8006c9c:	edd3 7a00 	vldr	s15, [r3]
 8006ca0:	ed97 7a06 	vldr	s14, [r7, #24]
 8006ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ca8:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8006cac:	4b08      	ldr	r3, [pc, #32]	@ (8006cd0 <MahonyAHRSupdateIMU+0x254>)
 8006cae:	edd3 7a00 	vldr	s15, [r3]
 8006cb2:	ed97 7a05 	vldr	s14, [r7, #20]
 8006cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cba:	edc7 7a05 	vstr	s15, [r7, #20]
 8006cbe:	e015      	b.n	8006cec <MahonyAHRSupdateIMU+0x270>
 8006cc0:	20000020 	.word	0x20000020
 8006cc4:	20000034 	.word	0x20000034
 8006cc8:	20001e88 	.word	0x20001e88
 8006ccc:	20001e8c 	.word	0x20001e8c
 8006cd0:	20001e90 	.word	0x20001e90
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8006cd4:	4b9a      	ldr	r3, [pc, #616]	@ (8006f40 <MahonyAHRSupdateIMU+0x4c4>)
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8006cdc:	4b99      	ldr	r3, [pc, #612]	@ (8006f44 <MahonyAHRSupdateIMU+0x4c8>)
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8006ce4:	4b98      	ldr	r3, [pc, #608]	@ (8006f48 <MahonyAHRSupdateIMU+0x4cc>)
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8006cec:	4b97      	ldr	r3, [pc, #604]	@ (8006f4c <MahonyAHRSupdateIMU+0x4d0>)
 8006cee:	ed93 7a00 	vldr	s14, [r3]
 8006cf2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfa:	ed97 7a07 	vldr	s14, [r7, #28]
 8006cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d02:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8006d06:	4b91      	ldr	r3, [pc, #580]	@ (8006f4c <MahonyAHRSupdateIMU+0x4d0>)
 8006d08:	ed93 7a00 	vldr	s14, [r3]
 8006d0c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d14:	ed97 7a06 	vldr	s14, [r7, #24]
 8006d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d1c:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8006d20:	4b8a      	ldr	r3, [pc, #552]	@ (8006f4c <MahonyAHRSupdateIMU+0x4d0>)
 8006d22:	ed93 7a00 	vldr	s14, [r3]
 8006d26:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d36:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8006d3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d3e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d46:	ed97 7a07 	vldr	s14, [r7, #28]
 8006d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d4e:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8006d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8006d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d66:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8006d6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d6e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d76:	ed97 7a05 	vldr	s14, [r7, #20]
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8006d82:	4b73      	ldr	r3, [pc, #460]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8006d88:	4b71      	ldr	r3, [pc, #452]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8006d8e:	4b70      	ldr	r3, [pc, #448]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8006d94:	4b6e      	ldr	r3, [pc, #440]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006d96:	ed93 7a00 	vldr	s14, [r3]
 8006d9a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006d9e:	eef1 6a67 	vneg.f32	s13, s15
 8006da2:	edd7 7a07 	vldr	s15, [r7, #28]
 8006da6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006daa:	ed97 6a08 	vldr	s12, [r7, #32]
 8006dae:	edd7 7a06 	vldr	s15, [r7, #24]
 8006db2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006db6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006dba:	4b65      	ldr	r3, [pc, #404]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006dbc:	ed93 6a03 	vldr	s12, [r3, #12]
 8006dc0:	edd7 7a05 	vldr	s15, [r7, #20]
 8006dc4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006dc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd0:	4b5f      	ldr	r3, [pc, #380]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006dd2:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8006dd6:	4b5e      	ldr	r3, [pc, #376]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006dd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8006ddc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006de0:	edd7 7a07 	vldr	s15, [r7, #28]
 8006de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006de8:	ed97 6a08 	vldr	s12, [r7, #32]
 8006dec:	edd7 7a05 	vldr	s15, [r7, #20]
 8006df0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006df4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006df8:	4b55      	ldr	r3, [pc, #340]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006dfa:	ed93 6a03 	vldr	s12, [r3, #12]
 8006dfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e02:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e0e:	4b50      	ldr	r3, [pc, #320]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006e10:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8006e14:	4b4e      	ldr	r3, [pc, #312]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006e16:	ed93 7a02 	vldr	s14, [r3, #8]
 8006e1a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006e1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e22:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006e26:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006e2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e2e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006e36:	4b46      	ldr	r3, [pc, #280]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006e38:	ed93 6a03 	vldr	s12, [r3, #12]
 8006e3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006e40:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e4c:	4b40      	ldr	r3, [pc, #256]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006e4e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8006e52:	4b3f      	ldr	r3, [pc, #252]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006e54:	ed93 7a03 	vldr	s14, [r3, #12]
 8006e58:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006e5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e60:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006e64:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006e68:	edd7 7a06 	vldr	s15, [r7, #24]
 8006e6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006e74:	ed97 6a08 	vldr	s12, [r7, #32]
 8006e78:	edd7 7a07 	vldr	s15, [r7, #28]
 8006e7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006e80:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e88:	4b31      	ldr	r3, [pc, #196]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006e8a:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8006e8e:	4b30      	ldr	r3, [pc, #192]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006e90:	ed93 7a00 	vldr	s14, [r3]
 8006e94:	4b2e      	ldr	r3, [pc, #184]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006e96:	edd3 7a00 	vldr	s15, [r3]
 8006e9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006ea0:	edd3 6a01 	vldr	s13, [r3, #4]
 8006ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006ea6:	edd3 7a01 	vldr	s15, [r3, #4]
 8006eaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006eb2:	4b27      	ldr	r3, [pc, #156]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006eb4:	edd3 6a02 	vldr	s13, [r3, #8]
 8006eb8:	4b25      	ldr	r3, [pc, #148]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006eba:	edd3 7a02 	vldr	s15, [r3, #8]
 8006ebe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ec6:	4b22      	ldr	r3, [pc, #136]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006ec8:	edd3 6a03 	vldr	s13, [r3, #12]
 8006ecc:	4b20      	ldr	r3, [pc, #128]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006ece:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eda:	eeb0 0a67 	vmov.f32	s0, s15
 8006ede:	f000 f9ff 	bl	80072e0 <invSqrt>
 8006ee2:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8006ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006ee8:	ed93 7a00 	vldr	s14, [r3]
 8006eec:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef4:	4b16      	ldr	r3, [pc, #88]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006ef6:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8006efa:	4b15      	ldr	r3, [pc, #84]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006efc:	ed93 7a01 	vldr	s14, [r3, #4]
 8006f00:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f08:	4b11      	ldr	r3, [pc, #68]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006f0a:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8006f0e:	4b10      	ldr	r3, [pc, #64]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006f10:	ed93 7a02 	vldr	s14, [r3, #8]
 8006f14:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006f1e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8006f22:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006f24:	ed93 7a03 	vldr	s14, [r3, #12]
 8006f28:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f30:	4b07      	ldr	r3, [pc, #28]	@ (8006f50 <MahonyAHRSupdateIMU+0x4d4>)
 8006f32:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006f36:	bf00      	nop
 8006f38:	3748      	adds	r7, #72	@ 0x48
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20001e88 	.word	0x20001e88
 8006f44:	20001e8c 	.word	0x20001e8c
 8006f48:	20001e90 	.word	0x20001e90
 8006f4c:	20000030 	.word	0x20000030
 8006f50:	20000020 	.word	0x20000020

08006f54 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b086      	sub	sp, #24
 8006f58:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 8006f5a:	4b44      	ldr	r3, [pc, #272]	@ (800706c <quaternionToThetaZ+0x118>)
 8006f5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006f60:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006f64:	4b41      	ldr	r3, [pc, #260]	@ (800706c <quaternionToThetaZ+0x118>)
 8006f66:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800706c <quaternionToThetaZ+0x118>)
 8006f70:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f74:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006f78:	4b3c      	ldr	r3, [pc, #240]	@ (800706c <quaternionToThetaZ+0x118>)
 8006f7a:	edd3 7a00 	vldr	s15, [r3]
 8006f7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f86:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 8006f8a:	4b38      	ldr	r3, [pc, #224]	@ (800706c <quaternionToThetaZ+0x118>)
 8006f8c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006f90:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006f94:	4b35      	ldr	r3, [pc, #212]	@ (800706c <quaternionToThetaZ+0x118>)
 8006f96:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f9e:	4b33      	ldr	r3, [pc, #204]	@ (800706c <quaternionToThetaZ+0x118>)
 8006fa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006fa4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006fa8:	4b30      	ldr	r3, [pc, #192]	@ (800706c <quaternionToThetaZ+0x118>)
 8006faa:	edd3 7a00 	vldr	s15, [r3]
 8006fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fb6:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 8006fba:	4b2c      	ldr	r3, [pc, #176]	@ (800706c <quaternionToThetaZ+0x118>)
 8006fbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8006fc0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006fc4:	4b29      	ldr	r3, [pc, #164]	@ (800706c <quaternionToThetaZ+0x118>)
 8006fc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8006fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fd6:	4b25      	ldr	r3, [pc, #148]	@ (800706c <quaternionToThetaZ+0x118>)
 8006fd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8006fdc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006fe0:	4b22      	ldr	r3, [pc, #136]	@ (800706c <quaternionToThetaZ+0x118>)
 8006fe2:	edd3 7a02 	vldr	s15, [r3, #8]
 8006fe6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006fea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fee:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 8006ff6:	edd7 7a05 	vldr	s15, [r7, #20]
 8006ffa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006ffe:	edd7 7a04 	vldr	s15, [r7, #16]
 8007002:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800700a:	edd7 7a03 	vldr	s15, [r7, #12]
 800700e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007016:	eeb0 0a67 	vmov.f32	s0, s15
 800701a:	f011 fd45 	bl	8018aa8 <sqrtf>
 800701e:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 8007022:	ed97 7a02 	vldr	s14, [r7, #8]
 8007026:	edd7 7a01 	vldr	s15, [r7, #4]
 800702a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800702e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8007032:	eeb0 0a66 	vmov.f32	s0, s13
 8007036:	f011 fdc8 	bl	8018bca <fminf>
 800703a:	eef0 7a40 	vmov.f32	s15, s0
 800703e:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8007042:	eeb0 0a67 	vmov.f32	s0, s15
 8007046:	f011 fda3 	bl	8018b90 <fmaxf>
 800704a:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 800704e:	ed97 0a00 	vldr	s0, [r7]
 8007052:	f011 fcfd 	bl	8018a50 <acosf>
 8007056:	eef0 7a40 	vmov.f32	s15, s0
 800705a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8007070 <quaternionToThetaZ+0x11c>
 800705e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8007062:	eeb0 0a67 	vmov.f32	s0, s15
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000020 	.word	0x20000020
 8007070:	42654ca3 	.word	0x42654ca3

08007074 <getInitialQuaternion>:
float quaternionToRoll(){
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
return roll;
}

void getInitialQuaternion() {
 8007074:	b5b0      	push	{r4, r5, r7, lr}
 8007076:	b092      	sub	sp, #72	@ 0x48
 8007078:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 800707a:	4b95      	ldr	r3, [pc, #596]	@ (80072d0 <getInitialQuaternion+0x25c>)
 800707c:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8007080:	4b93      	ldr	r3, [pc, #588]	@ (80072d0 <getInitialQuaternion+0x25c>)
 8007082:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8007086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800708a:	4b91      	ldr	r3, [pc, #580]	@ (80072d0 <getInitialQuaternion+0x25c>)
 800708c:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8007090:	4b8f      	ldr	r3, [pc, #572]	@ (80072d0 <getInitialQuaternion+0x25c>)
 8007092:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8007096:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800709a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800709e:	4b8c      	ldr	r3, [pc, #560]	@ (80072d0 <getInitialQuaternion+0x25c>)
 80070a0:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 80070a4:	4b8a      	ldr	r3, [pc, #552]	@ (80072d0 <getInitialQuaternion+0x25c>)
 80070a6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80070aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070b2:	ee17 0a90 	vmov	r0, s15
 80070b6:	f7f9 fa67 	bl	8000588 <__aeabi_f2d>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	ec43 2b10 	vmov	d0, r2, r3
 80070c2:	f011 fc99 	bl	80189f8 <sqrt>
 80070c6:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 80070ca:	4b81      	ldr	r3, [pc, #516]	@ (80072d0 <getInitialQuaternion+0x25c>)
 80070cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7f9 fa5a 	bl	8000588 <__aeabi_f2d>
 80070d4:	4602      	mov	r2, r0
 80070d6:	460b      	mov	r3, r1
 80070d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)BMI_sensor.datas.acc_x;
 80070dc:	4b7c      	ldr	r3, [pc, #496]	@ (80072d0 <getInitialQuaternion+0x25c>)
 80070de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7f9 fa51 	bl	8000588 <__aeabi_f2d>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_z;
 80070ee:	4b78      	ldr	r3, [pc, #480]	@ (80072d0 <getInitialQuaternion+0x25c>)
 80070f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7f9 fa48 	bl	8000588 <__aeabi_f2d>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8007100:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007104:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007108:	f7f9 fbc0 	bl	800088c <__aeabi_ddiv>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8007114:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007118:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800711c:	f7f9 fbb6 	bl	800088c <__aeabi_ddiv>
 8007120:	4602      	mov	r2, r0
 8007122:	460b      	mov	r3, r1
 8007124:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 8007128:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800712c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007130:	f7f9 fbac 	bl	800088c <__aeabi_ddiv>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 800713c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007140:	f04f 0000 	mov.w	r0, #0
 8007144:	4963      	ldr	r1, [pc, #396]	@ (80072d4 <getInitialQuaternion+0x260>)
 8007146:	f7f9 f8bf 	bl	80002c8 <__aeabi_dsub>
 800714a:	4602      	mov	r2, r0
 800714c:	460b      	mov	r3, r1
 800714e:	ec43 2b17 	vmov	d7, r2, r3
 8007152:	eeb0 0a47 	vmov.f32	s0, s14
 8007156:	eef0 0a67 	vmov.f32	s1, s15
 800715a:	f011 fc4d 	bl	80189f8 <sqrt>
 800715e:	ec51 0b10 	vmov	r0, r1, d0
 8007162:	f04f 0200 	mov.w	r2, #0
 8007166:	4b5c      	ldr	r3, [pc, #368]	@ (80072d8 <getInitialQuaternion+0x264>)
 8007168:	f7f9 fa66 	bl	8000638 <__aeabi_dmul>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8007174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007178:	f04f 0000 	mov.w	r0, #0
 800717c:	4956      	ldr	r1, [pc, #344]	@ (80072d8 <getInitialQuaternion+0x264>)
 800717e:	f7f9 fb85 	bl	800088c <__aeabi_ddiv>
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 800718a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800718e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007192:	f7f9 fa51 	bl	8000638 <__aeabi_dmul>
 8007196:	4602      	mov	r2, r0
 8007198:	460b      	mov	r3, r1
 800719a:	4610      	mov	r0, r2
 800719c:	4619      	mov	r1, r3
 800719e:	f04f 0200 	mov.w	r2, #0
 80071a2:	4b4d      	ldr	r3, [pc, #308]	@ (80072d8 <getInitialQuaternion+0x264>)
 80071a4:	f7f9 fa48 	bl	8000638 <__aeabi_dmul>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 80071b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80071b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071b8:	f7f9 fa3e 	bl	8000638 <__aeabi_dmul>
 80071bc:	4602      	mov	r2, r0
 80071be:	460b      	mov	r3, r1
 80071c0:	4610      	mov	r0, r2
 80071c2:	4619      	mov	r1, r3
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	4b43      	ldr	r3, [pc, #268]	@ (80072d8 <getInitialQuaternion+0x264>)
 80071ca:	f7f9 fa35 	bl	8000638 <__aeabi_dmul>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 80071d6:	f04f 0200 	mov.w	r2, #0
 80071da:	f04f 0300 	mov.w	r3, #0
 80071de:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 80071e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ea:	f7f9 fa25 	bl	8000638 <__aeabi_dmul>
 80071ee:	4602      	mov	r2, r0
 80071f0:	460b      	mov	r3, r1
 80071f2:	4614      	mov	r4, r2
 80071f4:	461d      	mov	r5, r3
 80071f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80071fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071fe:	f7f9 fa1b 	bl	8000638 <__aeabi_dmul>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	f7f9 f85f 	bl	80002cc <__adddf3>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4614      	mov	r4, r2
 8007214:	461d      	mov	r5, r3
 8007216:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800721a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800721e:	f7f9 fa0b 	bl	8000638 <__aeabi_dmul>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4620      	mov	r0, r4
 8007228:	4629      	mov	r1, r5
 800722a:	f7f9 f84f 	bl	80002cc <__adddf3>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4614      	mov	r4, r2
 8007234:	461d      	mov	r5, r3
 8007236:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800723a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800723e:	f7f9 f9fb 	bl	8000638 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4620      	mov	r0, r4
 8007248:	4629      	mov	r1, r5
 800724a:	f7f9 f83f 	bl	80002cc <__adddf3>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	ec43 2b17 	vmov	d7, r2, r3
 8007256:	eeb0 0a47 	vmov.f32	s0, s14
 800725a:	eef0 0a67 	vmov.f32	s1, s15
 800725e:	f011 fbcb 	bl	80189f8 <sqrt>
 8007262:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8007266:	e9d7 0100 	ldrd	r0, r1, [r7]
 800726a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800726e:	f7f9 fb0d 	bl	800088c <__aeabi_ddiv>
 8007272:	4602      	mov	r2, r0
 8007274:	460b      	mov	r3, r1
 8007276:	4610      	mov	r0, r2
 8007278:	4619      	mov	r1, r3
 800727a:	f7f9 fcd5 	bl	8000c28 <__aeabi_d2f>
 800727e:	4603      	mov	r3, r0
 8007280:	4a16      	ldr	r2, [pc, #88]	@ (80072dc <getInitialQuaternion+0x268>)
 8007282:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8007284:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007288:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800728c:	f7f9 fafe 	bl	800088c <__aeabi_ddiv>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4610      	mov	r0, r2
 8007296:	4619      	mov	r1, r3
 8007298:	f7f9 fcc6 	bl	8000c28 <__aeabi_d2f>
 800729c:	4603      	mov	r3, r0
 800729e:	4a0f      	ldr	r2, [pc, #60]	@ (80072dc <getInitialQuaternion+0x268>)
 80072a0:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 80072a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80072a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80072aa:	f7f9 faef 	bl	800088c <__aeabi_ddiv>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4610      	mov	r0, r2
 80072b4:	4619      	mov	r1, r3
 80072b6:	f7f9 fcb7 	bl	8000c28 <__aeabi_d2f>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4a07      	ldr	r2, [pc, #28]	@ (80072dc <getInitialQuaternion+0x268>)
 80072be:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 80072c0:	4b06      	ldr	r3, [pc, #24]	@ (80072dc <getInitialQuaternion+0x268>)
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	60da      	str	r2, [r3, #12]
}
 80072c8:	bf00      	nop
 80072ca:	3748      	adds	r7, #72	@ 0x48
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bdb0      	pop	{r4, r5, r7, pc}
 80072d0:	20001cb4 	.word	0x20001cb4
 80072d4:	3ff00000 	.word	0x3ff00000
 80072d8:	3fe00000 	.word	0x3fe00000
 80072dc:	20000020 	.word	0x20000020

080072e0 <invSqrt>:

float invSqrt(float x) {
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 80072ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80072ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80072f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072f6:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 80072fe:	f107 0310 	add.w	r3, r7, #16
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	105a      	asrs	r2, r3, #1
 800730a:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <invSqrt+0x74>)
 800730c:	1a9b      	subs	r3, r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8007310:	f107 030c 	add.w	r3, r7, #12
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8007318:	ed97 7a04 	vldr	s14, [r7, #16]
 800731c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007320:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007324:	edd7 7a04 	vldr	s15, [r7, #16]
 8007328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800732c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8007330:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007334:	edd7 7a04 	vldr	s15, [r7, #16]
 8007338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800733c:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	ee07 3a90 	vmov	s15, r3
}
 8007346:	eeb0 0a67 	vmov.f32	s0, s15
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	5f3759df 	.word	0x5f3759df

08007358 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b086      	sub	sp, #24
 800735c:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 800735e:	4b3d      	ldr	r3, [pc, #244]	@ (8007454 <calculate_accel_std_deviation+0xfc>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d106      	bne.n	8007374 <calculate_accel_std_deviation+0x1c>
 8007366:	4b3c      	ldr	r3, [pc, #240]	@ (8007458 <calculate_accel_std_deviation+0x100>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d802      	bhi.n	8007374 <calculate_accel_std_deviation+0x1c>
 800736e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800745c <calculate_accel_std_deviation+0x104>
 8007372:	e069      	b.n	8007448 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8007374:	4b37      	ldr	r3, [pc, #220]	@ (8007454 <calculate_accel_std_deviation+0xfc>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d102      	bne.n	8007382 <calculate_accel_std_deviation+0x2a>
 800737c:	4b36      	ldr	r3, [pc, #216]	@ (8007458 <calculate_accel_std_deviation+0x100>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	e000      	b.n	8007384 <calculate_accel_std_deviation+0x2c>
 8007382:	2305      	movs	r3, #5
 8007384:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 8007386:	f04f 0300 	mov.w	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8007398:	2300      	movs	r3, #0
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	e00e      	b.n	80073bc <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 800739e:	4a30      	ldr	r2, [pc, #192]	@ (8007460 <calculate_accel_std_deviation+0x108>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	edd3 7a00 	vldr	s15, [r3]
 80073aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80073ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073b2:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	dbec      	blt.n	800739e <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80073ce:	edd7 6a05 	vldr	s13, [r7, #20]
 80073d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073d6:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 80073da:	2300      	movs	r3, #0
 80073dc:	60bb      	str	r3, [r7, #8]
 80073de:	e01e      	b.n	800741e <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 80073e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007460 <calculate_accel_std_deviation+0x108>)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	ed93 7a00 	vldr	s14, [r3]
 80073ec:	edd7 7a00 	vldr	s15, [r7]
 80073f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80073f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007460 <calculate_accel_std_deviation+0x108>)
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	edd3 6a00 	vldr	s13, [r3]
 8007400:	edd7 7a00 	vldr	s15, [r7]
 8007404:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740c:	ed97 7a04 	vldr	s14, [r7, #16]
 8007410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007414:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	3301      	adds	r3, #1
 800741c:	60bb      	str	r3, [r7, #8]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	429a      	cmp	r2, r3
 8007424:	dbdc      	blt.n	80073e0 <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007430:	edd7 6a04 	vldr	s13, [r7, #16]
 8007434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007438:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 800743c:	ed97 0a04 	vldr	s0, [r7, #16]
 8007440:	f011 fb32 	bl	8018aa8 <sqrtf>
 8007444:	eef0 7a40 	vmov.f32	s15, s0
}
 8007448:	eeb0 0a67 	vmov.f32	s0, s15
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20001f11 	.word	0x20001f11
 8007458:	20001f10 	.word	0x20001f10
 800745c:	00000000 	.word	0x00000000
 8007460:	20001efc 	.word	0x20001efc

08007464 <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b088      	sub	sp, #32
 8007468:	af00      	add	r7, sp, #0
 800746a:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 800746e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007472:	eef0 7ae7 	vabs.f32	s15, s15
 8007476:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 800747a:	4b31      	ldr	r3, [pc, #196]	@ (8007540 <detect_accel_failure+0xdc>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	4a31      	ldr	r2, [pc, #196]	@ (8007544 <detect_accel_failure+0xe0>)
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8007488:	4b2d      	ldr	r3, [pc, #180]	@ (8007540 <detect_accel_failure+0xdc>)
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	4b2e      	ldr	r3, [pc, #184]	@ (8007548 <detect_accel_failure+0xe4>)
 8007490:	fb83 1302 	smull	r1, r3, r3, r2
 8007494:	1059      	asrs	r1, r3, #1
 8007496:	17d3      	asrs	r3, r2, #31
 8007498:	1ac9      	subs	r1, r1, r3
 800749a:	460b      	mov	r3, r1
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	440b      	add	r3, r1
 80074a0:	1ad1      	subs	r1, r2, r3
 80074a2:	b2ca      	uxtb	r2, r1
 80074a4:	4b26      	ldr	r3, [pc, #152]	@ (8007540 <detect_accel_failure+0xdc>)
 80074a6:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 80074a8:	4b25      	ldr	r3, [pc, #148]	@ (8007540 <detect_accel_failure+0xdc>)
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d102      	bne.n	80074b6 <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 80074b0:	4b26      	ldr	r3, [pc, #152]	@ (800754c <detect_accel_failure+0xe8>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 80074b6:	f7ff ff4f 	bl	8007358 <calculate_accel_std_deviation>
 80074ba:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 80074be:	f7fc f82d 	bl	800351c <flight_algorithm_get_start_time>
 80074c2:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 80074ca:	4a21      	ldr	r2, [pc, #132]	@ (8007550 <detect_accel_failure+0xec>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 80074d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007550 <detect_accel_failure+0xec>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d104      	bne.n	80074e2 <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 80074d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007554 <detect_accel_failure+0xf0>)
 80074da:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 80074dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007558 <detect_accel_failure+0xf4>)
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	e014      	b.n	800750c <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 80074e2:	f001 fa05 	bl	80088f0 <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	4b19      	ldr	r3, [pc, #100]	@ (8007550 <detect_accel_failure+0xec>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d804      	bhi.n	8007504 <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 80074fa:	4b18      	ldr	r3, [pc, #96]	@ (800755c <detect_accel_failure+0xf8>)
 80074fc:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 80074fe:	4b18      	ldr	r3, [pc, #96]	@ (8007560 <detect_accel_failure+0xfc>)
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	e003      	b.n	800750c <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8007504:	4b16      	ldr	r3, [pc, #88]	@ (8007560 <detect_accel_failure+0xfc>)
 8007506:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8007508:	4b16      	ldr	r3, [pc, #88]	@ (8007564 <detect_accel_failure+0x100>)
 800750a:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 800750c:	ed97 7a05 	vldr	s14, [r7, #20]
 8007510:	edd7 7a07 	vldr	s15, [r7, #28]
 8007514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800751c:	dc08      	bgt.n	8007530 <detect_accel_failure+0xcc>
 800751e:	ed97 7a04 	vldr	s14, [r7, #16]
 8007522:	edd7 7a06 	vldr	s15, [r7, #24]
 8007526:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800752a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800752e:	dd01      	ble.n	8007534 <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8007530:	2301      	movs	r3, #1
 8007532:	e000      	b.n	8007536 <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3720      	adds	r7, #32
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20001f10 	.word	0x20001f10
 8007544:	20001efc 	.word	0x20001efc
 8007548:	66666667 	.word	0x66666667
 800754c:	20001f11 	.word	0x20001f11
 8007550:	20001ef8 	.word	0x20001ef8
 8007554:	43480000 	.word	0x43480000
 8007558:	42c80000 	.word	0x42c80000
 800755c:	43160000 	.word	0x43160000
 8007560:	42480000 	.word	0x42480000
 8007564:	41700000 	.word	0x41700000

08007568 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init()
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
    // Sensörlerinize göre gürültü değerlerini ayarlayın - daha konservatif başlangıç
    kalman.process_noise = 0.05f;         // Model gürültüsü (biraz artırıldı)
 800756e:	4b19      	ldr	r3, [pc, #100]	@ (80075d4 <sensor_fusion_init+0x6c>)
 8007570:	4a19      	ldr	r2, [pc, #100]	@ (80075d8 <sensor_fusion_init+0x70>)
 8007572:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.1f;  // BME280 yükseklik gürültüsü (daha realistik)
 8007574:	4b17      	ldr	r3, [pc, #92]	@ (80075d4 <sensor_fusion_init+0x6c>)
 8007576:	4a19      	ldr	r2, [pc, #100]	@ (80075dc <sensor_fusion_init+0x74>)
 8007578:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 10.0f; // BMI088 ivme gürültüsü (başlangıç için)
 800757a:	4b16      	ldr	r3, [pc, #88]	@ (80075d4 <sensor_fusion_init+0x6c>)
 800757c:	4a18      	ldr	r2, [pc, #96]	@ (80075e0 <sensor_fusion_init+0x78>)
 800757e:	639a      	str	r2, [r3, #56]	@ 0x38

    KalmanFilter_Init(&kalman);
 8007580:	4814      	ldr	r0, [pc, #80]	@ (80075d4 <sensor_fusion_init+0x6c>)
 8007582:	f7fb ffd7 	bl	8003534 <KalmanFilter_Init>

    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8007586:	2300      	movs	r3, #0
 8007588:	607b      	str	r3, [r7, #4]
 800758a:	e009      	b.n	80075a0 <sensor_fusion_init+0x38>
        accel_buffer[i] = 0.0f;
 800758c:	4a15      	ldr	r2, [pc, #84]	@ (80075e4 <sensor_fusion_init+0x7c>)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	009b      	lsls	r3, r3, #2
 8007592:	4413      	add	r3, r2
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3301      	adds	r3, #1
 800759e:	607b      	str	r3, [r7, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	ddf2      	ble.n	800758c <sensor_fusion_init+0x24>
    }
    accel_buffer_index = 0;
 80075a6:	4b10      	ldr	r3, [pc, #64]	@ (80075e8 <sensor_fusion_init+0x80>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 80075ac:	4b0f      	ldr	r3, [pc, #60]	@ (80075ec <sensor_fusion_init+0x84>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 80075b2:	4b0f      	ldr	r3, [pc, #60]	@ (80075f0 <sensor_fusion_init+0x88>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 80075b8:	4b0e      	ldr	r3, [pc, #56]	@ (80075f4 <sensor_fusion_init+0x8c>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	701a      	strb	r2, [r3, #0]
    last_kalman_update_time = 0;  // Sıfırla ki ilk çalıştırmada düzgün başlasın
 80075be:	4b0e      	ldr	r3, [pc, #56]	@ (80075f8 <sensor_fusion_init+0x90>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
    flight_start_time = 0;
 80075c4:	4b0d      	ldr	r3, [pc, #52]	@ (80075fc <sensor_fusion_init+0x94>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20001ea4 	.word	0x20001ea4
 80075d8:	3d4ccccd 	.word	0x3d4ccccd
 80075dc:	3dcccccd 	.word	0x3dcccccd
 80075e0:	41200000 	.word	0x41200000
 80075e4:	20001efc 	.word	0x20001efc
 80075e8:	20001f10 	.word	0x20001f10
 80075ec:	20001f11 	.word	0x20001f11
 80075f0:	20001f12 	.word	0x20001f12
 80075f4:	20001ef0 	.word	0x20001ef0
 80075f8:	20001ef4 	.word	0x20001ef4
 80075fc:	20001ef8 	.word	0x20001ef8

08007600 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	@ 0x28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 800760c:	f001 f970 	bl	80088f0 <HAL_GetTick>
 8007610:	61f8      	str	r0, [r7, #28]

    // Calculate time difference in seconds
    float time_sec;

    // İlk çalıştırmada zamanı başlat
    if (last_kalman_update_time == 0) {
 8007612:	4b5d      	ldr	r3, [pc, #372]	@ (8007788 <sensor_fusion_update_kalman+0x188>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d105      	bne.n	8007626 <sensor_fusion_update_kalman+0x26>
        last_kalman_update_time = current_time;
 800761a:	4a5b      	ldr	r2, [pc, #364]	@ (8007788 <sensor_fusion_update_kalman+0x188>)
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	6013      	str	r3, [r2, #0]
        time_sec = 0.01f; // İlk iterasyon için sabit değer
 8007620:	4b5a      	ldr	r3, [pc, #360]	@ (800778c <sensor_fusion_update_kalman+0x18c>)
 8007622:	627b      	str	r3, [r7, #36]	@ 0x24
 8007624:	e021      	b.n	800766a <sensor_fusion_update_kalman+0x6a>
    } else {
        // Zaman farkını hesapla
        uint32_t time_diff = current_time - last_kalman_update_time;
 8007626:	4b58      	ldr	r3, [pc, #352]	@ (8007788 <sensor_fusion_update_kalman+0x188>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	69fa      	ldr	r2, [r7, #28]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	61bb      	str	r3, [r7, #24]
        time_sec = time_diff / 1000.0f;
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	ee07 3a90 	vmov	s15, r3
 8007636:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800763a:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8007790 <sensor_fusion_update_kalman+0x190>
 800763e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007642:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Zaman kontrolü - makul sınırlar içinde olmalı
        if (time_sec <= 0.0f || time_sec > 1.0f) {
 8007646:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800764a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800764e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007652:	d908      	bls.n	8007666 <sensor_fusion_update_kalman+0x66>
 8007654:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800765c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007664:	dd01      	ble.n	800766a <sensor_fusion_update_kalman+0x6a>
            time_sec = 0.01f; // Default 10ms if invalid
 8007666:	4b49      	ldr	r3, [pc, #292]	@ (800778c <sensor_fusion_update_kalman+0x18c>)
 8007668:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    // Update the last update time
    last_kalman_update_time = current_time;
 800766a:	4a47      	ldr	r2, [pc, #284]	@ (8007788 <sensor_fusion_update_kalman+0x188>)
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	6013      	str	r3, [r2, #0]

    // Güvenlik kontrolü - BME ve BMI sensör verilerinin geçerli olduğundan emin ol
    if (BME == NULL || BMI == NULL || sensor == NULL) {
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d07e      	beq.n	8007774 <sensor_fusion_update_kalman+0x174>
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d07b      	beq.n	8007774 <sensor_fusion_update_kalman+0x174>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d078      	beq.n	8007774 <sensor_fusion_update_kalman+0x174>
        return;
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007686:	4618      	mov	r0, r3
 8007688:	f7f8 ff7e 	bl	8000588 <__aeabi_f2d>
 800768c:	a33c      	add	r3, pc, #240	@ (adr r3, 8007780 <sensor_fusion_update_kalman+0x180>)
 800768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007692:	f7f8 ffd1 	bl	8000638 <__aeabi_dmul>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4610      	mov	r0, r2
 800769c:	4619      	mov	r1, r3
 800769e:	f7f9 fac3 	bl	8000c28 <__aeabi_d2f>
 80076a2:	4603      	mov	r3, r0
 80076a4:	617b      	str	r3, [r7, #20]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cosf(angle_rad);
 80076a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80076aa:	f011 fa1b 	bl	8018ae4 <cosf>
 80076ae:	eef0 7a40 	vmov.f32	s15, s0
 80076b2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8007794 <sensor_fusion_update_kalman+0x194>
 80076b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80076ba:	edc7 7a04 	vstr	s15, [r7, #16]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 80076c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80076c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076cc:	edc7 7a08 	vstr	s15, [r7, #32]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 80076d0:	ed97 0a08 	vldr	s0, [r7, #32]
 80076d4:	f7ff fec6 	bl	8007464 <detect_accel_failure>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	4b2e      	ldr	r3, [pc, #184]	@ (8007798 <sensor_fusion_update_kalman+0x198>)
 80076de:	701a      	strb	r2, [r3, #0]

    // İvme değeri kontrolü - aşırı değerleri sınırla
    if (fabsf(accel_z_corrected) > 500.0f) {
 80076e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80076e4:	eef0 7ae7 	vabs.f32	s15, s15
 80076e8:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800779c <sensor_fusion_update_kalman+0x19c>
 80076ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f4:	dd0a      	ble.n	800770c <sensor_fusion_update_kalman+0x10c>
        accel_z_corrected = (accel_z_corrected > 0) ? 500.0f : -500.0f;
 80076f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80076fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80076fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007702:	dd01      	ble.n	8007708 <sensor_fusion_update_kalman+0x108>
 8007704:	4b26      	ldr	r3, [pc, #152]	@ (80077a0 <sensor_fusion_update_kalman+0x1a0>)
 8007706:	e000      	b.n	800770a <sensor_fusion_update_kalman+0x10a>
 8007708:	4b26      	ldr	r3, [pc, #152]	@ (80077a4 <sensor_fusion_update_kalman+0x1a4>)
 800770a:	623b      	str	r3, [r7, #32]
    }

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 800770c:	4b22      	ldr	r3, [pc, #136]	@ (8007798 <sensor_fusion_update_kalman+0x198>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <sensor_fusion_update_kalman+0x11c>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 500.0f;  // Çok yüksek gürültü = düşük güven
 8007714:	4b24      	ldr	r3, [pc, #144]	@ (80077a8 <sensor_fusion_update_kalman+0x1a8>)
 8007716:	4a22      	ldr	r2, [pc, #136]	@ (80077a0 <sensor_fusion_update_kalman+0x1a0>)
 8007718:	639a      	str	r2, [r3, #56]	@ 0x38
 800771a:	e002      	b.n	8007722 <sensor_fusion_update_kalman+0x122>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 50.0f;
 800771c:	4b22      	ldr	r3, [pc, #136]	@ (80077a8 <sensor_fusion_update_kalman+0x1a8>)
 800771e:	4a23      	ldr	r2, [pc, #140]	@ (80077ac <sensor_fusion_update_kalman+0x1ac>)
 8007720:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 8007722:	4b23      	ldr	r3, [pc, #140]	@ (80077b0 <sensor_fusion_update_kalman+0x1b0>)
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d025      	beq.n	8007776 <sensor_fusion_update_kalman+0x176>
        // HATA DÜZELTİLDİ: accel_failure_detected yerine gerçek ivme değeri kullanılıyor
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, BME->altitude, accel_z_corrected, time_sec);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	edd3 7a08 	vldr	s15, [r3, #32]
 8007730:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8007734:	edd7 0a08 	vldr	s1, [r7, #32]
 8007738:	eeb0 0a67 	vmov.f32	s0, s15
 800773c:	481a      	ldr	r0, [pc, #104]	@ (80077a8 <sensor_fusion_update_kalman+0x1a8>)
 800773e:	f7fb ff59 	bl	80035f4 <KalmanFilter_Update>
 8007742:	eef0 7a40 	vmov.f32	s15, s0
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 800774c:	4816      	ldr	r0, [pc, #88]	@ (80077a8 <sensor_fusion_update_kalman+0x1a8>)
 800774e:	f7fd f935 	bl	80049bc <KalmanFilter_IsApogeeDetected>
 8007752:	4603      	mov	r3, r0
 8007754:	b2da      	uxtb	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 800775a:	4813      	ldr	r0, [pc, #76]	@ (80077a8 <sensor_fusion_update_kalman+0x1a8>)
 800775c:	f7fd f91f 	bl	800499e <Kalman_Get_Velocity>
 8007760:	eef0 7a40 	vmov.f32	s15, s0
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	edc3 7a01 	vstr	s15, [r3, #4]
        sensor->accel_failure = accel_failure_detected;
 800776a:	4b0b      	ldr	r3, [pc, #44]	@ (8007798 <sensor_fusion_update_kalman+0x198>)
 800776c:	781a      	ldrb	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	765a      	strb	r2, [r3, #25]
 8007772:	e000      	b.n	8007776 <sensor_fusion_update_kalman+0x176>
        return;
 8007774:	bf00      	nop
    }
}
 8007776:	3728      	adds	r7, #40	@ 0x28
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	f3af 8000 	nop.w
 8007780:	a2529d39 	.word	0xa2529d39
 8007784:	3f91df46 	.word	0x3f91df46
 8007788:	20001ef4 	.word	0x20001ef4
 800778c:	3c23d70a 	.word	0x3c23d70a
 8007790:	447a0000 	.word	0x447a0000
 8007794:	411cf5c3 	.word	0x411cf5c3
 8007798:	20001f12 	.word	0x20001f12
 800779c:	43fa0000 	.word	0x43fa0000
 80077a0:	43fa0000 	.word	0x43fa0000
 80077a4:	c3fa0000 	.word	0xc3fa0000
 80077a8:	20001ea4 	.word	0x20001ea4
 80077ac:	42480000 	.word	0x42480000
 80077b0:	20001ef0 	.word	0x20001ef0

080077b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	4b10      	ldr	r3, [pc, #64]	@ (8007800 <HAL_MspInit+0x4c>)
 80077c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c2:	4a0f      	ldr	r2, [pc, #60]	@ (8007800 <HAL_MspInit+0x4c>)
 80077c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80077c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80077ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007800 <HAL_MspInit+0x4c>)
 80077cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077d2:	607b      	str	r3, [r7, #4]
 80077d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80077d6:	2300      	movs	r3, #0
 80077d8:	603b      	str	r3, [r7, #0]
 80077da:	4b09      	ldr	r3, [pc, #36]	@ (8007800 <HAL_MspInit+0x4c>)
 80077dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077de:	4a08      	ldr	r2, [pc, #32]	@ (8007800 <HAL_MspInit+0x4c>)
 80077e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80077e6:	4b06      	ldr	r3, [pc, #24]	@ (8007800 <HAL_MspInit+0x4c>)
 80077e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ee:	603b      	str	r3, [r7, #0]
 80077f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40023800 	.word	0x40023800

08007804 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08e      	sub	sp, #56	@ 0x38
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800780c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007810:	2200      	movs	r2, #0
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	609a      	str	r2, [r3, #8]
 8007818:	60da      	str	r2, [r3, #12]
 800781a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a45      	ldr	r2, [pc, #276]	@ (8007938 <HAL_ADC_MspInit+0x134>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d128      	bne.n	8007878 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007826:	2300      	movs	r3, #0
 8007828:	623b      	str	r3, [r7, #32]
 800782a:	4b44      	ldr	r3, [pc, #272]	@ (800793c <HAL_ADC_MspInit+0x138>)
 800782c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800782e:	4a43      	ldr	r2, [pc, #268]	@ (800793c <HAL_ADC_MspInit+0x138>)
 8007830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007834:	6453      	str	r3, [r2, #68]	@ 0x44
 8007836:	4b41      	ldr	r3, [pc, #260]	@ (800793c <HAL_ADC_MspInit+0x138>)
 8007838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800783a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800783e:	623b      	str	r3, [r7, #32]
 8007840:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007842:	2300      	movs	r3, #0
 8007844:	61fb      	str	r3, [r7, #28]
 8007846:	4b3d      	ldr	r3, [pc, #244]	@ (800793c <HAL_ADC_MspInit+0x138>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800784a:	4a3c      	ldr	r2, [pc, #240]	@ (800793c <HAL_ADC_MspInit+0x138>)
 800784c:	f043 0302 	orr.w	r3, r3, #2
 8007850:	6313      	str	r3, [r2, #48]	@ 0x30
 8007852:	4b3a      	ldr	r3, [pc, #232]	@ (800793c <HAL_ADC_MspInit+0x138>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	61fb      	str	r3, [r7, #28]
 800785c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800785e:	2302      	movs	r3, #2
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007862:	2303      	movs	r3, #3
 8007864:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007866:	2300      	movs	r3, #0
 8007868:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800786a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800786e:	4619      	mov	r1, r3
 8007870:	4833      	ldr	r0, [pc, #204]	@ (8007940 <HAL_ADC_MspInit+0x13c>)
 8007872:	f002 fa3b 	bl	8009cec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8007876:	e05a      	b.n	800792e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a31      	ldr	r2, [pc, #196]	@ (8007944 <HAL_ADC_MspInit+0x140>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d128      	bne.n	80078d4 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007882:	2300      	movs	r3, #0
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	4b2d      	ldr	r3, [pc, #180]	@ (800793c <HAL_ADC_MspInit+0x138>)
 8007888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800788a:	4a2c      	ldr	r2, [pc, #176]	@ (800793c <HAL_ADC_MspInit+0x138>)
 800788c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007890:	6453      	str	r3, [r2, #68]	@ 0x44
 8007892:	4b2a      	ldr	r3, [pc, #168]	@ (800793c <HAL_ADC_MspInit+0x138>)
 8007894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007896:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800789a:	61bb      	str	r3, [r7, #24]
 800789c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800789e:	2300      	movs	r3, #0
 80078a0:	617b      	str	r3, [r7, #20]
 80078a2:	4b26      	ldr	r3, [pc, #152]	@ (800793c <HAL_ADC_MspInit+0x138>)
 80078a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a6:	4a25      	ldr	r2, [pc, #148]	@ (800793c <HAL_ADC_MspInit+0x138>)
 80078a8:	f043 0304 	orr.w	r3, r3, #4
 80078ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80078ae:	4b23      	ldr	r3, [pc, #140]	@ (800793c <HAL_ADC_MspInit+0x138>)
 80078b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	617b      	str	r3, [r7, #20]
 80078b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80078ba:	2301      	movs	r3, #1
 80078bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078be:	2303      	movs	r3, #3
 80078c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078ca:	4619      	mov	r1, r3
 80078cc:	481e      	ldr	r0, [pc, #120]	@ (8007948 <HAL_ADC_MspInit+0x144>)
 80078ce:	f002 fa0d 	bl	8009cec <HAL_GPIO_Init>
}
 80078d2:	e02c      	b.n	800792e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1c      	ldr	r2, [pc, #112]	@ (800794c <HAL_ADC_MspInit+0x148>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d127      	bne.n	800792e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80078de:	2300      	movs	r3, #0
 80078e0:	613b      	str	r3, [r7, #16]
 80078e2:	4b16      	ldr	r3, [pc, #88]	@ (800793c <HAL_ADC_MspInit+0x138>)
 80078e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078e6:	4a15      	ldr	r2, [pc, #84]	@ (800793c <HAL_ADC_MspInit+0x138>)
 80078e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80078ee:	4b13      	ldr	r3, [pc, #76]	@ (800793c <HAL_ADC_MspInit+0x138>)
 80078f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078f6:	613b      	str	r3, [r7, #16]
 80078f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078fa:	2300      	movs	r3, #0
 80078fc:	60fb      	str	r3, [r7, #12]
 80078fe:	4b0f      	ldr	r3, [pc, #60]	@ (800793c <HAL_ADC_MspInit+0x138>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007902:	4a0e      	ldr	r2, [pc, #56]	@ (800793c <HAL_ADC_MspInit+0x138>)
 8007904:	f043 0304 	orr.w	r3, r3, #4
 8007908:	6313      	str	r3, [r2, #48]	@ 0x30
 800790a:	4b0c      	ldr	r3, [pc, #48]	@ (800793c <HAL_ADC_MspInit+0x138>)
 800790c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800790e:	f003 0304 	and.w	r3, r3, #4
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007916:	2302      	movs	r3, #2
 8007918:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800791a:	2303      	movs	r3, #3
 800791c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800791e:	2300      	movs	r3, #0
 8007920:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007926:	4619      	mov	r1, r3
 8007928:	4807      	ldr	r0, [pc, #28]	@ (8007948 <HAL_ADC_MspInit+0x144>)
 800792a:	f002 f9df 	bl	8009cec <HAL_GPIO_Init>
}
 800792e:	bf00      	nop
 8007930:	3738      	adds	r7, #56	@ 0x38
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	40012000 	.word	0x40012000
 800793c:	40023800 	.word	0x40023800
 8007940:	40020400 	.word	0x40020400
 8007944:	40012100 	.word	0x40012100
 8007948:	40020800 	.word	0x40020800
 800794c:	40012200 	.word	0x40012200

08007950 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08c      	sub	sp, #48	@ 0x30
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007958:	f107 031c 	add.w	r3, r7, #28
 800795c:	2200      	movs	r2, #0
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	605a      	str	r2, [r3, #4]
 8007962:	609a      	str	r2, [r3, #8]
 8007964:	60da      	str	r2, [r3, #12]
 8007966:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ae4 <HAL_I2C_MspInit+0x194>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d163      	bne.n	8007a3a <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	61bb      	str	r3, [r7, #24]
 8007976:	4b5c      	ldr	r3, [pc, #368]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797a:	4a5b      	ldr	r2, [pc, #364]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 800797c:	f043 0302 	orr.w	r3, r3, #2
 8007980:	6313      	str	r3, [r2, #48]	@ 0x30
 8007982:	4b59      	ldr	r3, [pc, #356]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	61bb      	str	r3, [r7, #24]
 800798c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800798e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007994:	2312      	movs	r3, #18
 8007996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007998:	2300      	movs	r3, #0
 800799a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800799c:	2303      	movs	r3, #3
 800799e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80079a0:	2304      	movs	r3, #4
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079a4:	f107 031c 	add.w	r3, r7, #28
 80079a8:	4619      	mov	r1, r3
 80079aa:	4850      	ldr	r0, [pc, #320]	@ (8007aec <HAL_I2C_MspInit+0x19c>)
 80079ac:	f002 f99e 	bl	8009cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80079b0:	2300      	movs	r3, #0
 80079b2:	617b      	str	r3, [r7, #20]
 80079b4:	4b4c      	ldr	r3, [pc, #304]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 80079b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b8:	4a4b      	ldr	r2, [pc, #300]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 80079ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80079be:	6413      	str	r3, [r2, #64]	@ 0x40
 80079c0:	4b49      	ldr	r3, [pc, #292]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 80079c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079c8:	617b      	str	r3, [r7, #20]
 80079ca:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80079cc:	4b48      	ldr	r3, [pc, #288]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 80079ce:	4a49      	ldr	r2, [pc, #292]	@ (8007af4 <HAL_I2C_MspInit+0x1a4>)
 80079d0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80079d2:	4b47      	ldr	r3, [pc, #284]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 80079d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80079d8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80079da:	4b45      	ldr	r3, [pc, #276]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 80079dc:	2200      	movs	r2, #0
 80079de:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079e0:	4b43      	ldr	r3, [pc, #268]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80079e6:	4b42      	ldr	r3, [pc, #264]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 80079e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80079ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079ee:	4b40      	ldr	r3, [pc, #256]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079f4:	4b3e      	ldr	r3, [pc, #248]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80079fa:	4b3d      	ldr	r3, [pc, #244]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007a00:	4b3b      	ldr	r3, [pc, #236]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a06:	4b3a      	ldr	r3, [pc, #232]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8007a0c:	4838      	ldr	r0, [pc, #224]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 8007a0e:	f001 fcf3 	bl	80093f8 <HAL_DMA_Init>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d001      	beq.n	8007a1c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8007a18:	f7fe f9a6 	bl	8005d68 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a34      	ldr	r2, [pc, #208]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 8007a20:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a22:	4a33      	ldr	r2, [pc, #204]	@ (8007af0 <HAL_I2C_MspInit+0x1a0>)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	201f      	movs	r0, #31
 8007a2e:	f001 fc9e 	bl	800936e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007a32:	201f      	movs	r0, #31
 8007a34:	f001 fcb7 	bl	80093a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007a38:	e050      	b.n	8007adc <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C3)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8007af8 <HAL_I2C_MspInit+0x1a8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d14b      	bne.n	8007adc <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a44:	2300      	movs	r3, #0
 8007a46:	613b      	str	r3, [r7, #16]
 8007a48:	4b27      	ldr	r3, [pc, #156]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a4c:	4a26      	ldr	r2, [pc, #152]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007a4e:	f043 0304 	orr.w	r3, r3, #4
 8007a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a54:	4b24      	ldr	r3, [pc, #144]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a58:	f003 0304 	and.w	r3, r3, #4
 8007a5c:	613b      	str	r3, [r7, #16]
 8007a5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a60:	2300      	movs	r3, #0
 8007a62:	60fb      	str	r3, [r7, #12]
 8007a64:	4b20      	ldr	r3, [pc, #128]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a68:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007a70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007a7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a82:	2312      	movs	r3, #18
 8007a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007a8e:	2304      	movs	r3, #4
 8007a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a92:	f107 031c 	add.w	r3, r7, #28
 8007a96:	4619      	mov	r1, r3
 8007a98:	4818      	ldr	r0, [pc, #96]	@ (8007afc <HAL_I2C_MspInit+0x1ac>)
 8007a9a:	f002 f927 	bl	8009cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007a9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007aa4:	2312      	movs	r3, #18
 8007aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007aac:	2303      	movs	r3, #3
 8007aae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ab4:	f107 031c 	add.w	r3, r7, #28
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4811      	ldr	r0, [pc, #68]	@ (8007b00 <HAL_I2C_MspInit+0x1b0>)
 8007abc:	f002 f916 	bl	8009cec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60bb      	str	r3, [r7, #8]
 8007ac4:	4b08      	ldr	r3, [pc, #32]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac8:	4a07      	ldr	r2, [pc, #28]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007aca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ace:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ad0:	4b05      	ldr	r3, [pc, #20]	@ (8007ae8 <HAL_I2C_MspInit+0x198>)
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ad4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ad8:	60bb      	str	r3, [r7, #8]
 8007ada:	68bb      	ldr	r3, [r7, #8]
}
 8007adc:	bf00      	nop
 8007ade:	3730      	adds	r7, #48	@ 0x30
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	40005400 	.word	0x40005400
 8007ae8:	40023800 	.word	0x40023800
 8007aec:	40020400 	.word	0x40020400
 8007af0:	20001920 	.word	0x20001920
 8007af4:	40026010 	.word	0x40026010
 8007af8:	40005c00 	.word	0x40005c00
 8007afc:	40020800 	.word	0x40020800
 8007b00:	40020000 	.word	0x40020000

08007b04 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b082      	sub	sp, #8
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1a      	ldr	r2, [pc, #104]	@ (8007b7c <HAL_I2C_MspDeInit+0x78>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d118      	bne.n	8007b48 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007b16:	4b1a      	ldr	r3, [pc, #104]	@ (8007b80 <HAL_I2C_MspDeInit+0x7c>)
 8007b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1a:	4a19      	ldr	r2, [pc, #100]	@ (8007b80 <HAL_I2C_MspDeInit+0x7c>)
 8007b1c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007b20:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8007b22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b26:	4817      	ldr	r0, [pc, #92]	@ (8007b84 <HAL_I2C_MspDeInit+0x80>)
 8007b28:	f002 fa74 	bl	800a014 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8007b2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b30:	4814      	ldr	r0, [pc, #80]	@ (8007b84 <HAL_I2C_MspDeInit+0x80>)
 8007b32:	f002 fa6f 	bl	800a014 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f001 fd0a 	bl	8009554 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8007b40:	201f      	movs	r0, #31
 8007b42:	f001 fc3e 	bl	80093c2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8007b46:	e014      	b.n	8007b72 <HAL_I2C_MspDeInit+0x6e>
  else if(hi2c->Instance==I2C3)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8007b88 <HAL_I2C_MspDeInit+0x84>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d10f      	bne.n	8007b72 <HAL_I2C_MspDeInit+0x6e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007b52:	4b0b      	ldr	r3, [pc, #44]	@ (8007b80 <HAL_I2C_MspDeInit+0x7c>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b56:	4a0a      	ldr	r2, [pc, #40]	@ (8007b80 <HAL_I2C_MspDeInit+0x7c>)
 8007b58:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007b5c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8007b5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b62:	480a      	ldr	r0, [pc, #40]	@ (8007b8c <HAL_I2C_MspDeInit+0x88>)
 8007b64:	f002 fa56 	bl	800a014 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007b68:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007b6c:	4808      	ldr	r0, [pc, #32]	@ (8007b90 <HAL_I2C_MspDeInit+0x8c>)
 8007b6e:	f002 fa51 	bl	800a014 <HAL_GPIO_DeInit>
}
 8007b72:	bf00      	nop
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	40005400 	.word	0x40005400
 8007b80:	40023800 	.word	0x40023800
 8007b84:	40020400 	.word	0x40020400
 8007b88:	40005c00 	.word	0x40005c00
 8007b8c:	40020800 	.word	0x40020800
 8007b90:	40020000 	.word	0x40020000

08007b94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b08c      	sub	sp, #48	@ 0x30
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b9c:	f107 031c 	add.w	r3, r7, #28
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	60da      	str	r2, [r3, #12]
 8007baa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a32      	ldr	r2, [pc, #200]	@ (8007c7c <HAL_SPI_MspInit+0xe8>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d12c      	bne.n	8007c10 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	61bb      	str	r3, [r7, #24]
 8007bba:	4b31      	ldr	r3, [pc, #196]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bbe:	4a30      	ldr	r2, [pc, #192]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007bc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8007bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bce:	61bb      	str	r3, [r7, #24]
 8007bd0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bda:	4a29      	ldr	r2, [pc, #164]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007bdc:	f043 0301 	orr.w	r3, r3, #1
 8007be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8007be2:	4b27      	ldr	r3, [pc, #156]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8007bee:	23e0      	movs	r3, #224	@ 0xe0
 8007bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007bfe:	2305      	movs	r3, #5
 8007c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c02:	f107 031c 	add.w	r3, r7, #28
 8007c06:	4619      	mov	r1, r3
 8007c08:	481e      	ldr	r0, [pc, #120]	@ (8007c84 <HAL_SPI_MspInit+0xf0>)
 8007c0a:	f002 f86f 	bl	8009cec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007c0e:	e031      	b.n	8007c74 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI3)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a1c      	ldr	r2, [pc, #112]	@ (8007c88 <HAL_SPI_MspInit+0xf4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d12c      	bne.n	8007c74 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	4b18      	ldr	r3, [pc, #96]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c22:	4a17      	ldr	r2, [pc, #92]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c2a:	4b15      	ldr	r3, [pc, #84]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c36:	2300      	movs	r3, #0
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	4b11      	ldr	r3, [pc, #68]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3e:	4a10      	ldr	r2, [pc, #64]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007c40:	f043 0304 	orr.w	r3, r3, #4
 8007c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8007c46:	4b0e      	ldr	r3, [pc, #56]	@ (8007c80 <HAL_SPI_MspInit+0xec>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	60fb      	str	r3, [r7, #12]
 8007c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007c52:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8007c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c60:	2303      	movs	r3, #3
 8007c62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007c64:	2306      	movs	r3, #6
 8007c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c68:	f107 031c 	add.w	r3, r7, #28
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	4807      	ldr	r0, [pc, #28]	@ (8007c8c <HAL_SPI_MspInit+0xf8>)
 8007c70:	f002 f83c 	bl	8009cec <HAL_GPIO_Init>
}
 8007c74:	bf00      	nop
 8007c76:	3730      	adds	r7, #48	@ 0x30
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}
 8007c7c:	40013000 	.word	0x40013000
 8007c80:	40023800 	.word	0x40023800
 8007c84:	40020000 	.word	0x40020000
 8007c88:	40003c00 	.word	0x40003c00
 8007c8c:	40020800 	.word	0x40020800

08007c90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca0:	d115      	bne.n	8007cce <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd8 <HAL_TIM_Base_MspInit+0x48>)
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	4a0b      	ldr	r2, [pc, #44]	@ (8007cd8 <HAL_TIM_Base_MspInit+0x48>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007cb2:	4b09      	ldr	r3, [pc, #36]	@ (8007cd8 <HAL_TIM_Base_MspInit+0x48>)
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	60fb      	str	r3, [r7, #12]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	201c      	movs	r0, #28
 8007cc4:	f001 fb53 	bl	800936e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8007cc8:	201c      	movs	r0, #28
 8007cca:	f001 fb6c 	bl	80093a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8007cce:	bf00      	nop
 8007cd0:	3710      	adds	r7, #16
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop
 8007cd8:	40023800 	.word	0x40023800

08007cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b08e      	sub	sp, #56	@ 0x38
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ce8:	2200      	movs	r2, #0
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	605a      	str	r2, [r3, #4]
 8007cee:	609a      	str	r2, [r3, #8]
 8007cf0:	60da      	str	r2, [r3, #12]
 8007cf2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a9c      	ldr	r2, [pc, #624]	@ (8007f6c <HAL_UART_MspInit+0x290>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d162      	bne.n	8007dc4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007cfe:	2300      	movs	r3, #0
 8007d00:	623b      	str	r3, [r7, #32]
 8007d02:	4b9b      	ldr	r3, [pc, #620]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d06:	4a9a      	ldr	r2, [pc, #616]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007d08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d0e:	4b98      	ldr	r3, [pc, #608]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d12:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007d16:	623b      	str	r3, [r7, #32]
 8007d18:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	4b94      	ldr	r3, [pc, #592]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d22:	4a93      	ldr	r2, [pc, #588]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007d24:	f043 0301 	orr.w	r3, r3, #1
 8007d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8007d2a:	4b91      	ldr	r3, [pc, #580]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007d36:	2303      	movs	r3, #3
 8007d38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d42:	2303      	movs	r3, #3
 8007d44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007d46:	2308      	movs	r3, #8
 8007d48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007d4e:	4619      	mov	r1, r3
 8007d50:	4888      	ldr	r0, [pc, #544]	@ (8007f74 <HAL_UART_MspInit+0x298>)
 8007d52:	f001 ffcb 	bl	8009cec <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8007d56:	4b88      	ldr	r3, [pc, #544]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d58:	4a88      	ldr	r2, [pc, #544]	@ (8007f7c <HAL_UART_MspInit+0x2a0>)
 8007d5a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007d5c:	4b86      	ldr	r3, [pc, #536]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007d62:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007d64:	4b84      	ldr	r3, [pc, #528]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d66:	2240      	movs	r2, #64	@ 0x40
 8007d68:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007d6a:	4b83      	ldr	r3, [pc, #524]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007d70:	4b81      	ldr	r3, [pc, #516]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d76:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007d78:	4b7f      	ldr	r3, [pc, #508]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007d7e:	4b7e      	ldr	r3, [pc, #504]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007d84:	4b7c      	ldr	r3, [pc, #496]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d86:	2200      	movs	r2, #0
 8007d88:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007d8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007d90:	4b79      	ldr	r3, [pc, #484]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8007d96:	4878      	ldr	r0, [pc, #480]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007d98:	f001 fb2e 	bl	80093f8 <HAL_DMA_Init>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d001      	beq.n	8007da6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8007da2:	f7fd ffe1 	bl	8005d68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a73      	ldr	r2, [pc, #460]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007daa:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dac:	4a72      	ldr	r2, [pc, #456]	@ (8007f78 <HAL_UART_MspInit+0x29c>)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8007db2:	2200      	movs	r2, #0
 8007db4:	2100      	movs	r1, #0
 8007db6:	2034      	movs	r0, #52	@ 0x34
 8007db8:	f001 fad9 	bl	800936e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8007dbc:	2034      	movs	r0, #52	@ 0x34
 8007dbe:	f001 faf2 	bl	80093a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8007dc2:	e0cf      	b.n	8007f64 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a6d      	ldr	r2, [pc, #436]	@ (8007f80 <HAL_UART_MspInit+0x2a4>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d162      	bne.n	8007e94 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8007dce:	2300      	movs	r3, #0
 8007dd0:	61bb      	str	r3, [r7, #24]
 8007dd2:	4b67      	ldr	r3, [pc, #412]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dd6:	4a66      	ldr	r2, [pc, #408]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007dde:	4b64      	ldr	r3, [pc, #400]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007de6:	61bb      	str	r3, [r7, #24]
 8007de8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	4b60      	ldr	r3, [pc, #384]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df2:	4a5f      	ldr	r2, [pc, #380]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007df4:	f043 0301 	orr.w	r3, r3, #1
 8007df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	617b      	str	r3, [r7, #20]
 8007e04:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007e06:	230c      	movs	r3, #12
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e12:	2303      	movs	r3, #3
 8007e14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007e16:	2307      	movs	r3, #7
 8007e18:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e1e:	4619      	mov	r1, r3
 8007e20:	4854      	ldr	r0, [pc, #336]	@ (8007f74 <HAL_UART_MspInit+0x298>)
 8007e22:	f001 ff63 	bl	8009cec <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007e26:	4b57      	ldr	r3, [pc, #348]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e28:	4a57      	ldr	r2, [pc, #348]	@ (8007f88 <HAL_UART_MspInit+0x2ac>)
 8007e2a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007e2c:	4b55      	ldr	r3, [pc, #340]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e2e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007e32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e34:	4b53      	ldr	r3, [pc, #332]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e36:	2240      	movs	r2, #64	@ 0x40
 8007e38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e3a:	4b52      	ldr	r3, [pc, #328]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e40:	4b50      	ldr	r3, [pc, #320]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007e46:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e48:	4b4e      	ldr	r3, [pc, #312]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007e54:	4b4b      	ldr	r3, [pc, #300]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e60:	4b48      	ldr	r3, [pc, #288]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007e66:	4847      	ldr	r0, [pc, #284]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e68:	f001 fac6 	bl	80093f8 <HAL_DMA_Init>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8007e72:	f7fd ff79 	bl	8005d68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a42      	ldr	r2, [pc, #264]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e7c:	4a41      	ldr	r2, [pc, #260]	@ (8007f84 <HAL_UART_MspInit+0x2a8>)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007e82:	2200      	movs	r2, #0
 8007e84:	2100      	movs	r1, #0
 8007e86:	2026      	movs	r0, #38	@ 0x26
 8007e88:	f001 fa71 	bl	800936e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007e8c:	2026      	movs	r0, #38	@ 0x26
 8007e8e:	f001 fa8a 	bl	80093a6 <HAL_NVIC_EnableIRQ>
}
 8007e92:	e067      	b.n	8007f64 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART6)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a3c      	ldr	r2, [pc, #240]	@ (8007f8c <HAL_UART_MspInit+0x2b0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d162      	bne.n	8007f64 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	4b33      	ldr	r3, [pc, #204]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ea6:	4a32      	ldr	r2, [pc, #200]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007ea8:	f043 0320 	orr.w	r3, r3, #32
 8007eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8007eae:	4b30      	ldr	r3, [pc, #192]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eb2:	f003 0320 	and.w	r3, r3, #32
 8007eb6:	613b      	str	r3, [r7, #16]
 8007eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60fb      	str	r3, [r7, #12]
 8007ebe:	4b2c      	ldr	r3, [pc, #176]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007ec4:	f043 0304 	orr.w	r3, r3, #4
 8007ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007eca:	4b29      	ldr	r3, [pc, #164]	@ (8007f70 <HAL_UART_MspInit+0x294>)
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	60fb      	str	r3, [r7, #12]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ed6:	23c0      	movs	r3, #192	@ 0xc0
 8007ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eda:	2302      	movs	r3, #2
 8007edc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ee2:	2303      	movs	r3, #3
 8007ee4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007ee6:	2308      	movs	r3, #8
 8007ee8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007eea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4827      	ldr	r0, [pc, #156]	@ (8007f90 <HAL_UART_MspInit+0x2b4>)
 8007ef2:	f001 fefb 	bl	8009cec <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8007ef6:	4b27      	ldr	r3, [pc, #156]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007ef8:	4a27      	ldr	r2, [pc, #156]	@ (8007f98 <HAL_UART_MspInit+0x2bc>)
 8007efa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007efc:	4b25      	ldr	r3, [pc, #148]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007efe:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8007f02:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f04:	4b23      	ldr	r3, [pc, #140]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f0a:	4b22      	ldr	r3, [pc, #136]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007f10:	4b20      	ldr	r3, [pc, #128]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007f16:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007f18:	4b1e      	ldr	r3, [pc, #120]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007f24:	4b1b      	ldr	r3, [pc, #108]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f2a:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007f2c:	4b19      	ldr	r3, [pc, #100]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007f32:	4b18      	ldr	r3, [pc, #96]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8007f38:	4816      	ldr	r0, [pc, #88]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f3a:	f001 fa5d 	bl	80093f8 <HAL_DMA_Init>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d001      	beq.n	8007f48 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8007f44:	f7fd ff10 	bl	8005d68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a12      	ldr	r2, [pc, #72]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f4c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007f4e:	4a11      	ldr	r2, [pc, #68]	@ (8007f94 <HAL_UART_MspInit+0x2b8>)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007f54:	2200      	movs	r2, #0
 8007f56:	2100      	movs	r1, #0
 8007f58:	2047      	movs	r0, #71	@ 0x47
 8007f5a:	f001 fa08 	bl	800936e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007f5e:	2047      	movs	r0, #71	@ 0x47
 8007f60:	f001 fa21 	bl	80093a6 <HAL_NVIC_EnableIRQ>
}
 8007f64:	bf00      	nop
 8007f66:	3738      	adds	r7, #56	@ 0x38
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40004c00 	.word	0x40004c00
 8007f70:	40023800 	.word	0x40023800
 8007f74:	40020000 	.word	0x40020000
 8007f78:	20001b50 	.word	0x20001b50
 8007f7c:	40026070 	.word	0x40026070
 8007f80:	40004400 	.word	0x40004400
 8007f84:	20001bb0 	.word	0x20001bb0
 8007f88:	400260a0 	.word	0x400260a0
 8007f8c:	40011400 	.word	0x40011400
 8007f90:	40020800 	.word	0x40020800
 8007f94:	20001c10 	.word	0x20001c10
 8007f98:	40026440 	.word	0x40026440

08007f9c <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a24      	ldr	r2, [pc, #144]	@ (800803c <HAL_UART_MspDeInit+0xa0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d112      	bne.n	8007fd4 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8007fae:	4b24      	ldr	r3, [pc, #144]	@ (8008040 <HAL_UART_MspDeInit+0xa4>)
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb2:	4a23      	ldr	r2, [pc, #140]	@ (8008040 <HAL_UART_MspDeInit+0xa4>)
 8007fb4:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8007fb8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8007fba:	2103      	movs	r1, #3
 8007fbc:	4821      	ldr	r0, [pc, #132]	@ (8008044 <HAL_UART_MspDeInit+0xa8>)
 8007fbe:	f002 f829 	bl	800a014 <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f001 fac4 	bl	8009554 <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8007fcc:	2034      	movs	r0, #52	@ 0x34
 8007fce:	f001 f9f8 	bl	80093c2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8007fd2:	e02e      	b.n	8008032 <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART2)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8008048 <HAL_UART_MspDeInit+0xac>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d112      	bne.n	8008004 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 8007fde:	4b18      	ldr	r3, [pc, #96]	@ (8008040 <HAL_UART_MspDeInit+0xa4>)
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fe2:	4a17      	ldr	r2, [pc, #92]	@ (8008040 <HAL_UART_MspDeInit+0xa4>)
 8007fe4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007fe8:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007fea:	210c      	movs	r1, #12
 8007fec:	4815      	ldr	r0, [pc, #84]	@ (8008044 <HAL_UART_MspDeInit+0xa8>)
 8007fee:	f002 f811 	bl	800a014 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f001 faac 	bl	8009554 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8007ffc:	2026      	movs	r0, #38	@ 0x26
 8007ffe:	f001 f9e0 	bl	80093c2 <HAL_NVIC_DisableIRQ>
}
 8008002:	e016      	b.n	8008032 <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART6)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a10      	ldr	r2, [pc, #64]	@ (800804c <HAL_UART_MspDeInit+0xb0>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d111      	bne.n	8008032 <HAL_UART_MspDeInit+0x96>
    __HAL_RCC_USART6_CLK_DISABLE();
 800800e:	4b0c      	ldr	r3, [pc, #48]	@ (8008040 <HAL_UART_MspDeInit+0xa4>)
 8008010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008012:	4a0b      	ldr	r2, [pc, #44]	@ (8008040 <HAL_UART_MspDeInit+0xa4>)
 8008014:	f023 0320 	bic.w	r3, r3, #32
 8008018:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 800801a:	21c0      	movs	r1, #192	@ 0xc0
 800801c:	480c      	ldr	r0, [pc, #48]	@ (8008050 <HAL_UART_MspDeInit+0xb4>)
 800801e:	f001 fff9 	bl	800a014 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008026:	4618      	mov	r0, r3
 8008028:	f001 fa94 	bl	8009554 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 800802c:	2047      	movs	r0, #71	@ 0x47
 800802e:	f001 f9c8 	bl	80093c2 <HAL_NVIC_DisableIRQ>
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40004c00 	.word	0x40004c00
 8008040:	40023800 	.word	0x40023800
 8008044:	40020000 	.word	0x40020000
 8008048:	40004400 	.word	0x40004400
 800804c:	40011400 	.word	0x40011400
 8008050:	40020800 	.word	0x40020800

08008054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008054:	b480      	push	{r7}
 8008056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008058:	bf00      	nop
 800805a:	e7fd      	b.n	8008058 <NMI_Handler+0x4>

0800805c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008060:	bf00      	nop
 8008062:	e7fd      	b.n	8008060 <HardFault_Handler+0x4>

08008064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008064:	b480      	push	{r7}
 8008066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008068:	bf00      	nop
 800806a:	e7fd      	b.n	8008068 <MemManage_Handler+0x4>

0800806c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008070:	bf00      	nop
 8008072:	e7fd      	b.n	8008070 <BusFault_Handler+0x4>

08008074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008074:	b480      	push	{r7}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <UsageFault_Handler+0x4>

0800807c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800807c:	b480      	push	{r7}
 800807e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008080:	bf00      	nop
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr

0800808a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800808a:	b480      	push	{r7}
 800808c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800808e:	bf00      	nop
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008098:	b480      	push	{r7}
 800809a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800809c:	bf00      	nop
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080aa:	f000 fc0d 	bl	80088c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080ae:	bf00      	nop
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80080b6:	2008      	movs	r0, #8
 80080b8:	f002 f8ba 	bl	800a230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80080bc:	bf00      	nop
 80080be:	bd80      	pop	{r7, pc}

080080c0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80080c4:	2010      	movs	r0, #16
 80080c6:	f002 f8b3 	bl	800a230 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80080ca:	bf00      	nop
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80080d4:	4802      	ldr	r0, [pc, #8]	@ (80080e0 <DMA1_Stream0_IRQHandler+0x10>)
 80080d6:	f001 fb85 	bl	80097e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	20001920 	.word	0x20001920

080080e4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80080e8:	4802      	ldr	r0, [pc, #8]	@ (80080f4 <DMA1_Stream4_IRQHandler+0x10>)
 80080ea:	f001 fb7b 	bl	80097e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80080ee:	bf00      	nop
 80080f0:	bd80      	pop	{r7, pc}
 80080f2:	bf00      	nop
 80080f4:	20001b50 	.word	0x20001b50

080080f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80080fc:	4802      	ldr	r0, [pc, #8]	@ (8008108 <DMA1_Stream6_IRQHandler+0x10>)
 80080fe:	f001 fb71 	bl	80097e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8008102:	bf00      	nop
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	20001bb0 	.word	0x20001bb0

0800810c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008110:	4802      	ldr	r0, [pc, #8]	@ (800811c <TIM2_IRQHandler+0x10>)
 8008112:	f006 fbe7 	bl	800e8e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008116:	bf00      	nop
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20001a30 	.word	0x20001a30

08008120 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8008124:	4802      	ldr	r0, [pc, #8]	@ (8008130 <I2C1_EV_IRQHandler+0x10>)
 8008126:	f002 fedf 	bl	800aee8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800812a:	bf00      	nop
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	20001878 	.word	0x20001878

08008134 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008138:	4802      	ldr	r0, [pc, #8]	@ (8008144 <USART2_IRQHandler+0x10>)
 800813a:	f007 f9c9 	bl	800f4d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800813e:	bf00      	nop
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20001ac0 	.word	0x20001ac0

08008148 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800814c:	4802      	ldr	r0, [pc, #8]	@ (8008158 <UART4_IRQHandler+0x10>)
 800814e:	f007 f9bf 	bl	800f4d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8008152:	bf00      	nop
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	20001a78 	.word	0x20001a78

0800815c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8008160:	4802      	ldr	r0, [pc, #8]	@ (800816c <DMA2_Stream2_IRQHandler+0x10>)
 8008162:	f001 fb3f 	bl	80097e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008166:	bf00      	nop
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	20001c10 	.word	0x20001c10

08008170 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8008174:	4802      	ldr	r0, [pc, #8]	@ (8008180 <USART6_IRQHandler+0x10>)
 8008176:	f007 f9ab 	bl	800f4d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800817a:	bf00      	nop
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20001b08 	.word	0x20001b08

08008184 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  return 1;
 8008188:	2301      	movs	r3, #1
}
 800818a:	4618      	mov	r0, r3
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <_kill>:

int _kill(int pid, int sig)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800819e:	f00c fd07 	bl	8014bb0 <__errno>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2216      	movs	r2, #22
 80081a6:	601a      	str	r2, [r3, #0]
  return -1;
 80081a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <_exit>:

void _exit (int status)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80081bc:	f04f 31ff 	mov.w	r1, #4294967295
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f7ff ffe7 	bl	8008194 <_kill>
  while (1) {}    /* Make sure we hang here */
 80081c6:	bf00      	nop
 80081c8:	e7fd      	b.n	80081c6 <_exit+0x12>

080081ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b086      	sub	sp, #24
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081d6:	2300      	movs	r3, #0
 80081d8:	617b      	str	r3, [r7, #20]
 80081da:	e00a      	b.n	80081f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80081dc:	f3af 8000 	nop.w
 80081e0:	4601      	mov	r1, r0
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	1c5a      	adds	r2, r3, #1
 80081e6:	60ba      	str	r2, [r7, #8]
 80081e8:	b2ca      	uxtb	r2, r1
 80081ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	3301      	adds	r3, #1
 80081f0:	617b      	str	r3, [r7, #20]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	dbf0      	blt.n	80081dc <_read+0x12>
  }

  return len;
 80081fa:	687b      	ldr	r3, [r7, #4]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	e009      	b.n	800822a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	1c5a      	adds	r2, r3, #1
 800821a:	60ba      	str	r2, [r7, #8]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	4618      	mov	r0, r3
 8008220:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	3301      	adds	r3, #1
 8008228:	617b      	str	r3, [r7, #20]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	429a      	cmp	r2, r3
 8008230:	dbf1      	blt.n	8008216 <_write+0x12>
  }
  return len;
 8008232:	687b      	ldr	r3, [r7, #4]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <_close>:

int _close(int file)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008264:	605a      	str	r2, [r3, #4]
  return 0;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <_isatty>:

int _isatty(int file)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800827c:	2301      	movs	r3, #1
}
 800827e:	4618      	mov	r0, r3
 8008280:	370c      	adds	r7, #12
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr

0800828a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	60b9      	str	r1, [r7, #8]
 8008294:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3714      	adds	r7, #20
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80082ac:	4a14      	ldr	r2, [pc, #80]	@ (8008300 <_sbrk+0x5c>)
 80082ae:	4b15      	ldr	r3, [pc, #84]	@ (8008304 <_sbrk+0x60>)
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80082b8:	4b13      	ldr	r3, [pc, #76]	@ (8008308 <_sbrk+0x64>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80082c0:	4b11      	ldr	r3, [pc, #68]	@ (8008308 <_sbrk+0x64>)
 80082c2:	4a12      	ldr	r2, [pc, #72]	@ (800830c <_sbrk+0x68>)
 80082c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80082c6:	4b10      	ldr	r3, [pc, #64]	@ (8008308 <_sbrk+0x64>)
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4413      	add	r3, r2
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d207      	bcs.n	80082e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80082d4:	f00c fc6c 	bl	8014bb0 <__errno>
 80082d8:	4603      	mov	r3, r0
 80082da:	220c      	movs	r2, #12
 80082dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80082de:	f04f 33ff 	mov.w	r3, #4294967295
 80082e2:	e009      	b.n	80082f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80082e4:	4b08      	ldr	r3, [pc, #32]	@ (8008308 <_sbrk+0x64>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80082ea:	4b07      	ldr	r3, [pc, #28]	@ (8008308 <_sbrk+0x64>)
 80082ec:	681a      	ldr	r2, [r3, #0]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4413      	add	r3, r2
 80082f2:	4a05      	ldr	r2, [pc, #20]	@ (8008308 <_sbrk+0x64>)
 80082f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80082f6:	68fb      	ldr	r3, [r7, #12]
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	20020000 	.word	0x20020000
 8008304:	00000400 	.word	0x00000400
 8008308:	20001f14 	.word	0x20001f14
 800830c:	200040c0 	.word	0x200040c0

08008310 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008310:	b480      	push	{r7}
 8008312:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008314:	4b06      	ldr	r3, [pc, #24]	@ (8008330 <SystemInit+0x20>)
 8008316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800831a:	4a05      	ldr	r2, [pc, #20]	@ (8008330 <SystemInit+0x20>)
 800831c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008320:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008324:	bf00      	nop
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	e000ed00 	.word	0xe000ed00

08008334 <W25Q_Init>:
static void Add_to_Buffer(uint8_t *data);
static void W25Q_EraseSector_NonBlocking(uint16_t sector);
static void W25Q_WritePage_NonBlocking(uint16_t page, uint8_t offset, uint32_t size, uint8_t *txBuffer);

void W25Q_Init(SPI_HandleTypeDef *w25q_spi)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	W25Q_SPI = w25q_spi;
 800833c:	4a04      	ldr	r2, [pc, #16]	@ (8008350 <W25Q_Init+0x1c>)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6013      	str	r3, [r2, #0]
	W25Q_Reset();
 8008342:	f000 f807 	bl	8008354 <W25Q_Reset>
}
 8008346:	bf00      	nop
 8008348:	3708      	adds	r7, #8
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	20001f18 	.word	0x20001f18

08008354 <W25Q_Reset>:

void W25Q_Reset(void)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
	uint8_t command[2];

	command[0] = 0x66;	// Enable reset
 800835a:	2366      	movs	r3, #102	@ 0x66
 800835c:	713b      	strb	r3, [r7, #4]
	command[1] = 0x99;	// Reset device
 800835e:	2399      	movs	r3, #153	@ 0x99
 8008360:	717b      	strb	r3, [r7, #5]

	CS_Low();
 8008362:	f000 f9bb 	bl	80086dc <CS_Low>
	HAL_SPI_Transmit(W25Q_SPI, command, 2, SPI_Timeout);
 8008366:	4b08      	ldr	r3, [pc, #32]	@ (8008388 <W25Q_Reset+0x34>)
 8008368:	6818      	ldr	r0, [r3, #0]
 800836a:	1d39      	adds	r1, r7, #4
 800836c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008370:	2202      	movs	r2, #2
 8008372:	f005 fcae 	bl	800dcd2 <HAL_SPI_Transmit>
	CS_High();
 8008376:	f000 f9bd 	bl	80086f4 <CS_High>
	HAL_Delay(50);
 800837a:	2032      	movs	r0, #50	@ 0x32
 800837c:	f000 fac4 	bl	8008908 <HAL_Delay>
}
 8008380:	bf00      	nop
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}
 8008388:	20001f18 	.word	0x20001f18

0800838c <W25Q_WriteToBufferFlushOnSectorFull>:
		remaining_bytes -= bytes_to_write;
	}
}

void W25Q_WriteToBufferFlushOnSectorFull(uint8_t *data)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
	// Sadece buffer'a ekle - ultra hızlı (~5μs)
	Add_to_Buffer(data);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f9e9 	bl	800876c <Add_to_Buffer>
	w25q_counter++;
 800839a:	4b5b      	ldr	r3, [pc, #364]	@ (8008508 <W25Q_WriteToBufferFlushOnSectorFull+0x17c>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	3301      	adds	r3, #1
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	4b59      	ldr	r3, [pc, #356]	@ (8008508 <W25Q_WriteToBufferFlushOnSectorFull+0x17c>)
 80083a4:	701a      	strb	r2, [r3, #0]

	// Buffer doldu mu?
	if(w25q_counter == 64)
 80083a6:	4b58      	ldr	r3, [pc, #352]	@ (8008508 <W25Q_WriteToBufferFlushOnSectorFull+0x17c>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	2b40      	cmp	r3, #64	@ 0x40
 80083ac:	d10e      	bne.n	80083cc <W25Q_WriteToBufferFlushOnSectorFull+0x40>
	{
		sector_finished = 1;
 80083ae:	4b57      	ldr	r3, [pc, #348]	@ (800850c <W25Q_WriteToBufferFlushOnSectorFull+0x180>)
 80083b0:	2201      	movs	r2, #1
 80083b2:	701a      	strb	r2, [r3, #0]
		w25q_counter = 0;
 80083b4:	4b54      	ldr	r3, [pc, #336]	@ (8008508 <W25Q_WriteToBufferFlushOnSectorFull+0x17c>)
 80083b6:	2200      	movs	r2, #0
 80083b8:	701a      	strb	r2, [r3, #0]
		current_buffer = (current_buffer == 1) ? 2 : 1;
 80083ba:	4b55      	ldr	r3, [pc, #340]	@ (8008510 <W25Q_WriteToBufferFlushOnSectorFull+0x184>)
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	2b01      	cmp	r3, #1
 80083c0:	d101      	bne.n	80083c6 <W25Q_WriteToBufferFlushOnSectorFull+0x3a>
 80083c2:	2202      	movs	r2, #2
 80083c4:	e000      	b.n	80083c8 <W25Q_WriteToBufferFlushOnSectorFull+0x3c>
 80083c6:	2201      	movs	r2, #1
 80083c8:	4b51      	ldr	r3, [pc, #324]	@ (8008510 <W25Q_WriteToBufferFlushOnSectorFull+0x184>)
 80083ca:	701a      	strb	r2, [r3, #0]
	}

	uint8_t status = Read_Status_Register_1();
 80083cc:	f000 f8b6 	bl	800853c <Read_Status_Register_1>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73fb      	strb	r3, [r7, #15]

	// Sector erase başlat (non-blocking)
	if(sector_finished == 1 && sector_erase_started == 0 && write_enable == 0 && (status & WIP_BUSY) == 0)
 80083d4:	4b4d      	ldr	r3, [pc, #308]	@ (800850c <W25Q_WriteToBufferFlushOnSectorFull+0x180>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d11c      	bne.n	8008416 <W25Q_WriteToBufferFlushOnSectorFull+0x8a>
 80083dc:	4b4d      	ldr	r3, [pc, #308]	@ (8008514 <W25Q_WriteToBufferFlushOnSectorFull+0x188>)
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d118      	bne.n	8008416 <W25Q_WriteToBufferFlushOnSectorFull+0x8a>
 80083e4:	4b4c      	ldr	r3, [pc, #304]	@ (8008518 <W25Q_WriteToBufferFlushOnSectorFull+0x18c>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d114      	bne.n	8008416 <W25Q_WriteToBufferFlushOnSectorFull+0x8a>
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	f003 0301 	and.w	r3, r3, #1
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10f      	bne.n	8008416 <W25Q_WriteToBufferFlushOnSectorFull+0x8a>
	{
		W25Q_EraseSector_NonBlocking((w25q_page / 16));
 80083f6:	4b49      	ldr	r3, [pc, #292]	@ (800851c <W25Q_WriteToBufferFlushOnSectorFull+0x190>)
 80083f8:	881b      	ldrh	r3, [r3, #0]
 80083fa:	091b      	lsrs	r3, r3, #4
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	4618      	mov	r0, r3
 8008400:	f000 f8bc 	bl	800857c <W25Q_EraseSector_NonBlocking>
		sector_erase_started = 1;
 8008404:	4b43      	ldr	r3, [pc, #268]	@ (8008514 <W25Q_WriteToBufferFlushOnSectorFull+0x188>)
 8008406:	2201      	movs	r2, #1
 8008408:	701a      	strb	r2, [r3, #0]
		w25q_page += 16;
 800840a:	4b44      	ldr	r3, [pc, #272]	@ (800851c <W25Q_WriteToBufferFlushOnSectorFull+0x190>)
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	3310      	adds	r3, #16
 8008410:	b29a      	uxth	r2, r3
 8008412:	4b42      	ldr	r3, [pc, #264]	@ (800851c <W25Q_WriteToBufferFlushOnSectorFull+0x190>)
 8008414:	801a      	strh	r2, [r3, #0]
	}

	// Erase tamamlandı mı?
	if(sector_erase_started == 1 && tx_timer_flag_w25q >= 5 && (status & WIP_BUSY) == 0)
 8008416:	4b3f      	ldr	r3, [pc, #252]	@ (8008514 <W25Q_WriteToBufferFlushOnSectorFull+0x188>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d112      	bne.n	8008444 <W25Q_WriteToBufferFlushOnSectorFull+0xb8>
 800841e:	4b40      	ldr	r3, [pc, #256]	@ (8008520 <W25Q_WriteToBufferFlushOnSectorFull+0x194>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b04      	cmp	r3, #4
 8008426:	d90d      	bls.n	8008444 <W25Q_WriteToBufferFlushOnSectorFull+0xb8>
 8008428:	7bfb      	ldrb	r3, [r7, #15]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d108      	bne.n	8008444 <W25Q_WriteToBufferFlushOnSectorFull+0xb8>
	{
		sector_erase_started = 0;
 8008432:	4b38      	ldr	r3, [pc, #224]	@ (8008514 <W25Q_WriteToBufferFlushOnSectorFull+0x188>)
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]
		tx_timer_flag_w25q = 0;
 8008438:	4b39      	ldr	r3, [pc, #228]	@ (8008520 <W25Q_WriteToBufferFlushOnSectorFull+0x194>)
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]
		write_enable = 1;
 800843e:	4b36      	ldr	r3, [pc, #216]	@ (8008518 <W25Q_WriteToBufferFlushOnSectorFull+0x18c>)
 8008440:	2201      	movs	r2, #1
 8008442:	701a      	strb	r2, [r3, #0]
	}

	static uint8_t counter_ = 0;

	// Write işlemi tamamlandı mı?
	if(page_write_started == 1 && (status & WIP_BUSY) == 0)
 8008444:	4b37      	ldr	r3, [pc, #220]	@ (8008524 <W25Q_WriteToBufferFlushOnSectorFull+0x198>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d11f      	bne.n	800848c <W25Q_WriteToBufferFlushOnSectorFull+0x100>
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	f003 0301 	and.w	r3, r3, #1
 8008452:	2b00      	cmp	r3, #0
 8008454:	d11a      	bne.n	800848c <W25Q_WriteToBufferFlushOnSectorFull+0x100>
	{
		page_write_started = 0;
 8008456:	4b33      	ldr	r3, [pc, #204]	@ (8008524 <W25Q_WriteToBufferFlushOnSectorFull+0x198>)
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
		Write_Disable();
 800845c:	f000 f96e 	bl	800873c <Write_Disable>
		counter_++;
 8008460:	4b31      	ldr	r3, [pc, #196]	@ (8008528 <W25Q_WriteToBufferFlushOnSectorFull+0x19c>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	b2da      	uxtb	r2, r3
 8008468:	4b2f      	ldr	r3, [pc, #188]	@ (8008528 <W25Q_WriteToBufferFlushOnSectorFull+0x19c>)
 800846a:	701a      	strb	r2, [r3, #0]
		if(counter_ == 16)
 800846c:	4b2e      	ldr	r3, [pc, #184]	@ (8008528 <W25Q_WriteToBufferFlushOnSectorFull+0x19c>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b10      	cmp	r3, #16
 8008472:	d10b      	bne.n	800848c <W25Q_WriteToBufferFlushOnSectorFull+0x100>
		{
			counter_ = 0;
 8008474:	4b2c      	ldr	r3, [pc, #176]	@ (8008528 <W25Q_WriteToBufferFlushOnSectorFull+0x19c>)
 8008476:	2200      	movs	r2, #0
 8008478:	701a      	strb	r2, [r3, #0]
			sector_finished = 0;
 800847a:	4b24      	ldr	r3, [pc, #144]	@ (800850c <W25Q_WriteToBufferFlushOnSectorFull+0x180>)
 800847c:	2200      	movs	r2, #0
 800847e:	701a      	strb	r2, [r3, #0]
			write_enable = 0;
 8008480:	4b25      	ldr	r3, [pc, #148]	@ (8008518 <W25Q_WriteToBufferFlushOnSectorFull+0x18c>)
 8008482:	2200      	movs	r2, #0
 8008484:	701a      	strb	r2, [r3, #0]
			read_enable = 1;
 8008486:	4b29      	ldr	r3, [pc, #164]	@ (800852c <W25Q_WriteToBufferFlushOnSectorFull+0x1a0>)
 8008488:	2201      	movs	r2, #1
 800848a:	701a      	strb	r2, [r3, #0]
		}
	}

	// Write işlemi başlat (non-blocking)
	if(sector_finished == 1 && write_enable == 1 && (status & WIP_BUSY) == 0 && page_write_started == 0)
 800848c:	4b1f      	ldr	r3, [pc, #124]	@ (800850c <W25Q_WriteToBufferFlushOnSectorFull+0x180>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d134      	bne.n	80084fe <W25Q_WriteToBufferFlushOnSectorFull+0x172>
 8008494:	4b20      	ldr	r3, [pc, #128]	@ (8008518 <W25Q_WriteToBufferFlushOnSectorFull+0x18c>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d130      	bne.n	80084fe <W25Q_WriteToBufferFlushOnSectorFull+0x172>
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d12b      	bne.n	80084fe <W25Q_WriteToBufferFlushOnSectorFull+0x172>
 80084a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008524 <W25Q_WriteToBufferFlushOnSectorFull+0x198>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d127      	bne.n	80084fe <W25Q_WriteToBufferFlushOnSectorFull+0x172>
	{
		// Non-blocking burst write
		if(current_buffer == 1)
 80084ae:	4b18      	ldr	r3, [pc, #96]	@ (8008510 <W25Q_WriteToBufferFlushOnSectorFull+0x184>)
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d10d      	bne.n	80084d2 <W25Q_WriteToBufferFlushOnSectorFull+0x146>
		{
			W25Q_WritePage_NonBlocking(non_writen_page, 0, 256, &w25q_txBuffer_2[counter_ * 256]);
 80084b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008530 <W25Q_WriteToBufferFlushOnSectorFull+0x1a4>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008528 <W25Q_WriteToBufferFlushOnSectorFull+0x19c>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	021b      	lsls	r3, r3, #8
 80084c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008534 <W25Q_WriteToBufferFlushOnSectorFull+0x1a8>)
 80084c4:	4413      	add	r3, r2
 80084c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084ca:	2100      	movs	r1, #0
 80084cc:	f000 f88c 	bl	80085e8 <W25Q_WritePage_NonBlocking>
 80084d0:	e00c      	b.n	80084ec <W25Q_WriteToBufferFlushOnSectorFull+0x160>
		}
		else
		{
			W25Q_WritePage_NonBlocking(non_writen_page, 0, 256, &w25q_txBuffer_1[counter_ * 256]);
 80084d2:	4b17      	ldr	r3, [pc, #92]	@ (8008530 <W25Q_WriteToBufferFlushOnSectorFull+0x1a4>)
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	4b13      	ldr	r3, [pc, #76]	@ (8008528 <W25Q_WriteToBufferFlushOnSectorFull+0x19c>)
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	021b      	lsls	r3, r3, #8
 80084de:	4a16      	ldr	r2, [pc, #88]	@ (8008538 <W25Q_WriteToBufferFlushOnSectorFull+0x1ac>)
 80084e0:	4413      	add	r3, r2
 80084e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80084e6:	2100      	movs	r1, #0
 80084e8:	f000 f87e 	bl	80085e8 <W25Q_WritePage_NonBlocking>
		}
		non_writen_page++;
 80084ec:	4b10      	ldr	r3, [pc, #64]	@ (8008530 <W25Q_WriteToBufferFlushOnSectorFull+0x1a4>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	3301      	adds	r3, #1
 80084f2:	b2da      	uxtb	r2, r3
 80084f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008530 <W25Q_WriteToBufferFlushOnSectorFull+0x1a4>)
 80084f6:	701a      	strb	r2, [r3, #0]
		page_write_started = 1;
 80084f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008524 <W25Q_WriteToBufferFlushOnSectorFull+0x198>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	701a      	strb	r2, [r3, #0]
	}
}
 80084fe:	bf00      	nop
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	20003f24 	.word	0x20003f24
 800850c:	20003f25 	.word	0x20003f25
 8008510:	2000003c 	.word	0x2000003c
 8008514:	20001f1d 	.word	0x20001f1d
 8008518:	20003f26 	.word	0x20003f26
 800851c:	20003f20 	.word	0x20003f20
 8008520:	20001f1c 	.word	0x20001f1c
 8008524:	20003f23 	.word	0x20003f23
 8008528:	20003f27 	.word	0x20003f27
 800852c:	20001f1e 	.word	0x20001f1e
 8008530:	20003f22 	.word	0x20003f22
 8008534:	20002f20 	.word	0x20002f20
 8008538:	20001f20 	.word	0x20001f20

0800853c <Read_Status_Register_1>:

uint8_t Read_Status_Register_1(void)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
	uint8_t command = 0x05;	// read status register 1
 8008542:	2305      	movs	r3, #5
 8008544:	71fb      	strb	r3, [r7, #7]
	uint8_t response;

	CS_Low();
 8008546:	f000 f8c9 	bl	80086dc <CS_Low>
	HAL_SPI_Transmit(W25Q_SPI, &command, 1, SPI_Timeout);
 800854a:	4b0b      	ldr	r3, [pc, #44]	@ (8008578 <Read_Status_Register_1+0x3c>)
 800854c:	6818      	ldr	r0, [r3, #0]
 800854e:	1df9      	adds	r1, r7, #7
 8008550:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008554:	2201      	movs	r2, #1
 8008556:	f005 fbbc 	bl	800dcd2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(W25Q_SPI, &response, 1, SPI_Timeout);
 800855a:	4b07      	ldr	r3, [pc, #28]	@ (8008578 <Read_Status_Register_1+0x3c>)
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	1db9      	adds	r1, r7, #6
 8008560:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008564:	2201      	movs	r2, #1
 8008566:	f005 fcf8 	bl	800df5a <HAL_SPI_Receive>
	CS_High();
 800856a:	f000 f8c3 	bl	80086f4 <CS_High>

	return response;
 800856e:	79bb      	ldrb	r3, [r7, #6]
}
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	20001f18 	.word	0x20001f18

0800857c <W25Q_EraseSector_NonBlocking>:

// ULTRA FAST: Non-blocking sector erase
static void W25Q_EraseSector_NonBlocking(uint16_t sector)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af00      	add	r7, sp, #0
 8008582:	4603      	mov	r3, r0
 8008584:	80fb      	strh	r3, [r7, #6]
	uint32_t memAddress = sector * 16 * 256;
 8008586:	88fb      	ldrh	r3, [r7, #6]
 8008588:	031b      	lsls	r3, r3, #12
 800858a:	617b      	str	r3, [r7, #20]
	uint8_t command[4];

	command[0] = 0x20;	// Sector erase
 800858c:	2320      	movs	r3, #32
 800858e:	743b      	strb	r3, [r7, #16]
	command[1] = (memAddress >> 16) & 0xFF;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	0c1b      	lsrs	r3, r3, #16
 8008594:	b2db      	uxtb	r3, r3
 8008596:	747b      	strb	r3, [r7, #17]
	command[2] = (memAddress >> 8) & 0xFF;
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	0a1b      	lsrs	r3, r3, #8
 800859c:	b2db      	uxtb	r3, r3
 800859e:	74bb      	strb	r3, [r7, #18]
	command[3] = memAddress & 0xFF;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	74fb      	strb	r3, [r7, #19]

	// Hızlı write enable - delay yok
	uint8_t we_cmd = 0x06;
 80085a6:	2306      	movs	r3, #6
 80085a8:	73fb      	strb	r3, [r7, #15]
	CS_Low();
 80085aa:	f000 f897 	bl	80086dc <CS_Low>
	HAL_SPI_Transmit(W25Q_SPI, &we_cmd, 1, 100);
 80085ae:	4b0d      	ldr	r3, [pc, #52]	@ (80085e4 <W25Q_EraseSector_NonBlocking+0x68>)
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	f107 010f 	add.w	r1, r7, #15
 80085b6:	2364      	movs	r3, #100	@ 0x64
 80085b8:	2201      	movs	r2, #1
 80085ba:	f005 fb8a 	bl	800dcd2 <HAL_SPI_Transmit>
	CS_High();
 80085be:	f000 f899 	bl	80086f4 <CS_High>

	// Erase komutunu gönder - non-blocking
	CS_Low();
 80085c2:	f000 f88b 	bl	80086dc <CS_Low>
	HAL_SPI_Transmit(W25Q_SPI, command, 4, 100);
 80085c6:	4b07      	ldr	r3, [pc, #28]	@ (80085e4 <W25Q_EraseSector_NonBlocking+0x68>)
 80085c8:	6818      	ldr	r0, [r3, #0]
 80085ca:	f107 0110 	add.w	r1, r7, #16
 80085ce:	2364      	movs	r3, #100	@ 0x64
 80085d0:	2204      	movs	r2, #4
 80085d2:	f005 fb7e 	bl	800dcd2 <HAL_SPI_Transmit>
	CS_High();
 80085d6:	f000 f88d 	bl	80086f4 <CS_High>

	// Bekleme yok! Background'da erase devam eder
}
 80085da:	bf00      	nop
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20001f18 	.word	0x20001f18

080085e8 <W25Q_WritePage_NonBlocking>:

static void W25Q_WritePage_NonBlocking(uint16_t page, uint8_t offset, uint32_t size, uint8_t *txBuffer)
{
 80085e8:	b590      	push	{r4, r7, lr}
 80085ea:	b0c7      	sub	sp, #284	@ 0x11c
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	4604      	mov	r4, r0
 80085f0:	4608      	mov	r0, r1
 80085f2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80085f6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80085fa:	600a      	str	r2, [r1, #0]
 80085fc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8008600:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800860a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800860e:	4622      	mov	r2, r4
 8008610:	801a      	strh	r2, [r3, #0]
 8008612:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008616:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 800861a:	4602      	mov	r2, r0
 800861c:	701a      	strb	r2, [r3, #0]
	uint32_t memAddress = (page * 256) + offset;
 800861e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008622:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8008626:	881b      	ldrh	r3, [r3, #0]
 8008628:	021a      	lsls	r2, r3, #8
 800862a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800862e:	f2a3 130b 	subw	r3, r3, #267	@ 0x10b
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	4413      	add	r3, r2
 8008636:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	uint8_t data[260];

	data[0] = 0x02;	// Page program
 800863a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800863e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008642:	2202      	movs	r2, #2
 8008644:	701a      	strb	r2, [r3, #0]
	data[1] = (memAddress >> 16) & 0xFF;
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	b2da      	uxtb	r2, r3
 800864e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008656:	705a      	strb	r2, [r3, #1]
	data[2] = (memAddress >> 8) & 0xFF;
 8008658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800865c:	0a1b      	lsrs	r3, r3, #8
 800865e:	b2da      	uxtb	r2, r3
 8008660:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008668:	709a      	strb	r2, [r3, #2]
	data[3] = memAddress & 0XFF;
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866e:	b2da      	uxtb	r2, r3
 8008670:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8008674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008678:	70da      	strb	r2, [r3, #3]

	memcpy(&data[4], txBuffer, 256);
 800867a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800867e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8008682:	f107 0210 	add.w	r2, r7, #16
 8008686:	1d10      	adds	r0, r2, #4
 8008688:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800868c:	6819      	ldr	r1, [r3, #0]
 800868e:	f00c fabc 	bl	8014c0a <memcpy>

	Write_Enable();
 8008692:	f000 f83b 	bl	800870c <Write_Enable>
	if((Read_Status_Register_1() & WRITE_ENABLED) != 0)
 8008696:	f7ff ff51 	bl	800853c <Read_Status_Register_1>
 800869a:	4603      	mov	r3, r0
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d013      	beq.n	80086cc <W25Q_WritePage_NonBlocking+0xe4>
	{
		CS_Low();
 80086a4:	f000 f81a 	bl	80086dc <CS_Low>
		HAL_SPI_Transmit(W25Q_SPI, data, (size + 4), SPI_Timeout);
 80086a8:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <W25Q_WritePage_NonBlocking+0xf0>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80086b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	3304      	adds	r3, #4
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	f107 0110 	add.w	r1, r7, #16
 80086c0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80086c4:	f005 fb05 	bl	800dcd2 <HAL_SPI_Transmit>
		CS_High();
 80086c8:	f000 f814 	bl	80086f4 <CS_High>
	}
	//Write_Disable();
}
 80086cc:	bf00      	nop
 80086ce:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd90      	pop	{r4, r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20001f18 	.word	0x20001f18

080086dc <CS_Low>:

static void CS_Low(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_RESET);
 80086e0:	2200      	movs	r2, #0
 80086e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086e6:	4802      	ldr	r0, [pc, #8]	@ (80086f0 <CS_Low+0x14>)
 80086e8:	f001 fd88 	bl	800a1fc <HAL_GPIO_WritePin>
}
 80086ec:	bf00      	nop
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	40020000 	.word	0x40020000

080086f4 <CS_High>:

static void CS_High(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_Port, CS_Pin, GPIO_PIN_SET);
 80086f8:	2201      	movs	r2, #1
 80086fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80086fe:	4802      	ldr	r0, [pc, #8]	@ (8008708 <CS_High+0x14>)
 8008700:	f001 fd7c 	bl	800a1fc <HAL_GPIO_WritePin>
}
 8008704:	bf00      	nop
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40020000 	.word	0x40020000

0800870c <Write_Enable>:

static void Write_Enable(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
	uint8_t command = 0x06;	// Write enable
 8008712:	2306      	movs	r3, #6
 8008714:	71fb      	strb	r3, [r7, #7]

	CS_Low();
 8008716:	f7ff ffe1 	bl	80086dc <CS_Low>
	HAL_SPI_Transmit(W25Q_SPI, &command, 1, SPI_Timeout);
 800871a:	4b07      	ldr	r3, [pc, #28]	@ (8008738 <Write_Enable+0x2c>)
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	1df9      	adds	r1, r7, #7
 8008720:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008724:	2201      	movs	r2, #1
 8008726:	f005 fad4 	bl	800dcd2 <HAL_SPI_Transmit>
	CS_High();
 800872a:	f7ff ffe3 	bl	80086f4 <CS_High>
	// HAL_Delay(5) kaldırıldı - performans için
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
 8008736:	bf00      	nop
 8008738:	20001f18 	.word	0x20001f18

0800873c <Write_Disable>:

static void Write_Disable(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b082      	sub	sp, #8
 8008740:	af00      	add	r7, sp, #0
	uint8_t command = 0x04;	// Write disable
 8008742:	2304      	movs	r3, #4
 8008744:	71fb      	strb	r3, [r7, #7]

	CS_Low();
 8008746:	f7ff ffc9 	bl	80086dc <CS_Low>
	HAL_SPI_Transmit(W25Q_SPI, &command, 1, SPI_Timeout);
 800874a:	4b07      	ldr	r3, [pc, #28]	@ (8008768 <Write_Disable+0x2c>)
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	1df9      	adds	r1, r7, #7
 8008750:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008754:	2201      	movs	r2, #1
 8008756:	f005 fabc 	bl	800dcd2 <HAL_SPI_Transmit>
	CS_High();
 800875a:	f7ff ffcb 	bl	80086f4 <CS_High>
	// HAL_Delay(5) kaldırıldı - performans için
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20001f18 	.word	0x20001f18

0800876c <Add_to_Buffer>:
		return remaining_bytes_;
	}
}

static void Add_to_Buffer(uint8_t *data_)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
	if(current_buffer == 1)
 8008774:	4b12      	ldr	r3, [pc, #72]	@ (80087c0 <Add_to_Buffer+0x54>)
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d10c      	bne.n	8008796 <Add_to_Buffer+0x2a>
	{
		uint16_t startIndex = w25q_counter * 64;
 800877c:	4b11      	ldr	r3, [pc, #68]	@ (80087c4 <Add_to_Buffer+0x58>)
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	019b      	lsls	r3, r3, #6
 8008782:	81bb      	strh	r3, [r7, #12]
		memcpy(&w25q_txBuffer_1[startIndex], data_, 64);
 8008784:	89bb      	ldrh	r3, [r7, #12]
 8008786:	4a10      	ldr	r2, [pc, #64]	@ (80087c8 <Add_to_Buffer+0x5c>)
 8008788:	4413      	add	r3, r2
 800878a:	2240      	movs	r2, #64	@ 0x40
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	4618      	mov	r0, r3
 8008790:	f00c fa3b 	bl	8014c0a <memcpy>
		/*
		w25q_txBuffer_2[startIndex + 62] = 0xFF;
		w25q_txBuffer_2[startIndex + 63] = 0xFF;
		*/
	}
}
 8008794:	e00f      	b.n	80087b6 <Add_to_Buffer+0x4a>
	else if(current_buffer == 2)
 8008796:	4b0a      	ldr	r3, [pc, #40]	@ (80087c0 <Add_to_Buffer+0x54>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d10b      	bne.n	80087b6 <Add_to_Buffer+0x4a>
		uint16_t startIndex = w25q_counter * 64;
 800879e:	4b09      	ldr	r3, [pc, #36]	@ (80087c4 <Add_to_Buffer+0x58>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	019b      	lsls	r3, r3, #6
 80087a4:	81fb      	strh	r3, [r7, #14]
		memcpy(&w25q_txBuffer_2[startIndex], data_, 64);
 80087a6:	89fb      	ldrh	r3, [r7, #14]
 80087a8:	4a08      	ldr	r2, [pc, #32]	@ (80087cc <Add_to_Buffer+0x60>)
 80087aa:	4413      	add	r3, r2
 80087ac:	2240      	movs	r2, #64	@ 0x40
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4618      	mov	r0, r3
 80087b2:	f00c fa2a 	bl	8014c0a <memcpy>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	2000003c 	.word	0x2000003c
 80087c4:	20003f24 	.word	0x20003f24
 80087c8:	20001f20 	.word	0x20001f20
 80087cc:	20002f20 	.word	0x20002f20

080087d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80087d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008808 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80087d4:	f7ff fd9c 	bl	8008310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80087d8:	480c      	ldr	r0, [pc, #48]	@ (800880c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80087da:	490d      	ldr	r1, [pc, #52]	@ (8008810 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80087dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008814 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80087de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087e0:	e002      	b.n	80087e8 <LoopCopyDataInit>

080087e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087e6:	3304      	adds	r3, #4

080087e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80087ec:	d3f9      	bcc.n	80087e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80087ee:	4a0a      	ldr	r2, [pc, #40]	@ (8008818 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80087f0:	4c0a      	ldr	r4, [pc, #40]	@ (800881c <LoopFillZerobss+0x22>)
  movs r3, #0
 80087f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80087f4:	e001      	b.n	80087fa <LoopFillZerobss>

080087f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80087f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80087f8:	3204      	adds	r2, #4

080087fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80087fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80087fc:	d3fb      	bcc.n	80087f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80087fe:	f00c f9dd 	bl	8014bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008802:	f7fc fbb9 	bl	8004f78 <main>
  bx  lr    
 8008806:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008808:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800880c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008810:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8008814:	0801b228 	.word	0x0801b228
  ldr r2, =_sbss
 8008818:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 800881c:	200040c0 	.word	0x200040c0

08008820 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008820:	e7fe      	b.n	8008820 <ADC_IRQHandler>
	...

08008824 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008828:	4b0e      	ldr	r3, [pc, #56]	@ (8008864 <HAL_Init+0x40>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a0d      	ldr	r2, [pc, #52]	@ (8008864 <HAL_Init+0x40>)
 800882e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008832:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008834:	4b0b      	ldr	r3, [pc, #44]	@ (8008864 <HAL_Init+0x40>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a0a      	ldr	r2, [pc, #40]	@ (8008864 <HAL_Init+0x40>)
 800883a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800883e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008840:	4b08      	ldr	r3, [pc, #32]	@ (8008864 <HAL_Init+0x40>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a07      	ldr	r2, [pc, #28]	@ (8008864 <HAL_Init+0x40>)
 8008846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800884a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800884c:	2003      	movs	r0, #3
 800884e:	f000 fd83 	bl	8009358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008852:	200f      	movs	r0, #15
 8008854:	f000 f808 	bl	8008868 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008858:	f7fe ffac 	bl	80077b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	40023c00 	.word	0x40023c00

08008868 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008870:	4b12      	ldr	r3, [pc, #72]	@ (80088bc <HAL_InitTick+0x54>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	4b12      	ldr	r3, [pc, #72]	@ (80088c0 <HAL_InitTick+0x58>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	4619      	mov	r1, r3
 800887a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800887e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008882:	fbb2 f3f3 	udiv	r3, r2, r3
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fda9 	bl	80093de <HAL_SYSTICK_Config>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e00e      	b.n	80088b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b0f      	cmp	r3, #15
 800889a:	d80a      	bhi.n	80088b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800889c:	2200      	movs	r2, #0
 800889e:	6879      	ldr	r1, [r7, #4]
 80088a0:	f04f 30ff 	mov.w	r0, #4294967295
 80088a4:	f000 fd63 	bl	800936e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80088a8:	4a06      	ldr	r2, [pc, #24]	@ (80088c4 <HAL_InitTick+0x5c>)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
 80088b0:	e000      	b.n	80088b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20000038 	.word	0x20000038
 80088c0:	20000044 	.word	0x20000044
 80088c4:	20000040 	.word	0x20000040

080088c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80088cc:	4b06      	ldr	r3, [pc, #24]	@ (80088e8 <HAL_IncTick+0x20>)
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	461a      	mov	r2, r3
 80088d2:	4b06      	ldr	r3, [pc, #24]	@ (80088ec <HAL_IncTick+0x24>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4413      	add	r3, r2
 80088d8:	4a04      	ldr	r2, [pc, #16]	@ (80088ec <HAL_IncTick+0x24>)
 80088da:	6013      	str	r3, [r2, #0]
}
 80088dc:	bf00      	nop
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	20000044 	.word	0x20000044
 80088ec:	20003f28 	.word	0x20003f28

080088f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80088f0:	b480      	push	{r7}
 80088f2:	af00      	add	r7, sp, #0
  return uwTick;
 80088f4:	4b03      	ldr	r3, [pc, #12]	@ (8008904 <HAL_GetTick+0x14>)
 80088f6:	681b      	ldr	r3, [r3, #0]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	20003f28 	.word	0x20003f28

08008908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008910:	f7ff ffee 	bl	80088f0 <HAL_GetTick>
 8008914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008920:	d005      	beq.n	800892e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008922:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <HAL_Delay+0x44>)
 8008924:	781b      	ldrb	r3, [r3, #0]
 8008926:	461a      	mov	r2, r3
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4413      	add	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800892e:	bf00      	nop
 8008930:	f7ff ffde 	bl	80088f0 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	429a      	cmp	r2, r3
 800893e:	d8f7      	bhi.n	8008930 <HAL_Delay+0x28>
  {
  }
}
 8008940:	bf00      	nop
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20000044 	.word	0x20000044

08008950 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e033      	b.n	80089ce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d109      	bne.n	8008982 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7fe ff48 	bl	8007804 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	2b00      	cmp	r3, #0
 800898c:	d118      	bne.n	80089c0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008996:	f023 0302 	bic.w	r3, r3, #2
 800899a:	f043 0202 	orr.w	r2, r3, #2
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fae8 	bl	8008f78 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089b2:	f023 0303 	bic.w	r3, r3, #3
 80089b6:	f043 0201 	orr.w	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80089be:	e001      	b.n	80089c4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
	...

080089d8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80089e0:	2300      	movs	r3, #0
 80089e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d101      	bne.n	80089f2 <HAL_ADC_Start+0x1a>
 80089ee:	2302      	movs	r3, #2
 80089f0:	e0b2      	b.n	8008b58 <HAL_ADC_Start+0x180>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2201      	movs	r2, #1
 80089f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d018      	beq.n	8008a3a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f042 0201 	orr.w	r2, r2, #1
 8008a16:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008a18:	4b52      	ldr	r3, [pc, #328]	@ (8008b64 <HAL_ADC_Start+0x18c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a52      	ldr	r2, [pc, #328]	@ (8008b68 <HAL_ADC_Start+0x190>)
 8008a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a22:	0c9a      	lsrs	r2, r3, #18
 8008a24:	4613      	mov	r3, r2
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	4413      	add	r3, r2
 8008a2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008a2c:	e002      	b.n	8008a34 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	3b01      	subs	r3, #1
 8008a32:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1f9      	bne.n	8008a2e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d17a      	bne.n	8008b3e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8008a50:	f023 0301 	bic.w	r3, r3, #1
 8008a54:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8008a72:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a86:	d106      	bne.n	8008a96 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8c:	f023 0206 	bic.w	r2, r3, #6
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	645a      	str	r2, [r3, #68]	@ 0x44
 8008a94:	e002      	b.n	8008a9c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008aa4:	4b31      	ldr	r3, [pc, #196]	@ (8008b6c <HAL_ADC_Start+0x194>)
 8008aa6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8008ab0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f003 031f 	and.w	r3, r3, #31
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d12a      	bne.n	8008b14 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a2b      	ldr	r2, [pc, #172]	@ (8008b70 <HAL_ADC_Start+0x198>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d015      	beq.n	8008af4 <HAL_ADC_Start+0x11c>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a29      	ldr	r2, [pc, #164]	@ (8008b74 <HAL_ADC_Start+0x19c>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d105      	bne.n	8008ade <HAL_ADC_Start+0x106>
 8008ad2:	4b26      	ldr	r3, [pc, #152]	@ (8008b6c <HAL_ADC_Start+0x194>)
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	f003 031f 	and.w	r3, r3, #31
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a25      	ldr	r2, [pc, #148]	@ (8008b78 <HAL_ADC_Start+0x1a0>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d136      	bne.n	8008b56 <HAL_ADC_Start+0x17e>
 8008ae8:	4b20      	ldr	r3, [pc, #128]	@ (8008b6c <HAL_ADC_Start+0x194>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f003 0310 	and.w	r3, r3, #16
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d130      	bne.n	8008b56 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d129      	bne.n	8008b56 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	689a      	ldr	r2, [r3, #8]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008b10:	609a      	str	r2, [r3, #8]
 8008b12:	e020      	b.n	8008b56 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a15      	ldr	r2, [pc, #84]	@ (8008b70 <HAL_ADC_Start+0x198>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d11b      	bne.n	8008b56 <HAL_ADC_Start+0x17e>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d114      	bne.n	8008b56 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689a      	ldr	r2, [r3, #8]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008b3a:	609a      	str	r2, [r3, #8]
 8008b3c:	e00b      	b.n	8008b56 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b42:	f043 0210 	orr.w	r2, r3, #16
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b4e:	f043 0201 	orr.w	r2, r3, #1
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20000038 	.word	0x20000038
 8008b68:	431bde83 	.word	0x431bde83
 8008b6c:	40012300 	.word	0x40012300
 8008b70:	40012000 	.word	0x40012000
 8008b74:	40012100 	.word	0x40012100
 8008b78:	40012200 	.word	0x40012200

08008b7c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d101      	bne.n	8008b92 <HAL_ADC_Stop+0x16>
 8008b8e:	2302      	movs	r3, #2
 8008b90:	e021      	b.n	8008bd6 <HAL_ADC_Stop+0x5a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2201      	movs	r2, #1
 8008b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0201 	bic.w	r2, r2, #1
 8008ba8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d109      	bne.n	8008bcc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bbc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008bc0:	f023 0301 	bic.w	r3, r3, #1
 8008bc4:	f043 0201 	orr.w	r2, r3, #1
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
 8008bea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bfe:	d113      	bne.n	8008c28 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	689b      	ldr	r3, [r3, #8]
 8008c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c0e:	d10b      	bne.n	8008c28 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c14:	f043 0220 	orr.w	r2, r3, #32
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e063      	b.n	8008cf0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c28:	f7ff fe62 	bl	80088f0 <HAL_GetTick>
 8008c2c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008c2e:	e021      	b.n	8008c74 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c36:	d01d      	beq.n	8008c74 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d007      	beq.n	8008c4e <HAL_ADC_PollForConversion+0x6c>
 8008c3e:	f7ff fe57 	bl	80088f0 <HAL_GetTick>
 8008c42:	4602      	mov	r2, r0
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	1ad3      	subs	r3, r2, r3
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d212      	bcs.n	8008c74 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0302 	and.w	r3, r3, #2
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d00b      	beq.n	8008c74 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c60:	f043 0204 	orr.w	r2, r3, #4
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e03d      	b.n	8008cf0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0302 	and.w	r3, r3, #2
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d1d6      	bne.n	8008c30 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f06f 0212 	mvn.w	r2, #18
 8008c8a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d123      	bne.n	8008cee <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d11f      	bne.n	8008cee <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d006      	beq.n	8008cca <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d111      	bne.n	8008cee <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d105      	bne.n	8008cee <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce6:	f043 0201 	orr.w	r2, r3, #1
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
	...

08008d14 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d101      	bne.n	8008d30 <HAL_ADC_ConfigChannel+0x1c>
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	e113      	b.n	8008f58 <HAL_ADC_ConfigChannel+0x244>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b09      	cmp	r3, #9
 8008d3e:	d925      	bls.n	8008d8c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68d9      	ldr	r1, [r3, #12]
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	4613      	mov	r3, r2
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	4413      	add	r3, r2
 8008d54:	3b1e      	subs	r3, #30
 8008d56:	2207      	movs	r2, #7
 8008d58:	fa02 f303 	lsl.w	r3, r2, r3
 8008d5c:	43da      	mvns	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	400a      	ands	r2, r1
 8008d64:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68d9      	ldr	r1, [r3, #12]
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	4618      	mov	r0, r3
 8008d78:	4603      	mov	r3, r0
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	4403      	add	r3, r0
 8008d7e:	3b1e      	subs	r3, #30
 8008d80:	409a      	lsls	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	430a      	orrs	r2, r1
 8008d88:	60da      	str	r2, [r3, #12]
 8008d8a:	e022      	b.n	8008dd2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	6919      	ldr	r1, [r3, #16]
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	4413      	add	r3, r2
 8008da0:	2207      	movs	r2, #7
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	43da      	mvns	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	400a      	ands	r2, r1
 8008dae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	6919      	ldr	r1, [r3, #16]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	689a      	ldr	r2, [r3, #8]
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	4403      	add	r3, r0
 8008dc8:	409a      	lsls	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	430a      	orrs	r2, r1
 8008dd0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	2b06      	cmp	r3, #6
 8008dd8:	d824      	bhi.n	8008e24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	685a      	ldr	r2, [r3, #4]
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	3b05      	subs	r3, #5
 8008dec:	221f      	movs	r2, #31
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	43da      	mvns	r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	400a      	ands	r2, r1
 8008dfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	4618      	mov	r0, r3
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	3b05      	subs	r3, #5
 8008e16:	fa00 f203 	lsl.w	r2, r0, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	635a      	str	r2, [r3, #52]	@ 0x34
 8008e22:	e04c      	b.n	8008ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2b0c      	cmp	r3, #12
 8008e2a:	d824      	bhi.n	8008e76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	685a      	ldr	r2, [r3, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3b23      	subs	r3, #35	@ 0x23
 8008e3e:	221f      	movs	r2, #31
 8008e40:	fa02 f303 	lsl.w	r3, r2, r3
 8008e44:	43da      	mvns	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	400a      	ands	r2, r1
 8008e4c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	4613      	mov	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4413      	add	r3, r2
 8008e66:	3b23      	subs	r3, #35	@ 0x23
 8008e68:	fa00 f203 	lsl.w	r2, r0, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	430a      	orrs	r2, r1
 8008e72:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e74:	e023      	b.n	8008ebe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685a      	ldr	r2, [r3, #4]
 8008e80:	4613      	mov	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	4413      	add	r3, r2
 8008e86:	3b41      	subs	r3, #65	@ 0x41
 8008e88:	221f      	movs	r2, #31
 8008e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8e:	43da      	mvns	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	400a      	ands	r2, r1
 8008e96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	685a      	ldr	r2, [r3, #4]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	4413      	add	r3, r2
 8008eb0:	3b41      	subs	r3, #65	@ 0x41
 8008eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ebe:	4b29      	ldr	r3, [pc, #164]	@ (8008f64 <HAL_ADC_ConfigChannel+0x250>)
 8008ec0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a28      	ldr	r2, [pc, #160]	@ (8008f68 <HAL_ADC_ConfigChannel+0x254>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d10f      	bne.n	8008eec <HAL_ADC_ConfigChannel+0x1d8>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b12      	cmp	r3, #18
 8008ed2:	d10b      	bne.n	8008eec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f68 <HAL_ADC_ConfigChannel+0x254>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d12b      	bne.n	8008f4e <HAL_ADC_ConfigChannel+0x23a>
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a1c      	ldr	r2, [pc, #112]	@ (8008f6c <HAL_ADC_ConfigChannel+0x258>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d003      	beq.n	8008f08 <HAL_ADC_ConfigChannel+0x1f4>
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b11      	cmp	r3, #17
 8008f06:	d122      	bne.n	8008f4e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a11      	ldr	r2, [pc, #68]	@ (8008f6c <HAL_ADC_ConfigChannel+0x258>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d111      	bne.n	8008f4e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008f2a:	4b11      	ldr	r3, [pc, #68]	@ (8008f70 <HAL_ADC_ConfigChannel+0x25c>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a11      	ldr	r2, [pc, #68]	@ (8008f74 <HAL_ADC_ConfigChannel+0x260>)
 8008f30:	fba2 2303 	umull	r2, r3, r2, r3
 8008f34:	0c9a      	lsrs	r2, r3, #18
 8008f36:	4613      	mov	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008f40:	e002      	b.n	8008f48 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f9      	bne.n	8008f42 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8008f56:	2300      	movs	r3, #0
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3714      	adds	r7, #20
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	40012300 	.word	0x40012300
 8008f68:	40012000 	.word	0x40012000
 8008f6c:	10000012 	.word	0x10000012
 8008f70:	20000038 	.word	0x20000038
 8008f74:	431bde83 	.word	0x431bde83

08008f78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b085      	sub	sp, #20
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f80:	4b79      	ldr	r3, [pc, #484]	@ (8009168 <ADC_Init+0x1f0>)
 8008f82:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685a      	ldr	r2, [r3, #4]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008fac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	6859      	ldr	r1, [r3, #4]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	021a      	lsls	r2, r3, #8
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008fd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6859      	ldr	r1, [r3, #4]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ff2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6899      	ldr	r1, [r3, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68da      	ldr	r2, [r3, #12]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800900a:	4a58      	ldr	r2, [pc, #352]	@ (800916c <ADC_Init+0x1f4>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d022      	beq.n	8009056 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	689a      	ldr	r2, [r3, #8]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800901e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6899      	ldr	r1, [r3, #8]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	430a      	orrs	r2, r1
 8009030:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009040:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6899      	ldr	r1, [r3, #8]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	609a      	str	r2, [r3, #8]
 8009054:	e00f      	b.n	8009076 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	689a      	ldr	r2, [r3, #8]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009064:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8009074:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f022 0202 	bic.w	r2, r2, #2
 8009084:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	6899      	ldr	r1, [r3, #8]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	7e1b      	ldrb	r3, [r3, #24]
 8009090:	005a      	lsls	r2, r3, #1
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d01b      	beq.n	80090dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	685a      	ldr	r2, [r3, #4]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80090b2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80090c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6859      	ldr	r1, [r3, #4]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090ce:	3b01      	subs	r3, #1
 80090d0:	035a      	lsls	r2, r3, #13
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	605a      	str	r2, [r3, #4]
 80090da:	e007      	b.n	80090ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	685a      	ldr	r2, [r3, #4]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80090ea:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80090fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	69db      	ldr	r3, [r3, #28]
 8009106:	3b01      	subs	r3, #1
 8009108:	051a      	lsls	r2, r3, #20
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	430a      	orrs	r2, r1
 8009110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009120:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6899      	ldr	r1, [r3, #8]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800912e:	025a      	lsls	r2, r3, #9
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	430a      	orrs	r2, r1
 8009136:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	689a      	ldr	r2, [r3, #8]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009146:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	6899      	ldr	r1, [r3, #8]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	695b      	ldr	r3, [r3, #20]
 8009152:	029a      	lsls	r2, r3, #10
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	430a      	orrs	r2, r1
 800915a:	609a      	str	r2, [r3, #8]
}
 800915c:	bf00      	nop
 800915e:	3714      	adds	r7, #20
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	40012300 	.word	0x40012300
 800916c:	0f000001 	.word	0x0f000001

08009170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009180:	4b0c      	ldr	r3, [pc, #48]	@ (80091b4 <__NVIC_SetPriorityGrouping+0x44>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800918c:	4013      	ands	r3, r2
 800918e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009198:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800919c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80091a2:	4a04      	ldr	r2, [pc, #16]	@ (80091b4 <__NVIC_SetPriorityGrouping+0x44>)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	60d3      	str	r3, [r2, #12]
}
 80091a8:	bf00      	nop
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr
 80091b4:	e000ed00 	.word	0xe000ed00

080091b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80091bc:	4b04      	ldr	r3, [pc, #16]	@ (80091d0 <__NVIC_GetPriorityGrouping+0x18>)
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	0a1b      	lsrs	r3, r3, #8
 80091c2:	f003 0307 	and.w	r3, r3, #7
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	e000ed00 	.word	0xe000ed00

080091d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	db0b      	blt.n	80091fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	f003 021f 	and.w	r2, r3, #31
 80091ec:	4907      	ldr	r1, [pc, #28]	@ (800920c <__NVIC_EnableIRQ+0x38>)
 80091ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091f2:	095b      	lsrs	r3, r3, #5
 80091f4:	2001      	movs	r0, #1
 80091f6:	fa00 f202 	lsl.w	r2, r0, r2
 80091fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80091fe:	bf00      	nop
 8009200:	370c      	adds	r7, #12
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
 800920a:	bf00      	nop
 800920c:	e000e100 	.word	0xe000e100

08009210 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800921a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921e:	2b00      	cmp	r3, #0
 8009220:	db12      	blt.n	8009248 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009222:	79fb      	ldrb	r3, [r7, #7]
 8009224:	f003 021f 	and.w	r2, r3, #31
 8009228:	490a      	ldr	r1, [pc, #40]	@ (8009254 <__NVIC_DisableIRQ+0x44>)
 800922a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800922e:	095b      	lsrs	r3, r3, #5
 8009230:	2001      	movs	r0, #1
 8009232:	fa00 f202 	lsl.w	r2, r0, r2
 8009236:	3320      	adds	r3, #32
 8009238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800923c:	f3bf 8f4f 	dsb	sy
}
 8009240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009242:	f3bf 8f6f 	isb	sy
}
 8009246:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	e000e100 	.word	0xe000e100

08009258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009268:	2b00      	cmp	r3, #0
 800926a:	db0a      	blt.n	8009282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	b2da      	uxtb	r2, r3
 8009270:	490c      	ldr	r1, [pc, #48]	@ (80092a4 <__NVIC_SetPriority+0x4c>)
 8009272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009276:	0112      	lsls	r2, r2, #4
 8009278:	b2d2      	uxtb	r2, r2
 800927a:	440b      	add	r3, r1
 800927c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009280:	e00a      	b.n	8009298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	b2da      	uxtb	r2, r3
 8009286:	4908      	ldr	r1, [pc, #32]	@ (80092a8 <__NVIC_SetPriority+0x50>)
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	3b04      	subs	r3, #4
 8009290:	0112      	lsls	r2, r2, #4
 8009292:	b2d2      	uxtb	r2, r2
 8009294:	440b      	add	r3, r1
 8009296:	761a      	strb	r2, [r3, #24]
}
 8009298:	bf00      	nop
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	e000e100 	.word	0xe000e100
 80092a8:	e000ed00 	.word	0xe000ed00

080092ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b089      	sub	sp, #36	@ 0x24
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	f1c3 0307 	rsb	r3, r3, #7
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	bf28      	it	cs
 80092ca:	2304      	movcs	r3, #4
 80092cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092ce:	69fb      	ldr	r3, [r7, #28]
 80092d0:	3304      	adds	r3, #4
 80092d2:	2b06      	cmp	r3, #6
 80092d4:	d902      	bls.n	80092dc <NVIC_EncodePriority+0x30>
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	3b03      	subs	r3, #3
 80092da:	e000      	b.n	80092de <NVIC_EncodePriority+0x32>
 80092dc:	2300      	movs	r3, #0
 80092de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092e0:	f04f 32ff 	mov.w	r2, #4294967295
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ea:	43da      	mvns	r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	401a      	ands	r2, r3
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092f4:	f04f 31ff 	mov.w	r1, #4294967295
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	fa01 f303 	lsl.w	r3, r1, r3
 80092fe:	43d9      	mvns	r1, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009304:	4313      	orrs	r3, r2
         );
}
 8009306:	4618      	mov	r0, r3
 8009308:	3724      	adds	r7, #36	@ 0x24
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr
	...

08009314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	3b01      	subs	r3, #1
 8009320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009324:	d301      	bcc.n	800932a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009326:	2301      	movs	r3, #1
 8009328:	e00f      	b.n	800934a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800932a:	4a0a      	ldr	r2, [pc, #40]	@ (8009354 <SysTick_Config+0x40>)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3b01      	subs	r3, #1
 8009330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009332:	210f      	movs	r1, #15
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	f7ff ff8e 	bl	8009258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800933c:	4b05      	ldr	r3, [pc, #20]	@ (8009354 <SysTick_Config+0x40>)
 800933e:	2200      	movs	r2, #0
 8009340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009342:	4b04      	ldr	r3, [pc, #16]	@ (8009354 <SysTick_Config+0x40>)
 8009344:	2207      	movs	r2, #7
 8009346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009348:	2300      	movs	r3, #0
}
 800934a:	4618      	mov	r0, r3
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	e000e010 	.word	0xe000e010

08009358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f7ff ff05 	bl	8009170 <__NVIC_SetPriorityGrouping>
}
 8009366:	bf00      	nop
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800936e:	b580      	push	{r7, lr}
 8009370:	b086      	sub	sp, #24
 8009372:	af00      	add	r7, sp, #0
 8009374:	4603      	mov	r3, r0
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
 800937a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800937c:	2300      	movs	r3, #0
 800937e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009380:	f7ff ff1a 	bl	80091b8 <__NVIC_GetPriorityGrouping>
 8009384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	68b9      	ldr	r1, [r7, #8]
 800938a:	6978      	ldr	r0, [r7, #20]
 800938c:	f7ff ff8e 	bl	80092ac <NVIC_EncodePriority>
 8009390:	4602      	mov	r2, r0
 8009392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009396:	4611      	mov	r1, r2
 8009398:	4618      	mov	r0, r3
 800939a:	f7ff ff5d 	bl	8009258 <__NVIC_SetPriority>
}
 800939e:	bf00      	nop
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	4603      	mov	r3, r0
 80093ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80093b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff ff0d 	bl	80091d4 <__NVIC_EnableIRQ>
}
 80093ba:	bf00      	nop
 80093bc:	3708      	adds	r7, #8
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}

080093c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80093c2:	b580      	push	{r7, lr}
 80093c4:	b082      	sub	sp, #8
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	4603      	mov	r3, r0
 80093ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80093cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7ff ff1d 	bl	8009210 <__NVIC_DisableIRQ>
}
 80093d6:	bf00      	nop
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b082      	sub	sp, #8
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f7ff ff94 	bl	8009314 <SysTick_Config>
 80093ec:	4603      	mov	r3, r0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
	...

080093f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b086      	sub	sp, #24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009404:	f7ff fa74 	bl	80088f0 <HAL_GetTick>
 8009408:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d101      	bne.n	8009414 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e099      	b.n	8009548 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2202      	movs	r2, #2
 8009418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 0201 	bic.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009434:	e00f      	b.n	8009456 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009436:	f7ff fa5b 	bl	80088f0 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	2b05      	cmp	r3, #5
 8009442:	d908      	bls.n	8009456 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2220      	movs	r2, #32
 8009448:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2203      	movs	r2, #3
 800944e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e078      	b.n	8009548 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0301 	and.w	r3, r3, #1
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e8      	bne.n	8009436 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800946c:	697a      	ldr	r2, [r7, #20]
 800946e:	4b38      	ldr	r3, [pc, #224]	@ (8009550 <HAL_DMA_Init+0x158>)
 8009470:	4013      	ands	r3, r2
 8009472:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009482:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	691b      	ldr	r3, [r3, #16]
 8009488:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800948e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800949a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80094a2:	697a      	ldr	r2, [r7, #20]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ac:	2b04      	cmp	r3, #4
 80094ae:	d107      	bne.n	80094c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b8:	4313      	orrs	r3, r2
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	4313      	orrs	r3, r2
 80094be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	697a      	ldr	r2, [r7, #20]
 80094c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	695b      	ldr	r3, [r3, #20]
 80094ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	f023 0307 	bic.w	r3, r3, #7
 80094d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094dc:	697a      	ldr	r2, [r7, #20]
 80094de:	4313      	orrs	r3, r2
 80094e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d117      	bne.n	800951a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00e      	beq.n	800951a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fb79 	bl	8009bf4 <DMA_CheckFifoParam>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d008      	beq.n	800951a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2240      	movs	r2, #64	@ 0x40
 800950c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8009516:	2301      	movs	r3, #1
 8009518:	e016      	b.n	8009548 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fb30 	bl	8009b88 <DMA_CalcBaseAndBitshift>
 8009528:	4603      	mov	r3, r0
 800952a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009530:	223f      	movs	r2, #63	@ 0x3f
 8009532:	409a      	lsls	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	f010803f 	.word	0xf010803f

08009554 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b084      	sub	sp, #16
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d101      	bne.n	8009566 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e050      	b.n	8009608 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b02      	cmp	r3, #2
 8009570:	d101      	bne.n	8009576 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8009572:	2302      	movs	r3, #2
 8009574:	e048      	b.n	8009608 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f022 0201 	bic.w	r2, r2, #1
 8009584:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	2200      	movs	r2, #0
 800959c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2200      	movs	r2, #0
 80095a4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	2200      	movs	r2, #0
 80095ac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2221      	movs	r2, #33	@ 0x21
 80095b4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fae6 	bl	8009b88 <DMA_CalcBaseAndBitshift>
 80095bc:	4603      	mov	r3, r0
 80095be:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80095e8:	223f      	movs	r2, #63	@ 0x3f
 80095ea:	409a      	lsls	r2, r3
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
 800961c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009626:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800962e:	2b01      	cmp	r3, #1
 8009630:	d101      	bne.n	8009636 <HAL_DMA_Start_IT+0x26>
 8009632:	2302      	movs	r3, #2
 8009634:	e040      	b.n	80096b8 <HAL_DMA_Start_IT+0xa8>
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2201      	movs	r2, #1
 800963a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b01      	cmp	r3, #1
 8009648:	d12f      	bne.n	80096aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2202      	movs	r2, #2
 800964e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	68b9      	ldr	r1, [r7, #8]
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 fa64 	bl	8009b2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009668:	223f      	movs	r2, #63	@ 0x3f
 800966a:	409a      	lsls	r2, r3
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f042 0216 	orr.w	r2, r2, #22
 800967e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009684:	2b00      	cmp	r3, #0
 8009686:	d007      	beq.n	8009698 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f042 0208 	orr.w	r2, r2, #8
 8009696:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f042 0201 	orr.w	r2, r2, #1
 80096a6:	601a      	str	r2, [r3, #0]
 80096a8:	e005      	b.n	80096b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80096b2:	2302      	movs	r3, #2
 80096b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80096b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80096ce:	f7ff f90f 	bl	80088f0 <HAL_GetTick>
 80096d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80096da:	b2db      	uxtb	r3, r3
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d008      	beq.n	80096f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2280      	movs	r2, #128	@ 0x80
 80096e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e052      	b.n	8009798 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	f022 0216 	bic.w	r2, r2, #22
 8009700:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	695a      	ldr	r2, [r3, #20]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009710:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009716:	2b00      	cmp	r3, #0
 8009718:	d103      	bne.n	8009722 <HAL_DMA_Abort+0x62>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800971e:	2b00      	cmp	r3, #0
 8009720:	d007      	beq.n	8009732 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f022 0208 	bic.w	r2, r2, #8
 8009730:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0201 	bic.w	r2, r2, #1
 8009740:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009742:	e013      	b.n	800976c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009744:	f7ff f8d4 	bl	80088f0 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	2b05      	cmp	r3, #5
 8009750:	d90c      	bls.n	800976c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2220      	movs	r2, #32
 8009756:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2203      	movs	r2, #3
 800975c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009768:	2303      	movs	r3, #3
 800976a:	e015      	b.n	8009798 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0301 	and.w	r3, r3, #1
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e4      	bne.n	8009744 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800977e:	223f      	movs	r2, #63	@ 0x3f
 8009780:	409a      	lsls	r2, r3
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}

080097a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d004      	beq.n	80097be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2280      	movs	r2, #128	@ 0x80
 80097b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80097ba:	2301      	movs	r3, #1
 80097bc:	e00c      	b.n	80097d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2205      	movs	r2, #5
 80097c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80097d6:	2300      	movs	r3, #0
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80097f0:	4b8e      	ldr	r3, [pc, #568]	@ (8009a2c <HAL_DMA_IRQHandler+0x248>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a8e      	ldr	r2, [pc, #568]	@ (8009a30 <HAL_DMA_IRQHandler+0x24c>)
 80097f6:	fba2 2303 	umull	r2, r3, r2, r3
 80097fa:	0a9b      	lsrs	r3, r3, #10
 80097fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009802:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800980e:	2208      	movs	r2, #8
 8009810:	409a      	lsls	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4013      	ands	r3, r2
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01a      	beq.n	8009850 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 0304 	and.w	r3, r3, #4
 8009824:	2b00      	cmp	r3, #0
 8009826:	d013      	beq.n	8009850 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f022 0204 	bic.w	r2, r2, #4
 8009836:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800983c:	2208      	movs	r2, #8
 800983e:	409a      	lsls	r2, r3
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009848:	f043 0201 	orr.w	r2, r3, #1
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009854:	2201      	movs	r2, #1
 8009856:	409a      	lsls	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	4013      	ands	r3, r2
 800985c:	2b00      	cmp	r3, #0
 800985e:	d012      	beq.n	8009886 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800986a:	2b00      	cmp	r3, #0
 800986c:	d00b      	beq.n	8009886 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009872:	2201      	movs	r2, #1
 8009874:	409a      	lsls	r2, r3
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800987e:	f043 0202 	orr.w	r2, r3, #2
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800988a:	2204      	movs	r2, #4
 800988c:	409a      	lsls	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	4013      	ands	r3, r2
 8009892:	2b00      	cmp	r3, #0
 8009894:	d012      	beq.n	80098bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a8:	2204      	movs	r2, #4
 80098aa:	409a      	lsls	r2, r3
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b4:	f043 0204 	orr.w	r2, r3, #4
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098c0:	2210      	movs	r2, #16
 80098c2:	409a      	lsls	r2, r3
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4013      	ands	r3, r2
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d043      	beq.n	8009954 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f003 0308 	and.w	r3, r3, #8
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d03c      	beq.n	8009954 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098de:	2210      	movs	r2, #16
 80098e0:	409a      	lsls	r2, r3
 80098e2:	693b      	ldr	r3, [r7, #16]
 80098e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d018      	beq.n	8009926 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d108      	bne.n	8009914 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009906:	2b00      	cmp	r3, #0
 8009908:	d024      	beq.n	8009954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	4798      	blx	r3
 8009912:	e01f      	b.n	8009954 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01b      	beq.n	8009954 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	4798      	blx	r3
 8009924:	e016      	b.n	8009954 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009930:	2b00      	cmp	r3, #0
 8009932:	d107      	bne.n	8009944 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f022 0208 	bic.w	r2, r2, #8
 8009942:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009948:	2b00      	cmp	r3, #0
 800994a:	d003      	beq.n	8009954 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009958:	2220      	movs	r2, #32
 800995a:	409a      	lsls	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	4013      	ands	r3, r2
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 808f 	beq.w	8009a84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0310 	and.w	r3, r3, #16
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 8087 	beq.w	8009a84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800997a:	2220      	movs	r2, #32
 800997c:	409a      	lsls	r2, r3
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b05      	cmp	r3, #5
 800998c:	d136      	bne.n	80099fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f022 0216 	bic.w	r2, r2, #22
 800999c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	695a      	ldr	r2, [r3, #20]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d103      	bne.n	80099be <HAL_DMA_IRQHandler+0x1da>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d007      	beq.n	80099ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 0208 	bic.w	r2, r2, #8
 80099cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099d2:	223f      	movs	r2, #63	@ 0x3f
 80099d4:	409a      	lsls	r2, r3
 80099d6:	693b      	ldr	r3, [r7, #16]
 80099d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d07e      	beq.n	8009af0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	4798      	blx	r3
        }
        return;
 80099fa:	e079      	b.n	8009af0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d01d      	beq.n	8009a46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10d      	bne.n	8009a34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d031      	beq.n	8009a84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	4798      	blx	r3
 8009a28:	e02c      	b.n	8009a84 <HAL_DMA_IRQHandler+0x2a0>
 8009a2a:	bf00      	nop
 8009a2c:	20000038 	.word	0x20000038
 8009a30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d023      	beq.n	8009a84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	4798      	blx	r3
 8009a44:	e01e      	b.n	8009a84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d10f      	bne.n	8009a74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f022 0210 	bic.w	r2, r2, #16
 8009a62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d003      	beq.n	8009a84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d032      	beq.n	8009af2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a90:	f003 0301 	and.w	r3, r3, #1
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d022      	beq.n	8009ade <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2205      	movs	r2, #5
 8009a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681a      	ldr	r2, [r3, #0]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f022 0201 	bic.w	r2, r2, #1
 8009aae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	60bb      	str	r3, [r7, #8]
 8009ab6:	697a      	ldr	r2, [r7, #20]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d307      	bcc.n	8009acc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1f2      	bne.n	8009ab0 <HAL_DMA_IRQHandler+0x2cc>
 8009aca:	e000      	b.n	8009ace <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009acc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d005      	beq.n	8009af2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	4798      	blx	r3
 8009aee:	e000      	b.n	8009af2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009af0:	bf00      	nop
    }
  }
}
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009b06:	b2db      	uxtb	r3, r3
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	370c      	adds	r7, #12
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr

08009b2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b085      	sub	sp, #20
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009b48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	2b40      	cmp	r3, #64	@ 0x40
 8009b58:	d108      	bne.n	8009b6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68ba      	ldr	r2, [r7, #8]
 8009b68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009b6a:	e007      	b.n	8009b7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68ba      	ldr	r2, [r7, #8]
 8009b72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	60da      	str	r2, [r3, #12]
}
 8009b7c:	bf00      	nop
 8009b7e:	3714      	adds	r7, #20
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	3b10      	subs	r3, #16
 8009b98:	4a14      	ldr	r2, [pc, #80]	@ (8009bec <DMA_CalcBaseAndBitshift+0x64>)
 8009b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b9e:	091b      	lsrs	r3, r3, #4
 8009ba0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009ba2:	4a13      	ldr	r2, [pc, #76]	@ (8009bf0 <DMA_CalcBaseAndBitshift+0x68>)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d909      	bls.n	8009bca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009bbe:	f023 0303 	bic.w	r3, r3, #3
 8009bc2:	1d1a      	adds	r2, r3, #4
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	659a      	str	r2, [r3, #88]	@ 0x58
 8009bc8:	e007      	b.n	8009bda <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009bd2:	f023 0303 	bic.w	r3, r3, #3
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	aaaaaaab 	.word	0xaaaaaaab
 8009bf0:	0801a944 	.word	0x0801a944

08009bf4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d11f      	bne.n	8009c4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2b03      	cmp	r3, #3
 8009c12:	d856      	bhi.n	8009cc2 <DMA_CheckFifoParam+0xce>
 8009c14:	a201      	add	r2, pc, #4	@ (adr r2, 8009c1c <DMA_CheckFifoParam+0x28>)
 8009c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1a:	bf00      	nop
 8009c1c:	08009c2d 	.word	0x08009c2d
 8009c20:	08009c3f 	.word	0x08009c3f
 8009c24:	08009c2d 	.word	0x08009c2d
 8009c28:	08009cc3 	.word	0x08009cc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d046      	beq.n	8009cc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c3c:	e043      	b.n	8009cc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009c46:	d140      	bne.n	8009cca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c4c:	e03d      	b.n	8009cca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c56:	d121      	bne.n	8009c9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d837      	bhi.n	8009cce <DMA_CheckFifoParam+0xda>
 8009c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009c64 <DMA_CheckFifoParam+0x70>)
 8009c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c64:	08009c75 	.word	0x08009c75
 8009c68:	08009c7b 	.word	0x08009c7b
 8009c6c:	08009c75 	.word	0x08009c75
 8009c70:	08009c8d 	.word	0x08009c8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009c74:	2301      	movs	r3, #1
 8009c76:	73fb      	strb	r3, [r7, #15]
      break;
 8009c78:	e030      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c7e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d025      	beq.n	8009cd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c8a:	e022      	b.n	8009cd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c90:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009c94:	d11f      	bne.n	8009cd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009c9a:	e01c      	b.n	8009cd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d903      	bls.n	8009caa <DMA_CheckFifoParam+0xb6>
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d003      	beq.n	8009cb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009ca8:	e018      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	73fb      	strb	r3, [r7, #15]
      break;
 8009cae:	e015      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00e      	beq.n	8009cda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009cbc:	2301      	movs	r3, #1
 8009cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009cc0:	e00b      	b.n	8009cda <DMA_CheckFifoParam+0xe6>
      break;
 8009cc2:	bf00      	nop
 8009cc4:	e00a      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
      break;
 8009cc6:	bf00      	nop
 8009cc8:	e008      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
      break;
 8009cca:	bf00      	nop
 8009ccc:	e006      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
      break;
 8009cce:	bf00      	nop
 8009cd0:	e004      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
      break;
 8009cd2:	bf00      	nop
 8009cd4:	e002      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
      break;   
 8009cd6:	bf00      	nop
 8009cd8:	e000      	b.n	8009cdc <DMA_CheckFifoParam+0xe8>
      break;
 8009cda:	bf00      	nop
    }
  } 
  
  return status; 
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3714      	adds	r7, #20
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop

08009cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b089      	sub	sp, #36	@ 0x24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009d02:	2300      	movs	r3, #0
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	e165      	b.n	8009fd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009d08:	2201      	movs	r2, #1
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	f040 8154 	bne.w	8009fce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f003 0303 	and.w	r3, r3, #3
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d005      	beq.n	8009d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009d3a:	2b02      	cmp	r3, #2
 8009d3c:	d130      	bne.n	8009da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	2203      	movs	r2, #3
 8009d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d4e:	43db      	mvns	r3, r3
 8009d50:	69ba      	ldr	r2, [r7, #24]
 8009d52:	4013      	ands	r3, r2
 8009d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	68da      	ldr	r2, [r3, #12]
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	005b      	lsls	r3, r3, #1
 8009d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009d62:	69ba      	ldr	r2, [r7, #24]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	69ba      	ldr	r2, [r7, #24]
 8009d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009d74:	2201      	movs	r2, #1
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7c:	43db      	mvns	r3, r3
 8009d7e:	69ba      	ldr	r2, [r7, #24]
 8009d80:	4013      	ands	r3, r2
 8009d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	091b      	lsrs	r3, r3, #4
 8009d8a:	f003 0201 	and.w	r2, r3, #1
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	fa02 f303 	lsl.w	r3, r2, r3
 8009d94:	69ba      	ldr	r2, [r7, #24]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	69ba      	ldr	r2, [r7, #24]
 8009d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	f003 0303 	and.w	r3, r3, #3
 8009da8:	2b03      	cmp	r3, #3
 8009daa:	d017      	beq.n	8009ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	2203      	movs	r2, #3
 8009db8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbc:	43db      	mvns	r3, r3
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	689a      	ldr	r2, [r3, #8]
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	005b      	lsls	r3, r3, #1
 8009dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd0:	69ba      	ldr	r2, [r7, #24]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	69ba      	ldr	r2, [r7, #24]
 8009dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f003 0303 	and.w	r3, r3, #3
 8009de4:	2b02      	cmp	r3, #2
 8009de6:	d123      	bne.n	8009e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	08da      	lsrs	r2, r3, #3
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3208      	adds	r2, #8
 8009df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	f003 0307 	and.w	r3, r3, #7
 8009dfc:	009b      	lsls	r3, r3, #2
 8009dfe:	220f      	movs	r2, #15
 8009e00:	fa02 f303 	lsl.w	r3, r2, r3
 8009e04:	43db      	mvns	r3, r3
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	691a      	ldr	r2, [r3, #16]
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1c:	69ba      	ldr	r2, [r7, #24]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	08da      	lsrs	r2, r3, #3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	3208      	adds	r2, #8
 8009e2a:	69b9      	ldr	r1, [r7, #24]
 8009e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e40:	43db      	mvns	r3, r3
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	4013      	ands	r3, r2
 8009e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f003 0203 	and.w	r2, r3, #3
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	fa02 f303 	lsl.w	r3, r2, r3
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	69ba      	ldr	r2, [r7, #24]
 8009e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f000 80ae 	beq.w	8009fce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e72:	2300      	movs	r3, #0
 8009e74:	60fb      	str	r3, [r7, #12]
 8009e76:	4b5d      	ldr	r3, [pc, #372]	@ (8009fec <HAL_GPIO_Init+0x300>)
 8009e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e7a:	4a5c      	ldr	r2, [pc, #368]	@ (8009fec <HAL_GPIO_Init+0x300>)
 8009e7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009e80:	6453      	str	r3, [r2, #68]	@ 0x44
 8009e82:	4b5a      	ldr	r3, [pc, #360]	@ (8009fec <HAL_GPIO_Init+0x300>)
 8009e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009e8e:	4a58      	ldr	r2, [pc, #352]	@ (8009ff0 <HAL_GPIO_Init+0x304>)
 8009e90:	69fb      	ldr	r3, [r7, #28]
 8009e92:	089b      	lsrs	r3, r3, #2
 8009e94:	3302      	adds	r3, #2
 8009e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	f003 0303 	and.w	r3, r3, #3
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	220f      	movs	r2, #15
 8009ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eaa:	43db      	mvns	r3, r3
 8009eac:	69ba      	ldr	r2, [r7, #24]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a4f      	ldr	r2, [pc, #316]	@ (8009ff4 <HAL_GPIO_Init+0x308>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d025      	beq.n	8009f06 <HAL_GPIO_Init+0x21a>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a4e      	ldr	r2, [pc, #312]	@ (8009ff8 <HAL_GPIO_Init+0x30c>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d01f      	beq.n	8009f02 <HAL_GPIO_Init+0x216>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	4a4d      	ldr	r2, [pc, #308]	@ (8009ffc <HAL_GPIO_Init+0x310>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d019      	beq.n	8009efe <HAL_GPIO_Init+0x212>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	4a4c      	ldr	r2, [pc, #304]	@ (800a000 <HAL_GPIO_Init+0x314>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d013      	beq.n	8009efa <HAL_GPIO_Init+0x20e>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	4a4b      	ldr	r2, [pc, #300]	@ (800a004 <HAL_GPIO_Init+0x318>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d00d      	beq.n	8009ef6 <HAL_GPIO_Init+0x20a>
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	4a4a      	ldr	r2, [pc, #296]	@ (800a008 <HAL_GPIO_Init+0x31c>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d007      	beq.n	8009ef2 <HAL_GPIO_Init+0x206>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	4a49      	ldr	r2, [pc, #292]	@ (800a00c <HAL_GPIO_Init+0x320>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d101      	bne.n	8009eee <HAL_GPIO_Init+0x202>
 8009eea:	2306      	movs	r3, #6
 8009eec:	e00c      	b.n	8009f08 <HAL_GPIO_Init+0x21c>
 8009eee:	2307      	movs	r3, #7
 8009ef0:	e00a      	b.n	8009f08 <HAL_GPIO_Init+0x21c>
 8009ef2:	2305      	movs	r3, #5
 8009ef4:	e008      	b.n	8009f08 <HAL_GPIO_Init+0x21c>
 8009ef6:	2304      	movs	r3, #4
 8009ef8:	e006      	b.n	8009f08 <HAL_GPIO_Init+0x21c>
 8009efa:	2303      	movs	r3, #3
 8009efc:	e004      	b.n	8009f08 <HAL_GPIO_Init+0x21c>
 8009efe:	2302      	movs	r3, #2
 8009f00:	e002      	b.n	8009f08 <HAL_GPIO_Init+0x21c>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <HAL_GPIO_Init+0x21c>
 8009f06:	2300      	movs	r3, #0
 8009f08:	69fa      	ldr	r2, [r7, #28]
 8009f0a:	f002 0203 	and.w	r2, r2, #3
 8009f0e:	0092      	lsls	r2, r2, #2
 8009f10:	4093      	lsls	r3, r2
 8009f12:	69ba      	ldr	r2, [r7, #24]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009f18:	4935      	ldr	r1, [pc, #212]	@ (8009ff0 <HAL_GPIO_Init+0x304>)
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	089b      	lsrs	r3, r3, #2
 8009f1e:	3302      	adds	r3, #2
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009f26:	4b3a      	ldr	r3, [pc, #232]	@ (800a010 <HAL_GPIO_Init+0x324>)
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	43db      	mvns	r3, r3
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	4013      	ands	r3, r2
 8009f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d003      	beq.n	8009f4a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009f42:	69ba      	ldr	r2, [r7, #24]
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009f4a:	4a31      	ldr	r2, [pc, #196]	@ (800a010 <HAL_GPIO_Init+0x324>)
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009f50:	4b2f      	ldr	r3, [pc, #188]	@ (800a010 <HAL_GPIO_Init+0x324>)
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	69ba      	ldr	r2, [r7, #24]
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d003      	beq.n	8009f74 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009f6c:	69ba      	ldr	r2, [r7, #24]
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009f74:	4a26      	ldr	r2, [pc, #152]	@ (800a010 <HAL_GPIO_Init+0x324>)
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009f7a:	4b25      	ldr	r3, [pc, #148]	@ (800a010 <HAL_GPIO_Init+0x324>)
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	43db      	mvns	r3, r3
 8009f84:	69ba      	ldr	r2, [r7, #24]
 8009f86:	4013      	ands	r3, r2
 8009f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009f9e:	4a1c      	ldr	r2, [pc, #112]	@ (800a010 <HAL_GPIO_Init+0x324>)
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009fa4:	4b1a      	ldr	r3, [pc, #104]	@ (800a010 <HAL_GPIO_Init+0x324>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	43db      	mvns	r3, r3
 8009fae:	69ba      	ldr	r2, [r7, #24]
 8009fb0:	4013      	ands	r3, r2
 8009fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d003      	beq.n	8009fc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009fc8:	4a11      	ldr	r2, [pc, #68]	@ (800a010 <HAL_GPIO_Init+0x324>)
 8009fca:	69bb      	ldr	r3, [r7, #24]
 8009fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	61fb      	str	r3, [r7, #28]
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	2b0f      	cmp	r3, #15
 8009fd8:	f67f ae96 	bls.w	8009d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009fdc:	bf00      	nop
 8009fde:	bf00      	nop
 8009fe0:	3724      	adds	r7, #36	@ 0x24
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	40023800 	.word	0x40023800
 8009ff0:	40013800 	.word	0x40013800
 8009ff4:	40020000 	.word	0x40020000
 8009ff8:	40020400 	.word	0x40020400
 8009ffc:	40020800 	.word	0x40020800
 800a000:	40020c00 	.word	0x40020c00
 800a004:	40021000 	.word	0x40021000
 800a008:	40021400 	.word	0x40021400
 800a00c:	40021800 	.word	0x40021800
 800a010:	40013c00 	.word	0x40013c00

0800a014 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a014:	b480      	push	{r7}
 800a016:	b087      	sub	sp, #28
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a01e:	2300      	movs	r3, #0
 800a020:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800a022:	2300      	movs	r3, #0
 800a024:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800a026:	2300      	movs	r3, #0
 800a028:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a02a:	2300      	movs	r3, #0
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	e0c7      	b.n	800a1c0 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a030:	2201      	movs	r2, #1
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	fa02 f303 	lsl.w	r3, r2, r3
 800a038:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800a03a:	683a      	ldr	r2, [r7, #0]
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	4013      	ands	r3, r2
 800a040:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	429a      	cmp	r2, r3
 800a048:	f040 80b7 	bne.w	800a1ba <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800a04c:	4a62      	ldr	r2, [pc, #392]	@ (800a1d8 <HAL_GPIO_DeInit+0x1c4>)
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	089b      	lsrs	r3, r3, #2
 800a052:	3302      	adds	r3, #2
 800a054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a058:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	009b      	lsls	r3, r3, #2
 800a062:	220f      	movs	r2, #15
 800a064:	fa02 f303 	lsl.w	r3, r2, r3
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	4013      	ands	r3, r2
 800a06c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a5a      	ldr	r2, [pc, #360]	@ (800a1dc <HAL_GPIO_DeInit+0x1c8>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d025      	beq.n	800a0c2 <HAL_GPIO_DeInit+0xae>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	4a59      	ldr	r2, [pc, #356]	@ (800a1e0 <HAL_GPIO_DeInit+0x1cc>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d01f      	beq.n	800a0be <HAL_GPIO_DeInit+0xaa>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	4a58      	ldr	r2, [pc, #352]	@ (800a1e4 <HAL_GPIO_DeInit+0x1d0>)
 800a082:	4293      	cmp	r3, r2
 800a084:	d019      	beq.n	800a0ba <HAL_GPIO_DeInit+0xa6>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	4a57      	ldr	r2, [pc, #348]	@ (800a1e8 <HAL_GPIO_DeInit+0x1d4>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d013      	beq.n	800a0b6 <HAL_GPIO_DeInit+0xa2>
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	4a56      	ldr	r2, [pc, #344]	@ (800a1ec <HAL_GPIO_DeInit+0x1d8>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d00d      	beq.n	800a0b2 <HAL_GPIO_DeInit+0x9e>
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4a55      	ldr	r2, [pc, #340]	@ (800a1f0 <HAL_GPIO_DeInit+0x1dc>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d007      	beq.n	800a0ae <HAL_GPIO_DeInit+0x9a>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	4a54      	ldr	r2, [pc, #336]	@ (800a1f4 <HAL_GPIO_DeInit+0x1e0>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d101      	bne.n	800a0aa <HAL_GPIO_DeInit+0x96>
 800a0a6:	2306      	movs	r3, #6
 800a0a8:	e00c      	b.n	800a0c4 <HAL_GPIO_DeInit+0xb0>
 800a0aa:	2307      	movs	r3, #7
 800a0ac:	e00a      	b.n	800a0c4 <HAL_GPIO_DeInit+0xb0>
 800a0ae:	2305      	movs	r3, #5
 800a0b0:	e008      	b.n	800a0c4 <HAL_GPIO_DeInit+0xb0>
 800a0b2:	2304      	movs	r3, #4
 800a0b4:	e006      	b.n	800a0c4 <HAL_GPIO_DeInit+0xb0>
 800a0b6:	2303      	movs	r3, #3
 800a0b8:	e004      	b.n	800a0c4 <HAL_GPIO_DeInit+0xb0>
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	e002      	b.n	800a0c4 <HAL_GPIO_DeInit+0xb0>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e000      	b.n	800a0c4 <HAL_GPIO_DeInit+0xb0>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	f002 0203 	and.w	r2, r2, #3
 800a0ca:	0092      	lsls	r2, r2, #2
 800a0cc:	4093      	lsls	r3, r2
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d132      	bne.n	800a13a <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a0d4:	4b48      	ldr	r3, [pc, #288]	@ (800a1f8 <HAL_GPIO_DeInit+0x1e4>)
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	43db      	mvns	r3, r3
 800a0dc:	4946      	ldr	r1, [pc, #280]	@ (800a1f8 <HAL_GPIO_DeInit+0x1e4>)
 800a0de:	4013      	ands	r3, r2
 800a0e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a0e2:	4b45      	ldr	r3, [pc, #276]	@ (800a1f8 <HAL_GPIO_DeInit+0x1e4>)
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	43db      	mvns	r3, r3
 800a0ea:	4943      	ldr	r1, [pc, #268]	@ (800a1f8 <HAL_GPIO_DeInit+0x1e4>)
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a0f0:	4b41      	ldr	r3, [pc, #260]	@ (800a1f8 <HAL_GPIO_DeInit+0x1e4>)
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	43db      	mvns	r3, r3
 800a0f8:	493f      	ldr	r1, [pc, #252]	@ (800a1f8 <HAL_GPIO_DeInit+0x1e4>)
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a0fe:	4b3e      	ldr	r3, [pc, #248]	@ (800a1f8 <HAL_GPIO_DeInit+0x1e4>)
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	43db      	mvns	r3, r3
 800a106:	493c      	ldr	r1, [pc, #240]	@ (800a1f8 <HAL_GPIO_DeInit+0x1e4>)
 800a108:	4013      	ands	r3, r2
 800a10a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800a10c:	697b      	ldr	r3, [r7, #20]
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	220f      	movs	r2, #15
 800a116:	fa02 f303 	lsl.w	r3, r2, r3
 800a11a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a11c:	4a2e      	ldr	r2, [pc, #184]	@ (800a1d8 <HAL_GPIO_DeInit+0x1c4>)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	089b      	lsrs	r3, r3, #2
 800a122:	3302      	adds	r3, #2
 800a124:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	43da      	mvns	r2, r3
 800a12c:	482a      	ldr	r0, [pc, #168]	@ (800a1d8 <HAL_GPIO_DeInit+0x1c4>)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	089b      	lsrs	r3, r3, #2
 800a132:	400a      	ands	r2, r1
 800a134:	3302      	adds	r3, #2
 800a136:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	005b      	lsls	r3, r3, #1
 800a142:	2103      	movs	r1, #3
 800a144:	fa01 f303 	lsl.w	r3, r1, r3
 800a148:	43db      	mvns	r3, r3
 800a14a:	401a      	ands	r2, r3
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	08da      	lsrs	r2, r3, #3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	3208      	adds	r2, #8
 800a158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	f003 0307 	and.w	r3, r3, #7
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	220f      	movs	r2, #15
 800a166:	fa02 f303 	lsl.w	r3, r2, r3
 800a16a:	43db      	mvns	r3, r3
 800a16c:	697a      	ldr	r2, [r7, #20]
 800a16e:	08d2      	lsrs	r2, r2, #3
 800a170:	4019      	ands	r1, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3208      	adds	r2, #8
 800a176:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	005b      	lsls	r3, r3, #1
 800a182:	2103      	movs	r1, #3
 800a184:	fa01 f303 	lsl.w	r3, r1, r3
 800a188:	43db      	mvns	r3, r3
 800a18a:	401a      	ands	r2, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	2101      	movs	r1, #1
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	fa01 f303 	lsl.w	r3, r1, r3
 800a19c:	43db      	mvns	r3, r3
 800a19e:	401a      	ands	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	689a      	ldr	r2, [r3, #8]
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	005b      	lsls	r3, r3, #1
 800a1ac:	2103      	movs	r1, #3
 800a1ae:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b2:	43db      	mvns	r3, r3
 800a1b4:	401a      	ands	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	2b0f      	cmp	r3, #15
 800a1c4:	f67f af34 	bls.w	800a030 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800a1c8:	bf00      	nop
 800a1ca:	bf00      	nop
 800a1cc:	371c      	adds	r7, #28
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr
 800a1d6:	bf00      	nop
 800a1d8:	40013800 	.word	0x40013800
 800a1dc:	40020000 	.word	0x40020000
 800a1e0:	40020400 	.word	0x40020400
 800a1e4:	40020800 	.word	0x40020800
 800a1e8:	40020c00 	.word	0x40020c00
 800a1ec:	40021000 	.word	0x40021000
 800a1f0:	40021400 	.word	0x40021400
 800a1f4:	40021800 	.word	0x40021800
 800a1f8:	40013c00 	.word	0x40013c00

0800a1fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	460b      	mov	r3, r1
 800a206:	807b      	strh	r3, [r7, #2]
 800a208:	4613      	mov	r3, r2
 800a20a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a20c:	787b      	ldrb	r3, [r7, #1]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a212:	887a      	ldrh	r2, [r7, #2]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a218:	e003      	b.n	800a222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a21a:	887b      	ldrh	r3, [r7, #2]
 800a21c:	041a      	lsls	r2, r3, #16
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	619a      	str	r2, [r3, #24]
}
 800a222:	bf00      	nop
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
	...

0800a230 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	4603      	mov	r3, r0
 800a238:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a23a:	4b08      	ldr	r3, [pc, #32]	@ (800a25c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a23c:	695a      	ldr	r2, [r3, #20]
 800a23e:	88fb      	ldrh	r3, [r7, #6]
 800a240:	4013      	ands	r3, r2
 800a242:	2b00      	cmp	r3, #0
 800a244:	d006      	beq.n	800a254 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a246:	4a05      	ldr	r2, [pc, #20]	@ (800a25c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a248:	88fb      	ldrh	r3, [r7, #6]
 800a24a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a24c:	88fb      	ldrh	r3, [r7, #6]
 800a24e:	4618      	mov	r0, r3
 800a250:	f7fb fcd6 	bl	8005c00 <HAL_GPIO_EXTI_Callback>
  }
}
 800a254:	bf00      	nop
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	40013c00 	.word	0x40013c00

0800a260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e12b      	b.n	800a4ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a278:	b2db      	uxtb	r3, r3
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f7fd fb62 	bl	8007950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2224      	movs	r2, #36	@ 0x24
 800a290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0201 	bic.w	r2, r2, #1
 800a2a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a2c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a2c4:	f002 ff86 	bl	800d1d4 <HAL_RCC_GetPCLK1Freq>
 800a2c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	4a81      	ldr	r2, [pc, #516]	@ (800a4d4 <HAL_I2C_Init+0x274>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d807      	bhi.n	800a2e4 <HAL_I2C_Init+0x84>
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a80      	ldr	r2, [pc, #512]	@ (800a4d8 <HAL_I2C_Init+0x278>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	bf94      	ite	ls
 800a2dc:	2301      	movls	r3, #1
 800a2de:	2300      	movhi	r3, #0
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	e006      	b.n	800a2f2 <HAL_I2C_Init+0x92>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	4a7d      	ldr	r2, [pc, #500]	@ (800a4dc <HAL_I2C_Init+0x27c>)
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	bf94      	ite	ls
 800a2ec:	2301      	movls	r3, #1
 800a2ee:	2300      	movhi	r3, #0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e0e7      	b.n	800a4ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4a78      	ldr	r2, [pc, #480]	@ (800a4e0 <HAL_I2C_Init+0x280>)
 800a2fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a302:	0c9b      	lsrs	r3, r3, #18
 800a304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	430a      	orrs	r2, r1
 800a318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6a1b      	ldr	r3, [r3, #32]
 800a320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	4a6a      	ldr	r2, [pc, #424]	@ (800a4d4 <HAL_I2C_Init+0x274>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d802      	bhi.n	800a334 <HAL_I2C_Init+0xd4>
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	3301      	adds	r3, #1
 800a332:	e009      	b.n	800a348 <HAL_I2C_Init+0xe8>
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a33a:	fb02 f303 	mul.w	r3, r2, r3
 800a33e:	4a69      	ldr	r2, [pc, #420]	@ (800a4e4 <HAL_I2C_Init+0x284>)
 800a340:	fba2 2303 	umull	r2, r3, r2, r3
 800a344:	099b      	lsrs	r3, r3, #6
 800a346:	3301      	adds	r3, #1
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	6812      	ldr	r2, [r2, #0]
 800a34c:	430b      	orrs	r3, r1
 800a34e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	69db      	ldr	r3, [r3, #28]
 800a356:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a35a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	495c      	ldr	r1, [pc, #368]	@ (800a4d4 <HAL_I2C_Init+0x274>)
 800a364:	428b      	cmp	r3, r1
 800a366:	d819      	bhi.n	800a39c <HAL_I2C_Init+0x13c>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	1e59      	subs	r1, r3, #1
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	005b      	lsls	r3, r3, #1
 800a372:	fbb1 f3f3 	udiv	r3, r1, r3
 800a376:	1c59      	adds	r1, r3, #1
 800a378:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a37c:	400b      	ands	r3, r1
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00a      	beq.n	800a398 <HAL_I2C_Init+0x138>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1e59      	subs	r1, r3, #1
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	005b      	lsls	r3, r3, #1
 800a38c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a390:	3301      	adds	r3, #1
 800a392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a396:	e051      	b.n	800a43c <HAL_I2C_Init+0x1dc>
 800a398:	2304      	movs	r3, #4
 800a39a:	e04f      	b.n	800a43c <HAL_I2C_Init+0x1dc>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d111      	bne.n	800a3c8 <HAL_I2C_Init+0x168>
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	1e58      	subs	r0, r3, #1
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6859      	ldr	r1, [r3, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	005b      	lsls	r3, r3, #1
 800a3b0:	440b      	add	r3, r1
 800a3b2:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	bf0c      	ite	eq
 800a3c0:	2301      	moveq	r3, #1
 800a3c2:	2300      	movne	r3, #0
 800a3c4:	b2db      	uxtb	r3, r3
 800a3c6:	e012      	b.n	800a3ee <HAL_I2C_Init+0x18e>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	1e58      	subs	r0, r3, #1
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6859      	ldr	r1, [r3, #4]
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	440b      	add	r3, r1
 800a3d6:	0099      	lsls	r1, r3, #2
 800a3d8:	440b      	add	r3, r1
 800a3da:	fbb0 f3f3 	udiv	r3, r0, r3
 800a3de:	3301      	adds	r3, #1
 800a3e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	bf0c      	ite	eq
 800a3e8:	2301      	moveq	r3, #1
 800a3ea:	2300      	movne	r3, #0
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d001      	beq.n	800a3f6 <HAL_I2C_Init+0x196>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e022      	b.n	800a43c <HAL_I2C_Init+0x1dc>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10e      	bne.n	800a41c <HAL_I2C_Init+0x1bc>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1e58      	subs	r0, r3, #1
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6859      	ldr	r1, [r3, #4]
 800a406:	460b      	mov	r3, r1
 800a408:	005b      	lsls	r3, r3, #1
 800a40a:	440b      	add	r3, r1
 800a40c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a410:	3301      	adds	r3, #1
 800a412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a41a:	e00f      	b.n	800a43c <HAL_I2C_Init+0x1dc>
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	1e58      	subs	r0, r3, #1
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6859      	ldr	r1, [r3, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	440b      	add	r3, r1
 800a42a:	0099      	lsls	r1, r3, #2
 800a42c:	440b      	add	r3, r1
 800a42e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a432:	3301      	adds	r3, #1
 800a434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a43c:	6879      	ldr	r1, [r7, #4]
 800a43e:	6809      	ldr	r1, [r1, #0]
 800a440:	4313      	orrs	r3, r2
 800a442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	69da      	ldr	r2, [r3, #28]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	431a      	orrs	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a46a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	6911      	ldr	r1, [r2, #16]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	68d2      	ldr	r2, [r2, #12]
 800a476:	4311      	orrs	r1, r2
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	6812      	ldr	r2, [r2, #0]
 800a47c:	430b      	orrs	r3, r1
 800a47e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	695a      	ldr	r2, [r3, #20]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	431a      	orrs	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	430a      	orrs	r2, r1
 800a49a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f042 0201 	orr.w	r2, r2, #1
 800a4aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	000186a0 	.word	0x000186a0
 800a4d8:	001e847f 	.word	0x001e847f
 800a4dc:	003d08ff 	.word	0x003d08ff
 800a4e0:	431bde83 	.word	0x431bde83
 800a4e4:	10624dd3 	.word	0x10624dd3

0800a4e8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e021      	b.n	800a53e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2224      	movs	r2, #36	@ 0x24
 800a4fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f022 0201 	bic.w	r2, r2, #1
 800a510:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7fd faf6 	bl	8007b04 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2200      	movs	r2, #0
 800a522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	695b      	ldr	r3, [r3, #20]
 800a554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a558:	2b80      	cmp	r3, #128	@ 0x80
 800a55a:	d103      	bne.n	800a564 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2200      	movs	r2, #0
 800a562:	611a      	str	r2, [r3, #16]
  }
}
 800a564:	bf00      	nop
 800a566:	370c      	adds	r7, #12
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af02      	add	r7, sp, #8
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	4608      	mov	r0, r1
 800a57a:	4611      	mov	r1, r2
 800a57c:	461a      	mov	r2, r3
 800a57e:	4603      	mov	r3, r0
 800a580:	817b      	strh	r3, [r7, #10]
 800a582:	460b      	mov	r3, r1
 800a584:	813b      	strh	r3, [r7, #8]
 800a586:	4613      	mov	r3, r2
 800a588:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a58a:	f7fe f9b1 	bl	80088f0 <HAL_GetTick>
 800a58e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b20      	cmp	r3, #32
 800a59a:	f040 80d9 	bne.w	800a750 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	2319      	movs	r3, #25
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	496d      	ldr	r1, [pc, #436]	@ (800a75c <HAL_I2C_Mem_Write+0x1ec>)
 800a5a8:	68f8      	ldr	r0, [r7, #12]
 800a5aa:	f002 fa9d 	bl	800cae8 <I2C_WaitOnFlagUntilTimeout>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e0cc      	b.n	800a752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <HAL_I2C_Mem_Write+0x56>
 800a5c2:	2302      	movs	r3, #2
 800a5c4:	e0c5      	b.n	800a752 <HAL_I2C_Mem_Write+0x1e2>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0301 	and.w	r3, r3, #1
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d007      	beq.n	800a5ec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f042 0201 	orr.w	r2, r2, #1
 800a5ea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a5fa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2221      	movs	r2, #33	@ 0x21
 800a600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	2240      	movs	r2, #64	@ 0x40
 800a608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2200      	movs	r2, #0
 800a610:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6a3a      	ldr	r2, [r7, #32]
 800a616:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a61c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a622:	b29a      	uxth	r2, r3
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	4a4d      	ldr	r2, [pc, #308]	@ (800a760 <HAL_I2C_Mem_Write+0x1f0>)
 800a62c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a62e:	88f8      	ldrh	r0, [r7, #6]
 800a630:	893a      	ldrh	r2, [r7, #8]
 800a632:	8979      	ldrh	r1, [r7, #10]
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	9301      	str	r3, [sp, #4]
 800a638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63a:	9300      	str	r3, [sp, #0]
 800a63c:	4603      	mov	r3, r0
 800a63e:	68f8      	ldr	r0, [r7, #12]
 800a640:	f001 ff10 	bl	800c464 <I2C_RequestMemoryWrite>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d052      	beq.n	800a6f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e081      	b.n	800a752 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f002 fb62 	bl	800cd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00d      	beq.n	800a67a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a662:	2b04      	cmp	r3, #4
 800a664:	d107      	bne.n	800a676 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a674:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e06b      	b.n	800a752 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67e:	781a      	ldrb	r2, [r3, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a68a:	1c5a      	adds	r2, r3, #1
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a694:	3b01      	subs	r3, #1
 800a696:	b29a      	uxth	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	695b      	ldr	r3, [r3, #20]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d11b      	bne.n	800a6f0 <HAL_I2C_Mem_Write+0x180>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d017      	beq.n	800a6f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c4:	781a      	ldrb	r2, [r3, #0]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6d0:	1c5a      	adds	r2, r3, #1
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6da:	3b01      	subs	r3, #1
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d1aa      	bne.n	800a64e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6f8:	697a      	ldr	r2, [r7, #20]
 800a6fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f002 fb55 	bl	800cdac <I2C_WaitOnBTFFlagUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d00d      	beq.n	800a724 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a70c:	2b04      	cmp	r3, #4
 800a70e:	d107      	bne.n	800a720 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a71e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e016      	b.n	800a752 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2220      	movs	r2, #32
 800a738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a74c:	2300      	movs	r3, #0
 800a74e:	e000      	b.n	800a752 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a750:	2302      	movs	r3, #2
  }
}
 800a752:	4618      	mov	r0, r3
 800a754:	3718      	adds	r7, #24
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	00100002 	.word	0x00100002
 800a760:	ffff0000 	.word	0xffff0000

0800a764 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08c      	sub	sp, #48	@ 0x30
 800a768:	af02      	add	r7, sp, #8
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	4608      	mov	r0, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	461a      	mov	r2, r3
 800a772:	4603      	mov	r3, r0
 800a774:	817b      	strh	r3, [r7, #10]
 800a776:	460b      	mov	r3, r1
 800a778:	813b      	strh	r3, [r7, #8]
 800a77a:	4613      	mov	r3, r2
 800a77c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a77e:	f7fe f8b7 	bl	80088f0 <HAL_GetTick>
 800a782:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b20      	cmp	r3, #32
 800a78e:	f040 8214 	bne.w	800abba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	2319      	movs	r3, #25
 800a798:	2201      	movs	r2, #1
 800a79a:	497b      	ldr	r1, [pc, #492]	@ (800a988 <HAL_I2C_Mem_Read+0x224>)
 800a79c:	68f8      	ldr	r0, [r7, #12]
 800a79e:	f002 f9a3 	bl	800cae8 <I2C_WaitOnFlagUntilTimeout>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a7a8:	2302      	movs	r3, #2
 800a7aa:	e207      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d101      	bne.n	800a7ba <HAL_I2C_Mem_Read+0x56>
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	e200      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2201      	movs	r2, #1
 800a7be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0301 	and.w	r3, r3, #1
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d007      	beq.n	800a7e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f042 0201 	orr.w	r2, r2, #1
 800a7de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681a      	ldr	r2, [r3, #0]
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2222      	movs	r2, #34	@ 0x22
 800a7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2240      	movs	r2, #64	@ 0x40
 800a7fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2200      	movs	r2, #0
 800a804:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a80a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a810:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a816:	b29a      	uxth	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	4a5b      	ldr	r2, [pc, #364]	@ (800a98c <HAL_I2C_Mem_Read+0x228>)
 800a820:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a822:	88f8      	ldrh	r0, [r7, #6]
 800a824:	893a      	ldrh	r2, [r7, #8]
 800a826:	8979      	ldrh	r1, [r7, #10]
 800a828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	4603      	mov	r3, r0
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f001 feac 	bl	800c590 <I2C_RequestMemoryRead>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a83e:	2301      	movs	r3, #1
 800a840:	e1bc      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a846:	2b00      	cmp	r3, #0
 800a848:	d113      	bne.n	800a872 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a84a:	2300      	movs	r3, #0
 800a84c:	623b      	str	r3, [r7, #32]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	623b      	str	r3, [r7, #32]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	623b      	str	r3, [r7, #32]
 800a85e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	e190      	b.n	800ab94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a876:	2b01      	cmp	r3, #1
 800a878:	d11b      	bne.n	800a8b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a888:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a88a:	2300      	movs	r3, #0
 800a88c:	61fb      	str	r3, [r7, #28]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	61fb      	str	r3, [r7, #28]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	61fb      	str	r3, [r7, #28]
 800a89e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8ae:	601a      	str	r2, [r3, #0]
 800a8b0:	e170      	b.n	800ab94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d11b      	bne.n	800a8f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	681a      	ldr	r2, [r3, #0]
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8da:	2300      	movs	r3, #0
 800a8dc:	61bb      	str	r3, [r7, #24]
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	695b      	ldr	r3, [r3, #20]
 800a8e4:	61bb      	str	r3, [r7, #24]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	61bb      	str	r3, [r7, #24]
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	e150      	b.n	800ab94 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	695b      	ldr	r3, [r3, #20]
 800a8fc:	617b      	str	r3, [r7, #20]
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	617b      	str	r3, [r7, #20]
 800a906:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a908:	e144      	b.n	800ab94 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a90e:	2b03      	cmp	r3, #3
 800a910:	f200 80f1 	bhi.w	800aaf6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d123      	bne.n	800a964 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a91c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a91e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f002 fabd 	bl	800cea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e145      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	691a      	ldr	r2, [r3, #16]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93a:	b2d2      	uxtb	r2, r2
 800a93c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	1c5a      	adds	r2, r3, #1
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a94c:	3b01      	subs	r3, #1
 800a94e:	b29a      	uxth	r2, r3
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a958:	b29b      	uxth	r3, r3
 800a95a:	3b01      	subs	r3, #1
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a962:	e117      	b.n	800ab94 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d14e      	bne.n	800aa0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a972:	2200      	movs	r2, #0
 800a974:	4906      	ldr	r1, [pc, #24]	@ (800a990 <HAL_I2C_Mem_Read+0x22c>)
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f002 f8b6 	bl	800cae8 <I2C_WaitOnFlagUntilTimeout>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d008      	beq.n	800a994 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e11a      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
 800a986:	bf00      	nop
 800a988:	00100002 	.word	0x00100002
 800a98c:	ffff0000 	.word	0xffff0000
 800a990:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	691a      	ldr	r2, [r3, #16]
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	b29a      	uxth	r2, r3
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	691a      	ldr	r2, [r3, #16]
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e0:	b2d2      	uxtb	r2, r2
 800a9e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	b29a      	uxth	r2, r3
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	3b01      	subs	r3, #1
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aa08:	e0c4      	b.n	800ab94 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	9300      	str	r3, [sp, #0]
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa10:	2200      	movs	r2, #0
 800aa12:	496c      	ldr	r1, [pc, #432]	@ (800abc4 <HAL_I2C_Mem_Read+0x460>)
 800aa14:	68f8      	ldr	r0, [r7, #12]
 800aa16:	f002 f867 	bl	800cae8 <I2C_WaitOnFlagUntilTimeout>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	e0cb      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	691a      	ldr	r2, [r3, #16]
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa46:	1c5a      	adds	r2, r3, #1
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa50:	3b01      	subs	r3, #1
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa68:	9300      	str	r3, [sp, #0]
 800aa6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4955      	ldr	r1, [pc, #340]	@ (800abc4 <HAL_I2C_Mem_Read+0x460>)
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f002 f839 	bl	800cae8 <I2C_WaitOnFlagUntilTimeout>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e09d      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	691a      	ldr	r2, [r3, #16]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa9a:	b2d2      	uxtb	r2, r2
 800aa9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa2:	1c5a      	adds	r2, r3, #1
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaac:	3b01      	subs	r3, #1
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	3b01      	subs	r3, #1
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	691a      	ldr	r2, [r3, #16]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aacc:	b2d2      	uxtb	r2, r2
 800aace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	1c5a      	adds	r2, r3, #1
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aade:	3b01      	subs	r3, #1
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	3b01      	subs	r3, #1
 800aaee:	b29a      	uxth	r2, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aaf4:	e04e      	b.n	800ab94 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aaf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aaf8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f002 f9d0 	bl	800cea0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e058      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	691a      	ldr	r2, [r3, #16]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab14:	b2d2      	uxtb	r2, r2
 800ab16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab26:	3b01      	subs	r3, #1
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	3b01      	subs	r3, #1
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	695b      	ldr	r3, [r3, #20]
 800ab42:	f003 0304 	and.w	r3, r3, #4
 800ab46:	2b04      	cmp	r3, #4
 800ab48:	d124      	bne.n	800ab94 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab4e:	2b03      	cmp	r3, #3
 800ab50:	d107      	bne.n	800ab62 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab60:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6c:	b2d2      	uxtb	r2, r2
 800ab6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab74:	1c5a      	adds	r2, r3, #1
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	f47f aeb6 	bne.w	800a90a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2220      	movs	r2, #32
 800aba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2200      	movs	r2, #0
 800abaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	e000      	b.n	800abbc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800abba:	2302      	movs	r3, #2
  }
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3728      	adds	r7, #40	@ 0x28
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	00010004 	.word	0x00010004

0800abc8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08c      	sub	sp, #48	@ 0x30
 800abcc:	af02      	add	r7, sp, #8
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	4608      	mov	r0, r1
 800abd2:	4611      	mov	r1, r2
 800abd4:	461a      	mov	r2, r3
 800abd6:	4603      	mov	r3, r0
 800abd8:	817b      	strh	r3, [r7, #10]
 800abda:	460b      	mov	r3, r1
 800abdc:	813b      	strh	r3, [r7, #8]
 800abde:	4613      	mov	r3, r2
 800abe0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800abe2:	f7fd fe85 	bl	80088f0 <HAL_GetTick>
 800abe6:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800abe8:	2300      	movs	r3, #0
 800abea:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	2b20      	cmp	r3, #32
 800abf6:	f040 8172 	bne.w	800aede <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800abfa:	4b93      	ldr	r3, [pc, #588]	@ (800ae48 <HAL_I2C_Mem_Read_DMA+0x280>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	08db      	lsrs	r3, r3, #3
 800ac00:	4a92      	ldr	r2, [pc, #584]	@ (800ae4c <HAL_I2C_Mem_Read_DMA+0x284>)
 800ac02:	fba2 2303 	umull	r2, r3, r2, r3
 800ac06:	0a1a      	lsrs	r2, r3, #8
 800ac08:	4613      	mov	r3, r2
 800ac0a:	009b      	lsls	r3, r3, #2
 800ac0c:	4413      	add	r3, r2
 800ac0e:	009a      	lsls	r2, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	3b01      	subs	r3, #1
 800ac18:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d112      	bne.n	800ac46 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2220      	movs	r2, #32
 800ac2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3a:	f043 0220 	orr.w	r2, r3, #32
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800ac42:	2302      	movs	r3, #2
 800ac44:	e14c      	b.n	800aee0 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	f003 0302 	and.w	r3, r3, #2
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d0df      	beq.n	800ac14 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d101      	bne.n	800ac62 <HAL_I2C_Mem_Read_DMA+0x9a>
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e13e      	b.n	800aee0 <HAL_I2C_Mem_Read_DMA+0x318>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2201      	movs	r2, #1
 800ac66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0301 	and.w	r3, r3, #1
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d007      	beq.n	800ac88 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f042 0201 	orr.w	r2, r2, #1
 800ac86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2222      	movs	r2, #34	@ 0x22
 800ac9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2240      	movs	r2, #64	@ 0x40
 800aca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800acb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	4a62      	ldr	r2, [pc, #392]	@ (800ae50 <HAL_I2C_Mem_Read_DMA+0x288>)
 800acc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800acca:	897a      	ldrh	r2, [r7, #10]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800acd0:	893a      	ldrh	r2, [r7, #8]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800acd6:	88fa      	ldrh	r2, [r7, #6]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f000 80cc 	beq.w	800ae84 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d02d      	beq.n	800ad50 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acf8:	4a56      	ldr	r2, [pc, #344]	@ (800ae54 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800acfa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad00:	4a55      	ldr	r2, [pc, #340]	@ (800ae58 <HAL_I2C_Mem_Read_DMA+0x290>)
 800ad02:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad08:	2200      	movs	r2, #0
 800ad0a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad10:	2200      	movs	r2, #0
 800ad12:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad18:	2200      	movs	r2, #0
 800ad1a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad20:	2200      	movs	r2, #0
 800ad22:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	3310      	adds	r3, #16
 800ad2e:	4619      	mov	r1, r3
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad34:	461a      	mov	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad3a:	f7fe fc69 	bl	8009610 <HAL_DMA_Start_IT>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800ad44:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f040 8087 	bne.w	800ae5c <HAL_I2C_Mem_Read_DMA+0x294>
 800ad4e:	e013      	b.n	800ad78 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad64:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e0b3      	b.n	800aee0 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800ad78:	88f8      	ldrh	r0, [r7, #6]
 800ad7a:	893a      	ldrh	r2, [r7, #8]
 800ad7c:	8979      	ldrh	r1, [r7, #10]
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad80:	9301      	str	r3, [sp, #4]
 800ad82:	2323      	movs	r3, #35	@ 0x23
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	4603      	mov	r3, r0
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f001 fc01 	bl	800c590 <I2C_RequestMemoryRead>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d023      	beq.n	800addc <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7fe fd01 	bl	80097a0 <HAL_DMA_Abort_IT>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ada8:	2200      	movs	r2, #0
 800adaa:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adba:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2200      	movs	r2, #0
 800adc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	2200      	movs	r2, #0
 800adc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f022 0201 	bic.w	r2, r2, #1
 800add6:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e081      	b.n	800aee0 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d108      	bne.n	800adf6 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800adf2:	601a      	str	r2, [r3, #0]
 800adf4:	e007      	b.n	800ae06 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ae04:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae06:	2300      	movs	r3, #0
 800ae08:	61bb      	str	r3, [r7, #24]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	61bb      	str	r3, [r7, #24]
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	61bb      	str	r3, [r7, #24]
 800ae1a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae32:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae42:	605a      	str	r2, [r3, #4]
 800ae44:	e049      	b.n	800aeda <HAL_I2C_Mem_Read_DMA+0x312>
 800ae46:	bf00      	nop
 800ae48:	20000038 	.word	0x20000038
 800ae4c:	14f8b589 	.word	0x14f8b589
 800ae50:	ffff0000 	.word	0xffff0000
 800ae54:	0800c761 	.word	0x0800c761
 800ae58:	0800c91f 	.word	0x0800c91f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae70:	f043 0210 	orr.w	r2, r3, #16
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e02d      	b.n	800aee0 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800ae84:	88f8      	ldrh	r0, [r7, #6]
 800ae86:	893a      	ldrh	r2, [r7, #8]
 800ae88:	8979      	ldrh	r1, [r7, #10]
 800ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8c:	9301      	str	r3, [sp, #4]
 800ae8e:	2323      	movs	r3, #35	@ 0x23
 800ae90:	9300      	str	r3, [sp, #0]
 800ae92:	4603      	mov	r3, r0
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f001 fb7b 	bl	800c590 <I2C_RequestMemoryRead>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d001      	beq.n	800aea4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800aea0:	2301      	movs	r3, #1
 800aea2:	e01d      	b.n	800aee0 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aea4:	2300      	movs	r3, #0
 800aea6:	617b      	str	r3, [r7, #20]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	617b      	str	r3, [r7, #20]
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	699b      	ldr	r3, [r3, #24]
 800aeb6:	617b      	str	r3, [r7, #20]
 800aeb8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aec8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	2220      	movs	r2, #32
 800aece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2200      	movs	r2, #0
 800aed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e000      	b.n	800aee0 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800aede:	2302      	movs	r3, #2
  }
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3728      	adds	r7, #40	@ 0x28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b088      	sub	sp, #32
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800aef0:	2300      	movs	r3, #0
 800aef2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af00:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af08:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af10:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	2b10      	cmp	r3, #16
 800af16:	d003      	beq.n	800af20 <HAL_I2C_EV_IRQHandler+0x38>
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	2b40      	cmp	r3, #64	@ 0x40
 800af1c:	f040 80b1 	bne.w	800b082 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10d      	bne.n	800af56 <HAL_I2C_EV_IRQHandler+0x6e>
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800af40:	d003      	beq.n	800af4a <HAL_I2C_EV_IRQHandler+0x62>
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800af48:	d101      	bne.n	800af4e <HAL_I2C_EV_IRQHandler+0x66>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <HAL_I2C_EV_IRQHandler+0x68>
 800af4e:	2300      	movs	r3, #0
 800af50:	2b01      	cmp	r3, #1
 800af52:	f000 8114 	beq.w	800b17e <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	f003 0301 	and.w	r3, r3, #1
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <HAL_I2C_EV_IRQHandler+0x90>
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af66:	2b00      	cmp	r3, #0
 800af68:	d006      	beq.n	800af78 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f002 f824 	bl	800cfb8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 fccd 	bl	800b910 <I2C_Master_SB>
 800af76:	e083      	b.n	800b080 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	f003 0308 	and.w	r3, r3, #8
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d008      	beq.n	800af94 <HAL_I2C_EV_IRQHandler+0xac>
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d003      	beq.n	800af94 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 fd45 	bl	800ba1c <I2C_Master_ADD10>
 800af92:	e075      	b.n	800b080 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	f003 0302 	and.w	r3, r3, #2
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d008      	beq.n	800afb0 <HAL_I2C_EV_IRQHandler+0xc8>
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d003      	beq.n	800afb0 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fd61 	bl	800ba70 <I2C_Master_ADDR>
 800afae:	e067      	b.n	800b080 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	f003 0304 	and.w	r3, r3, #4
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d036      	beq.n	800b028 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afc8:	f000 80db 	beq.w	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00d      	beq.n	800aff2 <HAL_I2C_EV_IRQHandler+0x10a>
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d008      	beq.n	800aff2 <HAL_I2C_EV_IRQHandler+0x10a>
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	f003 0304 	and.w	r3, r3, #4
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d103      	bne.n	800aff2 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800afea:	6878      	ldr	r0, [r7, #4]
 800afec:	f000 f92d 	bl	800b24a <I2C_MasterTransmit_TXE>
 800aff0:	e046      	b.n	800b080 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 80c2 	beq.w	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 80bc 	beq.w	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	2b21      	cmp	r3, #33	@ 0x21
 800b00e:	d103      	bne.n	800b018 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f9b6 	bl	800b382 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b016:	e0b4      	b.n	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800b018:	7bfb      	ldrb	r3, [r7, #15]
 800b01a:	2b40      	cmp	r3, #64	@ 0x40
 800b01c:	f040 80b1 	bne.w	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	f000 fa24 	bl	800b46e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b026:	e0ac      	b.n	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b032:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b036:	f000 80a4 	beq.w	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00d      	beq.n	800b060 <HAL_I2C_EV_IRQHandler+0x178>
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d008      	beq.n	800b060 <HAL_I2C_EV_IRQHandler+0x178>
 800b04e:	69fb      	ldr	r3, [r7, #28]
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d103      	bne.n	800b060 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 faa0 	bl	800b59e <I2C_MasterReceive_RXNE>
 800b05e:	e00f      	b.n	800b080 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	f003 0304 	and.w	r3, r3, #4
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 808b 	beq.w	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b072:	2b00      	cmp	r3, #0
 800b074:	f000 8085 	beq.w	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 fb58 	bl	800b72e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b07e:	e080      	b.n	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
 800b080:	e07f      	b.n	800b182 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b086:	2b00      	cmp	r3, #0
 800b088:	d004      	beq.n	800b094 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	61fb      	str	r3, [r7, #28]
 800b092:	e007      	b.n	800b0a4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	f003 0302 	and.w	r3, r3, #2
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d011      	beq.n	800b0d2 <HAL_I2C_EV_IRQHandler+0x1ea>
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00c      	beq.n	800b0d2 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800b0c8:	69b9      	ldr	r1, [r7, #24]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 ff1f 	bl	800bf0e <I2C_Slave_ADDR>
 800b0d0:	e05a      	b.n	800b188 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b0d2:	69fb      	ldr	r3, [r7, #28]
 800b0d4:	f003 0310 	and.w	r3, r3, #16
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d008      	beq.n	800b0ee <HAL_I2C_EV_IRQHandler+0x206>
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d003      	beq.n	800b0ee <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f000 ff5a 	bl	800bfa0 <I2C_Slave_STOPF>
 800b0ec:	e04c      	b.n	800b188 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b0ee:	7bbb      	ldrb	r3, [r7, #14]
 800b0f0:	2b21      	cmp	r3, #33	@ 0x21
 800b0f2:	d002      	beq.n	800b0fa <HAL_I2C_EV_IRQHandler+0x212>
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	2b29      	cmp	r3, #41	@ 0x29
 800b0f8:	d120      	bne.n	800b13c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b0fa:	69fb      	ldr	r3, [r7, #28]
 800b0fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b100:	2b00      	cmp	r3, #0
 800b102:	d00d      	beq.n	800b120 <HAL_I2C_EV_IRQHandler+0x238>
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d008      	beq.n	800b120 <HAL_I2C_EV_IRQHandler+0x238>
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	f003 0304 	and.w	r3, r3, #4
 800b114:	2b00      	cmp	r3, #0
 800b116:	d103      	bne.n	800b120 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f000 fe3a 	bl	800bd92 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b11e:	e032      	b.n	800b186 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b120:	69fb      	ldr	r3, [r7, #28]
 800b122:	f003 0304 	and.w	r3, r3, #4
 800b126:	2b00      	cmp	r3, #0
 800b128:	d02d      	beq.n	800b186 <HAL_I2C_EV_IRQHandler+0x29e>
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b130:	2b00      	cmp	r3, #0
 800b132:	d028      	beq.n	800b186 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800b134:	6878      	ldr	r0, [r7, #4]
 800b136:	f000 fe69 	bl	800be0c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b13a:	e024      	b.n	800b186 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00d      	beq.n	800b162 <HAL_I2C_EV_IRQHandler+0x27a>
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d008      	beq.n	800b162 <HAL_I2C_EV_IRQHandler+0x27a>
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	f003 0304 	and.w	r3, r3, #4
 800b156:	2b00      	cmp	r3, #0
 800b158:	d103      	bne.n	800b162 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fe77 	bl	800be4e <I2C_SlaveReceive_RXNE>
 800b160:	e012      	b.n	800b188 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	f003 0304 	and.w	r3, r3, #4
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d00d      	beq.n	800b188 <HAL_I2C_EV_IRQHandler+0x2a0>
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b172:	2b00      	cmp	r3, #0
 800b174:	d008      	beq.n	800b188 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f000 fea7 	bl	800beca <I2C_SlaveReceive_BTF>
 800b17c:	e004      	b.n	800b188 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800b17e:	bf00      	nop
 800b180:	e002      	b.n	800b188 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800b182:	bf00      	nop
 800b184:	e000      	b.n	800b188 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800b186:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800b188:	3720      	adds	r7, #32
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}

0800b18e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b18e:	b480      	push	{r7}
 800b190:	b083      	sub	sp, #12
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800b196:	bf00      	nop
 800b198:	370c      	adds	r7, #12
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b083      	sub	sp, #12
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800b1aa:	bf00      	nop
 800b1ac:	370c      	adds	r7, #12
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr

0800b1b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1b6:	b480      	push	{r7}
 800b1b8:	b083      	sub	sp, #12
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800b1be:	bf00      	nop
 800b1c0:	370c      	adds	r7, #12
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b083      	sub	sp, #12
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800b1d2:	bf00      	nop
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b083      	sub	sp, #12
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	70fb      	strb	r3, [r7, #3]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800b1ee:	bf00      	nop
 800b1f0:	370c      	adds	r7, #12
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f8:	4770      	bx	lr

0800b1fa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b1fa:	b480      	push	{r7}
 800b1fc:	b083      	sub	sp, #12
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800b202:	bf00      	nop
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b20e:	b480      	push	{r7}
 800b210:	b083      	sub	sp, #12
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800b216:	bf00      	nop
 800b218:	370c      	adds	r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b222:	b480      	push	{r7}
 800b224:	b083      	sub	sp, #12
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800b22a:	bf00      	nop
 800b22c:	370c      	adds	r7, #12
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800b236:	b480      	push	{r7}
 800b238:	b083      	sub	sp, #12
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800b23e:	bf00      	nop
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b24a:	b580      	push	{r7, lr}
 800b24c:	b084      	sub	sp, #16
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b258:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b260:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b266:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d150      	bne.n	800b312 <I2C_MasterTransmit_TXE+0xc8>
 800b270:	7bfb      	ldrb	r3, [r7, #15]
 800b272:	2b21      	cmp	r3, #33	@ 0x21
 800b274:	d14d      	bne.n	800b312 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b276:	68bb      	ldr	r3, [r7, #8]
 800b278:	2b08      	cmp	r3, #8
 800b27a:	d01d      	beq.n	800b2b8 <I2C_MasterTransmit_TXE+0x6e>
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2b20      	cmp	r3, #32
 800b280:	d01a      	beq.n	800b2b8 <I2C_MasterTransmit_TXE+0x6e>
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b288:	d016      	beq.n	800b2b8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b298:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2211      	movs	r2, #17
 800b29e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2220      	movs	r2, #32
 800b2ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f7ff ff6c 	bl	800b18e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b2b6:	e060      	b.n	800b37a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	685a      	ldr	r2, [r3, #4]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b2c6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	681a      	ldr	r2, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2d6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2220      	movs	r2, #32
 800b2e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	2b40      	cmp	r3, #64	@ 0x40
 800b2f0:	d107      	bne.n	800b302 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800b2fa:	6878      	ldr	r0, [r7, #4]
 800b2fc:	f7ff ff87 	bl	800b20e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b300:	e03b      	b.n	800b37a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7ff ff3f 	bl	800b18e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b310:	e033      	b.n	800b37a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	2b21      	cmp	r3, #33	@ 0x21
 800b316:	d005      	beq.n	800b324 <I2C_MasterTransmit_TXE+0xda>
 800b318:	7bbb      	ldrb	r3, [r7, #14]
 800b31a:	2b40      	cmp	r3, #64	@ 0x40
 800b31c:	d12d      	bne.n	800b37a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
 800b320:	2b22      	cmp	r3, #34	@ 0x22
 800b322:	d12a      	bne.n	800b37a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b328:	b29b      	uxth	r3, r3
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d108      	bne.n	800b340 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b33c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800b33e:	e01c      	b.n	800b37a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b346:	b2db      	uxtb	r3, r3
 800b348:	2b40      	cmp	r3, #64	@ 0x40
 800b34a:	d103      	bne.n	800b354 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 f88e 	bl	800b46e <I2C_MemoryTransmit_TXE_BTF>
}
 800b352:	e012      	b.n	800b37a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b358:	781a      	ldrb	r2, [r3, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b364:	1c5a      	adds	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b36e:	b29b      	uxth	r3, r3
 800b370:	3b01      	subs	r3, #1
 800b372:	b29a      	uxth	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b378:	e7ff      	b.n	800b37a <I2C_MasterTransmit_TXE+0x130>
 800b37a:	bf00      	nop
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}

0800b382 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b382:	b580      	push	{r7, lr}
 800b384:	b084      	sub	sp, #16
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b396:	b2db      	uxtb	r3, r3
 800b398:	2b21      	cmp	r3, #33	@ 0x21
 800b39a:	d164      	bne.n	800b466 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d012      	beq.n	800b3cc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3aa:	781a      	ldrb	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800b3ca:	e04c      	b.n	800b466 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2b08      	cmp	r3, #8
 800b3d0:	d01d      	beq.n	800b40e <I2C_MasterTransmit_BTF+0x8c>
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2b20      	cmp	r3, #32
 800b3d6:	d01a      	beq.n	800b40e <I2C_MasterTransmit_BTF+0x8c>
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b3de:	d016      	beq.n	800b40e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	685a      	ldr	r2, [r3, #4]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b3ee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2211      	movs	r2, #17
 800b3f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2220      	movs	r2, #32
 800b402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f7ff fec1 	bl	800b18e <HAL_I2C_MasterTxCpltCallback>
}
 800b40c:	e02b      	b.n	800b466 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	685a      	ldr	r2, [r3, #4]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b41c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b42c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2220      	movs	r2, #32
 800b438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b40      	cmp	r3, #64	@ 0x40
 800b446:	d107      	bne.n	800b458 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7ff fedc 	bl	800b20e <HAL_I2C_MemTxCpltCallback>
}
 800b456:	e006      	b.n	800b466 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7ff fe94 	bl	800b18e <HAL_I2C_MasterTxCpltCallback>
}
 800b466:	bf00      	nop
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}

0800b46e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800b46e:	b580      	push	{r7, lr}
 800b470:	b084      	sub	sp, #16
 800b472:	af00      	add	r7, sp, #0
 800b474:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b47c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b482:	2b00      	cmp	r3, #0
 800b484:	d11d      	bne.n	800b4c2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d10b      	bne.n	800b4a6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b492:	b2da      	uxtb	r2, r3
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b49e:	1c9a      	adds	r2, r3, #2
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800b4a4:	e077      	b.n	800b596 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	121b      	asrs	r3, r3, #8
 800b4ae:	b2da      	uxtb	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4ba:	1c5a      	adds	r2, r3, #1
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b4c0:	e069      	b.n	800b596 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4c6:	2b01      	cmp	r3, #1
 800b4c8:	d10b      	bne.n	800b4e2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b4ce:	b2da      	uxtb	r2, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b4e0:	e059      	b.n	800b596 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d152      	bne.n	800b590 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
 800b4ec:	2b22      	cmp	r3, #34	@ 0x22
 800b4ee:	d10d      	bne.n	800b50c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b4fe:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800b50a:	e044      	b.n	800b596 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b510:	b29b      	uxth	r3, r3
 800b512:	2b00      	cmp	r3, #0
 800b514:	d015      	beq.n	800b542 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	2b21      	cmp	r3, #33	@ 0x21
 800b51a:	d112      	bne.n	800b542 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b520:	781a      	ldrb	r2, [r3, #0]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b536:	b29b      	uxth	r3, r3
 800b538:	3b01      	subs	r3, #1
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b540:	e029      	b.n	800b596 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b546:	b29b      	uxth	r3, r3
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d124      	bne.n	800b596 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	2b21      	cmp	r3, #33	@ 0x21
 800b550:	d121      	bne.n	800b596 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	685a      	ldr	r2, [r3, #4]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b560:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b570:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2200      	movs	r2, #0
 800b576:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2220      	movs	r2, #32
 800b57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2200      	movs	r2, #0
 800b584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f7ff fe40 	bl	800b20e <HAL_I2C_MemTxCpltCallback>
}
 800b58e:	e002      	b.n	800b596 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f7fe ffd8 	bl	800a546 <I2C_Flush_DR>
}
 800b596:	bf00      	nop
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b22      	cmp	r3, #34	@ 0x22
 800b5b0:	f040 80b9 	bne.w	800b726 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5b8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	2b03      	cmp	r3, #3
 800b5c6:	d921      	bls.n	800b60c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	691a      	ldr	r2, [r3, #16]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5d2:	b2d2      	uxtb	r2, r2
 800b5d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5da:	1c5a      	adds	r2, r3, #1
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	f040 8096 	bne.w	800b726 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	685a      	ldr	r2, [r3, #4]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b608:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800b60a:	e08c      	b.n	800b726 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b610:	2b02      	cmp	r3, #2
 800b612:	d07f      	beq.n	800b714 <I2C_MasterReceive_RXNE+0x176>
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b01      	cmp	r3, #1
 800b618:	d002      	beq.n	800b620 <I2C_MasterReceive_RXNE+0x82>
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d179      	bne.n	800b714 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f001 fc0b 	bl	800ce3c <I2C_WaitOnSTOPRequestThroughIT>
 800b626:	4603      	mov	r3, r0
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d14c      	bne.n	800b6c6 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b63a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	685a      	ldr	r2, [r3, #4]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b64a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	691a      	ldr	r2, [r3, #16]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b656:	b2d2      	uxtb	r2, r2
 800b658:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b65e:	1c5a      	adds	r2, r3, #1
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b668:	b29b      	uxth	r3, r3
 800b66a:	3b01      	subs	r3, #1
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2220      	movs	r2, #32
 800b676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b680:	b2db      	uxtb	r3, r3
 800b682:	2b40      	cmp	r3, #64	@ 0x40
 800b684:	d10a      	bne.n	800b69c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f7fa fb0f 	bl	8005cb8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b69a:	e044      	b.n	800b726 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b08      	cmp	r3, #8
 800b6a8:	d002      	beq.n	800b6b0 <I2C_MasterReceive_RXNE+0x112>
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	2b20      	cmp	r3, #32
 800b6ae:	d103      	bne.n	800b6b8 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b6b6:	e002      	b.n	800b6be <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2212      	movs	r2, #18
 800b6bc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f7ff fd6f 	bl	800b1a2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b6c4:	e02f      	b.n	800b726 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	685a      	ldr	r2, [r3, #4]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b6d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	691a      	ldr	r2, [r3, #16]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e0:	b2d2      	uxtb	r2, r2
 800b6e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	3b01      	subs	r3, #1
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2220      	movs	r2, #32
 800b700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f7ff fd88 	bl	800b222 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800b712:	e008      	b.n	800b726 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b722:	605a      	str	r2, [r3, #4]
}
 800b724:	e7ff      	b.n	800b726 <I2C_MasterReceive_RXNE+0x188>
 800b726:	bf00      	nop
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}

0800b72e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b72e:	b580      	push	{r7, lr}
 800b730:	b084      	sub	sp, #16
 800b732:	af00      	add	r7, sp, #0
 800b734:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b73a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b740:	b29b      	uxth	r3, r3
 800b742:	2b04      	cmp	r3, #4
 800b744:	d11b      	bne.n	800b77e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	685a      	ldr	r2, [r3, #4]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b754:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	691a      	ldr	r2, [r3, #16]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b760:	b2d2      	uxtb	r2, r2
 800b762:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b772:	b29b      	uxth	r3, r3
 800b774:	3b01      	subs	r3, #1
 800b776:	b29a      	uxth	r2, r3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800b77c:	e0c4      	b.n	800b908 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b782:	b29b      	uxth	r3, r3
 800b784:	2b03      	cmp	r3, #3
 800b786:	d129      	bne.n	800b7dc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	685a      	ldr	r2, [r3, #4]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b796:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2b04      	cmp	r3, #4
 800b79c:	d00a      	beq.n	800b7b4 <I2C_MasterReceive_BTF+0x86>
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	2b02      	cmp	r3, #2
 800b7a2:	d007      	beq.n	800b7b4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	691a      	ldr	r2, [r3, #16]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7be:	b2d2      	uxtb	r2, r2
 800b7c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7c6:	1c5a      	adds	r2, r3, #1
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b7da:	e095      	b.n	800b908 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	2b02      	cmp	r3, #2
 800b7e4:	d17d      	bne.n	800b8e2 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d002      	beq.n	800b7f2 <I2C_MasterReceive_BTF+0xc4>
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	2b10      	cmp	r3, #16
 800b7f0:	d108      	bne.n	800b804 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	e016      	b.n	800b832 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2b04      	cmp	r3, #4
 800b808:	d002      	beq.n	800b810 <I2C_MasterReceive_BTF+0xe2>
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	d108      	bne.n	800b822 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b81e:	601a      	str	r2, [r3, #0]
 800b820:	e007      	b.n	800b832 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b830:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691a      	ldr	r2, [r3, #16]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b83c:	b2d2      	uxtb	r2, r2
 800b83e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b844:	1c5a      	adds	r2, r3, #1
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b84e:	b29b      	uxth	r3, r3
 800b850:	3b01      	subs	r3, #1
 800b852:	b29a      	uxth	r2, r3
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	691a      	ldr	r2, [r3, #16]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b86a:	1c5a      	adds	r2, r3, #1
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b874:	b29b      	uxth	r3, r3
 800b876:	3b01      	subs	r3, #1
 800b878:	b29a      	uxth	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	685a      	ldr	r2, [r3, #4]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b88c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2220      	movs	r2, #32
 800b892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b89c:	b2db      	uxtb	r3, r3
 800b89e:	2b40      	cmp	r3, #64	@ 0x40
 800b8a0:	d10a      	bne.n	800b8b8 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7fa fa01 	bl	8005cb8 <HAL_I2C_MemRxCpltCallback>
}
 800b8b6:	e027      	b.n	800b908 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2b08      	cmp	r3, #8
 800b8c4:	d002      	beq.n	800b8cc <I2C_MasterReceive_BTF+0x19e>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2b20      	cmp	r3, #32
 800b8ca:	d103      	bne.n	800b8d4 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b8d2:	e002      	b.n	800b8da <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2212      	movs	r2, #18
 800b8d8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f7ff fc61 	bl	800b1a2 <HAL_I2C_MasterRxCpltCallback>
}
 800b8e0:	e012      	b.n	800b908 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	691a      	ldr	r2, [r3, #16]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8ec:	b2d2      	uxtb	r2, r2
 800b8ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8f4:	1c5a      	adds	r2, r3, #1
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b8fe:	b29b      	uxth	r3, r3
 800b900:	3b01      	subs	r3, #1
 800b902:	b29a      	uxth	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800b908:	bf00      	nop
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}

0800b910 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b40      	cmp	r3, #64	@ 0x40
 800b922:	d117      	bne.n	800b954 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d109      	bne.n	800b940 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b930:	b2db      	uxtb	r3, r3
 800b932:	461a      	mov	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b93c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800b93e:	e067      	b.n	800ba10 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b944:	b2db      	uxtb	r3, r3
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	611a      	str	r2, [r3, #16]
}
 800b952:	e05d      	b.n	800ba10 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b95c:	d133      	bne.n	800b9c6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b21      	cmp	r3, #33	@ 0x21
 800b968:	d109      	bne.n	800b97e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	461a      	mov	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b97a:	611a      	str	r2, [r3, #16]
 800b97c:	e008      	b.n	800b990 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b982:	b2db      	uxtb	r3, r3
 800b984:	f043 0301 	orr.w	r3, r3, #1
 800b988:	b2da      	uxtb	r2, r3
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <I2C_Master_SB+0x92>
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d108      	bne.n	800b9b4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d032      	beq.n	800ba10 <I2C_Master_SB+0x100>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d02d      	beq.n	800ba10 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9c2:	605a      	str	r2, [r3, #4]
}
 800b9c4:	e024      	b.n	800ba10 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10e      	bne.n	800b9ec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9d2:	b29b      	uxth	r3, r3
 800b9d4:	11db      	asrs	r3, r3, #7
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 0306 	and.w	r3, r3, #6
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	f063 030f 	orn	r3, r3, #15
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	611a      	str	r2, [r3, #16]
}
 800b9ea:	e011      	b.n	800ba10 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	d10d      	bne.n	800ba10 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	11db      	asrs	r3, r3, #7
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	f003 0306 	and.w	r3, r3, #6
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	f063 030e 	orn	r3, r3, #14
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	611a      	str	r2, [r3, #16]
}
 800ba10:	bf00      	nop
 800ba12:	370c      	adds	r7, #12
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b083      	sub	sp, #12
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d004      	beq.n	800ba42 <I2C_Master_ADD10+0x26>
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d108      	bne.n	800ba54 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00c      	beq.n	800ba64 <I2C_Master_ADD10+0x48>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d007      	beq.n	800ba64 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	685a      	ldr	r2, [r3, #4]
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba62:	605a      	str	r2, [r3, #4]
  }
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b091      	sub	sp, #68	@ 0x44
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba86:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba8c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b22      	cmp	r3, #34	@ 0x22
 800ba98:	f040 8169 	bne.w	800bd6e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10f      	bne.n	800bac4 <I2C_Master_ADDR+0x54>
 800baa4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800baa8:	2b40      	cmp	r3, #64	@ 0x40
 800baaa:	d10b      	bne.n	800bac4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800baac:	2300      	movs	r3, #0
 800baae:	633b      	str	r3, [r7, #48]	@ 0x30
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	695b      	ldr	r3, [r3, #20]
 800bab6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	633b      	str	r3, [r7, #48]	@ 0x30
 800bac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac2:	e160      	b.n	800bd86 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d11d      	bne.n	800bb08 <I2C_Master_ADDR+0x98>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800bad4:	d118      	bne.n	800bb08 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bad6:	2300      	movs	r3, #0
 800bad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800baea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bafa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	651a      	str	r2, [r3, #80]	@ 0x50
 800bb06:	e13e      	b.n	800bd86 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d113      	bne.n	800bb3a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb12:	2300      	movs	r3, #0
 800bb14:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	695b      	ldr	r3, [r3, #20]
 800bb1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	699b      	ldr	r3, [r3, #24]
 800bb24:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681a      	ldr	r2, [r3, #0]
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	e115      	b.n	800bd66 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	f040 808a 	bne.w	800bc5a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800bb46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bb4c:	d137      	bne.n	800bbbe <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb5c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb6c:	d113      	bne.n	800bb96 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb7c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb7e:	2300      	movs	r3, #0
 800bb80:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	695b      	ldr	r3, [r3, #20]
 800bb88:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	699b      	ldr	r3, [r3, #24]
 800bb90:	627b      	str	r3, [r7, #36]	@ 0x24
 800bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb94:	e0e7      	b.n	800bd66 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bb96:	2300      	movs	r3, #0
 800bb98:	623b      	str	r3, [r7, #32]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	623b      	str	r3, [r7, #32]
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	699b      	ldr	r3, [r3, #24]
 800bba8:	623b      	str	r3, [r7, #32]
 800bbaa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbba:	601a      	str	r2, [r3, #0]
 800bbbc:	e0d3      	b.n	800bd66 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc0:	2b08      	cmp	r3, #8
 800bbc2:	d02e      	beq.n	800bc22 <I2C_Master_ADDR+0x1b2>
 800bbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbc6:	2b20      	cmp	r3, #32
 800bbc8:	d02b      	beq.n	800bc22 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800bbca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbcc:	2b12      	cmp	r3, #18
 800bbce:	d102      	bne.n	800bbd6 <I2C_Master_ADDR+0x166>
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d125      	bne.n	800bc22 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd8:	2b04      	cmp	r3, #4
 800bbda:	d00e      	beq.n	800bbfa <I2C_Master_ADDR+0x18a>
 800bbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d00b      	beq.n	800bbfa <I2C_Master_ADDR+0x18a>
 800bbe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe4:	2b10      	cmp	r3, #16
 800bbe6:	d008      	beq.n	800bbfa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681a      	ldr	r2, [r3, #0]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	e007      	b.n	800bc0a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	681a      	ldr	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bc08:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc0a:	2300      	movs	r3, #0
 800bc0c:	61fb      	str	r3, [r7, #28]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	61fb      	str	r3, [r7, #28]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	699b      	ldr	r3, [r3, #24]
 800bc1c:	61fb      	str	r3, [r7, #28]
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	e0a1      	b.n	800bd66 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc30:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bc32:	2300      	movs	r3, #0
 800bc34:	61bb      	str	r3, [r7, #24]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	61bb      	str	r3, [r7, #24]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	699b      	ldr	r3, [r3, #24]
 800bc44:	61bb      	str	r3, [r7, #24]
 800bc46:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e085      	b.n	800bd66 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d14d      	bne.n	800bd00 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	d016      	beq.n	800bc98 <I2C_Master_ADDR+0x228>
 800bc6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d013      	beq.n	800bc98 <I2C_Master_ADDR+0x228>
 800bc70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc72:	2b10      	cmp	r3, #16
 800bc74:	d010      	beq.n	800bc98 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc84:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	e007      	b.n	800bca8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681a      	ldr	r2, [r3, #0]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bca6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bcb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bcb6:	d117      	bne.n	800bce8 <I2C_Master_ADDR+0x278>
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bcbe:	d00b      	beq.n	800bcd8 <I2C_Master_ADDR+0x268>
 800bcc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d008      	beq.n	800bcd8 <I2C_Master_ADDR+0x268>
 800bcc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcc8:	2b08      	cmp	r3, #8
 800bcca:	d005      	beq.n	800bcd8 <I2C_Master_ADDR+0x268>
 800bccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcce:	2b10      	cmp	r3, #16
 800bcd0:	d002      	beq.n	800bcd8 <I2C_Master_ADDR+0x268>
 800bcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcd4:	2b20      	cmp	r3, #32
 800bcd6:	d107      	bne.n	800bce8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	685a      	ldr	r2, [r3, #4]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bce6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bce8:	2300      	movs	r3, #0
 800bcea:	617b      	str	r3, [r7, #20]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	617b      	str	r3, [r7, #20]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	617b      	str	r3, [r7, #20]
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	e032      	b.n	800bd66 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bd0e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd1e:	d117      	bne.n	800bd50 <I2C_Master_ADDR+0x2e0>
 800bd20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd22:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bd26:	d00b      	beq.n	800bd40 <I2C_Master_ADDR+0x2d0>
 800bd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd2a:	2b01      	cmp	r3, #1
 800bd2c:	d008      	beq.n	800bd40 <I2C_Master_ADDR+0x2d0>
 800bd2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd30:	2b08      	cmp	r3, #8
 800bd32:	d005      	beq.n	800bd40 <I2C_Master_ADDR+0x2d0>
 800bd34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd36:	2b10      	cmp	r3, #16
 800bd38:	d002      	beq.n	800bd40 <I2C_Master_ADDR+0x2d0>
 800bd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3c:	2b20      	cmp	r3, #32
 800bd3e:	d107      	bne.n	800bd50 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685a      	ldr	r2, [r3, #4]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800bd4e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd50:	2300      	movs	r3, #0
 800bd52:	613b      	str	r3, [r7, #16]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	695b      	ldr	r3, [r3, #20]
 800bd5a:	613b      	str	r3, [r7, #16]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	699b      	ldr	r3, [r3, #24]
 800bd62:	613b      	str	r3, [r7, #16]
 800bd64:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800bd6c:	e00b      	b.n	800bd86 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60fb      	str	r3, [r7, #12]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	695b      	ldr	r3, [r3, #20]
 800bd78:	60fb      	str	r3, [r7, #12]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	60fb      	str	r3, [r7, #12]
 800bd82:	68fb      	ldr	r3, [r7, #12]
}
 800bd84:	e7ff      	b.n	800bd86 <I2C_Master_ADDR+0x316>
 800bd86:	bf00      	nop
 800bd88:	3744      	adds	r7, #68	@ 0x44
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr

0800bd92 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800bd92:	b580      	push	{r7, lr}
 800bd94:	b084      	sub	sp, #16
 800bd96:	af00      	add	r7, sp, #0
 800bd98:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bda0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d02b      	beq.n	800be04 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdb0:	781a      	ldrb	r2, [r3, #0]
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d114      	bne.n	800be04 <I2C_SlaveTransmit_TXE+0x72>
 800bdda:	7bfb      	ldrb	r3, [r7, #15]
 800bddc:	2b29      	cmp	r3, #41	@ 0x29
 800bdde:	d111      	bne.n	800be04 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bdee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2221      	movs	r2, #33	@ 0x21
 800bdf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2228      	movs	r2, #40	@ 0x28
 800bdfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7ff f9d9 	bl	800b1b6 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800be04:	bf00      	nop
 800be06:	3710      	adds	r7, #16
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be18:	b29b      	uxth	r3, r3
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d011      	beq.n	800be42 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be22:	781a      	ldrb	r2, [r3, #0]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be38:	b29b      	uxth	r3, r3
 800be3a:	3b01      	subs	r3, #1
 800be3c:	b29a      	uxth	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800be42:	bf00      	nop
 800be44:	370c      	adds	r7, #12
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be5c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be62:	b29b      	uxth	r3, r3
 800be64:	2b00      	cmp	r3, #0
 800be66:	d02c      	beq.n	800bec2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	691a      	ldr	r2, [r3, #16]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be72:	b2d2      	uxtb	r2, r2
 800be74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be84:	b29b      	uxth	r3, r3
 800be86:	3b01      	subs	r3, #1
 800be88:	b29a      	uxth	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800be92:	b29b      	uxth	r3, r3
 800be94:	2b00      	cmp	r3, #0
 800be96:	d114      	bne.n	800bec2 <I2C_SlaveReceive_RXNE+0x74>
 800be98:	7bfb      	ldrb	r3, [r7, #15]
 800be9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be9c:	d111      	bne.n	800bec2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	685a      	ldr	r2, [r3, #4]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2222      	movs	r2, #34	@ 0x22
 800beb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2228      	movs	r2, #40	@ 0x28
 800beb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f7ff f984 	bl	800b1ca <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800bec2:	bf00      	nop
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800beca:	b480      	push	{r7}
 800becc:	b083      	sub	sp, #12
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d012      	beq.n	800bf02 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	691a      	ldr	r2, [r3, #16]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee6:	b2d2      	uxtb	r2, r2
 800bee8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800beee:	1c5a      	adds	r2, r3, #1
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bef8:	b29b      	uxth	r3, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	b29a      	uxth	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800bf02:	bf00      	nop
 800bf04:	370c      	adds	r7, #12
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf22:	b2db      	uxtb	r3, r3
 800bf24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bf28:	2b28      	cmp	r3, #40	@ 0x28
 800bf2a:	d125      	bne.n	800bf78 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	685a      	ldr	r2, [r3, #4]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf3a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	f003 0304 	and.w	r3, r3, #4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800bf46:	2301      	movs	r3, #1
 800bf48:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d103      	bne.n	800bf5c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	68db      	ldr	r3, [r3, #12]
 800bf58:	81bb      	strh	r3, [r7, #12]
 800bf5a:	e002      	b.n	800bf62 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2200      	movs	r2, #0
 800bf66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800bf6a:	89ba      	ldrh	r2, [r7, #12]
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff f934 	bl	800b1de <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800bf76:	e00e      	b.n	800bf96 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf78:	2300      	movs	r3, #0
 800bf7a:	60bb      	str	r3, [r7, #8]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	695b      	ldr	r3, [r3, #20]
 800bf82:	60bb      	str	r3, [r7, #8]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	60bb      	str	r3, [r7, #8]
 800bf8c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800bf96:	bf00      	nop
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800bfbe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	60bb      	str	r3, [r7, #8]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	60bb      	str	r3, [r7, #8]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f042 0201 	orr.w	r2, r2, #1
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bffc:	d172      	bne.n	800c0e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800bffe:	7bfb      	ldrb	r3, [r7, #15]
 800c000:	2b22      	cmp	r3, #34	@ 0x22
 800c002:	d002      	beq.n	800c00a <I2C_Slave_STOPF+0x6a>
 800c004:	7bfb      	ldrb	r3, [r7, #15]
 800c006:	2b2a      	cmp	r3, #42	@ 0x2a
 800c008:	d135      	bne.n	800c076 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	b29a      	uxth	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c01c:	b29b      	uxth	r3, r3
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d005      	beq.n	800c02e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c026:	f043 0204 	orr.w	r2, r3, #4
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	685a      	ldr	r2, [r3, #4]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c03c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c042:	4618      	mov	r0, r3
 800c044:	f7fd fd58 	bl	8009af8 <HAL_DMA_GetState>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d049      	beq.n	800c0e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c052:	4a69      	ldr	r2, [pc, #420]	@ (800c1f8 <I2C_Slave_STOPF+0x258>)
 800c054:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7fd fba0 	bl	80097a0 <HAL_DMA_Abort_IT>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d03d      	beq.n	800c0e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c070:	4610      	mov	r0, r2
 800c072:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c074:	e035      	b.n	800c0e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	685b      	ldr	r3, [r3, #4]
 800c07e:	b29a      	uxth	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c088:	b29b      	uxth	r3, r3
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d005      	beq.n	800c09a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c092:	f043 0204 	orr.w	r2, r3, #4
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c0a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fd fd22 	bl	8009af8 <HAL_DMA_GetState>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d014      	beq.n	800c0e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0be:	4a4e      	ldr	r2, [pc, #312]	@ (800c1f8 <I2C_Slave_STOPF+0x258>)
 800c0c0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f7fd fb6a 	bl	80097a0 <HAL_DMA_Abort_IT>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d008      	beq.n	800c0e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c0dc:	4610      	mov	r0, r2
 800c0de:	4798      	blx	r3
 800c0e0:	e000      	b.n	800c0e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800c0e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d03e      	beq.n	800c16c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	f003 0304 	and.w	r3, r3, #4
 800c0f8:	2b04      	cmp	r3, #4
 800c0fa:	d112      	bne.n	800c122 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	691a      	ldr	r2, [r3, #16]
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c106:	b2d2      	uxtb	r2, r2
 800c108:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c10e:	1c5a      	adds	r2, r3, #1
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c118:	b29b      	uxth	r3, r3
 800c11a:	3b01      	subs	r3, #1
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	695b      	ldr	r3, [r3, #20]
 800c128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c12c:	2b40      	cmp	r3, #64	@ 0x40
 800c12e:	d112      	bne.n	800c156 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	691a      	ldr	r2, [r3, #16]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c13a:	b2d2      	uxtb	r2, r2
 800c13c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c142:	1c5a      	adds	r2, r3, #1
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	3b01      	subs	r3, #1
 800c150:	b29a      	uxth	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c15a:	b29b      	uxth	r3, r3
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d005      	beq.n	800c16c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c164:	f043 0204 	orr.w	r2, r3, #4
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c170:	2b00      	cmp	r3, #0
 800c172:	d003      	beq.n	800c17c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f000 f843 	bl	800c200 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800c17a:	e039      	b.n	800c1f0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c180:	d109      	bne.n	800c196 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2228      	movs	r2, #40	@ 0x28
 800c18c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7ff f81a 	bl	800b1ca <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b28      	cmp	r3, #40	@ 0x28
 800c1a0:	d111      	bne.n	800c1c6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a15      	ldr	r2, [pc, #84]	@ (800c1fc <I2C_Slave_STOPF+0x25c>)
 800c1a6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2220      	movs	r2, #32
 800c1b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f7ff f81b 	bl	800b1fa <HAL_I2C_ListenCpltCallback>
}
 800c1c4:	e014      	b.n	800c1f0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1ca:	2b22      	cmp	r3, #34	@ 0x22
 800c1cc:	d002      	beq.n	800c1d4 <I2C_Slave_STOPF+0x234>
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
 800c1d0:	2b22      	cmp	r3, #34	@ 0x22
 800c1d2:	d10d      	bne.n	800c1f0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2220      	movs	r2, #32
 800c1de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c1ea:	6878      	ldr	r0, [r7, #4]
 800c1ec:	f7fe ffed 	bl	800b1ca <HAL_I2C_SlaveRxCpltCallback>
}
 800c1f0:	bf00      	nop
 800c1f2:	3710      	adds	r7, #16
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	0800c999 	.word	0x0800c999
 800c1fc:	ffff0000 	.word	0xffff0000

0800c200 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b084      	sub	sp, #16
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c20e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c216:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800c218:	7bbb      	ldrb	r3, [r7, #14]
 800c21a:	2b10      	cmp	r3, #16
 800c21c:	d002      	beq.n	800c224 <I2C_ITError+0x24>
 800c21e:	7bbb      	ldrb	r3, [r7, #14]
 800c220:	2b40      	cmp	r3, #64	@ 0x40
 800c222:	d10a      	bne.n	800c23a <I2C_ITError+0x3a>
 800c224:	7bfb      	ldrb	r3, [r7, #15]
 800c226:	2b22      	cmp	r3, #34	@ 0x22
 800c228:	d107      	bne.n	800c23a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c238:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c240:	2b28      	cmp	r3, #40	@ 0x28
 800c242:	d107      	bne.n	800c254 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2228      	movs	r2, #40	@ 0x28
 800c24e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c252:	e015      	b.n	800c280 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c25e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c262:	d00a      	beq.n	800c27a <I2C_ITError+0x7a>
 800c264:	7bfb      	ldrb	r3, [r7, #15]
 800c266:	2b60      	cmp	r3, #96	@ 0x60
 800c268:	d007      	beq.n	800c27a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2220      	movs	r2, #32
 800c26e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c28a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c28e:	d162      	bne.n	800c356 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	685a      	ldr	r2, [r3, #4]
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c29e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d020      	beq.n	800c2f0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2b2:	4a6a      	ldr	r2, [pc, #424]	@ (800c45c <I2C_ITError+0x25c>)
 800c2b4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f7fd fa70 	bl	80097a0 <HAL_DMA_Abort_IT>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	f000 8089 	beq.w	800c3da <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 0201 	bic.w	r2, r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2220      	movs	r2, #32
 800c2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c2e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c2ea:	4610      	mov	r0, r2
 800c2ec:	4798      	blx	r3
 800c2ee:	e074      	b.n	800c3da <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f4:	4a59      	ldr	r2, [pc, #356]	@ (800c45c <I2C_ITError+0x25c>)
 800c2f6:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fd fa4f 	bl	80097a0 <HAL_DMA_Abort_IT>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d068      	beq.n	800c3da <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c312:	2b40      	cmp	r3, #64	@ 0x40
 800c314:	d10b      	bne.n	800c32e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	691a      	ldr	r2, [r3, #16]
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c320:	b2d2      	uxtb	r2, r2
 800c322:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c328:	1c5a      	adds	r2, r3, #1
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	681a      	ldr	r2, [r3, #0]
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f022 0201 	bic.w	r2, r2, #1
 800c33c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2220      	movs	r2, #32
 800c342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c34a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c350:	4610      	mov	r0, r2
 800c352:	4798      	blx	r3
 800c354:	e041      	b.n	800c3da <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c35c:	b2db      	uxtb	r3, r3
 800c35e:	2b60      	cmp	r3, #96	@ 0x60
 800c360:	d125      	bne.n	800c3ae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2220      	movs	r2, #32
 800c366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c37a:	2b40      	cmp	r3, #64	@ 0x40
 800c37c:	d10b      	bne.n	800c396 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	691a      	ldr	r2, [r3, #16]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c388:	b2d2      	uxtb	r2, r2
 800c38a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c390:	1c5a      	adds	r2, r3, #1
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	f022 0201 	bic.w	r2, r2, #1
 800c3a4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7fe ff45 	bl	800b236 <HAL_I2C_AbortCpltCallback>
 800c3ac:	e015      	b.n	800c3da <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3b8:	2b40      	cmp	r3, #64	@ 0x40
 800c3ba:	d10b      	bne.n	800c3d4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	691a      	ldr	r2, [r3, #16]
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3c6:	b2d2      	uxtb	r2, r2
 800c3c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3ce:	1c5a      	adds	r2, r3, #1
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f7fe ff24 	bl	800b222 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3de:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	f003 0301 	and.w	r3, r3, #1
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d10e      	bne.n	800c408 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d109      	bne.n	800c408 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d104      	bne.n	800c408 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800c404:	2b00      	cmp	r3, #0
 800c406:	d007      	beq.n	800c418 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	685a      	ldr	r2, [r3, #4]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800c416:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c41e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b04      	cmp	r3, #4
 800c42a:	d113      	bne.n	800c454 <I2C_ITError+0x254>
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
 800c42e:	2b28      	cmp	r3, #40	@ 0x28
 800c430:	d110      	bne.n	800c454 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a0a      	ldr	r2, [pc, #40]	@ (800c460 <I2C_ITError+0x260>)
 800c436:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2220      	movs	r2, #32
 800c442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2200      	movs	r2, #0
 800c44a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7fe fed3 	bl	800b1fa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c454:	bf00      	nop
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	0800c999 	.word	0x0800c999
 800c460:	ffff0000 	.word	0xffff0000

0800c464 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b088      	sub	sp, #32
 800c468:	af02      	add	r7, sp, #8
 800c46a:	60f8      	str	r0, [r7, #12]
 800c46c:	4608      	mov	r0, r1
 800c46e:	4611      	mov	r1, r2
 800c470:	461a      	mov	r2, r3
 800c472:	4603      	mov	r3, r0
 800c474:	817b      	strh	r3, [r7, #10]
 800c476:	460b      	mov	r3, r1
 800c478:	813b      	strh	r3, [r7, #8]
 800c47a:	4613      	mov	r3, r2
 800c47c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c48c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	2200      	movs	r2, #0
 800c496:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f000 fb24 	bl	800cae8 <I2C_WaitOnFlagUntilTimeout>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d00d      	beq.n	800c4c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4b4:	d103      	bne.n	800c4be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c4bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e05f      	b.n	800c582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c4c2:	897b      	ldrh	r3, [r7, #10]
 800c4c4:	b2db      	uxtb	r3, r3
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c4d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d4:	6a3a      	ldr	r2, [r7, #32]
 800c4d6:	492d      	ldr	r1, [pc, #180]	@ (800c58c <I2C_RequestMemoryWrite+0x128>)
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	f000 fb7f 	bl	800cbdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d001      	beq.n	800c4e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e04c      	b.n	800c582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	617b      	str	r3, [r7, #20]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	617b      	str	r3, [r7, #20]
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	617b      	str	r3, [r7, #20]
 800c4fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c500:	6a39      	ldr	r1, [r7, #32]
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f000 fc0a 	bl	800cd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00d      	beq.n	800c52a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c512:	2b04      	cmp	r3, #4
 800c514:	d107      	bne.n	800c526 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c526:	2301      	movs	r3, #1
 800c528:	e02b      	b.n	800c582 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c52a:	88fb      	ldrh	r3, [r7, #6]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d105      	bne.n	800c53c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c530:	893b      	ldrh	r3, [r7, #8]
 800c532:	b2da      	uxtb	r2, r3
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	611a      	str	r2, [r3, #16]
 800c53a:	e021      	b.n	800c580 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c53c:	893b      	ldrh	r3, [r7, #8]
 800c53e:	0a1b      	lsrs	r3, r3, #8
 800c540:	b29b      	uxth	r3, r3
 800c542:	b2da      	uxtb	r2, r3
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c54a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c54c:	6a39      	ldr	r1, [r7, #32]
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f000 fbe4 	bl	800cd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800c554:	4603      	mov	r3, r0
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00d      	beq.n	800c576 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c55e:	2b04      	cmp	r3, #4
 800c560:	d107      	bne.n	800c572 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c572:	2301      	movs	r3, #1
 800c574:	e005      	b.n	800c582 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c576:	893b      	ldrh	r3, [r7, #8]
 800c578:	b2da      	uxtb	r2, r3
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	00010002 	.word	0x00010002

0800c590 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b088      	sub	sp, #32
 800c594:	af02      	add	r7, sp, #8
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	4608      	mov	r0, r1
 800c59a:	4611      	mov	r1, r2
 800c59c:	461a      	mov	r2, r3
 800c59e:	4603      	mov	r3, r0
 800c5a0:	817b      	strh	r3, [r7, #10]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	813b      	strh	r3, [r7, #8]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c5b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c5c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5cc:	9300      	str	r3, [sp, #0]
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f000 fa86 	bl	800cae8 <I2C_WaitOnFlagUntilTimeout>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d00d      	beq.n	800c5fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c5ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5f0:	d103      	bne.n	800c5fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c5f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c5fa:	2303      	movs	r3, #3
 800c5fc:	e0aa      	b.n	800c754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800c5fe:	897b      	ldrh	r3, [r7, #10]
 800c600:	b2db      	uxtb	r3, r3
 800c602:	461a      	mov	r2, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800c60c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c610:	6a3a      	ldr	r2, [r7, #32]
 800c612:	4952      	ldr	r1, [pc, #328]	@ (800c75c <I2C_RequestMemoryRead+0x1cc>)
 800c614:	68f8      	ldr	r0, [r7, #12]
 800c616:	f000 fae1 	bl	800cbdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d001      	beq.n	800c624 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800c620:	2301      	movs	r3, #1
 800c622:	e097      	b.n	800c754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800c624:	2300      	movs	r3, #0
 800c626:	617b      	str	r3, [r7, #20]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	617b      	str	r3, [r7, #20]
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	699b      	ldr	r3, [r3, #24]
 800c636:	617b      	str	r3, [r7, #20]
 800c638:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c63a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c63c:	6a39      	ldr	r1, [r7, #32]
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f000 fb6c 	bl	800cd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00d      	beq.n	800c666 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c64e:	2b04      	cmp	r3, #4
 800c650:	d107      	bne.n	800c662 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c660:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c662:	2301      	movs	r3, #1
 800c664:	e076      	b.n	800c754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c666:	88fb      	ldrh	r3, [r7, #6]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d105      	bne.n	800c678 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c66c:	893b      	ldrh	r3, [r7, #8]
 800c66e:	b2da      	uxtb	r2, r3
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	611a      	str	r2, [r3, #16]
 800c676:	e021      	b.n	800c6bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800c678:	893b      	ldrh	r3, [r7, #8]
 800c67a:	0a1b      	lsrs	r3, r3, #8
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	b2da      	uxtb	r2, r3
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c688:	6a39      	ldr	r1, [r7, #32]
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f000 fb46 	bl	800cd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00d      	beq.n	800c6b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c69a:	2b04      	cmp	r3, #4
 800c69c:	d107      	bne.n	800c6ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	681a      	ldr	r2, [r3, #0]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	e050      	b.n	800c754 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800c6b2:	893b      	ldrh	r3, [r7, #8]
 800c6b4:	b2da      	uxtb	r2, r3
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c6bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6be:	6a39      	ldr	r1, [r7, #32]
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f000 fb2b 	bl	800cd1c <I2C_WaitOnTXEFlagUntilTimeout>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00d      	beq.n	800c6e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6d0:	2b04      	cmp	r3, #4
 800c6d2:	d107      	bne.n	800c6e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	e035      	b.n	800c754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c6f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	2200      	movs	r2, #0
 800c700:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 f9ef 	bl	800cae8 <I2C_WaitOnFlagUntilTimeout>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d00d      	beq.n	800c72c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c71a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c71e:	d103      	bne.n	800c728 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c726:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c728:	2303      	movs	r3, #3
 800c72a:	e013      	b.n	800c754 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c72c:	897b      	ldrh	r3, [r7, #10]
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	f043 0301 	orr.w	r3, r3, #1
 800c734:	b2da      	uxtb	r2, r3
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73e:	6a3a      	ldr	r2, [r7, #32]
 800c740:	4906      	ldr	r1, [pc, #24]	@ (800c75c <I2C_RequestMemoryRead+0x1cc>)
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f000 fa4a 	bl	800cbdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c748:	4603      	mov	r3, r0
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d001      	beq.n	800c752 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	e000      	b.n	800c754 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3718      	adds	r7, #24
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}
 800c75c:	00010002 	.word	0x00010002

0800c760 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800c760:	b580      	push	{r7, lr}
 800c762:	b086      	sub	sp, #24
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c76c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c76e:	697b      	ldr	r3, [r7, #20]
 800c770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c774:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c77c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c782:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	685a      	ldr	r2, [r3, #4]
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800c792:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d003      	beq.n	800c7a4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c7a4:	697b      	ldr	r3, [r7, #20]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d003      	beq.n	800c7b4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800c7b4:	7cfb      	ldrb	r3, [r7, #19]
 800c7b6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800c7ba:	2b21      	cmp	r3, #33	@ 0x21
 800c7bc:	d007      	beq.n	800c7ce <I2C_DMAXferCplt+0x6e>
 800c7be:	7cfb      	ldrb	r3, [r7, #19]
 800c7c0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800c7c4:	2b22      	cmp	r3, #34	@ 0x22
 800c7c6:	d131      	bne.n	800c82c <I2C_DMAXferCplt+0xcc>
 800c7c8:	7cbb      	ldrb	r3, [r7, #18]
 800c7ca:	2b20      	cmp	r3, #32
 800c7cc:	d12e      	bne.n	800c82c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	685a      	ldr	r2, [r3, #4]
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c7dc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	2200      	movs	r2, #0
 800c7e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800c7e4:	7cfb      	ldrb	r3, [r7, #19]
 800c7e6:	2b29      	cmp	r3, #41	@ 0x29
 800c7e8:	d10a      	bne.n	800c800 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	2221      	movs	r2, #33	@ 0x21
 800c7ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	2228      	movs	r2, #40	@ 0x28
 800c7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800c7f8:	6978      	ldr	r0, [r7, #20]
 800c7fa:	f7fe fcdc 	bl	800b1b6 <HAL_I2C_SlaveTxCpltCallback>
 800c7fe:	e00c      	b.n	800c81a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800c800:	7cfb      	ldrb	r3, [r7, #19]
 800c802:	2b2a      	cmp	r3, #42	@ 0x2a
 800c804:	d109      	bne.n	800c81a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	2222      	movs	r2, #34	@ 0x22
 800c80a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	2228      	movs	r2, #40	@ 0x28
 800c810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800c814:	6978      	ldr	r0, [r7, #20]
 800c816:	f7fe fcd8 	bl	800b1ca <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	685a      	ldr	r2, [r3, #4]
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800c828:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800c82a:	e074      	b.n	800c916 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	d06e      	beq.n	800c916 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d107      	bne.n	800c852 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c850:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800c860:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800c868:	d009      	beq.n	800c87e <I2C_DMAXferCplt+0x11e>
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b08      	cmp	r3, #8
 800c86e:	d006      	beq.n	800c87e <I2C_DMAXferCplt+0x11e>
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c876:	d002      	beq.n	800c87e <I2C_DMAXferCplt+0x11e>
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2b20      	cmp	r3, #32
 800c87c:	d107      	bne.n	800c88e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c88c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	685a      	ldr	r2, [r3, #4]
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c89c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800c8ac:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800c8bc:	6978      	ldr	r0, [r7, #20]
 800c8be:	f7fe fcb0 	bl	800b222 <HAL_I2C_ErrorCallback>
}
 800c8c2:	e028      	b.n	800c916 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2220      	movs	r2, #32
 800c8c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	2b40      	cmp	r3, #64	@ 0x40
 800c8d6:	d10a      	bne.n	800c8ee <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800c8e6:	6978      	ldr	r0, [r7, #20]
 800c8e8:	f7f9 f9e6 	bl	8005cb8 <HAL_I2C_MemRxCpltCallback>
}
 800c8ec:	e013      	b.n	800c916 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2b08      	cmp	r3, #8
 800c8fa:	d002      	beq.n	800c902 <I2C_DMAXferCplt+0x1a2>
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b20      	cmp	r3, #32
 800c900:	d103      	bne.n	800c90a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	2200      	movs	r2, #0
 800c906:	631a      	str	r2, [r3, #48]	@ 0x30
 800c908:	e002      	b.n	800c910 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	2212      	movs	r2, #18
 800c90e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800c910:	6978      	ldr	r0, [r7, #20]
 800c912:	f7fe fc46 	bl	800b1a2 <HAL_I2C_MasterRxCpltCallback>
}
 800c916:	bf00      	nop
 800c918:	3718      	adds	r7, #24
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}

0800c91e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c92a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c930:	2b00      	cmp	r3, #0
 800c932:	d003      	beq.n	800c93c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c938:	2200      	movs	r2, #0
 800c93a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c948:	2200      	movs	r2, #0
 800c94a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f7fd f8e1 	bl	8009b14 <HAL_DMA_GetError>
 800c952:	4603      	mov	r3, r0
 800c954:	2b02      	cmp	r3, #2
 800c956:	d01b      	beq.n	800c990 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c966:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	2200      	movs	r2, #0
 800c96c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	2220      	movs	r2, #32
 800c972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c982:	f043 0210 	orr.w	r2, r3, #16
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f7fe fc49 	bl	800b222 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c990:	bf00      	nop
 800c992:	3710      	adds	r7, #16
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9a8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c9b0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800c9b2:	4b4b      	ldr	r3, [pc, #300]	@ (800cae0 <I2C_DMAAbort+0x148>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	08db      	lsrs	r3, r3, #3
 800c9b8:	4a4a      	ldr	r2, [pc, #296]	@ (800cae4 <I2C_DMAAbort+0x14c>)
 800c9ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c9be:	0a1a      	lsrs	r2, r3, #8
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	4413      	add	r3, r2
 800c9c6:	00da      	lsls	r2, r3, #3
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d106      	bne.n	800c9e0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d6:	f043 0220 	orr.w	r2, r3, #32
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800c9de:	e00a      	b.n	800c9f6 <I2C_DMAAbort+0x5e>
    }
    count--;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	3b01      	subs	r3, #1
 800c9e4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c9f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f4:	d0ea      	beq.n	800c9cc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d003      	beq.n	800ca06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800c9fe:	697b      	ldr	r3, [r7, #20]
 800ca00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca02:	2200      	movs	r2, #0
 800ca04:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca12:	2200      	movs	r2, #0
 800ca14:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d003      	beq.n	800ca3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ca38:	2200      	movs	r2, #0
 800ca3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d003      	beq.n	800ca4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ca44:	697b      	ldr	r3, [r7, #20]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca48:	2200      	movs	r2, #0
 800ca4a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	681a      	ldr	r2, [r3, #0]
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f022 0201 	bic.w	r2, r2, #1
 800ca5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ca62:	b2db      	uxtb	r3, r3
 800ca64:	2b60      	cmp	r3, #96	@ 0x60
 800ca66:	d10e      	bne.n	800ca86 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	2220      	movs	r2, #32
 800ca6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	2200      	movs	r2, #0
 800ca74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800ca7e:	6978      	ldr	r0, [r7, #20]
 800ca80:	f7fe fbd9 	bl	800b236 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ca84:	e027      	b.n	800cad6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ca86:	7cfb      	ldrb	r3, [r7, #19]
 800ca88:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ca8c:	2b28      	cmp	r3, #40	@ 0x28
 800ca8e:	d117      	bne.n	800cac0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	681a      	ldr	r2, [r3, #0]
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f042 0201 	orr.w	r2, r2, #1
 800ca9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	681a      	ldr	r2, [r3, #0]
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800caae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2200      	movs	r2, #0
 800cab4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	2228      	movs	r2, #40	@ 0x28
 800caba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800cabe:	e007      	b.n	800cad0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	2220      	movs	r2, #32
 800cac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800cad0:	6978      	ldr	r0, [r7, #20]
 800cad2:	f7fe fba6 	bl	800b222 <HAL_I2C_ErrorCallback>
}
 800cad6:	bf00      	nop
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	20000038 	.word	0x20000038
 800cae4:	14f8b589 	.word	0x14f8b589

0800cae8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	603b      	str	r3, [r7, #0]
 800caf4:	4613      	mov	r3, r2
 800caf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800caf8:	e048      	b.n	800cb8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb00:	d044      	beq.n	800cb8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cb02:	f7fb fef5 	bl	80088f0 <HAL_GetTick>
 800cb06:	4602      	mov	r2, r0
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	683a      	ldr	r2, [r7, #0]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	d302      	bcc.n	800cb18 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d139      	bne.n	800cb8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	0c1b      	lsrs	r3, r3, #16
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b01      	cmp	r3, #1
 800cb20:	d10d      	bne.n	800cb3e <I2C_WaitOnFlagUntilTimeout+0x56>
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	695b      	ldr	r3, [r3, #20]
 800cb28:	43da      	mvns	r2, r3
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	4013      	ands	r3, r2
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	bf0c      	ite	eq
 800cb34:	2301      	moveq	r3, #1
 800cb36:	2300      	movne	r3, #0
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	e00c      	b.n	800cb58 <I2C_WaitOnFlagUntilTimeout+0x70>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	699b      	ldr	r3, [r3, #24]
 800cb44:	43da      	mvns	r2, r3
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	4013      	ands	r3, r2
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	bf0c      	ite	eq
 800cb50:	2301      	moveq	r3, #1
 800cb52:	2300      	movne	r3, #0
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	461a      	mov	r2, r3
 800cb58:	79fb      	ldrb	r3, [r7, #7]
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d116      	bne.n	800cb8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	2200      	movs	r2, #0
 800cb62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2220      	movs	r2, #32
 800cb68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb78:	f043 0220 	orr.w	r2, r3, #32
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e023      	b.n	800cbd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	0c1b      	lsrs	r3, r3, #16
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d10d      	bne.n	800cbb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	695b      	ldr	r3, [r3, #20]
 800cb9c:	43da      	mvns	r2, r3
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	4013      	ands	r3, r2
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bf0c      	ite	eq
 800cba8:	2301      	moveq	r3, #1
 800cbaa:	2300      	movne	r3, #0
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	461a      	mov	r2, r3
 800cbb0:	e00c      	b.n	800cbcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	699b      	ldr	r3, [r3, #24]
 800cbb8:	43da      	mvns	r2, r3
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	4013      	ands	r3, r2
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	bf0c      	ite	eq
 800cbc4:	2301      	moveq	r3, #1
 800cbc6:	2300      	movne	r3, #0
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	461a      	mov	r2, r3
 800cbcc:	79fb      	ldrb	r3, [r7, #7]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d093      	beq.n	800cafa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	60f8      	str	r0, [r7, #12]
 800cbe4:	60b9      	str	r1, [r7, #8]
 800cbe6:	607a      	str	r2, [r7, #4]
 800cbe8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800cbea:	e071      	b.n	800ccd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cbf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cbfa:	d123      	bne.n	800cc44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	681a      	ldr	r2, [r3, #0]
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cc14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	2220      	movs	r2, #32
 800cc20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc30:	f043 0204 	orr.w	r2, r3, #4
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800cc40:	2301      	movs	r3, #1
 800cc42:	e067      	b.n	800cd14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc4a:	d041      	beq.n	800ccd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc4c:	f7fb fe50 	bl	80088f0 <HAL_GetTick>
 800cc50:	4602      	mov	r2, r0
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d302      	bcc.n	800cc62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d136      	bne.n	800ccd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	0c1b      	lsrs	r3, r3, #16
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d10c      	bne.n	800cc86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	43da      	mvns	r2, r3
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	4013      	ands	r3, r2
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	bf14      	ite	ne
 800cc7e:	2301      	movne	r3, #1
 800cc80:	2300      	moveq	r3, #0
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	e00b      	b.n	800cc9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	43da      	mvns	r2, r3
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	4013      	ands	r3, r2
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	bf14      	ite	ne
 800cc98:	2301      	movne	r3, #1
 800cc9a:	2300      	moveq	r3, #0
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d016      	beq.n	800ccd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2220      	movs	r2, #32
 800ccac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ccbc:	f043 0220 	orr.w	r2, r3, #32
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	e021      	b.n	800cd14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	0c1b      	lsrs	r3, r3, #16
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d10c      	bne.n	800ccf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	695b      	ldr	r3, [r3, #20]
 800cce0:	43da      	mvns	r2, r3
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	4013      	ands	r3, r2
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	bf14      	ite	ne
 800ccec:	2301      	movne	r3, #1
 800ccee:	2300      	moveq	r3, #0
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	e00b      	b.n	800cd0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	43da      	mvns	r2, r3
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	4013      	ands	r3, r2
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bf14      	ite	ne
 800cd06:	2301      	movne	r3, #1
 800cd08:	2300      	moveq	r3, #0
 800cd0a:	b2db      	uxtb	r3, r3
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	f47f af6d 	bne.w	800cbec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800cd12:	2300      	movs	r3, #0
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3710      	adds	r7, #16
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}

0800cd1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	60f8      	str	r0, [r7, #12]
 800cd24:	60b9      	str	r1, [r7, #8]
 800cd26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cd28:	e034      	b.n	800cd94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cd2a:	68f8      	ldr	r0, [r7, #12]
 800cd2c:	f000 f915 	bl	800cf5a <I2C_IsAcknowledgeFailed>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d001      	beq.n	800cd3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cd36:	2301      	movs	r3, #1
 800cd38:	e034      	b.n	800cda4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd40:	d028      	beq.n	800cd94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd42:	f7fb fdd5 	bl	80088f0 <HAL_GetTick>
 800cd46:	4602      	mov	r2, r0
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	1ad3      	subs	r3, r2, r3
 800cd4c:	68ba      	ldr	r2, [r7, #8]
 800cd4e:	429a      	cmp	r2, r3
 800cd50:	d302      	bcc.n	800cd58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800cd52:	68bb      	ldr	r3, [r7, #8]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d11d      	bne.n	800cd94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	695b      	ldr	r3, [r3, #20]
 800cd5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd62:	2b80      	cmp	r3, #128	@ 0x80
 800cd64:	d016      	beq.n	800cd94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2220      	movs	r2, #32
 800cd70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2200      	movs	r2, #0
 800cd78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd80:	f043 0220 	orr.w	r2, r3, #32
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e007      	b.n	800cda4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	695b      	ldr	r3, [r3, #20]
 800cd9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cd9e:	2b80      	cmp	r3, #128	@ 0x80
 800cda0:	d1c3      	bne.n	800cd2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800cdb8:	e034      	b.n	800ce24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f000 f8cd 	bl	800cf5a <I2C_IsAcknowledgeFailed>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e034      	b.n	800ce34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd0:	d028      	beq.n	800ce24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdd2:	f7fb fd8d 	bl	80088f0 <HAL_GetTick>
 800cdd6:	4602      	mov	r2, r0
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	1ad3      	subs	r3, r2, r3
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d302      	bcc.n	800cde8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d11d      	bne.n	800ce24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	695b      	ldr	r3, [r3, #20]
 800cdee:	f003 0304 	and.w	r3, r3, #4
 800cdf2:	2b04      	cmp	r3, #4
 800cdf4:	d016      	beq.n	800ce24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2220      	movs	r2, #32
 800ce00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce10:	f043 0220 	orr.w	r2, r3, #32
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	e007      	b.n	800ce34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	f003 0304 	and.w	r3, r3, #4
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d1c3      	bne.n	800cdba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ce32:	2300      	movs	r3, #0
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3710      	adds	r7, #16
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800ce3c:	b480      	push	{r7}
 800ce3e:	b085      	sub	sp, #20
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce44:	2300      	movs	r3, #0
 800ce46:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800ce48:	4b13      	ldr	r3, [pc, #76]	@ (800ce98 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	08db      	lsrs	r3, r3, #3
 800ce4e:	4a13      	ldr	r2, [pc, #76]	@ (800ce9c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800ce50:	fba2 2303 	umull	r2, r3, r2, r3
 800ce54:	0a1a      	lsrs	r2, r3, #8
 800ce56:	4613      	mov	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d107      	bne.n	800ce7a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce6e:	f043 0220 	orr.w	r2, r3, #32
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	e008      	b.n	800ce8c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ce84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce88:	d0e9      	beq.n	800ce5e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3714      	adds	r7, #20
 800ce90:	46bd      	mov	sp, r7
 800ce92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce96:	4770      	bx	lr
 800ce98:	20000038 	.word	0x20000038
 800ce9c:	14f8b589 	.word	0x14f8b589

0800cea0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ceac:	e049      	b.n	800cf42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	f003 0310 	and.w	r3, r3, #16
 800ceb8:	2b10      	cmp	r3, #16
 800ceba:	d119      	bne.n	800cef0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f06f 0210 	mvn.w	r2, #16
 800cec4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2200      	movs	r2, #0
 800ceca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2220      	movs	r2, #32
 800ced0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	2200      	movs	r2, #0
 800ced8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ceec:	2301      	movs	r3, #1
 800ceee:	e030      	b.n	800cf52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cef0:	f7fb fcfe 	bl	80088f0 <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d302      	bcc.n	800cf06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d11d      	bne.n	800cf42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	695b      	ldr	r3, [r3, #20]
 800cf0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf10:	2b40      	cmp	r3, #64	@ 0x40
 800cf12:	d016      	beq.n	800cf42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2200      	movs	r2, #0
 800cf18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf2e:	f043 0220 	orr.w	r2, r3, #32
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e007      	b.n	800cf52 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	695b      	ldr	r3, [r3, #20]
 800cf48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf4c:	2b40      	cmp	r3, #64	@ 0x40
 800cf4e:	d1ae      	bne.n	800ceae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}

0800cf5a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800cf5a:	b480      	push	{r7}
 800cf5c:	b083      	sub	sp, #12
 800cf5e:	af00      	add	r7, sp, #0
 800cf60:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	695b      	ldr	r3, [r3, #20]
 800cf68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf70:	d11b      	bne.n	800cfaa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800cf7a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2220      	movs	r2, #32
 800cf86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf96:	f043 0204 	orr.w	r2, r3, #4
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	e000      	b.n	800cfac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800cfaa:	2300      	movs	r3, #0
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b083      	sub	sp, #12
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800cfc8:	d103      	bne.n	800cfd2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800cfd0:	e007      	b.n	800cfe2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfd6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800cfda:	d102      	bne.n	800cfe2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	2208      	movs	r2, #8
 800cfe0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800cfe2:	bf00      	nop
 800cfe4:	370c      	adds	r7, #12
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
	...

0800cff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d101      	bne.n	800d004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d000:	2301      	movs	r3, #1
 800d002:	e0cc      	b.n	800d19e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d004:	4b68      	ldr	r3, [pc, #416]	@ (800d1a8 <HAL_RCC_ClockConfig+0x1b8>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f003 030f 	and.w	r3, r3, #15
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	429a      	cmp	r2, r3
 800d010:	d90c      	bls.n	800d02c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d012:	4b65      	ldr	r3, [pc, #404]	@ (800d1a8 <HAL_RCC_ClockConfig+0x1b8>)
 800d014:	683a      	ldr	r2, [r7, #0]
 800d016:	b2d2      	uxtb	r2, r2
 800d018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d01a:	4b63      	ldr	r3, [pc, #396]	@ (800d1a8 <HAL_RCC_ClockConfig+0x1b8>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 030f 	and.w	r3, r3, #15
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	d001      	beq.n	800d02c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d028:	2301      	movs	r3, #1
 800d02a:	e0b8      	b.n	800d19e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f003 0302 	and.w	r3, r3, #2
 800d034:	2b00      	cmp	r3, #0
 800d036:	d020      	beq.n	800d07a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 0304 	and.w	r3, r3, #4
 800d040:	2b00      	cmp	r3, #0
 800d042:	d005      	beq.n	800d050 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d044:	4b59      	ldr	r3, [pc, #356]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d046:	689b      	ldr	r3, [r3, #8]
 800d048:	4a58      	ldr	r2, [pc, #352]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d04a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800d04e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f003 0308 	and.w	r3, r3, #8
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d005      	beq.n	800d068 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d05c:	4b53      	ldr	r3, [pc, #332]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	4a52      	ldr	r2, [pc, #328]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d062:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800d066:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d068:	4b50      	ldr	r3, [pc, #320]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	689b      	ldr	r3, [r3, #8]
 800d074:	494d      	ldr	r1, [pc, #308]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d076:	4313      	orrs	r3, r2
 800d078:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f003 0301 	and.w	r3, r3, #1
 800d082:	2b00      	cmp	r3, #0
 800d084:	d044      	beq.n	800d110 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	2b01      	cmp	r3, #1
 800d08c:	d107      	bne.n	800d09e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d08e:	4b47      	ldr	r3, [pc, #284]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d096:	2b00      	cmp	r3, #0
 800d098:	d119      	bne.n	800d0ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e07f      	b.n	800d19e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	2b02      	cmp	r3, #2
 800d0a4:	d003      	beq.n	800d0ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d0aa:	2b03      	cmp	r3, #3
 800d0ac:	d107      	bne.n	800d0be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d0ae:	4b3f      	ldr	r3, [pc, #252]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d109      	bne.n	800d0ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	e06f      	b.n	800d19e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d0be:	4b3b      	ldr	r3, [pc, #236]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f003 0302 	and.w	r3, r3, #2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d101      	bne.n	800d0ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e067      	b.n	800d19e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d0ce:	4b37      	ldr	r3, [pc, #220]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f023 0203 	bic.w	r2, r3, #3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	4934      	ldr	r1, [pc, #208]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d0e0:	f7fb fc06 	bl	80088f0 <HAL_GetTick>
 800d0e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d0e6:	e00a      	b.n	800d0fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d0e8:	f7fb fc02 	bl	80088f0 <HAL_GetTick>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d901      	bls.n	800d0fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	e04f      	b.n	800d19e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d0fe:	4b2b      	ldr	r3, [pc, #172]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d100:	689b      	ldr	r3, [r3, #8]
 800d102:	f003 020c 	and.w	r2, r3, #12
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d1eb      	bne.n	800d0e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d110:	4b25      	ldr	r3, [pc, #148]	@ (800d1a8 <HAL_RCC_ClockConfig+0x1b8>)
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f003 030f 	and.w	r3, r3, #15
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d20c      	bcs.n	800d138 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d11e:	4b22      	ldr	r3, [pc, #136]	@ (800d1a8 <HAL_RCC_ClockConfig+0x1b8>)
 800d120:	683a      	ldr	r2, [r7, #0]
 800d122:	b2d2      	uxtb	r2, r2
 800d124:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d126:	4b20      	ldr	r3, [pc, #128]	@ (800d1a8 <HAL_RCC_ClockConfig+0x1b8>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 030f 	and.w	r3, r3, #15
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	429a      	cmp	r2, r3
 800d132:	d001      	beq.n	800d138 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	e032      	b.n	800d19e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 0304 	and.w	r3, r3, #4
 800d140:	2b00      	cmp	r3, #0
 800d142:	d008      	beq.n	800d156 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d144:	4b19      	ldr	r3, [pc, #100]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	4916      	ldr	r1, [pc, #88]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d152:	4313      	orrs	r3, r2
 800d154:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f003 0308 	and.w	r3, r3, #8
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d009      	beq.n	800d176 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d162:	4b12      	ldr	r3, [pc, #72]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	691b      	ldr	r3, [r3, #16]
 800d16e:	00db      	lsls	r3, r3, #3
 800d170:	490e      	ldr	r1, [pc, #56]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d172:	4313      	orrs	r3, r2
 800d174:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d176:	f000 f855 	bl	800d224 <HAL_RCC_GetSysClockFreq>
 800d17a:	4602      	mov	r2, r0
 800d17c:	4b0b      	ldr	r3, [pc, #44]	@ (800d1ac <HAL_RCC_ClockConfig+0x1bc>)
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	091b      	lsrs	r3, r3, #4
 800d182:	f003 030f 	and.w	r3, r3, #15
 800d186:	490a      	ldr	r1, [pc, #40]	@ (800d1b0 <HAL_RCC_ClockConfig+0x1c0>)
 800d188:	5ccb      	ldrb	r3, [r1, r3]
 800d18a:	fa22 f303 	lsr.w	r3, r2, r3
 800d18e:	4a09      	ldr	r2, [pc, #36]	@ (800d1b4 <HAL_RCC_ClockConfig+0x1c4>)
 800d190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800d192:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <HAL_RCC_ClockConfig+0x1c8>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4618      	mov	r0, r3
 800d198:	f7fb fb66 	bl	8008868 <HAL_InitTick>

  return HAL_OK;
 800d19c:	2300      	movs	r3, #0
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	40023c00 	.word	0x40023c00
 800d1ac:	40023800 	.word	0x40023800
 800d1b0:	0801a92c 	.word	0x0801a92c
 800d1b4:	20000038 	.word	0x20000038
 800d1b8:	20000040 	.word	0x20000040

0800d1bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1bc:	b480      	push	{r7}
 800d1be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d1c0:	4b03      	ldr	r3, [pc, #12]	@ (800d1d0 <HAL_RCC_GetHCLKFreq+0x14>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
 800d1ce:	bf00      	nop
 800d1d0:	20000038 	.word	0x20000038

0800d1d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d1d8:	f7ff fff0 	bl	800d1bc <HAL_RCC_GetHCLKFreq>
 800d1dc:	4602      	mov	r2, r0
 800d1de:	4b05      	ldr	r3, [pc, #20]	@ (800d1f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d1e0:	689b      	ldr	r3, [r3, #8]
 800d1e2:	0a9b      	lsrs	r3, r3, #10
 800d1e4:	f003 0307 	and.w	r3, r3, #7
 800d1e8:	4903      	ldr	r1, [pc, #12]	@ (800d1f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d1ea:	5ccb      	ldrb	r3, [r1, r3]
 800d1ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	40023800 	.word	0x40023800
 800d1f8:	0801a93c 	.word	0x0801a93c

0800d1fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d200:	f7ff ffdc 	bl	800d1bc <HAL_RCC_GetHCLKFreq>
 800d204:	4602      	mov	r2, r0
 800d206:	4b05      	ldr	r3, [pc, #20]	@ (800d21c <HAL_RCC_GetPCLK2Freq+0x20>)
 800d208:	689b      	ldr	r3, [r3, #8]
 800d20a:	0b5b      	lsrs	r3, r3, #13
 800d20c:	f003 0307 	and.w	r3, r3, #7
 800d210:	4903      	ldr	r1, [pc, #12]	@ (800d220 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d212:	5ccb      	ldrb	r3, [r1, r3]
 800d214:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d218:	4618      	mov	r0, r3
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	40023800 	.word	0x40023800
 800d220:	0801a93c 	.word	0x0801a93c

0800d224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d228:	b0ae      	sub	sp, #184	@ 0xb8
 800d22a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d22c:	2300      	movs	r3, #0
 800d22e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800d232:	2300      	movs	r3, #0
 800d234:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800d238:	2300      	movs	r3, #0
 800d23a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800d23e:	2300      	movs	r3, #0
 800d240:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800d244:	2300      	movs	r3, #0
 800d246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d24a:	4bcb      	ldr	r3, [pc, #812]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	f003 030c 	and.w	r3, r3, #12
 800d252:	2b0c      	cmp	r3, #12
 800d254:	f200 8206 	bhi.w	800d664 <HAL_RCC_GetSysClockFreq+0x440>
 800d258:	a201      	add	r2, pc, #4	@ (adr r2, 800d260 <HAL_RCC_GetSysClockFreq+0x3c>)
 800d25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25e:	bf00      	nop
 800d260:	0800d295 	.word	0x0800d295
 800d264:	0800d665 	.word	0x0800d665
 800d268:	0800d665 	.word	0x0800d665
 800d26c:	0800d665 	.word	0x0800d665
 800d270:	0800d29d 	.word	0x0800d29d
 800d274:	0800d665 	.word	0x0800d665
 800d278:	0800d665 	.word	0x0800d665
 800d27c:	0800d665 	.word	0x0800d665
 800d280:	0800d2a5 	.word	0x0800d2a5
 800d284:	0800d665 	.word	0x0800d665
 800d288:	0800d665 	.word	0x0800d665
 800d28c:	0800d665 	.word	0x0800d665
 800d290:	0800d495 	.word	0x0800d495
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d294:	4bb9      	ldr	r3, [pc, #740]	@ (800d57c <HAL_RCC_GetSysClockFreq+0x358>)
 800d296:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800d29a:	e1e7      	b.n	800d66c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d29c:	4bb8      	ldr	r3, [pc, #736]	@ (800d580 <HAL_RCC_GetSysClockFreq+0x35c>)
 800d29e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800d2a2:	e1e3      	b.n	800d66c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d2a4:	4bb4      	ldr	r3, [pc, #720]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d2ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d2b0:	4bb1      	ldr	r3, [pc, #708]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d071      	beq.n	800d3a0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d2bc:	4bae      	ldr	r3, [pc, #696]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	099b      	lsrs	r3, r3, #6
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d2c8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800d2cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d2d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d2de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d2e2:	4622      	mov	r2, r4
 800d2e4:	462b      	mov	r3, r5
 800d2e6:	f04f 0000 	mov.w	r0, #0
 800d2ea:	f04f 0100 	mov.w	r1, #0
 800d2ee:	0159      	lsls	r1, r3, #5
 800d2f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d2f4:	0150      	lsls	r0, r2, #5
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	4621      	mov	r1, r4
 800d2fc:	1a51      	subs	r1, r2, r1
 800d2fe:	6439      	str	r1, [r7, #64]	@ 0x40
 800d300:	4629      	mov	r1, r5
 800d302:	eb63 0301 	sbc.w	r3, r3, r1
 800d306:	647b      	str	r3, [r7, #68]	@ 0x44
 800d308:	f04f 0200 	mov.w	r2, #0
 800d30c:	f04f 0300 	mov.w	r3, #0
 800d310:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800d314:	4649      	mov	r1, r9
 800d316:	018b      	lsls	r3, r1, #6
 800d318:	4641      	mov	r1, r8
 800d31a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d31e:	4641      	mov	r1, r8
 800d320:	018a      	lsls	r2, r1, #6
 800d322:	4641      	mov	r1, r8
 800d324:	1a51      	subs	r1, r2, r1
 800d326:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d328:	4649      	mov	r1, r9
 800d32a:	eb63 0301 	sbc.w	r3, r3, r1
 800d32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d330:	f04f 0200 	mov.w	r2, #0
 800d334:	f04f 0300 	mov.w	r3, #0
 800d338:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800d33c:	4649      	mov	r1, r9
 800d33e:	00cb      	lsls	r3, r1, #3
 800d340:	4641      	mov	r1, r8
 800d342:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d346:	4641      	mov	r1, r8
 800d348:	00ca      	lsls	r2, r1, #3
 800d34a:	4610      	mov	r0, r2
 800d34c:	4619      	mov	r1, r3
 800d34e:	4603      	mov	r3, r0
 800d350:	4622      	mov	r2, r4
 800d352:	189b      	adds	r3, r3, r2
 800d354:	633b      	str	r3, [r7, #48]	@ 0x30
 800d356:	462b      	mov	r3, r5
 800d358:	460a      	mov	r2, r1
 800d35a:	eb42 0303 	adc.w	r3, r2, r3
 800d35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d360:	f04f 0200 	mov.w	r2, #0
 800d364:	f04f 0300 	mov.w	r3, #0
 800d368:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800d36c:	4629      	mov	r1, r5
 800d36e:	024b      	lsls	r3, r1, #9
 800d370:	4621      	mov	r1, r4
 800d372:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d376:	4621      	mov	r1, r4
 800d378:	024a      	lsls	r2, r1, #9
 800d37a:	4610      	mov	r0, r2
 800d37c:	4619      	mov	r1, r3
 800d37e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d382:	2200      	movs	r2, #0
 800d384:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d388:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d38c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800d390:	f7f3 fdf8 	bl	8000f84 <__aeabi_uldivmod>
 800d394:	4602      	mov	r2, r0
 800d396:	460b      	mov	r3, r1
 800d398:	4613      	mov	r3, r2
 800d39a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d39e:	e067      	b.n	800d470 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d3a0:	4b75      	ldr	r3, [pc, #468]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	099b      	lsrs	r3, r3, #6
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d3ac:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800d3b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d3b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d3be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800d3c2:	4622      	mov	r2, r4
 800d3c4:	462b      	mov	r3, r5
 800d3c6:	f04f 0000 	mov.w	r0, #0
 800d3ca:	f04f 0100 	mov.w	r1, #0
 800d3ce:	0159      	lsls	r1, r3, #5
 800d3d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d3d4:	0150      	lsls	r0, r2, #5
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	460b      	mov	r3, r1
 800d3da:	4621      	mov	r1, r4
 800d3dc:	1a51      	subs	r1, r2, r1
 800d3de:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	eb63 0301 	sbc.w	r3, r3, r1
 800d3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3e8:	f04f 0200 	mov.w	r2, #0
 800d3ec:	f04f 0300 	mov.w	r3, #0
 800d3f0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800d3f4:	4649      	mov	r1, r9
 800d3f6:	018b      	lsls	r3, r1, #6
 800d3f8:	4641      	mov	r1, r8
 800d3fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d3fe:	4641      	mov	r1, r8
 800d400:	018a      	lsls	r2, r1, #6
 800d402:	4641      	mov	r1, r8
 800d404:	ebb2 0a01 	subs.w	sl, r2, r1
 800d408:	4649      	mov	r1, r9
 800d40a:	eb63 0b01 	sbc.w	fp, r3, r1
 800d40e:	f04f 0200 	mov.w	r2, #0
 800d412:	f04f 0300 	mov.w	r3, #0
 800d416:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d41a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d41e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d422:	4692      	mov	sl, r2
 800d424:	469b      	mov	fp, r3
 800d426:	4623      	mov	r3, r4
 800d428:	eb1a 0303 	adds.w	r3, sl, r3
 800d42c:	623b      	str	r3, [r7, #32]
 800d42e:	462b      	mov	r3, r5
 800d430:	eb4b 0303 	adc.w	r3, fp, r3
 800d434:	627b      	str	r3, [r7, #36]	@ 0x24
 800d436:	f04f 0200 	mov.w	r2, #0
 800d43a:	f04f 0300 	mov.w	r3, #0
 800d43e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800d442:	4629      	mov	r1, r5
 800d444:	028b      	lsls	r3, r1, #10
 800d446:	4621      	mov	r1, r4
 800d448:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d44c:	4621      	mov	r1, r4
 800d44e:	028a      	lsls	r2, r1, #10
 800d450:	4610      	mov	r0, r2
 800d452:	4619      	mov	r1, r3
 800d454:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d458:	2200      	movs	r2, #0
 800d45a:	673b      	str	r3, [r7, #112]	@ 0x70
 800d45c:	677a      	str	r2, [r7, #116]	@ 0x74
 800d45e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800d462:	f7f3 fd8f 	bl	8000f84 <__aeabi_uldivmod>
 800d466:	4602      	mov	r2, r0
 800d468:	460b      	mov	r3, r1
 800d46a:	4613      	mov	r3, r2
 800d46c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d470:	4b41      	ldr	r3, [pc, #260]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	0c1b      	lsrs	r3, r3, #16
 800d476:	f003 0303 	and.w	r3, r3, #3
 800d47a:	3301      	adds	r3, #1
 800d47c:	005b      	lsls	r3, r3, #1
 800d47e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800d482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d48a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d48e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800d492:	e0eb      	b.n	800d66c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d494:	4b38      	ldr	r3, [pc, #224]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d49c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d4a0:	4b35      	ldr	r3, [pc, #212]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d06b      	beq.n	800d584 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d4ac:	4b32      	ldr	r3, [pc, #200]	@ (800d578 <HAL_RCC_GetSysClockFreq+0x354>)
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	099b      	lsrs	r3, r3, #6
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d4b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4be:	663b      	str	r3, [r7, #96]	@ 0x60
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	667b      	str	r3, [r7, #100]	@ 0x64
 800d4c4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800d4c8:	4622      	mov	r2, r4
 800d4ca:	462b      	mov	r3, r5
 800d4cc:	f04f 0000 	mov.w	r0, #0
 800d4d0:	f04f 0100 	mov.w	r1, #0
 800d4d4:	0159      	lsls	r1, r3, #5
 800d4d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d4da:	0150      	lsls	r0, r2, #5
 800d4dc:	4602      	mov	r2, r0
 800d4de:	460b      	mov	r3, r1
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	1a51      	subs	r1, r2, r1
 800d4e4:	61b9      	str	r1, [r7, #24]
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	eb63 0301 	sbc.w	r3, r3, r1
 800d4ec:	61fb      	str	r3, [r7, #28]
 800d4ee:	f04f 0200 	mov.w	r2, #0
 800d4f2:	f04f 0300 	mov.w	r3, #0
 800d4f6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800d4fa:	4659      	mov	r1, fp
 800d4fc:	018b      	lsls	r3, r1, #6
 800d4fe:	4651      	mov	r1, sl
 800d500:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d504:	4651      	mov	r1, sl
 800d506:	018a      	lsls	r2, r1, #6
 800d508:	4651      	mov	r1, sl
 800d50a:	ebb2 0801 	subs.w	r8, r2, r1
 800d50e:	4659      	mov	r1, fp
 800d510:	eb63 0901 	sbc.w	r9, r3, r1
 800d514:	f04f 0200 	mov.w	r2, #0
 800d518:	f04f 0300 	mov.w	r3, #0
 800d51c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d520:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d524:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d528:	4690      	mov	r8, r2
 800d52a:	4699      	mov	r9, r3
 800d52c:	4623      	mov	r3, r4
 800d52e:	eb18 0303 	adds.w	r3, r8, r3
 800d532:	613b      	str	r3, [r7, #16]
 800d534:	462b      	mov	r3, r5
 800d536:	eb49 0303 	adc.w	r3, r9, r3
 800d53a:	617b      	str	r3, [r7, #20]
 800d53c:	f04f 0200 	mov.w	r2, #0
 800d540:	f04f 0300 	mov.w	r3, #0
 800d544:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800d548:	4629      	mov	r1, r5
 800d54a:	024b      	lsls	r3, r1, #9
 800d54c:	4621      	mov	r1, r4
 800d54e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d552:	4621      	mov	r1, r4
 800d554:	024a      	lsls	r2, r1, #9
 800d556:	4610      	mov	r0, r2
 800d558:	4619      	mov	r1, r3
 800d55a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d55e:	2200      	movs	r2, #0
 800d560:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d562:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800d564:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800d568:	f7f3 fd0c 	bl	8000f84 <__aeabi_uldivmod>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4613      	mov	r3, r2
 800d572:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d576:	e065      	b.n	800d644 <HAL_RCC_GetSysClockFreq+0x420>
 800d578:	40023800 	.word	0x40023800
 800d57c:	00f42400 	.word	0x00f42400
 800d580:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d584:	4b3d      	ldr	r3, [pc, #244]	@ (800d67c <HAL_RCC_GetSysClockFreq+0x458>)
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	099b      	lsrs	r3, r3, #6
 800d58a:	2200      	movs	r2, #0
 800d58c:	4618      	mov	r0, r3
 800d58e:	4611      	mov	r1, r2
 800d590:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d594:	653b      	str	r3, [r7, #80]	@ 0x50
 800d596:	2300      	movs	r3, #0
 800d598:	657b      	str	r3, [r7, #84]	@ 0x54
 800d59a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800d59e:	4642      	mov	r2, r8
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	f04f 0000 	mov.w	r0, #0
 800d5a6:	f04f 0100 	mov.w	r1, #0
 800d5aa:	0159      	lsls	r1, r3, #5
 800d5ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d5b0:	0150      	lsls	r0, r2, #5
 800d5b2:	4602      	mov	r2, r0
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	4641      	mov	r1, r8
 800d5b8:	1a51      	subs	r1, r2, r1
 800d5ba:	60b9      	str	r1, [r7, #8]
 800d5bc:	4649      	mov	r1, r9
 800d5be:	eb63 0301 	sbc.w	r3, r3, r1
 800d5c2:	60fb      	str	r3, [r7, #12]
 800d5c4:	f04f 0200 	mov.w	r2, #0
 800d5c8:	f04f 0300 	mov.w	r3, #0
 800d5cc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800d5d0:	4659      	mov	r1, fp
 800d5d2:	018b      	lsls	r3, r1, #6
 800d5d4:	4651      	mov	r1, sl
 800d5d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d5da:	4651      	mov	r1, sl
 800d5dc:	018a      	lsls	r2, r1, #6
 800d5de:	4651      	mov	r1, sl
 800d5e0:	1a54      	subs	r4, r2, r1
 800d5e2:	4659      	mov	r1, fp
 800d5e4:	eb63 0501 	sbc.w	r5, r3, r1
 800d5e8:	f04f 0200 	mov.w	r2, #0
 800d5ec:	f04f 0300 	mov.w	r3, #0
 800d5f0:	00eb      	lsls	r3, r5, #3
 800d5f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d5f6:	00e2      	lsls	r2, r4, #3
 800d5f8:	4614      	mov	r4, r2
 800d5fa:	461d      	mov	r5, r3
 800d5fc:	4643      	mov	r3, r8
 800d5fe:	18e3      	adds	r3, r4, r3
 800d600:	603b      	str	r3, [r7, #0]
 800d602:	464b      	mov	r3, r9
 800d604:	eb45 0303 	adc.w	r3, r5, r3
 800d608:	607b      	str	r3, [r7, #4]
 800d60a:	f04f 0200 	mov.w	r2, #0
 800d60e:	f04f 0300 	mov.w	r3, #0
 800d612:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d616:	4629      	mov	r1, r5
 800d618:	028b      	lsls	r3, r1, #10
 800d61a:	4621      	mov	r1, r4
 800d61c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d620:	4621      	mov	r1, r4
 800d622:	028a      	lsls	r2, r1, #10
 800d624:	4610      	mov	r0, r2
 800d626:	4619      	mov	r1, r3
 800d628:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d62c:	2200      	movs	r2, #0
 800d62e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d630:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d632:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d636:	f7f3 fca5 	bl	8000f84 <__aeabi_uldivmod>
 800d63a:	4602      	mov	r2, r0
 800d63c:	460b      	mov	r3, r1
 800d63e:	4613      	mov	r3, r2
 800d640:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800d644:	4b0d      	ldr	r3, [pc, #52]	@ (800d67c <HAL_RCC_GetSysClockFreq+0x458>)
 800d646:	685b      	ldr	r3, [r3, #4]
 800d648:	0f1b      	lsrs	r3, r3, #28
 800d64a:	f003 0307 	and.w	r3, r3, #7
 800d64e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800d652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d656:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d65a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d65e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800d662:	e003      	b.n	800d66c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d664:	4b06      	ldr	r3, [pc, #24]	@ (800d680 <HAL_RCC_GetSysClockFreq+0x45c>)
 800d666:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800d66a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d66c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800d670:	4618      	mov	r0, r3
 800d672:	37b8      	adds	r7, #184	@ 0xb8
 800d674:	46bd      	mov	sp, r7
 800d676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d67a:	bf00      	nop
 800d67c:	40023800 	.word	0x40023800
 800d680:	00f42400 	.word	0x00f42400

0800d684 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b086      	sub	sp, #24
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d692:	2301      	movs	r3, #1
 800d694:	e28d      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f003 0301 	and.w	r3, r3, #1
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f000 8083 	beq.w	800d7aa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800d6a4:	4b94      	ldr	r3, [pc, #592]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d6a6:	689b      	ldr	r3, [r3, #8]
 800d6a8:	f003 030c 	and.w	r3, r3, #12
 800d6ac:	2b04      	cmp	r3, #4
 800d6ae:	d019      	beq.n	800d6e4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800d6b0:	4b91      	ldr	r3, [pc, #580]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d6b2:	689b      	ldr	r3, [r3, #8]
 800d6b4:	f003 030c 	and.w	r3, r3, #12
        || \
 800d6b8:	2b08      	cmp	r3, #8
 800d6ba:	d106      	bne.n	800d6ca <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800d6bc:	4b8e      	ldr	r3, [pc, #568]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d6c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d6c8:	d00c      	beq.n	800d6e4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d6ca:	4b8b      	ldr	r3, [pc, #556]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800d6d2:	2b0c      	cmp	r3, #12
 800d6d4:	d112      	bne.n	800d6fc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d6d6:	4b88      	ldr	r3, [pc, #544]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d6de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d6e2:	d10b      	bne.n	800d6fc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6e4:	4b84      	ldr	r3, [pc, #528]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d05b      	beq.n	800d7a8 <HAL_RCC_OscConfig+0x124>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	685b      	ldr	r3, [r3, #4]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d157      	bne.n	800d7a8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800d6f8:	2301      	movs	r3, #1
 800d6fa:	e25a      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d704:	d106      	bne.n	800d714 <HAL_RCC_OscConfig+0x90>
 800d706:	4b7c      	ldr	r3, [pc, #496]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	4a7b      	ldr	r2, [pc, #492]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d70c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d710:	6013      	str	r3, [r2, #0]
 800d712:	e01d      	b.n	800d750 <HAL_RCC_OscConfig+0xcc>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d71c:	d10c      	bne.n	800d738 <HAL_RCC_OscConfig+0xb4>
 800d71e:	4b76      	ldr	r3, [pc, #472]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	4a75      	ldr	r2, [pc, #468]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d724:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d728:	6013      	str	r3, [r2, #0]
 800d72a:	4b73      	ldr	r3, [pc, #460]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	4a72      	ldr	r2, [pc, #456]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d734:	6013      	str	r3, [r2, #0]
 800d736:	e00b      	b.n	800d750 <HAL_RCC_OscConfig+0xcc>
 800d738:	4b6f      	ldr	r3, [pc, #444]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a6e      	ldr	r2, [pc, #440]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d73e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d742:	6013      	str	r3, [r2, #0]
 800d744:	4b6c      	ldr	r3, [pc, #432]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a6b      	ldr	r2, [pc, #428]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d74a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d74e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d013      	beq.n	800d780 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d758:	f7fb f8ca 	bl	80088f0 <HAL_GetTick>
 800d75c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d75e:	e008      	b.n	800d772 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d760:	f7fb f8c6 	bl	80088f0 <HAL_GetTick>
 800d764:	4602      	mov	r2, r0
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	1ad3      	subs	r3, r2, r3
 800d76a:	2b64      	cmp	r3, #100	@ 0x64
 800d76c:	d901      	bls.n	800d772 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800d76e:	2303      	movs	r3, #3
 800d770:	e21f      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d772:	4b61      	ldr	r3, [pc, #388]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d0f0      	beq.n	800d760 <HAL_RCC_OscConfig+0xdc>
 800d77e:	e014      	b.n	800d7aa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d780:	f7fb f8b6 	bl	80088f0 <HAL_GetTick>
 800d784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d786:	e008      	b.n	800d79a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d788:	f7fb f8b2 	bl	80088f0 <HAL_GetTick>
 800d78c:	4602      	mov	r2, r0
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	2b64      	cmp	r3, #100	@ 0x64
 800d794:	d901      	bls.n	800d79a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800d796:	2303      	movs	r3, #3
 800d798:	e20b      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d79a:	4b57      	ldr	r3, [pc, #348]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1f0      	bne.n	800d788 <HAL_RCC_OscConfig+0x104>
 800d7a6:	e000      	b.n	800d7aa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d7a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f003 0302 	and.w	r3, r3, #2
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d06f      	beq.n	800d896 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800d7b6:	4b50      	ldr	r3, [pc, #320]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d7b8:	689b      	ldr	r3, [r3, #8]
 800d7ba:	f003 030c 	and.w	r3, r3, #12
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d017      	beq.n	800d7f2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800d7c2:	4b4d      	ldr	r3, [pc, #308]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d7c4:	689b      	ldr	r3, [r3, #8]
 800d7c6:	f003 030c 	and.w	r3, r3, #12
        || \
 800d7ca:	2b08      	cmp	r3, #8
 800d7cc:	d105      	bne.n	800d7da <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800d7ce:	4b4a      	ldr	r3, [pc, #296]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00b      	beq.n	800d7f2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7da:	4b47      	ldr	r3, [pc, #284]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800d7e2:	2b0c      	cmp	r3, #12
 800d7e4:	d11c      	bne.n	800d820 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7e6:	4b44      	ldr	r3, [pc, #272]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d7e8:	685b      	ldr	r3, [r3, #4]
 800d7ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d116      	bne.n	800d820 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7f2:	4b41      	ldr	r3, [pc, #260]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f003 0302 	and.w	r3, r3, #2
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d005      	beq.n	800d80a <HAL_RCC_OscConfig+0x186>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	68db      	ldr	r3, [r3, #12]
 800d802:	2b01      	cmp	r3, #1
 800d804:	d001      	beq.n	800d80a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	e1d3      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d80a:	4b3b      	ldr	r3, [pc, #236]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	691b      	ldr	r3, [r3, #16]
 800d816:	00db      	lsls	r3, r3, #3
 800d818:	4937      	ldr	r1, [pc, #220]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d81a:	4313      	orrs	r3, r2
 800d81c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d81e:	e03a      	b.n	800d896 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d020      	beq.n	800d86a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d828:	4b34      	ldr	r3, [pc, #208]	@ (800d8fc <HAL_RCC_OscConfig+0x278>)
 800d82a:	2201      	movs	r2, #1
 800d82c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d82e:	f7fb f85f 	bl	80088f0 <HAL_GetTick>
 800d832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d834:	e008      	b.n	800d848 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d836:	f7fb f85b 	bl	80088f0 <HAL_GetTick>
 800d83a:	4602      	mov	r2, r0
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	2b02      	cmp	r3, #2
 800d842:	d901      	bls.n	800d848 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800d844:	2303      	movs	r3, #3
 800d846:	e1b4      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d848:	4b2b      	ldr	r3, [pc, #172]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f003 0302 	and.w	r3, r3, #2
 800d850:	2b00      	cmp	r3, #0
 800d852:	d0f0      	beq.n	800d836 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d854:	4b28      	ldr	r3, [pc, #160]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	691b      	ldr	r3, [r3, #16]
 800d860:	00db      	lsls	r3, r3, #3
 800d862:	4925      	ldr	r1, [pc, #148]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d864:	4313      	orrs	r3, r2
 800d866:	600b      	str	r3, [r1, #0]
 800d868:	e015      	b.n	800d896 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d86a:	4b24      	ldr	r3, [pc, #144]	@ (800d8fc <HAL_RCC_OscConfig+0x278>)
 800d86c:	2200      	movs	r2, #0
 800d86e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d870:	f7fb f83e 	bl	80088f0 <HAL_GetTick>
 800d874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d876:	e008      	b.n	800d88a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d878:	f7fb f83a 	bl	80088f0 <HAL_GetTick>
 800d87c:	4602      	mov	r2, r0
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	1ad3      	subs	r3, r2, r3
 800d882:	2b02      	cmp	r3, #2
 800d884:	d901      	bls.n	800d88a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d886:	2303      	movs	r3, #3
 800d888:	e193      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d88a:	4b1b      	ldr	r3, [pc, #108]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f003 0302 	and.w	r3, r3, #2
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1f0      	bne.n	800d878 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f003 0308 	and.w	r3, r3, #8
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d036      	beq.n	800d910 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d016      	beq.n	800d8d8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d8aa:	4b15      	ldr	r3, [pc, #84]	@ (800d900 <HAL_RCC_OscConfig+0x27c>)
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8b0:	f7fb f81e 	bl	80088f0 <HAL_GetTick>
 800d8b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d8b6:	e008      	b.n	800d8ca <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8b8:	f7fb f81a 	bl	80088f0 <HAL_GetTick>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	1ad3      	subs	r3, r2, r3
 800d8c2:	2b02      	cmp	r3, #2
 800d8c4:	d901      	bls.n	800d8ca <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	e173      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d8ca:	4b0b      	ldr	r3, [pc, #44]	@ (800d8f8 <HAL_RCC_OscConfig+0x274>)
 800d8cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d8ce:	f003 0302 	and.w	r3, r3, #2
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d0f0      	beq.n	800d8b8 <HAL_RCC_OscConfig+0x234>
 800d8d6:	e01b      	b.n	800d910 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8d8:	4b09      	ldr	r3, [pc, #36]	@ (800d900 <HAL_RCC_OscConfig+0x27c>)
 800d8da:	2200      	movs	r2, #0
 800d8dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8de:	f7fb f807 	bl	80088f0 <HAL_GetTick>
 800d8e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8e4:	e00e      	b.n	800d904 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8e6:	f7fb f803 	bl	80088f0 <HAL_GetTick>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	693b      	ldr	r3, [r7, #16]
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d907      	bls.n	800d904 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	e15c      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
 800d8f8:	40023800 	.word	0x40023800
 800d8fc:	42470000 	.word	0x42470000
 800d900:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d904:	4b8a      	ldr	r3, [pc, #552]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d908:	f003 0302 	and.w	r3, r3, #2
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1ea      	bne.n	800d8e6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f003 0304 	and.w	r3, r3, #4
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 8097 	beq.w	800da4c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d91e:	2300      	movs	r3, #0
 800d920:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d922:	4b83      	ldr	r3, [pc, #524]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d10f      	bne.n	800d94e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d92e:	2300      	movs	r3, #0
 800d930:	60bb      	str	r3, [r7, #8]
 800d932:	4b7f      	ldr	r3, [pc, #508]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d936:	4a7e      	ldr	r2, [pc, #504]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d93c:	6413      	str	r3, [r2, #64]	@ 0x40
 800d93e:	4b7c      	ldr	r3, [pc, #496]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d946:	60bb      	str	r3, [r7, #8]
 800d948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d94a:	2301      	movs	r3, #1
 800d94c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d94e:	4b79      	ldr	r3, [pc, #484]	@ (800db34 <HAL_RCC_OscConfig+0x4b0>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d956:	2b00      	cmp	r3, #0
 800d958:	d118      	bne.n	800d98c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d95a:	4b76      	ldr	r3, [pc, #472]	@ (800db34 <HAL_RCC_OscConfig+0x4b0>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a75      	ldr	r2, [pc, #468]	@ (800db34 <HAL_RCC_OscConfig+0x4b0>)
 800d960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d966:	f7fa ffc3 	bl	80088f0 <HAL_GetTick>
 800d96a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d96c:	e008      	b.n	800d980 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d96e:	f7fa ffbf 	bl	80088f0 <HAL_GetTick>
 800d972:	4602      	mov	r2, r0
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	1ad3      	subs	r3, r2, r3
 800d978:	2b02      	cmp	r3, #2
 800d97a:	d901      	bls.n	800d980 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800d97c:	2303      	movs	r3, #3
 800d97e:	e118      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d980:	4b6c      	ldr	r3, [pc, #432]	@ (800db34 <HAL_RCC_OscConfig+0x4b0>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d0f0      	beq.n	800d96e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d106      	bne.n	800d9a2 <HAL_RCC_OscConfig+0x31e>
 800d994:	4b66      	ldr	r3, [pc, #408]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d998:	4a65      	ldr	r2, [pc, #404]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d99a:	f043 0301 	orr.w	r3, r3, #1
 800d99e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9a0:	e01c      	b.n	800d9dc <HAL_RCC_OscConfig+0x358>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	2b05      	cmp	r3, #5
 800d9a8:	d10c      	bne.n	800d9c4 <HAL_RCC_OscConfig+0x340>
 800d9aa:	4b61      	ldr	r3, [pc, #388]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d9ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ae:	4a60      	ldr	r2, [pc, #384]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d9b0:	f043 0304 	orr.w	r3, r3, #4
 800d9b4:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9b6:	4b5e      	ldr	r3, [pc, #376]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d9b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9ba:	4a5d      	ldr	r2, [pc, #372]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d9bc:	f043 0301 	orr.w	r3, r3, #1
 800d9c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9c2:	e00b      	b.n	800d9dc <HAL_RCC_OscConfig+0x358>
 800d9c4:	4b5a      	ldr	r3, [pc, #360]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d9c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9c8:	4a59      	ldr	r2, [pc, #356]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d9ca:	f023 0301 	bic.w	r3, r3, #1
 800d9ce:	6713      	str	r3, [r2, #112]	@ 0x70
 800d9d0:	4b57      	ldr	r3, [pc, #348]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d9d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d9d4:	4a56      	ldr	r2, [pc, #344]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800d9d6:	f023 0304 	bic.w	r3, r3, #4
 800d9da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	689b      	ldr	r3, [r3, #8]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d015      	beq.n	800da10 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9e4:	f7fa ff84 	bl	80088f0 <HAL_GetTick>
 800d9e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9ea:	e00a      	b.n	800da02 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9ec:	f7fa ff80 	bl	80088f0 <HAL_GetTick>
 800d9f0:	4602      	mov	r2, r0
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	1ad3      	subs	r3, r2, r3
 800d9f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9fa:	4293      	cmp	r3, r2
 800d9fc:	d901      	bls.n	800da02 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800d9fe:	2303      	movs	r3, #3
 800da00:	e0d7      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800da02:	4b4b      	ldr	r3, [pc, #300]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800da04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da06:	f003 0302 	and.w	r3, r3, #2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0ee      	beq.n	800d9ec <HAL_RCC_OscConfig+0x368>
 800da0e:	e014      	b.n	800da3a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da10:	f7fa ff6e 	bl	80088f0 <HAL_GetTick>
 800da14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da16:	e00a      	b.n	800da2e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da18:	f7fa ff6a 	bl	80088f0 <HAL_GetTick>
 800da1c:	4602      	mov	r2, r0
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da26:	4293      	cmp	r3, r2
 800da28:	d901      	bls.n	800da2e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800da2a:	2303      	movs	r3, #3
 800da2c:	e0c1      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da2e:	4b40      	ldr	r3, [pc, #256]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800da30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800da32:	f003 0302 	and.w	r3, r3, #2
 800da36:	2b00      	cmp	r3, #0
 800da38:	d1ee      	bne.n	800da18 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	2b01      	cmp	r3, #1
 800da3e:	d105      	bne.n	800da4c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da40:	4b3b      	ldr	r3, [pc, #236]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800da42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da44:	4a3a      	ldr	r2, [pc, #232]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800da46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800da4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	699b      	ldr	r3, [r3, #24]
 800da50:	2b00      	cmp	r3, #0
 800da52:	f000 80ad 	beq.w	800dbb0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800da56:	4b36      	ldr	r3, [pc, #216]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	f003 030c 	and.w	r3, r3, #12
 800da5e:	2b08      	cmp	r3, #8
 800da60:	d060      	beq.n	800db24 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	699b      	ldr	r3, [r3, #24]
 800da66:	2b02      	cmp	r3, #2
 800da68:	d145      	bne.n	800daf6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da6a:	4b33      	ldr	r3, [pc, #204]	@ (800db38 <HAL_RCC_OscConfig+0x4b4>)
 800da6c:	2200      	movs	r2, #0
 800da6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da70:	f7fa ff3e 	bl	80088f0 <HAL_GetTick>
 800da74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da76:	e008      	b.n	800da8a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da78:	f7fa ff3a 	bl	80088f0 <HAL_GetTick>
 800da7c:	4602      	mov	r2, r0
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	1ad3      	subs	r3, r2, r3
 800da82:	2b02      	cmp	r3, #2
 800da84:	d901      	bls.n	800da8a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800da86:	2303      	movs	r3, #3
 800da88:	e093      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da8a:	4b29      	ldr	r3, [pc, #164]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da92:	2b00      	cmp	r3, #0
 800da94:	d1f0      	bne.n	800da78 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	69da      	ldr	r2, [r3, #28]
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a1b      	ldr	r3, [r3, #32]
 800da9e:	431a      	orrs	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daa4:	019b      	lsls	r3, r3, #6
 800daa6:	431a      	orrs	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daac:	085b      	lsrs	r3, r3, #1
 800daae:	3b01      	subs	r3, #1
 800dab0:	041b      	lsls	r3, r3, #16
 800dab2:	431a      	orrs	r2, r3
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dab8:	061b      	lsls	r3, r3, #24
 800daba:	431a      	orrs	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dac0:	071b      	lsls	r3, r3, #28
 800dac2:	491b      	ldr	r1, [pc, #108]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800dac4:	4313      	orrs	r3, r2
 800dac6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dac8:	4b1b      	ldr	r3, [pc, #108]	@ (800db38 <HAL_RCC_OscConfig+0x4b4>)
 800daca:	2201      	movs	r2, #1
 800dacc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dace:	f7fa ff0f 	bl	80088f0 <HAL_GetTick>
 800dad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dad4:	e008      	b.n	800dae8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dad6:	f7fa ff0b 	bl	80088f0 <HAL_GetTick>
 800dada:	4602      	mov	r2, r0
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	1ad3      	subs	r3, r2, r3
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d901      	bls.n	800dae8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800dae4:	2303      	movs	r3, #3
 800dae6:	e064      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dae8:	4b11      	ldr	r3, [pc, #68]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d0f0      	beq.n	800dad6 <HAL_RCC_OscConfig+0x452>
 800daf4:	e05c      	b.n	800dbb0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800daf6:	4b10      	ldr	r3, [pc, #64]	@ (800db38 <HAL_RCC_OscConfig+0x4b4>)
 800daf8:	2200      	movs	r2, #0
 800dafa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dafc:	f7fa fef8 	bl	80088f0 <HAL_GetTick>
 800db00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db02:	e008      	b.n	800db16 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db04:	f7fa fef4 	bl	80088f0 <HAL_GetTick>
 800db08:	4602      	mov	r2, r0
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d901      	bls.n	800db16 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800db12:	2303      	movs	r3, #3
 800db14:	e04d      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db16:	4b06      	ldr	r3, [pc, #24]	@ (800db30 <HAL_RCC_OscConfig+0x4ac>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1f0      	bne.n	800db04 <HAL_RCC_OscConfig+0x480>
 800db22:	e045      	b.n	800dbb0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	699b      	ldr	r3, [r3, #24]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d107      	bne.n	800db3c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	e040      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
 800db30:	40023800 	.word	0x40023800
 800db34:	40007000 	.word	0x40007000
 800db38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800db3c:	4b1f      	ldr	r3, [pc, #124]	@ (800dbbc <HAL_RCC_OscConfig+0x538>)
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	699b      	ldr	r3, [r3, #24]
 800db46:	2b01      	cmp	r3, #1
 800db48:	d030      	beq.n	800dbac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db54:	429a      	cmp	r2, r3
 800db56:	d129      	bne.n	800dbac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db62:	429a      	cmp	r2, r3
 800db64:	d122      	bne.n	800dbac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800db66:	68fa      	ldr	r2, [r7, #12]
 800db68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800db6c:	4013      	ands	r3, r2
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800db72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800db74:	4293      	cmp	r3, r2
 800db76:	d119      	bne.n	800dbac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db82:	085b      	lsrs	r3, r3, #1
 800db84:	3b01      	subs	r3, #1
 800db86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800db88:	429a      	cmp	r2, r3
 800db8a:	d10f      	bne.n	800dbac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800db98:	429a      	cmp	r2, r3
 800db9a:	d107      	bne.n	800dbac <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dba6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d001      	beq.n	800dbb0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800dbac:	2301      	movs	r3, #1
 800dbae:	e000      	b.n	800dbb2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800dbb0:	2300      	movs	r3, #0
}
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	3718      	adds	r7, #24
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	bf00      	nop
 800dbbc:	40023800 	.word	0x40023800

0800dbc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d101      	bne.n	800dbd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e07b      	b.n	800dcca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d108      	bne.n	800dbec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dbe2:	d009      	beq.n	800dbf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	61da      	str	r2, [r3, #28]
 800dbea:	e005      	b.n	800dbf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d106      	bne.n	800dc18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f7f9 ffbe 	bl	8007b94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	681a      	ldr	r2, [r3, #0]
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800dc40:	431a      	orrs	r2, r3
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dc4a:	431a      	orrs	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	f003 0302 	and.w	r3, r3, #2
 800dc54:	431a      	orrs	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	695b      	ldr	r3, [r3, #20]
 800dc5a:	f003 0301 	and.w	r3, r3, #1
 800dc5e:	431a      	orrs	r2, r3
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	699b      	ldr	r3, [r3, #24]
 800dc64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800dc68:	431a      	orrs	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800dc72:	431a      	orrs	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a1b      	ldr	r3, [r3, #32]
 800dc78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dc7c:	ea42 0103 	orr.w	r1, r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	430a      	orrs	r2, r1
 800dc8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	699b      	ldr	r3, [r3, #24]
 800dc94:	0c1b      	lsrs	r3, r3, #16
 800dc96:	f003 0104 	and.w	r1, r3, #4
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc9e:	f003 0210 	and.w	r2, r3, #16
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	430a      	orrs	r2, r1
 800dca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	69da      	ldr	r2, [r3, #28]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dcb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}

0800dcd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b088      	sub	sp, #32
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	60f8      	str	r0, [r7, #12]
 800dcda:	60b9      	str	r1, [r7, #8]
 800dcdc:	603b      	str	r3, [r7, #0]
 800dcde:	4613      	mov	r3, r2
 800dce0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dce2:	f7fa fe05 	bl	80088f0 <HAL_GetTick>
 800dce6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800dce8:	88fb      	ldrh	r3, [r7, #6]
 800dcea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	2b01      	cmp	r3, #1
 800dcf6:	d001      	beq.n	800dcfc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	e12a      	b.n	800df52 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d002      	beq.n	800dd08 <HAL_SPI_Transmit+0x36>
 800dd02:	88fb      	ldrh	r3, [r7, #6]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d101      	bne.n	800dd0c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e122      	b.n	800df52 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d101      	bne.n	800dd1a <HAL_SPI_Transmit+0x48>
 800dd16:	2302      	movs	r3, #2
 800dd18:	e11b      	b.n	800df52 <HAL_SPI_Transmit+0x280>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2203      	movs	r2, #3
 800dd26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	68ba      	ldr	r2, [r7, #8]
 800dd34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	88fa      	ldrh	r2, [r7, #6]
 800dd3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	88fa      	ldrh	r2, [r7, #6]
 800dd40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2200      	movs	r2, #0
 800dd46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	2200      	movs	r2, #0
 800dd52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dd68:	d10f      	bne.n	800dd8a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dd88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd94:	2b40      	cmp	r3, #64	@ 0x40
 800dd96:	d007      	beq.n	800dda8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dda6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ddb0:	d152      	bne.n	800de58 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	685b      	ldr	r3, [r3, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d002      	beq.n	800ddc0 <HAL_SPI_Transmit+0xee>
 800ddba:	8b7b      	ldrh	r3, [r7, #26]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d145      	bne.n	800de4c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddc4:	881a      	ldrh	r2, [r3, #0]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddd0:	1c9a      	adds	r2, r3, #2
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	3b01      	subs	r3, #1
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800dde4:	e032      	b.n	800de4c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f003 0302 	and.w	r3, r3, #2
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d112      	bne.n	800de1a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddf8:	881a      	ldrh	r2, [r3, #0]
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de04:	1c9a      	adds	r2, r3, #2
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800de0e:	b29b      	uxth	r3, r3
 800de10:	3b01      	subs	r3, #1
 800de12:	b29a      	uxth	r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	86da      	strh	r2, [r3, #54]	@ 0x36
 800de18:	e018      	b.n	800de4c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de1a:	f7fa fd69 	bl	80088f0 <HAL_GetTick>
 800de1e:	4602      	mov	r2, r0
 800de20:	69fb      	ldr	r3, [r7, #28]
 800de22:	1ad3      	subs	r3, r2, r3
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	429a      	cmp	r2, r3
 800de28:	d803      	bhi.n	800de32 <HAL_SPI_Transmit+0x160>
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de30:	d102      	bne.n	800de38 <HAL_SPI_Transmit+0x166>
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d109      	bne.n	800de4c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	2201      	movs	r2, #1
 800de3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800de48:	2303      	movs	r3, #3
 800de4a:	e082      	b.n	800df52 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800de50:	b29b      	uxth	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d1c7      	bne.n	800dde6 <HAL_SPI_Transmit+0x114>
 800de56:	e053      	b.n	800df00 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d002      	beq.n	800de66 <HAL_SPI_Transmit+0x194>
 800de60:	8b7b      	ldrh	r3, [r7, #26]
 800de62:	2b01      	cmp	r3, #1
 800de64:	d147      	bne.n	800def6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	330c      	adds	r3, #12
 800de70:	7812      	ldrb	r2, [r2, #0]
 800de72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de78:	1c5a      	adds	r2, r3, #1
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800de82:	b29b      	uxth	r3, r3
 800de84:	3b01      	subs	r3, #1
 800de86:	b29a      	uxth	r2, r3
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800de8c:	e033      	b.n	800def6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	f003 0302 	and.w	r3, r3, #2
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d113      	bne.n	800dec4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	330c      	adds	r3, #12
 800dea6:	7812      	ldrb	r2, [r2, #0]
 800dea8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deae:	1c5a      	adds	r2, r3, #1
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800deb8:	b29b      	uxth	r3, r3
 800deba:	3b01      	subs	r3, #1
 800debc:	b29a      	uxth	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	86da      	strh	r2, [r3, #54]	@ 0x36
 800dec2:	e018      	b.n	800def6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dec4:	f7fa fd14 	bl	80088f0 <HAL_GetTick>
 800dec8:	4602      	mov	r2, r0
 800deca:	69fb      	ldr	r3, [r7, #28]
 800decc:	1ad3      	subs	r3, r2, r3
 800dece:	683a      	ldr	r2, [r7, #0]
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d803      	bhi.n	800dedc <HAL_SPI_Transmit+0x20a>
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deda:	d102      	bne.n	800dee2 <HAL_SPI_Transmit+0x210>
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d109      	bne.n	800def6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2201      	movs	r2, #1
 800dee6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	2200      	movs	r2, #0
 800deee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800def2:	2303      	movs	r3, #3
 800def4:	e02d      	b.n	800df52 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800defa:	b29b      	uxth	r3, r3
 800defc:	2b00      	cmp	r3, #0
 800defe:	d1c6      	bne.n	800de8e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800df00:	69fa      	ldr	r2, [r7, #28]
 800df02:	6839      	ldr	r1, [r7, #0]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 fbd9 	bl	800e6bc <SPI_EndRxTxTransaction>
 800df0a:	4603      	mov	r3, r0
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d002      	beq.n	800df16 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	2220      	movs	r2, #32
 800df14:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	689b      	ldr	r3, [r3, #8]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10a      	bne.n	800df34 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df1e:	2300      	movs	r3, #0
 800df20:	617b      	str	r3, [r7, #20]
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	617b      	str	r3, [r7, #20]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	617b      	str	r3, [r7, #20]
 800df32:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2201      	movs	r2, #1
 800df38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2200      	movs	r2, #0
 800df40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d001      	beq.n	800df50 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	e000      	b.n	800df52 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800df50:	2300      	movs	r3, #0
  }
}
 800df52:	4618      	mov	r0, r3
 800df54:	3720      	adds	r7, #32
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b088      	sub	sp, #32
 800df5e:	af02      	add	r7, sp, #8
 800df60:	60f8      	str	r0, [r7, #12]
 800df62:	60b9      	str	r1, [r7, #8]
 800df64:	603b      	str	r3, [r7, #0]
 800df66:	4613      	mov	r3, r2
 800df68:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800df70:	b2db      	uxtb	r3, r3
 800df72:	2b01      	cmp	r3, #1
 800df74:	d001      	beq.n	800df7a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800df76:	2302      	movs	r3, #2
 800df78:	e104      	b.n	800e184 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d002      	beq.n	800df86 <HAL_SPI_Receive+0x2c>
 800df80:	88fb      	ldrh	r3, [r7, #6]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d101      	bne.n	800df8a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800df86:	2301      	movs	r3, #1
 800df88:	e0fc      	b.n	800e184 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	685b      	ldr	r3, [r3, #4]
 800df8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800df92:	d112      	bne.n	800dfba <HAL_SPI_Receive+0x60>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d10e      	bne.n	800dfba <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2204      	movs	r2, #4
 800dfa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dfa4:	88fa      	ldrh	r2, [r7, #6]
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	68b9      	ldr	r1, [r7, #8]
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f000 f8eb 	bl	800e18c <HAL_SPI_TransmitReceive>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	e0e4      	b.n	800e184 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dfba:	f7fa fc99 	bl	80088f0 <HAL_GetTick>
 800dfbe:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d101      	bne.n	800dfce <HAL_SPI_Receive+0x74>
 800dfca:	2302      	movs	r3, #2
 800dfcc:	e0da      	b.n	800e184 <HAL_SPI_Receive+0x22a>
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2204      	movs	r2, #4
 800dfda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	68ba      	ldr	r2, [r7, #8]
 800dfe8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	88fa      	ldrh	r2, [r7, #6]
 800dfee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	88fa      	ldrh	r2, [r7, #6]
 800dff4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2200      	movs	r2, #0
 800dffa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	2200      	movs	r2, #0
 800e000:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2200      	movs	r2, #0
 800e00c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2200      	movs	r2, #0
 800e012:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e01c:	d10f      	bne.n	800e03e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	681a      	ldr	r2, [r3, #0]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e02c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e03c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e048:	2b40      	cmp	r3, #64	@ 0x40
 800e04a:	d007      	beq.n	800e05c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	681a      	ldr	r2, [r3, #0]
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e05a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	68db      	ldr	r3, [r3, #12]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d170      	bne.n	800e146 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e064:	e035      	b.n	800e0d2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	689b      	ldr	r3, [r3, #8]
 800e06c:	f003 0301 	and.w	r3, r3, #1
 800e070:	2b01      	cmp	r3, #1
 800e072:	d115      	bne.n	800e0a0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f103 020c 	add.w	r2, r3, #12
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e080:	7812      	ldrb	r2, [r2, #0]
 800e082:	b2d2      	uxtb	r2, r2
 800e084:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e08a:	1c5a      	adds	r2, r3, #1
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e094:	b29b      	uxth	r3, r3
 800e096:	3b01      	subs	r3, #1
 800e098:	b29a      	uxth	r2, r3
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e09e:	e018      	b.n	800e0d2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0a0:	f7fa fc26 	bl	80088f0 <HAL_GetTick>
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	697b      	ldr	r3, [r7, #20]
 800e0a8:	1ad3      	subs	r3, r2, r3
 800e0aa:	683a      	ldr	r2, [r7, #0]
 800e0ac:	429a      	cmp	r2, r3
 800e0ae:	d803      	bhi.n	800e0b8 <HAL_SPI_Receive+0x15e>
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0b6:	d102      	bne.n	800e0be <HAL_SPI_Receive+0x164>
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d109      	bne.n	800e0d2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e0ce:	2303      	movs	r3, #3
 800e0d0:	e058      	b.n	800e184 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1c4      	bne.n	800e066 <HAL_SPI_Receive+0x10c>
 800e0dc:	e038      	b.n	800e150 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	689b      	ldr	r3, [r3, #8]
 800e0e4:	f003 0301 	and.w	r3, r3, #1
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d113      	bne.n	800e114 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	68da      	ldr	r2, [r3, #12]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0f6:	b292      	uxth	r2, r2
 800e0f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0fe:	1c9a      	adds	r2, r3, #2
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e108:	b29b      	uxth	r3, r3
 800e10a:	3b01      	subs	r3, #1
 800e10c:	b29a      	uxth	r2, r3
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e112:	e018      	b.n	800e146 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e114:	f7fa fbec 	bl	80088f0 <HAL_GetTick>
 800e118:	4602      	mov	r2, r0
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	683a      	ldr	r2, [r7, #0]
 800e120:	429a      	cmp	r2, r3
 800e122:	d803      	bhi.n	800e12c <HAL_SPI_Receive+0x1d2>
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12a:	d102      	bne.n	800e132 <HAL_SPI_Receive+0x1d8>
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d109      	bne.n	800e146 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2201      	movs	r2, #1
 800e136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2200      	movs	r2, #0
 800e13e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e142:	2303      	movs	r3, #3
 800e144:	e01e      	b.n	800e184 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d1c6      	bne.n	800e0de <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e150:	697a      	ldr	r2, [r7, #20]
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 fa4b 	bl	800e5f0 <SPI_EndRxTransaction>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d002      	beq.n	800e166 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2220      	movs	r2, #32
 800e164:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2201      	movs	r2, #1
 800e16a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d001      	beq.n	800e182 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800e17e:	2301      	movs	r3, #1
 800e180:	e000      	b.n	800e184 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800e182:	2300      	movs	r3, #0
  }
}
 800e184:	4618      	mov	r0, r3
 800e186:	3718      	adds	r7, #24
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b08a      	sub	sp, #40	@ 0x28
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
 800e198:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e19a:	2301      	movs	r3, #1
 800e19c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e19e:	f7fa fba7 	bl	80088f0 <HAL_GetTick>
 800e1a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e1aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e1b2:	887b      	ldrh	r3, [r7, #2]
 800e1b4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e1b6:	7ffb      	ldrb	r3, [r7, #31]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d00c      	beq.n	800e1d6 <HAL_SPI_TransmitReceive+0x4a>
 800e1bc:	69bb      	ldr	r3, [r7, #24]
 800e1be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e1c2:	d106      	bne.n	800e1d2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d102      	bne.n	800e1d2 <HAL_SPI_TransmitReceive+0x46>
 800e1cc:	7ffb      	ldrb	r3, [r7, #31]
 800e1ce:	2b04      	cmp	r3, #4
 800e1d0:	d001      	beq.n	800e1d6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800e1d2:	2302      	movs	r3, #2
 800e1d4:	e17f      	b.n	800e4d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d005      	beq.n	800e1e8 <HAL_SPI_TransmitReceive+0x5c>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <HAL_SPI_TransmitReceive+0x5c>
 800e1e2:	887b      	ldrh	r3, [r7, #2]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d101      	bne.n	800e1ec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	e174      	b.n	800e4d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e1f2:	2b01      	cmp	r3, #1
 800e1f4:	d101      	bne.n	800e1fa <HAL_SPI_TransmitReceive+0x6e>
 800e1f6:	2302      	movs	r3, #2
 800e1f8:	e16d      	b.n	800e4d6 <HAL_SPI_TransmitReceive+0x34a>
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e208:	b2db      	uxtb	r3, r3
 800e20a:	2b04      	cmp	r3, #4
 800e20c:	d003      	beq.n	800e216 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2205      	movs	r2, #5
 800e212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2200      	movs	r2, #0
 800e21a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	887a      	ldrh	r2, [r7, #2]
 800e226:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	887a      	ldrh	r2, [r7, #2]
 800e22c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	887a      	ldrh	r2, [r7, #2]
 800e238:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	887a      	ldrh	r2, [r7, #2]
 800e23e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	2200      	movs	r2, #0
 800e244:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2200      	movs	r2, #0
 800e24a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e256:	2b40      	cmp	r3, #64	@ 0x40
 800e258:	d007      	beq.n	800e26a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e268:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	68db      	ldr	r3, [r3, #12]
 800e26e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e272:	d17e      	bne.n	800e372 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <HAL_SPI_TransmitReceive+0xf6>
 800e27c:	8afb      	ldrh	r3, [r7, #22]
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d16c      	bne.n	800e35c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e286:	881a      	ldrh	r2, [r3, #0]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e292:	1c9a      	adds	r2, r3, #2
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e2a6:	e059      	b.n	800e35c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	689b      	ldr	r3, [r3, #8]
 800e2ae:	f003 0302 	and.w	r3, r3, #2
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d11b      	bne.n	800e2ee <HAL_SPI_TransmitReceive+0x162>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d016      	beq.n	800e2ee <HAL_SPI_TransmitReceive+0x162>
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d113      	bne.n	800e2ee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2ca:	881a      	ldrh	r2, [r3, #0]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e2d6:	1c9a      	adds	r2, r3, #2
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e2e0:	b29b      	uxth	r3, r3
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	b29a      	uxth	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	f003 0301 	and.w	r3, r3, #1
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d119      	bne.n	800e330 <HAL_SPI_TransmitReceive+0x1a4>
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e300:	b29b      	uxth	r3, r3
 800e302:	2b00      	cmp	r3, #0
 800e304:	d014      	beq.n	800e330 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	68da      	ldr	r2, [r3, #12]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e310:	b292      	uxth	r2, r2
 800e312:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e318:	1c9a      	adds	r2, r3, #2
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e322:	b29b      	uxth	r3, r3
 800e324:	3b01      	subs	r3, #1
 800e326:	b29a      	uxth	r2, r3
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e32c:	2301      	movs	r3, #1
 800e32e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e330:	f7fa fade 	bl	80088f0 <HAL_GetTick>
 800e334:	4602      	mov	r2, r0
 800e336:	6a3b      	ldr	r3, [r7, #32]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d80d      	bhi.n	800e35c <HAL_SPI_TransmitReceive+0x1d0>
 800e340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e346:	d009      	beq.n	800e35c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2201      	movs	r2, #1
 800e34c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	2200      	movs	r2, #0
 800e354:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800e358:	2303      	movs	r3, #3
 800e35a:	e0bc      	b.n	800e4d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e360:	b29b      	uxth	r3, r3
 800e362:	2b00      	cmp	r3, #0
 800e364:	d1a0      	bne.n	800e2a8 <HAL_SPI_TransmitReceive+0x11c>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e36a:	b29b      	uxth	r3, r3
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d19b      	bne.n	800e2a8 <HAL_SPI_TransmitReceive+0x11c>
 800e370:	e082      	b.n	800e478 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d002      	beq.n	800e380 <HAL_SPI_TransmitReceive+0x1f4>
 800e37a:	8afb      	ldrh	r3, [r7, #22]
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d171      	bne.n	800e464 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	330c      	adds	r3, #12
 800e38a:	7812      	ldrb	r2, [r2, #0]
 800e38c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e392:	1c5a      	adds	r2, r3, #1
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	3b01      	subs	r3, #1
 800e3a0:	b29a      	uxth	r2, r3
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e3a6:	e05d      	b.n	800e464 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	689b      	ldr	r3, [r3, #8]
 800e3ae:	f003 0302 	and.w	r3, r3, #2
 800e3b2:	2b02      	cmp	r3, #2
 800e3b4:	d11c      	bne.n	800e3f0 <HAL_SPI_TransmitReceive+0x264>
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d017      	beq.n	800e3f0 <HAL_SPI_TransmitReceive+0x264>
 800e3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d114      	bne.n	800e3f0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	330c      	adds	r3, #12
 800e3d0:	7812      	ldrb	r2, [r2, #0]
 800e3d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3d8:	1c5a      	adds	r2, r3, #1
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	3b01      	subs	r3, #1
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	689b      	ldr	r3, [r3, #8]
 800e3f6:	f003 0301 	and.w	r3, r3, #1
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d119      	bne.n	800e432 <HAL_SPI_TransmitReceive+0x2a6>
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e402:	b29b      	uxth	r3, r3
 800e404:	2b00      	cmp	r3, #0
 800e406:	d014      	beq.n	800e432 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68da      	ldr	r2, [r3, #12]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e412:	b2d2      	uxtb	r2, r2
 800e414:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e41a:	1c5a      	adds	r2, r3, #1
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e424:	b29b      	uxth	r3, r3
 800e426:	3b01      	subs	r3, #1
 800e428:	b29a      	uxth	r2, r3
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e42e:	2301      	movs	r3, #1
 800e430:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e432:	f7fa fa5d 	bl	80088f0 <HAL_GetTick>
 800e436:	4602      	mov	r2, r0
 800e438:	6a3b      	ldr	r3, [r7, #32]
 800e43a:	1ad3      	subs	r3, r2, r3
 800e43c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e43e:	429a      	cmp	r2, r3
 800e440:	d803      	bhi.n	800e44a <HAL_SPI_TransmitReceive+0x2be>
 800e442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e444:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e448:	d102      	bne.n	800e450 <HAL_SPI_TransmitReceive+0x2c4>
 800e44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d109      	bne.n	800e464 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2201      	movs	r2, #1
 800e454:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800e460:	2303      	movs	r3, #3
 800e462:	e038      	b.n	800e4d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e468:	b29b      	uxth	r3, r3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d19c      	bne.n	800e3a8 <HAL_SPI_TransmitReceive+0x21c>
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e472:	b29b      	uxth	r3, r3
 800e474:	2b00      	cmp	r3, #0
 800e476:	d197      	bne.n	800e3a8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e478:	6a3a      	ldr	r2, [r7, #32]
 800e47a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f000 f91d 	bl	800e6bc <SPI_EndRxTxTransaction>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d008      	beq.n	800e49a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2220      	movs	r2, #32
 800e48c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2200      	movs	r2, #0
 800e492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800e496:	2301      	movs	r3, #1
 800e498:	e01d      	b.n	800e4d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d10a      	bne.n	800e4b8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	613b      	str	r3, [r7, #16]
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	613b      	str	r3, [r7, #16]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	613b      	str	r3, [r7, #16]
 800e4b6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2201      	movs	r2, #1
 800e4bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	e000      	b.n	800e4d6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800e4d4:	2300      	movs	r3, #0
  }
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3728      	adds	r7, #40	@ 0x28
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}
	...

0800e4e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b088      	sub	sp, #32
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	60f8      	str	r0, [r7, #12]
 800e4e8:	60b9      	str	r1, [r7, #8]
 800e4ea:	603b      	str	r3, [r7, #0]
 800e4ec:	4613      	mov	r3, r2
 800e4ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e4f0:	f7fa f9fe 	bl	80088f0 <HAL_GetTick>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4f8:	1a9b      	subs	r3, r3, r2
 800e4fa:	683a      	ldr	r2, [r7, #0]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e500:	f7fa f9f6 	bl	80088f0 <HAL_GetTick>
 800e504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e506:	4b39      	ldr	r3, [pc, #228]	@ (800e5ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	015b      	lsls	r3, r3, #5
 800e50c:	0d1b      	lsrs	r3, r3, #20
 800e50e:	69fa      	ldr	r2, [r7, #28]
 800e510:	fb02 f303 	mul.w	r3, r2, r3
 800e514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e516:	e055      	b.n	800e5c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51e:	d051      	beq.n	800e5c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e520:	f7fa f9e6 	bl	80088f0 <HAL_GetTick>
 800e524:	4602      	mov	r2, r0
 800e526:	69bb      	ldr	r3, [r7, #24]
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	69fa      	ldr	r2, [r7, #28]
 800e52c:	429a      	cmp	r2, r3
 800e52e:	d902      	bls.n	800e536 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d13d      	bne.n	800e5b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	685a      	ldr	r2, [r3, #4]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	685b      	ldr	r3, [r3, #4]
 800e54a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e54e:	d111      	bne.n	800e574 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	689b      	ldr	r3, [r3, #8]
 800e554:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e558:	d004      	beq.n	800e564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	689b      	ldr	r3, [r3, #8]
 800e55e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e562:	d107      	bne.n	800e574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e578:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e57c:	d10f      	bne.n	800e59e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	681a      	ldr	r2, [r3, #0]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e58c:	601a      	str	r2, [r3, #0]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e59c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800e5ae:	2303      	movs	r3, #3
 800e5b0:	e018      	b.n	800e5e4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d102      	bne.n	800e5be <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	61fb      	str	r3, [r7, #28]
 800e5bc:	e002      	b.n	800e5c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	3b01      	subs	r3, #1
 800e5c2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	689a      	ldr	r2, [r3, #8]
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	4013      	ands	r3, r2
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	429a      	cmp	r2, r3
 800e5d2:	bf0c      	ite	eq
 800e5d4:	2301      	moveq	r3, #1
 800e5d6:	2300      	movne	r3, #0
 800e5d8:	b2db      	uxtb	r3, r3
 800e5da:	461a      	mov	r2, r3
 800e5dc:	79fb      	ldrb	r3, [r7, #7]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d19a      	bne.n	800e518 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800e5e2:	2300      	movs	r3, #0
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3720      	adds	r7, #32
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	20000038 	.word	0x20000038

0800e5f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af02      	add	r7, sp, #8
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e604:	d111      	bne.n	800e62a <SPI_EndRxTransaction+0x3a>
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	689b      	ldr	r3, [r3, #8]
 800e60a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e60e:	d004      	beq.n	800e61a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e618:	d107      	bne.n	800e62a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	681a      	ldr	r2, [r3, #0]
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e628:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	685b      	ldr	r3, [r3, #4]
 800e62e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e632:	d12a      	bne.n	800e68a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e63c:	d012      	beq.n	800e664 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	2200      	movs	r2, #0
 800e646:	2180      	movs	r1, #128	@ 0x80
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f7ff ff49 	bl	800e4e0 <SPI_WaitFlagStateUntilTimeout>
 800e64e:	4603      	mov	r3, r0
 800e650:	2b00      	cmp	r3, #0
 800e652:	d02d      	beq.n	800e6b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e658:	f043 0220 	orr.w	r2, r3, #32
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800e660:	2303      	movs	r3, #3
 800e662:	e026      	b.n	800e6b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	9300      	str	r3, [sp, #0]
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	2200      	movs	r2, #0
 800e66c:	2101      	movs	r1, #1
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7ff ff36 	bl	800e4e0 <SPI_WaitFlagStateUntilTimeout>
 800e674:	4603      	mov	r3, r0
 800e676:	2b00      	cmp	r3, #0
 800e678:	d01a      	beq.n	800e6b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e67e:	f043 0220 	orr.w	r2, r3, #32
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800e686:	2303      	movs	r3, #3
 800e688:	e013      	b.n	800e6b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	2200      	movs	r2, #0
 800e692:	2101      	movs	r1, #1
 800e694:	68f8      	ldr	r0, [r7, #12]
 800e696:	f7ff ff23 	bl	800e4e0 <SPI_WaitFlagStateUntilTimeout>
 800e69a:	4603      	mov	r3, r0
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d007      	beq.n	800e6b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6a4:	f043 0220 	orr.w	r2, r3, #32
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800e6ac:	2303      	movs	r3, #3
 800e6ae:	e000      	b.n	800e6b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e6b0:	2300      	movs	r3, #0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
	...

0800e6bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b088      	sub	sp, #32
 800e6c0:	af02      	add	r7, sp, #8
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	9300      	str	r3, [sp, #0]
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	2102      	movs	r1, #2
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f7ff ff04 	bl	800e4e0 <SPI_WaitFlagStateUntilTimeout>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d007      	beq.n	800e6ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e6e2:	f043 0220 	orr.w	r2, r3, #32
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800e6ea:	2303      	movs	r3, #3
 800e6ec:	e032      	b.n	800e754 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e6ee:	4b1b      	ldr	r3, [pc, #108]	@ (800e75c <SPI_EndRxTxTransaction+0xa0>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a1b      	ldr	r2, [pc, #108]	@ (800e760 <SPI_EndRxTxTransaction+0xa4>)
 800e6f4:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f8:	0d5b      	lsrs	r3, r3, #21
 800e6fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e6fe:	fb02 f303 	mul.w	r3, r2, r3
 800e702:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e70c:	d112      	bne.n	800e734 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	9300      	str	r3, [sp, #0]
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	2200      	movs	r2, #0
 800e716:	2180      	movs	r1, #128	@ 0x80
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff fee1 	bl	800e4e0 <SPI_WaitFlagStateUntilTimeout>
 800e71e:	4603      	mov	r3, r0
 800e720:	2b00      	cmp	r3, #0
 800e722:	d016      	beq.n	800e752 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e728:	f043 0220 	orr.w	r2, r3, #32
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800e730:	2303      	movs	r3, #3
 800e732:	e00f      	b.n	800e754 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e734:	697b      	ldr	r3, [r7, #20]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d00a      	beq.n	800e750 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	3b01      	subs	r3, #1
 800e73e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	689b      	ldr	r3, [r3, #8]
 800e746:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e74a:	2b80      	cmp	r3, #128	@ 0x80
 800e74c:	d0f2      	beq.n	800e734 <SPI_EndRxTxTransaction+0x78>
 800e74e:	e000      	b.n	800e752 <SPI_EndRxTxTransaction+0x96>
        break;
 800e750:	bf00      	nop
  }

  return HAL_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}
 800e75c:	20000038 	.word	0x20000038
 800e760:	165e9f81 	.word	0x165e9f81

0800e764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d101      	bne.n	800e776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e772:	2301      	movs	r3, #1
 800e774:	e041      	b.n	800e7fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d106      	bne.n	800e790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7f9 fa80 	bl	8007c90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2202      	movs	r2, #2
 800e794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	3304      	adds	r3, #4
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	f000 fa7e 	bl	800eca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2201      	movs	r2, #1
 800e7bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2201      	movs	r2, #1
 800e7dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	2201      	movs	r2, #1
 800e7e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2201      	movs	r2, #1
 800e7ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e7f8:	2300      	movs	r3, #0
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3708      	adds	r7, #8
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
	...

0800e804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e804:	b480      	push	{r7}
 800e806:	b085      	sub	sp, #20
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e812:	b2db      	uxtb	r3, r3
 800e814:	2b01      	cmp	r3, #1
 800e816:	d001      	beq.n	800e81c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e818:	2301      	movs	r3, #1
 800e81a:	e04e      	b.n	800e8ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2202      	movs	r2, #2
 800e820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	68da      	ldr	r2, [r3, #12]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f042 0201 	orr.w	r2, r2, #1
 800e832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	4a23      	ldr	r2, [pc, #140]	@ (800e8c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800e83a:	4293      	cmp	r3, r2
 800e83c:	d022      	beq.n	800e884 <HAL_TIM_Base_Start_IT+0x80>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e846:	d01d      	beq.n	800e884 <HAL_TIM_Base_Start_IT+0x80>
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a1f      	ldr	r2, [pc, #124]	@ (800e8cc <HAL_TIM_Base_Start_IT+0xc8>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d018      	beq.n	800e884 <HAL_TIM_Base_Start_IT+0x80>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a1e      	ldr	r2, [pc, #120]	@ (800e8d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d013      	beq.n	800e884 <HAL_TIM_Base_Start_IT+0x80>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a1c      	ldr	r2, [pc, #112]	@ (800e8d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800e862:	4293      	cmp	r3, r2
 800e864:	d00e      	beq.n	800e884 <HAL_TIM_Base_Start_IT+0x80>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	4a1b      	ldr	r2, [pc, #108]	@ (800e8d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d009      	beq.n	800e884 <HAL_TIM_Base_Start_IT+0x80>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4a19      	ldr	r2, [pc, #100]	@ (800e8dc <HAL_TIM_Base_Start_IT+0xd8>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d004      	beq.n	800e884 <HAL_TIM_Base_Start_IT+0x80>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a18      	ldr	r2, [pc, #96]	@ (800e8e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d111      	bne.n	800e8a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	689b      	ldr	r3, [r3, #8]
 800e88a:	f003 0307 	and.w	r3, r3, #7
 800e88e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	2b06      	cmp	r3, #6
 800e894:	d010      	beq.n	800e8b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f042 0201 	orr.w	r2, r2, #1
 800e8a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8a6:	e007      	b.n	800e8b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681a      	ldr	r2, [r3, #0]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	f042 0201 	orr.w	r2, r2, #1
 800e8b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e8b8:	2300      	movs	r3, #0
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3714      	adds	r7, #20
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	40010000 	.word	0x40010000
 800e8cc:	40000400 	.word	0x40000400
 800e8d0:	40000800 	.word	0x40000800
 800e8d4:	40000c00 	.word	0x40000c00
 800e8d8:	40010400 	.word	0x40010400
 800e8dc:	40014000 	.word	0x40014000
 800e8e0:	40001800 	.word	0x40001800

0800e8e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b084      	sub	sp, #16
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68db      	ldr	r3, [r3, #12]
 800e8f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	691b      	ldr	r3, [r3, #16]
 800e8fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	f003 0302 	and.w	r3, r3, #2
 800e902:	2b00      	cmp	r3, #0
 800e904:	d020      	beq.n	800e948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f003 0302 	and.w	r3, r3, #2
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01b      	beq.n	800e948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	f06f 0202 	mvn.w	r2, #2
 800e918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2201      	movs	r2, #1
 800e91e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	699b      	ldr	r3, [r3, #24]
 800e926:	f003 0303 	and.w	r3, r3, #3
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d003      	beq.n	800e936 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f000 f999 	bl	800ec66 <HAL_TIM_IC_CaptureCallback>
 800e934:	e005      	b.n	800e942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f000 f98b 	bl	800ec52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f000 f99c 	bl	800ec7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	2200      	movs	r2, #0
 800e946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	f003 0304 	and.w	r3, r3, #4
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d020      	beq.n	800e994 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f003 0304 	and.w	r3, r3, #4
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d01b      	beq.n	800e994 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f06f 0204 	mvn.w	r2, #4
 800e964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	2202      	movs	r2, #2
 800e96a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	699b      	ldr	r3, [r3, #24]
 800e972:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e976:	2b00      	cmp	r3, #0
 800e978:	d003      	beq.n	800e982 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f000 f973 	bl	800ec66 <HAL_TIM_IC_CaptureCallback>
 800e980:	e005      	b.n	800e98e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 f965 	bl	800ec52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 f976 	bl	800ec7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2200      	movs	r2, #0
 800e992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	f003 0308 	and.w	r3, r3, #8
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d020      	beq.n	800e9e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f003 0308 	and.w	r3, r3, #8
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d01b      	beq.n	800e9e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f06f 0208 	mvn.w	r2, #8
 800e9b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2204      	movs	r2, #4
 800e9b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	69db      	ldr	r3, [r3, #28]
 800e9be:	f003 0303 	and.w	r3, r3, #3
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d003      	beq.n	800e9ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9c6:	6878      	ldr	r0, [r7, #4]
 800e9c8:	f000 f94d 	bl	800ec66 <HAL_TIM_IC_CaptureCallback>
 800e9cc:	e005      	b.n	800e9da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f93f 	bl	800ec52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f000 f950 	bl	800ec7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e9e0:	68bb      	ldr	r3, [r7, #8]
 800e9e2:	f003 0310 	and.w	r3, r3, #16
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d020      	beq.n	800ea2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f003 0310 	and.w	r3, r3, #16
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d01b      	beq.n	800ea2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	f06f 0210 	mvn.w	r2, #16
 800e9fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	2208      	movs	r2, #8
 800ea02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	69db      	ldr	r3, [r3, #28]
 800ea0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d003      	beq.n	800ea1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f000 f927 	bl	800ec66 <HAL_TIM_IC_CaptureCallback>
 800ea18:	e005      	b.n	800ea26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f919 	bl	800ec52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f92a 	bl	800ec7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	f003 0301 	and.w	r3, r3, #1
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00c      	beq.n	800ea50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f003 0301 	and.w	r3, r3, #1
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d007      	beq.n	800ea50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f06f 0201 	mvn.w	r2, #1
 800ea48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7f7 f8f0 	bl	8005c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00c      	beq.n	800ea74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d007      	beq.n	800ea74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800ea6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 fade 	bl	800f030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d00c      	beq.n	800ea98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d007      	beq.n	800ea98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ea90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 f8fb 	bl	800ec8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	f003 0320 	and.w	r3, r3, #32
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00c      	beq.n	800eabc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	f003 0320 	and.w	r3, r3, #32
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d007      	beq.n	800eabc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f06f 0220 	mvn.w	r2, #32
 800eab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fab0 	bl	800f01c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eabc:	bf00      	nop
 800eabe:	3710      	adds	r7, #16
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}

0800eac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b084      	sub	sp, #16
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eace:	2300      	movs	r3, #0
 800ead0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d101      	bne.n	800eae0 <HAL_TIM_ConfigClockSource+0x1c>
 800eadc:	2302      	movs	r3, #2
 800eade:	e0b4      	b.n	800ec4a <HAL_TIM_ConfigClockSource+0x186>
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2201      	movs	r2, #1
 800eae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2202      	movs	r2, #2
 800eaec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800eafe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb00:	68bb      	ldr	r3, [r7, #8]
 800eb02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eb06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	68ba      	ldr	r2, [r7, #8]
 800eb0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb18:	d03e      	beq.n	800eb98 <HAL_TIM_ConfigClockSource+0xd4>
 800eb1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb1e:	f200 8087 	bhi.w	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
 800eb22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb26:	f000 8086 	beq.w	800ec36 <HAL_TIM_ConfigClockSource+0x172>
 800eb2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb2e:	d87f      	bhi.n	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
 800eb30:	2b70      	cmp	r3, #112	@ 0x70
 800eb32:	d01a      	beq.n	800eb6a <HAL_TIM_ConfigClockSource+0xa6>
 800eb34:	2b70      	cmp	r3, #112	@ 0x70
 800eb36:	d87b      	bhi.n	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
 800eb38:	2b60      	cmp	r3, #96	@ 0x60
 800eb3a:	d050      	beq.n	800ebde <HAL_TIM_ConfigClockSource+0x11a>
 800eb3c:	2b60      	cmp	r3, #96	@ 0x60
 800eb3e:	d877      	bhi.n	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
 800eb40:	2b50      	cmp	r3, #80	@ 0x50
 800eb42:	d03c      	beq.n	800ebbe <HAL_TIM_ConfigClockSource+0xfa>
 800eb44:	2b50      	cmp	r3, #80	@ 0x50
 800eb46:	d873      	bhi.n	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
 800eb48:	2b40      	cmp	r3, #64	@ 0x40
 800eb4a:	d058      	beq.n	800ebfe <HAL_TIM_ConfigClockSource+0x13a>
 800eb4c:	2b40      	cmp	r3, #64	@ 0x40
 800eb4e:	d86f      	bhi.n	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
 800eb50:	2b30      	cmp	r3, #48	@ 0x30
 800eb52:	d064      	beq.n	800ec1e <HAL_TIM_ConfigClockSource+0x15a>
 800eb54:	2b30      	cmp	r3, #48	@ 0x30
 800eb56:	d86b      	bhi.n	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
 800eb58:	2b20      	cmp	r3, #32
 800eb5a:	d060      	beq.n	800ec1e <HAL_TIM_ConfigClockSource+0x15a>
 800eb5c:	2b20      	cmp	r3, #32
 800eb5e:	d867      	bhi.n	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d05c      	beq.n	800ec1e <HAL_TIM_ConfigClockSource+0x15a>
 800eb64:	2b10      	cmp	r3, #16
 800eb66:	d05a      	beq.n	800ec1e <HAL_TIM_ConfigClockSource+0x15a>
 800eb68:	e062      	b.n	800ec30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eb72:	683b      	ldr	r3, [r7, #0]
 800eb74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eb7a:	f000 f9b3 	bl	800eee4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	689b      	ldr	r3, [r3, #8]
 800eb84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800eb8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	68ba      	ldr	r2, [r7, #8]
 800eb94:	609a      	str	r2, [r3, #8]
      break;
 800eb96:	e04f      	b.n	800ec38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800eba0:	683b      	ldr	r3, [r7, #0]
 800eba2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800eba8:	f000 f99c 	bl	800eee4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	689a      	ldr	r2, [r3, #8]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ebba:	609a      	str	r2, [r3, #8]
      break;
 800ebbc:	e03c      	b.n	800ec38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebca:	461a      	mov	r2, r3
 800ebcc:	f000 f910 	bl	800edf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2150      	movs	r1, #80	@ 0x50
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 f969 	bl	800eeae <TIM_ITRx_SetConfig>
      break;
 800ebdc:	e02c      	b.n	800ec38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ebea:	461a      	mov	r2, r3
 800ebec:	f000 f92f 	bl	800ee4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	2160      	movs	r1, #96	@ 0x60
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f000 f959 	bl	800eeae <TIM_ITRx_SetConfig>
      break;
 800ebfc:	e01c      	b.n	800ec38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	f000 f8f0 	bl	800edf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2140      	movs	r1, #64	@ 0x40
 800ec16:	4618      	mov	r0, r3
 800ec18:	f000 f949 	bl	800eeae <TIM_ITRx_SetConfig>
      break;
 800ec1c:	e00c      	b.n	800ec38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	4619      	mov	r1, r3
 800ec28:	4610      	mov	r0, r2
 800ec2a:	f000 f940 	bl	800eeae <TIM_ITRx_SetConfig>
      break;
 800ec2e:	e003      	b.n	800ec38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ec30:	2301      	movs	r3, #1
 800ec32:	73fb      	strb	r3, [r7, #15]
      break;
 800ec34:	e000      	b.n	800ec38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ec36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	2200      	movs	r2, #0
 800ec44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec52:	b480      	push	{r7}
 800ec54:	b083      	sub	sp, #12
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec5a:	bf00      	nop
 800ec5c:	370c      	adds	r7, #12
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec66:	b480      	push	{r7}
 800ec68:	b083      	sub	sp, #12
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec6e:	bf00      	nop
 800ec70:	370c      	adds	r7, #12
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec7a:	b480      	push	{r7}
 800ec7c:	b083      	sub	sp, #12
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec82:	bf00      	nop
 800ec84:	370c      	adds	r7, #12
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr

0800ec8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b083      	sub	sp, #12
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec96:	bf00      	nop
 800ec98:	370c      	adds	r7, #12
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr
	...

0800eca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	4a43      	ldr	r2, [pc, #268]	@ (800edc4 <TIM_Base_SetConfig+0x120>)
 800ecb8:	4293      	cmp	r3, r2
 800ecba:	d013      	beq.n	800ece4 <TIM_Base_SetConfig+0x40>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecc2:	d00f      	beq.n	800ece4 <TIM_Base_SetConfig+0x40>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	4a40      	ldr	r2, [pc, #256]	@ (800edc8 <TIM_Base_SetConfig+0x124>)
 800ecc8:	4293      	cmp	r3, r2
 800ecca:	d00b      	beq.n	800ece4 <TIM_Base_SetConfig+0x40>
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	4a3f      	ldr	r2, [pc, #252]	@ (800edcc <TIM_Base_SetConfig+0x128>)
 800ecd0:	4293      	cmp	r3, r2
 800ecd2:	d007      	beq.n	800ece4 <TIM_Base_SetConfig+0x40>
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a3e      	ldr	r2, [pc, #248]	@ (800edd0 <TIM_Base_SetConfig+0x12c>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d003      	beq.n	800ece4 <TIM_Base_SetConfig+0x40>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	4a3d      	ldr	r2, [pc, #244]	@ (800edd4 <TIM_Base_SetConfig+0x130>)
 800ece0:	4293      	cmp	r3, r2
 800ece2:	d108      	bne.n	800ecf6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	4313      	orrs	r3, r2
 800ecf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	4a32      	ldr	r2, [pc, #200]	@ (800edc4 <TIM_Base_SetConfig+0x120>)
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d02b      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed04:	d027      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4a2f      	ldr	r2, [pc, #188]	@ (800edc8 <TIM_Base_SetConfig+0x124>)
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d023      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4a2e      	ldr	r2, [pc, #184]	@ (800edcc <TIM_Base_SetConfig+0x128>)
 800ed12:	4293      	cmp	r3, r2
 800ed14:	d01f      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	4a2d      	ldr	r2, [pc, #180]	@ (800edd0 <TIM_Base_SetConfig+0x12c>)
 800ed1a:	4293      	cmp	r3, r2
 800ed1c:	d01b      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a2c      	ldr	r2, [pc, #176]	@ (800edd4 <TIM_Base_SetConfig+0x130>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d017      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	4a2b      	ldr	r2, [pc, #172]	@ (800edd8 <TIM_Base_SetConfig+0x134>)
 800ed2a:	4293      	cmp	r3, r2
 800ed2c:	d013      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a2a      	ldr	r2, [pc, #168]	@ (800eddc <TIM_Base_SetConfig+0x138>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d00f      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a29      	ldr	r2, [pc, #164]	@ (800ede0 <TIM_Base_SetConfig+0x13c>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d00b      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a28      	ldr	r2, [pc, #160]	@ (800ede4 <TIM_Base_SetConfig+0x140>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d007      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4a27      	ldr	r2, [pc, #156]	@ (800ede8 <TIM_Base_SetConfig+0x144>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d003      	beq.n	800ed56 <TIM_Base_SetConfig+0xb2>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4a26      	ldr	r2, [pc, #152]	@ (800edec <TIM_Base_SetConfig+0x148>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d108      	bne.n	800ed68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	68db      	ldr	r3, [r3, #12]
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	4313      	orrs	r3, r2
 800ed66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	695b      	ldr	r3, [r3, #20]
 800ed72:	4313      	orrs	r3, r2
 800ed74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	689a      	ldr	r2, [r3, #8]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	4a0e      	ldr	r2, [pc, #56]	@ (800edc4 <TIM_Base_SetConfig+0x120>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d003      	beq.n	800ed96 <TIM_Base_SetConfig+0xf2>
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4a10      	ldr	r2, [pc, #64]	@ (800edd4 <TIM_Base_SetConfig+0x130>)
 800ed92:	4293      	cmp	r3, r2
 800ed94:	d103      	bne.n	800ed9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	691a      	ldr	r2, [r3, #16]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f043 0204 	orr.w	r2, r3, #4
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2201      	movs	r2, #1
 800edae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	601a      	str	r2, [r3, #0]
}
 800edb6:	bf00      	nop
 800edb8:	3714      	adds	r7, #20
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
 800edc2:	bf00      	nop
 800edc4:	40010000 	.word	0x40010000
 800edc8:	40000400 	.word	0x40000400
 800edcc:	40000800 	.word	0x40000800
 800edd0:	40000c00 	.word	0x40000c00
 800edd4:	40010400 	.word	0x40010400
 800edd8:	40014000 	.word	0x40014000
 800eddc:	40014400 	.word	0x40014400
 800ede0:	40014800 	.word	0x40014800
 800ede4:	40001800 	.word	0x40001800
 800ede8:	40001c00 	.word	0x40001c00
 800edec:	40002000 	.word	0x40002000

0800edf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6a1b      	ldr	r3, [r3, #32]
 800ee00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	6a1b      	ldr	r3, [r3, #32]
 800ee06:	f023 0201 	bic.w	r2, r3, #1
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee14:	693b      	ldr	r3, [r7, #16]
 800ee16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	011b      	lsls	r3, r3, #4
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ee26:	697b      	ldr	r3, [r7, #20]
 800ee28:	f023 030a 	bic.w	r3, r3, #10
 800ee2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ee2e:	697a      	ldr	r2, [r7, #20]
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	4313      	orrs	r3, r2
 800ee34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	693a      	ldr	r2, [r7, #16]
 800ee3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	697a      	ldr	r2, [r7, #20]
 800ee40:	621a      	str	r2, [r3, #32]
}
 800ee42:	bf00      	nop
 800ee44:	371c      	adds	r7, #28
 800ee46:	46bd      	mov	sp, r7
 800ee48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4c:	4770      	bx	lr

0800ee4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ee4e:	b480      	push	{r7}
 800ee50:	b087      	sub	sp, #28
 800ee52:	af00      	add	r7, sp, #0
 800ee54:	60f8      	str	r0, [r7, #12]
 800ee56:	60b9      	str	r1, [r7, #8]
 800ee58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	6a1b      	ldr	r3, [r3, #32]
 800ee64:	f023 0210 	bic.w	r2, r3, #16
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	699b      	ldr	r3, [r3, #24]
 800ee70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	031b      	lsls	r3, r3, #12
 800ee7e:	693a      	ldr	r2, [r7, #16]
 800ee80:	4313      	orrs	r3, r2
 800ee82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee8a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	011b      	lsls	r3, r3, #4
 800ee90:	697a      	ldr	r2, [r7, #20]
 800ee92:	4313      	orrs	r3, r2
 800ee94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	693a      	ldr	r2, [r7, #16]
 800ee9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	697a      	ldr	r2, [r7, #20]
 800eea0:	621a      	str	r2, [r3, #32]
}
 800eea2:	bf00      	nop
 800eea4:	371c      	adds	r7, #28
 800eea6:	46bd      	mov	sp, r7
 800eea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeac:	4770      	bx	lr

0800eeae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800eeae:	b480      	push	{r7}
 800eeb0:	b085      	sub	sp, #20
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
 800eeb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	689b      	ldr	r3, [r3, #8]
 800eebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	4313      	orrs	r3, r2
 800eecc:	f043 0307 	orr.w	r3, r3, #7
 800eed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	68fa      	ldr	r2, [r7, #12]
 800eed6:	609a      	str	r2, [r3, #8]
}
 800eed8:	bf00      	nop
 800eeda:	3714      	adds	r7, #20
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b087      	sub	sp, #28
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]
 800eef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eefe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	021a      	lsls	r2, r3, #8
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	431a      	orrs	r2, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	4313      	orrs	r3, r2
 800ef0c:	697a      	ldr	r2, [r7, #20]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	697a      	ldr	r2, [r7, #20]
 800ef16:	609a      	str	r2, [r3, #8]
}
 800ef18:	bf00      	nop
 800ef1a:	371c      	adds	r7, #28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b085      	sub	sp, #20
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d101      	bne.n	800ef3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef38:	2302      	movs	r3, #2
 800ef3a:	e05a      	b.n	800eff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2201      	movs	r2, #1
 800ef40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2202      	movs	r2, #2
 800ef48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	689b      	ldr	r3, [r3, #8]
 800ef5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68fa      	ldr	r2, [r7, #12]
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a21      	ldr	r2, [pc, #132]	@ (800f000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d022      	beq.n	800efc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef88:	d01d      	beq.n	800efc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	4a1d      	ldr	r2, [pc, #116]	@ (800f004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ef90:	4293      	cmp	r3, r2
 800ef92:	d018      	beq.n	800efc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a1b      	ldr	r2, [pc, #108]	@ (800f008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d013      	beq.n	800efc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	4a1a      	ldr	r2, [pc, #104]	@ (800f00c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d00e      	beq.n	800efc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	4a18      	ldr	r2, [pc, #96]	@ (800f010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800efae:	4293      	cmp	r3, r2
 800efb0:	d009      	beq.n	800efc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	4a17      	ldr	r2, [pc, #92]	@ (800f014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d004      	beq.n	800efc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4a15      	ldr	r2, [pc, #84]	@ (800f018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d10c      	bne.n	800efe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800efc6:	68bb      	ldr	r3, [r7, #8]
 800efc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800efcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	685b      	ldr	r3, [r3, #4]
 800efd2:	68ba      	ldr	r2, [r7, #8]
 800efd4:	4313      	orrs	r3, r2
 800efd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2201      	movs	r2, #1
 800efe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2200      	movs	r2, #0
 800efec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3714      	adds	r7, #20
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	40010000 	.word	0x40010000
 800f004:	40000400 	.word	0x40000400
 800f008:	40000800 	.word	0x40000800
 800f00c:	40000c00 	.word	0x40000c00
 800f010:	40010400 	.word	0x40010400
 800f014:	40014000 	.word	0x40014000
 800f018:	40001800 	.word	0x40001800

0800f01c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f024:	bf00      	nop
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr

0800f030 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f030:	b480      	push	{r7}
 800f032:	b083      	sub	sp, #12
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f038:	bf00      	nop
 800f03a:	370c      	adds	r7, #12
 800f03c:	46bd      	mov	sp, r7
 800f03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f042:	4770      	bx	lr

0800f044 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f052:	2301      	movs	r3, #1
 800f054:	e042      	b.n	800f0dc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d106      	bne.n	800f070 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2200      	movs	r2, #0
 800f066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f7f8 fe36 	bl	8007cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2224      	movs	r2, #36	@ 0x24
 800f074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	68da      	ldr	r2, [r3, #12]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f086:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f001 f905 	bl	8010298 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	691a      	ldr	r2, [r3, #16]
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f09c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	695a      	ldr	r2, [r3, #20]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f0ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68da      	ldr	r2, [r3, #12]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f0bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2220      	movs	r2, #32
 800f0c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2220      	movs	r2, #32
 800f0d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f0da:	2300      	movs	r3, #0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d101      	bne.n	800f0f6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	e024      	b.n	800f140 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	2224      	movs	r2, #36	@ 0x24
 800f0fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	68da      	ldr	r2, [r3, #12]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f10c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f7f8 ff44 	bl	8007f9c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2200      	movs	r2, #0
 800f126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2200      	movs	r2, #0
 800f12e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	2200      	movs	r2, #0
 800f13a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f13e:	2300      	movs	r3, #0
}
 800f140:	4618      	mov	r0, r3
 800f142:	3708      	adds	r7, #8
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08a      	sub	sp, #40	@ 0x28
 800f14c:	af02      	add	r7, sp, #8
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	603b      	str	r3, [r7, #0]
 800f154:	4613      	mov	r3, r2
 800f156:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f158:	2300      	movs	r3, #0
 800f15a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f162:	b2db      	uxtb	r3, r3
 800f164:	2b20      	cmp	r3, #32
 800f166:	d175      	bne.n	800f254 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d002      	beq.n	800f174 <HAL_UART_Transmit+0x2c>
 800f16e:	88fb      	ldrh	r3, [r7, #6]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d101      	bne.n	800f178 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	e06e      	b.n	800f256 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2200      	movs	r2, #0
 800f17c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2221      	movs	r2, #33	@ 0x21
 800f182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f186:	f7f9 fbb3 	bl	80088f0 <HAL_GetTick>
 800f18a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	88fa      	ldrh	r2, [r7, #6]
 800f190:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	88fa      	ldrh	r2, [r7, #6]
 800f196:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1a0:	d108      	bne.n	800f1b4 <HAL_UART_Transmit+0x6c>
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	691b      	ldr	r3, [r3, #16]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d104      	bne.n	800f1b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f1ae:	68bb      	ldr	r3, [r7, #8]
 800f1b0:	61bb      	str	r3, [r7, #24]
 800f1b2:	e003      	b.n	800f1bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f1bc:	e02e      	b.n	800f21c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	9300      	str	r3, [sp, #0]
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	2180      	movs	r1, #128	@ 0x80
 800f1c8:	68f8      	ldr	r0, [r7, #12]
 800f1ca:	f000 fda4 	bl	800fd16 <UART_WaitOnFlagUntilTimeout>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d005      	beq.n	800f1e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2220      	movs	r2, #32
 800f1d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e03a      	b.n	800f256 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d10b      	bne.n	800f1fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f1e6:	69bb      	ldr	r3, [r7, #24]
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f1f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800f1f6:	69bb      	ldr	r3, [r7, #24]
 800f1f8:	3302      	adds	r3, #2
 800f1fa:	61bb      	str	r3, [r7, #24]
 800f1fc:	e007      	b.n	800f20e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	781a      	ldrb	r2, [r3, #0]
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800f208:	69fb      	ldr	r3, [r7, #28]
 800f20a:	3301      	adds	r3, #1
 800f20c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f212:	b29b      	uxth	r3, r3
 800f214:	3b01      	subs	r3, #1
 800f216:	b29a      	uxth	r2, r3
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f220:	b29b      	uxth	r3, r3
 800f222:	2b00      	cmp	r3, #0
 800f224:	d1cb      	bne.n	800f1be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	9300      	str	r3, [sp, #0]
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	2200      	movs	r2, #0
 800f22e:	2140      	movs	r1, #64	@ 0x40
 800f230:	68f8      	ldr	r0, [r7, #12]
 800f232:	f000 fd70 	bl	800fd16 <UART_WaitOnFlagUntilTimeout>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d005      	beq.n	800f248 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2220      	movs	r2, #32
 800f240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800f244:	2303      	movs	r3, #3
 800f246:	e006      	b.n	800f256 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	2220      	movs	r2, #32
 800f24c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800f250:	2300      	movs	r3, #0
 800f252:	e000      	b.n	800f256 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800f254:	2302      	movs	r3, #2
  }
}
 800f256:	4618      	mov	r0, r3
 800f258:	3720      	adds	r7, #32
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}

0800f25e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f25e:	b580      	push	{r7, lr}
 800f260:	b08a      	sub	sp, #40	@ 0x28
 800f262:	af02      	add	r7, sp, #8
 800f264:	60f8      	str	r0, [r7, #12]
 800f266:	60b9      	str	r1, [r7, #8]
 800f268:	603b      	str	r3, [r7, #0]
 800f26a:	4613      	mov	r3, r2
 800f26c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800f26e:	2300      	movs	r3, #0
 800f270:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	2b20      	cmp	r3, #32
 800f27c:	f040 8081 	bne.w	800f382 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <HAL_UART_Receive+0x2e>
 800f286:	88fb      	ldrh	r3, [r7, #6]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d101      	bne.n	800f290 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	e079      	b.n	800f384 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	2200      	movs	r2, #0
 800f294:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	2222      	movs	r2, #34	@ 0x22
 800f29a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f2a4:	f7f9 fb24 	bl	80088f0 <HAL_GetTick>
 800f2a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	88fa      	ldrh	r2, [r7, #6]
 800f2ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	88fa      	ldrh	r2, [r7, #6]
 800f2b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2be:	d108      	bne.n	800f2d2 <HAL_UART_Receive+0x74>
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	691b      	ldr	r3, [r3, #16]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d104      	bne.n	800f2d2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800f2c8:	2300      	movs	r3, #0
 800f2ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	61bb      	str	r3, [r7, #24]
 800f2d0:	e003      	b.n	800f2da <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800f2da:	e047      	b.n	800f36c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	2120      	movs	r1, #32
 800f2e6:	68f8      	ldr	r0, [r7, #12]
 800f2e8:	f000 fd15 	bl	800fd16 <UART_WaitOnFlagUntilTimeout>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d005      	beq.n	800f2fe <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2220      	movs	r2, #32
 800f2f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800f2fa:	2303      	movs	r3, #3
 800f2fc:	e042      	b.n	800f384 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800f2fe:	69fb      	ldr	r3, [r7, #28]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d10c      	bne.n	800f31e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f310:	b29a      	uxth	r2, r3
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f316:	69bb      	ldr	r3, [r7, #24]
 800f318:	3302      	adds	r3, #2
 800f31a:	61bb      	str	r3, [r7, #24]
 800f31c:	e01f      	b.n	800f35e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	689b      	ldr	r3, [r3, #8]
 800f322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f326:	d007      	beq.n	800f338 <HAL_UART_Receive+0xda>
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	689b      	ldr	r3, [r3, #8]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d10a      	bne.n	800f346 <HAL_UART_Receive+0xe8>
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d106      	bne.n	800f346 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	b2da      	uxtb	r2, r3
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	701a      	strb	r2, [r3, #0]
 800f344:	e008      	b.n	800f358 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	b2db      	uxtb	r3, r3
 800f34e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f352:	b2da      	uxtb	r2, r3
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	3301      	adds	r3, #1
 800f35c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f362:	b29b      	uxth	r3, r3
 800f364:	3b01      	subs	r3, #1
 800f366:	b29a      	uxth	r2, r3
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f370:	b29b      	uxth	r3, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1b2      	bne.n	800f2dc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2220      	movs	r2, #32
 800f37a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800f37e:	2300      	movs	r3, #0
 800f380:	e000      	b.n	800f384 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800f382:	2302      	movs	r3, #2
  }
}
 800f384:	4618      	mov	r0, r3
 800f386:	3720      	adds	r7, #32
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b08c      	sub	sp, #48	@ 0x30
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	60b9      	str	r1, [r7, #8]
 800f396:	4613      	mov	r3, r2
 800f398:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f3a0:	b2db      	uxtb	r3, r3
 800f3a2:	2b20      	cmp	r3, #32
 800f3a4:	d162      	bne.n	800f46c <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d002      	beq.n	800f3b2 <HAL_UART_Transmit_DMA+0x26>
 800f3ac:	88fb      	ldrh	r3, [r7, #6]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d101      	bne.n	800f3b6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	e05b      	b.n	800f46e <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800f3b6:	68ba      	ldr	r2, [r7, #8]
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	88fa      	ldrh	r2, [r7, #6]
 800f3c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	88fa      	ldrh	r2, [r7, #6]
 800f3c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2221      	movs	r2, #33	@ 0x21
 800f3d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3da:	4a27      	ldr	r2, [pc, #156]	@ (800f478 <HAL_UART_Transmit_DMA+0xec>)
 800f3dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3e2:	4a26      	ldr	r2, [pc, #152]	@ (800f47c <HAL_UART_Transmit_DMA+0xf0>)
 800f3e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3ea:	4a25      	ldr	r2, [pc, #148]	@ (800f480 <HAL_UART_Transmit_DMA+0xf4>)
 800f3ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800f3f6:	f107 0308 	add.w	r3, r7, #8
 800f3fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f402:	6819      	ldr	r1, [r3, #0]
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	3304      	adds	r3, #4
 800f40a:	461a      	mov	r2, r3
 800f40c:	88fb      	ldrh	r3, [r7, #6]
 800f40e:	f7fa f8ff 	bl	8009610 <HAL_DMA_Start_IT>
 800f412:	4603      	mov	r3, r0
 800f414:	2b00      	cmp	r3, #0
 800f416:	d008      	beq.n	800f42a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2210      	movs	r2, #16
 800f41c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2220      	movs	r2, #32
 800f422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800f426:	2301      	movs	r3, #1
 800f428:	e021      	b.n	800f46e <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f432:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	3314      	adds	r3, #20
 800f43a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f43c:	69bb      	ldr	r3, [r7, #24]
 800f43e:	e853 3f00 	ldrex	r3, [r3]
 800f442:	617b      	str	r3, [r7, #20]
   return(result);
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f44a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	3314      	adds	r3, #20
 800f452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f454:	627a      	str	r2, [r7, #36]	@ 0x24
 800f456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f458:	6a39      	ldr	r1, [r7, #32]
 800f45a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f45c:	e841 2300 	strex	r3, r2, [r1]
 800f460:	61fb      	str	r3, [r7, #28]
   return(result);
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d1e5      	bne.n	800f434 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800f468:	2300      	movs	r3, #0
 800f46a:	e000      	b.n	800f46e <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800f46c:	2302      	movs	r3, #2
  }
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3730      	adds	r7, #48	@ 0x30
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
 800f476:	bf00      	nop
 800f478:	0800fa65 	.word	0x0800fa65
 800f47c:	0800faff 	.word	0x0800faff
 800f480:	0800fc83 	.word	0x0800fc83

0800f484 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f498:	b2db      	uxtb	r3, r3
 800f49a:	2b20      	cmp	r3, #32
 800f49c:	d112      	bne.n	800f4c4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d002      	beq.n	800f4aa <HAL_UART_Receive_DMA+0x26>
 800f4a4:	88fb      	ldrh	r3, [r7, #6]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d101      	bne.n	800f4ae <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e00b      	b.n	800f4c6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f4b4:	88fb      	ldrh	r3, [r7, #6]
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	68b9      	ldr	r1, [r7, #8]
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f000 fc84 	bl	800fdc8 <UART_Start_Receive_DMA>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	e000      	b.n	800f4c6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800f4c4:	2302      	movs	r3, #2
  }
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3710      	adds	r7, #16
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
	...

0800f4d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b0ba      	sub	sp, #232	@ 0xe8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	68db      	ldr	r3, [r3, #12]
 800f4e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	695b      	ldr	r3, [r3, #20]
 800f4f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f506:	f003 030f 	and.w	r3, r3, #15
 800f50a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f50e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f512:	2b00      	cmp	r3, #0
 800f514:	d10f      	bne.n	800f536 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f51a:	f003 0320 	and.w	r3, r3, #32
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d009      	beq.n	800f536 <HAL_UART_IRQHandler+0x66>
 800f522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f526:	f003 0320 	and.w	r3, r3, #32
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d003      	beq.n	800f536 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 fdf4 	bl	801011c <UART_Receive_IT>
      return;
 800f534:	e273      	b.n	800fa1e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f536:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	f000 80de 	beq.w	800f6fc <HAL_UART_IRQHandler+0x22c>
 800f540:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f544:	f003 0301 	and.w	r3, r3, #1
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d106      	bne.n	800f55a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f550:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f554:	2b00      	cmp	r3, #0
 800f556:	f000 80d1 	beq.w	800f6fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	2b00      	cmp	r3, #0
 800f564:	d00b      	beq.n	800f57e <HAL_UART_IRQHandler+0xae>
 800f566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f56a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d005      	beq.n	800f57e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f576:	f043 0201 	orr.w	r2, r3, #1
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f582:	f003 0304 	and.w	r3, r3, #4
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00b      	beq.n	800f5a2 <HAL_UART_IRQHandler+0xd2>
 800f58a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b00      	cmp	r3, #0
 800f594:	d005      	beq.n	800f5a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f59a:	f043 0202 	orr.w	r2, r3, #2
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5a6:	f003 0302 	and.w	r3, r3, #2
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00b      	beq.n	800f5c6 <HAL_UART_IRQHandler+0xf6>
 800f5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f5b2:	f003 0301 	and.w	r3, r3, #1
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d005      	beq.n	800f5c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5be:	f043 0204 	orr.w	r2, r3, #4
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f5ca:	f003 0308 	and.w	r3, r3, #8
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d011      	beq.n	800f5f6 <HAL_UART_IRQHandler+0x126>
 800f5d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f5d6:	f003 0320 	and.w	r3, r3, #32
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d105      	bne.n	800f5ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f5de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f5e2:	f003 0301 	and.w	r3, r3, #1
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d005      	beq.n	800f5f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5ee:	f043 0208 	orr.w	r2, r3, #8
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	f000 820a 	beq.w	800fa14 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f600:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f604:	f003 0320 	and.w	r3, r3, #32
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d008      	beq.n	800f61e <HAL_UART_IRQHandler+0x14e>
 800f60c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f610:	f003 0320 	and.w	r3, r3, #32
 800f614:	2b00      	cmp	r3, #0
 800f616:	d002      	beq.n	800f61e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f000 fd7f 	bl	801011c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	695b      	ldr	r3, [r3, #20]
 800f624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f628:	2b40      	cmp	r3, #64	@ 0x40
 800f62a:	bf0c      	ite	eq
 800f62c:	2301      	moveq	r3, #1
 800f62e:	2300      	movne	r3, #0
 800f630:	b2db      	uxtb	r3, r3
 800f632:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f63a:	f003 0308 	and.w	r3, r3, #8
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d103      	bne.n	800f64a <HAL_UART_IRQHandler+0x17a>
 800f642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f646:	2b00      	cmp	r3, #0
 800f648:	d04f      	beq.n	800f6ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 fc8a 	bl	800ff64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	695b      	ldr	r3, [r3, #20]
 800f656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f65a:	2b40      	cmp	r3, #64	@ 0x40
 800f65c:	d141      	bne.n	800f6e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	3314      	adds	r3, #20
 800f664:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f668:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f66c:	e853 3f00 	ldrex	r3, [r3]
 800f670:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f674:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f678:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f67c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	3314      	adds	r3, #20
 800f686:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f68a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f68e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f692:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f696:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f69a:	e841 2300 	strex	r3, r2, [r1]
 800f69e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f6a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d1d9      	bne.n	800f65e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d013      	beq.n	800f6da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6b6:	4a8a      	ldr	r2, [pc, #552]	@ (800f8e0 <HAL_UART_IRQHandler+0x410>)
 800f6b8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7fa f86e 	bl	80097a0 <HAL_DMA_Abort_IT>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d016      	beq.n	800f6f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f6ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f6d4:	4610      	mov	r0, r2
 800f6d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6d8:	e00e      	b.n	800f6f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 f9ac 	bl	800fa38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6e0:	e00a      	b.n	800f6f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 f9a8 	bl	800fa38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6e8:	e006      	b.n	800f6f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f6ea:	6878      	ldr	r0, [r7, #4]
 800f6ec:	f000 f9a4 	bl	800fa38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800f6f6:	e18d      	b.n	800fa14 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f6f8:	bf00      	nop
    return;
 800f6fa:	e18b      	b.n	800fa14 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f700:	2b01      	cmp	r3, #1
 800f702:	f040 8167 	bne.w	800f9d4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f70a:	f003 0310 	and.w	r3, r3, #16
 800f70e:	2b00      	cmp	r3, #0
 800f710:	f000 8160 	beq.w	800f9d4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800f714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f718:	f003 0310 	and.w	r3, r3, #16
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f000 8159 	beq.w	800f9d4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f722:	2300      	movs	r3, #0
 800f724:	60bb      	str	r3, [r7, #8]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	60bb      	str	r3, [r7, #8]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	685b      	ldr	r3, [r3, #4]
 800f734:	60bb      	str	r3, [r7, #8]
 800f736:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	695b      	ldr	r3, [r3, #20]
 800f73e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f742:	2b40      	cmp	r3, #64	@ 0x40
 800f744:	f040 80ce 	bne.w	800f8e4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f754:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f000 80a9 	beq.w	800f8b0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f762:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f766:	429a      	cmp	r2, r3
 800f768:	f080 80a2 	bcs.w	800f8b0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f772:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f778:	69db      	ldr	r3, [r3, #28]
 800f77a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f77e:	f000 8088 	beq.w	800f892 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	330c      	adds	r3, #12
 800f788:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f78c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f790:	e853 3f00 	ldrex	r3, [r3]
 800f794:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f798:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f79c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f7a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	330c      	adds	r3, #12
 800f7aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f7ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f7b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f7ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f7be:	e841 2300 	strex	r3, r2, [r1]
 800f7c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f7c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1d9      	bne.n	800f782 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	3314      	adds	r3, #20
 800f7d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f7d8:	e853 3f00 	ldrex	r3, [r3]
 800f7dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f7de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f7e0:	f023 0301 	bic.w	r3, r3, #1
 800f7e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	3314      	adds	r3, #20
 800f7ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f7f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f7f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f7fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f7fe:	e841 2300 	strex	r3, r2, [r1]
 800f802:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f804:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1e1      	bne.n	800f7ce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	3314      	adds	r3, #20
 800f810:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f812:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f814:	e853 3f00 	ldrex	r3, [r3]
 800f818:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f81a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f81c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	3314      	adds	r3, #20
 800f82a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f82e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f830:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f832:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f834:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f836:	e841 2300 	strex	r3, r2, [r1]
 800f83a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f83c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d1e3      	bne.n	800f80a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2220      	movs	r2, #32
 800f846:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2200      	movs	r2, #0
 800f84e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	330c      	adds	r3, #12
 800f856:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f858:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f85a:	e853 3f00 	ldrex	r3, [r3]
 800f85e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f862:	f023 0310 	bic.w	r3, r3, #16
 800f866:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	330c      	adds	r3, #12
 800f870:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800f874:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f876:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f878:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f87a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f87c:	e841 2300 	strex	r3, r2, [r1]
 800f880:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1e3      	bne.n	800f850 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7f9 ff17 	bl	80096c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2202      	movs	r2, #2
 800f896:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	1ad3      	subs	r3, r2, r3
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 f8cf 	bl	800fa4c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800f8ae:	e0b3      	b.n	800fa18 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f8b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	f040 80ad 	bne.w	800fa18 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8c2:	69db      	ldr	r3, [r3, #28]
 800f8c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f8c8:	f040 80a6 	bne.w	800fa18 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2202      	movs	r2, #2
 800f8d0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f8d6:	4619      	mov	r1, r3
 800f8d8:	6878      	ldr	r0, [r7, #4]
 800f8da:	f000 f8b7 	bl	800fa4c <HAL_UARTEx_RxEventCallback>
      return;
 800f8de:	e09b      	b.n	800fa18 <HAL_UART_IRQHandler+0x548>
 800f8e0:	0801002b 	.word	0x0801002b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f8ec:	b29b      	uxth	r3, r3
 800f8ee:	1ad3      	subs	r3, r2, r3
 800f8f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	f000 808e 	beq.w	800fa1c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800f900:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f904:	2b00      	cmp	r3, #0
 800f906:	f000 8089 	beq.w	800fa1c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	330c      	adds	r3, #12
 800f910:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f914:	e853 3f00 	ldrex	r3, [r3]
 800f918:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f91a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f91c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f920:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	330c      	adds	r3, #12
 800f92a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f92e:	647a      	str	r2, [r7, #68]	@ 0x44
 800f930:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f932:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f934:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f936:	e841 2300 	strex	r3, r2, [r1]
 800f93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f93c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1e3      	bne.n	800f90a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	3314      	adds	r3, #20
 800f948:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f94c:	e853 3f00 	ldrex	r3, [r3]
 800f950:	623b      	str	r3, [r7, #32]
   return(result);
 800f952:	6a3b      	ldr	r3, [r7, #32]
 800f954:	f023 0301 	bic.w	r3, r3, #1
 800f958:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	3314      	adds	r3, #20
 800f962:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f966:	633a      	str	r2, [r7, #48]	@ 0x30
 800f968:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f96c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f96e:	e841 2300 	strex	r3, r2, [r1]
 800f972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f976:	2b00      	cmp	r3, #0
 800f978:	d1e3      	bne.n	800f942 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2220      	movs	r2, #32
 800f97e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	2200      	movs	r2, #0
 800f986:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	330c      	adds	r3, #12
 800f98e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	e853 3f00 	ldrex	r3, [r3]
 800f996:	60fb      	str	r3, [r7, #12]
   return(result);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f023 0310 	bic.w	r3, r3, #16
 800f99e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	330c      	adds	r3, #12
 800f9a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800f9ac:	61fa      	str	r2, [r7, #28]
 800f9ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b0:	69b9      	ldr	r1, [r7, #24]
 800f9b2:	69fa      	ldr	r2, [r7, #28]
 800f9b4:	e841 2300 	strex	r3, r2, [r1]
 800f9b8:	617b      	str	r3, [r7, #20]
   return(result);
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d1e3      	bne.n	800f988 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2202      	movs	r2, #2
 800f9c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f9c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f000 f83d 	bl	800fa4c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f9d2:	e023      	b.n	800fa1c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f9d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d009      	beq.n	800f9f4 <HAL_UART_IRQHandler+0x524>
 800f9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f9e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d003      	beq.n	800f9f4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f000 fb2d 	bl	801004c <UART_Transmit_IT>
    return;
 800f9f2:	e014      	b.n	800fa1e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f9f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00e      	beq.n	800fa1e <HAL_UART_IRQHandler+0x54e>
 800fa00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d008      	beq.n	800fa1e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f000 fb6d 	bl	80100ec <UART_EndTransmit_IT>
    return;
 800fa12:	e004      	b.n	800fa1e <HAL_UART_IRQHandler+0x54e>
    return;
 800fa14:	bf00      	nop
 800fa16:	e002      	b.n	800fa1e <HAL_UART_IRQHandler+0x54e>
      return;
 800fa18:	bf00      	nop
 800fa1a:	e000      	b.n	800fa1e <HAL_UART_IRQHandler+0x54e>
      return;
 800fa1c:	bf00      	nop
  }
}
 800fa1e:	37e8      	adds	r7, #232	@ 0xe8
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800fa2c:	bf00      	nop
 800fa2e:	370c      	adds	r7, #12
 800fa30:	46bd      	mov	sp, r7
 800fa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa36:	4770      	bx	lr

0800fa38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fa38:	b480      	push	{r7}
 800fa3a:	b083      	sub	sp, #12
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800fa40:	bf00      	nop
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr

0800fa4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	460b      	mov	r3, r1
 800fa56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fa58:	bf00      	nop
 800fa5a:	370c      	adds	r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa62:	4770      	bx	lr

0800fa64 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b090      	sub	sp, #64	@ 0x40
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fa70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d137      	bne.n	800faf0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800fa80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa82:	2200      	movs	r2, #0
 800fa84:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fa86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	3314      	adds	r3, #20
 800fa8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa90:	e853 3f00 	ldrex	r3, [r3]
 800fa94:	623b      	str	r3, [r7, #32]
   return(result);
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fa9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fa9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	3314      	adds	r3, #20
 800faa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800faa6:	633a      	str	r2, [r7, #48]	@ 0x30
 800faa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800faac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800faae:	e841 2300 	strex	r3, r2, [r1]
 800fab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d1e5      	bne.n	800fa86 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800faba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	330c      	adds	r3, #12
 800fac0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fac2:	693b      	ldr	r3, [r7, #16]
 800fac4:	e853 3f00 	ldrex	r3, [r3]
 800fac8:	60fb      	str	r3, [r7, #12]
   return(result);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fad0:	637b      	str	r3, [r7, #52]	@ 0x34
 800fad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	330c      	adds	r3, #12
 800fad8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fada:	61fa      	str	r2, [r7, #28]
 800fadc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fade:	69b9      	ldr	r1, [r7, #24]
 800fae0:	69fa      	ldr	r2, [r7, #28]
 800fae2:	e841 2300 	strex	r3, r2, [r1]
 800fae6:	617b      	str	r3, [r7, #20]
   return(result);
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d1e5      	bne.n	800faba <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800faee:	e002      	b.n	800faf6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800faf0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800faf2:	f7f6 f8bf 	bl	8005c74 <HAL_UART_TxCpltCallback>
}
 800faf6:	bf00      	nop
 800faf8:	3740      	adds	r7, #64	@ 0x40
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}

0800fafe <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fafe:	b580      	push	{r7, lr}
 800fb00:	b084      	sub	sp, #16
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb0a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f7ff ff89 	bl	800fa24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb12:	bf00      	nop
 800fb14:	3710      	adds	r7, #16
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b09c      	sub	sp, #112	@ 0x70
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fb26:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d172      	bne.n	800fc1c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800fb36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb38:	2200      	movs	r2, #0
 800fb3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	330c      	adds	r3, #12
 800fb42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb46:	e853 3f00 	ldrex	r3, [r3]
 800fb4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fb4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fb4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fb52:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fb54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	330c      	adds	r3, #12
 800fb5a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fb5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fb5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fb62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fb64:	e841 2300 	strex	r3, r2, [r1]
 800fb68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fb6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d1e5      	bne.n	800fb3c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	3314      	adds	r3, #20
 800fb76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb7a:	e853 3f00 	ldrex	r3, [r3]
 800fb7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fb80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb82:	f023 0301 	bic.w	r3, r3, #1
 800fb86:	667b      	str	r3, [r7, #100]	@ 0x64
 800fb88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	3314      	adds	r3, #20
 800fb8e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fb90:	647a      	str	r2, [r7, #68]	@ 0x44
 800fb92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fb96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fb98:	e841 2300 	strex	r3, r2, [r1]
 800fb9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d1e5      	bne.n	800fb70 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	3314      	adds	r3, #20
 800fbaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbae:	e853 3f00 	ldrex	r3, [r3]
 800fbb2:	623b      	str	r3, [r7, #32]
   return(result);
 800fbb4:	6a3b      	ldr	r3, [r7, #32]
 800fbb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fbba:	663b      	str	r3, [r7, #96]	@ 0x60
 800fbbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	3314      	adds	r3, #20
 800fbc2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fbc4:	633a      	str	r2, [r7, #48]	@ 0x30
 800fbc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fbca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fbcc:	e841 2300 	strex	r3, r2, [r1]
 800fbd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fbd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d1e5      	bne.n	800fba4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fbd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbda:	2220      	movs	r2, #32
 800fbdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d119      	bne.n	800fc1c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fbe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	330c      	adds	r3, #12
 800fbee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf0:	693b      	ldr	r3, [r7, #16]
 800fbf2:	e853 3f00 	ldrex	r3, [r3]
 800fbf6:	60fb      	str	r3, [r7, #12]
   return(result);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f023 0310 	bic.w	r3, r3, #16
 800fbfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fc00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	330c      	adds	r3, #12
 800fc06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fc08:	61fa      	str	r2, [r7, #28]
 800fc0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc0c:	69b9      	ldr	r1, [r7, #24]
 800fc0e:	69fa      	ldr	r2, [r7, #28]
 800fc10:	e841 2300 	strex	r3, r2, [r1]
 800fc14:	617b      	str	r3, [r7, #20]
   return(result);
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d1e5      	bne.n	800fbe8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fc1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc1e:	2200      	movs	r2, #0
 800fc20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc26:	2b01      	cmp	r3, #1
 800fc28:	d106      	bne.n	800fc38 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fc2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fc2e:	4619      	mov	r1, r3
 800fc30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fc32:	f7ff ff0b 	bl	800fa4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc36:	e002      	b.n	800fc3e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800fc38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fc3a:	f7f4 fef9 	bl	8004a30 <HAL_UART_RxCpltCallback>
}
 800fc3e:	bf00      	nop
 800fc40:	3770      	adds	r7, #112	@ 0x70
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}

0800fc46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fc46:	b580      	push	{r7, lr}
 800fc48:	b084      	sub	sp, #16
 800fc4a:	af00      	add	r7, sp, #0
 800fc4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2201      	movs	r2, #1
 800fc58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d108      	bne.n	800fc74 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fc66:	085b      	lsrs	r3, r3, #1
 800fc68:	b29b      	uxth	r3, r3
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f7ff feed 	bl	800fa4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc72:	e002      	b.n	800fc7a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f7f4 fec5 	bl	8004a04 <HAL_UART_RxHalfCpltCallback>
}
 800fc7a:	bf00      	nop
 800fc7c:	3710      	adds	r7, #16
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	bd80      	pop	{r7, pc}

0800fc82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fc82:	b580      	push	{r7, lr}
 800fc84:	b084      	sub	sp, #16
 800fc86:	af00      	add	r7, sp, #0
 800fc88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	695b      	ldr	r3, [r3, #20]
 800fc9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fc9e:	2b80      	cmp	r3, #128	@ 0x80
 800fca0:	bf0c      	ite	eq
 800fca2:	2301      	moveq	r3, #1
 800fca4:	2300      	movne	r3, #0
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	2b21      	cmp	r3, #33	@ 0x21
 800fcb4:	d108      	bne.n	800fcc8 <UART_DMAError+0x46>
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d005      	beq.n	800fcc8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800fcc2:	68b8      	ldr	r0, [r7, #8]
 800fcc4:	f000 f926 	bl	800ff14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	695b      	ldr	r3, [r3, #20]
 800fcce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fcd2:	2b40      	cmp	r3, #64	@ 0x40
 800fcd4:	bf0c      	ite	eq
 800fcd6:	2301      	moveq	r3, #1
 800fcd8:	2300      	movne	r3, #0
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2b22      	cmp	r3, #34	@ 0x22
 800fce8:	d108      	bne.n	800fcfc <UART_DMAError+0x7a>
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d005      	beq.n	800fcfc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fcf0:	68bb      	ldr	r3, [r7, #8]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800fcf6:	68b8      	ldr	r0, [r7, #8]
 800fcf8:	f000 f934 	bl	800ff64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd00:	f043 0210 	orr.w	r2, r3, #16
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fd08:	68b8      	ldr	r0, [r7, #8]
 800fd0a:	f7ff fe95 	bl	800fa38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fd0e:	bf00      	nop
 800fd10:	3710      	adds	r7, #16
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}

0800fd16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800fd16:	b580      	push	{r7, lr}
 800fd18:	b086      	sub	sp, #24
 800fd1a:	af00      	add	r7, sp, #0
 800fd1c:	60f8      	str	r0, [r7, #12]
 800fd1e:	60b9      	str	r1, [r7, #8]
 800fd20:	603b      	str	r3, [r7, #0]
 800fd22:	4613      	mov	r3, r2
 800fd24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fd26:	e03b      	b.n	800fda0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fd28:	6a3b      	ldr	r3, [r7, #32]
 800fd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd2e:	d037      	beq.n	800fda0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fd30:	f7f8 fdde 	bl	80088f0 <HAL_GetTick>
 800fd34:	4602      	mov	r2, r0
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	6a3a      	ldr	r2, [r7, #32]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d302      	bcc.n	800fd46 <UART_WaitOnFlagUntilTimeout+0x30>
 800fd40:	6a3b      	ldr	r3, [r7, #32]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d101      	bne.n	800fd4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800fd46:	2303      	movs	r3, #3
 800fd48:	e03a      	b.n	800fdc0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	f003 0304 	and.w	r3, r3, #4
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d023      	beq.n	800fda0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	2b80      	cmp	r3, #128	@ 0x80
 800fd5c:	d020      	beq.n	800fda0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	2b40      	cmp	r3, #64	@ 0x40
 800fd62:	d01d      	beq.n	800fda0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f003 0308 	and.w	r3, r3, #8
 800fd6e:	2b08      	cmp	r3, #8
 800fd70:	d116      	bne.n	800fda0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800fd72:	2300      	movs	r3, #0
 800fd74:	617b      	str	r3, [r7, #20]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	617b      	str	r3, [r7, #20]
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	617b      	str	r3, [r7, #20]
 800fd86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f000 f8eb 	bl	800ff64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2208      	movs	r2, #8
 800fd92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2200      	movs	r2, #0
 800fd98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	e00f      	b.n	800fdc0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	4013      	ands	r3, r2
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	bf0c      	ite	eq
 800fdb0:	2301      	moveq	r3, #1
 800fdb2:	2300      	movne	r3, #0
 800fdb4:	b2db      	uxtb	r3, r3
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	79fb      	ldrb	r3, [r7, #7]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d0b4      	beq.n	800fd28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fdbe:	2300      	movs	r3, #0
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3718      	adds	r7, #24
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b098      	sub	sp, #96	@ 0x60
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	60f8      	str	r0, [r7, #12]
 800fdd0:	60b9      	str	r1, [r7, #8]
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fdd6:	68ba      	ldr	r2, [r7, #8]
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	88fa      	ldrh	r2, [r7, #6]
 800fde0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	2200      	movs	r2, #0
 800fde6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2222      	movs	r2, #34	@ 0x22
 800fdec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdf4:	4a44      	ldr	r2, [pc, #272]	@ (800ff08 <UART_Start_Receive_DMA+0x140>)
 800fdf6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdfc:	4a43      	ldr	r2, [pc, #268]	@ (800ff0c <UART_Start_Receive_DMA+0x144>)
 800fdfe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe04:	4a42      	ldr	r2, [pc, #264]	@ (800ff10 <UART_Start_Receive_DMA+0x148>)
 800fe06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fe10:	f107 0308 	add.w	r3, r7, #8
 800fe14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	3304      	adds	r3, #4
 800fe20:	4619      	mov	r1, r3
 800fe22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fe24:	681a      	ldr	r2, [r3, #0]
 800fe26:	88fb      	ldrh	r3, [r7, #6]
 800fe28:	f7f9 fbf2 	bl	8009610 <HAL_DMA_Start_IT>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d008      	beq.n	800fe44 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	2210      	movs	r2, #16
 800fe36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	2220      	movs	r2, #32
 800fe3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800fe40:	2301      	movs	r3, #1
 800fe42:	e05d      	b.n	800ff00 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fe44:	2300      	movs	r3, #0
 800fe46:	613b      	str	r3, [r7, #16]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	613b      	str	r3, [r7, #16]
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	613b      	str	r3, [r7, #16]
 800fe58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d019      	beq.n	800fe96 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	330c      	adds	r3, #12
 800fe68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fe6c:	e853 3f00 	ldrex	r3, [r3]
 800fe70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fe72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fe74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fe78:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	330c      	adds	r3, #12
 800fe80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800fe84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fe88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fe8a:	e841 2300 	strex	r3, r2, [r1]
 800fe8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fe90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d1e5      	bne.n	800fe62 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	3314      	adds	r3, #20
 800fe9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fea0:	e853 3f00 	ldrex	r3, [r3]
 800fea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fea8:	f043 0301 	orr.w	r3, r3, #1
 800feac:	657b      	str	r3, [r7, #84]	@ 0x54
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	3314      	adds	r3, #20
 800feb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800feb6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800feb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800febc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800febe:	e841 2300 	strex	r3, r2, [r1]
 800fec2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d1e5      	bne.n	800fe96 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	3314      	adds	r3, #20
 800fed0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	e853 3f00 	ldrex	r3, [r3]
 800fed8:	617b      	str	r3, [r7, #20]
   return(result);
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fee0:	653b      	str	r3, [r7, #80]	@ 0x50
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	3314      	adds	r3, #20
 800fee8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800feea:	627a      	str	r2, [r7, #36]	@ 0x24
 800feec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feee:	6a39      	ldr	r1, [r7, #32]
 800fef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fef2:	e841 2300 	strex	r3, r2, [r1]
 800fef6:	61fb      	str	r3, [r7, #28]
   return(result);
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d1e5      	bne.n	800feca <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800fefe:	2300      	movs	r3, #0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3760      	adds	r7, #96	@ 0x60
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	0800fb1b 	.word	0x0800fb1b
 800ff0c:	0800fc47 	.word	0x0800fc47
 800ff10:	0800fc83 	.word	0x0800fc83

0800ff14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b089      	sub	sp, #36	@ 0x24
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	330c      	adds	r3, #12
 800ff22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	e853 3f00 	ldrex	r3, [r3]
 800ff2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ff32:	61fb      	str	r3, [r7, #28]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	330c      	adds	r3, #12
 800ff3a:	69fa      	ldr	r2, [r7, #28]
 800ff3c:	61ba      	str	r2, [r7, #24]
 800ff3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff40:	6979      	ldr	r1, [r7, #20]
 800ff42:	69ba      	ldr	r2, [r7, #24]
 800ff44:	e841 2300 	strex	r3, r2, [r1]
 800ff48:	613b      	str	r3, [r7, #16]
   return(result);
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1e5      	bne.n	800ff1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2220      	movs	r2, #32
 800ff54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800ff58:	bf00      	nop
 800ff5a:	3724      	adds	r7, #36	@ 0x24
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff62:	4770      	bx	lr

0800ff64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b095      	sub	sp, #84	@ 0x54
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	330c      	adds	r3, #12
 800ff72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ff76:	e853 3f00 	ldrex	r3, [r3]
 800ff7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ff7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ff82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	330c      	adds	r3, #12
 800ff8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ff8c:	643a      	str	r2, [r7, #64]	@ 0x40
 800ff8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ff92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ff94:	e841 2300 	strex	r3, r2, [r1]
 800ff98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ff9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d1e5      	bne.n	800ff6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	3314      	adds	r3, #20
 800ffa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffa8:	6a3b      	ldr	r3, [r7, #32]
 800ffaa:	e853 3f00 	ldrex	r3, [r3]
 800ffae:	61fb      	str	r3, [r7, #28]
   return(result);
 800ffb0:	69fb      	ldr	r3, [r7, #28]
 800ffb2:	f023 0301 	bic.w	r3, r3, #1
 800ffb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	3314      	adds	r3, #20
 800ffbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ffc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ffc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ffc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffc8:	e841 2300 	strex	r3, r2, [r1]
 800ffcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ffce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d1e5      	bne.n	800ffa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ffd8:	2b01      	cmp	r3, #1
 800ffda:	d119      	bne.n	8010010 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	330c      	adds	r3, #12
 800ffe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	e853 3f00 	ldrex	r3, [r3]
 800ffea:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	f023 0310 	bic.w	r3, r3, #16
 800fff2:	647b      	str	r3, [r7, #68]	@ 0x44
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	330c      	adds	r3, #12
 800fffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fffc:	61ba      	str	r2, [r7, #24]
 800fffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010000:	6979      	ldr	r1, [r7, #20]
 8010002:	69ba      	ldr	r2, [r7, #24]
 8010004:	e841 2300 	strex	r3, r2, [r1]
 8010008:	613b      	str	r3, [r7, #16]
   return(result);
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	2b00      	cmp	r3, #0
 801000e:	d1e5      	bne.n	800ffdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2220      	movs	r2, #32
 8010014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2200      	movs	r2, #0
 801001c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 801001e:	bf00      	nop
 8010020:	3754      	adds	r7, #84	@ 0x54
 8010022:	46bd      	mov	sp, r7
 8010024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010028:	4770      	bx	lr

0801002a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801002a:	b580      	push	{r7, lr}
 801002c:	b084      	sub	sp, #16
 801002e:	af00      	add	r7, sp, #0
 8010030:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010036:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2200      	movs	r2, #0
 801003c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801003e:	68f8      	ldr	r0, [r7, #12]
 8010040:	f7ff fcfa 	bl	800fa38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010044:	bf00      	nop
 8010046:	3710      	adds	r7, #16
 8010048:	46bd      	mov	sp, r7
 801004a:	bd80      	pop	{r7, pc}

0801004c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 801004c:	b480      	push	{r7}
 801004e:	b085      	sub	sp, #20
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801005a:	b2db      	uxtb	r3, r3
 801005c:	2b21      	cmp	r3, #33	@ 0x21
 801005e:	d13e      	bne.n	80100de <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	689b      	ldr	r3, [r3, #8]
 8010064:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010068:	d114      	bne.n	8010094 <UART_Transmit_IT+0x48>
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	691b      	ldr	r3, [r3, #16]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d110      	bne.n	8010094 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	881b      	ldrh	r3, [r3, #0]
 801007c:	461a      	mov	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010086:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	6a1b      	ldr	r3, [r3, #32]
 801008c:	1c9a      	adds	r2, r3, #2
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	621a      	str	r2, [r3, #32]
 8010092:	e008      	b.n	80100a6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	6a1b      	ldr	r3, [r3, #32]
 8010098:	1c59      	adds	r1, r3, #1
 801009a:	687a      	ldr	r2, [r7, #4]
 801009c:	6211      	str	r1, [r2, #32]
 801009e:	781a      	ldrb	r2, [r3, #0]
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	3b01      	subs	r3, #1
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	687a      	ldr	r2, [r7, #4]
 80100b2:	4619      	mov	r1, r3
 80100b4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d10f      	bne.n	80100da <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	68da      	ldr	r2, [r3, #12]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80100c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	68da      	ldr	r2, [r3, #12]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80100d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80100da:	2300      	movs	r3, #0
 80100dc:	e000      	b.n	80100e0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80100de:	2302      	movs	r3, #2
  }
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3714      	adds	r7, #20
 80100e4:	46bd      	mov	sp, r7
 80100e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ea:	4770      	bx	lr

080100ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	68da      	ldr	r2, [r3, #12]
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8010102:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2220      	movs	r2, #32
 8010108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f7f5 fdb1 	bl	8005c74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b08c      	sub	sp, #48	@ 0x30
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8010124:	2300      	movs	r3, #0
 8010126:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8010128:	2300      	movs	r3, #0
 801012a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010132:	b2db      	uxtb	r3, r3
 8010134:	2b22      	cmp	r3, #34	@ 0x22
 8010136:	f040 80aa 	bne.w	801028e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	689b      	ldr	r3, [r3, #8]
 801013e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010142:	d115      	bne.n	8010170 <UART_Receive_IT+0x54>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	691b      	ldr	r3, [r3, #16]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d111      	bne.n	8010170 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010150:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	b29b      	uxth	r3, r3
 801015a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801015e:	b29a      	uxth	r2, r3
 8010160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010162:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010168:	1c9a      	adds	r2, r3, #2
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	629a      	str	r2, [r3, #40]	@ 0x28
 801016e:	e024      	b.n	80101ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010174:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	689b      	ldr	r3, [r3, #8]
 801017a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801017e:	d007      	beq.n	8010190 <UART_Receive_IT+0x74>
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d10a      	bne.n	801019e <UART_Receive_IT+0x82>
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	691b      	ldr	r3, [r3, #16]
 801018c:	2b00      	cmp	r3, #0
 801018e:	d106      	bne.n	801019e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	b2da      	uxtb	r2, r3
 8010198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801019a:	701a      	strb	r2, [r3, #0]
 801019c:	e008      	b.n	80101b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80101aa:	b2da      	uxtb	r2, r3
 80101ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101b4:	1c5a      	adds	r2, r3, #1
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80101be:	b29b      	uxth	r3, r3
 80101c0:	3b01      	subs	r3, #1
 80101c2:	b29b      	uxth	r3, r3
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	4619      	mov	r1, r3
 80101c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d15d      	bne.n	801028a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	68da      	ldr	r2, [r3, #12]
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	f022 0220 	bic.w	r2, r2, #32
 80101dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68da      	ldr	r2, [r3, #12]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80101ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	695a      	ldr	r2, [r3, #20]
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	f022 0201 	bic.w	r2, r2, #1
 80101fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2220      	movs	r2, #32
 8010202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	2200      	movs	r2, #0
 801020a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010210:	2b01      	cmp	r3, #1
 8010212:	d135      	bne.n	8010280 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2200      	movs	r2, #0
 8010218:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	330c      	adds	r3, #12
 8010220:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010222:	697b      	ldr	r3, [r7, #20]
 8010224:	e853 3f00 	ldrex	r3, [r3]
 8010228:	613b      	str	r3, [r7, #16]
   return(result);
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	f023 0310 	bic.w	r3, r3, #16
 8010230:	627b      	str	r3, [r7, #36]	@ 0x24
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	330c      	adds	r3, #12
 8010238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801023a:	623a      	str	r2, [r7, #32]
 801023c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023e:	69f9      	ldr	r1, [r7, #28]
 8010240:	6a3a      	ldr	r2, [r7, #32]
 8010242:	e841 2300 	strex	r3, r2, [r1]
 8010246:	61bb      	str	r3, [r7, #24]
   return(result);
 8010248:	69bb      	ldr	r3, [r7, #24]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1e5      	bne.n	801021a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f003 0310 	and.w	r3, r3, #16
 8010258:	2b10      	cmp	r3, #16
 801025a:	d10a      	bne.n	8010272 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 801025c:	2300      	movs	r3, #0
 801025e:	60fb      	str	r3, [r7, #12]
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	60fb      	str	r3, [r7, #12]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	60fb      	str	r3, [r7, #12]
 8010270:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010276:	4619      	mov	r1, r3
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f7ff fbe7 	bl	800fa4c <HAL_UARTEx_RxEventCallback>
 801027e:	e002      	b.n	8010286 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f7f4 fbd5 	bl	8004a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010286:	2300      	movs	r3, #0
 8010288:	e002      	b.n	8010290 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 801028a:	2300      	movs	r3, #0
 801028c:	e000      	b.n	8010290 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 801028e:	2302      	movs	r3, #2
  }
}
 8010290:	4618      	mov	r0, r3
 8010292:	3730      	adds	r7, #48	@ 0x30
 8010294:	46bd      	mov	sp, r7
 8010296:	bd80      	pop	{r7, pc}

08010298 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010298:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801029c:	b0c0      	sub	sp, #256	@ 0x100
 801029e:	af00      	add	r7, sp, #0
 80102a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80102a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	691b      	ldr	r3, [r3, #16]
 80102ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80102b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102b4:	68d9      	ldr	r1, [r3, #12]
 80102b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	ea40 0301 	orr.w	r3, r0, r1
 80102c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80102c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102c6:	689a      	ldr	r2, [r3, #8]
 80102c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	431a      	orrs	r2, r3
 80102d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102d4:	695b      	ldr	r3, [r3, #20]
 80102d6:	431a      	orrs	r2, r3
 80102d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102dc:	69db      	ldr	r3, [r3, #28]
 80102de:	4313      	orrs	r3, r2
 80102e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80102e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	68db      	ldr	r3, [r3, #12]
 80102ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80102f0:	f021 010c 	bic.w	r1, r1, #12
 80102f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80102f8:	681a      	ldr	r2, [r3, #0]
 80102fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80102fe:	430b      	orrs	r3, r1
 8010300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	695b      	ldr	r3, [r3, #20]
 801030a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 801030e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010312:	6999      	ldr	r1, [r3, #24]
 8010314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010318:	681a      	ldr	r2, [r3, #0]
 801031a:	ea40 0301 	orr.w	r3, r0, r1
 801031e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	4b8f      	ldr	r3, [pc, #572]	@ (8010564 <UART_SetConfig+0x2cc>)
 8010328:	429a      	cmp	r2, r3
 801032a:	d005      	beq.n	8010338 <UART_SetConfig+0xa0>
 801032c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010330:	681a      	ldr	r2, [r3, #0]
 8010332:	4b8d      	ldr	r3, [pc, #564]	@ (8010568 <UART_SetConfig+0x2d0>)
 8010334:	429a      	cmp	r2, r3
 8010336:	d104      	bne.n	8010342 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010338:	f7fc ff60 	bl	800d1fc <HAL_RCC_GetPCLK2Freq>
 801033c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010340:	e003      	b.n	801034a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010342:	f7fc ff47 	bl	800d1d4 <HAL_RCC_GetPCLK1Freq>
 8010346:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801034a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801034e:	69db      	ldr	r3, [r3, #28]
 8010350:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010354:	f040 810c 	bne.w	8010570 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801035c:	2200      	movs	r2, #0
 801035e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010362:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010366:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801036a:	4622      	mov	r2, r4
 801036c:	462b      	mov	r3, r5
 801036e:	1891      	adds	r1, r2, r2
 8010370:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010372:	415b      	adcs	r3, r3
 8010374:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010376:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801037a:	4621      	mov	r1, r4
 801037c:	eb12 0801 	adds.w	r8, r2, r1
 8010380:	4629      	mov	r1, r5
 8010382:	eb43 0901 	adc.w	r9, r3, r1
 8010386:	f04f 0200 	mov.w	r2, #0
 801038a:	f04f 0300 	mov.w	r3, #0
 801038e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010392:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010396:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801039a:	4690      	mov	r8, r2
 801039c:	4699      	mov	r9, r3
 801039e:	4623      	mov	r3, r4
 80103a0:	eb18 0303 	adds.w	r3, r8, r3
 80103a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80103a8:	462b      	mov	r3, r5
 80103aa:	eb49 0303 	adc.w	r3, r9, r3
 80103ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80103b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103b6:	685b      	ldr	r3, [r3, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80103be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80103c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80103c6:	460b      	mov	r3, r1
 80103c8:	18db      	adds	r3, r3, r3
 80103ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80103cc:	4613      	mov	r3, r2
 80103ce:	eb42 0303 	adc.w	r3, r2, r3
 80103d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80103d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80103d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80103dc:	f7f0 fdd2 	bl	8000f84 <__aeabi_uldivmod>
 80103e0:	4602      	mov	r2, r0
 80103e2:	460b      	mov	r3, r1
 80103e4:	4b61      	ldr	r3, [pc, #388]	@ (801056c <UART_SetConfig+0x2d4>)
 80103e6:	fba3 2302 	umull	r2, r3, r3, r2
 80103ea:	095b      	lsrs	r3, r3, #5
 80103ec:	011c      	lsls	r4, r3, #4
 80103ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80103f2:	2200      	movs	r2, #0
 80103f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80103f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80103fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010400:	4642      	mov	r2, r8
 8010402:	464b      	mov	r3, r9
 8010404:	1891      	adds	r1, r2, r2
 8010406:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010408:	415b      	adcs	r3, r3
 801040a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801040c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010410:	4641      	mov	r1, r8
 8010412:	eb12 0a01 	adds.w	sl, r2, r1
 8010416:	4649      	mov	r1, r9
 8010418:	eb43 0b01 	adc.w	fp, r3, r1
 801041c:	f04f 0200 	mov.w	r2, #0
 8010420:	f04f 0300 	mov.w	r3, #0
 8010424:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010428:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801042c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010430:	4692      	mov	sl, r2
 8010432:	469b      	mov	fp, r3
 8010434:	4643      	mov	r3, r8
 8010436:	eb1a 0303 	adds.w	r3, sl, r3
 801043a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801043e:	464b      	mov	r3, r9
 8010440:	eb4b 0303 	adc.w	r3, fp, r3
 8010444:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	2200      	movs	r2, #0
 8010450:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010454:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010458:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801045c:	460b      	mov	r3, r1
 801045e:	18db      	adds	r3, r3, r3
 8010460:	643b      	str	r3, [r7, #64]	@ 0x40
 8010462:	4613      	mov	r3, r2
 8010464:	eb42 0303 	adc.w	r3, r2, r3
 8010468:	647b      	str	r3, [r7, #68]	@ 0x44
 801046a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 801046e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010472:	f7f0 fd87 	bl	8000f84 <__aeabi_uldivmod>
 8010476:	4602      	mov	r2, r0
 8010478:	460b      	mov	r3, r1
 801047a:	4611      	mov	r1, r2
 801047c:	4b3b      	ldr	r3, [pc, #236]	@ (801056c <UART_SetConfig+0x2d4>)
 801047e:	fba3 2301 	umull	r2, r3, r3, r1
 8010482:	095b      	lsrs	r3, r3, #5
 8010484:	2264      	movs	r2, #100	@ 0x64
 8010486:	fb02 f303 	mul.w	r3, r2, r3
 801048a:	1acb      	subs	r3, r1, r3
 801048c:	00db      	lsls	r3, r3, #3
 801048e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010492:	4b36      	ldr	r3, [pc, #216]	@ (801056c <UART_SetConfig+0x2d4>)
 8010494:	fba3 2302 	umull	r2, r3, r3, r2
 8010498:	095b      	lsrs	r3, r3, #5
 801049a:	005b      	lsls	r3, r3, #1
 801049c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80104a0:	441c      	add	r4, r3
 80104a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80104a6:	2200      	movs	r2, #0
 80104a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80104ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80104b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80104b4:	4642      	mov	r2, r8
 80104b6:	464b      	mov	r3, r9
 80104b8:	1891      	adds	r1, r2, r2
 80104ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80104bc:	415b      	adcs	r3, r3
 80104be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80104c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80104c4:	4641      	mov	r1, r8
 80104c6:	1851      	adds	r1, r2, r1
 80104c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80104ca:	4649      	mov	r1, r9
 80104cc:	414b      	adcs	r3, r1
 80104ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80104d0:	f04f 0200 	mov.w	r2, #0
 80104d4:	f04f 0300 	mov.w	r3, #0
 80104d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80104dc:	4659      	mov	r1, fp
 80104de:	00cb      	lsls	r3, r1, #3
 80104e0:	4651      	mov	r1, sl
 80104e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80104e6:	4651      	mov	r1, sl
 80104e8:	00ca      	lsls	r2, r1, #3
 80104ea:	4610      	mov	r0, r2
 80104ec:	4619      	mov	r1, r3
 80104ee:	4603      	mov	r3, r0
 80104f0:	4642      	mov	r2, r8
 80104f2:	189b      	adds	r3, r3, r2
 80104f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80104f8:	464b      	mov	r3, r9
 80104fa:	460a      	mov	r2, r1
 80104fc:	eb42 0303 	adc.w	r3, r2, r3
 8010500:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010510:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010514:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010518:	460b      	mov	r3, r1
 801051a:	18db      	adds	r3, r3, r3
 801051c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801051e:	4613      	mov	r3, r2
 8010520:	eb42 0303 	adc.w	r3, r2, r3
 8010524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010526:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 801052a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 801052e:	f7f0 fd29 	bl	8000f84 <__aeabi_uldivmod>
 8010532:	4602      	mov	r2, r0
 8010534:	460b      	mov	r3, r1
 8010536:	4b0d      	ldr	r3, [pc, #52]	@ (801056c <UART_SetConfig+0x2d4>)
 8010538:	fba3 1302 	umull	r1, r3, r3, r2
 801053c:	095b      	lsrs	r3, r3, #5
 801053e:	2164      	movs	r1, #100	@ 0x64
 8010540:	fb01 f303 	mul.w	r3, r1, r3
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	00db      	lsls	r3, r3, #3
 8010548:	3332      	adds	r3, #50	@ 0x32
 801054a:	4a08      	ldr	r2, [pc, #32]	@ (801056c <UART_SetConfig+0x2d4>)
 801054c:	fba2 2303 	umull	r2, r3, r2, r3
 8010550:	095b      	lsrs	r3, r3, #5
 8010552:	f003 0207 	and.w	r2, r3, #7
 8010556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4422      	add	r2, r4
 801055e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010560:	e106      	b.n	8010770 <UART_SetConfig+0x4d8>
 8010562:	bf00      	nop
 8010564:	40011000 	.word	0x40011000
 8010568:	40011400 	.word	0x40011400
 801056c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010574:	2200      	movs	r2, #0
 8010576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801057a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 801057e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010582:	4642      	mov	r2, r8
 8010584:	464b      	mov	r3, r9
 8010586:	1891      	adds	r1, r2, r2
 8010588:	6239      	str	r1, [r7, #32]
 801058a:	415b      	adcs	r3, r3
 801058c:	627b      	str	r3, [r7, #36]	@ 0x24
 801058e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010592:	4641      	mov	r1, r8
 8010594:	1854      	adds	r4, r2, r1
 8010596:	4649      	mov	r1, r9
 8010598:	eb43 0501 	adc.w	r5, r3, r1
 801059c:	f04f 0200 	mov.w	r2, #0
 80105a0:	f04f 0300 	mov.w	r3, #0
 80105a4:	00eb      	lsls	r3, r5, #3
 80105a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80105aa:	00e2      	lsls	r2, r4, #3
 80105ac:	4614      	mov	r4, r2
 80105ae:	461d      	mov	r5, r3
 80105b0:	4643      	mov	r3, r8
 80105b2:	18e3      	adds	r3, r4, r3
 80105b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80105b8:	464b      	mov	r3, r9
 80105ba:	eb45 0303 	adc.w	r3, r5, r3
 80105be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80105c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80105ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80105d2:	f04f 0200 	mov.w	r2, #0
 80105d6:	f04f 0300 	mov.w	r3, #0
 80105da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80105de:	4629      	mov	r1, r5
 80105e0:	008b      	lsls	r3, r1, #2
 80105e2:	4621      	mov	r1, r4
 80105e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80105e8:	4621      	mov	r1, r4
 80105ea:	008a      	lsls	r2, r1, #2
 80105ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80105f0:	f7f0 fcc8 	bl	8000f84 <__aeabi_uldivmod>
 80105f4:	4602      	mov	r2, r0
 80105f6:	460b      	mov	r3, r1
 80105f8:	4b60      	ldr	r3, [pc, #384]	@ (801077c <UART_SetConfig+0x4e4>)
 80105fa:	fba3 2302 	umull	r2, r3, r3, r2
 80105fe:	095b      	lsrs	r3, r3, #5
 8010600:	011c      	lsls	r4, r3, #4
 8010602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010606:	2200      	movs	r2, #0
 8010608:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801060c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010610:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010614:	4642      	mov	r2, r8
 8010616:	464b      	mov	r3, r9
 8010618:	1891      	adds	r1, r2, r2
 801061a:	61b9      	str	r1, [r7, #24]
 801061c:	415b      	adcs	r3, r3
 801061e:	61fb      	str	r3, [r7, #28]
 8010620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010624:	4641      	mov	r1, r8
 8010626:	1851      	adds	r1, r2, r1
 8010628:	6139      	str	r1, [r7, #16]
 801062a:	4649      	mov	r1, r9
 801062c:	414b      	adcs	r3, r1
 801062e:	617b      	str	r3, [r7, #20]
 8010630:	f04f 0200 	mov.w	r2, #0
 8010634:	f04f 0300 	mov.w	r3, #0
 8010638:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 801063c:	4659      	mov	r1, fp
 801063e:	00cb      	lsls	r3, r1, #3
 8010640:	4651      	mov	r1, sl
 8010642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010646:	4651      	mov	r1, sl
 8010648:	00ca      	lsls	r2, r1, #3
 801064a:	4610      	mov	r0, r2
 801064c:	4619      	mov	r1, r3
 801064e:	4603      	mov	r3, r0
 8010650:	4642      	mov	r2, r8
 8010652:	189b      	adds	r3, r3, r2
 8010654:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010658:	464b      	mov	r3, r9
 801065a:	460a      	mov	r2, r1
 801065c:	eb42 0303 	adc.w	r3, r2, r3
 8010660:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	67bb      	str	r3, [r7, #120]	@ 0x78
 801066e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010670:	f04f 0200 	mov.w	r2, #0
 8010674:	f04f 0300 	mov.w	r3, #0
 8010678:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 801067c:	4649      	mov	r1, r9
 801067e:	008b      	lsls	r3, r1, #2
 8010680:	4641      	mov	r1, r8
 8010682:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010686:	4641      	mov	r1, r8
 8010688:	008a      	lsls	r2, r1, #2
 801068a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 801068e:	f7f0 fc79 	bl	8000f84 <__aeabi_uldivmod>
 8010692:	4602      	mov	r2, r0
 8010694:	460b      	mov	r3, r1
 8010696:	4611      	mov	r1, r2
 8010698:	4b38      	ldr	r3, [pc, #224]	@ (801077c <UART_SetConfig+0x4e4>)
 801069a:	fba3 2301 	umull	r2, r3, r3, r1
 801069e:	095b      	lsrs	r3, r3, #5
 80106a0:	2264      	movs	r2, #100	@ 0x64
 80106a2:	fb02 f303 	mul.w	r3, r2, r3
 80106a6:	1acb      	subs	r3, r1, r3
 80106a8:	011b      	lsls	r3, r3, #4
 80106aa:	3332      	adds	r3, #50	@ 0x32
 80106ac:	4a33      	ldr	r2, [pc, #204]	@ (801077c <UART_SetConfig+0x4e4>)
 80106ae:	fba2 2303 	umull	r2, r3, r2, r3
 80106b2:	095b      	lsrs	r3, r3, #5
 80106b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80106b8:	441c      	add	r4, r3
 80106ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80106be:	2200      	movs	r2, #0
 80106c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80106c2:	677a      	str	r2, [r7, #116]	@ 0x74
 80106c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80106c8:	4642      	mov	r2, r8
 80106ca:	464b      	mov	r3, r9
 80106cc:	1891      	adds	r1, r2, r2
 80106ce:	60b9      	str	r1, [r7, #8]
 80106d0:	415b      	adcs	r3, r3
 80106d2:	60fb      	str	r3, [r7, #12]
 80106d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80106d8:	4641      	mov	r1, r8
 80106da:	1851      	adds	r1, r2, r1
 80106dc:	6039      	str	r1, [r7, #0]
 80106de:	4649      	mov	r1, r9
 80106e0:	414b      	adcs	r3, r1
 80106e2:	607b      	str	r3, [r7, #4]
 80106e4:	f04f 0200 	mov.w	r2, #0
 80106e8:	f04f 0300 	mov.w	r3, #0
 80106ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80106f0:	4659      	mov	r1, fp
 80106f2:	00cb      	lsls	r3, r1, #3
 80106f4:	4651      	mov	r1, sl
 80106f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80106fa:	4651      	mov	r1, sl
 80106fc:	00ca      	lsls	r2, r1, #3
 80106fe:	4610      	mov	r0, r2
 8010700:	4619      	mov	r1, r3
 8010702:	4603      	mov	r3, r0
 8010704:	4642      	mov	r2, r8
 8010706:	189b      	adds	r3, r3, r2
 8010708:	66bb      	str	r3, [r7, #104]	@ 0x68
 801070a:	464b      	mov	r3, r9
 801070c:	460a      	mov	r2, r1
 801070e:	eb42 0303 	adc.w	r3, r2, r3
 8010712:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	2200      	movs	r2, #0
 801071c:	663b      	str	r3, [r7, #96]	@ 0x60
 801071e:	667a      	str	r2, [r7, #100]	@ 0x64
 8010720:	f04f 0200 	mov.w	r2, #0
 8010724:	f04f 0300 	mov.w	r3, #0
 8010728:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 801072c:	4649      	mov	r1, r9
 801072e:	008b      	lsls	r3, r1, #2
 8010730:	4641      	mov	r1, r8
 8010732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010736:	4641      	mov	r1, r8
 8010738:	008a      	lsls	r2, r1, #2
 801073a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 801073e:	f7f0 fc21 	bl	8000f84 <__aeabi_uldivmod>
 8010742:	4602      	mov	r2, r0
 8010744:	460b      	mov	r3, r1
 8010746:	4b0d      	ldr	r3, [pc, #52]	@ (801077c <UART_SetConfig+0x4e4>)
 8010748:	fba3 1302 	umull	r1, r3, r3, r2
 801074c:	095b      	lsrs	r3, r3, #5
 801074e:	2164      	movs	r1, #100	@ 0x64
 8010750:	fb01 f303 	mul.w	r3, r1, r3
 8010754:	1ad3      	subs	r3, r2, r3
 8010756:	011b      	lsls	r3, r3, #4
 8010758:	3332      	adds	r3, #50	@ 0x32
 801075a:	4a08      	ldr	r2, [pc, #32]	@ (801077c <UART_SetConfig+0x4e4>)
 801075c:	fba2 2303 	umull	r2, r3, r2, r3
 8010760:	095b      	lsrs	r3, r3, #5
 8010762:	f003 020f 	and.w	r2, r3, #15
 8010766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4422      	add	r2, r4
 801076e:	609a      	str	r2, [r3, #8]
}
 8010770:	bf00      	nop
 8010772:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8010776:	46bd      	mov	sp, r7
 8010778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801077c:	51eb851f 	.word	0x51eb851f

08010780 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010784:	4904      	ldr	r1, [pc, #16]	@ (8010798 <MX_FATFS_Init+0x18>)
 8010786:	4805      	ldr	r0, [pc, #20]	@ (801079c <MX_FATFS_Init+0x1c>)
 8010788:	f003 f8f2 	bl	8013970 <FATFS_LinkDriver>
 801078c:	4603      	mov	r3, r0
 801078e:	461a      	mov	r2, r3
 8010790:	4b03      	ldr	r3, [pc, #12]	@ (80107a0 <MX_FATFS_Init+0x20>)
 8010792:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010794:	bf00      	nop
 8010796:	bd80      	pop	{r7, pc}
 8010798:	20003f30 	.word	0x20003f30
 801079c:	20000048 	.word	0x20000048
 80107a0:	20003f2c 	.word	0x20003f2c

080107a4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80107a4:	b480      	push	{r7}
 80107a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80107a8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	46bd      	mov	sp, r7
 80107ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b2:	4770      	bx	lr

080107b4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	4603      	mov	r3, r0
 80107bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80107be:	79fb      	ldrb	r3, [r7, #7]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f000 f9d3 	bl	8010b6c <USER_SPI_initialize>
 80107c6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3708      	adds	r7, #8
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80107d0:	b580      	push	{r7, lr}
 80107d2:	b082      	sub	sp, #8
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	4603      	mov	r3, r0
 80107d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80107da:	79fb      	ldrb	r3, [r7, #7]
 80107dc:	4618      	mov	r0, r3
 80107de:	f000 fab1 	bl	8010d44 <USER_SPI_status>
 80107e2:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b084      	sub	sp, #16
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60b9      	str	r1, [r7, #8]
 80107f4:	607a      	str	r2, [r7, #4]
 80107f6:	603b      	str	r3, [r7, #0]
 80107f8:	4603      	mov	r3, r0
 80107fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80107fc:	7bf8      	ldrb	r0, [r7, #15]
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	687a      	ldr	r2, [r7, #4]
 8010802:	68b9      	ldr	r1, [r7, #8]
 8010804:	f000 fab4 	bl	8010d70 <USER_SPI_read>
 8010808:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 801080a:	4618      	mov	r0, r3
 801080c:	3710      	adds	r7, #16
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}

08010812 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b084      	sub	sp, #16
 8010816:	af00      	add	r7, sp, #0
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	603b      	str	r3, [r7, #0]
 801081e:	4603      	mov	r3, r0
 8010820:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8010822:	7bf8      	ldrb	r0, [r7, #15]
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	687a      	ldr	r2, [r7, #4]
 8010828:	68b9      	ldr	r1, [r7, #8]
 801082a:	f000 fb07 	bl	8010e3c <USER_SPI_write>
 801082e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8010830:	4618      	mov	r0, r3
 8010832:	3710      	adds	r7, #16
 8010834:	46bd      	mov	sp, r7
 8010836:	bd80      	pop	{r7, pc}

08010838 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	4603      	mov	r3, r0
 8010840:	603a      	str	r2, [r7, #0]
 8010842:	71fb      	strb	r3, [r7, #7]
 8010844:	460b      	mov	r3, r1
 8010846:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8010848:	79b9      	ldrb	r1, [r7, #6]
 801084a:	79fb      	ldrb	r3, [r7, #7]
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	4618      	mov	r0, r3
 8010850:	f000 fb70 	bl	8010f34 <USER_SPI_ioctl>
 8010854:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8010856:	4618      	mov	r0, r3
 8010858:	3708      	adds	r7, #8
 801085a:	46bd      	mov	sp, r7
 801085c:	bd80      	pop	{r7, pc}
	...

08010860 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8010868:	f7f8 f842 	bl	80088f0 <HAL_GetTick>
 801086c:	4603      	mov	r3, r0
 801086e:	4a04      	ldr	r2, [pc, #16]	@ (8010880 <SPI_Timer_On+0x20>)
 8010870:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8010872:	4a04      	ldr	r2, [pc, #16]	@ (8010884 <SPI_Timer_On+0x24>)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6013      	str	r3, [r2, #0]
}
 8010878:	bf00      	nop
 801087a:	3708      	adds	r7, #8
 801087c:	46bd      	mov	sp, r7
 801087e:	bd80      	pop	{r7, pc}
 8010880:	20003f38 	.word	0x20003f38
 8010884:	20003f3c 	.word	0x20003f3c

08010888 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8010888:	b580      	push	{r7, lr}
 801088a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 801088c:	f7f8 f830 	bl	80088f0 <HAL_GetTick>
 8010890:	4602      	mov	r2, r0
 8010892:	4b06      	ldr	r3, [pc, #24]	@ (80108ac <SPI_Timer_Status+0x24>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	1ad2      	subs	r2, r2, r3
 8010898:	4b05      	ldr	r3, [pc, #20]	@ (80108b0 <SPI_Timer_Status+0x28>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	429a      	cmp	r2, r3
 801089e:	bf34      	ite	cc
 80108a0:	2301      	movcc	r3, #1
 80108a2:	2300      	movcs	r3, #0
 80108a4:	b2db      	uxtb	r3, r3
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	bd80      	pop	{r7, pc}
 80108aa:	bf00      	nop
 80108ac:	20003f38 	.word	0x20003f38
 80108b0:	20003f3c 	.word	0x20003f3c

080108b4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b086      	sub	sp, #24
 80108b8:	af02      	add	r7, sp, #8
 80108ba:	4603      	mov	r3, r0
 80108bc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80108be:	f107 020f 	add.w	r2, r7, #15
 80108c2:	1df9      	adds	r1, r7, #7
 80108c4:	2332      	movs	r3, #50	@ 0x32
 80108c6:	9300      	str	r3, [sp, #0]
 80108c8:	2301      	movs	r3, #1
 80108ca:	4804      	ldr	r0, [pc, #16]	@ (80108dc <xchg_spi+0x28>)
 80108cc:	f7fd fc5e 	bl	800e18c <HAL_SPI_TransmitReceive>
    return rxDat;
 80108d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80108d2:	4618      	mov	r0, r3
 80108d4:	3710      	adds	r7, #16
 80108d6:	46bd      	mov	sp, r7
 80108d8:	bd80      	pop	{r7, pc}
 80108da:	bf00      	nop
 80108dc:	20001980 	.word	0x20001980

080108e0 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80108ea:	2300      	movs	r3, #0
 80108ec:	60fb      	str	r3, [r7, #12]
 80108ee:	e00a      	b.n	8010906 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80108f0:	687a      	ldr	r2, [r7, #4]
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	18d4      	adds	r4, r2, r3
 80108f6:	20ff      	movs	r0, #255	@ 0xff
 80108f8:	f7ff ffdc 	bl	80108b4 <xchg_spi>
 80108fc:	4603      	mov	r3, r0
 80108fe:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	3301      	adds	r3, #1
 8010904:	60fb      	str	r3, [r7, #12]
 8010906:	68fa      	ldr	r2, [r7, #12]
 8010908:	683b      	ldr	r3, [r7, #0]
 801090a:	429a      	cmp	r2, r3
 801090c:	d3f0      	bcc.n	80108f0 <rcvr_spi_multi+0x10>
	}
}
 801090e:	bf00      	nop
 8010910:	bf00      	nop
 8010912:	3714      	adds	r7, #20
 8010914:	46bd      	mov	sp, r7
 8010916:	bd90      	pop	{r4, r7, pc}

08010918 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
 8010920:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	b29a      	uxth	r2, r3
 8010926:	f04f 33ff 	mov.w	r3, #4294967295
 801092a:	6879      	ldr	r1, [r7, #4]
 801092c:	4803      	ldr	r0, [pc, #12]	@ (801093c <xmit_spi_multi+0x24>)
 801092e:	f7fd f9d0 	bl	800dcd2 <HAL_SPI_Transmit>
}
 8010932:	bf00      	nop
 8010934:	3708      	adds	r7, #8
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	20001980 	.word	0x20001980

08010940 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b086      	sub	sp, #24
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8010948:	f7f7 ffd2 	bl	80088f0 <HAL_GetTick>
 801094c:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8010952:	20ff      	movs	r0, #255	@ 0xff
 8010954:	f7ff ffae 	bl	80108b4 <xchg_spi>
 8010958:	4603      	mov	r3, r0
 801095a:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 801095c:	7bfb      	ldrb	r3, [r7, #15]
 801095e:	2bff      	cmp	r3, #255	@ 0xff
 8010960:	d007      	beq.n	8010972 <wait_ready+0x32>
 8010962:	f7f7 ffc5 	bl	80088f0 <HAL_GetTick>
 8010966:	4602      	mov	r2, r0
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	1ad3      	subs	r3, r2, r3
 801096c:	693a      	ldr	r2, [r7, #16]
 801096e:	429a      	cmp	r2, r3
 8010970:	d8ef      	bhi.n	8010952 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8010972:	7bfb      	ldrb	r3, [r7, #15]
 8010974:	2bff      	cmp	r3, #255	@ 0xff
 8010976:	bf0c      	ite	eq
 8010978:	2301      	moveq	r3, #1
 801097a:	2300      	movne	r3, #0
 801097c:	b2db      	uxtb	r3, r3
}
 801097e:	4618      	mov	r0, r3
 8010980:	3718      	adds	r7, #24
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}
	...

08010988 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 801098c:	2201      	movs	r2, #1
 801098e:	2110      	movs	r1, #16
 8010990:	4803      	ldr	r0, [pc, #12]	@ (80109a0 <despiselect+0x18>)
 8010992:	f7f9 fc33 	bl	800a1fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8010996:	20ff      	movs	r0, #255	@ 0xff
 8010998:	f7ff ff8c 	bl	80108b4 <xchg_spi>

}
 801099c:	bf00      	nop
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	40020000 	.word	0x40020000

080109a4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 80109a8:	2200      	movs	r2, #0
 80109aa:	2110      	movs	r1, #16
 80109ac:	4809      	ldr	r0, [pc, #36]	@ (80109d4 <spiselect+0x30>)
 80109ae:	f7f9 fc25 	bl	800a1fc <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80109b2:	20ff      	movs	r0, #255	@ 0xff
 80109b4:	f7ff ff7e 	bl	80108b4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80109b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80109bc:	f7ff ffc0 	bl	8010940 <wait_ready>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d001      	beq.n	80109ca <spiselect+0x26>
 80109c6:	2301      	movs	r3, #1
 80109c8:	e002      	b.n	80109d0 <spiselect+0x2c>

	despiselect();
 80109ca:	f7ff ffdd 	bl	8010988 <despiselect>
	return 0;	/* Timeout */
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	bd80      	pop	{r7, pc}
 80109d4:	40020000 	.word	0x40020000

080109d8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80109d8:	b580      	push	{r7, lr}
 80109da:	b084      	sub	sp, #16
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
 80109e0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80109e2:	20c8      	movs	r0, #200	@ 0xc8
 80109e4:	f7ff ff3c 	bl	8010860 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80109e8:	20ff      	movs	r0, #255	@ 0xff
 80109ea:	f7ff ff63 	bl	80108b4 <xchg_spi>
 80109ee:	4603      	mov	r3, r0
 80109f0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80109f2:	7bfb      	ldrb	r3, [r7, #15]
 80109f4:	2bff      	cmp	r3, #255	@ 0xff
 80109f6:	d104      	bne.n	8010a02 <rcvr_datablock+0x2a>
 80109f8:	f7ff ff46 	bl	8010888 <SPI_Timer_Status>
 80109fc:	4603      	mov	r3, r0
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d1f2      	bne.n	80109e8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8010a02:	7bfb      	ldrb	r3, [r7, #15]
 8010a04:	2bfe      	cmp	r3, #254	@ 0xfe
 8010a06:	d001      	beq.n	8010a0c <rcvr_datablock+0x34>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	e00a      	b.n	8010a22 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8010a0c:	6839      	ldr	r1, [r7, #0]
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f7ff ff66 	bl	80108e0 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8010a14:	20ff      	movs	r0, #255	@ 0xff
 8010a16:	f7ff ff4d 	bl	80108b4 <xchg_spi>
 8010a1a:	20ff      	movs	r0, #255	@ 0xff
 8010a1c:	f7ff ff4a 	bl	80108b4 <xchg_spi>

	return 1;						/* Function succeeded */
 8010a20:	2301      	movs	r3, #1
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3710      	adds	r7, #16
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}

08010a2a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8010a2a:	b580      	push	{r7, lr}
 8010a2c:	b084      	sub	sp, #16
 8010a2e:	af00      	add	r7, sp, #0
 8010a30:	6078      	str	r0, [r7, #4]
 8010a32:	460b      	mov	r3, r1
 8010a34:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8010a36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8010a3a:	f7ff ff81 	bl	8010940 <wait_ready>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d101      	bne.n	8010a48 <xmit_datablock+0x1e>
 8010a44:	2300      	movs	r3, #0
 8010a46:	e01e      	b.n	8010a86 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8010a48:	78fb      	ldrb	r3, [r7, #3]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7ff ff32 	bl	80108b4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8010a50:	78fb      	ldrb	r3, [r7, #3]
 8010a52:	2bfd      	cmp	r3, #253	@ 0xfd
 8010a54:	d016      	beq.n	8010a84 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8010a56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7ff ff5c 	bl	8010918 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8010a60:	20ff      	movs	r0, #255	@ 0xff
 8010a62:	f7ff ff27 	bl	80108b4 <xchg_spi>
 8010a66:	20ff      	movs	r0, #255	@ 0xff
 8010a68:	f7ff ff24 	bl	80108b4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8010a6c:	20ff      	movs	r0, #255	@ 0xff
 8010a6e:	f7ff ff21 	bl	80108b4 <xchg_spi>
 8010a72:	4603      	mov	r3, r0
 8010a74:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8010a76:	7bfb      	ldrb	r3, [r7, #15]
 8010a78:	f003 031f 	and.w	r3, r3, #31
 8010a7c:	2b05      	cmp	r3, #5
 8010a7e:	d001      	beq.n	8010a84 <xmit_datablock+0x5a>
 8010a80:	2300      	movs	r3, #0
 8010a82:	e000      	b.n	8010a86 <xmit_datablock+0x5c>
	}
	return 1;
 8010a84:	2301      	movs	r3, #1
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3710      	adds	r7, #16
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b084      	sub	sp, #16
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	4603      	mov	r3, r0
 8010a96:	6039      	str	r1, [r7, #0]
 8010a98:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8010a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	da0e      	bge.n	8010ac0 <send_cmd+0x32>
		cmd &= 0x7F;
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010aa8:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8010aaa:	2100      	movs	r1, #0
 8010aac:	2037      	movs	r0, #55	@ 0x37
 8010aae:	f7ff ffee 	bl	8010a8e <send_cmd>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8010ab6:	7bbb      	ldrb	r3, [r7, #14]
 8010ab8:	2b01      	cmp	r3, #1
 8010aba:	d901      	bls.n	8010ac0 <send_cmd+0x32>
 8010abc:	7bbb      	ldrb	r3, [r7, #14]
 8010abe:	e051      	b.n	8010b64 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8010ac0:	79fb      	ldrb	r3, [r7, #7]
 8010ac2:	2b0c      	cmp	r3, #12
 8010ac4:	d008      	beq.n	8010ad8 <send_cmd+0x4a>
		despiselect();
 8010ac6:	f7ff ff5f 	bl	8010988 <despiselect>
		if (!spiselect()) return 0xFF;
 8010aca:	f7ff ff6b 	bl	80109a4 <spiselect>
 8010ace:	4603      	mov	r3, r0
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d101      	bne.n	8010ad8 <send_cmd+0x4a>
 8010ad4:	23ff      	movs	r3, #255	@ 0xff
 8010ad6:	e045      	b.n	8010b64 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8010ad8:	79fb      	ldrb	r3, [r7, #7]
 8010ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ade:	b2db      	uxtb	r3, r3
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	f7ff fee7 	bl	80108b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	0e1b      	lsrs	r3, r3, #24
 8010aea:	b2db      	uxtb	r3, r3
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7ff fee1 	bl	80108b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	0c1b      	lsrs	r3, r3, #16
 8010af6:	b2db      	uxtb	r3, r3
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff fedb 	bl	80108b4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	0a1b      	lsrs	r3, r3, #8
 8010b02:	b2db      	uxtb	r3, r3
 8010b04:	4618      	mov	r0, r3
 8010b06:	f7ff fed5 	bl	80108b4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	b2db      	uxtb	r3, r3
 8010b0e:	4618      	mov	r0, r3
 8010b10:	f7ff fed0 	bl	80108b4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8010b14:	2301      	movs	r3, #1
 8010b16:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8010b18:	79fb      	ldrb	r3, [r7, #7]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d101      	bne.n	8010b22 <send_cmd+0x94>
 8010b1e:	2395      	movs	r3, #149	@ 0x95
 8010b20:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8010b22:	79fb      	ldrb	r3, [r7, #7]
 8010b24:	2b08      	cmp	r3, #8
 8010b26:	d101      	bne.n	8010b2c <send_cmd+0x9e>
 8010b28:	2387      	movs	r3, #135	@ 0x87
 8010b2a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8010b2c:	7bfb      	ldrb	r3, [r7, #15]
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7ff fec0 	bl	80108b4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8010b34:	79fb      	ldrb	r3, [r7, #7]
 8010b36:	2b0c      	cmp	r3, #12
 8010b38:	d102      	bne.n	8010b40 <send_cmd+0xb2>
 8010b3a:	20ff      	movs	r0, #255	@ 0xff
 8010b3c:	f7ff feba 	bl	80108b4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8010b40:	230a      	movs	r3, #10
 8010b42:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8010b44:	20ff      	movs	r0, #255	@ 0xff
 8010b46:	f7ff feb5 	bl	80108b4 <xchg_spi>
 8010b4a:	4603      	mov	r3, r0
 8010b4c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8010b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	da05      	bge.n	8010b62 <send_cmd+0xd4>
 8010b56:	7bfb      	ldrb	r3, [r7, #15]
 8010b58:	3b01      	subs	r3, #1
 8010b5a:	73fb      	strb	r3, [r7, #15]
 8010b5c:	7bfb      	ldrb	r3, [r7, #15]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1f0      	bne.n	8010b44 <send_cmd+0xb6>

	return res;							/* Return received response */
 8010b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010b6c:	b590      	push	{r4, r7, lr}
 8010b6e:	b085      	sub	sp, #20
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	4603      	mov	r3, r0
 8010b74:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8010b76:	79fb      	ldrb	r3, [r7, #7]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d001      	beq.n	8010b80 <USER_SPI_initialize+0x14>
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	e0d6      	b.n	8010d2e <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8010b80:	4b6d      	ldr	r3, [pc, #436]	@ (8010d38 <USER_SPI_initialize+0x1cc>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	b2db      	uxtb	r3, r3
 8010b86:	f003 0302 	and.w	r3, r3, #2
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d003      	beq.n	8010b96 <USER_SPI_initialize+0x2a>
 8010b8e:	4b6a      	ldr	r3, [pc, #424]	@ (8010d38 <USER_SPI_initialize+0x1cc>)
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	e0cb      	b.n	8010d2e <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8010b96:	4b69      	ldr	r3, [pc, #420]	@ (8010d3c <USER_SPI_initialize+0x1d0>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8010ba0:	4b66      	ldr	r3, [pc, #408]	@ (8010d3c <USER_SPI_initialize+0x1d0>)
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8010ba8:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8010baa:	230a      	movs	r3, #10
 8010bac:	73fb      	strb	r3, [r7, #15]
 8010bae:	e005      	b.n	8010bbc <USER_SPI_initialize+0x50>
 8010bb0:	20ff      	movs	r0, #255	@ 0xff
 8010bb2:	f7ff fe7f 	bl	80108b4 <xchg_spi>
 8010bb6:	7bfb      	ldrb	r3, [r7, #15]
 8010bb8:	3b01      	subs	r3, #1
 8010bba:	73fb      	strb	r3, [r7, #15]
 8010bbc:	7bfb      	ldrb	r3, [r7, #15]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1f6      	bne.n	8010bb0 <USER_SPI_initialize+0x44>

	ty = 0;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8010bc6:	2100      	movs	r1, #0
 8010bc8:	2000      	movs	r0, #0
 8010bca:	f7ff ff60 	bl	8010a8e <send_cmd>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	2b01      	cmp	r3, #1
 8010bd2:	f040 808b 	bne.w	8010cec <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8010bd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010bda:	f7ff fe41 	bl	8010860 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8010bde:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8010be2:	2008      	movs	r0, #8
 8010be4:	f7ff ff53 	bl	8010a8e <send_cmd>
 8010be8:	4603      	mov	r3, r0
 8010bea:	2b01      	cmp	r3, #1
 8010bec:	d151      	bne.n	8010c92 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8010bee:	2300      	movs	r3, #0
 8010bf0:	73fb      	strb	r3, [r7, #15]
 8010bf2:	e00d      	b.n	8010c10 <USER_SPI_initialize+0xa4>
 8010bf4:	7bfc      	ldrb	r4, [r7, #15]
 8010bf6:	20ff      	movs	r0, #255	@ 0xff
 8010bf8:	f7ff fe5c 	bl	80108b4 <xchg_spi>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	461a      	mov	r2, r3
 8010c00:	f104 0310 	add.w	r3, r4, #16
 8010c04:	443b      	add	r3, r7
 8010c06:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010c0a:	7bfb      	ldrb	r3, [r7, #15]
 8010c0c:	3301      	adds	r3, #1
 8010c0e:	73fb      	strb	r3, [r7, #15]
 8010c10:	7bfb      	ldrb	r3, [r7, #15]
 8010c12:	2b03      	cmp	r3, #3
 8010c14:	d9ee      	bls.n	8010bf4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8010c16:	7abb      	ldrb	r3, [r7, #10]
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d167      	bne.n	8010cec <USER_SPI_initialize+0x180>
 8010c1c:	7afb      	ldrb	r3, [r7, #11]
 8010c1e:	2baa      	cmp	r3, #170	@ 0xaa
 8010c20:	d164      	bne.n	8010cec <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8010c22:	bf00      	nop
 8010c24:	f7ff fe30 	bl	8010888 <SPI_Timer_Status>
 8010c28:	4603      	mov	r3, r0
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d007      	beq.n	8010c3e <USER_SPI_initialize+0xd2>
 8010c2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8010c32:	20a9      	movs	r0, #169	@ 0xa9
 8010c34:	f7ff ff2b 	bl	8010a8e <send_cmd>
 8010c38:	4603      	mov	r3, r0
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d1f2      	bne.n	8010c24 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8010c3e:	f7ff fe23 	bl	8010888 <SPI_Timer_Status>
 8010c42:	4603      	mov	r3, r0
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d051      	beq.n	8010cec <USER_SPI_initialize+0x180>
 8010c48:	2100      	movs	r1, #0
 8010c4a:	203a      	movs	r0, #58	@ 0x3a
 8010c4c:	f7ff ff1f 	bl	8010a8e <send_cmd>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d14a      	bne.n	8010cec <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8010c56:	2300      	movs	r3, #0
 8010c58:	73fb      	strb	r3, [r7, #15]
 8010c5a:	e00d      	b.n	8010c78 <USER_SPI_initialize+0x10c>
 8010c5c:	7bfc      	ldrb	r4, [r7, #15]
 8010c5e:	20ff      	movs	r0, #255	@ 0xff
 8010c60:	f7ff fe28 	bl	80108b4 <xchg_spi>
 8010c64:	4603      	mov	r3, r0
 8010c66:	461a      	mov	r2, r3
 8010c68:	f104 0310 	add.w	r3, r4, #16
 8010c6c:	443b      	add	r3, r7
 8010c6e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8010c72:	7bfb      	ldrb	r3, [r7, #15]
 8010c74:	3301      	adds	r3, #1
 8010c76:	73fb      	strb	r3, [r7, #15]
 8010c78:	7bfb      	ldrb	r3, [r7, #15]
 8010c7a:	2b03      	cmp	r3, #3
 8010c7c:	d9ee      	bls.n	8010c5c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8010c7e:	7a3b      	ldrb	r3, [r7, #8]
 8010c80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <USER_SPI_initialize+0x120>
 8010c88:	230c      	movs	r3, #12
 8010c8a:	e000      	b.n	8010c8e <USER_SPI_initialize+0x122>
 8010c8c:	2304      	movs	r3, #4
 8010c8e:	737b      	strb	r3, [r7, #13]
 8010c90:	e02c      	b.n	8010cec <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8010c92:	2100      	movs	r1, #0
 8010c94:	20a9      	movs	r0, #169	@ 0xa9
 8010c96:	f7ff fefa 	bl	8010a8e <send_cmd>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d804      	bhi.n	8010caa <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8010ca0:	2302      	movs	r3, #2
 8010ca2:	737b      	strb	r3, [r7, #13]
 8010ca4:	23a9      	movs	r3, #169	@ 0xa9
 8010ca6:	73bb      	strb	r3, [r7, #14]
 8010ca8:	e003      	b.n	8010cb2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8010caa:	2301      	movs	r3, #1
 8010cac:	737b      	strb	r3, [r7, #13]
 8010cae:	2301      	movs	r3, #1
 8010cb0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8010cb2:	bf00      	nop
 8010cb4:	f7ff fde8 	bl	8010888 <SPI_Timer_Status>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d007      	beq.n	8010cce <USER_SPI_initialize+0x162>
 8010cbe:	7bbb      	ldrb	r3, [r7, #14]
 8010cc0:	2100      	movs	r1, #0
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7ff fee3 	bl	8010a8e <send_cmd>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d1f2      	bne.n	8010cb4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8010cce:	f7ff fddb 	bl	8010888 <SPI_Timer_Status>
 8010cd2:	4603      	mov	r3, r0
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d007      	beq.n	8010ce8 <USER_SPI_initialize+0x17c>
 8010cd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010cdc:	2010      	movs	r0, #16
 8010cde:	f7ff fed6 	bl	8010a8e <send_cmd>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d001      	beq.n	8010cec <USER_SPI_initialize+0x180>
				ty = 0;
 8010ce8:	2300      	movs	r3, #0
 8010cea:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8010cec:	4a14      	ldr	r2, [pc, #80]	@ (8010d40 <USER_SPI_initialize+0x1d4>)
 8010cee:	7b7b      	ldrb	r3, [r7, #13]
 8010cf0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8010cf2:	f7ff fe49 	bl	8010988 <despiselect>

	if (ty) {			/* OK */
 8010cf6:	7b7b      	ldrb	r3, [r7, #13]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d012      	beq.n	8010d22 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8010cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8010d3c <USER_SPI_initialize+0x1d0>)
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8010d06:	4b0d      	ldr	r3, [pc, #52]	@ (8010d3c <USER_SPI_initialize+0x1d0>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	f042 0210 	orr.w	r2, r2, #16
 8010d0e:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8010d10:	4b09      	ldr	r3, [pc, #36]	@ (8010d38 <USER_SPI_initialize+0x1cc>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	b2db      	uxtb	r3, r3
 8010d16:	f023 0301 	bic.w	r3, r3, #1
 8010d1a:	b2da      	uxtb	r2, r3
 8010d1c:	4b06      	ldr	r3, [pc, #24]	@ (8010d38 <USER_SPI_initialize+0x1cc>)
 8010d1e:	701a      	strb	r2, [r3, #0]
 8010d20:	e002      	b.n	8010d28 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8010d22:	4b05      	ldr	r3, [pc, #20]	@ (8010d38 <USER_SPI_initialize+0x1cc>)
 8010d24:	2201      	movs	r2, #1
 8010d26:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8010d28:	4b03      	ldr	r3, [pc, #12]	@ (8010d38 <USER_SPI_initialize+0x1cc>)
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	b2db      	uxtb	r3, r3
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd90      	pop	{r4, r7, pc}
 8010d36:	bf00      	nop
 8010d38:	2000005c 	.word	0x2000005c
 8010d3c:	20001980 	.word	0x20001980
 8010d40:	20003f34 	.word	0x20003f34

08010d44 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8010d4e:	79fb      	ldrb	r3, [r7, #7]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d001      	beq.n	8010d58 <USER_SPI_status+0x14>
 8010d54:	2301      	movs	r3, #1
 8010d56:	e002      	b.n	8010d5e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8010d58:	4b04      	ldr	r3, [pc, #16]	@ (8010d6c <USER_SPI_status+0x28>)
 8010d5a:	781b      	ldrb	r3, [r3, #0]
 8010d5c:	b2db      	uxtb	r3, r3
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	370c      	adds	r7, #12
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop
 8010d6c:	2000005c 	.word	0x2000005c

08010d70 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	60b9      	str	r1, [r7, #8]
 8010d78:	607a      	str	r2, [r7, #4]
 8010d7a:	603b      	str	r3, [r7, #0]
 8010d7c:	4603      	mov	r3, r0
 8010d7e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8010d80:	7bfb      	ldrb	r3, [r7, #15]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d102      	bne.n	8010d8c <USER_SPI_read+0x1c>
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d101      	bne.n	8010d90 <USER_SPI_read+0x20>
 8010d8c:	2304      	movs	r3, #4
 8010d8e:	e04d      	b.n	8010e2c <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8010d90:	4b28      	ldr	r3, [pc, #160]	@ (8010e34 <USER_SPI_read+0xc4>)
 8010d92:	781b      	ldrb	r3, [r3, #0]
 8010d94:	b2db      	uxtb	r3, r3
 8010d96:	f003 0301 	and.w	r3, r3, #1
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d001      	beq.n	8010da2 <USER_SPI_read+0x32>
 8010d9e:	2303      	movs	r3, #3
 8010da0:	e044      	b.n	8010e2c <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8010da2:	4b25      	ldr	r3, [pc, #148]	@ (8010e38 <USER_SPI_read+0xc8>)
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	f003 0308 	and.w	r3, r3, #8
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d102      	bne.n	8010db4 <USER_SPI_read+0x44>
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	025b      	lsls	r3, r3, #9
 8010db2:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d111      	bne.n	8010dde <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8010dba:	6879      	ldr	r1, [r7, #4]
 8010dbc:	2011      	movs	r0, #17
 8010dbe:	f7ff fe66 	bl	8010a8e <send_cmd>
 8010dc2:	4603      	mov	r3, r0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d129      	bne.n	8010e1c <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8010dc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010dcc:	68b8      	ldr	r0, [r7, #8]
 8010dce:	f7ff fe03 	bl	80109d8 <rcvr_datablock>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d021      	beq.n	8010e1c <USER_SPI_read+0xac>
			count = 0;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	603b      	str	r3, [r7, #0]
 8010ddc:	e01e      	b.n	8010e1c <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8010dde:	6879      	ldr	r1, [r7, #4]
 8010de0:	2012      	movs	r0, #18
 8010de2:	f7ff fe54 	bl	8010a8e <send_cmd>
 8010de6:	4603      	mov	r3, r0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d117      	bne.n	8010e1c <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8010dec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010df0:	68b8      	ldr	r0, [r7, #8]
 8010df2:	f7ff fdf1 	bl	80109d8 <rcvr_datablock>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d00a      	beq.n	8010e12 <USER_SPI_read+0xa2>
				buff += 512;
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010e02:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	3b01      	subs	r3, #1
 8010e08:	603b      	str	r3, [r7, #0]
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d1ed      	bne.n	8010dec <USER_SPI_read+0x7c>
 8010e10:	e000      	b.n	8010e14 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8010e12:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8010e14:	2100      	movs	r1, #0
 8010e16:	200c      	movs	r0, #12
 8010e18:	f7ff fe39 	bl	8010a8e <send_cmd>
		}
	}
	despiselect();
 8010e1c:	f7ff fdb4 	bl	8010988 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	bf14      	ite	ne
 8010e26:	2301      	movne	r3, #1
 8010e28:	2300      	moveq	r3, #0
 8010e2a:	b2db      	uxtb	r3, r3
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3710      	adds	r7, #16
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	2000005c 	.word	0x2000005c
 8010e38:	20003f34 	.word	0x20003f34

08010e3c <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b084      	sub	sp, #16
 8010e40:	af00      	add	r7, sp, #0
 8010e42:	60b9      	str	r1, [r7, #8]
 8010e44:	607a      	str	r2, [r7, #4]
 8010e46:	603b      	str	r3, [r7, #0]
 8010e48:	4603      	mov	r3, r0
 8010e4a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8010e4c:	7bfb      	ldrb	r3, [r7, #15]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d102      	bne.n	8010e58 <USER_SPI_write+0x1c>
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d101      	bne.n	8010e5c <USER_SPI_write+0x20>
 8010e58:	2304      	movs	r3, #4
 8010e5a:	e063      	b.n	8010f24 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8010e5c:	4b33      	ldr	r3, [pc, #204]	@ (8010f2c <USER_SPI_write+0xf0>)
 8010e5e:	781b      	ldrb	r3, [r3, #0]
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	f003 0301 	and.w	r3, r3, #1
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d001      	beq.n	8010e6e <USER_SPI_write+0x32>
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	e05a      	b.n	8010f24 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8010e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8010f2c <USER_SPI_write+0xf0>)
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	b2db      	uxtb	r3, r3
 8010e74:	f003 0304 	and.w	r3, r3, #4
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d001      	beq.n	8010e80 <USER_SPI_write+0x44>
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	e051      	b.n	8010f24 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8010e80:	4b2b      	ldr	r3, [pc, #172]	@ (8010f30 <USER_SPI_write+0xf4>)
 8010e82:	781b      	ldrb	r3, [r3, #0]
 8010e84:	f003 0308 	and.w	r3, r3, #8
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d102      	bne.n	8010e92 <USER_SPI_write+0x56>
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	025b      	lsls	r3, r3, #9
 8010e90:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	d110      	bne.n	8010eba <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010e98:	6879      	ldr	r1, [r7, #4]
 8010e9a:	2018      	movs	r0, #24
 8010e9c:	f7ff fdf7 	bl	8010a8e <send_cmd>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d136      	bne.n	8010f14 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8010ea6:	21fe      	movs	r1, #254	@ 0xfe
 8010ea8:	68b8      	ldr	r0, [r7, #8]
 8010eaa:	f7ff fdbe 	bl	8010a2a <xmit_datablock>
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d02f      	beq.n	8010f14 <USER_SPI_write+0xd8>
			count = 0;
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	603b      	str	r3, [r7, #0]
 8010eb8:	e02c      	b.n	8010f14 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8010eba:	4b1d      	ldr	r3, [pc, #116]	@ (8010f30 <USER_SPI_write+0xf4>)
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	f003 0306 	and.w	r3, r3, #6
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d003      	beq.n	8010ece <USER_SPI_write+0x92>
 8010ec6:	6839      	ldr	r1, [r7, #0]
 8010ec8:	2097      	movs	r0, #151	@ 0x97
 8010eca:	f7ff fde0 	bl	8010a8e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8010ece:	6879      	ldr	r1, [r7, #4]
 8010ed0:	2019      	movs	r0, #25
 8010ed2:	f7ff fddc 	bl	8010a8e <send_cmd>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d11b      	bne.n	8010f14 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010edc:	21fc      	movs	r1, #252	@ 0xfc
 8010ede:	68b8      	ldr	r0, [r7, #8]
 8010ee0:	f7ff fda3 	bl	8010a2a <xmit_datablock>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d00a      	beq.n	8010f00 <USER_SPI_write+0xc4>
				buff += 512;
 8010eea:	68bb      	ldr	r3, [r7, #8]
 8010eec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010ef0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	3b01      	subs	r3, #1
 8010ef6:	603b      	str	r3, [r7, #0]
 8010ef8:	683b      	ldr	r3, [r7, #0]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d1ee      	bne.n	8010edc <USER_SPI_write+0xa0>
 8010efe:	e000      	b.n	8010f02 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010f00:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8010f02:	21fd      	movs	r1, #253	@ 0xfd
 8010f04:	2000      	movs	r0, #0
 8010f06:	f7ff fd90 	bl	8010a2a <xmit_datablock>
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d101      	bne.n	8010f14 <USER_SPI_write+0xd8>
 8010f10:	2301      	movs	r3, #1
 8010f12:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8010f14:	f7ff fd38 	bl	8010988 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	bf14      	ite	ne
 8010f1e:	2301      	movne	r3, #1
 8010f20:	2300      	moveq	r3, #0
 8010f22:	b2db      	uxtb	r3, r3
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3710      	adds	r7, #16
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	2000005c 	.word	0x2000005c
 8010f30:	20003f34 	.word	0x20003f34

08010f34 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b08c      	sub	sp, #48	@ 0x30
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	603a      	str	r2, [r7, #0]
 8010f3e:	71fb      	strb	r3, [r7, #7]
 8010f40:	460b      	mov	r3, r1
 8010f42:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8010f44:	79fb      	ldrb	r3, [r7, #7]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d001      	beq.n	8010f4e <USER_SPI_ioctl+0x1a>
 8010f4a:	2304      	movs	r3, #4
 8010f4c:	e15a      	b.n	8011204 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8010f4e:	4baf      	ldr	r3, [pc, #700]	@ (801120c <USER_SPI_ioctl+0x2d8>)
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	f003 0301 	and.w	r3, r3, #1
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d001      	beq.n	8010f60 <USER_SPI_ioctl+0x2c>
 8010f5c:	2303      	movs	r3, #3
 8010f5e:	e151      	b.n	8011204 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8010f60:	2301      	movs	r3, #1
 8010f62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8010f66:	79bb      	ldrb	r3, [r7, #6]
 8010f68:	2b04      	cmp	r3, #4
 8010f6a:	f200 8136 	bhi.w	80111da <USER_SPI_ioctl+0x2a6>
 8010f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8010f74 <USER_SPI_ioctl+0x40>)
 8010f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f74:	08010f89 	.word	0x08010f89
 8010f78:	08010f9d 	.word	0x08010f9d
 8010f7c:	080111db 	.word	0x080111db
 8010f80:	08011049 	.word	0x08011049
 8010f84:	0801113f 	.word	0x0801113f
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010f88:	f7ff fd0c 	bl	80109a4 <spiselect>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	f000 8127 	beq.w	80111e2 <USER_SPI_ioctl+0x2ae>
 8010f94:	2300      	movs	r3, #0
 8010f96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8010f9a:	e122      	b.n	80111e2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	2009      	movs	r0, #9
 8010fa0:	f7ff fd75 	bl	8010a8e <send_cmd>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	f040 811d 	bne.w	80111e6 <USER_SPI_ioctl+0x2b2>
 8010fac:	f107 030c 	add.w	r3, r7, #12
 8010fb0:	2110      	movs	r1, #16
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7ff fd10 	bl	80109d8 <rcvr_datablock>
 8010fb8:	4603      	mov	r3, r0
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f000 8113 	beq.w	80111e6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010fc0:	7b3b      	ldrb	r3, [r7, #12]
 8010fc2:	099b      	lsrs	r3, r3, #6
 8010fc4:	b2db      	uxtb	r3, r3
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d111      	bne.n	8010fee <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8010fca:	7d7b      	ldrb	r3, [r7, #21]
 8010fcc:	461a      	mov	r2, r3
 8010fce:	7d3b      	ldrb	r3, [r7, #20]
 8010fd0:	021b      	lsls	r3, r3, #8
 8010fd2:	4413      	add	r3, r2
 8010fd4:	461a      	mov	r2, r3
 8010fd6:	7cfb      	ldrb	r3, [r7, #19]
 8010fd8:	041b      	lsls	r3, r3, #16
 8010fda:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8010fde:	4413      	add	r3, r2
 8010fe0:	3301      	adds	r3, #1
 8010fe2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8010fe4:	69fb      	ldr	r3, [r7, #28]
 8010fe6:	029a      	lsls	r2, r3, #10
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	601a      	str	r2, [r3, #0]
 8010fec:	e028      	b.n	8011040 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010fee:	7c7b      	ldrb	r3, [r7, #17]
 8010ff0:	f003 030f 	and.w	r3, r3, #15
 8010ff4:	b2da      	uxtb	r2, r3
 8010ff6:	7dbb      	ldrb	r3, [r7, #22]
 8010ff8:	09db      	lsrs	r3, r3, #7
 8010ffa:	b2db      	uxtb	r3, r3
 8010ffc:	4413      	add	r3, r2
 8010ffe:	b2da      	uxtb	r2, r3
 8011000:	7d7b      	ldrb	r3, [r7, #21]
 8011002:	005b      	lsls	r3, r3, #1
 8011004:	b2db      	uxtb	r3, r3
 8011006:	f003 0306 	and.w	r3, r3, #6
 801100a:	b2db      	uxtb	r3, r3
 801100c:	4413      	add	r3, r2
 801100e:	b2db      	uxtb	r3, r3
 8011010:	3302      	adds	r3, #2
 8011012:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8011016:	7d3b      	ldrb	r3, [r7, #20]
 8011018:	099b      	lsrs	r3, r3, #6
 801101a:	b2db      	uxtb	r3, r3
 801101c:	461a      	mov	r2, r3
 801101e:	7cfb      	ldrb	r3, [r7, #19]
 8011020:	009b      	lsls	r3, r3, #2
 8011022:	441a      	add	r2, r3
 8011024:	7cbb      	ldrb	r3, [r7, #18]
 8011026:	029b      	lsls	r3, r3, #10
 8011028:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801102c:	4413      	add	r3, r2
 801102e:	3301      	adds	r3, #1
 8011030:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8011032:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011036:	3b09      	subs	r3, #9
 8011038:	69fa      	ldr	r2, [r7, #28]
 801103a:	409a      	lsls	r2, r3
 801103c:	683b      	ldr	r3, [r7, #0]
 801103e:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8011040:	2300      	movs	r3, #0
 8011042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8011046:	e0ce      	b.n	80111e6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8011048:	4b71      	ldr	r3, [pc, #452]	@ (8011210 <USER_SPI_ioctl+0x2dc>)
 801104a:	781b      	ldrb	r3, [r3, #0]
 801104c:	f003 0304 	and.w	r3, r3, #4
 8011050:	2b00      	cmp	r3, #0
 8011052:	d031      	beq.n	80110b8 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8011054:	2100      	movs	r1, #0
 8011056:	208d      	movs	r0, #141	@ 0x8d
 8011058:	f7ff fd19 	bl	8010a8e <send_cmd>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	f040 80c3 	bne.w	80111ea <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8011064:	20ff      	movs	r0, #255	@ 0xff
 8011066:	f7ff fc25 	bl	80108b4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 801106a:	f107 030c 	add.w	r3, r7, #12
 801106e:	2110      	movs	r1, #16
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff fcb1 	bl	80109d8 <rcvr_datablock>
 8011076:	4603      	mov	r3, r0
 8011078:	2b00      	cmp	r3, #0
 801107a:	f000 80b6 	beq.w	80111ea <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 801107e:	2330      	movs	r3, #48	@ 0x30
 8011080:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8011084:	e007      	b.n	8011096 <USER_SPI_ioctl+0x162>
 8011086:	20ff      	movs	r0, #255	@ 0xff
 8011088:	f7ff fc14 	bl	80108b4 <xchg_spi>
 801108c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011090:	3b01      	subs	r3, #1
 8011092:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8011096:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801109a:	2b00      	cmp	r3, #0
 801109c:	d1f3      	bne.n	8011086 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 801109e:	7dbb      	ldrb	r3, [r7, #22]
 80110a0:	091b      	lsrs	r3, r3, #4
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	461a      	mov	r2, r3
 80110a6:	2310      	movs	r3, #16
 80110a8:	fa03 f202 	lsl.w	r2, r3, r2
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80110b0:	2300      	movs	r3, #0
 80110b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80110b6:	e098      	b.n	80111ea <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80110b8:	2100      	movs	r1, #0
 80110ba:	2009      	movs	r0, #9
 80110bc:	f7ff fce7 	bl	8010a8e <send_cmd>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	f040 8091 	bne.w	80111ea <USER_SPI_ioctl+0x2b6>
 80110c8:	f107 030c 	add.w	r3, r7, #12
 80110cc:	2110      	movs	r1, #16
 80110ce:	4618      	mov	r0, r3
 80110d0:	f7ff fc82 	bl	80109d8 <rcvr_datablock>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	f000 8087 	beq.w	80111ea <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80110dc:	4b4c      	ldr	r3, [pc, #304]	@ (8011210 <USER_SPI_ioctl+0x2dc>)
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	f003 0302 	and.w	r3, r3, #2
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d012      	beq.n	801110e <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80110e8:	7dbb      	ldrb	r3, [r7, #22]
 80110ea:	005b      	lsls	r3, r3, #1
 80110ec:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80110f0:	7dfa      	ldrb	r2, [r7, #23]
 80110f2:	09d2      	lsrs	r2, r2, #7
 80110f4:	b2d2      	uxtb	r2, r2
 80110f6:	4413      	add	r3, r2
 80110f8:	1c5a      	adds	r2, r3, #1
 80110fa:	7e7b      	ldrb	r3, [r7, #25]
 80110fc:	099b      	lsrs	r3, r3, #6
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	3b01      	subs	r3, #1
 8011102:	fa02 f303 	lsl.w	r3, r2, r3
 8011106:	461a      	mov	r2, r3
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	601a      	str	r2, [r3, #0]
 801110c:	e013      	b.n	8011136 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 801110e:	7dbb      	ldrb	r3, [r7, #22]
 8011110:	109b      	asrs	r3, r3, #2
 8011112:	b29b      	uxth	r3, r3
 8011114:	f003 031f 	and.w	r3, r3, #31
 8011118:	3301      	adds	r3, #1
 801111a:	7dfa      	ldrb	r2, [r7, #23]
 801111c:	00d2      	lsls	r2, r2, #3
 801111e:	f002 0218 	and.w	r2, r2, #24
 8011122:	7df9      	ldrb	r1, [r7, #23]
 8011124:	0949      	lsrs	r1, r1, #5
 8011126:	b2c9      	uxtb	r1, r1
 8011128:	440a      	add	r2, r1
 801112a:	3201      	adds	r2, #1
 801112c:	fb02 f303 	mul.w	r3, r2, r3
 8011130:	461a      	mov	r2, r3
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8011136:	2300      	movs	r3, #0
 8011138:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 801113c:	e055      	b.n	80111ea <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 801113e:	4b34      	ldr	r3, [pc, #208]	@ (8011210 <USER_SPI_ioctl+0x2dc>)
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	f003 0306 	and.w	r3, r3, #6
 8011146:	2b00      	cmp	r3, #0
 8011148:	d051      	beq.n	80111ee <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 801114a:	f107 020c 	add.w	r2, r7, #12
 801114e:	79fb      	ldrb	r3, [r7, #7]
 8011150:	210b      	movs	r1, #11
 8011152:	4618      	mov	r0, r3
 8011154:	f7ff feee 	bl	8010f34 <USER_SPI_ioctl>
 8011158:	4603      	mov	r3, r0
 801115a:	2b00      	cmp	r3, #0
 801115c:	d149      	bne.n	80111f2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801115e:	7b3b      	ldrb	r3, [r7, #12]
 8011160:	099b      	lsrs	r3, r3, #6
 8011162:	b2db      	uxtb	r3, r3
 8011164:	2b00      	cmp	r3, #0
 8011166:	d104      	bne.n	8011172 <USER_SPI_ioctl+0x23e>
 8011168:	7dbb      	ldrb	r3, [r7, #22]
 801116a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801116e:	2b00      	cmp	r3, #0
 8011170:	d041      	beq.n	80111f6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8011172:	683b      	ldr	r3, [r7, #0]
 8011174:	623b      	str	r3, [r7, #32]
 8011176:	6a3b      	ldr	r3, [r7, #32]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801117c:	6a3b      	ldr	r3, [r7, #32]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8011182:	4b23      	ldr	r3, [pc, #140]	@ (8011210 <USER_SPI_ioctl+0x2dc>)
 8011184:	781b      	ldrb	r3, [r3, #0]
 8011186:	f003 0308 	and.w	r3, r3, #8
 801118a:	2b00      	cmp	r3, #0
 801118c:	d105      	bne.n	801119a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 801118e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011190:	025b      	lsls	r3, r3, #9
 8011192:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011196:	025b      	lsls	r3, r3, #9
 8011198:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 801119a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801119c:	2020      	movs	r0, #32
 801119e:	f7ff fc76 	bl	8010a8e <send_cmd>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d128      	bne.n	80111fa <USER_SPI_ioctl+0x2c6>
 80111a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80111aa:	2021      	movs	r0, #33	@ 0x21
 80111ac:	f7ff fc6f 	bl	8010a8e <send_cmd>
 80111b0:	4603      	mov	r3, r0
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d121      	bne.n	80111fa <USER_SPI_ioctl+0x2c6>
 80111b6:	2100      	movs	r1, #0
 80111b8:	2026      	movs	r0, #38	@ 0x26
 80111ba:	f7ff fc68 	bl	8010a8e <send_cmd>
 80111be:	4603      	mov	r3, r0
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d11a      	bne.n	80111fa <USER_SPI_ioctl+0x2c6>
 80111c4:	f247 5030 	movw	r0, #30000	@ 0x7530
 80111c8:	f7ff fbba 	bl	8010940 <wait_ready>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d013      	beq.n	80111fa <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80111d2:	2300      	movs	r3, #0
 80111d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80111d8:	e00f      	b.n	80111fa <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80111da:	2304      	movs	r3, #4
 80111dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80111e0:	e00c      	b.n	80111fc <USER_SPI_ioctl+0x2c8>
		break;
 80111e2:	bf00      	nop
 80111e4:	e00a      	b.n	80111fc <USER_SPI_ioctl+0x2c8>
		break;
 80111e6:	bf00      	nop
 80111e8:	e008      	b.n	80111fc <USER_SPI_ioctl+0x2c8>
		break;
 80111ea:	bf00      	nop
 80111ec:	e006      	b.n	80111fc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80111ee:	bf00      	nop
 80111f0:	e004      	b.n	80111fc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80111f2:	bf00      	nop
 80111f4:	e002      	b.n	80111fc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80111f6:	bf00      	nop
 80111f8:	e000      	b.n	80111fc <USER_SPI_ioctl+0x2c8>
		break;
 80111fa:	bf00      	nop
	}

	despiselect();
 80111fc:	f7ff fbc4 	bl	8010988 <despiselect>

	return res;
 8011200:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8011204:	4618      	mov	r0, r3
 8011206:	3730      	adds	r7, #48	@ 0x30
 8011208:	46bd      	mov	sp, r7
 801120a:	bd80      	pop	{r7, pc}
 801120c:	2000005c 	.word	0x2000005c
 8011210:	20003f34 	.word	0x20003f34

08011214 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	4603      	mov	r3, r0
 801121c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801121e:	79fb      	ldrb	r3, [r7, #7]
 8011220:	4a08      	ldr	r2, [pc, #32]	@ (8011244 <disk_status+0x30>)
 8011222:	009b      	lsls	r3, r3, #2
 8011224:	4413      	add	r3, r2
 8011226:	685b      	ldr	r3, [r3, #4]
 8011228:	685b      	ldr	r3, [r3, #4]
 801122a:	79fa      	ldrb	r2, [r7, #7]
 801122c:	4905      	ldr	r1, [pc, #20]	@ (8011244 <disk_status+0x30>)
 801122e:	440a      	add	r2, r1
 8011230:	7a12      	ldrb	r2, [r2, #8]
 8011232:	4610      	mov	r0, r2
 8011234:	4798      	blx	r3
 8011236:	4603      	mov	r3, r0
 8011238:	73fb      	strb	r3, [r7, #15]
  return stat;
 801123a:	7bfb      	ldrb	r3, [r7, #15]
}
 801123c:	4618      	mov	r0, r3
 801123e:	3710      	adds	r7, #16
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	20003f68 	.word	0x20003f68

08011248 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b084      	sub	sp, #16
 801124c:	af00      	add	r7, sp, #0
 801124e:	4603      	mov	r3, r0
 8011250:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011252:	2300      	movs	r3, #0
 8011254:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011256:	79fb      	ldrb	r3, [r7, #7]
 8011258:	4a0e      	ldr	r2, [pc, #56]	@ (8011294 <disk_initialize+0x4c>)
 801125a:	5cd3      	ldrb	r3, [r2, r3]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d114      	bne.n	801128a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011260:	79fb      	ldrb	r3, [r7, #7]
 8011262:	4a0c      	ldr	r2, [pc, #48]	@ (8011294 <disk_initialize+0x4c>)
 8011264:	009b      	lsls	r3, r3, #2
 8011266:	4413      	add	r3, r2
 8011268:	685b      	ldr	r3, [r3, #4]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	79fa      	ldrb	r2, [r7, #7]
 801126e:	4909      	ldr	r1, [pc, #36]	@ (8011294 <disk_initialize+0x4c>)
 8011270:	440a      	add	r2, r1
 8011272:	7a12      	ldrb	r2, [r2, #8]
 8011274:	4610      	mov	r0, r2
 8011276:	4798      	blx	r3
 8011278:	4603      	mov	r3, r0
 801127a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 801127c:	7bfb      	ldrb	r3, [r7, #15]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d103      	bne.n	801128a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8011282:	79fb      	ldrb	r3, [r7, #7]
 8011284:	4a03      	ldr	r2, [pc, #12]	@ (8011294 <disk_initialize+0x4c>)
 8011286:	2101      	movs	r1, #1
 8011288:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 801128a:	7bfb      	ldrb	r3, [r7, #15]
}
 801128c:	4618      	mov	r0, r3
 801128e:	3710      	adds	r7, #16
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}
 8011294:	20003f68 	.word	0x20003f68

08011298 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011298:	b590      	push	{r4, r7, lr}
 801129a:	b087      	sub	sp, #28
 801129c:	af00      	add	r7, sp, #0
 801129e:	60b9      	str	r1, [r7, #8]
 80112a0:	607a      	str	r2, [r7, #4]
 80112a2:	603b      	str	r3, [r7, #0]
 80112a4:	4603      	mov	r3, r0
 80112a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80112a8:	7bfb      	ldrb	r3, [r7, #15]
 80112aa:	4a0a      	ldr	r2, [pc, #40]	@ (80112d4 <disk_read+0x3c>)
 80112ac:	009b      	lsls	r3, r3, #2
 80112ae:	4413      	add	r3, r2
 80112b0:	685b      	ldr	r3, [r3, #4]
 80112b2:	689c      	ldr	r4, [r3, #8]
 80112b4:	7bfb      	ldrb	r3, [r7, #15]
 80112b6:	4a07      	ldr	r2, [pc, #28]	@ (80112d4 <disk_read+0x3c>)
 80112b8:	4413      	add	r3, r2
 80112ba:	7a18      	ldrb	r0, [r3, #8]
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	687a      	ldr	r2, [r7, #4]
 80112c0:	68b9      	ldr	r1, [r7, #8]
 80112c2:	47a0      	blx	r4
 80112c4:	4603      	mov	r3, r0
 80112c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80112c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	371c      	adds	r7, #28
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd90      	pop	{r4, r7, pc}
 80112d2:	bf00      	nop
 80112d4:	20003f68 	.word	0x20003f68

080112d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80112d8:	b590      	push	{r4, r7, lr}
 80112da:	b087      	sub	sp, #28
 80112dc:	af00      	add	r7, sp, #0
 80112de:	60b9      	str	r1, [r7, #8]
 80112e0:	607a      	str	r2, [r7, #4]
 80112e2:	603b      	str	r3, [r7, #0]
 80112e4:	4603      	mov	r3, r0
 80112e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80112e8:	7bfb      	ldrb	r3, [r7, #15]
 80112ea:	4a0a      	ldr	r2, [pc, #40]	@ (8011314 <disk_write+0x3c>)
 80112ec:	009b      	lsls	r3, r3, #2
 80112ee:	4413      	add	r3, r2
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	68dc      	ldr	r4, [r3, #12]
 80112f4:	7bfb      	ldrb	r3, [r7, #15]
 80112f6:	4a07      	ldr	r2, [pc, #28]	@ (8011314 <disk_write+0x3c>)
 80112f8:	4413      	add	r3, r2
 80112fa:	7a18      	ldrb	r0, [r3, #8]
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	687a      	ldr	r2, [r7, #4]
 8011300:	68b9      	ldr	r1, [r7, #8]
 8011302:	47a0      	blx	r4
 8011304:	4603      	mov	r3, r0
 8011306:	75fb      	strb	r3, [r7, #23]
  return res;
 8011308:	7dfb      	ldrb	r3, [r7, #23]
}
 801130a:	4618      	mov	r0, r3
 801130c:	371c      	adds	r7, #28
 801130e:	46bd      	mov	sp, r7
 8011310:	bd90      	pop	{r4, r7, pc}
 8011312:	bf00      	nop
 8011314:	20003f68 	.word	0x20003f68

08011318 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	4603      	mov	r3, r0
 8011320:	603a      	str	r2, [r7, #0]
 8011322:	71fb      	strb	r3, [r7, #7]
 8011324:	460b      	mov	r3, r1
 8011326:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011328:	79fb      	ldrb	r3, [r7, #7]
 801132a:	4a09      	ldr	r2, [pc, #36]	@ (8011350 <disk_ioctl+0x38>)
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	4413      	add	r3, r2
 8011330:	685b      	ldr	r3, [r3, #4]
 8011332:	691b      	ldr	r3, [r3, #16]
 8011334:	79fa      	ldrb	r2, [r7, #7]
 8011336:	4906      	ldr	r1, [pc, #24]	@ (8011350 <disk_ioctl+0x38>)
 8011338:	440a      	add	r2, r1
 801133a:	7a10      	ldrb	r0, [r2, #8]
 801133c:	79b9      	ldrb	r1, [r7, #6]
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	4798      	blx	r3
 8011342:	4603      	mov	r3, r0
 8011344:	73fb      	strb	r3, [r7, #15]
  return res;
 8011346:	7bfb      	ldrb	r3, [r7, #15]
}
 8011348:	4618      	mov	r0, r3
 801134a:	3710      	adds	r7, #16
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	20003f68 	.word	0x20003f68

08011354 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3301      	adds	r3, #1
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011364:	89fb      	ldrh	r3, [r7, #14]
 8011366:	021b      	lsls	r3, r3, #8
 8011368:	b21a      	sxth	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	b21b      	sxth	r3, r3
 8011370:	4313      	orrs	r3, r2
 8011372:	b21b      	sxth	r3, r3
 8011374:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011376:	89fb      	ldrh	r3, [r7, #14]
}
 8011378:	4618      	mov	r0, r3
 801137a:	3714      	adds	r7, #20
 801137c:	46bd      	mov	sp, r7
 801137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011382:	4770      	bx	lr

08011384 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011384:	b480      	push	{r7}
 8011386:	b085      	sub	sp, #20
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	3303      	adds	r3, #3
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	021b      	lsls	r3, r3, #8
 8011398:	687a      	ldr	r2, [r7, #4]
 801139a:	3202      	adds	r2, #2
 801139c:	7812      	ldrb	r2, [r2, #0]
 801139e:	4313      	orrs	r3, r2
 80113a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	021b      	lsls	r3, r3, #8
 80113a6:	687a      	ldr	r2, [r7, #4]
 80113a8:	3201      	adds	r2, #1
 80113aa:	7812      	ldrb	r2, [r2, #0]
 80113ac:	4313      	orrs	r3, r2
 80113ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	021b      	lsls	r3, r3, #8
 80113b4:	687a      	ldr	r2, [r7, #4]
 80113b6:	7812      	ldrb	r2, [r2, #0]
 80113b8:	4313      	orrs	r3, r2
 80113ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80113bc:	68fb      	ldr	r3, [r7, #12]
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3714      	adds	r7, #20
 80113c2:	46bd      	mov	sp, r7
 80113c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c8:	4770      	bx	lr

080113ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80113ca:	b480      	push	{r7}
 80113cc:	b083      	sub	sp, #12
 80113ce:	af00      	add	r7, sp, #0
 80113d0:	6078      	str	r0, [r7, #4]
 80113d2:	460b      	mov	r3, r1
 80113d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	1c5a      	adds	r2, r3, #1
 80113da:	607a      	str	r2, [r7, #4]
 80113dc:	887a      	ldrh	r2, [r7, #2]
 80113de:	b2d2      	uxtb	r2, r2
 80113e0:	701a      	strb	r2, [r3, #0]
 80113e2:	887b      	ldrh	r3, [r7, #2]
 80113e4:	0a1b      	lsrs	r3, r3, #8
 80113e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	1c5a      	adds	r2, r3, #1
 80113ec:	607a      	str	r2, [r7, #4]
 80113ee:	887a      	ldrh	r2, [r7, #2]
 80113f0:	b2d2      	uxtb	r2, r2
 80113f2:	701a      	strb	r2, [r3, #0]
}
 80113f4:	bf00      	nop
 80113f6:	370c      	adds	r7, #12
 80113f8:	46bd      	mov	sp, r7
 80113fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fe:	4770      	bx	lr

08011400 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011400:	b480      	push	{r7}
 8011402:	b083      	sub	sp, #12
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	1c5a      	adds	r2, r3, #1
 801140e:	607a      	str	r2, [r7, #4]
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	b2d2      	uxtb	r2, r2
 8011414:	701a      	strb	r2, [r3, #0]
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	0a1b      	lsrs	r3, r3, #8
 801141a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	607a      	str	r2, [r7, #4]
 8011422:	683a      	ldr	r2, [r7, #0]
 8011424:	b2d2      	uxtb	r2, r2
 8011426:	701a      	strb	r2, [r3, #0]
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	0a1b      	lsrs	r3, r3, #8
 801142c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	1c5a      	adds	r2, r3, #1
 8011432:	607a      	str	r2, [r7, #4]
 8011434:	683a      	ldr	r2, [r7, #0]
 8011436:	b2d2      	uxtb	r2, r2
 8011438:	701a      	strb	r2, [r3, #0]
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	0a1b      	lsrs	r3, r3, #8
 801143e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	1c5a      	adds	r2, r3, #1
 8011444:	607a      	str	r2, [r7, #4]
 8011446:	683a      	ldr	r2, [r7, #0]
 8011448:	b2d2      	uxtb	r2, r2
 801144a:	701a      	strb	r2, [r3, #0]
}
 801144c:	bf00      	nop
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr

08011458 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011458:	b480      	push	{r7}
 801145a:	b087      	sub	sp, #28
 801145c:	af00      	add	r7, sp, #0
 801145e:	60f8      	str	r0, [r7, #12]
 8011460:	60b9      	str	r1, [r7, #8]
 8011462:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d00d      	beq.n	801148e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011472:	693a      	ldr	r2, [r7, #16]
 8011474:	1c53      	adds	r3, r2, #1
 8011476:	613b      	str	r3, [r7, #16]
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	1c59      	adds	r1, r3, #1
 801147c:	6179      	str	r1, [r7, #20]
 801147e:	7812      	ldrb	r2, [r2, #0]
 8011480:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	3b01      	subs	r3, #1
 8011486:	607b      	str	r3, [r7, #4]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d1f1      	bne.n	8011472 <mem_cpy+0x1a>
	}
}
 801148e:	bf00      	nop
 8011490:	371c      	adds	r7, #28
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr

0801149a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801149a:	b480      	push	{r7}
 801149c:	b087      	sub	sp, #28
 801149e:	af00      	add	r7, sp, #0
 80114a0:	60f8      	str	r0, [r7, #12]
 80114a2:	60b9      	str	r1, [r7, #8]
 80114a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	1c5a      	adds	r2, r3, #1
 80114ae:	617a      	str	r2, [r7, #20]
 80114b0:	68ba      	ldr	r2, [r7, #8]
 80114b2:	b2d2      	uxtb	r2, r2
 80114b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	3b01      	subs	r3, #1
 80114ba:	607b      	str	r3, [r7, #4]
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d1f3      	bne.n	80114aa <mem_set+0x10>
}
 80114c2:	bf00      	nop
 80114c4:	bf00      	nop
 80114c6:	371c      	adds	r7, #28
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr

080114d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80114d0:	b480      	push	{r7}
 80114d2:	b089      	sub	sp, #36	@ 0x24
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	60b9      	str	r1, [r7, #8]
 80114da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	61fb      	str	r3, [r7, #28]
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80114e4:	2300      	movs	r3, #0
 80114e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	1c5a      	adds	r2, r3, #1
 80114ec:	61fa      	str	r2, [r7, #28]
 80114ee:	781b      	ldrb	r3, [r3, #0]
 80114f0:	4619      	mov	r1, r3
 80114f2:	69bb      	ldr	r3, [r7, #24]
 80114f4:	1c5a      	adds	r2, r3, #1
 80114f6:	61ba      	str	r2, [r7, #24]
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	1acb      	subs	r3, r1, r3
 80114fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	3b01      	subs	r3, #1
 8011502:	607b      	str	r3, [r7, #4]
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d002      	beq.n	8011510 <mem_cmp+0x40>
 801150a:	697b      	ldr	r3, [r7, #20]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d0eb      	beq.n	80114e8 <mem_cmp+0x18>

	return r;
 8011510:	697b      	ldr	r3, [r7, #20]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3724      	adds	r7, #36	@ 0x24
 8011516:	46bd      	mov	sp, r7
 8011518:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151c:	4770      	bx	lr

0801151e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801151e:	b480      	push	{r7}
 8011520:	b083      	sub	sp, #12
 8011522:	af00      	add	r7, sp, #0
 8011524:	6078      	str	r0, [r7, #4]
 8011526:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011528:	e002      	b.n	8011530 <chk_chr+0x12>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	3301      	adds	r3, #1
 801152e:	607b      	str	r3, [r7, #4]
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	781b      	ldrb	r3, [r3, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d005      	beq.n	8011544 <chk_chr+0x26>
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	781b      	ldrb	r3, [r3, #0]
 801153c:	461a      	mov	r2, r3
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	4293      	cmp	r3, r2
 8011542:	d1f2      	bne.n	801152a <chk_chr+0xc>
	return *str;
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	781b      	ldrb	r3, [r3, #0]
}
 8011548:	4618      	mov	r0, r3
 801154a:	370c      	adds	r7, #12
 801154c:	46bd      	mov	sp, r7
 801154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011552:	4770      	bx	lr

08011554 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011554:	b480      	push	{r7}
 8011556:	b085      	sub	sp, #20
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
 801155c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801155e:	2300      	movs	r3, #0
 8011560:	60bb      	str	r3, [r7, #8]
 8011562:	68bb      	ldr	r3, [r7, #8]
 8011564:	60fb      	str	r3, [r7, #12]
 8011566:	e029      	b.n	80115bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011568:	4a27      	ldr	r2, [pc, #156]	@ (8011608 <chk_lock+0xb4>)
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	011b      	lsls	r3, r3, #4
 801156e:	4413      	add	r3, r2
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d01d      	beq.n	80115b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011576:	4a24      	ldr	r2, [pc, #144]	@ (8011608 <chk_lock+0xb4>)
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	011b      	lsls	r3, r3, #4
 801157c:	4413      	add	r3, r2
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	429a      	cmp	r2, r3
 8011586:	d116      	bne.n	80115b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011588:	4a1f      	ldr	r2, [pc, #124]	@ (8011608 <chk_lock+0xb4>)
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	011b      	lsls	r3, r3, #4
 801158e:	4413      	add	r3, r2
 8011590:	3304      	adds	r3, #4
 8011592:	681a      	ldr	r2, [r3, #0]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011598:	429a      	cmp	r2, r3
 801159a:	d10c      	bne.n	80115b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801159c:	4a1a      	ldr	r2, [pc, #104]	@ (8011608 <chk_lock+0xb4>)
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	011b      	lsls	r3, r3, #4
 80115a2:	4413      	add	r3, r2
 80115a4:	3308      	adds	r3, #8
 80115a6:	681a      	ldr	r2, [r3, #0]
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80115ac:	429a      	cmp	r2, r3
 80115ae:	d102      	bne.n	80115b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80115b0:	e007      	b.n	80115c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80115b2:	2301      	movs	r3, #1
 80115b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	3301      	adds	r3, #1
 80115ba:	60fb      	str	r3, [r7, #12]
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2b01      	cmp	r3, #1
 80115c0:	d9d2      	bls.n	8011568 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	2b02      	cmp	r3, #2
 80115c6:	d109      	bne.n	80115dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d102      	bne.n	80115d4 <chk_lock+0x80>
 80115ce:	683b      	ldr	r3, [r7, #0]
 80115d0:	2b02      	cmp	r3, #2
 80115d2:	d101      	bne.n	80115d8 <chk_lock+0x84>
 80115d4:	2300      	movs	r3, #0
 80115d6:	e010      	b.n	80115fa <chk_lock+0xa6>
 80115d8:	2312      	movs	r3, #18
 80115da:	e00e      	b.n	80115fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d108      	bne.n	80115f4 <chk_lock+0xa0>
 80115e2:	4a09      	ldr	r2, [pc, #36]	@ (8011608 <chk_lock+0xb4>)
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	011b      	lsls	r3, r3, #4
 80115e8:	4413      	add	r3, r2
 80115ea:	330c      	adds	r3, #12
 80115ec:	881b      	ldrh	r3, [r3, #0]
 80115ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80115f2:	d101      	bne.n	80115f8 <chk_lock+0xa4>
 80115f4:	2310      	movs	r3, #16
 80115f6:	e000      	b.n	80115fa <chk_lock+0xa6>
 80115f8:	2300      	movs	r3, #0
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3714      	adds	r7, #20
 80115fe:	46bd      	mov	sp, r7
 8011600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011604:	4770      	bx	lr
 8011606:	bf00      	nop
 8011608:	20003f48 	.word	0x20003f48

0801160c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011612:	2300      	movs	r3, #0
 8011614:	607b      	str	r3, [r7, #4]
 8011616:	e002      	b.n	801161e <enq_lock+0x12>
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	3301      	adds	r3, #1
 801161c:	607b      	str	r3, [r7, #4]
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2b01      	cmp	r3, #1
 8011622:	d806      	bhi.n	8011632 <enq_lock+0x26>
 8011624:	4a09      	ldr	r2, [pc, #36]	@ (801164c <enq_lock+0x40>)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	011b      	lsls	r3, r3, #4
 801162a:	4413      	add	r3, r2
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1f2      	bne.n	8011618 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2b02      	cmp	r3, #2
 8011636:	bf14      	ite	ne
 8011638:	2301      	movne	r3, #1
 801163a:	2300      	moveq	r3, #0
 801163c:	b2db      	uxtb	r3, r3
}
 801163e:	4618      	mov	r0, r3
 8011640:	370c      	adds	r7, #12
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	20003f48 	.word	0x20003f48

08011650 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
 8011658:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801165a:	2300      	movs	r3, #0
 801165c:	60fb      	str	r3, [r7, #12]
 801165e:	e01f      	b.n	80116a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011660:	4a41      	ldr	r2, [pc, #260]	@ (8011768 <inc_lock+0x118>)
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	011b      	lsls	r3, r3, #4
 8011666:	4413      	add	r3, r2
 8011668:	681a      	ldr	r2, [r3, #0]
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	429a      	cmp	r2, r3
 8011670:	d113      	bne.n	801169a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011672:	4a3d      	ldr	r2, [pc, #244]	@ (8011768 <inc_lock+0x118>)
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	011b      	lsls	r3, r3, #4
 8011678:	4413      	add	r3, r2
 801167a:	3304      	adds	r3, #4
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011682:	429a      	cmp	r2, r3
 8011684:	d109      	bne.n	801169a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011686:	4a38      	ldr	r2, [pc, #224]	@ (8011768 <inc_lock+0x118>)
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	011b      	lsls	r3, r3, #4
 801168c:	4413      	add	r3, r2
 801168e:	3308      	adds	r3, #8
 8011690:	681a      	ldr	r2, [r3, #0]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011696:	429a      	cmp	r2, r3
 8011698:	d006      	beq.n	80116a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	3301      	adds	r3, #1
 801169e:	60fb      	str	r3, [r7, #12]
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d9dc      	bls.n	8011660 <inc_lock+0x10>
 80116a6:	e000      	b.n	80116aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80116a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2b02      	cmp	r3, #2
 80116ae:	d132      	bne.n	8011716 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80116b0:	2300      	movs	r3, #0
 80116b2:	60fb      	str	r3, [r7, #12]
 80116b4:	e002      	b.n	80116bc <inc_lock+0x6c>
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	3301      	adds	r3, #1
 80116ba:	60fb      	str	r3, [r7, #12]
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2b01      	cmp	r3, #1
 80116c0:	d806      	bhi.n	80116d0 <inc_lock+0x80>
 80116c2:	4a29      	ldr	r2, [pc, #164]	@ (8011768 <inc_lock+0x118>)
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	011b      	lsls	r3, r3, #4
 80116c8:	4413      	add	r3, r2
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d1f2      	bne.n	80116b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2b02      	cmp	r3, #2
 80116d4:	d101      	bne.n	80116da <inc_lock+0x8a>
 80116d6:	2300      	movs	r3, #0
 80116d8:	e040      	b.n	801175c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	4922      	ldr	r1, [pc, #136]	@ (8011768 <inc_lock+0x118>)
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	011b      	lsls	r3, r3, #4
 80116e4:	440b      	add	r3, r1
 80116e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	689a      	ldr	r2, [r3, #8]
 80116ec:	491e      	ldr	r1, [pc, #120]	@ (8011768 <inc_lock+0x118>)
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	011b      	lsls	r3, r3, #4
 80116f2:	440b      	add	r3, r1
 80116f4:	3304      	adds	r3, #4
 80116f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	695a      	ldr	r2, [r3, #20]
 80116fc:	491a      	ldr	r1, [pc, #104]	@ (8011768 <inc_lock+0x118>)
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	011b      	lsls	r3, r3, #4
 8011702:	440b      	add	r3, r1
 8011704:	3308      	adds	r3, #8
 8011706:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011708:	4a17      	ldr	r2, [pc, #92]	@ (8011768 <inc_lock+0x118>)
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	011b      	lsls	r3, r3, #4
 801170e:	4413      	add	r3, r2
 8011710:	330c      	adds	r3, #12
 8011712:	2200      	movs	r2, #0
 8011714:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d009      	beq.n	8011730 <inc_lock+0xe0>
 801171c:	4a12      	ldr	r2, [pc, #72]	@ (8011768 <inc_lock+0x118>)
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	011b      	lsls	r3, r3, #4
 8011722:	4413      	add	r3, r2
 8011724:	330c      	adds	r3, #12
 8011726:	881b      	ldrh	r3, [r3, #0]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d001      	beq.n	8011730 <inc_lock+0xe0>
 801172c:	2300      	movs	r3, #0
 801172e:	e015      	b.n	801175c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011730:	683b      	ldr	r3, [r7, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d108      	bne.n	8011748 <inc_lock+0xf8>
 8011736:	4a0c      	ldr	r2, [pc, #48]	@ (8011768 <inc_lock+0x118>)
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	011b      	lsls	r3, r3, #4
 801173c:	4413      	add	r3, r2
 801173e:	330c      	adds	r3, #12
 8011740:	881b      	ldrh	r3, [r3, #0]
 8011742:	3301      	adds	r3, #1
 8011744:	b29a      	uxth	r2, r3
 8011746:	e001      	b.n	801174c <inc_lock+0xfc>
 8011748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801174c:	4906      	ldr	r1, [pc, #24]	@ (8011768 <inc_lock+0x118>)
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	011b      	lsls	r3, r3, #4
 8011752:	440b      	add	r3, r1
 8011754:	330c      	adds	r3, #12
 8011756:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	3301      	adds	r3, #1
}
 801175c:	4618      	mov	r0, r3
 801175e:	3714      	adds	r7, #20
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr
 8011768:	20003f48 	.word	0x20003f48

0801176c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801176c:	b480      	push	{r7}
 801176e:	b085      	sub	sp, #20
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	3b01      	subs	r3, #1
 8011778:	607b      	str	r3, [r7, #4]
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	2b01      	cmp	r3, #1
 801177e:	d825      	bhi.n	80117cc <dec_lock+0x60>
		n = Files[i].ctr;
 8011780:	4a17      	ldr	r2, [pc, #92]	@ (80117e0 <dec_lock+0x74>)
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	011b      	lsls	r3, r3, #4
 8011786:	4413      	add	r3, r2
 8011788:	330c      	adds	r3, #12
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801178e:	89fb      	ldrh	r3, [r7, #14]
 8011790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011794:	d101      	bne.n	801179a <dec_lock+0x2e>
 8011796:	2300      	movs	r3, #0
 8011798:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801179a:	89fb      	ldrh	r3, [r7, #14]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d002      	beq.n	80117a6 <dec_lock+0x3a>
 80117a0:	89fb      	ldrh	r3, [r7, #14]
 80117a2:	3b01      	subs	r3, #1
 80117a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80117a6:	4a0e      	ldr	r2, [pc, #56]	@ (80117e0 <dec_lock+0x74>)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	011b      	lsls	r3, r3, #4
 80117ac:	4413      	add	r3, r2
 80117ae:	330c      	adds	r3, #12
 80117b0:	89fa      	ldrh	r2, [r7, #14]
 80117b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80117b4:	89fb      	ldrh	r3, [r7, #14]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d105      	bne.n	80117c6 <dec_lock+0x5a>
 80117ba:	4a09      	ldr	r2, [pc, #36]	@ (80117e0 <dec_lock+0x74>)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	011b      	lsls	r3, r3, #4
 80117c0:	4413      	add	r3, r2
 80117c2:	2200      	movs	r2, #0
 80117c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80117c6:	2300      	movs	r3, #0
 80117c8:	737b      	strb	r3, [r7, #13]
 80117ca:	e001      	b.n	80117d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80117cc:	2302      	movs	r3, #2
 80117ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80117d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80117d2:	4618      	mov	r0, r3
 80117d4:	3714      	adds	r7, #20
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop
 80117e0:	20003f48 	.word	0x20003f48

080117e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80117e4:	b480      	push	{r7}
 80117e6:	b085      	sub	sp, #20
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80117ec:	2300      	movs	r3, #0
 80117ee:	60fb      	str	r3, [r7, #12]
 80117f0:	e010      	b.n	8011814 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80117f2:	4a0d      	ldr	r2, [pc, #52]	@ (8011828 <clear_lock+0x44>)
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	011b      	lsls	r3, r3, #4
 80117f8:	4413      	add	r3, r2
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	429a      	cmp	r2, r3
 8011800:	d105      	bne.n	801180e <clear_lock+0x2a>
 8011802:	4a09      	ldr	r2, [pc, #36]	@ (8011828 <clear_lock+0x44>)
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	011b      	lsls	r3, r3, #4
 8011808:	4413      	add	r3, r2
 801180a:	2200      	movs	r2, #0
 801180c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	3301      	adds	r3, #1
 8011812:	60fb      	str	r3, [r7, #12]
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2b01      	cmp	r3, #1
 8011818:	d9eb      	bls.n	80117f2 <clear_lock+0xe>
	}
}
 801181a:	bf00      	nop
 801181c:	bf00      	nop
 801181e:	3714      	adds	r7, #20
 8011820:	46bd      	mov	sp, r7
 8011822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011826:	4770      	bx	lr
 8011828:	20003f48 	.word	0x20003f48

0801182c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b086      	sub	sp, #24
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011834:	2300      	movs	r3, #0
 8011836:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	78db      	ldrb	r3, [r3, #3]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d034      	beq.n	80118aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011844:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	7858      	ldrb	r0, [r3, #1]
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011850:	2301      	movs	r3, #1
 8011852:	697a      	ldr	r2, [r7, #20]
 8011854:	f7ff fd40 	bl	80112d8 <disk_write>
 8011858:	4603      	mov	r3, r0
 801185a:	2b00      	cmp	r3, #0
 801185c:	d002      	beq.n	8011864 <sync_window+0x38>
			res = FR_DISK_ERR;
 801185e:	2301      	movs	r3, #1
 8011860:	73fb      	strb	r3, [r7, #15]
 8011862:	e022      	b.n	80118aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6a1b      	ldr	r3, [r3, #32]
 801186e:	697a      	ldr	r2, [r7, #20]
 8011870:	1ad2      	subs	r2, r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	699b      	ldr	r3, [r3, #24]
 8011876:	429a      	cmp	r2, r3
 8011878:	d217      	bcs.n	80118aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	789b      	ldrb	r3, [r3, #2]
 801187e:	613b      	str	r3, [r7, #16]
 8011880:	e010      	b.n	80118a4 <sync_window+0x78>
					wsect += fs->fsize;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	699b      	ldr	r3, [r3, #24]
 8011886:	697a      	ldr	r2, [r7, #20]
 8011888:	4413      	add	r3, r2
 801188a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	7858      	ldrb	r0, [r3, #1]
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8011896:	2301      	movs	r3, #1
 8011898:	697a      	ldr	r2, [r7, #20]
 801189a:	f7ff fd1d 	bl	80112d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	3b01      	subs	r3, #1
 80118a2:	613b      	str	r3, [r7, #16]
 80118a4:	693b      	ldr	r3, [r7, #16]
 80118a6:	2b01      	cmp	r3, #1
 80118a8:	d8eb      	bhi.n	8011882 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80118aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3718      	adds	r7, #24
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80118be:	2300      	movs	r3, #0
 80118c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118c6:	683a      	ldr	r2, [r7, #0]
 80118c8:	429a      	cmp	r2, r3
 80118ca:	d01b      	beq.n	8011904 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f7ff ffad 	bl	801182c <sync_window>
 80118d2:	4603      	mov	r3, r0
 80118d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80118d6:	7bfb      	ldrb	r3, [r7, #15]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d113      	bne.n	8011904 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	7858      	ldrb	r0, [r3, #1]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80118e6:	2301      	movs	r3, #1
 80118e8:	683a      	ldr	r2, [r7, #0]
 80118ea:	f7ff fcd5 	bl	8011298 <disk_read>
 80118ee:	4603      	mov	r3, r0
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d004      	beq.n	80118fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80118f4:	f04f 33ff 	mov.w	r3, #4294967295
 80118f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80118fa:	2301      	movs	r3, #1
 80118fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	683a      	ldr	r2, [r7, #0]
 8011902:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8011904:	7bfb      	ldrb	r3, [r7, #15]
}
 8011906:	4618      	mov	r0, r3
 8011908:	3710      	adds	r7, #16
 801190a:	46bd      	mov	sp, r7
 801190c:	bd80      	pop	{r7, pc}
	...

08011910 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7ff ff87 	bl	801182c <sync_window>
 801191e:	4603      	mov	r3, r0
 8011920:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011922:	7bfb      	ldrb	r3, [r7, #15]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d158      	bne.n	80119da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	2b03      	cmp	r3, #3
 801192e:	d148      	bne.n	80119c2 <sync_fs+0xb2>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	791b      	ldrb	r3, [r3, #4]
 8011934:	2b01      	cmp	r3, #1
 8011936:	d144      	bne.n	80119c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	3330      	adds	r3, #48	@ 0x30
 801193c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011940:	2100      	movs	r1, #0
 8011942:	4618      	mov	r0, r3
 8011944:	f7ff fda9 	bl	801149a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3330      	adds	r3, #48	@ 0x30
 801194c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011950:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011954:	4618      	mov	r0, r3
 8011956:	f7ff fd38 	bl	80113ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	3330      	adds	r3, #48	@ 0x30
 801195e:	4921      	ldr	r1, [pc, #132]	@ (80119e4 <sync_fs+0xd4>)
 8011960:	4618      	mov	r0, r3
 8011962:	f7ff fd4d 	bl	8011400 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	3330      	adds	r3, #48	@ 0x30
 801196a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 801196e:	491e      	ldr	r1, [pc, #120]	@ (80119e8 <sync_fs+0xd8>)
 8011970:	4618      	mov	r0, r3
 8011972:	f7ff fd45 	bl	8011400 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	3330      	adds	r3, #48	@ 0x30
 801197a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	691b      	ldr	r3, [r3, #16]
 8011982:	4619      	mov	r1, r3
 8011984:	4610      	mov	r0, r2
 8011986:	f7ff fd3b 	bl	8011400 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	3330      	adds	r3, #48	@ 0x30
 801198e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	4619      	mov	r1, r3
 8011998:	4610      	mov	r0, r2
 801199a:	f7ff fd31 	bl	8011400 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	69db      	ldr	r3, [r3, #28]
 80119a2:	1c5a      	adds	r2, r3, #1
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	7858      	ldrb	r0, [r3, #1]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119b6:	2301      	movs	r3, #1
 80119b8:	f7ff fc8e 	bl	80112d8 <disk_write>
			fs->fsi_flag = 0;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2200      	movs	r2, #0
 80119c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	785b      	ldrb	r3, [r3, #1]
 80119c6:	2200      	movs	r2, #0
 80119c8:	2100      	movs	r1, #0
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7ff fca4 	bl	8011318 <disk_ioctl>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d001      	beq.n	80119da <sync_fs+0xca>
 80119d6:	2301      	movs	r3, #1
 80119d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80119da:	7bfb      	ldrb	r3, [r7, #15]
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3710      	adds	r7, #16
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	41615252 	.word	0x41615252
 80119e8:	61417272 	.word	0x61417272

080119ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	3b02      	subs	r3, #2
 80119fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	695b      	ldr	r3, [r3, #20]
 8011a00:	3b02      	subs	r3, #2
 8011a02:	683a      	ldr	r2, [r7, #0]
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d301      	bcc.n	8011a0c <clust2sect+0x20>
 8011a08:	2300      	movs	r3, #0
 8011a0a:	e008      	b.n	8011a1e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	895b      	ldrh	r3, [r3, #10]
 8011a10:	461a      	mov	r2, r3
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	fb03 f202 	mul.w	r2, r3, r2
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a1c:	4413      	add	r3, r2
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	370c      	adds	r7, #12
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr

08011a2a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011a2a:	b580      	push	{r7, lr}
 8011a2c:	b086      	sub	sp, #24
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
 8011a32:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	681b      	ldr	r3, [r3, #0]
 8011a38:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d904      	bls.n	8011a4a <get_fat+0x20>
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	695b      	ldr	r3, [r3, #20]
 8011a44:	683a      	ldr	r2, [r7, #0]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d302      	bcc.n	8011a50 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011a4a:	2301      	movs	r3, #1
 8011a4c:	617b      	str	r3, [r7, #20]
 8011a4e:	e08e      	b.n	8011b6e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011a50:	f04f 33ff 	mov.w	r3, #4294967295
 8011a54:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	2b03      	cmp	r3, #3
 8011a5c:	d061      	beq.n	8011b22 <get_fat+0xf8>
 8011a5e:	2b03      	cmp	r3, #3
 8011a60:	dc7b      	bgt.n	8011b5a <get_fat+0x130>
 8011a62:	2b01      	cmp	r3, #1
 8011a64:	d002      	beq.n	8011a6c <get_fat+0x42>
 8011a66:	2b02      	cmp	r3, #2
 8011a68:	d041      	beq.n	8011aee <get_fat+0xc4>
 8011a6a:	e076      	b.n	8011b5a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	60fb      	str	r3, [r7, #12]
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	085b      	lsrs	r3, r3, #1
 8011a74:	68fa      	ldr	r2, [r7, #12]
 8011a76:	4413      	add	r3, r2
 8011a78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	6a1a      	ldr	r2, [r3, #32]
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	0a5b      	lsrs	r3, r3, #9
 8011a82:	4413      	add	r3, r2
 8011a84:	4619      	mov	r1, r3
 8011a86:	6938      	ldr	r0, [r7, #16]
 8011a88:	f7ff ff14 	bl	80118b4 <move_window>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d166      	bne.n	8011b60 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	1c5a      	adds	r2, r3, #1
 8011a96:	60fa      	str	r2, [r7, #12]
 8011a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a9c:	693a      	ldr	r2, [r7, #16]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011aa4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	6a1a      	ldr	r2, [r3, #32]
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	0a5b      	lsrs	r3, r3, #9
 8011aae:	4413      	add	r3, r2
 8011ab0:	4619      	mov	r1, r3
 8011ab2:	6938      	ldr	r0, [r7, #16]
 8011ab4:	f7ff fefe 	bl	80118b4 <move_window>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d152      	bne.n	8011b64 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ac4:	693a      	ldr	r2, [r7, #16]
 8011ac6:	4413      	add	r3, r2
 8011ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011acc:	021b      	lsls	r3, r3, #8
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	f003 0301 	and.w	r3, r3, #1
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d002      	beq.n	8011ae4 <get_fat+0xba>
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	091b      	lsrs	r3, r3, #4
 8011ae2:	e002      	b.n	8011aea <get_fat+0xc0>
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011aea:	617b      	str	r3, [r7, #20]
			break;
 8011aec:	e03f      	b.n	8011b6e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	6a1a      	ldr	r2, [r3, #32]
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	0a1b      	lsrs	r3, r3, #8
 8011af6:	4413      	add	r3, r2
 8011af8:	4619      	mov	r1, r3
 8011afa:	6938      	ldr	r0, [r7, #16]
 8011afc:	f7ff feda 	bl	80118b4 <move_window>
 8011b00:	4603      	mov	r3, r0
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d130      	bne.n	8011b68 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	005b      	lsls	r3, r3, #1
 8011b10:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011b14:	4413      	add	r3, r2
 8011b16:	4618      	mov	r0, r3
 8011b18:	f7ff fc1c 	bl	8011354 <ld_word>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	617b      	str	r3, [r7, #20]
			break;
 8011b20:	e025      	b.n	8011b6e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011b22:	693b      	ldr	r3, [r7, #16]
 8011b24:	6a1a      	ldr	r2, [r3, #32]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	09db      	lsrs	r3, r3, #7
 8011b2a:	4413      	add	r3, r2
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	6938      	ldr	r0, [r7, #16]
 8011b30:	f7ff fec0 	bl	80118b4 <move_window>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d118      	bne.n	8011b6c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011b3a:	693b      	ldr	r3, [r7, #16]
 8011b3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011b40:	683b      	ldr	r3, [r7, #0]
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011b48:	4413      	add	r3, r2
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7ff fc1a 	bl	8011384 <ld_dword>
 8011b50:	4603      	mov	r3, r0
 8011b52:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8011b56:	617b      	str	r3, [r7, #20]
			break;
 8011b58:	e009      	b.n	8011b6e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	617b      	str	r3, [r7, #20]
 8011b5e:	e006      	b.n	8011b6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b60:	bf00      	nop
 8011b62:	e004      	b.n	8011b6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011b64:	bf00      	nop
 8011b66:	e002      	b.n	8011b6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011b68:	bf00      	nop
 8011b6a:	e000      	b.n	8011b6e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011b6c:	bf00      	nop
		}
	}

	return val;
 8011b6e:	697b      	ldr	r3, [r7, #20]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3718      	adds	r7, #24
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011b78:	b590      	push	{r4, r7, lr}
 8011b7a:	b089      	sub	sp, #36	@ 0x24
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	60f8      	str	r0, [r7, #12]
 8011b80:	60b9      	str	r1, [r7, #8]
 8011b82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011b84:	2302      	movs	r3, #2
 8011b86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	f240 80d9 	bls.w	8011d42 <put_fat+0x1ca>
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	695b      	ldr	r3, [r3, #20]
 8011b94:	68ba      	ldr	r2, [r7, #8]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	f080 80d3 	bcs.w	8011d42 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	2b03      	cmp	r3, #3
 8011ba2:	f000 8096 	beq.w	8011cd2 <put_fat+0x15a>
 8011ba6:	2b03      	cmp	r3, #3
 8011ba8:	f300 80cb 	bgt.w	8011d42 <put_fat+0x1ca>
 8011bac:	2b01      	cmp	r3, #1
 8011bae:	d002      	beq.n	8011bb6 <put_fat+0x3e>
 8011bb0:	2b02      	cmp	r3, #2
 8011bb2:	d06e      	beq.n	8011c92 <put_fat+0x11a>
 8011bb4:	e0c5      	b.n	8011d42 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	61bb      	str	r3, [r7, #24]
 8011bba:	69bb      	ldr	r3, [r7, #24]
 8011bbc:	085b      	lsrs	r3, r3, #1
 8011bbe:	69ba      	ldr	r2, [r7, #24]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	6a1a      	ldr	r2, [r3, #32]
 8011bc8:	69bb      	ldr	r3, [r7, #24]
 8011bca:	0a5b      	lsrs	r3, r3, #9
 8011bcc:	4413      	add	r3, r2
 8011bce:	4619      	mov	r1, r3
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f7ff fe6f 	bl	80118b4 <move_window>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011bda:	7ffb      	ldrb	r3, [r7, #31]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	f040 80a9 	bne.w	8011d34 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011be8:	69bb      	ldr	r3, [r7, #24]
 8011bea:	1c59      	adds	r1, r3, #1
 8011bec:	61b9      	str	r1, [r7, #24]
 8011bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011bf2:	4413      	add	r3, r2
 8011bf4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	f003 0301 	and.w	r3, r3, #1
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d00d      	beq.n	8011c1c <put_fat+0xa4>
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	b25b      	sxtb	r3, r3
 8011c06:	f003 030f 	and.w	r3, r3, #15
 8011c0a:	b25a      	sxtb	r2, r3
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	b2db      	uxtb	r3, r3
 8011c10:	011b      	lsls	r3, r3, #4
 8011c12:	b25b      	sxtb	r3, r3
 8011c14:	4313      	orrs	r3, r2
 8011c16:	b25b      	sxtb	r3, r3
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	e001      	b.n	8011c20 <put_fat+0xa8>
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	b2db      	uxtb	r3, r3
 8011c20:	697a      	ldr	r2, [r7, #20]
 8011c22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2201      	movs	r2, #1
 8011c28:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6a1a      	ldr	r2, [r3, #32]
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	0a5b      	lsrs	r3, r3, #9
 8011c32:	4413      	add	r3, r2
 8011c34:	4619      	mov	r1, r3
 8011c36:	68f8      	ldr	r0, [r7, #12]
 8011c38:	f7ff fe3c 	bl	80118b4 <move_window>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011c40:	7ffb      	ldrb	r3, [r7, #31]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d178      	bne.n	8011d38 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011c4c:	69bb      	ldr	r3, [r7, #24]
 8011c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c52:	4413      	add	r3, r2
 8011c54:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	f003 0301 	and.w	r3, r3, #1
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d003      	beq.n	8011c68 <put_fat+0xf0>
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	091b      	lsrs	r3, r3, #4
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	e00e      	b.n	8011c86 <put_fat+0x10e>
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	b25b      	sxtb	r3, r3
 8011c6e:	f023 030f 	bic.w	r3, r3, #15
 8011c72:	b25a      	sxtb	r2, r3
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	0a1b      	lsrs	r3, r3, #8
 8011c78:	b25b      	sxtb	r3, r3
 8011c7a:	f003 030f 	and.w	r3, r3, #15
 8011c7e:	b25b      	sxtb	r3, r3
 8011c80:	4313      	orrs	r3, r2
 8011c82:	b25b      	sxtb	r3, r3
 8011c84:	b2db      	uxtb	r3, r3
 8011c86:	697a      	ldr	r2, [r7, #20]
 8011c88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2201      	movs	r2, #1
 8011c8e:	70da      	strb	r2, [r3, #3]
			break;
 8011c90:	e057      	b.n	8011d42 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	6a1a      	ldr	r2, [r3, #32]
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	0a1b      	lsrs	r3, r3, #8
 8011c9a:	4413      	add	r3, r2
 8011c9c:	4619      	mov	r1, r3
 8011c9e:	68f8      	ldr	r0, [r7, #12]
 8011ca0:	f7ff fe08 	bl	80118b4 <move_window>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ca8:	7ffb      	ldrb	r3, [r7, #31]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d146      	bne.n	8011d3c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	005b      	lsls	r3, r3, #1
 8011cb8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8011cbc:	4413      	add	r3, r2
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	b292      	uxth	r2, r2
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f7ff fb80 	bl	80113ca <st_word>
			fs->wflag = 1;
 8011cca:	68fb      	ldr	r3, [r7, #12]
 8011ccc:	2201      	movs	r2, #1
 8011cce:	70da      	strb	r2, [r3, #3]
			break;
 8011cd0:	e037      	b.n	8011d42 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	6a1a      	ldr	r2, [r3, #32]
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	09db      	lsrs	r3, r3, #7
 8011cda:	4413      	add	r3, r2
 8011cdc:	4619      	mov	r1, r3
 8011cde:	68f8      	ldr	r0, [r7, #12]
 8011ce0:	f7ff fde8 	bl	80118b4 <move_window>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ce8:	7ffb      	ldrb	r3, [r7, #31]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d128      	bne.n	8011d40 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	009b      	lsls	r3, r3, #2
 8011cfe:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011d02:	4413      	add	r3, r2
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7ff fb3d 	bl	8011384 <ld_dword>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8011d10:	4323      	orrs	r3, r4
 8011d12:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011d1a:	68bb      	ldr	r3, [r7, #8]
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8011d22:	4413      	add	r3, r2
 8011d24:	6879      	ldr	r1, [r7, #4]
 8011d26:	4618      	mov	r0, r3
 8011d28:	f7ff fb6a 	bl	8011400 <st_dword>
			fs->wflag = 1;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2201      	movs	r2, #1
 8011d30:	70da      	strb	r2, [r3, #3]
			break;
 8011d32:	e006      	b.n	8011d42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011d34:	bf00      	nop
 8011d36:	e004      	b.n	8011d42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011d38:	bf00      	nop
 8011d3a:	e002      	b.n	8011d42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011d3c:	bf00      	nop
 8011d3e:	e000      	b.n	8011d42 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011d40:	bf00      	nop
		}
	}
	return res;
 8011d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3724      	adds	r7, #36	@ 0x24
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd90      	pop	{r4, r7, pc}

08011d4c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b088      	sub	sp, #32
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d904      	bls.n	8011d72 <remove_chain+0x26>
 8011d68:	69bb      	ldr	r3, [r7, #24]
 8011d6a:	695b      	ldr	r3, [r3, #20]
 8011d6c:	68ba      	ldr	r2, [r7, #8]
 8011d6e:	429a      	cmp	r2, r3
 8011d70:	d301      	bcc.n	8011d76 <remove_chain+0x2a>
 8011d72:	2302      	movs	r3, #2
 8011d74:	e04b      	b.n	8011e0e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00c      	beq.n	8011d96 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011d80:	6879      	ldr	r1, [r7, #4]
 8011d82:	69b8      	ldr	r0, [r7, #24]
 8011d84:	f7ff fef8 	bl	8011b78 <put_fat>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011d8c:	7ffb      	ldrb	r3, [r7, #31]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d001      	beq.n	8011d96 <remove_chain+0x4a>
 8011d92:	7ffb      	ldrb	r3, [r7, #31]
 8011d94:	e03b      	b.n	8011e0e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011d96:	68b9      	ldr	r1, [r7, #8]
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f7ff fe46 	bl	8011a2a <get_fat>
 8011d9e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d031      	beq.n	8011e0a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011da6:	697b      	ldr	r3, [r7, #20]
 8011da8:	2b01      	cmp	r3, #1
 8011daa:	d101      	bne.n	8011db0 <remove_chain+0x64>
 8011dac:	2302      	movs	r3, #2
 8011dae:	e02e      	b.n	8011e0e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011db6:	d101      	bne.n	8011dbc <remove_chain+0x70>
 8011db8:	2301      	movs	r3, #1
 8011dba:	e028      	b.n	8011e0e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	68b9      	ldr	r1, [r7, #8]
 8011dc0:	69b8      	ldr	r0, [r7, #24]
 8011dc2:	f7ff fed9 	bl	8011b78 <put_fat>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011dca:	7ffb      	ldrb	r3, [r7, #31]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d001      	beq.n	8011dd4 <remove_chain+0x88>
 8011dd0:	7ffb      	ldrb	r3, [r7, #31]
 8011dd2:	e01c      	b.n	8011e0e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	691a      	ldr	r2, [r3, #16]
 8011dd8:	69bb      	ldr	r3, [r7, #24]
 8011dda:	695b      	ldr	r3, [r3, #20]
 8011ddc:	3b02      	subs	r3, #2
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d20b      	bcs.n	8011dfa <remove_chain+0xae>
			fs->free_clst++;
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	691b      	ldr	r3, [r3, #16]
 8011de6:	1c5a      	adds	r2, r3, #1
 8011de8:	69bb      	ldr	r3, [r7, #24]
 8011dea:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8011dec:	69bb      	ldr	r3, [r7, #24]
 8011dee:	791b      	ldrb	r3, [r3, #4]
 8011df0:	f043 0301 	orr.w	r3, r3, #1
 8011df4:	b2da      	uxtb	r2, r3
 8011df6:	69bb      	ldr	r3, [r7, #24]
 8011df8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011dfa:	697b      	ldr	r3, [r7, #20]
 8011dfc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	695b      	ldr	r3, [r3, #20]
 8011e02:	68ba      	ldr	r2, [r7, #8]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d3c6      	bcc.n	8011d96 <remove_chain+0x4a>
 8011e08:	e000      	b.n	8011e0c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011e0a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3720      	adds	r7, #32
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}

08011e16 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011e16:	b580      	push	{r7, lr}
 8011e18:	b088      	sub	sp, #32
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
 8011e1e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d10d      	bne.n	8011e48 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	68db      	ldr	r3, [r3, #12]
 8011e30:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011e32:	69bb      	ldr	r3, [r7, #24]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d004      	beq.n	8011e42 <create_chain+0x2c>
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	695b      	ldr	r3, [r3, #20]
 8011e3c:	69ba      	ldr	r2, [r7, #24]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d31b      	bcc.n	8011e7a <create_chain+0x64>
 8011e42:	2301      	movs	r3, #1
 8011e44:	61bb      	str	r3, [r7, #24]
 8011e46:	e018      	b.n	8011e7a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011e48:	6839      	ldr	r1, [r7, #0]
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f7ff fded 	bl	8011a2a <get_fat>
 8011e50:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2b01      	cmp	r3, #1
 8011e56:	d801      	bhi.n	8011e5c <create_chain+0x46>
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e070      	b.n	8011f3e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e62:	d101      	bne.n	8011e68 <create_chain+0x52>
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	e06a      	b.n	8011f3e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	695b      	ldr	r3, [r3, #20]
 8011e6c:	68fa      	ldr	r2, [r7, #12]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d201      	bcs.n	8011e76 <create_chain+0x60>
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	e063      	b.n	8011f3e <create_chain+0x128>
		scl = clst;
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011e7a:	69bb      	ldr	r3, [r7, #24]
 8011e7c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011e7e:	69fb      	ldr	r3, [r7, #28]
 8011e80:	3301      	adds	r3, #1
 8011e82:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	695b      	ldr	r3, [r3, #20]
 8011e88:	69fa      	ldr	r2, [r7, #28]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	d307      	bcc.n	8011e9e <create_chain+0x88>
				ncl = 2;
 8011e8e:	2302      	movs	r3, #2
 8011e90:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011e92:	69fa      	ldr	r2, [r7, #28]
 8011e94:	69bb      	ldr	r3, [r7, #24]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d901      	bls.n	8011e9e <create_chain+0x88>
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	e04f      	b.n	8011f3e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011e9e:	69f9      	ldr	r1, [r7, #28]
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f7ff fdc2 	bl	8011a2a <get_fat>
 8011ea6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d00e      	beq.n	8011ecc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d003      	beq.n	8011ebc <create_chain+0xa6>
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eba:	d101      	bne.n	8011ec0 <create_chain+0xaa>
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	e03e      	b.n	8011f3e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011ec0:	69fa      	ldr	r2, [r7, #28]
 8011ec2:	69bb      	ldr	r3, [r7, #24]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d1da      	bne.n	8011e7e <create_chain+0x68>
 8011ec8:	2300      	movs	r3, #0
 8011eca:	e038      	b.n	8011f3e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011ecc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011ece:	f04f 32ff 	mov.w	r2, #4294967295
 8011ed2:	69f9      	ldr	r1, [r7, #28]
 8011ed4:	6938      	ldr	r0, [r7, #16]
 8011ed6:	f7ff fe4f 	bl	8011b78 <put_fat>
 8011eda:	4603      	mov	r3, r0
 8011edc:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011ede:	7dfb      	ldrb	r3, [r7, #23]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d109      	bne.n	8011ef8 <create_chain+0xe2>
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d006      	beq.n	8011ef8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011eea:	69fa      	ldr	r2, [r7, #28]
 8011eec:	6839      	ldr	r1, [r7, #0]
 8011eee:	6938      	ldr	r0, [r7, #16]
 8011ef0:	f7ff fe42 	bl	8011b78 <put_fat>
 8011ef4:	4603      	mov	r3, r0
 8011ef6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011ef8:	7dfb      	ldrb	r3, [r7, #23]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d116      	bne.n	8011f2c <create_chain+0x116>
		fs->last_clst = ncl;
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	69fa      	ldr	r2, [r7, #28]
 8011f02:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	691a      	ldr	r2, [r3, #16]
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	695b      	ldr	r3, [r3, #20]
 8011f0c:	3b02      	subs	r3, #2
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	d804      	bhi.n	8011f1c <create_chain+0x106>
 8011f12:	693b      	ldr	r3, [r7, #16]
 8011f14:	691b      	ldr	r3, [r3, #16]
 8011f16:	1e5a      	subs	r2, r3, #1
 8011f18:	693b      	ldr	r3, [r7, #16]
 8011f1a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	791b      	ldrb	r3, [r3, #4]
 8011f20:	f043 0301 	orr.w	r3, r3, #1
 8011f24:	b2da      	uxtb	r2, r3
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	711a      	strb	r2, [r3, #4]
 8011f2a:	e007      	b.n	8011f3c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011f2c:	7dfb      	ldrb	r3, [r7, #23]
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d102      	bne.n	8011f38 <create_chain+0x122>
 8011f32:	f04f 33ff 	mov.w	r3, #4294967295
 8011f36:	e000      	b.n	8011f3a <create_chain+0x124>
 8011f38:	2301      	movs	r3, #1
 8011f3a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011f3c:	69fb      	ldr	r3, [r7, #28]
}
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3720      	adds	r7, #32
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011f46:	b480      	push	{r7}
 8011f48:	b087      	sub	sp, #28
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
 8011f4e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	0a5b      	lsrs	r3, r3, #9
 8011f62:	68fa      	ldr	r2, [r7, #12]
 8011f64:	8952      	ldrh	r2, [r2, #10]
 8011f66:	fbb3 f3f2 	udiv	r3, r3, r2
 8011f6a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	1d1a      	adds	r2, r3, #4
 8011f70:	613a      	str	r2, [r7, #16]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011f76:	68bb      	ldr	r3, [r7, #8]
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d101      	bne.n	8011f80 <clmt_clust+0x3a>
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	e010      	b.n	8011fa2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011f80:	697a      	ldr	r2, [r7, #20]
 8011f82:	68bb      	ldr	r3, [r7, #8]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d307      	bcc.n	8011f98 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8011f88:	697a      	ldr	r2, [r7, #20]
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	1ad3      	subs	r3, r2, r3
 8011f8e:	617b      	str	r3, [r7, #20]
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	3304      	adds	r3, #4
 8011f94:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011f96:	e7e9      	b.n	8011f6c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8011f98:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	681a      	ldr	r2, [r3, #0]
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	4413      	add	r3, r2
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	371c      	adds	r7, #28
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fac:	4770      	bx	lr

08011fae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b086      	sub	sp, #24
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
 8011fb6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011fc4:	d204      	bcs.n	8011fd0 <dir_sdi+0x22>
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	f003 031f 	and.w	r3, r3, #31
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d001      	beq.n	8011fd4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011fd0:	2302      	movs	r3, #2
 8011fd2:	e063      	b.n	801209c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	683a      	ldr	r2, [r7, #0]
 8011fd8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	689b      	ldr	r3, [r3, #8]
 8011fde:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d106      	bne.n	8011ff4 <dir_sdi+0x46>
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	781b      	ldrb	r3, [r3, #0]
 8011fea:	2b02      	cmp	r3, #2
 8011fec:	d902      	bls.n	8011ff4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011fee:	693b      	ldr	r3, [r7, #16]
 8011ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ff2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011ff4:	697b      	ldr	r3, [r7, #20]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d10c      	bne.n	8012014 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	095b      	lsrs	r3, r3, #5
 8011ffe:	693a      	ldr	r2, [r7, #16]
 8012000:	8912      	ldrh	r2, [r2, #8]
 8012002:	4293      	cmp	r3, r2
 8012004:	d301      	bcc.n	801200a <dir_sdi+0x5c>
 8012006:	2302      	movs	r3, #2
 8012008:	e048      	b.n	801209c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	61da      	str	r2, [r3, #28]
 8012012:	e029      	b.n	8012068 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012014:	693b      	ldr	r3, [r7, #16]
 8012016:	895b      	ldrh	r3, [r3, #10]
 8012018:	025b      	lsls	r3, r3, #9
 801201a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801201c:	e019      	b.n	8012052 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6979      	ldr	r1, [r7, #20]
 8012022:	4618      	mov	r0, r3
 8012024:	f7ff fd01 	bl	8011a2a <get_fat>
 8012028:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801202a:	697b      	ldr	r3, [r7, #20]
 801202c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012030:	d101      	bne.n	8012036 <dir_sdi+0x88>
 8012032:	2301      	movs	r3, #1
 8012034:	e032      	b.n	801209c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	2b01      	cmp	r3, #1
 801203a:	d904      	bls.n	8012046 <dir_sdi+0x98>
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	695b      	ldr	r3, [r3, #20]
 8012040:	697a      	ldr	r2, [r7, #20]
 8012042:	429a      	cmp	r2, r3
 8012044:	d301      	bcc.n	801204a <dir_sdi+0x9c>
 8012046:	2302      	movs	r3, #2
 8012048:	e028      	b.n	801209c <dir_sdi+0xee>
			ofs -= csz;
 801204a:	683a      	ldr	r2, [r7, #0]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	1ad3      	subs	r3, r2, r3
 8012050:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012052:	683a      	ldr	r2, [r7, #0]
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	429a      	cmp	r2, r3
 8012058:	d2e1      	bcs.n	801201e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 801205a:	6979      	ldr	r1, [r7, #20]
 801205c:	6938      	ldr	r0, [r7, #16]
 801205e:	f7ff fcc5 	bl	80119ec <clust2sect>
 8012062:	4602      	mov	r2, r0
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	697a      	ldr	r2, [r7, #20]
 801206c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	69db      	ldr	r3, [r3, #28]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d101      	bne.n	801207a <dir_sdi+0xcc>
 8012076:	2302      	movs	r3, #2
 8012078:	e010      	b.n	801209c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	69da      	ldr	r2, [r3, #28]
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	0a5b      	lsrs	r3, r3, #9
 8012082:	441a      	add	r2, r3
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012094:	441a      	add	r2, r3
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801209a:	2300      	movs	r3, #0
}
 801209c:	4618      	mov	r0, r3
 801209e:	3718      	adds	r7, #24
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b086      	sub	sp, #24
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	695b      	ldr	r3, [r3, #20]
 80120b8:	3320      	adds	r3, #32
 80120ba:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	69db      	ldr	r3, [r3, #28]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d003      	beq.n	80120cc <dir_next+0x28>
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120ca:	d301      	bcc.n	80120d0 <dir_next+0x2c>
 80120cc:	2304      	movs	r3, #4
 80120ce:	e0aa      	b.n	8012226 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	f040 8098 	bne.w	801220c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	69db      	ldr	r3, [r3, #28]
 80120e0:	1c5a      	adds	r2, r3, #1
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	699b      	ldr	r3, [r3, #24]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d10b      	bne.n	8012106 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	095b      	lsrs	r3, r3, #5
 80120f2:	68fa      	ldr	r2, [r7, #12]
 80120f4:	8912      	ldrh	r2, [r2, #8]
 80120f6:	4293      	cmp	r3, r2
 80120f8:	f0c0 8088 	bcc.w	801220c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2200      	movs	r2, #0
 8012100:	61da      	str	r2, [r3, #28]
 8012102:	2304      	movs	r3, #4
 8012104:	e08f      	b.n	8012226 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	0a5b      	lsrs	r3, r3, #9
 801210a:	68fa      	ldr	r2, [r7, #12]
 801210c:	8952      	ldrh	r2, [r2, #10]
 801210e:	3a01      	subs	r2, #1
 8012110:	4013      	ands	r3, r2
 8012112:	2b00      	cmp	r3, #0
 8012114:	d17a      	bne.n	801220c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	699b      	ldr	r3, [r3, #24]
 801211c:	4619      	mov	r1, r3
 801211e:	4610      	mov	r0, r2
 8012120:	f7ff fc83 	bl	8011a2a <get_fat>
 8012124:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012126:	697b      	ldr	r3, [r7, #20]
 8012128:	2b01      	cmp	r3, #1
 801212a:	d801      	bhi.n	8012130 <dir_next+0x8c>
 801212c:	2302      	movs	r3, #2
 801212e:	e07a      	b.n	8012226 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012136:	d101      	bne.n	801213c <dir_next+0x98>
 8012138:	2301      	movs	r3, #1
 801213a:	e074      	b.n	8012226 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	695b      	ldr	r3, [r3, #20]
 8012140:	697a      	ldr	r2, [r7, #20]
 8012142:	429a      	cmp	r2, r3
 8012144:	d358      	bcc.n	80121f8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012146:	683b      	ldr	r3, [r7, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d104      	bne.n	8012156 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	61da      	str	r2, [r3, #28]
 8012152:	2304      	movs	r3, #4
 8012154:	e067      	b.n	8012226 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	699b      	ldr	r3, [r3, #24]
 801215c:	4619      	mov	r1, r3
 801215e:	4610      	mov	r0, r2
 8012160:	f7ff fe59 	bl	8011e16 <create_chain>
 8012164:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d101      	bne.n	8012170 <dir_next+0xcc>
 801216c:	2307      	movs	r3, #7
 801216e:	e05a      	b.n	8012226 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	2b01      	cmp	r3, #1
 8012174:	d101      	bne.n	801217a <dir_next+0xd6>
 8012176:	2302      	movs	r3, #2
 8012178:	e055      	b.n	8012226 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012180:	d101      	bne.n	8012186 <dir_next+0xe2>
 8012182:	2301      	movs	r3, #1
 8012184:	e04f      	b.n	8012226 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012186:	68f8      	ldr	r0, [r7, #12]
 8012188:	f7ff fb50 	bl	801182c <sync_window>
 801218c:	4603      	mov	r3, r0
 801218e:	2b00      	cmp	r3, #0
 8012190:	d001      	beq.n	8012196 <dir_next+0xf2>
 8012192:	2301      	movs	r3, #1
 8012194:	e047      	b.n	8012226 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	3330      	adds	r3, #48	@ 0x30
 801219a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801219e:	2100      	movs	r1, #0
 80121a0:	4618      	mov	r0, r3
 80121a2:	f7ff f97a 	bl	801149a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121a6:	2300      	movs	r3, #0
 80121a8:	613b      	str	r3, [r7, #16]
 80121aa:	6979      	ldr	r1, [r7, #20]
 80121ac:	68f8      	ldr	r0, [r7, #12]
 80121ae:	f7ff fc1d 	bl	80119ec <clust2sect>
 80121b2:	4602      	mov	r2, r0
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80121b8:	e012      	b.n	80121e0 <dir_next+0x13c>
						fs->wflag = 1;
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	2201      	movs	r2, #1
 80121be:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f7ff fb33 	bl	801182c <sync_window>
 80121c6:	4603      	mov	r3, r0
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d001      	beq.n	80121d0 <dir_next+0x12c>
 80121cc:	2301      	movs	r3, #1
 80121ce:	e02a      	b.n	8012226 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80121d0:	693b      	ldr	r3, [r7, #16]
 80121d2:	3301      	adds	r3, #1
 80121d4:	613b      	str	r3, [r7, #16]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80121da:	1c5a      	adds	r2, r3, #1
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	895b      	ldrh	r3, [r3, #10]
 80121e4:	461a      	mov	r2, r3
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	4293      	cmp	r3, r2
 80121ea:	d3e6      	bcc.n	80121ba <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121f0:	693b      	ldr	r3, [r7, #16]
 80121f2:	1ad2      	subs	r2, r2, r3
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	697a      	ldr	r2, [r7, #20]
 80121fc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80121fe:	6979      	ldr	r1, [r7, #20]
 8012200:	68f8      	ldr	r0, [r7, #12]
 8012202:	f7ff fbf3 	bl	80119ec <clust2sect>
 8012206:	4602      	mov	r2, r0
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	68ba      	ldr	r2, [r7, #8]
 8012210:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801221e:	441a      	add	r2, r3
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012224:	2300      	movs	r3, #0
}
 8012226:	4618      	mov	r0, r3
 8012228:	3718      	adds	r7, #24
 801222a:	46bd      	mov	sp, r7
 801222c:	bd80      	pop	{r7, pc}

0801222e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801222e:	b580      	push	{r7, lr}
 8012230:	b086      	sub	sp, #24
 8012232:	af00      	add	r7, sp, #0
 8012234:	6078      	str	r0, [r7, #4]
 8012236:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801223e:	2100      	movs	r1, #0
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f7ff feb4 	bl	8011fae <dir_sdi>
 8012246:	4603      	mov	r3, r0
 8012248:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801224a:	7dfb      	ldrb	r3, [r7, #23]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d12b      	bne.n	80122a8 <dir_alloc+0x7a>
		n = 0;
 8012250:	2300      	movs	r3, #0
 8012252:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	69db      	ldr	r3, [r3, #28]
 8012258:	4619      	mov	r1, r3
 801225a:	68f8      	ldr	r0, [r7, #12]
 801225c:	f7ff fb2a 	bl	80118b4 <move_window>
 8012260:	4603      	mov	r3, r0
 8012262:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012264:	7dfb      	ldrb	r3, [r7, #23]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d11d      	bne.n	80122a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6a1b      	ldr	r3, [r3, #32]
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	2be5      	cmp	r3, #229	@ 0xe5
 8012272:	d004      	beq.n	801227e <dir_alloc+0x50>
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	6a1b      	ldr	r3, [r3, #32]
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d107      	bne.n	801228e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	3301      	adds	r3, #1
 8012282:	613b      	str	r3, [r7, #16]
 8012284:	693a      	ldr	r2, [r7, #16]
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	429a      	cmp	r2, r3
 801228a:	d102      	bne.n	8012292 <dir_alloc+0x64>
 801228c:	e00c      	b.n	80122a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801228e:	2300      	movs	r3, #0
 8012290:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012292:	2101      	movs	r1, #1
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f7ff ff05 	bl	80120a4 <dir_next>
 801229a:	4603      	mov	r3, r0
 801229c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801229e:	7dfb      	ldrb	r3, [r7, #23]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d0d7      	beq.n	8012254 <dir_alloc+0x26>
 80122a4:	e000      	b.n	80122a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80122a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80122a8:	7dfb      	ldrb	r3, [r7, #23]
 80122aa:	2b04      	cmp	r3, #4
 80122ac:	d101      	bne.n	80122b2 <dir_alloc+0x84>
 80122ae:	2307      	movs	r3, #7
 80122b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80122b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3718      	adds	r7, #24
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}

080122bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
 80122c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80122c6:	683b      	ldr	r3, [r7, #0]
 80122c8:	331a      	adds	r3, #26
 80122ca:	4618      	mov	r0, r3
 80122cc:	f7ff f842 	bl	8011354 <ld_word>
 80122d0:	4603      	mov	r3, r0
 80122d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	781b      	ldrb	r3, [r3, #0]
 80122d8:	2b03      	cmp	r3, #3
 80122da:	d109      	bne.n	80122f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	3314      	adds	r3, #20
 80122e0:	4618      	mov	r0, r3
 80122e2:	f7ff f837 	bl	8011354 <ld_word>
 80122e6:	4603      	mov	r3, r0
 80122e8:	041b      	lsls	r3, r3, #16
 80122ea:	68fa      	ldr	r2, [r7, #12]
 80122ec:	4313      	orrs	r3, r2
 80122ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80122f0:	68fb      	ldr	r3, [r7, #12]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3710      	adds	r7, #16
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}

080122fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80122fa:	b580      	push	{r7, lr}
 80122fc:	b084      	sub	sp, #16
 80122fe:	af00      	add	r7, sp, #0
 8012300:	60f8      	str	r0, [r7, #12]
 8012302:	60b9      	str	r1, [r7, #8]
 8012304:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	331a      	adds	r3, #26
 801230a:	687a      	ldr	r2, [r7, #4]
 801230c:	b292      	uxth	r2, r2
 801230e:	4611      	mov	r1, r2
 8012310:	4618      	mov	r0, r3
 8012312:	f7ff f85a 	bl	80113ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	2b03      	cmp	r3, #3
 801231c:	d109      	bne.n	8012332 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	f103 0214 	add.w	r2, r3, #20
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	0c1b      	lsrs	r3, r3, #16
 8012328:	b29b      	uxth	r3, r3
 801232a:	4619      	mov	r1, r3
 801232c:	4610      	mov	r0, r2
 801232e:	f7ff f84c 	bl	80113ca <st_word>
	}
}
 8012332:	bf00      	nop
 8012334:	3710      	adds	r7, #16
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}

0801233a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801233a:	b580      	push	{r7, lr}
 801233c:	b086      	sub	sp, #24
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012348:	2100      	movs	r1, #0
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f7ff fe2f 	bl	8011fae <dir_sdi>
 8012350:	4603      	mov	r3, r0
 8012352:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012354:	7dfb      	ldrb	r3, [r7, #23]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d001      	beq.n	801235e <dir_find+0x24>
 801235a:	7dfb      	ldrb	r3, [r7, #23]
 801235c:	e03e      	b.n	80123dc <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	69db      	ldr	r3, [r3, #28]
 8012362:	4619      	mov	r1, r3
 8012364:	6938      	ldr	r0, [r7, #16]
 8012366:	f7ff faa5 	bl	80118b4 <move_window>
 801236a:	4603      	mov	r3, r0
 801236c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801236e:	7dfb      	ldrb	r3, [r7, #23]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d12f      	bne.n	80123d4 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	6a1b      	ldr	r3, [r3, #32]
 8012378:	781b      	ldrb	r3, [r3, #0]
 801237a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801237c:	7bfb      	ldrb	r3, [r7, #15]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d102      	bne.n	8012388 <dir_find+0x4e>
 8012382:	2304      	movs	r3, #4
 8012384:	75fb      	strb	r3, [r7, #23]
 8012386:	e028      	b.n	80123da <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6a1b      	ldr	r3, [r3, #32]
 801238c:	330b      	adds	r3, #11
 801238e:	781b      	ldrb	r3, [r3, #0]
 8012390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012394:	b2da      	uxtb	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6a1b      	ldr	r3, [r3, #32]
 801239e:	330b      	adds	r3, #11
 80123a0:	781b      	ldrb	r3, [r3, #0]
 80123a2:	f003 0308 	and.w	r3, r3, #8
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d10a      	bne.n	80123c0 <dir_find+0x86>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6a18      	ldr	r0, [r3, #32]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	3324      	adds	r3, #36	@ 0x24
 80123b2:	220b      	movs	r2, #11
 80123b4:	4619      	mov	r1, r3
 80123b6:	f7ff f88b 	bl	80114d0 <mem_cmp>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00b      	beq.n	80123d8 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80123c0:	2100      	movs	r1, #0
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7ff fe6e 	bl	80120a4 <dir_next>
 80123c8:	4603      	mov	r3, r0
 80123ca:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80123cc:	7dfb      	ldrb	r3, [r7, #23]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d0c5      	beq.n	801235e <dir_find+0x24>
 80123d2:	e002      	b.n	80123da <dir_find+0xa0>
		if (res != FR_OK) break;
 80123d4:	bf00      	nop
 80123d6:	e000      	b.n	80123da <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80123d8:	bf00      	nop

	return res;
 80123da:	7dfb      	ldrb	r3, [r7, #23]
}
 80123dc:	4618      	mov	r0, r3
 80123de:	3718      	adds	r7, #24
 80123e0:	46bd      	mov	sp, r7
 80123e2:	bd80      	pop	{r7, pc}

080123e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b084      	sub	sp, #16
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80123f2:	2101      	movs	r1, #1
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7ff ff1a 	bl	801222e <dir_alloc>
 80123fa:	4603      	mov	r3, r0
 80123fc:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80123fe:	7bfb      	ldrb	r3, [r7, #15]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d11c      	bne.n	801243e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	69db      	ldr	r3, [r3, #28]
 8012408:	4619      	mov	r1, r3
 801240a:	68b8      	ldr	r0, [r7, #8]
 801240c:	f7ff fa52 	bl	80118b4 <move_window>
 8012410:	4603      	mov	r3, r0
 8012412:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012414:	7bfb      	ldrb	r3, [r7, #15]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d111      	bne.n	801243e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6a1b      	ldr	r3, [r3, #32]
 801241e:	2220      	movs	r2, #32
 8012420:	2100      	movs	r1, #0
 8012422:	4618      	mov	r0, r3
 8012424:	f7ff f839 	bl	801149a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	6a18      	ldr	r0, [r3, #32]
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	3324      	adds	r3, #36	@ 0x24
 8012430:	220b      	movs	r2, #11
 8012432:	4619      	mov	r1, r3
 8012434:	f7ff f810 	bl	8011458 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	2201      	movs	r2, #1
 801243c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801243e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012440:	4618      	mov	r0, r3
 8012442:	3710      	adds	r7, #16
 8012444:	46bd      	mov	sp, r7
 8012446:	bd80      	pop	{r7, pc}

08012448 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b088      	sub	sp, #32
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012452:	683b      	ldr	r3, [r7, #0]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	60fb      	str	r3, [r7, #12]
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	3324      	adds	r3, #36	@ 0x24
 801245c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801245e:	220b      	movs	r2, #11
 8012460:	2120      	movs	r1, #32
 8012462:	68b8      	ldr	r0, [r7, #8]
 8012464:	f7ff f819 	bl	801149a <mem_set>
	si = i = 0; ni = 8;
 8012468:	2300      	movs	r3, #0
 801246a:	613b      	str	r3, [r7, #16]
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	61fb      	str	r3, [r7, #28]
 8012470:	2308      	movs	r3, #8
 8012472:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012474:	69fb      	ldr	r3, [r7, #28]
 8012476:	1c5a      	adds	r2, r3, #1
 8012478:	61fa      	str	r2, [r7, #28]
 801247a:	68fa      	ldr	r2, [r7, #12]
 801247c:	4413      	add	r3, r2
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012482:	7efb      	ldrb	r3, [r7, #27]
 8012484:	2b20      	cmp	r3, #32
 8012486:	d94e      	bls.n	8012526 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012488:	7efb      	ldrb	r3, [r7, #27]
 801248a:	2b2f      	cmp	r3, #47	@ 0x2f
 801248c:	d006      	beq.n	801249c <create_name+0x54>
 801248e:	7efb      	ldrb	r3, [r7, #27]
 8012490:	2b5c      	cmp	r3, #92	@ 0x5c
 8012492:	d110      	bne.n	80124b6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012494:	e002      	b.n	801249c <create_name+0x54>
 8012496:	69fb      	ldr	r3, [r7, #28]
 8012498:	3301      	adds	r3, #1
 801249a:	61fb      	str	r3, [r7, #28]
 801249c:	68fa      	ldr	r2, [r7, #12]
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	4413      	add	r3, r2
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	2b2f      	cmp	r3, #47	@ 0x2f
 80124a6:	d0f6      	beq.n	8012496 <create_name+0x4e>
 80124a8:	68fa      	ldr	r2, [r7, #12]
 80124aa:	69fb      	ldr	r3, [r7, #28]
 80124ac:	4413      	add	r3, r2
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	2b5c      	cmp	r3, #92	@ 0x5c
 80124b2:	d0f0      	beq.n	8012496 <create_name+0x4e>
			break;
 80124b4:	e038      	b.n	8012528 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80124b6:	7efb      	ldrb	r3, [r7, #27]
 80124b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80124ba:	d003      	beq.n	80124c4 <create_name+0x7c>
 80124bc:	693a      	ldr	r2, [r7, #16]
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d30c      	bcc.n	80124de <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	2b0b      	cmp	r3, #11
 80124c8:	d002      	beq.n	80124d0 <create_name+0x88>
 80124ca:	7efb      	ldrb	r3, [r7, #27]
 80124cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80124ce:	d001      	beq.n	80124d4 <create_name+0x8c>
 80124d0:	2306      	movs	r3, #6
 80124d2:	e044      	b.n	801255e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80124d4:	2308      	movs	r3, #8
 80124d6:	613b      	str	r3, [r7, #16]
 80124d8:	230b      	movs	r3, #11
 80124da:	617b      	str	r3, [r7, #20]
			continue;
 80124dc:	e022      	b.n	8012524 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80124de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	da04      	bge.n	80124f0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80124e6:	7efb      	ldrb	r3, [r7, #27]
 80124e8:	3b80      	subs	r3, #128	@ 0x80
 80124ea:	4a1f      	ldr	r2, [pc, #124]	@ (8012568 <create_name+0x120>)
 80124ec:	5cd3      	ldrb	r3, [r2, r3]
 80124ee:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80124f0:	7efb      	ldrb	r3, [r7, #27]
 80124f2:	4619      	mov	r1, r3
 80124f4:	481d      	ldr	r0, [pc, #116]	@ (801256c <create_name+0x124>)
 80124f6:	f7ff f812 	bl	801151e <chk_chr>
 80124fa:	4603      	mov	r3, r0
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d001      	beq.n	8012504 <create_name+0xbc>
 8012500:	2306      	movs	r3, #6
 8012502:	e02c      	b.n	801255e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012504:	7efb      	ldrb	r3, [r7, #27]
 8012506:	2b60      	cmp	r3, #96	@ 0x60
 8012508:	d905      	bls.n	8012516 <create_name+0xce>
 801250a:	7efb      	ldrb	r3, [r7, #27]
 801250c:	2b7a      	cmp	r3, #122	@ 0x7a
 801250e:	d802      	bhi.n	8012516 <create_name+0xce>
 8012510:	7efb      	ldrb	r3, [r7, #27]
 8012512:	3b20      	subs	r3, #32
 8012514:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	1c5a      	adds	r2, r3, #1
 801251a:	613a      	str	r2, [r7, #16]
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	4413      	add	r3, r2
 8012520:	7efa      	ldrb	r2, [r7, #27]
 8012522:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012524:	e7a6      	b.n	8012474 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012526:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	69fb      	ldr	r3, [r7, #28]
 801252c:	441a      	add	r2, r3
 801252e:	683b      	ldr	r3, [r7, #0]
 8012530:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d101      	bne.n	801253c <create_name+0xf4>
 8012538:	2306      	movs	r3, #6
 801253a:	e010      	b.n	801255e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	781b      	ldrb	r3, [r3, #0]
 8012540:	2be5      	cmp	r3, #229	@ 0xe5
 8012542:	d102      	bne.n	801254a <create_name+0x102>
 8012544:	68bb      	ldr	r3, [r7, #8]
 8012546:	2205      	movs	r2, #5
 8012548:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801254a:	7efb      	ldrb	r3, [r7, #27]
 801254c:	2b20      	cmp	r3, #32
 801254e:	d801      	bhi.n	8012554 <create_name+0x10c>
 8012550:	2204      	movs	r2, #4
 8012552:	e000      	b.n	8012556 <create_name+0x10e>
 8012554:	2200      	movs	r2, #0
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	330b      	adds	r3, #11
 801255a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 801255c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801255e:	4618      	mov	r0, r3
 8012560:	3720      	adds	r7, #32
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
 8012566:	bf00      	nop
 8012568:	0801a94c 	.word	0x0801a94c
 801256c:	0801a8dc 	.word	0x0801a8dc

08012570 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012570:	b580      	push	{r7, lr}
 8012572:	b086      	sub	sp, #24
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
 8012578:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012584:	e002      	b.n	801258c <follow_path+0x1c>
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	3301      	adds	r3, #1
 801258a:	603b      	str	r3, [r7, #0]
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	781b      	ldrb	r3, [r3, #0]
 8012590:	2b2f      	cmp	r3, #47	@ 0x2f
 8012592:	d0f8      	beq.n	8012586 <follow_path+0x16>
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	781b      	ldrb	r3, [r3, #0]
 8012598:	2b5c      	cmp	r3, #92	@ 0x5c
 801259a:	d0f4      	beq.n	8012586 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	2200      	movs	r2, #0
 80125a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	2b1f      	cmp	r3, #31
 80125a8:	d80a      	bhi.n	80125c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2280      	movs	r2, #128	@ 0x80
 80125ae:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80125b2:	2100      	movs	r1, #0
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7ff fcfa 	bl	8011fae <dir_sdi>
 80125ba:	4603      	mov	r3, r0
 80125bc:	75fb      	strb	r3, [r7, #23]
 80125be:	e043      	b.n	8012648 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80125c0:	463b      	mov	r3, r7
 80125c2:	4619      	mov	r1, r3
 80125c4:	6878      	ldr	r0, [r7, #4]
 80125c6:	f7ff ff3f 	bl	8012448 <create_name>
 80125ca:	4603      	mov	r3, r0
 80125cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80125ce:	7dfb      	ldrb	r3, [r7, #23]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d134      	bne.n	801263e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f7ff feb0 	bl	801233a <dir_find>
 80125da:	4603      	mov	r3, r0
 80125dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80125e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80125e6:	7dfb      	ldrb	r3, [r7, #23]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d00a      	beq.n	8012602 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80125ec:	7dfb      	ldrb	r3, [r7, #23]
 80125ee:	2b04      	cmp	r3, #4
 80125f0:	d127      	bne.n	8012642 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80125f2:	7afb      	ldrb	r3, [r7, #11]
 80125f4:	f003 0304 	and.w	r3, r3, #4
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d122      	bne.n	8012642 <follow_path+0xd2>
 80125fc:	2305      	movs	r3, #5
 80125fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8012600:	e01f      	b.n	8012642 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012602:	7afb      	ldrb	r3, [r7, #11]
 8012604:	f003 0304 	and.w	r3, r3, #4
 8012608:	2b00      	cmp	r3, #0
 801260a:	d11c      	bne.n	8012646 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	799b      	ldrb	r3, [r3, #6]
 8012610:	f003 0310 	and.w	r3, r3, #16
 8012614:	2b00      	cmp	r3, #0
 8012616:	d102      	bne.n	801261e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012618:	2305      	movs	r3, #5
 801261a:	75fb      	strb	r3, [r7, #23]
 801261c:	e014      	b.n	8012648 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	695b      	ldr	r3, [r3, #20]
 8012628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801262c:	4413      	add	r3, r2
 801262e:	4619      	mov	r1, r3
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f7ff fe43 	bl	80122bc <ld_clust>
 8012636:	4602      	mov	r2, r0
 8012638:	693b      	ldr	r3, [r7, #16]
 801263a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801263c:	e7c0      	b.n	80125c0 <follow_path+0x50>
			if (res != FR_OK) break;
 801263e:	bf00      	nop
 8012640:	e002      	b.n	8012648 <follow_path+0xd8>
				break;
 8012642:	bf00      	nop
 8012644:	e000      	b.n	8012648 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012646:	bf00      	nop
			}
		}
	}

	return res;
 8012648:	7dfb      	ldrb	r3, [r7, #23]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3718      	adds	r7, #24
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012652:	b480      	push	{r7}
 8012654:	b087      	sub	sp, #28
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801265a:	f04f 33ff 	mov.w	r3, #4294967295
 801265e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d031      	beq.n	80126cc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	617b      	str	r3, [r7, #20]
 801266e:	e002      	b.n	8012676 <get_ldnumber+0x24>
 8012670:	697b      	ldr	r3, [r7, #20]
 8012672:	3301      	adds	r3, #1
 8012674:	617b      	str	r3, [r7, #20]
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	2b20      	cmp	r3, #32
 801267c:	d903      	bls.n	8012686 <get_ldnumber+0x34>
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	781b      	ldrb	r3, [r3, #0]
 8012682:	2b3a      	cmp	r3, #58	@ 0x3a
 8012684:	d1f4      	bne.n	8012670 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	781b      	ldrb	r3, [r3, #0]
 801268a:	2b3a      	cmp	r3, #58	@ 0x3a
 801268c:	d11c      	bne.n	80126c8 <get_ldnumber+0x76>
			tp = *path;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	1c5a      	adds	r2, r3, #1
 8012698:	60fa      	str	r2, [r7, #12]
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	3b30      	subs	r3, #48	@ 0x30
 801269e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	2b09      	cmp	r3, #9
 80126a4:	d80e      	bhi.n	80126c4 <get_ldnumber+0x72>
 80126a6:	68fa      	ldr	r2, [r7, #12]
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d10a      	bne.n	80126c4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d107      	bne.n	80126c4 <get_ldnumber+0x72>
					vol = (int)i;
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80126b8:	697b      	ldr	r3, [r7, #20]
 80126ba:	3301      	adds	r3, #1
 80126bc:	617b      	str	r3, [r7, #20]
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	697a      	ldr	r2, [r7, #20]
 80126c2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80126c4:	693b      	ldr	r3, [r7, #16]
 80126c6:	e002      	b.n	80126ce <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80126c8:	2300      	movs	r3, #0
 80126ca:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80126cc:	693b      	ldr	r3, [r7, #16]
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	371c      	adds	r7, #28
 80126d2:	46bd      	mov	sp, r7
 80126d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126d8:	4770      	bx	lr
	...

080126dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80126dc:	b580      	push	{r7, lr}
 80126de:	b082      	sub	sp, #8
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
 80126e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2200      	movs	r2, #0
 80126ea:	70da      	strb	r2, [r3, #3]
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	f04f 32ff 	mov.w	r2, #4294967295
 80126f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80126f4:	6839      	ldr	r1, [r7, #0]
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f7ff f8dc 	bl	80118b4 <move_window>
 80126fc:	4603      	mov	r3, r0
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d001      	beq.n	8012706 <check_fs+0x2a>
 8012702:	2304      	movs	r3, #4
 8012704:	e038      	b.n	8012778 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	3330      	adds	r3, #48	@ 0x30
 801270a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801270e:	4618      	mov	r0, r3
 8012710:	f7fe fe20 	bl	8011354 <ld_word>
 8012714:	4603      	mov	r3, r0
 8012716:	461a      	mov	r2, r3
 8012718:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801271c:	429a      	cmp	r2, r3
 801271e:	d001      	beq.n	8012724 <check_fs+0x48>
 8012720:	2303      	movs	r3, #3
 8012722:	e029      	b.n	8012778 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801272a:	2be9      	cmp	r3, #233	@ 0xe9
 801272c:	d009      	beq.n	8012742 <check_fs+0x66>
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012734:	2beb      	cmp	r3, #235	@ 0xeb
 8012736:	d11e      	bne.n	8012776 <check_fs+0x9a>
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801273e:	2b90      	cmp	r3, #144	@ 0x90
 8012740:	d119      	bne.n	8012776 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	3330      	adds	r3, #48	@ 0x30
 8012746:	3336      	adds	r3, #54	@ 0x36
 8012748:	4618      	mov	r0, r3
 801274a:	f7fe fe1b 	bl	8011384 <ld_dword>
 801274e:	4603      	mov	r3, r0
 8012750:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8012754:	4a0a      	ldr	r2, [pc, #40]	@ (8012780 <check_fs+0xa4>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d101      	bne.n	801275e <check_fs+0x82>
 801275a:	2300      	movs	r3, #0
 801275c:	e00c      	b.n	8012778 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	3330      	adds	r3, #48	@ 0x30
 8012762:	3352      	adds	r3, #82	@ 0x52
 8012764:	4618      	mov	r0, r3
 8012766:	f7fe fe0d 	bl	8011384 <ld_dword>
 801276a:	4603      	mov	r3, r0
 801276c:	4a05      	ldr	r2, [pc, #20]	@ (8012784 <check_fs+0xa8>)
 801276e:	4293      	cmp	r3, r2
 8012770:	d101      	bne.n	8012776 <check_fs+0x9a>
 8012772:	2300      	movs	r3, #0
 8012774:	e000      	b.n	8012778 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012776:	2302      	movs	r3, #2
}
 8012778:	4618      	mov	r0, r3
 801277a:	3708      	adds	r7, #8
 801277c:	46bd      	mov	sp, r7
 801277e:	bd80      	pop	{r7, pc}
 8012780:	00544146 	.word	0x00544146
 8012784:	33544146 	.word	0x33544146

08012788 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b096      	sub	sp, #88	@ 0x58
 801278c:	af00      	add	r7, sp, #0
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	4613      	mov	r3, r2
 8012794:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	2200      	movs	r2, #0
 801279a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	f7ff ff58 	bl	8012652 <get_ldnumber>
 80127a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80127a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	da01      	bge.n	80127ae <find_volume+0x26>
 80127aa:	230b      	movs	r3, #11
 80127ac:	e22d      	b.n	8012c0a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80127ae:	4aa1      	ldr	r2, [pc, #644]	@ (8012a34 <find_volume+0x2ac>)
 80127b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127b6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80127b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d101      	bne.n	80127c2 <find_volume+0x3a>
 80127be:	230c      	movs	r3, #12
 80127c0:	e223      	b.n	8012c0a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80127c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80127c8:	79fb      	ldrb	r3, [r7, #7]
 80127ca:	f023 0301 	bic.w	r3, r3, #1
 80127ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80127d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127d2:	781b      	ldrb	r3, [r3, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d01a      	beq.n	801280e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80127d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80127da:	785b      	ldrb	r3, [r3, #1]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7fe fd19 	bl	8011214 <disk_status>
 80127e2:	4603      	mov	r3, r0
 80127e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80127e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80127ec:	f003 0301 	and.w	r3, r3, #1
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d10c      	bne.n	801280e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80127f4:	79fb      	ldrb	r3, [r7, #7]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	d007      	beq.n	801280a <find_volume+0x82>
 80127fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80127fe:	f003 0304 	and.w	r3, r3, #4
 8012802:	2b00      	cmp	r3, #0
 8012804:	d001      	beq.n	801280a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012806:	230a      	movs	r3, #10
 8012808:	e1ff      	b.n	8012c0a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801280a:	2300      	movs	r3, #0
 801280c:	e1fd      	b.n	8012c0a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012810:	2200      	movs	r2, #0
 8012812:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012816:	b2da      	uxtb	r2, r3
 8012818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801281a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801281c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801281e:	785b      	ldrb	r3, [r3, #1]
 8012820:	4618      	mov	r0, r3
 8012822:	f7fe fd11 	bl	8011248 <disk_initialize>
 8012826:	4603      	mov	r3, r0
 8012828:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801282c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012830:	f003 0301 	and.w	r3, r3, #1
 8012834:	2b00      	cmp	r3, #0
 8012836:	d001      	beq.n	801283c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012838:	2303      	movs	r3, #3
 801283a:	e1e6      	b.n	8012c0a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801283c:	79fb      	ldrb	r3, [r7, #7]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d007      	beq.n	8012852 <find_volume+0xca>
 8012842:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8012846:	f003 0304 	and.w	r3, r3, #4
 801284a:	2b00      	cmp	r3, #0
 801284c:	d001      	beq.n	8012852 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801284e:	230a      	movs	r3, #10
 8012850:	e1db      	b.n	8012c0a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012852:	2300      	movs	r3, #0
 8012854:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012856:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012858:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801285a:	f7ff ff3f 	bl	80126dc <check_fs>
 801285e:	4603      	mov	r3, r0
 8012860:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012864:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012868:	2b02      	cmp	r3, #2
 801286a:	d149      	bne.n	8012900 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801286c:	2300      	movs	r3, #0
 801286e:	643b      	str	r3, [r7, #64]	@ 0x40
 8012870:	e01e      	b.n	80128b0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012874:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8012878:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801287a:	011b      	lsls	r3, r3, #4
 801287c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8012880:	4413      	add	r3, r2
 8012882:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012886:	3304      	adds	r3, #4
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d006      	beq.n	801289c <find_volume+0x114>
 801288e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012890:	3308      	adds	r3, #8
 8012892:	4618      	mov	r0, r3
 8012894:	f7fe fd76 	bl	8011384 <ld_dword>
 8012898:	4602      	mov	r2, r0
 801289a:	e000      	b.n	801289e <find_volume+0x116>
 801289c:	2200      	movs	r2, #0
 801289e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128a0:	009b      	lsls	r3, r3, #2
 80128a2:	3358      	adds	r3, #88	@ 0x58
 80128a4:	443b      	add	r3, r7
 80128a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80128aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128ac:	3301      	adds	r3, #1
 80128ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80128b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128b2:	2b03      	cmp	r3, #3
 80128b4:	d9dd      	bls.n	8012872 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80128b6:	2300      	movs	r3, #0
 80128b8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80128ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d002      	beq.n	80128c6 <find_volume+0x13e>
 80128c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128c2:	3b01      	subs	r3, #1
 80128c4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80128c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128c8:	009b      	lsls	r3, r3, #2
 80128ca:	3358      	adds	r3, #88	@ 0x58
 80128cc:	443b      	add	r3, r7
 80128ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80128d2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80128d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d005      	beq.n	80128e6 <find_volume+0x15e>
 80128da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80128dc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80128de:	f7ff fefd 	bl	80126dc <check_fs>
 80128e2:	4603      	mov	r3, r0
 80128e4:	e000      	b.n	80128e8 <find_volume+0x160>
 80128e6:	2303      	movs	r3, #3
 80128e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80128ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80128f0:	2b01      	cmp	r3, #1
 80128f2:	d905      	bls.n	8012900 <find_volume+0x178>
 80128f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128f6:	3301      	adds	r3, #1
 80128f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80128fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80128fc:	2b03      	cmp	r3, #3
 80128fe:	d9e2      	bls.n	80128c6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012900:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012904:	2b04      	cmp	r3, #4
 8012906:	d101      	bne.n	801290c <find_volume+0x184>
 8012908:	2301      	movs	r3, #1
 801290a:	e17e      	b.n	8012c0a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801290c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012910:	2b01      	cmp	r3, #1
 8012912:	d901      	bls.n	8012918 <find_volume+0x190>
 8012914:	230d      	movs	r3, #13
 8012916:	e178      	b.n	8012c0a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801291a:	3330      	adds	r3, #48	@ 0x30
 801291c:	330b      	adds	r3, #11
 801291e:	4618      	mov	r0, r3
 8012920:	f7fe fd18 	bl	8011354 <ld_word>
 8012924:	4603      	mov	r3, r0
 8012926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801292a:	d001      	beq.n	8012930 <find_volume+0x1a8>
 801292c:	230d      	movs	r3, #13
 801292e:	e16c      	b.n	8012c0a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012932:	3330      	adds	r3, #48	@ 0x30
 8012934:	3316      	adds	r3, #22
 8012936:	4618      	mov	r0, r3
 8012938:	f7fe fd0c 	bl	8011354 <ld_word>
 801293c:	4603      	mov	r3, r0
 801293e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012940:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012942:	2b00      	cmp	r3, #0
 8012944:	d106      	bne.n	8012954 <find_volume+0x1cc>
 8012946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012948:	3330      	adds	r3, #48	@ 0x30
 801294a:	3324      	adds	r3, #36	@ 0x24
 801294c:	4618      	mov	r0, r3
 801294e:	f7fe fd19 	bl	8011384 <ld_dword>
 8012952:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8012954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012956:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012958:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801295a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801295c:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8012960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012962:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012966:	789b      	ldrb	r3, [r3, #2]
 8012968:	2b01      	cmp	r3, #1
 801296a:	d005      	beq.n	8012978 <find_volume+0x1f0>
 801296c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801296e:	789b      	ldrb	r3, [r3, #2]
 8012970:	2b02      	cmp	r3, #2
 8012972:	d001      	beq.n	8012978 <find_volume+0x1f0>
 8012974:	230d      	movs	r3, #13
 8012976:	e148      	b.n	8012c0a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801297a:	789b      	ldrb	r3, [r3, #2]
 801297c:	461a      	mov	r2, r3
 801297e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012980:	fb02 f303 	mul.w	r3, r2, r3
 8012984:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801298c:	461a      	mov	r2, r3
 801298e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012990:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012994:	895b      	ldrh	r3, [r3, #10]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d008      	beq.n	80129ac <find_volume+0x224>
 801299a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801299c:	895b      	ldrh	r3, [r3, #10]
 801299e:	461a      	mov	r2, r3
 80129a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129a2:	895b      	ldrh	r3, [r3, #10]
 80129a4:	3b01      	subs	r3, #1
 80129a6:	4013      	ands	r3, r2
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d001      	beq.n	80129b0 <find_volume+0x228>
 80129ac:	230d      	movs	r3, #13
 80129ae:	e12c      	b.n	8012c0a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80129b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129b2:	3330      	adds	r3, #48	@ 0x30
 80129b4:	3311      	adds	r3, #17
 80129b6:	4618      	mov	r0, r3
 80129b8:	f7fe fccc 	bl	8011354 <ld_word>
 80129bc:	4603      	mov	r3, r0
 80129be:	461a      	mov	r2, r3
 80129c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80129c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129c6:	891b      	ldrh	r3, [r3, #8]
 80129c8:	f003 030f 	and.w	r3, r3, #15
 80129cc:	b29b      	uxth	r3, r3
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d001      	beq.n	80129d6 <find_volume+0x24e>
 80129d2:	230d      	movs	r3, #13
 80129d4:	e119      	b.n	8012c0a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80129d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129d8:	3330      	adds	r3, #48	@ 0x30
 80129da:	3313      	adds	r3, #19
 80129dc:	4618      	mov	r0, r3
 80129de:	f7fe fcb9 	bl	8011354 <ld_word>
 80129e2:	4603      	mov	r3, r0
 80129e4:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80129e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d106      	bne.n	80129fa <find_volume+0x272>
 80129ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129ee:	3330      	adds	r3, #48	@ 0x30
 80129f0:	3320      	adds	r3, #32
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fe fcc6 	bl	8011384 <ld_dword>
 80129f8:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80129fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80129fc:	3330      	adds	r3, #48	@ 0x30
 80129fe:	330e      	adds	r3, #14
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7fe fca7 	bl	8011354 <ld_word>
 8012a06:	4603      	mov	r3, r0
 8012a08:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012a0a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d101      	bne.n	8012a14 <find_volume+0x28c>
 8012a10:	230d      	movs	r3, #13
 8012a12:	e0fa      	b.n	8012c0a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012a14:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a18:	4413      	add	r3, r2
 8012a1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a1c:	8912      	ldrh	r2, [r2, #8]
 8012a1e:	0912      	lsrs	r2, r2, #4
 8012a20:	b292      	uxth	r2, r2
 8012a22:	4413      	add	r3, r2
 8012a24:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d204      	bcs.n	8012a38 <find_volume+0x2b0>
 8012a2e:	230d      	movs	r3, #13
 8012a30:	e0eb      	b.n	8012c0a <find_volume+0x482>
 8012a32:	bf00      	nop
 8012a34:	20003f40 	.word	0x20003f40
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a3c:	1ad3      	subs	r3, r2, r3
 8012a3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012a40:	8952      	ldrh	r2, [r2, #10]
 8012a42:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a46:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d101      	bne.n	8012a52 <find_volume+0x2ca>
 8012a4e:	230d      	movs	r3, #13
 8012a50:	e0db      	b.n	8012c0a <find_volume+0x482>
		fmt = FS_FAT32;
 8012a52:	2303      	movs	r3, #3
 8012a54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a5a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d802      	bhi.n	8012a68 <find_volume+0x2e0>
 8012a62:	2302      	movs	r3, #2
 8012a64:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a6a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d802      	bhi.n	8012a78 <find_volume+0x2f0>
 8012a72:	2301      	movs	r3, #1
 8012a74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a7a:	1c9a      	adds	r2, r3, #2
 8012a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a7e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012a84:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012a86:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012a88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012a8a:	441a      	add	r2, r3
 8012a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a8e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012a90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a94:	441a      	add	r2, r3
 8012a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012a98:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8012a9a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012a9e:	2b03      	cmp	r3, #3
 8012aa0:	d11e      	bne.n	8012ae0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aa4:	3330      	adds	r3, #48	@ 0x30
 8012aa6:	332a      	adds	r3, #42	@ 0x2a
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	f7fe fc53 	bl	8011354 <ld_word>
 8012aae:	4603      	mov	r3, r0
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d001      	beq.n	8012ab8 <find_volume+0x330>
 8012ab4:	230d      	movs	r3, #13
 8012ab6:	e0a8      	b.n	8012c0a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aba:	891b      	ldrh	r3, [r3, #8]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d001      	beq.n	8012ac4 <find_volume+0x33c>
 8012ac0:	230d      	movs	r3, #13
 8012ac2:	e0a2      	b.n	8012c0a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ac6:	3330      	adds	r3, #48	@ 0x30
 8012ac8:	332c      	adds	r3, #44	@ 0x2c
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7fe fc5a 	bl	8011384 <ld_dword>
 8012ad0:	4602      	mov	r2, r0
 8012ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ad4:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ad8:	695b      	ldr	r3, [r3, #20]
 8012ada:	009b      	lsls	r3, r3, #2
 8012adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8012ade:	e01f      	b.n	8012b20 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ae2:	891b      	ldrh	r3, [r3, #8]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d101      	bne.n	8012aec <find_volume+0x364>
 8012ae8:	230d      	movs	r3, #13
 8012aea:	e08e      	b.n	8012c0a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012aee:	6a1a      	ldr	r2, [r3, #32]
 8012af0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012af2:	441a      	add	r2, r3
 8012af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012af6:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012af8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012afc:	2b02      	cmp	r3, #2
 8012afe:	d103      	bne.n	8012b08 <find_volume+0x380>
 8012b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b02:	695b      	ldr	r3, [r3, #20]
 8012b04:	005b      	lsls	r3, r3, #1
 8012b06:	e00a      	b.n	8012b1e <find_volume+0x396>
 8012b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b0a:	695a      	ldr	r2, [r3, #20]
 8012b0c:	4613      	mov	r3, r2
 8012b0e:	005b      	lsls	r3, r3, #1
 8012b10:	4413      	add	r3, r2
 8012b12:	085a      	lsrs	r2, r3, #1
 8012b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b16:	695b      	ldr	r3, [r3, #20]
 8012b18:	f003 0301 	and.w	r3, r3, #1
 8012b1c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012b1e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b22:	699a      	ldr	r2, [r3, #24]
 8012b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012b26:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8012b2a:	0a5b      	lsrs	r3, r3, #9
 8012b2c:	429a      	cmp	r2, r3
 8012b2e:	d201      	bcs.n	8012b34 <find_volume+0x3ac>
 8012b30:	230d      	movs	r3, #13
 8012b32:	e06a      	b.n	8012c0a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b36:	f04f 32ff 	mov.w	r2, #4294967295
 8012b3a:	611a      	str	r2, [r3, #16]
 8012b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b3e:	691a      	ldr	r2, [r3, #16]
 8012b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b42:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8012b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b46:	2280      	movs	r2, #128	@ 0x80
 8012b48:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012b4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8012b4e:	2b03      	cmp	r3, #3
 8012b50:	d149      	bne.n	8012be6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b54:	3330      	adds	r3, #48	@ 0x30
 8012b56:	3330      	adds	r3, #48	@ 0x30
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f7fe fbfb 	bl	8011354 <ld_word>
 8012b5e:	4603      	mov	r3, r0
 8012b60:	2b01      	cmp	r3, #1
 8012b62:	d140      	bne.n	8012be6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012b64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b66:	3301      	adds	r3, #1
 8012b68:	4619      	mov	r1, r3
 8012b6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012b6c:	f7fe fea2 	bl	80118b4 <move_window>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d137      	bne.n	8012be6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8012b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b78:	2200      	movs	r2, #0
 8012b7a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b7e:	3330      	adds	r3, #48	@ 0x30
 8012b80:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7fe fbe5 	bl	8011354 <ld_word>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d127      	bne.n	8012be6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b98:	3330      	adds	r3, #48	@ 0x30
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7fe fbf2 	bl	8011384 <ld_dword>
 8012ba0:	4603      	mov	r3, r0
 8012ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8012c14 <find_volume+0x48c>)
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d11e      	bne.n	8012be6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012baa:	3330      	adds	r3, #48	@ 0x30
 8012bac:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7fe fbe7 	bl	8011384 <ld_dword>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	4a17      	ldr	r2, [pc, #92]	@ (8012c18 <find_volume+0x490>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d113      	bne.n	8012be6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bc0:	3330      	adds	r3, #48	@ 0x30
 8012bc2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fe fbdc 	bl	8011384 <ld_dword>
 8012bcc:	4602      	mov	r2, r0
 8012bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bd0:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bd4:	3330      	adds	r3, #48	@ 0x30
 8012bd6:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fe fbd2 	bl	8011384 <ld_dword>
 8012be0:	4602      	mov	r2, r0
 8012be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012be4:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012be8:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8012bec:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012bee:	4b0b      	ldr	r3, [pc, #44]	@ (8012c1c <find_volume+0x494>)
 8012bf0:	881b      	ldrh	r3, [r3, #0]
 8012bf2:	3301      	adds	r3, #1
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	4b09      	ldr	r3, [pc, #36]	@ (8012c1c <find_volume+0x494>)
 8012bf8:	801a      	strh	r2, [r3, #0]
 8012bfa:	4b08      	ldr	r3, [pc, #32]	@ (8012c1c <find_volume+0x494>)
 8012bfc:	881a      	ldrh	r2, [r3, #0]
 8012bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012c00:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012c02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012c04:	f7fe fdee 	bl	80117e4 <clear_lock>
#endif
	return FR_OK;
 8012c08:	2300      	movs	r3, #0
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3758      	adds	r7, #88	@ 0x58
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	41615252 	.word	0x41615252
 8012c18:	61417272 	.word	0x61417272
 8012c1c:	20003f44 	.word	0x20003f44

08012c20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b084      	sub	sp, #16
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	6078      	str	r0, [r7, #4]
 8012c28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012c2a:	2309      	movs	r3, #9
 8012c2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d01c      	beq.n	8012c6e <validate+0x4e>
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d018      	beq.n	8012c6e <validate+0x4e>
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	781b      	ldrb	r3, [r3, #0]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d013      	beq.n	8012c6e <validate+0x4e>
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	889a      	ldrh	r2, [r3, #4]
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	88db      	ldrh	r3, [r3, #6]
 8012c50:	429a      	cmp	r2, r3
 8012c52:	d10c      	bne.n	8012c6e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	785b      	ldrb	r3, [r3, #1]
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	f7fe fada 	bl	8011214 <disk_status>
 8012c60:	4603      	mov	r3, r0
 8012c62:	f003 0301 	and.w	r3, r3, #1
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d101      	bne.n	8012c6e <validate+0x4e>
			res = FR_OK;
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012c6e:	7bfb      	ldrb	r3, [r7, #15]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d102      	bne.n	8012c7a <validate+0x5a>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	e000      	b.n	8012c7c <validate+0x5c>
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	683a      	ldr	r2, [r7, #0]
 8012c7e:	6013      	str	r3, [r2, #0]
	return res;
 8012c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3710      	adds	r7, #16
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}
	...

08012c8c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b088      	sub	sp, #32
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	4613      	mov	r3, r2
 8012c98:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012c9a:	68bb      	ldr	r3, [r7, #8]
 8012c9c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012c9e:	f107 0310 	add.w	r3, r7, #16
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ff fcd5 	bl	8012652 <get_ldnumber>
 8012ca8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	da01      	bge.n	8012cb4 <f_mount+0x28>
 8012cb0:	230b      	movs	r3, #11
 8012cb2:	e02b      	b.n	8012d0c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012cb4:	4a17      	ldr	r2, [pc, #92]	@ (8012d14 <f_mount+0x88>)
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cbc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d005      	beq.n	8012cd0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012cc4:	69b8      	ldr	r0, [r7, #24]
 8012cc6:	f7fe fd8d 	bl	80117e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d002      	beq.n	8012cdc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	2200      	movs	r2, #0
 8012cda:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012cdc:	68fa      	ldr	r2, [r7, #12]
 8012cde:	490d      	ldr	r1, [pc, #52]	@ (8012d14 <f_mount+0x88>)
 8012ce0:	69fb      	ldr	r3, [r7, #28]
 8012ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d002      	beq.n	8012cf2 <f_mount+0x66>
 8012cec:	79fb      	ldrb	r3, [r7, #7]
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d001      	beq.n	8012cf6 <f_mount+0x6a>
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	e00a      	b.n	8012d0c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012cf6:	f107 010c 	add.w	r1, r7, #12
 8012cfa:	f107 0308 	add.w	r3, r7, #8
 8012cfe:	2200      	movs	r2, #0
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7ff fd41 	bl	8012788 <find_volume>
 8012d06:	4603      	mov	r3, r0
 8012d08:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	3720      	adds	r7, #32
 8012d10:	46bd      	mov	sp, r7
 8012d12:	bd80      	pop	{r7, pc}
 8012d14:	20003f40 	.word	0x20003f40

08012d18 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b098      	sub	sp, #96	@ 0x60
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60f8      	str	r0, [r7, #12]
 8012d20:	60b9      	str	r1, [r7, #8]
 8012d22:	4613      	mov	r3, r2
 8012d24:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d101      	bne.n	8012d30 <f_open+0x18>
 8012d2c:	2309      	movs	r3, #9
 8012d2e:	e1a9      	b.n	8013084 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012d30:	79fb      	ldrb	r3, [r7, #7]
 8012d32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012d36:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012d38:	79fa      	ldrb	r2, [r7, #7]
 8012d3a:	f107 0110 	add.w	r1, r7, #16
 8012d3e:	f107 0308 	add.w	r3, r7, #8
 8012d42:	4618      	mov	r0, r3
 8012d44:	f7ff fd20 	bl	8012788 <find_volume>
 8012d48:	4603      	mov	r3, r0
 8012d4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8012d4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	f040 818d 	bne.w	8013072 <f_open+0x35a>
		dj.obj.fs = fs;
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012d5c:	68ba      	ldr	r2, [r7, #8]
 8012d5e:	f107 0314 	add.w	r3, r7, #20
 8012d62:	4611      	mov	r1, r2
 8012d64:	4618      	mov	r0, r3
 8012d66:	f7ff fc03 	bl	8012570 <follow_path>
 8012d6a:	4603      	mov	r3, r0
 8012d6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012d70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d118      	bne.n	8012daa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012d78:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8012d7c:	b25b      	sxtb	r3, r3
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	da03      	bge.n	8012d8a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012d82:	2306      	movs	r3, #6
 8012d84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012d88:	e00f      	b.n	8012daa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012d8a:	79fb      	ldrb	r3, [r7, #7]
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	bf8c      	ite	hi
 8012d90:	2301      	movhi	r3, #1
 8012d92:	2300      	movls	r3, #0
 8012d94:	b2db      	uxtb	r3, r3
 8012d96:	461a      	mov	r2, r3
 8012d98:	f107 0314 	add.w	r3, r7, #20
 8012d9c:	4611      	mov	r1, r2
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7fe fbd8 	bl	8011554 <chk_lock>
 8012da4:	4603      	mov	r3, r0
 8012da6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012daa:	79fb      	ldrb	r3, [r7, #7]
 8012dac:	f003 031c 	and.w	r3, r3, #28
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d07f      	beq.n	8012eb4 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8012db4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d017      	beq.n	8012dec <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012dc0:	2b04      	cmp	r3, #4
 8012dc2:	d10e      	bne.n	8012de2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012dc4:	f7fe fc22 	bl	801160c <enq_lock>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d006      	beq.n	8012ddc <f_open+0xc4>
 8012dce:	f107 0314 	add.w	r3, r7, #20
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7ff fb06 	bl	80123e4 <dir_register>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	e000      	b.n	8012dde <f_open+0xc6>
 8012ddc:	2312      	movs	r3, #18
 8012dde:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012de2:	79fb      	ldrb	r3, [r7, #7]
 8012de4:	f043 0308 	orr.w	r3, r3, #8
 8012de8:	71fb      	strb	r3, [r7, #7]
 8012dea:	e010      	b.n	8012e0e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012dec:	7ebb      	ldrb	r3, [r7, #26]
 8012dee:	f003 0311 	and.w	r3, r3, #17
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d003      	beq.n	8012dfe <f_open+0xe6>
					res = FR_DENIED;
 8012df6:	2307      	movs	r3, #7
 8012df8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012dfc:	e007      	b.n	8012e0e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012dfe:	79fb      	ldrb	r3, [r7, #7]
 8012e00:	f003 0304 	and.w	r3, r3, #4
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d002      	beq.n	8012e0e <f_open+0xf6>
 8012e08:	2308      	movs	r3, #8
 8012e0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012e0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d168      	bne.n	8012ee8 <f_open+0x1d0>
 8012e16:	79fb      	ldrb	r3, [r7, #7]
 8012e18:	f003 0308 	and.w	r3, r3, #8
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d063      	beq.n	8012ee8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8012e20:	f7fd fcc0 	bl	80107a4 <get_fattime>
 8012e24:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e28:	330e      	adds	r3, #14
 8012e2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fe fae7 	bl	8011400 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e34:	3316      	adds	r3, #22
 8012e36:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f7fe fae1 	bl	8011400 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e40:	330b      	adds	r3, #11
 8012e42:	2220      	movs	r2, #32
 8012e44:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012e46:	693b      	ldr	r3, [r7, #16]
 8012e48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012e4a:	4611      	mov	r1, r2
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	f7ff fa35 	bl	80122bc <ld_clust>
 8012e52:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012e58:	2200      	movs	r2, #0
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7ff fa4d 	bl	80122fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012e62:	331c      	adds	r3, #28
 8012e64:	2100      	movs	r1, #0
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fe faca 	bl	8011400 <st_dword>
					fs->wflag = 1;
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	2201      	movs	r2, #1
 8012e70:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012e72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d037      	beq.n	8012ee8 <f_open+0x1d0>
						dw = fs->winsect;
 8012e78:	693b      	ldr	r3, [r7, #16]
 8012e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e7c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012e7e:	f107 0314 	add.w	r3, r7, #20
 8012e82:	2200      	movs	r2, #0
 8012e84:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fe ff60 	bl	8011d4c <remove_chain>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8012e92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d126      	bne.n	8012ee8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7fe fd08 	bl	80118b4 <move_window>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012eae:	3a01      	subs	r2, #1
 8012eb0:	60da      	str	r2, [r3, #12]
 8012eb2:	e019      	b.n	8012ee8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012eb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d115      	bne.n	8012ee8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012ebc:	7ebb      	ldrb	r3, [r7, #26]
 8012ebe:	f003 0310 	and.w	r3, r3, #16
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d003      	beq.n	8012ece <f_open+0x1b6>
					res = FR_NO_FILE;
 8012ec6:	2304      	movs	r3, #4
 8012ec8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8012ecc:	e00c      	b.n	8012ee8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012ece:	79fb      	ldrb	r3, [r7, #7]
 8012ed0:	f003 0302 	and.w	r3, r3, #2
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d007      	beq.n	8012ee8 <f_open+0x1d0>
 8012ed8:	7ebb      	ldrb	r3, [r7, #26]
 8012eda:	f003 0301 	and.w	r3, r3, #1
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d002      	beq.n	8012ee8 <f_open+0x1d0>
						res = FR_DENIED;
 8012ee2:	2307      	movs	r3, #7
 8012ee4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012ee8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d126      	bne.n	8012f3e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012ef0:	79fb      	ldrb	r3, [r7, #7]
 8012ef2:	f003 0308 	and.w	r3, r3, #8
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d003      	beq.n	8012f02 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8012efa:	79fb      	ldrb	r3, [r7, #7]
 8012efc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012f00:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8012f0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012f10:	79fb      	ldrb	r3, [r7, #7]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	bf8c      	ite	hi
 8012f16:	2301      	movhi	r3, #1
 8012f18:	2300      	movls	r3, #0
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	f107 0314 	add.w	r3, r7, #20
 8012f22:	4611      	mov	r1, r2
 8012f24:	4618      	mov	r0, r3
 8012f26:	f7fe fb93 	bl	8011650 <inc_lock>
 8012f2a:	4602      	mov	r2, r0
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	691b      	ldr	r3, [r3, #16]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d102      	bne.n	8012f3e <f_open+0x226>
 8012f38:	2302      	movs	r3, #2
 8012f3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	f040 8095 	bne.w	8013072 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012f4c:	4611      	mov	r1, r2
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7ff f9b4 	bl	80122bc <ld_clust>
 8012f54:	4602      	mov	r2, r0
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012f5c:	331c      	adds	r3, #28
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fe fa10 	bl	8011384 <ld_dword>
 8012f64:	4602      	mov	r2, r0
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2200      	movs	r2, #0
 8012f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012f70:	693a      	ldr	r2, [r7, #16]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012f76:	693b      	ldr	r3, [r7, #16]
 8012f78:	88da      	ldrh	r2, [r3, #6]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	79fa      	ldrb	r2, [r7, #7]
 8012f82:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2200      	movs	r2, #0
 8012f88:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2200      	movs	r2, #0
 8012f8e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2200      	movs	r2, #0
 8012f94:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	3330      	adds	r3, #48	@ 0x30
 8012f9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012f9e:	2100      	movs	r1, #0
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7fe fa7a 	bl	801149a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012fa6:	79fb      	ldrb	r3, [r7, #7]
 8012fa8:	f003 0320 	and.w	r3, r3, #32
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d060      	beq.n	8013072 <f_open+0x35a>
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	68db      	ldr	r3, [r3, #12]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d05c      	beq.n	8013072 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	68da      	ldr	r2, [r3, #12]
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	895b      	ldrh	r3, [r3, #10]
 8012fc4:	025b      	lsls	r3, r3, #9
 8012fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	689b      	ldr	r3, [r3, #8]
 8012fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8012fd4:	e016      	b.n	8013004 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7fe fd25 	bl	8011a2a <get_fat>
 8012fe0:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012fe4:	2b01      	cmp	r3, #1
 8012fe6:	d802      	bhi.n	8012fee <f_open+0x2d6>
 8012fe8:	2302      	movs	r3, #2
 8012fea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012fee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ff4:	d102      	bne.n	8012ffc <f_open+0x2e4>
 8012ff6:	2301      	movs	r3, #1
 8012ff8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012ffc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8012ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013000:	1ad3      	subs	r3, r2, r3
 8013002:	657b      	str	r3, [r7, #84]	@ 0x54
 8013004:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013008:	2b00      	cmp	r3, #0
 801300a:	d103      	bne.n	8013014 <f_open+0x2fc>
 801300c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801300e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013010:	429a      	cmp	r2, r3
 8013012:	d8e0      	bhi.n	8012fd6 <f_open+0x2be>
				}
				fp->clust = clst;
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013018:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801301a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801301e:	2b00      	cmp	r3, #0
 8013020:	d127      	bne.n	8013072 <f_open+0x35a>
 8013022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013028:	2b00      	cmp	r3, #0
 801302a:	d022      	beq.n	8013072 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801302c:	693b      	ldr	r3, [r7, #16]
 801302e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013030:	4618      	mov	r0, r3
 8013032:	f7fe fcdb 	bl	80119ec <clust2sect>
 8013036:	6478      	str	r0, [r7, #68]	@ 0x44
 8013038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801303a:	2b00      	cmp	r3, #0
 801303c:	d103      	bne.n	8013046 <f_open+0x32e>
						res = FR_INT_ERR;
 801303e:	2302      	movs	r3, #2
 8013040:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8013044:	e015      	b.n	8013072 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013048:	0a5a      	lsrs	r2, r3, #9
 801304a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801304c:	441a      	add	r2, r3
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	7858      	ldrb	r0, [r3, #1]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	6a1a      	ldr	r2, [r3, #32]
 8013060:	2301      	movs	r3, #1
 8013062:	f7fe f919 	bl	8011298 <disk_read>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d002      	beq.n	8013072 <f_open+0x35a>
 801306c:	2301      	movs	r3, #1
 801306e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013072:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013076:	2b00      	cmp	r3, #0
 8013078:	d002      	beq.n	8013080 <f_open+0x368>
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2200      	movs	r2, #0
 801307e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013080:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8013084:	4618      	mov	r0, r3
 8013086:	3760      	adds	r7, #96	@ 0x60
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}

0801308c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801308c:	b580      	push	{r7, lr}
 801308e:	b08c      	sub	sp, #48	@ 0x30
 8013090:	af00      	add	r7, sp, #0
 8013092:	60f8      	str	r0, [r7, #12]
 8013094:	60b9      	str	r1, [r7, #8]
 8013096:	607a      	str	r2, [r7, #4]
 8013098:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	2200      	movs	r2, #0
 80130a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	f107 0210 	add.w	r2, r7, #16
 80130aa:	4611      	mov	r1, r2
 80130ac:	4618      	mov	r0, r3
 80130ae:	f7ff fdb7 	bl	8012c20 <validate>
 80130b2:	4603      	mov	r3, r0
 80130b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80130b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d107      	bne.n	80130d0 <f_write+0x44>
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	7d5b      	ldrb	r3, [r3, #21]
 80130c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80130c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d002      	beq.n	80130d6 <f_write+0x4a>
 80130d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80130d4:	e14b      	b.n	801336e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	7d1b      	ldrb	r3, [r3, #20]
 80130da:	f003 0302 	and.w	r3, r3, #2
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d101      	bne.n	80130e6 <f_write+0x5a>
 80130e2:	2307      	movs	r3, #7
 80130e4:	e143      	b.n	801336e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80130e6:	68fb      	ldr	r3, [r7, #12]
 80130e8:	699a      	ldr	r2, [r3, #24]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	441a      	add	r2, r3
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	699b      	ldr	r3, [r3, #24]
 80130f2:	429a      	cmp	r2, r3
 80130f4:	f080 812d 	bcs.w	8013352 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	699b      	ldr	r3, [r3, #24]
 80130fc:	43db      	mvns	r3, r3
 80130fe:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013100:	e127      	b.n	8013352 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	699b      	ldr	r3, [r3, #24]
 8013106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801310a:	2b00      	cmp	r3, #0
 801310c:	f040 80e3 	bne.w	80132d6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	699b      	ldr	r3, [r3, #24]
 8013114:	0a5b      	lsrs	r3, r3, #9
 8013116:	693a      	ldr	r2, [r7, #16]
 8013118:	8952      	ldrh	r2, [r2, #10]
 801311a:	3a01      	subs	r2, #1
 801311c:	4013      	ands	r3, r2
 801311e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013120:	69bb      	ldr	r3, [r7, #24]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d143      	bne.n	80131ae <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	699b      	ldr	r3, [r3, #24]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d10c      	bne.n	8013148 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	689b      	ldr	r3, [r3, #8]
 8013132:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013136:	2b00      	cmp	r3, #0
 8013138:	d11a      	bne.n	8013170 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	2100      	movs	r1, #0
 801313e:	4618      	mov	r0, r3
 8013140:	f7fe fe69 	bl	8011e16 <create_chain>
 8013144:	62b8      	str	r0, [r7, #40]	@ 0x28
 8013146:	e013      	b.n	8013170 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801314c:	2b00      	cmp	r3, #0
 801314e:	d007      	beq.n	8013160 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	699b      	ldr	r3, [r3, #24]
 8013154:	4619      	mov	r1, r3
 8013156:	68f8      	ldr	r0, [r7, #12]
 8013158:	f7fe fef5 	bl	8011f46 <clmt_clust>
 801315c:	62b8      	str	r0, [r7, #40]	@ 0x28
 801315e:	e007      	b.n	8013170 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013160:	68fa      	ldr	r2, [r7, #12]
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	69db      	ldr	r3, [r3, #28]
 8013166:	4619      	mov	r1, r3
 8013168:	4610      	mov	r0, r2
 801316a:	f7fe fe54 	bl	8011e16 <create_chain>
 801316e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013172:	2b00      	cmp	r3, #0
 8013174:	f000 80f2 	beq.w	801335c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801317a:	2b01      	cmp	r3, #1
 801317c:	d104      	bne.n	8013188 <f_write+0xfc>
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2202      	movs	r2, #2
 8013182:	755a      	strb	r2, [r3, #21]
 8013184:	2302      	movs	r3, #2
 8013186:	e0f2      	b.n	801336e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801318a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318e:	d104      	bne.n	801319a <f_write+0x10e>
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2201      	movs	r2, #1
 8013194:	755a      	strb	r2, [r3, #21]
 8013196:	2301      	movs	r3, #1
 8013198:	e0e9      	b.n	801336e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801319e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	689b      	ldr	r3, [r3, #8]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d102      	bne.n	80131ae <f_write+0x122>
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131ac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	7d1b      	ldrb	r3, [r3, #20]
 80131b2:	b25b      	sxtb	r3, r3
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	da18      	bge.n	80131ea <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131b8:	693b      	ldr	r3, [r7, #16]
 80131ba:	7858      	ldrb	r0, [r3, #1]
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	6a1a      	ldr	r2, [r3, #32]
 80131c6:	2301      	movs	r3, #1
 80131c8:	f7fe f886 	bl	80112d8 <disk_write>
 80131cc:	4603      	mov	r3, r0
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d004      	beq.n	80131dc <f_write+0x150>
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2201      	movs	r2, #1
 80131d6:	755a      	strb	r2, [r3, #21]
 80131d8:	2301      	movs	r3, #1
 80131da:	e0c8      	b.n	801336e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	7d1b      	ldrb	r3, [r3, #20]
 80131e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80131e4:	b2da      	uxtb	r2, r3
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80131ea:	693a      	ldr	r2, [r7, #16]
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	69db      	ldr	r3, [r3, #28]
 80131f0:	4619      	mov	r1, r3
 80131f2:	4610      	mov	r0, r2
 80131f4:	f7fe fbfa 	bl	80119ec <clust2sect>
 80131f8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d104      	bne.n	801320a <f_write+0x17e>
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	2202      	movs	r2, #2
 8013204:	755a      	strb	r2, [r3, #21]
 8013206:	2302      	movs	r3, #2
 8013208:	e0b1      	b.n	801336e <f_write+0x2e2>
			sect += csect;
 801320a:	697a      	ldr	r2, [r7, #20]
 801320c:	69bb      	ldr	r3, [r7, #24]
 801320e:	4413      	add	r3, r2
 8013210:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	0a5b      	lsrs	r3, r3, #9
 8013216:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013218:	6a3b      	ldr	r3, [r7, #32]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d03c      	beq.n	8013298 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801321e:	69ba      	ldr	r2, [r7, #24]
 8013220:	6a3b      	ldr	r3, [r7, #32]
 8013222:	4413      	add	r3, r2
 8013224:	693a      	ldr	r2, [r7, #16]
 8013226:	8952      	ldrh	r2, [r2, #10]
 8013228:	4293      	cmp	r3, r2
 801322a:	d905      	bls.n	8013238 <f_write+0x1ac>
					cc = fs->csize - csect;
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	895b      	ldrh	r3, [r3, #10]
 8013230:	461a      	mov	r2, r3
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	1ad3      	subs	r3, r2, r3
 8013236:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	7858      	ldrb	r0, [r3, #1]
 801323c:	6a3b      	ldr	r3, [r7, #32]
 801323e:	697a      	ldr	r2, [r7, #20]
 8013240:	69f9      	ldr	r1, [r7, #28]
 8013242:	f7fe f849 	bl	80112d8 <disk_write>
 8013246:	4603      	mov	r3, r0
 8013248:	2b00      	cmp	r3, #0
 801324a:	d004      	beq.n	8013256 <f_write+0x1ca>
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2201      	movs	r2, #1
 8013250:	755a      	strb	r2, [r3, #21]
 8013252:	2301      	movs	r3, #1
 8013254:	e08b      	b.n	801336e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	6a1a      	ldr	r2, [r3, #32]
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	1ad3      	subs	r3, r2, r3
 801325e:	6a3a      	ldr	r2, [r7, #32]
 8013260:	429a      	cmp	r2, r3
 8013262:	d915      	bls.n	8013290 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	6a1a      	ldr	r2, [r3, #32]
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	025b      	lsls	r3, r3, #9
 8013274:	69fa      	ldr	r2, [r7, #28]
 8013276:	4413      	add	r3, r2
 8013278:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801327c:	4619      	mov	r1, r3
 801327e:	f7fe f8eb 	bl	8011458 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	7d1b      	ldrb	r3, [r3, #20]
 8013286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801328a:	b2da      	uxtb	r2, r3
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013290:	6a3b      	ldr	r3, [r7, #32]
 8013292:	025b      	lsls	r3, r3, #9
 8013294:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8013296:	e03f      	b.n	8013318 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	6a1b      	ldr	r3, [r3, #32]
 801329c:	697a      	ldr	r2, [r7, #20]
 801329e:	429a      	cmp	r2, r3
 80132a0:	d016      	beq.n	80132d0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	699a      	ldr	r2, [r3, #24]
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d210      	bcs.n	80132d0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	7858      	ldrb	r0, [r3, #1]
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80132b8:	2301      	movs	r3, #1
 80132ba:	697a      	ldr	r2, [r7, #20]
 80132bc:	f7fd ffec 	bl	8011298 <disk_read>
 80132c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d004      	beq.n	80132d0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	2201      	movs	r2, #1
 80132ca:	755a      	strb	r2, [r3, #21]
 80132cc:	2301      	movs	r3, #1
 80132ce:	e04e      	b.n	801336e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	697a      	ldr	r2, [r7, #20]
 80132d4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	699b      	ldr	r3, [r3, #24]
 80132da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132de:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80132e2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80132e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	429a      	cmp	r2, r3
 80132ea:	d901      	bls.n	80132f0 <f_write+0x264>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	699b      	ldr	r3, [r3, #24]
 80132fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80132fe:	4413      	add	r3, r2
 8013300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013302:	69f9      	ldr	r1, [r7, #28]
 8013304:	4618      	mov	r0, r3
 8013306:	f7fe f8a7 	bl	8011458 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	7d1b      	ldrb	r3, [r3, #20]
 801330e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8013312:	b2da      	uxtb	r2, r3
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013318:	69fa      	ldr	r2, [r7, #28]
 801331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801331c:	4413      	add	r3, r2
 801331e:	61fb      	str	r3, [r7, #28]
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	699a      	ldr	r2, [r3, #24]
 8013324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013326:	441a      	add	r2, r3
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	619a      	str	r2, [r3, #24]
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	68da      	ldr	r2, [r3, #12]
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	699b      	ldr	r3, [r3, #24]
 8013334:	429a      	cmp	r2, r3
 8013336:	bf38      	it	cc
 8013338:	461a      	movcc	r2, r3
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	60da      	str	r2, [r3, #12]
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	681a      	ldr	r2, [r3, #0]
 8013342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013344:	441a      	add	r2, r3
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	601a      	str	r2, [r3, #0]
 801334a:	687a      	ldr	r2, [r7, #4]
 801334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801334e:	1ad3      	subs	r3, r2, r3
 8013350:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	2b00      	cmp	r3, #0
 8013356:	f47f aed4 	bne.w	8013102 <f_write+0x76>
 801335a:	e000      	b.n	801335e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801335c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	7d1b      	ldrb	r3, [r3, #20]
 8013362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013366:	b2da      	uxtb	r2, r3
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801336c:	2300      	movs	r3, #0
}
 801336e:	4618      	mov	r0, r3
 8013370:	3730      	adds	r7, #48	@ 0x30
 8013372:	46bd      	mov	sp, r7
 8013374:	bd80      	pop	{r7, pc}

08013376 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013376:	b580      	push	{r7, lr}
 8013378:	b086      	sub	sp, #24
 801337a:	af00      	add	r7, sp, #0
 801337c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f107 0208 	add.w	r2, r7, #8
 8013384:	4611      	mov	r1, r2
 8013386:	4618      	mov	r0, r3
 8013388:	f7ff fc4a 	bl	8012c20 <validate>
 801338c:	4603      	mov	r3, r0
 801338e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013390:	7dfb      	ldrb	r3, [r7, #23]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d168      	bne.n	8013468 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	7d1b      	ldrb	r3, [r3, #20]
 801339a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d062      	beq.n	8013468 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	7d1b      	ldrb	r3, [r3, #20]
 80133a6:	b25b      	sxtb	r3, r3
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	da15      	bge.n	80133d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	7858      	ldrb	r0, [r3, #1]
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6a1a      	ldr	r2, [r3, #32]
 80133ba:	2301      	movs	r3, #1
 80133bc:	f7fd ff8c 	bl	80112d8 <disk_write>
 80133c0:	4603      	mov	r3, r0
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d001      	beq.n	80133ca <f_sync+0x54>
 80133c6:	2301      	movs	r3, #1
 80133c8:	e04f      	b.n	801346a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	7d1b      	ldrb	r3, [r3, #20]
 80133ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80133d2:	b2da      	uxtb	r2, r3
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80133d8:	f7fd f9e4 	bl	80107a4 <get_fattime>
 80133dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80133e4:	4619      	mov	r1, r3
 80133e6:	4610      	mov	r0, r2
 80133e8:	f7fe fa64 	bl	80118b4 <move_window>
 80133ec:	4603      	mov	r3, r0
 80133ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80133f0:	7dfb      	ldrb	r3, [r7, #23]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d138      	bne.n	8013468 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80133fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	330b      	adds	r3, #11
 8013400:	781a      	ldrb	r2, [r3, #0]
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	330b      	adds	r3, #11
 8013406:	f042 0220 	orr.w	r2, r2, #32
 801340a:	b2d2      	uxtb	r2, r2
 801340c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6818      	ldr	r0, [r3, #0]
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	689b      	ldr	r3, [r3, #8]
 8013416:	461a      	mov	r2, r3
 8013418:	68f9      	ldr	r1, [r7, #12]
 801341a:	f7fe ff6e 	bl	80122fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f103 021c 	add.w	r2, r3, #28
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	4619      	mov	r1, r3
 801342a:	4610      	mov	r0, r2
 801342c:	f7fd ffe8 	bl	8011400 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	3316      	adds	r3, #22
 8013434:	6939      	ldr	r1, [r7, #16]
 8013436:	4618      	mov	r0, r3
 8013438:	f7fd ffe2 	bl	8011400 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	3312      	adds	r3, #18
 8013440:	2100      	movs	r1, #0
 8013442:	4618      	mov	r0, r3
 8013444:	f7fd ffc1 	bl	80113ca <st_word>
					fs->wflag = 1;
 8013448:	68bb      	ldr	r3, [r7, #8]
 801344a:	2201      	movs	r2, #1
 801344c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801344e:	68bb      	ldr	r3, [r7, #8]
 8013450:	4618      	mov	r0, r3
 8013452:	f7fe fa5d 	bl	8011910 <sync_fs>
 8013456:	4603      	mov	r3, r0
 8013458:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	7d1b      	ldrb	r3, [r3, #20]
 801345e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8013462:	b2da      	uxtb	r2, r3
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013468:	7dfb      	ldrb	r3, [r7, #23]
}
 801346a:	4618      	mov	r0, r3
 801346c:	3718      	adds	r7, #24
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}

08013472 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013472:	b580      	push	{r7, lr}
 8013474:	b084      	sub	sp, #16
 8013476:	af00      	add	r7, sp, #0
 8013478:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7ff ff7b 	bl	8013376 <f_sync>
 8013480:	4603      	mov	r3, r0
 8013482:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013484:	7bfb      	ldrb	r3, [r7, #15]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d118      	bne.n	80134bc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	f107 0208 	add.w	r2, r7, #8
 8013490:	4611      	mov	r1, r2
 8013492:	4618      	mov	r0, r3
 8013494:	f7ff fbc4 	bl	8012c20 <validate>
 8013498:	4603      	mov	r3, r0
 801349a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801349c:	7bfb      	ldrb	r3, [r7, #15]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d10c      	bne.n	80134bc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	691b      	ldr	r3, [r3, #16]
 80134a6:	4618      	mov	r0, r3
 80134a8:	f7fe f960 	bl	801176c <dec_lock>
 80134ac:	4603      	mov	r3, r0
 80134ae:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80134b0:	7bfb      	ldrb	r3, [r7, #15]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d102      	bne.n	80134bc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	2200      	movs	r2, #0
 80134ba:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80134bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3710      	adds	r7, #16
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}

080134c6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80134c6:	b580      	push	{r7, lr}
 80134c8:	b090      	sub	sp, #64	@ 0x40
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	6078      	str	r0, [r7, #4]
 80134ce:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	f107 0208 	add.w	r2, r7, #8
 80134d6:	4611      	mov	r1, r2
 80134d8:	4618      	mov	r0, r3
 80134da:	f7ff fba1 	bl	8012c20 <validate>
 80134de:	4603      	mov	r3, r0
 80134e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80134e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d103      	bne.n	80134f4 <f_lseek+0x2e>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	7d5b      	ldrb	r3, [r3, #21]
 80134f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80134f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d002      	beq.n	8013502 <f_lseek+0x3c>
 80134fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013500:	e1e6      	b.n	80138d0 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013506:	2b00      	cmp	r3, #0
 8013508:	f000 80d1 	beq.w	80136ae <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801350c:	683b      	ldr	r3, [r7, #0]
 801350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013512:	d15a      	bne.n	80135ca <f_lseek+0x104>
			tbl = fp->cltbl;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013518:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801351c:	1d1a      	adds	r2, r3, #4
 801351e:	627a      	str	r2, [r7, #36]	@ 0x24
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	617b      	str	r3, [r7, #20]
 8013524:	2302      	movs	r3, #2
 8013526:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	689b      	ldr	r3, [r3, #8]
 801352c:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801352e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013530:	2b00      	cmp	r3, #0
 8013532:	d03a      	beq.n	80135aa <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013536:	613b      	str	r3, [r7, #16]
 8013538:	2300      	movs	r3, #0
 801353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801353e:	3302      	adds	r3, #2
 8013540:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8013542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013544:	60fb      	str	r3, [r7, #12]
 8013546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013548:	3301      	adds	r3, #1
 801354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8013550:	4618      	mov	r0, r3
 8013552:	f7fe fa6a 	bl	8011a2a <get_fat>
 8013556:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801355a:	2b01      	cmp	r3, #1
 801355c:	d804      	bhi.n	8013568 <f_lseek+0xa2>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2202      	movs	r2, #2
 8013562:	755a      	strb	r2, [r3, #21]
 8013564:	2302      	movs	r3, #2
 8013566:	e1b3      	b.n	80138d0 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801356a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801356e:	d104      	bne.n	801357a <f_lseek+0xb4>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2201      	movs	r2, #1
 8013574:	755a      	strb	r2, [r3, #21]
 8013576:	2301      	movs	r3, #1
 8013578:	e1aa      	b.n	80138d0 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	3301      	adds	r3, #1
 801357e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013580:	429a      	cmp	r2, r3
 8013582:	d0de      	beq.n	8013542 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	429a      	cmp	r2, r3
 801358a:	d809      	bhi.n	80135a0 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801358e:	1d1a      	adds	r2, r3, #4
 8013590:	627a      	str	r2, [r7, #36]	@ 0x24
 8013592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013594:	601a      	str	r2, [r3, #0]
 8013596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013598:	1d1a      	adds	r2, r3, #4
 801359a:	627a      	str	r2, [r7, #36]	@ 0x24
 801359c:	693a      	ldr	r2, [r7, #16]
 801359e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	695b      	ldr	r3, [r3, #20]
 80135a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80135a6:	429a      	cmp	r2, r3
 80135a8:	d3c4      	bcc.n	8013534 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80135b0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80135b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80135b4:	697b      	ldr	r3, [r7, #20]
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d803      	bhi.n	80135c2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80135ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135bc:	2200      	movs	r2, #0
 80135be:	601a      	str	r2, [r3, #0]
 80135c0:	e184      	b.n	80138cc <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80135c2:	2311      	movs	r3, #17
 80135c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80135c8:	e180      	b.n	80138cc <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	683a      	ldr	r2, [r7, #0]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d902      	bls.n	80135da <f_lseek+0x114>
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	68db      	ldr	r3, [r3, #12]
 80135d8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	683a      	ldr	r2, [r7, #0]
 80135de:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	f000 8172 	beq.w	80138cc <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	3b01      	subs	r3, #1
 80135ec:	4619      	mov	r1, r3
 80135ee:	6878      	ldr	r0, [r7, #4]
 80135f0:	f7fe fca9 	bl	8011f46 <clmt_clust>
 80135f4:	4602      	mov	r2, r0
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80135fa:	68ba      	ldr	r2, [r7, #8]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	69db      	ldr	r3, [r3, #28]
 8013600:	4619      	mov	r1, r3
 8013602:	4610      	mov	r0, r2
 8013604:	f7fe f9f2 	bl	80119ec <clust2sect>
 8013608:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d104      	bne.n	801361a <f_lseek+0x154>
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	2202      	movs	r2, #2
 8013614:	755a      	strb	r2, [r3, #21]
 8013616:	2302      	movs	r3, #2
 8013618:	e15a      	b.n	80138d0 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	3b01      	subs	r3, #1
 801361e:	0a5b      	lsrs	r3, r3, #9
 8013620:	68ba      	ldr	r2, [r7, #8]
 8013622:	8952      	ldrh	r2, [r2, #10]
 8013624:	3a01      	subs	r2, #1
 8013626:	4013      	ands	r3, r2
 8013628:	69ba      	ldr	r2, [r7, #24]
 801362a:	4413      	add	r3, r2
 801362c:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	699b      	ldr	r3, [r3, #24]
 8013632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013636:	2b00      	cmp	r3, #0
 8013638:	f000 8148 	beq.w	80138cc <f_lseek+0x406>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	6a1b      	ldr	r3, [r3, #32]
 8013640:	69ba      	ldr	r2, [r7, #24]
 8013642:	429a      	cmp	r2, r3
 8013644:	f000 8142 	beq.w	80138cc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	7d1b      	ldrb	r3, [r3, #20]
 801364c:	b25b      	sxtb	r3, r3
 801364e:	2b00      	cmp	r3, #0
 8013650:	da18      	bge.n	8013684 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	7858      	ldrb	r0, [r3, #1]
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	6a1a      	ldr	r2, [r3, #32]
 8013660:	2301      	movs	r3, #1
 8013662:	f7fd fe39 	bl	80112d8 <disk_write>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	d004      	beq.n	8013676 <f_lseek+0x1b0>
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2201      	movs	r2, #1
 8013670:	755a      	strb	r2, [r3, #21]
 8013672:	2301      	movs	r3, #1
 8013674:	e12c      	b.n	80138d0 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	7d1b      	ldrb	r3, [r3, #20]
 801367a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801367e:	b2da      	uxtb	r2, r3
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	7858      	ldrb	r0, [r3, #1]
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801368e:	2301      	movs	r3, #1
 8013690:	69ba      	ldr	r2, [r7, #24]
 8013692:	f7fd fe01 	bl	8011298 <disk_read>
 8013696:	4603      	mov	r3, r0
 8013698:	2b00      	cmp	r3, #0
 801369a:	d004      	beq.n	80136a6 <f_lseek+0x1e0>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2201      	movs	r2, #1
 80136a0:	755a      	strb	r2, [r3, #21]
 80136a2:	2301      	movs	r3, #1
 80136a4:	e114      	b.n	80138d0 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	69ba      	ldr	r2, [r7, #24]
 80136aa:	621a      	str	r2, [r3, #32]
 80136ac:	e10e      	b.n	80138cc <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	68db      	ldr	r3, [r3, #12]
 80136b2:	683a      	ldr	r2, [r7, #0]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d908      	bls.n	80136ca <f_lseek+0x204>
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	7d1b      	ldrb	r3, [r3, #20]
 80136bc:	f003 0302 	and.w	r3, r3, #2
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d102      	bne.n	80136ca <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	68db      	ldr	r3, [r3, #12]
 80136c8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	699b      	ldr	r3, [r3, #24]
 80136ce:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80136d0:	2300      	movs	r3, #0
 80136d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80136d8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80136da:	683b      	ldr	r3, [r7, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	f000 80a7 	beq.w	8013830 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	895b      	ldrh	r3, [r3, #10]
 80136e6:	025b      	lsls	r3, r3, #9
 80136e8:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80136ea:	6a3b      	ldr	r3, [r7, #32]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d01b      	beq.n	8013728 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80136f0:	683b      	ldr	r3, [r7, #0]
 80136f2:	1e5a      	subs	r2, r3, #1
 80136f4:	69fb      	ldr	r3, [r7, #28]
 80136f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80136fa:	6a3b      	ldr	r3, [r7, #32]
 80136fc:	1e59      	subs	r1, r3, #1
 80136fe:	69fb      	ldr	r3, [r7, #28]
 8013700:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013704:	429a      	cmp	r2, r3
 8013706:	d30f      	bcc.n	8013728 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013708:	6a3b      	ldr	r3, [r7, #32]
 801370a:	1e5a      	subs	r2, r3, #1
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	425b      	negs	r3, r3
 8013710:	401a      	ands	r2, r3
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	699b      	ldr	r3, [r3, #24]
 801371a:	683a      	ldr	r2, [r7, #0]
 801371c:	1ad3      	subs	r3, r2, r3
 801371e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	69db      	ldr	r3, [r3, #28]
 8013724:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013726:	e022      	b.n	801376e <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	689b      	ldr	r3, [r3, #8]
 801372c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801372e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013730:	2b00      	cmp	r3, #0
 8013732:	d119      	bne.n	8013768 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2100      	movs	r1, #0
 8013738:	4618      	mov	r0, r3
 801373a:	f7fe fb6c 	bl	8011e16 <create_chain>
 801373e:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013742:	2b01      	cmp	r3, #1
 8013744:	d104      	bne.n	8013750 <f_lseek+0x28a>
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2202      	movs	r2, #2
 801374a:	755a      	strb	r2, [r3, #21]
 801374c:	2302      	movs	r3, #2
 801374e:	e0bf      	b.n	80138d0 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013756:	d104      	bne.n	8013762 <f_lseek+0x29c>
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	2201      	movs	r2, #1
 801375c:	755a      	strb	r2, [r3, #21]
 801375e:	2301      	movs	r3, #1
 8013760:	e0b6      	b.n	80138d0 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013766:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801376c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013770:	2b00      	cmp	r3, #0
 8013772:	d05d      	beq.n	8013830 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8013774:	e03a      	b.n	80137ec <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8013776:	683a      	ldr	r2, [r7, #0]
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	1ad3      	subs	r3, r2, r3
 801377c:	603b      	str	r3, [r7, #0]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	699a      	ldr	r2, [r3, #24]
 8013782:	69fb      	ldr	r3, [r7, #28]
 8013784:	441a      	add	r2, r3
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	7d1b      	ldrb	r3, [r3, #20]
 801378e:	f003 0302 	and.w	r3, r3, #2
 8013792:	2b00      	cmp	r3, #0
 8013794:	d00b      	beq.n	80137ae <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801379a:	4618      	mov	r0, r3
 801379c:	f7fe fb3b 	bl	8011e16 <create_chain>
 80137a0:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80137a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d108      	bne.n	80137ba <f_lseek+0x2f4>
							ofs = 0; break;
 80137a8:	2300      	movs	r3, #0
 80137aa:	603b      	str	r3, [r7, #0]
 80137ac:	e022      	b.n	80137f4 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fe f939 	bl	8011a2a <get_fat>
 80137b8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80137ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137c0:	d104      	bne.n	80137cc <f_lseek+0x306>
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2201      	movs	r2, #1
 80137c6:	755a      	strb	r2, [r3, #21]
 80137c8:	2301      	movs	r3, #1
 80137ca:	e081      	b.n	80138d0 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80137cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137ce:	2b01      	cmp	r3, #1
 80137d0:	d904      	bls.n	80137dc <f_lseek+0x316>
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	695b      	ldr	r3, [r3, #20]
 80137d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137d8:	429a      	cmp	r2, r3
 80137da:	d304      	bcc.n	80137e6 <f_lseek+0x320>
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2202      	movs	r2, #2
 80137e0:	755a      	strb	r2, [r3, #21]
 80137e2:	2302      	movs	r3, #2
 80137e4:	e074      	b.n	80138d0 <f_lseek+0x40a>
					fp->clust = clst;
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80137ea:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80137ec:	683a      	ldr	r2, [r7, #0]
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d8c0      	bhi.n	8013776 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	699a      	ldr	r2, [r3, #24]
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	441a      	add	r2, r3
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013806:	2b00      	cmp	r3, #0
 8013808:	d012      	beq.n	8013830 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801380a:	68bb      	ldr	r3, [r7, #8]
 801380c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801380e:	4618      	mov	r0, r3
 8013810:	f7fe f8ec 	bl	80119ec <clust2sect>
 8013814:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013818:	2b00      	cmp	r3, #0
 801381a:	d104      	bne.n	8013826 <f_lseek+0x360>
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	2202      	movs	r2, #2
 8013820:	755a      	strb	r2, [r3, #21]
 8013822:	2302      	movs	r3, #2
 8013824:	e054      	b.n	80138d0 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 8013826:	683b      	ldr	r3, [r7, #0]
 8013828:	0a5b      	lsrs	r3, r3, #9
 801382a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801382c:	4413      	add	r3, r2
 801382e:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	699a      	ldr	r2, [r3, #24]
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	68db      	ldr	r3, [r3, #12]
 8013838:	429a      	cmp	r2, r3
 801383a:	d90a      	bls.n	8013852 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	699a      	ldr	r2, [r3, #24]
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	7d1b      	ldrb	r3, [r3, #20]
 8013848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801384c:	b2da      	uxtb	r2, r3
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	699b      	ldr	r3, [r3, #24]
 8013856:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801385a:	2b00      	cmp	r3, #0
 801385c:	d036      	beq.n	80138cc <f_lseek+0x406>
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6a1b      	ldr	r3, [r3, #32]
 8013862:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013864:	429a      	cmp	r2, r3
 8013866:	d031      	beq.n	80138cc <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	7d1b      	ldrb	r3, [r3, #20]
 801386c:	b25b      	sxtb	r3, r3
 801386e:	2b00      	cmp	r3, #0
 8013870:	da18      	bge.n	80138a4 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	7858      	ldrb	r0, [r3, #1]
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6a1a      	ldr	r2, [r3, #32]
 8013880:	2301      	movs	r3, #1
 8013882:	f7fd fd29 	bl	80112d8 <disk_write>
 8013886:	4603      	mov	r3, r0
 8013888:	2b00      	cmp	r3, #0
 801388a:	d004      	beq.n	8013896 <f_lseek+0x3d0>
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	2201      	movs	r2, #1
 8013890:	755a      	strb	r2, [r3, #21]
 8013892:	2301      	movs	r3, #1
 8013894:	e01c      	b.n	80138d0 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	7d1b      	ldrb	r3, [r3, #20]
 801389a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801389e:	b2da      	uxtb	r2, r3
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80138a4:	68bb      	ldr	r3, [r7, #8]
 80138a6:	7858      	ldrb	r0, [r3, #1]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80138ae:	2301      	movs	r3, #1
 80138b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80138b2:	f7fd fcf1 	bl	8011298 <disk_read>
 80138b6:	4603      	mov	r3, r0
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d004      	beq.n	80138c6 <f_lseek+0x400>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2201      	movs	r2, #1
 80138c0:	755a      	strb	r2, [r3, #21]
 80138c2:	2301      	movs	r3, #1
 80138c4:	e004      	b.n	80138d0 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80138ca:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80138cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3740      	adds	r7, #64	@ 0x40
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80138d8:	b480      	push	{r7}
 80138da:	b087      	sub	sp, #28
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	60b9      	str	r1, [r7, #8]
 80138e2:	4613      	mov	r3, r2
 80138e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80138e6:	2301      	movs	r3, #1
 80138e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80138ea:	2300      	movs	r3, #0
 80138ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80138ee:	4b1f      	ldr	r3, [pc, #124]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 80138f0:	7a5b      	ldrb	r3, [r3, #9]
 80138f2:	b2db      	uxtb	r3, r3
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d131      	bne.n	801395c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80138f8:	4b1c      	ldr	r3, [pc, #112]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 80138fa:	7a5b      	ldrb	r3, [r3, #9]
 80138fc:	b2db      	uxtb	r3, r3
 80138fe:	461a      	mov	r2, r3
 8013900:	4b1a      	ldr	r3, [pc, #104]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 8013902:	2100      	movs	r1, #0
 8013904:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013906:	4b19      	ldr	r3, [pc, #100]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 8013908:	7a5b      	ldrb	r3, [r3, #9]
 801390a:	b2db      	uxtb	r3, r3
 801390c:	4a17      	ldr	r2, [pc, #92]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	4413      	add	r3, r2
 8013912:	68fa      	ldr	r2, [r7, #12]
 8013914:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013916:	4b15      	ldr	r3, [pc, #84]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 8013918:	7a5b      	ldrb	r3, [r3, #9]
 801391a:	b2db      	uxtb	r3, r3
 801391c:	461a      	mov	r2, r3
 801391e:	4b13      	ldr	r3, [pc, #76]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 8013920:	4413      	add	r3, r2
 8013922:	79fa      	ldrb	r2, [r7, #7]
 8013924:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013926:	4b11      	ldr	r3, [pc, #68]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 8013928:	7a5b      	ldrb	r3, [r3, #9]
 801392a:	b2db      	uxtb	r3, r3
 801392c:	1c5a      	adds	r2, r3, #1
 801392e:	b2d1      	uxtb	r1, r2
 8013930:	4a0e      	ldr	r2, [pc, #56]	@ (801396c <FATFS_LinkDriverEx+0x94>)
 8013932:	7251      	strb	r1, [r2, #9]
 8013934:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013936:	7dbb      	ldrb	r3, [r7, #22]
 8013938:	3330      	adds	r3, #48	@ 0x30
 801393a:	b2da      	uxtb	r2, r3
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013940:	68bb      	ldr	r3, [r7, #8]
 8013942:	3301      	adds	r3, #1
 8013944:	223a      	movs	r2, #58	@ 0x3a
 8013946:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013948:	68bb      	ldr	r3, [r7, #8]
 801394a:	3302      	adds	r3, #2
 801394c:	222f      	movs	r2, #47	@ 0x2f
 801394e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	3303      	adds	r3, #3
 8013954:	2200      	movs	r2, #0
 8013956:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013958:	2300      	movs	r3, #0
 801395a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801395c:	7dfb      	ldrb	r3, [r7, #23]
}
 801395e:	4618      	mov	r0, r3
 8013960:	371c      	adds	r7, #28
 8013962:	46bd      	mov	sp, r7
 8013964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013968:	4770      	bx	lr
 801396a:	bf00      	nop
 801396c:	20003f68 	.word	0x20003f68

08013970 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b082      	sub	sp, #8
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801397a:	2200      	movs	r2, #0
 801397c:	6839      	ldr	r1, [r7, #0]
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f7ff ffaa 	bl	80138d8 <FATFS_LinkDriverEx>
 8013984:	4603      	mov	r3, r0
}
 8013986:	4618      	mov	r0, r3
 8013988:	3708      	adds	r7, #8
 801398a:	46bd      	mov	sp, r7
 801398c:	bd80      	pop	{r7, pc}
	...

08013990 <calloc>:
 8013990:	4b02      	ldr	r3, [pc, #8]	@ (801399c <calloc+0xc>)
 8013992:	460a      	mov	r2, r1
 8013994:	4601      	mov	r1, r0
 8013996:	6818      	ldr	r0, [r3, #0]
 8013998:	f000 b802 	b.w	80139a0 <_calloc_r>
 801399c:	2000006c 	.word	0x2000006c

080139a0 <_calloc_r>:
 80139a0:	b570      	push	{r4, r5, r6, lr}
 80139a2:	fba1 5402 	umull	r5, r4, r1, r2
 80139a6:	b93c      	cbnz	r4, 80139b8 <_calloc_r+0x18>
 80139a8:	4629      	mov	r1, r5
 80139aa:	f000 f82f 	bl	8013a0c <_malloc_r>
 80139ae:	4606      	mov	r6, r0
 80139b0:	b928      	cbnz	r0, 80139be <_calloc_r+0x1e>
 80139b2:	2600      	movs	r6, #0
 80139b4:	4630      	mov	r0, r6
 80139b6:	bd70      	pop	{r4, r5, r6, pc}
 80139b8:	220c      	movs	r2, #12
 80139ba:	6002      	str	r2, [r0, #0]
 80139bc:	e7f9      	b.n	80139b2 <_calloc_r+0x12>
 80139be:	462a      	mov	r2, r5
 80139c0:	4621      	mov	r1, r4
 80139c2:	f001 f87c 	bl	8014abe <memset>
 80139c6:	e7f5      	b.n	80139b4 <_calloc_r+0x14>

080139c8 <sbrk_aligned>:
 80139c8:	b570      	push	{r4, r5, r6, lr}
 80139ca:	4e0f      	ldr	r6, [pc, #60]	@ (8013a08 <sbrk_aligned+0x40>)
 80139cc:	460c      	mov	r4, r1
 80139ce:	6831      	ldr	r1, [r6, #0]
 80139d0:	4605      	mov	r5, r0
 80139d2:	b911      	cbnz	r1, 80139da <sbrk_aligned+0x12>
 80139d4:	f001 f8ca 	bl	8014b6c <_sbrk_r>
 80139d8:	6030      	str	r0, [r6, #0]
 80139da:	4621      	mov	r1, r4
 80139dc:	4628      	mov	r0, r5
 80139de:	f001 f8c5 	bl	8014b6c <_sbrk_r>
 80139e2:	1c43      	adds	r3, r0, #1
 80139e4:	d103      	bne.n	80139ee <sbrk_aligned+0x26>
 80139e6:	f04f 34ff 	mov.w	r4, #4294967295
 80139ea:	4620      	mov	r0, r4
 80139ec:	bd70      	pop	{r4, r5, r6, pc}
 80139ee:	1cc4      	adds	r4, r0, #3
 80139f0:	f024 0403 	bic.w	r4, r4, #3
 80139f4:	42a0      	cmp	r0, r4
 80139f6:	d0f8      	beq.n	80139ea <sbrk_aligned+0x22>
 80139f8:	1a21      	subs	r1, r4, r0
 80139fa:	4628      	mov	r0, r5
 80139fc:	f001 f8b6 	bl	8014b6c <_sbrk_r>
 8013a00:	3001      	adds	r0, #1
 8013a02:	d1f2      	bne.n	80139ea <sbrk_aligned+0x22>
 8013a04:	e7ef      	b.n	80139e6 <sbrk_aligned+0x1e>
 8013a06:	bf00      	nop
 8013a08:	20003f74 	.word	0x20003f74

08013a0c <_malloc_r>:
 8013a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a10:	1ccd      	adds	r5, r1, #3
 8013a12:	f025 0503 	bic.w	r5, r5, #3
 8013a16:	3508      	adds	r5, #8
 8013a18:	2d0c      	cmp	r5, #12
 8013a1a:	bf38      	it	cc
 8013a1c:	250c      	movcc	r5, #12
 8013a1e:	2d00      	cmp	r5, #0
 8013a20:	4606      	mov	r6, r0
 8013a22:	db01      	blt.n	8013a28 <_malloc_r+0x1c>
 8013a24:	42a9      	cmp	r1, r5
 8013a26:	d904      	bls.n	8013a32 <_malloc_r+0x26>
 8013a28:	230c      	movs	r3, #12
 8013a2a:	6033      	str	r3, [r6, #0]
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013b08 <_malloc_r+0xfc>
 8013a36:	f000 f869 	bl	8013b0c <__malloc_lock>
 8013a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8013a3e:	461c      	mov	r4, r3
 8013a40:	bb44      	cbnz	r4, 8013a94 <_malloc_r+0x88>
 8013a42:	4629      	mov	r1, r5
 8013a44:	4630      	mov	r0, r6
 8013a46:	f7ff ffbf 	bl	80139c8 <sbrk_aligned>
 8013a4a:	1c43      	adds	r3, r0, #1
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	d158      	bne.n	8013b02 <_malloc_r+0xf6>
 8013a50:	f8d8 4000 	ldr.w	r4, [r8]
 8013a54:	4627      	mov	r7, r4
 8013a56:	2f00      	cmp	r7, #0
 8013a58:	d143      	bne.n	8013ae2 <_malloc_r+0xd6>
 8013a5a:	2c00      	cmp	r4, #0
 8013a5c:	d04b      	beq.n	8013af6 <_malloc_r+0xea>
 8013a5e:	6823      	ldr	r3, [r4, #0]
 8013a60:	4639      	mov	r1, r7
 8013a62:	4630      	mov	r0, r6
 8013a64:	eb04 0903 	add.w	r9, r4, r3
 8013a68:	f001 f880 	bl	8014b6c <_sbrk_r>
 8013a6c:	4581      	cmp	r9, r0
 8013a6e:	d142      	bne.n	8013af6 <_malloc_r+0xea>
 8013a70:	6821      	ldr	r1, [r4, #0]
 8013a72:	1a6d      	subs	r5, r5, r1
 8013a74:	4629      	mov	r1, r5
 8013a76:	4630      	mov	r0, r6
 8013a78:	f7ff ffa6 	bl	80139c8 <sbrk_aligned>
 8013a7c:	3001      	adds	r0, #1
 8013a7e:	d03a      	beq.n	8013af6 <_malloc_r+0xea>
 8013a80:	6823      	ldr	r3, [r4, #0]
 8013a82:	442b      	add	r3, r5
 8013a84:	6023      	str	r3, [r4, #0]
 8013a86:	f8d8 3000 	ldr.w	r3, [r8]
 8013a8a:	685a      	ldr	r2, [r3, #4]
 8013a8c:	bb62      	cbnz	r2, 8013ae8 <_malloc_r+0xdc>
 8013a8e:	f8c8 7000 	str.w	r7, [r8]
 8013a92:	e00f      	b.n	8013ab4 <_malloc_r+0xa8>
 8013a94:	6822      	ldr	r2, [r4, #0]
 8013a96:	1b52      	subs	r2, r2, r5
 8013a98:	d420      	bmi.n	8013adc <_malloc_r+0xd0>
 8013a9a:	2a0b      	cmp	r2, #11
 8013a9c:	d917      	bls.n	8013ace <_malloc_r+0xc2>
 8013a9e:	1961      	adds	r1, r4, r5
 8013aa0:	42a3      	cmp	r3, r4
 8013aa2:	6025      	str	r5, [r4, #0]
 8013aa4:	bf18      	it	ne
 8013aa6:	6059      	strne	r1, [r3, #4]
 8013aa8:	6863      	ldr	r3, [r4, #4]
 8013aaa:	bf08      	it	eq
 8013aac:	f8c8 1000 	streq.w	r1, [r8]
 8013ab0:	5162      	str	r2, [r4, r5]
 8013ab2:	604b      	str	r3, [r1, #4]
 8013ab4:	4630      	mov	r0, r6
 8013ab6:	f000 f82f 	bl	8013b18 <__malloc_unlock>
 8013aba:	f104 000b 	add.w	r0, r4, #11
 8013abe:	1d23      	adds	r3, r4, #4
 8013ac0:	f020 0007 	bic.w	r0, r0, #7
 8013ac4:	1ac2      	subs	r2, r0, r3
 8013ac6:	bf1c      	itt	ne
 8013ac8:	1a1b      	subne	r3, r3, r0
 8013aca:	50a3      	strne	r3, [r4, r2]
 8013acc:	e7af      	b.n	8013a2e <_malloc_r+0x22>
 8013ace:	6862      	ldr	r2, [r4, #4]
 8013ad0:	42a3      	cmp	r3, r4
 8013ad2:	bf0c      	ite	eq
 8013ad4:	f8c8 2000 	streq.w	r2, [r8]
 8013ad8:	605a      	strne	r2, [r3, #4]
 8013ada:	e7eb      	b.n	8013ab4 <_malloc_r+0xa8>
 8013adc:	4623      	mov	r3, r4
 8013ade:	6864      	ldr	r4, [r4, #4]
 8013ae0:	e7ae      	b.n	8013a40 <_malloc_r+0x34>
 8013ae2:	463c      	mov	r4, r7
 8013ae4:	687f      	ldr	r7, [r7, #4]
 8013ae6:	e7b6      	b.n	8013a56 <_malloc_r+0x4a>
 8013ae8:	461a      	mov	r2, r3
 8013aea:	685b      	ldr	r3, [r3, #4]
 8013aec:	42a3      	cmp	r3, r4
 8013aee:	d1fb      	bne.n	8013ae8 <_malloc_r+0xdc>
 8013af0:	2300      	movs	r3, #0
 8013af2:	6053      	str	r3, [r2, #4]
 8013af4:	e7de      	b.n	8013ab4 <_malloc_r+0xa8>
 8013af6:	230c      	movs	r3, #12
 8013af8:	6033      	str	r3, [r6, #0]
 8013afa:	4630      	mov	r0, r6
 8013afc:	f000 f80c 	bl	8013b18 <__malloc_unlock>
 8013b00:	e794      	b.n	8013a2c <_malloc_r+0x20>
 8013b02:	6005      	str	r5, [r0, #0]
 8013b04:	e7d6      	b.n	8013ab4 <_malloc_r+0xa8>
 8013b06:	bf00      	nop
 8013b08:	20003f78 	.word	0x20003f78

08013b0c <__malloc_lock>:
 8013b0c:	4801      	ldr	r0, [pc, #4]	@ (8013b14 <__malloc_lock+0x8>)
 8013b0e:	f001 b87a 	b.w	8014c06 <__retarget_lock_acquire_recursive>
 8013b12:	bf00      	nop
 8013b14:	200040bc 	.word	0x200040bc

08013b18 <__malloc_unlock>:
 8013b18:	4801      	ldr	r0, [pc, #4]	@ (8013b20 <__malloc_unlock+0x8>)
 8013b1a:	f001 b875 	b.w	8014c08 <__retarget_lock_release_recursive>
 8013b1e:	bf00      	nop
 8013b20:	200040bc 	.word	0x200040bc

08013b24 <__cvt>:
 8013b24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013b28:	ec57 6b10 	vmov	r6, r7, d0
 8013b2c:	2f00      	cmp	r7, #0
 8013b2e:	460c      	mov	r4, r1
 8013b30:	4619      	mov	r1, r3
 8013b32:	463b      	mov	r3, r7
 8013b34:	bfbb      	ittet	lt
 8013b36:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8013b3a:	461f      	movlt	r7, r3
 8013b3c:	2300      	movge	r3, #0
 8013b3e:	232d      	movlt	r3, #45	@ 0x2d
 8013b40:	700b      	strb	r3, [r1, #0]
 8013b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013b44:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8013b48:	4691      	mov	r9, r2
 8013b4a:	f023 0820 	bic.w	r8, r3, #32
 8013b4e:	bfbc      	itt	lt
 8013b50:	4632      	movlt	r2, r6
 8013b52:	4616      	movlt	r6, r2
 8013b54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013b58:	d005      	beq.n	8013b66 <__cvt+0x42>
 8013b5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8013b5e:	d100      	bne.n	8013b62 <__cvt+0x3e>
 8013b60:	3401      	adds	r4, #1
 8013b62:	2102      	movs	r1, #2
 8013b64:	e000      	b.n	8013b68 <__cvt+0x44>
 8013b66:	2103      	movs	r1, #3
 8013b68:	ab03      	add	r3, sp, #12
 8013b6a:	9301      	str	r3, [sp, #4]
 8013b6c:	ab02      	add	r3, sp, #8
 8013b6e:	9300      	str	r3, [sp, #0]
 8013b70:	ec47 6b10 	vmov	d0, r6, r7
 8013b74:	4653      	mov	r3, sl
 8013b76:	4622      	mov	r2, r4
 8013b78:	f001 f8e6 	bl	8014d48 <_dtoa_r>
 8013b7c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8013b80:	4605      	mov	r5, r0
 8013b82:	d119      	bne.n	8013bb8 <__cvt+0x94>
 8013b84:	f019 0f01 	tst.w	r9, #1
 8013b88:	d00e      	beq.n	8013ba8 <__cvt+0x84>
 8013b8a:	eb00 0904 	add.w	r9, r0, r4
 8013b8e:	2200      	movs	r2, #0
 8013b90:	2300      	movs	r3, #0
 8013b92:	4630      	mov	r0, r6
 8013b94:	4639      	mov	r1, r7
 8013b96:	f7ec ffb7 	bl	8000b08 <__aeabi_dcmpeq>
 8013b9a:	b108      	cbz	r0, 8013ba0 <__cvt+0x7c>
 8013b9c:	f8cd 900c 	str.w	r9, [sp, #12]
 8013ba0:	2230      	movs	r2, #48	@ 0x30
 8013ba2:	9b03      	ldr	r3, [sp, #12]
 8013ba4:	454b      	cmp	r3, r9
 8013ba6:	d31e      	bcc.n	8013be6 <__cvt+0xc2>
 8013ba8:	9b03      	ldr	r3, [sp, #12]
 8013baa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013bac:	1b5b      	subs	r3, r3, r5
 8013bae:	4628      	mov	r0, r5
 8013bb0:	6013      	str	r3, [r2, #0]
 8013bb2:	b004      	add	sp, #16
 8013bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bb8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8013bbc:	eb00 0904 	add.w	r9, r0, r4
 8013bc0:	d1e5      	bne.n	8013b8e <__cvt+0x6a>
 8013bc2:	7803      	ldrb	r3, [r0, #0]
 8013bc4:	2b30      	cmp	r3, #48	@ 0x30
 8013bc6:	d10a      	bne.n	8013bde <__cvt+0xba>
 8013bc8:	2200      	movs	r2, #0
 8013bca:	2300      	movs	r3, #0
 8013bcc:	4630      	mov	r0, r6
 8013bce:	4639      	mov	r1, r7
 8013bd0:	f7ec ff9a 	bl	8000b08 <__aeabi_dcmpeq>
 8013bd4:	b918      	cbnz	r0, 8013bde <__cvt+0xba>
 8013bd6:	f1c4 0401 	rsb	r4, r4, #1
 8013bda:	f8ca 4000 	str.w	r4, [sl]
 8013bde:	f8da 3000 	ldr.w	r3, [sl]
 8013be2:	4499      	add	r9, r3
 8013be4:	e7d3      	b.n	8013b8e <__cvt+0x6a>
 8013be6:	1c59      	adds	r1, r3, #1
 8013be8:	9103      	str	r1, [sp, #12]
 8013bea:	701a      	strb	r2, [r3, #0]
 8013bec:	e7d9      	b.n	8013ba2 <__cvt+0x7e>

08013bee <__exponent>:
 8013bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bf0:	2900      	cmp	r1, #0
 8013bf2:	bfba      	itte	lt
 8013bf4:	4249      	neglt	r1, r1
 8013bf6:	232d      	movlt	r3, #45	@ 0x2d
 8013bf8:	232b      	movge	r3, #43	@ 0x2b
 8013bfa:	2909      	cmp	r1, #9
 8013bfc:	7002      	strb	r2, [r0, #0]
 8013bfe:	7043      	strb	r3, [r0, #1]
 8013c00:	dd29      	ble.n	8013c56 <__exponent+0x68>
 8013c02:	f10d 0307 	add.w	r3, sp, #7
 8013c06:	461d      	mov	r5, r3
 8013c08:	270a      	movs	r7, #10
 8013c0a:	461a      	mov	r2, r3
 8013c0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8013c10:	fb07 1416 	mls	r4, r7, r6, r1
 8013c14:	3430      	adds	r4, #48	@ 0x30
 8013c16:	f802 4c01 	strb.w	r4, [r2, #-1]
 8013c1a:	460c      	mov	r4, r1
 8013c1c:	2c63      	cmp	r4, #99	@ 0x63
 8013c1e:	f103 33ff 	add.w	r3, r3, #4294967295
 8013c22:	4631      	mov	r1, r6
 8013c24:	dcf1      	bgt.n	8013c0a <__exponent+0x1c>
 8013c26:	3130      	adds	r1, #48	@ 0x30
 8013c28:	1e94      	subs	r4, r2, #2
 8013c2a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013c2e:	1c41      	adds	r1, r0, #1
 8013c30:	4623      	mov	r3, r4
 8013c32:	42ab      	cmp	r3, r5
 8013c34:	d30a      	bcc.n	8013c4c <__exponent+0x5e>
 8013c36:	f10d 0309 	add.w	r3, sp, #9
 8013c3a:	1a9b      	subs	r3, r3, r2
 8013c3c:	42ac      	cmp	r4, r5
 8013c3e:	bf88      	it	hi
 8013c40:	2300      	movhi	r3, #0
 8013c42:	3302      	adds	r3, #2
 8013c44:	4403      	add	r3, r0
 8013c46:	1a18      	subs	r0, r3, r0
 8013c48:	b003      	add	sp, #12
 8013c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c4c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8013c50:	f801 6f01 	strb.w	r6, [r1, #1]!
 8013c54:	e7ed      	b.n	8013c32 <__exponent+0x44>
 8013c56:	2330      	movs	r3, #48	@ 0x30
 8013c58:	3130      	adds	r1, #48	@ 0x30
 8013c5a:	7083      	strb	r3, [r0, #2]
 8013c5c:	70c1      	strb	r1, [r0, #3]
 8013c5e:	1d03      	adds	r3, r0, #4
 8013c60:	e7f1      	b.n	8013c46 <__exponent+0x58>
	...

08013c64 <_printf_float>:
 8013c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c68:	b08d      	sub	sp, #52	@ 0x34
 8013c6a:	460c      	mov	r4, r1
 8013c6c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8013c70:	4616      	mov	r6, r2
 8013c72:	461f      	mov	r7, r3
 8013c74:	4605      	mov	r5, r0
 8013c76:	f000 ff41 	bl	8014afc <_localeconv_r>
 8013c7a:	6803      	ldr	r3, [r0, #0]
 8013c7c:	9304      	str	r3, [sp, #16]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7ec fb16 	bl	80002b0 <strlen>
 8013c84:	2300      	movs	r3, #0
 8013c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8013c88:	f8d8 3000 	ldr.w	r3, [r8]
 8013c8c:	9005      	str	r0, [sp, #20]
 8013c8e:	3307      	adds	r3, #7
 8013c90:	f023 0307 	bic.w	r3, r3, #7
 8013c94:	f103 0208 	add.w	r2, r3, #8
 8013c98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013c9c:	f8d4 b000 	ldr.w	fp, [r4]
 8013ca0:	f8c8 2000 	str.w	r2, [r8]
 8013ca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013ca8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8013cac:	9307      	str	r3, [sp, #28]
 8013cae:	f8cd 8018 	str.w	r8, [sp, #24]
 8013cb2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8013cb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013cba:	4b9c      	ldr	r3, [pc, #624]	@ (8013f2c <_printf_float+0x2c8>)
 8013cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cc0:	f7ec ff54 	bl	8000b6c <__aeabi_dcmpun>
 8013cc4:	bb70      	cbnz	r0, 8013d24 <_printf_float+0xc0>
 8013cc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013cca:	4b98      	ldr	r3, [pc, #608]	@ (8013f2c <_printf_float+0x2c8>)
 8013ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8013cd0:	f7ec ff2e 	bl	8000b30 <__aeabi_dcmple>
 8013cd4:	bb30      	cbnz	r0, 8013d24 <_printf_float+0xc0>
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	2300      	movs	r3, #0
 8013cda:	4640      	mov	r0, r8
 8013cdc:	4649      	mov	r1, r9
 8013cde:	f7ec ff1d 	bl	8000b1c <__aeabi_dcmplt>
 8013ce2:	b110      	cbz	r0, 8013cea <_printf_float+0x86>
 8013ce4:	232d      	movs	r3, #45	@ 0x2d
 8013ce6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cea:	4a91      	ldr	r2, [pc, #580]	@ (8013f30 <_printf_float+0x2cc>)
 8013cec:	4b91      	ldr	r3, [pc, #580]	@ (8013f34 <_printf_float+0x2d0>)
 8013cee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8013cf2:	bf94      	ite	ls
 8013cf4:	4690      	movls	r8, r2
 8013cf6:	4698      	movhi	r8, r3
 8013cf8:	2303      	movs	r3, #3
 8013cfa:	6123      	str	r3, [r4, #16]
 8013cfc:	f02b 0304 	bic.w	r3, fp, #4
 8013d00:	6023      	str	r3, [r4, #0]
 8013d02:	f04f 0900 	mov.w	r9, #0
 8013d06:	9700      	str	r7, [sp, #0]
 8013d08:	4633      	mov	r3, r6
 8013d0a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8013d0c:	4621      	mov	r1, r4
 8013d0e:	4628      	mov	r0, r5
 8013d10:	f000 f9d2 	bl	80140b8 <_printf_common>
 8013d14:	3001      	adds	r0, #1
 8013d16:	f040 808d 	bne.w	8013e34 <_printf_float+0x1d0>
 8013d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8013d1e:	b00d      	add	sp, #52	@ 0x34
 8013d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d24:	4642      	mov	r2, r8
 8013d26:	464b      	mov	r3, r9
 8013d28:	4640      	mov	r0, r8
 8013d2a:	4649      	mov	r1, r9
 8013d2c:	f7ec ff1e 	bl	8000b6c <__aeabi_dcmpun>
 8013d30:	b140      	cbz	r0, 8013d44 <_printf_float+0xe0>
 8013d32:	464b      	mov	r3, r9
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	bfbc      	itt	lt
 8013d38:	232d      	movlt	r3, #45	@ 0x2d
 8013d3a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8013d3e:	4a7e      	ldr	r2, [pc, #504]	@ (8013f38 <_printf_float+0x2d4>)
 8013d40:	4b7e      	ldr	r3, [pc, #504]	@ (8013f3c <_printf_float+0x2d8>)
 8013d42:	e7d4      	b.n	8013cee <_printf_float+0x8a>
 8013d44:	6863      	ldr	r3, [r4, #4]
 8013d46:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8013d4a:	9206      	str	r2, [sp, #24]
 8013d4c:	1c5a      	adds	r2, r3, #1
 8013d4e:	d13b      	bne.n	8013dc8 <_printf_float+0x164>
 8013d50:	2306      	movs	r3, #6
 8013d52:	6063      	str	r3, [r4, #4]
 8013d54:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8013d58:	2300      	movs	r3, #0
 8013d5a:	6022      	str	r2, [r4, #0]
 8013d5c:	9303      	str	r3, [sp, #12]
 8013d5e:	ab0a      	add	r3, sp, #40	@ 0x28
 8013d60:	e9cd a301 	strd	sl, r3, [sp, #4]
 8013d64:	ab09      	add	r3, sp, #36	@ 0x24
 8013d66:	9300      	str	r3, [sp, #0]
 8013d68:	6861      	ldr	r1, [r4, #4]
 8013d6a:	ec49 8b10 	vmov	d0, r8, r9
 8013d6e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8013d72:	4628      	mov	r0, r5
 8013d74:	f7ff fed6 	bl	8013b24 <__cvt>
 8013d78:	9b06      	ldr	r3, [sp, #24]
 8013d7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013d7c:	2b47      	cmp	r3, #71	@ 0x47
 8013d7e:	4680      	mov	r8, r0
 8013d80:	d129      	bne.n	8013dd6 <_printf_float+0x172>
 8013d82:	1cc8      	adds	r0, r1, #3
 8013d84:	db02      	blt.n	8013d8c <_printf_float+0x128>
 8013d86:	6863      	ldr	r3, [r4, #4]
 8013d88:	4299      	cmp	r1, r3
 8013d8a:	dd41      	ble.n	8013e10 <_printf_float+0x1ac>
 8013d8c:	f1aa 0a02 	sub.w	sl, sl, #2
 8013d90:	fa5f fa8a 	uxtb.w	sl, sl
 8013d94:	3901      	subs	r1, #1
 8013d96:	4652      	mov	r2, sl
 8013d98:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8013d9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8013d9e:	f7ff ff26 	bl	8013bee <__exponent>
 8013da2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013da4:	1813      	adds	r3, r2, r0
 8013da6:	2a01      	cmp	r2, #1
 8013da8:	4681      	mov	r9, r0
 8013daa:	6123      	str	r3, [r4, #16]
 8013dac:	dc02      	bgt.n	8013db4 <_printf_float+0x150>
 8013dae:	6822      	ldr	r2, [r4, #0]
 8013db0:	07d2      	lsls	r2, r2, #31
 8013db2:	d501      	bpl.n	8013db8 <_printf_float+0x154>
 8013db4:	3301      	adds	r3, #1
 8013db6:	6123      	str	r3, [r4, #16]
 8013db8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d0a2      	beq.n	8013d06 <_printf_float+0xa2>
 8013dc0:	232d      	movs	r3, #45	@ 0x2d
 8013dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013dc6:	e79e      	b.n	8013d06 <_printf_float+0xa2>
 8013dc8:	9a06      	ldr	r2, [sp, #24]
 8013dca:	2a47      	cmp	r2, #71	@ 0x47
 8013dcc:	d1c2      	bne.n	8013d54 <_printf_float+0xf0>
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d1c0      	bne.n	8013d54 <_printf_float+0xf0>
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	e7bd      	b.n	8013d52 <_printf_float+0xee>
 8013dd6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013dda:	d9db      	bls.n	8013d94 <_printf_float+0x130>
 8013ddc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8013de0:	d118      	bne.n	8013e14 <_printf_float+0x1b0>
 8013de2:	2900      	cmp	r1, #0
 8013de4:	6863      	ldr	r3, [r4, #4]
 8013de6:	dd0b      	ble.n	8013e00 <_printf_float+0x19c>
 8013de8:	6121      	str	r1, [r4, #16]
 8013dea:	b913      	cbnz	r3, 8013df2 <_printf_float+0x18e>
 8013dec:	6822      	ldr	r2, [r4, #0]
 8013dee:	07d0      	lsls	r0, r2, #31
 8013df0:	d502      	bpl.n	8013df8 <_printf_float+0x194>
 8013df2:	3301      	adds	r3, #1
 8013df4:	440b      	add	r3, r1
 8013df6:	6123      	str	r3, [r4, #16]
 8013df8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8013dfa:	f04f 0900 	mov.w	r9, #0
 8013dfe:	e7db      	b.n	8013db8 <_printf_float+0x154>
 8013e00:	b913      	cbnz	r3, 8013e08 <_printf_float+0x1a4>
 8013e02:	6822      	ldr	r2, [r4, #0]
 8013e04:	07d2      	lsls	r2, r2, #31
 8013e06:	d501      	bpl.n	8013e0c <_printf_float+0x1a8>
 8013e08:	3302      	adds	r3, #2
 8013e0a:	e7f4      	b.n	8013df6 <_printf_float+0x192>
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	e7f2      	b.n	8013df6 <_printf_float+0x192>
 8013e10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8013e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e16:	4299      	cmp	r1, r3
 8013e18:	db05      	blt.n	8013e26 <_printf_float+0x1c2>
 8013e1a:	6823      	ldr	r3, [r4, #0]
 8013e1c:	6121      	str	r1, [r4, #16]
 8013e1e:	07d8      	lsls	r0, r3, #31
 8013e20:	d5ea      	bpl.n	8013df8 <_printf_float+0x194>
 8013e22:	1c4b      	adds	r3, r1, #1
 8013e24:	e7e7      	b.n	8013df6 <_printf_float+0x192>
 8013e26:	2900      	cmp	r1, #0
 8013e28:	bfd4      	ite	le
 8013e2a:	f1c1 0202 	rsble	r2, r1, #2
 8013e2e:	2201      	movgt	r2, #1
 8013e30:	4413      	add	r3, r2
 8013e32:	e7e0      	b.n	8013df6 <_printf_float+0x192>
 8013e34:	6823      	ldr	r3, [r4, #0]
 8013e36:	055a      	lsls	r2, r3, #21
 8013e38:	d407      	bmi.n	8013e4a <_printf_float+0x1e6>
 8013e3a:	6923      	ldr	r3, [r4, #16]
 8013e3c:	4642      	mov	r2, r8
 8013e3e:	4631      	mov	r1, r6
 8013e40:	4628      	mov	r0, r5
 8013e42:	47b8      	blx	r7
 8013e44:	3001      	adds	r0, #1
 8013e46:	d12b      	bne.n	8013ea0 <_printf_float+0x23c>
 8013e48:	e767      	b.n	8013d1a <_printf_float+0xb6>
 8013e4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8013e4e:	f240 80dd 	bls.w	801400c <_printf_float+0x3a8>
 8013e52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013e56:	2200      	movs	r2, #0
 8013e58:	2300      	movs	r3, #0
 8013e5a:	f7ec fe55 	bl	8000b08 <__aeabi_dcmpeq>
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	d033      	beq.n	8013eca <_printf_float+0x266>
 8013e62:	4a37      	ldr	r2, [pc, #220]	@ (8013f40 <_printf_float+0x2dc>)
 8013e64:	2301      	movs	r3, #1
 8013e66:	4631      	mov	r1, r6
 8013e68:	4628      	mov	r0, r5
 8013e6a:	47b8      	blx	r7
 8013e6c:	3001      	adds	r0, #1
 8013e6e:	f43f af54 	beq.w	8013d1a <_printf_float+0xb6>
 8013e72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8013e76:	4543      	cmp	r3, r8
 8013e78:	db02      	blt.n	8013e80 <_printf_float+0x21c>
 8013e7a:	6823      	ldr	r3, [r4, #0]
 8013e7c:	07d8      	lsls	r0, r3, #31
 8013e7e:	d50f      	bpl.n	8013ea0 <_printf_float+0x23c>
 8013e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013e84:	4631      	mov	r1, r6
 8013e86:	4628      	mov	r0, r5
 8013e88:	47b8      	blx	r7
 8013e8a:	3001      	adds	r0, #1
 8013e8c:	f43f af45 	beq.w	8013d1a <_printf_float+0xb6>
 8013e90:	f04f 0900 	mov.w	r9, #0
 8013e94:	f108 38ff 	add.w	r8, r8, #4294967295
 8013e98:	f104 0a1a 	add.w	sl, r4, #26
 8013e9c:	45c8      	cmp	r8, r9
 8013e9e:	dc09      	bgt.n	8013eb4 <_printf_float+0x250>
 8013ea0:	6823      	ldr	r3, [r4, #0]
 8013ea2:	079b      	lsls	r3, r3, #30
 8013ea4:	f100 8103 	bmi.w	80140ae <_printf_float+0x44a>
 8013ea8:	68e0      	ldr	r0, [r4, #12]
 8013eaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013eac:	4298      	cmp	r0, r3
 8013eae:	bfb8      	it	lt
 8013eb0:	4618      	movlt	r0, r3
 8013eb2:	e734      	b.n	8013d1e <_printf_float+0xba>
 8013eb4:	2301      	movs	r3, #1
 8013eb6:	4652      	mov	r2, sl
 8013eb8:	4631      	mov	r1, r6
 8013eba:	4628      	mov	r0, r5
 8013ebc:	47b8      	blx	r7
 8013ebe:	3001      	adds	r0, #1
 8013ec0:	f43f af2b 	beq.w	8013d1a <_printf_float+0xb6>
 8013ec4:	f109 0901 	add.w	r9, r9, #1
 8013ec8:	e7e8      	b.n	8013e9c <_printf_float+0x238>
 8013eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	dc39      	bgt.n	8013f44 <_printf_float+0x2e0>
 8013ed0:	4a1b      	ldr	r2, [pc, #108]	@ (8013f40 <_printf_float+0x2dc>)
 8013ed2:	2301      	movs	r3, #1
 8013ed4:	4631      	mov	r1, r6
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	47b8      	blx	r7
 8013eda:	3001      	adds	r0, #1
 8013edc:	f43f af1d 	beq.w	8013d1a <_printf_float+0xb6>
 8013ee0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8013ee4:	ea59 0303 	orrs.w	r3, r9, r3
 8013ee8:	d102      	bne.n	8013ef0 <_printf_float+0x28c>
 8013eea:	6823      	ldr	r3, [r4, #0]
 8013eec:	07d9      	lsls	r1, r3, #31
 8013eee:	d5d7      	bpl.n	8013ea0 <_printf_float+0x23c>
 8013ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013ef4:	4631      	mov	r1, r6
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	47b8      	blx	r7
 8013efa:	3001      	adds	r0, #1
 8013efc:	f43f af0d 	beq.w	8013d1a <_printf_float+0xb6>
 8013f00:	f04f 0a00 	mov.w	sl, #0
 8013f04:	f104 0b1a 	add.w	fp, r4, #26
 8013f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f0a:	425b      	negs	r3, r3
 8013f0c:	4553      	cmp	r3, sl
 8013f0e:	dc01      	bgt.n	8013f14 <_printf_float+0x2b0>
 8013f10:	464b      	mov	r3, r9
 8013f12:	e793      	b.n	8013e3c <_printf_float+0x1d8>
 8013f14:	2301      	movs	r3, #1
 8013f16:	465a      	mov	r2, fp
 8013f18:	4631      	mov	r1, r6
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	47b8      	blx	r7
 8013f1e:	3001      	adds	r0, #1
 8013f20:	f43f aefb 	beq.w	8013d1a <_printf_float+0xb6>
 8013f24:	f10a 0a01 	add.w	sl, sl, #1
 8013f28:	e7ee      	b.n	8013f08 <_printf_float+0x2a4>
 8013f2a:	bf00      	nop
 8013f2c:	7fefffff 	.word	0x7fefffff
 8013f30:	0801a9cc 	.word	0x0801a9cc
 8013f34:	0801a9d0 	.word	0x0801a9d0
 8013f38:	0801a9d4 	.word	0x0801a9d4
 8013f3c:	0801a9d8 	.word	0x0801a9d8
 8013f40:	0801ad68 	.word	0x0801ad68
 8013f44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013f46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013f4a:	4553      	cmp	r3, sl
 8013f4c:	bfa8      	it	ge
 8013f4e:	4653      	movge	r3, sl
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	4699      	mov	r9, r3
 8013f54:	dc36      	bgt.n	8013fc4 <_printf_float+0x360>
 8013f56:	f04f 0b00 	mov.w	fp, #0
 8013f5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f5e:	f104 021a 	add.w	r2, r4, #26
 8013f62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8013f64:	9306      	str	r3, [sp, #24]
 8013f66:	eba3 0309 	sub.w	r3, r3, r9
 8013f6a:	455b      	cmp	r3, fp
 8013f6c:	dc31      	bgt.n	8013fd2 <_printf_float+0x36e>
 8013f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f70:	459a      	cmp	sl, r3
 8013f72:	dc3a      	bgt.n	8013fea <_printf_float+0x386>
 8013f74:	6823      	ldr	r3, [r4, #0]
 8013f76:	07da      	lsls	r2, r3, #31
 8013f78:	d437      	bmi.n	8013fea <_printf_float+0x386>
 8013f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f7c:	ebaa 0903 	sub.w	r9, sl, r3
 8013f80:	9b06      	ldr	r3, [sp, #24]
 8013f82:	ebaa 0303 	sub.w	r3, sl, r3
 8013f86:	4599      	cmp	r9, r3
 8013f88:	bfa8      	it	ge
 8013f8a:	4699      	movge	r9, r3
 8013f8c:	f1b9 0f00 	cmp.w	r9, #0
 8013f90:	dc33      	bgt.n	8013ffa <_printf_float+0x396>
 8013f92:	f04f 0800 	mov.w	r8, #0
 8013f96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013f9a:	f104 0b1a 	add.w	fp, r4, #26
 8013f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fa0:	ebaa 0303 	sub.w	r3, sl, r3
 8013fa4:	eba3 0309 	sub.w	r3, r3, r9
 8013fa8:	4543      	cmp	r3, r8
 8013faa:	f77f af79 	ble.w	8013ea0 <_printf_float+0x23c>
 8013fae:	2301      	movs	r3, #1
 8013fb0:	465a      	mov	r2, fp
 8013fb2:	4631      	mov	r1, r6
 8013fb4:	4628      	mov	r0, r5
 8013fb6:	47b8      	blx	r7
 8013fb8:	3001      	adds	r0, #1
 8013fba:	f43f aeae 	beq.w	8013d1a <_printf_float+0xb6>
 8013fbe:	f108 0801 	add.w	r8, r8, #1
 8013fc2:	e7ec      	b.n	8013f9e <_printf_float+0x33a>
 8013fc4:	4642      	mov	r2, r8
 8013fc6:	4631      	mov	r1, r6
 8013fc8:	4628      	mov	r0, r5
 8013fca:	47b8      	blx	r7
 8013fcc:	3001      	adds	r0, #1
 8013fce:	d1c2      	bne.n	8013f56 <_printf_float+0x2f2>
 8013fd0:	e6a3      	b.n	8013d1a <_printf_float+0xb6>
 8013fd2:	2301      	movs	r3, #1
 8013fd4:	4631      	mov	r1, r6
 8013fd6:	4628      	mov	r0, r5
 8013fd8:	9206      	str	r2, [sp, #24]
 8013fda:	47b8      	blx	r7
 8013fdc:	3001      	adds	r0, #1
 8013fde:	f43f ae9c 	beq.w	8013d1a <_printf_float+0xb6>
 8013fe2:	9a06      	ldr	r2, [sp, #24]
 8013fe4:	f10b 0b01 	add.w	fp, fp, #1
 8013fe8:	e7bb      	b.n	8013f62 <_printf_float+0x2fe>
 8013fea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013fee:	4631      	mov	r1, r6
 8013ff0:	4628      	mov	r0, r5
 8013ff2:	47b8      	blx	r7
 8013ff4:	3001      	adds	r0, #1
 8013ff6:	d1c0      	bne.n	8013f7a <_printf_float+0x316>
 8013ff8:	e68f      	b.n	8013d1a <_printf_float+0xb6>
 8013ffa:	9a06      	ldr	r2, [sp, #24]
 8013ffc:	464b      	mov	r3, r9
 8013ffe:	4442      	add	r2, r8
 8014000:	4631      	mov	r1, r6
 8014002:	4628      	mov	r0, r5
 8014004:	47b8      	blx	r7
 8014006:	3001      	adds	r0, #1
 8014008:	d1c3      	bne.n	8013f92 <_printf_float+0x32e>
 801400a:	e686      	b.n	8013d1a <_printf_float+0xb6>
 801400c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8014010:	f1ba 0f01 	cmp.w	sl, #1
 8014014:	dc01      	bgt.n	801401a <_printf_float+0x3b6>
 8014016:	07db      	lsls	r3, r3, #31
 8014018:	d536      	bpl.n	8014088 <_printf_float+0x424>
 801401a:	2301      	movs	r3, #1
 801401c:	4642      	mov	r2, r8
 801401e:	4631      	mov	r1, r6
 8014020:	4628      	mov	r0, r5
 8014022:	47b8      	blx	r7
 8014024:	3001      	adds	r0, #1
 8014026:	f43f ae78 	beq.w	8013d1a <_printf_float+0xb6>
 801402a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801402e:	4631      	mov	r1, r6
 8014030:	4628      	mov	r0, r5
 8014032:	47b8      	blx	r7
 8014034:	3001      	adds	r0, #1
 8014036:	f43f ae70 	beq.w	8013d1a <_printf_float+0xb6>
 801403a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801403e:	2200      	movs	r2, #0
 8014040:	2300      	movs	r3, #0
 8014042:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014046:	f7ec fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 801404a:	b9c0      	cbnz	r0, 801407e <_printf_float+0x41a>
 801404c:	4653      	mov	r3, sl
 801404e:	f108 0201 	add.w	r2, r8, #1
 8014052:	4631      	mov	r1, r6
 8014054:	4628      	mov	r0, r5
 8014056:	47b8      	blx	r7
 8014058:	3001      	adds	r0, #1
 801405a:	d10c      	bne.n	8014076 <_printf_float+0x412>
 801405c:	e65d      	b.n	8013d1a <_printf_float+0xb6>
 801405e:	2301      	movs	r3, #1
 8014060:	465a      	mov	r2, fp
 8014062:	4631      	mov	r1, r6
 8014064:	4628      	mov	r0, r5
 8014066:	47b8      	blx	r7
 8014068:	3001      	adds	r0, #1
 801406a:	f43f ae56 	beq.w	8013d1a <_printf_float+0xb6>
 801406e:	f108 0801 	add.w	r8, r8, #1
 8014072:	45d0      	cmp	r8, sl
 8014074:	dbf3      	blt.n	801405e <_printf_float+0x3fa>
 8014076:	464b      	mov	r3, r9
 8014078:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801407c:	e6df      	b.n	8013e3e <_printf_float+0x1da>
 801407e:	f04f 0800 	mov.w	r8, #0
 8014082:	f104 0b1a 	add.w	fp, r4, #26
 8014086:	e7f4      	b.n	8014072 <_printf_float+0x40e>
 8014088:	2301      	movs	r3, #1
 801408a:	4642      	mov	r2, r8
 801408c:	e7e1      	b.n	8014052 <_printf_float+0x3ee>
 801408e:	2301      	movs	r3, #1
 8014090:	464a      	mov	r2, r9
 8014092:	4631      	mov	r1, r6
 8014094:	4628      	mov	r0, r5
 8014096:	47b8      	blx	r7
 8014098:	3001      	adds	r0, #1
 801409a:	f43f ae3e 	beq.w	8013d1a <_printf_float+0xb6>
 801409e:	f108 0801 	add.w	r8, r8, #1
 80140a2:	68e3      	ldr	r3, [r4, #12]
 80140a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80140a6:	1a5b      	subs	r3, r3, r1
 80140a8:	4543      	cmp	r3, r8
 80140aa:	dcf0      	bgt.n	801408e <_printf_float+0x42a>
 80140ac:	e6fc      	b.n	8013ea8 <_printf_float+0x244>
 80140ae:	f04f 0800 	mov.w	r8, #0
 80140b2:	f104 0919 	add.w	r9, r4, #25
 80140b6:	e7f4      	b.n	80140a2 <_printf_float+0x43e>

080140b8 <_printf_common>:
 80140b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80140bc:	4616      	mov	r6, r2
 80140be:	4698      	mov	r8, r3
 80140c0:	688a      	ldr	r2, [r1, #8]
 80140c2:	690b      	ldr	r3, [r1, #16]
 80140c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80140c8:	4293      	cmp	r3, r2
 80140ca:	bfb8      	it	lt
 80140cc:	4613      	movlt	r3, r2
 80140ce:	6033      	str	r3, [r6, #0]
 80140d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80140d4:	4607      	mov	r7, r0
 80140d6:	460c      	mov	r4, r1
 80140d8:	b10a      	cbz	r2, 80140de <_printf_common+0x26>
 80140da:	3301      	adds	r3, #1
 80140dc:	6033      	str	r3, [r6, #0]
 80140de:	6823      	ldr	r3, [r4, #0]
 80140e0:	0699      	lsls	r1, r3, #26
 80140e2:	bf42      	ittt	mi
 80140e4:	6833      	ldrmi	r3, [r6, #0]
 80140e6:	3302      	addmi	r3, #2
 80140e8:	6033      	strmi	r3, [r6, #0]
 80140ea:	6825      	ldr	r5, [r4, #0]
 80140ec:	f015 0506 	ands.w	r5, r5, #6
 80140f0:	d106      	bne.n	8014100 <_printf_common+0x48>
 80140f2:	f104 0a19 	add.w	sl, r4, #25
 80140f6:	68e3      	ldr	r3, [r4, #12]
 80140f8:	6832      	ldr	r2, [r6, #0]
 80140fa:	1a9b      	subs	r3, r3, r2
 80140fc:	42ab      	cmp	r3, r5
 80140fe:	dc26      	bgt.n	801414e <_printf_common+0x96>
 8014100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014104:	6822      	ldr	r2, [r4, #0]
 8014106:	3b00      	subs	r3, #0
 8014108:	bf18      	it	ne
 801410a:	2301      	movne	r3, #1
 801410c:	0692      	lsls	r2, r2, #26
 801410e:	d42b      	bmi.n	8014168 <_printf_common+0xb0>
 8014110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014114:	4641      	mov	r1, r8
 8014116:	4638      	mov	r0, r7
 8014118:	47c8      	blx	r9
 801411a:	3001      	adds	r0, #1
 801411c:	d01e      	beq.n	801415c <_printf_common+0xa4>
 801411e:	6823      	ldr	r3, [r4, #0]
 8014120:	6922      	ldr	r2, [r4, #16]
 8014122:	f003 0306 	and.w	r3, r3, #6
 8014126:	2b04      	cmp	r3, #4
 8014128:	bf02      	ittt	eq
 801412a:	68e5      	ldreq	r5, [r4, #12]
 801412c:	6833      	ldreq	r3, [r6, #0]
 801412e:	1aed      	subeq	r5, r5, r3
 8014130:	68a3      	ldr	r3, [r4, #8]
 8014132:	bf0c      	ite	eq
 8014134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014138:	2500      	movne	r5, #0
 801413a:	4293      	cmp	r3, r2
 801413c:	bfc4      	itt	gt
 801413e:	1a9b      	subgt	r3, r3, r2
 8014140:	18ed      	addgt	r5, r5, r3
 8014142:	2600      	movs	r6, #0
 8014144:	341a      	adds	r4, #26
 8014146:	42b5      	cmp	r5, r6
 8014148:	d11a      	bne.n	8014180 <_printf_common+0xc8>
 801414a:	2000      	movs	r0, #0
 801414c:	e008      	b.n	8014160 <_printf_common+0xa8>
 801414e:	2301      	movs	r3, #1
 8014150:	4652      	mov	r2, sl
 8014152:	4641      	mov	r1, r8
 8014154:	4638      	mov	r0, r7
 8014156:	47c8      	blx	r9
 8014158:	3001      	adds	r0, #1
 801415a:	d103      	bne.n	8014164 <_printf_common+0xac>
 801415c:	f04f 30ff 	mov.w	r0, #4294967295
 8014160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014164:	3501      	adds	r5, #1
 8014166:	e7c6      	b.n	80140f6 <_printf_common+0x3e>
 8014168:	18e1      	adds	r1, r4, r3
 801416a:	1c5a      	adds	r2, r3, #1
 801416c:	2030      	movs	r0, #48	@ 0x30
 801416e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014172:	4422      	add	r2, r4
 8014174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801417c:	3302      	adds	r3, #2
 801417e:	e7c7      	b.n	8014110 <_printf_common+0x58>
 8014180:	2301      	movs	r3, #1
 8014182:	4622      	mov	r2, r4
 8014184:	4641      	mov	r1, r8
 8014186:	4638      	mov	r0, r7
 8014188:	47c8      	blx	r9
 801418a:	3001      	adds	r0, #1
 801418c:	d0e6      	beq.n	801415c <_printf_common+0xa4>
 801418e:	3601      	adds	r6, #1
 8014190:	e7d9      	b.n	8014146 <_printf_common+0x8e>
	...

08014194 <_printf_i>:
 8014194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014198:	7e0f      	ldrb	r7, [r1, #24]
 801419a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801419c:	2f78      	cmp	r7, #120	@ 0x78
 801419e:	4691      	mov	r9, r2
 80141a0:	4680      	mov	r8, r0
 80141a2:	460c      	mov	r4, r1
 80141a4:	469a      	mov	sl, r3
 80141a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80141aa:	d807      	bhi.n	80141bc <_printf_i+0x28>
 80141ac:	2f62      	cmp	r7, #98	@ 0x62
 80141ae:	d80a      	bhi.n	80141c6 <_printf_i+0x32>
 80141b0:	2f00      	cmp	r7, #0
 80141b2:	f000 80d2 	beq.w	801435a <_printf_i+0x1c6>
 80141b6:	2f58      	cmp	r7, #88	@ 0x58
 80141b8:	f000 80b9 	beq.w	801432e <_printf_i+0x19a>
 80141bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80141c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80141c4:	e03a      	b.n	801423c <_printf_i+0xa8>
 80141c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80141ca:	2b15      	cmp	r3, #21
 80141cc:	d8f6      	bhi.n	80141bc <_printf_i+0x28>
 80141ce:	a101      	add	r1, pc, #4	@ (adr r1, 80141d4 <_printf_i+0x40>)
 80141d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80141d4:	0801422d 	.word	0x0801422d
 80141d8:	08014241 	.word	0x08014241
 80141dc:	080141bd 	.word	0x080141bd
 80141e0:	080141bd 	.word	0x080141bd
 80141e4:	080141bd 	.word	0x080141bd
 80141e8:	080141bd 	.word	0x080141bd
 80141ec:	08014241 	.word	0x08014241
 80141f0:	080141bd 	.word	0x080141bd
 80141f4:	080141bd 	.word	0x080141bd
 80141f8:	080141bd 	.word	0x080141bd
 80141fc:	080141bd 	.word	0x080141bd
 8014200:	08014341 	.word	0x08014341
 8014204:	0801426b 	.word	0x0801426b
 8014208:	080142fb 	.word	0x080142fb
 801420c:	080141bd 	.word	0x080141bd
 8014210:	080141bd 	.word	0x080141bd
 8014214:	08014363 	.word	0x08014363
 8014218:	080141bd 	.word	0x080141bd
 801421c:	0801426b 	.word	0x0801426b
 8014220:	080141bd 	.word	0x080141bd
 8014224:	080141bd 	.word	0x080141bd
 8014228:	08014303 	.word	0x08014303
 801422c:	6833      	ldr	r3, [r6, #0]
 801422e:	1d1a      	adds	r2, r3, #4
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	6032      	str	r2, [r6, #0]
 8014234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014238:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801423c:	2301      	movs	r3, #1
 801423e:	e09d      	b.n	801437c <_printf_i+0x1e8>
 8014240:	6833      	ldr	r3, [r6, #0]
 8014242:	6820      	ldr	r0, [r4, #0]
 8014244:	1d19      	adds	r1, r3, #4
 8014246:	6031      	str	r1, [r6, #0]
 8014248:	0606      	lsls	r6, r0, #24
 801424a:	d501      	bpl.n	8014250 <_printf_i+0xbc>
 801424c:	681d      	ldr	r5, [r3, #0]
 801424e:	e003      	b.n	8014258 <_printf_i+0xc4>
 8014250:	0645      	lsls	r5, r0, #25
 8014252:	d5fb      	bpl.n	801424c <_printf_i+0xb8>
 8014254:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014258:	2d00      	cmp	r5, #0
 801425a:	da03      	bge.n	8014264 <_printf_i+0xd0>
 801425c:	232d      	movs	r3, #45	@ 0x2d
 801425e:	426d      	negs	r5, r5
 8014260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014264:	4859      	ldr	r0, [pc, #356]	@ (80143cc <_printf_i+0x238>)
 8014266:	230a      	movs	r3, #10
 8014268:	e011      	b.n	801428e <_printf_i+0xfa>
 801426a:	6821      	ldr	r1, [r4, #0]
 801426c:	6833      	ldr	r3, [r6, #0]
 801426e:	0608      	lsls	r0, r1, #24
 8014270:	f853 5b04 	ldr.w	r5, [r3], #4
 8014274:	d402      	bmi.n	801427c <_printf_i+0xe8>
 8014276:	0649      	lsls	r1, r1, #25
 8014278:	bf48      	it	mi
 801427a:	b2ad      	uxthmi	r5, r5
 801427c:	2f6f      	cmp	r7, #111	@ 0x6f
 801427e:	4853      	ldr	r0, [pc, #332]	@ (80143cc <_printf_i+0x238>)
 8014280:	6033      	str	r3, [r6, #0]
 8014282:	bf14      	ite	ne
 8014284:	230a      	movne	r3, #10
 8014286:	2308      	moveq	r3, #8
 8014288:	2100      	movs	r1, #0
 801428a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801428e:	6866      	ldr	r6, [r4, #4]
 8014290:	60a6      	str	r6, [r4, #8]
 8014292:	2e00      	cmp	r6, #0
 8014294:	bfa2      	ittt	ge
 8014296:	6821      	ldrge	r1, [r4, #0]
 8014298:	f021 0104 	bicge.w	r1, r1, #4
 801429c:	6021      	strge	r1, [r4, #0]
 801429e:	b90d      	cbnz	r5, 80142a4 <_printf_i+0x110>
 80142a0:	2e00      	cmp	r6, #0
 80142a2:	d04b      	beq.n	801433c <_printf_i+0x1a8>
 80142a4:	4616      	mov	r6, r2
 80142a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80142aa:	fb03 5711 	mls	r7, r3, r1, r5
 80142ae:	5dc7      	ldrb	r7, [r0, r7]
 80142b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80142b4:	462f      	mov	r7, r5
 80142b6:	42bb      	cmp	r3, r7
 80142b8:	460d      	mov	r5, r1
 80142ba:	d9f4      	bls.n	80142a6 <_printf_i+0x112>
 80142bc:	2b08      	cmp	r3, #8
 80142be:	d10b      	bne.n	80142d8 <_printf_i+0x144>
 80142c0:	6823      	ldr	r3, [r4, #0]
 80142c2:	07df      	lsls	r7, r3, #31
 80142c4:	d508      	bpl.n	80142d8 <_printf_i+0x144>
 80142c6:	6923      	ldr	r3, [r4, #16]
 80142c8:	6861      	ldr	r1, [r4, #4]
 80142ca:	4299      	cmp	r1, r3
 80142cc:	bfde      	ittt	le
 80142ce:	2330      	movle	r3, #48	@ 0x30
 80142d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80142d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80142d8:	1b92      	subs	r2, r2, r6
 80142da:	6122      	str	r2, [r4, #16]
 80142dc:	f8cd a000 	str.w	sl, [sp]
 80142e0:	464b      	mov	r3, r9
 80142e2:	aa03      	add	r2, sp, #12
 80142e4:	4621      	mov	r1, r4
 80142e6:	4640      	mov	r0, r8
 80142e8:	f7ff fee6 	bl	80140b8 <_printf_common>
 80142ec:	3001      	adds	r0, #1
 80142ee:	d14a      	bne.n	8014386 <_printf_i+0x1f2>
 80142f0:	f04f 30ff 	mov.w	r0, #4294967295
 80142f4:	b004      	add	sp, #16
 80142f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142fa:	6823      	ldr	r3, [r4, #0]
 80142fc:	f043 0320 	orr.w	r3, r3, #32
 8014300:	6023      	str	r3, [r4, #0]
 8014302:	4833      	ldr	r0, [pc, #204]	@ (80143d0 <_printf_i+0x23c>)
 8014304:	2778      	movs	r7, #120	@ 0x78
 8014306:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801430a:	6823      	ldr	r3, [r4, #0]
 801430c:	6831      	ldr	r1, [r6, #0]
 801430e:	061f      	lsls	r7, r3, #24
 8014310:	f851 5b04 	ldr.w	r5, [r1], #4
 8014314:	d402      	bmi.n	801431c <_printf_i+0x188>
 8014316:	065f      	lsls	r7, r3, #25
 8014318:	bf48      	it	mi
 801431a:	b2ad      	uxthmi	r5, r5
 801431c:	6031      	str	r1, [r6, #0]
 801431e:	07d9      	lsls	r1, r3, #31
 8014320:	bf44      	itt	mi
 8014322:	f043 0320 	orrmi.w	r3, r3, #32
 8014326:	6023      	strmi	r3, [r4, #0]
 8014328:	b11d      	cbz	r5, 8014332 <_printf_i+0x19e>
 801432a:	2310      	movs	r3, #16
 801432c:	e7ac      	b.n	8014288 <_printf_i+0xf4>
 801432e:	4827      	ldr	r0, [pc, #156]	@ (80143cc <_printf_i+0x238>)
 8014330:	e7e9      	b.n	8014306 <_printf_i+0x172>
 8014332:	6823      	ldr	r3, [r4, #0]
 8014334:	f023 0320 	bic.w	r3, r3, #32
 8014338:	6023      	str	r3, [r4, #0]
 801433a:	e7f6      	b.n	801432a <_printf_i+0x196>
 801433c:	4616      	mov	r6, r2
 801433e:	e7bd      	b.n	80142bc <_printf_i+0x128>
 8014340:	6833      	ldr	r3, [r6, #0]
 8014342:	6825      	ldr	r5, [r4, #0]
 8014344:	6961      	ldr	r1, [r4, #20]
 8014346:	1d18      	adds	r0, r3, #4
 8014348:	6030      	str	r0, [r6, #0]
 801434a:	062e      	lsls	r6, r5, #24
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	d501      	bpl.n	8014354 <_printf_i+0x1c0>
 8014350:	6019      	str	r1, [r3, #0]
 8014352:	e002      	b.n	801435a <_printf_i+0x1c6>
 8014354:	0668      	lsls	r0, r5, #25
 8014356:	d5fb      	bpl.n	8014350 <_printf_i+0x1bc>
 8014358:	8019      	strh	r1, [r3, #0]
 801435a:	2300      	movs	r3, #0
 801435c:	6123      	str	r3, [r4, #16]
 801435e:	4616      	mov	r6, r2
 8014360:	e7bc      	b.n	80142dc <_printf_i+0x148>
 8014362:	6833      	ldr	r3, [r6, #0]
 8014364:	1d1a      	adds	r2, r3, #4
 8014366:	6032      	str	r2, [r6, #0]
 8014368:	681e      	ldr	r6, [r3, #0]
 801436a:	6862      	ldr	r2, [r4, #4]
 801436c:	2100      	movs	r1, #0
 801436e:	4630      	mov	r0, r6
 8014370:	f7eb ff4e 	bl	8000210 <memchr>
 8014374:	b108      	cbz	r0, 801437a <_printf_i+0x1e6>
 8014376:	1b80      	subs	r0, r0, r6
 8014378:	6060      	str	r0, [r4, #4]
 801437a:	6863      	ldr	r3, [r4, #4]
 801437c:	6123      	str	r3, [r4, #16]
 801437e:	2300      	movs	r3, #0
 8014380:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014384:	e7aa      	b.n	80142dc <_printf_i+0x148>
 8014386:	6923      	ldr	r3, [r4, #16]
 8014388:	4632      	mov	r2, r6
 801438a:	4649      	mov	r1, r9
 801438c:	4640      	mov	r0, r8
 801438e:	47d0      	blx	sl
 8014390:	3001      	adds	r0, #1
 8014392:	d0ad      	beq.n	80142f0 <_printf_i+0x15c>
 8014394:	6823      	ldr	r3, [r4, #0]
 8014396:	079b      	lsls	r3, r3, #30
 8014398:	d413      	bmi.n	80143c2 <_printf_i+0x22e>
 801439a:	68e0      	ldr	r0, [r4, #12]
 801439c:	9b03      	ldr	r3, [sp, #12]
 801439e:	4298      	cmp	r0, r3
 80143a0:	bfb8      	it	lt
 80143a2:	4618      	movlt	r0, r3
 80143a4:	e7a6      	b.n	80142f4 <_printf_i+0x160>
 80143a6:	2301      	movs	r3, #1
 80143a8:	4632      	mov	r2, r6
 80143aa:	4649      	mov	r1, r9
 80143ac:	4640      	mov	r0, r8
 80143ae:	47d0      	blx	sl
 80143b0:	3001      	adds	r0, #1
 80143b2:	d09d      	beq.n	80142f0 <_printf_i+0x15c>
 80143b4:	3501      	adds	r5, #1
 80143b6:	68e3      	ldr	r3, [r4, #12]
 80143b8:	9903      	ldr	r1, [sp, #12]
 80143ba:	1a5b      	subs	r3, r3, r1
 80143bc:	42ab      	cmp	r3, r5
 80143be:	dcf2      	bgt.n	80143a6 <_printf_i+0x212>
 80143c0:	e7eb      	b.n	801439a <_printf_i+0x206>
 80143c2:	2500      	movs	r5, #0
 80143c4:	f104 0619 	add.w	r6, r4, #25
 80143c8:	e7f5      	b.n	80143b6 <_printf_i+0x222>
 80143ca:	bf00      	nop
 80143cc:	0801a9dc 	.word	0x0801a9dc
 80143d0:	0801a9ed 	.word	0x0801a9ed

080143d4 <_scanf_float>:
 80143d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143d8:	b087      	sub	sp, #28
 80143da:	4617      	mov	r7, r2
 80143dc:	9303      	str	r3, [sp, #12]
 80143de:	688b      	ldr	r3, [r1, #8]
 80143e0:	1e5a      	subs	r2, r3, #1
 80143e2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80143e6:	bf81      	itttt	hi
 80143e8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80143ec:	eb03 0b05 	addhi.w	fp, r3, r5
 80143f0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80143f4:	608b      	strhi	r3, [r1, #8]
 80143f6:	680b      	ldr	r3, [r1, #0]
 80143f8:	460a      	mov	r2, r1
 80143fa:	f04f 0500 	mov.w	r5, #0
 80143fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8014402:	f842 3b1c 	str.w	r3, [r2], #28
 8014406:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801440a:	4680      	mov	r8, r0
 801440c:	460c      	mov	r4, r1
 801440e:	bf98      	it	ls
 8014410:	f04f 0b00 	movls.w	fp, #0
 8014414:	9201      	str	r2, [sp, #4]
 8014416:	4616      	mov	r6, r2
 8014418:	46aa      	mov	sl, r5
 801441a:	46a9      	mov	r9, r5
 801441c:	9502      	str	r5, [sp, #8]
 801441e:	68a2      	ldr	r2, [r4, #8]
 8014420:	b152      	cbz	r2, 8014438 <_scanf_float+0x64>
 8014422:	683b      	ldr	r3, [r7, #0]
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	2b4e      	cmp	r3, #78	@ 0x4e
 8014428:	d864      	bhi.n	80144f4 <_scanf_float+0x120>
 801442a:	2b40      	cmp	r3, #64	@ 0x40
 801442c:	d83c      	bhi.n	80144a8 <_scanf_float+0xd4>
 801442e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8014432:	b2c8      	uxtb	r0, r1
 8014434:	280e      	cmp	r0, #14
 8014436:	d93a      	bls.n	80144ae <_scanf_float+0xda>
 8014438:	f1b9 0f00 	cmp.w	r9, #0
 801443c:	d003      	beq.n	8014446 <_scanf_float+0x72>
 801443e:	6823      	ldr	r3, [r4, #0]
 8014440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014444:	6023      	str	r3, [r4, #0]
 8014446:	f10a 3aff 	add.w	sl, sl, #4294967295
 801444a:	f1ba 0f01 	cmp.w	sl, #1
 801444e:	f200 8117 	bhi.w	8014680 <_scanf_float+0x2ac>
 8014452:	9b01      	ldr	r3, [sp, #4]
 8014454:	429e      	cmp	r6, r3
 8014456:	f200 8108 	bhi.w	801466a <_scanf_float+0x296>
 801445a:	2001      	movs	r0, #1
 801445c:	b007      	add	sp, #28
 801445e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014462:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8014466:	2a0d      	cmp	r2, #13
 8014468:	d8e6      	bhi.n	8014438 <_scanf_float+0x64>
 801446a:	a101      	add	r1, pc, #4	@ (adr r1, 8014470 <_scanf_float+0x9c>)
 801446c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014470:	080145b7 	.word	0x080145b7
 8014474:	08014439 	.word	0x08014439
 8014478:	08014439 	.word	0x08014439
 801447c:	08014439 	.word	0x08014439
 8014480:	08014617 	.word	0x08014617
 8014484:	080145ef 	.word	0x080145ef
 8014488:	08014439 	.word	0x08014439
 801448c:	08014439 	.word	0x08014439
 8014490:	080145c5 	.word	0x080145c5
 8014494:	08014439 	.word	0x08014439
 8014498:	08014439 	.word	0x08014439
 801449c:	08014439 	.word	0x08014439
 80144a0:	08014439 	.word	0x08014439
 80144a4:	0801457d 	.word	0x0801457d
 80144a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80144ac:	e7db      	b.n	8014466 <_scanf_float+0x92>
 80144ae:	290e      	cmp	r1, #14
 80144b0:	d8c2      	bhi.n	8014438 <_scanf_float+0x64>
 80144b2:	a001      	add	r0, pc, #4	@ (adr r0, 80144b8 <_scanf_float+0xe4>)
 80144b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80144b8:	0801456d 	.word	0x0801456d
 80144bc:	08014439 	.word	0x08014439
 80144c0:	0801456d 	.word	0x0801456d
 80144c4:	08014603 	.word	0x08014603
 80144c8:	08014439 	.word	0x08014439
 80144cc:	08014515 	.word	0x08014515
 80144d0:	08014553 	.word	0x08014553
 80144d4:	08014553 	.word	0x08014553
 80144d8:	08014553 	.word	0x08014553
 80144dc:	08014553 	.word	0x08014553
 80144e0:	08014553 	.word	0x08014553
 80144e4:	08014553 	.word	0x08014553
 80144e8:	08014553 	.word	0x08014553
 80144ec:	08014553 	.word	0x08014553
 80144f0:	08014553 	.word	0x08014553
 80144f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80144f6:	d809      	bhi.n	801450c <_scanf_float+0x138>
 80144f8:	2b60      	cmp	r3, #96	@ 0x60
 80144fa:	d8b2      	bhi.n	8014462 <_scanf_float+0x8e>
 80144fc:	2b54      	cmp	r3, #84	@ 0x54
 80144fe:	d07b      	beq.n	80145f8 <_scanf_float+0x224>
 8014500:	2b59      	cmp	r3, #89	@ 0x59
 8014502:	d199      	bne.n	8014438 <_scanf_float+0x64>
 8014504:	2d07      	cmp	r5, #7
 8014506:	d197      	bne.n	8014438 <_scanf_float+0x64>
 8014508:	2508      	movs	r5, #8
 801450a:	e02c      	b.n	8014566 <_scanf_float+0x192>
 801450c:	2b74      	cmp	r3, #116	@ 0x74
 801450e:	d073      	beq.n	80145f8 <_scanf_float+0x224>
 8014510:	2b79      	cmp	r3, #121	@ 0x79
 8014512:	e7f6      	b.n	8014502 <_scanf_float+0x12e>
 8014514:	6821      	ldr	r1, [r4, #0]
 8014516:	05c8      	lsls	r0, r1, #23
 8014518:	d51b      	bpl.n	8014552 <_scanf_float+0x17e>
 801451a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801451e:	6021      	str	r1, [r4, #0]
 8014520:	f109 0901 	add.w	r9, r9, #1
 8014524:	f1bb 0f00 	cmp.w	fp, #0
 8014528:	d003      	beq.n	8014532 <_scanf_float+0x15e>
 801452a:	3201      	adds	r2, #1
 801452c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014530:	60a2      	str	r2, [r4, #8]
 8014532:	68a3      	ldr	r3, [r4, #8]
 8014534:	3b01      	subs	r3, #1
 8014536:	60a3      	str	r3, [r4, #8]
 8014538:	6923      	ldr	r3, [r4, #16]
 801453a:	3301      	adds	r3, #1
 801453c:	6123      	str	r3, [r4, #16]
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	3b01      	subs	r3, #1
 8014542:	2b00      	cmp	r3, #0
 8014544:	607b      	str	r3, [r7, #4]
 8014546:	f340 8087 	ble.w	8014658 <_scanf_float+0x284>
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	3301      	adds	r3, #1
 801454e:	603b      	str	r3, [r7, #0]
 8014550:	e765      	b.n	801441e <_scanf_float+0x4a>
 8014552:	eb1a 0105 	adds.w	r1, sl, r5
 8014556:	f47f af6f 	bne.w	8014438 <_scanf_float+0x64>
 801455a:	6822      	ldr	r2, [r4, #0]
 801455c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8014560:	6022      	str	r2, [r4, #0]
 8014562:	460d      	mov	r5, r1
 8014564:	468a      	mov	sl, r1
 8014566:	f806 3b01 	strb.w	r3, [r6], #1
 801456a:	e7e2      	b.n	8014532 <_scanf_float+0x15e>
 801456c:	6822      	ldr	r2, [r4, #0]
 801456e:	0610      	lsls	r0, r2, #24
 8014570:	f57f af62 	bpl.w	8014438 <_scanf_float+0x64>
 8014574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014578:	6022      	str	r2, [r4, #0]
 801457a:	e7f4      	b.n	8014566 <_scanf_float+0x192>
 801457c:	f1ba 0f00 	cmp.w	sl, #0
 8014580:	d10e      	bne.n	80145a0 <_scanf_float+0x1cc>
 8014582:	f1b9 0f00 	cmp.w	r9, #0
 8014586:	d10e      	bne.n	80145a6 <_scanf_float+0x1d2>
 8014588:	6822      	ldr	r2, [r4, #0]
 801458a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801458e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8014592:	d108      	bne.n	80145a6 <_scanf_float+0x1d2>
 8014594:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8014598:	6022      	str	r2, [r4, #0]
 801459a:	f04f 0a01 	mov.w	sl, #1
 801459e:	e7e2      	b.n	8014566 <_scanf_float+0x192>
 80145a0:	f1ba 0f02 	cmp.w	sl, #2
 80145a4:	d055      	beq.n	8014652 <_scanf_float+0x27e>
 80145a6:	2d01      	cmp	r5, #1
 80145a8:	d002      	beq.n	80145b0 <_scanf_float+0x1dc>
 80145aa:	2d04      	cmp	r5, #4
 80145ac:	f47f af44 	bne.w	8014438 <_scanf_float+0x64>
 80145b0:	3501      	adds	r5, #1
 80145b2:	b2ed      	uxtb	r5, r5
 80145b4:	e7d7      	b.n	8014566 <_scanf_float+0x192>
 80145b6:	f1ba 0f01 	cmp.w	sl, #1
 80145ba:	f47f af3d 	bne.w	8014438 <_scanf_float+0x64>
 80145be:	f04f 0a02 	mov.w	sl, #2
 80145c2:	e7d0      	b.n	8014566 <_scanf_float+0x192>
 80145c4:	b97d      	cbnz	r5, 80145e6 <_scanf_float+0x212>
 80145c6:	f1b9 0f00 	cmp.w	r9, #0
 80145ca:	f47f af38 	bne.w	801443e <_scanf_float+0x6a>
 80145ce:	6822      	ldr	r2, [r4, #0]
 80145d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80145d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80145d8:	f040 8108 	bne.w	80147ec <_scanf_float+0x418>
 80145dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80145e0:	6022      	str	r2, [r4, #0]
 80145e2:	2501      	movs	r5, #1
 80145e4:	e7bf      	b.n	8014566 <_scanf_float+0x192>
 80145e6:	2d03      	cmp	r5, #3
 80145e8:	d0e2      	beq.n	80145b0 <_scanf_float+0x1dc>
 80145ea:	2d05      	cmp	r5, #5
 80145ec:	e7de      	b.n	80145ac <_scanf_float+0x1d8>
 80145ee:	2d02      	cmp	r5, #2
 80145f0:	f47f af22 	bne.w	8014438 <_scanf_float+0x64>
 80145f4:	2503      	movs	r5, #3
 80145f6:	e7b6      	b.n	8014566 <_scanf_float+0x192>
 80145f8:	2d06      	cmp	r5, #6
 80145fa:	f47f af1d 	bne.w	8014438 <_scanf_float+0x64>
 80145fe:	2507      	movs	r5, #7
 8014600:	e7b1      	b.n	8014566 <_scanf_float+0x192>
 8014602:	6822      	ldr	r2, [r4, #0]
 8014604:	0591      	lsls	r1, r2, #22
 8014606:	f57f af17 	bpl.w	8014438 <_scanf_float+0x64>
 801460a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801460e:	6022      	str	r2, [r4, #0]
 8014610:	f8cd 9008 	str.w	r9, [sp, #8]
 8014614:	e7a7      	b.n	8014566 <_scanf_float+0x192>
 8014616:	6822      	ldr	r2, [r4, #0]
 8014618:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801461c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8014620:	d006      	beq.n	8014630 <_scanf_float+0x25c>
 8014622:	0550      	lsls	r0, r2, #21
 8014624:	f57f af08 	bpl.w	8014438 <_scanf_float+0x64>
 8014628:	f1b9 0f00 	cmp.w	r9, #0
 801462c:	f000 80de 	beq.w	80147ec <_scanf_float+0x418>
 8014630:	0591      	lsls	r1, r2, #22
 8014632:	bf58      	it	pl
 8014634:	9902      	ldrpl	r1, [sp, #8]
 8014636:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801463a:	bf58      	it	pl
 801463c:	eba9 0101 	subpl.w	r1, r9, r1
 8014640:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8014644:	bf58      	it	pl
 8014646:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801464a:	6022      	str	r2, [r4, #0]
 801464c:	f04f 0900 	mov.w	r9, #0
 8014650:	e789      	b.n	8014566 <_scanf_float+0x192>
 8014652:	f04f 0a03 	mov.w	sl, #3
 8014656:	e786      	b.n	8014566 <_scanf_float+0x192>
 8014658:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801465c:	4639      	mov	r1, r7
 801465e:	4640      	mov	r0, r8
 8014660:	4798      	blx	r3
 8014662:	2800      	cmp	r0, #0
 8014664:	f43f aedb 	beq.w	801441e <_scanf_float+0x4a>
 8014668:	e6e6      	b.n	8014438 <_scanf_float+0x64>
 801466a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801466e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014672:	463a      	mov	r2, r7
 8014674:	4640      	mov	r0, r8
 8014676:	4798      	blx	r3
 8014678:	6923      	ldr	r3, [r4, #16]
 801467a:	3b01      	subs	r3, #1
 801467c:	6123      	str	r3, [r4, #16]
 801467e:	e6e8      	b.n	8014452 <_scanf_float+0x7e>
 8014680:	1e6b      	subs	r3, r5, #1
 8014682:	2b06      	cmp	r3, #6
 8014684:	d824      	bhi.n	80146d0 <_scanf_float+0x2fc>
 8014686:	2d02      	cmp	r5, #2
 8014688:	d836      	bhi.n	80146f8 <_scanf_float+0x324>
 801468a:	9b01      	ldr	r3, [sp, #4]
 801468c:	429e      	cmp	r6, r3
 801468e:	f67f aee4 	bls.w	801445a <_scanf_float+0x86>
 8014692:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801469a:	463a      	mov	r2, r7
 801469c:	4640      	mov	r0, r8
 801469e:	4798      	blx	r3
 80146a0:	6923      	ldr	r3, [r4, #16]
 80146a2:	3b01      	subs	r3, #1
 80146a4:	6123      	str	r3, [r4, #16]
 80146a6:	e7f0      	b.n	801468a <_scanf_float+0x2b6>
 80146a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80146ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80146b0:	463a      	mov	r2, r7
 80146b2:	4640      	mov	r0, r8
 80146b4:	4798      	blx	r3
 80146b6:	6923      	ldr	r3, [r4, #16]
 80146b8:	3b01      	subs	r3, #1
 80146ba:	6123      	str	r3, [r4, #16]
 80146bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146c0:	fa5f fa8a 	uxtb.w	sl, sl
 80146c4:	f1ba 0f02 	cmp.w	sl, #2
 80146c8:	d1ee      	bne.n	80146a8 <_scanf_float+0x2d4>
 80146ca:	3d03      	subs	r5, #3
 80146cc:	b2ed      	uxtb	r5, r5
 80146ce:	1b76      	subs	r6, r6, r5
 80146d0:	6823      	ldr	r3, [r4, #0]
 80146d2:	05da      	lsls	r2, r3, #23
 80146d4:	d530      	bpl.n	8014738 <_scanf_float+0x364>
 80146d6:	055b      	lsls	r3, r3, #21
 80146d8:	d511      	bpl.n	80146fe <_scanf_float+0x32a>
 80146da:	9b01      	ldr	r3, [sp, #4]
 80146dc:	429e      	cmp	r6, r3
 80146de:	f67f aebc 	bls.w	801445a <_scanf_float+0x86>
 80146e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80146e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80146ea:	463a      	mov	r2, r7
 80146ec:	4640      	mov	r0, r8
 80146ee:	4798      	blx	r3
 80146f0:	6923      	ldr	r3, [r4, #16]
 80146f2:	3b01      	subs	r3, #1
 80146f4:	6123      	str	r3, [r4, #16]
 80146f6:	e7f0      	b.n	80146da <_scanf_float+0x306>
 80146f8:	46aa      	mov	sl, r5
 80146fa:	46b3      	mov	fp, r6
 80146fc:	e7de      	b.n	80146bc <_scanf_float+0x2e8>
 80146fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8014702:	6923      	ldr	r3, [r4, #16]
 8014704:	2965      	cmp	r1, #101	@ 0x65
 8014706:	f103 33ff 	add.w	r3, r3, #4294967295
 801470a:	f106 35ff 	add.w	r5, r6, #4294967295
 801470e:	6123      	str	r3, [r4, #16]
 8014710:	d00c      	beq.n	801472c <_scanf_float+0x358>
 8014712:	2945      	cmp	r1, #69	@ 0x45
 8014714:	d00a      	beq.n	801472c <_scanf_float+0x358>
 8014716:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801471a:	463a      	mov	r2, r7
 801471c:	4640      	mov	r0, r8
 801471e:	4798      	blx	r3
 8014720:	6923      	ldr	r3, [r4, #16]
 8014722:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8014726:	3b01      	subs	r3, #1
 8014728:	1eb5      	subs	r5, r6, #2
 801472a:	6123      	str	r3, [r4, #16]
 801472c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014730:	463a      	mov	r2, r7
 8014732:	4640      	mov	r0, r8
 8014734:	4798      	blx	r3
 8014736:	462e      	mov	r6, r5
 8014738:	6822      	ldr	r2, [r4, #0]
 801473a:	f012 0210 	ands.w	r2, r2, #16
 801473e:	d001      	beq.n	8014744 <_scanf_float+0x370>
 8014740:	2000      	movs	r0, #0
 8014742:	e68b      	b.n	801445c <_scanf_float+0x88>
 8014744:	7032      	strb	r2, [r6, #0]
 8014746:	6823      	ldr	r3, [r4, #0]
 8014748:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801474c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014750:	d11c      	bne.n	801478c <_scanf_float+0x3b8>
 8014752:	9b02      	ldr	r3, [sp, #8]
 8014754:	454b      	cmp	r3, r9
 8014756:	eba3 0209 	sub.w	r2, r3, r9
 801475a:	d123      	bne.n	80147a4 <_scanf_float+0x3d0>
 801475c:	9901      	ldr	r1, [sp, #4]
 801475e:	2200      	movs	r2, #0
 8014760:	4640      	mov	r0, r8
 8014762:	f002 fbbd 	bl	8016ee0 <_strtod_r>
 8014766:	9b03      	ldr	r3, [sp, #12]
 8014768:	6821      	ldr	r1, [r4, #0]
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	f011 0f02 	tst.w	r1, #2
 8014770:	ec57 6b10 	vmov	r6, r7, d0
 8014774:	f103 0204 	add.w	r2, r3, #4
 8014778:	d01f      	beq.n	80147ba <_scanf_float+0x3e6>
 801477a:	9903      	ldr	r1, [sp, #12]
 801477c:	600a      	str	r2, [r1, #0]
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	e9c3 6700 	strd	r6, r7, [r3]
 8014784:	68e3      	ldr	r3, [r4, #12]
 8014786:	3301      	adds	r3, #1
 8014788:	60e3      	str	r3, [r4, #12]
 801478a:	e7d9      	b.n	8014740 <_scanf_float+0x36c>
 801478c:	9b04      	ldr	r3, [sp, #16]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d0e4      	beq.n	801475c <_scanf_float+0x388>
 8014792:	9905      	ldr	r1, [sp, #20]
 8014794:	230a      	movs	r3, #10
 8014796:	3101      	adds	r1, #1
 8014798:	4640      	mov	r0, r8
 801479a:	f002 fc21 	bl	8016fe0 <_strtol_r>
 801479e:	9b04      	ldr	r3, [sp, #16]
 80147a0:	9e05      	ldr	r6, [sp, #20]
 80147a2:	1ac2      	subs	r2, r0, r3
 80147a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80147a8:	429e      	cmp	r6, r3
 80147aa:	bf28      	it	cs
 80147ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80147b0:	4910      	ldr	r1, [pc, #64]	@ (80147f4 <_scanf_float+0x420>)
 80147b2:	4630      	mov	r0, r6
 80147b4:	f000 f8e4 	bl	8014980 <siprintf>
 80147b8:	e7d0      	b.n	801475c <_scanf_float+0x388>
 80147ba:	f011 0f04 	tst.w	r1, #4
 80147be:	9903      	ldr	r1, [sp, #12]
 80147c0:	600a      	str	r2, [r1, #0]
 80147c2:	d1dc      	bne.n	801477e <_scanf_float+0x3aa>
 80147c4:	681d      	ldr	r5, [r3, #0]
 80147c6:	4632      	mov	r2, r6
 80147c8:	463b      	mov	r3, r7
 80147ca:	4630      	mov	r0, r6
 80147cc:	4639      	mov	r1, r7
 80147ce:	f7ec f9cd 	bl	8000b6c <__aeabi_dcmpun>
 80147d2:	b128      	cbz	r0, 80147e0 <_scanf_float+0x40c>
 80147d4:	4808      	ldr	r0, [pc, #32]	@ (80147f8 <_scanf_float+0x424>)
 80147d6:	f000 fa27 	bl	8014c28 <nanf>
 80147da:	ed85 0a00 	vstr	s0, [r5]
 80147de:	e7d1      	b.n	8014784 <_scanf_float+0x3b0>
 80147e0:	4630      	mov	r0, r6
 80147e2:	4639      	mov	r1, r7
 80147e4:	f7ec fa20 	bl	8000c28 <__aeabi_d2f>
 80147e8:	6028      	str	r0, [r5, #0]
 80147ea:	e7cb      	b.n	8014784 <_scanf_float+0x3b0>
 80147ec:	f04f 0900 	mov.w	r9, #0
 80147f0:	e629      	b.n	8014446 <_scanf_float+0x72>
 80147f2:	bf00      	nop
 80147f4:	0801a9fe 	.word	0x0801a9fe
 80147f8:	0801adb0 	.word	0x0801adb0

080147fc <std>:
 80147fc:	2300      	movs	r3, #0
 80147fe:	b510      	push	{r4, lr}
 8014800:	4604      	mov	r4, r0
 8014802:	e9c0 3300 	strd	r3, r3, [r0]
 8014806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801480a:	6083      	str	r3, [r0, #8]
 801480c:	8181      	strh	r1, [r0, #12]
 801480e:	6643      	str	r3, [r0, #100]	@ 0x64
 8014810:	81c2      	strh	r2, [r0, #14]
 8014812:	6183      	str	r3, [r0, #24]
 8014814:	4619      	mov	r1, r3
 8014816:	2208      	movs	r2, #8
 8014818:	305c      	adds	r0, #92	@ 0x5c
 801481a:	f000 f950 	bl	8014abe <memset>
 801481e:	4b0d      	ldr	r3, [pc, #52]	@ (8014854 <std+0x58>)
 8014820:	6263      	str	r3, [r4, #36]	@ 0x24
 8014822:	4b0d      	ldr	r3, [pc, #52]	@ (8014858 <std+0x5c>)
 8014824:	62a3      	str	r3, [r4, #40]	@ 0x28
 8014826:	4b0d      	ldr	r3, [pc, #52]	@ (801485c <std+0x60>)
 8014828:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801482a:	4b0d      	ldr	r3, [pc, #52]	@ (8014860 <std+0x64>)
 801482c:	6323      	str	r3, [r4, #48]	@ 0x30
 801482e:	4b0d      	ldr	r3, [pc, #52]	@ (8014864 <std+0x68>)
 8014830:	6224      	str	r4, [r4, #32]
 8014832:	429c      	cmp	r4, r3
 8014834:	d006      	beq.n	8014844 <std+0x48>
 8014836:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801483a:	4294      	cmp	r4, r2
 801483c:	d002      	beq.n	8014844 <std+0x48>
 801483e:	33d0      	adds	r3, #208	@ 0xd0
 8014840:	429c      	cmp	r4, r3
 8014842:	d105      	bne.n	8014850 <std+0x54>
 8014844:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8014848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801484c:	f000 b9da 	b.w	8014c04 <__retarget_lock_init_recursive>
 8014850:	bd10      	pop	{r4, pc}
 8014852:	bf00      	nop
 8014854:	08014a15 	.word	0x08014a15
 8014858:	08014a3b 	.word	0x08014a3b
 801485c:	08014a73 	.word	0x08014a73
 8014860:	08014a97 	.word	0x08014a97
 8014864:	20003f7c 	.word	0x20003f7c

08014868 <stdio_exit_handler>:
 8014868:	4a02      	ldr	r2, [pc, #8]	@ (8014874 <stdio_exit_handler+0xc>)
 801486a:	4903      	ldr	r1, [pc, #12]	@ (8014878 <stdio_exit_handler+0x10>)
 801486c:	4803      	ldr	r0, [pc, #12]	@ (801487c <stdio_exit_handler+0x14>)
 801486e:	f000 b869 	b.w	8014944 <_fwalk_sglue>
 8014872:	bf00      	nop
 8014874:	20000060 	.word	0x20000060
 8014878:	080179d1 	.word	0x080179d1
 801487c:	20000070 	.word	0x20000070

08014880 <cleanup_stdio>:
 8014880:	6841      	ldr	r1, [r0, #4]
 8014882:	4b0c      	ldr	r3, [pc, #48]	@ (80148b4 <cleanup_stdio+0x34>)
 8014884:	4299      	cmp	r1, r3
 8014886:	b510      	push	{r4, lr}
 8014888:	4604      	mov	r4, r0
 801488a:	d001      	beq.n	8014890 <cleanup_stdio+0x10>
 801488c:	f003 f8a0 	bl	80179d0 <_fflush_r>
 8014890:	68a1      	ldr	r1, [r4, #8]
 8014892:	4b09      	ldr	r3, [pc, #36]	@ (80148b8 <cleanup_stdio+0x38>)
 8014894:	4299      	cmp	r1, r3
 8014896:	d002      	beq.n	801489e <cleanup_stdio+0x1e>
 8014898:	4620      	mov	r0, r4
 801489a:	f003 f899 	bl	80179d0 <_fflush_r>
 801489e:	68e1      	ldr	r1, [r4, #12]
 80148a0:	4b06      	ldr	r3, [pc, #24]	@ (80148bc <cleanup_stdio+0x3c>)
 80148a2:	4299      	cmp	r1, r3
 80148a4:	d004      	beq.n	80148b0 <cleanup_stdio+0x30>
 80148a6:	4620      	mov	r0, r4
 80148a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148ac:	f003 b890 	b.w	80179d0 <_fflush_r>
 80148b0:	bd10      	pop	{r4, pc}
 80148b2:	bf00      	nop
 80148b4:	20003f7c 	.word	0x20003f7c
 80148b8:	20003fe4 	.word	0x20003fe4
 80148bc:	2000404c 	.word	0x2000404c

080148c0 <global_stdio_init.part.0>:
 80148c0:	b510      	push	{r4, lr}
 80148c2:	4b0b      	ldr	r3, [pc, #44]	@ (80148f0 <global_stdio_init.part.0+0x30>)
 80148c4:	4c0b      	ldr	r4, [pc, #44]	@ (80148f4 <global_stdio_init.part.0+0x34>)
 80148c6:	4a0c      	ldr	r2, [pc, #48]	@ (80148f8 <global_stdio_init.part.0+0x38>)
 80148c8:	601a      	str	r2, [r3, #0]
 80148ca:	4620      	mov	r0, r4
 80148cc:	2200      	movs	r2, #0
 80148ce:	2104      	movs	r1, #4
 80148d0:	f7ff ff94 	bl	80147fc <std>
 80148d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80148d8:	2201      	movs	r2, #1
 80148da:	2109      	movs	r1, #9
 80148dc:	f7ff ff8e 	bl	80147fc <std>
 80148e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80148e4:	2202      	movs	r2, #2
 80148e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80148ea:	2112      	movs	r1, #18
 80148ec:	f7ff bf86 	b.w	80147fc <std>
 80148f0:	200040b4 	.word	0x200040b4
 80148f4:	20003f7c 	.word	0x20003f7c
 80148f8:	08014869 	.word	0x08014869

080148fc <__sfp_lock_acquire>:
 80148fc:	4801      	ldr	r0, [pc, #4]	@ (8014904 <__sfp_lock_acquire+0x8>)
 80148fe:	f000 b982 	b.w	8014c06 <__retarget_lock_acquire_recursive>
 8014902:	bf00      	nop
 8014904:	200040bd 	.word	0x200040bd

08014908 <__sfp_lock_release>:
 8014908:	4801      	ldr	r0, [pc, #4]	@ (8014910 <__sfp_lock_release+0x8>)
 801490a:	f000 b97d 	b.w	8014c08 <__retarget_lock_release_recursive>
 801490e:	bf00      	nop
 8014910:	200040bd 	.word	0x200040bd

08014914 <__sinit>:
 8014914:	b510      	push	{r4, lr}
 8014916:	4604      	mov	r4, r0
 8014918:	f7ff fff0 	bl	80148fc <__sfp_lock_acquire>
 801491c:	6a23      	ldr	r3, [r4, #32]
 801491e:	b11b      	cbz	r3, 8014928 <__sinit+0x14>
 8014920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014924:	f7ff bff0 	b.w	8014908 <__sfp_lock_release>
 8014928:	4b04      	ldr	r3, [pc, #16]	@ (801493c <__sinit+0x28>)
 801492a:	6223      	str	r3, [r4, #32]
 801492c:	4b04      	ldr	r3, [pc, #16]	@ (8014940 <__sinit+0x2c>)
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d1f5      	bne.n	8014920 <__sinit+0xc>
 8014934:	f7ff ffc4 	bl	80148c0 <global_stdio_init.part.0>
 8014938:	e7f2      	b.n	8014920 <__sinit+0xc>
 801493a:	bf00      	nop
 801493c:	08014881 	.word	0x08014881
 8014940:	200040b4 	.word	0x200040b4

08014944 <_fwalk_sglue>:
 8014944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014948:	4607      	mov	r7, r0
 801494a:	4688      	mov	r8, r1
 801494c:	4614      	mov	r4, r2
 801494e:	2600      	movs	r6, #0
 8014950:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014954:	f1b9 0901 	subs.w	r9, r9, #1
 8014958:	d505      	bpl.n	8014966 <_fwalk_sglue+0x22>
 801495a:	6824      	ldr	r4, [r4, #0]
 801495c:	2c00      	cmp	r4, #0
 801495e:	d1f7      	bne.n	8014950 <_fwalk_sglue+0xc>
 8014960:	4630      	mov	r0, r6
 8014962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014966:	89ab      	ldrh	r3, [r5, #12]
 8014968:	2b01      	cmp	r3, #1
 801496a:	d907      	bls.n	801497c <_fwalk_sglue+0x38>
 801496c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014970:	3301      	adds	r3, #1
 8014972:	d003      	beq.n	801497c <_fwalk_sglue+0x38>
 8014974:	4629      	mov	r1, r5
 8014976:	4638      	mov	r0, r7
 8014978:	47c0      	blx	r8
 801497a:	4306      	orrs	r6, r0
 801497c:	3568      	adds	r5, #104	@ 0x68
 801497e:	e7e9      	b.n	8014954 <_fwalk_sglue+0x10>

08014980 <siprintf>:
 8014980:	b40e      	push	{r1, r2, r3}
 8014982:	b500      	push	{lr}
 8014984:	b09c      	sub	sp, #112	@ 0x70
 8014986:	ab1d      	add	r3, sp, #116	@ 0x74
 8014988:	9002      	str	r0, [sp, #8]
 801498a:	9006      	str	r0, [sp, #24]
 801498c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014990:	4809      	ldr	r0, [pc, #36]	@ (80149b8 <siprintf+0x38>)
 8014992:	9107      	str	r1, [sp, #28]
 8014994:	9104      	str	r1, [sp, #16]
 8014996:	4909      	ldr	r1, [pc, #36]	@ (80149bc <siprintf+0x3c>)
 8014998:	f853 2b04 	ldr.w	r2, [r3], #4
 801499c:	9105      	str	r1, [sp, #20]
 801499e:	6800      	ldr	r0, [r0, #0]
 80149a0:	9301      	str	r3, [sp, #4]
 80149a2:	a902      	add	r1, sp, #8
 80149a4:	f002 fb7a 	bl	801709c <_svfiprintf_r>
 80149a8:	9b02      	ldr	r3, [sp, #8]
 80149aa:	2200      	movs	r2, #0
 80149ac:	701a      	strb	r2, [r3, #0]
 80149ae:	b01c      	add	sp, #112	@ 0x70
 80149b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80149b4:	b003      	add	sp, #12
 80149b6:	4770      	bx	lr
 80149b8:	2000006c 	.word	0x2000006c
 80149bc:	ffff0208 	.word	0xffff0208

080149c0 <siscanf>:
 80149c0:	b40e      	push	{r1, r2, r3}
 80149c2:	b530      	push	{r4, r5, lr}
 80149c4:	b09c      	sub	sp, #112	@ 0x70
 80149c6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80149c8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80149cc:	f854 5b04 	ldr.w	r5, [r4], #4
 80149d0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80149d4:	9002      	str	r0, [sp, #8]
 80149d6:	9006      	str	r0, [sp, #24]
 80149d8:	f7eb fc6a 	bl	80002b0 <strlen>
 80149dc:	4b0b      	ldr	r3, [pc, #44]	@ (8014a0c <siscanf+0x4c>)
 80149de:	9003      	str	r0, [sp, #12]
 80149e0:	9007      	str	r0, [sp, #28]
 80149e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80149e4:	480a      	ldr	r0, [pc, #40]	@ (8014a10 <siscanf+0x50>)
 80149e6:	9401      	str	r4, [sp, #4]
 80149e8:	2300      	movs	r3, #0
 80149ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80149ec:	9314      	str	r3, [sp, #80]	@ 0x50
 80149ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80149f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80149f6:	462a      	mov	r2, r5
 80149f8:	4623      	mov	r3, r4
 80149fa:	a902      	add	r1, sp, #8
 80149fc:	6800      	ldr	r0, [r0, #0]
 80149fe:	f002 fca1 	bl	8017344 <__ssvfiscanf_r>
 8014a02:	b01c      	add	sp, #112	@ 0x70
 8014a04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014a08:	b003      	add	sp, #12
 8014a0a:	4770      	bx	lr
 8014a0c:	08014a37 	.word	0x08014a37
 8014a10:	2000006c 	.word	0x2000006c

08014a14 <__sread>:
 8014a14:	b510      	push	{r4, lr}
 8014a16:	460c      	mov	r4, r1
 8014a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a1c:	f000 f894 	bl	8014b48 <_read_r>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	bfab      	itete	ge
 8014a24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014a26:	89a3      	ldrhlt	r3, [r4, #12]
 8014a28:	181b      	addge	r3, r3, r0
 8014a2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014a2e:	bfac      	ite	ge
 8014a30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014a32:	81a3      	strhlt	r3, [r4, #12]
 8014a34:	bd10      	pop	{r4, pc}

08014a36 <__seofread>:
 8014a36:	2000      	movs	r0, #0
 8014a38:	4770      	bx	lr

08014a3a <__swrite>:
 8014a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a3e:	461f      	mov	r7, r3
 8014a40:	898b      	ldrh	r3, [r1, #12]
 8014a42:	05db      	lsls	r3, r3, #23
 8014a44:	4605      	mov	r5, r0
 8014a46:	460c      	mov	r4, r1
 8014a48:	4616      	mov	r6, r2
 8014a4a:	d505      	bpl.n	8014a58 <__swrite+0x1e>
 8014a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a50:	2302      	movs	r3, #2
 8014a52:	2200      	movs	r2, #0
 8014a54:	f000 f866 	bl	8014b24 <_lseek_r>
 8014a58:	89a3      	ldrh	r3, [r4, #12]
 8014a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014a62:	81a3      	strh	r3, [r4, #12]
 8014a64:	4632      	mov	r2, r6
 8014a66:	463b      	mov	r3, r7
 8014a68:	4628      	mov	r0, r5
 8014a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014a6e:	f000 b88d 	b.w	8014b8c <_write_r>

08014a72 <__sseek>:
 8014a72:	b510      	push	{r4, lr}
 8014a74:	460c      	mov	r4, r1
 8014a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a7a:	f000 f853 	bl	8014b24 <_lseek_r>
 8014a7e:	1c43      	adds	r3, r0, #1
 8014a80:	89a3      	ldrh	r3, [r4, #12]
 8014a82:	bf15      	itete	ne
 8014a84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8014a86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014a8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014a8e:	81a3      	strheq	r3, [r4, #12]
 8014a90:	bf18      	it	ne
 8014a92:	81a3      	strhne	r3, [r4, #12]
 8014a94:	bd10      	pop	{r4, pc}

08014a96 <__sclose>:
 8014a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014a9a:	f000 b833 	b.w	8014b04 <_close_r>

08014a9e <memcmp>:
 8014a9e:	b510      	push	{r4, lr}
 8014aa0:	3901      	subs	r1, #1
 8014aa2:	4402      	add	r2, r0
 8014aa4:	4290      	cmp	r0, r2
 8014aa6:	d101      	bne.n	8014aac <memcmp+0xe>
 8014aa8:	2000      	movs	r0, #0
 8014aaa:	e005      	b.n	8014ab8 <memcmp+0x1a>
 8014aac:	7803      	ldrb	r3, [r0, #0]
 8014aae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014ab2:	42a3      	cmp	r3, r4
 8014ab4:	d001      	beq.n	8014aba <memcmp+0x1c>
 8014ab6:	1b18      	subs	r0, r3, r4
 8014ab8:	bd10      	pop	{r4, pc}
 8014aba:	3001      	adds	r0, #1
 8014abc:	e7f2      	b.n	8014aa4 <memcmp+0x6>

08014abe <memset>:
 8014abe:	4402      	add	r2, r0
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d100      	bne.n	8014ac8 <memset+0xa>
 8014ac6:	4770      	bx	lr
 8014ac8:	f803 1b01 	strb.w	r1, [r3], #1
 8014acc:	e7f9      	b.n	8014ac2 <memset+0x4>

08014ace <strstr>:
 8014ace:	780a      	ldrb	r2, [r1, #0]
 8014ad0:	b570      	push	{r4, r5, r6, lr}
 8014ad2:	b96a      	cbnz	r2, 8014af0 <strstr+0x22>
 8014ad4:	bd70      	pop	{r4, r5, r6, pc}
 8014ad6:	429a      	cmp	r2, r3
 8014ad8:	d109      	bne.n	8014aee <strstr+0x20>
 8014ada:	460c      	mov	r4, r1
 8014adc:	4605      	mov	r5, r0
 8014ade:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d0f6      	beq.n	8014ad4 <strstr+0x6>
 8014ae6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8014aea:	429e      	cmp	r6, r3
 8014aec:	d0f7      	beq.n	8014ade <strstr+0x10>
 8014aee:	3001      	adds	r0, #1
 8014af0:	7803      	ldrb	r3, [r0, #0]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d1ef      	bne.n	8014ad6 <strstr+0x8>
 8014af6:	4618      	mov	r0, r3
 8014af8:	e7ec      	b.n	8014ad4 <strstr+0x6>
	...

08014afc <_localeconv_r>:
 8014afc:	4800      	ldr	r0, [pc, #0]	@ (8014b00 <_localeconv_r+0x4>)
 8014afe:	4770      	bx	lr
 8014b00:	200001ac 	.word	0x200001ac

08014b04 <_close_r>:
 8014b04:	b538      	push	{r3, r4, r5, lr}
 8014b06:	4d06      	ldr	r5, [pc, #24]	@ (8014b20 <_close_r+0x1c>)
 8014b08:	2300      	movs	r3, #0
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	4608      	mov	r0, r1
 8014b0e:	602b      	str	r3, [r5, #0]
 8014b10:	f7f3 fb94 	bl	800823c <_close>
 8014b14:	1c43      	adds	r3, r0, #1
 8014b16:	d102      	bne.n	8014b1e <_close_r+0x1a>
 8014b18:	682b      	ldr	r3, [r5, #0]
 8014b1a:	b103      	cbz	r3, 8014b1e <_close_r+0x1a>
 8014b1c:	6023      	str	r3, [r4, #0]
 8014b1e:	bd38      	pop	{r3, r4, r5, pc}
 8014b20:	200040b8 	.word	0x200040b8

08014b24 <_lseek_r>:
 8014b24:	b538      	push	{r3, r4, r5, lr}
 8014b26:	4d07      	ldr	r5, [pc, #28]	@ (8014b44 <_lseek_r+0x20>)
 8014b28:	4604      	mov	r4, r0
 8014b2a:	4608      	mov	r0, r1
 8014b2c:	4611      	mov	r1, r2
 8014b2e:	2200      	movs	r2, #0
 8014b30:	602a      	str	r2, [r5, #0]
 8014b32:	461a      	mov	r2, r3
 8014b34:	f7f3 fba9 	bl	800828a <_lseek>
 8014b38:	1c43      	adds	r3, r0, #1
 8014b3a:	d102      	bne.n	8014b42 <_lseek_r+0x1e>
 8014b3c:	682b      	ldr	r3, [r5, #0]
 8014b3e:	b103      	cbz	r3, 8014b42 <_lseek_r+0x1e>
 8014b40:	6023      	str	r3, [r4, #0]
 8014b42:	bd38      	pop	{r3, r4, r5, pc}
 8014b44:	200040b8 	.word	0x200040b8

08014b48 <_read_r>:
 8014b48:	b538      	push	{r3, r4, r5, lr}
 8014b4a:	4d07      	ldr	r5, [pc, #28]	@ (8014b68 <_read_r+0x20>)
 8014b4c:	4604      	mov	r4, r0
 8014b4e:	4608      	mov	r0, r1
 8014b50:	4611      	mov	r1, r2
 8014b52:	2200      	movs	r2, #0
 8014b54:	602a      	str	r2, [r5, #0]
 8014b56:	461a      	mov	r2, r3
 8014b58:	f7f3 fb37 	bl	80081ca <_read>
 8014b5c:	1c43      	adds	r3, r0, #1
 8014b5e:	d102      	bne.n	8014b66 <_read_r+0x1e>
 8014b60:	682b      	ldr	r3, [r5, #0]
 8014b62:	b103      	cbz	r3, 8014b66 <_read_r+0x1e>
 8014b64:	6023      	str	r3, [r4, #0]
 8014b66:	bd38      	pop	{r3, r4, r5, pc}
 8014b68:	200040b8 	.word	0x200040b8

08014b6c <_sbrk_r>:
 8014b6c:	b538      	push	{r3, r4, r5, lr}
 8014b6e:	4d06      	ldr	r5, [pc, #24]	@ (8014b88 <_sbrk_r+0x1c>)
 8014b70:	2300      	movs	r3, #0
 8014b72:	4604      	mov	r4, r0
 8014b74:	4608      	mov	r0, r1
 8014b76:	602b      	str	r3, [r5, #0]
 8014b78:	f7f3 fb94 	bl	80082a4 <_sbrk>
 8014b7c:	1c43      	adds	r3, r0, #1
 8014b7e:	d102      	bne.n	8014b86 <_sbrk_r+0x1a>
 8014b80:	682b      	ldr	r3, [r5, #0]
 8014b82:	b103      	cbz	r3, 8014b86 <_sbrk_r+0x1a>
 8014b84:	6023      	str	r3, [r4, #0]
 8014b86:	bd38      	pop	{r3, r4, r5, pc}
 8014b88:	200040b8 	.word	0x200040b8

08014b8c <_write_r>:
 8014b8c:	b538      	push	{r3, r4, r5, lr}
 8014b8e:	4d07      	ldr	r5, [pc, #28]	@ (8014bac <_write_r+0x20>)
 8014b90:	4604      	mov	r4, r0
 8014b92:	4608      	mov	r0, r1
 8014b94:	4611      	mov	r1, r2
 8014b96:	2200      	movs	r2, #0
 8014b98:	602a      	str	r2, [r5, #0]
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	f7f3 fb32 	bl	8008204 <_write>
 8014ba0:	1c43      	adds	r3, r0, #1
 8014ba2:	d102      	bne.n	8014baa <_write_r+0x1e>
 8014ba4:	682b      	ldr	r3, [r5, #0]
 8014ba6:	b103      	cbz	r3, 8014baa <_write_r+0x1e>
 8014ba8:	6023      	str	r3, [r4, #0]
 8014baa:	bd38      	pop	{r3, r4, r5, pc}
 8014bac:	200040b8 	.word	0x200040b8

08014bb0 <__errno>:
 8014bb0:	4b01      	ldr	r3, [pc, #4]	@ (8014bb8 <__errno+0x8>)
 8014bb2:	6818      	ldr	r0, [r3, #0]
 8014bb4:	4770      	bx	lr
 8014bb6:	bf00      	nop
 8014bb8:	2000006c 	.word	0x2000006c

08014bbc <__libc_init_array>:
 8014bbc:	b570      	push	{r4, r5, r6, lr}
 8014bbe:	4d0d      	ldr	r5, [pc, #52]	@ (8014bf4 <__libc_init_array+0x38>)
 8014bc0:	4c0d      	ldr	r4, [pc, #52]	@ (8014bf8 <__libc_init_array+0x3c>)
 8014bc2:	1b64      	subs	r4, r4, r5
 8014bc4:	10a4      	asrs	r4, r4, #2
 8014bc6:	2600      	movs	r6, #0
 8014bc8:	42a6      	cmp	r6, r4
 8014bca:	d109      	bne.n	8014be0 <__libc_init_array+0x24>
 8014bcc:	4d0b      	ldr	r5, [pc, #44]	@ (8014bfc <__libc_init_array+0x40>)
 8014bce:	4c0c      	ldr	r4, [pc, #48]	@ (8014c00 <__libc_init_array+0x44>)
 8014bd0:	f005 fd7a 	bl	801a6c8 <_init>
 8014bd4:	1b64      	subs	r4, r4, r5
 8014bd6:	10a4      	asrs	r4, r4, #2
 8014bd8:	2600      	movs	r6, #0
 8014bda:	42a6      	cmp	r6, r4
 8014bdc:	d105      	bne.n	8014bea <__libc_init_array+0x2e>
 8014bde:	bd70      	pop	{r4, r5, r6, pc}
 8014be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8014be4:	4798      	blx	r3
 8014be6:	3601      	adds	r6, #1
 8014be8:	e7ee      	b.n	8014bc8 <__libc_init_array+0xc>
 8014bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8014bee:	4798      	blx	r3
 8014bf0:	3601      	adds	r6, #1
 8014bf2:	e7f2      	b.n	8014bda <__libc_init_array+0x1e>
 8014bf4:	0801b220 	.word	0x0801b220
 8014bf8:	0801b220 	.word	0x0801b220
 8014bfc:	0801b220 	.word	0x0801b220
 8014c00:	0801b224 	.word	0x0801b224

08014c04 <__retarget_lock_init_recursive>:
 8014c04:	4770      	bx	lr

08014c06 <__retarget_lock_acquire_recursive>:
 8014c06:	4770      	bx	lr

08014c08 <__retarget_lock_release_recursive>:
 8014c08:	4770      	bx	lr

08014c0a <memcpy>:
 8014c0a:	440a      	add	r2, r1
 8014c0c:	4291      	cmp	r1, r2
 8014c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014c12:	d100      	bne.n	8014c16 <memcpy+0xc>
 8014c14:	4770      	bx	lr
 8014c16:	b510      	push	{r4, lr}
 8014c18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014c1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014c20:	4291      	cmp	r1, r2
 8014c22:	d1f9      	bne.n	8014c18 <memcpy+0xe>
 8014c24:	bd10      	pop	{r4, pc}
	...

08014c28 <nanf>:
 8014c28:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8014c30 <nanf+0x8>
 8014c2c:	4770      	bx	lr
 8014c2e:	bf00      	nop
 8014c30:	7fc00000 	.word	0x7fc00000

08014c34 <quorem>:
 8014c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c38:	6903      	ldr	r3, [r0, #16]
 8014c3a:	690c      	ldr	r4, [r1, #16]
 8014c3c:	42a3      	cmp	r3, r4
 8014c3e:	4607      	mov	r7, r0
 8014c40:	db7e      	blt.n	8014d40 <quorem+0x10c>
 8014c42:	3c01      	subs	r4, #1
 8014c44:	f101 0814 	add.w	r8, r1, #20
 8014c48:	00a3      	lsls	r3, r4, #2
 8014c4a:	f100 0514 	add.w	r5, r0, #20
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c54:	9301      	str	r3, [sp, #4]
 8014c56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014c5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c5e:	3301      	adds	r3, #1
 8014c60:	429a      	cmp	r2, r3
 8014c62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014c66:	fbb2 f6f3 	udiv	r6, r2, r3
 8014c6a:	d32e      	bcc.n	8014cca <quorem+0x96>
 8014c6c:	f04f 0a00 	mov.w	sl, #0
 8014c70:	46c4      	mov	ip, r8
 8014c72:	46ae      	mov	lr, r5
 8014c74:	46d3      	mov	fp, sl
 8014c76:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014c7a:	b298      	uxth	r0, r3
 8014c7c:	fb06 a000 	mla	r0, r6, r0, sl
 8014c80:	0c02      	lsrs	r2, r0, #16
 8014c82:	0c1b      	lsrs	r3, r3, #16
 8014c84:	fb06 2303 	mla	r3, r6, r3, r2
 8014c88:	f8de 2000 	ldr.w	r2, [lr]
 8014c8c:	b280      	uxth	r0, r0
 8014c8e:	b292      	uxth	r2, r2
 8014c90:	1a12      	subs	r2, r2, r0
 8014c92:	445a      	add	r2, fp
 8014c94:	f8de 0000 	ldr.w	r0, [lr]
 8014c98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014c9c:	b29b      	uxth	r3, r3
 8014c9e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8014ca2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8014ca6:	b292      	uxth	r2, r2
 8014ca8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8014cac:	45e1      	cmp	r9, ip
 8014cae:	f84e 2b04 	str.w	r2, [lr], #4
 8014cb2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8014cb6:	d2de      	bcs.n	8014c76 <quorem+0x42>
 8014cb8:	9b00      	ldr	r3, [sp, #0]
 8014cba:	58eb      	ldr	r3, [r5, r3]
 8014cbc:	b92b      	cbnz	r3, 8014cca <quorem+0x96>
 8014cbe:	9b01      	ldr	r3, [sp, #4]
 8014cc0:	3b04      	subs	r3, #4
 8014cc2:	429d      	cmp	r5, r3
 8014cc4:	461a      	mov	r2, r3
 8014cc6:	d32f      	bcc.n	8014d28 <quorem+0xf4>
 8014cc8:	613c      	str	r4, [r7, #16]
 8014cca:	4638      	mov	r0, r7
 8014ccc:	f001 f916 	bl	8015efc <__mcmp>
 8014cd0:	2800      	cmp	r0, #0
 8014cd2:	db25      	blt.n	8014d20 <quorem+0xec>
 8014cd4:	4629      	mov	r1, r5
 8014cd6:	2000      	movs	r0, #0
 8014cd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8014cdc:	f8d1 c000 	ldr.w	ip, [r1]
 8014ce0:	fa1f fe82 	uxth.w	lr, r2
 8014ce4:	fa1f f38c 	uxth.w	r3, ip
 8014ce8:	eba3 030e 	sub.w	r3, r3, lr
 8014cec:	4403      	add	r3, r0
 8014cee:	0c12      	lsrs	r2, r2, #16
 8014cf0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8014cf4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8014cf8:	b29b      	uxth	r3, r3
 8014cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014cfe:	45c1      	cmp	r9, r8
 8014d00:	f841 3b04 	str.w	r3, [r1], #4
 8014d04:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014d08:	d2e6      	bcs.n	8014cd8 <quorem+0xa4>
 8014d0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d12:	b922      	cbnz	r2, 8014d1e <quorem+0xea>
 8014d14:	3b04      	subs	r3, #4
 8014d16:	429d      	cmp	r5, r3
 8014d18:	461a      	mov	r2, r3
 8014d1a:	d30b      	bcc.n	8014d34 <quorem+0x100>
 8014d1c:	613c      	str	r4, [r7, #16]
 8014d1e:	3601      	adds	r6, #1
 8014d20:	4630      	mov	r0, r6
 8014d22:	b003      	add	sp, #12
 8014d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d28:	6812      	ldr	r2, [r2, #0]
 8014d2a:	3b04      	subs	r3, #4
 8014d2c:	2a00      	cmp	r2, #0
 8014d2e:	d1cb      	bne.n	8014cc8 <quorem+0x94>
 8014d30:	3c01      	subs	r4, #1
 8014d32:	e7c6      	b.n	8014cc2 <quorem+0x8e>
 8014d34:	6812      	ldr	r2, [r2, #0]
 8014d36:	3b04      	subs	r3, #4
 8014d38:	2a00      	cmp	r2, #0
 8014d3a:	d1ef      	bne.n	8014d1c <quorem+0xe8>
 8014d3c:	3c01      	subs	r4, #1
 8014d3e:	e7ea      	b.n	8014d16 <quorem+0xe2>
 8014d40:	2000      	movs	r0, #0
 8014d42:	e7ee      	b.n	8014d22 <quorem+0xee>
 8014d44:	0000      	movs	r0, r0
	...

08014d48 <_dtoa_r>:
 8014d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4c:	69c7      	ldr	r7, [r0, #28]
 8014d4e:	b099      	sub	sp, #100	@ 0x64
 8014d50:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014d54:	ec55 4b10 	vmov	r4, r5, d0
 8014d58:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8014d5a:	9109      	str	r1, [sp, #36]	@ 0x24
 8014d5c:	4683      	mov	fp, r0
 8014d5e:	920e      	str	r2, [sp, #56]	@ 0x38
 8014d60:	9313      	str	r3, [sp, #76]	@ 0x4c
 8014d62:	b97f      	cbnz	r7, 8014d84 <_dtoa_r+0x3c>
 8014d64:	2010      	movs	r0, #16
 8014d66:	f000 fdfd 	bl	8015964 <malloc>
 8014d6a:	4602      	mov	r2, r0
 8014d6c:	f8cb 001c 	str.w	r0, [fp, #28]
 8014d70:	b920      	cbnz	r0, 8014d7c <_dtoa_r+0x34>
 8014d72:	4ba7      	ldr	r3, [pc, #668]	@ (8015010 <_dtoa_r+0x2c8>)
 8014d74:	21ef      	movs	r1, #239	@ 0xef
 8014d76:	48a7      	ldr	r0, [pc, #668]	@ (8015014 <_dtoa_r+0x2cc>)
 8014d78:	f002 fefa 	bl	8017b70 <__assert_func>
 8014d7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8014d80:	6007      	str	r7, [r0, #0]
 8014d82:	60c7      	str	r7, [r0, #12]
 8014d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014d88:	6819      	ldr	r1, [r3, #0]
 8014d8a:	b159      	cbz	r1, 8014da4 <_dtoa_r+0x5c>
 8014d8c:	685a      	ldr	r2, [r3, #4]
 8014d8e:	604a      	str	r2, [r1, #4]
 8014d90:	2301      	movs	r3, #1
 8014d92:	4093      	lsls	r3, r2
 8014d94:	608b      	str	r3, [r1, #8]
 8014d96:	4658      	mov	r0, fp
 8014d98:	f000 fe2c 	bl	80159f4 <_Bfree>
 8014d9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014da0:	2200      	movs	r2, #0
 8014da2:	601a      	str	r2, [r3, #0]
 8014da4:	1e2b      	subs	r3, r5, #0
 8014da6:	bfb9      	ittee	lt
 8014da8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8014dac:	9303      	strlt	r3, [sp, #12]
 8014dae:	2300      	movge	r3, #0
 8014db0:	6033      	strge	r3, [r6, #0]
 8014db2:	9f03      	ldr	r7, [sp, #12]
 8014db4:	4b98      	ldr	r3, [pc, #608]	@ (8015018 <_dtoa_r+0x2d0>)
 8014db6:	bfbc      	itt	lt
 8014db8:	2201      	movlt	r2, #1
 8014dba:	6032      	strlt	r2, [r6, #0]
 8014dbc:	43bb      	bics	r3, r7
 8014dbe:	d112      	bne.n	8014de6 <_dtoa_r+0x9e>
 8014dc0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014dc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8014dc6:	6013      	str	r3, [r2, #0]
 8014dc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014dcc:	4323      	orrs	r3, r4
 8014dce:	f000 854d 	beq.w	801586c <_dtoa_r+0xb24>
 8014dd2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014dd4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801502c <_dtoa_r+0x2e4>
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	f000 854f 	beq.w	801587c <_dtoa_r+0xb34>
 8014dde:	f10a 0303 	add.w	r3, sl, #3
 8014de2:	f000 bd49 	b.w	8015878 <_dtoa_r+0xb30>
 8014de6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014dea:	2200      	movs	r2, #0
 8014dec:	ec51 0b17 	vmov	r0, r1, d7
 8014df0:	2300      	movs	r3, #0
 8014df2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8014df6:	f7eb fe87 	bl	8000b08 <__aeabi_dcmpeq>
 8014dfa:	4680      	mov	r8, r0
 8014dfc:	b158      	cbz	r0, 8014e16 <_dtoa_r+0xce>
 8014dfe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8014e00:	2301      	movs	r3, #1
 8014e02:	6013      	str	r3, [r2, #0]
 8014e04:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014e06:	b113      	cbz	r3, 8014e0e <_dtoa_r+0xc6>
 8014e08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014e0a:	4b84      	ldr	r3, [pc, #528]	@ (801501c <_dtoa_r+0x2d4>)
 8014e0c:	6013      	str	r3, [r2, #0]
 8014e0e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8015030 <_dtoa_r+0x2e8>
 8014e12:	f000 bd33 	b.w	801587c <_dtoa_r+0xb34>
 8014e16:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014e1a:	aa16      	add	r2, sp, #88	@ 0x58
 8014e1c:	a917      	add	r1, sp, #92	@ 0x5c
 8014e1e:	4658      	mov	r0, fp
 8014e20:	f001 f98c 	bl	801613c <__d2b>
 8014e24:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8014e28:	4681      	mov	r9, r0
 8014e2a:	2e00      	cmp	r6, #0
 8014e2c:	d077      	beq.n	8014f1e <_dtoa_r+0x1d6>
 8014e2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014e30:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8014e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014e38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014e3c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8014e40:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8014e44:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8014e48:	4619      	mov	r1, r3
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	4b74      	ldr	r3, [pc, #464]	@ (8015020 <_dtoa_r+0x2d8>)
 8014e4e:	f7eb fa3b 	bl	80002c8 <__aeabi_dsub>
 8014e52:	a369      	add	r3, pc, #420	@ (adr r3, 8014ff8 <_dtoa_r+0x2b0>)
 8014e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e58:	f7eb fbee 	bl	8000638 <__aeabi_dmul>
 8014e5c:	a368      	add	r3, pc, #416	@ (adr r3, 8015000 <_dtoa_r+0x2b8>)
 8014e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e62:	f7eb fa33 	bl	80002cc <__adddf3>
 8014e66:	4604      	mov	r4, r0
 8014e68:	4630      	mov	r0, r6
 8014e6a:	460d      	mov	r5, r1
 8014e6c:	f7eb fb7a 	bl	8000564 <__aeabi_i2d>
 8014e70:	a365      	add	r3, pc, #404	@ (adr r3, 8015008 <_dtoa_r+0x2c0>)
 8014e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e76:	f7eb fbdf 	bl	8000638 <__aeabi_dmul>
 8014e7a:	4602      	mov	r2, r0
 8014e7c:	460b      	mov	r3, r1
 8014e7e:	4620      	mov	r0, r4
 8014e80:	4629      	mov	r1, r5
 8014e82:	f7eb fa23 	bl	80002cc <__adddf3>
 8014e86:	4604      	mov	r4, r0
 8014e88:	460d      	mov	r5, r1
 8014e8a:	f7eb fe85 	bl	8000b98 <__aeabi_d2iz>
 8014e8e:	2200      	movs	r2, #0
 8014e90:	4607      	mov	r7, r0
 8014e92:	2300      	movs	r3, #0
 8014e94:	4620      	mov	r0, r4
 8014e96:	4629      	mov	r1, r5
 8014e98:	f7eb fe40 	bl	8000b1c <__aeabi_dcmplt>
 8014e9c:	b140      	cbz	r0, 8014eb0 <_dtoa_r+0x168>
 8014e9e:	4638      	mov	r0, r7
 8014ea0:	f7eb fb60 	bl	8000564 <__aeabi_i2d>
 8014ea4:	4622      	mov	r2, r4
 8014ea6:	462b      	mov	r3, r5
 8014ea8:	f7eb fe2e 	bl	8000b08 <__aeabi_dcmpeq>
 8014eac:	b900      	cbnz	r0, 8014eb0 <_dtoa_r+0x168>
 8014eae:	3f01      	subs	r7, #1
 8014eb0:	2f16      	cmp	r7, #22
 8014eb2:	d851      	bhi.n	8014f58 <_dtoa_r+0x210>
 8014eb4:	4b5b      	ldr	r3, [pc, #364]	@ (8015024 <_dtoa_r+0x2dc>)
 8014eb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ebe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014ec2:	f7eb fe2b 	bl	8000b1c <__aeabi_dcmplt>
 8014ec6:	2800      	cmp	r0, #0
 8014ec8:	d048      	beq.n	8014f5c <_dtoa_r+0x214>
 8014eca:	3f01      	subs	r7, #1
 8014ecc:	2300      	movs	r3, #0
 8014ece:	9312      	str	r3, [sp, #72]	@ 0x48
 8014ed0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8014ed2:	1b9b      	subs	r3, r3, r6
 8014ed4:	1e5a      	subs	r2, r3, #1
 8014ed6:	bf44      	itt	mi
 8014ed8:	f1c3 0801 	rsbmi	r8, r3, #1
 8014edc:	2300      	movmi	r3, #0
 8014ede:	9208      	str	r2, [sp, #32]
 8014ee0:	bf54      	ite	pl
 8014ee2:	f04f 0800 	movpl.w	r8, #0
 8014ee6:	9308      	strmi	r3, [sp, #32]
 8014ee8:	2f00      	cmp	r7, #0
 8014eea:	db39      	blt.n	8014f60 <_dtoa_r+0x218>
 8014eec:	9b08      	ldr	r3, [sp, #32]
 8014eee:	970f      	str	r7, [sp, #60]	@ 0x3c
 8014ef0:	443b      	add	r3, r7
 8014ef2:	9308      	str	r3, [sp, #32]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8014ef8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014efa:	2b09      	cmp	r3, #9
 8014efc:	d864      	bhi.n	8014fc8 <_dtoa_r+0x280>
 8014efe:	2b05      	cmp	r3, #5
 8014f00:	bfc4      	itt	gt
 8014f02:	3b04      	subgt	r3, #4
 8014f04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8014f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014f08:	f1a3 0302 	sub.w	r3, r3, #2
 8014f0c:	bfcc      	ite	gt
 8014f0e:	2400      	movgt	r4, #0
 8014f10:	2401      	movle	r4, #1
 8014f12:	2b03      	cmp	r3, #3
 8014f14:	d863      	bhi.n	8014fde <_dtoa_r+0x296>
 8014f16:	e8df f003 	tbb	[pc, r3]
 8014f1a:	372a      	.short	0x372a
 8014f1c:	5535      	.short	0x5535
 8014f1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8014f22:	441e      	add	r6, r3
 8014f24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014f28:	2b20      	cmp	r3, #32
 8014f2a:	bfc1      	itttt	gt
 8014f2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014f30:	409f      	lslgt	r7, r3
 8014f32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8014f36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014f3a:	bfd6      	itet	le
 8014f3c:	f1c3 0320 	rsble	r3, r3, #32
 8014f40:	ea47 0003 	orrgt.w	r0, r7, r3
 8014f44:	fa04 f003 	lslle.w	r0, r4, r3
 8014f48:	f7eb fafc 	bl	8000544 <__aeabi_ui2d>
 8014f4c:	2201      	movs	r2, #1
 8014f4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8014f52:	3e01      	subs	r6, #1
 8014f54:	9214      	str	r2, [sp, #80]	@ 0x50
 8014f56:	e777      	b.n	8014e48 <_dtoa_r+0x100>
 8014f58:	2301      	movs	r3, #1
 8014f5a:	e7b8      	b.n	8014ece <_dtoa_r+0x186>
 8014f5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8014f5e:	e7b7      	b.n	8014ed0 <_dtoa_r+0x188>
 8014f60:	427b      	negs	r3, r7
 8014f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8014f64:	2300      	movs	r3, #0
 8014f66:	eba8 0807 	sub.w	r8, r8, r7
 8014f6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014f6c:	e7c4      	b.n	8014ef8 <_dtoa_r+0x1b0>
 8014f6e:	2300      	movs	r3, #0
 8014f70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	dc35      	bgt.n	8014fe4 <_dtoa_r+0x29c>
 8014f78:	2301      	movs	r3, #1
 8014f7a:	9300      	str	r3, [sp, #0]
 8014f7c:	9307      	str	r3, [sp, #28]
 8014f7e:	461a      	mov	r2, r3
 8014f80:	920e      	str	r2, [sp, #56]	@ 0x38
 8014f82:	e00b      	b.n	8014f9c <_dtoa_r+0x254>
 8014f84:	2301      	movs	r3, #1
 8014f86:	e7f3      	b.n	8014f70 <_dtoa_r+0x228>
 8014f88:	2300      	movs	r3, #0
 8014f8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014f8e:	18fb      	adds	r3, r7, r3
 8014f90:	9300      	str	r3, [sp, #0]
 8014f92:	3301      	adds	r3, #1
 8014f94:	2b01      	cmp	r3, #1
 8014f96:	9307      	str	r3, [sp, #28]
 8014f98:	bfb8      	it	lt
 8014f9a:	2301      	movlt	r3, #1
 8014f9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014fa0:	2100      	movs	r1, #0
 8014fa2:	2204      	movs	r2, #4
 8014fa4:	f102 0514 	add.w	r5, r2, #20
 8014fa8:	429d      	cmp	r5, r3
 8014faa:	d91f      	bls.n	8014fec <_dtoa_r+0x2a4>
 8014fac:	6041      	str	r1, [r0, #4]
 8014fae:	4658      	mov	r0, fp
 8014fb0:	f000 fce0 	bl	8015974 <_Balloc>
 8014fb4:	4682      	mov	sl, r0
 8014fb6:	2800      	cmp	r0, #0
 8014fb8:	d13c      	bne.n	8015034 <_dtoa_r+0x2ec>
 8014fba:	4b1b      	ldr	r3, [pc, #108]	@ (8015028 <_dtoa_r+0x2e0>)
 8014fbc:	4602      	mov	r2, r0
 8014fbe:	f240 11af 	movw	r1, #431	@ 0x1af
 8014fc2:	e6d8      	b.n	8014d76 <_dtoa_r+0x2e>
 8014fc4:	2301      	movs	r3, #1
 8014fc6:	e7e0      	b.n	8014f8a <_dtoa_r+0x242>
 8014fc8:	2401      	movs	r4, #1
 8014fca:	2300      	movs	r3, #0
 8014fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8014fce:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd4:	9300      	str	r3, [sp, #0]
 8014fd6:	9307      	str	r3, [sp, #28]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	2312      	movs	r3, #18
 8014fdc:	e7d0      	b.n	8014f80 <_dtoa_r+0x238>
 8014fde:	2301      	movs	r3, #1
 8014fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014fe2:	e7f5      	b.n	8014fd0 <_dtoa_r+0x288>
 8014fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014fe6:	9300      	str	r3, [sp, #0]
 8014fe8:	9307      	str	r3, [sp, #28]
 8014fea:	e7d7      	b.n	8014f9c <_dtoa_r+0x254>
 8014fec:	3101      	adds	r1, #1
 8014fee:	0052      	lsls	r2, r2, #1
 8014ff0:	e7d8      	b.n	8014fa4 <_dtoa_r+0x25c>
 8014ff2:	bf00      	nop
 8014ff4:	f3af 8000 	nop.w
 8014ff8:	636f4361 	.word	0x636f4361
 8014ffc:	3fd287a7 	.word	0x3fd287a7
 8015000:	8b60c8b3 	.word	0x8b60c8b3
 8015004:	3fc68a28 	.word	0x3fc68a28
 8015008:	509f79fb 	.word	0x509f79fb
 801500c:	3fd34413 	.word	0x3fd34413
 8015010:	0801aa10 	.word	0x0801aa10
 8015014:	0801aa27 	.word	0x0801aa27
 8015018:	7ff00000 	.word	0x7ff00000
 801501c:	0801ad69 	.word	0x0801ad69
 8015020:	3ff80000 	.word	0x3ff80000
 8015024:	0801ab20 	.word	0x0801ab20
 8015028:	0801aa7f 	.word	0x0801aa7f
 801502c:	0801aa0c 	.word	0x0801aa0c
 8015030:	0801ad68 	.word	0x0801ad68
 8015034:	f8db 301c 	ldr.w	r3, [fp, #28]
 8015038:	6018      	str	r0, [r3, #0]
 801503a:	9b07      	ldr	r3, [sp, #28]
 801503c:	2b0e      	cmp	r3, #14
 801503e:	f200 80a4 	bhi.w	801518a <_dtoa_r+0x442>
 8015042:	2c00      	cmp	r4, #0
 8015044:	f000 80a1 	beq.w	801518a <_dtoa_r+0x442>
 8015048:	2f00      	cmp	r7, #0
 801504a:	dd33      	ble.n	80150b4 <_dtoa_r+0x36c>
 801504c:	4bad      	ldr	r3, [pc, #692]	@ (8015304 <_dtoa_r+0x5bc>)
 801504e:	f007 020f 	and.w	r2, r7, #15
 8015052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015056:	ed93 7b00 	vldr	d7, [r3]
 801505a:	05f8      	lsls	r0, r7, #23
 801505c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015060:	ea4f 1427 	mov.w	r4, r7, asr #4
 8015064:	d516      	bpl.n	8015094 <_dtoa_r+0x34c>
 8015066:	4ba8      	ldr	r3, [pc, #672]	@ (8015308 <_dtoa_r+0x5c0>)
 8015068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801506c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015070:	f7eb fc0c 	bl	800088c <__aeabi_ddiv>
 8015074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015078:	f004 040f 	and.w	r4, r4, #15
 801507c:	2603      	movs	r6, #3
 801507e:	4da2      	ldr	r5, [pc, #648]	@ (8015308 <_dtoa_r+0x5c0>)
 8015080:	b954      	cbnz	r4, 8015098 <_dtoa_r+0x350>
 8015082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801508a:	f7eb fbff 	bl	800088c <__aeabi_ddiv>
 801508e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015092:	e028      	b.n	80150e6 <_dtoa_r+0x39e>
 8015094:	2602      	movs	r6, #2
 8015096:	e7f2      	b.n	801507e <_dtoa_r+0x336>
 8015098:	07e1      	lsls	r1, r4, #31
 801509a:	d508      	bpl.n	80150ae <_dtoa_r+0x366>
 801509c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80150a4:	f7eb fac8 	bl	8000638 <__aeabi_dmul>
 80150a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150ac:	3601      	adds	r6, #1
 80150ae:	1064      	asrs	r4, r4, #1
 80150b0:	3508      	adds	r5, #8
 80150b2:	e7e5      	b.n	8015080 <_dtoa_r+0x338>
 80150b4:	f000 80d2 	beq.w	801525c <_dtoa_r+0x514>
 80150b8:	427c      	negs	r4, r7
 80150ba:	4b92      	ldr	r3, [pc, #584]	@ (8015304 <_dtoa_r+0x5bc>)
 80150bc:	4d92      	ldr	r5, [pc, #584]	@ (8015308 <_dtoa_r+0x5c0>)
 80150be:	f004 020f 	and.w	r2, r4, #15
 80150c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80150c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80150ce:	f7eb fab3 	bl	8000638 <__aeabi_dmul>
 80150d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150d6:	1124      	asrs	r4, r4, #4
 80150d8:	2300      	movs	r3, #0
 80150da:	2602      	movs	r6, #2
 80150dc:	2c00      	cmp	r4, #0
 80150de:	f040 80b2 	bne.w	8015246 <_dtoa_r+0x4fe>
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d1d3      	bne.n	801508e <_dtoa_r+0x346>
 80150e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80150e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	f000 80b7 	beq.w	8015260 <_dtoa_r+0x518>
 80150f2:	4b86      	ldr	r3, [pc, #536]	@ (801530c <_dtoa_r+0x5c4>)
 80150f4:	2200      	movs	r2, #0
 80150f6:	4620      	mov	r0, r4
 80150f8:	4629      	mov	r1, r5
 80150fa:	f7eb fd0f 	bl	8000b1c <__aeabi_dcmplt>
 80150fe:	2800      	cmp	r0, #0
 8015100:	f000 80ae 	beq.w	8015260 <_dtoa_r+0x518>
 8015104:	9b07      	ldr	r3, [sp, #28]
 8015106:	2b00      	cmp	r3, #0
 8015108:	f000 80aa 	beq.w	8015260 <_dtoa_r+0x518>
 801510c:	9b00      	ldr	r3, [sp, #0]
 801510e:	2b00      	cmp	r3, #0
 8015110:	dd37      	ble.n	8015182 <_dtoa_r+0x43a>
 8015112:	1e7b      	subs	r3, r7, #1
 8015114:	9304      	str	r3, [sp, #16]
 8015116:	4620      	mov	r0, r4
 8015118:	4b7d      	ldr	r3, [pc, #500]	@ (8015310 <_dtoa_r+0x5c8>)
 801511a:	2200      	movs	r2, #0
 801511c:	4629      	mov	r1, r5
 801511e:	f7eb fa8b 	bl	8000638 <__aeabi_dmul>
 8015122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015126:	9c00      	ldr	r4, [sp, #0]
 8015128:	3601      	adds	r6, #1
 801512a:	4630      	mov	r0, r6
 801512c:	f7eb fa1a 	bl	8000564 <__aeabi_i2d>
 8015130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015134:	f7eb fa80 	bl	8000638 <__aeabi_dmul>
 8015138:	4b76      	ldr	r3, [pc, #472]	@ (8015314 <_dtoa_r+0x5cc>)
 801513a:	2200      	movs	r2, #0
 801513c:	f7eb f8c6 	bl	80002cc <__adddf3>
 8015140:	4605      	mov	r5, r0
 8015142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8015146:	2c00      	cmp	r4, #0
 8015148:	f040 808d 	bne.w	8015266 <_dtoa_r+0x51e>
 801514c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015150:	4b71      	ldr	r3, [pc, #452]	@ (8015318 <_dtoa_r+0x5d0>)
 8015152:	2200      	movs	r2, #0
 8015154:	f7eb f8b8 	bl	80002c8 <__aeabi_dsub>
 8015158:	4602      	mov	r2, r0
 801515a:	460b      	mov	r3, r1
 801515c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8015160:	462a      	mov	r2, r5
 8015162:	4633      	mov	r3, r6
 8015164:	f7eb fcf8 	bl	8000b58 <__aeabi_dcmpgt>
 8015168:	2800      	cmp	r0, #0
 801516a:	f040 828b 	bne.w	8015684 <_dtoa_r+0x93c>
 801516e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015172:	462a      	mov	r2, r5
 8015174:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8015178:	f7eb fcd0 	bl	8000b1c <__aeabi_dcmplt>
 801517c:	2800      	cmp	r0, #0
 801517e:	f040 8128 	bne.w	80153d2 <_dtoa_r+0x68a>
 8015182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8015186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801518a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801518c:	2b00      	cmp	r3, #0
 801518e:	f2c0 815a 	blt.w	8015446 <_dtoa_r+0x6fe>
 8015192:	2f0e      	cmp	r7, #14
 8015194:	f300 8157 	bgt.w	8015446 <_dtoa_r+0x6fe>
 8015198:	4b5a      	ldr	r3, [pc, #360]	@ (8015304 <_dtoa_r+0x5bc>)
 801519a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801519e:	ed93 7b00 	vldr	d7, [r3]
 80151a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	ed8d 7b00 	vstr	d7, [sp]
 80151aa:	da03      	bge.n	80151b4 <_dtoa_r+0x46c>
 80151ac:	9b07      	ldr	r3, [sp, #28]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	f340 8101 	ble.w	80153b6 <_dtoa_r+0x66e>
 80151b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80151b8:	4656      	mov	r6, sl
 80151ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151be:	4620      	mov	r0, r4
 80151c0:	4629      	mov	r1, r5
 80151c2:	f7eb fb63 	bl	800088c <__aeabi_ddiv>
 80151c6:	f7eb fce7 	bl	8000b98 <__aeabi_d2iz>
 80151ca:	4680      	mov	r8, r0
 80151cc:	f7eb f9ca 	bl	8000564 <__aeabi_i2d>
 80151d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151d4:	f7eb fa30 	bl	8000638 <__aeabi_dmul>
 80151d8:	4602      	mov	r2, r0
 80151da:	460b      	mov	r3, r1
 80151dc:	4620      	mov	r0, r4
 80151de:	4629      	mov	r1, r5
 80151e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80151e4:	f7eb f870 	bl	80002c8 <__aeabi_dsub>
 80151e8:	f806 4b01 	strb.w	r4, [r6], #1
 80151ec:	9d07      	ldr	r5, [sp, #28]
 80151ee:	eba6 040a 	sub.w	r4, r6, sl
 80151f2:	42a5      	cmp	r5, r4
 80151f4:	4602      	mov	r2, r0
 80151f6:	460b      	mov	r3, r1
 80151f8:	f040 8117 	bne.w	801542a <_dtoa_r+0x6e2>
 80151fc:	f7eb f866 	bl	80002cc <__adddf3>
 8015200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015204:	4604      	mov	r4, r0
 8015206:	460d      	mov	r5, r1
 8015208:	f7eb fca6 	bl	8000b58 <__aeabi_dcmpgt>
 801520c:	2800      	cmp	r0, #0
 801520e:	f040 80f9 	bne.w	8015404 <_dtoa_r+0x6bc>
 8015212:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015216:	4620      	mov	r0, r4
 8015218:	4629      	mov	r1, r5
 801521a:	f7eb fc75 	bl	8000b08 <__aeabi_dcmpeq>
 801521e:	b118      	cbz	r0, 8015228 <_dtoa_r+0x4e0>
 8015220:	f018 0f01 	tst.w	r8, #1
 8015224:	f040 80ee 	bne.w	8015404 <_dtoa_r+0x6bc>
 8015228:	4649      	mov	r1, r9
 801522a:	4658      	mov	r0, fp
 801522c:	f000 fbe2 	bl	80159f4 <_Bfree>
 8015230:	2300      	movs	r3, #0
 8015232:	7033      	strb	r3, [r6, #0]
 8015234:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015236:	3701      	adds	r7, #1
 8015238:	601f      	str	r7, [r3, #0]
 801523a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801523c:	2b00      	cmp	r3, #0
 801523e:	f000 831d 	beq.w	801587c <_dtoa_r+0xb34>
 8015242:	601e      	str	r6, [r3, #0]
 8015244:	e31a      	b.n	801587c <_dtoa_r+0xb34>
 8015246:	07e2      	lsls	r2, r4, #31
 8015248:	d505      	bpl.n	8015256 <_dtoa_r+0x50e>
 801524a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801524e:	f7eb f9f3 	bl	8000638 <__aeabi_dmul>
 8015252:	3601      	adds	r6, #1
 8015254:	2301      	movs	r3, #1
 8015256:	1064      	asrs	r4, r4, #1
 8015258:	3508      	adds	r5, #8
 801525a:	e73f      	b.n	80150dc <_dtoa_r+0x394>
 801525c:	2602      	movs	r6, #2
 801525e:	e742      	b.n	80150e6 <_dtoa_r+0x39e>
 8015260:	9c07      	ldr	r4, [sp, #28]
 8015262:	9704      	str	r7, [sp, #16]
 8015264:	e761      	b.n	801512a <_dtoa_r+0x3e2>
 8015266:	4b27      	ldr	r3, [pc, #156]	@ (8015304 <_dtoa_r+0x5bc>)
 8015268:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801526a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801526e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015272:	4454      	add	r4, sl
 8015274:	2900      	cmp	r1, #0
 8015276:	d053      	beq.n	8015320 <_dtoa_r+0x5d8>
 8015278:	4928      	ldr	r1, [pc, #160]	@ (801531c <_dtoa_r+0x5d4>)
 801527a:	2000      	movs	r0, #0
 801527c:	f7eb fb06 	bl	800088c <__aeabi_ddiv>
 8015280:	4633      	mov	r3, r6
 8015282:	462a      	mov	r2, r5
 8015284:	f7eb f820 	bl	80002c8 <__aeabi_dsub>
 8015288:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801528c:	4656      	mov	r6, sl
 801528e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015292:	f7eb fc81 	bl	8000b98 <__aeabi_d2iz>
 8015296:	4605      	mov	r5, r0
 8015298:	f7eb f964 	bl	8000564 <__aeabi_i2d>
 801529c:	4602      	mov	r2, r0
 801529e:	460b      	mov	r3, r1
 80152a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152a4:	f7eb f810 	bl	80002c8 <__aeabi_dsub>
 80152a8:	3530      	adds	r5, #48	@ 0x30
 80152aa:	4602      	mov	r2, r0
 80152ac:	460b      	mov	r3, r1
 80152ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80152b2:	f806 5b01 	strb.w	r5, [r6], #1
 80152b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80152ba:	f7eb fc2f 	bl	8000b1c <__aeabi_dcmplt>
 80152be:	2800      	cmp	r0, #0
 80152c0:	d171      	bne.n	80153a6 <_dtoa_r+0x65e>
 80152c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152c6:	4911      	ldr	r1, [pc, #68]	@ (801530c <_dtoa_r+0x5c4>)
 80152c8:	2000      	movs	r0, #0
 80152ca:	f7ea fffd 	bl	80002c8 <__aeabi_dsub>
 80152ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80152d2:	f7eb fc23 	bl	8000b1c <__aeabi_dcmplt>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	f040 8095 	bne.w	8015406 <_dtoa_r+0x6be>
 80152dc:	42a6      	cmp	r6, r4
 80152de:	f43f af50 	beq.w	8015182 <_dtoa_r+0x43a>
 80152e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80152e6:	4b0a      	ldr	r3, [pc, #40]	@ (8015310 <_dtoa_r+0x5c8>)
 80152e8:	2200      	movs	r2, #0
 80152ea:	f7eb f9a5 	bl	8000638 <__aeabi_dmul>
 80152ee:	4b08      	ldr	r3, [pc, #32]	@ (8015310 <_dtoa_r+0x5c8>)
 80152f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80152f4:	2200      	movs	r2, #0
 80152f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80152fa:	f7eb f99d 	bl	8000638 <__aeabi_dmul>
 80152fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015302:	e7c4      	b.n	801528e <_dtoa_r+0x546>
 8015304:	0801ab20 	.word	0x0801ab20
 8015308:	0801aaf8 	.word	0x0801aaf8
 801530c:	3ff00000 	.word	0x3ff00000
 8015310:	40240000 	.word	0x40240000
 8015314:	401c0000 	.word	0x401c0000
 8015318:	40140000 	.word	0x40140000
 801531c:	3fe00000 	.word	0x3fe00000
 8015320:	4631      	mov	r1, r6
 8015322:	4628      	mov	r0, r5
 8015324:	f7eb f988 	bl	8000638 <__aeabi_dmul>
 8015328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801532c:	9415      	str	r4, [sp, #84]	@ 0x54
 801532e:	4656      	mov	r6, sl
 8015330:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015334:	f7eb fc30 	bl	8000b98 <__aeabi_d2iz>
 8015338:	4605      	mov	r5, r0
 801533a:	f7eb f913 	bl	8000564 <__aeabi_i2d>
 801533e:	4602      	mov	r2, r0
 8015340:	460b      	mov	r3, r1
 8015342:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015346:	f7ea ffbf 	bl	80002c8 <__aeabi_dsub>
 801534a:	3530      	adds	r5, #48	@ 0x30
 801534c:	f806 5b01 	strb.w	r5, [r6], #1
 8015350:	4602      	mov	r2, r0
 8015352:	460b      	mov	r3, r1
 8015354:	42a6      	cmp	r6, r4
 8015356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801535a:	f04f 0200 	mov.w	r2, #0
 801535e:	d124      	bne.n	80153aa <_dtoa_r+0x662>
 8015360:	4bac      	ldr	r3, [pc, #688]	@ (8015614 <_dtoa_r+0x8cc>)
 8015362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8015366:	f7ea ffb1 	bl	80002cc <__adddf3>
 801536a:	4602      	mov	r2, r0
 801536c:	460b      	mov	r3, r1
 801536e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015372:	f7eb fbf1 	bl	8000b58 <__aeabi_dcmpgt>
 8015376:	2800      	cmp	r0, #0
 8015378:	d145      	bne.n	8015406 <_dtoa_r+0x6be>
 801537a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801537e:	49a5      	ldr	r1, [pc, #660]	@ (8015614 <_dtoa_r+0x8cc>)
 8015380:	2000      	movs	r0, #0
 8015382:	f7ea ffa1 	bl	80002c8 <__aeabi_dsub>
 8015386:	4602      	mov	r2, r0
 8015388:	460b      	mov	r3, r1
 801538a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801538e:	f7eb fbc5 	bl	8000b1c <__aeabi_dcmplt>
 8015392:	2800      	cmp	r0, #0
 8015394:	f43f aef5 	beq.w	8015182 <_dtoa_r+0x43a>
 8015398:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801539a:	1e73      	subs	r3, r6, #1
 801539c:	9315      	str	r3, [sp, #84]	@ 0x54
 801539e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80153a2:	2b30      	cmp	r3, #48	@ 0x30
 80153a4:	d0f8      	beq.n	8015398 <_dtoa_r+0x650>
 80153a6:	9f04      	ldr	r7, [sp, #16]
 80153a8:	e73e      	b.n	8015228 <_dtoa_r+0x4e0>
 80153aa:	4b9b      	ldr	r3, [pc, #620]	@ (8015618 <_dtoa_r+0x8d0>)
 80153ac:	f7eb f944 	bl	8000638 <__aeabi_dmul>
 80153b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80153b4:	e7bc      	b.n	8015330 <_dtoa_r+0x5e8>
 80153b6:	d10c      	bne.n	80153d2 <_dtoa_r+0x68a>
 80153b8:	4b98      	ldr	r3, [pc, #608]	@ (801561c <_dtoa_r+0x8d4>)
 80153ba:	2200      	movs	r2, #0
 80153bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80153c0:	f7eb f93a 	bl	8000638 <__aeabi_dmul>
 80153c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80153c8:	f7eb fbbc 	bl	8000b44 <__aeabi_dcmpge>
 80153cc:	2800      	cmp	r0, #0
 80153ce:	f000 8157 	beq.w	8015680 <_dtoa_r+0x938>
 80153d2:	2400      	movs	r4, #0
 80153d4:	4625      	mov	r5, r4
 80153d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153d8:	43db      	mvns	r3, r3
 80153da:	9304      	str	r3, [sp, #16]
 80153dc:	4656      	mov	r6, sl
 80153de:	2700      	movs	r7, #0
 80153e0:	4621      	mov	r1, r4
 80153e2:	4658      	mov	r0, fp
 80153e4:	f000 fb06 	bl	80159f4 <_Bfree>
 80153e8:	2d00      	cmp	r5, #0
 80153ea:	d0dc      	beq.n	80153a6 <_dtoa_r+0x65e>
 80153ec:	b12f      	cbz	r7, 80153fa <_dtoa_r+0x6b2>
 80153ee:	42af      	cmp	r7, r5
 80153f0:	d003      	beq.n	80153fa <_dtoa_r+0x6b2>
 80153f2:	4639      	mov	r1, r7
 80153f4:	4658      	mov	r0, fp
 80153f6:	f000 fafd 	bl	80159f4 <_Bfree>
 80153fa:	4629      	mov	r1, r5
 80153fc:	4658      	mov	r0, fp
 80153fe:	f000 faf9 	bl	80159f4 <_Bfree>
 8015402:	e7d0      	b.n	80153a6 <_dtoa_r+0x65e>
 8015404:	9704      	str	r7, [sp, #16]
 8015406:	4633      	mov	r3, r6
 8015408:	461e      	mov	r6, r3
 801540a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801540e:	2a39      	cmp	r2, #57	@ 0x39
 8015410:	d107      	bne.n	8015422 <_dtoa_r+0x6da>
 8015412:	459a      	cmp	sl, r3
 8015414:	d1f8      	bne.n	8015408 <_dtoa_r+0x6c0>
 8015416:	9a04      	ldr	r2, [sp, #16]
 8015418:	3201      	adds	r2, #1
 801541a:	9204      	str	r2, [sp, #16]
 801541c:	2230      	movs	r2, #48	@ 0x30
 801541e:	f88a 2000 	strb.w	r2, [sl]
 8015422:	781a      	ldrb	r2, [r3, #0]
 8015424:	3201      	adds	r2, #1
 8015426:	701a      	strb	r2, [r3, #0]
 8015428:	e7bd      	b.n	80153a6 <_dtoa_r+0x65e>
 801542a:	4b7b      	ldr	r3, [pc, #492]	@ (8015618 <_dtoa_r+0x8d0>)
 801542c:	2200      	movs	r2, #0
 801542e:	f7eb f903 	bl	8000638 <__aeabi_dmul>
 8015432:	2200      	movs	r2, #0
 8015434:	2300      	movs	r3, #0
 8015436:	4604      	mov	r4, r0
 8015438:	460d      	mov	r5, r1
 801543a:	f7eb fb65 	bl	8000b08 <__aeabi_dcmpeq>
 801543e:	2800      	cmp	r0, #0
 8015440:	f43f aebb 	beq.w	80151ba <_dtoa_r+0x472>
 8015444:	e6f0      	b.n	8015228 <_dtoa_r+0x4e0>
 8015446:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015448:	2a00      	cmp	r2, #0
 801544a:	f000 80db 	beq.w	8015604 <_dtoa_r+0x8bc>
 801544e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015450:	2a01      	cmp	r2, #1
 8015452:	f300 80bf 	bgt.w	80155d4 <_dtoa_r+0x88c>
 8015456:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8015458:	2a00      	cmp	r2, #0
 801545a:	f000 80b7 	beq.w	80155cc <_dtoa_r+0x884>
 801545e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8015462:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015464:	4646      	mov	r6, r8
 8015466:	9a08      	ldr	r2, [sp, #32]
 8015468:	2101      	movs	r1, #1
 801546a:	441a      	add	r2, r3
 801546c:	4658      	mov	r0, fp
 801546e:	4498      	add	r8, r3
 8015470:	9208      	str	r2, [sp, #32]
 8015472:	f000 fbbd 	bl	8015bf0 <__i2b>
 8015476:	4605      	mov	r5, r0
 8015478:	b15e      	cbz	r6, 8015492 <_dtoa_r+0x74a>
 801547a:	9b08      	ldr	r3, [sp, #32]
 801547c:	2b00      	cmp	r3, #0
 801547e:	dd08      	ble.n	8015492 <_dtoa_r+0x74a>
 8015480:	42b3      	cmp	r3, r6
 8015482:	9a08      	ldr	r2, [sp, #32]
 8015484:	bfa8      	it	ge
 8015486:	4633      	movge	r3, r6
 8015488:	eba8 0803 	sub.w	r8, r8, r3
 801548c:	1af6      	subs	r6, r6, r3
 801548e:	1ad3      	subs	r3, r2, r3
 8015490:	9308      	str	r3, [sp, #32]
 8015492:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015494:	b1f3      	cbz	r3, 80154d4 <_dtoa_r+0x78c>
 8015496:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015498:	2b00      	cmp	r3, #0
 801549a:	f000 80b7 	beq.w	801560c <_dtoa_r+0x8c4>
 801549e:	b18c      	cbz	r4, 80154c4 <_dtoa_r+0x77c>
 80154a0:	4629      	mov	r1, r5
 80154a2:	4622      	mov	r2, r4
 80154a4:	4658      	mov	r0, fp
 80154a6:	f000 fc63 	bl	8015d70 <__pow5mult>
 80154aa:	464a      	mov	r2, r9
 80154ac:	4601      	mov	r1, r0
 80154ae:	4605      	mov	r5, r0
 80154b0:	4658      	mov	r0, fp
 80154b2:	f000 fbb3 	bl	8015c1c <__multiply>
 80154b6:	4649      	mov	r1, r9
 80154b8:	9004      	str	r0, [sp, #16]
 80154ba:	4658      	mov	r0, fp
 80154bc:	f000 fa9a 	bl	80159f4 <_Bfree>
 80154c0:	9b04      	ldr	r3, [sp, #16]
 80154c2:	4699      	mov	r9, r3
 80154c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80154c6:	1b1a      	subs	r2, r3, r4
 80154c8:	d004      	beq.n	80154d4 <_dtoa_r+0x78c>
 80154ca:	4649      	mov	r1, r9
 80154cc:	4658      	mov	r0, fp
 80154ce:	f000 fc4f 	bl	8015d70 <__pow5mult>
 80154d2:	4681      	mov	r9, r0
 80154d4:	2101      	movs	r1, #1
 80154d6:	4658      	mov	r0, fp
 80154d8:	f000 fb8a 	bl	8015bf0 <__i2b>
 80154dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80154de:	4604      	mov	r4, r0
 80154e0:	2b00      	cmp	r3, #0
 80154e2:	f000 81cf 	beq.w	8015884 <_dtoa_r+0xb3c>
 80154e6:	461a      	mov	r2, r3
 80154e8:	4601      	mov	r1, r0
 80154ea:	4658      	mov	r0, fp
 80154ec:	f000 fc40 	bl	8015d70 <__pow5mult>
 80154f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80154f2:	2b01      	cmp	r3, #1
 80154f4:	4604      	mov	r4, r0
 80154f6:	f300 8095 	bgt.w	8015624 <_dtoa_r+0x8dc>
 80154fa:	9b02      	ldr	r3, [sp, #8]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f040 8087 	bne.w	8015610 <_dtoa_r+0x8c8>
 8015502:	9b03      	ldr	r3, [sp, #12]
 8015504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015508:	2b00      	cmp	r3, #0
 801550a:	f040 8089 	bne.w	8015620 <_dtoa_r+0x8d8>
 801550e:	9b03      	ldr	r3, [sp, #12]
 8015510:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8015514:	0d1b      	lsrs	r3, r3, #20
 8015516:	051b      	lsls	r3, r3, #20
 8015518:	b12b      	cbz	r3, 8015526 <_dtoa_r+0x7de>
 801551a:	9b08      	ldr	r3, [sp, #32]
 801551c:	3301      	adds	r3, #1
 801551e:	9308      	str	r3, [sp, #32]
 8015520:	f108 0801 	add.w	r8, r8, #1
 8015524:	2301      	movs	r3, #1
 8015526:	930a      	str	r3, [sp, #40]	@ 0x28
 8015528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801552a:	2b00      	cmp	r3, #0
 801552c:	f000 81b0 	beq.w	8015890 <_dtoa_r+0xb48>
 8015530:	6923      	ldr	r3, [r4, #16]
 8015532:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015536:	6918      	ldr	r0, [r3, #16]
 8015538:	f000 fb0e 	bl	8015b58 <__hi0bits>
 801553c:	f1c0 0020 	rsb	r0, r0, #32
 8015540:	9b08      	ldr	r3, [sp, #32]
 8015542:	4418      	add	r0, r3
 8015544:	f010 001f 	ands.w	r0, r0, #31
 8015548:	d077      	beq.n	801563a <_dtoa_r+0x8f2>
 801554a:	f1c0 0320 	rsb	r3, r0, #32
 801554e:	2b04      	cmp	r3, #4
 8015550:	dd6b      	ble.n	801562a <_dtoa_r+0x8e2>
 8015552:	9b08      	ldr	r3, [sp, #32]
 8015554:	f1c0 001c 	rsb	r0, r0, #28
 8015558:	4403      	add	r3, r0
 801555a:	4480      	add	r8, r0
 801555c:	4406      	add	r6, r0
 801555e:	9308      	str	r3, [sp, #32]
 8015560:	f1b8 0f00 	cmp.w	r8, #0
 8015564:	dd05      	ble.n	8015572 <_dtoa_r+0x82a>
 8015566:	4649      	mov	r1, r9
 8015568:	4642      	mov	r2, r8
 801556a:	4658      	mov	r0, fp
 801556c:	f000 fc5a 	bl	8015e24 <__lshift>
 8015570:	4681      	mov	r9, r0
 8015572:	9b08      	ldr	r3, [sp, #32]
 8015574:	2b00      	cmp	r3, #0
 8015576:	dd05      	ble.n	8015584 <_dtoa_r+0x83c>
 8015578:	4621      	mov	r1, r4
 801557a:	461a      	mov	r2, r3
 801557c:	4658      	mov	r0, fp
 801557e:	f000 fc51 	bl	8015e24 <__lshift>
 8015582:	4604      	mov	r4, r0
 8015584:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015586:	2b00      	cmp	r3, #0
 8015588:	d059      	beq.n	801563e <_dtoa_r+0x8f6>
 801558a:	4621      	mov	r1, r4
 801558c:	4648      	mov	r0, r9
 801558e:	f000 fcb5 	bl	8015efc <__mcmp>
 8015592:	2800      	cmp	r0, #0
 8015594:	da53      	bge.n	801563e <_dtoa_r+0x8f6>
 8015596:	1e7b      	subs	r3, r7, #1
 8015598:	9304      	str	r3, [sp, #16]
 801559a:	4649      	mov	r1, r9
 801559c:	2300      	movs	r3, #0
 801559e:	220a      	movs	r2, #10
 80155a0:	4658      	mov	r0, fp
 80155a2:	f000 fa49 	bl	8015a38 <__multadd>
 80155a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80155a8:	4681      	mov	r9, r0
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	f000 8172 	beq.w	8015894 <_dtoa_r+0xb4c>
 80155b0:	2300      	movs	r3, #0
 80155b2:	4629      	mov	r1, r5
 80155b4:	220a      	movs	r2, #10
 80155b6:	4658      	mov	r0, fp
 80155b8:	f000 fa3e 	bl	8015a38 <__multadd>
 80155bc:	9b00      	ldr	r3, [sp, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	4605      	mov	r5, r0
 80155c2:	dc67      	bgt.n	8015694 <_dtoa_r+0x94c>
 80155c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80155c6:	2b02      	cmp	r3, #2
 80155c8:	dc41      	bgt.n	801564e <_dtoa_r+0x906>
 80155ca:	e063      	b.n	8015694 <_dtoa_r+0x94c>
 80155cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80155ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80155d2:	e746      	b.n	8015462 <_dtoa_r+0x71a>
 80155d4:	9b07      	ldr	r3, [sp, #28]
 80155d6:	1e5c      	subs	r4, r3, #1
 80155d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80155da:	42a3      	cmp	r3, r4
 80155dc:	bfbf      	itttt	lt
 80155de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80155e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80155e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80155e4:	1ae3      	sublt	r3, r4, r3
 80155e6:	bfb4      	ite	lt
 80155e8:	18d2      	addlt	r2, r2, r3
 80155ea:	1b1c      	subge	r4, r3, r4
 80155ec:	9b07      	ldr	r3, [sp, #28]
 80155ee:	bfbc      	itt	lt
 80155f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80155f2:	2400      	movlt	r4, #0
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	bfb5      	itete	lt
 80155f8:	eba8 0603 	sublt.w	r6, r8, r3
 80155fc:	9b07      	ldrge	r3, [sp, #28]
 80155fe:	2300      	movlt	r3, #0
 8015600:	4646      	movge	r6, r8
 8015602:	e730      	b.n	8015466 <_dtoa_r+0x71e>
 8015604:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8015606:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8015608:	4646      	mov	r6, r8
 801560a:	e735      	b.n	8015478 <_dtoa_r+0x730>
 801560c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801560e:	e75c      	b.n	80154ca <_dtoa_r+0x782>
 8015610:	2300      	movs	r3, #0
 8015612:	e788      	b.n	8015526 <_dtoa_r+0x7de>
 8015614:	3fe00000 	.word	0x3fe00000
 8015618:	40240000 	.word	0x40240000
 801561c:	40140000 	.word	0x40140000
 8015620:	9b02      	ldr	r3, [sp, #8]
 8015622:	e780      	b.n	8015526 <_dtoa_r+0x7de>
 8015624:	2300      	movs	r3, #0
 8015626:	930a      	str	r3, [sp, #40]	@ 0x28
 8015628:	e782      	b.n	8015530 <_dtoa_r+0x7e8>
 801562a:	d099      	beq.n	8015560 <_dtoa_r+0x818>
 801562c:	9a08      	ldr	r2, [sp, #32]
 801562e:	331c      	adds	r3, #28
 8015630:	441a      	add	r2, r3
 8015632:	4498      	add	r8, r3
 8015634:	441e      	add	r6, r3
 8015636:	9208      	str	r2, [sp, #32]
 8015638:	e792      	b.n	8015560 <_dtoa_r+0x818>
 801563a:	4603      	mov	r3, r0
 801563c:	e7f6      	b.n	801562c <_dtoa_r+0x8e4>
 801563e:	9b07      	ldr	r3, [sp, #28]
 8015640:	9704      	str	r7, [sp, #16]
 8015642:	2b00      	cmp	r3, #0
 8015644:	dc20      	bgt.n	8015688 <_dtoa_r+0x940>
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801564a:	2b02      	cmp	r3, #2
 801564c:	dd1e      	ble.n	801568c <_dtoa_r+0x944>
 801564e:	9b00      	ldr	r3, [sp, #0]
 8015650:	2b00      	cmp	r3, #0
 8015652:	f47f aec0 	bne.w	80153d6 <_dtoa_r+0x68e>
 8015656:	4621      	mov	r1, r4
 8015658:	2205      	movs	r2, #5
 801565a:	4658      	mov	r0, fp
 801565c:	f000 f9ec 	bl	8015a38 <__multadd>
 8015660:	4601      	mov	r1, r0
 8015662:	4604      	mov	r4, r0
 8015664:	4648      	mov	r0, r9
 8015666:	f000 fc49 	bl	8015efc <__mcmp>
 801566a:	2800      	cmp	r0, #0
 801566c:	f77f aeb3 	ble.w	80153d6 <_dtoa_r+0x68e>
 8015670:	4656      	mov	r6, sl
 8015672:	2331      	movs	r3, #49	@ 0x31
 8015674:	f806 3b01 	strb.w	r3, [r6], #1
 8015678:	9b04      	ldr	r3, [sp, #16]
 801567a:	3301      	adds	r3, #1
 801567c:	9304      	str	r3, [sp, #16]
 801567e:	e6ae      	b.n	80153de <_dtoa_r+0x696>
 8015680:	9c07      	ldr	r4, [sp, #28]
 8015682:	9704      	str	r7, [sp, #16]
 8015684:	4625      	mov	r5, r4
 8015686:	e7f3      	b.n	8015670 <_dtoa_r+0x928>
 8015688:	9b07      	ldr	r3, [sp, #28]
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801568e:	2b00      	cmp	r3, #0
 8015690:	f000 8104 	beq.w	801589c <_dtoa_r+0xb54>
 8015694:	2e00      	cmp	r6, #0
 8015696:	dd05      	ble.n	80156a4 <_dtoa_r+0x95c>
 8015698:	4629      	mov	r1, r5
 801569a:	4632      	mov	r2, r6
 801569c:	4658      	mov	r0, fp
 801569e:	f000 fbc1 	bl	8015e24 <__lshift>
 80156a2:	4605      	mov	r5, r0
 80156a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d05a      	beq.n	8015760 <_dtoa_r+0xa18>
 80156aa:	6869      	ldr	r1, [r5, #4]
 80156ac:	4658      	mov	r0, fp
 80156ae:	f000 f961 	bl	8015974 <_Balloc>
 80156b2:	4606      	mov	r6, r0
 80156b4:	b928      	cbnz	r0, 80156c2 <_dtoa_r+0x97a>
 80156b6:	4b84      	ldr	r3, [pc, #528]	@ (80158c8 <_dtoa_r+0xb80>)
 80156b8:	4602      	mov	r2, r0
 80156ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80156be:	f7ff bb5a 	b.w	8014d76 <_dtoa_r+0x2e>
 80156c2:	692a      	ldr	r2, [r5, #16]
 80156c4:	3202      	adds	r2, #2
 80156c6:	0092      	lsls	r2, r2, #2
 80156c8:	f105 010c 	add.w	r1, r5, #12
 80156cc:	300c      	adds	r0, #12
 80156ce:	f7ff fa9c 	bl	8014c0a <memcpy>
 80156d2:	2201      	movs	r2, #1
 80156d4:	4631      	mov	r1, r6
 80156d6:	4658      	mov	r0, fp
 80156d8:	f000 fba4 	bl	8015e24 <__lshift>
 80156dc:	f10a 0301 	add.w	r3, sl, #1
 80156e0:	9307      	str	r3, [sp, #28]
 80156e2:	9b00      	ldr	r3, [sp, #0]
 80156e4:	4453      	add	r3, sl
 80156e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80156e8:	9b02      	ldr	r3, [sp, #8]
 80156ea:	f003 0301 	and.w	r3, r3, #1
 80156ee:	462f      	mov	r7, r5
 80156f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80156f2:	4605      	mov	r5, r0
 80156f4:	9b07      	ldr	r3, [sp, #28]
 80156f6:	4621      	mov	r1, r4
 80156f8:	3b01      	subs	r3, #1
 80156fa:	4648      	mov	r0, r9
 80156fc:	9300      	str	r3, [sp, #0]
 80156fe:	f7ff fa99 	bl	8014c34 <quorem>
 8015702:	4639      	mov	r1, r7
 8015704:	9002      	str	r0, [sp, #8]
 8015706:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801570a:	4648      	mov	r0, r9
 801570c:	f000 fbf6 	bl	8015efc <__mcmp>
 8015710:	462a      	mov	r2, r5
 8015712:	9008      	str	r0, [sp, #32]
 8015714:	4621      	mov	r1, r4
 8015716:	4658      	mov	r0, fp
 8015718:	f000 fc0c 	bl	8015f34 <__mdiff>
 801571c:	68c2      	ldr	r2, [r0, #12]
 801571e:	4606      	mov	r6, r0
 8015720:	bb02      	cbnz	r2, 8015764 <_dtoa_r+0xa1c>
 8015722:	4601      	mov	r1, r0
 8015724:	4648      	mov	r0, r9
 8015726:	f000 fbe9 	bl	8015efc <__mcmp>
 801572a:	4602      	mov	r2, r0
 801572c:	4631      	mov	r1, r6
 801572e:	4658      	mov	r0, fp
 8015730:	920e      	str	r2, [sp, #56]	@ 0x38
 8015732:	f000 f95f 	bl	80159f4 <_Bfree>
 8015736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015738:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801573a:	9e07      	ldr	r6, [sp, #28]
 801573c:	ea43 0102 	orr.w	r1, r3, r2
 8015740:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015742:	4319      	orrs	r1, r3
 8015744:	d110      	bne.n	8015768 <_dtoa_r+0xa20>
 8015746:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801574a:	d029      	beq.n	80157a0 <_dtoa_r+0xa58>
 801574c:	9b08      	ldr	r3, [sp, #32]
 801574e:	2b00      	cmp	r3, #0
 8015750:	dd02      	ble.n	8015758 <_dtoa_r+0xa10>
 8015752:	9b02      	ldr	r3, [sp, #8]
 8015754:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8015758:	9b00      	ldr	r3, [sp, #0]
 801575a:	f883 8000 	strb.w	r8, [r3]
 801575e:	e63f      	b.n	80153e0 <_dtoa_r+0x698>
 8015760:	4628      	mov	r0, r5
 8015762:	e7bb      	b.n	80156dc <_dtoa_r+0x994>
 8015764:	2201      	movs	r2, #1
 8015766:	e7e1      	b.n	801572c <_dtoa_r+0x9e4>
 8015768:	9b08      	ldr	r3, [sp, #32]
 801576a:	2b00      	cmp	r3, #0
 801576c:	db04      	blt.n	8015778 <_dtoa_r+0xa30>
 801576e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8015770:	430b      	orrs	r3, r1
 8015772:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8015774:	430b      	orrs	r3, r1
 8015776:	d120      	bne.n	80157ba <_dtoa_r+0xa72>
 8015778:	2a00      	cmp	r2, #0
 801577a:	dded      	ble.n	8015758 <_dtoa_r+0xa10>
 801577c:	4649      	mov	r1, r9
 801577e:	2201      	movs	r2, #1
 8015780:	4658      	mov	r0, fp
 8015782:	f000 fb4f 	bl	8015e24 <__lshift>
 8015786:	4621      	mov	r1, r4
 8015788:	4681      	mov	r9, r0
 801578a:	f000 fbb7 	bl	8015efc <__mcmp>
 801578e:	2800      	cmp	r0, #0
 8015790:	dc03      	bgt.n	801579a <_dtoa_r+0xa52>
 8015792:	d1e1      	bne.n	8015758 <_dtoa_r+0xa10>
 8015794:	f018 0f01 	tst.w	r8, #1
 8015798:	d0de      	beq.n	8015758 <_dtoa_r+0xa10>
 801579a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801579e:	d1d8      	bne.n	8015752 <_dtoa_r+0xa0a>
 80157a0:	9a00      	ldr	r2, [sp, #0]
 80157a2:	2339      	movs	r3, #57	@ 0x39
 80157a4:	7013      	strb	r3, [r2, #0]
 80157a6:	4633      	mov	r3, r6
 80157a8:	461e      	mov	r6, r3
 80157aa:	3b01      	subs	r3, #1
 80157ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80157b0:	2a39      	cmp	r2, #57	@ 0x39
 80157b2:	d052      	beq.n	801585a <_dtoa_r+0xb12>
 80157b4:	3201      	adds	r2, #1
 80157b6:	701a      	strb	r2, [r3, #0]
 80157b8:	e612      	b.n	80153e0 <_dtoa_r+0x698>
 80157ba:	2a00      	cmp	r2, #0
 80157bc:	dd07      	ble.n	80157ce <_dtoa_r+0xa86>
 80157be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80157c2:	d0ed      	beq.n	80157a0 <_dtoa_r+0xa58>
 80157c4:	9a00      	ldr	r2, [sp, #0]
 80157c6:	f108 0301 	add.w	r3, r8, #1
 80157ca:	7013      	strb	r3, [r2, #0]
 80157cc:	e608      	b.n	80153e0 <_dtoa_r+0x698>
 80157ce:	9b07      	ldr	r3, [sp, #28]
 80157d0:	9a07      	ldr	r2, [sp, #28]
 80157d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80157d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80157d8:	4293      	cmp	r3, r2
 80157da:	d028      	beq.n	801582e <_dtoa_r+0xae6>
 80157dc:	4649      	mov	r1, r9
 80157de:	2300      	movs	r3, #0
 80157e0:	220a      	movs	r2, #10
 80157e2:	4658      	mov	r0, fp
 80157e4:	f000 f928 	bl	8015a38 <__multadd>
 80157e8:	42af      	cmp	r7, r5
 80157ea:	4681      	mov	r9, r0
 80157ec:	f04f 0300 	mov.w	r3, #0
 80157f0:	f04f 020a 	mov.w	r2, #10
 80157f4:	4639      	mov	r1, r7
 80157f6:	4658      	mov	r0, fp
 80157f8:	d107      	bne.n	801580a <_dtoa_r+0xac2>
 80157fa:	f000 f91d 	bl	8015a38 <__multadd>
 80157fe:	4607      	mov	r7, r0
 8015800:	4605      	mov	r5, r0
 8015802:	9b07      	ldr	r3, [sp, #28]
 8015804:	3301      	adds	r3, #1
 8015806:	9307      	str	r3, [sp, #28]
 8015808:	e774      	b.n	80156f4 <_dtoa_r+0x9ac>
 801580a:	f000 f915 	bl	8015a38 <__multadd>
 801580e:	4629      	mov	r1, r5
 8015810:	4607      	mov	r7, r0
 8015812:	2300      	movs	r3, #0
 8015814:	220a      	movs	r2, #10
 8015816:	4658      	mov	r0, fp
 8015818:	f000 f90e 	bl	8015a38 <__multadd>
 801581c:	4605      	mov	r5, r0
 801581e:	e7f0      	b.n	8015802 <_dtoa_r+0xaba>
 8015820:	9b00      	ldr	r3, [sp, #0]
 8015822:	2b00      	cmp	r3, #0
 8015824:	bfcc      	ite	gt
 8015826:	461e      	movgt	r6, r3
 8015828:	2601      	movle	r6, #1
 801582a:	4456      	add	r6, sl
 801582c:	2700      	movs	r7, #0
 801582e:	4649      	mov	r1, r9
 8015830:	2201      	movs	r2, #1
 8015832:	4658      	mov	r0, fp
 8015834:	f000 faf6 	bl	8015e24 <__lshift>
 8015838:	4621      	mov	r1, r4
 801583a:	4681      	mov	r9, r0
 801583c:	f000 fb5e 	bl	8015efc <__mcmp>
 8015840:	2800      	cmp	r0, #0
 8015842:	dcb0      	bgt.n	80157a6 <_dtoa_r+0xa5e>
 8015844:	d102      	bne.n	801584c <_dtoa_r+0xb04>
 8015846:	f018 0f01 	tst.w	r8, #1
 801584a:	d1ac      	bne.n	80157a6 <_dtoa_r+0xa5e>
 801584c:	4633      	mov	r3, r6
 801584e:	461e      	mov	r6, r3
 8015850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015854:	2a30      	cmp	r2, #48	@ 0x30
 8015856:	d0fa      	beq.n	801584e <_dtoa_r+0xb06>
 8015858:	e5c2      	b.n	80153e0 <_dtoa_r+0x698>
 801585a:	459a      	cmp	sl, r3
 801585c:	d1a4      	bne.n	80157a8 <_dtoa_r+0xa60>
 801585e:	9b04      	ldr	r3, [sp, #16]
 8015860:	3301      	adds	r3, #1
 8015862:	9304      	str	r3, [sp, #16]
 8015864:	2331      	movs	r3, #49	@ 0x31
 8015866:	f88a 3000 	strb.w	r3, [sl]
 801586a:	e5b9      	b.n	80153e0 <_dtoa_r+0x698>
 801586c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801586e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80158cc <_dtoa_r+0xb84>
 8015872:	b11b      	cbz	r3, 801587c <_dtoa_r+0xb34>
 8015874:	f10a 0308 	add.w	r3, sl, #8
 8015878:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801587a:	6013      	str	r3, [r2, #0]
 801587c:	4650      	mov	r0, sl
 801587e:	b019      	add	sp, #100	@ 0x64
 8015880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015886:	2b01      	cmp	r3, #1
 8015888:	f77f ae37 	ble.w	80154fa <_dtoa_r+0x7b2>
 801588c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801588e:	930a      	str	r3, [sp, #40]	@ 0x28
 8015890:	2001      	movs	r0, #1
 8015892:	e655      	b.n	8015540 <_dtoa_r+0x7f8>
 8015894:	9b00      	ldr	r3, [sp, #0]
 8015896:	2b00      	cmp	r3, #0
 8015898:	f77f aed6 	ble.w	8015648 <_dtoa_r+0x900>
 801589c:	4656      	mov	r6, sl
 801589e:	4621      	mov	r1, r4
 80158a0:	4648      	mov	r0, r9
 80158a2:	f7ff f9c7 	bl	8014c34 <quorem>
 80158a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80158aa:	f806 8b01 	strb.w	r8, [r6], #1
 80158ae:	9b00      	ldr	r3, [sp, #0]
 80158b0:	eba6 020a 	sub.w	r2, r6, sl
 80158b4:	4293      	cmp	r3, r2
 80158b6:	ddb3      	ble.n	8015820 <_dtoa_r+0xad8>
 80158b8:	4649      	mov	r1, r9
 80158ba:	2300      	movs	r3, #0
 80158bc:	220a      	movs	r2, #10
 80158be:	4658      	mov	r0, fp
 80158c0:	f000 f8ba 	bl	8015a38 <__multadd>
 80158c4:	4681      	mov	r9, r0
 80158c6:	e7ea      	b.n	801589e <_dtoa_r+0xb56>
 80158c8:	0801aa7f 	.word	0x0801aa7f
 80158cc:	0801aa03 	.word	0x0801aa03

080158d0 <_free_r>:
 80158d0:	b538      	push	{r3, r4, r5, lr}
 80158d2:	4605      	mov	r5, r0
 80158d4:	2900      	cmp	r1, #0
 80158d6:	d041      	beq.n	801595c <_free_r+0x8c>
 80158d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158dc:	1f0c      	subs	r4, r1, #4
 80158de:	2b00      	cmp	r3, #0
 80158e0:	bfb8      	it	lt
 80158e2:	18e4      	addlt	r4, r4, r3
 80158e4:	f7fe f912 	bl	8013b0c <__malloc_lock>
 80158e8:	4a1d      	ldr	r2, [pc, #116]	@ (8015960 <_free_r+0x90>)
 80158ea:	6813      	ldr	r3, [r2, #0]
 80158ec:	b933      	cbnz	r3, 80158fc <_free_r+0x2c>
 80158ee:	6063      	str	r3, [r4, #4]
 80158f0:	6014      	str	r4, [r2, #0]
 80158f2:	4628      	mov	r0, r5
 80158f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80158f8:	f7fe b90e 	b.w	8013b18 <__malloc_unlock>
 80158fc:	42a3      	cmp	r3, r4
 80158fe:	d908      	bls.n	8015912 <_free_r+0x42>
 8015900:	6820      	ldr	r0, [r4, #0]
 8015902:	1821      	adds	r1, r4, r0
 8015904:	428b      	cmp	r3, r1
 8015906:	bf01      	itttt	eq
 8015908:	6819      	ldreq	r1, [r3, #0]
 801590a:	685b      	ldreq	r3, [r3, #4]
 801590c:	1809      	addeq	r1, r1, r0
 801590e:	6021      	streq	r1, [r4, #0]
 8015910:	e7ed      	b.n	80158ee <_free_r+0x1e>
 8015912:	461a      	mov	r2, r3
 8015914:	685b      	ldr	r3, [r3, #4]
 8015916:	b10b      	cbz	r3, 801591c <_free_r+0x4c>
 8015918:	42a3      	cmp	r3, r4
 801591a:	d9fa      	bls.n	8015912 <_free_r+0x42>
 801591c:	6811      	ldr	r1, [r2, #0]
 801591e:	1850      	adds	r0, r2, r1
 8015920:	42a0      	cmp	r0, r4
 8015922:	d10b      	bne.n	801593c <_free_r+0x6c>
 8015924:	6820      	ldr	r0, [r4, #0]
 8015926:	4401      	add	r1, r0
 8015928:	1850      	adds	r0, r2, r1
 801592a:	4283      	cmp	r3, r0
 801592c:	6011      	str	r1, [r2, #0]
 801592e:	d1e0      	bne.n	80158f2 <_free_r+0x22>
 8015930:	6818      	ldr	r0, [r3, #0]
 8015932:	685b      	ldr	r3, [r3, #4]
 8015934:	6053      	str	r3, [r2, #4]
 8015936:	4408      	add	r0, r1
 8015938:	6010      	str	r0, [r2, #0]
 801593a:	e7da      	b.n	80158f2 <_free_r+0x22>
 801593c:	d902      	bls.n	8015944 <_free_r+0x74>
 801593e:	230c      	movs	r3, #12
 8015940:	602b      	str	r3, [r5, #0]
 8015942:	e7d6      	b.n	80158f2 <_free_r+0x22>
 8015944:	6820      	ldr	r0, [r4, #0]
 8015946:	1821      	adds	r1, r4, r0
 8015948:	428b      	cmp	r3, r1
 801594a:	bf04      	itt	eq
 801594c:	6819      	ldreq	r1, [r3, #0]
 801594e:	685b      	ldreq	r3, [r3, #4]
 8015950:	6063      	str	r3, [r4, #4]
 8015952:	bf04      	itt	eq
 8015954:	1809      	addeq	r1, r1, r0
 8015956:	6021      	streq	r1, [r4, #0]
 8015958:	6054      	str	r4, [r2, #4]
 801595a:	e7ca      	b.n	80158f2 <_free_r+0x22>
 801595c:	bd38      	pop	{r3, r4, r5, pc}
 801595e:	bf00      	nop
 8015960:	20003f78 	.word	0x20003f78

08015964 <malloc>:
 8015964:	4b02      	ldr	r3, [pc, #8]	@ (8015970 <malloc+0xc>)
 8015966:	4601      	mov	r1, r0
 8015968:	6818      	ldr	r0, [r3, #0]
 801596a:	f7fe b84f 	b.w	8013a0c <_malloc_r>
 801596e:	bf00      	nop
 8015970:	2000006c 	.word	0x2000006c

08015974 <_Balloc>:
 8015974:	b570      	push	{r4, r5, r6, lr}
 8015976:	69c6      	ldr	r6, [r0, #28]
 8015978:	4604      	mov	r4, r0
 801597a:	460d      	mov	r5, r1
 801597c:	b976      	cbnz	r6, 801599c <_Balloc+0x28>
 801597e:	2010      	movs	r0, #16
 8015980:	f7ff fff0 	bl	8015964 <malloc>
 8015984:	4602      	mov	r2, r0
 8015986:	61e0      	str	r0, [r4, #28]
 8015988:	b920      	cbnz	r0, 8015994 <_Balloc+0x20>
 801598a:	4b18      	ldr	r3, [pc, #96]	@ (80159ec <_Balloc+0x78>)
 801598c:	4818      	ldr	r0, [pc, #96]	@ (80159f0 <_Balloc+0x7c>)
 801598e:	216b      	movs	r1, #107	@ 0x6b
 8015990:	f002 f8ee 	bl	8017b70 <__assert_func>
 8015994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015998:	6006      	str	r6, [r0, #0]
 801599a:	60c6      	str	r6, [r0, #12]
 801599c:	69e6      	ldr	r6, [r4, #28]
 801599e:	68f3      	ldr	r3, [r6, #12]
 80159a0:	b183      	cbz	r3, 80159c4 <_Balloc+0x50>
 80159a2:	69e3      	ldr	r3, [r4, #28]
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80159aa:	b9b8      	cbnz	r0, 80159dc <_Balloc+0x68>
 80159ac:	2101      	movs	r1, #1
 80159ae:	fa01 f605 	lsl.w	r6, r1, r5
 80159b2:	1d72      	adds	r2, r6, #5
 80159b4:	0092      	lsls	r2, r2, #2
 80159b6:	4620      	mov	r0, r4
 80159b8:	f7fd fff2 	bl	80139a0 <_calloc_r>
 80159bc:	b160      	cbz	r0, 80159d8 <_Balloc+0x64>
 80159be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80159c2:	e00e      	b.n	80159e2 <_Balloc+0x6e>
 80159c4:	2221      	movs	r2, #33	@ 0x21
 80159c6:	2104      	movs	r1, #4
 80159c8:	4620      	mov	r0, r4
 80159ca:	f7fd ffe9 	bl	80139a0 <_calloc_r>
 80159ce:	69e3      	ldr	r3, [r4, #28]
 80159d0:	60f0      	str	r0, [r6, #12]
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d1e4      	bne.n	80159a2 <_Balloc+0x2e>
 80159d8:	2000      	movs	r0, #0
 80159da:	bd70      	pop	{r4, r5, r6, pc}
 80159dc:	6802      	ldr	r2, [r0, #0]
 80159de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80159e2:	2300      	movs	r3, #0
 80159e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80159e8:	e7f7      	b.n	80159da <_Balloc+0x66>
 80159ea:	bf00      	nop
 80159ec:	0801aa10 	.word	0x0801aa10
 80159f0:	0801aa90 	.word	0x0801aa90

080159f4 <_Bfree>:
 80159f4:	b570      	push	{r4, r5, r6, lr}
 80159f6:	69c6      	ldr	r6, [r0, #28]
 80159f8:	4605      	mov	r5, r0
 80159fa:	460c      	mov	r4, r1
 80159fc:	b976      	cbnz	r6, 8015a1c <_Bfree+0x28>
 80159fe:	2010      	movs	r0, #16
 8015a00:	f7ff ffb0 	bl	8015964 <malloc>
 8015a04:	4602      	mov	r2, r0
 8015a06:	61e8      	str	r0, [r5, #28]
 8015a08:	b920      	cbnz	r0, 8015a14 <_Bfree+0x20>
 8015a0a:	4b09      	ldr	r3, [pc, #36]	@ (8015a30 <_Bfree+0x3c>)
 8015a0c:	4809      	ldr	r0, [pc, #36]	@ (8015a34 <_Bfree+0x40>)
 8015a0e:	218f      	movs	r1, #143	@ 0x8f
 8015a10:	f002 f8ae 	bl	8017b70 <__assert_func>
 8015a14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a18:	6006      	str	r6, [r0, #0]
 8015a1a:	60c6      	str	r6, [r0, #12]
 8015a1c:	b13c      	cbz	r4, 8015a2e <_Bfree+0x3a>
 8015a1e:	69eb      	ldr	r3, [r5, #28]
 8015a20:	6862      	ldr	r2, [r4, #4]
 8015a22:	68db      	ldr	r3, [r3, #12]
 8015a24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015a28:	6021      	str	r1, [r4, #0]
 8015a2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015a2e:	bd70      	pop	{r4, r5, r6, pc}
 8015a30:	0801aa10 	.word	0x0801aa10
 8015a34:	0801aa90 	.word	0x0801aa90

08015a38 <__multadd>:
 8015a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a3c:	690d      	ldr	r5, [r1, #16]
 8015a3e:	4607      	mov	r7, r0
 8015a40:	460c      	mov	r4, r1
 8015a42:	461e      	mov	r6, r3
 8015a44:	f101 0c14 	add.w	ip, r1, #20
 8015a48:	2000      	movs	r0, #0
 8015a4a:	f8dc 3000 	ldr.w	r3, [ip]
 8015a4e:	b299      	uxth	r1, r3
 8015a50:	fb02 6101 	mla	r1, r2, r1, r6
 8015a54:	0c1e      	lsrs	r6, r3, #16
 8015a56:	0c0b      	lsrs	r3, r1, #16
 8015a58:	fb02 3306 	mla	r3, r2, r6, r3
 8015a5c:	b289      	uxth	r1, r1
 8015a5e:	3001      	adds	r0, #1
 8015a60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015a64:	4285      	cmp	r5, r0
 8015a66:	f84c 1b04 	str.w	r1, [ip], #4
 8015a6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015a6e:	dcec      	bgt.n	8015a4a <__multadd+0x12>
 8015a70:	b30e      	cbz	r6, 8015ab6 <__multadd+0x7e>
 8015a72:	68a3      	ldr	r3, [r4, #8]
 8015a74:	42ab      	cmp	r3, r5
 8015a76:	dc19      	bgt.n	8015aac <__multadd+0x74>
 8015a78:	6861      	ldr	r1, [r4, #4]
 8015a7a:	4638      	mov	r0, r7
 8015a7c:	3101      	adds	r1, #1
 8015a7e:	f7ff ff79 	bl	8015974 <_Balloc>
 8015a82:	4680      	mov	r8, r0
 8015a84:	b928      	cbnz	r0, 8015a92 <__multadd+0x5a>
 8015a86:	4602      	mov	r2, r0
 8015a88:	4b0c      	ldr	r3, [pc, #48]	@ (8015abc <__multadd+0x84>)
 8015a8a:	480d      	ldr	r0, [pc, #52]	@ (8015ac0 <__multadd+0x88>)
 8015a8c:	21ba      	movs	r1, #186	@ 0xba
 8015a8e:	f002 f86f 	bl	8017b70 <__assert_func>
 8015a92:	6922      	ldr	r2, [r4, #16]
 8015a94:	3202      	adds	r2, #2
 8015a96:	f104 010c 	add.w	r1, r4, #12
 8015a9a:	0092      	lsls	r2, r2, #2
 8015a9c:	300c      	adds	r0, #12
 8015a9e:	f7ff f8b4 	bl	8014c0a <memcpy>
 8015aa2:	4621      	mov	r1, r4
 8015aa4:	4638      	mov	r0, r7
 8015aa6:	f7ff ffa5 	bl	80159f4 <_Bfree>
 8015aaa:	4644      	mov	r4, r8
 8015aac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015ab0:	3501      	adds	r5, #1
 8015ab2:	615e      	str	r6, [r3, #20]
 8015ab4:	6125      	str	r5, [r4, #16]
 8015ab6:	4620      	mov	r0, r4
 8015ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015abc:	0801aa7f 	.word	0x0801aa7f
 8015ac0:	0801aa90 	.word	0x0801aa90

08015ac4 <__s2b>:
 8015ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ac8:	460c      	mov	r4, r1
 8015aca:	4615      	mov	r5, r2
 8015acc:	461f      	mov	r7, r3
 8015ace:	2209      	movs	r2, #9
 8015ad0:	3308      	adds	r3, #8
 8015ad2:	4606      	mov	r6, r0
 8015ad4:	fb93 f3f2 	sdiv	r3, r3, r2
 8015ad8:	2100      	movs	r1, #0
 8015ada:	2201      	movs	r2, #1
 8015adc:	429a      	cmp	r2, r3
 8015ade:	db09      	blt.n	8015af4 <__s2b+0x30>
 8015ae0:	4630      	mov	r0, r6
 8015ae2:	f7ff ff47 	bl	8015974 <_Balloc>
 8015ae6:	b940      	cbnz	r0, 8015afa <__s2b+0x36>
 8015ae8:	4602      	mov	r2, r0
 8015aea:	4b19      	ldr	r3, [pc, #100]	@ (8015b50 <__s2b+0x8c>)
 8015aec:	4819      	ldr	r0, [pc, #100]	@ (8015b54 <__s2b+0x90>)
 8015aee:	21d3      	movs	r1, #211	@ 0xd3
 8015af0:	f002 f83e 	bl	8017b70 <__assert_func>
 8015af4:	0052      	lsls	r2, r2, #1
 8015af6:	3101      	adds	r1, #1
 8015af8:	e7f0      	b.n	8015adc <__s2b+0x18>
 8015afa:	9b08      	ldr	r3, [sp, #32]
 8015afc:	6143      	str	r3, [r0, #20]
 8015afe:	2d09      	cmp	r5, #9
 8015b00:	f04f 0301 	mov.w	r3, #1
 8015b04:	6103      	str	r3, [r0, #16]
 8015b06:	dd16      	ble.n	8015b36 <__s2b+0x72>
 8015b08:	f104 0909 	add.w	r9, r4, #9
 8015b0c:	46c8      	mov	r8, r9
 8015b0e:	442c      	add	r4, r5
 8015b10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015b14:	4601      	mov	r1, r0
 8015b16:	3b30      	subs	r3, #48	@ 0x30
 8015b18:	220a      	movs	r2, #10
 8015b1a:	4630      	mov	r0, r6
 8015b1c:	f7ff ff8c 	bl	8015a38 <__multadd>
 8015b20:	45a0      	cmp	r8, r4
 8015b22:	d1f5      	bne.n	8015b10 <__s2b+0x4c>
 8015b24:	f1a5 0408 	sub.w	r4, r5, #8
 8015b28:	444c      	add	r4, r9
 8015b2a:	1b2d      	subs	r5, r5, r4
 8015b2c:	1963      	adds	r3, r4, r5
 8015b2e:	42bb      	cmp	r3, r7
 8015b30:	db04      	blt.n	8015b3c <__s2b+0x78>
 8015b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b36:	340a      	adds	r4, #10
 8015b38:	2509      	movs	r5, #9
 8015b3a:	e7f6      	b.n	8015b2a <__s2b+0x66>
 8015b3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015b40:	4601      	mov	r1, r0
 8015b42:	3b30      	subs	r3, #48	@ 0x30
 8015b44:	220a      	movs	r2, #10
 8015b46:	4630      	mov	r0, r6
 8015b48:	f7ff ff76 	bl	8015a38 <__multadd>
 8015b4c:	e7ee      	b.n	8015b2c <__s2b+0x68>
 8015b4e:	bf00      	nop
 8015b50:	0801aa7f 	.word	0x0801aa7f
 8015b54:	0801aa90 	.word	0x0801aa90

08015b58 <__hi0bits>:
 8015b58:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	bf36      	itet	cc
 8015b60:	0403      	lslcc	r3, r0, #16
 8015b62:	2000      	movcs	r0, #0
 8015b64:	2010      	movcc	r0, #16
 8015b66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015b6a:	bf3c      	itt	cc
 8015b6c:	021b      	lslcc	r3, r3, #8
 8015b6e:	3008      	addcc	r0, #8
 8015b70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015b74:	bf3c      	itt	cc
 8015b76:	011b      	lslcc	r3, r3, #4
 8015b78:	3004      	addcc	r0, #4
 8015b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b7e:	bf3c      	itt	cc
 8015b80:	009b      	lslcc	r3, r3, #2
 8015b82:	3002      	addcc	r0, #2
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	db05      	blt.n	8015b94 <__hi0bits+0x3c>
 8015b88:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8015b8c:	f100 0001 	add.w	r0, r0, #1
 8015b90:	bf08      	it	eq
 8015b92:	2020      	moveq	r0, #32
 8015b94:	4770      	bx	lr

08015b96 <__lo0bits>:
 8015b96:	6803      	ldr	r3, [r0, #0]
 8015b98:	4602      	mov	r2, r0
 8015b9a:	f013 0007 	ands.w	r0, r3, #7
 8015b9e:	d00b      	beq.n	8015bb8 <__lo0bits+0x22>
 8015ba0:	07d9      	lsls	r1, r3, #31
 8015ba2:	d421      	bmi.n	8015be8 <__lo0bits+0x52>
 8015ba4:	0798      	lsls	r0, r3, #30
 8015ba6:	bf49      	itett	mi
 8015ba8:	085b      	lsrmi	r3, r3, #1
 8015baa:	089b      	lsrpl	r3, r3, #2
 8015bac:	2001      	movmi	r0, #1
 8015bae:	6013      	strmi	r3, [r2, #0]
 8015bb0:	bf5c      	itt	pl
 8015bb2:	6013      	strpl	r3, [r2, #0]
 8015bb4:	2002      	movpl	r0, #2
 8015bb6:	4770      	bx	lr
 8015bb8:	b299      	uxth	r1, r3
 8015bba:	b909      	cbnz	r1, 8015bc0 <__lo0bits+0x2a>
 8015bbc:	0c1b      	lsrs	r3, r3, #16
 8015bbe:	2010      	movs	r0, #16
 8015bc0:	b2d9      	uxtb	r1, r3
 8015bc2:	b909      	cbnz	r1, 8015bc8 <__lo0bits+0x32>
 8015bc4:	3008      	adds	r0, #8
 8015bc6:	0a1b      	lsrs	r3, r3, #8
 8015bc8:	0719      	lsls	r1, r3, #28
 8015bca:	bf04      	itt	eq
 8015bcc:	091b      	lsreq	r3, r3, #4
 8015bce:	3004      	addeq	r0, #4
 8015bd0:	0799      	lsls	r1, r3, #30
 8015bd2:	bf04      	itt	eq
 8015bd4:	089b      	lsreq	r3, r3, #2
 8015bd6:	3002      	addeq	r0, #2
 8015bd8:	07d9      	lsls	r1, r3, #31
 8015bda:	d403      	bmi.n	8015be4 <__lo0bits+0x4e>
 8015bdc:	085b      	lsrs	r3, r3, #1
 8015bde:	f100 0001 	add.w	r0, r0, #1
 8015be2:	d003      	beq.n	8015bec <__lo0bits+0x56>
 8015be4:	6013      	str	r3, [r2, #0]
 8015be6:	4770      	bx	lr
 8015be8:	2000      	movs	r0, #0
 8015bea:	4770      	bx	lr
 8015bec:	2020      	movs	r0, #32
 8015bee:	4770      	bx	lr

08015bf0 <__i2b>:
 8015bf0:	b510      	push	{r4, lr}
 8015bf2:	460c      	mov	r4, r1
 8015bf4:	2101      	movs	r1, #1
 8015bf6:	f7ff febd 	bl	8015974 <_Balloc>
 8015bfa:	4602      	mov	r2, r0
 8015bfc:	b928      	cbnz	r0, 8015c0a <__i2b+0x1a>
 8015bfe:	4b05      	ldr	r3, [pc, #20]	@ (8015c14 <__i2b+0x24>)
 8015c00:	4805      	ldr	r0, [pc, #20]	@ (8015c18 <__i2b+0x28>)
 8015c02:	f240 1145 	movw	r1, #325	@ 0x145
 8015c06:	f001 ffb3 	bl	8017b70 <__assert_func>
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	6144      	str	r4, [r0, #20]
 8015c0e:	6103      	str	r3, [r0, #16]
 8015c10:	bd10      	pop	{r4, pc}
 8015c12:	bf00      	nop
 8015c14:	0801aa7f 	.word	0x0801aa7f
 8015c18:	0801aa90 	.word	0x0801aa90

08015c1c <__multiply>:
 8015c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c20:	4614      	mov	r4, r2
 8015c22:	690a      	ldr	r2, [r1, #16]
 8015c24:	6923      	ldr	r3, [r4, #16]
 8015c26:	429a      	cmp	r2, r3
 8015c28:	bfa8      	it	ge
 8015c2a:	4623      	movge	r3, r4
 8015c2c:	460f      	mov	r7, r1
 8015c2e:	bfa4      	itt	ge
 8015c30:	460c      	movge	r4, r1
 8015c32:	461f      	movge	r7, r3
 8015c34:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8015c38:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8015c3c:	68a3      	ldr	r3, [r4, #8]
 8015c3e:	6861      	ldr	r1, [r4, #4]
 8015c40:	eb0a 0609 	add.w	r6, sl, r9
 8015c44:	42b3      	cmp	r3, r6
 8015c46:	b085      	sub	sp, #20
 8015c48:	bfb8      	it	lt
 8015c4a:	3101      	addlt	r1, #1
 8015c4c:	f7ff fe92 	bl	8015974 <_Balloc>
 8015c50:	b930      	cbnz	r0, 8015c60 <__multiply+0x44>
 8015c52:	4602      	mov	r2, r0
 8015c54:	4b44      	ldr	r3, [pc, #272]	@ (8015d68 <__multiply+0x14c>)
 8015c56:	4845      	ldr	r0, [pc, #276]	@ (8015d6c <__multiply+0x150>)
 8015c58:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8015c5c:	f001 ff88 	bl	8017b70 <__assert_func>
 8015c60:	f100 0514 	add.w	r5, r0, #20
 8015c64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015c68:	462b      	mov	r3, r5
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	4543      	cmp	r3, r8
 8015c6e:	d321      	bcc.n	8015cb4 <__multiply+0x98>
 8015c70:	f107 0114 	add.w	r1, r7, #20
 8015c74:	f104 0214 	add.w	r2, r4, #20
 8015c78:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8015c7c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8015c80:	9302      	str	r3, [sp, #8]
 8015c82:	1b13      	subs	r3, r2, r4
 8015c84:	3b15      	subs	r3, #21
 8015c86:	f023 0303 	bic.w	r3, r3, #3
 8015c8a:	3304      	adds	r3, #4
 8015c8c:	f104 0715 	add.w	r7, r4, #21
 8015c90:	42ba      	cmp	r2, r7
 8015c92:	bf38      	it	cc
 8015c94:	2304      	movcc	r3, #4
 8015c96:	9301      	str	r3, [sp, #4]
 8015c98:	9b02      	ldr	r3, [sp, #8]
 8015c9a:	9103      	str	r1, [sp, #12]
 8015c9c:	428b      	cmp	r3, r1
 8015c9e:	d80c      	bhi.n	8015cba <__multiply+0x9e>
 8015ca0:	2e00      	cmp	r6, #0
 8015ca2:	dd03      	ble.n	8015cac <__multiply+0x90>
 8015ca4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d05b      	beq.n	8015d64 <__multiply+0x148>
 8015cac:	6106      	str	r6, [r0, #16]
 8015cae:	b005      	add	sp, #20
 8015cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cb4:	f843 2b04 	str.w	r2, [r3], #4
 8015cb8:	e7d8      	b.n	8015c6c <__multiply+0x50>
 8015cba:	f8b1 a000 	ldrh.w	sl, [r1]
 8015cbe:	f1ba 0f00 	cmp.w	sl, #0
 8015cc2:	d024      	beq.n	8015d0e <__multiply+0xf2>
 8015cc4:	f104 0e14 	add.w	lr, r4, #20
 8015cc8:	46a9      	mov	r9, r5
 8015cca:	f04f 0c00 	mov.w	ip, #0
 8015cce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015cd2:	f8d9 3000 	ldr.w	r3, [r9]
 8015cd6:	fa1f fb87 	uxth.w	fp, r7
 8015cda:	b29b      	uxth	r3, r3
 8015cdc:	fb0a 330b 	mla	r3, sl, fp, r3
 8015ce0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8015ce4:	f8d9 7000 	ldr.w	r7, [r9]
 8015ce8:	4463      	add	r3, ip
 8015cea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015cee:	fb0a c70b 	mla	r7, sl, fp, ip
 8015cf2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015cfc:	4572      	cmp	r2, lr
 8015cfe:	f849 3b04 	str.w	r3, [r9], #4
 8015d02:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8015d06:	d8e2      	bhi.n	8015cce <__multiply+0xb2>
 8015d08:	9b01      	ldr	r3, [sp, #4]
 8015d0a:	f845 c003 	str.w	ip, [r5, r3]
 8015d0e:	9b03      	ldr	r3, [sp, #12]
 8015d10:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8015d14:	3104      	adds	r1, #4
 8015d16:	f1b9 0f00 	cmp.w	r9, #0
 8015d1a:	d021      	beq.n	8015d60 <__multiply+0x144>
 8015d1c:	682b      	ldr	r3, [r5, #0]
 8015d1e:	f104 0c14 	add.w	ip, r4, #20
 8015d22:	46ae      	mov	lr, r5
 8015d24:	f04f 0a00 	mov.w	sl, #0
 8015d28:	f8bc b000 	ldrh.w	fp, [ip]
 8015d2c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8015d30:	fb09 770b 	mla	r7, r9, fp, r7
 8015d34:	4457      	add	r7, sl
 8015d36:	b29b      	uxth	r3, r3
 8015d38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8015d3c:	f84e 3b04 	str.w	r3, [lr], #4
 8015d40:	f85c 3b04 	ldr.w	r3, [ip], #4
 8015d44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d48:	f8be 3000 	ldrh.w	r3, [lr]
 8015d4c:	fb09 330a 	mla	r3, r9, sl, r3
 8015d50:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8015d54:	4562      	cmp	r2, ip
 8015d56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015d5a:	d8e5      	bhi.n	8015d28 <__multiply+0x10c>
 8015d5c:	9f01      	ldr	r7, [sp, #4]
 8015d5e:	51eb      	str	r3, [r5, r7]
 8015d60:	3504      	adds	r5, #4
 8015d62:	e799      	b.n	8015c98 <__multiply+0x7c>
 8015d64:	3e01      	subs	r6, #1
 8015d66:	e79b      	b.n	8015ca0 <__multiply+0x84>
 8015d68:	0801aa7f 	.word	0x0801aa7f
 8015d6c:	0801aa90 	.word	0x0801aa90

08015d70 <__pow5mult>:
 8015d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d74:	4615      	mov	r5, r2
 8015d76:	f012 0203 	ands.w	r2, r2, #3
 8015d7a:	4607      	mov	r7, r0
 8015d7c:	460e      	mov	r6, r1
 8015d7e:	d007      	beq.n	8015d90 <__pow5mult+0x20>
 8015d80:	4c25      	ldr	r4, [pc, #148]	@ (8015e18 <__pow5mult+0xa8>)
 8015d82:	3a01      	subs	r2, #1
 8015d84:	2300      	movs	r3, #0
 8015d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d8a:	f7ff fe55 	bl	8015a38 <__multadd>
 8015d8e:	4606      	mov	r6, r0
 8015d90:	10ad      	asrs	r5, r5, #2
 8015d92:	d03d      	beq.n	8015e10 <__pow5mult+0xa0>
 8015d94:	69fc      	ldr	r4, [r7, #28]
 8015d96:	b97c      	cbnz	r4, 8015db8 <__pow5mult+0x48>
 8015d98:	2010      	movs	r0, #16
 8015d9a:	f7ff fde3 	bl	8015964 <malloc>
 8015d9e:	4602      	mov	r2, r0
 8015da0:	61f8      	str	r0, [r7, #28]
 8015da2:	b928      	cbnz	r0, 8015db0 <__pow5mult+0x40>
 8015da4:	4b1d      	ldr	r3, [pc, #116]	@ (8015e1c <__pow5mult+0xac>)
 8015da6:	481e      	ldr	r0, [pc, #120]	@ (8015e20 <__pow5mult+0xb0>)
 8015da8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8015dac:	f001 fee0 	bl	8017b70 <__assert_func>
 8015db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015db4:	6004      	str	r4, [r0, #0]
 8015db6:	60c4      	str	r4, [r0, #12]
 8015db8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8015dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015dc0:	b94c      	cbnz	r4, 8015dd6 <__pow5mult+0x66>
 8015dc2:	f240 2171 	movw	r1, #625	@ 0x271
 8015dc6:	4638      	mov	r0, r7
 8015dc8:	f7ff ff12 	bl	8015bf0 <__i2b>
 8015dcc:	2300      	movs	r3, #0
 8015dce:	f8c8 0008 	str.w	r0, [r8, #8]
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	6003      	str	r3, [r0, #0]
 8015dd6:	f04f 0900 	mov.w	r9, #0
 8015dda:	07eb      	lsls	r3, r5, #31
 8015ddc:	d50a      	bpl.n	8015df4 <__pow5mult+0x84>
 8015dde:	4631      	mov	r1, r6
 8015de0:	4622      	mov	r2, r4
 8015de2:	4638      	mov	r0, r7
 8015de4:	f7ff ff1a 	bl	8015c1c <__multiply>
 8015de8:	4631      	mov	r1, r6
 8015dea:	4680      	mov	r8, r0
 8015dec:	4638      	mov	r0, r7
 8015dee:	f7ff fe01 	bl	80159f4 <_Bfree>
 8015df2:	4646      	mov	r6, r8
 8015df4:	106d      	asrs	r5, r5, #1
 8015df6:	d00b      	beq.n	8015e10 <__pow5mult+0xa0>
 8015df8:	6820      	ldr	r0, [r4, #0]
 8015dfa:	b938      	cbnz	r0, 8015e0c <__pow5mult+0x9c>
 8015dfc:	4622      	mov	r2, r4
 8015dfe:	4621      	mov	r1, r4
 8015e00:	4638      	mov	r0, r7
 8015e02:	f7ff ff0b 	bl	8015c1c <__multiply>
 8015e06:	6020      	str	r0, [r4, #0]
 8015e08:	f8c0 9000 	str.w	r9, [r0]
 8015e0c:	4604      	mov	r4, r0
 8015e0e:	e7e4      	b.n	8015dda <__pow5mult+0x6a>
 8015e10:	4630      	mov	r0, r6
 8015e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e16:	bf00      	nop
 8015e18:	0801aaec 	.word	0x0801aaec
 8015e1c:	0801aa10 	.word	0x0801aa10
 8015e20:	0801aa90 	.word	0x0801aa90

08015e24 <__lshift>:
 8015e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e28:	460c      	mov	r4, r1
 8015e2a:	6849      	ldr	r1, [r1, #4]
 8015e2c:	6923      	ldr	r3, [r4, #16]
 8015e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015e32:	68a3      	ldr	r3, [r4, #8]
 8015e34:	4607      	mov	r7, r0
 8015e36:	4691      	mov	r9, r2
 8015e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015e3c:	f108 0601 	add.w	r6, r8, #1
 8015e40:	42b3      	cmp	r3, r6
 8015e42:	db0b      	blt.n	8015e5c <__lshift+0x38>
 8015e44:	4638      	mov	r0, r7
 8015e46:	f7ff fd95 	bl	8015974 <_Balloc>
 8015e4a:	4605      	mov	r5, r0
 8015e4c:	b948      	cbnz	r0, 8015e62 <__lshift+0x3e>
 8015e4e:	4602      	mov	r2, r0
 8015e50:	4b28      	ldr	r3, [pc, #160]	@ (8015ef4 <__lshift+0xd0>)
 8015e52:	4829      	ldr	r0, [pc, #164]	@ (8015ef8 <__lshift+0xd4>)
 8015e54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8015e58:	f001 fe8a 	bl	8017b70 <__assert_func>
 8015e5c:	3101      	adds	r1, #1
 8015e5e:	005b      	lsls	r3, r3, #1
 8015e60:	e7ee      	b.n	8015e40 <__lshift+0x1c>
 8015e62:	2300      	movs	r3, #0
 8015e64:	f100 0114 	add.w	r1, r0, #20
 8015e68:	f100 0210 	add.w	r2, r0, #16
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	4553      	cmp	r3, sl
 8015e70:	db33      	blt.n	8015eda <__lshift+0xb6>
 8015e72:	6920      	ldr	r0, [r4, #16]
 8015e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e78:	f104 0314 	add.w	r3, r4, #20
 8015e7c:	f019 091f 	ands.w	r9, r9, #31
 8015e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e88:	d02b      	beq.n	8015ee2 <__lshift+0xbe>
 8015e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8015e8e:	468a      	mov	sl, r1
 8015e90:	2200      	movs	r2, #0
 8015e92:	6818      	ldr	r0, [r3, #0]
 8015e94:	fa00 f009 	lsl.w	r0, r0, r9
 8015e98:	4310      	orrs	r0, r2
 8015e9a:	f84a 0b04 	str.w	r0, [sl], #4
 8015e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ea2:	459c      	cmp	ip, r3
 8015ea4:	fa22 f20e 	lsr.w	r2, r2, lr
 8015ea8:	d8f3      	bhi.n	8015e92 <__lshift+0x6e>
 8015eaa:	ebac 0304 	sub.w	r3, ip, r4
 8015eae:	3b15      	subs	r3, #21
 8015eb0:	f023 0303 	bic.w	r3, r3, #3
 8015eb4:	3304      	adds	r3, #4
 8015eb6:	f104 0015 	add.w	r0, r4, #21
 8015eba:	4584      	cmp	ip, r0
 8015ebc:	bf38      	it	cc
 8015ebe:	2304      	movcc	r3, #4
 8015ec0:	50ca      	str	r2, [r1, r3]
 8015ec2:	b10a      	cbz	r2, 8015ec8 <__lshift+0xa4>
 8015ec4:	f108 0602 	add.w	r6, r8, #2
 8015ec8:	3e01      	subs	r6, #1
 8015eca:	4638      	mov	r0, r7
 8015ecc:	612e      	str	r6, [r5, #16]
 8015ece:	4621      	mov	r1, r4
 8015ed0:	f7ff fd90 	bl	80159f4 <_Bfree>
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015eda:	f842 0f04 	str.w	r0, [r2, #4]!
 8015ede:	3301      	adds	r3, #1
 8015ee0:	e7c5      	b.n	8015e6e <__lshift+0x4a>
 8015ee2:	3904      	subs	r1, #4
 8015ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ee8:	f841 2f04 	str.w	r2, [r1, #4]!
 8015eec:	459c      	cmp	ip, r3
 8015eee:	d8f9      	bhi.n	8015ee4 <__lshift+0xc0>
 8015ef0:	e7ea      	b.n	8015ec8 <__lshift+0xa4>
 8015ef2:	bf00      	nop
 8015ef4:	0801aa7f 	.word	0x0801aa7f
 8015ef8:	0801aa90 	.word	0x0801aa90

08015efc <__mcmp>:
 8015efc:	690a      	ldr	r2, [r1, #16]
 8015efe:	4603      	mov	r3, r0
 8015f00:	6900      	ldr	r0, [r0, #16]
 8015f02:	1a80      	subs	r0, r0, r2
 8015f04:	b530      	push	{r4, r5, lr}
 8015f06:	d10e      	bne.n	8015f26 <__mcmp+0x2a>
 8015f08:	3314      	adds	r3, #20
 8015f0a:	3114      	adds	r1, #20
 8015f0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8015f10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8015f14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015f18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015f1c:	4295      	cmp	r5, r2
 8015f1e:	d003      	beq.n	8015f28 <__mcmp+0x2c>
 8015f20:	d205      	bcs.n	8015f2e <__mcmp+0x32>
 8015f22:	f04f 30ff 	mov.w	r0, #4294967295
 8015f26:	bd30      	pop	{r4, r5, pc}
 8015f28:	42a3      	cmp	r3, r4
 8015f2a:	d3f3      	bcc.n	8015f14 <__mcmp+0x18>
 8015f2c:	e7fb      	b.n	8015f26 <__mcmp+0x2a>
 8015f2e:	2001      	movs	r0, #1
 8015f30:	e7f9      	b.n	8015f26 <__mcmp+0x2a>
	...

08015f34 <__mdiff>:
 8015f34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f38:	4689      	mov	r9, r1
 8015f3a:	4606      	mov	r6, r0
 8015f3c:	4611      	mov	r1, r2
 8015f3e:	4648      	mov	r0, r9
 8015f40:	4614      	mov	r4, r2
 8015f42:	f7ff ffdb 	bl	8015efc <__mcmp>
 8015f46:	1e05      	subs	r5, r0, #0
 8015f48:	d112      	bne.n	8015f70 <__mdiff+0x3c>
 8015f4a:	4629      	mov	r1, r5
 8015f4c:	4630      	mov	r0, r6
 8015f4e:	f7ff fd11 	bl	8015974 <_Balloc>
 8015f52:	4602      	mov	r2, r0
 8015f54:	b928      	cbnz	r0, 8015f62 <__mdiff+0x2e>
 8015f56:	4b3f      	ldr	r3, [pc, #252]	@ (8016054 <__mdiff+0x120>)
 8015f58:	f240 2137 	movw	r1, #567	@ 0x237
 8015f5c:	483e      	ldr	r0, [pc, #248]	@ (8016058 <__mdiff+0x124>)
 8015f5e:	f001 fe07 	bl	8017b70 <__assert_func>
 8015f62:	2301      	movs	r3, #1
 8015f64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015f68:	4610      	mov	r0, r2
 8015f6a:	b003      	add	sp, #12
 8015f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f70:	bfbc      	itt	lt
 8015f72:	464b      	movlt	r3, r9
 8015f74:	46a1      	movlt	r9, r4
 8015f76:	4630      	mov	r0, r6
 8015f78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015f7c:	bfba      	itte	lt
 8015f7e:	461c      	movlt	r4, r3
 8015f80:	2501      	movlt	r5, #1
 8015f82:	2500      	movge	r5, #0
 8015f84:	f7ff fcf6 	bl	8015974 <_Balloc>
 8015f88:	4602      	mov	r2, r0
 8015f8a:	b918      	cbnz	r0, 8015f94 <__mdiff+0x60>
 8015f8c:	4b31      	ldr	r3, [pc, #196]	@ (8016054 <__mdiff+0x120>)
 8015f8e:	f240 2145 	movw	r1, #581	@ 0x245
 8015f92:	e7e3      	b.n	8015f5c <__mdiff+0x28>
 8015f94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015f98:	6926      	ldr	r6, [r4, #16]
 8015f9a:	60c5      	str	r5, [r0, #12]
 8015f9c:	f109 0310 	add.w	r3, r9, #16
 8015fa0:	f109 0514 	add.w	r5, r9, #20
 8015fa4:	f104 0e14 	add.w	lr, r4, #20
 8015fa8:	f100 0b14 	add.w	fp, r0, #20
 8015fac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015fb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8015fb4:	9301      	str	r3, [sp, #4]
 8015fb6:	46d9      	mov	r9, fp
 8015fb8:	f04f 0c00 	mov.w	ip, #0
 8015fbc:	9b01      	ldr	r3, [sp, #4]
 8015fbe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8015fc2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8015fc6:	9301      	str	r3, [sp, #4]
 8015fc8:	fa1f f38a 	uxth.w	r3, sl
 8015fcc:	4619      	mov	r1, r3
 8015fce:	b283      	uxth	r3, r0
 8015fd0:	1acb      	subs	r3, r1, r3
 8015fd2:	0c00      	lsrs	r0, r0, #16
 8015fd4:	4463      	add	r3, ip
 8015fd6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8015fda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8015fde:	b29b      	uxth	r3, r3
 8015fe0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8015fe4:	4576      	cmp	r6, lr
 8015fe6:	f849 3b04 	str.w	r3, [r9], #4
 8015fea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015fee:	d8e5      	bhi.n	8015fbc <__mdiff+0x88>
 8015ff0:	1b33      	subs	r3, r6, r4
 8015ff2:	3b15      	subs	r3, #21
 8015ff4:	f023 0303 	bic.w	r3, r3, #3
 8015ff8:	3415      	adds	r4, #21
 8015ffa:	3304      	adds	r3, #4
 8015ffc:	42a6      	cmp	r6, r4
 8015ffe:	bf38      	it	cc
 8016000:	2304      	movcc	r3, #4
 8016002:	441d      	add	r5, r3
 8016004:	445b      	add	r3, fp
 8016006:	461e      	mov	r6, r3
 8016008:	462c      	mov	r4, r5
 801600a:	4544      	cmp	r4, r8
 801600c:	d30e      	bcc.n	801602c <__mdiff+0xf8>
 801600e:	f108 0103 	add.w	r1, r8, #3
 8016012:	1b49      	subs	r1, r1, r5
 8016014:	f021 0103 	bic.w	r1, r1, #3
 8016018:	3d03      	subs	r5, #3
 801601a:	45a8      	cmp	r8, r5
 801601c:	bf38      	it	cc
 801601e:	2100      	movcc	r1, #0
 8016020:	440b      	add	r3, r1
 8016022:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016026:	b191      	cbz	r1, 801604e <__mdiff+0x11a>
 8016028:	6117      	str	r7, [r2, #16]
 801602a:	e79d      	b.n	8015f68 <__mdiff+0x34>
 801602c:	f854 1b04 	ldr.w	r1, [r4], #4
 8016030:	46e6      	mov	lr, ip
 8016032:	0c08      	lsrs	r0, r1, #16
 8016034:	fa1c fc81 	uxtah	ip, ip, r1
 8016038:	4471      	add	r1, lr
 801603a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801603e:	b289      	uxth	r1, r1
 8016040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8016044:	f846 1b04 	str.w	r1, [r6], #4
 8016048:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801604c:	e7dd      	b.n	801600a <__mdiff+0xd6>
 801604e:	3f01      	subs	r7, #1
 8016050:	e7e7      	b.n	8016022 <__mdiff+0xee>
 8016052:	bf00      	nop
 8016054:	0801aa7f 	.word	0x0801aa7f
 8016058:	0801aa90 	.word	0x0801aa90

0801605c <__ulp>:
 801605c:	b082      	sub	sp, #8
 801605e:	ed8d 0b00 	vstr	d0, [sp]
 8016062:	9a01      	ldr	r2, [sp, #4]
 8016064:	4b0f      	ldr	r3, [pc, #60]	@ (80160a4 <__ulp+0x48>)
 8016066:	4013      	ands	r3, r2
 8016068:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801606c:	2b00      	cmp	r3, #0
 801606e:	dc08      	bgt.n	8016082 <__ulp+0x26>
 8016070:	425b      	negs	r3, r3
 8016072:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8016076:	ea4f 5223 	mov.w	r2, r3, asr #20
 801607a:	da04      	bge.n	8016086 <__ulp+0x2a>
 801607c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016080:	4113      	asrs	r3, r2
 8016082:	2200      	movs	r2, #0
 8016084:	e008      	b.n	8016098 <__ulp+0x3c>
 8016086:	f1a2 0314 	sub.w	r3, r2, #20
 801608a:	2b1e      	cmp	r3, #30
 801608c:	bfda      	itte	le
 801608e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8016092:	40da      	lsrle	r2, r3
 8016094:	2201      	movgt	r2, #1
 8016096:	2300      	movs	r3, #0
 8016098:	4619      	mov	r1, r3
 801609a:	4610      	mov	r0, r2
 801609c:	ec41 0b10 	vmov	d0, r0, r1
 80160a0:	b002      	add	sp, #8
 80160a2:	4770      	bx	lr
 80160a4:	7ff00000 	.word	0x7ff00000

080160a8 <__b2d>:
 80160a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160ac:	6906      	ldr	r6, [r0, #16]
 80160ae:	f100 0814 	add.w	r8, r0, #20
 80160b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80160b6:	1f37      	subs	r7, r6, #4
 80160b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80160bc:	4610      	mov	r0, r2
 80160be:	f7ff fd4b 	bl	8015b58 <__hi0bits>
 80160c2:	f1c0 0320 	rsb	r3, r0, #32
 80160c6:	280a      	cmp	r0, #10
 80160c8:	600b      	str	r3, [r1, #0]
 80160ca:	491b      	ldr	r1, [pc, #108]	@ (8016138 <__b2d+0x90>)
 80160cc:	dc15      	bgt.n	80160fa <__b2d+0x52>
 80160ce:	f1c0 0c0b 	rsb	ip, r0, #11
 80160d2:	fa22 f30c 	lsr.w	r3, r2, ip
 80160d6:	45b8      	cmp	r8, r7
 80160d8:	ea43 0501 	orr.w	r5, r3, r1
 80160dc:	bf34      	ite	cc
 80160de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80160e2:	2300      	movcs	r3, #0
 80160e4:	3015      	adds	r0, #21
 80160e6:	fa02 f000 	lsl.w	r0, r2, r0
 80160ea:	fa23 f30c 	lsr.w	r3, r3, ip
 80160ee:	4303      	orrs	r3, r0
 80160f0:	461c      	mov	r4, r3
 80160f2:	ec45 4b10 	vmov	d0, r4, r5
 80160f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fa:	45b8      	cmp	r8, r7
 80160fc:	bf3a      	itte	cc
 80160fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8016102:	f1a6 0708 	subcc.w	r7, r6, #8
 8016106:	2300      	movcs	r3, #0
 8016108:	380b      	subs	r0, #11
 801610a:	d012      	beq.n	8016132 <__b2d+0x8a>
 801610c:	f1c0 0120 	rsb	r1, r0, #32
 8016110:	fa23 f401 	lsr.w	r4, r3, r1
 8016114:	4082      	lsls	r2, r0
 8016116:	4322      	orrs	r2, r4
 8016118:	4547      	cmp	r7, r8
 801611a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801611e:	bf8c      	ite	hi
 8016120:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016124:	2200      	movls	r2, #0
 8016126:	4083      	lsls	r3, r0
 8016128:	40ca      	lsrs	r2, r1
 801612a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801612e:	4313      	orrs	r3, r2
 8016130:	e7de      	b.n	80160f0 <__b2d+0x48>
 8016132:	ea42 0501 	orr.w	r5, r2, r1
 8016136:	e7db      	b.n	80160f0 <__b2d+0x48>
 8016138:	3ff00000 	.word	0x3ff00000

0801613c <__d2b>:
 801613c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016140:	460f      	mov	r7, r1
 8016142:	2101      	movs	r1, #1
 8016144:	ec59 8b10 	vmov	r8, r9, d0
 8016148:	4616      	mov	r6, r2
 801614a:	f7ff fc13 	bl	8015974 <_Balloc>
 801614e:	4604      	mov	r4, r0
 8016150:	b930      	cbnz	r0, 8016160 <__d2b+0x24>
 8016152:	4602      	mov	r2, r0
 8016154:	4b23      	ldr	r3, [pc, #140]	@ (80161e4 <__d2b+0xa8>)
 8016156:	4824      	ldr	r0, [pc, #144]	@ (80161e8 <__d2b+0xac>)
 8016158:	f240 310f 	movw	r1, #783	@ 0x30f
 801615c:	f001 fd08 	bl	8017b70 <__assert_func>
 8016160:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016164:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016168:	b10d      	cbz	r5, 801616e <__d2b+0x32>
 801616a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801616e:	9301      	str	r3, [sp, #4]
 8016170:	f1b8 0300 	subs.w	r3, r8, #0
 8016174:	d023      	beq.n	80161be <__d2b+0x82>
 8016176:	4668      	mov	r0, sp
 8016178:	9300      	str	r3, [sp, #0]
 801617a:	f7ff fd0c 	bl	8015b96 <__lo0bits>
 801617e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8016182:	b1d0      	cbz	r0, 80161ba <__d2b+0x7e>
 8016184:	f1c0 0320 	rsb	r3, r0, #32
 8016188:	fa02 f303 	lsl.w	r3, r2, r3
 801618c:	430b      	orrs	r3, r1
 801618e:	40c2      	lsrs	r2, r0
 8016190:	6163      	str	r3, [r4, #20]
 8016192:	9201      	str	r2, [sp, #4]
 8016194:	9b01      	ldr	r3, [sp, #4]
 8016196:	61a3      	str	r3, [r4, #24]
 8016198:	2b00      	cmp	r3, #0
 801619a:	bf0c      	ite	eq
 801619c:	2201      	moveq	r2, #1
 801619e:	2202      	movne	r2, #2
 80161a0:	6122      	str	r2, [r4, #16]
 80161a2:	b1a5      	cbz	r5, 80161ce <__d2b+0x92>
 80161a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80161a8:	4405      	add	r5, r0
 80161aa:	603d      	str	r5, [r7, #0]
 80161ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80161b0:	6030      	str	r0, [r6, #0]
 80161b2:	4620      	mov	r0, r4
 80161b4:	b003      	add	sp, #12
 80161b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161ba:	6161      	str	r1, [r4, #20]
 80161bc:	e7ea      	b.n	8016194 <__d2b+0x58>
 80161be:	a801      	add	r0, sp, #4
 80161c0:	f7ff fce9 	bl	8015b96 <__lo0bits>
 80161c4:	9b01      	ldr	r3, [sp, #4]
 80161c6:	6163      	str	r3, [r4, #20]
 80161c8:	3020      	adds	r0, #32
 80161ca:	2201      	movs	r2, #1
 80161cc:	e7e8      	b.n	80161a0 <__d2b+0x64>
 80161ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80161d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80161d6:	6038      	str	r0, [r7, #0]
 80161d8:	6918      	ldr	r0, [r3, #16]
 80161da:	f7ff fcbd 	bl	8015b58 <__hi0bits>
 80161de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80161e2:	e7e5      	b.n	80161b0 <__d2b+0x74>
 80161e4:	0801aa7f 	.word	0x0801aa7f
 80161e8:	0801aa90 	.word	0x0801aa90

080161ec <__ratio>:
 80161ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f0:	b085      	sub	sp, #20
 80161f2:	e9cd 1000 	strd	r1, r0, [sp]
 80161f6:	a902      	add	r1, sp, #8
 80161f8:	f7ff ff56 	bl	80160a8 <__b2d>
 80161fc:	9800      	ldr	r0, [sp, #0]
 80161fe:	a903      	add	r1, sp, #12
 8016200:	ec55 4b10 	vmov	r4, r5, d0
 8016204:	f7ff ff50 	bl	80160a8 <__b2d>
 8016208:	9b01      	ldr	r3, [sp, #4]
 801620a:	6919      	ldr	r1, [r3, #16]
 801620c:	9b00      	ldr	r3, [sp, #0]
 801620e:	691b      	ldr	r3, [r3, #16]
 8016210:	1ac9      	subs	r1, r1, r3
 8016212:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8016216:	1a9b      	subs	r3, r3, r2
 8016218:	ec5b ab10 	vmov	sl, fp, d0
 801621c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8016220:	2b00      	cmp	r3, #0
 8016222:	bfce      	itee	gt
 8016224:	462a      	movgt	r2, r5
 8016226:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801622a:	465a      	movle	r2, fp
 801622c:	462f      	mov	r7, r5
 801622e:	46d9      	mov	r9, fp
 8016230:	bfcc      	ite	gt
 8016232:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016236:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801623a:	464b      	mov	r3, r9
 801623c:	4652      	mov	r2, sl
 801623e:	4620      	mov	r0, r4
 8016240:	4639      	mov	r1, r7
 8016242:	f7ea fb23 	bl	800088c <__aeabi_ddiv>
 8016246:	ec41 0b10 	vmov	d0, r0, r1
 801624a:	b005      	add	sp, #20
 801624c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016250 <__copybits>:
 8016250:	3901      	subs	r1, #1
 8016252:	b570      	push	{r4, r5, r6, lr}
 8016254:	1149      	asrs	r1, r1, #5
 8016256:	6914      	ldr	r4, [r2, #16]
 8016258:	3101      	adds	r1, #1
 801625a:	f102 0314 	add.w	r3, r2, #20
 801625e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016262:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016266:	1f05      	subs	r5, r0, #4
 8016268:	42a3      	cmp	r3, r4
 801626a:	d30c      	bcc.n	8016286 <__copybits+0x36>
 801626c:	1aa3      	subs	r3, r4, r2
 801626e:	3b11      	subs	r3, #17
 8016270:	f023 0303 	bic.w	r3, r3, #3
 8016274:	3211      	adds	r2, #17
 8016276:	42a2      	cmp	r2, r4
 8016278:	bf88      	it	hi
 801627a:	2300      	movhi	r3, #0
 801627c:	4418      	add	r0, r3
 801627e:	2300      	movs	r3, #0
 8016280:	4288      	cmp	r0, r1
 8016282:	d305      	bcc.n	8016290 <__copybits+0x40>
 8016284:	bd70      	pop	{r4, r5, r6, pc}
 8016286:	f853 6b04 	ldr.w	r6, [r3], #4
 801628a:	f845 6f04 	str.w	r6, [r5, #4]!
 801628e:	e7eb      	b.n	8016268 <__copybits+0x18>
 8016290:	f840 3b04 	str.w	r3, [r0], #4
 8016294:	e7f4      	b.n	8016280 <__copybits+0x30>

08016296 <__any_on>:
 8016296:	f100 0214 	add.w	r2, r0, #20
 801629a:	6900      	ldr	r0, [r0, #16]
 801629c:	114b      	asrs	r3, r1, #5
 801629e:	4298      	cmp	r0, r3
 80162a0:	b510      	push	{r4, lr}
 80162a2:	db11      	blt.n	80162c8 <__any_on+0x32>
 80162a4:	dd0a      	ble.n	80162bc <__any_on+0x26>
 80162a6:	f011 011f 	ands.w	r1, r1, #31
 80162aa:	d007      	beq.n	80162bc <__any_on+0x26>
 80162ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80162b0:	fa24 f001 	lsr.w	r0, r4, r1
 80162b4:	fa00 f101 	lsl.w	r1, r0, r1
 80162b8:	428c      	cmp	r4, r1
 80162ba:	d10b      	bne.n	80162d4 <__any_on+0x3e>
 80162bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80162c0:	4293      	cmp	r3, r2
 80162c2:	d803      	bhi.n	80162cc <__any_on+0x36>
 80162c4:	2000      	movs	r0, #0
 80162c6:	bd10      	pop	{r4, pc}
 80162c8:	4603      	mov	r3, r0
 80162ca:	e7f7      	b.n	80162bc <__any_on+0x26>
 80162cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80162d0:	2900      	cmp	r1, #0
 80162d2:	d0f5      	beq.n	80162c0 <__any_on+0x2a>
 80162d4:	2001      	movs	r0, #1
 80162d6:	e7f6      	b.n	80162c6 <__any_on+0x30>

080162d8 <sulp>:
 80162d8:	b570      	push	{r4, r5, r6, lr}
 80162da:	4604      	mov	r4, r0
 80162dc:	460d      	mov	r5, r1
 80162de:	ec45 4b10 	vmov	d0, r4, r5
 80162e2:	4616      	mov	r6, r2
 80162e4:	f7ff feba 	bl	801605c <__ulp>
 80162e8:	ec51 0b10 	vmov	r0, r1, d0
 80162ec:	b17e      	cbz	r6, 801630e <sulp+0x36>
 80162ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80162f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	dd09      	ble.n	801630e <sulp+0x36>
 80162fa:	051b      	lsls	r3, r3, #20
 80162fc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8016300:	2400      	movs	r4, #0
 8016302:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8016306:	4622      	mov	r2, r4
 8016308:	462b      	mov	r3, r5
 801630a:	f7ea f995 	bl	8000638 <__aeabi_dmul>
 801630e:	ec41 0b10 	vmov	d0, r0, r1
 8016312:	bd70      	pop	{r4, r5, r6, pc}
 8016314:	0000      	movs	r0, r0
	...

08016318 <_strtod_l>:
 8016318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801631c:	b09f      	sub	sp, #124	@ 0x7c
 801631e:	460c      	mov	r4, r1
 8016320:	9217      	str	r2, [sp, #92]	@ 0x5c
 8016322:	2200      	movs	r2, #0
 8016324:	921a      	str	r2, [sp, #104]	@ 0x68
 8016326:	9005      	str	r0, [sp, #20]
 8016328:	f04f 0a00 	mov.w	sl, #0
 801632c:	f04f 0b00 	mov.w	fp, #0
 8016330:	460a      	mov	r2, r1
 8016332:	9219      	str	r2, [sp, #100]	@ 0x64
 8016334:	7811      	ldrb	r1, [r2, #0]
 8016336:	292b      	cmp	r1, #43	@ 0x2b
 8016338:	d04a      	beq.n	80163d0 <_strtod_l+0xb8>
 801633a:	d838      	bhi.n	80163ae <_strtod_l+0x96>
 801633c:	290d      	cmp	r1, #13
 801633e:	d832      	bhi.n	80163a6 <_strtod_l+0x8e>
 8016340:	2908      	cmp	r1, #8
 8016342:	d832      	bhi.n	80163aa <_strtod_l+0x92>
 8016344:	2900      	cmp	r1, #0
 8016346:	d03b      	beq.n	80163c0 <_strtod_l+0xa8>
 8016348:	2200      	movs	r2, #0
 801634a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801634c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801634e:	782a      	ldrb	r2, [r5, #0]
 8016350:	2a30      	cmp	r2, #48	@ 0x30
 8016352:	f040 80b3 	bne.w	80164bc <_strtod_l+0x1a4>
 8016356:	786a      	ldrb	r2, [r5, #1]
 8016358:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801635c:	2a58      	cmp	r2, #88	@ 0x58
 801635e:	d16e      	bne.n	801643e <_strtod_l+0x126>
 8016360:	9302      	str	r3, [sp, #8]
 8016362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016364:	9301      	str	r3, [sp, #4]
 8016366:	ab1a      	add	r3, sp, #104	@ 0x68
 8016368:	9300      	str	r3, [sp, #0]
 801636a:	4a8e      	ldr	r2, [pc, #568]	@ (80165a4 <_strtod_l+0x28c>)
 801636c:	9805      	ldr	r0, [sp, #20]
 801636e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8016370:	a919      	add	r1, sp, #100	@ 0x64
 8016372:	f001 fc83 	bl	8017c7c <__gethex>
 8016376:	f010 060f 	ands.w	r6, r0, #15
 801637a:	4604      	mov	r4, r0
 801637c:	d005      	beq.n	801638a <_strtod_l+0x72>
 801637e:	2e06      	cmp	r6, #6
 8016380:	d128      	bne.n	80163d4 <_strtod_l+0xbc>
 8016382:	3501      	adds	r5, #1
 8016384:	2300      	movs	r3, #0
 8016386:	9519      	str	r5, [sp, #100]	@ 0x64
 8016388:	930b      	str	r3, [sp, #44]	@ 0x2c
 801638a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801638c:	2b00      	cmp	r3, #0
 801638e:	f040 858e 	bne.w	8016eae <_strtod_l+0xb96>
 8016392:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016394:	b1cb      	cbz	r3, 80163ca <_strtod_l+0xb2>
 8016396:	4652      	mov	r2, sl
 8016398:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801639c:	ec43 2b10 	vmov	d0, r2, r3
 80163a0:	b01f      	add	sp, #124	@ 0x7c
 80163a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163a6:	2920      	cmp	r1, #32
 80163a8:	d1ce      	bne.n	8016348 <_strtod_l+0x30>
 80163aa:	3201      	adds	r2, #1
 80163ac:	e7c1      	b.n	8016332 <_strtod_l+0x1a>
 80163ae:	292d      	cmp	r1, #45	@ 0x2d
 80163b0:	d1ca      	bne.n	8016348 <_strtod_l+0x30>
 80163b2:	2101      	movs	r1, #1
 80163b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80163b6:	1c51      	adds	r1, r2, #1
 80163b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80163ba:	7852      	ldrb	r2, [r2, #1]
 80163bc:	2a00      	cmp	r2, #0
 80163be:	d1c5      	bne.n	801634c <_strtod_l+0x34>
 80163c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80163c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	f040 8570 	bne.w	8016eaa <_strtod_l+0xb92>
 80163ca:	4652      	mov	r2, sl
 80163cc:	465b      	mov	r3, fp
 80163ce:	e7e5      	b.n	801639c <_strtod_l+0x84>
 80163d0:	2100      	movs	r1, #0
 80163d2:	e7ef      	b.n	80163b4 <_strtod_l+0x9c>
 80163d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80163d6:	b13a      	cbz	r2, 80163e8 <_strtod_l+0xd0>
 80163d8:	2135      	movs	r1, #53	@ 0x35
 80163da:	a81c      	add	r0, sp, #112	@ 0x70
 80163dc:	f7ff ff38 	bl	8016250 <__copybits>
 80163e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80163e2:	9805      	ldr	r0, [sp, #20]
 80163e4:	f7ff fb06 	bl	80159f4 <_Bfree>
 80163e8:	3e01      	subs	r6, #1
 80163ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80163ec:	2e04      	cmp	r6, #4
 80163ee:	d806      	bhi.n	80163fe <_strtod_l+0xe6>
 80163f0:	e8df f006 	tbb	[pc, r6]
 80163f4:	201d0314 	.word	0x201d0314
 80163f8:	14          	.byte	0x14
 80163f9:	00          	.byte	0x00
 80163fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80163fe:	05e1      	lsls	r1, r4, #23
 8016400:	bf48      	it	mi
 8016402:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8016406:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801640a:	0d1b      	lsrs	r3, r3, #20
 801640c:	051b      	lsls	r3, r3, #20
 801640e:	2b00      	cmp	r3, #0
 8016410:	d1bb      	bne.n	801638a <_strtod_l+0x72>
 8016412:	f7fe fbcd 	bl	8014bb0 <__errno>
 8016416:	2322      	movs	r3, #34	@ 0x22
 8016418:	6003      	str	r3, [r0, #0]
 801641a:	e7b6      	b.n	801638a <_strtod_l+0x72>
 801641c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8016420:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016424:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8016428:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801642c:	e7e7      	b.n	80163fe <_strtod_l+0xe6>
 801642e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80165ac <_strtod_l+0x294>
 8016432:	e7e4      	b.n	80163fe <_strtod_l+0xe6>
 8016434:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8016438:	f04f 3aff 	mov.w	sl, #4294967295
 801643c:	e7df      	b.n	80163fe <_strtod_l+0xe6>
 801643e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016440:	1c5a      	adds	r2, r3, #1
 8016442:	9219      	str	r2, [sp, #100]	@ 0x64
 8016444:	785b      	ldrb	r3, [r3, #1]
 8016446:	2b30      	cmp	r3, #48	@ 0x30
 8016448:	d0f9      	beq.n	801643e <_strtod_l+0x126>
 801644a:	2b00      	cmp	r3, #0
 801644c:	d09d      	beq.n	801638a <_strtod_l+0x72>
 801644e:	2301      	movs	r3, #1
 8016450:	9309      	str	r3, [sp, #36]	@ 0x24
 8016452:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016454:	930c      	str	r3, [sp, #48]	@ 0x30
 8016456:	2300      	movs	r3, #0
 8016458:	9308      	str	r3, [sp, #32]
 801645a:	930a      	str	r3, [sp, #40]	@ 0x28
 801645c:	461f      	mov	r7, r3
 801645e:	220a      	movs	r2, #10
 8016460:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8016462:	7805      	ldrb	r5, [r0, #0]
 8016464:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8016468:	b2d9      	uxtb	r1, r3
 801646a:	2909      	cmp	r1, #9
 801646c:	d928      	bls.n	80164c0 <_strtod_l+0x1a8>
 801646e:	494e      	ldr	r1, [pc, #312]	@ (80165a8 <_strtod_l+0x290>)
 8016470:	2201      	movs	r2, #1
 8016472:	f001 fb62 	bl	8017b3a <strncmp>
 8016476:	2800      	cmp	r0, #0
 8016478:	d032      	beq.n	80164e0 <_strtod_l+0x1c8>
 801647a:	2000      	movs	r0, #0
 801647c:	462a      	mov	r2, r5
 801647e:	4681      	mov	r9, r0
 8016480:	463d      	mov	r5, r7
 8016482:	4603      	mov	r3, r0
 8016484:	2a65      	cmp	r2, #101	@ 0x65
 8016486:	d001      	beq.n	801648c <_strtod_l+0x174>
 8016488:	2a45      	cmp	r2, #69	@ 0x45
 801648a:	d114      	bne.n	80164b6 <_strtod_l+0x19e>
 801648c:	b91d      	cbnz	r5, 8016496 <_strtod_l+0x17e>
 801648e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016490:	4302      	orrs	r2, r0
 8016492:	d095      	beq.n	80163c0 <_strtod_l+0xa8>
 8016494:	2500      	movs	r5, #0
 8016496:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8016498:	1c62      	adds	r2, r4, #1
 801649a:	9219      	str	r2, [sp, #100]	@ 0x64
 801649c:	7862      	ldrb	r2, [r4, #1]
 801649e:	2a2b      	cmp	r2, #43	@ 0x2b
 80164a0:	d077      	beq.n	8016592 <_strtod_l+0x27a>
 80164a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80164a4:	d07b      	beq.n	801659e <_strtod_l+0x286>
 80164a6:	f04f 0c00 	mov.w	ip, #0
 80164aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80164ae:	2909      	cmp	r1, #9
 80164b0:	f240 8082 	bls.w	80165b8 <_strtod_l+0x2a0>
 80164b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80164b6:	f04f 0800 	mov.w	r8, #0
 80164ba:	e0a2      	b.n	8016602 <_strtod_l+0x2ea>
 80164bc:	2300      	movs	r3, #0
 80164be:	e7c7      	b.n	8016450 <_strtod_l+0x138>
 80164c0:	2f08      	cmp	r7, #8
 80164c2:	bfd5      	itete	le
 80164c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80164c6:	9908      	ldrgt	r1, [sp, #32]
 80164c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80164cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80164d0:	f100 0001 	add.w	r0, r0, #1
 80164d4:	bfd4      	ite	le
 80164d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80164d8:	9308      	strgt	r3, [sp, #32]
 80164da:	3701      	adds	r7, #1
 80164dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80164de:	e7bf      	b.n	8016460 <_strtod_l+0x148>
 80164e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164e2:	1c5a      	adds	r2, r3, #1
 80164e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80164e6:	785a      	ldrb	r2, [r3, #1]
 80164e8:	b37f      	cbz	r7, 801654a <_strtod_l+0x232>
 80164ea:	4681      	mov	r9, r0
 80164ec:	463d      	mov	r5, r7
 80164ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80164f2:	2b09      	cmp	r3, #9
 80164f4:	d912      	bls.n	801651c <_strtod_l+0x204>
 80164f6:	2301      	movs	r3, #1
 80164f8:	e7c4      	b.n	8016484 <_strtod_l+0x16c>
 80164fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80164fc:	1c5a      	adds	r2, r3, #1
 80164fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8016500:	785a      	ldrb	r2, [r3, #1]
 8016502:	3001      	adds	r0, #1
 8016504:	2a30      	cmp	r2, #48	@ 0x30
 8016506:	d0f8      	beq.n	80164fa <_strtod_l+0x1e2>
 8016508:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801650c:	2b08      	cmp	r3, #8
 801650e:	f200 84d3 	bhi.w	8016eb8 <_strtod_l+0xba0>
 8016512:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016514:	930c      	str	r3, [sp, #48]	@ 0x30
 8016516:	4681      	mov	r9, r0
 8016518:	2000      	movs	r0, #0
 801651a:	4605      	mov	r5, r0
 801651c:	3a30      	subs	r2, #48	@ 0x30
 801651e:	f100 0301 	add.w	r3, r0, #1
 8016522:	d02a      	beq.n	801657a <_strtod_l+0x262>
 8016524:	4499      	add	r9, r3
 8016526:	eb00 0c05 	add.w	ip, r0, r5
 801652a:	462b      	mov	r3, r5
 801652c:	210a      	movs	r1, #10
 801652e:	4563      	cmp	r3, ip
 8016530:	d10d      	bne.n	801654e <_strtod_l+0x236>
 8016532:	1c69      	adds	r1, r5, #1
 8016534:	4401      	add	r1, r0
 8016536:	4428      	add	r0, r5
 8016538:	2808      	cmp	r0, #8
 801653a:	dc16      	bgt.n	801656a <_strtod_l+0x252>
 801653c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801653e:	230a      	movs	r3, #10
 8016540:	fb03 2300 	mla	r3, r3, r0, r2
 8016544:	930a      	str	r3, [sp, #40]	@ 0x28
 8016546:	2300      	movs	r3, #0
 8016548:	e018      	b.n	801657c <_strtod_l+0x264>
 801654a:	4638      	mov	r0, r7
 801654c:	e7da      	b.n	8016504 <_strtod_l+0x1ec>
 801654e:	2b08      	cmp	r3, #8
 8016550:	f103 0301 	add.w	r3, r3, #1
 8016554:	dc03      	bgt.n	801655e <_strtod_l+0x246>
 8016556:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8016558:	434e      	muls	r6, r1
 801655a:	960a      	str	r6, [sp, #40]	@ 0x28
 801655c:	e7e7      	b.n	801652e <_strtod_l+0x216>
 801655e:	2b10      	cmp	r3, #16
 8016560:	bfde      	ittt	le
 8016562:	9e08      	ldrle	r6, [sp, #32]
 8016564:	434e      	mulle	r6, r1
 8016566:	9608      	strle	r6, [sp, #32]
 8016568:	e7e1      	b.n	801652e <_strtod_l+0x216>
 801656a:	280f      	cmp	r0, #15
 801656c:	dceb      	bgt.n	8016546 <_strtod_l+0x22e>
 801656e:	9808      	ldr	r0, [sp, #32]
 8016570:	230a      	movs	r3, #10
 8016572:	fb03 2300 	mla	r3, r3, r0, r2
 8016576:	9308      	str	r3, [sp, #32]
 8016578:	e7e5      	b.n	8016546 <_strtod_l+0x22e>
 801657a:	4629      	mov	r1, r5
 801657c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801657e:	1c50      	adds	r0, r2, #1
 8016580:	9019      	str	r0, [sp, #100]	@ 0x64
 8016582:	7852      	ldrb	r2, [r2, #1]
 8016584:	4618      	mov	r0, r3
 8016586:	460d      	mov	r5, r1
 8016588:	e7b1      	b.n	80164ee <_strtod_l+0x1d6>
 801658a:	f04f 0900 	mov.w	r9, #0
 801658e:	2301      	movs	r3, #1
 8016590:	e77d      	b.n	801648e <_strtod_l+0x176>
 8016592:	f04f 0c00 	mov.w	ip, #0
 8016596:	1ca2      	adds	r2, r4, #2
 8016598:	9219      	str	r2, [sp, #100]	@ 0x64
 801659a:	78a2      	ldrb	r2, [r4, #2]
 801659c:	e785      	b.n	80164aa <_strtod_l+0x192>
 801659e:	f04f 0c01 	mov.w	ip, #1
 80165a2:	e7f8      	b.n	8016596 <_strtod_l+0x27e>
 80165a4:	0801ac00 	.word	0x0801ac00
 80165a8:	0801abe8 	.word	0x0801abe8
 80165ac:	7ff00000 	.word	0x7ff00000
 80165b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80165b2:	1c51      	adds	r1, r2, #1
 80165b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80165b6:	7852      	ldrb	r2, [r2, #1]
 80165b8:	2a30      	cmp	r2, #48	@ 0x30
 80165ba:	d0f9      	beq.n	80165b0 <_strtod_l+0x298>
 80165bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80165c0:	2908      	cmp	r1, #8
 80165c2:	f63f af78 	bhi.w	80164b6 <_strtod_l+0x19e>
 80165c6:	3a30      	subs	r2, #48	@ 0x30
 80165c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80165ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80165cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80165ce:	f04f 080a 	mov.w	r8, #10
 80165d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80165d4:	1c56      	adds	r6, r2, #1
 80165d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80165d8:	7852      	ldrb	r2, [r2, #1]
 80165da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80165de:	f1be 0f09 	cmp.w	lr, #9
 80165e2:	d939      	bls.n	8016658 <_strtod_l+0x340>
 80165e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80165e6:	1a76      	subs	r6, r6, r1
 80165e8:	2e08      	cmp	r6, #8
 80165ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80165ee:	dc03      	bgt.n	80165f8 <_strtod_l+0x2e0>
 80165f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80165f2:	4588      	cmp	r8, r1
 80165f4:	bfa8      	it	ge
 80165f6:	4688      	movge	r8, r1
 80165f8:	f1bc 0f00 	cmp.w	ip, #0
 80165fc:	d001      	beq.n	8016602 <_strtod_l+0x2ea>
 80165fe:	f1c8 0800 	rsb	r8, r8, #0
 8016602:	2d00      	cmp	r5, #0
 8016604:	d14e      	bne.n	80166a4 <_strtod_l+0x38c>
 8016606:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016608:	4308      	orrs	r0, r1
 801660a:	f47f aebe 	bne.w	801638a <_strtod_l+0x72>
 801660e:	2b00      	cmp	r3, #0
 8016610:	f47f aed6 	bne.w	80163c0 <_strtod_l+0xa8>
 8016614:	2a69      	cmp	r2, #105	@ 0x69
 8016616:	d028      	beq.n	801666a <_strtod_l+0x352>
 8016618:	dc25      	bgt.n	8016666 <_strtod_l+0x34e>
 801661a:	2a49      	cmp	r2, #73	@ 0x49
 801661c:	d025      	beq.n	801666a <_strtod_l+0x352>
 801661e:	2a4e      	cmp	r2, #78	@ 0x4e
 8016620:	f47f aece 	bne.w	80163c0 <_strtod_l+0xa8>
 8016624:	499b      	ldr	r1, [pc, #620]	@ (8016894 <_strtod_l+0x57c>)
 8016626:	a819      	add	r0, sp, #100	@ 0x64
 8016628:	f001 fd4a 	bl	80180c0 <__match>
 801662c:	2800      	cmp	r0, #0
 801662e:	f43f aec7 	beq.w	80163c0 <_strtod_l+0xa8>
 8016632:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016634:	781b      	ldrb	r3, [r3, #0]
 8016636:	2b28      	cmp	r3, #40	@ 0x28
 8016638:	d12e      	bne.n	8016698 <_strtod_l+0x380>
 801663a:	4997      	ldr	r1, [pc, #604]	@ (8016898 <_strtod_l+0x580>)
 801663c:	aa1c      	add	r2, sp, #112	@ 0x70
 801663e:	a819      	add	r0, sp, #100	@ 0x64
 8016640:	f001 fd52 	bl	80180e8 <__hexnan>
 8016644:	2805      	cmp	r0, #5
 8016646:	d127      	bne.n	8016698 <_strtod_l+0x380>
 8016648:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801664a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801664e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8016652:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8016656:	e698      	b.n	801638a <_strtod_l+0x72>
 8016658:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801665a:	fb08 2101 	mla	r1, r8, r1, r2
 801665e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8016662:	920e      	str	r2, [sp, #56]	@ 0x38
 8016664:	e7b5      	b.n	80165d2 <_strtod_l+0x2ba>
 8016666:	2a6e      	cmp	r2, #110	@ 0x6e
 8016668:	e7da      	b.n	8016620 <_strtod_l+0x308>
 801666a:	498c      	ldr	r1, [pc, #560]	@ (801689c <_strtod_l+0x584>)
 801666c:	a819      	add	r0, sp, #100	@ 0x64
 801666e:	f001 fd27 	bl	80180c0 <__match>
 8016672:	2800      	cmp	r0, #0
 8016674:	f43f aea4 	beq.w	80163c0 <_strtod_l+0xa8>
 8016678:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801667a:	4989      	ldr	r1, [pc, #548]	@ (80168a0 <_strtod_l+0x588>)
 801667c:	3b01      	subs	r3, #1
 801667e:	a819      	add	r0, sp, #100	@ 0x64
 8016680:	9319      	str	r3, [sp, #100]	@ 0x64
 8016682:	f001 fd1d 	bl	80180c0 <__match>
 8016686:	b910      	cbnz	r0, 801668e <_strtod_l+0x376>
 8016688:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801668a:	3301      	adds	r3, #1
 801668c:	9319      	str	r3, [sp, #100]	@ 0x64
 801668e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80168b0 <_strtod_l+0x598>
 8016692:	f04f 0a00 	mov.w	sl, #0
 8016696:	e678      	b.n	801638a <_strtod_l+0x72>
 8016698:	4882      	ldr	r0, [pc, #520]	@ (80168a4 <_strtod_l+0x58c>)
 801669a:	f001 fa61 	bl	8017b60 <nan>
 801669e:	ec5b ab10 	vmov	sl, fp, d0
 80166a2:	e672      	b.n	801638a <_strtod_l+0x72>
 80166a4:	eba8 0309 	sub.w	r3, r8, r9
 80166a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80166aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80166ac:	2f00      	cmp	r7, #0
 80166ae:	bf08      	it	eq
 80166b0:	462f      	moveq	r7, r5
 80166b2:	2d10      	cmp	r5, #16
 80166b4:	462c      	mov	r4, r5
 80166b6:	bfa8      	it	ge
 80166b8:	2410      	movge	r4, #16
 80166ba:	f7e9 ff43 	bl	8000544 <__aeabi_ui2d>
 80166be:	2d09      	cmp	r5, #9
 80166c0:	4682      	mov	sl, r0
 80166c2:	468b      	mov	fp, r1
 80166c4:	dc13      	bgt.n	80166ee <_strtod_l+0x3d6>
 80166c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	f43f ae5e 	beq.w	801638a <_strtod_l+0x72>
 80166ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80166d0:	dd78      	ble.n	80167c4 <_strtod_l+0x4ac>
 80166d2:	2b16      	cmp	r3, #22
 80166d4:	dc5f      	bgt.n	8016796 <_strtod_l+0x47e>
 80166d6:	4974      	ldr	r1, [pc, #464]	@ (80168a8 <_strtod_l+0x590>)
 80166d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80166dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80166e0:	4652      	mov	r2, sl
 80166e2:	465b      	mov	r3, fp
 80166e4:	f7e9 ffa8 	bl	8000638 <__aeabi_dmul>
 80166e8:	4682      	mov	sl, r0
 80166ea:	468b      	mov	fp, r1
 80166ec:	e64d      	b.n	801638a <_strtod_l+0x72>
 80166ee:	4b6e      	ldr	r3, [pc, #440]	@ (80168a8 <_strtod_l+0x590>)
 80166f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80166f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80166f8:	f7e9 ff9e 	bl	8000638 <__aeabi_dmul>
 80166fc:	4682      	mov	sl, r0
 80166fe:	9808      	ldr	r0, [sp, #32]
 8016700:	468b      	mov	fp, r1
 8016702:	f7e9 ff1f 	bl	8000544 <__aeabi_ui2d>
 8016706:	4602      	mov	r2, r0
 8016708:	460b      	mov	r3, r1
 801670a:	4650      	mov	r0, sl
 801670c:	4659      	mov	r1, fp
 801670e:	f7e9 fddd 	bl	80002cc <__adddf3>
 8016712:	2d0f      	cmp	r5, #15
 8016714:	4682      	mov	sl, r0
 8016716:	468b      	mov	fp, r1
 8016718:	ddd5      	ble.n	80166c6 <_strtod_l+0x3ae>
 801671a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801671c:	1b2c      	subs	r4, r5, r4
 801671e:	441c      	add	r4, r3
 8016720:	2c00      	cmp	r4, #0
 8016722:	f340 8096 	ble.w	8016852 <_strtod_l+0x53a>
 8016726:	f014 030f 	ands.w	r3, r4, #15
 801672a:	d00a      	beq.n	8016742 <_strtod_l+0x42a>
 801672c:	495e      	ldr	r1, [pc, #376]	@ (80168a8 <_strtod_l+0x590>)
 801672e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016732:	4652      	mov	r2, sl
 8016734:	465b      	mov	r3, fp
 8016736:	e9d1 0100 	ldrd	r0, r1, [r1]
 801673a:	f7e9 ff7d 	bl	8000638 <__aeabi_dmul>
 801673e:	4682      	mov	sl, r0
 8016740:	468b      	mov	fp, r1
 8016742:	f034 040f 	bics.w	r4, r4, #15
 8016746:	d073      	beq.n	8016830 <_strtod_l+0x518>
 8016748:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801674c:	dd48      	ble.n	80167e0 <_strtod_l+0x4c8>
 801674e:	2400      	movs	r4, #0
 8016750:	46a0      	mov	r8, r4
 8016752:	940a      	str	r4, [sp, #40]	@ 0x28
 8016754:	46a1      	mov	r9, r4
 8016756:	9a05      	ldr	r2, [sp, #20]
 8016758:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80168b0 <_strtod_l+0x598>
 801675c:	2322      	movs	r3, #34	@ 0x22
 801675e:	6013      	str	r3, [r2, #0]
 8016760:	f04f 0a00 	mov.w	sl, #0
 8016764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016766:	2b00      	cmp	r3, #0
 8016768:	f43f ae0f 	beq.w	801638a <_strtod_l+0x72>
 801676c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801676e:	9805      	ldr	r0, [sp, #20]
 8016770:	f7ff f940 	bl	80159f4 <_Bfree>
 8016774:	9805      	ldr	r0, [sp, #20]
 8016776:	4649      	mov	r1, r9
 8016778:	f7ff f93c 	bl	80159f4 <_Bfree>
 801677c:	9805      	ldr	r0, [sp, #20]
 801677e:	4641      	mov	r1, r8
 8016780:	f7ff f938 	bl	80159f4 <_Bfree>
 8016784:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016786:	9805      	ldr	r0, [sp, #20]
 8016788:	f7ff f934 	bl	80159f4 <_Bfree>
 801678c:	9805      	ldr	r0, [sp, #20]
 801678e:	4621      	mov	r1, r4
 8016790:	f7ff f930 	bl	80159f4 <_Bfree>
 8016794:	e5f9      	b.n	801638a <_strtod_l+0x72>
 8016796:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016798:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801679c:	4293      	cmp	r3, r2
 801679e:	dbbc      	blt.n	801671a <_strtod_l+0x402>
 80167a0:	4c41      	ldr	r4, [pc, #260]	@ (80168a8 <_strtod_l+0x590>)
 80167a2:	f1c5 050f 	rsb	r5, r5, #15
 80167a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80167aa:	4652      	mov	r2, sl
 80167ac:	465b      	mov	r3, fp
 80167ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80167b2:	f7e9 ff41 	bl	8000638 <__aeabi_dmul>
 80167b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80167b8:	1b5d      	subs	r5, r3, r5
 80167ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80167be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80167c2:	e78f      	b.n	80166e4 <_strtod_l+0x3cc>
 80167c4:	3316      	adds	r3, #22
 80167c6:	dba8      	blt.n	801671a <_strtod_l+0x402>
 80167c8:	4b37      	ldr	r3, [pc, #220]	@ (80168a8 <_strtod_l+0x590>)
 80167ca:	eba9 0808 	sub.w	r8, r9, r8
 80167ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80167d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80167d6:	4650      	mov	r0, sl
 80167d8:	4659      	mov	r1, fp
 80167da:	f7ea f857 	bl	800088c <__aeabi_ddiv>
 80167de:	e783      	b.n	80166e8 <_strtod_l+0x3d0>
 80167e0:	4b32      	ldr	r3, [pc, #200]	@ (80168ac <_strtod_l+0x594>)
 80167e2:	9308      	str	r3, [sp, #32]
 80167e4:	2300      	movs	r3, #0
 80167e6:	1124      	asrs	r4, r4, #4
 80167e8:	4650      	mov	r0, sl
 80167ea:	4659      	mov	r1, fp
 80167ec:	461e      	mov	r6, r3
 80167ee:	2c01      	cmp	r4, #1
 80167f0:	dc21      	bgt.n	8016836 <_strtod_l+0x51e>
 80167f2:	b10b      	cbz	r3, 80167f8 <_strtod_l+0x4e0>
 80167f4:	4682      	mov	sl, r0
 80167f6:	468b      	mov	fp, r1
 80167f8:	492c      	ldr	r1, [pc, #176]	@ (80168ac <_strtod_l+0x594>)
 80167fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80167fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8016802:	4652      	mov	r2, sl
 8016804:	465b      	mov	r3, fp
 8016806:	e9d1 0100 	ldrd	r0, r1, [r1]
 801680a:	f7e9 ff15 	bl	8000638 <__aeabi_dmul>
 801680e:	4b28      	ldr	r3, [pc, #160]	@ (80168b0 <_strtod_l+0x598>)
 8016810:	460a      	mov	r2, r1
 8016812:	400b      	ands	r3, r1
 8016814:	4927      	ldr	r1, [pc, #156]	@ (80168b4 <_strtod_l+0x59c>)
 8016816:	428b      	cmp	r3, r1
 8016818:	4682      	mov	sl, r0
 801681a:	d898      	bhi.n	801674e <_strtod_l+0x436>
 801681c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8016820:	428b      	cmp	r3, r1
 8016822:	bf86      	itte	hi
 8016824:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80168b8 <_strtod_l+0x5a0>
 8016828:	f04f 3aff 	movhi.w	sl, #4294967295
 801682c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8016830:	2300      	movs	r3, #0
 8016832:	9308      	str	r3, [sp, #32]
 8016834:	e07a      	b.n	801692c <_strtod_l+0x614>
 8016836:	07e2      	lsls	r2, r4, #31
 8016838:	d505      	bpl.n	8016846 <_strtod_l+0x52e>
 801683a:	9b08      	ldr	r3, [sp, #32]
 801683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016840:	f7e9 fefa 	bl	8000638 <__aeabi_dmul>
 8016844:	2301      	movs	r3, #1
 8016846:	9a08      	ldr	r2, [sp, #32]
 8016848:	3208      	adds	r2, #8
 801684a:	3601      	adds	r6, #1
 801684c:	1064      	asrs	r4, r4, #1
 801684e:	9208      	str	r2, [sp, #32]
 8016850:	e7cd      	b.n	80167ee <_strtod_l+0x4d6>
 8016852:	d0ed      	beq.n	8016830 <_strtod_l+0x518>
 8016854:	4264      	negs	r4, r4
 8016856:	f014 020f 	ands.w	r2, r4, #15
 801685a:	d00a      	beq.n	8016872 <_strtod_l+0x55a>
 801685c:	4b12      	ldr	r3, [pc, #72]	@ (80168a8 <_strtod_l+0x590>)
 801685e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016862:	4650      	mov	r0, sl
 8016864:	4659      	mov	r1, fp
 8016866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801686a:	f7ea f80f 	bl	800088c <__aeabi_ddiv>
 801686e:	4682      	mov	sl, r0
 8016870:	468b      	mov	fp, r1
 8016872:	1124      	asrs	r4, r4, #4
 8016874:	d0dc      	beq.n	8016830 <_strtod_l+0x518>
 8016876:	2c1f      	cmp	r4, #31
 8016878:	dd20      	ble.n	80168bc <_strtod_l+0x5a4>
 801687a:	2400      	movs	r4, #0
 801687c:	46a0      	mov	r8, r4
 801687e:	940a      	str	r4, [sp, #40]	@ 0x28
 8016880:	46a1      	mov	r9, r4
 8016882:	9a05      	ldr	r2, [sp, #20]
 8016884:	2322      	movs	r3, #34	@ 0x22
 8016886:	f04f 0a00 	mov.w	sl, #0
 801688a:	f04f 0b00 	mov.w	fp, #0
 801688e:	6013      	str	r3, [r2, #0]
 8016890:	e768      	b.n	8016764 <_strtod_l+0x44c>
 8016892:	bf00      	nop
 8016894:	0801a9d9 	.word	0x0801a9d9
 8016898:	0801abec 	.word	0x0801abec
 801689c:	0801a9d1 	.word	0x0801a9d1
 80168a0:	0801aa06 	.word	0x0801aa06
 80168a4:	0801adb0 	.word	0x0801adb0
 80168a8:	0801ab20 	.word	0x0801ab20
 80168ac:	0801aaf8 	.word	0x0801aaf8
 80168b0:	7ff00000 	.word	0x7ff00000
 80168b4:	7ca00000 	.word	0x7ca00000
 80168b8:	7fefffff 	.word	0x7fefffff
 80168bc:	f014 0310 	ands.w	r3, r4, #16
 80168c0:	bf18      	it	ne
 80168c2:	236a      	movne	r3, #106	@ 0x6a
 80168c4:	4ea9      	ldr	r6, [pc, #676]	@ (8016b6c <_strtod_l+0x854>)
 80168c6:	9308      	str	r3, [sp, #32]
 80168c8:	4650      	mov	r0, sl
 80168ca:	4659      	mov	r1, fp
 80168cc:	2300      	movs	r3, #0
 80168ce:	07e2      	lsls	r2, r4, #31
 80168d0:	d504      	bpl.n	80168dc <_strtod_l+0x5c4>
 80168d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80168d6:	f7e9 feaf 	bl	8000638 <__aeabi_dmul>
 80168da:	2301      	movs	r3, #1
 80168dc:	1064      	asrs	r4, r4, #1
 80168de:	f106 0608 	add.w	r6, r6, #8
 80168e2:	d1f4      	bne.n	80168ce <_strtod_l+0x5b6>
 80168e4:	b10b      	cbz	r3, 80168ea <_strtod_l+0x5d2>
 80168e6:	4682      	mov	sl, r0
 80168e8:	468b      	mov	fp, r1
 80168ea:	9b08      	ldr	r3, [sp, #32]
 80168ec:	b1b3      	cbz	r3, 801691c <_strtod_l+0x604>
 80168ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80168f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	4659      	mov	r1, fp
 80168fa:	dd0f      	ble.n	801691c <_strtod_l+0x604>
 80168fc:	2b1f      	cmp	r3, #31
 80168fe:	dd55      	ble.n	80169ac <_strtod_l+0x694>
 8016900:	2b34      	cmp	r3, #52	@ 0x34
 8016902:	bfde      	ittt	le
 8016904:	f04f 33ff 	movle.w	r3, #4294967295
 8016908:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801690c:	4093      	lslle	r3, r2
 801690e:	f04f 0a00 	mov.w	sl, #0
 8016912:	bfcc      	ite	gt
 8016914:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8016918:	ea03 0b01 	andle.w	fp, r3, r1
 801691c:	2200      	movs	r2, #0
 801691e:	2300      	movs	r3, #0
 8016920:	4650      	mov	r0, sl
 8016922:	4659      	mov	r1, fp
 8016924:	f7ea f8f0 	bl	8000b08 <__aeabi_dcmpeq>
 8016928:	2800      	cmp	r0, #0
 801692a:	d1a6      	bne.n	801687a <_strtod_l+0x562>
 801692c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801692e:	9300      	str	r3, [sp, #0]
 8016930:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016932:	9805      	ldr	r0, [sp, #20]
 8016934:	462b      	mov	r3, r5
 8016936:	463a      	mov	r2, r7
 8016938:	f7ff f8c4 	bl	8015ac4 <__s2b>
 801693c:	900a      	str	r0, [sp, #40]	@ 0x28
 801693e:	2800      	cmp	r0, #0
 8016940:	f43f af05 	beq.w	801674e <_strtod_l+0x436>
 8016944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016946:	2a00      	cmp	r2, #0
 8016948:	eba9 0308 	sub.w	r3, r9, r8
 801694c:	bfa8      	it	ge
 801694e:	2300      	movge	r3, #0
 8016950:	9312      	str	r3, [sp, #72]	@ 0x48
 8016952:	2400      	movs	r4, #0
 8016954:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016958:	9316      	str	r3, [sp, #88]	@ 0x58
 801695a:	46a0      	mov	r8, r4
 801695c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801695e:	9805      	ldr	r0, [sp, #20]
 8016960:	6859      	ldr	r1, [r3, #4]
 8016962:	f7ff f807 	bl	8015974 <_Balloc>
 8016966:	4681      	mov	r9, r0
 8016968:	2800      	cmp	r0, #0
 801696a:	f43f aef4 	beq.w	8016756 <_strtod_l+0x43e>
 801696e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016970:	691a      	ldr	r2, [r3, #16]
 8016972:	3202      	adds	r2, #2
 8016974:	f103 010c 	add.w	r1, r3, #12
 8016978:	0092      	lsls	r2, r2, #2
 801697a:	300c      	adds	r0, #12
 801697c:	f7fe f945 	bl	8014c0a <memcpy>
 8016980:	ec4b ab10 	vmov	d0, sl, fp
 8016984:	9805      	ldr	r0, [sp, #20]
 8016986:	aa1c      	add	r2, sp, #112	@ 0x70
 8016988:	a91b      	add	r1, sp, #108	@ 0x6c
 801698a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801698e:	f7ff fbd5 	bl	801613c <__d2b>
 8016992:	901a      	str	r0, [sp, #104]	@ 0x68
 8016994:	2800      	cmp	r0, #0
 8016996:	f43f aede 	beq.w	8016756 <_strtod_l+0x43e>
 801699a:	9805      	ldr	r0, [sp, #20]
 801699c:	2101      	movs	r1, #1
 801699e:	f7ff f927 	bl	8015bf0 <__i2b>
 80169a2:	4680      	mov	r8, r0
 80169a4:	b948      	cbnz	r0, 80169ba <_strtod_l+0x6a2>
 80169a6:	f04f 0800 	mov.w	r8, #0
 80169aa:	e6d4      	b.n	8016756 <_strtod_l+0x43e>
 80169ac:	f04f 32ff 	mov.w	r2, #4294967295
 80169b0:	fa02 f303 	lsl.w	r3, r2, r3
 80169b4:	ea03 0a0a 	and.w	sl, r3, sl
 80169b8:	e7b0      	b.n	801691c <_strtod_l+0x604>
 80169ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80169bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80169be:	2d00      	cmp	r5, #0
 80169c0:	bfab      	itete	ge
 80169c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80169c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80169c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80169c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80169ca:	bfac      	ite	ge
 80169cc:	18ef      	addge	r7, r5, r3
 80169ce:	1b5e      	sublt	r6, r3, r5
 80169d0:	9b08      	ldr	r3, [sp, #32]
 80169d2:	1aed      	subs	r5, r5, r3
 80169d4:	4415      	add	r5, r2
 80169d6:	4b66      	ldr	r3, [pc, #408]	@ (8016b70 <_strtod_l+0x858>)
 80169d8:	3d01      	subs	r5, #1
 80169da:	429d      	cmp	r5, r3
 80169dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80169e0:	da50      	bge.n	8016a84 <_strtod_l+0x76c>
 80169e2:	1b5b      	subs	r3, r3, r5
 80169e4:	2b1f      	cmp	r3, #31
 80169e6:	eba2 0203 	sub.w	r2, r2, r3
 80169ea:	f04f 0101 	mov.w	r1, #1
 80169ee:	dc3d      	bgt.n	8016a6c <_strtod_l+0x754>
 80169f0:	fa01 f303 	lsl.w	r3, r1, r3
 80169f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80169f6:	2300      	movs	r3, #0
 80169f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80169fa:	18bd      	adds	r5, r7, r2
 80169fc:	9b08      	ldr	r3, [sp, #32]
 80169fe:	42af      	cmp	r7, r5
 8016a00:	4416      	add	r6, r2
 8016a02:	441e      	add	r6, r3
 8016a04:	463b      	mov	r3, r7
 8016a06:	bfa8      	it	ge
 8016a08:	462b      	movge	r3, r5
 8016a0a:	42b3      	cmp	r3, r6
 8016a0c:	bfa8      	it	ge
 8016a0e:	4633      	movge	r3, r6
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	bfc2      	ittt	gt
 8016a14:	1aed      	subgt	r5, r5, r3
 8016a16:	1af6      	subgt	r6, r6, r3
 8016a18:	1aff      	subgt	r7, r7, r3
 8016a1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	dd16      	ble.n	8016a4e <_strtod_l+0x736>
 8016a20:	4641      	mov	r1, r8
 8016a22:	9805      	ldr	r0, [sp, #20]
 8016a24:	461a      	mov	r2, r3
 8016a26:	f7ff f9a3 	bl	8015d70 <__pow5mult>
 8016a2a:	4680      	mov	r8, r0
 8016a2c:	2800      	cmp	r0, #0
 8016a2e:	d0ba      	beq.n	80169a6 <_strtod_l+0x68e>
 8016a30:	4601      	mov	r1, r0
 8016a32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016a34:	9805      	ldr	r0, [sp, #20]
 8016a36:	f7ff f8f1 	bl	8015c1c <__multiply>
 8016a3a:	900e      	str	r0, [sp, #56]	@ 0x38
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	f43f ae8a 	beq.w	8016756 <_strtod_l+0x43e>
 8016a42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016a44:	9805      	ldr	r0, [sp, #20]
 8016a46:	f7fe ffd5 	bl	80159f4 <_Bfree>
 8016a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8016a4e:	2d00      	cmp	r5, #0
 8016a50:	dc1d      	bgt.n	8016a8e <_strtod_l+0x776>
 8016a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	dd23      	ble.n	8016aa0 <_strtod_l+0x788>
 8016a58:	4649      	mov	r1, r9
 8016a5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016a5c:	9805      	ldr	r0, [sp, #20]
 8016a5e:	f7ff f987 	bl	8015d70 <__pow5mult>
 8016a62:	4681      	mov	r9, r0
 8016a64:	b9e0      	cbnz	r0, 8016aa0 <_strtod_l+0x788>
 8016a66:	f04f 0900 	mov.w	r9, #0
 8016a6a:	e674      	b.n	8016756 <_strtod_l+0x43e>
 8016a6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8016a70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8016a74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8016a78:	35e2      	adds	r5, #226	@ 0xe2
 8016a7a:	fa01 f305 	lsl.w	r3, r1, r5
 8016a7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016a80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8016a82:	e7ba      	b.n	80169fa <_strtod_l+0x6e2>
 8016a84:	2300      	movs	r3, #0
 8016a86:	9310      	str	r3, [sp, #64]	@ 0x40
 8016a88:	2301      	movs	r3, #1
 8016a8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016a8c:	e7b5      	b.n	80169fa <_strtod_l+0x6e2>
 8016a8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016a90:	9805      	ldr	r0, [sp, #20]
 8016a92:	462a      	mov	r2, r5
 8016a94:	f7ff f9c6 	bl	8015e24 <__lshift>
 8016a98:	901a      	str	r0, [sp, #104]	@ 0x68
 8016a9a:	2800      	cmp	r0, #0
 8016a9c:	d1d9      	bne.n	8016a52 <_strtod_l+0x73a>
 8016a9e:	e65a      	b.n	8016756 <_strtod_l+0x43e>
 8016aa0:	2e00      	cmp	r6, #0
 8016aa2:	dd07      	ble.n	8016ab4 <_strtod_l+0x79c>
 8016aa4:	4649      	mov	r1, r9
 8016aa6:	9805      	ldr	r0, [sp, #20]
 8016aa8:	4632      	mov	r2, r6
 8016aaa:	f7ff f9bb 	bl	8015e24 <__lshift>
 8016aae:	4681      	mov	r9, r0
 8016ab0:	2800      	cmp	r0, #0
 8016ab2:	d0d8      	beq.n	8016a66 <_strtod_l+0x74e>
 8016ab4:	2f00      	cmp	r7, #0
 8016ab6:	dd08      	ble.n	8016aca <_strtod_l+0x7b2>
 8016ab8:	4641      	mov	r1, r8
 8016aba:	9805      	ldr	r0, [sp, #20]
 8016abc:	463a      	mov	r2, r7
 8016abe:	f7ff f9b1 	bl	8015e24 <__lshift>
 8016ac2:	4680      	mov	r8, r0
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	f43f ae46 	beq.w	8016756 <_strtod_l+0x43e>
 8016aca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016acc:	9805      	ldr	r0, [sp, #20]
 8016ace:	464a      	mov	r2, r9
 8016ad0:	f7ff fa30 	bl	8015f34 <__mdiff>
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	f43f ae3d 	beq.w	8016756 <_strtod_l+0x43e>
 8016adc:	68c3      	ldr	r3, [r0, #12]
 8016ade:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016ae0:	2300      	movs	r3, #0
 8016ae2:	60c3      	str	r3, [r0, #12]
 8016ae4:	4641      	mov	r1, r8
 8016ae6:	f7ff fa09 	bl	8015efc <__mcmp>
 8016aea:	2800      	cmp	r0, #0
 8016aec:	da46      	bge.n	8016b7c <_strtod_l+0x864>
 8016aee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016af0:	ea53 030a 	orrs.w	r3, r3, sl
 8016af4:	d16c      	bne.n	8016bd0 <_strtod_l+0x8b8>
 8016af6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d168      	bne.n	8016bd0 <_strtod_l+0x8b8>
 8016afe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016b02:	0d1b      	lsrs	r3, r3, #20
 8016b04:	051b      	lsls	r3, r3, #20
 8016b06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016b0a:	d961      	bls.n	8016bd0 <_strtod_l+0x8b8>
 8016b0c:	6963      	ldr	r3, [r4, #20]
 8016b0e:	b913      	cbnz	r3, 8016b16 <_strtod_l+0x7fe>
 8016b10:	6923      	ldr	r3, [r4, #16]
 8016b12:	2b01      	cmp	r3, #1
 8016b14:	dd5c      	ble.n	8016bd0 <_strtod_l+0x8b8>
 8016b16:	4621      	mov	r1, r4
 8016b18:	2201      	movs	r2, #1
 8016b1a:	9805      	ldr	r0, [sp, #20]
 8016b1c:	f7ff f982 	bl	8015e24 <__lshift>
 8016b20:	4641      	mov	r1, r8
 8016b22:	4604      	mov	r4, r0
 8016b24:	f7ff f9ea 	bl	8015efc <__mcmp>
 8016b28:	2800      	cmp	r0, #0
 8016b2a:	dd51      	ble.n	8016bd0 <_strtod_l+0x8b8>
 8016b2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016b30:	9a08      	ldr	r2, [sp, #32]
 8016b32:	0d1b      	lsrs	r3, r3, #20
 8016b34:	051b      	lsls	r3, r3, #20
 8016b36:	2a00      	cmp	r2, #0
 8016b38:	d06b      	beq.n	8016c12 <_strtod_l+0x8fa>
 8016b3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8016b3e:	d868      	bhi.n	8016c12 <_strtod_l+0x8fa>
 8016b40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8016b44:	f67f ae9d 	bls.w	8016882 <_strtod_l+0x56a>
 8016b48:	4b0a      	ldr	r3, [pc, #40]	@ (8016b74 <_strtod_l+0x85c>)
 8016b4a:	4650      	mov	r0, sl
 8016b4c:	4659      	mov	r1, fp
 8016b4e:	2200      	movs	r2, #0
 8016b50:	f7e9 fd72 	bl	8000638 <__aeabi_dmul>
 8016b54:	4b08      	ldr	r3, [pc, #32]	@ (8016b78 <_strtod_l+0x860>)
 8016b56:	400b      	ands	r3, r1
 8016b58:	4682      	mov	sl, r0
 8016b5a:	468b      	mov	fp, r1
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	f47f ae05 	bne.w	801676c <_strtod_l+0x454>
 8016b62:	9a05      	ldr	r2, [sp, #20]
 8016b64:	2322      	movs	r3, #34	@ 0x22
 8016b66:	6013      	str	r3, [r2, #0]
 8016b68:	e600      	b.n	801676c <_strtod_l+0x454>
 8016b6a:	bf00      	nop
 8016b6c:	0801ac18 	.word	0x0801ac18
 8016b70:	fffffc02 	.word	0xfffffc02
 8016b74:	39500000 	.word	0x39500000
 8016b78:	7ff00000 	.word	0x7ff00000
 8016b7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016b80:	d165      	bne.n	8016c4e <_strtod_l+0x936>
 8016b82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016b84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016b88:	b35a      	cbz	r2, 8016be2 <_strtod_l+0x8ca>
 8016b8a:	4a9f      	ldr	r2, [pc, #636]	@ (8016e08 <_strtod_l+0xaf0>)
 8016b8c:	4293      	cmp	r3, r2
 8016b8e:	d12b      	bne.n	8016be8 <_strtod_l+0x8d0>
 8016b90:	9b08      	ldr	r3, [sp, #32]
 8016b92:	4651      	mov	r1, sl
 8016b94:	b303      	cbz	r3, 8016bd8 <_strtod_l+0x8c0>
 8016b96:	4b9d      	ldr	r3, [pc, #628]	@ (8016e0c <_strtod_l+0xaf4>)
 8016b98:	465a      	mov	r2, fp
 8016b9a:	4013      	ands	r3, r2
 8016b9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8016ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8016ba4:	d81b      	bhi.n	8016bde <_strtod_l+0x8c6>
 8016ba6:	0d1b      	lsrs	r3, r3, #20
 8016ba8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8016bac:	fa02 f303 	lsl.w	r3, r2, r3
 8016bb0:	4299      	cmp	r1, r3
 8016bb2:	d119      	bne.n	8016be8 <_strtod_l+0x8d0>
 8016bb4:	4b96      	ldr	r3, [pc, #600]	@ (8016e10 <_strtod_l+0xaf8>)
 8016bb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016bb8:	429a      	cmp	r2, r3
 8016bba:	d102      	bne.n	8016bc2 <_strtod_l+0x8aa>
 8016bbc:	3101      	adds	r1, #1
 8016bbe:	f43f adca 	beq.w	8016756 <_strtod_l+0x43e>
 8016bc2:	4b92      	ldr	r3, [pc, #584]	@ (8016e0c <_strtod_l+0xaf4>)
 8016bc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016bc6:	401a      	ands	r2, r3
 8016bc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8016bcc:	f04f 0a00 	mov.w	sl, #0
 8016bd0:	9b08      	ldr	r3, [sp, #32]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d1b8      	bne.n	8016b48 <_strtod_l+0x830>
 8016bd6:	e5c9      	b.n	801676c <_strtod_l+0x454>
 8016bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bdc:	e7e8      	b.n	8016bb0 <_strtod_l+0x898>
 8016bde:	4613      	mov	r3, r2
 8016be0:	e7e6      	b.n	8016bb0 <_strtod_l+0x898>
 8016be2:	ea53 030a 	orrs.w	r3, r3, sl
 8016be6:	d0a1      	beq.n	8016b2c <_strtod_l+0x814>
 8016be8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016bea:	b1db      	cbz	r3, 8016c24 <_strtod_l+0x90c>
 8016bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016bee:	4213      	tst	r3, r2
 8016bf0:	d0ee      	beq.n	8016bd0 <_strtod_l+0x8b8>
 8016bf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016bf4:	9a08      	ldr	r2, [sp, #32]
 8016bf6:	4650      	mov	r0, sl
 8016bf8:	4659      	mov	r1, fp
 8016bfa:	b1bb      	cbz	r3, 8016c2c <_strtod_l+0x914>
 8016bfc:	f7ff fb6c 	bl	80162d8 <sulp>
 8016c00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016c04:	ec53 2b10 	vmov	r2, r3, d0
 8016c08:	f7e9 fb60 	bl	80002cc <__adddf3>
 8016c0c:	4682      	mov	sl, r0
 8016c0e:	468b      	mov	fp, r1
 8016c10:	e7de      	b.n	8016bd0 <_strtod_l+0x8b8>
 8016c12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8016c16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016c1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016c1e:	f04f 3aff 	mov.w	sl, #4294967295
 8016c22:	e7d5      	b.n	8016bd0 <_strtod_l+0x8b8>
 8016c24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8016c26:	ea13 0f0a 	tst.w	r3, sl
 8016c2a:	e7e1      	b.n	8016bf0 <_strtod_l+0x8d8>
 8016c2c:	f7ff fb54 	bl	80162d8 <sulp>
 8016c30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016c34:	ec53 2b10 	vmov	r2, r3, d0
 8016c38:	f7e9 fb46 	bl	80002c8 <__aeabi_dsub>
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	2300      	movs	r3, #0
 8016c40:	4682      	mov	sl, r0
 8016c42:	468b      	mov	fp, r1
 8016c44:	f7e9 ff60 	bl	8000b08 <__aeabi_dcmpeq>
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d0c1      	beq.n	8016bd0 <_strtod_l+0x8b8>
 8016c4c:	e619      	b.n	8016882 <_strtod_l+0x56a>
 8016c4e:	4641      	mov	r1, r8
 8016c50:	4620      	mov	r0, r4
 8016c52:	f7ff facb 	bl	80161ec <__ratio>
 8016c56:	ec57 6b10 	vmov	r6, r7, d0
 8016c5a:	2200      	movs	r2, #0
 8016c5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016c60:	4630      	mov	r0, r6
 8016c62:	4639      	mov	r1, r7
 8016c64:	f7e9 ff64 	bl	8000b30 <__aeabi_dcmple>
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	d06f      	beq.n	8016d4c <_strtod_l+0xa34>
 8016c6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d17a      	bne.n	8016d68 <_strtod_l+0xa50>
 8016c72:	f1ba 0f00 	cmp.w	sl, #0
 8016c76:	d158      	bne.n	8016d2a <_strtod_l+0xa12>
 8016c78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016c7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d15a      	bne.n	8016d38 <_strtod_l+0xa20>
 8016c82:	4b64      	ldr	r3, [pc, #400]	@ (8016e14 <_strtod_l+0xafc>)
 8016c84:	2200      	movs	r2, #0
 8016c86:	4630      	mov	r0, r6
 8016c88:	4639      	mov	r1, r7
 8016c8a:	f7e9 ff47 	bl	8000b1c <__aeabi_dcmplt>
 8016c8e:	2800      	cmp	r0, #0
 8016c90:	d159      	bne.n	8016d46 <_strtod_l+0xa2e>
 8016c92:	4630      	mov	r0, r6
 8016c94:	4639      	mov	r1, r7
 8016c96:	4b60      	ldr	r3, [pc, #384]	@ (8016e18 <_strtod_l+0xb00>)
 8016c98:	2200      	movs	r2, #0
 8016c9a:	f7e9 fccd 	bl	8000638 <__aeabi_dmul>
 8016c9e:	4606      	mov	r6, r0
 8016ca0:	460f      	mov	r7, r1
 8016ca2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8016ca6:	9606      	str	r6, [sp, #24]
 8016ca8:	9307      	str	r3, [sp, #28]
 8016caa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016cae:	4d57      	ldr	r5, [pc, #348]	@ (8016e0c <_strtod_l+0xaf4>)
 8016cb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016cb6:	401d      	ands	r5, r3
 8016cb8:	4b58      	ldr	r3, [pc, #352]	@ (8016e1c <_strtod_l+0xb04>)
 8016cba:	429d      	cmp	r5, r3
 8016cbc:	f040 80b2 	bne.w	8016e24 <_strtod_l+0xb0c>
 8016cc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016cc2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8016cc6:	ec4b ab10 	vmov	d0, sl, fp
 8016cca:	f7ff f9c7 	bl	801605c <__ulp>
 8016cce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016cd2:	ec51 0b10 	vmov	r0, r1, d0
 8016cd6:	f7e9 fcaf 	bl	8000638 <__aeabi_dmul>
 8016cda:	4652      	mov	r2, sl
 8016cdc:	465b      	mov	r3, fp
 8016cde:	f7e9 faf5 	bl	80002cc <__adddf3>
 8016ce2:	460b      	mov	r3, r1
 8016ce4:	4949      	ldr	r1, [pc, #292]	@ (8016e0c <_strtod_l+0xaf4>)
 8016ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8016e20 <_strtod_l+0xb08>)
 8016ce8:	4019      	ands	r1, r3
 8016cea:	4291      	cmp	r1, r2
 8016cec:	4682      	mov	sl, r0
 8016cee:	d942      	bls.n	8016d76 <_strtod_l+0xa5e>
 8016cf0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016cf2:	4b47      	ldr	r3, [pc, #284]	@ (8016e10 <_strtod_l+0xaf8>)
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d103      	bne.n	8016d00 <_strtod_l+0x9e8>
 8016cf8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016cfa:	3301      	adds	r3, #1
 8016cfc:	f43f ad2b 	beq.w	8016756 <_strtod_l+0x43e>
 8016d00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8016e10 <_strtod_l+0xaf8>
 8016d04:	f04f 3aff 	mov.w	sl, #4294967295
 8016d08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8016d0a:	9805      	ldr	r0, [sp, #20]
 8016d0c:	f7fe fe72 	bl	80159f4 <_Bfree>
 8016d10:	9805      	ldr	r0, [sp, #20]
 8016d12:	4649      	mov	r1, r9
 8016d14:	f7fe fe6e 	bl	80159f4 <_Bfree>
 8016d18:	9805      	ldr	r0, [sp, #20]
 8016d1a:	4641      	mov	r1, r8
 8016d1c:	f7fe fe6a 	bl	80159f4 <_Bfree>
 8016d20:	9805      	ldr	r0, [sp, #20]
 8016d22:	4621      	mov	r1, r4
 8016d24:	f7fe fe66 	bl	80159f4 <_Bfree>
 8016d28:	e618      	b.n	801695c <_strtod_l+0x644>
 8016d2a:	f1ba 0f01 	cmp.w	sl, #1
 8016d2e:	d103      	bne.n	8016d38 <_strtod_l+0xa20>
 8016d30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	f43f ada5 	beq.w	8016882 <_strtod_l+0x56a>
 8016d38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8016de8 <_strtod_l+0xad0>
 8016d3c:	4f35      	ldr	r7, [pc, #212]	@ (8016e14 <_strtod_l+0xafc>)
 8016d3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d42:	2600      	movs	r6, #0
 8016d44:	e7b1      	b.n	8016caa <_strtod_l+0x992>
 8016d46:	4f34      	ldr	r7, [pc, #208]	@ (8016e18 <_strtod_l+0xb00>)
 8016d48:	2600      	movs	r6, #0
 8016d4a:	e7aa      	b.n	8016ca2 <_strtod_l+0x98a>
 8016d4c:	4b32      	ldr	r3, [pc, #200]	@ (8016e18 <_strtod_l+0xb00>)
 8016d4e:	4630      	mov	r0, r6
 8016d50:	4639      	mov	r1, r7
 8016d52:	2200      	movs	r2, #0
 8016d54:	f7e9 fc70 	bl	8000638 <__aeabi_dmul>
 8016d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016d5a:	4606      	mov	r6, r0
 8016d5c:	460f      	mov	r7, r1
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d09f      	beq.n	8016ca2 <_strtod_l+0x98a>
 8016d62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016d66:	e7a0      	b.n	8016caa <_strtod_l+0x992>
 8016d68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8016df0 <_strtod_l+0xad8>
 8016d6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016d70:	ec57 6b17 	vmov	r6, r7, d7
 8016d74:	e799      	b.n	8016caa <_strtod_l+0x992>
 8016d76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8016d7a:	9b08      	ldr	r3, [sp, #32]
 8016d7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d1c1      	bne.n	8016d08 <_strtod_l+0x9f0>
 8016d84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8016d88:	0d1b      	lsrs	r3, r3, #20
 8016d8a:	051b      	lsls	r3, r3, #20
 8016d8c:	429d      	cmp	r5, r3
 8016d8e:	d1bb      	bne.n	8016d08 <_strtod_l+0x9f0>
 8016d90:	4630      	mov	r0, r6
 8016d92:	4639      	mov	r1, r7
 8016d94:	f7ea f90e 	bl	8000fb4 <__aeabi_d2lz>
 8016d98:	f7e9 fc20 	bl	80005dc <__aeabi_l2d>
 8016d9c:	4602      	mov	r2, r0
 8016d9e:	460b      	mov	r3, r1
 8016da0:	4630      	mov	r0, r6
 8016da2:	4639      	mov	r1, r7
 8016da4:	f7e9 fa90 	bl	80002c8 <__aeabi_dsub>
 8016da8:	460b      	mov	r3, r1
 8016daa:	4602      	mov	r2, r0
 8016dac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8016db0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8016db4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016db6:	ea46 060a 	orr.w	r6, r6, sl
 8016dba:	431e      	orrs	r6, r3
 8016dbc:	d06f      	beq.n	8016e9e <_strtod_l+0xb86>
 8016dbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8016df8 <_strtod_l+0xae0>)
 8016dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dc4:	f7e9 feaa 	bl	8000b1c <__aeabi_dcmplt>
 8016dc8:	2800      	cmp	r0, #0
 8016dca:	f47f accf 	bne.w	801676c <_strtod_l+0x454>
 8016dce:	a30c      	add	r3, pc, #48	@ (adr r3, 8016e00 <_strtod_l+0xae8>)
 8016dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016dd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8016dd8:	f7e9 febe 	bl	8000b58 <__aeabi_dcmpgt>
 8016ddc:	2800      	cmp	r0, #0
 8016dde:	d093      	beq.n	8016d08 <_strtod_l+0x9f0>
 8016de0:	e4c4      	b.n	801676c <_strtod_l+0x454>
 8016de2:	bf00      	nop
 8016de4:	f3af 8000 	nop.w
 8016de8:	00000000 	.word	0x00000000
 8016dec:	bff00000 	.word	0xbff00000
 8016df0:	00000000 	.word	0x00000000
 8016df4:	3ff00000 	.word	0x3ff00000
 8016df8:	94a03595 	.word	0x94a03595
 8016dfc:	3fdfffff 	.word	0x3fdfffff
 8016e00:	35afe535 	.word	0x35afe535
 8016e04:	3fe00000 	.word	0x3fe00000
 8016e08:	000fffff 	.word	0x000fffff
 8016e0c:	7ff00000 	.word	0x7ff00000
 8016e10:	7fefffff 	.word	0x7fefffff
 8016e14:	3ff00000 	.word	0x3ff00000
 8016e18:	3fe00000 	.word	0x3fe00000
 8016e1c:	7fe00000 	.word	0x7fe00000
 8016e20:	7c9fffff 	.word	0x7c9fffff
 8016e24:	9b08      	ldr	r3, [sp, #32]
 8016e26:	b323      	cbz	r3, 8016e72 <_strtod_l+0xb5a>
 8016e28:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8016e2c:	d821      	bhi.n	8016e72 <_strtod_l+0xb5a>
 8016e2e:	a328      	add	r3, pc, #160	@ (adr r3, 8016ed0 <_strtod_l+0xbb8>)
 8016e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e34:	4630      	mov	r0, r6
 8016e36:	4639      	mov	r1, r7
 8016e38:	f7e9 fe7a 	bl	8000b30 <__aeabi_dcmple>
 8016e3c:	b1a0      	cbz	r0, 8016e68 <_strtod_l+0xb50>
 8016e3e:	4639      	mov	r1, r7
 8016e40:	4630      	mov	r0, r6
 8016e42:	f7e9 fed1 	bl	8000be8 <__aeabi_d2uiz>
 8016e46:	2801      	cmp	r0, #1
 8016e48:	bf38      	it	cc
 8016e4a:	2001      	movcc	r0, #1
 8016e4c:	f7e9 fb7a 	bl	8000544 <__aeabi_ui2d>
 8016e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016e52:	4606      	mov	r6, r0
 8016e54:	460f      	mov	r7, r1
 8016e56:	b9fb      	cbnz	r3, 8016e98 <_strtod_l+0xb80>
 8016e58:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016e5c:	9014      	str	r0, [sp, #80]	@ 0x50
 8016e5e:	9315      	str	r3, [sp, #84]	@ 0x54
 8016e60:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8016e64:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8016e68:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016e6a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8016e6e:	1b5b      	subs	r3, r3, r5
 8016e70:	9311      	str	r3, [sp, #68]	@ 0x44
 8016e72:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8016e76:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8016e7a:	f7ff f8ef 	bl	801605c <__ulp>
 8016e7e:	4650      	mov	r0, sl
 8016e80:	ec53 2b10 	vmov	r2, r3, d0
 8016e84:	4659      	mov	r1, fp
 8016e86:	f7e9 fbd7 	bl	8000638 <__aeabi_dmul>
 8016e8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016e8e:	f7e9 fa1d 	bl	80002cc <__adddf3>
 8016e92:	4682      	mov	sl, r0
 8016e94:	468b      	mov	fp, r1
 8016e96:	e770      	b.n	8016d7a <_strtod_l+0xa62>
 8016e98:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8016e9c:	e7e0      	b.n	8016e60 <_strtod_l+0xb48>
 8016e9e:	a30e      	add	r3, pc, #56	@ (adr r3, 8016ed8 <_strtod_l+0xbc0>)
 8016ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ea4:	f7e9 fe3a 	bl	8000b1c <__aeabi_dcmplt>
 8016ea8:	e798      	b.n	8016ddc <_strtod_l+0xac4>
 8016eaa:	2300      	movs	r3, #0
 8016eac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016eae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016eb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016eb2:	6013      	str	r3, [r2, #0]
 8016eb4:	f7ff ba6d 	b.w	8016392 <_strtod_l+0x7a>
 8016eb8:	2a65      	cmp	r2, #101	@ 0x65
 8016eba:	f43f ab66 	beq.w	801658a <_strtod_l+0x272>
 8016ebe:	2a45      	cmp	r2, #69	@ 0x45
 8016ec0:	f43f ab63 	beq.w	801658a <_strtod_l+0x272>
 8016ec4:	2301      	movs	r3, #1
 8016ec6:	f7ff bb9e 	b.w	8016606 <_strtod_l+0x2ee>
 8016eca:	bf00      	nop
 8016ecc:	f3af 8000 	nop.w
 8016ed0:	ffc00000 	.word	0xffc00000
 8016ed4:	41dfffff 	.word	0x41dfffff
 8016ed8:	94a03595 	.word	0x94a03595
 8016edc:	3fcfffff 	.word	0x3fcfffff

08016ee0 <_strtod_r>:
 8016ee0:	4b01      	ldr	r3, [pc, #4]	@ (8016ee8 <_strtod_r+0x8>)
 8016ee2:	f7ff ba19 	b.w	8016318 <_strtod_l>
 8016ee6:	bf00      	nop
 8016ee8:	200000bc 	.word	0x200000bc

08016eec <_strtol_l.constprop.0>:
 8016eec:	2b24      	cmp	r3, #36	@ 0x24
 8016eee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ef2:	4686      	mov	lr, r0
 8016ef4:	4690      	mov	r8, r2
 8016ef6:	d801      	bhi.n	8016efc <_strtol_l.constprop.0+0x10>
 8016ef8:	2b01      	cmp	r3, #1
 8016efa:	d106      	bne.n	8016f0a <_strtol_l.constprop.0+0x1e>
 8016efc:	f7fd fe58 	bl	8014bb0 <__errno>
 8016f00:	2316      	movs	r3, #22
 8016f02:	6003      	str	r3, [r0, #0]
 8016f04:	2000      	movs	r0, #0
 8016f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f0a:	4834      	ldr	r0, [pc, #208]	@ (8016fdc <_strtol_l.constprop.0+0xf0>)
 8016f0c:	460d      	mov	r5, r1
 8016f0e:	462a      	mov	r2, r5
 8016f10:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f14:	5d06      	ldrb	r6, [r0, r4]
 8016f16:	f016 0608 	ands.w	r6, r6, #8
 8016f1a:	d1f8      	bne.n	8016f0e <_strtol_l.constprop.0+0x22>
 8016f1c:	2c2d      	cmp	r4, #45	@ 0x2d
 8016f1e:	d12d      	bne.n	8016f7c <_strtol_l.constprop.0+0x90>
 8016f20:	782c      	ldrb	r4, [r5, #0]
 8016f22:	2601      	movs	r6, #1
 8016f24:	1c95      	adds	r5, r2, #2
 8016f26:	f033 0210 	bics.w	r2, r3, #16
 8016f2a:	d109      	bne.n	8016f40 <_strtol_l.constprop.0+0x54>
 8016f2c:	2c30      	cmp	r4, #48	@ 0x30
 8016f2e:	d12a      	bne.n	8016f86 <_strtol_l.constprop.0+0x9a>
 8016f30:	782a      	ldrb	r2, [r5, #0]
 8016f32:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8016f36:	2a58      	cmp	r2, #88	@ 0x58
 8016f38:	d125      	bne.n	8016f86 <_strtol_l.constprop.0+0x9a>
 8016f3a:	786c      	ldrb	r4, [r5, #1]
 8016f3c:	2310      	movs	r3, #16
 8016f3e:	3502      	adds	r5, #2
 8016f40:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8016f44:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016f48:	2200      	movs	r2, #0
 8016f4a:	fbbc f9f3 	udiv	r9, ip, r3
 8016f4e:	4610      	mov	r0, r2
 8016f50:	fb03 ca19 	mls	sl, r3, r9, ip
 8016f54:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016f58:	2f09      	cmp	r7, #9
 8016f5a:	d81b      	bhi.n	8016f94 <_strtol_l.constprop.0+0xa8>
 8016f5c:	463c      	mov	r4, r7
 8016f5e:	42a3      	cmp	r3, r4
 8016f60:	dd27      	ble.n	8016fb2 <_strtol_l.constprop.0+0xc6>
 8016f62:	1c57      	adds	r7, r2, #1
 8016f64:	d007      	beq.n	8016f76 <_strtol_l.constprop.0+0x8a>
 8016f66:	4581      	cmp	r9, r0
 8016f68:	d320      	bcc.n	8016fac <_strtol_l.constprop.0+0xc0>
 8016f6a:	d101      	bne.n	8016f70 <_strtol_l.constprop.0+0x84>
 8016f6c:	45a2      	cmp	sl, r4
 8016f6e:	db1d      	blt.n	8016fac <_strtol_l.constprop.0+0xc0>
 8016f70:	fb00 4003 	mla	r0, r0, r3, r4
 8016f74:	2201      	movs	r2, #1
 8016f76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f7a:	e7eb      	b.n	8016f54 <_strtol_l.constprop.0+0x68>
 8016f7c:	2c2b      	cmp	r4, #43	@ 0x2b
 8016f7e:	bf04      	itt	eq
 8016f80:	782c      	ldrbeq	r4, [r5, #0]
 8016f82:	1c95      	addeq	r5, r2, #2
 8016f84:	e7cf      	b.n	8016f26 <_strtol_l.constprop.0+0x3a>
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d1da      	bne.n	8016f40 <_strtol_l.constprop.0+0x54>
 8016f8a:	2c30      	cmp	r4, #48	@ 0x30
 8016f8c:	bf0c      	ite	eq
 8016f8e:	2308      	moveq	r3, #8
 8016f90:	230a      	movne	r3, #10
 8016f92:	e7d5      	b.n	8016f40 <_strtol_l.constprop.0+0x54>
 8016f94:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016f98:	2f19      	cmp	r7, #25
 8016f9a:	d801      	bhi.n	8016fa0 <_strtol_l.constprop.0+0xb4>
 8016f9c:	3c37      	subs	r4, #55	@ 0x37
 8016f9e:	e7de      	b.n	8016f5e <_strtol_l.constprop.0+0x72>
 8016fa0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8016fa4:	2f19      	cmp	r7, #25
 8016fa6:	d804      	bhi.n	8016fb2 <_strtol_l.constprop.0+0xc6>
 8016fa8:	3c57      	subs	r4, #87	@ 0x57
 8016faa:	e7d8      	b.n	8016f5e <_strtol_l.constprop.0+0x72>
 8016fac:	f04f 32ff 	mov.w	r2, #4294967295
 8016fb0:	e7e1      	b.n	8016f76 <_strtol_l.constprop.0+0x8a>
 8016fb2:	1c53      	adds	r3, r2, #1
 8016fb4:	d108      	bne.n	8016fc8 <_strtol_l.constprop.0+0xdc>
 8016fb6:	2322      	movs	r3, #34	@ 0x22
 8016fb8:	f8ce 3000 	str.w	r3, [lr]
 8016fbc:	4660      	mov	r0, ip
 8016fbe:	f1b8 0f00 	cmp.w	r8, #0
 8016fc2:	d0a0      	beq.n	8016f06 <_strtol_l.constprop.0+0x1a>
 8016fc4:	1e69      	subs	r1, r5, #1
 8016fc6:	e006      	b.n	8016fd6 <_strtol_l.constprop.0+0xea>
 8016fc8:	b106      	cbz	r6, 8016fcc <_strtol_l.constprop.0+0xe0>
 8016fca:	4240      	negs	r0, r0
 8016fcc:	f1b8 0f00 	cmp.w	r8, #0
 8016fd0:	d099      	beq.n	8016f06 <_strtol_l.constprop.0+0x1a>
 8016fd2:	2a00      	cmp	r2, #0
 8016fd4:	d1f6      	bne.n	8016fc4 <_strtol_l.constprop.0+0xd8>
 8016fd6:	f8c8 1000 	str.w	r1, [r8]
 8016fda:	e794      	b.n	8016f06 <_strtol_l.constprop.0+0x1a>
 8016fdc:	0801ac41 	.word	0x0801ac41

08016fe0 <_strtol_r>:
 8016fe0:	f7ff bf84 	b.w	8016eec <_strtol_l.constprop.0>

08016fe4 <__ssputs_r>:
 8016fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fe8:	688e      	ldr	r6, [r1, #8]
 8016fea:	461f      	mov	r7, r3
 8016fec:	42be      	cmp	r6, r7
 8016fee:	680b      	ldr	r3, [r1, #0]
 8016ff0:	4682      	mov	sl, r0
 8016ff2:	460c      	mov	r4, r1
 8016ff4:	4690      	mov	r8, r2
 8016ff6:	d82d      	bhi.n	8017054 <__ssputs_r+0x70>
 8016ff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016ffc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017000:	d026      	beq.n	8017050 <__ssputs_r+0x6c>
 8017002:	6965      	ldr	r5, [r4, #20]
 8017004:	6909      	ldr	r1, [r1, #16]
 8017006:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801700a:	eba3 0901 	sub.w	r9, r3, r1
 801700e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017012:	1c7b      	adds	r3, r7, #1
 8017014:	444b      	add	r3, r9
 8017016:	106d      	asrs	r5, r5, #1
 8017018:	429d      	cmp	r5, r3
 801701a:	bf38      	it	cc
 801701c:	461d      	movcc	r5, r3
 801701e:	0553      	lsls	r3, r2, #21
 8017020:	d527      	bpl.n	8017072 <__ssputs_r+0x8e>
 8017022:	4629      	mov	r1, r5
 8017024:	f7fc fcf2 	bl	8013a0c <_malloc_r>
 8017028:	4606      	mov	r6, r0
 801702a:	b360      	cbz	r0, 8017086 <__ssputs_r+0xa2>
 801702c:	6921      	ldr	r1, [r4, #16]
 801702e:	464a      	mov	r2, r9
 8017030:	f7fd fdeb 	bl	8014c0a <memcpy>
 8017034:	89a3      	ldrh	r3, [r4, #12]
 8017036:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801703a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801703e:	81a3      	strh	r3, [r4, #12]
 8017040:	6126      	str	r6, [r4, #16]
 8017042:	6165      	str	r5, [r4, #20]
 8017044:	444e      	add	r6, r9
 8017046:	eba5 0509 	sub.w	r5, r5, r9
 801704a:	6026      	str	r6, [r4, #0]
 801704c:	60a5      	str	r5, [r4, #8]
 801704e:	463e      	mov	r6, r7
 8017050:	42be      	cmp	r6, r7
 8017052:	d900      	bls.n	8017056 <__ssputs_r+0x72>
 8017054:	463e      	mov	r6, r7
 8017056:	6820      	ldr	r0, [r4, #0]
 8017058:	4632      	mov	r2, r6
 801705a:	4641      	mov	r1, r8
 801705c:	f000 fd53 	bl	8017b06 <memmove>
 8017060:	68a3      	ldr	r3, [r4, #8]
 8017062:	1b9b      	subs	r3, r3, r6
 8017064:	60a3      	str	r3, [r4, #8]
 8017066:	6823      	ldr	r3, [r4, #0]
 8017068:	4433      	add	r3, r6
 801706a:	6023      	str	r3, [r4, #0]
 801706c:	2000      	movs	r0, #0
 801706e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017072:	462a      	mov	r2, r5
 8017074:	f001 f8e5 	bl	8018242 <_realloc_r>
 8017078:	4606      	mov	r6, r0
 801707a:	2800      	cmp	r0, #0
 801707c:	d1e0      	bne.n	8017040 <__ssputs_r+0x5c>
 801707e:	6921      	ldr	r1, [r4, #16]
 8017080:	4650      	mov	r0, sl
 8017082:	f7fe fc25 	bl	80158d0 <_free_r>
 8017086:	230c      	movs	r3, #12
 8017088:	f8ca 3000 	str.w	r3, [sl]
 801708c:	89a3      	ldrh	r3, [r4, #12]
 801708e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017092:	81a3      	strh	r3, [r4, #12]
 8017094:	f04f 30ff 	mov.w	r0, #4294967295
 8017098:	e7e9      	b.n	801706e <__ssputs_r+0x8a>
	...

0801709c <_svfiprintf_r>:
 801709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a0:	4698      	mov	r8, r3
 80170a2:	898b      	ldrh	r3, [r1, #12]
 80170a4:	061b      	lsls	r3, r3, #24
 80170a6:	b09d      	sub	sp, #116	@ 0x74
 80170a8:	4607      	mov	r7, r0
 80170aa:	460d      	mov	r5, r1
 80170ac:	4614      	mov	r4, r2
 80170ae:	d510      	bpl.n	80170d2 <_svfiprintf_r+0x36>
 80170b0:	690b      	ldr	r3, [r1, #16]
 80170b2:	b973      	cbnz	r3, 80170d2 <_svfiprintf_r+0x36>
 80170b4:	2140      	movs	r1, #64	@ 0x40
 80170b6:	f7fc fca9 	bl	8013a0c <_malloc_r>
 80170ba:	6028      	str	r0, [r5, #0]
 80170bc:	6128      	str	r0, [r5, #16]
 80170be:	b930      	cbnz	r0, 80170ce <_svfiprintf_r+0x32>
 80170c0:	230c      	movs	r3, #12
 80170c2:	603b      	str	r3, [r7, #0]
 80170c4:	f04f 30ff 	mov.w	r0, #4294967295
 80170c8:	b01d      	add	sp, #116	@ 0x74
 80170ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170ce:	2340      	movs	r3, #64	@ 0x40
 80170d0:	616b      	str	r3, [r5, #20]
 80170d2:	2300      	movs	r3, #0
 80170d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80170d6:	2320      	movs	r3, #32
 80170d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80170dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80170e0:	2330      	movs	r3, #48	@ 0x30
 80170e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017280 <_svfiprintf_r+0x1e4>
 80170e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80170ea:	f04f 0901 	mov.w	r9, #1
 80170ee:	4623      	mov	r3, r4
 80170f0:	469a      	mov	sl, r3
 80170f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170f6:	b10a      	cbz	r2, 80170fc <_svfiprintf_r+0x60>
 80170f8:	2a25      	cmp	r2, #37	@ 0x25
 80170fa:	d1f9      	bne.n	80170f0 <_svfiprintf_r+0x54>
 80170fc:	ebba 0b04 	subs.w	fp, sl, r4
 8017100:	d00b      	beq.n	801711a <_svfiprintf_r+0x7e>
 8017102:	465b      	mov	r3, fp
 8017104:	4622      	mov	r2, r4
 8017106:	4629      	mov	r1, r5
 8017108:	4638      	mov	r0, r7
 801710a:	f7ff ff6b 	bl	8016fe4 <__ssputs_r>
 801710e:	3001      	adds	r0, #1
 8017110:	f000 80a7 	beq.w	8017262 <_svfiprintf_r+0x1c6>
 8017114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017116:	445a      	add	r2, fp
 8017118:	9209      	str	r2, [sp, #36]	@ 0x24
 801711a:	f89a 3000 	ldrb.w	r3, [sl]
 801711e:	2b00      	cmp	r3, #0
 8017120:	f000 809f 	beq.w	8017262 <_svfiprintf_r+0x1c6>
 8017124:	2300      	movs	r3, #0
 8017126:	f04f 32ff 	mov.w	r2, #4294967295
 801712a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801712e:	f10a 0a01 	add.w	sl, sl, #1
 8017132:	9304      	str	r3, [sp, #16]
 8017134:	9307      	str	r3, [sp, #28]
 8017136:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801713a:	931a      	str	r3, [sp, #104]	@ 0x68
 801713c:	4654      	mov	r4, sl
 801713e:	2205      	movs	r2, #5
 8017140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017144:	484e      	ldr	r0, [pc, #312]	@ (8017280 <_svfiprintf_r+0x1e4>)
 8017146:	f7e9 f863 	bl	8000210 <memchr>
 801714a:	9a04      	ldr	r2, [sp, #16]
 801714c:	b9d8      	cbnz	r0, 8017186 <_svfiprintf_r+0xea>
 801714e:	06d0      	lsls	r0, r2, #27
 8017150:	bf44      	itt	mi
 8017152:	2320      	movmi	r3, #32
 8017154:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017158:	0711      	lsls	r1, r2, #28
 801715a:	bf44      	itt	mi
 801715c:	232b      	movmi	r3, #43	@ 0x2b
 801715e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017162:	f89a 3000 	ldrb.w	r3, [sl]
 8017166:	2b2a      	cmp	r3, #42	@ 0x2a
 8017168:	d015      	beq.n	8017196 <_svfiprintf_r+0xfa>
 801716a:	9a07      	ldr	r2, [sp, #28]
 801716c:	4654      	mov	r4, sl
 801716e:	2000      	movs	r0, #0
 8017170:	f04f 0c0a 	mov.w	ip, #10
 8017174:	4621      	mov	r1, r4
 8017176:	f811 3b01 	ldrb.w	r3, [r1], #1
 801717a:	3b30      	subs	r3, #48	@ 0x30
 801717c:	2b09      	cmp	r3, #9
 801717e:	d94b      	bls.n	8017218 <_svfiprintf_r+0x17c>
 8017180:	b1b0      	cbz	r0, 80171b0 <_svfiprintf_r+0x114>
 8017182:	9207      	str	r2, [sp, #28]
 8017184:	e014      	b.n	80171b0 <_svfiprintf_r+0x114>
 8017186:	eba0 0308 	sub.w	r3, r0, r8
 801718a:	fa09 f303 	lsl.w	r3, r9, r3
 801718e:	4313      	orrs	r3, r2
 8017190:	9304      	str	r3, [sp, #16]
 8017192:	46a2      	mov	sl, r4
 8017194:	e7d2      	b.n	801713c <_svfiprintf_r+0xa0>
 8017196:	9b03      	ldr	r3, [sp, #12]
 8017198:	1d19      	adds	r1, r3, #4
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	9103      	str	r1, [sp, #12]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	bfbb      	ittet	lt
 80171a2:	425b      	neglt	r3, r3
 80171a4:	f042 0202 	orrlt.w	r2, r2, #2
 80171a8:	9307      	strge	r3, [sp, #28]
 80171aa:	9307      	strlt	r3, [sp, #28]
 80171ac:	bfb8      	it	lt
 80171ae:	9204      	strlt	r2, [sp, #16]
 80171b0:	7823      	ldrb	r3, [r4, #0]
 80171b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80171b4:	d10a      	bne.n	80171cc <_svfiprintf_r+0x130>
 80171b6:	7863      	ldrb	r3, [r4, #1]
 80171b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80171ba:	d132      	bne.n	8017222 <_svfiprintf_r+0x186>
 80171bc:	9b03      	ldr	r3, [sp, #12]
 80171be:	1d1a      	adds	r2, r3, #4
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	9203      	str	r2, [sp, #12]
 80171c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80171c8:	3402      	adds	r4, #2
 80171ca:	9305      	str	r3, [sp, #20]
 80171cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017290 <_svfiprintf_r+0x1f4>
 80171d0:	7821      	ldrb	r1, [r4, #0]
 80171d2:	2203      	movs	r2, #3
 80171d4:	4650      	mov	r0, sl
 80171d6:	f7e9 f81b 	bl	8000210 <memchr>
 80171da:	b138      	cbz	r0, 80171ec <_svfiprintf_r+0x150>
 80171dc:	9b04      	ldr	r3, [sp, #16]
 80171de:	eba0 000a 	sub.w	r0, r0, sl
 80171e2:	2240      	movs	r2, #64	@ 0x40
 80171e4:	4082      	lsls	r2, r0
 80171e6:	4313      	orrs	r3, r2
 80171e8:	3401      	adds	r4, #1
 80171ea:	9304      	str	r3, [sp, #16]
 80171ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171f0:	4824      	ldr	r0, [pc, #144]	@ (8017284 <_svfiprintf_r+0x1e8>)
 80171f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80171f6:	2206      	movs	r2, #6
 80171f8:	f7e9 f80a 	bl	8000210 <memchr>
 80171fc:	2800      	cmp	r0, #0
 80171fe:	d036      	beq.n	801726e <_svfiprintf_r+0x1d2>
 8017200:	4b21      	ldr	r3, [pc, #132]	@ (8017288 <_svfiprintf_r+0x1ec>)
 8017202:	bb1b      	cbnz	r3, 801724c <_svfiprintf_r+0x1b0>
 8017204:	9b03      	ldr	r3, [sp, #12]
 8017206:	3307      	adds	r3, #7
 8017208:	f023 0307 	bic.w	r3, r3, #7
 801720c:	3308      	adds	r3, #8
 801720e:	9303      	str	r3, [sp, #12]
 8017210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017212:	4433      	add	r3, r6
 8017214:	9309      	str	r3, [sp, #36]	@ 0x24
 8017216:	e76a      	b.n	80170ee <_svfiprintf_r+0x52>
 8017218:	fb0c 3202 	mla	r2, ip, r2, r3
 801721c:	460c      	mov	r4, r1
 801721e:	2001      	movs	r0, #1
 8017220:	e7a8      	b.n	8017174 <_svfiprintf_r+0xd8>
 8017222:	2300      	movs	r3, #0
 8017224:	3401      	adds	r4, #1
 8017226:	9305      	str	r3, [sp, #20]
 8017228:	4619      	mov	r1, r3
 801722a:	f04f 0c0a 	mov.w	ip, #10
 801722e:	4620      	mov	r0, r4
 8017230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017234:	3a30      	subs	r2, #48	@ 0x30
 8017236:	2a09      	cmp	r2, #9
 8017238:	d903      	bls.n	8017242 <_svfiprintf_r+0x1a6>
 801723a:	2b00      	cmp	r3, #0
 801723c:	d0c6      	beq.n	80171cc <_svfiprintf_r+0x130>
 801723e:	9105      	str	r1, [sp, #20]
 8017240:	e7c4      	b.n	80171cc <_svfiprintf_r+0x130>
 8017242:	fb0c 2101 	mla	r1, ip, r1, r2
 8017246:	4604      	mov	r4, r0
 8017248:	2301      	movs	r3, #1
 801724a:	e7f0      	b.n	801722e <_svfiprintf_r+0x192>
 801724c:	ab03      	add	r3, sp, #12
 801724e:	9300      	str	r3, [sp, #0]
 8017250:	462a      	mov	r2, r5
 8017252:	4b0e      	ldr	r3, [pc, #56]	@ (801728c <_svfiprintf_r+0x1f0>)
 8017254:	a904      	add	r1, sp, #16
 8017256:	4638      	mov	r0, r7
 8017258:	f7fc fd04 	bl	8013c64 <_printf_float>
 801725c:	1c42      	adds	r2, r0, #1
 801725e:	4606      	mov	r6, r0
 8017260:	d1d6      	bne.n	8017210 <_svfiprintf_r+0x174>
 8017262:	89ab      	ldrh	r3, [r5, #12]
 8017264:	065b      	lsls	r3, r3, #25
 8017266:	f53f af2d 	bmi.w	80170c4 <_svfiprintf_r+0x28>
 801726a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801726c:	e72c      	b.n	80170c8 <_svfiprintf_r+0x2c>
 801726e:	ab03      	add	r3, sp, #12
 8017270:	9300      	str	r3, [sp, #0]
 8017272:	462a      	mov	r2, r5
 8017274:	4b05      	ldr	r3, [pc, #20]	@ (801728c <_svfiprintf_r+0x1f0>)
 8017276:	a904      	add	r1, sp, #16
 8017278:	4638      	mov	r0, r7
 801727a:	f7fc ff8b 	bl	8014194 <_printf_i>
 801727e:	e7ed      	b.n	801725c <_svfiprintf_r+0x1c0>
 8017280:	0801ad41 	.word	0x0801ad41
 8017284:	0801ad4b 	.word	0x0801ad4b
 8017288:	08013c65 	.word	0x08013c65
 801728c:	08016fe5 	.word	0x08016fe5
 8017290:	0801ad47 	.word	0x0801ad47

08017294 <_sungetc_r>:
 8017294:	b538      	push	{r3, r4, r5, lr}
 8017296:	1c4b      	adds	r3, r1, #1
 8017298:	4614      	mov	r4, r2
 801729a:	d103      	bne.n	80172a4 <_sungetc_r+0x10>
 801729c:	f04f 35ff 	mov.w	r5, #4294967295
 80172a0:	4628      	mov	r0, r5
 80172a2:	bd38      	pop	{r3, r4, r5, pc}
 80172a4:	8993      	ldrh	r3, [r2, #12]
 80172a6:	f023 0320 	bic.w	r3, r3, #32
 80172aa:	8193      	strh	r3, [r2, #12]
 80172ac:	6853      	ldr	r3, [r2, #4]
 80172ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80172b0:	b2cd      	uxtb	r5, r1
 80172b2:	b18a      	cbz	r2, 80172d8 <_sungetc_r+0x44>
 80172b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80172b6:	429a      	cmp	r2, r3
 80172b8:	dd08      	ble.n	80172cc <_sungetc_r+0x38>
 80172ba:	6823      	ldr	r3, [r4, #0]
 80172bc:	1e5a      	subs	r2, r3, #1
 80172be:	6022      	str	r2, [r4, #0]
 80172c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80172c4:	6863      	ldr	r3, [r4, #4]
 80172c6:	3301      	adds	r3, #1
 80172c8:	6063      	str	r3, [r4, #4]
 80172ca:	e7e9      	b.n	80172a0 <_sungetc_r+0xc>
 80172cc:	4621      	mov	r1, r4
 80172ce:	f000 fbe0 	bl	8017a92 <__submore>
 80172d2:	2800      	cmp	r0, #0
 80172d4:	d0f1      	beq.n	80172ba <_sungetc_r+0x26>
 80172d6:	e7e1      	b.n	801729c <_sungetc_r+0x8>
 80172d8:	6921      	ldr	r1, [r4, #16]
 80172da:	6822      	ldr	r2, [r4, #0]
 80172dc:	b141      	cbz	r1, 80172f0 <_sungetc_r+0x5c>
 80172de:	4291      	cmp	r1, r2
 80172e0:	d206      	bcs.n	80172f0 <_sungetc_r+0x5c>
 80172e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80172e6:	42a9      	cmp	r1, r5
 80172e8:	d102      	bne.n	80172f0 <_sungetc_r+0x5c>
 80172ea:	3a01      	subs	r2, #1
 80172ec:	6022      	str	r2, [r4, #0]
 80172ee:	e7ea      	b.n	80172c6 <_sungetc_r+0x32>
 80172f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80172f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80172f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80172fa:	2303      	movs	r3, #3
 80172fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80172fe:	4623      	mov	r3, r4
 8017300:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017304:	6023      	str	r3, [r4, #0]
 8017306:	2301      	movs	r3, #1
 8017308:	e7de      	b.n	80172c8 <_sungetc_r+0x34>

0801730a <__ssrefill_r>:
 801730a:	b510      	push	{r4, lr}
 801730c:	460c      	mov	r4, r1
 801730e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017310:	b169      	cbz	r1, 801732e <__ssrefill_r+0x24>
 8017312:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017316:	4299      	cmp	r1, r3
 8017318:	d001      	beq.n	801731e <__ssrefill_r+0x14>
 801731a:	f7fe fad9 	bl	80158d0 <_free_r>
 801731e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017320:	6063      	str	r3, [r4, #4]
 8017322:	2000      	movs	r0, #0
 8017324:	6360      	str	r0, [r4, #52]	@ 0x34
 8017326:	b113      	cbz	r3, 801732e <__ssrefill_r+0x24>
 8017328:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801732a:	6023      	str	r3, [r4, #0]
 801732c:	bd10      	pop	{r4, pc}
 801732e:	6923      	ldr	r3, [r4, #16]
 8017330:	6023      	str	r3, [r4, #0]
 8017332:	2300      	movs	r3, #0
 8017334:	6063      	str	r3, [r4, #4]
 8017336:	89a3      	ldrh	r3, [r4, #12]
 8017338:	f043 0320 	orr.w	r3, r3, #32
 801733c:	81a3      	strh	r3, [r4, #12]
 801733e:	f04f 30ff 	mov.w	r0, #4294967295
 8017342:	e7f3      	b.n	801732c <__ssrefill_r+0x22>

08017344 <__ssvfiscanf_r>:
 8017344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017348:	460c      	mov	r4, r1
 801734a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801734e:	2100      	movs	r1, #0
 8017350:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8017354:	49a5      	ldr	r1, [pc, #660]	@ (80175ec <__ssvfiscanf_r+0x2a8>)
 8017356:	91a0      	str	r1, [sp, #640]	@ 0x280
 8017358:	f10d 0804 	add.w	r8, sp, #4
 801735c:	49a4      	ldr	r1, [pc, #656]	@ (80175f0 <__ssvfiscanf_r+0x2ac>)
 801735e:	4fa5      	ldr	r7, [pc, #660]	@ (80175f4 <__ssvfiscanf_r+0x2b0>)
 8017360:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8017364:	4606      	mov	r6, r0
 8017366:	91a1      	str	r1, [sp, #644]	@ 0x284
 8017368:	9300      	str	r3, [sp, #0]
 801736a:	7813      	ldrb	r3, [r2, #0]
 801736c:	2b00      	cmp	r3, #0
 801736e:	f000 8158 	beq.w	8017622 <__ssvfiscanf_r+0x2de>
 8017372:	5cf9      	ldrb	r1, [r7, r3]
 8017374:	f011 0108 	ands.w	r1, r1, #8
 8017378:	f102 0501 	add.w	r5, r2, #1
 801737c:	d019      	beq.n	80173b2 <__ssvfiscanf_r+0x6e>
 801737e:	6863      	ldr	r3, [r4, #4]
 8017380:	2b00      	cmp	r3, #0
 8017382:	dd0f      	ble.n	80173a4 <__ssvfiscanf_r+0x60>
 8017384:	6823      	ldr	r3, [r4, #0]
 8017386:	781a      	ldrb	r2, [r3, #0]
 8017388:	5cba      	ldrb	r2, [r7, r2]
 801738a:	0712      	lsls	r2, r2, #28
 801738c:	d401      	bmi.n	8017392 <__ssvfiscanf_r+0x4e>
 801738e:	462a      	mov	r2, r5
 8017390:	e7eb      	b.n	801736a <__ssvfiscanf_r+0x26>
 8017392:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017394:	3201      	adds	r2, #1
 8017396:	9245      	str	r2, [sp, #276]	@ 0x114
 8017398:	6862      	ldr	r2, [r4, #4]
 801739a:	3301      	adds	r3, #1
 801739c:	3a01      	subs	r2, #1
 801739e:	6062      	str	r2, [r4, #4]
 80173a0:	6023      	str	r3, [r4, #0]
 80173a2:	e7ec      	b.n	801737e <__ssvfiscanf_r+0x3a>
 80173a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80173a6:	4621      	mov	r1, r4
 80173a8:	4630      	mov	r0, r6
 80173aa:	4798      	blx	r3
 80173ac:	2800      	cmp	r0, #0
 80173ae:	d0e9      	beq.n	8017384 <__ssvfiscanf_r+0x40>
 80173b0:	e7ed      	b.n	801738e <__ssvfiscanf_r+0x4a>
 80173b2:	2b25      	cmp	r3, #37	@ 0x25
 80173b4:	d012      	beq.n	80173dc <__ssvfiscanf_r+0x98>
 80173b6:	4699      	mov	r9, r3
 80173b8:	6863      	ldr	r3, [r4, #4]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	f340 8093 	ble.w	80174e6 <__ssvfiscanf_r+0x1a2>
 80173c0:	6822      	ldr	r2, [r4, #0]
 80173c2:	7813      	ldrb	r3, [r2, #0]
 80173c4:	454b      	cmp	r3, r9
 80173c6:	f040 812c 	bne.w	8017622 <__ssvfiscanf_r+0x2de>
 80173ca:	6863      	ldr	r3, [r4, #4]
 80173cc:	3b01      	subs	r3, #1
 80173ce:	6063      	str	r3, [r4, #4]
 80173d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80173d2:	3201      	adds	r2, #1
 80173d4:	3301      	adds	r3, #1
 80173d6:	6022      	str	r2, [r4, #0]
 80173d8:	9345      	str	r3, [sp, #276]	@ 0x114
 80173da:	e7d8      	b.n	801738e <__ssvfiscanf_r+0x4a>
 80173dc:	9141      	str	r1, [sp, #260]	@ 0x104
 80173de:	9143      	str	r1, [sp, #268]	@ 0x10c
 80173e0:	7853      	ldrb	r3, [r2, #1]
 80173e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80173e4:	bf02      	ittt	eq
 80173e6:	2310      	moveq	r3, #16
 80173e8:	1c95      	addeq	r5, r2, #2
 80173ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 80173ec:	220a      	movs	r2, #10
 80173ee:	46a9      	mov	r9, r5
 80173f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 80173f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80173f8:	2b09      	cmp	r3, #9
 80173fa:	d91e      	bls.n	801743a <__ssvfiscanf_r+0xf6>
 80173fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80175f8 <__ssvfiscanf_r+0x2b4>
 8017400:	2203      	movs	r2, #3
 8017402:	4650      	mov	r0, sl
 8017404:	f7e8 ff04 	bl	8000210 <memchr>
 8017408:	b138      	cbz	r0, 801741a <__ssvfiscanf_r+0xd6>
 801740a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801740c:	eba0 000a 	sub.w	r0, r0, sl
 8017410:	2301      	movs	r3, #1
 8017412:	4083      	lsls	r3, r0
 8017414:	4313      	orrs	r3, r2
 8017416:	9341      	str	r3, [sp, #260]	@ 0x104
 8017418:	464d      	mov	r5, r9
 801741a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801741e:	2b78      	cmp	r3, #120	@ 0x78
 8017420:	d806      	bhi.n	8017430 <__ssvfiscanf_r+0xec>
 8017422:	2b57      	cmp	r3, #87	@ 0x57
 8017424:	d810      	bhi.n	8017448 <__ssvfiscanf_r+0x104>
 8017426:	2b25      	cmp	r3, #37	@ 0x25
 8017428:	d0c5      	beq.n	80173b6 <__ssvfiscanf_r+0x72>
 801742a:	d857      	bhi.n	80174dc <__ssvfiscanf_r+0x198>
 801742c:	2b00      	cmp	r3, #0
 801742e:	d065      	beq.n	80174fc <__ssvfiscanf_r+0x1b8>
 8017430:	2303      	movs	r3, #3
 8017432:	9347      	str	r3, [sp, #284]	@ 0x11c
 8017434:	230a      	movs	r3, #10
 8017436:	9342      	str	r3, [sp, #264]	@ 0x108
 8017438:	e078      	b.n	801752c <__ssvfiscanf_r+0x1e8>
 801743a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801743c:	fb02 1103 	mla	r1, r2, r3, r1
 8017440:	3930      	subs	r1, #48	@ 0x30
 8017442:	9143      	str	r1, [sp, #268]	@ 0x10c
 8017444:	464d      	mov	r5, r9
 8017446:	e7d2      	b.n	80173ee <__ssvfiscanf_r+0xaa>
 8017448:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801744c:	2a20      	cmp	r2, #32
 801744e:	d8ef      	bhi.n	8017430 <__ssvfiscanf_r+0xec>
 8017450:	a101      	add	r1, pc, #4	@ (adr r1, 8017458 <__ssvfiscanf_r+0x114>)
 8017452:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017456:	bf00      	nop
 8017458:	0801750b 	.word	0x0801750b
 801745c:	08017431 	.word	0x08017431
 8017460:	08017431 	.word	0x08017431
 8017464:	08017565 	.word	0x08017565
 8017468:	08017431 	.word	0x08017431
 801746c:	08017431 	.word	0x08017431
 8017470:	08017431 	.word	0x08017431
 8017474:	08017431 	.word	0x08017431
 8017478:	08017431 	.word	0x08017431
 801747c:	08017431 	.word	0x08017431
 8017480:	08017431 	.word	0x08017431
 8017484:	0801757b 	.word	0x0801757b
 8017488:	08017561 	.word	0x08017561
 801748c:	080174e3 	.word	0x080174e3
 8017490:	080174e3 	.word	0x080174e3
 8017494:	080174e3 	.word	0x080174e3
 8017498:	08017431 	.word	0x08017431
 801749c:	0801751d 	.word	0x0801751d
 80174a0:	08017431 	.word	0x08017431
 80174a4:	08017431 	.word	0x08017431
 80174a8:	08017431 	.word	0x08017431
 80174ac:	08017431 	.word	0x08017431
 80174b0:	0801758b 	.word	0x0801758b
 80174b4:	08017525 	.word	0x08017525
 80174b8:	08017503 	.word	0x08017503
 80174bc:	08017431 	.word	0x08017431
 80174c0:	08017431 	.word	0x08017431
 80174c4:	08017587 	.word	0x08017587
 80174c8:	08017431 	.word	0x08017431
 80174cc:	08017561 	.word	0x08017561
 80174d0:	08017431 	.word	0x08017431
 80174d4:	08017431 	.word	0x08017431
 80174d8:	0801750b 	.word	0x0801750b
 80174dc:	3b45      	subs	r3, #69	@ 0x45
 80174de:	2b02      	cmp	r3, #2
 80174e0:	d8a6      	bhi.n	8017430 <__ssvfiscanf_r+0xec>
 80174e2:	2305      	movs	r3, #5
 80174e4:	e021      	b.n	801752a <__ssvfiscanf_r+0x1e6>
 80174e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80174e8:	4621      	mov	r1, r4
 80174ea:	4630      	mov	r0, r6
 80174ec:	4798      	blx	r3
 80174ee:	2800      	cmp	r0, #0
 80174f0:	f43f af66 	beq.w	80173c0 <__ssvfiscanf_r+0x7c>
 80174f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80174f6:	2800      	cmp	r0, #0
 80174f8:	f040 808b 	bne.w	8017612 <__ssvfiscanf_r+0x2ce>
 80174fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017500:	e08b      	b.n	801761a <__ssvfiscanf_r+0x2d6>
 8017502:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8017504:	f042 0220 	orr.w	r2, r2, #32
 8017508:	9241      	str	r2, [sp, #260]	@ 0x104
 801750a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801750c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017510:	9241      	str	r2, [sp, #260]	@ 0x104
 8017512:	2210      	movs	r2, #16
 8017514:	2b6e      	cmp	r3, #110	@ 0x6e
 8017516:	9242      	str	r2, [sp, #264]	@ 0x108
 8017518:	d902      	bls.n	8017520 <__ssvfiscanf_r+0x1dc>
 801751a:	e005      	b.n	8017528 <__ssvfiscanf_r+0x1e4>
 801751c:	2300      	movs	r3, #0
 801751e:	9342      	str	r3, [sp, #264]	@ 0x108
 8017520:	2303      	movs	r3, #3
 8017522:	e002      	b.n	801752a <__ssvfiscanf_r+0x1e6>
 8017524:	2308      	movs	r3, #8
 8017526:	9342      	str	r3, [sp, #264]	@ 0x108
 8017528:	2304      	movs	r3, #4
 801752a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801752c:	6863      	ldr	r3, [r4, #4]
 801752e:	2b00      	cmp	r3, #0
 8017530:	dd39      	ble.n	80175a6 <__ssvfiscanf_r+0x262>
 8017532:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8017534:	0659      	lsls	r1, r3, #25
 8017536:	d404      	bmi.n	8017542 <__ssvfiscanf_r+0x1fe>
 8017538:	6823      	ldr	r3, [r4, #0]
 801753a:	781a      	ldrb	r2, [r3, #0]
 801753c:	5cba      	ldrb	r2, [r7, r2]
 801753e:	0712      	lsls	r2, r2, #28
 8017540:	d438      	bmi.n	80175b4 <__ssvfiscanf_r+0x270>
 8017542:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8017544:	2b02      	cmp	r3, #2
 8017546:	dc47      	bgt.n	80175d8 <__ssvfiscanf_r+0x294>
 8017548:	466b      	mov	r3, sp
 801754a:	4622      	mov	r2, r4
 801754c:	a941      	add	r1, sp, #260	@ 0x104
 801754e:	4630      	mov	r0, r6
 8017550:	f000 f86c 	bl	801762c <_scanf_chars>
 8017554:	2801      	cmp	r0, #1
 8017556:	d064      	beq.n	8017622 <__ssvfiscanf_r+0x2de>
 8017558:	2802      	cmp	r0, #2
 801755a:	f47f af18 	bne.w	801738e <__ssvfiscanf_r+0x4a>
 801755e:	e7c9      	b.n	80174f4 <__ssvfiscanf_r+0x1b0>
 8017560:	220a      	movs	r2, #10
 8017562:	e7d7      	b.n	8017514 <__ssvfiscanf_r+0x1d0>
 8017564:	4629      	mov	r1, r5
 8017566:	4640      	mov	r0, r8
 8017568:	f000 fa5a 	bl	8017a20 <__sccl>
 801756c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801756e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017572:	9341      	str	r3, [sp, #260]	@ 0x104
 8017574:	4605      	mov	r5, r0
 8017576:	2301      	movs	r3, #1
 8017578:	e7d7      	b.n	801752a <__ssvfiscanf_r+0x1e6>
 801757a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801757c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017580:	9341      	str	r3, [sp, #260]	@ 0x104
 8017582:	2300      	movs	r3, #0
 8017584:	e7d1      	b.n	801752a <__ssvfiscanf_r+0x1e6>
 8017586:	2302      	movs	r3, #2
 8017588:	e7cf      	b.n	801752a <__ssvfiscanf_r+0x1e6>
 801758a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801758c:	06c3      	lsls	r3, r0, #27
 801758e:	f53f aefe 	bmi.w	801738e <__ssvfiscanf_r+0x4a>
 8017592:	9b00      	ldr	r3, [sp, #0]
 8017594:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8017596:	1d19      	adds	r1, r3, #4
 8017598:	9100      	str	r1, [sp, #0]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	07c0      	lsls	r0, r0, #31
 801759e:	bf4c      	ite	mi
 80175a0:	801a      	strhmi	r2, [r3, #0]
 80175a2:	601a      	strpl	r2, [r3, #0]
 80175a4:	e6f3      	b.n	801738e <__ssvfiscanf_r+0x4a>
 80175a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80175a8:	4621      	mov	r1, r4
 80175aa:	4630      	mov	r0, r6
 80175ac:	4798      	blx	r3
 80175ae:	2800      	cmp	r0, #0
 80175b0:	d0bf      	beq.n	8017532 <__ssvfiscanf_r+0x1ee>
 80175b2:	e79f      	b.n	80174f4 <__ssvfiscanf_r+0x1b0>
 80175b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80175b6:	3201      	adds	r2, #1
 80175b8:	9245      	str	r2, [sp, #276]	@ 0x114
 80175ba:	6862      	ldr	r2, [r4, #4]
 80175bc:	3a01      	subs	r2, #1
 80175be:	2a00      	cmp	r2, #0
 80175c0:	6062      	str	r2, [r4, #4]
 80175c2:	dd02      	ble.n	80175ca <__ssvfiscanf_r+0x286>
 80175c4:	3301      	adds	r3, #1
 80175c6:	6023      	str	r3, [r4, #0]
 80175c8:	e7b6      	b.n	8017538 <__ssvfiscanf_r+0x1f4>
 80175ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80175cc:	4621      	mov	r1, r4
 80175ce:	4630      	mov	r0, r6
 80175d0:	4798      	blx	r3
 80175d2:	2800      	cmp	r0, #0
 80175d4:	d0b0      	beq.n	8017538 <__ssvfiscanf_r+0x1f4>
 80175d6:	e78d      	b.n	80174f4 <__ssvfiscanf_r+0x1b0>
 80175d8:	2b04      	cmp	r3, #4
 80175da:	dc0f      	bgt.n	80175fc <__ssvfiscanf_r+0x2b8>
 80175dc:	466b      	mov	r3, sp
 80175de:	4622      	mov	r2, r4
 80175e0:	a941      	add	r1, sp, #260	@ 0x104
 80175e2:	4630      	mov	r0, r6
 80175e4:	f000 f87c 	bl	80176e0 <_scanf_i>
 80175e8:	e7b4      	b.n	8017554 <__ssvfiscanf_r+0x210>
 80175ea:	bf00      	nop
 80175ec:	08017295 	.word	0x08017295
 80175f0:	0801730b 	.word	0x0801730b
 80175f4:	0801ac41 	.word	0x0801ac41
 80175f8:	0801ad47 	.word	0x0801ad47
 80175fc:	4b0a      	ldr	r3, [pc, #40]	@ (8017628 <__ssvfiscanf_r+0x2e4>)
 80175fe:	2b00      	cmp	r3, #0
 8017600:	f43f aec5 	beq.w	801738e <__ssvfiscanf_r+0x4a>
 8017604:	466b      	mov	r3, sp
 8017606:	4622      	mov	r2, r4
 8017608:	a941      	add	r1, sp, #260	@ 0x104
 801760a:	4630      	mov	r0, r6
 801760c:	f7fc fee2 	bl	80143d4 <_scanf_float>
 8017610:	e7a0      	b.n	8017554 <__ssvfiscanf_r+0x210>
 8017612:	89a3      	ldrh	r3, [r4, #12]
 8017614:	065b      	lsls	r3, r3, #25
 8017616:	f53f af71 	bmi.w	80174fc <__ssvfiscanf_r+0x1b8>
 801761a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801761e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017622:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8017624:	e7f9      	b.n	801761a <__ssvfiscanf_r+0x2d6>
 8017626:	bf00      	nop
 8017628:	080143d5 	.word	0x080143d5

0801762c <_scanf_chars>:
 801762c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017630:	4615      	mov	r5, r2
 8017632:	688a      	ldr	r2, [r1, #8]
 8017634:	4680      	mov	r8, r0
 8017636:	460c      	mov	r4, r1
 8017638:	b932      	cbnz	r2, 8017648 <_scanf_chars+0x1c>
 801763a:	698a      	ldr	r2, [r1, #24]
 801763c:	2a00      	cmp	r2, #0
 801763e:	bf14      	ite	ne
 8017640:	f04f 32ff 	movne.w	r2, #4294967295
 8017644:	2201      	moveq	r2, #1
 8017646:	608a      	str	r2, [r1, #8]
 8017648:	6822      	ldr	r2, [r4, #0]
 801764a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80176dc <_scanf_chars+0xb0>
 801764e:	06d1      	lsls	r1, r2, #27
 8017650:	bf5f      	itttt	pl
 8017652:	681a      	ldrpl	r2, [r3, #0]
 8017654:	1d11      	addpl	r1, r2, #4
 8017656:	6019      	strpl	r1, [r3, #0]
 8017658:	6816      	ldrpl	r6, [r2, #0]
 801765a:	2700      	movs	r7, #0
 801765c:	69a0      	ldr	r0, [r4, #24]
 801765e:	b188      	cbz	r0, 8017684 <_scanf_chars+0x58>
 8017660:	2801      	cmp	r0, #1
 8017662:	d107      	bne.n	8017674 <_scanf_chars+0x48>
 8017664:	682b      	ldr	r3, [r5, #0]
 8017666:	781a      	ldrb	r2, [r3, #0]
 8017668:	6963      	ldr	r3, [r4, #20]
 801766a:	5c9b      	ldrb	r3, [r3, r2]
 801766c:	b953      	cbnz	r3, 8017684 <_scanf_chars+0x58>
 801766e:	2f00      	cmp	r7, #0
 8017670:	d031      	beq.n	80176d6 <_scanf_chars+0xaa>
 8017672:	e022      	b.n	80176ba <_scanf_chars+0x8e>
 8017674:	2802      	cmp	r0, #2
 8017676:	d120      	bne.n	80176ba <_scanf_chars+0x8e>
 8017678:	682b      	ldr	r3, [r5, #0]
 801767a:	781b      	ldrb	r3, [r3, #0]
 801767c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017680:	071b      	lsls	r3, r3, #28
 8017682:	d41a      	bmi.n	80176ba <_scanf_chars+0x8e>
 8017684:	6823      	ldr	r3, [r4, #0]
 8017686:	06da      	lsls	r2, r3, #27
 8017688:	bf5e      	ittt	pl
 801768a:	682b      	ldrpl	r3, [r5, #0]
 801768c:	781b      	ldrbpl	r3, [r3, #0]
 801768e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017692:	682a      	ldr	r2, [r5, #0]
 8017694:	686b      	ldr	r3, [r5, #4]
 8017696:	3201      	adds	r2, #1
 8017698:	602a      	str	r2, [r5, #0]
 801769a:	68a2      	ldr	r2, [r4, #8]
 801769c:	3b01      	subs	r3, #1
 801769e:	3a01      	subs	r2, #1
 80176a0:	606b      	str	r3, [r5, #4]
 80176a2:	3701      	adds	r7, #1
 80176a4:	60a2      	str	r2, [r4, #8]
 80176a6:	b142      	cbz	r2, 80176ba <_scanf_chars+0x8e>
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	dcd7      	bgt.n	801765c <_scanf_chars+0x30>
 80176ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80176b0:	4629      	mov	r1, r5
 80176b2:	4640      	mov	r0, r8
 80176b4:	4798      	blx	r3
 80176b6:	2800      	cmp	r0, #0
 80176b8:	d0d0      	beq.n	801765c <_scanf_chars+0x30>
 80176ba:	6823      	ldr	r3, [r4, #0]
 80176bc:	f013 0310 	ands.w	r3, r3, #16
 80176c0:	d105      	bne.n	80176ce <_scanf_chars+0xa2>
 80176c2:	68e2      	ldr	r2, [r4, #12]
 80176c4:	3201      	adds	r2, #1
 80176c6:	60e2      	str	r2, [r4, #12]
 80176c8:	69a2      	ldr	r2, [r4, #24]
 80176ca:	b102      	cbz	r2, 80176ce <_scanf_chars+0xa2>
 80176cc:	7033      	strb	r3, [r6, #0]
 80176ce:	6923      	ldr	r3, [r4, #16]
 80176d0:	443b      	add	r3, r7
 80176d2:	6123      	str	r3, [r4, #16]
 80176d4:	2000      	movs	r0, #0
 80176d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80176da:	bf00      	nop
 80176dc:	0801ac41 	.word	0x0801ac41

080176e0 <_scanf_i>:
 80176e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176e4:	4698      	mov	r8, r3
 80176e6:	4b74      	ldr	r3, [pc, #464]	@ (80178b8 <_scanf_i+0x1d8>)
 80176e8:	460c      	mov	r4, r1
 80176ea:	4682      	mov	sl, r0
 80176ec:	4616      	mov	r6, r2
 80176ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80176f2:	b087      	sub	sp, #28
 80176f4:	ab03      	add	r3, sp, #12
 80176f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80176fa:	4b70      	ldr	r3, [pc, #448]	@ (80178bc <_scanf_i+0x1dc>)
 80176fc:	69a1      	ldr	r1, [r4, #24]
 80176fe:	4a70      	ldr	r2, [pc, #448]	@ (80178c0 <_scanf_i+0x1e0>)
 8017700:	2903      	cmp	r1, #3
 8017702:	bf08      	it	eq
 8017704:	461a      	moveq	r2, r3
 8017706:	68a3      	ldr	r3, [r4, #8]
 8017708:	9201      	str	r2, [sp, #4]
 801770a:	1e5a      	subs	r2, r3, #1
 801770c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8017710:	bf88      	it	hi
 8017712:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8017716:	4627      	mov	r7, r4
 8017718:	bf82      	ittt	hi
 801771a:	eb03 0905 	addhi.w	r9, r3, r5
 801771e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8017722:	60a3      	strhi	r3, [r4, #8]
 8017724:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017728:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801772c:	bf98      	it	ls
 801772e:	f04f 0900 	movls.w	r9, #0
 8017732:	6023      	str	r3, [r4, #0]
 8017734:	463d      	mov	r5, r7
 8017736:	f04f 0b00 	mov.w	fp, #0
 801773a:	6831      	ldr	r1, [r6, #0]
 801773c:	ab03      	add	r3, sp, #12
 801773e:	7809      	ldrb	r1, [r1, #0]
 8017740:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017744:	2202      	movs	r2, #2
 8017746:	f7e8 fd63 	bl	8000210 <memchr>
 801774a:	b328      	cbz	r0, 8017798 <_scanf_i+0xb8>
 801774c:	f1bb 0f01 	cmp.w	fp, #1
 8017750:	d159      	bne.n	8017806 <_scanf_i+0x126>
 8017752:	6862      	ldr	r2, [r4, #4]
 8017754:	b92a      	cbnz	r2, 8017762 <_scanf_i+0x82>
 8017756:	6822      	ldr	r2, [r4, #0]
 8017758:	2108      	movs	r1, #8
 801775a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801775e:	6061      	str	r1, [r4, #4]
 8017760:	6022      	str	r2, [r4, #0]
 8017762:	6822      	ldr	r2, [r4, #0]
 8017764:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8017768:	6022      	str	r2, [r4, #0]
 801776a:	68a2      	ldr	r2, [r4, #8]
 801776c:	1e51      	subs	r1, r2, #1
 801776e:	60a1      	str	r1, [r4, #8]
 8017770:	b192      	cbz	r2, 8017798 <_scanf_i+0xb8>
 8017772:	6832      	ldr	r2, [r6, #0]
 8017774:	1c51      	adds	r1, r2, #1
 8017776:	6031      	str	r1, [r6, #0]
 8017778:	7812      	ldrb	r2, [r2, #0]
 801777a:	f805 2b01 	strb.w	r2, [r5], #1
 801777e:	6872      	ldr	r2, [r6, #4]
 8017780:	3a01      	subs	r2, #1
 8017782:	2a00      	cmp	r2, #0
 8017784:	6072      	str	r2, [r6, #4]
 8017786:	dc07      	bgt.n	8017798 <_scanf_i+0xb8>
 8017788:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801778c:	4631      	mov	r1, r6
 801778e:	4650      	mov	r0, sl
 8017790:	4790      	blx	r2
 8017792:	2800      	cmp	r0, #0
 8017794:	f040 8085 	bne.w	80178a2 <_scanf_i+0x1c2>
 8017798:	f10b 0b01 	add.w	fp, fp, #1
 801779c:	f1bb 0f03 	cmp.w	fp, #3
 80177a0:	d1cb      	bne.n	801773a <_scanf_i+0x5a>
 80177a2:	6863      	ldr	r3, [r4, #4]
 80177a4:	b90b      	cbnz	r3, 80177aa <_scanf_i+0xca>
 80177a6:	230a      	movs	r3, #10
 80177a8:	6063      	str	r3, [r4, #4]
 80177aa:	6863      	ldr	r3, [r4, #4]
 80177ac:	4945      	ldr	r1, [pc, #276]	@ (80178c4 <_scanf_i+0x1e4>)
 80177ae:	6960      	ldr	r0, [r4, #20]
 80177b0:	1ac9      	subs	r1, r1, r3
 80177b2:	f000 f935 	bl	8017a20 <__sccl>
 80177b6:	f04f 0b00 	mov.w	fp, #0
 80177ba:	68a3      	ldr	r3, [r4, #8]
 80177bc:	6822      	ldr	r2, [r4, #0]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d03d      	beq.n	801783e <_scanf_i+0x15e>
 80177c2:	6831      	ldr	r1, [r6, #0]
 80177c4:	6960      	ldr	r0, [r4, #20]
 80177c6:	f891 c000 	ldrb.w	ip, [r1]
 80177ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 80177ce:	2800      	cmp	r0, #0
 80177d0:	d035      	beq.n	801783e <_scanf_i+0x15e>
 80177d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80177d6:	d124      	bne.n	8017822 <_scanf_i+0x142>
 80177d8:	0510      	lsls	r0, r2, #20
 80177da:	d522      	bpl.n	8017822 <_scanf_i+0x142>
 80177dc:	f10b 0b01 	add.w	fp, fp, #1
 80177e0:	f1b9 0f00 	cmp.w	r9, #0
 80177e4:	d003      	beq.n	80177ee <_scanf_i+0x10e>
 80177e6:	3301      	adds	r3, #1
 80177e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80177ec:	60a3      	str	r3, [r4, #8]
 80177ee:	6873      	ldr	r3, [r6, #4]
 80177f0:	3b01      	subs	r3, #1
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	6073      	str	r3, [r6, #4]
 80177f6:	dd1b      	ble.n	8017830 <_scanf_i+0x150>
 80177f8:	6833      	ldr	r3, [r6, #0]
 80177fa:	3301      	adds	r3, #1
 80177fc:	6033      	str	r3, [r6, #0]
 80177fe:	68a3      	ldr	r3, [r4, #8]
 8017800:	3b01      	subs	r3, #1
 8017802:	60a3      	str	r3, [r4, #8]
 8017804:	e7d9      	b.n	80177ba <_scanf_i+0xda>
 8017806:	f1bb 0f02 	cmp.w	fp, #2
 801780a:	d1ae      	bne.n	801776a <_scanf_i+0x8a>
 801780c:	6822      	ldr	r2, [r4, #0]
 801780e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8017812:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8017816:	d1bf      	bne.n	8017798 <_scanf_i+0xb8>
 8017818:	2110      	movs	r1, #16
 801781a:	6061      	str	r1, [r4, #4]
 801781c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8017820:	e7a2      	b.n	8017768 <_scanf_i+0x88>
 8017822:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8017826:	6022      	str	r2, [r4, #0]
 8017828:	780b      	ldrb	r3, [r1, #0]
 801782a:	f805 3b01 	strb.w	r3, [r5], #1
 801782e:	e7de      	b.n	80177ee <_scanf_i+0x10e>
 8017830:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8017834:	4631      	mov	r1, r6
 8017836:	4650      	mov	r0, sl
 8017838:	4798      	blx	r3
 801783a:	2800      	cmp	r0, #0
 801783c:	d0df      	beq.n	80177fe <_scanf_i+0x11e>
 801783e:	6823      	ldr	r3, [r4, #0]
 8017840:	05d9      	lsls	r1, r3, #23
 8017842:	d50d      	bpl.n	8017860 <_scanf_i+0x180>
 8017844:	42bd      	cmp	r5, r7
 8017846:	d909      	bls.n	801785c <_scanf_i+0x17c>
 8017848:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801784c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8017850:	4632      	mov	r2, r6
 8017852:	4650      	mov	r0, sl
 8017854:	4798      	blx	r3
 8017856:	f105 39ff 	add.w	r9, r5, #4294967295
 801785a:	464d      	mov	r5, r9
 801785c:	42bd      	cmp	r5, r7
 801785e:	d028      	beq.n	80178b2 <_scanf_i+0x1d2>
 8017860:	6822      	ldr	r2, [r4, #0]
 8017862:	f012 0210 	ands.w	r2, r2, #16
 8017866:	d113      	bne.n	8017890 <_scanf_i+0x1b0>
 8017868:	702a      	strb	r2, [r5, #0]
 801786a:	6863      	ldr	r3, [r4, #4]
 801786c:	9e01      	ldr	r6, [sp, #4]
 801786e:	4639      	mov	r1, r7
 8017870:	4650      	mov	r0, sl
 8017872:	47b0      	blx	r6
 8017874:	f8d8 3000 	ldr.w	r3, [r8]
 8017878:	6821      	ldr	r1, [r4, #0]
 801787a:	1d1a      	adds	r2, r3, #4
 801787c:	f8c8 2000 	str.w	r2, [r8]
 8017880:	f011 0f20 	tst.w	r1, #32
 8017884:	681b      	ldr	r3, [r3, #0]
 8017886:	d00f      	beq.n	80178a8 <_scanf_i+0x1c8>
 8017888:	6018      	str	r0, [r3, #0]
 801788a:	68e3      	ldr	r3, [r4, #12]
 801788c:	3301      	adds	r3, #1
 801788e:	60e3      	str	r3, [r4, #12]
 8017890:	6923      	ldr	r3, [r4, #16]
 8017892:	1bed      	subs	r5, r5, r7
 8017894:	445d      	add	r5, fp
 8017896:	442b      	add	r3, r5
 8017898:	6123      	str	r3, [r4, #16]
 801789a:	2000      	movs	r0, #0
 801789c:	b007      	add	sp, #28
 801789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178a2:	f04f 0b00 	mov.w	fp, #0
 80178a6:	e7ca      	b.n	801783e <_scanf_i+0x15e>
 80178a8:	07ca      	lsls	r2, r1, #31
 80178aa:	bf4c      	ite	mi
 80178ac:	8018      	strhmi	r0, [r3, #0]
 80178ae:	6018      	strpl	r0, [r3, #0]
 80178b0:	e7eb      	b.n	801788a <_scanf_i+0x1aa>
 80178b2:	2001      	movs	r0, #1
 80178b4:	e7f2      	b.n	801789c <_scanf_i+0x1bc>
 80178b6:	bf00      	nop
 80178b8:	0801a920 	.word	0x0801a920
 80178bc:	08016fe1 	.word	0x08016fe1
 80178c0:	0801837d 	.word	0x0801837d
 80178c4:	0801ad62 	.word	0x0801ad62

080178c8 <__sflush_r>:
 80178c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80178cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178d0:	0716      	lsls	r6, r2, #28
 80178d2:	4605      	mov	r5, r0
 80178d4:	460c      	mov	r4, r1
 80178d6:	d454      	bmi.n	8017982 <__sflush_r+0xba>
 80178d8:	684b      	ldr	r3, [r1, #4]
 80178da:	2b00      	cmp	r3, #0
 80178dc:	dc02      	bgt.n	80178e4 <__sflush_r+0x1c>
 80178de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	dd48      	ble.n	8017976 <__sflush_r+0xae>
 80178e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80178e6:	2e00      	cmp	r6, #0
 80178e8:	d045      	beq.n	8017976 <__sflush_r+0xae>
 80178ea:	2300      	movs	r3, #0
 80178ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80178f0:	682f      	ldr	r7, [r5, #0]
 80178f2:	6a21      	ldr	r1, [r4, #32]
 80178f4:	602b      	str	r3, [r5, #0]
 80178f6:	d030      	beq.n	801795a <__sflush_r+0x92>
 80178f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80178fa:	89a3      	ldrh	r3, [r4, #12]
 80178fc:	0759      	lsls	r1, r3, #29
 80178fe:	d505      	bpl.n	801790c <__sflush_r+0x44>
 8017900:	6863      	ldr	r3, [r4, #4]
 8017902:	1ad2      	subs	r2, r2, r3
 8017904:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017906:	b10b      	cbz	r3, 801790c <__sflush_r+0x44>
 8017908:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801790a:	1ad2      	subs	r2, r2, r3
 801790c:	2300      	movs	r3, #0
 801790e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017910:	6a21      	ldr	r1, [r4, #32]
 8017912:	4628      	mov	r0, r5
 8017914:	47b0      	blx	r6
 8017916:	1c43      	adds	r3, r0, #1
 8017918:	89a3      	ldrh	r3, [r4, #12]
 801791a:	d106      	bne.n	801792a <__sflush_r+0x62>
 801791c:	6829      	ldr	r1, [r5, #0]
 801791e:	291d      	cmp	r1, #29
 8017920:	d82b      	bhi.n	801797a <__sflush_r+0xb2>
 8017922:	4a2a      	ldr	r2, [pc, #168]	@ (80179cc <__sflush_r+0x104>)
 8017924:	410a      	asrs	r2, r1
 8017926:	07d6      	lsls	r6, r2, #31
 8017928:	d427      	bmi.n	801797a <__sflush_r+0xb2>
 801792a:	2200      	movs	r2, #0
 801792c:	6062      	str	r2, [r4, #4]
 801792e:	04d9      	lsls	r1, r3, #19
 8017930:	6922      	ldr	r2, [r4, #16]
 8017932:	6022      	str	r2, [r4, #0]
 8017934:	d504      	bpl.n	8017940 <__sflush_r+0x78>
 8017936:	1c42      	adds	r2, r0, #1
 8017938:	d101      	bne.n	801793e <__sflush_r+0x76>
 801793a:	682b      	ldr	r3, [r5, #0]
 801793c:	b903      	cbnz	r3, 8017940 <__sflush_r+0x78>
 801793e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017940:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017942:	602f      	str	r7, [r5, #0]
 8017944:	b1b9      	cbz	r1, 8017976 <__sflush_r+0xae>
 8017946:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801794a:	4299      	cmp	r1, r3
 801794c:	d002      	beq.n	8017954 <__sflush_r+0x8c>
 801794e:	4628      	mov	r0, r5
 8017950:	f7fd ffbe 	bl	80158d0 <_free_r>
 8017954:	2300      	movs	r3, #0
 8017956:	6363      	str	r3, [r4, #52]	@ 0x34
 8017958:	e00d      	b.n	8017976 <__sflush_r+0xae>
 801795a:	2301      	movs	r3, #1
 801795c:	4628      	mov	r0, r5
 801795e:	47b0      	blx	r6
 8017960:	4602      	mov	r2, r0
 8017962:	1c50      	adds	r0, r2, #1
 8017964:	d1c9      	bne.n	80178fa <__sflush_r+0x32>
 8017966:	682b      	ldr	r3, [r5, #0]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d0c6      	beq.n	80178fa <__sflush_r+0x32>
 801796c:	2b1d      	cmp	r3, #29
 801796e:	d001      	beq.n	8017974 <__sflush_r+0xac>
 8017970:	2b16      	cmp	r3, #22
 8017972:	d11e      	bne.n	80179b2 <__sflush_r+0xea>
 8017974:	602f      	str	r7, [r5, #0]
 8017976:	2000      	movs	r0, #0
 8017978:	e022      	b.n	80179c0 <__sflush_r+0xf8>
 801797a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801797e:	b21b      	sxth	r3, r3
 8017980:	e01b      	b.n	80179ba <__sflush_r+0xf2>
 8017982:	690f      	ldr	r7, [r1, #16]
 8017984:	2f00      	cmp	r7, #0
 8017986:	d0f6      	beq.n	8017976 <__sflush_r+0xae>
 8017988:	0793      	lsls	r3, r2, #30
 801798a:	680e      	ldr	r6, [r1, #0]
 801798c:	bf08      	it	eq
 801798e:	694b      	ldreq	r3, [r1, #20]
 8017990:	600f      	str	r7, [r1, #0]
 8017992:	bf18      	it	ne
 8017994:	2300      	movne	r3, #0
 8017996:	eba6 0807 	sub.w	r8, r6, r7
 801799a:	608b      	str	r3, [r1, #8]
 801799c:	f1b8 0f00 	cmp.w	r8, #0
 80179a0:	dde9      	ble.n	8017976 <__sflush_r+0xae>
 80179a2:	6a21      	ldr	r1, [r4, #32]
 80179a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80179a6:	4643      	mov	r3, r8
 80179a8:	463a      	mov	r2, r7
 80179aa:	4628      	mov	r0, r5
 80179ac:	47b0      	blx	r6
 80179ae:	2800      	cmp	r0, #0
 80179b0:	dc08      	bgt.n	80179c4 <__sflush_r+0xfc>
 80179b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80179ba:	81a3      	strh	r3, [r4, #12]
 80179bc:	f04f 30ff 	mov.w	r0, #4294967295
 80179c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179c4:	4407      	add	r7, r0
 80179c6:	eba8 0800 	sub.w	r8, r8, r0
 80179ca:	e7e7      	b.n	801799c <__sflush_r+0xd4>
 80179cc:	dfbffffe 	.word	0xdfbffffe

080179d0 <_fflush_r>:
 80179d0:	b538      	push	{r3, r4, r5, lr}
 80179d2:	690b      	ldr	r3, [r1, #16]
 80179d4:	4605      	mov	r5, r0
 80179d6:	460c      	mov	r4, r1
 80179d8:	b913      	cbnz	r3, 80179e0 <_fflush_r+0x10>
 80179da:	2500      	movs	r5, #0
 80179dc:	4628      	mov	r0, r5
 80179de:	bd38      	pop	{r3, r4, r5, pc}
 80179e0:	b118      	cbz	r0, 80179ea <_fflush_r+0x1a>
 80179e2:	6a03      	ldr	r3, [r0, #32]
 80179e4:	b90b      	cbnz	r3, 80179ea <_fflush_r+0x1a>
 80179e6:	f7fc ff95 	bl	8014914 <__sinit>
 80179ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80179ee:	2b00      	cmp	r3, #0
 80179f0:	d0f3      	beq.n	80179da <_fflush_r+0xa>
 80179f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80179f4:	07d0      	lsls	r0, r2, #31
 80179f6:	d404      	bmi.n	8017a02 <_fflush_r+0x32>
 80179f8:	0599      	lsls	r1, r3, #22
 80179fa:	d402      	bmi.n	8017a02 <_fflush_r+0x32>
 80179fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80179fe:	f7fd f902 	bl	8014c06 <__retarget_lock_acquire_recursive>
 8017a02:	4628      	mov	r0, r5
 8017a04:	4621      	mov	r1, r4
 8017a06:	f7ff ff5f 	bl	80178c8 <__sflush_r>
 8017a0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017a0c:	07da      	lsls	r2, r3, #31
 8017a0e:	4605      	mov	r5, r0
 8017a10:	d4e4      	bmi.n	80179dc <_fflush_r+0xc>
 8017a12:	89a3      	ldrh	r3, [r4, #12]
 8017a14:	059b      	lsls	r3, r3, #22
 8017a16:	d4e1      	bmi.n	80179dc <_fflush_r+0xc>
 8017a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017a1a:	f7fd f8f5 	bl	8014c08 <__retarget_lock_release_recursive>
 8017a1e:	e7dd      	b.n	80179dc <_fflush_r+0xc>

08017a20 <__sccl>:
 8017a20:	b570      	push	{r4, r5, r6, lr}
 8017a22:	780b      	ldrb	r3, [r1, #0]
 8017a24:	4604      	mov	r4, r0
 8017a26:	2b5e      	cmp	r3, #94	@ 0x5e
 8017a28:	bf0b      	itete	eq
 8017a2a:	784b      	ldrbeq	r3, [r1, #1]
 8017a2c:	1c4a      	addne	r2, r1, #1
 8017a2e:	1c8a      	addeq	r2, r1, #2
 8017a30:	2100      	movne	r1, #0
 8017a32:	bf08      	it	eq
 8017a34:	2101      	moveq	r1, #1
 8017a36:	3801      	subs	r0, #1
 8017a38:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8017a3c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017a40:	42a8      	cmp	r0, r5
 8017a42:	d1fb      	bne.n	8017a3c <__sccl+0x1c>
 8017a44:	b90b      	cbnz	r3, 8017a4a <__sccl+0x2a>
 8017a46:	1e50      	subs	r0, r2, #1
 8017a48:	bd70      	pop	{r4, r5, r6, pc}
 8017a4a:	f081 0101 	eor.w	r1, r1, #1
 8017a4e:	54e1      	strb	r1, [r4, r3]
 8017a50:	4610      	mov	r0, r2
 8017a52:	4602      	mov	r2, r0
 8017a54:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017a58:	2d2d      	cmp	r5, #45	@ 0x2d
 8017a5a:	d005      	beq.n	8017a68 <__sccl+0x48>
 8017a5c:	2d5d      	cmp	r5, #93	@ 0x5d
 8017a5e:	d016      	beq.n	8017a8e <__sccl+0x6e>
 8017a60:	2d00      	cmp	r5, #0
 8017a62:	d0f1      	beq.n	8017a48 <__sccl+0x28>
 8017a64:	462b      	mov	r3, r5
 8017a66:	e7f2      	b.n	8017a4e <__sccl+0x2e>
 8017a68:	7846      	ldrb	r6, [r0, #1]
 8017a6a:	2e5d      	cmp	r6, #93	@ 0x5d
 8017a6c:	d0fa      	beq.n	8017a64 <__sccl+0x44>
 8017a6e:	42b3      	cmp	r3, r6
 8017a70:	dcf8      	bgt.n	8017a64 <__sccl+0x44>
 8017a72:	3002      	adds	r0, #2
 8017a74:	461a      	mov	r2, r3
 8017a76:	3201      	adds	r2, #1
 8017a78:	4296      	cmp	r6, r2
 8017a7a:	54a1      	strb	r1, [r4, r2]
 8017a7c:	dcfb      	bgt.n	8017a76 <__sccl+0x56>
 8017a7e:	1af2      	subs	r2, r6, r3
 8017a80:	3a01      	subs	r2, #1
 8017a82:	1c5d      	adds	r5, r3, #1
 8017a84:	42b3      	cmp	r3, r6
 8017a86:	bfa8      	it	ge
 8017a88:	2200      	movge	r2, #0
 8017a8a:	18ab      	adds	r3, r5, r2
 8017a8c:	e7e1      	b.n	8017a52 <__sccl+0x32>
 8017a8e:	4610      	mov	r0, r2
 8017a90:	e7da      	b.n	8017a48 <__sccl+0x28>

08017a92 <__submore>:
 8017a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a96:	460c      	mov	r4, r1
 8017a98:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8017a9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a9e:	4299      	cmp	r1, r3
 8017aa0:	d11d      	bne.n	8017ade <__submore+0x4c>
 8017aa2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8017aa6:	f7fb ffb1 	bl	8013a0c <_malloc_r>
 8017aaa:	b918      	cbnz	r0, 8017ab4 <__submore+0x22>
 8017aac:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ab4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017ab8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8017aba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8017abe:	6360      	str	r0, [r4, #52]	@ 0x34
 8017ac0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8017ac4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8017ac8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8017acc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8017ad0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8017ad4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8017ad8:	6020      	str	r0, [r4, #0]
 8017ada:	2000      	movs	r0, #0
 8017adc:	e7e8      	b.n	8017ab0 <__submore+0x1e>
 8017ade:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8017ae0:	0077      	lsls	r7, r6, #1
 8017ae2:	463a      	mov	r2, r7
 8017ae4:	f000 fbad 	bl	8018242 <_realloc_r>
 8017ae8:	4605      	mov	r5, r0
 8017aea:	2800      	cmp	r0, #0
 8017aec:	d0de      	beq.n	8017aac <__submore+0x1a>
 8017aee:	eb00 0806 	add.w	r8, r0, r6
 8017af2:	4601      	mov	r1, r0
 8017af4:	4632      	mov	r2, r6
 8017af6:	4640      	mov	r0, r8
 8017af8:	f7fd f887 	bl	8014c0a <memcpy>
 8017afc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8017b00:	f8c4 8000 	str.w	r8, [r4]
 8017b04:	e7e9      	b.n	8017ada <__submore+0x48>

08017b06 <memmove>:
 8017b06:	4288      	cmp	r0, r1
 8017b08:	b510      	push	{r4, lr}
 8017b0a:	eb01 0402 	add.w	r4, r1, r2
 8017b0e:	d902      	bls.n	8017b16 <memmove+0x10>
 8017b10:	4284      	cmp	r4, r0
 8017b12:	4623      	mov	r3, r4
 8017b14:	d807      	bhi.n	8017b26 <memmove+0x20>
 8017b16:	1e43      	subs	r3, r0, #1
 8017b18:	42a1      	cmp	r1, r4
 8017b1a:	d008      	beq.n	8017b2e <memmove+0x28>
 8017b1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b20:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b24:	e7f8      	b.n	8017b18 <memmove+0x12>
 8017b26:	4402      	add	r2, r0
 8017b28:	4601      	mov	r1, r0
 8017b2a:	428a      	cmp	r2, r1
 8017b2c:	d100      	bne.n	8017b30 <memmove+0x2a>
 8017b2e:	bd10      	pop	{r4, pc}
 8017b30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b38:	e7f7      	b.n	8017b2a <memmove+0x24>

08017b3a <strncmp>:
 8017b3a:	b510      	push	{r4, lr}
 8017b3c:	b16a      	cbz	r2, 8017b5a <strncmp+0x20>
 8017b3e:	3901      	subs	r1, #1
 8017b40:	1884      	adds	r4, r0, r2
 8017b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017b46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017b4a:	429a      	cmp	r2, r3
 8017b4c:	d103      	bne.n	8017b56 <strncmp+0x1c>
 8017b4e:	42a0      	cmp	r0, r4
 8017b50:	d001      	beq.n	8017b56 <strncmp+0x1c>
 8017b52:	2a00      	cmp	r2, #0
 8017b54:	d1f5      	bne.n	8017b42 <strncmp+0x8>
 8017b56:	1ad0      	subs	r0, r2, r3
 8017b58:	bd10      	pop	{r4, pc}
 8017b5a:	4610      	mov	r0, r2
 8017b5c:	e7fc      	b.n	8017b58 <strncmp+0x1e>
	...

08017b60 <nan>:
 8017b60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8017b68 <nan+0x8>
 8017b64:	4770      	bx	lr
 8017b66:	bf00      	nop
 8017b68:	00000000 	.word	0x00000000
 8017b6c:	7ff80000 	.word	0x7ff80000

08017b70 <__assert_func>:
 8017b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b72:	4614      	mov	r4, r2
 8017b74:	461a      	mov	r2, r3
 8017b76:	4b09      	ldr	r3, [pc, #36]	@ (8017b9c <__assert_func+0x2c>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	4605      	mov	r5, r0
 8017b7c:	68d8      	ldr	r0, [r3, #12]
 8017b7e:	b954      	cbnz	r4, 8017b96 <__assert_func+0x26>
 8017b80:	4b07      	ldr	r3, [pc, #28]	@ (8017ba0 <__assert_func+0x30>)
 8017b82:	461c      	mov	r4, r3
 8017b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b88:	9100      	str	r1, [sp, #0]
 8017b8a:	462b      	mov	r3, r5
 8017b8c:	4905      	ldr	r1, [pc, #20]	@ (8017ba4 <__assert_func+0x34>)
 8017b8e:	f000 fc05 	bl	801839c <fiprintf>
 8017b92:	f000 fc15 	bl	80183c0 <abort>
 8017b96:	4b04      	ldr	r3, [pc, #16]	@ (8017ba8 <__assert_func+0x38>)
 8017b98:	e7f4      	b.n	8017b84 <__assert_func+0x14>
 8017b9a:	bf00      	nop
 8017b9c:	2000006c 	.word	0x2000006c
 8017ba0:	0801adb0 	.word	0x0801adb0
 8017ba4:	0801ad82 	.word	0x0801ad82
 8017ba8:	0801ad75 	.word	0x0801ad75

08017bac <rshift>:
 8017bac:	6903      	ldr	r3, [r0, #16]
 8017bae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8017bb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017bb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8017bba:	f100 0414 	add.w	r4, r0, #20
 8017bbe:	dd45      	ble.n	8017c4c <rshift+0xa0>
 8017bc0:	f011 011f 	ands.w	r1, r1, #31
 8017bc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8017bc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8017bcc:	d10c      	bne.n	8017be8 <rshift+0x3c>
 8017bce:	f100 0710 	add.w	r7, r0, #16
 8017bd2:	4629      	mov	r1, r5
 8017bd4:	42b1      	cmp	r1, r6
 8017bd6:	d334      	bcc.n	8017c42 <rshift+0x96>
 8017bd8:	1a9b      	subs	r3, r3, r2
 8017bda:	009b      	lsls	r3, r3, #2
 8017bdc:	1eea      	subs	r2, r5, #3
 8017bde:	4296      	cmp	r6, r2
 8017be0:	bf38      	it	cc
 8017be2:	2300      	movcc	r3, #0
 8017be4:	4423      	add	r3, r4
 8017be6:	e015      	b.n	8017c14 <rshift+0x68>
 8017be8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8017bec:	f1c1 0820 	rsb	r8, r1, #32
 8017bf0:	40cf      	lsrs	r7, r1
 8017bf2:	f105 0e04 	add.w	lr, r5, #4
 8017bf6:	46a1      	mov	r9, r4
 8017bf8:	4576      	cmp	r6, lr
 8017bfa:	46f4      	mov	ip, lr
 8017bfc:	d815      	bhi.n	8017c2a <rshift+0x7e>
 8017bfe:	1a9a      	subs	r2, r3, r2
 8017c00:	0092      	lsls	r2, r2, #2
 8017c02:	3a04      	subs	r2, #4
 8017c04:	3501      	adds	r5, #1
 8017c06:	42ae      	cmp	r6, r5
 8017c08:	bf38      	it	cc
 8017c0a:	2200      	movcc	r2, #0
 8017c0c:	18a3      	adds	r3, r4, r2
 8017c0e:	50a7      	str	r7, [r4, r2]
 8017c10:	b107      	cbz	r7, 8017c14 <rshift+0x68>
 8017c12:	3304      	adds	r3, #4
 8017c14:	1b1a      	subs	r2, r3, r4
 8017c16:	42a3      	cmp	r3, r4
 8017c18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017c1c:	bf08      	it	eq
 8017c1e:	2300      	moveq	r3, #0
 8017c20:	6102      	str	r2, [r0, #16]
 8017c22:	bf08      	it	eq
 8017c24:	6143      	streq	r3, [r0, #20]
 8017c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c2a:	f8dc c000 	ldr.w	ip, [ip]
 8017c2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8017c32:	ea4c 0707 	orr.w	r7, ip, r7
 8017c36:	f849 7b04 	str.w	r7, [r9], #4
 8017c3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8017c3e:	40cf      	lsrs	r7, r1
 8017c40:	e7da      	b.n	8017bf8 <rshift+0x4c>
 8017c42:	f851 cb04 	ldr.w	ip, [r1], #4
 8017c46:	f847 cf04 	str.w	ip, [r7, #4]!
 8017c4a:	e7c3      	b.n	8017bd4 <rshift+0x28>
 8017c4c:	4623      	mov	r3, r4
 8017c4e:	e7e1      	b.n	8017c14 <rshift+0x68>

08017c50 <__hexdig_fun>:
 8017c50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8017c54:	2b09      	cmp	r3, #9
 8017c56:	d802      	bhi.n	8017c5e <__hexdig_fun+0xe>
 8017c58:	3820      	subs	r0, #32
 8017c5a:	b2c0      	uxtb	r0, r0
 8017c5c:	4770      	bx	lr
 8017c5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8017c62:	2b05      	cmp	r3, #5
 8017c64:	d801      	bhi.n	8017c6a <__hexdig_fun+0x1a>
 8017c66:	3847      	subs	r0, #71	@ 0x47
 8017c68:	e7f7      	b.n	8017c5a <__hexdig_fun+0xa>
 8017c6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8017c6e:	2b05      	cmp	r3, #5
 8017c70:	d801      	bhi.n	8017c76 <__hexdig_fun+0x26>
 8017c72:	3827      	subs	r0, #39	@ 0x27
 8017c74:	e7f1      	b.n	8017c5a <__hexdig_fun+0xa>
 8017c76:	2000      	movs	r0, #0
 8017c78:	4770      	bx	lr
	...

08017c7c <__gethex>:
 8017c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c80:	b085      	sub	sp, #20
 8017c82:	468a      	mov	sl, r1
 8017c84:	9302      	str	r3, [sp, #8]
 8017c86:	680b      	ldr	r3, [r1, #0]
 8017c88:	9001      	str	r0, [sp, #4]
 8017c8a:	4690      	mov	r8, r2
 8017c8c:	1c9c      	adds	r4, r3, #2
 8017c8e:	46a1      	mov	r9, r4
 8017c90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8017c94:	2830      	cmp	r0, #48	@ 0x30
 8017c96:	d0fa      	beq.n	8017c8e <__gethex+0x12>
 8017c98:	eba9 0303 	sub.w	r3, r9, r3
 8017c9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8017ca0:	f7ff ffd6 	bl	8017c50 <__hexdig_fun>
 8017ca4:	4605      	mov	r5, r0
 8017ca6:	2800      	cmp	r0, #0
 8017ca8:	d168      	bne.n	8017d7c <__gethex+0x100>
 8017caa:	49a0      	ldr	r1, [pc, #640]	@ (8017f2c <__gethex+0x2b0>)
 8017cac:	2201      	movs	r2, #1
 8017cae:	4648      	mov	r0, r9
 8017cb0:	f7ff ff43 	bl	8017b3a <strncmp>
 8017cb4:	4607      	mov	r7, r0
 8017cb6:	2800      	cmp	r0, #0
 8017cb8:	d167      	bne.n	8017d8a <__gethex+0x10e>
 8017cba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8017cbe:	4626      	mov	r6, r4
 8017cc0:	f7ff ffc6 	bl	8017c50 <__hexdig_fun>
 8017cc4:	2800      	cmp	r0, #0
 8017cc6:	d062      	beq.n	8017d8e <__gethex+0x112>
 8017cc8:	4623      	mov	r3, r4
 8017cca:	7818      	ldrb	r0, [r3, #0]
 8017ccc:	2830      	cmp	r0, #48	@ 0x30
 8017cce:	4699      	mov	r9, r3
 8017cd0:	f103 0301 	add.w	r3, r3, #1
 8017cd4:	d0f9      	beq.n	8017cca <__gethex+0x4e>
 8017cd6:	f7ff ffbb 	bl	8017c50 <__hexdig_fun>
 8017cda:	fab0 f580 	clz	r5, r0
 8017cde:	096d      	lsrs	r5, r5, #5
 8017ce0:	f04f 0b01 	mov.w	fp, #1
 8017ce4:	464a      	mov	r2, r9
 8017ce6:	4616      	mov	r6, r2
 8017ce8:	3201      	adds	r2, #1
 8017cea:	7830      	ldrb	r0, [r6, #0]
 8017cec:	f7ff ffb0 	bl	8017c50 <__hexdig_fun>
 8017cf0:	2800      	cmp	r0, #0
 8017cf2:	d1f8      	bne.n	8017ce6 <__gethex+0x6a>
 8017cf4:	498d      	ldr	r1, [pc, #564]	@ (8017f2c <__gethex+0x2b0>)
 8017cf6:	2201      	movs	r2, #1
 8017cf8:	4630      	mov	r0, r6
 8017cfa:	f7ff ff1e 	bl	8017b3a <strncmp>
 8017cfe:	2800      	cmp	r0, #0
 8017d00:	d13f      	bne.n	8017d82 <__gethex+0x106>
 8017d02:	b944      	cbnz	r4, 8017d16 <__gethex+0x9a>
 8017d04:	1c74      	adds	r4, r6, #1
 8017d06:	4622      	mov	r2, r4
 8017d08:	4616      	mov	r6, r2
 8017d0a:	3201      	adds	r2, #1
 8017d0c:	7830      	ldrb	r0, [r6, #0]
 8017d0e:	f7ff ff9f 	bl	8017c50 <__hexdig_fun>
 8017d12:	2800      	cmp	r0, #0
 8017d14:	d1f8      	bne.n	8017d08 <__gethex+0x8c>
 8017d16:	1ba4      	subs	r4, r4, r6
 8017d18:	00a7      	lsls	r7, r4, #2
 8017d1a:	7833      	ldrb	r3, [r6, #0]
 8017d1c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8017d20:	2b50      	cmp	r3, #80	@ 0x50
 8017d22:	d13e      	bne.n	8017da2 <__gethex+0x126>
 8017d24:	7873      	ldrb	r3, [r6, #1]
 8017d26:	2b2b      	cmp	r3, #43	@ 0x2b
 8017d28:	d033      	beq.n	8017d92 <__gethex+0x116>
 8017d2a:	2b2d      	cmp	r3, #45	@ 0x2d
 8017d2c:	d034      	beq.n	8017d98 <__gethex+0x11c>
 8017d2e:	1c71      	adds	r1, r6, #1
 8017d30:	2400      	movs	r4, #0
 8017d32:	7808      	ldrb	r0, [r1, #0]
 8017d34:	f7ff ff8c 	bl	8017c50 <__hexdig_fun>
 8017d38:	1e43      	subs	r3, r0, #1
 8017d3a:	b2db      	uxtb	r3, r3
 8017d3c:	2b18      	cmp	r3, #24
 8017d3e:	d830      	bhi.n	8017da2 <__gethex+0x126>
 8017d40:	f1a0 0210 	sub.w	r2, r0, #16
 8017d44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017d48:	f7ff ff82 	bl	8017c50 <__hexdig_fun>
 8017d4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8017d50:	fa5f fc8c 	uxtb.w	ip, ip
 8017d54:	f1bc 0f18 	cmp.w	ip, #24
 8017d58:	f04f 030a 	mov.w	r3, #10
 8017d5c:	d91e      	bls.n	8017d9c <__gethex+0x120>
 8017d5e:	b104      	cbz	r4, 8017d62 <__gethex+0xe6>
 8017d60:	4252      	negs	r2, r2
 8017d62:	4417      	add	r7, r2
 8017d64:	f8ca 1000 	str.w	r1, [sl]
 8017d68:	b1ed      	cbz	r5, 8017da6 <__gethex+0x12a>
 8017d6a:	f1bb 0f00 	cmp.w	fp, #0
 8017d6e:	bf0c      	ite	eq
 8017d70:	2506      	moveq	r5, #6
 8017d72:	2500      	movne	r5, #0
 8017d74:	4628      	mov	r0, r5
 8017d76:	b005      	add	sp, #20
 8017d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d7c:	2500      	movs	r5, #0
 8017d7e:	462c      	mov	r4, r5
 8017d80:	e7b0      	b.n	8017ce4 <__gethex+0x68>
 8017d82:	2c00      	cmp	r4, #0
 8017d84:	d1c7      	bne.n	8017d16 <__gethex+0x9a>
 8017d86:	4627      	mov	r7, r4
 8017d88:	e7c7      	b.n	8017d1a <__gethex+0x9e>
 8017d8a:	464e      	mov	r6, r9
 8017d8c:	462f      	mov	r7, r5
 8017d8e:	2501      	movs	r5, #1
 8017d90:	e7c3      	b.n	8017d1a <__gethex+0x9e>
 8017d92:	2400      	movs	r4, #0
 8017d94:	1cb1      	adds	r1, r6, #2
 8017d96:	e7cc      	b.n	8017d32 <__gethex+0xb6>
 8017d98:	2401      	movs	r4, #1
 8017d9a:	e7fb      	b.n	8017d94 <__gethex+0x118>
 8017d9c:	fb03 0002 	mla	r0, r3, r2, r0
 8017da0:	e7ce      	b.n	8017d40 <__gethex+0xc4>
 8017da2:	4631      	mov	r1, r6
 8017da4:	e7de      	b.n	8017d64 <__gethex+0xe8>
 8017da6:	eba6 0309 	sub.w	r3, r6, r9
 8017daa:	3b01      	subs	r3, #1
 8017dac:	4629      	mov	r1, r5
 8017dae:	2b07      	cmp	r3, #7
 8017db0:	dc0a      	bgt.n	8017dc8 <__gethex+0x14c>
 8017db2:	9801      	ldr	r0, [sp, #4]
 8017db4:	f7fd fdde 	bl	8015974 <_Balloc>
 8017db8:	4604      	mov	r4, r0
 8017dba:	b940      	cbnz	r0, 8017dce <__gethex+0x152>
 8017dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8017f30 <__gethex+0x2b4>)
 8017dbe:	4602      	mov	r2, r0
 8017dc0:	21e4      	movs	r1, #228	@ 0xe4
 8017dc2:	485c      	ldr	r0, [pc, #368]	@ (8017f34 <__gethex+0x2b8>)
 8017dc4:	f7ff fed4 	bl	8017b70 <__assert_func>
 8017dc8:	3101      	adds	r1, #1
 8017dca:	105b      	asrs	r3, r3, #1
 8017dcc:	e7ef      	b.n	8017dae <__gethex+0x132>
 8017dce:	f100 0a14 	add.w	sl, r0, #20
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	4655      	mov	r5, sl
 8017dd6:	469b      	mov	fp, r3
 8017dd8:	45b1      	cmp	r9, r6
 8017dda:	d337      	bcc.n	8017e4c <__gethex+0x1d0>
 8017ddc:	f845 bb04 	str.w	fp, [r5], #4
 8017de0:	eba5 050a 	sub.w	r5, r5, sl
 8017de4:	10ad      	asrs	r5, r5, #2
 8017de6:	6125      	str	r5, [r4, #16]
 8017de8:	4658      	mov	r0, fp
 8017dea:	f7fd feb5 	bl	8015b58 <__hi0bits>
 8017dee:	016d      	lsls	r5, r5, #5
 8017df0:	f8d8 6000 	ldr.w	r6, [r8]
 8017df4:	1a2d      	subs	r5, r5, r0
 8017df6:	42b5      	cmp	r5, r6
 8017df8:	dd54      	ble.n	8017ea4 <__gethex+0x228>
 8017dfa:	1bad      	subs	r5, r5, r6
 8017dfc:	4629      	mov	r1, r5
 8017dfe:	4620      	mov	r0, r4
 8017e00:	f7fe fa49 	bl	8016296 <__any_on>
 8017e04:	4681      	mov	r9, r0
 8017e06:	b178      	cbz	r0, 8017e28 <__gethex+0x1ac>
 8017e08:	1e6b      	subs	r3, r5, #1
 8017e0a:	1159      	asrs	r1, r3, #5
 8017e0c:	f003 021f 	and.w	r2, r3, #31
 8017e10:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017e14:	f04f 0901 	mov.w	r9, #1
 8017e18:	fa09 f202 	lsl.w	r2, r9, r2
 8017e1c:	420a      	tst	r2, r1
 8017e1e:	d003      	beq.n	8017e28 <__gethex+0x1ac>
 8017e20:	454b      	cmp	r3, r9
 8017e22:	dc36      	bgt.n	8017e92 <__gethex+0x216>
 8017e24:	f04f 0902 	mov.w	r9, #2
 8017e28:	4629      	mov	r1, r5
 8017e2a:	4620      	mov	r0, r4
 8017e2c:	f7ff febe 	bl	8017bac <rshift>
 8017e30:	442f      	add	r7, r5
 8017e32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017e36:	42bb      	cmp	r3, r7
 8017e38:	da42      	bge.n	8017ec0 <__gethex+0x244>
 8017e3a:	9801      	ldr	r0, [sp, #4]
 8017e3c:	4621      	mov	r1, r4
 8017e3e:	f7fd fdd9 	bl	80159f4 <_Bfree>
 8017e42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017e44:	2300      	movs	r3, #0
 8017e46:	6013      	str	r3, [r2, #0]
 8017e48:	25a3      	movs	r5, #163	@ 0xa3
 8017e4a:	e793      	b.n	8017d74 <__gethex+0xf8>
 8017e4c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8017e50:	2a2e      	cmp	r2, #46	@ 0x2e
 8017e52:	d012      	beq.n	8017e7a <__gethex+0x1fe>
 8017e54:	2b20      	cmp	r3, #32
 8017e56:	d104      	bne.n	8017e62 <__gethex+0x1e6>
 8017e58:	f845 bb04 	str.w	fp, [r5], #4
 8017e5c:	f04f 0b00 	mov.w	fp, #0
 8017e60:	465b      	mov	r3, fp
 8017e62:	7830      	ldrb	r0, [r6, #0]
 8017e64:	9303      	str	r3, [sp, #12]
 8017e66:	f7ff fef3 	bl	8017c50 <__hexdig_fun>
 8017e6a:	9b03      	ldr	r3, [sp, #12]
 8017e6c:	f000 000f 	and.w	r0, r0, #15
 8017e70:	4098      	lsls	r0, r3
 8017e72:	ea4b 0b00 	orr.w	fp, fp, r0
 8017e76:	3304      	adds	r3, #4
 8017e78:	e7ae      	b.n	8017dd8 <__gethex+0x15c>
 8017e7a:	45b1      	cmp	r9, r6
 8017e7c:	d8ea      	bhi.n	8017e54 <__gethex+0x1d8>
 8017e7e:	492b      	ldr	r1, [pc, #172]	@ (8017f2c <__gethex+0x2b0>)
 8017e80:	9303      	str	r3, [sp, #12]
 8017e82:	2201      	movs	r2, #1
 8017e84:	4630      	mov	r0, r6
 8017e86:	f7ff fe58 	bl	8017b3a <strncmp>
 8017e8a:	9b03      	ldr	r3, [sp, #12]
 8017e8c:	2800      	cmp	r0, #0
 8017e8e:	d1e1      	bne.n	8017e54 <__gethex+0x1d8>
 8017e90:	e7a2      	b.n	8017dd8 <__gethex+0x15c>
 8017e92:	1ea9      	subs	r1, r5, #2
 8017e94:	4620      	mov	r0, r4
 8017e96:	f7fe f9fe 	bl	8016296 <__any_on>
 8017e9a:	2800      	cmp	r0, #0
 8017e9c:	d0c2      	beq.n	8017e24 <__gethex+0x1a8>
 8017e9e:	f04f 0903 	mov.w	r9, #3
 8017ea2:	e7c1      	b.n	8017e28 <__gethex+0x1ac>
 8017ea4:	da09      	bge.n	8017eba <__gethex+0x23e>
 8017ea6:	1b75      	subs	r5, r6, r5
 8017ea8:	4621      	mov	r1, r4
 8017eaa:	9801      	ldr	r0, [sp, #4]
 8017eac:	462a      	mov	r2, r5
 8017eae:	f7fd ffb9 	bl	8015e24 <__lshift>
 8017eb2:	1b7f      	subs	r7, r7, r5
 8017eb4:	4604      	mov	r4, r0
 8017eb6:	f100 0a14 	add.w	sl, r0, #20
 8017eba:	f04f 0900 	mov.w	r9, #0
 8017ebe:	e7b8      	b.n	8017e32 <__gethex+0x1b6>
 8017ec0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8017ec4:	42bd      	cmp	r5, r7
 8017ec6:	dd6f      	ble.n	8017fa8 <__gethex+0x32c>
 8017ec8:	1bed      	subs	r5, r5, r7
 8017eca:	42ae      	cmp	r6, r5
 8017ecc:	dc34      	bgt.n	8017f38 <__gethex+0x2bc>
 8017ece:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017ed2:	2b02      	cmp	r3, #2
 8017ed4:	d022      	beq.n	8017f1c <__gethex+0x2a0>
 8017ed6:	2b03      	cmp	r3, #3
 8017ed8:	d024      	beq.n	8017f24 <__gethex+0x2a8>
 8017eda:	2b01      	cmp	r3, #1
 8017edc:	d115      	bne.n	8017f0a <__gethex+0x28e>
 8017ede:	42ae      	cmp	r6, r5
 8017ee0:	d113      	bne.n	8017f0a <__gethex+0x28e>
 8017ee2:	2e01      	cmp	r6, #1
 8017ee4:	d10b      	bne.n	8017efe <__gethex+0x282>
 8017ee6:	9a02      	ldr	r2, [sp, #8]
 8017ee8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017eec:	6013      	str	r3, [r2, #0]
 8017eee:	2301      	movs	r3, #1
 8017ef0:	6123      	str	r3, [r4, #16]
 8017ef2:	f8ca 3000 	str.w	r3, [sl]
 8017ef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017ef8:	2562      	movs	r5, #98	@ 0x62
 8017efa:	601c      	str	r4, [r3, #0]
 8017efc:	e73a      	b.n	8017d74 <__gethex+0xf8>
 8017efe:	1e71      	subs	r1, r6, #1
 8017f00:	4620      	mov	r0, r4
 8017f02:	f7fe f9c8 	bl	8016296 <__any_on>
 8017f06:	2800      	cmp	r0, #0
 8017f08:	d1ed      	bne.n	8017ee6 <__gethex+0x26a>
 8017f0a:	9801      	ldr	r0, [sp, #4]
 8017f0c:	4621      	mov	r1, r4
 8017f0e:	f7fd fd71 	bl	80159f4 <_Bfree>
 8017f12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017f14:	2300      	movs	r3, #0
 8017f16:	6013      	str	r3, [r2, #0]
 8017f18:	2550      	movs	r5, #80	@ 0x50
 8017f1a:	e72b      	b.n	8017d74 <__gethex+0xf8>
 8017f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d1f3      	bne.n	8017f0a <__gethex+0x28e>
 8017f22:	e7e0      	b.n	8017ee6 <__gethex+0x26a>
 8017f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d1dd      	bne.n	8017ee6 <__gethex+0x26a>
 8017f2a:	e7ee      	b.n	8017f0a <__gethex+0x28e>
 8017f2c:	0801abe8 	.word	0x0801abe8
 8017f30:	0801aa7f 	.word	0x0801aa7f
 8017f34:	0801adb1 	.word	0x0801adb1
 8017f38:	1e6f      	subs	r7, r5, #1
 8017f3a:	f1b9 0f00 	cmp.w	r9, #0
 8017f3e:	d130      	bne.n	8017fa2 <__gethex+0x326>
 8017f40:	b127      	cbz	r7, 8017f4c <__gethex+0x2d0>
 8017f42:	4639      	mov	r1, r7
 8017f44:	4620      	mov	r0, r4
 8017f46:	f7fe f9a6 	bl	8016296 <__any_on>
 8017f4a:	4681      	mov	r9, r0
 8017f4c:	117a      	asrs	r2, r7, #5
 8017f4e:	2301      	movs	r3, #1
 8017f50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017f54:	f007 071f 	and.w	r7, r7, #31
 8017f58:	40bb      	lsls	r3, r7
 8017f5a:	4213      	tst	r3, r2
 8017f5c:	4629      	mov	r1, r5
 8017f5e:	4620      	mov	r0, r4
 8017f60:	bf18      	it	ne
 8017f62:	f049 0902 	orrne.w	r9, r9, #2
 8017f66:	f7ff fe21 	bl	8017bac <rshift>
 8017f6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017f6e:	1b76      	subs	r6, r6, r5
 8017f70:	2502      	movs	r5, #2
 8017f72:	f1b9 0f00 	cmp.w	r9, #0
 8017f76:	d047      	beq.n	8018008 <__gethex+0x38c>
 8017f78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017f7c:	2b02      	cmp	r3, #2
 8017f7e:	d015      	beq.n	8017fac <__gethex+0x330>
 8017f80:	2b03      	cmp	r3, #3
 8017f82:	d017      	beq.n	8017fb4 <__gethex+0x338>
 8017f84:	2b01      	cmp	r3, #1
 8017f86:	d109      	bne.n	8017f9c <__gethex+0x320>
 8017f88:	f019 0f02 	tst.w	r9, #2
 8017f8c:	d006      	beq.n	8017f9c <__gethex+0x320>
 8017f8e:	f8da 3000 	ldr.w	r3, [sl]
 8017f92:	ea49 0903 	orr.w	r9, r9, r3
 8017f96:	f019 0f01 	tst.w	r9, #1
 8017f9a:	d10e      	bne.n	8017fba <__gethex+0x33e>
 8017f9c:	f045 0510 	orr.w	r5, r5, #16
 8017fa0:	e032      	b.n	8018008 <__gethex+0x38c>
 8017fa2:	f04f 0901 	mov.w	r9, #1
 8017fa6:	e7d1      	b.n	8017f4c <__gethex+0x2d0>
 8017fa8:	2501      	movs	r5, #1
 8017faa:	e7e2      	b.n	8017f72 <__gethex+0x2f6>
 8017fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017fae:	f1c3 0301 	rsb	r3, r3, #1
 8017fb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d0f0      	beq.n	8017f9c <__gethex+0x320>
 8017fba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8017fbe:	f104 0314 	add.w	r3, r4, #20
 8017fc2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8017fc6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8017fca:	f04f 0c00 	mov.w	ip, #0
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fd4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017fd8:	d01b      	beq.n	8018012 <__gethex+0x396>
 8017fda:	3201      	adds	r2, #1
 8017fdc:	6002      	str	r2, [r0, #0]
 8017fde:	2d02      	cmp	r5, #2
 8017fe0:	f104 0314 	add.w	r3, r4, #20
 8017fe4:	d13c      	bne.n	8018060 <__gethex+0x3e4>
 8017fe6:	f8d8 2000 	ldr.w	r2, [r8]
 8017fea:	3a01      	subs	r2, #1
 8017fec:	42b2      	cmp	r2, r6
 8017fee:	d109      	bne.n	8018004 <__gethex+0x388>
 8017ff0:	1171      	asrs	r1, r6, #5
 8017ff2:	2201      	movs	r2, #1
 8017ff4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ff8:	f006 061f 	and.w	r6, r6, #31
 8017ffc:	fa02 f606 	lsl.w	r6, r2, r6
 8018000:	421e      	tst	r6, r3
 8018002:	d13a      	bne.n	801807a <__gethex+0x3fe>
 8018004:	f045 0520 	orr.w	r5, r5, #32
 8018008:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801800a:	601c      	str	r4, [r3, #0]
 801800c:	9b02      	ldr	r3, [sp, #8]
 801800e:	601f      	str	r7, [r3, #0]
 8018010:	e6b0      	b.n	8017d74 <__gethex+0xf8>
 8018012:	4299      	cmp	r1, r3
 8018014:	f843 cc04 	str.w	ip, [r3, #-4]
 8018018:	d8d9      	bhi.n	8017fce <__gethex+0x352>
 801801a:	68a3      	ldr	r3, [r4, #8]
 801801c:	459b      	cmp	fp, r3
 801801e:	db17      	blt.n	8018050 <__gethex+0x3d4>
 8018020:	6861      	ldr	r1, [r4, #4]
 8018022:	9801      	ldr	r0, [sp, #4]
 8018024:	3101      	adds	r1, #1
 8018026:	f7fd fca5 	bl	8015974 <_Balloc>
 801802a:	4681      	mov	r9, r0
 801802c:	b918      	cbnz	r0, 8018036 <__gethex+0x3ba>
 801802e:	4b1a      	ldr	r3, [pc, #104]	@ (8018098 <__gethex+0x41c>)
 8018030:	4602      	mov	r2, r0
 8018032:	2184      	movs	r1, #132	@ 0x84
 8018034:	e6c5      	b.n	8017dc2 <__gethex+0x146>
 8018036:	6922      	ldr	r2, [r4, #16]
 8018038:	3202      	adds	r2, #2
 801803a:	f104 010c 	add.w	r1, r4, #12
 801803e:	0092      	lsls	r2, r2, #2
 8018040:	300c      	adds	r0, #12
 8018042:	f7fc fde2 	bl	8014c0a <memcpy>
 8018046:	4621      	mov	r1, r4
 8018048:	9801      	ldr	r0, [sp, #4]
 801804a:	f7fd fcd3 	bl	80159f4 <_Bfree>
 801804e:	464c      	mov	r4, r9
 8018050:	6923      	ldr	r3, [r4, #16]
 8018052:	1c5a      	adds	r2, r3, #1
 8018054:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018058:	6122      	str	r2, [r4, #16]
 801805a:	2201      	movs	r2, #1
 801805c:	615a      	str	r2, [r3, #20]
 801805e:	e7be      	b.n	8017fde <__gethex+0x362>
 8018060:	6922      	ldr	r2, [r4, #16]
 8018062:	455a      	cmp	r2, fp
 8018064:	dd0b      	ble.n	801807e <__gethex+0x402>
 8018066:	2101      	movs	r1, #1
 8018068:	4620      	mov	r0, r4
 801806a:	f7ff fd9f 	bl	8017bac <rshift>
 801806e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018072:	3701      	adds	r7, #1
 8018074:	42bb      	cmp	r3, r7
 8018076:	f6ff aee0 	blt.w	8017e3a <__gethex+0x1be>
 801807a:	2501      	movs	r5, #1
 801807c:	e7c2      	b.n	8018004 <__gethex+0x388>
 801807e:	f016 061f 	ands.w	r6, r6, #31
 8018082:	d0fa      	beq.n	801807a <__gethex+0x3fe>
 8018084:	4453      	add	r3, sl
 8018086:	f1c6 0620 	rsb	r6, r6, #32
 801808a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801808e:	f7fd fd63 	bl	8015b58 <__hi0bits>
 8018092:	42b0      	cmp	r0, r6
 8018094:	dbe7      	blt.n	8018066 <__gethex+0x3ea>
 8018096:	e7f0      	b.n	801807a <__gethex+0x3fe>
 8018098:	0801aa7f 	.word	0x0801aa7f

0801809c <L_shift>:
 801809c:	f1c2 0208 	rsb	r2, r2, #8
 80180a0:	0092      	lsls	r2, r2, #2
 80180a2:	b570      	push	{r4, r5, r6, lr}
 80180a4:	f1c2 0620 	rsb	r6, r2, #32
 80180a8:	6843      	ldr	r3, [r0, #4]
 80180aa:	6804      	ldr	r4, [r0, #0]
 80180ac:	fa03 f506 	lsl.w	r5, r3, r6
 80180b0:	432c      	orrs	r4, r5
 80180b2:	40d3      	lsrs	r3, r2
 80180b4:	6004      	str	r4, [r0, #0]
 80180b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80180ba:	4288      	cmp	r0, r1
 80180bc:	d3f4      	bcc.n	80180a8 <L_shift+0xc>
 80180be:	bd70      	pop	{r4, r5, r6, pc}

080180c0 <__match>:
 80180c0:	b530      	push	{r4, r5, lr}
 80180c2:	6803      	ldr	r3, [r0, #0]
 80180c4:	3301      	adds	r3, #1
 80180c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80180ca:	b914      	cbnz	r4, 80180d2 <__match+0x12>
 80180cc:	6003      	str	r3, [r0, #0]
 80180ce:	2001      	movs	r0, #1
 80180d0:	bd30      	pop	{r4, r5, pc}
 80180d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80180da:	2d19      	cmp	r5, #25
 80180dc:	bf98      	it	ls
 80180de:	3220      	addls	r2, #32
 80180e0:	42a2      	cmp	r2, r4
 80180e2:	d0f0      	beq.n	80180c6 <__match+0x6>
 80180e4:	2000      	movs	r0, #0
 80180e6:	e7f3      	b.n	80180d0 <__match+0x10>

080180e8 <__hexnan>:
 80180e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80180ec:	680b      	ldr	r3, [r1, #0]
 80180ee:	6801      	ldr	r1, [r0, #0]
 80180f0:	115e      	asrs	r6, r3, #5
 80180f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80180f6:	f013 031f 	ands.w	r3, r3, #31
 80180fa:	b087      	sub	sp, #28
 80180fc:	bf18      	it	ne
 80180fe:	3604      	addne	r6, #4
 8018100:	2500      	movs	r5, #0
 8018102:	1f37      	subs	r7, r6, #4
 8018104:	4682      	mov	sl, r0
 8018106:	4690      	mov	r8, r2
 8018108:	9301      	str	r3, [sp, #4]
 801810a:	f846 5c04 	str.w	r5, [r6, #-4]
 801810e:	46b9      	mov	r9, r7
 8018110:	463c      	mov	r4, r7
 8018112:	9502      	str	r5, [sp, #8]
 8018114:	46ab      	mov	fp, r5
 8018116:	784a      	ldrb	r2, [r1, #1]
 8018118:	1c4b      	adds	r3, r1, #1
 801811a:	9303      	str	r3, [sp, #12]
 801811c:	b342      	cbz	r2, 8018170 <__hexnan+0x88>
 801811e:	4610      	mov	r0, r2
 8018120:	9105      	str	r1, [sp, #20]
 8018122:	9204      	str	r2, [sp, #16]
 8018124:	f7ff fd94 	bl	8017c50 <__hexdig_fun>
 8018128:	2800      	cmp	r0, #0
 801812a:	d151      	bne.n	80181d0 <__hexnan+0xe8>
 801812c:	9a04      	ldr	r2, [sp, #16]
 801812e:	9905      	ldr	r1, [sp, #20]
 8018130:	2a20      	cmp	r2, #32
 8018132:	d818      	bhi.n	8018166 <__hexnan+0x7e>
 8018134:	9b02      	ldr	r3, [sp, #8]
 8018136:	459b      	cmp	fp, r3
 8018138:	dd13      	ble.n	8018162 <__hexnan+0x7a>
 801813a:	454c      	cmp	r4, r9
 801813c:	d206      	bcs.n	801814c <__hexnan+0x64>
 801813e:	2d07      	cmp	r5, #7
 8018140:	dc04      	bgt.n	801814c <__hexnan+0x64>
 8018142:	462a      	mov	r2, r5
 8018144:	4649      	mov	r1, r9
 8018146:	4620      	mov	r0, r4
 8018148:	f7ff ffa8 	bl	801809c <L_shift>
 801814c:	4544      	cmp	r4, r8
 801814e:	d952      	bls.n	80181f6 <__hexnan+0x10e>
 8018150:	2300      	movs	r3, #0
 8018152:	f1a4 0904 	sub.w	r9, r4, #4
 8018156:	f844 3c04 	str.w	r3, [r4, #-4]
 801815a:	f8cd b008 	str.w	fp, [sp, #8]
 801815e:	464c      	mov	r4, r9
 8018160:	461d      	mov	r5, r3
 8018162:	9903      	ldr	r1, [sp, #12]
 8018164:	e7d7      	b.n	8018116 <__hexnan+0x2e>
 8018166:	2a29      	cmp	r2, #41	@ 0x29
 8018168:	d157      	bne.n	801821a <__hexnan+0x132>
 801816a:	3102      	adds	r1, #2
 801816c:	f8ca 1000 	str.w	r1, [sl]
 8018170:	f1bb 0f00 	cmp.w	fp, #0
 8018174:	d051      	beq.n	801821a <__hexnan+0x132>
 8018176:	454c      	cmp	r4, r9
 8018178:	d206      	bcs.n	8018188 <__hexnan+0xa0>
 801817a:	2d07      	cmp	r5, #7
 801817c:	dc04      	bgt.n	8018188 <__hexnan+0xa0>
 801817e:	462a      	mov	r2, r5
 8018180:	4649      	mov	r1, r9
 8018182:	4620      	mov	r0, r4
 8018184:	f7ff ff8a 	bl	801809c <L_shift>
 8018188:	4544      	cmp	r4, r8
 801818a:	d936      	bls.n	80181fa <__hexnan+0x112>
 801818c:	f1a8 0204 	sub.w	r2, r8, #4
 8018190:	4623      	mov	r3, r4
 8018192:	f853 1b04 	ldr.w	r1, [r3], #4
 8018196:	f842 1f04 	str.w	r1, [r2, #4]!
 801819a:	429f      	cmp	r7, r3
 801819c:	d2f9      	bcs.n	8018192 <__hexnan+0xaa>
 801819e:	1b3b      	subs	r3, r7, r4
 80181a0:	f023 0303 	bic.w	r3, r3, #3
 80181a4:	3304      	adds	r3, #4
 80181a6:	3401      	adds	r4, #1
 80181a8:	3e03      	subs	r6, #3
 80181aa:	42b4      	cmp	r4, r6
 80181ac:	bf88      	it	hi
 80181ae:	2304      	movhi	r3, #4
 80181b0:	4443      	add	r3, r8
 80181b2:	2200      	movs	r2, #0
 80181b4:	f843 2b04 	str.w	r2, [r3], #4
 80181b8:	429f      	cmp	r7, r3
 80181ba:	d2fb      	bcs.n	80181b4 <__hexnan+0xcc>
 80181bc:	683b      	ldr	r3, [r7, #0]
 80181be:	b91b      	cbnz	r3, 80181c8 <__hexnan+0xe0>
 80181c0:	4547      	cmp	r7, r8
 80181c2:	d128      	bne.n	8018216 <__hexnan+0x12e>
 80181c4:	2301      	movs	r3, #1
 80181c6:	603b      	str	r3, [r7, #0]
 80181c8:	2005      	movs	r0, #5
 80181ca:	b007      	add	sp, #28
 80181cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d0:	3501      	adds	r5, #1
 80181d2:	2d08      	cmp	r5, #8
 80181d4:	f10b 0b01 	add.w	fp, fp, #1
 80181d8:	dd06      	ble.n	80181e8 <__hexnan+0x100>
 80181da:	4544      	cmp	r4, r8
 80181dc:	d9c1      	bls.n	8018162 <__hexnan+0x7a>
 80181de:	2300      	movs	r3, #0
 80181e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80181e4:	2501      	movs	r5, #1
 80181e6:	3c04      	subs	r4, #4
 80181e8:	6822      	ldr	r2, [r4, #0]
 80181ea:	f000 000f 	and.w	r0, r0, #15
 80181ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80181f2:	6020      	str	r0, [r4, #0]
 80181f4:	e7b5      	b.n	8018162 <__hexnan+0x7a>
 80181f6:	2508      	movs	r5, #8
 80181f8:	e7b3      	b.n	8018162 <__hexnan+0x7a>
 80181fa:	9b01      	ldr	r3, [sp, #4]
 80181fc:	2b00      	cmp	r3, #0
 80181fe:	d0dd      	beq.n	80181bc <__hexnan+0xd4>
 8018200:	f1c3 0320 	rsb	r3, r3, #32
 8018204:	f04f 32ff 	mov.w	r2, #4294967295
 8018208:	40da      	lsrs	r2, r3
 801820a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801820e:	4013      	ands	r3, r2
 8018210:	f846 3c04 	str.w	r3, [r6, #-4]
 8018214:	e7d2      	b.n	80181bc <__hexnan+0xd4>
 8018216:	3f04      	subs	r7, #4
 8018218:	e7d0      	b.n	80181bc <__hexnan+0xd4>
 801821a:	2004      	movs	r0, #4
 801821c:	e7d5      	b.n	80181ca <__hexnan+0xe2>

0801821e <__ascii_mbtowc>:
 801821e:	b082      	sub	sp, #8
 8018220:	b901      	cbnz	r1, 8018224 <__ascii_mbtowc+0x6>
 8018222:	a901      	add	r1, sp, #4
 8018224:	b142      	cbz	r2, 8018238 <__ascii_mbtowc+0x1a>
 8018226:	b14b      	cbz	r3, 801823c <__ascii_mbtowc+0x1e>
 8018228:	7813      	ldrb	r3, [r2, #0]
 801822a:	600b      	str	r3, [r1, #0]
 801822c:	7812      	ldrb	r2, [r2, #0]
 801822e:	1e10      	subs	r0, r2, #0
 8018230:	bf18      	it	ne
 8018232:	2001      	movne	r0, #1
 8018234:	b002      	add	sp, #8
 8018236:	4770      	bx	lr
 8018238:	4610      	mov	r0, r2
 801823a:	e7fb      	b.n	8018234 <__ascii_mbtowc+0x16>
 801823c:	f06f 0001 	mvn.w	r0, #1
 8018240:	e7f8      	b.n	8018234 <__ascii_mbtowc+0x16>

08018242 <_realloc_r>:
 8018242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018246:	4680      	mov	r8, r0
 8018248:	4615      	mov	r5, r2
 801824a:	460c      	mov	r4, r1
 801824c:	b921      	cbnz	r1, 8018258 <_realloc_r+0x16>
 801824e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018252:	4611      	mov	r1, r2
 8018254:	f7fb bbda 	b.w	8013a0c <_malloc_r>
 8018258:	b92a      	cbnz	r2, 8018266 <_realloc_r+0x24>
 801825a:	f7fd fb39 	bl	80158d0 <_free_r>
 801825e:	2400      	movs	r4, #0
 8018260:	4620      	mov	r0, r4
 8018262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018266:	f000 f8b2 	bl	80183ce <_malloc_usable_size_r>
 801826a:	4285      	cmp	r5, r0
 801826c:	4606      	mov	r6, r0
 801826e:	d802      	bhi.n	8018276 <_realloc_r+0x34>
 8018270:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8018274:	d8f4      	bhi.n	8018260 <_realloc_r+0x1e>
 8018276:	4629      	mov	r1, r5
 8018278:	4640      	mov	r0, r8
 801827a:	f7fb fbc7 	bl	8013a0c <_malloc_r>
 801827e:	4607      	mov	r7, r0
 8018280:	2800      	cmp	r0, #0
 8018282:	d0ec      	beq.n	801825e <_realloc_r+0x1c>
 8018284:	42b5      	cmp	r5, r6
 8018286:	462a      	mov	r2, r5
 8018288:	4621      	mov	r1, r4
 801828a:	bf28      	it	cs
 801828c:	4632      	movcs	r2, r6
 801828e:	f7fc fcbc 	bl	8014c0a <memcpy>
 8018292:	4621      	mov	r1, r4
 8018294:	4640      	mov	r0, r8
 8018296:	f7fd fb1b 	bl	80158d0 <_free_r>
 801829a:	463c      	mov	r4, r7
 801829c:	e7e0      	b.n	8018260 <_realloc_r+0x1e>
	...

080182a0 <_strtoul_l.constprop.0>:
 80182a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182a4:	4e34      	ldr	r6, [pc, #208]	@ (8018378 <_strtoul_l.constprop.0+0xd8>)
 80182a6:	4686      	mov	lr, r0
 80182a8:	460d      	mov	r5, r1
 80182aa:	4628      	mov	r0, r5
 80182ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182b0:	5d37      	ldrb	r7, [r6, r4]
 80182b2:	f017 0708 	ands.w	r7, r7, #8
 80182b6:	d1f8      	bne.n	80182aa <_strtoul_l.constprop.0+0xa>
 80182b8:	2c2d      	cmp	r4, #45	@ 0x2d
 80182ba:	d12f      	bne.n	801831c <_strtoul_l.constprop.0+0x7c>
 80182bc:	782c      	ldrb	r4, [r5, #0]
 80182be:	2701      	movs	r7, #1
 80182c0:	1c85      	adds	r5, r0, #2
 80182c2:	f033 0010 	bics.w	r0, r3, #16
 80182c6:	d109      	bne.n	80182dc <_strtoul_l.constprop.0+0x3c>
 80182c8:	2c30      	cmp	r4, #48	@ 0x30
 80182ca:	d12c      	bne.n	8018326 <_strtoul_l.constprop.0+0x86>
 80182cc:	7828      	ldrb	r0, [r5, #0]
 80182ce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80182d2:	2858      	cmp	r0, #88	@ 0x58
 80182d4:	d127      	bne.n	8018326 <_strtoul_l.constprop.0+0x86>
 80182d6:	786c      	ldrb	r4, [r5, #1]
 80182d8:	2310      	movs	r3, #16
 80182da:	3502      	adds	r5, #2
 80182dc:	f04f 38ff 	mov.w	r8, #4294967295
 80182e0:	2600      	movs	r6, #0
 80182e2:	fbb8 f8f3 	udiv	r8, r8, r3
 80182e6:	fb03 f908 	mul.w	r9, r3, r8
 80182ea:	ea6f 0909 	mvn.w	r9, r9
 80182ee:	4630      	mov	r0, r6
 80182f0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80182f4:	f1bc 0f09 	cmp.w	ip, #9
 80182f8:	d81c      	bhi.n	8018334 <_strtoul_l.constprop.0+0x94>
 80182fa:	4664      	mov	r4, ip
 80182fc:	42a3      	cmp	r3, r4
 80182fe:	dd2a      	ble.n	8018356 <_strtoul_l.constprop.0+0xb6>
 8018300:	f1b6 3fff 	cmp.w	r6, #4294967295
 8018304:	d007      	beq.n	8018316 <_strtoul_l.constprop.0+0x76>
 8018306:	4580      	cmp	r8, r0
 8018308:	d322      	bcc.n	8018350 <_strtoul_l.constprop.0+0xb0>
 801830a:	d101      	bne.n	8018310 <_strtoul_l.constprop.0+0x70>
 801830c:	45a1      	cmp	r9, r4
 801830e:	db1f      	blt.n	8018350 <_strtoul_l.constprop.0+0xb0>
 8018310:	fb00 4003 	mla	r0, r0, r3, r4
 8018314:	2601      	movs	r6, #1
 8018316:	f815 4b01 	ldrb.w	r4, [r5], #1
 801831a:	e7e9      	b.n	80182f0 <_strtoul_l.constprop.0+0x50>
 801831c:	2c2b      	cmp	r4, #43	@ 0x2b
 801831e:	bf04      	itt	eq
 8018320:	782c      	ldrbeq	r4, [r5, #0]
 8018322:	1c85      	addeq	r5, r0, #2
 8018324:	e7cd      	b.n	80182c2 <_strtoul_l.constprop.0+0x22>
 8018326:	2b00      	cmp	r3, #0
 8018328:	d1d8      	bne.n	80182dc <_strtoul_l.constprop.0+0x3c>
 801832a:	2c30      	cmp	r4, #48	@ 0x30
 801832c:	bf0c      	ite	eq
 801832e:	2308      	moveq	r3, #8
 8018330:	230a      	movne	r3, #10
 8018332:	e7d3      	b.n	80182dc <_strtoul_l.constprop.0+0x3c>
 8018334:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8018338:	f1bc 0f19 	cmp.w	ip, #25
 801833c:	d801      	bhi.n	8018342 <_strtoul_l.constprop.0+0xa2>
 801833e:	3c37      	subs	r4, #55	@ 0x37
 8018340:	e7dc      	b.n	80182fc <_strtoul_l.constprop.0+0x5c>
 8018342:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8018346:	f1bc 0f19 	cmp.w	ip, #25
 801834a:	d804      	bhi.n	8018356 <_strtoul_l.constprop.0+0xb6>
 801834c:	3c57      	subs	r4, #87	@ 0x57
 801834e:	e7d5      	b.n	80182fc <_strtoul_l.constprop.0+0x5c>
 8018350:	f04f 36ff 	mov.w	r6, #4294967295
 8018354:	e7df      	b.n	8018316 <_strtoul_l.constprop.0+0x76>
 8018356:	1c73      	adds	r3, r6, #1
 8018358:	d106      	bne.n	8018368 <_strtoul_l.constprop.0+0xc8>
 801835a:	2322      	movs	r3, #34	@ 0x22
 801835c:	f8ce 3000 	str.w	r3, [lr]
 8018360:	4630      	mov	r0, r6
 8018362:	b932      	cbnz	r2, 8018372 <_strtoul_l.constprop.0+0xd2>
 8018364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018368:	b107      	cbz	r7, 801836c <_strtoul_l.constprop.0+0xcc>
 801836a:	4240      	negs	r0, r0
 801836c:	2a00      	cmp	r2, #0
 801836e:	d0f9      	beq.n	8018364 <_strtoul_l.constprop.0+0xc4>
 8018370:	b106      	cbz	r6, 8018374 <_strtoul_l.constprop.0+0xd4>
 8018372:	1e69      	subs	r1, r5, #1
 8018374:	6011      	str	r1, [r2, #0]
 8018376:	e7f5      	b.n	8018364 <_strtoul_l.constprop.0+0xc4>
 8018378:	0801ac41 	.word	0x0801ac41

0801837c <_strtoul_r>:
 801837c:	f7ff bf90 	b.w	80182a0 <_strtoul_l.constprop.0>

08018380 <__ascii_wctomb>:
 8018380:	4603      	mov	r3, r0
 8018382:	4608      	mov	r0, r1
 8018384:	b141      	cbz	r1, 8018398 <__ascii_wctomb+0x18>
 8018386:	2aff      	cmp	r2, #255	@ 0xff
 8018388:	d904      	bls.n	8018394 <__ascii_wctomb+0x14>
 801838a:	228a      	movs	r2, #138	@ 0x8a
 801838c:	601a      	str	r2, [r3, #0]
 801838e:	f04f 30ff 	mov.w	r0, #4294967295
 8018392:	4770      	bx	lr
 8018394:	700a      	strb	r2, [r1, #0]
 8018396:	2001      	movs	r0, #1
 8018398:	4770      	bx	lr
	...

0801839c <fiprintf>:
 801839c:	b40e      	push	{r1, r2, r3}
 801839e:	b503      	push	{r0, r1, lr}
 80183a0:	4601      	mov	r1, r0
 80183a2:	ab03      	add	r3, sp, #12
 80183a4:	4805      	ldr	r0, [pc, #20]	@ (80183bc <fiprintf+0x20>)
 80183a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80183aa:	6800      	ldr	r0, [r0, #0]
 80183ac:	9301      	str	r3, [sp, #4]
 80183ae:	f000 f83f 	bl	8018430 <_vfiprintf_r>
 80183b2:	b002      	add	sp, #8
 80183b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80183b8:	b003      	add	sp, #12
 80183ba:	4770      	bx	lr
 80183bc:	2000006c 	.word	0x2000006c

080183c0 <abort>:
 80183c0:	b508      	push	{r3, lr}
 80183c2:	2006      	movs	r0, #6
 80183c4:	f000 fa08 	bl	80187d8 <raise>
 80183c8:	2001      	movs	r0, #1
 80183ca:	f7ef fef3 	bl	80081b4 <_exit>

080183ce <_malloc_usable_size_r>:
 80183ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183d2:	1f18      	subs	r0, r3, #4
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	bfbc      	itt	lt
 80183d8:	580b      	ldrlt	r3, [r1, r0]
 80183da:	18c0      	addlt	r0, r0, r3
 80183dc:	4770      	bx	lr

080183de <__sfputc_r>:
 80183de:	6893      	ldr	r3, [r2, #8]
 80183e0:	3b01      	subs	r3, #1
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	b410      	push	{r4}
 80183e6:	6093      	str	r3, [r2, #8]
 80183e8:	da08      	bge.n	80183fc <__sfputc_r+0x1e>
 80183ea:	6994      	ldr	r4, [r2, #24]
 80183ec:	42a3      	cmp	r3, r4
 80183ee:	db01      	blt.n	80183f4 <__sfputc_r+0x16>
 80183f0:	290a      	cmp	r1, #10
 80183f2:	d103      	bne.n	80183fc <__sfputc_r+0x1e>
 80183f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183f8:	f000 b932 	b.w	8018660 <__swbuf_r>
 80183fc:	6813      	ldr	r3, [r2, #0]
 80183fe:	1c58      	adds	r0, r3, #1
 8018400:	6010      	str	r0, [r2, #0]
 8018402:	7019      	strb	r1, [r3, #0]
 8018404:	4608      	mov	r0, r1
 8018406:	f85d 4b04 	ldr.w	r4, [sp], #4
 801840a:	4770      	bx	lr

0801840c <__sfputs_r>:
 801840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801840e:	4606      	mov	r6, r0
 8018410:	460f      	mov	r7, r1
 8018412:	4614      	mov	r4, r2
 8018414:	18d5      	adds	r5, r2, r3
 8018416:	42ac      	cmp	r4, r5
 8018418:	d101      	bne.n	801841e <__sfputs_r+0x12>
 801841a:	2000      	movs	r0, #0
 801841c:	e007      	b.n	801842e <__sfputs_r+0x22>
 801841e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018422:	463a      	mov	r2, r7
 8018424:	4630      	mov	r0, r6
 8018426:	f7ff ffda 	bl	80183de <__sfputc_r>
 801842a:	1c43      	adds	r3, r0, #1
 801842c:	d1f3      	bne.n	8018416 <__sfputs_r+0xa>
 801842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018430 <_vfiprintf_r>:
 8018430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018434:	460d      	mov	r5, r1
 8018436:	b09d      	sub	sp, #116	@ 0x74
 8018438:	4614      	mov	r4, r2
 801843a:	4698      	mov	r8, r3
 801843c:	4606      	mov	r6, r0
 801843e:	b118      	cbz	r0, 8018448 <_vfiprintf_r+0x18>
 8018440:	6a03      	ldr	r3, [r0, #32]
 8018442:	b90b      	cbnz	r3, 8018448 <_vfiprintf_r+0x18>
 8018444:	f7fc fa66 	bl	8014914 <__sinit>
 8018448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801844a:	07d9      	lsls	r1, r3, #31
 801844c:	d405      	bmi.n	801845a <_vfiprintf_r+0x2a>
 801844e:	89ab      	ldrh	r3, [r5, #12]
 8018450:	059a      	lsls	r2, r3, #22
 8018452:	d402      	bmi.n	801845a <_vfiprintf_r+0x2a>
 8018454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018456:	f7fc fbd6 	bl	8014c06 <__retarget_lock_acquire_recursive>
 801845a:	89ab      	ldrh	r3, [r5, #12]
 801845c:	071b      	lsls	r3, r3, #28
 801845e:	d501      	bpl.n	8018464 <_vfiprintf_r+0x34>
 8018460:	692b      	ldr	r3, [r5, #16]
 8018462:	b99b      	cbnz	r3, 801848c <_vfiprintf_r+0x5c>
 8018464:	4629      	mov	r1, r5
 8018466:	4630      	mov	r0, r6
 8018468:	f000 f938 	bl	80186dc <__swsetup_r>
 801846c:	b170      	cbz	r0, 801848c <_vfiprintf_r+0x5c>
 801846e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018470:	07dc      	lsls	r4, r3, #31
 8018472:	d504      	bpl.n	801847e <_vfiprintf_r+0x4e>
 8018474:	f04f 30ff 	mov.w	r0, #4294967295
 8018478:	b01d      	add	sp, #116	@ 0x74
 801847a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801847e:	89ab      	ldrh	r3, [r5, #12]
 8018480:	0598      	lsls	r0, r3, #22
 8018482:	d4f7      	bmi.n	8018474 <_vfiprintf_r+0x44>
 8018484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018486:	f7fc fbbf 	bl	8014c08 <__retarget_lock_release_recursive>
 801848a:	e7f3      	b.n	8018474 <_vfiprintf_r+0x44>
 801848c:	2300      	movs	r3, #0
 801848e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018490:	2320      	movs	r3, #32
 8018492:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018496:	f8cd 800c 	str.w	r8, [sp, #12]
 801849a:	2330      	movs	r3, #48	@ 0x30
 801849c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801864c <_vfiprintf_r+0x21c>
 80184a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80184a4:	f04f 0901 	mov.w	r9, #1
 80184a8:	4623      	mov	r3, r4
 80184aa:	469a      	mov	sl, r3
 80184ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80184b0:	b10a      	cbz	r2, 80184b6 <_vfiprintf_r+0x86>
 80184b2:	2a25      	cmp	r2, #37	@ 0x25
 80184b4:	d1f9      	bne.n	80184aa <_vfiprintf_r+0x7a>
 80184b6:	ebba 0b04 	subs.w	fp, sl, r4
 80184ba:	d00b      	beq.n	80184d4 <_vfiprintf_r+0xa4>
 80184bc:	465b      	mov	r3, fp
 80184be:	4622      	mov	r2, r4
 80184c0:	4629      	mov	r1, r5
 80184c2:	4630      	mov	r0, r6
 80184c4:	f7ff ffa2 	bl	801840c <__sfputs_r>
 80184c8:	3001      	adds	r0, #1
 80184ca:	f000 80a7 	beq.w	801861c <_vfiprintf_r+0x1ec>
 80184ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80184d0:	445a      	add	r2, fp
 80184d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80184d4:	f89a 3000 	ldrb.w	r3, [sl]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	f000 809f 	beq.w	801861c <_vfiprintf_r+0x1ec>
 80184de:	2300      	movs	r3, #0
 80184e0:	f04f 32ff 	mov.w	r2, #4294967295
 80184e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80184e8:	f10a 0a01 	add.w	sl, sl, #1
 80184ec:	9304      	str	r3, [sp, #16]
 80184ee:	9307      	str	r3, [sp, #28]
 80184f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80184f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80184f6:	4654      	mov	r4, sl
 80184f8:	2205      	movs	r2, #5
 80184fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80184fe:	4853      	ldr	r0, [pc, #332]	@ (801864c <_vfiprintf_r+0x21c>)
 8018500:	f7e7 fe86 	bl	8000210 <memchr>
 8018504:	9a04      	ldr	r2, [sp, #16]
 8018506:	b9d8      	cbnz	r0, 8018540 <_vfiprintf_r+0x110>
 8018508:	06d1      	lsls	r1, r2, #27
 801850a:	bf44      	itt	mi
 801850c:	2320      	movmi	r3, #32
 801850e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018512:	0713      	lsls	r3, r2, #28
 8018514:	bf44      	itt	mi
 8018516:	232b      	movmi	r3, #43	@ 0x2b
 8018518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801851c:	f89a 3000 	ldrb.w	r3, [sl]
 8018520:	2b2a      	cmp	r3, #42	@ 0x2a
 8018522:	d015      	beq.n	8018550 <_vfiprintf_r+0x120>
 8018524:	9a07      	ldr	r2, [sp, #28]
 8018526:	4654      	mov	r4, sl
 8018528:	2000      	movs	r0, #0
 801852a:	f04f 0c0a 	mov.w	ip, #10
 801852e:	4621      	mov	r1, r4
 8018530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018534:	3b30      	subs	r3, #48	@ 0x30
 8018536:	2b09      	cmp	r3, #9
 8018538:	d94b      	bls.n	80185d2 <_vfiprintf_r+0x1a2>
 801853a:	b1b0      	cbz	r0, 801856a <_vfiprintf_r+0x13a>
 801853c:	9207      	str	r2, [sp, #28]
 801853e:	e014      	b.n	801856a <_vfiprintf_r+0x13a>
 8018540:	eba0 0308 	sub.w	r3, r0, r8
 8018544:	fa09 f303 	lsl.w	r3, r9, r3
 8018548:	4313      	orrs	r3, r2
 801854a:	9304      	str	r3, [sp, #16]
 801854c:	46a2      	mov	sl, r4
 801854e:	e7d2      	b.n	80184f6 <_vfiprintf_r+0xc6>
 8018550:	9b03      	ldr	r3, [sp, #12]
 8018552:	1d19      	adds	r1, r3, #4
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	9103      	str	r1, [sp, #12]
 8018558:	2b00      	cmp	r3, #0
 801855a:	bfbb      	ittet	lt
 801855c:	425b      	neglt	r3, r3
 801855e:	f042 0202 	orrlt.w	r2, r2, #2
 8018562:	9307      	strge	r3, [sp, #28]
 8018564:	9307      	strlt	r3, [sp, #28]
 8018566:	bfb8      	it	lt
 8018568:	9204      	strlt	r2, [sp, #16]
 801856a:	7823      	ldrb	r3, [r4, #0]
 801856c:	2b2e      	cmp	r3, #46	@ 0x2e
 801856e:	d10a      	bne.n	8018586 <_vfiprintf_r+0x156>
 8018570:	7863      	ldrb	r3, [r4, #1]
 8018572:	2b2a      	cmp	r3, #42	@ 0x2a
 8018574:	d132      	bne.n	80185dc <_vfiprintf_r+0x1ac>
 8018576:	9b03      	ldr	r3, [sp, #12]
 8018578:	1d1a      	adds	r2, r3, #4
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	9203      	str	r2, [sp, #12]
 801857e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018582:	3402      	adds	r4, #2
 8018584:	9305      	str	r3, [sp, #20]
 8018586:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801865c <_vfiprintf_r+0x22c>
 801858a:	7821      	ldrb	r1, [r4, #0]
 801858c:	2203      	movs	r2, #3
 801858e:	4650      	mov	r0, sl
 8018590:	f7e7 fe3e 	bl	8000210 <memchr>
 8018594:	b138      	cbz	r0, 80185a6 <_vfiprintf_r+0x176>
 8018596:	9b04      	ldr	r3, [sp, #16]
 8018598:	eba0 000a 	sub.w	r0, r0, sl
 801859c:	2240      	movs	r2, #64	@ 0x40
 801859e:	4082      	lsls	r2, r0
 80185a0:	4313      	orrs	r3, r2
 80185a2:	3401      	adds	r4, #1
 80185a4:	9304      	str	r3, [sp, #16]
 80185a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80185aa:	4829      	ldr	r0, [pc, #164]	@ (8018650 <_vfiprintf_r+0x220>)
 80185ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80185b0:	2206      	movs	r2, #6
 80185b2:	f7e7 fe2d 	bl	8000210 <memchr>
 80185b6:	2800      	cmp	r0, #0
 80185b8:	d03f      	beq.n	801863a <_vfiprintf_r+0x20a>
 80185ba:	4b26      	ldr	r3, [pc, #152]	@ (8018654 <_vfiprintf_r+0x224>)
 80185bc:	bb1b      	cbnz	r3, 8018606 <_vfiprintf_r+0x1d6>
 80185be:	9b03      	ldr	r3, [sp, #12]
 80185c0:	3307      	adds	r3, #7
 80185c2:	f023 0307 	bic.w	r3, r3, #7
 80185c6:	3308      	adds	r3, #8
 80185c8:	9303      	str	r3, [sp, #12]
 80185ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80185cc:	443b      	add	r3, r7
 80185ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80185d0:	e76a      	b.n	80184a8 <_vfiprintf_r+0x78>
 80185d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80185d6:	460c      	mov	r4, r1
 80185d8:	2001      	movs	r0, #1
 80185da:	e7a8      	b.n	801852e <_vfiprintf_r+0xfe>
 80185dc:	2300      	movs	r3, #0
 80185de:	3401      	adds	r4, #1
 80185e0:	9305      	str	r3, [sp, #20]
 80185e2:	4619      	mov	r1, r3
 80185e4:	f04f 0c0a 	mov.w	ip, #10
 80185e8:	4620      	mov	r0, r4
 80185ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80185ee:	3a30      	subs	r2, #48	@ 0x30
 80185f0:	2a09      	cmp	r2, #9
 80185f2:	d903      	bls.n	80185fc <_vfiprintf_r+0x1cc>
 80185f4:	2b00      	cmp	r3, #0
 80185f6:	d0c6      	beq.n	8018586 <_vfiprintf_r+0x156>
 80185f8:	9105      	str	r1, [sp, #20]
 80185fa:	e7c4      	b.n	8018586 <_vfiprintf_r+0x156>
 80185fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8018600:	4604      	mov	r4, r0
 8018602:	2301      	movs	r3, #1
 8018604:	e7f0      	b.n	80185e8 <_vfiprintf_r+0x1b8>
 8018606:	ab03      	add	r3, sp, #12
 8018608:	9300      	str	r3, [sp, #0]
 801860a:	462a      	mov	r2, r5
 801860c:	4b12      	ldr	r3, [pc, #72]	@ (8018658 <_vfiprintf_r+0x228>)
 801860e:	a904      	add	r1, sp, #16
 8018610:	4630      	mov	r0, r6
 8018612:	f7fb fb27 	bl	8013c64 <_printf_float>
 8018616:	4607      	mov	r7, r0
 8018618:	1c78      	adds	r0, r7, #1
 801861a:	d1d6      	bne.n	80185ca <_vfiprintf_r+0x19a>
 801861c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801861e:	07d9      	lsls	r1, r3, #31
 8018620:	d405      	bmi.n	801862e <_vfiprintf_r+0x1fe>
 8018622:	89ab      	ldrh	r3, [r5, #12]
 8018624:	059a      	lsls	r2, r3, #22
 8018626:	d402      	bmi.n	801862e <_vfiprintf_r+0x1fe>
 8018628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801862a:	f7fc faed 	bl	8014c08 <__retarget_lock_release_recursive>
 801862e:	89ab      	ldrh	r3, [r5, #12]
 8018630:	065b      	lsls	r3, r3, #25
 8018632:	f53f af1f 	bmi.w	8018474 <_vfiprintf_r+0x44>
 8018636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018638:	e71e      	b.n	8018478 <_vfiprintf_r+0x48>
 801863a:	ab03      	add	r3, sp, #12
 801863c:	9300      	str	r3, [sp, #0]
 801863e:	462a      	mov	r2, r5
 8018640:	4b05      	ldr	r3, [pc, #20]	@ (8018658 <_vfiprintf_r+0x228>)
 8018642:	a904      	add	r1, sp, #16
 8018644:	4630      	mov	r0, r6
 8018646:	f7fb fda5 	bl	8014194 <_printf_i>
 801864a:	e7e4      	b.n	8018616 <_vfiprintf_r+0x1e6>
 801864c:	0801ad41 	.word	0x0801ad41
 8018650:	0801ad4b 	.word	0x0801ad4b
 8018654:	08013c65 	.word	0x08013c65
 8018658:	0801840d 	.word	0x0801840d
 801865c:	0801ad47 	.word	0x0801ad47

08018660 <__swbuf_r>:
 8018660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018662:	460e      	mov	r6, r1
 8018664:	4614      	mov	r4, r2
 8018666:	4605      	mov	r5, r0
 8018668:	b118      	cbz	r0, 8018672 <__swbuf_r+0x12>
 801866a:	6a03      	ldr	r3, [r0, #32]
 801866c:	b90b      	cbnz	r3, 8018672 <__swbuf_r+0x12>
 801866e:	f7fc f951 	bl	8014914 <__sinit>
 8018672:	69a3      	ldr	r3, [r4, #24]
 8018674:	60a3      	str	r3, [r4, #8]
 8018676:	89a3      	ldrh	r3, [r4, #12]
 8018678:	071a      	lsls	r2, r3, #28
 801867a:	d501      	bpl.n	8018680 <__swbuf_r+0x20>
 801867c:	6923      	ldr	r3, [r4, #16]
 801867e:	b943      	cbnz	r3, 8018692 <__swbuf_r+0x32>
 8018680:	4621      	mov	r1, r4
 8018682:	4628      	mov	r0, r5
 8018684:	f000 f82a 	bl	80186dc <__swsetup_r>
 8018688:	b118      	cbz	r0, 8018692 <__swbuf_r+0x32>
 801868a:	f04f 37ff 	mov.w	r7, #4294967295
 801868e:	4638      	mov	r0, r7
 8018690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018692:	6823      	ldr	r3, [r4, #0]
 8018694:	6922      	ldr	r2, [r4, #16]
 8018696:	1a98      	subs	r0, r3, r2
 8018698:	6963      	ldr	r3, [r4, #20]
 801869a:	b2f6      	uxtb	r6, r6
 801869c:	4283      	cmp	r3, r0
 801869e:	4637      	mov	r7, r6
 80186a0:	dc05      	bgt.n	80186ae <__swbuf_r+0x4e>
 80186a2:	4621      	mov	r1, r4
 80186a4:	4628      	mov	r0, r5
 80186a6:	f7ff f993 	bl	80179d0 <_fflush_r>
 80186aa:	2800      	cmp	r0, #0
 80186ac:	d1ed      	bne.n	801868a <__swbuf_r+0x2a>
 80186ae:	68a3      	ldr	r3, [r4, #8]
 80186b0:	3b01      	subs	r3, #1
 80186b2:	60a3      	str	r3, [r4, #8]
 80186b4:	6823      	ldr	r3, [r4, #0]
 80186b6:	1c5a      	adds	r2, r3, #1
 80186b8:	6022      	str	r2, [r4, #0]
 80186ba:	701e      	strb	r6, [r3, #0]
 80186bc:	6962      	ldr	r2, [r4, #20]
 80186be:	1c43      	adds	r3, r0, #1
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d004      	beq.n	80186ce <__swbuf_r+0x6e>
 80186c4:	89a3      	ldrh	r3, [r4, #12]
 80186c6:	07db      	lsls	r3, r3, #31
 80186c8:	d5e1      	bpl.n	801868e <__swbuf_r+0x2e>
 80186ca:	2e0a      	cmp	r6, #10
 80186cc:	d1df      	bne.n	801868e <__swbuf_r+0x2e>
 80186ce:	4621      	mov	r1, r4
 80186d0:	4628      	mov	r0, r5
 80186d2:	f7ff f97d 	bl	80179d0 <_fflush_r>
 80186d6:	2800      	cmp	r0, #0
 80186d8:	d0d9      	beq.n	801868e <__swbuf_r+0x2e>
 80186da:	e7d6      	b.n	801868a <__swbuf_r+0x2a>

080186dc <__swsetup_r>:
 80186dc:	b538      	push	{r3, r4, r5, lr}
 80186de:	4b29      	ldr	r3, [pc, #164]	@ (8018784 <__swsetup_r+0xa8>)
 80186e0:	4605      	mov	r5, r0
 80186e2:	6818      	ldr	r0, [r3, #0]
 80186e4:	460c      	mov	r4, r1
 80186e6:	b118      	cbz	r0, 80186f0 <__swsetup_r+0x14>
 80186e8:	6a03      	ldr	r3, [r0, #32]
 80186ea:	b90b      	cbnz	r3, 80186f0 <__swsetup_r+0x14>
 80186ec:	f7fc f912 	bl	8014914 <__sinit>
 80186f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186f4:	0719      	lsls	r1, r3, #28
 80186f6:	d422      	bmi.n	801873e <__swsetup_r+0x62>
 80186f8:	06da      	lsls	r2, r3, #27
 80186fa:	d407      	bmi.n	801870c <__swsetup_r+0x30>
 80186fc:	2209      	movs	r2, #9
 80186fe:	602a      	str	r2, [r5, #0]
 8018700:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018704:	81a3      	strh	r3, [r4, #12]
 8018706:	f04f 30ff 	mov.w	r0, #4294967295
 801870a:	e033      	b.n	8018774 <__swsetup_r+0x98>
 801870c:	0758      	lsls	r0, r3, #29
 801870e:	d512      	bpl.n	8018736 <__swsetup_r+0x5a>
 8018710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018712:	b141      	cbz	r1, 8018726 <__swsetup_r+0x4a>
 8018714:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018718:	4299      	cmp	r1, r3
 801871a:	d002      	beq.n	8018722 <__swsetup_r+0x46>
 801871c:	4628      	mov	r0, r5
 801871e:	f7fd f8d7 	bl	80158d0 <_free_r>
 8018722:	2300      	movs	r3, #0
 8018724:	6363      	str	r3, [r4, #52]	@ 0x34
 8018726:	89a3      	ldrh	r3, [r4, #12]
 8018728:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801872c:	81a3      	strh	r3, [r4, #12]
 801872e:	2300      	movs	r3, #0
 8018730:	6063      	str	r3, [r4, #4]
 8018732:	6923      	ldr	r3, [r4, #16]
 8018734:	6023      	str	r3, [r4, #0]
 8018736:	89a3      	ldrh	r3, [r4, #12]
 8018738:	f043 0308 	orr.w	r3, r3, #8
 801873c:	81a3      	strh	r3, [r4, #12]
 801873e:	6923      	ldr	r3, [r4, #16]
 8018740:	b94b      	cbnz	r3, 8018756 <__swsetup_r+0x7a>
 8018742:	89a3      	ldrh	r3, [r4, #12]
 8018744:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018748:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801874c:	d003      	beq.n	8018756 <__swsetup_r+0x7a>
 801874e:	4621      	mov	r1, r4
 8018750:	4628      	mov	r0, r5
 8018752:	f000 f883 	bl	801885c <__smakebuf_r>
 8018756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801875a:	f013 0201 	ands.w	r2, r3, #1
 801875e:	d00a      	beq.n	8018776 <__swsetup_r+0x9a>
 8018760:	2200      	movs	r2, #0
 8018762:	60a2      	str	r2, [r4, #8]
 8018764:	6962      	ldr	r2, [r4, #20]
 8018766:	4252      	negs	r2, r2
 8018768:	61a2      	str	r2, [r4, #24]
 801876a:	6922      	ldr	r2, [r4, #16]
 801876c:	b942      	cbnz	r2, 8018780 <__swsetup_r+0xa4>
 801876e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018772:	d1c5      	bne.n	8018700 <__swsetup_r+0x24>
 8018774:	bd38      	pop	{r3, r4, r5, pc}
 8018776:	0799      	lsls	r1, r3, #30
 8018778:	bf58      	it	pl
 801877a:	6962      	ldrpl	r2, [r4, #20]
 801877c:	60a2      	str	r2, [r4, #8]
 801877e:	e7f4      	b.n	801876a <__swsetup_r+0x8e>
 8018780:	2000      	movs	r0, #0
 8018782:	e7f7      	b.n	8018774 <__swsetup_r+0x98>
 8018784:	2000006c 	.word	0x2000006c

08018788 <_raise_r>:
 8018788:	291f      	cmp	r1, #31
 801878a:	b538      	push	{r3, r4, r5, lr}
 801878c:	4605      	mov	r5, r0
 801878e:	460c      	mov	r4, r1
 8018790:	d904      	bls.n	801879c <_raise_r+0x14>
 8018792:	2316      	movs	r3, #22
 8018794:	6003      	str	r3, [r0, #0]
 8018796:	f04f 30ff 	mov.w	r0, #4294967295
 801879a:	bd38      	pop	{r3, r4, r5, pc}
 801879c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801879e:	b112      	cbz	r2, 80187a6 <_raise_r+0x1e>
 80187a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80187a4:	b94b      	cbnz	r3, 80187ba <_raise_r+0x32>
 80187a6:	4628      	mov	r0, r5
 80187a8:	f000 f830 	bl	801880c <_getpid_r>
 80187ac:	4622      	mov	r2, r4
 80187ae:	4601      	mov	r1, r0
 80187b0:	4628      	mov	r0, r5
 80187b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80187b6:	f000 b817 	b.w	80187e8 <_kill_r>
 80187ba:	2b01      	cmp	r3, #1
 80187bc:	d00a      	beq.n	80187d4 <_raise_r+0x4c>
 80187be:	1c59      	adds	r1, r3, #1
 80187c0:	d103      	bne.n	80187ca <_raise_r+0x42>
 80187c2:	2316      	movs	r3, #22
 80187c4:	6003      	str	r3, [r0, #0]
 80187c6:	2001      	movs	r0, #1
 80187c8:	e7e7      	b.n	801879a <_raise_r+0x12>
 80187ca:	2100      	movs	r1, #0
 80187cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80187d0:	4620      	mov	r0, r4
 80187d2:	4798      	blx	r3
 80187d4:	2000      	movs	r0, #0
 80187d6:	e7e0      	b.n	801879a <_raise_r+0x12>

080187d8 <raise>:
 80187d8:	4b02      	ldr	r3, [pc, #8]	@ (80187e4 <raise+0xc>)
 80187da:	4601      	mov	r1, r0
 80187dc:	6818      	ldr	r0, [r3, #0]
 80187de:	f7ff bfd3 	b.w	8018788 <_raise_r>
 80187e2:	bf00      	nop
 80187e4:	2000006c 	.word	0x2000006c

080187e8 <_kill_r>:
 80187e8:	b538      	push	{r3, r4, r5, lr}
 80187ea:	4d07      	ldr	r5, [pc, #28]	@ (8018808 <_kill_r+0x20>)
 80187ec:	2300      	movs	r3, #0
 80187ee:	4604      	mov	r4, r0
 80187f0:	4608      	mov	r0, r1
 80187f2:	4611      	mov	r1, r2
 80187f4:	602b      	str	r3, [r5, #0]
 80187f6:	f7ef fccd 	bl	8008194 <_kill>
 80187fa:	1c43      	adds	r3, r0, #1
 80187fc:	d102      	bne.n	8018804 <_kill_r+0x1c>
 80187fe:	682b      	ldr	r3, [r5, #0]
 8018800:	b103      	cbz	r3, 8018804 <_kill_r+0x1c>
 8018802:	6023      	str	r3, [r4, #0]
 8018804:	bd38      	pop	{r3, r4, r5, pc}
 8018806:	bf00      	nop
 8018808:	200040b8 	.word	0x200040b8

0801880c <_getpid_r>:
 801880c:	f7ef bcba 	b.w	8008184 <_getpid>

08018810 <__swhatbuf_r>:
 8018810:	b570      	push	{r4, r5, r6, lr}
 8018812:	460c      	mov	r4, r1
 8018814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018818:	2900      	cmp	r1, #0
 801881a:	b096      	sub	sp, #88	@ 0x58
 801881c:	4615      	mov	r5, r2
 801881e:	461e      	mov	r6, r3
 8018820:	da0d      	bge.n	801883e <__swhatbuf_r+0x2e>
 8018822:	89a3      	ldrh	r3, [r4, #12]
 8018824:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018828:	f04f 0100 	mov.w	r1, #0
 801882c:	bf14      	ite	ne
 801882e:	2340      	movne	r3, #64	@ 0x40
 8018830:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018834:	2000      	movs	r0, #0
 8018836:	6031      	str	r1, [r6, #0]
 8018838:	602b      	str	r3, [r5, #0]
 801883a:	b016      	add	sp, #88	@ 0x58
 801883c:	bd70      	pop	{r4, r5, r6, pc}
 801883e:	466a      	mov	r2, sp
 8018840:	f000 f848 	bl	80188d4 <_fstat_r>
 8018844:	2800      	cmp	r0, #0
 8018846:	dbec      	blt.n	8018822 <__swhatbuf_r+0x12>
 8018848:	9901      	ldr	r1, [sp, #4]
 801884a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801884e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018852:	4259      	negs	r1, r3
 8018854:	4159      	adcs	r1, r3
 8018856:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801885a:	e7eb      	b.n	8018834 <__swhatbuf_r+0x24>

0801885c <__smakebuf_r>:
 801885c:	898b      	ldrh	r3, [r1, #12]
 801885e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018860:	079d      	lsls	r5, r3, #30
 8018862:	4606      	mov	r6, r0
 8018864:	460c      	mov	r4, r1
 8018866:	d507      	bpl.n	8018878 <__smakebuf_r+0x1c>
 8018868:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801886c:	6023      	str	r3, [r4, #0]
 801886e:	6123      	str	r3, [r4, #16]
 8018870:	2301      	movs	r3, #1
 8018872:	6163      	str	r3, [r4, #20]
 8018874:	b003      	add	sp, #12
 8018876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018878:	ab01      	add	r3, sp, #4
 801887a:	466a      	mov	r2, sp
 801887c:	f7ff ffc8 	bl	8018810 <__swhatbuf_r>
 8018880:	9f00      	ldr	r7, [sp, #0]
 8018882:	4605      	mov	r5, r0
 8018884:	4639      	mov	r1, r7
 8018886:	4630      	mov	r0, r6
 8018888:	f7fb f8c0 	bl	8013a0c <_malloc_r>
 801888c:	b948      	cbnz	r0, 80188a2 <__smakebuf_r+0x46>
 801888e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018892:	059a      	lsls	r2, r3, #22
 8018894:	d4ee      	bmi.n	8018874 <__smakebuf_r+0x18>
 8018896:	f023 0303 	bic.w	r3, r3, #3
 801889a:	f043 0302 	orr.w	r3, r3, #2
 801889e:	81a3      	strh	r3, [r4, #12]
 80188a0:	e7e2      	b.n	8018868 <__smakebuf_r+0xc>
 80188a2:	89a3      	ldrh	r3, [r4, #12]
 80188a4:	6020      	str	r0, [r4, #0]
 80188a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80188aa:	81a3      	strh	r3, [r4, #12]
 80188ac:	9b01      	ldr	r3, [sp, #4]
 80188ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80188b2:	b15b      	cbz	r3, 80188cc <__smakebuf_r+0x70>
 80188b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80188b8:	4630      	mov	r0, r6
 80188ba:	f000 f81d 	bl	80188f8 <_isatty_r>
 80188be:	b128      	cbz	r0, 80188cc <__smakebuf_r+0x70>
 80188c0:	89a3      	ldrh	r3, [r4, #12]
 80188c2:	f023 0303 	bic.w	r3, r3, #3
 80188c6:	f043 0301 	orr.w	r3, r3, #1
 80188ca:	81a3      	strh	r3, [r4, #12]
 80188cc:	89a3      	ldrh	r3, [r4, #12]
 80188ce:	431d      	orrs	r5, r3
 80188d0:	81a5      	strh	r5, [r4, #12]
 80188d2:	e7cf      	b.n	8018874 <__smakebuf_r+0x18>

080188d4 <_fstat_r>:
 80188d4:	b538      	push	{r3, r4, r5, lr}
 80188d6:	4d07      	ldr	r5, [pc, #28]	@ (80188f4 <_fstat_r+0x20>)
 80188d8:	2300      	movs	r3, #0
 80188da:	4604      	mov	r4, r0
 80188dc:	4608      	mov	r0, r1
 80188de:	4611      	mov	r1, r2
 80188e0:	602b      	str	r3, [r5, #0]
 80188e2:	f7ef fcb7 	bl	8008254 <_fstat>
 80188e6:	1c43      	adds	r3, r0, #1
 80188e8:	d102      	bne.n	80188f0 <_fstat_r+0x1c>
 80188ea:	682b      	ldr	r3, [r5, #0]
 80188ec:	b103      	cbz	r3, 80188f0 <_fstat_r+0x1c>
 80188ee:	6023      	str	r3, [r4, #0]
 80188f0:	bd38      	pop	{r3, r4, r5, pc}
 80188f2:	bf00      	nop
 80188f4:	200040b8 	.word	0x200040b8

080188f8 <_isatty_r>:
 80188f8:	b538      	push	{r3, r4, r5, lr}
 80188fa:	4d06      	ldr	r5, [pc, #24]	@ (8018914 <_isatty_r+0x1c>)
 80188fc:	2300      	movs	r3, #0
 80188fe:	4604      	mov	r4, r0
 8018900:	4608      	mov	r0, r1
 8018902:	602b      	str	r3, [r5, #0]
 8018904:	f7ef fcb6 	bl	8008274 <_isatty>
 8018908:	1c43      	adds	r3, r0, #1
 801890a:	d102      	bne.n	8018912 <_isatty_r+0x1a>
 801890c:	682b      	ldr	r3, [r5, #0]
 801890e:	b103      	cbz	r3, 8018912 <_isatty_r+0x1a>
 8018910:	6023      	str	r3, [r4, #0]
 8018912:	bd38      	pop	{r3, r4, r5, pc}
 8018914:	200040b8 	.word	0x200040b8

08018918 <pow>:
 8018918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801891a:	ed2d 8b02 	vpush	{d8}
 801891e:	eeb0 8a40 	vmov.f32	s16, s0
 8018922:	eef0 8a60 	vmov.f32	s17, s1
 8018926:	ec55 4b11 	vmov	r4, r5, d1
 801892a:	f000 fae1 	bl	8018ef0 <__ieee754_pow>
 801892e:	4622      	mov	r2, r4
 8018930:	462b      	mov	r3, r5
 8018932:	4620      	mov	r0, r4
 8018934:	4629      	mov	r1, r5
 8018936:	ec57 6b10 	vmov	r6, r7, d0
 801893a:	f7e8 f917 	bl	8000b6c <__aeabi_dcmpun>
 801893e:	2800      	cmp	r0, #0
 8018940:	d13b      	bne.n	80189ba <pow+0xa2>
 8018942:	ec51 0b18 	vmov	r0, r1, d8
 8018946:	2200      	movs	r2, #0
 8018948:	2300      	movs	r3, #0
 801894a:	f7e8 f8dd 	bl	8000b08 <__aeabi_dcmpeq>
 801894e:	b1b8      	cbz	r0, 8018980 <pow+0x68>
 8018950:	2200      	movs	r2, #0
 8018952:	2300      	movs	r3, #0
 8018954:	4620      	mov	r0, r4
 8018956:	4629      	mov	r1, r5
 8018958:	f7e8 f8d6 	bl	8000b08 <__aeabi_dcmpeq>
 801895c:	2800      	cmp	r0, #0
 801895e:	d146      	bne.n	80189ee <pow+0xd6>
 8018960:	ec45 4b10 	vmov	d0, r4, r5
 8018964:	f000 f909 	bl	8018b7a <finite>
 8018968:	b338      	cbz	r0, 80189ba <pow+0xa2>
 801896a:	2200      	movs	r2, #0
 801896c:	2300      	movs	r3, #0
 801896e:	4620      	mov	r0, r4
 8018970:	4629      	mov	r1, r5
 8018972:	f7e8 f8d3 	bl	8000b1c <__aeabi_dcmplt>
 8018976:	b300      	cbz	r0, 80189ba <pow+0xa2>
 8018978:	f7fc f91a 	bl	8014bb0 <__errno>
 801897c:	2322      	movs	r3, #34	@ 0x22
 801897e:	e01b      	b.n	80189b8 <pow+0xa0>
 8018980:	ec47 6b10 	vmov	d0, r6, r7
 8018984:	f000 f8f9 	bl	8018b7a <finite>
 8018988:	b9e0      	cbnz	r0, 80189c4 <pow+0xac>
 801898a:	eeb0 0a48 	vmov.f32	s0, s16
 801898e:	eef0 0a68 	vmov.f32	s1, s17
 8018992:	f000 f8f2 	bl	8018b7a <finite>
 8018996:	b1a8      	cbz	r0, 80189c4 <pow+0xac>
 8018998:	ec45 4b10 	vmov	d0, r4, r5
 801899c:	f000 f8ed 	bl	8018b7a <finite>
 80189a0:	b180      	cbz	r0, 80189c4 <pow+0xac>
 80189a2:	4632      	mov	r2, r6
 80189a4:	463b      	mov	r3, r7
 80189a6:	4630      	mov	r0, r6
 80189a8:	4639      	mov	r1, r7
 80189aa:	f7e8 f8df 	bl	8000b6c <__aeabi_dcmpun>
 80189ae:	2800      	cmp	r0, #0
 80189b0:	d0e2      	beq.n	8018978 <pow+0x60>
 80189b2:	f7fc f8fd 	bl	8014bb0 <__errno>
 80189b6:	2321      	movs	r3, #33	@ 0x21
 80189b8:	6003      	str	r3, [r0, #0]
 80189ba:	ecbd 8b02 	vpop	{d8}
 80189be:	ec47 6b10 	vmov	d0, r6, r7
 80189c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80189c4:	2200      	movs	r2, #0
 80189c6:	2300      	movs	r3, #0
 80189c8:	4630      	mov	r0, r6
 80189ca:	4639      	mov	r1, r7
 80189cc:	f7e8 f89c 	bl	8000b08 <__aeabi_dcmpeq>
 80189d0:	2800      	cmp	r0, #0
 80189d2:	d0f2      	beq.n	80189ba <pow+0xa2>
 80189d4:	eeb0 0a48 	vmov.f32	s0, s16
 80189d8:	eef0 0a68 	vmov.f32	s1, s17
 80189dc:	f000 f8cd 	bl	8018b7a <finite>
 80189e0:	2800      	cmp	r0, #0
 80189e2:	d0ea      	beq.n	80189ba <pow+0xa2>
 80189e4:	ec45 4b10 	vmov	d0, r4, r5
 80189e8:	f000 f8c7 	bl	8018b7a <finite>
 80189ec:	e7c3      	b.n	8018976 <pow+0x5e>
 80189ee:	4f01      	ldr	r7, [pc, #4]	@ (80189f4 <pow+0xdc>)
 80189f0:	2600      	movs	r6, #0
 80189f2:	e7e2      	b.n	80189ba <pow+0xa2>
 80189f4:	3ff00000 	.word	0x3ff00000

080189f8 <sqrt>:
 80189f8:	b538      	push	{r3, r4, r5, lr}
 80189fa:	ed2d 8b02 	vpush	{d8}
 80189fe:	ec55 4b10 	vmov	r4, r5, d0
 8018a02:	f000 f91b 	bl	8018c3c <__ieee754_sqrt>
 8018a06:	4622      	mov	r2, r4
 8018a08:	462b      	mov	r3, r5
 8018a0a:	4620      	mov	r0, r4
 8018a0c:	4629      	mov	r1, r5
 8018a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8018a12:	eef0 8a60 	vmov.f32	s17, s1
 8018a16:	f7e8 f8a9 	bl	8000b6c <__aeabi_dcmpun>
 8018a1a:	b990      	cbnz	r0, 8018a42 <sqrt+0x4a>
 8018a1c:	2200      	movs	r2, #0
 8018a1e:	2300      	movs	r3, #0
 8018a20:	4620      	mov	r0, r4
 8018a22:	4629      	mov	r1, r5
 8018a24:	f7e8 f87a 	bl	8000b1c <__aeabi_dcmplt>
 8018a28:	b158      	cbz	r0, 8018a42 <sqrt+0x4a>
 8018a2a:	f7fc f8c1 	bl	8014bb0 <__errno>
 8018a2e:	2321      	movs	r3, #33	@ 0x21
 8018a30:	6003      	str	r3, [r0, #0]
 8018a32:	2200      	movs	r2, #0
 8018a34:	2300      	movs	r3, #0
 8018a36:	4610      	mov	r0, r2
 8018a38:	4619      	mov	r1, r3
 8018a3a:	f7e7 ff27 	bl	800088c <__aeabi_ddiv>
 8018a3e:	ec41 0b18 	vmov	d8, r0, r1
 8018a42:	eeb0 0a48 	vmov.f32	s0, s16
 8018a46:	eef0 0a68 	vmov.f32	s1, s17
 8018a4a:	ecbd 8b02 	vpop	{d8}
 8018a4e:	bd38      	pop	{r3, r4, r5, pc}

08018a50 <acosf>:
 8018a50:	b508      	push	{r3, lr}
 8018a52:	ed2d 8b02 	vpush	{d8}
 8018a56:	eeb0 8a40 	vmov.f32	s16, s0
 8018a5a:	f001 f835 	bl	8019ac8 <__ieee754_acosf>
 8018a5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a66:	eef0 8a40 	vmov.f32	s17, s0
 8018a6a:	d615      	bvs.n	8018a98 <acosf+0x48>
 8018a6c:	eeb0 0a48 	vmov.f32	s0, s16
 8018a70:	f000 f87c 	bl	8018b6c <fabsf>
 8018a74:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018a78:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a80:	dd0a      	ble.n	8018a98 <acosf+0x48>
 8018a82:	f7fc f895 	bl	8014bb0 <__errno>
 8018a86:	ecbd 8b02 	vpop	{d8}
 8018a8a:	2321      	movs	r3, #33	@ 0x21
 8018a8c:	6003      	str	r3, [r0, #0]
 8018a8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018a92:	4804      	ldr	r0, [pc, #16]	@ (8018aa4 <acosf+0x54>)
 8018a94:	f7fc b8c8 	b.w	8014c28 <nanf>
 8018a98:	eeb0 0a68 	vmov.f32	s0, s17
 8018a9c:	ecbd 8b02 	vpop	{d8}
 8018aa0:	bd08      	pop	{r3, pc}
 8018aa2:	bf00      	nop
 8018aa4:	0801adb0 	.word	0x0801adb0

08018aa8 <sqrtf>:
 8018aa8:	b508      	push	{r3, lr}
 8018aaa:	ed2d 8b02 	vpush	{d8}
 8018aae:	eeb0 8a40 	vmov.f32	s16, s0
 8018ab2:	f000 f99d 	bl	8018df0 <__ieee754_sqrtf>
 8018ab6:	eeb4 8a48 	vcmp.f32	s16, s16
 8018aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018abe:	d60c      	bvs.n	8018ada <sqrtf+0x32>
 8018ac0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8018ae0 <sqrtf+0x38>
 8018ac4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018acc:	d505      	bpl.n	8018ada <sqrtf+0x32>
 8018ace:	f7fc f86f 	bl	8014bb0 <__errno>
 8018ad2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018ad6:	2321      	movs	r3, #33	@ 0x21
 8018ad8:	6003      	str	r3, [r0, #0]
 8018ada:	ecbd 8b02 	vpop	{d8}
 8018ade:	bd08      	pop	{r3, pc}
 8018ae0:	00000000 	.word	0x00000000

08018ae4 <cosf>:
 8018ae4:	ee10 3a10 	vmov	r3, s0
 8018ae8:	b507      	push	{r0, r1, r2, lr}
 8018aea:	4a1e      	ldr	r2, [pc, #120]	@ (8018b64 <cosf+0x80>)
 8018aec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018af0:	4293      	cmp	r3, r2
 8018af2:	d806      	bhi.n	8018b02 <cosf+0x1e>
 8018af4:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8018b68 <cosf+0x84>
 8018af8:	b003      	add	sp, #12
 8018afa:	f85d eb04 	ldr.w	lr, [sp], #4
 8018afe:	f000 bf43 	b.w	8019988 <__kernel_cosf>
 8018b02:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018b06:	d304      	bcc.n	8018b12 <cosf+0x2e>
 8018b08:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018b0c:	b003      	add	sp, #12
 8018b0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018b12:	4668      	mov	r0, sp
 8018b14:	f001 f8d0 	bl	8019cb8 <__ieee754_rem_pio2f>
 8018b18:	f000 0003 	and.w	r0, r0, #3
 8018b1c:	2801      	cmp	r0, #1
 8018b1e:	d009      	beq.n	8018b34 <cosf+0x50>
 8018b20:	2802      	cmp	r0, #2
 8018b22:	d010      	beq.n	8018b46 <cosf+0x62>
 8018b24:	b9b0      	cbnz	r0, 8018b54 <cosf+0x70>
 8018b26:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b2a:	ed9d 0a00 	vldr	s0, [sp]
 8018b2e:	f000 ff2b 	bl	8019988 <__kernel_cosf>
 8018b32:	e7eb      	b.n	8018b0c <cosf+0x28>
 8018b34:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b38:	ed9d 0a00 	vldr	s0, [sp]
 8018b3c:	f000 ff7c 	bl	8019a38 <__kernel_sinf>
 8018b40:	eeb1 0a40 	vneg.f32	s0, s0
 8018b44:	e7e2      	b.n	8018b0c <cosf+0x28>
 8018b46:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b4a:	ed9d 0a00 	vldr	s0, [sp]
 8018b4e:	f000 ff1b 	bl	8019988 <__kernel_cosf>
 8018b52:	e7f5      	b.n	8018b40 <cosf+0x5c>
 8018b54:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b58:	ed9d 0a00 	vldr	s0, [sp]
 8018b5c:	2001      	movs	r0, #1
 8018b5e:	f000 ff6b 	bl	8019a38 <__kernel_sinf>
 8018b62:	e7d3      	b.n	8018b0c <cosf+0x28>
 8018b64:	3f490fd8 	.word	0x3f490fd8
 8018b68:	00000000 	.word	0x00000000

08018b6c <fabsf>:
 8018b6c:	ee10 3a10 	vmov	r3, s0
 8018b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018b74:	ee00 3a10 	vmov	s0, r3
 8018b78:	4770      	bx	lr

08018b7a <finite>:
 8018b7a:	b082      	sub	sp, #8
 8018b7c:	ed8d 0b00 	vstr	d0, [sp]
 8018b80:	9801      	ldr	r0, [sp, #4]
 8018b82:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8018b86:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8018b8a:	0fc0      	lsrs	r0, r0, #31
 8018b8c:	b002      	add	sp, #8
 8018b8e:	4770      	bx	lr

08018b90 <fmaxf>:
 8018b90:	b508      	push	{r3, lr}
 8018b92:	ed2d 8b02 	vpush	{d8}
 8018b96:	eeb0 8a40 	vmov.f32	s16, s0
 8018b9a:	eef0 8a60 	vmov.f32	s17, s1
 8018b9e:	f000 f831 	bl	8018c04 <__fpclassifyf>
 8018ba2:	b930      	cbnz	r0, 8018bb2 <fmaxf+0x22>
 8018ba4:	eeb0 8a68 	vmov.f32	s16, s17
 8018ba8:	eeb0 0a48 	vmov.f32	s0, s16
 8018bac:	ecbd 8b02 	vpop	{d8}
 8018bb0:	bd08      	pop	{r3, pc}
 8018bb2:	eeb0 0a68 	vmov.f32	s0, s17
 8018bb6:	f000 f825 	bl	8018c04 <__fpclassifyf>
 8018bba:	2800      	cmp	r0, #0
 8018bbc:	d0f4      	beq.n	8018ba8 <fmaxf+0x18>
 8018bbe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bc6:	dded      	ble.n	8018ba4 <fmaxf+0x14>
 8018bc8:	e7ee      	b.n	8018ba8 <fmaxf+0x18>

08018bca <fminf>:
 8018bca:	b508      	push	{r3, lr}
 8018bcc:	ed2d 8b02 	vpush	{d8}
 8018bd0:	eeb0 8a40 	vmov.f32	s16, s0
 8018bd4:	eef0 8a60 	vmov.f32	s17, s1
 8018bd8:	f000 f814 	bl	8018c04 <__fpclassifyf>
 8018bdc:	b930      	cbnz	r0, 8018bec <fminf+0x22>
 8018bde:	eeb0 8a68 	vmov.f32	s16, s17
 8018be2:	eeb0 0a48 	vmov.f32	s0, s16
 8018be6:	ecbd 8b02 	vpop	{d8}
 8018bea:	bd08      	pop	{r3, pc}
 8018bec:	eeb0 0a68 	vmov.f32	s0, s17
 8018bf0:	f000 f808 	bl	8018c04 <__fpclassifyf>
 8018bf4:	2800      	cmp	r0, #0
 8018bf6:	d0f4      	beq.n	8018be2 <fminf+0x18>
 8018bf8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c00:	d5ed      	bpl.n	8018bde <fminf+0x14>
 8018c02:	e7ee      	b.n	8018be2 <fminf+0x18>

08018c04 <__fpclassifyf>:
 8018c04:	ee10 3a10 	vmov	r3, s0
 8018c08:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8018c0c:	d00d      	beq.n	8018c2a <__fpclassifyf+0x26>
 8018c0e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8018c12:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8018c16:	d30a      	bcc.n	8018c2e <__fpclassifyf+0x2a>
 8018c18:	4b07      	ldr	r3, [pc, #28]	@ (8018c38 <__fpclassifyf+0x34>)
 8018c1a:	1e42      	subs	r2, r0, #1
 8018c1c:	429a      	cmp	r2, r3
 8018c1e:	d908      	bls.n	8018c32 <__fpclassifyf+0x2e>
 8018c20:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8018c24:	4258      	negs	r0, r3
 8018c26:	4158      	adcs	r0, r3
 8018c28:	4770      	bx	lr
 8018c2a:	2002      	movs	r0, #2
 8018c2c:	4770      	bx	lr
 8018c2e:	2004      	movs	r0, #4
 8018c30:	4770      	bx	lr
 8018c32:	2003      	movs	r0, #3
 8018c34:	4770      	bx	lr
 8018c36:	bf00      	nop
 8018c38:	007ffffe 	.word	0x007ffffe

08018c3c <__ieee754_sqrt>:
 8018c3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c40:	4a68      	ldr	r2, [pc, #416]	@ (8018de4 <__ieee754_sqrt+0x1a8>)
 8018c42:	ec55 4b10 	vmov	r4, r5, d0
 8018c46:	43aa      	bics	r2, r5
 8018c48:	462b      	mov	r3, r5
 8018c4a:	4621      	mov	r1, r4
 8018c4c:	d110      	bne.n	8018c70 <__ieee754_sqrt+0x34>
 8018c4e:	4622      	mov	r2, r4
 8018c50:	4620      	mov	r0, r4
 8018c52:	4629      	mov	r1, r5
 8018c54:	f7e7 fcf0 	bl	8000638 <__aeabi_dmul>
 8018c58:	4602      	mov	r2, r0
 8018c5a:	460b      	mov	r3, r1
 8018c5c:	4620      	mov	r0, r4
 8018c5e:	4629      	mov	r1, r5
 8018c60:	f7e7 fb34 	bl	80002cc <__adddf3>
 8018c64:	4604      	mov	r4, r0
 8018c66:	460d      	mov	r5, r1
 8018c68:	ec45 4b10 	vmov	d0, r4, r5
 8018c6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c70:	2d00      	cmp	r5, #0
 8018c72:	dc0e      	bgt.n	8018c92 <__ieee754_sqrt+0x56>
 8018c74:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8018c78:	4322      	orrs	r2, r4
 8018c7a:	d0f5      	beq.n	8018c68 <__ieee754_sqrt+0x2c>
 8018c7c:	b19d      	cbz	r5, 8018ca6 <__ieee754_sqrt+0x6a>
 8018c7e:	4622      	mov	r2, r4
 8018c80:	4620      	mov	r0, r4
 8018c82:	4629      	mov	r1, r5
 8018c84:	f7e7 fb20 	bl	80002c8 <__aeabi_dsub>
 8018c88:	4602      	mov	r2, r0
 8018c8a:	460b      	mov	r3, r1
 8018c8c:	f7e7 fdfe 	bl	800088c <__aeabi_ddiv>
 8018c90:	e7e8      	b.n	8018c64 <__ieee754_sqrt+0x28>
 8018c92:	152a      	asrs	r2, r5, #20
 8018c94:	d115      	bne.n	8018cc2 <__ieee754_sqrt+0x86>
 8018c96:	2000      	movs	r0, #0
 8018c98:	e009      	b.n	8018cae <__ieee754_sqrt+0x72>
 8018c9a:	0acb      	lsrs	r3, r1, #11
 8018c9c:	3a15      	subs	r2, #21
 8018c9e:	0549      	lsls	r1, r1, #21
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d0fa      	beq.n	8018c9a <__ieee754_sqrt+0x5e>
 8018ca4:	e7f7      	b.n	8018c96 <__ieee754_sqrt+0x5a>
 8018ca6:	462a      	mov	r2, r5
 8018ca8:	e7fa      	b.n	8018ca0 <__ieee754_sqrt+0x64>
 8018caa:	005b      	lsls	r3, r3, #1
 8018cac:	3001      	adds	r0, #1
 8018cae:	02dc      	lsls	r4, r3, #11
 8018cb0:	d5fb      	bpl.n	8018caa <__ieee754_sqrt+0x6e>
 8018cb2:	1e44      	subs	r4, r0, #1
 8018cb4:	1b12      	subs	r2, r2, r4
 8018cb6:	f1c0 0420 	rsb	r4, r0, #32
 8018cba:	fa21 f404 	lsr.w	r4, r1, r4
 8018cbe:	4323      	orrs	r3, r4
 8018cc0:	4081      	lsls	r1, r0
 8018cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018cc6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8018cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8018cce:	07d2      	lsls	r2, r2, #31
 8018cd0:	bf5c      	itt	pl
 8018cd2:	005b      	lslpl	r3, r3, #1
 8018cd4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8018cd8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018cdc:	bf58      	it	pl
 8018cde:	0049      	lslpl	r1, r1, #1
 8018ce0:	2600      	movs	r6, #0
 8018ce2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8018ce6:	106d      	asrs	r5, r5, #1
 8018ce8:	0049      	lsls	r1, r1, #1
 8018cea:	2016      	movs	r0, #22
 8018cec:	4632      	mov	r2, r6
 8018cee:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8018cf2:	1917      	adds	r7, r2, r4
 8018cf4:	429f      	cmp	r7, r3
 8018cf6:	bfde      	ittt	le
 8018cf8:	193a      	addle	r2, r7, r4
 8018cfa:	1bdb      	suble	r3, r3, r7
 8018cfc:	1936      	addle	r6, r6, r4
 8018cfe:	0fcf      	lsrs	r7, r1, #31
 8018d00:	3801      	subs	r0, #1
 8018d02:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018d06:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018d0a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8018d0e:	d1f0      	bne.n	8018cf2 <__ieee754_sqrt+0xb6>
 8018d10:	4604      	mov	r4, r0
 8018d12:	2720      	movs	r7, #32
 8018d14:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8018d18:	429a      	cmp	r2, r3
 8018d1a:	eb00 0e0c 	add.w	lr, r0, ip
 8018d1e:	db02      	blt.n	8018d26 <__ieee754_sqrt+0xea>
 8018d20:	d113      	bne.n	8018d4a <__ieee754_sqrt+0x10e>
 8018d22:	458e      	cmp	lr, r1
 8018d24:	d811      	bhi.n	8018d4a <__ieee754_sqrt+0x10e>
 8018d26:	f1be 0f00 	cmp.w	lr, #0
 8018d2a:	eb0e 000c 	add.w	r0, lr, ip
 8018d2e:	da42      	bge.n	8018db6 <__ieee754_sqrt+0x17a>
 8018d30:	2800      	cmp	r0, #0
 8018d32:	db40      	blt.n	8018db6 <__ieee754_sqrt+0x17a>
 8018d34:	f102 0801 	add.w	r8, r2, #1
 8018d38:	1a9b      	subs	r3, r3, r2
 8018d3a:	458e      	cmp	lr, r1
 8018d3c:	bf88      	it	hi
 8018d3e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8018d42:	eba1 010e 	sub.w	r1, r1, lr
 8018d46:	4464      	add	r4, ip
 8018d48:	4642      	mov	r2, r8
 8018d4a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8018d4e:	3f01      	subs	r7, #1
 8018d50:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8018d54:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018d58:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8018d5c:	d1dc      	bne.n	8018d18 <__ieee754_sqrt+0xdc>
 8018d5e:	4319      	orrs	r1, r3
 8018d60:	d01b      	beq.n	8018d9a <__ieee754_sqrt+0x15e>
 8018d62:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8018de8 <__ieee754_sqrt+0x1ac>
 8018d66:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8018dec <__ieee754_sqrt+0x1b0>
 8018d6a:	e9da 0100 	ldrd	r0, r1, [sl]
 8018d6e:	e9db 2300 	ldrd	r2, r3, [fp]
 8018d72:	f7e7 faa9 	bl	80002c8 <__aeabi_dsub>
 8018d76:	e9da 8900 	ldrd	r8, r9, [sl]
 8018d7a:	4602      	mov	r2, r0
 8018d7c:	460b      	mov	r3, r1
 8018d7e:	4640      	mov	r0, r8
 8018d80:	4649      	mov	r1, r9
 8018d82:	f7e7 fed5 	bl	8000b30 <__aeabi_dcmple>
 8018d86:	b140      	cbz	r0, 8018d9a <__ieee754_sqrt+0x15e>
 8018d88:	f1b4 3fff 	cmp.w	r4, #4294967295
 8018d8c:	e9da 0100 	ldrd	r0, r1, [sl]
 8018d90:	e9db 2300 	ldrd	r2, r3, [fp]
 8018d94:	d111      	bne.n	8018dba <__ieee754_sqrt+0x17e>
 8018d96:	3601      	adds	r6, #1
 8018d98:	463c      	mov	r4, r7
 8018d9a:	1072      	asrs	r2, r6, #1
 8018d9c:	0863      	lsrs	r3, r4, #1
 8018d9e:	07f1      	lsls	r1, r6, #31
 8018da0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8018da4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8018da8:	bf48      	it	mi
 8018daa:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8018dae:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8018db2:	4618      	mov	r0, r3
 8018db4:	e756      	b.n	8018c64 <__ieee754_sqrt+0x28>
 8018db6:	4690      	mov	r8, r2
 8018db8:	e7be      	b.n	8018d38 <__ieee754_sqrt+0xfc>
 8018dba:	f7e7 fa87 	bl	80002cc <__adddf3>
 8018dbe:	e9da 8900 	ldrd	r8, r9, [sl]
 8018dc2:	4602      	mov	r2, r0
 8018dc4:	460b      	mov	r3, r1
 8018dc6:	4640      	mov	r0, r8
 8018dc8:	4649      	mov	r1, r9
 8018dca:	f7e7 fea7 	bl	8000b1c <__aeabi_dcmplt>
 8018dce:	b120      	cbz	r0, 8018dda <__ieee754_sqrt+0x19e>
 8018dd0:	1ca0      	adds	r0, r4, #2
 8018dd2:	bf08      	it	eq
 8018dd4:	3601      	addeq	r6, #1
 8018dd6:	3402      	adds	r4, #2
 8018dd8:	e7df      	b.n	8018d9a <__ieee754_sqrt+0x15e>
 8018dda:	1c63      	adds	r3, r4, #1
 8018ddc:	f023 0401 	bic.w	r4, r3, #1
 8018de0:	e7db      	b.n	8018d9a <__ieee754_sqrt+0x15e>
 8018de2:	bf00      	nop
 8018de4:	7ff00000 	.word	0x7ff00000
 8018de8:	20000230 	.word	0x20000230
 8018dec:	20000228 	.word	0x20000228

08018df0 <__ieee754_sqrtf>:
 8018df0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018df4:	4770      	bx	lr
	...

08018df8 <floor>:
 8018df8:	ec51 0b10 	vmov	r0, r1, d0
 8018dfc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8018e08:	2e13      	cmp	r6, #19
 8018e0a:	460c      	mov	r4, r1
 8018e0c:	4605      	mov	r5, r0
 8018e0e:	4680      	mov	r8, r0
 8018e10:	dc34      	bgt.n	8018e7c <floor+0x84>
 8018e12:	2e00      	cmp	r6, #0
 8018e14:	da17      	bge.n	8018e46 <floor+0x4e>
 8018e16:	a332      	add	r3, pc, #200	@ (adr r3, 8018ee0 <floor+0xe8>)
 8018e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e1c:	f7e7 fa56 	bl	80002cc <__adddf3>
 8018e20:	2200      	movs	r2, #0
 8018e22:	2300      	movs	r3, #0
 8018e24:	f7e7 fe98 	bl	8000b58 <__aeabi_dcmpgt>
 8018e28:	b150      	cbz	r0, 8018e40 <floor+0x48>
 8018e2a:	2c00      	cmp	r4, #0
 8018e2c:	da55      	bge.n	8018eda <floor+0xe2>
 8018e2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8018e32:	432c      	orrs	r4, r5
 8018e34:	2500      	movs	r5, #0
 8018e36:	42ac      	cmp	r4, r5
 8018e38:	4c2b      	ldr	r4, [pc, #172]	@ (8018ee8 <floor+0xf0>)
 8018e3a:	bf08      	it	eq
 8018e3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8018e40:	4621      	mov	r1, r4
 8018e42:	4628      	mov	r0, r5
 8018e44:	e023      	b.n	8018e8e <floor+0x96>
 8018e46:	4f29      	ldr	r7, [pc, #164]	@ (8018eec <floor+0xf4>)
 8018e48:	4137      	asrs	r7, r6
 8018e4a:	ea01 0307 	and.w	r3, r1, r7
 8018e4e:	4303      	orrs	r3, r0
 8018e50:	d01d      	beq.n	8018e8e <floor+0x96>
 8018e52:	a323      	add	r3, pc, #140	@ (adr r3, 8018ee0 <floor+0xe8>)
 8018e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e58:	f7e7 fa38 	bl	80002cc <__adddf3>
 8018e5c:	2200      	movs	r2, #0
 8018e5e:	2300      	movs	r3, #0
 8018e60:	f7e7 fe7a 	bl	8000b58 <__aeabi_dcmpgt>
 8018e64:	2800      	cmp	r0, #0
 8018e66:	d0eb      	beq.n	8018e40 <floor+0x48>
 8018e68:	2c00      	cmp	r4, #0
 8018e6a:	bfbe      	ittt	lt
 8018e6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8018e70:	4133      	asrlt	r3, r6
 8018e72:	18e4      	addlt	r4, r4, r3
 8018e74:	ea24 0407 	bic.w	r4, r4, r7
 8018e78:	2500      	movs	r5, #0
 8018e7a:	e7e1      	b.n	8018e40 <floor+0x48>
 8018e7c:	2e33      	cmp	r6, #51	@ 0x33
 8018e7e:	dd0a      	ble.n	8018e96 <floor+0x9e>
 8018e80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8018e84:	d103      	bne.n	8018e8e <floor+0x96>
 8018e86:	4602      	mov	r2, r0
 8018e88:	460b      	mov	r3, r1
 8018e8a:	f7e7 fa1f 	bl	80002cc <__adddf3>
 8018e8e:	ec41 0b10 	vmov	d0, r0, r1
 8018e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8018e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8018e9e:	40df      	lsrs	r7, r3
 8018ea0:	4207      	tst	r7, r0
 8018ea2:	d0f4      	beq.n	8018e8e <floor+0x96>
 8018ea4:	a30e      	add	r3, pc, #56	@ (adr r3, 8018ee0 <floor+0xe8>)
 8018ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eaa:	f7e7 fa0f 	bl	80002cc <__adddf3>
 8018eae:	2200      	movs	r2, #0
 8018eb0:	2300      	movs	r3, #0
 8018eb2:	f7e7 fe51 	bl	8000b58 <__aeabi_dcmpgt>
 8018eb6:	2800      	cmp	r0, #0
 8018eb8:	d0c2      	beq.n	8018e40 <floor+0x48>
 8018eba:	2c00      	cmp	r4, #0
 8018ebc:	da0a      	bge.n	8018ed4 <floor+0xdc>
 8018ebe:	2e14      	cmp	r6, #20
 8018ec0:	d101      	bne.n	8018ec6 <floor+0xce>
 8018ec2:	3401      	adds	r4, #1
 8018ec4:	e006      	b.n	8018ed4 <floor+0xdc>
 8018ec6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8018eca:	2301      	movs	r3, #1
 8018ecc:	40b3      	lsls	r3, r6
 8018ece:	441d      	add	r5, r3
 8018ed0:	4545      	cmp	r5, r8
 8018ed2:	d3f6      	bcc.n	8018ec2 <floor+0xca>
 8018ed4:	ea25 0507 	bic.w	r5, r5, r7
 8018ed8:	e7b2      	b.n	8018e40 <floor+0x48>
 8018eda:	2500      	movs	r5, #0
 8018edc:	462c      	mov	r4, r5
 8018ede:	e7af      	b.n	8018e40 <floor+0x48>
 8018ee0:	8800759c 	.word	0x8800759c
 8018ee4:	7e37e43c 	.word	0x7e37e43c
 8018ee8:	bff00000 	.word	0xbff00000
 8018eec:	000fffff 	.word	0x000fffff

08018ef0 <__ieee754_pow>:
 8018ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ef4:	b091      	sub	sp, #68	@ 0x44
 8018ef6:	ed8d 1b00 	vstr	d1, [sp]
 8018efa:	e9dd 1900 	ldrd	r1, r9, [sp]
 8018efe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8018f02:	ea5a 0001 	orrs.w	r0, sl, r1
 8018f06:	ec57 6b10 	vmov	r6, r7, d0
 8018f0a:	d113      	bne.n	8018f34 <__ieee754_pow+0x44>
 8018f0c:	19b3      	adds	r3, r6, r6
 8018f0e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8018f12:	4152      	adcs	r2, r2
 8018f14:	4298      	cmp	r0, r3
 8018f16:	4b98      	ldr	r3, [pc, #608]	@ (8019178 <__ieee754_pow+0x288>)
 8018f18:	4193      	sbcs	r3, r2
 8018f1a:	f080 84ea 	bcs.w	80198f2 <__ieee754_pow+0xa02>
 8018f1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018f22:	4630      	mov	r0, r6
 8018f24:	4639      	mov	r1, r7
 8018f26:	f7e7 f9d1 	bl	80002cc <__adddf3>
 8018f2a:	ec41 0b10 	vmov	d0, r0, r1
 8018f2e:	b011      	add	sp, #68	@ 0x44
 8018f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f34:	4a91      	ldr	r2, [pc, #580]	@ (801917c <__ieee754_pow+0x28c>)
 8018f36:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8018f3a:	4590      	cmp	r8, r2
 8018f3c:	463d      	mov	r5, r7
 8018f3e:	4633      	mov	r3, r6
 8018f40:	d806      	bhi.n	8018f50 <__ieee754_pow+0x60>
 8018f42:	d101      	bne.n	8018f48 <__ieee754_pow+0x58>
 8018f44:	2e00      	cmp	r6, #0
 8018f46:	d1ea      	bne.n	8018f1e <__ieee754_pow+0x2e>
 8018f48:	4592      	cmp	sl, r2
 8018f4a:	d801      	bhi.n	8018f50 <__ieee754_pow+0x60>
 8018f4c:	d10e      	bne.n	8018f6c <__ieee754_pow+0x7c>
 8018f4e:	b169      	cbz	r1, 8018f6c <__ieee754_pow+0x7c>
 8018f50:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8018f54:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8018f58:	431d      	orrs	r5, r3
 8018f5a:	d1e0      	bne.n	8018f1e <__ieee754_pow+0x2e>
 8018f5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018f60:	18db      	adds	r3, r3, r3
 8018f62:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8018f66:	4152      	adcs	r2, r2
 8018f68:	429d      	cmp	r5, r3
 8018f6a:	e7d4      	b.n	8018f16 <__ieee754_pow+0x26>
 8018f6c:	2d00      	cmp	r5, #0
 8018f6e:	46c3      	mov	fp, r8
 8018f70:	da3a      	bge.n	8018fe8 <__ieee754_pow+0xf8>
 8018f72:	4a83      	ldr	r2, [pc, #524]	@ (8019180 <__ieee754_pow+0x290>)
 8018f74:	4592      	cmp	sl, r2
 8018f76:	d84d      	bhi.n	8019014 <__ieee754_pow+0x124>
 8018f78:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8018f7c:	4592      	cmp	sl, r2
 8018f7e:	f240 84c7 	bls.w	8019910 <__ieee754_pow+0xa20>
 8018f82:	ea4f 522a 	mov.w	r2, sl, asr #20
 8018f86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8018f8a:	2a14      	cmp	r2, #20
 8018f8c:	dd0f      	ble.n	8018fae <__ieee754_pow+0xbe>
 8018f8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8018f92:	fa21 f402 	lsr.w	r4, r1, r2
 8018f96:	fa04 f202 	lsl.w	r2, r4, r2
 8018f9a:	428a      	cmp	r2, r1
 8018f9c:	f040 84b8 	bne.w	8019910 <__ieee754_pow+0xa20>
 8018fa0:	f004 0401 	and.w	r4, r4, #1
 8018fa4:	f1c4 0402 	rsb	r4, r4, #2
 8018fa8:	2900      	cmp	r1, #0
 8018faa:	d158      	bne.n	801905e <__ieee754_pow+0x16e>
 8018fac:	e00e      	b.n	8018fcc <__ieee754_pow+0xdc>
 8018fae:	2900      	cmp	r1, #0
 8018fb0:	d154      	bne.n	801905c <__ieee754_pow+0x16c>
 8018fb2:	f1c2 0214 	rsb	r2, r2, #20
 8018fb6:	fa4a f402 	asr.w	r4, sl, r2
 8018fba:	fa04 f202 	lsl.w	r2, r4, r2
 8018fbe:	4552      	cmp	r2, sl
 8018fc0:	f040 84a3 	bne.w	801990a <__ieee754_pow+0xa1a>
 8018fc4:	f004 0401 	and.w	r4, r4, #1
 8018fc8:	f1c4 0402 	rsb	r4, r4, #2
 8018fcc:	4a6d      	ldr	r2, [pc, #436]	@ (8019184 <__ieee754_pow+0x294>)
 8018fce:	4592      	cmp	sl, r2
 8018fd0:	d12e      	bne.n	8019030 <__ieee754_pow+0x140>
 8018fd2:	f1b9 0f00 	cmp.w	r9, #0
 8018fd6:	f280 8494 	bge.w	8019902 <__ieee754_pow+0xa12>
 8018fda:	496a      	ldr	r1, [pc, #424]	@ (8019184 <__ieee754_pow+0x294>)
 8018fdc:	4632      	mov	r2, r6
 8018fde:	463b      	mov	r3, r7
 8018fe0:	2000      	movs	r0, #0
 8018fe2:	f7e7 fc53 	bl	800088c <__aeabi_ddiv>
 8018fe6:	e7a0      	b.n	8018f2a <__ieee754_pow+0x3a>
 8018fe8:	2400      	movs	r4, #0
 8018fea:	bbc1      	cbnz	r1, 801905e <__ieee754_pow+0x16e>
 8018fec:	4a63      	ldr	r2, [pc, #396]	@ (801917c <__ieee754_pow+0x28c>)
 8018fee:	4592      	cmp	sl, r2
 8018ff0:	d1ec      	bne.n	8018fcc <__ieee754_pow+0xdc>
 8018ff2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8018ff6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8018ffa:	431a      	orrs	r2, r3
 8018ffc:	f000 8479 	beq.w	80198f2 <__ieee754_pow+0xa02>
 8019000:	4b61      	ldr	r3, [pc, #388]	@ (8019188 <__ieee754_pow+0x298>)
 8019002:	4598      	cmp	r8, r3
 8019004:	d908      	bls.n	8019018 <__ieee754_pow+0x128>
 8019006:	f1b9 0f00 	cmp.w	r9, #0
 801900a:	f2c0 8476 	blt.w	80198fa <__ieee754_pow+0xa0a>
 801900e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019012:	e78a      	b.n	8018f2a <__ieee754_pow+0x3a>
 8019014:	2402      	movs	r4, #2
 8019016:	e7e8      	b.n	8018fea <__ieee754_pow+0xfa>
 8019018:	f1b9 0f00 	cmp.w	r9, #0
 801901c:	f04f 0000 	mov.w	r0, #0
 8019020:	f04f 0100 	mov.w	r1, #0
 8019024:	da81      	bge.n	8018f2a <__ieee754_pow+0x3a>
 8019026:	e9dd 0300 	ldrd	r0, r3, [sp]
 801902a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801902e:	e77c      	b.n	8018f2a <__ieee754_pow+0x3a>
 8019030:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8019034:	d106      	bne.n	8019044 <__ieee754_pow+0x154>
 8019036:	4632      	mov	r2, r6
 8019038:	463b      	mov	r3, r7
 801903a:	4630      	mov	r0, r6
 801903c:	4639      	mov	r1, r7
 801903e:	f7e7 fafb 	bl	8000638 <__aeabi_dmul>
 8019042:	e772      	b.n	8018f2a <__ieee754_pow+0x3a>
 8019044:	4a51      	ldr	r2, [pc, #324]	@ (801918c <__ieee754_pow+0x29c>)
 8019046:	4591      	cmp	r9, r2
 8019048:	d109      	bne.n	801905e <__ieee754_pow+0x16e>
 801904a:	2d00      	cmp	r5, #0
 801904c:	db07      	blt.n	801905e <__ieee754_pow+0x16e>
 801904e:	ec47 6b10 	vmov	d0, r6, r7
 8019052:	b011      	add	sp, #68	@ 0x44
 8019054:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019058:	f7ff bdf0 	b.w	8018c3c <__ieee754_sqrt>
 801905c:	2400      	movs	r4, #0
 801905e:	ec47 6b10 	vmov	d0, r6, r7
 8019062:	9302      	str	r3, [sp, #8]
 8019064:	f000 fc88 	bl	8019978 <fabs>
 8019068:	9b02      	ldr	r3, [sp, #8]
 801906a:	ec51 0b10 	vmov	r0, r1, d0
 801906e:	bb53      	cbnz	r3, 80190c6 <__ieee754_pow+0x1d6>
 8019070:	4b44      	ldr	r3, [pc, #272]	@ (8019184 <__ieee754_pow+0x294>)
 8019072:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8019076:	429a      	cmp	r2, r3
 8019078:	d002      	beq.n	8019080 <__ieee754_pow+0x190>
 801907a:	f1b8 0f00 	cmp.w	r8, #0
 801907e:	d122      	bne.n	80190c6 <__ieee754_pow+0x1d6>
 8019080:	f1b9 0f00 	cmp.w	r9, #0
 8019084:	da05      	bge.n	8019092 <__ieee754_pow+0x1a2>
 8019086:	4602      	mov	r2, r0
 8019088:	460b      	mov	r3, r1
 801908a:	2000      	movs	r0, #0
 801908c:	493d      	ldr	r1, [pc, #244]	@ (8019184 <__ieee754_pow+0x294>)
 801908e:	f7e7 fbfd 	bl	800088c <__aeabi_ddiv>
 8019092:	2d00      	cmp	r5, #0
 8019094:	f6bf af49 	bge.w	8018f2a <__ieee754_pow+0x3a>
 8019098:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801909c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80190a0:	ea58 0804 	orrs.w	r8, r8, r4
 80190a4:	d108      	bne.n	80190b8 <__ieee754_pow+0x1c8>
 80190a6:	4602      	mov	r2, r0
 80190a8:	460b      	mov	r3, r1
 80190aa:	4610      	mov	r0, r2
 80190ac:	4619      	mov	r1, r3
 80190ae:	f7e7 f90b 	bl	80002c8 <__aeabi_dsub>
 80190b2:	4602      	mov	r2, r0
 80190b4:	460b      	mov	r3, r1
 80190b6:	e794      	b.n	8018fe2 <__ieee754_pow+0xf2>
 80190b8:	2c01      	cmp	r4, #1
 80190ba:	f47f af36 	bne.w	8018f2a <__ieee754_pow+0x3a>
 80190be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80190c2:	4619      	mov	r1, r3
 80190c4:	e731      	b.n	8018f2a <__ieee754_pow+0x3a>
 80190c6:	0feb      	lsrs	r3, r5, #31
 80190c8:	3b01      	subs	r3, #1
 80190ca:	ea53 0204 	orrs.w	r2, r3, r4
 80190ce:	d102      	bne.n	80190d6 <__ieee754_pow+0x1e6>
 80190d0:	4632      	mov	r2, r6
 80190d2:	463b      	mov	r3, r7
 80190d4:	e7e9      	b.n	80190aa <__ieee754_pow+0x1ba>
 80190d6:	3c01      	subs	r4, #1
 80190d8:	431c      	orrs	r4, r3
 80190da:	d016      	beq.n	801910a <__ieee754_pow+0x21a>
 80190dc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8019168 <__ieee754_pow+0x278>
 80190e0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80190e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80190e8:	f240 8112 	bls.w	8019310 <__ieee754_pow+0x420>
 80190ec:	4b28      	ldr	r3, [pc, #160]	@ (8019190 <__ieee754_pow+0x2a0>)
 80190ee:	459a      	cmp	sl, r3
 80190f0:	4b25      	ldr	r3, [pc, #148]	@ (8019188 <__ieee754_pow+0x298>)
 80190f2:	d916      	bls.n	8019122 <__ieee754_pow+0x232>
 80190f4:	4598      	cmp	r8, r3
 80190f6:	d80b      	bhi.n	8019110 <__ieee754_pow+0x220>
 80190f8:	f1b9 0f00 	cmp.w	r9, #0
 80190fc:	da0b      	bge.n	8019116 <__ieee754_pow+0x226>
 80190fe:	2000      	movs	r0, #0
 8019100:	b011      	add	sp, #68	@ 0x44
 8019102:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019106:	f000 bfbb 	b.w	801a080 <__math_oflow>
 801910a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8019170 <__ieee754_pow+0x280>
 801910e:	e7e7      	b.n	80190e0 <__ieee754_pow+0x1f0>
 8019110:	f1b9 0f00 	cmp.w	r9, #0
 8019114:	dcf3      	bgt.n	80190fe <__ieee754_pow+0x20e>
 8019116:	2000      	movs	r0, #0
 8019118:	b011      	add	sp, #68	@ 0x44
 801911a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801911e:	f000 bfa7 	b.w	801a070 <__math_uflow>
 8019122:	4598      	cmp	r8, r3
 8019124:	d20c      	bcs.n	8019140 <__ieee754_pow+0x250>
 8019126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801912a:	2200      	movs	r2, #0
 801912c:	2300      	movs	r3, #0
 801912e:	f7e7 fcf5 	bl	8000b1c <__aeabi_dcmplt>
 8019132:	3800      	subs	r0, #0
 8019134:	bf18      	it	ne
 8019136:	2001      	movne	r0, #1
 8019138:	f1b9 0f00 	cmp.w	r9, #0
 801913c:	daec      	bge.n	8019118 <__ieee754_pow+0x228>
 801913e:	e7df      	b.n	8019100 <__ieee754_pow+0x210>
 8019140:	4b10      	ldr	r3, [pc, #64]	@ (8019184 <__ieee754_pow+0x294>)
 8019142:	4598      	cmp	r8, r3
 8019144:	f04f 0200 	mov.w	r2, #0
 8019148:	d924      	bls.n	8019194 <__ieee754_pow+0x2a4>
 801914a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801914e:	2300      	movs	r3, #0
 8019150:	f7e7 fce4 	bl	8000b1c <__aeabi_dcmplt>
 8019154:	3800      	subs	r0, #0
 8019156:	bf18      	it	ne
 8019158:	2001      	movne	r0, #1
 801915a:	f1b9 0f00 	cmp.w	r9, #0
 801915e:	dccf      	bgt.n	8019100 <__ieee754_pow+0x210>
 8019160:	e7da      	b.n	8019118 <__ieee754_pow+0x228>
 8019162:	bf00      	nop
 8019164:	f3af 8000 	nop.w
 8019168:	00000000 	.word	0x00000000
 801916c:	3ff00000 	.word	0x3ff00000
 8019170:	00000000 	.word	0x00000000
 8019174:	bff00000 	.word	0xbff00000
 8019178:	fff00000 	.word	0xfff00000
 801917c:	7ff00000 	.word	0x7ff00000
 8019180:	433fffff 	.word	0x433fffff
 8019184:	3ff00000 	.word	0x3ff00000
 8019188:	3fefffff 	.word	0x3fefffff
 801918c:	3fe00000 	.word	0x3fe00000
 8019190:	43f00000 	.word	0x43f00000
 8019194:	4b5a      	ldr	r3, [pc, #360]	@ (8019300 <__ieee754_pow+0x410>)
 8019196:	f7e7 f897 	bl	80002c8 <__aeabi_dsub>
 801919a:	a351      	add	r3, pc, #324	@ (adr r3, 80192e0 <__ieee754_pow+0x3f0>)
 801919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191a0:	4604      	mov	r4, r0
 80191a2:	460d      	mov	r5, r1
 80191a4:	f7e7 fa48 	bl	8000638 <__aeabi_dmul>
 80191a8:	a34f      	add	r3, pc, #316	@ (adr r3, 80192e8 <__ieee754_pow+0x3f8>)
 80191aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191ae:	4606      	mov	r6, r0
 80191b0:	460f      	mov	r7, r1
 80191b2:	4620      	mov	r0, r4
 80191b4:	4629      	mov	r1, r5
 80191b6:	f7e7 fa3f 	bl	8000638 <__aeabi_dmul>
 80191ba:	4b52      	ldr	r3, [pc, #328]	@ (8019304 <__ieee754_pow+0x414>)
 80191bc:	4682      	mov	sl, r0
 80191be:	468b      	mov	fp, r1
 80191c0:	2200      	movs	r2, #0
 80191c2:	4620      	mov	r0, r4
 80191c4:	4629      	mov	r1, r5
 80191c6:	f7e7 fa37 	bl	8000638 <__aeabi_dmul>
 80191ca:	4602      	mov	r2, r0
 80191cc:	460b      	mov	r3, r1
 80191ce:	a148      	add	r1, pc, #288	@ (adr r1, 80192f0 <__ieee754_pow+0x400>)
 80191d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80191d4:	f7e7 f878 	bl	80002c8 <__aeabi_dsub>
 80191d8:	4622      	mov	r2, r4
 80191da:	462b      	mov	r3, r5
 80191dc:	f7e7 fa2c 	bl	8000638 <__aeabi_dmul>
 80191e0:	4602      	mov	r2, r0
 80191e2:	460b      	mov	r3, r1
 80191e4:	2000      	movs	r0, #0
 80191e6:	4948      	ldr	r1, [pc, #288]	@ (8019308 <__ieee754_pow+0x418>)
 80191e8:	f7e7 f86e 	bl	80002c8 <__aeabi_dsub>
 80191ec:	4622      	mov	r2, r4
 80191ee:	4680      	mov	r8, r0
 80191f0:	4689      	mov	r9, r1
 80191f2:	462b      	mov	r3, r5
 80191f4:	4620      	mov	r0, r4
 80191f6:	4629      	mov	r1, r5
 80191f8:	f7e7 fa1e 	bl	8000638 <__aeabi_dmul>
 80191fc:	4602      	mov	r2, r0
 80191fe:	460b      	mov	r3, r1
 8019200:	4640      	mov	r0, r8
 8019202:	4649      	mov	r1, r9
 8019204:	f7e7 fa18 	bl	8000638 <__aeabi_dmul>
 8019208:	a33b      	add	r3, pc, #236	@ (adr r3, 80192f8 <__ieee754_pow+0x408>)
 801920a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920e:	f7e7 fa13 	bl	8000638 <__aeabi_dmul>
 8019212:	4602      	mov	r2, r0
 8019214:	460b      	mov	r3, r1
 8019216:	4650      	mov	r0, sl
 8019218:	4659      	mov	r1, fp
 801921a:	f7e7 f855 	bl	80002c8 <__aeabi_dsub>
 801921e:	4602      	mov	r2, r0
 8019220:	460b      	mov	r3, r1
 8019222:	4680      	mov	r8, r0
 8019224:	4689      	mov	r9, r1
 8019226:	4630      	mov	r0, r6
 8019228:	4639      	mov	r1, r7
 801922a:	f7e7 f84f 	bl	80002cc <__adddf3>
 801922e:	2400      	movs	r4, #0
 8019230:	4632      	mov	r2, r6
 8019232:	463b      	mov	r3, r7
 8019234:	4620      	mov	r0, r4
 8019236:	460d      	mov	r5, r1
 8019238:	f7e7 f846 	bl	80002c8 <__aeabi_dsub>
 801923c:	4602      	mov	r2, r0
 801923e:	460b      	mov	r3, r1
 8019240:	4640      	mov	r0, r8
 8019242:	4649      	mov	r1, r9
 8019244:	f7e7 f840 	bl	80002c8 <__aeabi_dsub>
 8019248:	e9dd 2300 	ldrd	r2, r3, [sp]
 801924c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019250:	2300      	movs	r3, #0
 8019252:	9304      	str	r3, [sp, #16]
 8019254:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8019258:	4606      	mov	r6, r0
 801925a:	460f      	mov	r7, r1
 801925c:	4652      	mov	r2, sl
 801925e:	465b      	mov	r3, fp
 8019260:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019264:	f7e7 f830 	bl	80002c8 <__aeabi_dsub>
 8019268:	4622      	mov	r2, r4
 801926a:	462b      	mov	r3, r5
 801926c:	f7e7 f9e4 	bl	8000638 <__aeabi_dmul>
 8019270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019274:	4680      	mov	r8, r0
 8019276:	4689      	mov	r9, r1
 8019278:	4630      	mov	r0, r6
 801927a:	4639      	mov	r1, r7
 801927c:	f7e7 f9dc 	bl	8000638 <__aeabi_dmul>
 8019280:	4602      	mov	r2, r0
 8019282:	460b      	mov	r3, r1
 8019284:	4640      	mov	r0, r8
 8019286:	4649      	mov	r1, r9
 8019288:	f7e7 f820 	bl	80002cc <__adddf3>
 801928c:	4652      	mov	r2, sl
 801928e:	465b      	mov	r3, fp
 8019290:	4606      	mov	r6, r0
 8019292:	460f      	mov	r7, r1
 8019294:	4620      	mov	r0, r4
 8019296:	4629      	mov	r1, r5
 8019298:	f7e7 f9ce 	bl	8000638 <__aeabi_dmul>
 801929c:	460b      	mov	r3, r1
 801929e:	4602      	mov	r2, r0
 80192a0:	4680      	mov	r8, r0
 80192a2:	4689      	mov	r9, r1
 80192a4:	4630      	mov	r0, r6
 80192a6:	4639      	mov	r1, r7
 80192a8:	f7e7 f810 	bl	80002cc <__adddf3>
 80192ac:	4b17      	ldr	r3, [pc, #92]	@ (801930c <__ieee754_pow+0x41c>)
 80192ae:	4299      	cmp	r1, r3
 80192b0:	4604      	mov	r4, r0
 80192b2:	460d      	mov	r5, r1
 80192b4:	468a      	mov	sl, r1
 80192b6:	468b      	mov	fp, r1
 80192b8:	f340 82ef 	ble.w	801989a <__ieee754_pow+0x9aa>
 80192bc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80192c0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80192c4:	4303      	orrs	r3, r0
 80192c6:	f000 81e8 	beq.w	801969a <__ieee754_pow+0x7aa>
 80192ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80192ce:	2200      	movs	r2, #0
 80192d0:	2300      	movs	r3, #0
 80192d2:	f7e7 fc23 	bl	8000b1c <__aeabi_dcmplt>
 80192d6:	3800      	subs	r0, #0
 80192d8:	bf18      	it	ne
 80192da:	2001      	movne	r0, #1
 80192dc:	e710      	b.n	8019100 <__ieee754_pow+0x210>
 80192de:	bf00      	nop
 80192e0:	60000000 	.word	0x60000000
 80192e4:	3ff71547 	.word	0x3ff71547
 80192e8:	f85ddf44 	.word	0xf85ddf44
 80192ec:	3e54ae0b 	.word	0x3e54ae0b
 80192f0:	55555555 	.word	0x55555555
 80192f4:	3fd55555 	.word	0x3fd55555
 80192f8:	652b82fe 	.word	0x652b82fe
 80192fc:	3ff71547 	.word	0x3ff71547
 8019300:	3ff00000 	.word	0x3ff00000
 8019304:	3fd00000 	.word	0x3fd00000
 8019308:	3fe00000 	.word	0x3fe00000
 801930c:	408fffff 	.word	0x408fffff
 8019310:	4bd5      	ldr	r3, [pc, #852]	@ (8019668 <__ieee754_pow+0x778>)
 8019312:	402b      	ands	r3, r5
 8019314:	2200      	movs	r2, #0
 8019316:	b92b      	cbnz	r3, 8019324 <__ieee754_pow+0x434>
 8019318:	4bd4      	ldr	r3, [pc, #848]	@ (801966c <__ieee754_pow+0x77c>)
 801931a:	f7e7 f98d 	bl	8000638 <__aeabi_dmul>
 801931e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8019322:	468b      	mov	fp, r1
 8019324:	ea4f 532b 	mov.w	r3, fp, asr #20
 8019328:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801932c:	4413      	add	r3, r2
 801932e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019330:	4bcf      	ldr	r3, [pc, #828]	@ (8019670 <__ieee754_pow+0x780>)
 8019332:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8019336:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801933a:	459b      	cmp	fp, r3
 801933c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8019340:	dd08      	ble.n	8019354 <__ieee754_pow+0x464>
 8019342:	4bcc      	ldr	r3, [pc, #816]	@ (8019674 <__ieee754_pow+0x784>)
 8019344:	459b      	cmp	fp, r3
 8019346:	f340 81a5 	ble.w	8019694 <__ieee754_pow+0x7a4>
 801934a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801934c:	3301      	adds	r3, #1
 801934e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019350:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8019354:	f04f 0a00 	mov.w	sl, #0
 8019358:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801935c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801935e:	4bc6      	ldr	r3, [pc, #792]	@ (8019678 <__ieee754_pow+0x788>)
 8019360:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019364:	ed93 7b00 	vldr	d7, [r3]
 8019368:	4629      	mov	r1, r5
 801936a:	ec53 2b17 	vmov	r2, r3, d7
 801936e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019372:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019376:	f7e6 ffa7 	bl	80002c8 <__aeabi_dsub>
 801937a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801937e:	4606      	mov	r6, r0
 8019380:	460f      	mov	r7, r1
 8019382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019386:	f7e6 ffa1 	bl	80002cc <__adddf3>
 801938a:	4602      	mov	r2, r0
 801938c:	460b      	mov	r3, r1
 801938e:	2000      	movs	r0, #0
 8019390:	49ba      	ldr	r1, [pc, #744]	@ (801967c <__ieee754_pow+0x78c>)
 8019392:	f7e7 fa7b 	bl	800088c <__aeabi_ddiv>
 8019396:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801939a:	4602      	mov	r2, r0
 801939c:	460b      	mov	r3, r1
 801939e:	4630      	mov	r0, r6
 80193a0:	4639      	mov	r1, r7
 80193a2:	f7e7 f949 	bl	8000638 <__aeabi_dmul>
 80193a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80193aa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80193ae:	106d      	asrs	r5, r5, #1
 80193b0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80193b4:	f04f 0b00 	mov.w	fp, #0
 80193b8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80193bc:	4661      	mov	r1, ip
 80193be:	2200      	movs	r2, #0
 80193c0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80193c4:	4658      	mov	r0, fp
 80193c6:	46e1      	mov	r9, ip
 80193c8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80193cc:	4614      	mov	r4, r2
 80193ce:	461d      	mov	r5, r3
 80193d0:	f7e7 f932 	bl	8000638 <__aeabi_dmul>
 80193d4:	4602      	mov	r2, r0
 80193d6:	460b      	mov	r3, r1
 80193d8:	4630      	mov	r0, r6
 80193da:	4639      	mov	r1, r7
 80193dc:	f7e6 ff74 	bl	80002c8 <__aeabi_dsub>
 80193e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80193e4:	4606      	mov	r6, r0
 80193e6:	460f      	mov	r7, r1
 80193e8:	4620      	mov	r0, r4
 80193ea:	4629      	mov	r1, r5
 80193ec:	f7e6 ff6c 	bl	80002c8 <__aeabi_dsub>
 80193f0:	4602      	mov	r2, r0
 80193f2:	460b      	mov	r3, r1
 80193f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80193f8:	f7e6 ff66 	bl	80002c8 <__aeabi_dsub>
 80193fc:	465a      	mov	r2, fp
 80193fe:	464b      	mov	r3, r9
 8019400:	f7e7 f91a 	bl	8000638 <__aeabi_dmul>
 8019404:	4602      	mov	r2, r0
 8019406:	460b      	mov	r3, r1
 8019408:	4630      	mov	r0, r6
 801940a:	4639      	mov	r1, r7
 801940c:	f7e6 ff5c 	bl	80002c8 <__aeabi_dsub>
 8019410:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8019414:	f7e7 f910 	bl	8000638 <__aeabi_dmul>
 8019418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801941c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019420:	4610      	mov	r0, r2
 8019422:	4619      	mov	r1, r3
 8019424:	f7e7 f908 	bl	8000638 <__aeabi_dmul>
 8019428:	a37d      	add	r3, pc, #500	@ (adr r3, 8019620 <__ieee754_pow+0x730>)
 801942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801942e:	4604      	mov	r4, r0
 8019430:	460d      	mov	r5, r1
 8019432:	f7e7 f901 	bl	8000638 <__aeabi_dmul>
 8019436:	a37c      	add	r3, pc, #496	@ (adr r3, 8019628 <__ieee754_pow+0x738>)
 8019438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801943c:	f7e6 ff46 	bl	80002cc <__adddf3>
 8019440:	4622      	mov	r2, r4
 8019442:	462b      	mov	r3, r5
 8019444:	f7e7 f8f8 	bl	8000638 <__aeabi_dmul>
 8019448:	a379      	add	r3, pc, #484	@ (adr r3, 8019630 <__ieee754_pow+0x740>)
 801944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801944e:	f7e6 ff3d 	bl	80002cc <__adddf3>
 8019452:	4622      	mov	r2, r4
 8019454:	462b      	mov	r3, r5
 8019456:	f7e7 f8ef 	bl	8000638 <__aeabi_dmul>
 801945a:	a377      	add	r3, pc, #476	@ (adr r3, 8019638 <__ieee754_pow+0x748>)
 801945c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019460:	f7e6 ff34 	bl	80002cc <__adddf3>
 8019464:	4622      	mov	r2, r4
 8019466:	462b      	mov	r3, r5
 8019468:	f7e7 f8e6 	bl	8000638 <__aeabi_dmul>
 801946c:	a374      	add	r3, pc, #464	@ (adr r3, 8019640 <__ieee754_pow+0x750>)
 801946e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019472:	f7e6 ff2b 	bl	80002cc <__adddf3>
 8019476:	4622      	mov	r2, r4
 8019478:	462b      	mov	r3, r5
 801947a:	f7e7 f8dd 	bl	8000638 <__aeabi_dmul>
 801947e:	a372      	add	r3, pc, #456	@ (adr r3, 8019648 <__ieee754_pow+0x758>)
 8019480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019484:	f7e6 ff22 	bl	80002cc <__adddf3>
 8019488:	4622      	mov	r2, r4
 801948a:	4606      	mov	r6, r0
 801948c:	460f      	mov	r7, r1
 801948e:	462b      	mov	r3, r5
 8019490:	4620      	mov	r0, r4
 8019492:	4629      	mov	r1, r5
 8019494:	f7e7 f8d0 	bl	8000638 <__aeabi_dmul>
 8019498:	4602      	mov	r2, r0
 801949a:	460b      	mov	r3, r1
 801949c:	4630      	mov	r0, r6
 801949e:	4639      	mov	r1, r7
 80194a0:	f7e7 f8ca 	bl	8000638 <__aeabi_dmul>
 80194a4:	465a      	mov	r2, fp
 80194a6:	4604      	mov	r4, r0
 80194a8:	460d      	mov	r5, r1
 80194aa:	464b      	mov	r3, r9
 80194ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80194b0:	f7e6 ff0c 	bl	80002cc <__adddf3>
 80194b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80194b8:	f7e7 f8be 	bl	8000638 <__aeabi_dmul>
 80194bc:	4622      	mov	r2, r4
 80194be:	462b      	mov	r3, r5
 80194c0:	f7e6 ff04 	bl	80002cc <__adddf3>
 80194c4:	465a      	mov	r2, fp
 80194c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80194ca:	464b      	mov	r3, r9
 80194cc:	4658      	mov	r0, fp
 80194ce:	4649      	mov	r1, r9
 80194d0:	f7e7 f8b2 	bl	8000638 <__aeabi_dmul>
 80194d4:	4b6a      	ldr	r3, [pc, #424]	@ (8019680 <__ieee754_pow+0x790>)
 80194d6:	2200      	movs	r2, #0
 80194d8:	4606      	mov	r6, r0
 80194da:	460f      	mov	r7, r1
 80194dc:	f7e6 fef6 	bl	80002cc <__adddf3>
 80194e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80194e4:	f7e6 fef2 	bl	80002cc <__adddf3>
 80194e8:	46d8      	mov	r8, fp
 80194ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80194ee:	460d      	mov	r5, r1
 80194f0:	465a      	mov	r2, fp
 80194f2:	460b      	mov	r3, r1
 80194f4:	4640      	mov	r0, r8
 80194f6:	4649      	mov	r1, r9
 80194f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80194fc:	f7e7 f89c 	bl	8000638 <__aeabi_dmul>
 8019500:	465c      	mov	r4, fp
 8019502:	4680      	mov	r8, r0
 8019504:	4689      	mov	r9, r1
 8019506:	4b5e      	ldr	r3, [pc, #376]	@ (8019680 <__ieee754_pow+0x790>)
 8019508:	2200      	movs	r2, #0
 801950a:	4620      	mov	r0, r4
 801950c:	4629      	mov	r1, r5
 801950e:	f7e6 fedb 	bl	80002c8 <__aeabi_dsub>
 8019512:	4632      	mov	r2, r6
 8019514:	463b      	mov	r3, r7
 8019516:	f7e6 fed7 	bl	80002c8 <__aeabi_dsub>
 801951a:	4602      	mov	r2, r0
 801951c:	460b      	mov	r3, r1
 801951e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8019522:	f7e6 fed1 	bl	80002c8 <__aeabi_dsub>
 8019526:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801952a:	f7e7 f885 	bl	8000638 <__aeabi_dmul>
 801952e:	4622      	mov	r2, r4
 8019530:	4606      	mov	r6, r0
 8019532:	460f      	mov	r7, r1
 8019534:	462b      	mov	r3, r5
 8019536:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801953a:	f7e7 f87d 	bl	8000638 <__aeabi_dmul>
 801953e:	4602      	mov	r2, r0
 8019540:	460b      	mov	r3, r1
 8019542:	4630      	mov	r0, r6
 8019544:	4639      	mov	r1, r7
 8019546:	f7e6 fec1 	bl	80002cc <__adddf3>
 801954a:	4606      	mov	r6, r0
 801954c:	460f      	mov	r7, r1
 801954e:	4602      	mov	r2, r0
 8019550:	460b      	mov	r3, r1
 8019552:	4640      	mov	r0, r8
 8019554:	4649      	mov	r1, r9
 8019556:	f7e6 feb9 	bl	80002cc <__adddf3>
 801955a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801955e:	a33c      	add	r3, pc, #240	@ (adr r3, 8019650 <__ieee754_pow+0x760>)
 8019560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019564:	4658      	mov	r0, fp
 8019566:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801956a:	460d      	mov	r5, r1
 801956c:	f7e7 f864 	bl	8000638 <__aeabi_dmul>
 8019570:	465c      	mov	r4, fp
 8019572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8019576:	4642      	mov	r2, r8
 8019578:	464b      	mov	r3, r9
 801957a:	4620      	mov	r0, r4
 801957c:	4629      	mov	r1, r5
 801957e:	f7e6 fea3 	bl	80002c8 <__aeabi_dsub>
 8019582:	4602      	mov	r2, r0
 8019584:	460b      	mov	r3, r1
 8019586:	4630      	mov	r0, r6
 8019588:	4639      	mov	r1, r7
 801958a:	f7e6 fe9d 	bl	80002c8 <__aeabi_dsub>
 801958e:	a332      	add	r3, pc, #200	@ (adr r3, 8019658 <__ieee754_pow+0x768>)
 8019590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019594:	f7e7 f850 	bl	8000638 <__aeabi_dmul>
 8019598:	a331      	add	r3, pc, #196	@ (adr r3, 8019660 <__ieee754_pow+0x770>)
 801959a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801959e:	4606      	mov	r6, r0
 80195a0:	460f      	mov	r7, r1
 80195a2:	4620      	mov	r0, r4
 80195a4:	4629      	mov	r1, r5
 80195a6:	f7e7 f847 	bl	8000638 <__aeabi_dmul>
 80195aa:	4602      	mov	r2, r0
 80195ac:	460b      	mov	r3, r1
 80195ae:	4630      	mov	r0, r6
 80195b0:	4639      	mov	r1, r7
 80195b2:	f7e6 fe8b 	bl	80002cc <__adddf3>
 80195b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80195b8:	4b32      	ldr	r3, [pc, #200]	@ (8019684 <__ieee754_pow+0x794>)
 80195ba:	4413      	add	r3, r2
 80195bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195c0:	f7e6 fe84 	bl	80002cc <__adddf3>
 80195c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80195c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80195ca:	f7e6 ffcb 	bl	8000564 <__aeabi_i2d>
 80195ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80195d0:	4b2d      	ldr	r3, [pc, #180]	@ (8019688 <__ieee754_pow+0x798>)
 80195d2:	4413      	add	r3, r2
 80195d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80195d8:	4606      	mov	r6, r0
 80195da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80195de:	460f      	mov	r7, r1
 80195e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80195e4:	f7e6 fe72 	bl	80002cc <__adddf3>
 80195e8:	4642      	mov	r2, r8
 80195ea:	464b      	mov	r3, r9
 80195ec:	f7e6 fe6e 	bl	80002cc <__adddf3>
 80195f0:	4632      	mov	r2, r6
 80195f2:	463b      	mov	r3, r7
 80195f4:	f7e6 fe6a 	bl	80002cc <__adddf3>
 80195f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80195fc:	4632      	mov	r2, r6
 80195fe:	463b      	mov	r3, r7
 8019600:	4658      	mov	r0, fp
 8019602:	460d      	mov	r5, r1
 8019604:	f7e6 fe60 	bl	80002c8 <__aeabi_dsub>
 8019608:	4642      	mov	r2, r8
 801960a:	464b      	mov	r3, r9
 801960c:	f7e6 fe5c 	bl	80002c8 <__aeabi_dsub>
 8019610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019614:	f7e6 fe58 	bl	80002c8 <__aeabi_dsub>
 8019618:	465c      	mov	r4, fp
 801961a:	4602      	mov	r2, r0
 801961c:	e036      	b.n	801968c <__ieee754_pow+0x79c>
 801961e:	bf00      	nop
 8019620:	4a454eef 	.word	0x4a454eef
 8019624:	3fca7e28 	.word	0x3fca7e28
 8019628:	93c9db65 	.word	0x93c9db65
 801962c:	3fcd864a 	.word	0x3fcd864a
 8019630:	a91d4101 	.word	0xa91d4101
 8019634:	3fd17460 	.word	0x3fd17460
 8019638:	518f264d 	.word	0x518f264d
 801963c:	3fd55555 	.word	0x3fd55555
 8019640:	db6fabff 	.word	0xdb6fabff
 8019644:	3fdb6db6 	.word	0x3fdb6db6
 8019648:	33333303 	.word	0x33333303
 801964c:	3fe33333 	.word	0x3fe33333
 8019650:	e0000000 	.word	0xe0000000
 8019654:	3feec709 	.word	0x3feec709
 8019658:	dc3a03fd 	.word	0xdc3a03fd
 801965c:	3feec709 	.word	0x3feec709
 8019660:	145b01f5 	.word	0x145b01f5
 8019664:	be3e2fe0 	.word	0xbe3e2fe0
 8019668:	7ff00000 	.word	0x7ff00000
 801966c:	43400000 	.word	0x43400000
 8019670:	0003988e 	.word	0x0003988e
 8019674:	000bb679 	.word	0x000bb679
 8019678:	0801ae38 	.word	0x0801ae38
 801967c:	3ff00000 	.word	0x3ff00000
 8019680:	40080000 	.word	0x40080000
 8019684:	0801ae18 	.word	0x0801ae18
 8019688:	0801ae28 	.word	0x0801ae28
 801968c:	460b      	mov	r3, r1
 801968e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019692:	e5d7      	b.n	8019244 <__ieee754_pow+0x354>
 8019694:	f04f 0a01 	mov.w	sl, #1
 8019698:	e65e      	b.n	8019358 <__ieee754_pow+0x468>
 801969a:	a3b4      	add	r3, pc, #720	@ (adr r3, 801996c <__ieee754_pow+0xa7c>)
 801969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196a0:	4630      	mov	r0, r6
 80196a2:	4639      	mov	r1, r7
 80196a4:	f7e6 fe12 	bl	80002cc <__adddf3>
 80196a8:	4642      	mov	r2, r8
 80196aa:	e9cd 0100 	strd	r0, r1, [sp]
 80196ae:	464b      	mov	r3, r9
 80196b0:	4620      	mov	r0, r4
 80196b2:	4629      	mov	r1, r5
 80196b4:	f7e6 fe08 	bl	80002c8 <__aeabi_dsub>
 80196b8:	4602      	mov	r2, r0
 80196ba:	460b      	mov	r3, r1
 80196bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80196c0:	f7e7 fa4a 	bl	8000b58 <__aeabi_dcmpgt>
 80196c4:	2800      	cmp	r0, #0
 80196c6:	f47f ae00 	bne.w	80192ca <__ieee754_pow+0x3da>
 80196ca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80196ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80196d2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80196d6:	fa43 fa0a 	asr.w	sl, r3, sl
 80196da:	44da      	add	sl, fp
 80196dc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80196e0:	489d      	ldr	r0, [pc, #628]	@ (8019958 <__ieee754_pow+0xa68>)
 80196e2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80196e6:	4108      	asrs	r0, r1
 80196e8:	ea00 030a 	and.w	r3, r0, sl
 80196ec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80196f0:	f1c1 0114 	rsb	r1, r1, #20
 80196f4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80196f8:	fa4a fa01 	asr.w	sl, sl, r1
 80196fc:	f1bb 0f00 	cmp.w	fp, #0
 8019700:	4640      	mov	r0, r8
 8019702:	4649      	mov	r1, r9
 8019704:	f04f 0200 	mov.w	r2, #0
 8019708:	bfb8      	it	lt
 801970a:	f1ca 0a00 	rsblt	sl, sl, #0
 801970e:	f7e6 fddb 	bl	80002c8 <__aeabi_dsub>
 8019712:	4680      	mov	r8, r0
 8019714:	4689      	mov	r9, r1
 8019716:	4632      	mov	r2, r6
 8019718:	463b      	mov	r3, r7
 801971a:	4640      	mov	r0, r8
 801971c:	4649      	mov	r1, r9
 801971e:	f7e6 fdd5 	bl	80002cc <__adddf3>
 8019722:	2400      	movs	r4, #0
 8019724:	a37c      	add	r3, pc, #496	@ (adr r3, 8019918 <__ieee754_pow+0xa28>)
 8019726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801972a:	4620      	mov	r0, r4
 801972c:	460d      	mov	r5, r1
 801972e:	f7e6 ff83 	bl	8000638 <__aeabi_dmul>
 8019732:	4642      	mov	r2, r8
 8019734:	e9cd 0100 	strd	r0, r1, [sp]
 8019738:	464b      	mov	r3, r9
 801973a:	4620      	mov	r0, r4
 801973c:	4629      	mov	r1, r5
 801973e:	f7e6 fdc3 	bl	80002c8 <__aeabi_dsub>
 8019742:	4602      	mov	r2, r0
 8019744:	460b      	mov	r3, r1
 8019746:	4630      	mov	r0, r6
 8019748:	4639      	mov	r1, r7
 801974a:	f7e6 fdbd 	bl	80002c8 <__aeabi_dsub>
 801974e:	a374      	add	r3, pc, #464	@ (adr r3, 8019920 <__ieee754_pow+0xa30>)
 8019750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019754:	f7e6 ff70 	bl	8000638 <__aeabi_dmul>
 8019758:	a373      	add	r3, pc, #460	@ (adr r3, 8019928 <__ieee754_pow+0xa38>)
 801975a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975e:	4680      	mov	r8, r0
 8019760:	4689      	mov	r9, r1
 8019762:	4620      	mov	r0, r4
 8019764:	4629      	mov	r1, r5
 8019766:	f7e6 ff67 	bl	8000638 <__aeabi_dmul>
 801976a:	4602      	mov	r2, r0
 801976c:	460b      	mov	r3, r1
 801976e:	4640      	mov	r0, r8
 8019770:	4649      	mov	r1, r9
 8019772:	f7e6 fdab 	bl	80002cc <__adddf3>
 8019776:	4604      	mov	r4, r0
 8019778:	460d      	mov	r5, r1
 801977a:	4602      	mov	r2, r0
 801977c:	460b      	mov	r3, r1
 801977e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019782:	f7e6 fda3 	bl	80002cc <__adddf3>
 8019786:	e9dd 2300 	ldrd	r2, r3, [sp]
 801978a:	4680      	mov	r8, r0
 801978c:	4689      	mov	r9, r1
 801978e:	f7e6 fd9b 	bl	80002c8 <__aeabi_dsub>
 8019792:	4602      	mov	r2, r0
 8019794:	460b      	mov	r3, r1
 8019796:	4620      	mov	r0, r4
 8019798:	4629      	mov	r1, r5
 801979a:	f7e6 fd95 	bl	80002c8 <__aeabi_dsub>
 801979e:	4642      	mov	r2, r8
 80197a0:	4606      	mov	r6, r0
 80197a2:	460f      	mov	r7, r1
 80197a4:	464b      	mov	r3, r9
 80197a6:	4640      	mov	r0, r8
 80197a8:	4649      	mov	r1, r9
 80197aa:	f7e6 ff45 	bl	8000638 <__aeabi_dmul>
 80197ae:	a360      	add	r3, pc, #384	@ (adr r3, 8019930 <__ieee754_pow+0xa40>)
 80197b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197b4:	4604      	mov	r4, r0
 80197b6:	460d      	mov	r5, r1
 80197b8:	f7e6 ff3e 	bl	8000638 <__aeabi_dmul>
 80197bc:	a35e      	add	r3, pc, #376	@ (adr r3, 8019938 <__ieee754_pow+0xa48>)
 80197be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c2:	f7e6 fd81 	bl	80002c8 <__aeabi_dsub>
 80197c6:	4622      	mov	r2, r4
 80197c8:	462b      	mov	r3, r5
 80197ca:	f7e6 ff35 	bl	8000638 <__aeabi_dmul>
 80197ce:	a35c      	add	r3, pc, #368	@ (adr r3, 8019940 <__ieee754_pow+0xa50>)
 80197d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d4:	f7e6 fd7a 	bl	80002cc <__adddf3>
 80197d8:	4622      	mov	r2, r4
 80197da:	462b      	mov	r3, r5
 80197dc:	f7e6 ff2c 	bl	8000638 <__aeabi_dmul>
 80197e0:	a359      	add	r3, pc, #356	@ (adr r3, 8019948 <__ieee754_pow+0xa58>)
 80197e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e6:	f7e6 fd6f 	bl	80002c8 <__aeabi_dsub>
 80197ea:	4622      	mov	r2, r4
 80197ec:	462b      	mov	r3, r5
 80197ee:	f7e6 ff23 	bl	8000638 <__aeabi_dmul>
 80197f2:	a357      	add	r3, pc, #348	@ (adr r3, 8019950 <__ieee754_pow+0xa60>)
 80197f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f8:	f7e6 fd68 	bl	80002cc <__adddf3>
 80197fc:	4622      	mov	r2, r4
 80197fe:	462b      	mov	r3, r5
 8019800:	f7e6 ff1a 	bl	8000638 <__aeabi_dmul>
 8019804:	4602      	mov	r2, r0
 8019806:	460b      	mov	r3, r1
 8019808:	4640      	mov	r0, r8
 801980a:	4649      	mov	r1, r9
 801980c:	f7e6 fd5c 	bl	80002c8 <__aeabi_dsub>
 8019810:	4604      	mov	r4, r0
 8019812:	460d      	mov	r5, r1
 8019814:	4602      	mov	r2, r0
 8019816:	460b      	mov	r3, r1
 8019818:	4640      	mov	r0, r8
 801981a:	4649      	mov	r1, r9
 801981c:	f7e6 ff0c 	bl	8000638 <__aeabi_dmul>
 8019820:	2200      	movs	r2, #0
 8019822:	e9cd 0100 	strd	r0, r1, [sp]
 8019826:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801982a:	4620      	mov	r0, r4
 801982c:	4629      	mov	r1, r5
 801982e:	f7e6 fd4b 	bl	80002c8 <__aeabi_dsub>
 8019832:	4602      	mov	r2, r0
 8019834:	460b      	mov	r3, r1
 8019836:	e9dd 0100 	ldrd	r0, r1, [sp]
 801983a:	f7e7 f827 	bl	800088c <__aeabi_ddiv>
 801983e:	4632      	mov	r2, r6
 8019840:	4604      	mov	r4, r0
 8019842:	460d      	mov	r5, r1
 8019844:	463b      	mov	r3, r7
 8019846:	4640      	mov	r0, r8
 8019848:	4649      	mov	r1, r9
 801984a:	f7e6 fef5 	bl	8000638 <__aeabi_dmul>
 801984e:	4632      	mov	r2, r6
 8019850:	463b      	mov	r3, r7
 8019852:	f7e6 fd3b 	bl	80002cc <__adddf3>
 8019856:	4602      	mov	r2, r0
 8019858:	460b      	mov	r3, r1
 801985a:	4620      	mov	r0, r4
 801985c:	4629      	mov	r1, r5
 801985e:	f7e6 fd33 	bl	80002c8 <__aeabi_dsub>
 8019862:	4642      	mov	r2, r8
 8019864:	464b      	mov	r3, r9
 8019866:	f7e6 fd2f 	bl	80002c8 <__aeabi_dsub>
 801986a:	460b      	mov	r3, r1
 801986c:	4602      	mov	r2, r0
 801986e:	493b      	ldr	r1, [pc, #236]	@ (801995c <__ieee754_pow+0xa6c>)
 8019870:	2000      	movs	r0, #0
 8019872:	f7e6 fd29 	bl	80002c8 <__aeabi_dsub>
 8019876:	ec41 0b10 	vmov	d0, r0, r1
 801987a:	ee10 3a90 	vmov	r3, s1
 801987e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8019882:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019886:	da30      	bge.n	80198ea <__ieee754_pow+0x9fa>
 8019888:	4650      	mov	r0, sl
 801988a:	f000 fb45 	bl	8019f18 <scalbn>
 801988e:	ec51 0b10 	vmov	r0, r1, d0
 8019892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019896:	f7ff bbd2 	b.w	801903e <__ieee754_pow+0x14e>
 801989a:	4c31      	ldr	r4, [pc, #196]	@ (8019960 <__ieee754_pow+0xa70>)
 801989c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80198a0:	42a3      	cmp	r3, r4
 80198a2:	d91a      	bls.n	80198da <__ieee754_pow+0x9ea>
 80198a4:	4b2f      	ldr	r3, [pc, #188]	@ (8019964 <__ieee754_pow+0xa74>)
 80198a6:	440b      	add	r3, r1
 80198a8:	4303      	orrs	r3, r0
 80198aa:	d009      	beq.n	80198c0 <__ieee754_pow+0x9d0>
 80198ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80198b0:	2200      	movs	r2, #0
 80198b2:	2300      	movs	r3, #0
 80198b4:	f7e7 f932 	bl	8000b1c <__aeabi_dcmplt>
 80198b8:	3800      	subs	r0, #0
 80198ba:	bf18      	it	ne
 80198bc:	2001      	movne	r0, #1
 80198be:	e42b      	b.n	8019118 <__ieee754_pow+0x228>
 80198c0:	4642      	mov	r2, r8
 80198c2:	464b      	mov	r3, r9
 80198c4:	f7e6 fd00 	bl	80002c8 <__aeabi_dsub>
 80198c8:	4632      	mov	r2, r6
 80198ca:	463b      	mov	r3, r7
 80198cc:	f7e7 f93a 	bl	8000b44 <__aeabi_dcmpge>
 80198d0:	2800      	cmp	r0, #0
 80198d2:	d1eb      	bne.n	80198ac <__ieee754_pow+0x9bc>
 80198d4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8019974 <__ieee754_pow+0xa84>
 80198d8:	e6f7      	b.n	80196ca <__ieee754_pow+0x7da>
 80198da:	469a      	mov	sl, r3
 80198dc:	4b22      	ldr	r3, [pc, #136]	@ (8019968 <__ieee754_pow+0xa78>)
 80198de:	459a      	cmp	sl, r3
 80198e0:	f63f aef3 	bhi.w	80196ca <__ieee754_pow+0x7da>
 80198e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 80198e8:	e715      	b.n	8019716 <__ieee754_pow+0x826>
 80198ea:	ec51 0b10 	vmov	r0, r1, d0
 80198ee:	4619      	mov	r1, r3
 80198f0:	e7cf      	b.n	8019892 <__ieee754_pow+0x9a2>
 80198f2:	491a      	ldr	r1, [pc, #104]	@ (801995c <__ieee754_pow+0xa6c>)
 80198f4:	2000      	movs	r0, #0
 80198f6:	f7ff bb18 	b.w	8018f2a <__ieee754_pow+0x3a>
 80198fa:	2000      	movs	r0, #0
 80198fc:	2100      	movs	r1, #0
 80198fe:	f7ff bb14 	b.w	8018f2a <__ieee754_pow+0x3a>
 8019902:	4630      	mov	r0, r6
 8019904:	4639      	mov	r1, r7
 8019906:	f7ff bb10 	b.w	8018f2a <__ieee754_pow+0x3a>
 801990a:	460c      	mov	r4, r1
 801990c:	f7ff bb5e 	b.w	8018fcc <__ieee754_pow+0xdc>
 8019910:	2400      	movs	r4, #0
 8019912:	f7ff bb49 	b.w	8018fa8 <__ieee754_pow+0xb8>
 8019916:	bf00      	nop
 8019918:	00000000 	.word	0x00000000
 801991c:	3fe62e43 	.word	0x3fe62e43
 8019920:	fefa39ef 	.word	0xfefa39ef
 8019924:	3fe62e42 	.word	0x3fe62e42
 8019928:	0ca86c39 	.word	0x0ca86c39
 801992c:	be205c61 	.word	0xbe205c61
 8019930:	72bea4d0 	.word	0x72bea4d0
 8019934:	3e663769 	.word	0x3e663769
 8019938:	c5d26bf1 	.word	0xc5d26bf1
 801993c:	3ebbbd41 	.word	0x3ebbbd41
 8019940:	af25de2c 	.word	0xaf25de2c
 8019944:	3f11566a 	.word	0x3f11566a
 8019948:	16bebd93 	.word	0x16bebd93
 801994c:	3f66c16c 	.word	0x3f66c16c
 8019950:	5555553e 	.word	0x5555553e
 8019954:	3fc55555 	.word	0x3fc55555
 8019958:	fff00000 	.word	0xfff00000
 801995c:	3ff00000 	.word	0x3ff00000
 8019960:	4090cbff 	.word	0x4090cbff
 8019964:	3f6f3400 	.word	0x3f6f3400
 8019968:	3fe00000 	.word	0x3fe00000
 801996c:	652b82fe 	.word	0x652b82fe
 8019970:	3c971547 	.word	0x3c971547
 8019974:	4090cc00 	.word	0x4090cc00

08019978 <fabs>:
 8019978:	ec51 0b10 	vmov	r0, r1, d0
 801997c:	4602      	mov	r2, r0
 801997e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019982:	ec43 2b10 	vmov	d0, r2, r3
 8019986:	4770      	bx	lr

08019988 <__kernel_cosf>:
 8019988:	ee10 3a10 	vmov	r3, s0
 801998c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019990:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019994:	eef0 6a40 	vmov.f32	s13, s0
 8019998:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801999c:	d204      	bcs.n	80199a8 <__kernel_cosf+0x20>
 801999e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80199a2:	ee17 2a90 	vmov	r2, s15
 80199a6:	b342      	cbz	r2, 80199fa <__kernel_cosf+0x72>
 80199a8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80199ac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8019a18 <__kernel_cosf+0x90>
 80199b0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8019a1c <__kernel_cosf+0x94>
 80199b4:	4a1a      	ldr	r2, [pc, #104]	@ (8019a20 <__kernel_cosf+0x98>)
 80199b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80199ba:	4293      	cmp	r3, r2
 80199bc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019a24 <__kernel_cosf+0x9c>
 80199c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80199c4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8019a28 <__kernel_cosf+0xa0>
 80199c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80199cc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8019a2c <__kernel_cosf+0xa4>
 80199d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80199d4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8019a30 <__kernel_cosf+0xa8>
 80199d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80199dc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80199e0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80199e4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80199e8:	eee7 0a06 	vfma.f32	s1, s14, s12
 80199ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199f0:	d804      	bhi.n	80199fc <__kernel_cosf+0x74>
 80199f2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80199f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80199fa:	4770      	bx	lr
 80199fc:	4a0d      	ldr	r2, [pc, #52]	@ (8019a34 <__kernel_cosf+0xac>)
 80199fe:	4293      	cmp	r3, r2
 8019a00:	bf9a      	itte	ls
 8019a02:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8019a06:	ee07 3a10 	vmovls	s14, r3
 8019a0a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8019a0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a16:	e7ec      	b.n	80199f2 <__kernel_cosf+0x6a>
 8019a18:	ad47d74e 	.word	0xad47d74e
 8019a1c:	310f74f6 	.word	0x310f74f6
 8019a20:	3e999999 	.word	0x3e999999
 8019a24:	b493f27c 	.word	0xb493f27c
 8019a28:	37d00d01 	.word	0x37d00d01
 8019a2c:	bab60b61 	.word	0xbab60b61
 8019a30:	3d2aaaab 	.word	0x3d2aaaab
 8019a34:	3f480000 	.word	0x3f480000

08019a38 <__kernel_sinf>:
 8019a38:	ee10 3a10 	vmov	r3, s0
 8019a3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019a40:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019a44:	d204      	bcs.n	8019a50 <__kernel_sinf+0x18>
 8019a46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019a4a:	ee17 3a90 	vmov	r3, s15
 8019a4e:	b35b      	cbz	r3, 8019aa8 <__kernel_sinf+0x70>
 8019a50:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019a54:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8019aac <__kernel_sinf+0x74>
 8019a58:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8019ab0 <__kernel_sinf+0x78>
 8019a5c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019a60:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8019ab4 <__kernel_sinf+0x7c>
 8019a64:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019a68:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8019ab8 <__kernel_sinf+0x80>
 8019a6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019a70:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8019abc <__kernel_sinf+0x84>
 8019a74:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019a78:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019a7c:	b930      	cbnz	r0, 8019a8c <__kernel_sinf+0x54>
 8019a7e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8019ac0 <__kernel_sinf+0x88>
 8019a82:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019a86:	eea6 0a26 	vfma.f32	s0, s12, s13
 8019a8a:	4770      	bx	lr
 8019a8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019a90:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019a94:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019a98:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8019a9c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019ac4 <__kernel_sinf+0x8c>
 8019aa0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019aa4:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019aa8:	4770      	bx	lr
 8019aaa:	bf00      	nop
 8019aac:	2f2ec9d3 	.word	0x2f2ec9d3
 8019ab0:	b2d72f34 	.word	0xb2d72f34
 8019ab4:	3638ef1b 	.word	0x3638ef1b
 8019ab8:	b9500d01 	.word	0xb9500d01
 8019abc:	3c088889 	.word	0x3c088889
 8019ac0:	be2aaaab 	.word	0xbe2aaaab
 8019ac4:	3e2aaaab 	.word	0x3e2aaaab

08019ac8 <__ieee754_acosf>:
 8019ac8:	b508      	push	{r3, lr}
 8019aca:	ee10 3a10 	vmov	r3, s0
 8019ace:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019ad2:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8019ad6:	ed2d 8b0c 	vpush	{d8-d13}
 8019ada:	d10a      	bne.n	8019af2 <__ieee754_acosf+0x2a>
 8019adc:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8019c74 <__ieee754_acosf+0x1ac>
 8019ae0:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8019c78 <__ieee754_acosf+0x1b0>
 8019ae4:	2b00      	cmp	r3, #0
 8019ae6:	bfc8      	it	gt
 8019ae8:	eeb0 0a67 	vmovgt.f32	s0, s15
 8019aec:	ecbd 8b0c 	vpop	{d8-d13}
 8019af0:	bd08      	pop	{r3, pc}
 8019af2:	d904      	bls.n	8019afe <__ieee754_acosf+0x36>
 8019af4:	ee30 8a40 	vsub.f32	s16, s0, s0
 8019af8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019afc:	e7f6      	b.n	8019aec <__ieee754_acosf+0x24>
 8019afe:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8019b02:	d23c      	bcs.n	8019b7e <__ieee754_acosf+0xb6>
 8019b04:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8019b08:	f240 80b1 	bls.w	8019c6e <__ieee754_acosf+0x1a6>
 8019b0c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019b10:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8019c7c <__ieee754_acosf+0x1b4>
 8019b14:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8019c80 <__ieee754_acosf+0x1b8>
 8019b18:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8019c84 <__ieee754_acosf+0x1bc>
 8019b1c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019b20:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8019c88 <__ieee754_acosf+0x1c0>
 8019b24:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019b28:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8019c8c <__ieee754_acosf+0x1c4>
 8019b2c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019b30:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8019c90 <__ieee754_acosf+0x1c8>
 8019b34:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019b38:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8019c94 <__ieee754_acosf+0x1cc>
 8019b3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019b40:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8019c98 <__ieee754_acosf+0x1d0>
 8019b44:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019b48:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8019c9c <__ieee754_acosf+0x1d4>
 8019b4c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019b50:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8019ca0 <__ieee754_acosf+0x1d8>
 8019b54:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019b58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019b5c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019b60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b64:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8019ca4 <__ieee754_acosf+0x1dc>
 8019b68:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8019b6c:	eee0 7a46 	vfms.f32	s15, s0, s12
 8019b70:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019b74:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8019ca8 <__ieee754_acosf+0x1e0>
 8019b78:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019b7c:	e7b6      	b.n	8019aec <__ieee754_acosf+0x24>
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	eddf da3e 	vldr	s27, [pc, #248]	@ 8019c7c <__ieee754_acosf+0x1b4>
 8019b84:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8019c80 <__ieee754_acosf+0x1b8>
 8019b88:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8019c88 <__ieee754_acosf+0x1c0>
 8019b8c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8019c8c <__ieee754_acosf+0x1c4>
 8019b90:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8019c90 <__ieee754_acosf+0x1c8>
 8019b94:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8019c94 <__ieee754_acosf+0x1cc>
 8019b98:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8019c98 <__ieee754_acosf+0x1d0>
 8019b9c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8019c84 <__ieee754_acosf+0x1bc>
 8019ba0:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8019c9c <__ieee754_acosf+0x1d4>
 8019ba4:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8019ca0 <__ieee754_acosf+0x1d8>
 8019ba8:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8019bac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019bb0:	da28      	bge.n	8019c04 <__ieee754_acosf+0x13c>
 8019bb2:	ee30 8a09 	vadd.f32	s16, s0, s18
 8019bb6:	ee28 0a27 	vmul.f32	s0, s16, s15
 8019bba:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8019bbe:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8019bc2:	eeac ca80 	vfma.f32	s24, s25, s0
 8019bc6:	eeaa aa80 	vfma.f32	s20, s21, s0
 8019bca:	eeec ba00 	vfma.f32	s23, s24, s0
 8019bce:	eeea 9a00 	vfma.f32	s19, s20, s0
 8019bd2:	eeab ba80 	vfma.f32	s22, s23, s0
 8019bd6:	eea9 9a80 	vfma.f32	s18, s19, s0
 8019bda:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8019bde:	ee68 8a80 	vmul.f32	s17, s17, s0
 8019be2:	f7ff f905 	bl	8018df0 <__ieee754_sqrtf>
 8019be6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8019bea:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8019cac <__ieee754_acosf+0x1e4>
 8019bee:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019bf2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8019bf6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019bfa:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8019cb0 <__ieee754_acosf+0x1e8>
 8019bfe:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019c02:	e773      	b.n	8019aec <__ieee754_acosf+0x24>
 8019c04:	ee39 8a40 	vsub.f32	s16, s18, s0
 8019c08:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019c0c:	eeb0 0a48 	vmov.f32	s0, s16
 8019c10:	f7ff f8ee 	bl	8018df0 <__ieee754_sqrtf>
 8019c14:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8019c18:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8019c1c:	eeac ca88 	vfma.f32	s24, s25, s16
 8019c20:	eeaa aa88 	vfma.f32	s20, s21, s16
 8019c24:	eeec ba08 	vfma.f32	s23, s24, s16
 8019c28:	ee10 3a10 	vmov	r3, s0
 8019c2c:	eeab ba88 	vfma.f32	s22, s23, s16
 8019c30:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8019c34:	f023 030f 	bic.w	r3, r3, #15
 8019c38:	eeea 9a08 	vfma.f32	s19, s20, s16
 8019c3c:	ee07 3a90 	vmov	s15, r3
 8019c40:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8019c44:	eeb0 6a48 	vmov.f32	s12, s16
 8019c48:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8019c4c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8019c50:	ee70 6a27 	vadd.f32	s13, s0, s15
 8019c54:	ee68 8a88 	vmul.f32	s17, s17, s16
 8019c58:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019c5c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8019c60:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019c64:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019c68:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c6c:	e73e      	b.n	8019aec <__ieee754_acosf+0x24>
 8019c6e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8019cb4 <__ieee754_acosf+0x1ec>
 8019c72:	e73b      	b.n	8019aec <__ieee754_acosf+0x24>
 8019c74:	40490fdb 	.word	0x40490fdb
 8019c78:	00000000 	.word	0x00000000
 8019c7c:	3811ef08 	.word	0x3811ef08
 8019c80:	3a4f7f04 	.word	0x3a4f7f04
 8019c84:	bf303361 	.word	0xbf303361
 8019c88:	bd241146 	.word	0xbd241146
 8019c8c:	3e4e0aa8 	.word	0x3e4e0aa8
 8019c90:	bea6b090 	.word	0xbea6b090
 8019c94:	3e2aaaab 	.word	0x3e2aaaab
 8019c98:	3d9dc62e 	.word	0x3d9dc62e
 8019c9c:	4001572d 	.word	0x4001572d
 8019ca0:	c019d139 	.word	0xc019d139
 8019ca4:	33a22168 	.word	0x33a22168
 8019ca8:	3fc90fda 	.word	0x3fc90fda
 8019cac:	b3a22168 	.word	0xb3a22168
 8019cb0:	40490fda 	.word	0x40490fda
 8019cb4:	3fc90fdb 	.word	0x3fc90fdb

08019cb8 <__ieee754_rem_pio2f>:
 8019cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019cba:	ee10 6a10 	vmov	r6, s0
 8019cbe:	4b88      	ldr	r3, [pc, #544]	@ (8019ee0 <__ieee754_rem_pio2f+0x228>)
 8019cc0:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019cc4:	429d      	cmp	r5, r3
 8019cc6:	b087      	sub	sp, #28
 8019cc8:	4604      	mov	r4, r0
 8019cca:	d805      	bhi.n	8019cd8 <__ieee754_rem_pio2f+0x20>
 8019ccc:	2300      	movs	r3, #0
 8019cce:	ed80 0a00 	vstr	s0, [r0]
 8019cd2:	6043      	str	r3, [r0, #4]
 8019cd4:	2000      	movs	r0, #0
 8019cd6:	e022      	b.n	8019d1e <__ieee754_rem_pio2f+0x66>
 8019cd8:	4b82      	ldr	r3, [pc, #520]	@ (8019ee4 <__ieee754_rem_pio2f+0x22c>)
 8019cda:	429d      	cmp	r5, r3
 8019cdc:	d83a      	bhi.n	8019d54 <__ieee754_rem_pio2f+0x9c>
 8019cde:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019ce2:	2e00      	cmp	r6, #0
 8019ce4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8019ee8 <__ieee754_rem_pio2f+0x230>
 8019ce8:	4a80      	ldr	r2, [pc, #512]	@ (8019eec <__ieee754_rem_pio2f+0x234>)
 8019cea:	f023 030f 	bic.w	r3, r3, #15
 8019cee:	dd18      	ble.n	8019d22 <__ieee754_rem_pio2f+0x6a>
 8019cf0:	4293      	cmp	r3, r2
 8019cf2:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019cf6:	bf09      	itett	eq
 8019cf8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8019ef0 <__ieee754_rem_pio2f+0x238>
 8019cfc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019ef4 <__ieee754_rem_pio2f+0x23c>
 8019d00:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8019ef8 <__ieee754_rem_pio2f+0x240>
 8019d04:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019d08:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8019d0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d10:	ed80 7a00 	vstr	s14, [r0]
 8019d14:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019d18:	edc0 7a01 	vstr	s15, [r0, #4]
 8019d1c:	2001      	movs	r0, #1
 8019d1e:	b007      	add	sp, #28
 8019d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d22:	4293      	cmp	r3, r2
 8019d24:	ee70 7a07 	vadd.f32	s15, s0, s14
 8019d28:	bf09      	itett	eq
 8019d2a:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8019ef0 <__ieee754_rem_pio2f+0x238>
 8019d2e:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019ef4 <__ieee754_rem_pio2f+0x23c>
 8019d32:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8019ef8 <__ieee754_rem_pio2f+0x240>
 8019d36:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8019d3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019d3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019d42:	ed80 7a00 	vstr	s14, [r0]
 8019d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d4a:	edc0 7a01 	vstr	s15, [r0, #4]
 8019d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8019d52:	e7e4      	b.n	8019d1e <__ieee754_rem_pio2f+0x66>
 8019d54:	4b69      	ldr	r3, [pc, #420]	@ (8019efc <__ieee754_rem_pio2f+0x244>)
 8019d56:	429d      	cmp	r5, r3
 8019d58:	d873      	bhi.n	8019e42 <__ieee754_rem_pio2f+0x18a>
 8019d5a:	f7fe ff07 	bl	8018b6c <fabsf>
 8019d5e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8019f00 <__ieee754_rem_pio2f+0x248>
 8019d62:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019d66:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019d6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019d72:	ee17 0a90 	vmov	r0, s15
 8019d76:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019ee8 <__ieee754_rem_pio2f+0x230>
 8019d7a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019d7e:	281f      	cmp	r0, #31
 8019d80:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019ef4 <__ieee754_rem_pio2f+0x23c>
 8019d84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019d88:	eeb1 6a47 	vneg.f32	s12, s14
 8019d8c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019d90:	ee16 1a90 	vmov	r1, s13
 8019d94:	dc09      	bgt.n	8019daa <__ieee754_rem_pio2f+0xf2>
 8019d96:	4a5b      	ldr	r2, [pc, #364]	@ (8019f04 <__ieee754_rem_pio2f+0x24c>)
 8019d98:	1e47      	subs	r7, r0, #1
 8019d9a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8019d9e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8019da2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019da6:	4293      	cmp	r3, r2
 8019da8:	d107      	bne.n	8019dba <__ieee754_rem_pio2f+0x102>
 8019daa:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8019dae:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8019db2:	2a08      	cmp	r2, #8
 8019db4:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019db8:	dc14      	bgt.n	8019de4 <__ieee754_rem_pio2f+0x12c>
 8019dba:	6021      	str	r1, [r4, #0]
 8019dbc:	ed94 7a00 	vldr	s14, [r4]
 8019dc0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019dc4:	2e00      	cmp	r6, #0
 8019dc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019dca:	ed84 0a01 	vstr	s0, [r4, #4]
 8019dce:	daa6      	bge.n	8019d1e <__ieee754_rem_pio2f+0x66>
 8019dd0:	eeb1 7a47 	vneg.f32	s14, s14
 8019dd4:	eeb1 0a40 	vneg.f32	s0, s0
 8019dd8:	ed84 7a00 	vstr	s14, [r4]
 8019ddc:	ed84 0a01 	vstr	s0, [r4, #4]
 8019de0:	4240      	negs	r0, r0
 8019de2:	e79c      	b.n	8019d1e <__ieee754_rem_pio2f+0x66>
 8019de4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8019ef0 <__ieee754_rem_pio2f+0x238>
 8019de8:	eef0 6a40 	vmov.f32	s13, s0
 8019dec:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019df0:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019df4:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019df8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019ef8 <__ieee754_rem_pio2f+0x240>
 8019dfc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019e00:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019e04:	ee15 2a90 	vmov	r2, s11
 8019e08:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019e0c:	1a5b      	subs	r3, r3, r1
 8019e0e:	2b19      	cmp	r3, #25
 8019e10:	dc04      	bgt.n	8019e1c <__ieee754_rem_pio2f+0x164>
 8019e12:	edc4 5a00 	vstr	s11, [r4]
 8019e16:	eeb0 0a66 	vmov.f32	s0, s13
 8019e1a:	e7cf      	b.n	8019dbc <__ieee754_rem_pio2f+0x104>
 8019e1c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8019f08 <__ieee754_rem_pio2f+0x250>
 8019e20:	eeb0 0a66 	vmov.f32	s0, s13
 8019e24:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019e28:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019e2c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8019f0c <__ieee754_rem_pio2f+0x254>
 8019e30:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019e34:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019e38:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019e3c:	ed84 7a00 	vstr	s14, [r4]
 8019e40:	e7bc      	b.n	8019dbc <__ieee754_rem_pio2f+0x104>
 8019e42:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8019e46:	d306      	bcc.n	8019e56 <__ieee754_rem_pio2f+0x19e>
 8019e48:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019e4c:	edc0 7a01 	vstr	s15, [r0, #4]
 8019e50:	edc0 7a00 	vstr	s15, [r0]
 8019e54:	e73e      	b.n	8019cd4 <__ieee754_rem_pio2f+0x1c>
 8019e56:	15ea      	asrs	r2, r5, #23
 8019e58:	3a86      	subs	r2, #134	@ 0x86
 8019e5a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019e5e:	ee07 3a90 	vmov	s15, r3
 8019e62:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019e66:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8019f10 <__ieee754_rem_pio2f+0x258>
 8019e6a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e72:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019e76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e7a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019e7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e86:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019e8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019e8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e96:	edcd 7a05 	vstr	s15, [sp, #20]
 8019e9a:	d11e      	bne.n	8019eda <__ieee754_rem_pio2f+0x222>
 8019e9c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ea4:	bf0c      	ite	eq
 8019ea6:	2301      	moveq	r3, #1
 8019ea8:	2302      	movne	r3, #2
 8019eaa:	491a      	ldr	r1, [pc, #104]	@ (8019f14 <__ieee754_rem_pio2f+0x25c>)
 8019eac:	9101      	str	r1, [sp, #4]
 8019eae:	2102      	movs	r1, #2
 8019eb0:	9100      	str	r1, [sp, #0]
 8019eb2:	a803      	add	r0, sp, #12
 8019eb4:	4621      	mov	r1, r4
 8019eb6:	f000 f8eb 	bl	801a090 <__kernel_rem_pio2f>
 8019eba:	2e00      	cmp	r6, #0
 8019ebc:	f6bf af2f 	bge.w	8019d1e <__ieee754_rem_pio2f+0x66>
 8019ec0:	edd4 7a00 	vldr	s15, [r4]
 8019ec4:	eef1 7a67 	vneg.f32	s15, s15
 8019ec8:	edc4 7a00 	vstr	s15, [r4]
 8019ecc:	edd4 7a01 	vldr	s15, [r4, #4]
 8019ed0:	eef1 7a67 	vneg.f32	s15, s15
 8019ed4:	edc4 7a01 	vstr	s15, [r4, #4]
 8019ed8:	e782      	b.n	8019de0 <__ieee754_rem_pio2f+0x128>
 8019eda:	2303      	movs	r3, #3
 8019edc:	e7e5      	b.n	8019eaa <__ieee754_rem_pio2f+0x1f2>
 8019ede:	bf00      	nop
 8019ee0:	3f490fd8 	.word	0x3f490fd8
 8019ee4:	4016cbe3 	.word	0x4016cbe3
 8019ee8:	3fc90f80 	.word	0x3fc90f80
 8019eec:	3fc90fd0 	.word	0x3fc90fd0
 8019ef0:	37354400 	.word	0x37354400
 8019ef4:	37354443 	.word	0x37354443
 8019ef8:	2e85a308 	.word	0x2e85a308
 8019efc:	43490f80 	.word	0x43490f80
 8019f00:	3f22f984 	.word	0x3f22f984
 8019f04:	0801ae48 	.word	0x0801ae48
 8019f08:	2e85a300 	.word	0x2e85a300
 8019f0c:	248d3132 	.word	0x248d3132
 8019f10:	43800000 	.word	0x43800000
 8019f14:	0801aec8 	.word	0x0801aec8

08019f18 <scalbn>:
 8019f18:	b570      	push	{r4, r5, r6, lr}
 8019f1a:	ec55 4b10 	vmov	r4, r5, d0
 8019f1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8019f22:	4606      	mov	r6, r0
 8019f24:	462b      	mov	r3, r5
 8019f26:	b991      	cbnz	r1, 8019f4e <scalbn+0x36>
 8019f28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8019f2c:	4323      	orrs	r3, r4
 8019f2e:	d03d      	beq.n	8019fac <scalbn+0x94>
 8019f30:	4b35      	ldr	r3, [pc, #212]	@ (801a008 <scalbn+0xf0>)
 8019f32:	4620      	mov	r0, r4
 8019f34:	4629      	mov	r1, r5
 8019f36:	2200      	movs	r2, #0
 8019f38:	f7e6 fb7e 	bl	8000638 <__aeabi_dmul>
 8019f3c:	4b33      	ldr	r3, [pc, #204]	@ (801a00c <scalbn+0xf4>)
 8019f3e:	429e      	cmp	r6, r3
 8019f40:	4604      	mov	r4, r0
 8019f42:	460d      	mov	r5, r1
 8019f44:	da0f      	bge.n	8019f66 <scalbn+0x4e>
 8019f46:	a328      	add	r3, pc, #160	@ (adr r3, 8019fe8 <scalbn+0xd0>)
 8019f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f4c:	e01e      	b.n	8019f8c <scalbn+0x74>
 8019f4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8019f52:	4291      	cmp	r1, r2
 8019f54:	d10b      	bne.n	8019f6e <scalbn+0x56>
 8019f56:	4622      	mov	r2, r4
 8019f58:	4620      	mov	r0, r4
 8019f5a:	4629      	mov	r1, r5
 8019f5c:	f7e6 f9b6 	bl	80002cc <__adddf3>
 8019f60:	4604      	mov	r4, r0
 8019f62:	460d      	mov	r5, r1
 8019f64:	e022      	b.n	8019fac <scalbn+0x94>
 8019f66:	460b      	mov	r3, r1
 8019f68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8019f6c:	3936      	subs	r1, #54	@ 0x36
 8019f6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8019f72:	4296      	cmp	r6, r2
 8019f74:	dd0d      	ble.n	8019f92 <scalbn+0x7a>
 8019f76:	2d00      	cmp	r5, #0
 8019f78:	a11d      	add	r1, pc, #116	@ (adr r1, 8019ff0 <scalbn+0xd8>)
 8019f7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f7e:	da02      	bge.n	8019f86 <scalbn+0x6e>
 8019f80:	a11d      	add	r1, pc, #116	@ (adr r1, 8019ff8 <scalbn+0xe0>)
 8019f82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f86:	a31a      	add	r3, pc, #104	@ (adr r3, 8019ff0 <scalbn+0xd8>)
 8019f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f8c:	f7e6 fb54 	bl	8000638 <__aeabi_dmul>
 8019f90:	e7e6      	b.n	8019f60 <scalbn+0x48>
 8019f92:	1872      	adds	r2, r6, r1
 8019f94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8019f98:	428a      	cmp	r2, r1
 8019f9a:	dcec      	bgt.n	8019f76 <scalbn+0x5e>
 8019f9c:	2a00      	cmp	r2, #0
 8019f9e:	dd08      	ble.n	8019fb2 <scalbn+0x9a>
 8019fa0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019fa4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8019fa8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019fac:	ec45 4b10 	vmov	d0, r4, r5
 8019fb0:	bd70      	pop	{r4, r5, r6, pc}
 8019fb2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8019fb6:	da08      	bge.n	8019fca <scalbn+0xb2>
 8019fb8:	2d00      	cmp	r5, #0
 8019fba:	a10b      	add	r1, pc, #44	@ (adr r1, 8019fe8 <scalbn+0xd0>)
 8019fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fc0:	dac1      	bge.n	8019f46 <scalbn+0x2e>
 8019fc2:	a10f      	add	r1, pc, #60	@ (adr r1, 801a000 <scalbn+0xe8>)
 8019fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fc8:	e7bd      	b.n	8019f46 <scalbn+0x2e>
 8019fca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019fce:	3236      	adds	r2, #54	@ 0x36
 8019fd0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8019fd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019fd8:	4620      	mov	r0, r4
 8019fda:	4b0d      	ldr	r3, [pc, #52]	@ (801a010 <scalbn+0xf8>)
 8019fdc:	4629      	mov	r1, r5
 8019fde:	2200      	movs	r2, #0
 8019fe0:	e7d4      	b.n	8019f8c <scalbn+0x74>
 8019fe2:	bf00      	nop
 8019fe4:	f3af 8000 	nop.w
 8019fe8:	c2f8f359 	.word	0xc2f8f359
 8019fec:	01a56e1f 	.word	0x01a56e1f
 8019ff0:	8800759c 	.word	0x8800759c
 8019ff4:	7e37e43c 	.word	0x7e37e43c
 8019ff8:	8800759c 	.word	0x8800759c
 8019ffc:	fe37e43c 	.word	0xfe37e43c
 801a000:	c2f8f359 	.word	0xc2f8f359
 801a004:	81a56e1f 	.word	0x81a56e1f
 801a008:	43500000 	.word	0x43500000
 801a00c:	ffff3cb0 	.word	0xffff3cb0
 801a010:	3c900000 	.word	0x3c900000

0801a014 <with_errno>:
 801a014:	b510      	push	{r4, lr}
 801a016:	ed2d 8b02 	vpush	{d8}
 801a01a:	eeb0 8a40 	vmov.f32	s16, s0
 801a01e:	eef0 8a60 	vmov.f32	s17, s1
 801a022:	4604      	mov	r4, r0
 801a024:	f7fa fdc4 	bl	8014bb0 <__errno>
 801a028:	eeb0 0a48 	vmov.f32	s0, s16
 801a02c:	eef0 0a68 	vmov.f32	s1, s17
 801a030:	ecbd 8b02 	vpop	{d8}
 801a034:	6004      	str	r4, [r0, #0]
 801a036:	bd10      	pop	{r4, pc}

0801a038 <xflow>:
 801a038:	4603      	mov	r3, r0
 801a03a:	b507      	push	{r0, r1, r2, lr}
 801a03c:	ec51 0b10 	vmov	r0, r1, d0
 801a040:	b183      	cbz	r3, 801a064 <xflow+0x2c>
 801a042:	4602      	mov	r2, r0
 801a044:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801a048:	e9cd 2300 	strd	r2, r3, [sp]
 801a04c:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a050:	f7e6 faf2 	bl	8000638 <__aeabi_dmul>
 801a054:	ec41 0b10 	vmov	d0, r0, r1
 801a058:	2022      	movs	r0, #34	@ 0x22
 801a05a:	b003      	add	sp, #12
 801a05c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a060:	f7ff bfd8 	b.w	801a014 <with_errno>
 801a064:	4602      	mov	r2, r0
 801a066:	460b      	mov	r3, r1
 801a068:	e7ee      	b.n	801a048 <xflow+0x10>
 801a06a:	0000      	movs	r0, r0
 801a06c:	0000      	movs	r0, r0
	...

0801a070 <__math_uflow>:
 801a070:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a078 <__math_uflow+0x8>
 801a074:	f7ff bfe0 	b.w	801a038 <xflow>
 801a078:	00000000 	.word	0x00000000
 801a07c:	10000000 	.word	0x10000000

0801a080 <__math_oflow>:
 801a080:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801a088 <__math_oflow+0x8>
 801a084:	f7ff bfd8 	b.w	801a038 <xflow>
 801a088:	00000000 	.word	0x00000000
 801a08c:	70000000 	.word	0x70000000

0801a090 <__kernel_rem_pio2f>:
 801a090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a094:	ed2d 8b04 	vpush	{d8-d9}
 801a098:	b0d9      	sub	sp, #356	@ 0x164
 801a09a:	4690      	mov	r8, r2
 801a09c:	9001      	str	r0, [sp, #4]
 801a09e:	4ab9      	ldr	r2, [pc, #740]	@ (801a384 <__kernel_rem_pio2f+0x2f4>)
 801a0a0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801a0a2:	f118 0f04 	cmn.w	r8, #4
 801a0a6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801a0aa:	460f      	mov	r7, r1
 801a0ac:	f103 3bff 	add.w	fp, r3, #4294967295
 801a0b0:	db27      	blt.n	801a102 <__kernel_rem_pio2f+0x72>
 801a0b2:	f1b8 0203 	subs.w	r2, r8, #3
 801a0b6:	bf48      	it	mi
 801a0b8:	f108 0204 	addmi.w	r2, r8, #4
 801a0bc:	10d2      	asrs	r2, r2, #3
 801a0be:	1c55      	adds	r5, r2, #1
 801a0c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a0c2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801a394 <__kernel_rem_pio2f+0x304>
 801a0c6:	00e8      	lsls	r0, r5, #3
 801a0c8:	eba2 060b 	sub.w	r6, r2, fp
 801a0cc:	9002      	str	r0, [sp, #8]
 801a0ce:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801a0d2:	eb0a 0c0b 	add.w	ip, sl, fp
 801a0d6:	ac1c      	add	r4, sp, #112	@ 0x70
 801a0d8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801a0dc:	2000      	movs	r0, #0
 801a0de:	4560      	cmp	r0, ip
 801a0e0:	dd11      	ble.n	801a106 <__kernel_rem_pio2f+0x76>
 801a0e2:	a91c      	add	r1, sp, #112	@ 0x70
 801a0e4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801a0e8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801a0ec:	f04f 0c00 	mov.w	ip, #0
 801a0f0:	45d4      	cmp	ip, sl
 801a0f2:	dc27      	bgt.n	801a144 <__kernel_rem_pio2f+0xb4>
 801a0f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a0f8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801a394 <__kernel_rem_pio2f+0x304>
 801a0fc:	4606      	mov	r6, r0
 801a0fe:	2400      	movs	r4, #0
 801a100:	e016      	b.n	801a130 <__kernel_rem_pio2f+0xa0>
 801a102:	2200      	movs	r2, #0
 801a104:	e7db      	b.n	801a0be <__kernel_rem_pio2f+0x2e>
 801a106:	42c6      	cmn	r6, r0
 801a108:	bf5d      	ittte	pl
 801a10a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801a10e:	ee07 1a90 	vmovpl	s15, r1
 801a112:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a116:	eef0 7a47 	vmovmi.f32	s15, s14
 801a11a:	ece4 7a01 	vstmia	r4!, {s15}
 801a11e:	3001      	adds	r0, #1
 801a120:	e7dd      	b.n	801a0de <__kernel_rem_pio2f+0x4e>
 801a122:	ecfe 6a01 	vldmia	lr!, {s13}
 801a126:	ed96 7a00 	vldr	s14, [r6]
 801a12a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a12e:	3401      	adds	r4, #1
 801a130:	455c      	cmp	r4, fp
 801a132:	f1a6 0604 	sub.w	r6, r6, #4
 801a136:	ddf4      	ble.n	801a122 <__kernel_rem_pio2f+0x92>
 801a138:	ece9 7a01 	vstmia	r9!, {s15}
 801a13c:	f10c 0c01 	add.w	ip, ip, #1
 801a140:	3004      	adds	r0, #4
 801a142:	e7d5      	b.n	801a0f0 <__kernel_rem_pio2f+0x60>
 801a144:	a908      	add	r1, sp, #32
 801a146:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a14a:	9104      	str	r1, [sp, #16]
 801a14c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a14e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801a390 <__kernel_rem_pio2f+0x300>
 801a152:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801a38c <__kernel_rem_pio2f+0x2fc>
 801a156:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a15a:	9203      	str	r2, [sp, #12]
 801a15c:	4654      	mov	r4, sl
 801a15e:	00a2      	lsls	r2, r4, #2
 801a160:	9205      	str	r2, [sp, #20]
 801a162:	aa58      	add	r2, sp, #352	@ 0x160
 801a164:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801a168:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801a16c:	a944      	add	r1, sp, #272	@ 0x110
 801a16e:	aa08      	add	r2, sp, #32
 801a170:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801a174:	4694      	mov	ip, r2
 801a176:	4626      	mov	r6, r4
 801a178:	2e00      	cmp	r6, #0
 801a17a:	f1a0 0004 	sub.w	r0, r0, #4
 801a17e:	dc4c      	bgt.n	801a21a <__kernel_rem_pio2f+0x18a>
 801a180:	4628      	mov	r0, r5
 801a182:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a186:	f000 f9f5 	bl	801a574 <scalbnf>
 801a18a:	eeb0 8a40 	vmov.f32	s16, s0
 801a18e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801a192:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a196:	f000 fa53 	bl	801a640 <floorf>
 801a19a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801a19e:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a1a2:	2d00      	cmp	r5, #0
 801a1a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a1a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a1ac:	ee17 9a90 	vmov	r9, s15
 801a1b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a1b8:	dd41      	ble.n	801a23e <__kernel_rem_pio2f+0x1ae>
 801a1ba:	f104 3cff 	add.w	ip, r4, #4294967295
 801a1be:	a908      	add	r1, sp, #32
 801a1c0:	f1c5 0e08 	rsb	lr, r5, #8
 801a1c4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801a1c8:	fa46 f00e 	asr.w	r0, r6, lr
 801a1cc:	4481      	add	r9, r0
 801a1ce:	fa00 f00e 	lsl.w	r0, r0, lr
 801a1d2:	1a36      	subs	r6, r6, r0
 801a1d4:	f1c5 0007 	rsb	r0, r5, #7
 801a1d8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801a1dc:	4106      	asrs	r6, r0
 801a1de:	2e00      	cmp	r6, #0
 801a1e0:	dd3c      	ble.n	801a25c <__kernel_rem_pio2f+0x1cc>
 801a1e2:	f04f 0e00 	mov.w	lr, #0
 801a1e6:	f109 0901 	add.w	r9, r9, #1
 801a1ea:	4670      	mov	r0, lr
 801a1ec:	4574      	cmp	r4, lr
 801a1ee:	dc68      	bgt.n	801a2c2 <__kernel_rem_pio2f+0x232>
 801a1f0:	2d00      	cmp	r5, #0
 801a1f2:	dd03      	ble.n	801a1fc <__kernel_rem_pio2f+0x16c>
 801a1f4:	2d01      	cmp	r5, #1
 801a1f6:	d074      	beq.n	801a2e2 <__kernel_rem_pio2f+0x252>
 801a1f8:	2d02      	cmp	r5, #2
 801a1fa:	d07d      	beq.n	801a2f8 <__kernel_rem_pio2f+0x268>
 801a1fc:	2e02      	cmp	r6, #2
 801a1fe:	d12d      	bne.n	801a25c <__kernel_rem_pio2f+0x1cc>
 801a200:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a204:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a208:	b340      	cbz	r0, 801a25c <__kernel_rem_pio2f+0x1cc>
 801a20a:	4628      	mov	r0, r5
 801a20c:	9306      	str	r3, [sp, #24]
 801a20e:	f000 f9b1 	bl	801a574 <scalbnf>
 801a212:	9b06      	ldr	r3, [sp, #24]
 801a214:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a218:	e020      	b.n	801a25c <__kernel_rem_pio2f+0x1cc>
 801a21a:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a21e:	3e01      	subs	r6, #1
 801a220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a228:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a22c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a230:	ecac 0a01 	vstmia	ip!, {s0}
 801a234:	ed90 0a00 	vldr	s0, [r0]
 801a238:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a23c:	e79c      	b.n	801a178 <__kernel_rem_pio2f+0xe8>
 801a23e:	d105      	bne.n	801a24c <__kernel_rem_pio2f+0x1bc>
 801a240:	1e60      	subs	r0, r4, #1
 801a242:	a908      	add	r1, sp, #32
 801a244:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801a248:	11f6      	asrs	r6, r6, #7
 801a24a:	e7c8      	b.n	801a1de <__kernel_rem_pio2f+0x14e>
 801a24c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a250:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a258:	da31      	bge.n	801a2be <__kernel_rem_pio2f+0x22e>
 801a25a:	2600      	movs	r6, #0
 801a25c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a264:	f040 8098 	bne.w	801a398 <__kernel_rem_pio2f+0x308>
 801a268:	1e60      	subs	r0, r4, #1
 801a26a:	2200      	movs	r2, #0
 801a26c:	4550      	cmp	r0, sl
 801a26e:	da4b      	bge.n	801a308 <__kernel_rem_pio2f+0x278>
 801a270:	2a00      	cmp	r2, #0
 801a272:	d065      	beq.n	801a340 <__kernel_rem_pio2f+0x2b0>
 801a274:	3c01      	subs	r4, #1
 801a276:	ab08      	add	r3, sp, #32
 801a278:	3d08      	subs	r5, #8
 801a27a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a27e:	2b00      	cmp	r3, #0
 801a280:	d0f8      	beq.n	801a274 <__kernel_rem_pio2f+0x1e4>
 801a282:	4628      	mov	r0, r5
 801a284:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a288:	f000 f974 	bl	801a574 <scalbnf>
 801a28c:	1c63      	adds	r3, r4, #1
 801a28e:	aa44      	add	r2, sp, #272	@ 0x110
 801a290:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801a390 <__kernel_rem_pio2f+0x300>
 801a294:	0099      	lsls	r1, r3, #2
 801a296:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a29a:	4623      	mov	r3, r4
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	f280 80a9 	bge.w	801a3f4 <__kernel_rem_pio2f+0x364>
 801a2a2:	4623      	mov	r3, r4
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	f2c0 80c7 	blt.w	801a438 <__kernel_rem_pio2f+0x3a8>
 801a2aa:	aa44      	add	r2, sp, #272	@ 0x110
 801a2ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801a2b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801a388 <__kernel_rem_pio2f+0x2f8>
 801a2b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801a394 <__kernel_rem_pio2f+0x304>
 801a2b8:	2000      	movs	r0, #0
 801a2ba:	1ae2      	subs	r2, r4, r3
 801a2bc:	e0b1      	b.n	801a422 <__kernel_rem_pio2f+0x392>
 801a2be:	2602      	movs	r6, #2
 801a2c0:	e78f      	b.n	801a1e2 <__kernel_rem_pio2f+0x152>
 801a2c2:	f852 1b04 	ldr.w	r1, [r2], #4
 801a2c6:	b948      	cbnz	r0, 801a2dc <__kernel_rem_pio2f+0x24c>
 801a2c8:	b121      	cbz	r1, 801a2d4 <__kernel_rem_pio2f+0x244>
 801a2ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801a2ce:	f842 1c04 	str.w	r1, [r2, #-4]
 801a2d2:	2101      	movs	r1, #1
 801a2d4:	f10e 0e01 	add.w	lr, lr, #1
 801a2d8:	4608      	mov	r0, r1
 801a2da:	e787      	b.n	801a1ec <__kernel_rem_pio2f+0x15c>
 801a2dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801a2e0:	e7f5      	b.n	801a2ce <__kernel_rem_pio2f+0x23e>
 801a2e2:	f104 3cff 	add.w	ip, r4, #4294967295
 801a2e6:	aa08      	add	r2, sp, #32
 801a2e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a2ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801a2f0:	a908      	add	r1, sp, #32
 801a2f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a2f6:	e781      	b.n	801a1fc <__kernel_rem_pio2f+0x16c>
 801a2f8:	f104 3cff 	add.w	ip, r4, #4294967295
 801a2fc:	aa08      	add	r2, sp, #32
 801a2fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a302:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a306:	e7f3      	b.n	801a2f0 <__kernel_rem_pio2f+0x260>
 801a308:	a908      	add	r1, sp, #32
 801a30a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a30e:	3801      	subs	r0, #1
 801a310:	430a      	orrs	r2, r1
 801a312:	e7ab      	b.n	801a26c <__kernel_rem_pio2f+0x1dc>
 801a314:	3201      	adds	r2, #1
 801a316:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a31a:	2e00      	cmp	r6, #0
 801a31c:	d0fa      	beq.n	801a314 <__kernel_rem_pio2f+0x284>
 801a31e:	9905      	ldr	r1, [sp, #20]
 801a320:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801a324:	eb0d 0001 	add.w	r0, sp, r1
 801a328:	18e6      	adds	r6, r4, r3
 801a32a:	a91c      	add	r1, sp, #112	@ 0x70
 801a32c:	f104 0c01 	add.w	ip, r4, #1
 801a330:	384c      	subs	r0, #76	@ 0x4c
 801a332:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801a336:	4422      	add	r2, r4
 801a338:	4562      	cmp	r2, ip
 801a33a:	da04      	bge.n	801a346 <__kernel_rem_pio2f+0x2b6>
 801a33c:	4614      	mov	r4, r2
 801a33e:	e70e      	b.n	801a15e <__kernel_rem_pio2f+0xce>
 801a340:	9804      	ldr	r0, [sp, #16]
 801a342:	2201      	movs	r2, #1
 801a344:	e7e7      	b.n	801a316 <__kernel_rem_pio2f+0x286>
 801a346:	9903      	ldr	r1, [sp, #12]
 801a348:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a34c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a350:	9105      	str	r1, [sp, #20]
 801a352:	ee07 1a90 	vmov	s15, r1
 801a356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a35a:	2400      	movs	r4, #0
 801a35c:	ece6 7a01 	vstmia	r6!, {s15}
 801a360:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801a394 <__kernel_rem_pio2f+0x304>
 801a364:	46b1      	mov	r9, r6
 801a366:	455c      	cmp	r4, fp
 801a368:	dd04      	ble.n	801a374 <__kernel_rem_pio2f+0x2e4>
 801a36a:	ece0 7a01 	vstmia	r0!, {s15}
 801a36e:	f10c 0c01 	add.w	ip, ip, #1
 801a372:	e7e1      	b.n	801a338 <__kernel_rem_pio2f+0x2a8>
 801a374:	ecfe 6a01 	vldmia	lr!, {s13}
 801a378:	ed39 7a01 	vldmdb	r9!, {s14}
 801a37c:	3401      	adds	r4, #1
 801a37e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a382:	e7f0      	b.n	801a366 <__kernel_rem_pio2f+0x2d6>
 801a384:	0801b20c 	.word	0x0801b20c
 801a388:	0801b1e0 	.word	0x0801b1e0
 801a38c:	43800000 	.word	0x43800000
 801a390:	3b800000 	.word	0x3b800000
 801a394:	00000000 	.word	0x00000000
 801a398:	9b02      	ldr	r3, [sp, #8]
 801a39a:	eeb0 0a48 	vmov.f32	s0, s16
 801a39e:	eba3 0008 	sub.w	r0, r3, r8
 801a3a2:	f000 f8e7 	bl	801a574 <scalbnf>
 801a3a6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801a38c <__kernel_rem_pio2f+0x2fc>
 801a3aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3b2:	db19      	blt.n	801a3e8 <__kernel_rem_pio2f+0x358>
 801a3b4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801a390 <__kernel_rem_pio2f+0x300>
 801a3b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a3bc:	aa08      	add	r2, sp, #32
 801a3be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a3c2:	3508      	adds	r5, #8
 801a3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a3cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a3d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a3d4:	ee10 3a10 	vmov	r3, s0
 801a3d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a3dc:	ee17 3a90 	vmov	r3, s15
 801a3e0:	3401      	adds	r4, #1
 801a3e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a3e6:	e74c      	b.n	801a282 <__kernel_rem_pio2f+0x1f2>
 801a3e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a3ec:	aa08      	add	r2, sp, #32
 801a3ee:	ee10 3a10 	vmov	r3, s0
 801a3f2:	e7f6      	b.n	801a3e2 <__kernel_rem_pio2f+0x352>
 801a3f4:	a808      	add	r0, sp, #32
 801a3f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a3fa:	9001      	str	r0, [sp, #4]
 801a3fc:	ee07 0a90 	vmov	s15, r0
 801a400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a404:	3b01      	subs	r3, #1
 801a406:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a40a:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a40e:	ed62 7a01 	vstmdb	r2!, {s15}
 801a412:	e743      	b.n	801a29c <__kernel_rem_pio2f+0x20c>
 801a414:	ecfc 6a01 	vldmia	ip!, {s13}
 801a418:	ecb5 7a01 	vldmia	r5!, {s14}
 801a41c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a420:	3001      	adds	r0, #1
 801a422:	4550      	cmp	r0, sl
 801a424:	dc01      	bgt.n	801a42a <__kernel_rem_pio2f+0x39a>
 801a426:	4282      	cmp	r2, r0
 801a428:	daf4      	bge.n	801a414 <__kernel_rem_pio2f+0x384>
 801a42a:	a858      	add	r0, sp, #352	@ 0x160
 801a42c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801a430:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801a434:	3b01      	subs	r3, #1
 801a436:	e735      	b.n	801a2a4 <__kernel_rem_pio2f+0x214>
 801a438:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a43a:	2b02      	cmp	r3, #2
 801a43c:	dc09      	bgt.n	801a452 <__kernel_rem_pio2f+0x3c2>
 801a43e:	2b00      	cmp	r3, #0
 801a440:	dc2b      	bgt.n	801a49a <__kernel_rem_pio2f+0x40a>
 801a442:	d044      	beq.n	801a4ce <__kernel_rem_pio2f+0x43e>
 801a444:	f009 0007 	and.w	r0, r9, #7
 801a448:	b059      	add	sp, #356	@ 0x164
 801a44a:	ecbd 8b04 	vpop	{d8-d9}
 801a44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a452:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a454:	2b03      	cmp	r3, #3
 801a456:	d1f5      	bne.n	801a444 <__kernel_rem_pio2f+0x3b4>
 801a458:	aa30      	add	r2, sp, #192	@ 0xc0
 801a45a:	1f0b      	subs	r3, r1, #4
 801a45c:	4413      	add	r3, r2
 801a45e:	461a      	mov	r2, r3
 801a460:	4620      	mov	r0, r4
 801a462:	2800      	cmp	r0, #0
 801a464:	f1a2 0204 	sub.w	r2, r2, #4
 801a468:	dc52      	bgt.n	801a510 <__kernel_rem_pio2f+0x480>
 801a46a:	4622      	mov	r2, r4
 801a46c:	2a01      	cmp	r2, #1
 801a46e:	f1a3 0304 	sub.w	r3, r3, #4
 801a472:	dc5d      	bgt.n	801a530 <__kernel_rem_pio2f+0x4a0>
 801a474:	ab30      	add	r3, sp, #192	@ 0xc0
 801a476:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801a394 <__kernel_rem_pio2f+0x304>
 801a47a:	440b      	add	r3, r1
 801a47c:	2c01      	cmp	r4, #1
 801a47e:	dc67      	bgt.n	801a550 <__kernel_rem_pio2f+0x4c0>
 801a480:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801a484:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801a488:	2e00      	cmp	r6, #0
 801a48a:	d167      	bne.n	801a55c <__kernel_rem_pio2f+0x4cc>
 801a48c:	edc7 6a00 	vstr	s13, [r7]
 801a490:	ed87 7a01 	vstr	s14, [r7, #4]
 801a494:	edc7 7a02 	vstr	s15, [r7, #8]
 801a498:	e7d4      	b.n	801a444 <__kernel_rem_pio2f+0x3b4>
 801a49a:	ab30      	add	r3, sp, #192	@ 0xc0
 801a49c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801a394 <__kernel_rem_pio2f+0x304>
 801a4a0:	440b      	add	r3, r1
 801a4a2:	4622      	mov	r2, r4
 801a4a4:	2a00      	cmp	r2, #0
 801a4a6:	da24      	bge.n	801a4f2 <__kernel_rem_pio2f+0x462>
 801a4a8:	b34e      	cbz	r6, 801a4fe <__kernel_rem_pio2f+0x46e>
 801a4aa:	eef1 7a47 	vneg.f32	s15, s14
 801a4ae:	edc7 7a00 	vstr	s15, [r7]
 801a4b2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801a4b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a4ba:	aa31      	add	r2, sp, #196	@ 0xc4
 801a4bc:	2301      	movs	r3, #1
 801a4be:	429c      	cmp	r4, r3
 801a4c0:	da20      	bge.n	801a504 <__kernel_rem_pio2f+0x474>
 801a4c2:	b10e      	cbz	r6, 801a4c8 <__kernel_rem_pio2f+0x438>
 801a4c4:	eef1 7a67 	vneg.f32	s15, s15
 801a4c8:	edc7 7a01 	vstr	s15, [r7, #4]
 801a4cc:	e7ba      	b.n	801a444 <__kernel_rem_pio2f+0x3b4>
 801a4ce:	ab30      	add	r3, sp, #192	@ 0xc0
 801a4d0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801a394 <__kernel_rem_pio2f+0x304>
 801a4d4:	440b      	add	r3, r1
 801a4d6:	2c00      	cmp	r4, #0
 801a4d8:	da05      	bge.n	801a4e6 <__kernel_rem_pio2f+0x456>
 801a4da:	b10e      	cbz	r6, 801a4e0 <__kernel_rem_pio2f+0x450>
 801a4dc:	eef1 7a67 	vneg.f32	s15, s15
 801a4e0:	edc7 7a00 	vstr	s15, [r7]
 801a4e4:	e7ae      	b.n	801a444 <__kernel_rem_pio2f+0x3b4>
 801a4e6:	ed33 7a01 	vldmdb	r3!, {s14}
 801a4ea:	3c01      	subs	r4, #1
 801a4ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a4f0:	e7f1      	b.n	801a4d6 <__kernel_rem_pio2f+0x446>
 801a4f2:	ed73 7a01 	vldmdb	r3!, {s15}
 801a4f6:	3a01      	subs	r2, #1
 801a4f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a4fc:	e7d2      	b.n	801a4a4 <__kernel_rem_pio2f+0x414>
 801a4fe:	eef0 7a47 	vmov.f32	s15, s14
 801a502:	e7d4      	b.n	801a4ae <__kernel_rem_pio2f+0x41e>
 801a504:	ecb2 7a01 	vldmia	r2!, {s14}
 801a508:	3301      	adds	r3, #1
 801a50a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a50e:	e7d6      	b.n	801a4be <__kernel_rem_pio2f+0x42e>
 801a510:	edd2 7a00 	vldr	s15, [r2]
 801a514:	edd2 6a01 	vldr	s13, [r2, #4]
 801a518:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a51c:	3801      	subs	r0, #1
 801a51e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a522:	ed82 7a00 	vstr	s14, [r2]
 801a526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a52a:	edc2 7a01 	vstr	s15, [r2, #4]
 801a52e:	e798      	b.n	801a462 <__kernel_rem_pio2f+0x3d2>
 801a530:	edd3 7a00 	vldr	s15, [r3]
 801a534:	edd3 6a01 	vldr	s13, [r3, #4]
 801a538:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a53c:	3a01      	subs	r2, #1
 801a53e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a542:	ed83 7a00 	vstr	s14, [r3]
 801a546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a54a:	edc3 7a01 	vstr	s15, [r3, #4]
 801a54e:	e78d      	b.n	801a46c <__kernel_rem_pio2f+0x3dc>
 801a550:	ed33 7a01 	vldmdb	r3!, {s14}
 801a554:	3c01      	subs	r4, #1
 801a556:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a55a:	e78f      	b.n	801a47c <__kernel_rem_pio2f+0x3ec>
 801a55c:	eef1 6a66 	vneg.f32	s13, s13
 801a560:	eeb1 7a47 	vneg.f32	s14, s14
 801a564:	edc7 6a00 	vstr	s13, [r7]
 801a568:	ed87 7a01 	vstr	s14, [r7, #4]
 801a56c:	eef1 7a67 	vneg.f32	s15, s15
 801a570:	e790      	b.n	801a494 <__kernel_rem_pio2f+0x404>
 801a572:	bf00      	nop

0801a574 <scalbnf>:
 801a574:	ee10 3a10 	vmov	r3, s0
 801a578:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801a57c:	d02b      	beq.n	801a5d6 <scalbnf+0x62>
 801a57e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801a582:	d302      	bcc.n	801a58a <scalbnf+0x16>
 801a584:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a588:	4770      	bx	lr
 801a58a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a58e:	d123      	bne.n	801a5d8 <scalbnf+0x64>
 801a590:	4b24      	ldr	r3, [pc, #144]	@ (801a624 <scalbnf+0xb0>)
 801a592:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801a628 <scalbnf+0xb4>
 801a596:	4298      	cmp	r0, r3
 801a598:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a59c:	db17      	blt.n	801a5ce <scalbnf+0x5a>
 801a59e:	ee10 3a10 	vmov	r3, s0
 801a5a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a5a6:	3a19      	subs	r2, #25
 801a5a8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801a5ac:	4288      	cmp	r0, r1
 801a5ae:	dd15      	ble.n	801a5dc <scalbnf+0x68>
 801a5b0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801a62c <scalbnf+0xb8>
 801a5b4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801a630 <scalbnf+0xbc>
 801a5b8:	ee10 3a10 	vmov	r3, s0
 801a5bc:	eeb0 7a67 	vmov.f32	s14, s15
 801a5c0:	2b00      	cmp	r3, #0
 801a5c2:	bfb8      	it	lt
 801a5c4:	eef0 7a66 	vmovlt.f32	s15, s13
 801a5c8:	ee27 0a87 	vmul.f32	s0, s15, s14
 801a5cc:	4770      	bx	lr
 801a5ce:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a634 <scalbnf+0xc0>
 801a5d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a5d6:	4770      	bx	lr
 801a5d8:	0dd2      	lsrs	r2, r2, #23
 801a5da:	e7e5      	b.n	801a5a8 <scalbnf+0x34>
 801a5dc:	4410      	add	r0, r2
 801a5de:	28fe      	cmp	r0, #254	@ 0xfe
 801a5e0:	dce6      	bgt.n	801a5b0 <scalbnf+0x3c>
 801a5e2:	2800      	cmp	r0, #0
 801a5e4:	dd06      	ble.n	801a5f4 <scalbnf+0x80>
 801a5e6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a5ea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a5ee:	ee00 3a10 	vmov	s0, r3
 801a5f2:	4770      	bx	lr
 801a5f4:	f110 0f16 	cmn.w	r0, #22
 801a5f8:	da09      	bge.n	801a60e <scalbnf+0x9a>
 801a5fa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801a634 <scalbnf+0xc0>
 801a5fe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801a638 <scalbnf+0xc4>
 801a602:	ee10 3a10 	vmov	r3, s0
 801a606:	eeb0 7a67 	vmov.f32	s14, s15
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	e7d9      	b.n	801a5c2 <scalbnf+0x4e>
 801a60e:	3019      	adds	r0, #25
 801a610:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a614:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a618:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801a63c <scalbnf+0xc8>
 801a61c:	ee07 3a90 	vmov	s15, r3
 801a620:	e7d7      	b.n	801a5d2 <scalbnf+0x5e>
 801a622:	bf00      	nop
 801a624:	ffff3cb0 	.word	0xffff3cb0
 801a628:	4c000000 	.word	0x4c000000
 801a62c:	7149f2ca 	.word	0x7149f2ca
 801a630:	f149f2ca 	.word	0xf149f2ca
 801a634:	0da24260 	.word	0x0da24260
 801a638:	8da24260 	.word	0x8da24260
 801a63c:	33000000 	.word	0x33000000

0801a640 <floorf>:
 801a640:	ee10 3a10 	vmov	r3, s0
 801a644:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a648:	3a7f      	subs	r2, #127	@ 0x7f
 801a64a:	2a16      	cmp	r2, #22
 801a64c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801a650:	dc2b      	bgt.n	801a6aa <floorf+0x6a>
 801a652:	2a00      	cmp	r2, #0
 801a654:	da12      	bge.n	801a67c <floorf+0x3c>
 801a656:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a6bc <floorf+0x7c>
 801a65a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a65e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a666:	dd06      	ble.n	801a676 <floorf+0x36>
 801a668:	2b00      	cmp	r3, #0
 801a66a:	da24      	bge.n	801a6b6 <floorf+0x76>
 801a66c:	2900      	cmp	r1, #0
 801a66e:	4b14      	ldr	r3, [pc, #80]	@ (801a6c0 <floorf+0x80>)
 801a670:	bf08      	it	eq
 801a672:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801a676:	ee00 3a10 	vmov	s0, r3
 801a67a:	4770      	bx	lr
 801a67c:	4911      	ldr	r1, [pc, #68]	@ (801a6c4 <floorf+0x84>)
 801a67e:	4111      	asrs	r1, r2
 801a680:	420b      	tst	r3, r1
 801a682:	d0fa      	beq.n	801a67a <floorf+0x3a>
 801a684:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801a6bc <floorf+0x7c>
 801a688:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a68c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801a690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a694:	ddef      	ble.n	801a676 <floorf+0x36>
 801a696:	2b00      	cmp	r3, #0
 801a698:	bfbe      	ittt	lt
 801a69a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801a69e:	fa40 f202 	asrlt.w	r2, r0, r2
 801a6a2:	189b      	addlt	r3, r3, r2
 801a6a4:	ea23 0301 	bic.w	r3, r3, r1
 801a6a8:	e7e5      	b.n	801a676 <floorf+0x36>
 801a6aa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a6ae:	d3e4      	bcc.n	801a67a <floorf+0x3a>
 801a6b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a6b4:	4770      	bx	lr
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	e7dd      	b.n	801a676 <floorf+0x36>
 801a6ba:	bf00      	nop
 801a6bc:	7149f2ca 	.word	0x7149f2ca
 801a6c0:	bf800000 	.word	0xbf800000
 801a6c4:	007fffff 	.word	0x007fffff

0801a6c8 <_init>:
 801a6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6ca:	bf00      	nop
 801a6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6ce:	bc08      	pop	{r3}
 801a6d0:	469e      	mov	lr, r3
 801a6d2:	4770      	bx	lr

0801a6d4 <_fini>:
 801a6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6d6:	bf00      	nop
 801a6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6da:	bc08      	pop	{r3}
 801a6dc:	469e      	mov	lr, r3
 801a6de:	4770      	bx	lr
