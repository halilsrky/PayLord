
PayLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000160d8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000950  080162a8  080162a8  000172a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016bf8  08016bf8  00018248  2**0
                  CONTENTS
  4 .ARM          00000008  08016bf8  08016bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c00  08016c00  00018248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c00  08016c00  00017c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016c04  08016c04  00017c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000248  20000000  08016c08  00018000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018e0  20000248  08016e50  00018248  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b28  08016e50  00018b28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00018248  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c173  00000000  00000000  00018278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d72  00000000  00000000  000343eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  00038160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001104  00000000  00000000  000396f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027276  00000000  00000000  0003a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e489  00000000  00000000  00061a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5ae2  00000000  00000000  0007fef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001659d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000788c  00000000  00000000  00165a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0016d2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016290 	.word	0x08016290

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	08016290 	.word	0x08016290

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint32_t last_freq_check_time = 0;
static float execution_frequency = 0.0f;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f008 fcf5 	bl	8009cec <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f008 fcd1 	bl	8009cec <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f00e ff86 	bl	8010272 <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                HAL_UART_Transmit(&huart2, (uint8_t*)freq_msg, strlen(freq_msg), 100);
            }

*/

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000264 	.word	0x20000264
 80013dc:	20000268 	.word	0x20000268
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f012 fe67 	bl	80140e8 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000268 	.word	0x20000268
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <bme280_config>:

void bme280_config()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <bme280_config+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800149c:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <bme280_config+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 fae5 	bl	8009a70 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014a6:	2005      	movs	r0, #5
 80014a8:	f006 fcf2 	bl	8007e90 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014ac:	4b93      	ldr	r3, [pc, #588]	@ (80016fc <bme280_config+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f008 f999 	bl	80097e8 <HAL_I2C_Init>
    HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f006 fcea 	bl	8007e90 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <bme280_config+0x270>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	23c8      	movs	r3, #200	@ 0xc8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2319      	movs	r3, #25
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2288      	movs	r2, #136	@ 0x88
 80014d0:	21ec      	movs	r1, #236	@ 0xec
 80014d2:	f008 fc0b 	bl	8009cec <HAL_I2C_Mem_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <bme280_config+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <bme280_config+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	b212      	sxth	r2, r2
 8001504:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b219      	sxth	r1, r3
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <bme280_config+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800151c:	7abb      	ldrb	r3, [r7, #10]
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <bme280_config+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b219      	sxth	r1, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <bme280_config+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	b219      	sxth	r1, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <bme280_config+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	b212      	sxth	r2, r2
 800155e:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	b219      	sxth	r1, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <bme280_config+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	b212      	sxth	r2, r2
 8001574:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b219      	sxth	r1, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <bme280_config+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	b219      	sxth	r1, r3
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <bme280_config+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <bme280_config+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b212      	sxth	r2, r2
 80015b6:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b219      	sxth	r1, r3
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <bme280_config+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015ce:	7ebb      	ldrb	r3, [r7, #26]
 80015d0:	b219      	sxth	r1, r3
 80015d2:	7efb      	ldrb	r3, [r7, #27]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <bme280_config+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b212      	sxth	r2, r2
 80015e2:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <bme280_config+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	7f3a      	ldrb	r2, [r7, #28]
 80015ec:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <bme280_config+0x270>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2332      	movs	r3, #50	@ 0x32
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2307      	movs	r3, #7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e1      	movs	r2, #225	@ 0xe1
 8001602:	21ec      	movs	r1, #236	@ 0xec
 8001604:	f008 fb72 	bl	8009cec <HAL_I2C_Mem_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800160c:	793b      	ldrb	r3, [r7, #4]
 800160e:	b219      	sxth	r1, r3
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <bme280_config+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	b212      	sxth	r2, r2
 8001620:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <bme280_config+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21b      	sxth	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b219      	sxth	r1, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <bme280_config+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <bme280_config+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	b212      	sxth	r2, r2
 8001660:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001662:	7aba      	ldrb	r2, [r7, #10]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <bme280_config+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b252      	sxtb	r2, r2
 800166c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <bme280_config+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <bme280_config+0x270>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f2      	movs	r2, #242	@ 0xf2
 8001690:	21ec      	movs	r1, #236	@ 0xec
 8001692:	f008 fa31 	bl	8009af8 <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <bme280_config+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <bme280_config+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <bme280_config+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <bme280_config+0x270>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2332      	movs	r3, #50	@ 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f4      	movs	r2, #244	@ 0xf4
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	f008 fa0c 	bl	8009af8 <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <bme280_config+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	79db      	ldrb	r3, [r3, #7]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <bme280_config+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e003      	b.n	8001700 <bme280_config+0x274>
 80016f8:	20000268 	.word	0x20000268
 80016fc:	20000264 	.word	0x20000264
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <bme280_config+0x2fc>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	22f5      	movs	r2, #245	@ 0xf5
 8001722:	21ec      	movs	r1, #236	@ 0xec
 8001724:	f008 f9e8 	bl	8009af8 <HAL_I2C_Mem_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f006 fbac 	bl	8007e90 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e011      	b.n	8001762 <bme280_config+0x2d6>
        bme280_update();
 800173e:	f000 f861 	bl	8001804 <bme280_update>
        base += BME->altitude;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <bme280_config+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f006 fb9a 	bl	8007e90 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	ddea      	ble.n	800173e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <bme280_config+0x300>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001770:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001790 <bme280_config+0x304>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 800177c:	f000 f842 	bl	8001804 <bme280_update>

    UNUSED(retVal);
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000264 	.word	0x20000264
 800178c:	20000268 	.word	0x20000268
 8001790:	42480000 	.word	0x42480000

08001794 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <bme280_init+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <bme280_init+0x60>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <bme280_init+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <bme280_init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <bme280_init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
*/


    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <bme280_init+0x60>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22d0      	movs	r2, #208	@ 0xd0
 80017ce:	21ec      	movs	r1, #236	@ 0xec
 80017d0:	f008 fa8c 	bl	8009cec <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b60      	cmp	r3, #96	@ 0x60
 80017d8:	d103      	bne.n	80017e2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <bme280_init+0x6c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80017e0:	e002      	b.n	80017e8 <bme280_init+0x54>
        is_BME_ok = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <bme280_init+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000268 	.word	0x20000268
 80017f4:	20000264 	.word	0x20000264
 80017f8:	20001864 	.word	0x20001864
 80017fc:	2000026c 	.word	0x2000026c
 8001800:	200018f4 	.word	0x200018f4

08001804 <bme280_update>:

void bme280_update() {
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b0d2      	sub	sp, #328	@ 0x148
 800180a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800180c:	f7ff fd68 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <bme280_update+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 840d 	bne.w	8002038 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <bme280_update+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <bme280_update+0x8c>)
 8001828:	2301      	movs	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800182c:	f006 fb24 	bl	8007e78 <HAL_GetTick>
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <bme280_update+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <bme280_update+0x88>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	e041      	b.n	80018d0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800184c:	f006 fb14 	bl	8007e78 <HAL_GetTick>
 8001850:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001854:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <bme280_update+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd12      	ble.n	8001898 <bme280_update+0x94>
 8001872:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <bme280_update+0x88>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	e007      	b.n	800189c <bme280_update+0x98>
 800188c:	20000268 	.word	0x20000268
 8001890:	2000026c 	.word	0x2000026c
 8001894:	00000000 	.word	0x00000000
 8001898:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001894 <bme280_update+0x90>
 800189c:	4bda      	ldr	r3, [pc, #872]	@ (8001c08 <bme280_update+0x404>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80018a4:	4bd8      	ldr	r3, [pc, #864]	@ (8001c08 <bme280_update+0x404>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018ac:	4bd6      	ldr	r3, [pc, #856]	@ (8001c08 <bme280_update+0x404>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c0c <bme280_update+0x408>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80018bc:	4bd2      	ldr	r3, [pc, #840]	@ (8001c08 <bme280_update+0x404>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80018c4:	ee07 2a90 	vmov	s15, r2
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80018d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001c08 <bme280_update+0x404>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80018da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c08 <bme280_update+0x404>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4bc6      	ldr	r3, [pc, #792]	@ (8001c08 <bme280_update+0x404>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	12db      	asrs	r3, r3, #11
 80018fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001904:	111a      	asrs	r2, r3, #4
 8001906:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <bme280_update+0x404>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001914:	111a      	asrs	r2, r3, #4
 8001916:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <bme280_update+0x404>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	131a      	asrs	r2, r3, #12
 8001926:	4bb8      	ldr	r3, [pc, #736]	@ (8001c08 <bme280_update+0x404>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	139b      	asrs	r3, r3, #14
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800193a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800193e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001948:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3380      	adds	r3, #128	@ 0x80
 8001954:	121b      	asrs	r3, r3, #8
 8001956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800195a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <bme280_update+0x404>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c10 <bme280_update+0x40c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001976:	4ba4      	ldr	r3, [pc, #656]	@ (8001c08 <bme280_update+0x404>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001980:	657a      	str	r2, [r7, #84]	@ 0x54
 8001982:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001986:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800199c:	460b      	mov	r3, r1
 800199e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	4613      	mov	r3, r2
 80019a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 80019b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019bc:	fb03 f102 	mul.w	r1, r3, r2
 80019c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d2:	fba3 4503 	umull	r4, r5, r3, r3
 80019d6:	1953      	adds	r3, r2, r5
 80019d8:	461d      	mov	r5, r3
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <bme280_update+0x404>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019f4:	4603      	mov	r3, r0
 80019f6:	fb03 f205 	mul.w	r2, r3, r5
 80019fa:	460b      	mov	r3, r1
 80019fc:	fb04 f303 	mul.w	r3, r4, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4602      	mov	r2, r0
 8001a04:	fba4 1202 	umull	r1, r2, r4, r2
 8001a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a24:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <bme280_update+0x404>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a46:	462a      	mov	r2, r5
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	441a      	add	r2, r3
 8001a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a62:	eb02 030b 	add.w	r3, r2, fp
 8001a66:	469b      	mov	fp, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a74:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a78:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a80:	1814      	adds	r4, r2, r0
 8001a82:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a84:	414b      	adcs	r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a8c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a90:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <bme280_update+0x404>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001aba:	1814      	adds	r4, r2, r0
 8001abc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001abe:	414b      	adcs	r3, r1
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ac6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	fb03 f102 	mul.w	r1, r3, r2
 8001ad6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	18ca      	adds	r2, r1, r3
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae8:	fba3 8903 	umull	r8, r9, r3, r3
 8001aec:	eb02 0309 	add.w	r3, r2, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <bme280_update+0x404>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	fb03 f209 	mul.w	r2, r3, r9
 8001b12:	460b      	mov	r3, r1
 8001b14:	fb08 f303 	mul.w	r3, r8, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	fba8 1202 	umull	r1, r2, r8, r2
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	460a      	mov	r2, r1
 8001b26:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b40:	4623      	mov	r3, r4
 8001b42:	0a18      	lsrs	r0, r3, #8
 8001b44:	462b      	mov	r3, r5
 8001b46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1219      	asrs	r1, r3, #8
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b68:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b76:	4644      	mov	r4, r8
 8001b78:	fb04 f303 	mul.w	r3, r4, r3
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b82:	4644      	mov	r4, r8
 8001b84:	fba3 4304 	umull	r4, r3, r3, r4
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001ba8:	464c      	mov	r4, r9
 8001baa:	0323      	lsls	r3, r4, #12
 8001bac:	4644      	mov	r4, r8
 8001bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bb2:	4644      	mov	r4, r8
 8001bb4:	0322      	lsls	r2, r4, #12
 8001bb6:	1884      	adds	r4, r0, r2
 8001bb8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001bba:	eb41 0303 	adc.w	r3, r1, r3
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001bc8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bcc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001bd0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001bd4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <bme280_update+0x404>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	88db      	ldrh	r3, [r3, #6]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001be8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	e005      	b.n	8001c14 <bme280_update+0x410>
 8001c08:	20000268 	.word	0x20000268
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c20:	460a      	mov	r2, r1
 8001c22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	104a      	asrs	r2, r1, #1
 8001c40:	4629      	mov	r1, r5
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001c48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <bme280_update+0x45a>
        {
            P = 0;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c5c:	e14b      	b.n	8001ef6 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c62:	2100      	movs	r1, #0
 8001c64:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c68:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c78:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8a:	07d0      	lsls	r0, r2, #31
 8001c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c96:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	1891      	adds	r1, r2, r2
 8001ca8:	6239      	str	r1, [r7, #32]
 8001caa:	415b      	adcs	r3, r3
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1851      	adds	r1, r2, r1
 8001cb6:	61b9      	str	r1, [r7, #24]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	414b      	adcs	r3, r1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001cca:	4649      	mov	r1, r9
 8001ccc:	018b      	lsls	r3, r1, #6
 8001cce:	4641      	mov	r1, r8
 8001cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	018a      	lsls	r2, r1, #6
 8001cd8:	4641      	mov	r1, r8
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	462a      	mov	r2, r5
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d22:	4649      	mov	r1, r9
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	4641      	mov	r1, r8
 8001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	008a      	lsls	r2, r1, #2
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	4622      	mov	r2, r4
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3e:	462b      	mov	r3, r5
 8001d40:	460a      	mov	r2, r1
 8001d42:	eb42 0303 	adc.w	r3, r2, r3
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d52:	f7ff f8c7 	bl	8000ee4 <__aeabi_ldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002044 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0b50      	lsrs	r0, r2, #13
 8001d7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d82:	1359      	asrs	r1, r3, #13
 8001d84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d88:	462b      	mov	r3, r5
 8001d8a:	fb00 f203 	mul.w	r2, r0, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	fb03 f301 	mul.w	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4622      	mov	r2, r4
 8001d98:	fba2 1200 	umull	r1, r2, r2, r0
 8001d9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001da0:	460a      	mov	r2, r1
 8001da2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001db0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0b50      	lsrs	r0, r2, #13
 8001dbe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc2:	1359      	asrs	r1, r3, #13
 8001dc4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dc8:	462b      	mov	r3, r5
 8001dca:	fb00 f203 	mul.w	r2, r0, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	fb03 f301 	mul.w	r3, r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	fba2 1200 	umull	r1, r2, r2, r0
 8001ddc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001de0:	460a      	mov	r2, r1
 8001de2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dea:	4413      	add	r3, r2
 8001dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	0e4a      	lsrs	r2, r1, #25
 8001e00:	4629      	mov	r1, r5
 8001e02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e06:	4629      	mov	r1, r5
 8001e08:	164b      	asrs	r3, r1, #25
 8001e0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002044 <bme280_update+0x840>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e24:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba2 1201 	umull	r1, r2, r2, r1
 8001e44:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e48:	460a      	mov	r2, r1
 8001e4a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e52:	4413      	add	r3, r2
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e64:	4621      	mov	r1, r4
 8001e66:	0cca      	lsrs	r2, r1, #19
 8001e68:	4629      	mov	r1, r5
 8001e6a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e6e:	4629      	mov	r1, r5
 8001e70:	14cb      	asrs	r3, r1, #19
 8001e72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e76:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	1884      	adds	r4, r0, r2
 8001e80:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e82:	eb41 0303 	adc.w	r3, r1, r3
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e8c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e90:	4621      	mov	r1, r4
 8001e92:	1889      	adds	r1, r1, r2
 8001e94:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e96:	4629      	mov	r1, r5
 8001e98:	eb43 0101 	adc.w	r1, r3, r1
 8001e9c:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eaa:	4623      	mov	r3, r4
 8001eac:	0a18      	lsrs	r0, r3, #8
 8001eae:	462b      	mov	r3, r5
 8001eb0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1219      	asrs	r1, r3, #8
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <bme280_update+0x840>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	17da      	asrs	r2, r3, #31
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001ed6:	464c      	mov	r4, r9
 8001ed8:	0123      	lsls	r3, r4, #4
 8001eda:	4644      	mov	r4, r8
 8001edc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	0122      	lsls	r2, r4, #4
 8001ee4:	1884      	adds	r4, r0, r2
 8001ee6:	603c      	str	r4, [r7, #0]
 8001ee8:	eb41 0303 	adc.w	r3, r1, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001ef6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001efa:	f7fe ffb5 	bl	8000e68 <__aeabi_l2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <bme280_update+0x844>)
 8001f0c:	f7fe fcbe 	bl	800088c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <bme280_update+0x848>)
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4947      	ldr	r1, [pc, #284]	@ (8002044 <bme280_update+0x840>)
 8001f28:	680c      	ldr	r4, [r1, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe7b 	bl	8000c28 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <bme280_update+0x840>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f44:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001f48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f50:	039a      	lsls	r2, r3, #14
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <bme280_update+0x840>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <bme280_update+0x840>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <bme280_update+0x840>)
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f86:	4611      	mov	r1, r2
 8001f88:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8c:	fb01 f202 	mul.w	r2, r1, r2
 8001f90:	0a92      	lsrs	r2, r2, #10
 8001f92:	492c      	ldr	r1, [pc, #176]	@ (8002044 <bme280_update+0x840>)
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	7f09      	ldrb	r1, [r1, #28]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001fa0:	fb00 f101 	mul.w	r1, r0, r1
 8001fa4:	0ac9      	lsrs	r1, r1, #11
 8001fa6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	0a92      	lsrs	r2, r2, #10
 8001fb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <bme280_update+0x840>)
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	6809      	ldr	r1, [r1, #0]
 8001fba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001fc6:	0b92      	lsrs	r2, r2, #14
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fda:	0bd2      	lsrs	r2, r2, #15
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <bme280_update+0x840>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	7e12      	ldrb	r2, [r2, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ffe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002002:	bf28      	it	cs
 8002004:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	0b1b      	lsrs	r3, r3, #12
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <bme280_update+0x840>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002050 <bme280_update+0x84c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800202a:	f7ff f9dd 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <bme280_update+0x840>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002038:	bf00      	nop
 800203a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002044:	20000268 	.word	0x20000268
 8002048:	40700000 	.word	0x40700000
 800204c:	40590000 	.word	0x40590000
 8002050:	44800000 	.word	0x44800000

08002054 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
	BMI->flags.isAccelDmaComplete = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	709a      	strb	r2, [r3, #2]
	BMI->flags.isGyroDmaComplete = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	711a      	strb	r2, [r3, #4]
	is_time_updated = 0;
 800207e:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <bmi088_init+0xbc>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <bmi088_init+0xc0>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <bmi088_init+0x52>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002096:	2101      	movs	r1, #1
 8002098:	2018      	movs	r0, #24
 800209a:	f00d f863 	bl	800f164 <calloc>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6918      	ldr	r0, [r3, #16]
 80020aa:	2332      	movs	r3, #50	@ 0x32
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	2200      	movs	r2, #0
 80020bc:	2130      	movs	r1, #48	@ 0x30
 80020be:	f007 fe15 	bl	8009cec <HAL_I2C_Mem_Read>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6918      	ldr	r0, [r3, #16]
 80020ca:	2332      	movs	r3, #50	@ 0x32
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	2301      	movs	r3, #1
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	3301      	adds	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	2200      	movs	r2, #0
 80020de:	21d0      	movs	r1, #208	@ 0xd0
 80020e0:	f007 fe04 	bl	8009cec <HAL_I2C_Mem_Read>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	2b1e      	cmp	r3, #30
 80020ec:	d003      	beq.n	80020f6 <bmi088_init+0xa2>
	{
		ret_val = ret_val | 0x01;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d003      	beq.n	8002104 <bmi088_init+0xb0>
	{
		ret_val = ret_val | 0x02;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000026d 	.word	0x2000026d
 8002114:	2000026e 	.word	0x2000026e

08002118 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af04      	add	r7, sp, #16
 800211e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002126:	4618      	mov	r0, r3
 8002128:	f006 fc0f 	bl	800894a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002132:	4618      	mov	r0, r3
 8002134:	f006 fc09 	bl	800894a <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 800213c:	2301      	movs	r3, #1
 800213e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6918      	ldr	r0, [r3, #16]
 8002144:	2364      	movs	r3, #100	@ 0x64
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	2301      	movs	r3, #1
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	227c      	movs	r2, #124	@ 0x7c
 8002156:	2130      	movs	r1, #48	@ 0x30
 8002158:	f007 fcce 	bl	8009af8 <HAL_I2C_Mem_Write>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	4313      	orrs	r3, r2
 8002164:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6918      	ldr	r0, [r3, #16]
 800216e:	2364      	movs	r3, #100	@ 0x64
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	227d      	movs	r2, #125	@ 0x7d
 8002180:	2130      	movs	r1, #48	@ 0x30
 8002182:	f007 fcb9 	bl	8009af8 <HAL_I2C_Mem_Write>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4313      	orrs	r3, r2
 800218e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8002190:	2014      	movs	r0, #20
 8002192:	f005 fe7d 	bl	8007e90 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002196:	23b6      	movs	r3, #182	@ 0xb6
 8002198:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6918      	ldr	r0, [r3, #16]
 800219e:	2364      	movs	r3, #100	@ 0x64
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	2301      	movs	r3, #1
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	227e      	movs	r2, #126	@ 0x7e
 80021b0:	2130      	movs	r1, #48	@ 0x30
 80021b2:	f007 fca1 	bl	8009af8 <HAL_I2C_Mem_Write>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	4313      	orrs	r3, r2
 80021be:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <bmi088_config+0xb4>
 80021c6:	4bb4      	ldr	r3, [pc, #720]	@ (8002498 <bmi088_config+0x380>)
 80021c8:	22a4      	movs	r2, #164	@ 0xa4
 80021ca:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021cc:	200a      	movs	r0, #10
 80021ce:	f005 fe5f 	bl	8007e90 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80021d2:	23b0      	movs	r3, #176	@ 0xb0
 80021d4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6918      	ldr	r0, [r3, #16]
 80021da:	2364      	movs	r3, #100	@ 0x64
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	227e      	movs	r2, #126	@ 0x7e
 80021ec:	2130      	movs	r1, #48	@ 0x30
 80021ee:	f007 fc83 	bl	8009af8 <HAL_I2C_Mem_Write>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <bmi088_config+0xf0>
 8002202:	4ba5      	ldr	r3, [pc, #660]	@ (8002498 <bmi088_config+0x380>)
 8002204:	22a9      	movs	r2, #169	@ 0xa9
 8002206:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f005 fe41 	bl	8007e90 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800220e:	23b6      	movs	r3, #182	@ 0xb6
 8002210:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6918      	ldr	r0, [r3, #16]
 8002216:	2364      	movs	r3, #100	@ 0x64
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2301      	movs	r3, #1
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2301      	movs	r3, #1
 8002226:	2214      	movs	r2, #20
 8002228:	21d0      	movs	r1, #208	@ 0xd0
 800222a:	f007 fc65 	bl	8009af8 <HAL_I2C_Mem_Write>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	4313      	orrs	r3, r2
 8002236:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <bmi088_config+0x12c>
 800223e:	4b96      	ldr	r3, [pc, #600]	@ (8002498 <bmi088_config+0x380>)
 8002240:	22ae      	movs	r2, #174	@ 0xae
 8002242:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f005 fe23 	bl	8007e90 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7b9b      	ldrb	r3, [r3, #14]
 800224e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6918      	ldr	r0, [r3, #16]
 8002254:	2364      	movs	r3, #100	@ 0x64
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	220f      	movs	r2, #15
 8002266:	21d0      	movs	r1, #208	@ 0xd0
 8002268:	f007 fc46 	bl	8009af8 <HAL_I2C_Mem_Write>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4313      	orrs	r3, r2
 8002274:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <bmi088_config+0x16a>
 800227c:	4b86      	ldr	r3, [pc, #536]	@ (8002498 <bmi088_config+0x380>)
 800227e:	22b4      	movs	r2, #180	@ 0xb4
 8002280:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7b5b      	ldrb	r3, [r3, #13]
 8002286:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6918      	ldr	r0, [r3, #16]
 800228c:	2314      	movs	r3, #20
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2301      	movs	r3, #1
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	2210      	movs	r2, #16
 800229e:	21d0      	movs	r1, #208	@ 0xd0
 80022a0:	f007 fc2a 	bl	8009af8 <HAL_I2C_Mem_Write>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <bmi088_config+0x1a2>
 80022b4:	4b78      	ldr	r3, [pc, #480]	@ (8002498 <bmi088_config+0x380>)
 80022b6:	22b8      	movs	r2, #184	@ 0xb8
 80022b8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7b1b      	ldrb	r3, [r3, #12]
 80022be:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6918      	ldr	r0, [r3, #16]
 80022c4:	2314      	movs	r3, #20
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2301      	movs	r3, #1
 80022d4:	2211      	movs	r2, #17
 80022d6:	21d0      	movs	r1, #208	@ 0xd0
 80022d8:	f007 fc0e 	bl	8009af8 <HAL_I2C_Mem_Write>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <bmi088_config+0x1da>
 80022ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <bmi088_config+0x380>)
 80022ee:	22bc      	movs	r2, #188	@ 0xbc
 80022f0:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80022f2:	2014      	movs	r0, #20
 80022f4:	f005 fdcc 	bl	8007e90 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6918      	ldr	r0, [r3, #16]
 8002300:	2314      	movs	r3, #20
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2301      	movs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	2215      	movs	r2, #21
 8002312:	21d0      	movs	r1, #208	@ 0xd0
 8002314:	f007 fbf0 	bl	8009af8 <HAL_I2C_Mem_Write>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	4313      	orrs	r3, r2
 8002320:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <bmi088_config+0x216>
 8002328:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <bmi088_config+0x380>)
 800232a:	22c2      	movs	r2, #194	@ 0xc2
 800232c:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800232e:	2305      	movs	r3, #5
 8002330:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6918      	ldr	r0, [r3, #16]
 8002336:	2314      	movs	r3, #20
 8002338:	9302      	str	r3, [sp, #8]
 800233a:	2301      	movs	r3, #1
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	2216      	movs	r2, #22
 8002348:	21d0      	movs	r1, #208	@ 0xd0
 800234a:	f007 fbd5 	bl	8009af8 <HAL_I2C_Mem_Write>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	4313      	orrs	r3, r2
 8002356:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <bmi088_config+0x24c>
 800235e:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <bmi088_config+0x380>)
 8002360:	22c6      	movs	r2, #198	@ 0xc6
 8002362:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002364:	2381      	movs	r3, #129	@ 0x81
 8002366:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6918      	ldr	r0, [r3, #16]
 800236c:	2314      	movs	r3, #20
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2301      	movs	r3, #1
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	2218      	movs	r2, #24
 800237e:	21d0      	movs	r1, #208	@ 0xd0
 8002380:	f007 fbba 	bl	8009af8 <HAL_I2C_Mem_Write>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	4313      	orrs	r3, r2
 800238c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <bmi088_config+0x282>
 8002394:	4b40      	ldr	r3, [pc, #256]	@ (8002498 <bmi088_config+0x380>)
 8002396:	22ca      	movs	r2, #202	@ 0xca
 8002398:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800239a:	2304      	movs	r3, #4
 800239c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6918      	ldr	r0, [r3, #16]
 80023a2:	2314      	movs	r3, #20
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	227d      	movs	r2, #125	@ 0x7d
 80023b4:	2130      	movs	r1, #48	@ 0x30
 80023b6:	f007 fb9f 	bl	8009af8 <HAL_I2C_Mem_Write>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <bmi088_config+0x2b8>
 80023ca:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <bmi088_config+0x380>)
 80023cc:	22cf      	movs	r2, #207	@ 0xcf
 80023ce:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023d0:	2008      	movs	r0, #8
 80023d2:	f005 fd5d 	bl	8007e90 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7a1b      	ldrb	r3, [r3, #8]
 80023da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6918      	ldr	r0, [r3, #16]
 80023e0:	2314      	movs	r3, #20
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	227c      	movs	r2, #124	@ 0x7c
 80023f2:	2130      	movs	r1, #48	@ 0x30
 80023f4:	f007 fb80 	bl	8009af8 <HAL_I2C_Mem_Write>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	4313      	orrs	r3, r2
 8002400:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <bmi088_config+0x2f6>
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <bmi088_config+0x380>)
 800240a:	22d4      	movs	r2, #212	@ 0xd4
 800240c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800240e:	2008      	movs	r0, #8
 8002410:	f005 fd3e 	bl	8007e90 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7a9b      	ldrb	r3, [r3, #10]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	b25a      	sxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7adb      	ldrb	r3, [r3, #11]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b25b      	sxtb	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6918      	ldr	r0, [r3, #16]
 800242e:	2314      	movs	r3, #20
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2301      	movs	r3, #1
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2301      	movs	r3, #1
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	2130      	movs	r1, #48	@ 0x30
 8002442:	f007 fb59 	bl	8009af8 <HAL_I2C_Mem_Write>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4313      	orrs	r3, r2
 800244e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <bmi088_config+0x344>
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <bmi088_config+0x380>)
 8002458:	22d9      	movs	r2, #217	@ 0xd9
 800245a:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7a5b      	ldrb	r3, [r3, #9]
 8002460:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6918      	ldr	r0, [r3, #16]
 8002466:	2314      	movs	r3, #20
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2301      	movs	r3, #1
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2301      	movs	r3, #1
 8002476:	2241      	movs	r2, #65	@ 0x41
 8002478:	2130      	movs	r1, #48	@ 0x30
 800247a:	f007 fb3d 	bl	8009af8 <HAL_I2C_Mem_Write>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	4313      	orrs	r3, r2
 8002486:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <bmi088_config+0x384>
 800248e:	4b02      	ldr	r3, [pc, #8]	@ (8002498 <bmi088_config+0x380>)
 8002490:	22dd      	movs	r2, #221	@ 0xdd
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e002      	b.n	800249c <bmi088_config+0x384>
 8002496:	bf00      	nop
 8002498:	20000270 	.word	0x20000270

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800249c:	230a      	movs	r3, #10
 800249e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6918      	ldr	r0, [r3, #16]
 80024a4:	2314      	movs	r3, #20
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	2301      	movs	r3, #1
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	2253      	movs	r2, #83	@ 0x53
 80024b6:	2130      	movs	r1, #48	@ 0x30
 80024b8:	f007 fb1e 	bl	8009af8 <HAL_I2C_Mem_Write>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80024c6:	2304      	movs	r3, #4
 80024c8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6918      	ldr	r0, [r3, #16]
 80024ce:	2314      	movs	r3, #20
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	2301      	movs	r3, #1
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	2258      	movs	r2, #88	@ 0x58
 80024e0:	2130      	movs	r1, #48	@ 0x30
 80024e2:	f007 fb09 	bl	8009af8 <HAL_I2C_Mem_Write>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f006 fa19 	bl	800892e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002502:	4618      	mov	r0, r3
 8002504:	f006 fa13 	bl	800892e <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002508:	2046      	movs	r0, #70	@ 0x46
 800250a:	f005 fcc1 	bl	8007e90 <HAL_Delay>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop

08002518 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af02      	add	r7, sp, #8
 800251e:	6078      	str	r0, [r7, #4]
	if(BMI->flags.isAccelUpdated && !BMI->flags.isDmaTransferActive)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01d      	beq.n	8002564 <bmi088_update+0x4c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d119      	bne.n	8002564 <bmi088_update+0x4c>
	{
		// Start DMA transfer for accelerometer data (X,Y,Z + sensor time)
		BMI->flags.isDmaTransferActive = 1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	711a      	strb	r2, [r3, #4]
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_accel_data, 9);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6918      	ldr	r0, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3384      	adds	r3, #132	@ 0x84
 800253e:	2209      	movs	r2, #9
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	2212      	movs	r2, #18
 8002548:	2130      	movs	r1, #48	@ 0x30
 800254a:	f007 fe01 	bl	800a150 <HAL_I2C_Mem_Read_DMA>
 800254e:	4603      	mov	r3, r0
 8002550:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 8002552:	7ffb      	ldrb	r3, [r7, #31]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <bmi088_update+0x4c>
		{
			BMI->flags.isDmaTransferActive = 0;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	711a      	strb	r2, [r3, #4]
			BMI->flags.isAccelUpdated = 0;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	705a      	strb	r2, [r3, #1]
		}
	}

	if(BMI->flags.isGyroUpdated && !BMI->flags.isDmaTransferActive && is_time_updated)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d030      	beq.n	80025ce <bmi088_update+0xb6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12c      	bne.n	80025ce <bmi088_update+0xb6>
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <bmi088_update+0xa8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d027      	beq.n	80025ce <bmi088_update+0xb6>
	{
		if(is_starded){
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <bmi088_update+0xac>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01f      	beq.n	80025c8 <bmi088_update+0xb0>
			// Start DMA transfer for gyroscope data
			BMI->flags.isDmaTransferActive = 1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	711a      	strb	r2, [r3, #4]
			HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_gyro_data, 6);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6918      	ldr	r0, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	338d      	adds	r3, #141	@ 0x8d
 8002596:	2206      	movs	r2, #6
 8002598:	9201      	str	r2, [sp, #4]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	2202      	movs	r2, #2
 80025a0:	21d0      	movs	r1, #208	@ 0xd0
 80025a2:	f007 fdd5 	bl	800a150 <HAL_I2C_Mem_Read_DMA>
 80025a6:	4603      	mov	r3, r0
 80025a8:	77bb      	strb	r3, [r7, #30]
			if(ret != HAL_OK)
 80025aa:	7fbb      	ldrb	r3, [r7, #30]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <bmi088_update+0xb6>
			{
				BMI->flags.isDmaTransferActive = 0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	711a      	strb	r2, [r3, #4]
				BMI->flags.isGyroUpdated = 0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e007      	b.n	80025ce <bmi088_update+0xb6>
 80025be:	bf00      	nop
 80025c0:	2000026d 	.word	0x2000026d
 80025c4:	2000026e 	.word	0x2000026e
			}
		}
		else
		{
			BMI->flags.isGyroUpdated = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		}
	}

	// Process accelerometer data if DMA transfer is complete
	if(BMI->flags.isAccelDmaComplete)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	789b      	ldrb	r3, [r3, #2]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 81c3 	beq.w	800295e <bmi088_update+0x446>
	{
		uint32_t sensorTime = (BMI->datas.raw_accel_data[8] << 16) | (BMI->datas.raw_accel_data[7] << 8) | BMI->datas.raw_accel_data[6];
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80025de:	041a      	lsls	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	4313      	orrs	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	f892 208a 	ldrb.w	r2, [r2, #138]	@ 0x8a
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
		BMI->datas.current_time = (float)sensorTime * 39.0625 / 1000000.0;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fe:	ee17 0a90 	vmov	r0, s15
 8002602:	f7fd ffc1 	bl	8000588 <__aeabi_f2d>
 8002606:	a3cb      	add	r3, pc, #812	@ (adr r3, 8002934 <bmi088_update+0x41c>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fe f814 	bl	8000638 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	a3c8      	add	r3, pc, #800	@ (adr r3, 800293c <bmi088_update+0x424>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fe f935 	bl	800088c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f7fe fafd 	bl	8000c28 <__aeabi_d2f>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	66da      	str	r2, [r3, #108]	@ 0x6c

		int16_t acc_x_16 = (BMI->datas.raw_accel_data[1] << 8) | BMI->datas.raw_accel_data[0];
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	b21a      	sxth	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	82fb      	strh	r3, [r7, #22]
		int16_t acc_y_16 = (BMI->datas.raw_accel_data[3] << 8) | BMI->datas.raw_accel_data[2];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b21a      	sxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	82bb      	strh	r3, [r7, #20]
		int16_t acc_z_16 = (BMI->datas.raw_accel_data[5] << 8) | BMI->datas.raw_accel_data[4];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	b21a      	sxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	827b      	strh	r3, [r7, #18]

		BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 8002676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002682:	ee17 0a90 	vmov	r0, s15
 8002686:	f7fd ff7f 	bl	8000588 <__aeabi_f2d>
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4ba2      	ldr	r3, [pc, #648]	@ (8002918 <bmi088_update+0x400>)
 8002690:	f7fe f8fc 	bl	800088c <__aeabi_ddiv>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b9e      	ldr	r3, [pc, #632]	@ (800291c <bmi088_update+0x404>)
 80026a2:	f7fd ffc9 	bl	8000638 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4b9b      	ldr	r3, [pc, #620]	@ (8002920 <bmi088_update+0x408>)
 80026b4:	f7fd ffc0 	bl	8000638 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	461d      	mov	r5, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7a5b      	ldrb	r3, [r3, #9]
 80026c4:	3301      	adds	r3, #1
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ce:	ee17 0a90 	vmov	r0, s15
 80026d2:	f7fd ff59 	bl	8000588 <__aeabi_f2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	ec43 2b11 	vmov	d1, r2, r3
 80026de:	ed9f 0b8a 	vldr	d0, [pc, #552]	@ 8002908 <bmi088_update+0x3f0>
 80026e2:	f011 fd01 	bl	80140e8 <pow>
 80026e6:	ec53 2b10 	vmov	r2, r3, d0
 80026ea:	4620      	mov	r0, r4
 80026ec:	4629      	mov	r1, r5
 80026ee:	f7fd ffa3 	bl	8000638 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b89      	ldr	r3, [pc, #548]	@ (8002924 <bmi088_update+0x40c>)
 8002700:	f7fd fde4 	bl	80002cc <__adddf3>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	a380      	add	r3, pc, #512	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd ff91 	bl	8000638 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	4b7e      	ldr	r3, [pc, #504]	@ (800291c <bmi088_update+0x404>)
 8002724:	f7fe f8b2 	bl	800088c <__aeabi_ddiv>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f7fe fa7a 	bl	8000c28 <__aeabi_d2f>
 8002734:	4602      	mov	r2, r0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	65da      	str	r2, [r3, #92]	@ 0x5c
		BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 800273a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002746:	ee17 0a90 	vmov	r0, s15
 800274a:	f7fd ff1d 	bl	8000588 <__aeabi_f2d>
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b71      	ldr	r3, [pc, #452]	@ (8002918 <bmi088_update+0x400>)
 8002754:	f7fe f89a 	bl	800088c <__aeabi_ddiv>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	4b6d      	ldr	r3, [pc, #436]	@ (800291c <bmi088_update+0x404>)
 8002766:	f7fd ff67 	bl	8000638 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b6a      	ldr	r3, [pc, #424]	@ (8002920 <bmi088_update+0x408>)
 8002778:	f7fd ff5e 	bl	8000638 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7a5b      	ldrb	r3, [r3, #9]
 8002788:	3301      	adds	r3, #1
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002792:	ee17 0a90 	vmov	r0, s15
 8002796:	f7fd fef7 	bl	8000588 <__aeabi_f2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	ec43 2b11 	vmov	d1, r2, r3
 80027a2:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8002908 <bmi088_update+0x3f0>
 80027a6:	f011 fc9f 	bl	80140e8 <pow>
 80027aa:	ec53 2b10 	vmov	r2, r3, d0
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b59      	ldr	r3, [pc, #356]	@ (8002928 <bmi088_update+0x410>)
 80027c4:	f7fd fd82 	bl	80002cc <__adddf3>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff2f 	bl	8000638 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b4d      	ldr	r3, [pc, #308]	@ (800291c <bmi088_update+0x404>)
 80027e8:	f7fe f850 	bl	800088c <__aeabi_ddiv>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe fa18 	bl	8000c28 <__aeabi_d2f>
 80027f8:	4602      	mov	r2, r0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	661a      	str	r2, [r3, #96]	@ 0x60
		BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80027fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280a:	ee17 0a90 	vmov	r0, s15
 800280e:	f7fd febb 	bl	8000588 <__aeabi_f2d>
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b40      	ldr	r3, [pc, #256]	@ (8002918 <bmi088_update+0x400>)
 8002818:	f7fe f838 	bl	800088c <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4b3c      	ldr	r3, [pc, #240]	@ (800291c <bmi088_update+0x404>)
 800282a:	f7fd ff05 	bl	8000638 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <bmi088_update+0x408>)
 800283c:	f7fd fefc 	bl	8000638 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4614      	mov	r4, r2
 8002846:	461d      	mov	r5, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7a5b      	ldrb	r3, [r3, #9]
 800284c:	3301      	adds	r3, #1
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002856:	ee17 0a90 	vmov	r0, s15
 800285a:	f7fd fe95 	bl	8000588 <__aeabi_f2d>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	ec43 2b11 	vmov	d1, r2, r3
 8002866:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8002908 <bmi088_update+0x3f0>
 800286a:	f011 fc3d 	bl	80140e8 <pow>
 800286e:	ec53 2b10 	vmov	r2, r3, d0
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <bmi088_update+0x40c>)
 8002888:	f7fd fd1e 	bl	80002c8 <__aeabi_dsub>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	a31e      	add	r3, pc, #120	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fecd 	bl	8000638 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <bmi088_update+0x404>)
 80028ac:	f7fd ffee 	bl	800088c <__aeabi_ddiv>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f9b6 	bl	8000c28 <__aeabi_d2f>
 80028bc:	4602      	mov	r2, r0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	665a      	str	r2, [r3, #100]	@ 0x64

		if(is_starded)
 80028c2:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <bmi088_update+0x414>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03b      	beq.n	8002944 <bmi088_update+0x42c>
		{
			BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80028d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	d502      	bpl.n	80028ec <bmi088_update+0x3d4>
 80028e6:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002930 <bmi088_update+0x418>
 80028ea:	e007      	b.n	80028fc <bmi088_update+0x3e4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
 8002902:	e022      	b.n	800294a <bmi088_update+0x432>
 8002904:	f3af 8000 	nop.w
 8002908:	00000000 	.word	0x00000000
 800290c:	40000000 	.word	0x40000000
 8002910:	51eb851f 	.word	0x51eb851f
 8002914:	40239eb8 	.word	0x40239eb8
 8002918:	40e00000 	.word	0x40e00000
 800291c:	408f4000 	.word	0x408f4000
 8002920:	3ff80000 	.word	0x3ff80000
 8002924:	40100000 	.word	0x40100000
 8002928:	402e0000 	.word	0x402e0000
 800292c:	2000026e 	.word	0x2000026e
	...
 8002938:	40438800 	.word	0x40438800
 800293c:	00000000 	.word	0x00000000
 8002940:	412e8480 	.word	0x412e8480
		}
		else
		{
			is_starded = 1;
 8002944:	4bac      	ldr	r3, [pc, #688]	@ (8002bf8 <bmi088_update+0x6e0>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
		}

		BMI->datas.last_time = BMI->datas.current_time;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	671a      	str	r2, [r3, #112]	@ 0x70
		BMI->flags.isAccelDmaComplete = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	709a      	strb	r2, [r3, #2]
		is_time_updated = 1;
 8002958:	4ba8      	ldr	r3, [pc, #672]	@ (8002bfc <bmi088_update+0x6e4>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]

		// Sıcaklık okuma kaldırıldı - sadece ivme ve gyro verisi kullanılacak
	}

	// Process gyroscope data if DMA transfer is complete
	if(BMI->flags.isGyroDmaComplete && is_time_updated)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 813b 	beq.w	8002bde <bmi088_update+0x6c6>
 8002968:	4ba4      	ldr	r3, [pc, #656]	@ (8002bfc <bmi088_update+0x6e4>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8135 	beq.w	8002bde <bmi088_update+0x6c6>
	{
		int16_t gyro_x_16 = (BMI->datas.raw_gyro_data[1] << 8) | BMI->datas.raw_gyro_data[0];
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21a      	sxth	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002984:	b21b      	sxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	823b      	strh	r3, [r7, #16]
		int16_t gyro_y_16 = (BMI->datas.raw_gyro_data[3] << 8) | BMI->datas.raw_gyro_data[2];
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b21a      	sxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	81fb      	strh	r3, [r7, #14]
		int16_t gyro_z_16 = (BMI->datas.raw_gyro_data[5] << 8) | BMI->datas.raw_gyro_data[4];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b21a      	sxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	81bb      	strh	r3, [r7, #12]

		BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80029b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c2:	ee17 0a90 	vmov	r0, s15
 80029c6:	f7fd fddf 	bl	8000588 <__aeabi_f2d>
 80029ca:	a387      	add	r3, pc, #540	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fd ff5c 	bl	800088c <__aeabi_ddiv>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7b9b      	ldrb	r3, [r3, #14]
 80029e0:	461a      	mov	r2, r3
 80029e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029e6:	4113      	asrs	r3, r2
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fdc8 	bl	8000588 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4620      	mov	r0, r4
 80029fe:	4629      	mov	r1, r5
 8002a00:	f7fd fe1a 	bl	8000638 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fdb8 	bl	8000588 <__aeabi_f2d>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fc52 	bl	80002c8 <__aeabi_dsub>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	a370      	add	r3, pc, #448	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	f7fd fe01 	bl	8000638 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f8f3 	bl	8000c28 <__aeabi_d2f>
 8002a42:	4602      	mov	r2, r0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	61da      	str	r2, [r3, #28]
		BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a54:	ee17 0a90 	vmov	r0, s15
 8002a58:	f7fd fd96 	bl	8000588 <__aeabi_f2d>
 8002a5c:	a362      	add	r3, pc, #392	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd ff13 	bl	800088c <__aeabi_ddiv>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	461d      	mov	r5, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7b9b      	ldrb	r3, [r3, #14]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a78:	4113      	asrs	r3, r2
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a82:	ee17 0a90 	vmov	r0, s15
 8002a86:	f7fd fd7f 	bl	8000588 <__aeabi_f2d>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f7fd fdd1 	bl	8000638 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd6f 	bl	8000588 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f7fd fc09 	bl	80002c8 <__aeabi_dsub>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	a34c      	add	r3, pc, #304	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fdb8 	bl	8000638 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fe f8aa 	bl	8000c28 <__aeabi_d2f>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	621a      	str	r2, [r3, #32]
		BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae6:	ee17 0a90 	vmov	r0, s15
 8002aea:	f7fd fd4d 	bl	8000588 <__aeabi_f2d>
 8002aee:	a33e      	add	r3, pc, #248	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd feca 	bl	800088c <__aeabi_ddiv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7b9b      	ldrb	r3, [r3, #14]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b0a:	4113      	asrs	r3, r2
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	ee17 0a90 	vmov	r0, s15
 8002b18:	f7fd fd36 	bl	8000588 <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4620      	mov	r0, r4
 8002b22:	4629      	mov	r1, r5
 8002b24:	f7fd fd88 	bl	8000638 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd26 	bl	8000588 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fbc0 	bl	80002c8 <__aeabi_dsub>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	a327      	add	r3, pc, #156	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fd6f 	bl	8000638 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f861 	bl	8000c28 <__aeabi_d2f>
 8002b66:	4602      	mov	r2, r0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

		Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z, BMI->datas.acc_y, -BMI->datas.acc_x, BMI->datas.acc_z, BMI->datas.delta_time);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b78:	eef1 6a67 	vneg.f32	s13, s15
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	edd3 5a18 	vldr	s11, [r3, #96]	@ 0x60
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002b8e:	eef1 7a67 	vneg.f32	s15, s15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	ed93 5a19 	vldr	s10, [r3, #100]	@ 0x64
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	edd3 4a1d 	vldr	s9, [r3, #116]	@ 0x74
 8002b9e:	eeb0 3a64 	vmov.f32	s6, s9
 8002ba2:	eef0 2a45 	vmov.f32	s5, s10
 8002ba6:	eeb0 2a67 	vmov.f32	s4, s15
 8002baa:	eef0 1a65 	vmov.f32	s3, s11
 8002bae:	eeb0 1a46 	vmov.f32	s2, s12
 8002bb2:	eef0 0a66 	vmov.f32	s1, s13
 8002bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bba:	f003 faff 	bl	80061bc <Orientation_Update>
		BMI->datas.theta = quaternionToThetaZ();
 8002bbe:	f003 ff71 	bl	8006aa4 <quaternionToThetaZ>
 8002bc2:	eef0 7a40 	vmov.f32	s15, s0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		is_gyro_renewed = 1;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <bmi088_update+0x6e8>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]

		BMI->flags.isGyroDmaComplete = 0;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	70da      	strb	r2, [r3, #3]
		is_time_updated = 0;
 8002bd8:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <bmi088_update+0x6e4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
	}
}
 8002bde:	bf00      	nop
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40dfffc0 	.word	0x40dfffc0
 8002bf0:	a0000000 	.word	0xa0000000
 8002bf4:	3f91df46 	.word	0x3f91df46
 8002bf8:	2000026e 	.word	0x2000026e
 8002bfc:	2000026d 	.word	0x2000026d
 8002c00:	2000026f 	.word	0x2000026f

08002c04 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
	uint32_t timeout_start = HAL_GetTick();
 8002c44:	f005 f918 	bl	8007e78 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]
	const uint32_t TIMEOUT_MS = 10000; // 10 saniye timeout
 8002c4a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002c4e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		// Timeout kontrolü
		if(HAL_GetTick() - timeout_start > TIMEOUT_MS)
 8002c50:	f005 f912 	bl	8007e78 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d35e      	bcc.n	8002d1e <get_offset+0xe6>
		{

			return;
		}
		
		bmi088_update(BMI);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fc59 	bl	8002518 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002c66:	4b30      	ldr	r3, [pc, #192]	@ (8002d28 <get_offset+0xf0>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d1ef      	bne.n	8002c50 <get_offset+0x18>
		{
			if(offsetCounter < 1000)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c76:	da2d      	bge.n	8002cd4 <get_offset+0x9c>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc2:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <get_offset+0xf0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e7bd      	b.n	8002c50 <get_offset+0x18>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d2c <get_offset+0xf4>
 8002ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce8:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002d2c <get_offset+0xf4>
 8002cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d00:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d2c <get_offset+0xf4>
 8002d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d18:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002d1c:	e000      	b.n	8002d20 <get_offset+0xe8>
			return;
 8002d1e:	bf00      	nop
		}

	}
}
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000026f 	.word	0x2000026f
 8002d2c:	447a0000 	.word	0x447a0000

08002d30 <bmi088_accel_dma_complete_callback>:
/**
 * @brief Accelerometer DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_accel_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelDmaComplete = 1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	709a      	strb	r2, [r3, #2]
	BMI->flags.isDmaTransferActive = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	711a      	strb	r2, [r3, #4]
	BMI->flags.isAccelUpdated = 0;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	705a      	strb	r2, [r3, #1]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <bmi088_gyro_dma_complete_callback>:
/**
 * @brief Gyroscope DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_gyro_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroDmaComplete = 1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	711a      	strb	r2, [r3, #4]
	BMI->flags.isGyroUpdated = 0;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <dwt_profiler_init>:

/**
 * @brief Initialize DWT profiler
 */
bool dwt_profiler_init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
    // Enable DWT cycle counter
    if (!dwt_enable_cycle_counter()) {
 8002d82:	f000 f901 	bl	8002f88 <dwt_enable_cycle_counter>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f083 0301 	eor.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <dwt_profiler_init+0x1a>
        return false;
 8002d92:	2300      	movs	r3, #0
 8002d94:	e035      	b.n	8002e02 <dwt_profiler_init+0x86>
    }
    
    // Initialize all profiles
    memset(profiles, 0, sizeof(profiles));
 8002d96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	481b      	ldr	r0, [pc, #108]	@ (8002e0c <dwt_profiler_init+0x90>)
 8002d9e:	f00d fa78 	bl	8010292 <memset>
    
    // Set default names
    for (int i = 0; i < PROF_MAX_COUNT && i < DWT_PROFILER_MAX_PROFILES; i++) {
 8002da2:	2300      	movs	r3, #0
 8002da4:	607b      	str	r3, [r7, #4]
 8002da6:	e022      	b.n	8002dee <dwt_profiler_init+0x72>
        profiles[i].name = default_names[i];
 8002da8:	4a19      	ldr	r2, [pc, #100]	@ (8002e10 <dwt_profiler_init+0x94>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002db0:	4916      	ldr	r1, [pc, #88]	@ (8002e0c <dwt_profiler_init+0x90>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	440b      	add	r3, r1
 8002db8:	3314      	adds	r3, #20
 8002dba:	601a      	str	r2, [r3, #0]
        profiles[i].min_cycles = UINT32_MAX;
 8002dbc:	4a13      	ldr	r2, [pc, #76]	@ (8002e0c <dwt_profiler_init+0x90>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	015b      	lsls	r3, r3, #5
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dca:	601a      	str	r2, [r3, #0]
        profiles[i].max_cycles = 0;
 8002dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8002e0c <dwt_profiler_init+0x90>)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	015b      	lsls	r3, r3, #5
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
        profiles[i].active = false;
 8002dda:	4a0c      	ldr	r2, [pc, #48]	@ (8002e0c <dwt_profiler_init+0x90>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	015b      	lsls	r3, r3, #5
 8002de0:	4413      	add	r3, r2
 8002de2:	3318      	adds	r3, #24
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < PROF_MAX_COUNT && i < DWT_PROFILER_MAX_PROFILES; i++) {
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3301      	adds	r3, #1
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b09      	cmp	r3, #9
 8002df2:	dc02      	bgt.n	8002dfa <dwt_profiler_init+0x7e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	ddd6      	ble.n	8002da8 <dwt_profiler_init+0x2c>
    }
    
    profiler_initialized = true;
 8002dfa:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <dwt_profiler_init+0x98>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
    return true;
 8002e00:	2301      	movs	r3, #1
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000274 	.word	0x20000274
 8002e10:	20000004 	.word	0x20000004
 8002e14:	20000474 	.word	0x20000474

08002e18 <dwt_profiler_start>:

/**
 * @brief Start profiling a code section
 */
void dwt_profiler_start(dwt_profile_id_t id)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
    if (!profiler_initialized || id >= DWT_PROFILER_MAX_PROFILES) {
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <dwt_profiler_start+0x4c>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f083 0301 	eor.w	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d112      	bne.n	8002e56 <dwt_profiler_start+0x3e>
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	d80f      	bhi.n	8002e56 <dwt_profiler_start+0x3e>
        return;
    }
    
    profiles[id].start_time = DWT->CYCCNT;
 8002e36:	4a0c      	ldr	r2, [pc, #48]	@ (8002e68 <dwt_profiler_start+0x50>)
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	6852      	ldr	r2, [r2, #4]
 8002e3c:	490b      	ldr	r1, [pc, #44]	@ (8002e6c <dwt_profiler_start+0x54>)
 8002e3e:	015b      	lsls	r3, r3, #5
 8002e40:	440b      	add	r3, r1
 8002e42:	331c      	adds	r3, #28
 8002e44:	601a      	str	r2, [r3, #0]
    profiles[id].active = true;
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	4a08      	ldr	r2, [pc, #32]	@ (8002e6c <dwt_profiler_start+0x54>)
 8002e4a:	015b      	lsls	r3, r3, #5
 8002e4c:	4413      	add	r3, r2
 8002e4e:	3318      	adds	r3, #24
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
 8002e54:	e000      	b.n	8002e58 <dwt_profiler_start+0x40>
        return;
 8002e56:	bf00      	nop
}
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	20000474 	.word	0x20000474
 8002e68:	e0001000 	.word	0xe0001000
 8002e6c:	20000274 	.word	0x20000274

08002e70 <dwt_profiler_end>:

/**
 * @brief End profiling a code section
 */
void dwt_profiler_end(dwt_profile_id_t id)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	71fb      	strb	r3, [r7, #7]
    uint32_t end_time = DWT->CYCCNT;
 8002e7a:	4b40      	ldr	r3, [pc, #256]	@ (8002f7c <dwt_profiler_end+0x10c>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	60bb      	str	r3, [r7, #8]
    
    if (!profiler_initialized || id >= DWT_PROFILER_MAX_PROFILES || !profiles[id].active) {
 8002e80:	4b3f      	ldr	r3, [pc, #252]	@ (8002f80 <dwt_profiler_end+0x110>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	f083 0301 	eor.w	r3, r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d170      	bne.n	8002f70 <dwt_profiler_end+0x100>
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	2b0f      	cmp	r3, #15
 8002e92:	d86d      	bhi.n	8002f70 <dwt_profiler_end+0x100>
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	4a3b      	ldr	r2, [pc, #236]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002e98:	015b      	lsls	r3, r3, #5
 8002e9a:	4413      	add	r3, r2
 8002e9c:	3318      	adds	r3, #24
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	f083 0301 	eor.w	r3, r3, #1
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d162      	bne.n	8002f70 <dwt_profiler_end+0x100>
        return;
    }
    
    // Calculate elapsed cycles (handle counter overflow)
    uint32_t elapsed_cycles;
    if (end_time >= profiles[id].start_time) {
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	4a35      	ldr	r2, [pc, #212]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002eae:	015b      	lsls	r3, r3, #5
 8002eb0:	4413      	add	r3, r2
 8002eb2:	331c      	adds	r3, #28
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d309      	bcc.n	8002ed0 <dwt_profiler_end+0x60>
        elapsed_cycles = end_time - profiles[id].start_time;
 8002ebc:	79fb      	ldrb	r3, [r7, #7]
 8002ebe:	4a31      	ldr	r2, [pc, #196]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002ec0:	015b      	lsls	r3, r3, #5
 8002ec2:	4413      	add	r3, r2
 8002ec4:	331c      	adds	r3, #28
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	e008      	b.n	8002ee2 <dwt_profiler_end+0x72>
    } else {
        // Counter overflow occurred
        elapsed_cycles = (UINT32_MAX - profiles[id].start_time) + end_time + 1;
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002ed4:	015b      	lsls	r3, r3, #5
 8002ed6:	4413      	add	r3, r2
 8002ed8:	331c      	adds	r3, #28
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	60fb      	str	r3, [r7, #12]
    }
    
    // Update statistics
    profiles[id].last_cycles = elapsed_cycles;
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	4a27      	ldr	r2, [pc, #156]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002ee6:	015b      	lsls	r3, r3, #5
 8002ee8:	4413      	add	r3, r2
 8002eea:	3310      	adds	r3, #16
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]
    profiles[id].total_cycles += elapsed_cycles;
 8002ef0:	79fb      	ldrb	r3, [r7, #7]
 8002ef2:	4a24      	ldr	r2, [pc, #144]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002ef4:	015b      	lsls	r3, r3, #5
 8002ef6:	4413      	add	r3, r2
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	79fb      	ldrb	r3, [r7, #7]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	440a      	add	r2, r1
 8002f00:	4920      	ldr	r1, [pc, #128]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002f02:	015b      	lsls	r3, r3, #5
 8002f04:	440b      	add	r3, r1
 8002f06:	601a      	str	r2, [r3, #0]
    profiles[id].count++;
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	491e      	ldr	r1, [pc, #120]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	440a      	add	r2, r1
 8002f10:	320c      	adds	r2, #12
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	3201      	adds	r2, #1
 8002f16:	491b      	ldr	r1, [pc, #108]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002f18:	015b      	lsls	r3, r3, #5
 8002f1a:	440b      	add	r3, r1
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	601a      	str	r2, [r3, #0]
    
    if (elapsed_cycles < profiles[id].min_cycles) {
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	4a18      	ldr	r2, [pc, #96]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002f24:	015b      	lsls	r3, r3, #5
 8002f26:	4413      	add	r3, r2
 8002f28:	3304      	adds	r3, #4
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d206      	bcs.n	8002f40 <dwt_profiler_end+0xd0>
        profiles[id].min_cycles = elapsed_cycles;
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	4a13      	ldr	r2, [pc, #76]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002f36:	015b      	lsls	r3, r3, #5
 8002f38:	4413      	add	r3, r2
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	601a      	str	r2, [r3, #0]
    }
    
    if (elapsed_cycles > profiles[id].max_cycles) {
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	4a10      	ldr	r2, [pc, #64]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002f44:	015b      	lsls	r3, r3, #5
 8002f46:	4413      	add	r3, r2
 8002f48:	3308      	adds	r3, #8
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d906      	bls.n	8002f60 <dwt_profiler_end+0xf0>
        profiles[id].max_cycles = elapsed_cycles;
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	4a0b      	ldr	r2, [pc, #44]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	4413      	add	r3, r2
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]
    }
    
    profiles[id].active = false;
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	4a08      	ldr	r2, [pc, #32]	@ (8002f84 <dwt_profiler_end+0x114>)
 8002f64:	015b      	lsls	r3, r3, #5
 8002f66:	4413      	add	r3, r2
 8002f68:	3318      	adds	r3, #24
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	701a      	strb	r2, [r3, #0]
 8002f6e:	e000      	b.n	8002f72 <dwt_profiler_end+0x102>
        return;
 8002f70:	bf00      	nop
}
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e0001000 	.word	0xe0001000
 8002f80:	20000474 	.word	0x20000474
 8002f84:	20000274 	.word	0x20000274

08002f88 <dwt_enable_cycle_counter>:

/**
 * @brief Enable DWT cycle counter
 */
static bool dwt_enable_cycle_counter(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
    // Enable DWT trace
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f8e:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <dwt_enable_cycle_counter+0x5c>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	4a14      	ldr	r2, [pc, #80]	@ (8002fe4 <dwt_enable_cycle_counter+0x5c>)
 8002f94:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f98:	60d3      	str	r3, [r2, #12]
    
    // Reset cycle counter
    DWT->CYCCNT = 0;
 8002f9a:	4b13      	ldr	r3, [pc, #76]	@ (8002fe8 <dwt_enable_cycle_counter+0x60>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	605a      	str	r2, [r3, #4]
    
    // Enable cycle counter
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002fa0:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <dwt_enable_cycle_counter+0x60>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a10      	ldr	r2, [pc, #64]	@ (8002fe8 <dwt_enable_cycle_counter+0x60>)
 8002fa6:	f043 0301 	orr.w	r3, r3, #1
 8002faa:	6013      	str	r3, [r2, #0]
    
    // Verify that cycle counter is running
    uint32_t start = DWT->CYCCNT;
 8002fac:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <dwt_enable_cycle_counter+0x60>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
    for (volatile int i = 0; i < 100; i++); // Small delay
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	607b      	str	r3, [r7, #4]
 8002fb6:	e002      	b.n	8002fbe <dwt_enable_cycle_counter+0x36>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	607b      	str	r3, [r7, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b63      	cmp	r3, #99	@ 0x63
 8002fc2:	ddf9      	ble.n	8002fb8 <dwt_enable_cycle_counter+0x30>
    uint32_t end = DWT->CYCCNT;
 8002fc4:	4b08      	ldr	r3, [pc, #32]	@ (8002fe8 <dwt_enable_cycle_counter+0x60>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	60bb      	str	r3, [r7, #8]
    
    return (end > start);
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	bf8c      	ite	hi
 8002fd2:	2301      	movhi	r3, #1
 8002fd4:	2300      	movls	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000edf0 	.word	0xe000edf0
 8002fe8:	e0001000 	.word	0xe0001000

08002fec <e22_init>:
  * @param  lora_conf_struct: pointer to the lora configuration struct.
  * @param  huart: pointer to the uart handler typedef.
  * @retval None
  */
void e22_init(e22_conf_struct_t *lora_conf_struct, UART_HandleTypeDef* huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
	data_packet[0] = 0xC0;	//Set register command.
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <e22_init+0x134>)
 8002ff8:	22c0      	movs	r2, #192	@ 0xc0
 8002ffa:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x03;	//Starting from byte 0x03
 8002ffc:	4b48      	ldr	r3, [pc, #288]	@ (8003120 <e22_init+0x134>)
 8002ffe:	2203      	movs	r2, #3
 8003000:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x04;	//6 bytes will be configured.
 8003002:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <e22_init+0x134>)
 8003004:	2204      	movs	r2, #4
 8003006:	709a      	strb	r2, [r3, #2]
	data_packet[3] = lora_conf_struct->air_rate | (lora_conf_struct->parity_bit << 3) | (lora_conf_struct->baud_rate << 5);																									//Wireless air data rate（bps）, Serial parity bit, UART Serial port rate（bps).
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7c5b      	ldrb	r3, [r3, #17]
 800300c:	b25a      	sxtb	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	7c1b      	ldrb	r3, [r3, #16]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	b25b      	sxtb	r3, r3
 8003016:	4313      	orrs	r3, r2
 8003018:	b25a      	sxtb	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7bdb      	ldrb	r3, [r3, #15]
 800301e:	015b      	lsls	r3, r3, #5
 8003020:	b25b      	sxtb	r3, r3
 8003022:	4313      	orrs	r3, r2
 8003024:	b25b      	sxtb	r3, r3
 8003026:	b2da      	uxtb	r2, r3
 8003028:	4b3d      	ldr	r3, [pc, #244]	@ (8003120 <e22_init+0x134>)
 800302a:	70da      	strb	r2, [r3, #3]
	data_packet[4] = lora_conf_struct->power | (lora_conf_struct->rssi_noise << 5) | (lora_conf_struct->packet_size << 6);																									//Transmitting power, RSSI anbient noise enable, Sub packet settings.
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	7d1b      	ldrb	r3, [r3, #20]
 8003030:	b25a      	sxtb	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	7cdb      	ldrb	r3, [r3, #19]
 8003036:	015b      	lsls	r3, r3, #5
 8003038:	b25b      	sxtb	r3, r3
 800303a:	4313      	orrs	r3, r2
 800303c:	b25a      	sxtb	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	7c9b      	ldrb	r3, [r3, #18]
 8003042:	019b      	lsls	r3, r3, #6
 8003044:	b25b      	sxtb	r3, r3
 8003046:	4313      	orrs	r3, r2
 8003048:	b25b      	sxtb	r3, r3
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <e22_init+0x134>)
 800304e:	711a      	strb	r2, [r3, #4]
	data_packet[5] = lora_conf_struct->channel;																																											//channel 0-83 (410.125 + CH *1M)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7d5a      	ldrb	r2, [r3, #21]
 8003054:	4b32      	ldr	r3, [pc, #200]	@ (8003120 <e22_init+0x134>)
 8003056:	715a      	strb	r2, [r3, #5]
	data_packet[6] = lora_conf_struct->wor_cycle | (lora_conf_struct->wor << 3) | (lora_conf_struct->lbt << 4) | (lora_conf_struct->repeater_func << 5) | (lora_conf_struct->mode << 6) | (lora_conf_struct->rssi_enable << 7);	//WOR cycle time, WOR transceiver control, LBT enable, Repeater function, Transmission mode, Enable RSSI.
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	7edb      	ldrb	r3, [r3, #27]
 800305c:	b25a      	sxtb	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7e9b      	ldrb	r3, [r3, #26]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	b25b      	sxtb	r3, r3
 8003066:	4313      	orrs	r3, r2
 8003068:	b25a      	sxtb	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	7e5b      	ldrb	r3, [r3, #25]
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	b25b      	sxtb	r3, r3
 8003072:	4313      	orrs	r3, r2
 8003074:	b25a      	sxtb	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	7e1b      	ldrb	r3, [r3, #24]
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	b25b      	sxtb	r3, r3
 800307e:	4313      	orrs	r3, r2
 8003080:	b25a      	sxtb	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	7ddb      	ldrb	r3, [r3, #23]
 8003086:	019b      	lsls	r3, r3, #6
 8003088:	b25b      	sxtb	r3, r3
 800308a:	4313      	orrs	r3, r2
 800308c:	b25a      	sxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7d9b      	ldrb	r3, [r3, #22]
 8003092:	01db      	lsls	r3, r3, #7
 8003094:	b25b      	sxtb	r3, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	b25b      	sxtb	r3, r3
 800309a:	b2da      	uxtb	r2, r3
 800309c:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <e22_init+0x134>)
 800309e:	719a      	strb	r2, [r3, #6]
	data_packet[7] = (uint8_t)(lora_conf_struct->key >> 8);																																								//high byte of key
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8b9b      	ldrh	r3, [r3, #28]
 80030a4:	0a1b      	lsrs	r3, r3, #8
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <e22_init+0x134>)
 80030ac:	71da      	strb	r2, [r3, #7]
	data_packet[8] = (uint8_t)(lora_conf_struct->key);																																									//low byte of key
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	8b9b      	ldrh	r3, [r3, #28]
 80030b2:	b2da      	uxtb	r2, r3
 80030b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <e22_init+0x134>)
 80030b6:	721a      	strb	r2, [r3, #8]


	//UART transmits the configuration datas.
	uint8_t response[7] = {0};
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	f107 0310 	add.w	r3, r7, #16
 80030c0:	2100      	movs	r1, #0
 80030c2:	460a      	mov	r2, r1
 80030c4:	801a      	strh	r2, [r3, #0]
 80030c6:	460a      	mov	r2, r1
 80030c8:	709a      	strb	r2, [r3, #2]
	for(int i = 0; i < 10; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	e01d      	b.n	800310c <e22_init+0x120>
	{
		HAL_UART_Transmit(huart, data_packet, 7, 50);
 80030d0:	2332      	movs	r3, #50	@ 0x32
 80030d2:	2207      	movs	r2, #7
 80030d4:	4912      	ldr	r1, [pc, #72]	@ (8003120 <e22_init+0x134>)
 80030d6:	6838      	ldr	r0, [r7, #0]
 80030d8:	f00a fd28 	bl	800db2c <HAL_UART_Transmit>
		HAL_UART_Receive(huart, response, 7, 50);
 80030dc:	f107 010c 	add.w	r1, r7, #12
 80030e0:	2332      	movs	r3, #50	@ 0x32
 80030e2:	2207      	movs	r2, #7
 80030e4:	6838      	ldr	r0, [r7, #0]
 80030e6:	f00a fdac 	bl	800dc42 <HAL_UART_Receive>
		if(memcmp(&response[1], &data_packet[1], 6) == 0)
 80030ea:	f107 030c 	add.w	r3, r7, #12
 80030ee:	3301      	adds	r3, #1
 80030f0:	2206      	movs	r2, #6
 80030f2:	490c      	ldr	r1, [pc, #48]	@ (8003124 <e22_init+0x138>)
 80030f4:	4618      	mov	r0, r3
 80030f6:	f00d f8bc 	bl	8010272 <memcmp>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d009      	beq.n	8003114 <e22_init+0x128>
			break;
		HAL_Delay(10);
 8003100:	200a      	movs	r0, #10
 8003102:	f004 fec5 	bl	8007e90 <HAL_Delay>
	for(int i = 0; i < 10; i++)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	3301      	adds	r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b09      	cmp	r3, #9
 8003110:	ddde      	ble.n	80030d0 <e22_init+0xe4>
	  }
	}
	*/


}
 8003112:	e000      	b.n	8003116 <e22_init+0x12a>
			break;
 8003114:	bf00      	nop
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20000478 	.word	0x20000478
 8003124:	20000479 	.word	0x20000479

08003128 <e22_config_mode>:
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_SET);
}


void e22_config_mode(e22_conf_struct_t *lora_conf_struct)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	//For config mode M0 -> 0    M1 -> 1
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_RESET);
 8003130:	2200      	movs	r2, #0
 8003132:	2104      	movs	r1, #4
 8003134:	4805      	ldr	r0, [pc, #20]	@ (800314c <e22_config_mode+0x24>)
 8003136:	f006 fb25 	bl	8009784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_SET);
 800313a:	2201      	movs	r2, #1
 800313c:	2108      	movs	r1, #8
 800313e:	4803      	ldr	r0, [pc, #12]	@ (800314c <e22_config_mode+0x24>)
 8003140:	f006 fb20 	bl	8009784 <HAL_GPIO_WritePin>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40020800 	.word	0x40020800

08003150 <e22_transmit_mode>:

void e22_transmit_mode(e22_conf_struct_t *lora_conf_struct)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
	//For transmission mode M0 -> 0    M1 -> 0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_RESET);
 8003158:	2200      	movs	r2, #0
 800315a:	2104      	movs	r1, #4
 800315c:	4805      	ldr	r0, [pc, #20]	@ (8003174 <e22_transmit_mode+0x24>)
 800315e:	f006 fb11 	bl	8009784 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_RESET);
 8003162:	2200      	movs	r2, #0
 8003164:	2108      	movs	r1, #8
 8003166:	4803      	ldr	r0, [pc, #12]	@ (8003174 <e22_transmit_mode+0x24>)
 8003168:	f006 fb0c 	bl	8009784 <HAL_GPIO_WritePin>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40020800 	.word	0x40020800

08003178 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8003184:	68b8      	ldr	r0, [r7, #8]
 8003186:	f000 f977 	bl	8003478 <calculate_total_acceleration>
 800318a:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 800318e:	4ba2      	ldr	r3, [pc, #648]	@ (8003418 <flight_algorithm_update+0x2a0>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b04      	cmp	r3, #4
 8003194:	f200 8165 	bhi.w	8003462 <flight_algorithm_update+0x2ea>
 8003198:	a201      	add	r2, pc, #4	@ (adr r2, 80031a0 <flight_algorithm_update+0x28>)
 800319a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319e:	bf00      	nop
 80031a0:	080031b5 	.word	0x080031b5
 80031a4:	08003237 	.word	0x08003237
 80031a8:	080032b7 	.word	0x080032b7
 80031ac:	08003463 	.word	0x08003463
 80031b0:	08003463 	.word	0x08003463
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 80031b4:	4b99      	ldr	r3, [pc, #612]	@ (800341c <flight_algorithm_update+0x2a4>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	ed97 7a05 	vldr	s14, [r7, #20]
 80031be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c6:	dd15      	ble.n	80031f4 <flight_algorithm_update+0x7c>
                current_phase = PHASE_BOOST;
 80031c8:	4b93      	ldr	r3, [pc, #588]	@ (8003418 <flight_algorithm_update+0x2a0>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 80031ce:	4b94      	ldr	r3, [pc, #592]	@ (8003420 <flight_algorithm_update+0x2a8>)
 80031d0:	2201      	movs	r2, #1
 80031d2:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 80031d4:	f004 fe50 	bl	8007e78 <HAL_GetTick>
 80031d8:	4603      	mov	r3, r0
 80031da:	4a92      	ldr	r2, [pc, #584]	@ (8003424 <flight_algorithm_update+0x2ac>)
 80031dc:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 80031de:	4b92      	ldr	r3, [pc, #584]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	4b8f      	ldr	r3, [pc, #572]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80031ea:	801a      	strh	r2, [r3, #0]
                durum_verisi = 2;
 80031ec:	4b8f      	ldr	r3, [pc, #572]	@ (800342c <flight_algorithm_update+0x2b4>)
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]
				is_rising = 1;
				flight_start_time = HAL_GetTick();
				status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
				durum_verisi = 2;
            }
            break;
 80031f2:	e136      	b.n	8003462 <flight_algorithm_update+0x2ea>
            else if(sensor_fusion->velocity > RISING_VELOCITY_TRESHOLD){
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031fa:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80031fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	dc00      	bgt.n	800320a <flight_algorithm_update+0x92>
            break;
 8003208:	e12b      	b.n	8003462 <flight_algorithm_update+0x2ea>
            	current_phase = PHASE_BOOST;
 800320a:	4b83      	ldr	r3, [pc, #524]	@ (8003418 <flight_algorithm_update+0x2a0>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
				is_rising = 1;
 8003210:	4b83      	ldr	r3, [pc, #524]	@ (8003420 <flight_algorithm_update+0x2a8>)
 8003212:	2201      	movs	r2, #1
 8003214:	701a      	strb	r2, [r3, #0]
				flight_start_time = HAL_GetTick();
 8003216:	f004 fe2f 	bl	8007e78 <HAL_GetTick>
 800321a:	4603      	mov	r3, r0
 800321c:	4a81      	ldr	r2, [pc, #516]	@ (8003424 <flight_algorithm_update+0x2ac>)
 800321e:	6013      	str	r3, [r2, #0]
				status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8003220:	4b81      	ldr	r3, [pc, #516]	@ (8003428 <flight_algorithm_update+0x2b0>)
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	4b7f      	ldr	r3, [pc, #508]	@ (8003428 <flight_algorithm_update+0x2b0>)
 800322c:	801a      	strh	r2, [r3, #0]
				durum_verisi = 2;
 800322e:	4b7f      	ldr	r3, [pc, #508]	@ (800342c <flight_algorithm_update+0x2b4>)
 8003230:	2202      	movs	r2, #2
 8003232:	701a      	strb	r2, [r3, #0]
            break;
 8003234:	e115      	b.n	8003462 <flight_algorithm_update+0x2ea>

        case PHASE_BOOST:
            // After boost phase (typically 7-9 seconds)
            if (HAL_GetTick() - flight_start_time > 8000) {
 8003236:	f004 fe1f 	bl	8007e78 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	4b79      	ldr	r3, [pc, #484]	@ (8003424 <flight_algorithm_update+0x2ac>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003246:	d90f      	bls.n	8003268 <flight_algorithm_update+0xf0>
                current_phase = PHASE_COAST;
 8003248:	4b73      	ldr	r3, [pc, #460]	@ (8003418 <flight_algorithm_update+0x2a0>)
 800324a:	2202      	movs	r2, #2
 800324c:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 800324e:	4b78      	ldr	r3, [pc, #480]	@ (8003430 <flight_algorithm_update+0x2b8>)
 8003250:	2201      	movs	r2, #1
 8003252:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 8003254:	4b74      	ldr	r3, [pc, #464]	@ (8003428 <flight_algorithm_update+0x2b0>)
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	f043 0302 	orr.w	r3, r3, #2
 800325c:	b29a      	uxth	r2, r3
 800325e:	4b72      	ldr	r3, [pc, #456]	@ (8003428 <flight_algorithm_update+0x2b0>)
 8003260:	801a      	strh	r2, [r3, #0]
                durum_verisi = 3;
 8003262:	4b72      	ldr	r3, [pc, #456]	@ (800342c <flight_algorithm_update+0x2b4>)
 8003264:	2203      	movs	r2, #3
 8003266:	701a      	strb	r2, [r3, #0]
            }
            if(bmi->datas.acc_x < 0.0 && burnout_counter < 10){
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800326e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	d508      	bpl.n	800328a <flight_algorithm_update+0x112>
 8003278:	4b6e      	ldr	r3, [pc, #440]	@ (8003434 <flight_algorithm_update+0x2bc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b09      	cmp	r3, #9
 800327e:	dc04      	bgt.n	800328a <flight_algorithm_update+0x112>
            	burnout_counter++;
 8003280:	4b6c      	ldr	r3, [pc, #432]	@ (8003434 <flight_algorithm_update+0x2bc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	4a6b      	ldr	r2, [pc, #428]	@ (8003434 <flight_algorithm_update+0x2bc>)
 8003288:	6013      	str	r3, [r2, #0]
            }
            if(burnout_counter == 10){
 800328a:	4b6a      	ldr	r3, [pc, #424]	@ (8003434 <flight_algorithm_update+0x2bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b0a      	cmp	r3, #10
 8003290:	f040 80c0 	bne.w	8003414 <flight_algorithm_update+0x29c>
                current_phase = PHASE_COAST;
 8003294:	4b60      	ldr	r3, [pc, #384]	@ (8003418 <flight_algorithm_update+0x2a0>)
 8003296:	2202      	movs	r2, #2
 8003298:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 800329a:	4b65      	ldr	r3, [pc, #404]	@ (8003430 <flight_algorithm_update+0x2b8>)
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 80032a0:	4b61      	ldr	r3, [pc, #388]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80032a2:	881b      	ldrh	r3, [r3, #0]
 80032a4:	f043 0302 	orr.w	r3, r3, #2
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80032ac:	801a      	strh	r2, [r3, #0]
                durum_verisi = 3;
 80032ae:	4b5f      	ldr	r3, [pc, #380]	@ (800342c <flight_algorithm_update+0x2b4>)
 80032b0:	2203      	movs	r2, #3
 80032b2:	701a      	strb	r2, [r3, #0]
            }
            break;
 80032b4:	e0ae      	b.n	8003414 <flight_algorithm_update+0x29c>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude && !is_armed) {
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	ed93 7a08 	vldr	s14, [r3, #32]
 80032bc:	4b5e      	ldr	r3, [pc, #376]	@ (8003438 <flight_algorithm_update+0x2c0>)
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ca:	dd10      	ble.n	80032ee <flight_algorithm_update+0x176>
 80032cc:	4b5b      	ldr	r3, [pc, #364]	@ (800343c <flight_algorithm_update+0x2c4>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10c      	bne.n	80032ee <flight_algorithm_update+0x176>
                is_armed = 1;
 80032d4:	4b59      	ldr	r3, [pc, #356]	@ (800343c <flight_algorithm_update+0x2c4>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 80032da:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	f043 0304 	orr.w	r3, r3, #4
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b50      	ldr	r3, [pc, #320]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80032e6:	801a      	strh	r2, [r3, #0]
                durum_verisi = 4;
 80032e8:	4b50      	ldr	r3, [pc, #320]	@ (800342c <flight_algorithm_update+0x2b4>)
 80032ea:	2204      	movs	r2, #4
 80032ec:	701a      	strb	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.theta) > max_angle_threshold) && deployed_angle) {
 80032ee:	4b53      	ldr	r3, [pc, #332]	@ (800343c <flight_algorithm_update+0x2c4>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d020      	beq.n	8003338 <flight_algorithm_update+0x1c0>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80032fc:	eeb0 7ae7 	vabs.f32	s14, s15
 8003300:	4b4f      	ldr	r3, [pc, #316]	@ (8003440 <flight_algorithm_update+0x2c8>)
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	dd13      	ble.n	8003338 <flight_algorithm_update+0x1c0>
 8003310:	4b4c      	ldr	r3, [pc, #304]	@ (8003444 <flight_algorithm_update+0x2cc>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00f      	beq.n	8003338 <flight_algorithm_update+0x1c0>
                drogue_deployed = 1;
 8003318:	4b4b      	ldr	r3, [pc, #300]	@ (8003448 <flight_algorithm_update+0x2d0>)
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 800331e:	4b49      	ldr	r3, [pc, #292]	@ (8003444 <flight_algorithm_update+0x2cc>)
 8003320:	2200      	movs	r2, #0
 8003322:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 8003324:	4b40      	ldr	r3, [pc, #256]	@ (8003428 <flight_algorithm_update+0x2b0>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	f043 0308 	orr.w	r3, r3, #8
 800332c:	b29a      	uxth	r2, r3
 800332e:	4b3e      	ldr	r3, [pc, #248]	@ (8003428 <flight_algorithm_update+0x2b0>)
 8003330:	801a      	strh	r2, [r3, #0]
                durum_verisi = 5;
 8003332:	4b3e      	ldr	r3, [pc, #248]	@ (800342c <flight_algorithm_update+0x2b4>)
 8003334:	2205      	movs	r2, #5
 8003336:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8003338:	4b40      	ldr	r3, [pc, #256]	@ (800343c <flight_algorithm_update+0x2c4>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d037      	beq.n	80033b0 <flight_algorithm_update+0x238>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	edd3 7a01 	vldr	s15, [r3, #4]
 8003346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d52f      	bpl.n	80033b0 <flight_algorithm_update+0x238>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	ed93 7a01 	vldr	s14, [r3, #4]
 8003356:	4b3d      	ldr	r3, [pc, #244]	@ (800344c <flight_algorithm_update+0x2d4>)
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	d524      	bpl.n	80033b0 <flight_algorithm_update+0x238>
 8003366:	4b3a      	ldr	r3, [pc, #232]	@ (8003450 <flight_algorithm_update+0x2d8>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d020      	beq.n	80033b0 <flight_algorithm_update+0x238>
                apogee_counter++;
 800336e:	4b39      	ldr	r3, [pc, #228]	@ (8003454 <flight_algorithm_update+0x2dc>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	4a37      	ldr	r2, [pc, #220]	@ (8003454 <flight_algorithm_update+0x2dc>)
 8003376:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 8003378:	4b36      	ldr	r3, [pc, #216]	@ (8003454 <flight_algorithm_update+0x2dc>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b08      	cmp	r3, #8
 800337e:	dd1a      	ble.n	80033b6 <flight_algorithm_update+0x23e>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 8003380:	4b29      	ldr	r3, [pc, #164]	@ (8003428 <flight_algorithm_update+0x2b0>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	f043 0310 	orr.w	r3, r3, #16
 8003388:	b29a      	uxth	r2, r3
 800338a:	4b27      	ldr	r3, [pc, #156]	@ (8003428 <flight_algorithm_update+0x2b0>)
 800338c:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 800338e:	4b26      	ldr	r3, [pc, #152]	@ (8003428 <flight_algorithm_update+0x2b0>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	f043 0320 	orr.w	r3, r3, #32
 8003396:	b29a      	uxth	r2, r3
 8003398:	4b23      	ldr	r3, [pc, #140]	@ (8003428 <flight_algorithm_update+0x2b0>)
 800339a:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 800339c:	4b2a      	ldr	r3, [pc, #168]	@ (8003448 <flight_algorithm_update+0x2d0>)
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 80033a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <flight_algorithm_update+0x2d8>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
                    durum_verisi = 6;
 80033a8:	4b20      	ldr	r3, [pc, #128]	@ (800342c <flight_algorithm_update+0x2b4>)
 80033aa:	2206      	movs	r2, #6
 80033ac:	701a      	strb	r2, [r3, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 80033ae:	e002      	b.n	80033b6 <flight_algorithm_update+0x23e>
                }
            } else {
                apogee_counter = 0;
 80033b0:	4b28      	ldr	r3, [pc, #160]	@ (8003454 <flight_algorithm_update+0x2dc>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a24      	ldr	r2, [pc, #144]	@ (800344c <flight_algorithm_update+0x2d4>)
 80033bc:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 80033be:	4b22      	ldr	r3, [pc, #136]	@ (8003448 <flight_algorithm_update+0x2d0>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d04c      	beq.n	8003460 <flight_algorithm_update+0x2e8>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	ed93 7a08 	vldr	s14, [r3, #32]
 80033cc:	4b22      	ldr	r3, [pc, #136]	@ (8003458 <flight_algorithm_update+0x2e0>)
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033da:	d400      	bmi.n	80033de <flight_algorithm_update+0x266>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                durum_verisi = 7;
            }
            break;
 80033dc:	e040      	b.n	8003460 <flight_algorithm_update+0x2e8>
                current_phase = PHASE_MAIN_DESCENT;
 80033de:	4b0e      	ldr	r3, [pc, #56]	@ (8003418 <flight_algorithm_update+0x2a0>)
 80033e0:	2203      	movs	r2, #3
 80033e2:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 80033e4:	4b10      	ldr	r3, [pc, #64]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80033f0:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <flight_algorithm_update+0x2b0>)
 80033fe:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8003400:	4b16      	ldr	r3, [pc, #88]	@ (800345c <flight_algorithm_update+0x2e4>)
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 8003406:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <flight_algorithm_update+0x2d0>)
 8003408:	2200      	movs	r2, #0
 800340a:	701a      	strb	r2, [r3, #0]
                durum_verisi = 7;
 800340c:	4b07      	ldr	r3, [pc, #28]	@ (800342c <flight_algorithm_update+0x2b4>)
 800340e:	2207      	movs	r2, #7
 8003410:	701a      	strb	r2, [r3, #0]
            break;
 8003412:	e025      	b.n	8003460 <flight_algorithm_update+0x2e8>
            break;
 8003414:	bf00      	nop
 8003416:	e024      	b.n	8003462 <flight_algorithm_update+0x2ea>
 8003418:	20000481 	.word	0x20000481
 800341c:	2000002c 	.word	0x2000002c
 8003420:	20000482 	.word	0x20000482
 8003424:	20000490 	.word	0x20000490
 8003428:	20000498 	.word	0x20000498
 800342c:	20000044 	.word	0x20000044
 8003430:	2000003c 	.word	0x2000003c
 8003434:	20000040 	.word	0x20000040
 8003438:	20000030 	.word	0x20000030
 800343c:	20000483 	.word	0x20000483
 8003440:	20000038 	.word	0x20000038
 8003444:	2000003d 	.word	0x2000003d
 8003448:	20000484 	.word	0x20000484
 800344c:	2000048c 	.word	0x2000048c
 8003450:	2000003e 	.word	0x2000003e
 8003454:	20000488 	.word	0x20000488
 8003458:	20000034 	.word	0x20000034
 800345c:	20000485 	.word	0x20000485
            break;
 8003460:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    prev_altitude = bme->altitude;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a03      	ldr	r2, [pc, #12]	@ (8003474 <flight_algorithm_update+0x2fc>)
 8003468:	6013      	str	r3, [r2, #0]
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000494 	.word	0x20000494

08003478 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800348c:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800349c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80034b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80034b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b8:	eeb0 0a67 	vmov.f32	s0, s15
 80034bc:	f010 ff30 	bl	8014320 <sqrtf>
 80034c0:	eef0 7a40 	vmov.f32	s15, s0
}
 80034c4:	eeb0 0a67 	vmov.f32	s0, s15
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <flight_algorithm_get_start_time>:
    main_chute_altitude = main_chute_altitude_param;
    max_angle_threshold = max_angle_threshold_param;
}

uint32_t flight_algorithm_get_start_time(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
    return flight_start_time;
 80034d4:	4b03      	ldr	r3, [pc, #12]	@ (80034e4 <flight_algorithm_get_start_time+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000490 	.word	0x20000490

080034e8 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8003508:	2300      	movs	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	e01f      	b.n	800354e <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	e016      	b.n	8003542 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	429a      	cmp	r2, r3
 800351a:	d101      	bne.n	8003520 <KalmanFilter_Init+0x38>
 800351c:	491b      	ldr	r1, [pc, #108]	@ (800358c <KalmanFilter_Init+0xa4>)
 800351e:	e001      	b.n	8003524 <KalmanFilter_Init+0x3c>
 8003520:	f04f 0100 	mov.w	r1, #0
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4613      	mov	r3, r2
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	4413      	add	r3, r2
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	4413      	add	r3, r2
 8003532:	3302      	adds	r3, #2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4403      	add	r3, r0
 8003538:	3304      	adds	r3, #4
 800353a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3301      	adds	r3, #1
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	2b02      	cmp	r3, #2
 8003546:	dde5      	ble.n	8003514 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3301      	adds	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2b02      	cmp	r3, #2
 8003552:	dddc      	ble.n	800350e <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a0e      	ldr	r2, [pc, #56]	@ (8003590 <KalmanFilter_Init+0xa8>)
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <KalmanFilter_Init+0xac>)
 800355e:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a0d      	ldr	r2, [pc, #52]	@ (8003598 <KalmanFilter_Init+0xb0>)
 8003564:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	42c80000 	.word	0x42c80000
 8003590:	3c23d70a 	.word	0x3c23d70a
 8003594:	3ba3d70a 	.word	0x3ba3d70a
 8003598:	40a00000 	.word	0x40a00000

0800359c <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80035a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80035ac:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80035b6:	eef0 7ae7 	vabs.f32	s15, s15
 80035ba:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003620 <KalmanFilter_Update+0x84>
 80035be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	dd0f      	ble.n	80035e8 <KalmanFilter_Update+0x4c>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80035ce:	eef0 7ae7 	vabs.f32	s15, s15
 80035d2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003624 <KalmanFilter_Update+0x88>
 80035d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	d503      	bpl.n	80035e8 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2201      	movs	r2, #1
 80035e4:	649a      	str	r2, [r3, #72]	@ 0x48
 80035e6:	e002      	b.n	80035ee <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 80035ee:	ed97 0a00 	vldr	s0, [r7]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f818 	bl	8003628 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 80035f8:	edd7 0a01 	vldr	s1, [r7, #4]
 80035fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f000 fa1d 	bl	8003a40 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f001 f96a 	bl	80048e0 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	ee07 3a90 	vmov	s15, r3
}
 8003614:	eeb0 0a67 	vmov.f32	s0, s15
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	43960000 	.word	0x43960000
 8003624:	43af0000 	.word	0x43af0000

08003628 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b0b6      	sub	sp, #216	@ 0xd8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 8003634:	edd7 7a00 	vldr	s15, [r7]
 8003638:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800363c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 8003640:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003644:	edd7 7a00 	vldr	s15, [r7]
 8003648:	ee67 7a27 	vmul.f32	s15, s14, s15
 800364c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 8003650:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 8003654:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003658:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	ed93 7a00 	vldr	s14, [r3]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	edd3 6a01 	vldr	s13, [r3, #4]
 8003668:	edd7 7a00 	vldr	s15, [r7]
 800366c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003670:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	edd3 6a02 	vldr	s13, [r3, #8]
 800367a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800367e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003682:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003686:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800368a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368e:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	ed93 7a01 	vldr	s14, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	edd3 6a02 	vldr	s13, [r3, #8]
 800369e:	edd7 7a00 	vldr	s15, [r7]
 80036a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036aa:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80036bc:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80036c4:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80036cc:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80036d6:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80036da:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80036de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036e2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80036e6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80036ea:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 80036ee:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 80036f2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80036f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036fa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80036fe:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003702:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003706:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800370a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800370e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003712:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003716:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800371a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 800371e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003722:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003726:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800372a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800372e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003732:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003736:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800373a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800373e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003742:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003746:	ed97 7a00 	vldr	s14, [r7]
 800374a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003752:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 8003756:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800375a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800375e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003762:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800376a:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 800376e:	ed97 7a00 	vldr	s14, [r7]
 8003772:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800377a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 800377e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003782:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 8003786:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800378a:	657b      	str	r3, [r7, #84]	@ 0x54
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 8003790:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003794:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003798:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 800379c:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80037a6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80037bc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037c0:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 80037c2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80037c6:	2224      	movs	r2, #36	@ 0x24
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f00c fd61 	bl	8010292 <memset>
    float FPFT[3][3] = {0};
 80037d0:	f107 030c 	add.w	r3, r7, #12
 80037d4:	2224      	movs	r2, #36	@ 0x24
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f00c fd5a 	bl	8010292 <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80037e4:	e06a      	b.n	80038bc <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037ec:	e05d      	b.n	80038aa <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 80037ee:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	33d8      	adds	r3, #216	@ 0xd8
 8003802:	443b      	add	r3, r7
 8003804:	3ba8      	subs	r3, #168	@ 0xa8
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800380c:	2300      	movs	r3, #0
 800380e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003812:	e041      	b.n	8003898 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 8003814:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003818:	4613      	mov	r3, r2
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4413      	add	r3, r2
 800381e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	33d8      	adds	r3, #216	@ 0xd8
 8003828:	443b      	add	r3, r7
 800382a:	3ba8      	subs	r3, #168	@ 0xa8
 800382c:	ed93 7a00 	vldr	s14, [r3]
 8003830:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003834:	4613      	mov	r3, r2
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	4413      	add	r3, r2
 800383a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	33d8      	adds	r3, #216	@ 0xd8
 8003844:	443b      	add	r3, r7
 8003846:	3b84      	subs	r3, #132	@ 0x84
 8003848:	edd3 6a00 	vldr	s13, [r3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003852:	4613      	mov	r3, r2
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800385c:	4413      	add	r3, r2
 800385e:	3302      	adds	r3, #2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3304      	adds	r3, #4
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800386e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003872:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003876:	4613      	mov	r3, r2
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	4413      	add	r3, r2
 800387c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003880:	4413      	add	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	33d8      	adds	r3, #216	@ 0xd8
 8003886:	443b      	add	r3, r7
 8003888:	3ba8      	subs	r3, #168	@ 0xa8
 800388a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 800388e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003892:	3301      	adds	r3, #1
 8003894:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003898:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800389c:	2b02      	cmp	r3, #2
 800389e:	ddb9      	ble.n	8003814 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 80038a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80038a4:	3301      	adds	r3, #1
 80038a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	dd9d      	ble.n	80037ee <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 80038b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b6:	3301      	adds	r3, #1
 80038b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80038bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	dd90      	ble.n	80037e6 <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 80038c4:	2300      	movs	r3, #0
 80038c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ca:	e069      	b.n	80039a0 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 80038cc:	2300      	movs	r3, #0
 80038ce:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80038d2:	e05c      	b.n	800398e <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 80038d4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038d8:	4613      	mov	r3, r2
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	4413      	add	r3, r2
 80038de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	33d8      	adds	r3, #216	@ 0xd8
 80038e8:	443b      	add	r3, r7
 80038ea:	3bcc      	subs	r3, #204	@ 0xcc
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038f8:	e040      	b.n	800397c <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 80038fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80038fe:	4613      	mov	r3, r2
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4413      	add	r3, r2
 8003904:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	33d8      	adds	r3, #216	@ 0xd8
 800390e:	443b      	add	r3, r7
 8003910:	3bcc      	subs	r3, #204	@ 0xcc
 8003912:	ed93 7a00 	vldr	s14, [r3]
 8003916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800391a:	4613      	mov	r3, r2
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	4413      	add	r3, r2
 8003920:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	33d8      	adds	r3, #216	@ 0xd8
 800392a:	443b      	add	r3, r7
 800392c:	3ba8      	subs	r3, #168	@ 0xa8
 800392e:	edd3 6a00 	vldr	s13, [r3]
 8003932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003936:	4613      	mov	r3, r2
 8003938:	005b      	lsls	r3, r3, #1
 800393a:	4413      	add	r3, r2
 800393c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	33d8      	adds	r3, #216	@ 0xd8
 8003946:	443b      	add	r3, r7
 8003948:	3b84      	subs	r3, #132	@ 0x84
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	33d8      	adds	r3, #216	@ 0xd8
 800396a:	443b      	add	r3, r7
 800396c:	3bcc      	subs	r3, #204	@ 0xcc
 800396e:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8003972:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003976:	3301      	adds	r3, #1
 8003978:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800397c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003980:	2b02      	cmp	r3, #2
 8003982:	ddba      	ble.n	80038fa <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 8003984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003988:	3301      	adds	r3, #1
 800398a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800398e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003992:	2b02      	cmp	r3, #2
 8003994:	dd9e      	ble.n	80038d4 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 8003996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800399a:	3301      	adds	r3, #1
 800399c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80039a4:	2b02      	cmp	r3, #2
 80039a6:	dd91      	ble.n	80038cc <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80039ae:	e03e      	b.n	8003a2e <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 80039b0:	2300      	movs	r3, #0
 80039b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039b6:	e031      	b.n	8003a1c <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 80039b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80039bc:	4613      	mov	r3, r2
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	4413      	add	r3, r2
 80039c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	33d8      	adds	r3, #216	@ 0xd8
 80039cc:	443b      	add	r3, r7
 80039ce:	3bcc      	subs	r3, #204	@ 0xcc
 80039d0:	ed93 7a00 	vldr	s14, [r3]
 80039d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80039d8:	4613      	mov	r3, r2
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4413      	add	r3, r2
 80039de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	33d8      	adds	r3, #216	@ 0xd8
 80039e8:	443b      	add	r3, r7
 80039ea:	3b60      	subs	r3, #96	@ 0x60
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80039fa:	4613      	mov	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a04:	4413      	add	r3, r2
 8003a06:	3302      	adds	r3, #2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8003a12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a16:	3301      	adds	r3, #1
 8003a18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	ddc9      	ble.n	80039b8 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 8003a24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a28:	3301      	adds	r3, #1
 8003a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003a2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	ddbc      	ble.n	80039b0 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	37d8      	adds	r7, #216	@ 0xd8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 8003a40:	b5b0      	push	{r4, r5, r7, lr}
 8003a42:	b0f6      	sub	sp, #472	@ 0x1d8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a4a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a4e:	6018      	str	r0, [r3, #0]
 8003a50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a54:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003a58:	ed83 0a00 	vstr	s0, [r3]
 8003a5c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a60:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a64:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 8003a68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a6c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 826b 	beq.w	8003f50 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8003a8a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003a8e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 8003a92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a96:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003aa0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003aa4:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aae:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8003ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab6:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 8003aba:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8003abe:	2200      	movs	r2, #0
 8003ac0:	601a      	str	r2, [r3, #0]
 8003ac2:	605a      	str	r2, [r3, #4]
 8003ac4:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003ad4:	e044      	b.n	8003b60 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 8003ad6:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 8003ada:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ade:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003ae8:	3302      	adds	r3, #2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	3304      	adds	r3, #4
 8003af0:	edd3 7a00 	vldr	s15, [r3]
 8003af4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003af8:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 8003afc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b00:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b0a:	3305      	adds	r3, #5
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	3304      	adds	r3, #4
 8003b12:	edd3 7a00 	vldr	s15, [r3]
 8003b16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b1e:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 8003b22:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b26:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b30:	3308      	adds	r3, #8
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b44:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b4e:	443b      	add	r3, r7
 8003b50:	3bac      	subs	r3, #172	@ 0xac
 8003b52:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003b56:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003b60:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	ddb6      	ble.n	8003ad6 <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 8003b68:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 8003b6c:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003b70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b74:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 8003b78:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003b7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b84:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 8003b88:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b94:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b98:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba6:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 8003baa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003bae:	2200      	movs	r2, #0
 8003bb0:	601a      	str	r2, [r3, #0]
 8003bb2:	605a      	str	r2, [r3, #4]
 8003bb4:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 8003bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bba:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 8003bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bc2:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003bcc:	e04f      	b.n	8003c6e <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 8003bce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bd2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003bd6:	6819      	ldr	r1, [r3, #0]
 8003bd8:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	330c      	adds	r3, #12
 8003be8:	ed93 7a00 	vldr	s14, [r3]
 8003bec:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003bf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003bf4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bf8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3304      	adds	r3, #4
 8003c10:	edd3 6a00 	vldr	s13, [r3]
 8003c14:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c20:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c24:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c28:	6819      	ldr	r1, [r3, #0]
 8003c2a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3314      	adds	r3, #20
 8003c3a:	edd3 6a00 	vldr	s13, [r3]
 8003c3e:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c4a:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c5c:	443b      	add	r3, r7
 8003c5e:	3bb8      	subs	r3, #184	@ 0xb8
 8003c60:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003c64:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003c6e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	ddab      	ble.n	8003bce <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003c7c:	e029      	b.n	8003cd2 <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 8003c7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c82:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	ed93 7a00 	vldr	s14, [r3]
 8003c94:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003c9e:	443b      	add	r3, r7
 8003ca0:	3bb8      	subs	r3, #184	@ 0xb8
 8003ca2:	edd3 6a00 	vldr	s13, [r3]
 8003ca6:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cb6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003cc8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003ccc:	3301      	adds	r3, #1
 8003cce:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003cd2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	ddd1      	ble.n	8003c7e <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003cda:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cde:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	2324      	movs	r3, #36	@ 0x24
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	2100      	movs	r1, #0
 8003cea:	f00c fad2 	bl	8010292 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8003cee:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cf2:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	2324      	movs	r3, #36	@ 0x24
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	f00c fac8 	bl	8010292 <memset>

        for (int i = 0; i < 3; i++) {
 8003d02:	2300      	movs	r3, #0
 8003d04:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003d08:	e062      	b.n	8003dd0 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003d10:	e055      	b.n	8003dbe <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003d12:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d1c:	443b      	add	r3, r7
 8003d1e:	3bb8      	subs	r3, #184	@ 0xb8
 8003d20:	ed93 7a00 	vldr	s14, [r3]
 8003d24:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003d2e:	443b      	add	r3, r7
 8003d30:	3ba0      	subs	r3, #160	@ 0xa0
 8003d32:	edd3 7a00 	vldr	s15, [r3]
 8003d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d3e:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003d42:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003d46:	4613      	mov	r3, r2
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003d5a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003d5e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d102      	bne.n	8003d6c <KalmanFilter_MeasurementUpdate+0x32c>
 8003d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d6a:	e001      	b.n	8003d70 <KalmanFilter_MeasurementUpdate+0x330>
 8003d6c:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 800405c <KalmanFilter_MeasurementUpdate+0x61c>
 8003d70:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d74:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003d78:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003d86:	4413      	add	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	edd3 7a00 	vldr	s15, [r3]
 8003d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d94:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d98:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003d9c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003da0:	4613      	mov	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	4413      	add	r3, r2
 8003da6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003db4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003db8:	3301      	adds	r3, #1
 8003dba:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003dbe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	dda5      	ble.n	8003d12 <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003dc6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003dca:	3301      	adds	r3, #1
 8003dcc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003dd0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	dd98      	ble.n	8003d0a <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003dde:	e076      	b.n	8003ece <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003de0:	2300      	movs	r3, #0
 8003de2:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003de6:	e069      	b.n	8003ebc <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003de8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dec:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003df0:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003df4:	4613      	mov	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003e10:	e04b      	b.n	8003eaa <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003e12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e16:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003e1a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003e1e:	4613      	mov	r3, r2
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	4413      	add	r3, r2
 8003e24:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	ed93 7a00 	vldr	s14, [r3]
 8003e32:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e36:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003e3a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	edd3 6a00 	vldr	s13, [r3]
 8003e52:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e56:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003e5a:	6819      	ldr	r1, [r3, #0]
 8003e5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3302      	adds	r3, #2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3304      	adds	r3, #4
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e80:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e84:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003e88:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	4413      	add	r3, r2
 8003e92:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003ea0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003eaa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	ddaf      	ble.n	8003e12 <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003eb2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003ebc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	dd91      	ble.n	8003de8 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003ec4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003ec8:	3301      	adds	r3, #1
 8003eca:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003ece:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	dd84      	ble.n	8003de0 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003edc:	e032      	b.n	8003f44 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003ee4:	e025      	b.n	8003f32 <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003ee6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003eea:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003eee:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	6819      	ldr	r1, [r3, #0]
 8003f04:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f08:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4403      	add	r3, r0
 8003f24:	3304      	adds	r3, #4
 8003f26:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003f28:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003f32:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	ddd5      	ble.n	8003ee6 <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003f3a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003f3e:	3301      	adds	r3, #1
 8003f40:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003f44:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	ddc8      	ble.n	8003ede <KalmanFilter_MeasurementUpdate+0x49e>
 8003f4c:	f000 bcc2 	b.w	80048d4 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003f50:	4b43      	ldr	r3, [pc, #268]	@ (8004060 <KalmanFilter_MeasurementUpdate+0x620>)
 8003f52:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003f56:	461d      	mov	r5, r3
 8003f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f5c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003f60:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003f64:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f68:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f72:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f76:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003f80:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003f84:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f88:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	edd3 7a00 	vldr	s15, [r3]
 8003f92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f96:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003f9a:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003f9e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fa2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	edd3 7a02 	vldr	s15, [r3, #8]
 8003fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fb0:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003fb4:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]
 8003fc4:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003fc6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	6053      	str	r3, [r2, #4]
 8003fd6:	6093      	str	r3, [r2, #8]
 8003fd8:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003fda:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fde:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003fe6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ff4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]
 8003ffe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004002:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 800400c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004010:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8004018:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800401c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004020:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8004028:	e079      	b.n	800411e <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004030:	e06c      	b.n	800410c <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8004032:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8004036:	4613      	mov	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004048:	443b      	add	r3, r7
 800404a:	3bf8      	subs	r3, #248	@ 0xf8
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004058:	e04f      	b.n	80040fa <KalmanFilter_MeasurementUpdate+0x6ba>
 800405a:	bf00      	nop
 800405c:	00000000 	.word	0x00000000
 8004060:	08016388 	.word	0x08016388
 8004064:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8004068:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800406c:	4613      	mov	r3, r2
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	4413      	add	r3, r2
 8004072:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800407e:	443b      	add	r3, r7
 8004080:	3bf8      	subs	r3, #248	@ 0xf8
 8004082:	ed93 7a00 	vldr	s14, [r3]
 8004086:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 800408a:	4613      	mov	r3, r2
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	4413      	add	r3, r2
 8004090:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800409c:	443b      	add	r3, r7
 800409e:	3bd0      	subs	r3, #208	@ 0xd0
 80040a0:	edd3 6a00 	vldr	s13, [r3]
 80040a4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040a8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80040bc:	4413      	add	r3, r2
 80040be:	3302      	adds	r3, #2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	3304      	adds	r3, #4
 80040c6:	edd3 7a00 	vldr	s15, [r3]
 80040ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040d2:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 80040d6:	4613      	mov	r3, r2
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4413      	add	r3, r2
 80040dc:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 80040e0:	4413      	add	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80040e8:	443b      	add	r3, r7
 80040ea:	3bf8      	subs	r3, #248	@ 0xf8
 80040ec:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 80040f0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80040f4:	3301      	adds	r3, #1
 80040f6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80040fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80040fe:	2b02      	cmp	r3, #2
 8004100:	ddb2      	ble.n	8004068 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8004102:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004106:	3301      	adds	r3, #1
 8004108:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800410c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004110:	2b02      	cmp	r3, #2
 8004112:	dd8e      	ble.n	8004032 <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8004114:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004118:	3301      	adds	r3, #1
 800411a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800411e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004122:	2b01      	cmp	r3, #1
 8004124:	dd81      	ble.n	800402a <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8004126:	2300      	movs	r3, #0
 8004128:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800412c:	e098      	b.n	8004260 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 800412e:	2300      	movs	r3, #0
 8004130:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004134:	e08a      	b.n	800424c <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8004136:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800413a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800413e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004142:	0059      	lsls	r1, r3, #1
 8004144:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004148:	440b      	add	r3, r1
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4413      	add	r3, r2
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 800415a:	e042      	b.n	80041e2 <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 800415c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004160:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8004164:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004168:	0059      	lsls	r1, r3, #1
 800416a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800416e:	440b      	add	r3, r1
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	ed93 7a00 	vldr	s14, [r3]
 8004178:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800417c:	4613      	mov	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4413      	add	r3, r2
 8004182:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004186:	4413      	add	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800418e:	443b      	add	r3, r7
 8004190:	3bf8      	subs	r3, #248	@ 0xf8
 8004192:	edd3 6a00 	vldr	s13, [r3]
 8004196:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800419a:	4613      	mov	r3, r2
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4413      	add	r3, r2
 80041a0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80041ac:	443b      	add	r3, r7
 80041ae:	3bd0      	subs	r3, #208	@ 0xd0
 80041b0:	edd3 7a00 	vldr	s15, [r3]
 80041b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041c0:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80041c4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80041c8:	0059      	lsls	r1, r3, #1
 80041ca:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80041ce:	440b      	add	r3, r1
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 80041d8:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80041dc:	3301      	adds	r3, #1
 80041de:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80041e2:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	ddb8      	ble.n	800415c <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 80041ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041ee:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80041f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80041f6:	0059      	lsls	r1, r3, #1
 80041f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80041fc:	440b      	add	r3, r1
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	ed93 7a00 	vldr	s14, [r3]
 8004206:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800420a:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800420e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004212:	0059      	lsls	r1, r3, #1
 8004214:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004218:	440b      	add	r3, r1
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	edd3 7a00 	vldr	s15, [r3]
 8004222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004226:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800422a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800422e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004232:	0059      	lsls	r1, r3, #1
 8004234:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004238:	440b      	add	r3, r1
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8004242:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004246:	3301      	adds	r3, #1
 8004248:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800424c:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004250:	2b01      	cmp	r3, #1
 8004252:	f77f af70 	ble.w	8004136 <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 8004256:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800425a:	3301      	adds	r3, #1
 800425c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004260:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004264:	2b01      	cmp	r3, #1
 8004266:	f77f af62 	ble.w	800412e <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 800426a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800426e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004272:	ed93 7a00 	vldr	s14, [r3]
 8004276:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800427a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800427e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004282:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004286:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800428a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800428e:	edd3 6a01 	vldr	s13, [r3, #4]
 8004292:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800429a:	edd3 7a02 	vldr	s15, [r3, #8]
 800429e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042a6:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 80042aa:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 80042ae:	eef0 7ae7 	vabs.f32	s15, s15
 80042b2:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8004064 <KalmanFilter_MeasurementUpdate+0x624>
 80042b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	f100 8308 	bmi.w	80048d2 <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 80042c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042ca:	edd3 6a03 	vldr	s13, [r3, #12]
 80042ce:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 80042d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 80042d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80042de:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 80042e2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80042ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80042ee:	eef1 6a67 	vneg.f32	s13, s15
 80042f2:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 80042f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 80042fa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004302:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8004306:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800430a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800430e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004312:	eef1 6a67 	vneg.f32	s13, s15
 8004316:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800431a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800431e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004322:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004326:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 800432a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800432e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004332:	edd3 6a00 	vldr	s13, [r3]
 8004336:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800433a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800433e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004342:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004346:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 800434a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800434e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004352:	461a      	mov	r2, r3
 8004354:	2300      	movs	r3, #0
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	6053      	str	r3, [r2, #4]
 800435a:	6093      	str	r3, [r2, #8]
 800435c:	60d3      	str	r3, [r2, #12]
 800435e:	6113      	str	r3, [r2, #16]
 8004360:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 8004362:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004366:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800436a:	461a      	mov	r2, r3
 800436c:	2300      	movs	r3, #0
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	6053      	str	r3, [r2, #4]
 8004372:	6093      	str	r3, [r2, #8]
 8004374:	60d3      	str	r3, [r2, #12]
 8004376:	6113      	str	r3, [r2, #16]
 8004378:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 800437a:	2300      	movs	r3, #0
 800437c:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004380:	e06f      	b.n	8004462 <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 8004382:	2300      	movs	r3, #0
 8004384:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004388:	e062      	b.n	8004450 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 800438a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800438e:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004392:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004396:	0059      	lsls	r1, r3, #1
 8004398:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800439c:	440b      	add	r3, r1
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80043ae:	e046      	b.n	800443e <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 80043b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043b4:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80043b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80043bc:	0059      	lsls	r1, r3, #1
 80043be:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80043c2:	440b      	add	r3, r1
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	ed93 7a00 	vldr	s14, [r3]
 80043cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043d0:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 80043e4:	4413      	add	r3, r2
 80043e6:	3302      	adds	r3, #2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	3304      	adds	r3, #4
 80043ee:	edd3 6a00 	vldr	s13, [r3]
 80043f2:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 80043f6:	4613      	mov	r3, r2
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	4413      	add	r3, r2
 80043fc:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004400:	4413      	add	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004408:	443b      	add	r3, r7
 800440a:	3bd0      	subs	r3, #208	@ 0xd0
 800440c:	edd3 7a00 	vldr	s15, [r3]
 8004410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004418:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800441c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004420:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004424:	0059      	lsls	r1, r3, #1
 8004426:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800442a:	440b      	add	r3, r1
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	4413      	add	r3, r2
 8004430:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004434:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004438:	3301      	adds	r3, #1
 800443a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800443e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004442:	2b02      	cmp	r3, #2
 8004444:	ddb4      	ble.n	80043b0 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 8004446:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800444a:	3301      	adds	r3, #1
 800444c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004450:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004454:	2b01      	cmp	r3, #1
 8004456:	dd98      	ble.n	800438a <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 8004458:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800445c:	3301      	adds	r3, #1
 800445e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004462:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004466:	2b02      	cmp	r3, #2
 8004468:	dd8b      	ble.n	8004382 <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 800446a:	2300      	movs	r3, #0
 800446c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004470:	e069      	b.n	8004546 <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004478:	e05c      	b.n	8004534 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 800447a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800447e:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004482:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004486:	0059      	lsls	r1, r3, #1
 8004488:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800448c:	440b      	add	r3, r1
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 8004498:	2300      	movs	r3, #0
 800449a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800449e:	e040      	b.n	8004522 <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 80044a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044a4:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80044a8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80044ac:	0059      	lsls	r1, r3, #1
 80044ae:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80044b2:	440b      	add	r3, r1
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	ed93 7a00 	vldr	s14, [r3]
 80044bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044c0:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80044c4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80044c8:	0059      	lsls	r1, r3, #1
 80044ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044ce:	440b      	add	r3, r1
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	edd3 6a00 	vldr	s13, [r3]
 80044d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044dc:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 80044e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80044e4:	0059      	lsls	r1, r3, #1
 80044e6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80044ea:	440b      	add	r3, r1
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044fc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004500:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004504:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004508:	0059      	lsls	r1, r3, #1
 800450a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800450e:	440b      	add	r3, r1
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4413      	add	r3, r2
 8004514:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004518:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800451c:	3301      	adds	r3, #1
 800451e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004522:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004526:	2b01      	cmp	r3, #1
 8004528:	ddba      	ble.n	80044a0 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 800452a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800452e:	3301      	adds	r3, #1
 8004530:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004534:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004538:	2b01      	cmp	r3, #1
 800453a:	dd9e      	ble.n	800447a <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 800453c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004540:	3301      	adds	r3, #1
 8004542:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004546:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800454a:	2b02      	cmp	r3, #2
 800454c:	dd91      	ble.n	8004472 <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004554:	e042      	b.n	80045dc <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 8004556:	2300      	movs	r3, #0
 8004558:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800455c:	e035      	b.n	80045ca <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 800455e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004562:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	4413      	add	r3, r2
 8004570:	ed93 7a00 	vldr	s14, [r3]
 8004574:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004578:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800457c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004580:	0059      	lsls	r1, r3, #1
 8004582:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004586:	440b      	add	r3, r1
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	edd3 6a00 	vldr	s13, [r3]
 8004590:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004594:	009b      	lsls	r3, r3, #2
 8004596:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800459a:	443b      	add	r3, r7
 800459c:	3be0      	subs	r3, #224	@ 0xe0
 800459e:	edd3 7a00 	vldr	s15, [r3]
 80045a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045ae:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 80045c0:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80045c4:	3301      	adds	r3, #1
 80045c6:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80045ca:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	ddc5      	ble.n	800455e <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 80045d2:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80045d6:	3301      	adds	r3, #1
 80045d8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80045dc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	ddb8      	ble.n	8004556 <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 80045e4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045e8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80045ec:	4618      	mov	r0, r3
 80045ee:	2324      	movs	r3, #36	@ 0x24
 80045f0:	461a      	mov	r2, r3
 80045f2:	2100      	movs	r1, #0
 80045f4:	f00b fe4d 	bl	8010292 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 80045f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045fc:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004600:	4618      	mov	r0, r3
 8004602:	2324      	movs	r3, #36	@ 0x24
 8004604:	461a      	mov	r2, r3
 8004606:	2100      	movs	r1, #0
 8004608:	f00b fe43 	bl	8010292 <memset>

        for (int i = 0; i < 3; i++) {
 800460c:	2300      	movs	r3, #0
 800460e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004612:	e09e      	b.n	8004752 <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 8004614:	2300      	movs	r3, #0
 8004616:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800461a:	e090      	b.n	800473e <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 800461c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004620:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004624:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004628:	4613      	mov	r3, r2
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	4413      	add	r3, r2
 800462e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004632:	4413      	add	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	440b      	add	r3, r1
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004644:	e045      	b.n	80046d2 <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 8004646:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800464a:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 800464e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004652:	4613      	mov	r3, r2
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	4413      	add	r3, r2
 8004658:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	ed93 7a00 	vldr	s14, [r3]
 8004666:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800466a:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 800466e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004672:	0059      	lsls	r1, r3, #1
 8004674:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004678:	440b      	add	r3, r1
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	edd3 6a00 	vldr	s13, [r3]
 8004682:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004698:	443b      	add	r3, r7
 800469a:	3bd0      	subs	r3, #208	@ 0xd0
 800469c:	edd3 7a00 	vldr	s15, [r3]
 80046a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80046ac:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80046b0:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80046b4:	4613      	mov	r3, r2
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	4413      	add	r3, r2
 80046ba:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 80046c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80046cc:	3301      	adds	r3, #1
 80046ce:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80046d2:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	ddb5      	ble.n	8004646 <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 80046da:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80046de:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d102      	bne.n	80046ec <KalmanFilter_MeasurementUpdate+0xcac>
 80046e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046ea:	e001      	b.n	80046f0 <KalmanFilter_MeasurementUpdate+0xcb0>
 80046ec:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 80048dc <KalmanFilter_MeasurementUpdate+0xe9c>
 80046f0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80046f4:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80046f8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	edd3 7a00 	vldr	s15, [r3]
 8004710:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004714:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004718:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800471c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004720:	4613      	mov	r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	4413      	add	r3, r2
 8004726:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8004734:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004738:	3301      	adds	r3, #1
 800473a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800473e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004742:	2b02      	cmp	r3, #2
 8004744:	f77f af6a 	ble.w	800461c <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 8004748:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800474c:	3301      	adds	r3, #1
 800474e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004752:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8004756:	2b02      	cmp	r3, #2
 8004758:	f77f af5c 	ble.w	8004614 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 800475c:	2300      	movs	r3, #0
 800475e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004762:	e076      	b.n	8004852 <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 8004764:	2300      	movs	r3, #0
 8004766:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800476a:	e069      	b.n	8004840 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 800476c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004770:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004774:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004778:	4613      	mov	r3, r2
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	4413      	add	r3, r2
 800477e:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	440b      	add	r3, r1
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 800478e:	2300      	movs	r3, #0
 8004790:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8004794:	e04b      	b.n	800482e <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8004796:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800479a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800479e:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80047a2:	4613      	mov	r3, r2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	4413      	add	r3, r2
 80047a8:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	ed93 7a00 	vldr	s14, [r3]
 80047b6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80047ba:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 80047be:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80047c2:	4613      	mov	r3, r2
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	4413      	add	r3, r2
 80047c8:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80047cc:	4413      	add	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	edd3 6a00 	vldr	s13, [r3]
 80047d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80047da:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 80047e4:	4613      	mov	r3, r2
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80047ee:	4413      	add	r3, r2
 80047f0:	3302      	adds	r3, #2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	440b      	add	r3, r1
 80047f6:	3304      	adds	r3, #4
 80047f8:	edd3 7a00 	vldr	s15, [r3]
 80047fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004804:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004808:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800480c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004810:	4613      	mov	r3, r2
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	4413      	add	r3, r2
 8004816:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800481a:	4413      	add	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004824:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004828:	3301      	adds	r3, #1
 800482a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800482e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004832:	2b02      	cmp	r3, #2
 8004834:	ddaf      	ble.n	8004796 <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 8004836:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800483a:	3301      	adds	r3, #1
 800483c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8004840:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8004844:	2b02      	cmp	r3, #2
 8004846:	dd91      	ble.n	800476c <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 8004848:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800484c:	3301      	adds	r3, #1
 800484e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004852:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004856:	2b02      	cmp	r3, #2
 8004858:	dd84      	ble.n	8004764 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 800485a:	2300      	movs	r3, #0
 800485c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004860:	e032      	b.n	80048c8 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 8004862:	2300      	movs	r3, #0
 8004864:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004868:	e025      	b.n	80048b6 <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 800486a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800486e:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8004872:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8004876:	4613      	mov	r3, r2
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004880:	4413      	add	r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800488c:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8004896:	4613      	mov	r3, r2
 8004898:	005b      	lsls	r3, r3, #1
 800489a:	4413      	add	r3, r2
 800489c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80048a0:	4413      	add	r3, r2
 80048a2:	3302      	adds	r3, #2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	4403      	add	r3, r0
 80048a8:	3304      	adds	r3, #4
 80048aa:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 80048ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80048b0:	3301      	adds	r3, #1
 80048b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80048b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	ddd5      	ble.n	800486a <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 80048be:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80048c2:	3301      	adds	r3, #1
 80048c4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80048c8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	ddc8      	ble.n	8004862 <KalmanFilter_MeasurementUpdate+0xe22>
 80048d0:	e000      	b.n	80048d4 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 80048d2:	bf00      	nop
            }
        }
    }
}
 80048d4:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bdb0      	pop	{r4, r5, r7, pc}
 80048dc:	00000000 	.word	0x00000000

080048e0 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80048ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f6:	d517      	bpl.n	8004928 <KalmanFilter_DetectApogee+0x48>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490c:	d50c      	bpl.n	8004928 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	2b04      	cmp	r3, #4
 800491e:	dd06      	ble.n	800492e <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004926:	e002      	b.n	800492e <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685a      	ldr	r2, [r3, #4]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800493a:	4618      	mov	r0, r3
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	ee07 3a90 	vmov	s15, r3
}
 8004956:	eeb0 0a67 	vmov.f32	s0, s15
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	huart_gnss = huart_gnss_;
 8004984:	4a07      	ldr	r2, [pc, #28]	@ (80049a4 <L86_GNSS_Init+0x28>)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 800498a:	4b06      	ldr	r3, [pc, #24]	@ (80049a4 <L86_GNSS_Init+0x28>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8004992:	4905      	ldr	r1, [pc, #20]	@ (80049a8 <L86_GNSS_Init+0x2c>)
 8004994:	4618      	mov	r0, r3
 8004996:	f009 fa67 	bl	800de68 <HAL_UART_Receive_DMA>
}
 800499a:	bf00      	nop
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	2000049c 	.word	0x2000049c
 80049a8:	200004a0 	.word	0x200004a0

080049ac <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 80049b4:	4b06      	ldr	r3, [pc, #24]	@ (80049d0 <HAL_UART_RxHalfCpltCallback+0x24>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d104      	bne.n	80049c8 <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 80049be:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80049c2:	4804      	ldr	r0, [pc, #16]	@ (80049d4 <HAL_UART_RxHalfCpltCallback+0x28>)
 80049c4:	f000 f830 	bl	8004a28 <process_data>
	}
}
 80049c8:	bf00      	nop
 80049ca:	3708      	adds	r7, #8
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	2000049c 	.word	0x2000049c
 80049d4:	200004a0 	.word	0x200004a0

080049d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 80049e0:	4b06      	ldr	r3, [pc, #24]	@ (80049fc <HAL_UART_RxCpltCallback+0x24>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d104      	bne.n	80049f4 <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 80049ea:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80049ee:	4804      	ldr	r0, [pc, #16]	@ (8004a00 <HAL_UART_RxCpltCallback+0x28>)
 80049f0:	f000 f81a 	bl	8004a28 <process_data>
	}
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	2000049c 	.word	0x2000049c
 8004a00:	20000950 	.word	0x20000950

08004a04 <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f81d 	bl	8004a4c <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f89e 	bl	8004b54 <get_GPGGA_data>
	format_data(gps_data_);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f90d 	bl	8004c38 <format_data>
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <process_data>:

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 8004a34:	887b      	ldrh	r3, [r7, #2]
 8004a36:	461a      	mov	r2, r3
 8004a38:	6879      	ldr	r1, [r7, #4]
 8004a3a:	4803      	ldr	r0, [pc, #12]	@ (8004a48 <process_data+0x20>)
 8004a3c:	f00b fccf 	bl	80103de <memcpy>
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20000e00 	.word	0x20000e00

08004a4c <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 8004a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a4e:	b08d      	sub	sp, #52	@ 0x34
 8004a50:	af08      	add	r7, sp, #32
 8004a52:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 8004a54:	4937      	ldr	r1, [pc, #220]	@ (8004b34 <get_GNRMC_data+0xe8>)
 8004a56:	4838      	ldr	r0, [pc, #224]	@ (8004b38 <get_GNRMC_data+0xec>)
 8004a58:	f00b fc23 	bl	80102a2 <strstr>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	4a37      	ldr	r2, [pc, #220]	@ (8004b3c <get_GNRMC_data+0xf0>)
 8004a60:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == VALID)
 8004a62:	4b36      	ldr	r3, [pc, #216]	@ (8004b3c <get_GNRMC_data+0xf0>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d009      	beq.n	8004a7e <get_GNRMC_data+0x32>
 8004a6a:	4b34      	ldr	r3, [pc, #208]	@ (8004b3c <get_GNRMC_data+0xf0>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3311      	adds	r3, #17
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b41      	cmp	r3, #65	@ 0x41
 8004a74:	d103      	bne.n	8004a7e <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 8004a76:	4b32      	ldr	r3, [pc, #200]	@ (8004b40 <get_GNRMC_data+0xf4>)
 8004a78:	2201      	movs	r2, #1
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	e005      	b.n	8004a8a <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 8004a7e:	4b30      	ldr	r3, [pc, #192]	@ (8004b40 <get_GNRMC_data+0xf4>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2256      	movs	r2, #86	@ 0x56
 8004a88:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 8004a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8004b40 <get_GNRMC_data+0xf4>)
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d148      	bne.n	8004b24 <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 8004a92:	2278      	movs	r2, #120	@ 0x78
 8004a94:	2100      	movs	r1, #0
 8004a96:	482b      	ldr	r0, [pc, #172]	@ (8004b44 <get_GNRMC_data+0xf8>)
 8004a98:	f00b fbfb 	bl	8010292 <memset>
		counter = 0;
 8004a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b48 <get_GNRMC_data+0xfc>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 8004aa2:	4b26      	ldr	r3, [pc, #152]	@ (8004b3c <get_GNRMC_data+0xf0>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a29      	ldr	r2, [pc, #164]	@ (8004b4c <get_GNRMC_data+0x100>)
 8004aa8:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8004aaa:	e011      	b.n	8004ad0 <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 8004aac:	4b27      	ldr	r3, [pc, #156]	@ (8004b4c <get_GNRMC_data+0x100>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a25      	ldr	r2, [pc, #148]	@ (8004b48 <get_GNRMC_data+0xfc>)
 8004ab2:	7812      	ldrb	r2, [r2, #0]
 8004ab4:	7819      	ldrb	r1, [r3, #0]
 8004ab6:	4b23      	ldr	r3, [pc, #140]	@ (8004b44 <get_GNRMC_data+0xf8>)
 8004ab8:	5499      	strb	r1, [r3, r2]
			counter++;
 8004aba:	4b23      	ldr	r3, [pc, #140]	@ (8004b48 <get_GNRMC_data+0xfc>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b21      	ldr	r3, [pc, #132]	@ (8004b48 <get_GNRMC_data+0xfc>)
 8004ac4:	701a      	strb	r2, [r3, #0]
			current_char++;
 8004ac6:	4b21      	ldr	r3, [pc, #132]	@ (8004b4c <get_GNRMC_data+0x100>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b4c <get_GNRMC_data+0x100>)
 8004ace:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8004ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b4c <get_GNRMC_data+0x100>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ad8:	d1e8      	bne.n	8004aac <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f103 0c04 	add.w	ip, r3, #4
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	320c      	adds	r2, #12
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	3110      	adds	r1, #16
 8004af0:	6079      	str	r1, [r7, #4]
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	3014      	adds	r0, #20
 8004af6:	68fc      	ldr	r4, [r7, #12]
 8004af8:	3418      	adds	r4, #24
 8004afa:	68fd      	ldr	r5, [r7, #12]
 8004afc:	351c      	adds	r5, #28
 8004afe:	68fe      	ldr	r6, [r7, #12]
 8004b00:	3620      	adds	r6, #32
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	3124      	adds	r1, #36	@ 0x24
 8004b06:	9107      	str	r1, [sp, #28]
 8004b08:	9606      	str	r6, [sp, #24]
 8004b0a:	9505      	str	r5, [sp, #20]
 8004b0c:	9404      	str	r4, [sp, #16]
 8004b0e:	9003      	str	r0, [sp, #12]
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	9102      	str	r1, [sp, #8]
 8004b14:	9201      	str	r2, [sp, #4]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	4663      	mov	r3, ip
 8004b1a:	68ba      	ldr	r2, [r7, #8]
 8004b1c:	490c      	ldr	r1, [pc, #48]	@ (8004b50 <get_GNRMC_data+0x104>)
 8004b1e:	4809      	ldr	r0, [pc, #36]	@ (8004b44 <get_GNRMC_data+0xf8>)
 8004b20:	f00b fb38 	bl	8010194 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 8004b24:	4b05      	ldr	r3, [pc, #20]	@ (8004b3c <get_GNRMC_data+0xf0>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b32:	bf00      	nop
 8004b34:	08016464 	.word	0x08016464
 8004b38:	20000e00 	.word	0x20000e00
 8004b3c:	200012b0 	.word	0x200012b0
 8004b40:	200012b8 	.word	0x200012b8
 8004b44:	200012c0 	.word	0x200012c0
 8004b48:	20001338 	.word	0x20001338
 8004b4c:	200012bc 	.word	0x200012bc
 8004b50:	0801646c 	.word	0x0801646c

08004b54 <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 8004b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b56:	b08d      	sub	sp, #52	@ 0x34
 8004b58:	af08      	add	r7, sp, #32
 8004b5a:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 8004b5c:	492f      	ldr	r1, [pc, #188]	@ (8004c1c <get_GPGGA_data+0xc8>)
 8004b5e:	4830      	ldr	r0, [pc, #192]	@ (8004c20 <get_GPGGA_data+0xcc>)
 8004b60:	f00b fb9f 	bl	80102a2 <strstr>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4a2f      	ldr	r2, [pc, #188]	@ (8004c24 <get_GPGGA_data+0xd0>)
 8004b68:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 8004b6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c24 <get_GPGGA_data+0xd0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d04f      	beq.n	8004c12 <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == VALID)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	791b      	ldrb	r3, [r3, #4]
 8004b76:	2b41      	cmp	r3, #65	@ 0x41
 8004b78:	d148      	bne.n	8004c0c <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 8004b7a:	2278      	movs	r2, #120	@ 0x78
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	482a      	ldr	r0, [pc, #168]	@ (8004c28 <get_GPGGA_data+0xd4>)
 8004b80:	f00b fb87 	bl	8010292 <memset>
			counter = 0;
 8004b84:	4b29      	ldr	r3, [pc, #164]	@ (8004c2c <get_GPGGA_data+0xd8>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 8004b8a:	4b26      	ldr	r3, [pc, #152]	@ (8004c24 <get_GPGGA_data+0xd0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a28      	ldr	r2, [pc, #160]	@ (8004c30 <get_GPGGA_data+0xdc>)
 8004b90:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8004b92:	e011      	b.n	8004bb8 <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 8004b94:	4b26      	ldr	r3, [pc, #152]	@ (8004c30 <get_GPGGA_data+0xdc>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a24      	ldr	r2, [pc, #144]	@ (8004c2c <get_GPGGA_data+0xd8>)
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	7819      	ldrb	r1, [r3, #0]
 8004b9e:	4b22      	ldr	r3, [pc, #136]	@ (8004c28 <get_GPGGA_data+0xd4>)
 8004ba0:	5499      	strb	r1, [r3, r2]
				counter++;
 8004ba2:	4b22      	ldr	r3, [pc, #136]	@ (8004c2c <get_GPGGA_data+0xd8>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b2da      	uxtb	r2, r3
 8004baa:	4b20      	ldr	r3, [pc, #128]	@ (8004c2c <get_GPGGA_data+0xd8>)
 8004bac:	701a      	strb	r2, [r3, #0]
				current_char++;
 8004bae:	4b20      	ldr	r3, [pc, #128]	@ (8004c30 <get_GPGGA_data+0xdc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c30 <get_GPGGA_data+0xdc>)
 8004bb6:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8004bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c30 <get_GPGGA_data+0xdc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bc0:	d1e8      	bne.n	8004b94 <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f103 0c08 	add.w	ip, r3, #8
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	3210      	adds	r2, #16
 8004bd4:	68f9      	ldr	r1, [r7, #12]
 8004bd6:	3114      	adds	r1, #20
 8004bd8:	6079      	str	r1, [r7, #4]
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	3025      	adds	r0, #37	@ 0x25
 8004bde:	68fc      	ldr	r4, [r7, #12]
 8004be0:	3426      	adds	r4, #38	@ 0x26
 8004be2:	68fd      	ldr	r5, [r7, #12]
 8004be4:	3528      	adds	r5, #40	@ 0x28
 8004be6:	68fe      	ldr	r6, [r7, #12]
 8004be8:	362c      	adds	r6, #44	@ 0x2c
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	3130      	adds	r1, #48	@ 0x30
 8004bee:	9107      	str	r1, [sp, #28]
 8004bf0:	9606      	str	r6, [sp, #24]
 8004bf2:	9505      	str	r5, [sp, #20]
 8004bf4:	9404      	str	r4, [sp, #16]
 8004bf6:	9003      	str	r0, [sp, #12]
 8004bf8:	6879      	ldr	r1, [r7, #4]
 8004bfa:	9102      	str	r1, [sp, #8]
 8004bfc:	9201      	str	r2, [sp, #4]
 8004bfe:	9300      	str	r3, [sp, #0]
 8004c00:	4663      	mov	r3, ip
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	490b      	ldr	r1, [pc, #44]	@ (8004c34 <get_GPGGA_data+0xe0>)
 8004c06:	4808      	ldr	r0, [pc, #32]	@ (8004c28 <get_GPGGA_data+0xd4>)
 8004c08:	f00b fac4 	bl	8010194 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 8004c0c:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <get_GPGGA_data+0xd0>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
	}
}
 8004c12:	bf00      	nop
 8004c14:	3714      	adds	r7, #20
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	08016494 	.word	0x08016494
 8004c20:	20000e00 	.word	0x20000e00
 8004c24:	200012b4 	.word	0x200012b4
 8004c28:	200012c0 	.word	0x200012c0
 8004c2c:	20001338 	.word	0x20001338
 8004c30:	200012bc 	.word	0x200012bc
 8004c34:	0801649c 	.word	0x0801649c

08004c38 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	791b      	ldrb	r3, [r3, #4]
 8004c44:	2b41      	cmp	r3, #65	@ 0x41
 8004c46:	f040 8154 	bne.w	8004ef2 <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	4aab      	ldr	r2, [pc, #684]	@ (8004efc <format_data+0x2c4>)
 8004c50:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 8004c52:	4baa      	ldr	r3, [pc, #680]	@ (8004efc <format_data+0x2c4>)
 8004c54:	edd3 7a00 	vldr	s15, [r3]
 8004c58:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004f00 <format_data+0x2c8>
 8004c5c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c60:	ee16 0a90 	vmov	r0, s13
 8004c64:	f7fb fc90 	bl	8000588 <__aeabi_f2d>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	ec43 2b10 	vmov	d0, r2, r3
 8004c70:	f00f fcba 	bl	80145e8 <floor>
 8004c74:	ec53 2b10 	vmov	r2, r3, d0
 8004c78:	4610      	mov	r0, r2
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	f7fb ffd4 	bl	8000c28 <__aeabi_d2f>
 8004c80:	4602      	mov	r2, r0
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 8004c86:	4b9d      	ldr	r3, [pc, #628]	@ (8004efc <format_data+0x2c4>)
 8004c88:	ed93 7a00 	vldr	s14, [r3]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004c92:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8004f00 <format_data+0x2c8>
 8004c96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c9e:	4b97      	ldr	r3, [pc, #604]	@ (8004efc <format_data+0x2c4>)
 8004ca0:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8004ca4:	4b95      	ldr	r3, [pc, #596]	@ (8004efc <format_data+0x2c4>)
 8004ca6:	ed93 7a00 	vldr	s14, [r3]
 8004caa:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8004f04 <format_data+0x2cc>
 8004cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004cb2:	4b92      	ldr	r3, [pc, #584]	@ (8004efc <format_data+0x2c4>)
 8004cb4:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004cbe:	4b8f      	ldr	r3, [pc, #572]	@ (8004efc <format_data+0x2c4>)
 8004cc0:	edd3 7a00 	vldr	s15, [r3]
 8004cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4a8d      	ldr	r2, [pc, #564]	@ (8004f08 <format_data+0x2d0>)
 8004cd4:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8004cd6:	4b8c      	ldr	r3, [pc, #560]	@ (8004f08 <format_data+0x2d0>)
 8004cd8:	edd3 7a00 	vldr	s15, [r3]
 8004cdc:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004f00 <format_data+0x2c8>
 8004ce0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ce4:	ee16 0a90 	vmov	r0, s13
 8004ce8:	f7fb fc4e 	bl	8000588 <__aeabi_f2d>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	ec43 2b10 	vmov	d0, r2, r3
 8004cf4:	f00f fc78 	bl	80145e8 <floor>
 8004cf8:	ec53 2b10 	vmov	r2, r3, d0
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f7fb ff92 	bl	8000c28 <__aeabi_d2f>
 8004d04:	4602      	mov	r2, r0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 8004d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8004f08 <format_data+0x2d0>)
 8004d0c:	ed93 7a00 	vldr	s14, [r3]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004d16:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004f00 <format_data+0x2c8>
 8004d1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d22:	4b79      	ldr	r3, [pc, #484]	@ (8004f08 <format_data+0x2d0>)
 8004d24:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8004d28:	4b77      	ldr	r3, [pc, #476]	@ (8004f08 <format_data+0x2d0>)
 8004d2a:	ed93 7a00 	vldr	s14, [r3]
 8004d2e:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004f04 <format_data+0x2cc>
 8004d32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d36:	4b74      	ldr	r3, [pc, #464]	@ (8004f08 <format_data+0x2d0>)
 8004d38:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004d42:	4b71      	ldr	r3, [pc, #452]	@ (8004f08 <format_data+0x2d0>)
 8004d44:	edd3 7a00 	vldr	s15, [r3]
 8004d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a6d      	ldr	r2, [pc, #436]	@ (8004f0c <format_data+0x2d4>)
 8004d58:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 8004d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8004f0c <format_data+0x2d4>)
 8004d5c:	edd3 7a00 	vldr	s15, [r3]
 8004d60:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8004f10 <format_data+0x2d8>
 8004d64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d68:	ee16 0a90 	vmov	r0, s13
 8004d6c:	f7fb fc0c 	bl	8000588 <__aeabi_f2d>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	ec43 2b10 	vmov	d0, r2, r3
 8004d78:	f00f fc36 	bl	80145e8 <floor>
 8004d7c:	ec53 2b10 	vmov	r2, r3, d0
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	f7fb ff30 	bl	8000be8 <__aeabi_d2uiz>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 8004d92:	4b5e      	ldr	r3, [pc, #376]	@ (8004f0c <format_data+0x2d4>)
 8004d94:	ed93 7a00 	vldr	s14, [r3]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004da4:	fb02 f303 	mul.w	r3, r2, r3
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004db0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004db4:	4b55      	ldr	r3, [pc, #340]	@ (8004f0c <format_data+0x2d4>)
 8004db6:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc0:	3303      	adds	r3, #3
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd0:	2b17      	cmp	r3, #23
 8004dd2:	d907      	bls.n	8004de4 <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dda:	3b18      	subs	r3, #24
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 8004de4:	4b49      	ldr	r3, [pc, #292]	@ (8004f0c <format_data+0x2d4>)
 8004de6:	edd3 7a00 	vldr	s15, [r3]
 8004dea:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8004f00 <format_data+0x2c8>
 8004dee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004df2:	ee16 0a90 	vmov	r0, s13
 8004df6:	f7fb fbc7 	bl	8000588 <__aeabi_f2d>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	ec43 2b10 	vmov	d0, r2, r3
 8004e02:	f00f fbf1 	bl	80145e8 <floor>
 8004e06:	ec53 2b10 	vmov	r2, r3, d0
 8004e0a:	4610      	mov	r0, r2
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	f7fb feeb 	bl	8000be8 <__aeabi_d2uiz>
 8004e12:	4603      	mov	r3, r0
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 8004e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004f0c <format_data+0x2d4>)
 8004e1e:	ed93 7a00 	vldr	s14, [r3]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e28:	461a      	mov	r2, r3
 8004e2a:	2364      	movs	r3, #100	@ 0x64
 8004e2c:	fb02 f303 	mul.w	r3, r2, r3
 8004e30:	ee07 3a90 	vmov	s15, r3
 8004e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e3c:	4b33      	ldr	r3, [pc, #204]	@ (8004f0c <format_data+0x2d4>)
 8004e3e:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 8004e42:	4b32      	ldr	r3, [pc, #200]	@ (8004f0c <format_data+0x2d4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fb fb9e 	bl	8000588 <__aeabi_f2d>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	ec43 2b10 	vmov	d0, r2, r3
 8004e54:	f00f fbc8 	bl	80145e8 <floor>
 8004e58:	ec53 2b10 	vmov	r2, r3, d0
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	4619      	mov	r1, r3
 8004e60:	f7fb fec2 	bl	8000be8 <__aeabi_d2uiz>
 8004e64:	4603      	mov	r3, r0
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	4a28      	ldr	r2, [pc, #160]	@ (8004f14 <format_data+0x2dc>)
 8004e74:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8004e76:	4b27      	ldr	r3, [pc, #156]	@ (8004f14 <format_data+0x2dc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a27      	ldr	r2, [pc, #156]	@ (8004f18 <format_data+0x2e0>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	0b5b      	lsrs	r3, r3, #13
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 8004e8a:	4b22      	ldr	r3, [pc, #136]	@ (8004f14 <format_data+0x2dc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8004e94:	4611      	mov	r1, r2
 8004e96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004e9a:	fb01 f202 	mul.w	r2, r1, r2
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8004f14 <format_data+0x2dc>)
 8004ea2:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8004ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f14 <format_data+0x2dc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1c      	ldr	r2, [pc, #112]	@ (8004f1c <format_data+0x2e4>)
 8004eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8004eb8:	4b16      	ldr	r3, [pc, #88]	@ (8004f14 <format_data+0x2dc>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8004ec2:	4611      	mov	r1, r2
 8004ec4:	2264      	movs	r2, #100	@ 0x64
 8004ec6:	fb01 f202 	mul.w	r2, r1, r2
 8004eca:	1a9b      	subs	r3, r3, r2
 8004ecc:	4a11      	ldr	r2, [pc, #68]	@ (8004f14 <format_data+0x2dc>)
 8004ece:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 8004ed0:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <format_data+0x2dc>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	2000133c 	.word	0x2000133c
 8004f00:	42c80000 	.word	0x42c80000
 8004f04:	42700000 	.word	0x42700000
 8004f08:	20001340 	.word	0x20001340
 8004f0c:	20001344 	.word	0x20001344
 8004f10:	461c4000 	.word	0x461c4000
 8004f14:	20001348 	.word	0x20001348
 8004f18:	d1b71759 	.word	0xd1b71759
 8004f1c:	51eb851f 	.word	0x51eb851f

08004f20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004f24:	f002 ff42 	bl	8007dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004f28:	f000 f906 	bl	8005138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004f2c:	f000 fbd4 	bl	80056d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8004f30:	f000 fb8c 	bl	800564c <MX_DMA_Init>
  MX_I2C1_Init();
 8004f34:	f000 fa62 	bl	80053fc <MX_I2C1_Init>
  MX_I2C3_Init();
 8004f38:	f000 fa8e 	bl	8005458 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004f3c:	f000 faba 	bl	80054b4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004f40:	f000 fb30 	bl	80055a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004f44:	f000 f964 	bl	8005210 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8004f48:	f000 fb56 	bl	80055f8 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004f4c:	f000 fb00 	bl	8005550 <MX_UART4_Init>
  MX_ADC2_Init();
 8004f50:	f000 f9b0 	bl	80052b4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8004f54:	f000 fa00 	bl	8005358 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 8004f58:	f000 faac 	bl	80054b4 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8004f5c:	4867      	ldr	r0, [pc, #412]	@ (80050fc <main+0x1dc>)
 8004f5e:	f008 f943 	bl	800d1e8 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004f62:	2200      	movs	r2, #0
 8004f64:	2101      	movs	r1, #1
 8004f66:	201c      	movs	r0, #28
 8004f68:	f003 fcc5 	bl	80088f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f6c:	201c      	movs	r0, #28
 8004f6e:	f003 fcde 	bl	800892e <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8004f72:	2201      	movs	r2, #1
 8004f74:	2100      	movs	r1, #0
 8004f76:	2009      	movs	r0, #9
 8004f78:	f003 fcbd 	bl	80088f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2100      	movs	r1, #0
 8004f80:	200a      	movs	r0, #10
 8004f82:	f003 fcb8 	bl	80088f6 <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004f86:	200a      	movs	r0, #10
 8004f88:	f003 fcd1 	bl	800892e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004f8c:	2009      	movs	r0, #9
 8004f8e:	f003 fcce 	bl	800892e <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 8004f92:	f000 fc77 	bl	8005884 <bme280_begin>
	HAL_Delay(1000);
 8004f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f9a:	f002 ff79 	bl	8007e90 <HAL_Delay>
	bme280_config();
 8004f9e:	f7fc fa75 	bl	800148c <bme280_config>
	bme280_update();
 8004fa2:	f7fc fc2f 	bl	8001804 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 8004fa6:	f000 fc85 	bl	80058b4 <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 8004faa:	4855      	ldr	r0, [pc, #340]	@ (8005100 <main+0x1e0>)
 8004fac:	f7fd f8b4 	bl	8002118 <bmi088_config>
	get_offset(&BMI_sensor);
 8004fb0:	4853      	ldr	r0, [pc, #332]	@ (8005100 <main+0x1e0>)
 8004fb2:	f7fd fe41 	bl	8002c38 <get_offset>

	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 8004fb6:	f001 fe05 	bl	8006bc4 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 8004fba:	4852      	ldr	r0, [pc, #328]	@ (8005104 <main+0x1e4>)
 8004fbc:	f002 f882 	bl	80070c4 <sensor_fusion_init>

	/*==================== DWT PROFILER INITIALIZATION ====================*/
	// Initialize DWT profiler for performance monitoring
	dwt_profiler_init();
 8004fc0:	f7fd fedc 	bl	8002d7c <dwt_profiler_init>

	/* ==== LORA COMMUNICATION SETUP ==== */
    e22_config_mode(&lora_1);
 8004fc4:	4850      	ldr	r0, [pc, #320]	@ (8005108 <main+0x1e8>)
 8004fc6:	f7fe f8af 	bl	8003128 <e22_config_mode>
    HAL_Delay(20);
 8004fca:	2014      	movs	r0, #20
 8004fcc:	f002 ff60 	bl	8007e90 <HAL_Delay>
	lora_init();
 8004fd0:	f000 fc14 	bl	80057fc <lora_init>
    HAL_Delay(20);
 8004fd4:	2014      	movs	r0, #20
 8004fd6:	f002 ff5b 	bl	8007e90 <HAL_Delay>
	e22_transmit_mode(&lora_1);
 8004fda:	484b      	ldr	r0, [pc, #300]	@ (8005108 <main+0x1e8>)
 8004fdc:	f7fe f8b8 	bl	8003150 <e22_transmit_mode>

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize L86 GPS/GNSS module
	HAL_UART_Transmit(&huart6, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 8004fe0:	2364      	movs	r3, #100	@ 0x64
 8004fe2:	2213      	movs	r2, #19
 8004fe4:	4949      	ldr	r1, [pc, #292]	@ (800510c <main+0x1ec>)
 8004fe6:	484a      	ldr	r0, [pc, #296]	@ (8005110 <main+0x1f0>)
 8004fe8:	f008 fda0 	bl	800db2c <HAL_UART_Transmit>
    HAL_UART_DeInit(&huart6);
 8004fec:	4848      	ldr	r0, [pc, #288]	@ (8005110 <main+0x1f0>)
 8004fee:	f008 fd6b 	bl	800dac8 <HAL_UART_DeInit>
    huart6.Init.BaudRate = 57600;
 8004ff2:	4b47      	ldr	r3, [pc, #284]	@ (8005110 <main+0x1f0>)
 8004ff4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8004ff8:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&huart6);
 8004ffa:	4845      	ldr	r0, [pc, #276]	@ (8005110 <main+0x1f0>)
 8004ffc:	f008 fd14 	bl	800da28 <HAL_UART_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 8005000:	4844      	ldr	r0, [pc, #272]	@ (8005114 <main+0x1f4>)
 8005002:	f003 fcbd 	bl	8008980 <HAL_DMA_Init>
	L86_GNSS_Init(&huart6);
 8005006:	4842      	ldr	r0, [pc, #264]	@ (8005110 <main+0x1f0>)
 8005008:	f7ff fcb8 	bl	800497c <L86_GNSS_Init>

    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/

		PROFILE_START(PROF_BMI088_UPDATE);
 800500c:	2000      	movs	r0, #0
 800500e:	f7fd ff03 	bl	8002e18 <dwt_profiler_start>
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 8005012:	483b      	ldr	r0, [pc, #236]	@ (8005100 <main+0x1e0>)
 8005014:	f7fd fa80 	bl	8002518 <bmi088_update>
		PROFILE_END(PROF_BMI088_UPDATE);
 8005018:	2000      	movs	r0, #0
 800501a:	f7fd ff29 	bl	8002e70 <dwt_profiler_end>
		
		PROFILE_START(PROF_BME280_UPDATE);
 800501e:	2001      	movs	r0, #1
 8005020:	f7fd fefa 	bl	8002e18 <dwt_profiler_start>
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 8005024:	f7fc fbee 	bl	8001804 <bme280_update>
		PROFILE_END(PROF_BME280_UPDATE);
 8005028:	2001      	movs	r0, #1
 800502a:	f7fd ff21 	bl	8002e70 <dwt_profiler_end>


		/*PERIODIC OPERATIONS (100ms)*/
		if (tx_timer_flag_100ms >= 1) {
 800502e:	4b3a      	ldr	r3, [pc, #232]	@ (8005118 <main+0x1f8>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d058      	beq.n	80050ea <main+0x1ca>
		  tx_timer_flag_100ms = 0;
 8005038:	4b37      	ldr	r3, [pc, #220]	@ (8005118 <main+0x1f8>)
 800503a:	2200      	movs	r2, #0
 800503c:	701a      	strb	r2, [r3, #0]

		  // Read magnetometer ADC values
		  PROFILE_START(PROF_ADC_READ);
 800503e:	2002      	movs	r0, #2
 8005040:	f7fd feea 	bl	8002e18 <dwt_profiler_start>
		  read_ADC();
 8005044:	f000 fc64 	bl	8005910 <read_ADC>
		  PROFILE_END(PROF_ADC_READ);
 8005048:	2002      	movs	r0, #2
 800504a:	f7fd ff11 	bl	8002e70 <dwt_profiler_end>

		  // Sensor fusion and flight algorithm processing
		  PROFILE_START(PROF_SENSOR_FUSION);
 800504e:	2003      	movs	r0, #3
 8005050:	f7fd fee2 	bl	8002e18 <dwt_profiler_start>
		  sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 8005054:	4a31      	ldr	r2, [pc, #196]	@ (800511c <main+0x1fc>)
 8005056:	492a      	ldr	r1, [pc, #168]	@ (8005100 <main+0x1e0>)
 8005058:	482a      	ldr	r0, [pc, #168]	@ (8005104 <main+0x1e4>)
 800505a:	f002 f889 	bl	8007170 <sensor_fusion_update_kalman>
		  PROFILE_END(PROF_SENSOR_FUSION);
 800505e:	2003      	movs	r0, #3
 8005060:	f7fd ff06 	bl	8002e70 <dwt_profiler_end>
		  
		  PROFILE_START(PROF_FLIGHT_ALGORITHM);
 8005064:	2004      	movs	r0, #4
 8005066:	f7fd fed7 	bl	8002e18 <dwt_profiler_start>
		  flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 800506a:	4a2c      	ldr	r2, [pc, #176]	@ (800511c <main+0x1fc>)
 800506c:	4924      	ldr	r1, [pc, #144]	@ (8005100 <main+0x1e0>)
 800506e:	4825      	ldr	r0, [pc, #148]	@ (8005104 <main+0x1e4>)
 8005070:	f7fe f882 	bl	8003178 <flight_algorithm_update>
		  PROFILE_END(PROF_FLIGHT_ALGORITHM);
 8005074:	2004      	movs	r0, #4
 8005076:	f7fd fefb 	bl	8002e70 <dwt_profiler_end>
		  
		  // Update GPS/GNSS data
		  PROFILE_START(PROF_GNSS_UPDATE);
 800507a:	2005      	movs	r0, #5
 800507c:	f7fd fecc 	bl	8002e18 <dwt_profiler_start>
		  L86_GNSS_Update(&gnss_data);
 8005080:	4827      	ldr	r0, [pc, #156]	@ (8005120 <main+0x200>)
 8005082:	f7ff fcbf 	bl	8004a04 <L86_GNSS_Update>
		  PROFILE_END(PROF_GNSS_UPDATE);
 8005086:	2005      	movs	r0, #5
 8005088:	f7fd fef2 	bl	8002e70 <dwt_profiler_end>

		  // Packet compose
		  PROFILE_START(PROF_PACKET_COMPOSE);
 800508c:	2006      	movs	r0, #6
 800508e:	f7fd fec3 	bl	8002e18 <dwt_profiler_start>
		  addDataPacketNormal(&BME280_sensor, &BMI_sensor, &sensor_output, &gnss_data, hmc1021_gauss, voltage_V, current_mA);
 8005092:	4b24      	ldr	r3, [pc, #144]	@ (8005124 <main+0x204>)
 8005094:	edd3 7a00 	vldr	s15, [r3]
 8005098:	4b23      	ldr	r3, [pc, #140]	@ (8005128 <main+0x208>)
 800509a:	ed93 7a00 	vldr	s14, [r3]
 800509e:	4b23      	ldr	r3, [pc, #140]	@ (800512c <main+0x20c>)
 80050a0:	edd3 6a00 	vldr	s13, [r3]
 80050a4:	eeb0 1a66 	vmov.f32	s2, s13
 80050a8:	eef0 0a47 	vmov.f32	s1, s14
 80050ac:	eeb0 0a67 	vmov.f32	s0, s15
 80050b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005120 <main+0x200>)
 80050b2:	4a1a      	ldr	r2, [pc, #104]	@ (800511c <main+0x1fc>)
 80050b4:	4912      	ldr	r1, [pc, #72]	@ (8005100 <main+0x1e0>)
 80050b6:	4813      	ldr	r0, [pc, #76]	@ (8005104 <main+0x1e4>)
 80050b8:	f000 fda6 	bl	8005c08 <addDataPacketNormal>
		  PROFILE_END(PROF_PACKET_COMPOSE);
 80050bc:	2006      	movs	r0, #6
 80050be:	f7fd fed7 	bl	8002e70 <dwt_profiler_end>
		  
		  // Send telemetry packet via DMA (non-blocking)
		  PROFILE_START(PROF_UART2_SEND);
 80050c2:	2007      	movs	r0, #7
 80050c4:	f7fd fea8 	bl	8002e18 <dwt_profiler_start>
		  uart2_send_packet_dma((uint8_t*)normal_paket, 49);
 80050c8:	2131      	movs	r1, #49	@ 0x31
 80050ca:	4819      	ldr	r0, [pc, #100]	@ (8005130 <main+0x210>)
 80050cc:	f000 fd36 	bl	8005b3c <uart2_send_packet_dma>
		  PROFILE_END(PROF_UART2_SEND);
 80050d0:	2007      	movs	r0, #7
 80050d2:	f7fd fecd 	bl	8002e70 <dwt_profiler_end>
		  
		  PROFILE_START(PROF_LORA_SEND);
 80050d6:	2008      	movs	r0, #8
 80050d8:	f7fd fe9e 	bl	8002e18 <dwt_profiler_start>
		  lora_send_packet_dma((uint8_t*)normal_paket, 49);
 80050dc:	2131      	movs	r1, #49	@ 0x31
 80050de:	4814      	ldr	r0, [pc, #80]	@ (8005130 <main+0x210>)
 80050e0:	f000 fd48 	bl	8005b74 <lora_send_packet_dma>
		  PROFILE_END(PROF_LORA_SEND);
 80050e4:	2008      	movs	r0, #8
 80050e6:	f7fd fec3 	bl	8002e70 <dwt_profiler_end>
		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 10) {
 80050ea:	4b12      	ldr	r3, [pc, #72]	@ (8005134 <main+0x214>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b09      	cmp	r3, #9
 80050f2:	d98b      	bls.n	800500c <main+0xec>
		  tx_timer_flag_1s = 0;
 80050f4:	4b0f      	ldr	r3, [pc, #60]	@ (8005134 <main+0x214>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	701a      	strb	r2, [r3, #0]
		PROFILE_START(PROF_BMI088_UPDATE);
 80050fa:	e787      	b.n	800500c <main+0xec>
 80050fc:	2000152c 	.word	0x2000152c
 8005100:	200017b0 	.word	0x200017b0
 8005104:	2000176c 	.word	0x2000176c
 8005108:	200018d0 	.word	0x200018d0
 800510c:	080164c8 	.word	0x080164c8
 8005110:	20001604 	.word	0x20001604
 8005114:	2000170c 	.word	0x2000170c
 8005118:	200018f2 	.word	0x200018f2
 800511c:	20001848 	.word	0x20001848
 8005120:	20001888 	.word	0x20001888
 8005124:	20001904 	.word	0x20001904
 8005128:	200018fc 	.word	0x200018fc
 800512c:	200018f8 	.word	0x200018f8
 8005130:	20001910 	.word	0x20001910
 8005134:	200018f3 	.word	0x200018f3

08005138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b094      	sub	sp, #80	@ 0x50
 800513c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800513e:	f107 031c 	add.w	r3, r7, #28
 8005142:	2234      	movs	r2, #52	@ 0x34
 8005144:	2100      	movs	r1, #0
 8005146:	4618      	mov	r0, r3
 8005148:	f00b f8a3 	bl	8010292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800514c:	f107 0308 	add.w	r3, r7, #8
 8005150:	2200      	movs	r2, #0
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	605a      	str	r2, [r3, #4]
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	60da      	str	r2, [r3, #12]
 800515a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800515c:	2300      	movs	r3, #0
 800515e:	607b      	str	r3, [r7, #4]
 8005160:	4b29      	ldr	r3, [pc, #164]	@ (8005208 <SystemClock_Config+0xd0>)
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	4a28      	ldr	r2, [pc, #160]	@ (8005208 <SystemClock_Config+0xd0>)
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800516a:	6413      	str	r3, [r2, #64]	@ 0x40
 800516c:	4b26      	ldr	r3, [pc, #152]	@ (8005208 <SystemClock_Config+0xd0>)
 800516e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005174:	607b      	str	r3, [r7, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005178:	2300      	movs	r3, #0
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4b23      	ldr	r3, [pc, #140]	@ (800520c <SystemClock_Config+0xd4>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a22      	ldr	r2, [pc, #136]	@ (800520c <SystemClock_Config+0xd4>)
 8005182:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b20      	ldr	r3, [pc, #128]	@ (800520c <SystemClock_Config+0xd4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005194:	2301      	movs	r3, #1
 8005196:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005198:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800519c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800519e:	2302      	movs	r3, #2
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80051a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80051a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80051a8:	2308      	movs	r3, #8
 80051aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80051ac:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80051b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80051b2:	2302      	movs	r3, #2
 80051b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80051b6:	2302      	movs	r3, #2
 80051b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80051ba:	2302      	movs	r3, #2
 80051bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051be:	f107 031c 	add.w	r3, r7, #28
 80051c2:	4618      	mov	r0, r3
 80051c4:	f007 fd22 	bl	800cc0c <HAL_RCC_OscConfig>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80051ce:	f000 fced 	bl	8005bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051d2:	230f      	movs	r3, #15
 80051d4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80051d6:	2302      	movs	r3, #2
 80051d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051da:	2300      	movs	r3, #0
 80051dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80051de:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80051e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80051e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051e8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80051ea:	f107 0308 	add.w	r3, r7, #8
 80051ee:	2105      	movs	r1, #5
 80051f0:	4618      	mov	r0, r3
 80051f2:	f007 f9c1 	bl	800c578 <HAL_RCC_ClockConfig>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d001      	beq.n	8005200 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80051fc:	f000 fcd6 	bl	8005bac <Error_Handler>
  }
}
 8005200:	bf00      	nop
 8005202:	3750      	adds	r7, #80	@ 0x50
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40023800 	.word	0x40023800
 800520c:	40007000 	.word	0x40007000

08005210 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005216:	463b      	mov	r3, r7
 8005218:	2200      	movs	r2, #0
 800521a:	601a      	str	r2, [r3, #0]
 800521c:	605a      	str	r2, [r3, #4]
 800521e:	609a      	str	r2, [r3, #8]
 8005220:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005222:	4b21      	ldr	r3, [pc, #132]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005224:	4a21      	ldr	r2, [pc, #132]	@ (80052ac <MX_ADC1_Init+0x9c>)
 8005226:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005228:	4b1f      	ldr	r3, [pc, #124]	@ (80052a8 <MX_ADC1_Init+0x98>)
 800522a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800522e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005230:	4b1d      	ldr	r3, [pc, #116]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005232:	2200      	movs	r2, #0
 8005234:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8005236:	4b1c      	ldr	r3, [pc, #112]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005238:	2200      	movs	r2, #0
 800523a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800523c:	4b1a      	ldr	r3, [pc, #104]	@ (80052a8 <MX_ADC1_Init+0x98>)
 800523e:	2200      	movs	r2, #0
 8005240:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005242:	4b19      	ldr	r3, [pc, #100]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005244:	2200      	movs	r2, #0
 8005246:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800524a:	4b17      	ldr	r3, [pc, #92]	@ (80052a8 <MX_ADC1_Init+0x98>)
 800524c:	2200      	movs	r2, #0
 800524e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005250:	4b15      	ldr	r3, [pc, #84]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005252:	4a17      	ldr	r2, [pc, #92]	@ (80052b0 <MX_ADC1_Init+0xa0>)
 8005254:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005256:	4b14      	ldr	r3, [pc, #80]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005258:	2200      	movs	r2, #0
 800525a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800525c:	4b12      	ldr	r3, [pc, #72]	@ (80052a8 <MX_ADC1_Init+0x98>)
 800525e:	2201      	movs	r2, #1
 8005260:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8005262:	4b11      	ldr	r3, [pc, #68]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005264:	2200      	movs	r2, #0
 8005266:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800526a:	4b0f      	ldr	r3, [pc, #60]	@ (80052a8 <MX_ADC1_Init+0x98>)
 800526c:	2201      	movs	r2, #1
 800526e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005270:	480d      	ldr	r0, [pc, #52]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005272:	f002 fe31 	bl	8007ed8 <HAL_ADC_Init>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800527c:	f000 fc96 	bl	8005bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005280:	2309      	movs	r3, #9
 8005282:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005284:	2301      	movs	r3, #1
 8005286:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005288:	2300      	movs	r3, #0
 800528a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800528c:	463b      	mov	r3, r7
 800528e:	4619      	mov	r1, r3
 8005290:	4805      	ldr	r0, [pc, #20]	@ (80052a8 <MX_ADC1_Init+0x98>)
 8005292:	f003 f803 	bl	800829c <HAL_ADC_ConfigChannel>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800529c:	f000 fc86 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80052a0:	bf00      	nop
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	2000134c 	.word	0x2000134c
 80052ac:	40012000 	.word	0x40012000
 80052b0:	0f000001 	.word	0x0f000001

080052b4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80052ba:	463b      	mov	r3, r7
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]
 80052c0:	605a      	str	r2, [r3, #4]
 80052c2:	609a      	str	r2, [r3, #8]
 80052c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80052c6:	4b21      	ldr	r3, [pc, #132]	@ (800534c <MX_ADC2_Init+0x98>)
 80052c8:	4a21      	ldr	r2, [pc, #132]	@ (8005350 <MX_ADC2_Init+0x9c>)
 80052ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80052cc:	4b1f      	ldr	r3, [pc, #124]	@ (800534c <MX_ADC2_Init+0x98>)
 80052ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80052d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80052d4:	4b1d      	ldr	r3, [pc, #116]	@ (800534c <MX_ADC2_Init+0x98>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80052da:	4b1c      	ldr	r3, [pc, #112]	@ (800534c <MX_ADC2_Init+0x98>)
 80052dc:	2200      	movs	r2, #0
 80052de:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80052e0:	4b1a      	ldr	r3, [pc, #104]	@ (800534c <MX_ADC2_Init+0x98>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80052e6:	4b19      	ldr	r3, [pc, #100]	@ (800534c <MX_ADC2_Init+0x98>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80052ee:	4b17      	ldr	r3, [pc, #92]	@ (800534c <MX_ADC2_Init+0x98>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052f4:	4b15      	ldr	r3, [pc, #84]	@ (800534c <MX_ADC2_Init+0x98>)
 80052f6:	4a17      	ldr	r2, [pc, #92]	@ (8005354 <MX_ADC2_Init+0xa0>)
 80052f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052fa:	4b14      	ldr	r3, [pc, #80]	@ (800534c <MX_ADC2_Init+0x98>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8005300:	4b12      	ldr	r3, [pc, #72]	@ (800534c <MX_ADC2_Init+0x98>)
 8005302:	2201      	movs	r2, #1
 8005304:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8005306:	4b11      	ldr	r3, [pc, #68]	@ (800534c <MX_ADC2_Init+0x98>)
 8005308:	2200      	movs	r2, #0
 800530a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800530e:	4b0f      	ldr	r3, [pc, #60]	@ (800534c <MX_ADC2_Init+0x98>)
 8005310:	2201      	movs	r2, #1
 8005312:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005314:	480d      	ldr	r0, [pc, #52]	@ (800534c <MX_ADC2_Init+0x98>)
 8005316:	f002 fddf 	bl	8007ed8 <HAL_ADC_Init>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005320:	f000 fc44 	bl	8005bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005324:	230a      	movs	r3, #10
 8005326:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005328:	2301      	movs	r3, #1
 800532a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800532c:	2300      	movs	r3, #0
 800532e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005330:	463b      	mov	r3, r7
 8005332:	4619      	mov	r1, r3
 8005334:	4805      	ldr	r0, [pc, #20]	@ (800534c <MX_ADC2_Init+0x98>)
 8005336:	f002 ffb1 	bl	800829c <HAL_ADC_ConfigChannel>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005340:	f000 fc34 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005344:	bf00      	nop
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	20001394 	.word	0x20001394
 8005350:	40012100 	.word	0x40012100
 8005354:	0f000001 	.word	0x0f000001

08005358 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800535e:	463b      	mov	r3, r7
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	605a      	str	r2, [r3, #4]
 8005366:	609a      	str	r2, [r3, #8]
 8005368:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800536a:	4b21      	ldr	r3, [pc, #132]	@ (80053f0 <MX_ADC3_Init+0x98>)
 800536c:	4a21      	ldr	r2, [pc, #132]	@ (80053f4 <MX_ADC3_Init+0x9c>)
 800536e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005370:	4b1f      	ldr	r3, [pc, #124]	@ (80053f0 <MX_ADC3_Init+0x98>)
 8005372:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005376:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005378:	4b1d      	ldr	r3, [pc, #116]	@ (80053f0 <MX_ADC3_Init+0x98>)
 800537a:	2200      	movs	r2, #0
 800537c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800537e:	4b1c      	ldr	r3, [pc, #112]	@ (80053f0 <MX_ADC3_Init+0x98>)
 8005380:	2200      	movs	r2, #0
 8005382:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8005384:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <MX_ADC3_Init+0x98>)
 8005386:	2200      	movs	r2, #0
 8005388:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800538a:	4b19      	ldr	r3, [pc, #100]	@ (80053f0 <MX_ADC3_Init+0x98>)
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005392:	4b17      	ldr	r3, [pc, #92]	@ (80053f0 <MX_ADC3_Init+0x98>)
 8005394:	2200      	movs	r2, #0
 8005396:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005398:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <MX_ADC3_Init+0x98>)
 800539a:	4a17      	ldr	r2, [pc, #92]	@ (80053f8 <MX_ADC3_Init+0xa0>)
 800539c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800539e:	4b14      	ldr	r3, [pc, #80]	@ (80053f0 <MX_ADC3_Init+0x98>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80053a4:	4b12      	ldr	r3, [pc, #72]	@ (80053f0 <MX_ADC3_Init+0x98>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80053aa:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <MX_ADC3_Init+0x98>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80053b2:	4b0f      	ldr	r3, [pc, #60]	@ (80053f0 <MX_ADC3_Init+0x98>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80053b8:	480d      	ldr	r0, [pc, #52]	@ (80053f0 <MX_ADC3_Init+0x98>)
 80053ba:	f002 fd8d 	bl	8007ed8 <HAL_ADC_Init>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80053c4:	f000 fbf2 	bl	8005bac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80053c8:	230b      	movs	r3, #11
 80053ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80053cc:	2301      	movs	r3, #1
 80053ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80053d4:	463b      	mov	r3, r7
 80053d6:	4619      	mov	r1, r3
 80053d8:	4805      	ldr	r0, [pc, #20]	@ (80053f0 <MX_ADC3_Init+0x98>)
 80053da:	f002 ff5f 	bl	800829c <HAL_ADC_ConfigChannel>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80053e4:	f000 fbe2 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	200013dc 	.word	0x200013dc
 80053f4:	40012200 	.word	0x40012200
 80053f8:	0f000001 	.word	0x0f000001

080053fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005400:	4b12      	ldr	r3, [pc, #72]	@ (800544c <MX_I2C1_Init+0x50>)
 8005402:	4a13      	ldr	r2, [pc, #76]	@ (8005450 <MX_I2C1_Init+0x54>)
 8005404:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005406:	4b11      	ldr	r3, [pc, #68]	@ (800544c <MX_I2C1_Init+0x50>)
 8005408:	4a12      	ldr	r2, [pc, #72]	@ (8005454 <MX_I2C1_Init+0x58>)
 800540a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800540c:	4b0f      	ldr	r3, [pc, #60]	@ (800544c <MX_I2C1_Init+0x50>)
 800540e:	2200      	movs	r2, #0
 8005410:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005412:	4b0e      	ldr	r3, [pc, #56]	@ (800544c <MX_I2C1_Init+0x50>)
 8005414:	2200      	movs	r2, #0
 8005416:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005418:	4b0c      	ldr	r3, [pc, #48]	@ (800544c <MX_I2C1_Init+0x50>)
 800541a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800541e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005420:	4b0a      	ldr	r3, [pc, #40]	@ (800544c <MX_I2C1_Init+0x50>)
 8005422:	2200      	movs	r2, #0
 8005424:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005426:	4b09      	ldr	r3, [pc, #36]	@ (800544c <MX_I2C1_Init+0x50>)
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800542c:	4b07      	ldr	r3, [pc, #28]	@ (800544c <MX_I2C1_Init+0x50>)
 800542e:	2200      	movs	r2, #0
 8005430:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005432:	4b06      	ldr	r3, [pc, #24]	@ (800544c <MX_I2C1_Init+0x50>)
 8005434:	2200      	movs	r2, #0
 8005436:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005438:	4804      	ldr	r0, [pc, #16]	@ (800544c <MX_I2C1_Init+0x50>)
 800543a:	f004 f9d5 	bl	80097e8 <HAL_I2C_Init>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005444:	f000 fbb2 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005448:	bf00      	nop
 800544a:	bd80      	pop	{r7, pc}
 800544c:	20001424 	.word	0x20001424
 8005450:	40005400 	.word	0x40005400
 8005454:	000186a0 	.word	0x000186a0

08005458 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800545c:	4b12      	ldr	r3, [pc, #72]	@ (80054a8 <MX_I2C3_Init+0x50>)
 800545e:	4a13      	ldr	r2, [pc, #76]	@ (80054ac <MX_I2C3_Init+0x54>)
 8005460:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8005462:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <MX_I2C3_Init+0x50>)
 8005464:	4a12      	ldr	r2, [pc, #72]	@ (80054b0 <MX_I2C3_Init+0x58>)
 8005466:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005468:	4b0f      	ldr	r3, [pc, #60]	@ (80054a8 <MX_I2C3_Init+0x50>)
 800546a:	2200      	movs	r2, #0
 800546c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800546e:	4b0e      	ldr	r3, [pc, #56]	@ (80054a8 <MX_I2C3_Init+0x50>)
 8005470:	2200      	movs	r2, #0
 8005472:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <MX_I2C3_Init+0x50>)
 8005476:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800547a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800547c:	4b0a      	ldr	r3, [pc, #40]	@ (80054a8 <MX_I2C3_Init+0x50>)
 800547e:	2200      	movs	r2, #0
 8005480:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8005482:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <MX_I2C3_Init+0x50>)
 8005484:	2200      	movs	r2, #0
 8005486:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005488:	4b07      	ldr	r3, [pc, #28]	@ (80054a8 <MX_I2C3_Init+0x50>)
 800548a:	2200      	movs	r2, #0
 800548c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800548e:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <MX_I2C3_Init+0x50>)
 8005490:	2200      	movs	r2, #0
 8005492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005494:	4804      	ldr	r0, [pc, #16]	@ (80054a8 <MX_I2C3_Init+0x50>)
 8005496:	f004 f9a7 	bl	80097e8 <HAL_I2C_Init>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80054a0:	f000 fb84 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20001478 	.word	0x20001478
 80054ac:	40005c00 	.word	0x40005c00
 80054b0:	000186a0 	.word	0x000186a0

080054b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80054ba:	f107 0308 	add.w	r3, r7, #8
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	605a      	str	r2, [r3, #4]
 80054c4:	609a      	str	r2, [r3, #8]
 80054c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054c8:	463b      	mov	r3, r7
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
 80054ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80054d0:	4b1e      	ldr	r3, [pc, #120]	@ (800554c <MX_TIM2_Init+0x98>)
 80054d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80054d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 80054d8:	4b1c      	ldr	r3, [pc, #112]	@ (800554c <MX_TIM2_Init+0x98>)
 80054da:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80054de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054e0:	4b1a      	ldr	r3, [pc, #104]	@ (800554c <MX_TIM2_Init+0x98>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80054e6:	4b19      	ldr	r3, [pc, #100]	@ (800554c <MX_TIM2_Init+0x98>)
 80054e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80054ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80054ee:	4b17      	ldr	r3, [pc, #92]	@ (800554c <MX_TIM2_Init+0x98>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054f4:	4b15      	ldr	r3, [pc, #84]	@ (800554c <MX_TIM2_Init+0x98>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80054fa:	4814      	ldr	r0, [pc, #80]	@ (800554c <MX_TIM2_Init+0x98>)
 80054fc:	f007 fe24 	bl	800d148 <HAL_TIM_Base_Init>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005506:	f000 fb51 	bl	8005bac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800550a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800550e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005510:	f107 0308 	add.w	r3, r7, #8
 8005514:	4619      	mov	r1, r3
 8005516:	480d      	ldr	r0, [pc, #52]	@ (800554c <MX_TIM2_Init+0x98>)
 8005518:	f007 ffc6 	bl	800d4a8 <HAL_TIM_ConfigClockSource>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005522:	f000 fb43 	bl	8005bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005526:	2300      	movs	r3, #0
 8005528:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800552a:	2300      	movs	r3, #0
 800552c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800552e:	463b      	mov	r3, r7
 8005530:	4619      	mov	r1, r3
 8005532:	4806      	ldr	r0, [pc, #24]	@ (800554c <MX_TIM2_Init+0x98>)
 8005534:	f008 f9e8 	bl	800d908 <HAL_TIMEx_MasterConfigSynchronization>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800553e:	f000 fb35 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005542:	bf00      	nop
 8005544:	3718      	adds	r7, #24
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	2000152c 	.word	0x2000152c

08005550 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005554:	4b11      	ldr	r3, [pc, #68]	@ (800559c <MX_UART4_Init+0x4c>)
 8005556:	4a12      	ldr	r2, [pc, #72]	@ (80055a0 <MX_UART4_Init+0x50>)
 8005558:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800555a:	4b10      	ldr	r3, [pc, #64]	@ (800559c <MX_UART4_Init+0x4c>)
 800555c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005560:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005562:	4b0e      	ldr	r3, [pc, #56]	@ (800559c <MX_UART4_Init+0x4c>)
 8005564:	2200      	movs	r2, #0
 8005566:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005568:	4b0c      	ldr	r3, [pc, #48]	@ (800559c <MX_UART4_Init+0x4c>)
 800556a:	2200      	movs	r2, #0
 800556c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800556e:	4b0b      	ldr	r3, [pc, #44]	@ (800559c <MX_UART4_Init+0x4c>)
 8005570:	2200      	movs	r2, #0
 8005572:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005574:	4b09      	ldr	r3, [pc, #36]	@ (800559c <MX_UART4_Init+0x4c>)
 8005576:	220c      	movs	r2, #12
 8005578:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800557a:	4b08      	ldr	r3, [pc, #32]	@ (800559c <MX_UART4_Init+0x4c>)
 800557c:	2200      	movs	r2, #0
 800557e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005580:	4b06      	ldr	r3, [pc, #24]	@ (800559c <MX_UART4_Init+0x4c>)
 8005582:	2200      	movs	r2, #0
 8005584:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005586:	4805      	ldr	r0, [pc, #20]	@ (800559c <MX_UART4_Init+0x4c>)
 8005588:	f008 fa4e 	bl	800da28 <HAL_UART_Init>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8005592:	f000 fb0b 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8005596:	bf00      	nop
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	20001574 	.word	0x20001574
 80055a0:	40004c00 	.word	0x40004c00

080055a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80055a8:	4b11      	ldr	r3, [pc, #68]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055aa:	4a12      	ldr	r2, [pc, #72]	@ (80055f4 <MX_USART2_UART_Init+0x50>)
 80055ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80055ae:	4b10      	ldr	r3, [pc, #64]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80055b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80055b6:	4b0e      	ldr	r3, [pc, #56]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80055bc:	4b0c      	ldr	r3, [pc, #48]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055be:	2200      	movs	r2, #0
 80055c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80055c2:	4b0b      	ldr	r3, [pc, #44]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055ca:	220c      	movs	r2, #12
 80055cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80055ce:	4b08      	ldr	r3, [pc, #32]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80055d4:	4b06      	ldr	r3, [pc, #24]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80055da:	4805      	ldr	r0, [pc, #20]	@ (80055f0 <MX_USART2_UART_Init+0x4c>)
 80055dc:	f008 fa24 	bl	800da28 <HAL_UART_Init>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80055e6:	f000 fae1 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80055ea:	bf00      	nop
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	200015bc 	.word	0x200015bc
 80055f4:	40004400 	.word	0x40004400

080055f8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80055fc:	4b11      	ldr	r3, [pc, #68]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 80055fe:	4a12      	ldr	r2, [pc, #72]	@ (8005648 <MX_USART6_UART_Init+0x50>)
 8005600:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8005602:	4b10      	ldr	r3, [pc, #64]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 8005604:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8005608:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800560a:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 800560c:	2200      	movs	r2, #0
 800560e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005610:	4b0c      	ldr	r3, [pc, #48]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 8005612:	2200      	movs	r2, #0
 8005614:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8005616:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 8005618:	2200      	movs	r2, #0
 800561a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800561c:	4b09      	ldr	r3, [pc, #36]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 800561e:	220c      	movs	r2, #12
 8005620:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005622:	4b08      	ldr	r3, [pc, #32]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 8005624:	2200      	movs	r2, #0
 8005626:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005628:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 800562a:	2200      	movs	r2, #0
 800562c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800562e:	4805      	ldr	r0, [pc, #20]	@ (8005644 <MX_USART6_UART_Init+0x4c>)
 8005630:	f008 f9fa 	bl	800da28 <HAL_UART_Init>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800563a:	f000 fab7 	bl	8005bac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800563e:	bf00      	nop
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	20001604 	.word	0x20001604
 8005648:	40011400 	.word	0x40011400

0800564c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005652:	2300      	movs	r3, #0
 8005654:	607b      	str	r3, [r7, #4]
 8005656:	4b1f      	ldr	r3, [pc, #124]	@ (80056d4 <MX_DMA_Init+0x88>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565a:	4a1e      	ldr	r2, [pc, #120]	@ (80056d4 <MX_DMA_Init+0x88>)
 800565c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005660:	6313      	str	r3, [r2, #48]	@ 0x30
 8005662:	4b1c      	ldr	r3, [pc, #112]	@ (80056d4 <MX_DMA_Init+0x88>)
 8005664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005666:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800566e:	2300      	movs	r3, #0
 8005670:	603b      	str	r3, [r7, #0]
 8005672:	4b18      	ldr	r3, [pc, #96]	@ (80056d4 <MX_DMA_Init+0x88>)
 8005674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005676:	4a17      	ldr	r2, [pc, #92]	@ (80056d4 <MX_DMA_Init+0x88>)
 8005678:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800567c:	6313      	str	r3, [r2, #48]	@ 0x30
 800567e:	4b15      	ldr	r3, [pc, #84]	@ (80056d4 <MX_DMA_Init+0x88>)
 8005680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005682:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800568a:	2200      	movs	r2, #0
 800568c:	2100      	movs	r1, #0
 800568e:	200b      	movs	r0, #11
 8005690:	f003 f931 	bl	80088f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005694:	200b      	movs	r0, #11
 8005696:	f003 f94a 	bl	800892e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800569a:	2200      	movs	r2, #0
 800569c:	2100      	movs	r1, #0
 800569e:	200f      	movs	r0, #15
 80056a0:	f003 f929 	bl	80088f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80056a4:	200f      	movs	r0, #15
 80056a6:	f003 f942 	bl	800892e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80056aa:	2200      	movs	r2, #0
 80056ac:	2100      	movs	r1, #0
 80056ae:	2011      	movs	r0, #17
 80056b0:	f003 f921 	bl	80088f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80056b4:	2011      	movs	r0, #17
 80056b6:	f003 f93a 	bl	800892e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80056ba:	2200      	movs	r2, #0
 80056bc:	2100      	movs	r1, #0
 80056be:	203a      	movs	r0, #58	@ 0x3a
 80056c0:	f003 f919 	bl	80088f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80056c4:	203a      	movs	r0, #58	@ 0x3a
 80056c6:	f003 f932 	bl	800892e <HAL_NVIC_EnableIRQ>

}
 80056ca:	bf00      	nop
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40023800 	.word	0x40023800

080056d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b08a      	sub	sp, #40	@ 0x28
 80056dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056de:	f107 0314 	add.w	r3, r7, #20
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	605a      	str	r2, [r3, #4]
 80056e8:	609a      	str	r2, [r3, #8]
 80056ea:	60da      	str	r2, [r3, #12]
 80056ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80056ee:	2300      	movs	r3, #0
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	4b3f      	ldr	r3, [pc, #252]	@ (80057f0 <MX_GPIO_Init+0x118>)
 80056f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f6:	4a3e      	ldr	r2, [pc, #248]	@ (80057f0 <MX_GPIO_Init+0x118>)
 80056f8:	f043 0304 	orr.w	r3, r3, #4
 80056fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80056fe:	4b3c      	ldr	r3, [pc, #240]	@ (80057f0 <MX_GPIO_Init+0x118>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005702:	f003 0304 	and.w	r3, r3, #4
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	4b38      	ldr	r3, [pc, #224]	@ (80057f0 <MX_GPIO_Init+0x118>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005712:	4a37      	ldr	r2, [pc, #220]	@ (80057f0 <MX_GPIO_Init+0x118>)
 8005714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005718:	6313      	str	r3, [r2, #48]	@ 0x30
 800571a:	4b35      	ldr	r3, [pc, #212]	@ (80057f0 <MX_GPIO_Init+0x118>)
 800571c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005722:	60fb      	str	r3, [r7, #12]
 8005724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	4b31      	ldr	r3, [pc, #196]	@ (80057f0 <MX_GPIO_Init+0x118>)
 800572c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572e:	4a30      	ldr	r2, [pc, #192]	@ (80057f0 <MX_GPIO_Init+0x118>)
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	6313      	str	r3, [r2, #48]	@ 0x30
 8005736:	4b2e      	ldr	r3, [pc, #184]	@ (80057f0 <MX_GPIO_Init+0x118>)
 8005738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	607b      	str	r3, [r7, #4]
 8005746:	4b2a      	ldr	r3, [pc, #168]	@ (80057f0 <MX_GPIO_Init+0x118>)
 8005748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800574a:	4a29      	ldr	r2, [pc, #164]	@ (80057f0 <MX_GPIO_Init+0x118>)
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	6313      	str	r3, [r2, #48]	@ 0x30
 8005752:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <MX_GPIO_Init+0x118>)
 8005754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005756:	f003 0302 	and.w	r3, r3, #2
 800575a:	607b      	str	r3, [r7, #4]
 800575c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 800575e:	2200      	movs	r2, #0
 8005760:	210c      	movs	r1, #12
 8005762:	4824      	ldr	r0, [pc, #144]	@ (80057f4 <MX_GPIO_Init+0x11c>)
 8005764:	f004 f80e 	bl	8009784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005768:	2200      	movs	r2, #0
 800576a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800576e:	4822      	ldr	r0, [pc, #136]	@ (80057f8 <MX_GPIO_Init+0x120>)
 8005770:	f004 f808 	bl	8009784 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 8005774:	230c      	movs	r3, #12
 8005776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005778:	2301      	movs	r3, #1
 800577a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577c:	2300      	movs	r3, #0
 800577e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005780:	2300      	movs	r3, #0
 8005782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005784:	f107 0314 	add.w	r3, r7, #20
 8005788:	4619      	mov	r1, r3
 800578a:	481a      	ldr	r0, [pc, #104]	@ (80057f4 <MX_GPIO_Init+0x11c>)
 800578c:	f003 fd72 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005796:	2301      	movs	r3, #1
 8005798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800579e:	2303      	movs	r3, #3
 80057a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057a2:	f107 0314 	add.w	r3, r7, #20
 80057a6:	4619      	mov	r1, r3
 80057a8:	4813      	ldr	r0, [pc, #76]	@ (80057f8 <MX_GPIO_Init+0x120>)
 80057aa:	f003 fd63 	bl	8009274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80057ae:	2318      	movs	r3, #24
 80057b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80057b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80057b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057bc:	f107 0314 	add.w	r3, r7, #20
 80057c0:	4619      	mov	r1, r3
 80057c2:	480d      	ldr	r0, [pc, #52]	@ (80057f8 <MX_GPIO_Init+0x120>)
 80057c4:	f003 fd56 	bl	8009274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80057c8:	2200      	movs	r2, #0
 80057ca:	2100      	movs	r1, #0
 80057cc:	2009      	movs	r0, #9
 80057ce:	f003 f892 	bl	80088f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80057d2:	2009      	movs	r0, #9
 80057d4:	f003 f8ab 	bl	800892e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80057d8:	2200      	movs	r2, #0
 80057da:	2100      	movs	r1, #0
 80057dc:	200a      	movs	r0, #10
 80057de:	f003 f88a 	bl	80088f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80057e2:	200a      	movs	r0, #10
 80057e4:	f003 f8a3 	bl	800892e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80057e8:	bf00      	nop
 80057ea:	3728      	adds	r7, #40	@ 0x28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40020800 	.word	0x40020800
 80057f8:	40020400 	.word	0x40020400

080057fc <lora_init>:
/**
 * @brief Initialize LoRa E22 module
 * @note Configures LoRa module for telemetry transmission
 */
void lora_init(void)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	af00      	add	r7, sp, #0
	lora_1.baud_rate 		= 	E22_BAUD_RATE_115200;
 8005800:	4b1e      	ldr	r3, [pc, #120]	@ (800587c <lora_init+0x80>)
 8005802:	2207      	movs	r2, #7
 8005804:	73da      	strb	r2, [r3, #15]
	lora_1.parity_bit		=	E22_PARITY_8N1;
 8005806:	4b1d      	ldr	r3, [pc, #116]	@ (800587c <lora_init+0x80>)
 8005808:	2200      	movs	r2, #0
 800580a:	741a      	strb	r2, [r3, #16]
	lora_1.air_rate			=	E22_AIR_DATA_RATE_38400;
 800580c:	4b1b      	ldr	r3, [pc, #108]	@ (800587c <lora_init+0x80>)
 800580e:	2206      	movs	r2, #6
 8005810:	745a      	strb	r2, [r3, #17]
	lora_1.packet_size		=	E22_PACKET_SIZE_64;
 8005812:	4b1a      	ldr	r3, [pc, #104]	@ (800587c <lora_init+0x80>)
 8005814:	2202      	movs	r2, #2
 8005816:	749a      	strb	r2, [r3, #18]
	lora_1.rssi_noise		=	E22_RSSI_NOISE_DISABLE;
 8005818:	4b18      	ldr	r3, [pc, #96]	@ (800587c <lora_init+0x80>)
 800581a:	2200      	movs	r2, #0
 800581c:	74da      	strb	r2, [r3, #19]
	lora_1.power			=	E22_TRANSMITTING_POWER_22;
 800581e:	4b17      	ldr	r3, [pc, #92]	@ (800587c <lora_init+0x80>)
 8005820:	2200      	movs	r2, #0
 8005822:	751a      	strb	r2, [r3, #20]
	lora_1.rssi_enable		=	E22_ENABLE_RSSI_DISABLE;
 8005824:	4b15      	ldr	r3, [pc, #84]	@ (800587c <lora_init+0x80>)
 8005826:	2200      	movs	r2, #0
 8005828:	759a      	strb	r2, [r3, #22]
	lora_1.mode				= 	E22_TRANSMISSION_MODE_TRANSPARENT;
 800582a:	4b14      	ldr	r3, [pc, #80]	@ (800587c <lora_init+0x80>)
 800582c:	2200      	movs	r2, #0
 800582e:	75da      	strb	r2, [r3, #23]
	lora_1.repeater_func	=	E22_REPEATER_FUNC_DISABLE;
 8005830:	4b12      	ldr	r3, [pc, #72]	@ (800587c <lora_init+0x80>)
 8005832:	2200      	movs	r2, #0
 8005834:	761a      	strb	r2, [r3, #24]
	lora_1.lbt				=	E22_LBT_DISABLE;
 8005836:	4b11      	ldr	r3, [pc, #68]	@ (800587c <lora_init+0x80>)
 8005838:	2200      	movs	r2, #0
 800583a:	765a      	strb	r2, [r3, #25]
	lora_1.wor				=	E22_WOR_RECEIVER;
 800583c:	4b0f      	ldr	r3, [pc, #60]	@ (800587c <lora_init+0x80>)
 800583e:	2200      	movs	r2, #0
 8005840:	769a      	strb	r2, [r3, #26]
	lora_1.wor_cycle		=	E22_WOR_CYCLE_1000;
 8005842:	4b0e      	ldr	r3, [pc, #56]	@ (800587c <lora_init+0x80>)
 8005844:	2201      	movs	r2, #1
 8005846:	76da      	strb	r2, [r3, #27]
	lora_1.channel			=	25;
 8005848:	4b0c      	ldr	r3, [pc, #48]	@ (800587c <lora_init+0x80>)
 800584a:	2219      	movs	r2, #25
 800584c:	755a      	strb	r2, [r3, #21]

	e22_init(&lora_1, &huart4);
 800584e:	490c      	ldr	r1, [pc, #48]	@ (8005880 <lora_init+0x84>)
 8005850:	480a      	ldr	r0, [pc, #40]	@ (800587c <lora_init+0x80>)
 8005852:	f7fd fbcb 	bl	8002fec <e22_init>

	HAL_UART_DeInit(&huart4);
 8005856:	480a      	ldr	r0, [pc, #40]	@ (8005880 <lora_init+0x84>)
 8005858:	f008 f936 	bl	800dac8 <HAL_UART_DeInit>
	HAL_Delay(20);
 800585c:	2014      	movs	r0, #20
 800585e:	f002 fb17 	bl	8007e90 <HAL_Delay>
	huart4.Init.BaudRate = 115200;
 8005862:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <lora_init+0x84>)
 8005864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005868:	605a      	str	r2, [r3, #4]
	HAL_Delay(20);
 800586a:	2014      	movs	r0, #20
 800586c:	f002 fb10 	bl	8007e90 <HAL_Delay>
	HAL_UART_Init(&huart4);
 8005870:	4803      	ldr	r0, [pc, #12]	@ (8005880 <lora_init+0x84>)
 8005872:	f008 f8d9 	bl	800da28 <HAL_UART_Init>

}
 8005876:	bf00      	nop
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	200018d0 	.word	0x200018d0
 8005880:	20001574 	.word	0x20001574

08005884 <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_2;
 8005888:	4b08      	ldr	r3, [pc, #32]	@ (80058ac <bme280_begin+0x28>)
 800588a:	2201      	movs	r2, #1
 800588c:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 800588e:	4b07      	ldr	r3, [pc, #28]	@ (80058ac <bme280_begin+0x28>)
 8005890:	2203      	movs	r2, #3
 8005892:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_4;
 8005894:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <bme280_begin+0x28>)
 8005896:	2203      	movs	r2, #3
 8005898:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_125;
 800589a:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <bme280_begin+0x28>)
 800589c:	2202      	movs	r2, #2
 800589e:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 80058a0:	4903      	ldr	r1, [pc, #12]	@ (80058b0 <bme280_begin+0x2c>)
 80058a2:	4802      	ldr	r0, [pc, #8]	@ (80058ac <bme280_begin+0x28>)
 80058a4:	f7fb ff76 	bl	8001794 <bme280_init>
}
 80058a8:	bf00      	nop
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	2000176c 	.word	0x2000176c
 80058b0:	20001478 	.word	0x20001478

080058b4 <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 80058b8:	4b13      	ldr	r3, [pc, #76]	@ (8005908 <bmi_imu_init+0x54>)
 80058ba:	2208      	movs	r2, #8
 80058bc:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 80058be:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <bmi_imu_init+0x54>)
 80058c0:	2209      	movs	r2, #9
 80058c2:	72da      	strb	r2, [r3, #11]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 80058c4:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <bmi_imu_init+0x54>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	721a      	strb	r2, [r3, #8]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 80058ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <bmi_imu_init+0x54>)
 80058cc:	2203      	movs	r2, #3
 80058ce:	725a      	strb	r2, [r3, #9]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 80058d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <bmi_imu_init+0x54>)
 80058d2:	2202      	movs	r2, #2
 80058d4:	735a      	strb	r2, [r3, #13]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 80058d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005908 <bmi_imu_init+0x54>)
 80058d8:	2200      	movs	r2, #0
 80058da:	739a      	strb	r2, [r3, #14]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 80058dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <bmi_imu_init+0x54>)
 80058de:	2200      	movs	r2, #0
 80058e0:	731a      	strb	r2, [r3, #12]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 80058e2:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <bmi_imu_init+0x54>)
 80058e4:	2209      	movs	r2, #9
 80058e6:	751a      	strb	r2, [r3, #20]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 80058e8:	4b07      	ldr	r3, [pc, #28]	@ (8005908 <bmi_imu_init+0x54>)
 80058ea:	220a      	movs	r2, #10
 80058ec:	755a      	strb	r2, [r3, #21]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 80058ee:	4b06      	ldr	r3, [pc, #24]	@ (8005908 <bmi_imu_init+0x54>)
 80058f0:	4a06      	ldr	r2, [pc, #24]	@ (800590c <bmi_imu_init+0x58>)
 80058f2:	611a      	str	r2, [r3, #16]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 80058f4:	4b04      	ldr	r3, [pc, #16]	@ (8005908 <bmi_imu_init+0x54>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	619a      	str	r2, [r3, #24]

  return bmi088_init(&BMI_sensor);
 80058fa:	4803      	ldr	r0, [pc, #12]	@ (8005908 <bmi_imu_init+0x54>)
 80058fc:	f7fc fbaa 	bl	8002054 <bmi088_init>
 8005900:	4603      	mov	r3, r0
}
 8005902:	4618      	mov	r0, r3
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200017b0 	.word	0x200017b0
 800590c:	20001424 	.word	0x20001424

08005910 <read_ADC>:
/**
 * @brief Read HMC1021 magnetometer ADC values
 * @note Converts ADC readings to magnetic field strength and transmits data
 */
void read_ADC()
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
    static uint16_t adc1_raw = 0;  // ADC1 değeri (Channel 9)
    static uint16_t adc2_raw = 0;  // ADC1 değeri (Channel 9)
    static uint16_t adc3_raw = 0;  // ADC1 değeri (Channel 9)

    // ADC1 okuma
    HAL_ADC_Start(&hadc1);
 8005914:	483d      	ldr	r0, [pc, #244]	@ (8005a0c <read_ADC+0xfc>)
 8005916:	f002 fb23 	bl	8007f60 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK) {
 800591a:	2105      	movs	r1, #5
 800591c:	483b      	ldr	r0, [pc, #236]	@ (8005a0c <read_ADC+0xfc>)
 800591e:	f002 fc24 	bl	800816a <HAL_ADC_PollForConversion>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d106      	bne.n	8005936 <read_ADC+0x26>
        adc1_raw = HAL_ADC_GetValue(&hadc1);
 8005928:	4838      	ldr	r0, [pc, #224]	@ (8005a0c <read_ADC+0xfc>)
 800592a:	f002 fca9 	bl	8008280 <HAL_ADC_GetValue>
 800592e:	4603      	mov	r3, r0
 8005930:	b29a      	uxth	r2, r3
 8005932:	4b37      	ldr	r3, [pc, #220]	@ (8005a10 <read_ADC+0x100>)
 8005934:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc1);
 8005936:	4835      	ldr	r0, [pc, #212]	@ (8005a0c <read_ADC+0xfc>)
 8005938:	f002 fbe4 	bl	8008104 <HAL_ADC_Stop>


    // ADC2 okuma
    HAL_ADC_Start(&hadc2);
 800593c:	4835      	ldr	r0, [pc, #212]	@ (8005a14 <read_ADC+0x104>)
 800593e:	f002 fb0f 	bl	8007f60 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, 5) == HAL_OK) {
 8005942:	2105      	movs	r1, #5
 8005944:	4833      	ldr	r0, [pc, #204]	@ (8005a14 <read_ADC+0x104>)
 8005946:	f002 fc10 	bl	800816a <HAL_ADC_PollForConversion>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d106      	bne.n	800595e <read_ADC+0x4e>
        adc2_raw = HAL_ADC_GetValue(&hadc2);
 8005950:	4830      	ldr	r0, [pc, #192]	@ (8005a14 <read_ADC+0x104>)
 8005952:	f002 fc95 	bl	8008280 <HAL_ADC_GetValue>
 8005956:	4603      	mov	r3, r0
 8005958:	b29a      	uxth	r2, r3
 800595a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a18 <read_ADC+0x108>)
 800595c:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc2);
 800595e:	482d      	ldr	r0, [pc, #180]	@ (8005a14 <read_ADC+0x104>)
 8005960:	f002 fbd0 	bl	8008104 <HAL_ADC_Stop>


    // ADC1 okuma
    HAL_ADC_Start(&hadc3);
 8005964:	482d      	ldr	r0, [pc, #180]	@ (8005a1c <read_ADC+0x10c>)
 8005966:	f002 fafb 	bl	8007f60 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc3, 5) == HAL_OK) {
 800596a:	2105      	movs	r1, #5
 800596c:	482b      	ldr	r0, [pc, #172]	@ (8005a1c <read_ADC+0x10c>)
 800596e:	f002 fbfc 	bl	800816a <HAL_ADC_PollForConversion>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <read_ADC+0x76>
        adc3_raw = HAL_ADC_GetValue(&hadc3);
 8005978:	4828      	ldr	r0, [pc, #160]	@ (8005a1c <read_ADC+0x10c>)
 800597a:	f002 fc81 	bl	8008280 <HAL_ADC_GetValue>
 800597e:	4603      	mov	r3, r0
 8005980:	b29a      	uxth	r2, r3
 8005982:	4b27      	ldr	r3, [pc, #156]	@ (8005a20 <read_ADC+0x110>)
 8005984:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc3);
 8005986:	4825      	ldr	r0, [pc, #148]	@ (8005a1c <read_ADC+0x10c>)
 8005988:	f002 fbbc 	bl	8008104 <HAL_ADC_Stop>


    // Kalibrasyonlu değerleri hesapla
    hmc1021_voltage = (adc1_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 800598c:	4b20      	ldr	r3, [pc, #128]	@ (8005a10 <read_ADC+0x100>)
 800598e:	881b      	ldrh	r3, [r3, #0]
 8005990:	ee07 3a90 	vmov	s15, r3
 8005994:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005998:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8005a24 <read_ADC+0x114>
 800599c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059a0:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8005a28 <read_ADC+0x118>
 80059a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059a8:	4b20      	ldr	r3, [pc, #128]	@ (8005a2c <read_ADC+0x11c>)
 80059aa:	edc3 7a00 	vstr	s15, [r3]
    voltage_V = (adc2_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 80059ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005a18 <read_ADC+0x108>)
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ba:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005a24 <read_ADC+0x114>
 80059be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059c2:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8005a28 <read_ADC+0x118>
 80059c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059ca:	4b19      	ldr	r3, [pc, #100]	@ (8005a30 <read_ADC+0x120>)
 80059cc:	edc3 7a00 	vstr	s15, [r3]
    current_mA = (adc3_raw * 330.0f) / 4096.0f; // Gerekirse akım sensörüne göre kalibre edin
 80059d0:	4b13      	ldr	r3, [pc, #76]	@ (8005a20 <read_ADC+0x110>)
 80059d2:	881b      	ldrh	r3, [r3, #0]
 80059d4:	ee07 3a90 	vmov	s15, r3
 80059d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059dc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8005a34 <read_ADC+0x124>
 80059e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80059e4:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8005a28 <read_ADC+0x118>
 80059e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059ec:	4b12      	ldr	r3, [pc, #72]	@ (8005a38 <read_ADC+0x128>)
 80059ee:	edc3 7a00 	vstr	s15, [r3]
    hmc1021_gauss = (hmc1021_voltage - 1.65f) / 1.0f;  // 1V/Gauss sensitivity
 80059f2:	4b0e      	ldr	r3, [pc, #56]	@ (8005a2c <read_ADC+0x11c>)
 80059f4:	edd3 7a00 	vldr	s15, [r3]
 80059f8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005a3c <read_ADC+0x12c>
 80059fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a00:	4b0f      	ldr	r3, [pc, #60]	@ (8005a40 <read_ADC+0x130>)
 8005a02:	edc3 7a00 	vstr	s15, [r3]

}
 8005a06:	bf00      	nop
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	2000134c 	.word	0x2000134c
 8005a10:	20001908 	.word	0x20001908
 8005a14:	20001394 	.word	0x20001394
 8005a18:	2000190a 	.word	0x2000190a
 8005a1c:	200013dc 	.word	0x200013dc
 8005a20:	2000190c 	.word	0x2000190c
 8005a24:	40533333 	.word	0x40533333
 8005a28:	45800000 	.word	0x45800000
 8005a2c:	20001900 	.word	0x20001900
 8005a30:	200018fc 	.word	0x200018fc
 8005a34:	43a50000 	.word	0x43a50000
 8005a38:	200018f8 	.word	0x200018f8
 8005a3c:	3fd33333 	.word	0x3fd33333
 8005a40:	20001904 	.word	0x20001904

08005a44 <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_3)
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d102      	bne.n	8005a5a <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 8005a54:	4806      	ldr	r0, [pc, #24]	@ (8005a70 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005a56:	f7fd f8d5 	bl	8002c04 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_4)
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	2b10      	cmp	r3, #16
 8005a5e:	d102      	bne.n	8005a66 <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 8005a60:	4803      	ldr	r0, [pc, #12]	@ (8005a70 <HAL_GPIO_EXTI_Callback+0x2c>)
 8005a62:	f7fd f8dc 	bl	8002c1e <bmi088_set_gyro_INT>
  }
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	200017b0 	.word	0x200017b0

08005a74 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a84:	d10d      	bne.n	8005aa2 <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 8005a86:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	b2da      	uxtb	r2, r3
 8005a90:	4b07      	ldr	r3, [pc, #28]	@ (8005ab0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005a92:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 8005a94:	4b07      	ldr	r3, [pc, #28]	@ (8005ab4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005aa0:	701a      	strb	r2, [r3, #0]
  }
}
 8005aa2:	bf00      	nop
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	200018f2 	.word	0x200018f2
 8005ab4:	200018f3 	.word	0x200018f3

08005ab8 <HAL_UART_TxCpltCallback>:
 * @brief UART transmission complete callback
 * @param huart UART handle
 * @note Clears transmission busy flag
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a09      	ldr	r2, [pc, #36]	@ (8005aec <HAL_UART_TxCpltCallback+0x34>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d102      	bne.n	8005ad0 <HAL_UART_TxCpltCallback+0x18>
		usart4_tx_busy = 0;
 8005aca:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <HAL_UART_TxCpltCallback+0x38>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == USART2) {
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a07      	ldr	r2, [pc, #28]	@ (8005af4 <HAL_UART_TxCpltCallback+0x3c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d102      	bne.n	8005ae0 <HAL_UART_TxCpltCallback+0x28>
		usart2_tx_busy = 0;
 8005ada:	4b07      	ldr	r3, [pc, #28]	@ (8005af8 <HAL_UART_TxCpltCallback+0x40>)
 8005adc:	2200      	movs	r2, #0
 8005ade:	701a      	strb	r2, [r3, #0]
	}
}
 8005ae0:	bf00      	nop
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr
 8005aec:	40004c00 	.word	0x40004c00
 8005af0:	200018f0 	.word	0x200018f0
 8005af4:	40004400 	.word	0x40004400
 8005af8:	200018f1 	.word	0x200018f1

08005afc <HAL_I2C_MemRxCpltCallback>:
 * @brief I2C Memory read complete callback (DMA)
 * @param hi2c I2C handle
 * @note Handles BMI088 sensor data DMA transfer completion
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a0a      	ldr	r2, [pc, #40]	@ (8005b34 <HAL_I2C_MemRxCpltCallback+0x38>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10e      	bne.n	8005b2c <HAL_I2C_MemRxCpltCallback+0x30>
        if (hi2c->Devaddress == ACC_I2C_ADD) {
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b12:	2b30      	cmp	r3, #48	@ 0x30
 8005b14:	d103      	bne.n	8005b1e <HAL_I2C_MemRxCpltCallback+0x22>
            // Accelerometer data received (9 bytes: XYZ + sensor time)
            bmi088_accel_dma_complete_callback(&BMI_sensor);
 8005b16:	4808      	ldr	r0, [pc, #32]	@ (8005b38 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8005b18:	f7fd f90a 	bl	8002d30 <bmi088_accel_dma_complete_callback>
        else if (hi2c->Devaddress == GYRO_I2C_ADD) {
            // Gyroscope data received (6 bytes: XYZ)
            bmi088_gyro_dma_complete_callback(&BMI_sensor);
        }
    }
}
 8005b1c:	e006      	b.n	8005b2c <HAL_I2C_MemRxCpltCallback+0x30>
        else if (hi2c->Devaddress == GYRO_I2C_ADD) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b22:	2bd0      	cmp	r3, #208	@ 0xd0
 8005b24:	d102      	bne.n	8005b2c <HAL_I2C_MemRxCpltCallback+0x30>
            bmi088_gyro_dma_complete_callback(&BMI_sensor);
 8005b26:	4804      	ldr	r0, [pc, #16]	@ (8005b38 <HAL_I2C_MemRxCpltCallback+0x3c>)
 8005b28:	f7fd f915 	bl	8002d56 <bmi088_gyro_dma_complete_callback>
}
 8005b2c:	bf00      	nop
 8005b2e:	3708      	adds	r7, #8
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	40005400 	.word	0x40005400
 8005b38:	200017b0 	.word	0x200017b0

08005b3c <uart2_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void uart2_send_packet_dma(uint8_t *data, uint16_t size)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	460b      	mov	r3, r1
 8005b46:	807b      	strh	r3, [r7, #2]
	if (!usart2_tx_busy) {
 8005b48:	4b08      	ldr	r3, [pc, #32]	@ (8005b6c <uart2_send_packet_dma+0x30>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d108      	bne.n	8005b64 <uart2_send_packet_dma+0x28>
		usart2_tx_busy = 1;
 8005b52:	4b06      	ldr	r3, [pc, #24]	@ (8005b6c <uart2_send_packet_dma+0x30>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, data, size);
 8005b58:	887b      	ldrh	r3, [r7, #2]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	6879      	ldr	r1, [r7, #4]
 8005b5e:	4804      	ldr	r0, [pc, #16]	@ (8005b70 <uart2_send_packet_dma+0x34>)
 8005b60:	f008 f906 	bl	800dd70 <HAL_UART_Transmit_DMA>
	}
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	200018f1 	.word	0x200018f1
 8005b70:	200015bc 	.word	0x200015bc

08005b74 <lora_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void lora_send_packet_dma(uint8_t *data, uint16_t size)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	807b      	strh	r3, [r7, #2]
	if (!usart4_tx_busy) {
 8005b80:	4b08      	ldr	r3, [pc, #32]	@ (8005ba4 <lora_send_packet_dma+0x30>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d108      	bne.n	8005b9c <lora_send_packet_dma+0x28>
		usart4_tx_busy = 1;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <lora_send_packet_dma+0x30>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart4, data, size);
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	461a      	mov	r2, r3
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4804      	ldr	r0, [pc, #16]	@ (8005ba8 <lora_send_packet_dma+0x34>)
 8005b98:	f008 f8ea 	bl	800dd70 <HAL_UART_Transmit_DMA>
	}
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	200018f0 	.word	0x200018f0
 8005ba8:	20001574 	.word	0x20001574

08005bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005bb0:	b672      	cpsid	i
}
 8005bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005bb4:	bf00      	nop
 8005bb6:	e7fd      	b.n	8005bb4 <Error_Handler+0x8>

08005bb8 <check_sum_hesapla_normal>:
#include "packet.h"
#include <math.h>

unsigned char normal_paket[49];

unsigned char check_sum_hesapla_normal(int a){
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60bb      	str	r3, [r7, #8]
 8005bc8:	e00a      	b.n	8005be0 <check_sum_hesapla_normal+0x28>
        check_sum += normal_paket[i];
 8005bca:	4a0e      	ldr	r2, [pc, #56]	@ (8005c04 <check_sum_hesapla_normal+0x4c>)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4413      	add	r3, r2
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	60bb      	str	r3, [r7, #8]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	dbf0      	blt.n	8005bca <check_sum_hesapla_normal+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	425a      	negs	r2, r3
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	bf58      	it	pl
 8005bf2:	4253      	negpl	r3, r2
 8005bf4:	b2db      	uxtb	r3, r3
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20001910 	.word	0x20001910

08005c08 <addDataPacketNormal>:


void addDataPacketNormal(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor, gps_data_t* GPS, float hmc1021_gauss, float voltage, float current){
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b094      	sub	sp, #80	@ 0x50
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	61f8      	str	r0, [r7, #28]
 8005c10:	61b9      	str	r1, [r7, #24]
 8005c12:	617a      	str	r2, [r7, #20]
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	ed87 0a03 	vstr	s0, [r7, #12]
 8005c1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8005c1e:	ed87 1a01 	vstr	s2, [r7, #4]
  normal_paket[0] = 0xFF; // Sabit
 8005c22:	4b7f      	ldr	r3, [pc, #508]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c24:	22ff      	movs	r2, #255	@ 0xff
 8005c26:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	6a1b      	ldr	r3, [r3, #32]
 8005c2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  normal_paket[1] = irtifa_float32_uint8_donusturucu.array[0];
 8005c2e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8005c32:	4b7b      	ldr	r3, [pc, #492]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c34:	705a      	strb	r2, [r3, #1]
  normal_paket[2] = irtifa_float32_uint8_donusturucu.array[1];
 8005c36:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005c3a:	4b79      	ldr	r3, [pc, #484]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c3c:	709a      	strb	r2, [r3, #2]
  normal_paket[3] = irtifa_float32_uint8_donusturucu.array[2];
 8005c3e:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8005c42:	4b77      	ldr	r3, [pc, #476]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c44:	70da      	strb	r2, [r3, #3]
  normal_paket[4] = irtifa_float32_uint8_donusturucu.array[3];
 8005c46:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005c4a:	4b75      	ldr	r3, [pc, #468]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c4c:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
  roket_gps_irtifa_float32_uint8_donusturucu.sayi = (GPS->altitude); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  normal_paket[5] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 8005c54:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8005c58:	4b71      	ldr	r3, [pc, #452]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c5a:	715a      	strb	r2, [r3, #5]
  normal_paket[6] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 8005c5c:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005c60:	4b6f      	ldr	r3, [pc, #444]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c62:	719a      	strb	r2, [r3, #6]
  normal_paket[7] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 8005c64:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8005c68:	4b6d      	ldr	r3, [pc, #436]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c6a:	71da      	strb	r2, [r3, #7]
  normal_paket[8] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 8005c6c:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8005c70:	4b6b      	ldr	r3, [pc, #428]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c72:	721a      	strb	r2, [r3, #8]

   // Roket Enlem
  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
  roket_enlem_float32_uint8_donusturucu.sayi = (GPS->latitude); // Roket enlem degerinin atamasini yapiyoruz.
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c78:	647b      	str	r3, [r7, #68]	@ 0x44
  normal_paket[9] = roket_enlem_float32_uint8_donusturucu.array[0];
 8005c7a:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8005c7e:	4b68      	ldr	r3, [pc, #416]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c80:	725a      	strb	r2, [r3, #9]
  normal_paket[10] = roket_enlem_float32_uint8_donusturucu.array[1];
 8005c82:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005c86:	4b66      	ldr	r3, [pc, #408]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c88:	729a      	strb	r2, [r3, #10]
  normal_paket[11] = roket_enlem_float32_uint8_donusturucu.array[2];
 8005c8a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005c8e:	4b64      	ldr	r3, [pc, #400]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c90:	72da      	strb	r2, [r3, #11]
  normal_paket[12] = roket_enlem_float32_uint8_donusturucu.array[3];
 8005c92:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005c96:	4b62      	ldr	r3, [pc, #392]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005c98:	731a      	strb	r2, [r3, #12]

  // Roket Boylam
  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = (GPS->longitude); // Roket boylam degerinin atamasini yapiyoruz.
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9e:	643b      	str	r3, [r7, #64]	@ 0x40
  normal_paket[13] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 8005ca0:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8005ca4:	4b5e      	ldr	r3, [pc, #376]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005ca6:	735a      	strb	r2, [r3, #13]
  normal_paket[14] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 8005ca8:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8005cac:	4b5c      	ldr	r3, [pc, #368]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005cae:	739a      	strb	r2, [r3, #14]
  normal_paket[15] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 8005cb0:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8005cb4:	4b5a      	ldr	r3, [pc, #360]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005cb6:	73da      	strb	r2, [r3, #15]
  normal_paket[16] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 8005cb8:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8005cbc:	4b58      	ldr	r3, [pc, #352]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005cbe:	741a      	strb	r2, [r3, #16]


  FLOAT32_UINT8_DONUSTURUCU aci_float32_uint8_donusturucu;
  aci_float32_uint8_donusturucu.sayi = (BMI->datas.theta); // Theta acisinin atamasini yapiyoruz.
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  normal_paket[17] = aci_float32_uint8_donusturucu.array[0];
 8005cc6:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8005cca:	4b55      	ldr	r3, [pc, #340]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005ccc:	745a      	strb	r2, [r3, #17]
  normal_paket[18] = aci_float32_uint8_donusturucu.array[1];
 8005cce:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005cd2:	4b53      	ldr	r3, [pc, #332]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005cd4:	749a      	strb	r2, [r3, #18]
  normal_paket[19] = aci_float32_uint8_donusturucu.array[2];
 8005cd6:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8005cda:	4b51      	ldr	r3, [pc, #324]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005cdc:	74da      	strb	r2, [r3, #19]
  normal_paket[20] = aci_float32_uint8_donusturucu.array[3];
 8005cde:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005ce4:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU volt_float32_uint8_donusturucu;
  volt_float32_uint8_donusturucu.sayi = (voltage); // Volt degerinin atamasini yapiyoruz.
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  normal_paket[21] = volt_float32_uint8_donusturucu.array[0];
 8005cea:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005cee:	4b4c      	ldr	r3, [pc, #304]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005cf0:	755a      	strb	r2, [r3, #21]
  normal_paket[22] = volt_float32_uint8_donusturucu.array[1];
 8005cf2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005cf6:	4b4a      	ldr	r3, [pc, #296]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005cf8:	759a      	strb	r2, [r3, #22]
  normal_paket[23] = volt_float32_uint8_donusturucu.array[2];
 8005cfa:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8005cfe:	4b48      	ldr	r3, [pc, #288]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d00:	75da      	strb	r2, [r3, #23]
  normal_paket[24] = volt_float32_uint8_donusturucu.array[3];
 8005d02:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8005d06:	4b46      	ldr	r3, [pc, #280]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d08:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU akim_float32_uint8_donusturucu;
  akim_float32_uint8_donusturucu.sayi = (current); // Akim degerinin atamasini yapiyoruz.
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	637b      	str	r3, [r7, #52]	@ 0x34
  normal_paket[25] = akim_float32_uint8_donusturucu.array[0];
 8005d0e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8005d12:	4b43      	ldr	r3, [pc, #268]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d14:	765a      	strb	r2, [r3, #25]
  normal_paket[26] = akim_float32_uint8_donusturucu.array[1];
 8005d16:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8005d1a:	4b41      	ldr	r3, [pc, #260]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d1c:	769a      	strb	r2, [r3, #26]
  normal_paket[27] = akim_float32_uint8_donusturucu.array[2];
 8005d1e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8005d22:	4b3f      	ldr	r3, [pc, #252]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d24:	76da      	strb	r2, [r3, #27]
  normal_paket[28] = akim_float32_uint8_donusturucu.array[3];
 8005d26:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005d2a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d2c:	771a      	strb	r2, [r3, #28]

  FLOAT32_UINT8_DONUSTURUCU sicaklik_float32_uint8_donusturucu;
  sicaklik_float32_uint8_donusturucu.sayi = (BME->temperature); // Sicaklik degerinin atamasini yapiyoruz.
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	633b      	str	r3, [r7, #48]	@ 0x30
  normal_paket[29] = sicaklik_float32_uint8_donusturucu.array[0];
 8005d34:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005d38:	4b39      	ldr	r3, [pc, #228]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d3a:	775a      	strb	r2, [r3, #29]
  normal_paket[30] = sicaklik_float32_uint8_donusturucu.array[1];
 8005d3c:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8005d40:	4b37      	ldr	r3, [pc, #220]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d42:	779a      	strb	r2, [r3, #30]
  normal_paket[31] = sicaklik_float32_uint8_donusturucu.array[2];
 8005d44:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8005d48:	4b35      	ldr	r3, [pc, #212]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d4a:	77da      	strb	r2, [r3, #31]
  normal_paket[32] = sicaklik_float32_uint8_donusturucu.array[3];
 8005d4c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005d50:	4b33      	ldr	r3, [pc, #204]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d52:	f883 2020 	strb.w	r2, [r3, #32]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (BME->pressure); // basinc degerinin atamasini yapiyoruz.
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  normal_paket[33] = basinc_float32_uint8_donusturucu.array[0];
 8005d5c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005d60:	4b2f      	ldr	r3, [pc, #188]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  normal_paket[34] = basinc_float32_uint8_donusturucu.array[1];
 8005d66:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005d6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d6c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  normal_paket[35] = basinc_float32_uint8_donusturucu.array[2];
 8005d70:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005d74:	4b2a      	ldr	r3, [pc, #168]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d76:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  normal_paket[36] = basinc_float32_uint8_donusturucu.array[3];
 8005d7a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005d7e:	4b28      	ldr	r3, [pc, #160]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  FLOAT32_UINT8_DONUSTURUCU manyetik_alan_float32_uint8_donusturucu;
  manyetik_alan_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Manyetik alan degerinin atamasini yapiyoruz.
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	62bb      	str	r3, [r7, #40]	@ 0x28
  normal_paket[37] = manyetik_alan_float32_uint8_donusturucu.array[0];
 8005d88:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005d8c:	4b24      	ldr	r3, [pc, #144]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  normal_paket[38] = manyetik_alan_float32_uint8_donusturucu.array[1];
 8005d92:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005d96:	4b22      	ldr	r3, [pc, #136]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005d98:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  normal_paket[39] = manyetik_alan_float32_uint8_donusturucu.array[2];
 8005d9c:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8005da0:	4b1f      	ldr	r3, [pc, #124]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005da2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  normal_paket[40] = manyetik_alan_float32_uint8_donusturucu.array[3];
 8005da6:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005daa:	4b1d      	ldr	r3, [pc, #116]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005dac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  FLOAT32_UINT8_DONUSTURUCU hiz_float32_uint8_donusturucu;
  hiz_float32_uint8_donusturucu.sayi = (sensor->velocity); // hiz degerinin atamasini yapiyoruz.
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
  normal_paket[41] = hiz_float32_uint8_donusturucu.array[0];
 8005db6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005dba:	4b19      	ldr	r3, [pc, #100]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005dbc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  normal_paket[42] = hiz_float32_uint8_donusturucu.array[1];
 8005dc0:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005dc4:	4b16      	ldr	r3, [pc, #88]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005dc6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  normal_paket[43] = hiz_float32_uint8_donusturucu.array[2];
 8005dca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005dce:	4b14      	ldr	r3, [pc, #80]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005dd0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  normal_paket[44] = hiz_float32_uint8_donusturucu.array[3];
 8005dd4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005dd8:	4b11      	ldr	r3, [pc, #68]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005dda:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  //NEM
  normal_paket[45] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	edd3 7a07 	vldr	s15, [r3, #28]
 8005de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005de8:	edc7 7a00 	vstr	s15, [r7]
 8005dec:	783b      	ldrb	r3, [r7, #0]
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005df2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  normal_paket[46] = check_sum_hesapla_normal(46); // Check_sum = check_sum_hesapla();
 8005df6:	202e      	movs	r0, #46	@ 0x2e
 8005df8:	f7ff fede 	bl	8005bb8 <check_sum_hesapla_normal>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005e02:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  normal_paket[47] = 0x0D; // Sabit
 8005e06:	4b06      	ldr	r3, [pc, #24]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005e08:	220d      	movs	r2, #13
 8005e0a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  normal_paket[48] = 0x0A;
 8005e0e:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <addDataPacketNormal+0x218>)
 8005e10:	220a      	movs	r2, #10
 8005e12:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
}
 8005e16:	bf00      	nop
 8005e18:	3750      	adds	r7, #80	@ 0x50
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20001910 	.word	0x20001910

08005e24 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08c      	sub	sp, #48	@ 0x30
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005e2e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005e32:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005e36:	4bd5      	ldr	r3, [pc, #852]	@ (800618c <UpdateMahonyGains+0x368>)
 8005e38:	ed93 7a00 	vldr	s14, [r3]
 8005e3c:	4bd3      	ldr	r3, [pc, #844]	@ (800618c <UpdateMahonyGains+0x368>)
 8005e3e:	edd3 7a00 	vldr	s15, [r3]
 8005e42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e46:	4bd1      	ldr	r3, [pc, #836]	@ (800618c <UpdateMahonyGains+0x368>)
 8005e48:	edd3 6a01 	vldr	s13, [r3, #4]
 8005e4c:	4bcf      	ldr	r3, [pc, #828]	@ (800618c <UpdateMahonyGains+0x368>)
 8005e4e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e5a:	4bcc      	ldr	r3, [pc, #816]	@ (800618c <UpdateMahonyGains+0x368>)
 8005e5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e60:	4bca      	ldr	r3, [pc, #808]	@ (800618c <UpdateMahonyGains+0x368>)
 8005e62:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e6e:	4bc7      	ldr	r3, [pc, #796]	@ (800618c <UpdateMahonyGains+0x368>)
 8005e70:	edd3 6a03 	vldr	s13, [r3, #12]
 8005e74:	4bc5      	ldr	r3, [pc, #788]	@ (800618c <UpdateMahonyGains+0x368>)
 8005e76:	edd3 7a03 	vldr	s15, [r3, #12]
 8005e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e82:	eeb0 0a67 	vmov.f32	s0, s15
 8005e86:	f00e fa4b 	bl	8014320 <sqrtf>
 8005e8a:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 8005e8e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005e92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9a:	f000 8172 	beq.w	8006182 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8005e9e:	4bbb      	ldr	r3, [pc, #748]	@ (800618c <UpdateMahonyGains+0x368>)
 8005ea0:	edd3 6a00 	vldr	s13, [r3]
 8005ea4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eac:	4bb7      	ldr	r3, [pc, #732]	@ (800618c <UpdateMahonyGains+0x368>)
 8005eae:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8005eb2:	4bb6      	ldr	r3, [pc, #728]	@ (800618c <UpdateMahonyGains+0x368>)
 8005eb4:	edd3 6a01 	vldr	s13, [r3, #4]
 8005eb8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ec0:	4bb2      	ldr	r3, [pc, #712]	@ (800618c <UpdateMahonyGains+0x368>)
 8005ec2:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 8005ec6:	4bb1      	ldr	r3, [pc, #708]	@ (800618c <UpdateMahonyGains+0x368>)
 8005ec8:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ecc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005ed0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ed4:	4bad      	ldr	r3, [pc, #692]	@ (800618c <UpdateMahonyGains+0x368>)
 8005ed6:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 8005eda:	4bac      	ldr	r3, [pc, #688]	@ (800618c <UpdateMahonyGains+0x368>)
 8005edc:	edd3 6a03 	vldr	s13, [r3, #12]
 8005ee0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee8:	4ba8      	ldr	r3, [pc, #672]	@ (800618c <UpdateMahonyGains+0x368>)
 8005eea:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005eee:	4ba7      	ldr	r3, [pc, #668]	@ (800618c <UpdateMahonyGains+0x368>)
 8005ef0:	ed93 7a01 	vldr	s14, [r3, #4]
 8005ef4:	4ba5      	ldr	r3, [pc, #660]	@ (800618c <UpdateMahonyGains+0x368>)
 8005ef6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005efa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005efe:	4ba3      	ldr	r3, [pc, #652]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f00:	edd3 6a00 	vldr	s13, [r3]
 8005f04:	4ba1      	ldr	r3, [pc, #644]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f06:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f12:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8005f1a:	4b9c      	ldr	r3, [pc, #624]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f1c:	ed93 7a00 	vldr	s14, [r3]
 8005f20:	4b9a      	ldr	r3, [pc, #616]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f2a:	4b98      	ldr	r3, [pc, #608]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f30:	4b96      	ldr	r3, [pc, #600]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f32:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f3e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005f42:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8005f46:	4b91      	ldr	r3, [pc, #580]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f48:	ed93 7a00 	vldr	s14, [r3]
 8005f4c:	4b8f      	ldr	r3, [pc, #572]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f4e:	edd3 7a00 	vldr	s15, [r3]
 8005f52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f56:	4b8d      	ldr	r3, [pc, #564]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f58:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f5c:	4b8b      	ldr	r3, [pc, #556]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f6a:	4b88      	ldr	r3, [pc, #544]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f6c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f70:	4b86      	ldr	r3, [pc, #536]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f72:	edd3 7a02 	vldr	s15, [r3, #8]
 8005f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005f7e:	4b83      	ldr	r3, [pc, #524]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f80:	edd3 6a03 	vldr	s13, [r3, #12]
 8005f84:	4b81      	ldr	r3, [pc, #516]	@ (800618c <UpdateMahonyGains+0x368>)
 8005f86:	edd3 7a03 	vldr	s15, [r3, #12]
 8005f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f92:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8005f96:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005f9a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005f9e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005fa2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005faa:	edd7 7a07 	vldr	s15, [r7, #28]
 8005fae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fba:	f000 ff3f 	bl	8006e3c <invSqrt>
 8005fbe:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8005fc2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005fc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8005fd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8005fd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fde:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8005fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8005fe6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fee:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8005ff2:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ff6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005ffa:	edd7 7a02 	vldr	s15, [r7, #8]
 8005ffe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006006:	edd7 7a01 	vldr	s15, [r7, #4]
 800600a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800600e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006012:	eeb0 0a67 	vmov.f32	s0, s15
 8006016:	f000 ff11 	bl	8006e3c <invSqrt>
 800601a:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 800601e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006022:	edd7 7a05 	vldr	s15, [r7, #20]
 8006026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800602a:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 800602e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006032:	edd7 7a05 	vldr	s15, [r7, #20]
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 800603e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006042:	edd7 7a05 	vldr	s15, [r7, #20]
 8006046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800604a:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 800604e:	ed97 7a03 	vldr	s14, [r7, #12]
 8006052:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800605a:	edd7 6a02 	vldr	s13, [r7, #8]
 800605e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006066:	ee37 7a27 	vadd.f32	s14, s14, s15
 800606a:	edd7 6a01 	vldr	s13, [r7, #4]
 800606e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800607a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 800607e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8006082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800608a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800608e:	dd02      	ble.n	8006096 <UpdateMahonyGains+0x272>
 8006090:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8006096:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800609a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800609e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a6:	d501      	bpl.n	80060ac <UpdateMahonyGains+0x288>
 80060a8:	4b39      	ldr	r3, [pc, #228]	@ (8006190 <UpdateMahonyGains+0x36c>)
 80060aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 80060ac:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80060b0:	f00e f90a 	bl	80142c8 <acosf>
 80060b4:	eef0 7a40 	vmov.f32	s15, s0
 80060b8:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006194 <UpdateMahonyGains+0x370>
 80060bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060c0:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 80060c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80060c8:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80060cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060d4:	dd0a      	ble.n	80060ec <UpdateMahonyGains+0x2c8>
        Gain = 1;
 80060d6:	4b30      	ldr	r3, [pc, #192]	@ (8006198 <UpdateMahonyGains+0x374>)
 80060d8:	2201      	movs	r2, #1
 80060da:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 80060dc:	4b2f      	ldr	r3, [pc, #188]	@ (800619c <UpdateMahonyGains+0x378>)
 80060de:	4a30      	ldr	r2, [pc, #192]	@ (80061a0 <UpdateMahonyGains+0x37c>)
 80060e0:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 80060e2:	4b30      	ldr	r3, [pc, #192]	@ (80061a4 <UpdateMahonyGains+0x380>)
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	e01d      	b.n	8006128 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 80060ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80060f0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80060f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fc:	dd0a      	ble.n	8006114 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 80060fe:	4b26      	ldr	r3, [pc, #152]	@ (8006198 <UpdateMahonyGains+0x374>)
 8006100:	2202      	movs	r2, #2
 8006102:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8006104:	4b25      	ldr	r3, [pc, #148]	@ (800619c <UpdateMahonyGains+0x378>)
 8006106:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800610a:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 800610c:	4b25      	ldr	r3, [pc, #148]	@ (80061a4 <UpdateMahonyGains+0x380>)
 800610e:	4a26      	ldr	r2, [pc, #152]	@ (80061a8 <UpdateMahonyGains+0x384>)
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e009      	b.n	8006128 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8006114:	4b20      	ldr	r3, [pc, #128]	@ (8006198 <UpdateMahonyGains+0x374>)
 8006116:	2203      	movs	r2, #3
 8006118:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 800611a:	4b20      	ldr	r3, [pc, #128]	@ (800619c <UpdateMahonyGains+0x378>)
 800611c:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8006120:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8006122:	4b20      	ldr	r3, [pc, #128]	@ (80061a4 <UpdateMahonyGains+0x380>)
 8006124:	4a21      	ldr	r2, [pc, #132]	@ (80061ac <UpdateMahonyGains+0x388>)
 8006126:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8006128:	4b1c      	ldr	r3, [pc, #112]	@ (800619c <UpdateMahonyGains+0x378>)
 800612a:	edd3 7a00 	vldr	s15, [r3]
 800612e:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8006132:	eeb0 0a67 	vmov.f32	s0, s15
 8006136:	f00e f940 	bl	80143ba <fminf>
 800613a:	eef0 7a40 	vmov.f32	s15, s0
 800613e:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80061b0 <UpdateMahonyGains+0x38c>
 8006142:	eeb0 0a67 	vmov.f32	s0, s15
 8006146:	f00e f91b 	bl	8014380 <fmaxf>
 800614a:	eef0 7a40 	vmov.f32	s15, s0
 800614e:	4b13      	ldr	r3, [pc, #76]	@ (800619c <UpdateMahonyGains+0x378>)
 8006150:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8006154:	4b13      	ldr	r3, [pc, #76]	@ (80061a4 <UpdateMahonyGains+0x380>)
 8006156:	edd3 7a00 	vldr	s15, [r3]
 800615a:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80061b4 <UpdateMahonyGains+0x390>
 800615e:	eeb0 0a67 	vmov.f32	s0, s15
 8006162:	f00e f92a 	bl	80143ba <fminf>
 8006166:	eef0 7a40 	vmov.f32	s15, s0
 800616a:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80061b8 <UpdateMahonyGains+0x394>
 800616e:	eeb0 0a67 	vmov.f32	s0, s15
 8006172:	f00e f905 	bl	8014380 <fmaxf>
 8006176:	eef0 7a40 	vmov.f32	s15, s0
 800617a:	4b0a      	ldr	r3, [pc, #40]	@ (80061a4 <UpdateMahonyGains+0x380>)
 800617c:	edc3 7a00 	vstr	s15, [r3]
 8006180:	e000      	b.n	8006184 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 8006182:	bf00      	nop
}
 8006184:	3730      	adds	r7, #48	@ 0x30
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000048 	.word	0x20000048
 8006190:	bf800000 	.word	0xbf800000
 8006194:	42652ee2 	.word	0x42652ee2
 8006198:	20001950 	.word	0x20001950
 800619c:	20000058 	.word	0x20000058
 80061a0:	3e4ccccd 	.word	0x3e4ccccd
 80061a4:	2000005c 	.word	0x2000005c
 80061a8:	3c23d70a 	.word	0x3c23d70a
 80061ac:	3d4ccccd 	.word	0x3d4ccccd
 80061b0:	3dcccccd 	.word	0x3dcccccd
 80061b4:	3d4ccccd 	.word	0x3d4ccccd
 80061b8:	00000000 	.word	0x00000000

080061bc <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80061bc:	b580      	push	{r7, lr}
 80061be:	b08a      	sub	sp, #40	@ 0x28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	ed87 0a07 	vstr	s0, [r7, #28]
 80061c6:	edc7 0a06 	vstr	s1, [r7, #24]
 80061ca:	ed87 1a05 	vstr	s2, [r7, #20]
 80061ce:	edc7 1a04 	vstr	s3, [r7, #16]
 80061d2:	ed87 2a03 	vstr	s4, [r7, #12]
 80061d6:	edc7 2a02 	vstr	s5, [r7, #8]
 80061da:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 80061de:	4b60      	ldr	r3, [pc, #384]	@ (8006360 <Orientation_Update+0x1a4>)
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 80061e2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80061e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80061ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80061ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80061f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80061fa:	4b5a      	ldr	r3, [pc, #360]	@ (8006364 <Orientation_Update+0x1a8>)
 80061fc:	edd3 7a00 	vldr	s15, [r3]
 8006200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006208:	4b56      	ldr	r3, [pc, #344]	@ (8006364 <Orientation_Update+0x1a8>)
 800620a:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 800620e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006212:	edd7 7a03 	vldr	s15, [r7, #12]
 8006216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800621a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800621e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006222:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006226:	4b50      	ldr	r3, [pc, #320]	@ (8006368 <Orientation_Update+0x1ac>)
 8006228:	edd3 7a00 	vldr	s15, [r3]
 800622c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006234:	4b4c      	ldr	r3, [pc, #304]	@ (8006368 <Orientation_Update+0x1ac>)
 8006236:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 800623a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800623e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800624a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800624e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006252:	4b46      	ldr	r3, [pc, #280]	@ (800636c <Orientation_Update+0x1b0>)
 8006254:	edd3 7a00 	vldr	s15, [r3]
 8006258:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800625c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006260:	4b42      	ldr	r3, [pc, #264]	@ (800636c <Orientation_Update+0x1b0>)
 8006262:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 8006266:	4b3f      	ldr	r3, [pc, #252]	@ (8006364 <Orientation_Update+0x1a8>)
 8006268:	edd3 7a00 	vldr	s15, [r3]
 800626c:	4b3e      	ldr	r3, [pc, #248]	@ (8006368 <Orientation_Update+0x1ac>)
 800626e:	ed93 7a00 	vldr	s14, [r3]
 8006272:	4b3e      	ldr	r3, [pc, #248]	@ (800636c <Orientation_Update+0x1b0>)
 8006274:	edd3 6a00 	vldr	s13, [r3]
 8006278:	eeb0 1a66 	vmov.f32	s2, s13
 800627c:	eef0 0a47 	vmov.f32	s1, s14
 8006280:	eeb0 0a67 	vmov.f32	s0, s15
 8006284:	f7ff fdce 	bl	8005e24 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8006288:	4b36      	ldr	r3, [pc, #216]	@ (8006364 <Orientation_Update+0x1a8>)
 800628a:	ed93 7a00 	vldr	s14, [r3]
 800628e:	4b35      	ldr	r3, [pc, #212]	@ (8006364 <Orientation_Update+0x1a8>)
 8006290:	edd3 7a00 	vldr	s15, [r3]
 8006294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006298:	4b33      	ldr	r3, [pc, #204]	@ (8006368 <Orientation_Update+0x1ac>)
 800629a:	edd3 6a00 	vldr	s13, [r3]
 800629e:	4b32      	ldr	r3, [pc, #200]	@ (8006368 <Orientation_Update+0x1ac>)
 80062a0:	edd3 7a00 	vldr	s15, [r3]
 80062a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062ac:	4b2f      	ldr	r3, [pc, #188]	@ (800636c <Orientation_Update+0x1b0>)
 80062ae:	edd3 6a00 	vldr	s13, [r3]
 80062b2:	4b2e      	ldr	r3, [pc, #184]	@ (800636c <Orientation_Update+0x1b0>)
 80062b4:	edd3 7a00 	vldr	s15, [r3]
 80062b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062c0:	eeb0 0a67 	vmov.f32	s0, s15
 80062c4:	f00e f82c 	bl	8014320 <sqrtf>
 80062c8:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 80062cc:	4b28      	ldr	r3, [pc, #160]	@ (8006370 <Orientation_Update+0x1b4>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d00c      	beq.n	80062ee <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 80062d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80062d8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006374 <Orientation_Update+0x1b8>
 80062dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e4:	d50f      	bpl.n	8006306 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 80062e6:	4b22      	ldr	r3, [pc, #136]	@ (8006370 <Orientation_Update+0x1b4>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	e00b      	b.n	8006306 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 80062ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80062f2:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8006378 <Orientation_Update+0x1bc>
 80062f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062fe:	dd02      	ble.n	8006306 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8006300:	4b1b      	ldr	r3, [pc, #108]	@ (8006370 <Orientation_Update+0x1b4>)
 8006302:	2201      	movs	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8006306:	4b1a      	ldr	r3, [pc, #104]	@ (8006370 <Orientation_Update+0x1b4>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 800630e:	edd7 1a01 	vldr	s3, [r7, #4]
 8006312:	ed97 1a05 	vldr	s2, [r7, #20]
 8006316:	edd7 0a06 	vldr	s1, [r7, #24]
 800631a:	ed97 0a07 	vldr	s0, [r7, #28]
 800631e:	f000 f82d 	bl	800637c <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8006322:	e018      	b.n	8006356 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8006324:	4b0f      	ldr	r3, [pc, #60]	@ (8006364 <Orientation_Update+0x1a8>)
 8006326:	edd3 7a00 	vldr	s15, [r3]
 800632a:	4b0f      	ldr	r3, [pc, #60]	@ (8006368 <Orientation_Update+0x1ac>)
 800632c:	ed93 7a00 	vldr	s14, [r3]
 8006330:	4b0e      	ldr	r3, [pc, #56]	@ (800636c <Orientation_Update+0x1b0>)
 8006332:	edd3 6a00 	vldr	s13, [r3]
 8006336:	ed97 3a01 	vldr	s6, [r7, #4]
 800633a:	eef0 2a66 	vmov.f32	s5, s13
 800633e:	eeb0 2a47 	vmov.f32	s4, s14
 8006342:	eef0 1a67 	vmov.f32	s3, s15
 8006346:	ed97 1a05 	vldr	s2, [r7, #20]
 800634a:	edd7 0a06 	vldr	s1, [r7, #24]
 800634e:	ed97 0a07 	vldr	s0, [r7, #28]
 8006352:	f000 f93b 	bl	80065cc <MahonyAHRSupdateIMU>
}
 8006356:	bf00      	nop
 8006358:	3728      	adds	r7, #40	@ 0x28
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	3e99999a 	.word	0x3e99999a
 8006364:	20001954 	.word	0x20001954
 8006368:	20001958 	.word	0x20001958
 800636c:	2000195c 	.word	0x2000195c
 8006370:	20001951 	.word	0x20001951
 8006374:	41d3d2db 	.word	0x41d3d2db
 8006378:	420172a2 	.word	0x420172a2

0800637c <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	@ 0x28
 8006380:	af00      	add	r7, sp, #0
 8006382:	ed87 0a03 	vstr	s0, [r7, #12]
 8006386:	edc7 0a02 	vstr	s1, [r7, #8]
 800638a:	ed87 1a01 	vstr	s2, [r7, #4]
 800638e:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8006392:	4b8c      	ldr	r3, [pc, #560]	@ (80065c4 <updateQuaternion+0x248>)
 8006394:	edd3 7a01 	vldr	s15, [r3, #4]
 8006398:	eeb1 7a67 	vneg.f32	s14, s15
 800639c:	edd7 7a03 	vldr	s15, [r7, #12]
 80063a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063a4:	4b87      	ldr	r3, [pc, #540]	@ (80065c4 <updateQuaternion+0x248>)
 80063a6:	edd3 6a02 	vldr	s13, [r3, #8]
 80063aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80063ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80063b6:	4b83      	ldr	r3, [pc, #524]	@ (80065c4 <updateQuaternion+0x248>)
 80063b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80063bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80063c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80063cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80063d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 80063d4:	4b7b      	ldr	r3, [pc, #492]	@ (80065c4 <updateQuaternion+0x248>)
 80063d6:	ed93 7a00 	vldr	s14, [r3]
 80063da:	edd7 7a03 	vldr	s15, [r7, #12]
 80063de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063e2:	4b78      	ldr	r3, [pc, #480]	@ (80065c4 <updateQuaternion+0x248>)
 80063e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80063e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80063ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063f4:	4b73      	ldr	r3, [pc, #460]	@ (80065c4 <updateQuaternion+0x248>)
 80063f6:	edd3 6a03 	vldr	s13, [r3, #12]
 80063fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80063fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006406:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800640a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800640e:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8006412:	4b6c      	ldr	r3, [pc, #432]	@ (80065c4 <updateQuaternion+0x248>)
 8006414:	ed93 7a00 	vldr	s14, [r3]
 8006418:	edd7 7a02 	vldr	s15, [r7, #8]
 800641c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006420:	4b68      	ldr	r3, [pc, #416]	@ (80065c4 <updateQuaternion+0x248>)
 8006422:	edd3 6a01 	vldr	s13, [r3, #4]
 8006426:	edd7 7a01 	vldr	s15, [r7, #4]
 800642a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800642e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006432:	4b64      	ldr	r3, [pc, #400]	@ (80065c4 <updateQuaternion+0x248>)
 8006434:	edd3 6a03 	vldr	s13, [r3, #12]
 8006438:	edd7 7a03 	vldr	s15, [r7, #12]
 800643c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006444:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006448:	ee67 7a87 	vmul.f32	s15, s15, s14
 800644c:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8006450:	4b5c      	ldr	r3, [pc, #368]	@ (80065c4 <updateQuaternion+0x248>)
 8006452:	ed93 7a00 	vldr	s14, [r3]
 8006456:	edd7 7a01 	vldr	s15, [r7, #4]
 800645a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800645e:	4b59      	ldr	r3, [pc, #356]	@ (80065c4 <updateQuaternion+0x248>)
 8006460:	edd3 6a01 	vldr	s13, [r3, #4]
 8006464:	edd7 7a02 	vldr	s15, [r7, #8]
 8006468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800646c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006470:	4b54      	ldr	r3, [pc, #336]	@ (80065c4 <updateQuaternion+0x248>)
 8006472:	edd3 6a02 	vldr	s13, [r3, #8]
 8006476:	edd7 7a03 	vldr	s15, [r7, #12]
 800647a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800647e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006482:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006486:	ee67 7a87 	vmul.f32	s15, s15, s14
 800648a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 800648e:	4b4d      	ldr	r3, [pc, #308]	@ (80065c4 <updateQuaternion+0x248>)
 8006490:	ed93 7a00 	vldr	s14, [r3]
 8006494:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006498:	edd7 7a00 	vldr	s15, [r7]
 800649c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a4:	4b47      	ldr	r3, [pc, #284]	@ (80065c4 <updateQuaternion+0x248>)
 80064a6:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 80064aa:	4b46      	ldr	r3, [pc, #280]	@ (80065c4 <updateQuaternion+0x248>)
 80064ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80064b0:	edd7 6a08 	vldr	s13, [r7, #32]
 80064b4:	edd7 7a00 	vldr	s15, [r7]
 80064b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064c0:	4b40      	ldr	r3, [pc, #256]	@ (80065c4 <updateQuaternion+0x248>)
 80064c2:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 80064c6:	4b3f      	ldr	r3, [pc, #252]	@ (80065c4 <updateQuaternion+0x248>)
 80064c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80064cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d0:	edd7 7a00 	vldr	s15, [r7]
 80064d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064dc:	4b39      	ldr	r3, [pc, #228]	@ (80065c4 <updateQuaternion+0x248>)
 80064de:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 80064e2:	4b38      	ldr	r3, [pc, #224]	@ (80065c4 <updateQuaternion+0x248>)
 80064e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80064e8:	edd7 6a06 	vldr	s13, [r7, #24]
 80064ec:	edd7 7a00 	vldr	s15, [r7]
 80064f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064f8:	4b32      	ldr	r3, [pc, #200]	@ (80065c4 <updateQuaternion+0x248>)
 80064fa:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80064fe:	4b31      	ldr	r3, [pc, #196]	@ (80065c4 <updateQuaternion+0x248>)
 8006500:	ed93 7a00 	vldr	s14, [r3]
 8006504:	4b2f      	ldr	r3, [pc, #188]	@ (80065c4 <updateQuaternion+0x248>)
 8006506:	edd3 7a00 	vldr	s15, [r3]
 800650a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800650e:	4b2d      	ldr	r3, [pc, #180]	@ (80065c4 <updateQuaternion+0x248>)
 8006510:	edd3 6a01 	vldr	s13, [r3, #4]
 8006514:	4b2b      	ldr	r3, [pc, #172]	@ (80065c4 <updateQuaternion+0x248>)
 8006516:	edd3 7a01 	vldr	s15, [r3, #4]
 800651a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800651e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006522:	4b28      	ldr	r3, [pc, #160]	@ (80065c4 <updateQuaternion+0x248>)
 8006524:	edd3 6a02 	vldr	s13, [r3, #8]
 8006528:	4b26      	ldr	r3, [pc, #152]	@ (80065c4 <updateQuaternion+0x248>)
 800652a:	edd3 7a02 	vldr	s15, [r3, #8]
 800652e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006532:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006536:	4b23      	ldr	r3, [pc, #140]	@ (80065c4 <updateQuaternion+0x248>)
 8006538:	edd3 6a03 	vldr	s13, [r3, #12]
 800653c:	4b21      	ldr	r3, [pc, #132]	@ (80065c4 <updateQuaternion+0x248>)
 800653e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800654a:	eeb0 0a67 	vmov.f32	s0, s15
 800654e:	f00d fee7 	bl	8014320 <sqrtf>
 8006552:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8006556:	edd7 7a05 	vldr	s15, [r7, #20]
 800655a:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80065c8 <updateQuaternion+0x24c>
 800655e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006566:	dc00      	bgt.n	800656a <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8006568:	e027      	b.n	80065ba <updateQuaternion+0x23e>
        q[0] /= norm;
 800656a:	4b16      	ldr	r3, [pc, #88]	@ (80065c4 <updateQuaternion+0x248>)
 800656c:	edd3 6a00 	vldr	s13, [r3]
 8006570:	ed97 7a05 	vldr	s14, [r7, #20]
 8006574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006578:	4b12      	ldr	r3, [pc, #72]	@ (80065c4 <updateQuaternion+0x248>)
 800657a:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 800657e:	4b11      	ldr	r3, [pc, #68]	@ (80065c4 <updateQuaternion+0x248>)
 8006580:	edd3 6a01 	vldr	s13, [r3, #4]
 8006584:	ed97 7a05 	vldr	s14, [r7, #20]
 8006588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800658c:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <updateQuaternion+0x248>)
 800658e:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8006592:	4b0c      	ldr	r3, [pc, #48]	@ (80065c4 <updateQuaternion+0x248>)
 8006594:	edd3 6a02 	vldr	s13, [r3, #8]
 8006598:	ed97 7a05 	vldr	s14, [r7, #20]
 800659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a0:	4b08      	ldr	r3, [pc, #32]	@ (80065c4 <updateQuaternion+0x248>)
 80065a2:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 80065a6:	4b07      	ldr	r3, [pc, #28]	@ (80065c4 <updateQuaternion+0x248>)
 80065a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80065ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80065b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065b4:	4b03      	ldr	r3, [pc, #12]	@ (80065c4 <updateQuaternion+0x248>)
 80065b6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80065ba:	bf00      	nop
 80065bc:	3728      	adds	r7, #40	@ 0x28
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000048 	.word	0x20000048
 80065c8:	358637bd 	.word	0x358637bd

080065cc <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b092      	sub	sp, #72	@ 0x48
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	ed87 0a07 	vstr	s0, [r7, #28]
 80065d6:	edc7 0a06 	vstr	s1, [r7, #24]
 80065da:	ed87 1a05 	vstr	s2, [r7, #20]
 80065de:	edc7 1a04 	vstr	s3, [r7, #16]
 80065e2:	ed87 2a03 	vstr	s4, [r7, #12]
 80065e6:	edc7 2a02 	vstr	s5, [r7, #8]
 80065ea:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 80065ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80065f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80065f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065fa:	d10e      	bne.n	800661a <MahonyAHRSupdateIMU+0x4e>
 80065fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006600:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006608:	d107      	bne.n	800661a <MahonyAHRSupdateIMU+0x4e>
 800660a:	edd7 7a02 	vldr	s15, [r7, #8]
 800660e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006616:	f000 8138 	beq.w	800688a <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 800661a:	edd7 7a04 	vldr	s15, [r7, #16]
 800661e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006622:	edd7 7a03 	vldr	s15, [r7, #12]
 8006626:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800662a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800662e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006632:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800663a:	eeb0 0a67 	vmov.f32	s0, s15
 800663e:	f000 fbfd 	bl	8006e3c <invSqrt>
 8006642:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8006646:	ed97 7a04 	vldr	s14, [r7, #16]
 800664a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800664e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006652:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8006656:	ed97 7a03 	vldr	s14, [r7, #12]
 800665a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800665e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006662:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8006666:	ed97 7a02 	vldr	s14, [r7, #8]
 800666a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800666e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006672:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8006676:	4b66      	ldr	r3, [pc, #408]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 8006678:	ed93 7a01 	vldr	s14, [r3, #4]
 800667c:	4b64      	ldr	r3, [pc, #400]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 800667e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006686:	4b62      	ldr	r3, [pc, #392]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 8006688:	edd3 6a00 	vldr	s13, [r3]
 800668c:	4b60      	ldr	r3, [pc, #384]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 800668e:	edd3 7a02 	vldr	s15, [r3, #8]
 8006692:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006696:	ee77 7a67 	vsub.f32	s15, s14, s15
 800669a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 800669e:	4b5c      	ldr	r3, [pc, #368]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 80066a0:	ed93 7a00 	vldr	s14, [r3]
 80066a4:	4b5a      	ldr	r3, [pc, #360]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 80066a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80066aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80066ae:	4b58      	ldr	r3, [pc, #352]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 80066b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80066b4:	4b56      	ldr	r3, [pc, #344]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 80066b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80066ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066c2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 80066c6:	4b52      	ldr	r3, [pc, #328]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 80066c8:	ed93 7a00 	vldr	s14, [r3]
 80066cc:	4b50      	ldr	r3, [pc, #320]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 80066ce:	edd3 7a00 	vldr	s15, [r3]
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066da:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80066de:	4b4c      	ldr	r3, [pc, #304]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 80066e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80066e4:	4b4a      	ldr	r3, [pc, #296]	@ (8006810 <MahonyAHRSupdateIMU+0x244>)
 80066e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80066ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80066ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 80066f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80066fa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80066fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006702:	edd7 6a02 	vldr	s13, [r7, #8]
 8006706:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800670a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800670e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006712:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8006716:	ed97 7a02 	vldr	s14, [r7, #8]
 800671a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800671e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006722:	edd7 6a04 	vldr	s13, [r7, #16]
 8006726:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800672a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800672e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006732:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8006736:	ed97 7a04 	vldr	s14, [r7, #16]
 800673a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800673e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006742:	edd7 6a03 	vldr	s13, [r7, #12]
 8006746:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800674a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800674e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006752:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8006756:	4b2f      	ldr	r3, [pc, #188]	@ (8006814 <MahonyAHRSupdateIMU+0x248>)
 8006758:	edd3 7a00 	vldr	s15, [r3]
 800675c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006764:	dd5e      	ble.n	8006824 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8006766:	4b2b      	ldr	r3, [pc, #172]	@ (8006814 <MahonyAHRSupdateIMU+0x248>)
 8006768:	ed93 7a00 	vldr	s14, [r3]
 800676c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006774:	edd7 7a01 	vldr	s15, [r7, #4]
 8006778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800677c:	4b26      	ldr	r3, [pc, #152]	@ (8006818 <MahonyAHRSupdateIMU+0x24c>)
 800677e:	edd3 7a00 	vldr	s15, [r3]
 8006782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006786:	4b24      	ldr	r3, [pc, #144]	@ (8006818 <MahonyAHRSupdateIMU+0x24c>)
 8006788:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 800678c:	4b21      	ldr	r3, [pc, #132]	@ (8006814 <MahonyAHRSupdateIMU+0x248>)
 800678e:	ed93 7a00 	vldr	s14, [r3]
 8006792:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800679a:	edd7 7a01 	vldr	s15, [r7, #4]
 800679e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067a2:	4b1e      	ldr	r3, [pc, #120]	@ (800681c <MahonyAHRSupdateIMU+0x250>)
 80067a4:	edd3 7a00 	vldr	s15, [r3]
 80067a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067ac:	4b1b      	ldr	r3, [pc, #108]	@ (800681c <MahonyAHRSupdateIMU+0x250>)
 80067ae:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 80067b2:	4b18      	ldr	r3, [pc, #96]	@ (8006814 <MahonyAHRSupdateIMU+0x248>)
 80067b4:	ed93 7a00 	vldr	s14, [r3]
 80067b8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80067bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80067c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067c8:	4b15      	ldr	r3, [pc, #84]	@ (8006820 <MahonyAHRSupdateIMU+0x254>)
 80067ca:	edd3 7a00 	vldr	s15, [r3]
 80067ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067d2:	4b13      	ldr	r3, [pc, #76]	@ (8006820 <MahonyAHRSupdateIMU+0x254>)
 80067d4:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 80067d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006818 <MahonyAHRSupdateIMU+0x24c>)
 80067da:	edd3 7a00 	vldr	s15, [r3]
 80067de:	ed97 7a07 	vldr	s14, [r7, #28]
 80067e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067e6:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 80067ea:	4b0c      	ldr	r3, [pc, #48]	@ (800681c <MahonyAHRSupdateIMU+0x250>)
 80067ec:	edd3 7a00 	vldr	s15, [r3]
 80067f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80067f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067f8:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 80067fc:	4b08      	ldr	r3, [pc, #32]	@ (8006820 <MahonyAHRSupdateIMU+0x254>)
 80067fe:	edd3 7a00 	vldr	s15, [r3]
 8006802:	ed97 7a05 	vldr	s14, [r7, #20]
 8006806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800680a:	edc7 7a05 	vstr	s15, [r7, #20]
 800680e:	e015      	b.n	800683c <MahonyAHRSupdateIMU+0x270>
 8006810:	20000048 	.word	0x20000048
 8006814:	2000005c 	.word	0x2000005c
 8006818:	20001944 	.word	0x20001944
 800681c:	20001948 	.word	0x20001948
 8006820:	2000194c 	.word	0x2000194c
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8006824:	4b9a      	ldr	r3, [pc, #616]	@ (8006a90 <MahonyAHRSupdateIMU+0x4c4>)
 8006826:	f04f 0200 	mov.w	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 800682c:	4b99      	ldr	r3, [pc, #612]	@ (8006a94 <MahonyAHRSupdateIMU+0x4c8>)
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8006834:	4b98      	ldr	r3, [pc, #608]	@ (8006a98 <MahonyAHRSupdateIMU+0x4cc>)
 8006836:	f04f 0200 	mov.w	r2, #0
 800683a:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 800683c:	4b97      	ldr	r3, [pc, #604]	@ (8006a9c <MahonyAHRSupdateIMU+0x4d0>)
 800683e:	ed93 7a00 	vldr	s14, [r3]
 8006842:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8006846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684a:	ed97 7a07 	vldr	s14, [r7, #28]
 800684e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006852:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8006856:	4b91      	ldr	r3, [pc, #580]	@ (8006a9c <MahonyAHRSupdateIMU+0x4d0>)
 8006858:	ed93 7a00 	vldr	s14, [r3]
 800685c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006860:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006864:	ed97 7a06 	vldr	s14, [r7, #24]
 8006868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800686c:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8006870:	4b8a      	ldr	r3, [pc, #552]	@ (8006a9c <MahonyAHRSupdateIMU+0x4d0>)
 8006872:	ed93 7a00 	vldr	s14, [r3]
 8006876:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800687a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800687e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006886:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 800688a:	edd7 7a01 	vldr	s15, [r7, #4]
 800688e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006892:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006896:	ed97 7a07 	vldr	s14, [r7, #28]
 800689a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800689e:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 80068a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80068a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80068b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b6:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 80068ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80068be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80068c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80068ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ce:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 80068d2:	4b73      	ldr	r3, [pc, #460]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 80068d8:	4b71      	ldr	r3, [pc, #452]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 80068de:	4b70      	ldr	r3, [pc, #448]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 80068e4:	4b6e      	ldr	r3, [pc, #440]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80068e6:	ed93 7a00 	vldr	s14, [r3]
 80068ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80068ee:	eef1 6a67 	vneg.f32	s13, s15
 80068f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80068f6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80068fa:	ed97 6a08 	vldr	s12, [r7, #32]
 80068fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8006902:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006906:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800690a:	4b65      	ldr	r3, [pc, #404]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 800690c:	ed93 6a03 	vldr	s12, [r3, #12]
 8006910:	edd7 7a05 	vldr	s15, [r7, #20]
 8006914:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006918:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800691c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006920:	4b5f      	ldr	r3, [pc, #380]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006922:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8006926:	4b5e      	ldr	r3, [pc, #376]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006928:	ed93 7a01 	vldr	s14, [r3, #4]
 800692c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006930:	edd7 7a07 	vldr	s15, [r7, #28]
 8006934:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006938:	ed97 6a08 	vldr	s12, [r7, #32]
 800693c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006940:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006944:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006948:	4b55      	ldr	r3, [pc, #340]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 800694a:	ed93 6a03 	vldr	s12, [r3, #12]
 800694e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006952:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006956:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800695a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800695e:	4b50      	ldr	r3, [pc, #320]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006960:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 8006964:	4b4e      	ldr	r3, [pc, #312]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006966:	ed93 7a02 	vldr	s14, [r3, #8]
 800696a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800696e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006972:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006976:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 800697a:	edd7 7a05 	vldr	s15, [r7, #20]
 800697e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006982:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006986:	4b46      	ldr	r3, [pc, #280]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006988:	ed93 6a03 	vldr	s12, [r3, #12]
 800698c:	edd7 7a07 	vldr	s15, [r7, #28]
 8006990:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800699c:	4b40      	ldr	r3, [pc, #256]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 800699e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 80069a2:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80069a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80069a8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80069ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80069b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80069b4:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80069b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80069bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80069c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80069c4:	ed97 6a08 	vldr	s12, [r7, #32]
 80069c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80069cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80069d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80069d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069d8:	4b31      	ldr	r3, [pc, #196]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80069da:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 80069de:	4b30      	ldr	r3, [pc, #192]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80069e0:	ed93 7a00 	vldr	s14, [r3]
 80069e4:	4b2e      	ldr	r3, [pc, #184]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80069e6:	edd3 7a00 	vldr	s15, [r3]
 80069ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069ee:	4b2c      	ldr	r3, [pc, #176]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80069f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80069f4:	4b2a      	ldr	r3, [pc, #168]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 80069f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80069fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80069fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a02:	4b27      	ldr	r3, [pc, #156]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a04:	edd3 6a02 	vldr	s13, [r3, #8]
 8006a08:	4b25      	ldr	r3, [pc, #148]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8006a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a16:	4b22      	ldr	r3, [pc, #136]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a18:	edd3 6a03 	vldr	s13, [r3, #12]
 8006a1c:	4b20      	ldr	r3, [pc, #128]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a2e:	f000 fa05 	bl	8006e3c <invSqrt>
 8006a32:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8006a36:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a38:	ed93 7a00 	vldr	s14, [r3]
 8006a3c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a44:	4b16      	ldr	r3, [pc, #88]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a46:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8006a4a:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a4c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a50:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a58:	4b11      	ldr	r3, [pc, #68]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a5a:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8006a5e:	4b10      	ldr	r3, [pc, #64]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a60:	ed93 7a02 	vldr	s14, [r3, #8]
 8006a64:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a6e:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 8006a72:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a74:	ed93 7a03 	vldr	s14, [r3, #12]
 8006a78:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a80:	4b07      	ldr	r3, [pc, #28]	@ (8006aa0 <MahonyAHRSupdateIMU+0x4d4>)
 8006a82:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8006a86:	bf00      	nop
 8006a88:	3748      	adds	r7, #72	@ 0x48
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20001944 	.word	0x20001944
 8006a94:	20001948 	.word	0x20001948
 8006a98:	2000194c 	.word	0x2000194c
 8006a9c:	20000058 	.word	0x20000058
 8006aa0:	20000048 	.word	0x20000048

08006aa4 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 8006aaa:	4b44      	ldr	r3, [pc, #272]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006aac:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ab0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006ab4:	4b41      	ldr	r3, [pc, #260]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006ab6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006abe:	4b3f      	ldr	r3, [pc, #252]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006ac0:	edd3 7a02 	vldr	s15, [r3, #8]
 8006ac4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006ac8:	4b3c      	ldr	r3, [pc, #240]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006aca:	edd3 7a00 	vldr	s15, [r3]
 8006ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ad6:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 8006ada:	4b38      	ldr	r3, [pc, #224]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006adc:	edd3 7a02 	vldr	s15, [r3, #8]
 8006ae0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006ae4:	4b35      	ldr	r3, [pc, #212]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006ae6:	edd3 7a03 	vldr	s15, [r3, #12]
 8006aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006aee:	4b33      	ldr	r3, [pc, #204]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8006af4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006af8:	4b30      	ldr	r3, [pc, #192]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006afa:	edd3 7a00 	vldr	s15, [r3]
 8006afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b06:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 8006b0a:	4b2c      	ldr	r3, [pc, #176]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006b0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b10:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006b14:	4b29      	ldr	r3, [pc, #164]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006b16:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006b26:	4b25      	ldr	r3, [pc, #148]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006b28:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b2c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006b30:	4b22      	ldr	r3, [pc, #136]	@ (8006bbc <quaternionToThetaZ+0x118>)
 8006b32:	edd3 7a02 	vldr	s15, [r3, #8]
 8006b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b3e:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 8006b46:	edd7 7a05 	vldr	s15, [r7, #20]
 8006b4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006b4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006b52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b66:	eeb0 0a67 	vmov.f32	s0, s15
 8006b6a:	f00d fbd9 	bl	8014320 <sqrtf>
 8006b6e:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 8006b72:	ed97 7a02 	vldr	s14, [r7, #8]
 8006b76:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b7a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006b7e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8006b82:	eeb0 0a66 	vmov.f32	s0, s13
 8006b86:	f00d fc18 	bl	80143ba <fminf>
 8006b8a:	eef0 7a40 	vmov.f32	s15, s0
 8006b8e:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 8006b92:	eeb0 0a67 	vmov.f32	s0, s15
 8006b96:	f00d fbf3 	bl	8014380 <fmaxf>
 8006b9a:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 8006b9e:	ed97 0a00 	vldr	s0, [r7]
 8006ba2:	f00d fb91 	bl	80142c8 <acosf>
 8006ba6:	eef0 7a40 	vmov.f32	s15, s0
 8006baa:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006bc0 <quaternionToThetaZ+0x11c>
 8006bae:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	20000048 	.word	0x20000048
 8006bc0:	42654ca3 	.word	0x42654ca3

08006bc4 <getInitialQuaternion>:
float quaternionToRoll(){
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
return roll;
}

void getInitialQuaternion() {
 8006bc4:	b5b0      	push	{r4, r5, r7, lr}
 8006bc6:	b092      	sub	sp, #72	@ 0x48
 8006bc8:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8006bca:	4b98      	ldr	r3, [pc, #608]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bcc:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8006bd0:	4b96      	ldr	r3, [pc, #600]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bd2:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8006bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006bda:	4b94      	ldr	r3, [pc, #592]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bdc:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8006be0:	4b92      	ldr	r3, [pc, #584]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006be2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8006be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006bee:	4b8f      	ldr	r3, [pc, #572]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bf0:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8006bf4:	4b8d      	ldr	r3, [pc, #564]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006bf6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8006bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c02:	ee17 0a90 	vmov	r0, s15
 8006c06:	f7f9 fcbf 	bl	8000588 <__aeabi_f2d>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	ec43 2b10 	vmov	d0, r2, r3
 8006c12:	f00d fad9 	bl	80141c8 <sqrt>
 8006c16:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8006c1a:	4b84      	ldr	r3, [pc, #528]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7f9 fcb2 	bl	8000588 <__aeabi_f2d>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8006c2c:	4b7f      	ldr	r3, [pc, #508]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006c2e:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8006c32:	eef1 7a67 	vneg.f32	s15, s15
 8006c36:	ee17 3a90 	vmov	r3, s15
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7f9 fca4 	bl	8000588 <__aeabi_f2d>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8006c48:	4b78      	ldr	r3, [pc, #480]	@ (8006e2c <getInitialQuaternion+0x268>)
 8006c4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7f9 fc9b 	bl	8000588 <__aeabi_f2d>
 8006c52:	4602      	mov	r2, r0
 8006c54:	460b      	mov	r3, r1
 8006c56:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8006c5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006c5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c62:	f7f9 fe13 	bl	800088c <__aeabi_ddiv>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8006c6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006c72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c76:	f7f9 fe09 	bl	800088c <__aeabi_ddiv>
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 8006c82:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c8a:	f7f9 fdff 	bl	800088c <__aeabi_ddiv>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	460b      	mov	r3, r1
 8006c92:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8006c96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c9a:	f04f 0000 	mov.w	r0, #0
 8006c9e:	4964      	ldr	r1, [pc, #400]	@ (8006e30 <getInitialQuaternion+0x26c>)
 8006ca0:	f7f9 fb12 	bl	80002c8 <__aeabi_dsub>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	ec43 2b17 	vmov	d7, r2, r3
 8006cac:	eeb0 0a47 	vmov.f32	s0, s14
 8006cb0:	eef0 0a67 	vmov.f32	s1, s15
 8006cb4:	f00d fa88 	bl	80141c8 <sqrt>
 8006cb8:	ec51 0b10 	vmov	r0, r1, d0
 8006cbc:	f04f 0200 	mov.w	r2, #0
 8006cc0:	4b5c      	ldr	r3, [pc, #368]	@ (8006e34 <getInitialQuaternion+0x270>)
 8006cc2:	f7f9 fcb9 	bl	8000638 <__aeabi_dmul>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8006cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd2:	f04f 0000 	mov.w	r0, #0
 8006cd6:	4957      	ldr	r1, [pc, #348]	@ (8006e34 <getInitialQuaternion+0x270>)
 8006cd8:	f7f9 fdd8 	bl	800088c <__aeabi_ddiv>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8006ce4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006cec:	f7f9 fca4 	bl	8000638 <__aeabi_dmul>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	f04f 0200 	mov.w	r2, #0
 8006cfc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e34 <getInitialQuaternion+0x270>)
 8006cfe:	f7f9 fc9b 	bl	8000638 <__aeabi_dmul>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8006d0a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006d0e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d12:	f7f9 fc91 	bl	8000638 <__aeabi_dmul>
 8006d16:	4602      	mov	r2, r0
 8006d18:	460b      	mov	r3, r1
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	f04f 0200 	mov.w	r2, #0
 8006d22:	4b44      	ldr	r3, [pc, #272]	@ (8006e34 <getInitialQuaternion+0x270>)
 8006d24:	f7f9 fc88 	bl	8000638 <__aeabi_dmul>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	f04f 0300 	mov.w	r3, #0
 8006d38:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006d3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d44:	f7f9 fc78 	bl	8000638 <__aeabi_dmul>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4614      	mov	r4, r2
 8006d4e:	461d      	mov	r5, r3
 8006d50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d58:	f7f9 fc6e 	bl	8000638 <__aeabi_dmul>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4620      	mov	r0, r4
 8006d62:	4629      	mov	r1, r5
 8006d64:	f7f9 fab2 	bl	80002cc <__adddf3>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	461d      	mov	r5, r3
 8006d70:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006d74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006d78:	f7f9 fc5e 	bl	8000638 <__aeabi_dmul>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4620      	mov	r0, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	f7f9 faa2 	bl	80002cc <__adddf3>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	461d      	mov	r5, r3
 8006d90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006d94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d98:	f7f9 fc4e 	bl	8000638 <__aeabi_dmul>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4620      	mov	r0, r4
 8006da2:	4629      	mov	r1, r5
 8006da4:	f7f9 fa92 	bl	80002cc <__adddf3>
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	ec43 2b17 	vmov	d7, r2, r3
 8006db0:	eeb0 0a47 	vmov.f32	s0, s14
 8006db4:	eef0 0a67 	vmov.f32	s1, s15
 8006db8:	f00d fa06 	bl	80141c8 <sqrt>
 8006dbc:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8006dc0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006dc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dc8:	f7f9 fd60 	bl	800088c <__aeabi_ddiv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	f7f9 ff28 	bl	8000c28 <__aeabi_d2f>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	4a17      	ldr	r2, [pc, #92]	@ (8006e38 <getInitialQuaternion+0x274>)
 8006ddc:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006de6:	f7f9 fd51 	bl	800088c <__aeabi_ddiv>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4610      	mov	r0, r2
 8006df0:	4619      	mov	r1, r3
 8006df2:	f7f9 ff19 	bl	8000c28 <__aeabi_d2f>
 8006df6:	4603      	mov	r3, r0
 8006df8:	4a0f      	ldr	r2, [pc, #60]	@ (8006e38 <getInitialQuaternion+0x274>)
 8006dfa:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006dfc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e04:	f7f9 fd42 	bl	800088c <__aeabi_ddiv>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	4619      	mov	r1, r3
 8006e10:	f7f9 ff0a 	bl	8000c28 <__aeabi_d2f>
 8006e14:	4603      	mov	r3, r0
 8006e16:	4a08      	ldr	r2, [pc, #32]	@ (8006e38 <getInitialQuaternion+0x274>)
 8006e18:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <getInitialQuaternion+0x274>)
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	60da      	str	r2, [r3, #12]
}
 8006e22:	bf00      	nop
 8006e24:	3748      	adds	r7, #72	@ 0x48
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bdb0      	pop	{r4, r5, r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200017b0 	.word	0x200017b0
 8006e30:	3ff00000 	.word	0x3ff00000
 8006e34:	3fe00000 	.word	0x3fe00000
 8006e38:	20000048 	.word	0x20000048

08006e3c <invSqrt>:

float invSqrt(float x) {
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006e46:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e52:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006e5a:	f107 0310 	add.w	r3, r7, #16
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	105a      	asrs	r2, r3, #1
 8006e66:	4b12      	ldr	r3, [pc, #72]	@ (8006eb0 <invSqrt+0x74>)
 8006e68:	1a9b      	subs	r3, r3, r2
 8006e6a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006e6c:	f107 030c 	add.w	r3, r7, #12
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006e74:	ed97 7a04 	vldr	s14, [r7, #16]
 8006e78:	edd7 7a05 	vldr	s15, [r7, #20]
 8006e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006e80:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e88:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006e8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e90:	edd7 7a04 	vldr	s15, [r7, #16]
 8006e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e98:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	ee07 3a90 	vmov	s15, r3
}
 8006ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea6:	371c      	adds	r7, #28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	5f3759df 	.word	0x5f3759df

08006eb4 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006eba:	4b3d      	ldr	r3, [pc, #244]	@ (8006fb0 <calculate_accel_std_deviation+0xfc>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d106      	bne.n	8006ed0 <calculate_accel_std_deviation+0x1c>
 8006ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8006fb4 <calculate_accel_std_deviation+0x100>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d802      	bhi.n	8006ed0 <calculate_accel_std_deviation+0x1c>
 8006eca:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8006fb8 <calculate_accel_std_deviation+0x104>
 8006ece:	e069      	b.n	8006fa4 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006ed0:	4b37      	ldr	r3, [pc, #220]	@ (8006fb0 <calculate_accel_std_deviation+0xfc>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <calculate_accel_std_deviation+0x2a>
 8006ed8:	4b36      	ldr	r3, [pc, #216]	@ (8006fb4 <calculate_accel_std_deviation+0x100>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	e000      	b.n	8006ee0 <calculate_accel_std_deviation+0x2c>
 8006ede:	2305      	movs	r3, #5
 8006ee0:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e00e      	b.n	8006f18 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006efa:	4a30      	ldr	r2, [pc, #192]	@ (8006fbc <calculate_accel_std_deviation+0x108>)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	edd3 7a00 	vldr	s15, [r3]
 8006f06:	ed97 7a05 	vldr	s14, [r7, #20]
 8006f0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f0e:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	dbec      	blt.n	8006efa <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	ee07 3a90 	vmov	s15, r3
 8006f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f2a:	edd7 6a05 	vldr	s13, [r7, #20]
 8006f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f32:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 8006f36:	2300      	movs	r3, #0
 8006f38:	60bb      	str	r3, [r7, #8]
 8006f3a:	e01e      	b.n	8006f7a <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8006fbc <calculate_accel_std_deviation+0x108>)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	ed93 7a00 	vldr	s14, [r3]
 8006f48:	edd7 7a00 	vldr	s15, [r7]
 8006f4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f50:	4a1a      	ldr	r2, [pc, #104]	@ (8006fbc <calculate_accel_std_deviation+0x108>)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	edd3 6a00 	vldr	s13, [r3]
 8006f5c:	edd7 7a00 	vldr	s15, [r7]
 8006f60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f68:	ed97 7a04 	vldr	s14, [r7, #16]
 8006f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f70:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60bb      	str	r3, [r7, #8]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	dbdc      	blt.n	8006f3c <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	ee07 3a90 	vmov	s15, r3
 8006f88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f8c:	edd7 6a04 	vldr	s13, [r7, #16]
 8006f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f94:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 8006f98:	ed97 0a04 	vldr	s0, [r7, #16]
 8006f9c:	f00d f9c0 	bl	8014320 <sqrtf>
 8006fa0:	eef0 7a40 	vmov.f32	s15, s0
}
 8006fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	200019d1 	.word	0x200019d1
 8006fb4:	200019d0 	.word	0x200019d0
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	200019bc 	.word	0x200019bc

08006fc0 <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8006fce:	eef0 7ae7 	vabs.f32	s15, s15
 8006fd2:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8006fd6:	4b31      	ldr	r3, [pc, #196]	@ (800709c <detect_accel_failure+0xdc>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	4a31      	ldr	r2, [pc, #196]	@ (80070a0 <detect_accel_failure+0xe0>)
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8006fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800709c <detect_accel_failure+0xdc>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	4b2e      	ldr	r3, [pc, #184]	@ (80070a4 <detect_accel_failure+0xe4>)
 8006fec:	fb83 1302 	smull	r1, r3, r3, r2
 8006ff0:	1059      	asrs	r1, r3, #1
 8006ff2:	17d3      	asrs	r3, r2, #31
 8006ff4:	1ac9      	subs	r1, r1, r3
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	1ad1      	subs	r1, r2, r3
 8006ffe:	b2ca      	uxtb	r2, r1
 8007000:	4b26      	ldr	r3, [pc, #152]	@ (800709c <detect_accel_failure+0xdc>)
 8007002:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8007004:	4b25      	ldr	r3, [pc, #148]	@ (800709c <detect_accel_failure+0xdc>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 800700c:	4b26      	ldr	r3, [pc, #152]	@ (80070a8 <detect_accel_failure+0xe8>)
 800700e:	2201      	movs	r2, #1
 8007010:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 8007012:	f7ff ff4f 	bl	8006eb4 <calculate_accel_std_deviation>
 8007016:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 800701a:	f7fc fa59 	bl	80034d0 <flight_algorithm_get_start_time>
 800701e:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d002      	beq.n	800702c <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 8007026:	4a21      	ldr	r2, [pc, #132]	@ (80070ac <detect_accel_failure+0xec>)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 800702c:	4b1f      	ldr	r3, [pc, #124]	@ (80070ac <detect_accel_failure+0xec>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d104      	bne.n	800703e <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 8007034:	4b1e      	ldr	r3, [pc, #120]	@ (80070b0 <detect_accel_failure+0xf0>)
 8007036:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8007038:	4b1e      	ldr	r3, [pc, #120]	@ (80070b4 <detect_accel_failure+0xf4>)
 800703a:	61bb      	str	r3, [r7, #24]
 800703c:	e014      	b.n	8007068 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 800703e:	f000 ff1b 	bl	8007e78 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	4b19      	ldr	r3, [pc, #100]	@ (80070ac <detect_accel_failure+0xec>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8007052:	4293      	cmp	r3, r2
 8007054:	d804      	bhi.n	8007060 <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 8007056:	4b18      	ldr	r3, [pc, #96]	@ (80070b8 <detect_accel_failure+0xf8>)
 8007058:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 800705a:	4b18      	ldr	r3, [pc, #96]	@ (80070bc <detect_accel_failure+0xfc>)
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	e003      	b.n	8007068 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8007060:	4b16      	ldr	r3, [pc, #88]	@ (80070bc <detect_accel_failure+0xfc>)
 8007062:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8007064:	4b16      	ldr	r3, [pc, #88]	@ (80070c0 <detect_accel_failure+0x100>)
 8007066:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 8007068:	ed97 7a05 	vldr	s14, [r7, #20]
 800706c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007078:	dc08      	bgt.n	800708c <detect_accel_failure+0xcc>
 800707a:	ed97 7a04 	vldr	s14, [r7, #16]
 800707e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708a:	dd01      	ble.n	8007090 <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3720      	adds	r7, #32
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	200019d0 	.word	0x200019d0
 80070a0:	200019bc 	.word	0x200019bc
 80070a4:	66666667 	.word	0x66666667
 80070a8:	200019d1 	.word	0x200019d1
 80070ac:	200019b8 	.word	0x200019b8
 80070b0:	43480000 	.word	0x43480000
 80070b4:	42c80000 	.word	0x42c80000
 80070b8:	43160000 	.word	0x43160000
 80070bc:	42480000 	.word	0x42480000
 80070c0:	41700000 	.word	0x41700000

080070c4 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 80070cc:	481b      	ldr	r0, [pc, #108]	@ (800713c <sensor_fusion_init+0x78>)
 80070ce:	f7fc fa0b 	bl	80034e8 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 80070d2:	4b1a      	ldr	r3, [pc, #104]	@ (800713c <sensor_fusion_init+0x78>)
 80070d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007140 <sensor_fusion_init+0x7c>)
 80070d6:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 80070d8:	4b18      	ldr	r3, [pc, #96]	@ (800713c <sensor_fusion_init+0x78>)
 80070da:	4a1a      	ldr	r2, [pc, #104]	@ (8007144 <sensor_fusion_init+0x80>)
 80070dc:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 80070de:	4b17      	ldr	r3, [pc, #92]	@ (800713c <sensor_fusion_init+0x78>)
 80070e0:	4a19      	ldr	r2, [pc, #100]	@ (8007148 <sensor_fusion_init+0x84>)
 80070e2:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80070e4:	2300      	movs	r3, #0
 80070e6:	60fb      	str	r3, [r7, #12]
 80070e8:	e009      	b.n	80070fe <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 80070ea:	4a18      	ldr	r2, [pc, #96]	@ (800714c <sensor_fusion_init+0x88>)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	f04f 0200 	mov.w	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b04      	cmp	r3, #4
 8007102:	ddf2      	ble.n	80070ea <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8007104:	4b12      	ldr	r3, [pc, #72]	@ (8007150 <sensor_fusion_init+0x8c>)
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 800710a:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <sensor_fusion_init+0x90>)
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8007110:	4b11      	ldr	r3, [pc, #68]	@ (8007158 <sensor_fusion_init+0x94>)
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8007116:	4b11      	ldr	r3, [pc, #68]	@ (800715c <sensor_fusion_init+0x98>)
 8007118:	2201      	movs	r2, #1
 800711a:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007120:	4a0f      	ldr	r2, [pc, #60]	@ (8007160 <sensor_fusion_init+0x9c>)
 8007122:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8007124:	f000 fea8 	bl	8007e78 <HAL_GetTick>
 8007128:	4603      	mov	r3, r0
 800712a:	4a0e      	ldr	r2, [pc, #56]	@ (8007164 <sensor_fusion_init+0xa0>)
 800712c:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 800712e:	4b0e      	ldr	r3, [pc, #56]	@ (8007168 <sensor_fusion_init+0xa4>)
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20001960 	.word	0x20001960
 8007140:	3dcccccd 	.word	0x3dcccccd
 8007144:	3ba3d70a 	.word	0x3ba3d70a
 8007148:	40a00000 	.word	0x40a00000
 800714c:	200019bc 	.word	0x200019bc
 8007150:	200019d0 	.word	0x200019d0
 8007154:	200019d1 	.word	0x200019d1
 8007158:	200019d2 	.word	0x200019d2
 800715c:	200019ac 	.word	0x200019ac
 8007160:	200019b0 	.word	0x200019b0
 8007164:	200019b4 	.word	0x200019b4
 8007168:	200019b8 	.word	0x200019b8
 800716c:	00000000 	.word	0x00000000

08007170 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08a      	sub	sp, #40	@ 0x28
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 800717c:	f000 fe7c 	bl	8007e78 <HAL_GetTick>
 8007180:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 8007182:	4b4b      	ldr	r3, [pc, #300]	@ (80072b0 <sensor_fusion_update_kalman+0x140>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a3a      	ldr	r2, [r7, #32]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	ee07 3a90 	vmov	s15, r3
 800718e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007192:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80072b4 <sensor_fusion_update_kalman+0x144>
 8007196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800719a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 800719e:	4a44      	ldr	r2, [pc, #272]	@ (80072b0 <sensor_fusion_update_kalman+0x140>)
 80071a0:	6a3b      	ldr	r3, [r7, #32]
 80071a2:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 80071aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80071ae:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80072b8 <sensor_fusion_update_kalman+0x148>
 80071b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ba:	d801      	bhi.n	80071c0 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 80071bc:	4b3f      	ldr	r3, [pc, #252]	@ (80072bc <sensor_fusion_update_kalman+0x14c>)
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071c4:	4618      	mov	r0, r3
 80071c6:	f7f9 f9df 	bl	8000588 <__aeabi_f2d>
 80071ca:	a335      	add	r3, pc, #212	@ (adr r3, 80072a0 <sensor_fusion_update_kalman+0x130>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f9 fa32 	bl	8000638 <__aeabi_dmul>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4610      	mov	r0, r2
 80071da:	4619      	mov	r1, r3
 80071dc:	f7f9 fd24 	bl	8000c28 <__aeabi_d2f>
 80071e0:	4603      	mov	r3, r0
 80071e2:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 80071e4:	69b8      	ldr	r0, [r7, #24]
 80071e6:	f7f9 f9cf 	bl	8000588 <__aeabi_f2d>
 80071ea:	4602      	mov	r2, r0
 80071ec:	460b      	mov	r3, r1
 80071ee:	ec43 2b10 	vmov	d0, r2, r3
 80071f2:	f00d f815 	bl	8014220 <cos>
 80071f6:	ec51 0b10 	vmov	r0, r1, d0
 80071fa:	a32b      	add	r3, pc, #172	@ (adr r3, 80072a8 <sensor_fusion_update_kalman+0x138>)
 80071fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007200:	f7f9 fa1a 	bl	8000638 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	4610      	mov	r0, r2
 800720a:	4619      	mov	r1, r3
 800720c:	f7f9 fd0c 	bl	8000c28 <__aeabi_d2f>
 8007210:	4603      	mov	r3, r0
 8007212:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800721a:	edd7 7a05 	vldr	s15, [r7, #20]
 800721e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007222:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8007226:	ed97 0a04 	vldr	s0, [r7, #16]
 800722a:	f7ff fec9 	bl	8006fc0 <detect_accel_failure>
 800722e:	4603      	mov	r3, r0
 8007230:	461a      	mov	r2, r3
 8007232:	4b23      	ldr	r3, [pc, #140]	@ (80072c0 <sensor_fusion_update_kalman+0x150>)
 8007234:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8007236:	4b22      	ldr	r3, [pc, #136]	@ (80072c0 <sensor_fusion_update_kalman+0x150>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 800723e:	4b21      	ldr	r3, [pc, #132]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007240:	4a21      	ldr	r2, [pc, #132]	@ (80072c8 <sensor_fusion_update_kalman+0x158>)
 8007242:	639a      	str	r2, [r3, #56]	@ 0x38
 8007244:	e002      	b.n	800724c <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 8007246:	4b1f      	ldr	r3, [pc, #124]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007248:	4a20      	ldr	r2, [pc, #128]	@ (80072cc <sensor_fusion_update_kalman+0x15c>)
 800724a:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 800724c:	4b20      	ldr	r3, [pc, #128]	@ (80072d0 <sensor_fusion_update_kalman+0x160>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d020      	beq.n	8007296 <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 8007254:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 8007258:	edd7 0a04 	vldr	s1, [r7, #16]
 800725c:	ed97 0a07 	vldr	s0, [r7, #28]
 8007260:	4818      	ldr	r0, [pc, #96]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007262:	f7fc f99b 	bl	800359c <KalmanFilter_Update>
 8007266:	eef0 7a40 	vmov.f32	s15, s0
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 8007270:	4814      	ldr	r0, [pc, #80]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007272:	f7fd fb77 	bl	8004964 <KalmanFilter_IsApogeeDetected>
 8007276:	4603      	mov	r3, r0
 8007278:	b2da      	uxtb	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 800727e:	4811      	ldr	r0, [pc, #68]	@ (80072c4 <sensor_fusion_update_kalman+0x154>)
 8007280:	f7fd fb61 	bl	8004946 <Kalman_Get_Velocity>
 8007284:	eef0 7a40 	vmov.f32	s15, s0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 800728e:	4b0c      	ldr	r3, [pc, #48]	@ (80072c0 <sensor_fusion_update_kalman+0x150>)
 8007290:	781a      	ldrb	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	765a      	strb	r2, [r3, #25]
    }
}
 8007296:	bf00      	nop
 8007298:	3728      	adds	r7, #40	@ 0x28
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	a2529d39 	.word	0xa2529d39
 80072a4:	3f91df46 	.word	0x3f91df46
 80072a8:	60000000 	.word	0x60000000
 80072ac:	40239eb8 	.word	0x40239eb8
 80072b0:	200019b4 	.word	0x200019b4
 80072b4:	447a0000 	.word	0x447a0000
 80072b8:	3a83126f 	.word	0x3a83126f
 80072bc:	3c23d70a 	.word	0x3c23d70a
 80072c0:	200019d2 	.word	0x200019d2
 80072c4:	20001960 	.word	0x20001960
 80072c8:	42480000 	.word	0x42480000
 80072cc:	3e99999a 	.word	0x3e99999a
 80072d0:	200019ac 	.word	0x200019ac

080072d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072da:	2300      	movs	r3, #0
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	4b10      	ldr	r3, [pc, #64]	@ (8007320 <HAL_MspInit+0x4c>)
 80072e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072e2:	4a0f      	ldr	r2, [pc, #60]	@ (8007320 <HAL_MspInit+0x4c>)
 80072e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80072ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007320 <HAL_MspInit+0x4c>)
 80072ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072f2:	607b      	str	r3, [r7, #4]
 80072f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80072f6:	2300      	movs	r3, #0
 80072f8:	603b      	str	r3, [r7, #0]
 80072fa:	4b09      	ldr	r3, [pc, #36]	@ (8007320 <HAL_MspInit+0x4c>)
 80072fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072fe:	4a08      	ldr	r2, [pc, #32]	@ (8007320 <HAL_MspInit+0x4c>)
 8007300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007304:	6413      	str	r3, [r2, #64]	@ 0x40
 8007306:	4b06      	ldr	r3, [pc, #24]	@ (8007320 <HAL_MspInit+0x4c>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007312:	bf00      	nop
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr
 800731e:	bf00      	nop
 8007320:	40023800 	.word	0x40023800

08007324 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b08e      	sub	sp, #56	@ 0x38
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800732c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007330:	2200      	movs	r2, #0
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	605a      	str	r2, [r3, #4]
 8007336:	609a      	str	r2, [r3, #8]
 8007338:	60da      	str	r2, [r3, #12]
 800733a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a45      	ldr	r2, [pc, #276]	@ (8007458 <HAL_ADC_MspInit+0x134>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d128      	bne.n	8007398 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007346:	2300      	movs	r3, #0
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	4b44      	ldr	r3, [pc, #272]	@ (800745c <HAL_ADC_MspInit+0x138>)
 800734c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800734e:	4a43      	ldr	r2, [pc, #268]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007354:	6453      	str	r3, [r2, #68]	@ 0x44
 8007356:	4b41      	ldr	r3, [pc, #260]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	623b      	str	r3, [r7, #32]
 8007360:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007362:	2300      	movs	r3, #0
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	4b3d      	ldr	r3, [pc, #244]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	4a3c      	ldr	r2, [pc, #240]	@ (800745c <HAL_ADC_MspInit+0x138>)
 800736c:	f043 0302 	orr.w	r3, r3, #2
 8007370:	6313      	str	r3, [r2, #48]	@ 0x30
 8007372:	4b3a      	ldr	r3, [pc, #232]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007376:	f003 0302 	and.w	r3, r3, #2
 800737a:	61fb      	str	r3, [r7, #28]
 800737c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800737e:	2302      	movs	r3, #2
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007382:	2303      	movs	r3, #3
 8007384:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007386:	2300      	movs	r3, #0
 8007388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800738a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800738e:	4619      	mov	r1, r3
 8007390:	4833      	ldr	r0, [pc, #204]	@ (8007460 <HAL_ADC_MspInit+0x13c>)
 8007392:	f001 ff6f 	bl	8009274 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8007396:	e05a      	b.n	800744e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a31      	ldr	r2, [pc, #196]	@ (8007464 <HAL_ADC_MspInit+0x140>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d128      	bne.n	80073f4 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80073a2:	2300      	movs	r3, #0
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	4b2d      	ldr	r3, [pc, #180]	@ (800745c <HAL_ADC_MspInit+0x138>)
 80073a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073aa:	4a2c      	ldr	r2, [pc, #176]	@ (800745c <HAL_ADC_MspInit+0x138>)
 80073ac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80073b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80073b2:	4b2a      	ldr	r3, [pc, #168]	@ (800745c <HAL_ADC_MspInit+0x138>)
 80073b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073be:	2300      	movs	r3, #0
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	4b26      	ldr	r3, [pc, #152]	@ (800745c <HAL_ADC_MspInit+0x138>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073c6:	4a25      	ldr	r2, [pc, #148]	@ (800745c <HAL_ADC_MspInit+0x138>)
 80073c8:	f043 0304 	orr.w	r3, r3, #4
 80073cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80073ce:	4b23      	ldr	r3, [pc, #140]	@ (800745c <HAL_ADC_MspInit+0x138>)
 80073d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	617b      	str	r3, [r7, #20]
 80073d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80073da:	2301      	movs	r3, #1
 80073dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073de:	2303      	movs	r3, #3
 80073e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073ea:	4619      	mov	r1, r3
 80073ec:	481e      	ldr	r0, [pc, #120]	@ (8007468 <HAL_ADC_MspInit+0x144>)
 80073ee:	f001 ff41 	bl	8009274 <HAL_GPIO_Init>
}
 80073f2:	e02c      	b.n	800744e <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a1c      	ldr	r2, [pc, #112]	@ (800746c <HAL_ADC_MspInit+0x148>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d127      	bne.n	800744e <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
 8007402:	4b16      	ldr	r3, [pc, #88]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007406:	4a15      	ldr	r2, [pc, #84]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007408:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800740c:	6453      	str	r3, [r2, #68]	@ 0x44
 800740e:	4b13      	ldr	r3, [pc, #76]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]
 800741e:	4b0f      	ldr	r3, [pc, #60]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007422:	4a0e      	ldr	r2, [pc, #56]	@ (800745c <HAL_ADC_MspInit+0x138>)
 8007424:	f043 0304 	orr.w	r3, r3, #4
 8007428:	6313      	str	r3, [r2, #48]	@ 0x30
 800742a:	4b0c      	ldr	r3, [pc, #48]	@ (800745c <HAL_ADC_MspInit+0x138>)
 800742c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007436:	2302      	movs	r3, #2
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800743a:	2303      	movs	r3, #3
 800743c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800743e:	2300      	movs	r3, #0
 8007440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007446:	4619      	mov	r1, r3
 8007448:	4807      	ldr	r0, [pc, #28]	@ (8007468 <HAL_ADC_MspInit+0x144>)
 800744a:	f001 ff13 	bl	8009274 <HAL_GPIO_Init>
}
 800744e:	bf00      	nop
 8007450:	3738      	adds	r7, #56	@ 0x38
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	40012000 	.word	0x40012000
 800745c:	40023800 	.word	0x40023800
 8007460:	40020400 	.word	0x40020400
 8007464:	40012100 	.word	0x40012100
 8007468:	40020800 	.word	0x40020800
 800746c:	40012200 	.word	0x40012200

08007470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	@ 0x30
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007478:	f107 031c 	add.w	r3, r7, #28
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]
 8007480:	605a      	str	r2, [r3, #4]
 8007482:	609a      	str	r2, [r3, #8]
 8007484:	60da      	str	r2, [r3, #12]
 8007486:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4a5d      	ldr	r2, [pc, #372]	@ (8007604 <HAL_I2C_MspInit+0x194>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d163      	bne.n	800755a <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007492:	2300      	movs	r3, #0
 8007494:	61bb      	str	r3, [r7, #24]
 8007496:	4b5c      	ldr	r3, [pc, #368]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 8007498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800749a:	4a5b      	ldr	r2, [pc, #364]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 800749c:	f043 0302 	orr.w	r3, r3, #2
 80074a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80074a2:	4b59      	ldr	r3, [pc, #356]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 80074a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074a6:	f003 0302 	and.w	r3, r3, #2
 80074aa:	61bb      	str	r3, [r7, #24]
 80074ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80074ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80074b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80074b4:	2312      	movs	r3, #18
 80074b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b8:	2300      	movs	r3, #0
 80074ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074bc:	2303      	movs	r3, #3
 80074be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80074c0:	2304      	movs	r3, #4
 80074c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074c4:	f107 031c 	add.w	r3, r7, #28
 80074c8:	4619      	mov	r1, r3
 80074ca:	4850      	ldr	r0, [pc, #320]	@ (800760c <HAL_I2C_MspInit+0x19c>)
 80074cc:	f001 fed2 	bl	8009274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80074d0:	2300      	movs	r3, #0
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	4b4c      	ldr	r3, [pc, #304]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 80074d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d8:	4a4b      	ldr	r2, [pc, #300]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 80074da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074de:	6413      	str	r3, [r2, #64]	@ 0x40
 80074e0:	4b49      	ldr	r3, [pc, #292]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 80074e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074e8:	617b      	str	r3, [r7, #20]
 80074ea:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80074ec:	4b48      	ldr	r3, [pc, #288]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 80074ee:	4a49      	ldr	r2, [pc, #292]	@ (8007614 <HAL_I2C_MspInit+0x1a4>)
 80074f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80074f2:	4b47      	ldr	r3, [pc, #284]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 80074f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80074f8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80074fa:	4b45      	ldr	r3, [pc, #276]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007500:	4b43      	ldr	r3, [pc, #268]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 8007502:	2200      	movs	r2, #0
 8007504:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007506:	4b42      	ldr	r3, [pc, #264]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 8007508:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800750c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800750e:	4b40      	ldr	r3, [pc, #256]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 8007510:	2200      	movs	r2, #0
 8007512:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007514:	4b3e      	ldr	r3, [pc, #248]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 8007516:	2200      	movs	r2, #0
 8007518:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800751a:	4b3d      	ldr	r3, [pc, #244]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 800751c:	2200      	movs	r2, #0
 800751e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007520:	4b3b      	ldr	r3, [pc, #236]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 8007522:	2200      	movs	r2, #0
 8007524:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007526:	4b3a      	ldr	r3, [pc, #232]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 8007528:	2200      	movs	r2, #0
 800752a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800752c:	4838      	ldr	r0, [pc, #224]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 800752e:	f001 fa27 	bl	8008980 <HAL_DMA_Init>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8007538:	f7fe fb38 	bl	8005bac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a34      	ldr	r2, [pc, #208]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 8007540:	639a      	str	r2, [r3, #56]	@ 0x38
 8007542:	4a33      	ldr	r2, [pc, #204]	@ (8007610 <HAL_I2C_MspInit+0x1a0>)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8007548:	2200      	movs	r2, #0
 800754a:	2100      	movs	r1, #0
 800754c:	201f      	movs	r0, #31
 800754e:	f001 f9d2 	bl	80088f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8007552:	201f      	movs	r0, #31
 8007554:	f001 f9eb 	bl	800892e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8007558:	e050      	b.n	80075fc <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C3)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a2e      	ldr	r2, [pc, #184]	@ (8007618 <HAL_I2C_MspInit+0x1a8>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d14b      	bne.n	80075fc <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007564:	2300      	movs	r3, #0
 8007566:	613b      	str	r3, [r7, #16]
 8007568:	4b27      	ldr	r3, [pc, #156]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 800756a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756c:	4a26      	ldr	r2, [pc, #152]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 800756e:	f043 0304 	orr.w	r3, r3, #4
 8007572:	6313      	str	r3, [r2, #48]	@ 0x30
 8007574:	4b24      	ldr	r3, [pc, #144]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 8007576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007580:	2300      	movs	r3, #0
 8007582:	60fb      	str	r3, [r7, #12]
 8007584:	4b20      	ldr	r3, [pc, #128]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007588:	4a1f      	ldr	r2, [pc, #124]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 800758a:	f043 0301 	orr.w	r3, r3, #1
 800758e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007590:	4b1d      	ldr	r3, [pc, #116]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	60fb      	str	r3, [r7, #12]
 800759a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800759c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075a2:	2312      	movs	r3, #18
 80075a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075aa:	2303      	movs	r3, #3
 80075ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80075ae:	2304      	movs	r3, #4
 80075b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075b2:	f107 031c 	add.w	r3, r7, #28
 80075b6:	4619      	mov	r1, r3
 80075b8:	4818      	ldr	r0, [pc, #96]	@ (800761c <HAL_I2C_MspInit+0x1ac>)
 80075ba:	f001 fe5b 	bl	8009274 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80075be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80075c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80075c4:	2312      	movs	r3, #18
 80075c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075c8:	2300      	movs	r3, #0
 80075ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075cc:	2303      	movs	r3, #3
 80075ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80075d0:	2304      	movs	r3, #4
 80075d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075d4:	f107 031c 	add.w	r3, r7, #28
 80075d8:	4619      	mov	r1, r3
 80075da:	4811      	ldr	r0, [pc, #68]	@ (8007620 <HAL_I2C_MspInit+0x1b0>)
 80075dc:	f001 fe4a 	bl	8009274 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80075e0:	2300      	movs	r3, #0
 80075e2:	60bb      	str	r3, [r7, #8]
 80075e4:	4b08      	ldr	r3, [pc, #32]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 80075e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e8:	4a07      	ldr	r2, [pc, #28]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 80075ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80075ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80075f0:	4b05      	ldr	r3, [pc, #20]	@ (8007608 <HAL_I2C_MspInit+0x198>)
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075f8:	60bb      	str	r3, [r7, #8]
 80075fa:	68bb      	ldr	r3, [r7, #8]
}
 80075fc:	bf00      	nop
 80075fe:	3730      	adds	r7, #48	@ 0x30
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	40005400 	.word	0x40005400
 8007608:	40023800 	.word	0x40023800
 800760c:	40020400 	.word	0x40020400
 8007610:	200014cc 	.word	0x200014cc
 8007614:	40026010 	.word	0x40026010
 8007618:	40005c00 	.word	0x40005c00
 800761c:	40020800 	.word	0x40020800
 8007620:	40020000 	.word	0x40020000

08007624 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a1a      	ldr	r2, [pc, #104]	@ (800769c <HAL_I2C_MspDeInit+0x78>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d118      	bne.n	8007668 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007636:	4b1a      	ldr	r3, [pc, #104]	@ (80076a0 <HAL_I2C_MspDeInit+0x7c>)
 8007638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800763a:	4a19      	ldr	r2, [pc, #100]	@ (80076a0 <HAL_I2C_MspDeInit+0x7c>)
 800763c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007640:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8007642:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007646:	4817      	ldr	r0, [pc, #92]	@ (80076a4 <HAL_I2C_MspDeInit+0x80>)
 8007648:	f001 ffa8 	bl	800959c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800764c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007650:	4814      	ldr	r0, [pc, #80]	@ (80076a4 <HAL_I2C_MspDeInit+0x80>)
 8007652:	f001 ffa3 	bl	800959c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765a:	4618      	mov	r0, r3
 800765c:	f001 fa3e 	bl	8008adc <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8007660:	201f      	movs	r0, #31
 8007662:	f001 f972 	bl	800894a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8007666:	e014      	b.n	8007692 <HAL_I2C_MspDeInit+0x6e>
  else if(hi2c->Instance==I2C3)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a0e      	ldr	r2, [pc, #56]	@ (80076a8 <HAL_I2C_MspDeInit+0x84>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d10f      	bne.n	8007692 <HAL_I2C_MspDeInit+0x6e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007672:	4b0b      	ldr	r3, [pc, #44]	@ (80076a0 <HAL_I2C_MspDeInit+0x7c>)
 8007674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007676:	4a0a      	ldr	r2, [pc, #40]	@ (80076a0 <HAL_I2C_MspDeInit+0x7c>)
 8007678:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800767c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 800767e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007682:	480a      	ldr	r0, [pc, #40]	@ (80076ac <HAL_I2C_MspDeInit+0x88>)
 8007684:	f001 ff8a 	bl	800959c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007688:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800768c:	4808      	ldr	r0, [pc, #32]	@ (80076b0 <HAL_I2C_MspDeInit+0x8c>)
 800768e:	f001 ff85 	bl	800959c <HAL_GPIO_DeInit>
}
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	40005400 	.word	0x40005400
 80076a0:	40023800 	.word	0x40023800
 80076a4:	40020400 	.word	0x40020400
 80076a8:	40005c00 	.word	0x40005c00
 80076ac:	40020800 	.word	0x40020800
 80076b0:	40020000 	.word	0x40020000

080076b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c4:	d115      	bne.n	80076f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	4b0c      	ldr	r3, [pc, #48]	@ (80076fc <HAL_TIM_Base_MspInit+0x48>)
 80076cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ce:	4a0b      	ldr	r2, [pc, #44]	@ (80076fc <HAL_TIM_Base_MspInit+0x48>)
 80076d0:	f043 0301 	orr.w	r3, r3, #1
 80076d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80076d6:	4b09      	ldr	r3, [pc, #36]	@ (80076fc <HAL_TIM_Base_MspInit+0x48>)
 80076d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80076e2:	2200      	movs	r2, #0
 80076e4:	2100      	movs	r1, #0
 80076e6:	201c      	movs	r0, #28
 80076e8:	f001 f905 	bl	80088f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80076ec:	201c      	movs	r0, #28
 80076ee:	f001 f91e 	bl	800892e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80076f2:	bf00      	nop
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	40023800 	.word	0x40023800

08007700 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08e      	sub	sp, #56	@ 0x38
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800770c:	2200      	movs	r2, #0
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	605a      	str	r2, [r3, #4]
 8007712:	609a      	str	r2, [r3, #8]
 8007714:	60da      	str	r2, [r3, #12]
 8007716:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a9c      	ldr	r2, [pc, #624]	@ (8007990 <HAL_UART_MspInit+0x290>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d162      	bne.n	80077e8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007722:	2300      	movs	r3, #0
 8007724:	623b      	str	r3, [r7, #32]
 8007726:	4b9b      	ldr	r3, [pc, #620]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800772a:	4a9a      	ldr	r2, [pc, #616]	@ (8007994 <HAL_UART_MspInit+0x294>)
 800772c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007730:	6413      	str	r3, [r2, #64]	@ 0x40
 8007732:	4b98      	ldr	r3, [pc, #608]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007736:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800773a:	623b      	str	r3, [r7, #32]
 800773c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800773e:	2300      	movs	r3, #0
 8007740:	61fb      	str	r3, [r7, #28]
 8007742:	4b94      	ldr	r3, [pc, #592]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	4a93      	ldr	r2, [pc, #588]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007748:	f043 0301 	orr.w	r3, r3, #1
 800774c:	6313      	str	r3, [r2, #48]	@ 0x30
 800774e:	4b91      	ldr	r3, [pc, #580]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007752:	f003 0301 	and.w	r3, r3, #1
 8007756:	61fb      	str	r3, [r7, #28]
 8007758:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800775a:	2303      	movs	r3, #3
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800775e:	2302      	movs	r3, #2
 8007760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007762:	2300      	movs	r3, #0
 8007764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007766:	2303      	movs	r3, #3
 8007768:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800776a:	2308      	movs	r3, #8
 800776c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800776e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007772:	4619      	mov	r1, r3
 8007774:	4888      	ldr	r0, [pc, #544]	@ (8007998 <HAL_UART_MspInit+0x298>)
 8007776:	f001 fd7d 	bl	8009274 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800777a:	4b88      	ldr	r3, [pc, #544]	@ (800799c <HAL_UART_MspInit+0x29c>)
 800777c:	4a88      	ldr	r2, [pc, #544]	@ (80079a0 <HAL_UART_MspInit+0x2a0>)
 800777e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007780:	4b86      	ldr	r3, [pc, #536]	@ (800799c <HAL_UART_MspInit+0x29c>)
 8007782:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007786:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007788:	4b84      	ldr	r3, [pc, #528]	@ (800799c <HAL_UART_MspInit+0x29c>)
 800778a:	2240      	movs	r2, #64	@ 0x40
 800778c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800778e:	4b83      	ldr	r3, [pc, #524]	@ (800799c <HAL_UART_MspInit+0x29c>)
 8007790:	2200      	movs	r2, #0
 8007792:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007794:	4b81      	ldr	r3, [pc, #516]	@ (800799c <HAL_UART_MspInit+0x29c>)
 8007796:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800779a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800779c:	4b7f      	ldr	r3, [pc, #508]	@ (800799c <HAL_UART_MspInit+0x29c>)
 800779e:	2200      	movs	r2, #0
 80077a0:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077a2:	4b7e      	ldr	r3, [pc, #504]	@ (800799c <HAL_UART_MspInit+0x29c>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80077a8:	4b7c      	ldr	r3, [pc, #496]	@ (800799c <HAL_UART_MspInit+0x29c>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80077ae:	4b7b      	ldr	r3, [pc, #492]	@ (800799c <HAL_UART_MspInit+0x29c>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80077b4:	4b79      	ldr	r3, [pc, #484]	@ (800799c <HAL_UART_MspInit+0x29c>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80077ba:	4878      	ldr	r0, [pc, #480]	@ (800799c <HAL_UART_MspInit+0x29c>)
 80077bc:	f001 f8e0 	bl	8008980 <HAL_DMA_Init>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80077c6:	f7fe f9f1 	bl	8005bac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a73      	ldr	r2, [pc, #460]	@ (800799c <HAL_UART_MspInit+0x29c>)
 80077ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80077d0:	4a72      	ldr	r2, [pc, #456]	@ (800799c <HAL_UART_MspInit+0x29c>)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80077d6:	2200      	movs	r2, #0
 80077d8:	2100      	movs	r1, #0
 80077da:	2034      	movs	r0, #52	@ 0x34
 80077dc:	f001 f88b 	bl	80088f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80077e0:	2034      	movs	r0, #52	@ 0x34
 80077e2:	f001 f8a4 	bl	800892e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80077e6:	e0cf      	b.n	8007988 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a6d      	ldr	r2, [pc, #436]	@ (80079a4 <HAL_UART_MspInit+0x2a4>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d162      	bne.n	80078b8 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80077f2:	2300      	movs	r3, #0
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	4b67      	ldr	r3, [pc, #412]	@ (8007994 <HAL_UART_MspInit+0x294>)
 80077f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fa:	4a66      	ldr	r2, [pc, #408]	@ (8007994 <HAL_UART_MspInit+0x294>)
 80077fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007800:	6413      	str	r3, [r2, #64]	@ 0x40
 8007802:	4b64      	ldr	r3, [pc, #400]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800780a:	61bb      	str	r3, [r7, #24]
 800780c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800780e:	2300      	movs	r3, #0
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	4b60      	ldr	r3, [pc, #384]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007816:	4a5f      	ldr	r2, [pc, #380]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007818:	f043 0301 	orr.w	r3, r3, #1
 800781c:	6313      	str	r3, [r2, #48]	@ 0x30
 800781e:	4b5d      	ldr	r3, [pc, #372]	@ (8007994 <HAL_UART_MspInit+0x294>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	617b      	str	r3, [r7, #20]
 8007828:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800782a:	230c      	movs	r3, #12
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800782e:	2302      	movs	r3, #2
 8007830:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007832:	2300      	movs	r3, #0
 8007834:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007836:	2303      	movs	r3, #3
 8007838:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800783a:	2307      	movs	r3, #7
 800783c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800783e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007842:	4619      	mov	r1, r3
 8007844:	4854      	ldr	r0, [pc, #336]	@ (8007998 <HAL_UART_MspInit+0x298>)
 8007846:	f001 fd15 	bl	8009274 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800784a:	4b57      	ldr	r3, [pc, #348]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 800784c:	4a57      	ldr	r2, [pc, #348]	@ (80079ac <HAL_UART_MspInit+0x2ac>)
 800784e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007850:	4b55      	ldr	r3, [pc, #340]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 8007852:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007856:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007858:	4b53      	ldr	r3, [pc, #332]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 800785a:	2240      	movs	r2, #64	@ 0x40
 800785c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800785e:	4b52      	ldr	r3, [pc, #328]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 8007860:	2200      	movs	r2, #0
 8007862:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007864:	4b50      	ldr	r3, [pc, #320]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 8007866:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800786a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800786c:	4b4e      	ldr	r3, [pc, #312]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 800786e:	2200      	movs	r2, #0
 8007870:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007872:	4b4d      	ldr	r3, [pc, #308]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 8007874:	2200      	movs	r2, #0
 8007876:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007878:	4b4b      	ldr	r3, [pc, #300]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 800787a:	2200      	movs	r2, #0
 800787c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800787e:	4b4a      	ldr	r3, [pc, #296]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 8007880:	2200      	movs	r2, #0
 8007882:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007884:	4b48      	ldr	r3, [pc, #288]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 8007886:	2200      	movs	r2, #0
 8007888:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800788a:	4847      	ldr	r0, [pc, #284]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 800788c:	f001 f878 	bl	8008980 <HAL_DMA_Init>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8007896:	f7fe f989 	bl	8005bac <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a42      	ldr	r2, [pc, #264]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 800789e:	639a      	str	r2, [r3, #56]	@ 0x38
 80078a0:	4a41      	ldr	r2, [pc, #260]	@ (80079a8 <HAL_UART_MspInit+0x2a8>)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80078a6:	2200      	movs	r2, #0
 80078a8:	2100      	movs	r1, #0
 80078aa:	2026      	movs	r0, #38	@ 0x26
 80078ac:	f001 f823 	bl	80088f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80078b0:	2026      	movs	r0, #38	@ 0x26
 80078b2:	f001 f83c 	bl	800892e <HAL_NVIC_EnableIRQ>
}
 80078b6:	e067      	b.n	8007988 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART6)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a3c      	ldr	r2, [pc, #240]	@ (80079b0 <HAL_UART_MspInit+0x2b0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d162      	bne.n	8007988 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]
 80078c6:	4b33      	ldr	r3, [pc, #204]	@ (8007994 <HAL_UART_MspInit+0x294>)
 80078c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078ca:	4a32      	ldr	r2, [pc, #200]	@ (8007994 <HAL_UART_MspInit+0x294>)
 80078cc:	f043 0320 	orr.w	r3, r3, #32
 80078d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80078d2:	4b30      	ldr	r3, [pc, #192]	@ (8007994 <HAL_UART_MspInit+0x294>)
 80078d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	613b      	str	r3, [r7, #16]
 80078dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007994 <HAL_UART_MspInit+0x294>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007994 <HAL_UART_MspInit+0x294>)
 80078e8:	f043 0304 	orr.w	r3, r3, #4
 80078ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80078ee:	4b29      	ldr	r3, [pc, #164]	@ (8007994 <HAL_UART_MspInit+0x294>)
 80078f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f2:	f003 0304 	and.w	r3, r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]
 80078f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80078fa:	23c0      	movs	r3, #192	@ 0xc0
 80078fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078fe:	2302      	movs	r3, #2
 8007900:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007902:	2300      	movs	r3, #0
 8007904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007906:	2303      	movs	r3, #3
 8007908:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800790a:	2308      	movs	r3, #8
 800790c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800790e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007912:	4619      	mov	r1, r3
 8007914:	4827      	ldr	r0, [pc, #156]	@ (80079b4 <HAL_UART_MspInit+0x2b4>)
 8007916:	f001 fcad 	bl	8009274 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 800791a:	4b27      	ldr	r3, [pc, #156]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 800791c:	4a27      	ldr	r2, [pc, #156]	@ (80079bc <HAL_UART_MspInit+0x2bc>)
 800791e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007920:	4b25      	ldr	r3, [pc, #148]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 8007922:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8007926:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007928:	4b23      	ldr	r3, [pc, #140]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 800792a:	2200      	movs	r2, #0
 800792c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800792e:	4b22      	ldr	r3, [pc, #136]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 8007930:	2200      	movs	r2, #0
 8007932:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007934:	4b20      	ldr	r3, [pc, #128]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 8007936:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800793a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800793c:	4b1e      	ldr	r3, [pc, #120]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 800793e:	2200      	movs	r2, #0
 8007940:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007942:	4b1d      	ldr	r3, [pc, #116]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 8007944:	2200      	movs	r2, #0
 8007946:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007948:	4b1b      	ldr	r3, [pc, #108]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 800794a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800794e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007950:	4b19      	ldr	r3, [pc, #100]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 8007952:	2200      	movs	r2, #0
 8007954:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007956:	4b18      	ldr	r3, [pc, #96]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 8007958:	2200      	movs	r2, #0
 800795a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800795c:	4816      	ldr	r0, [pc, #88]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 800795e:	f001 f80f 	bl	8008980 <HAL_DMA_Init>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d001      	beq.n	800796c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8007968:	f7fe f920 	bl	8005bac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a12      	ldr	r2, [pc, #72]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 8007970:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007972:	4a11      	ldr	r2, [pc, #68]	@ (80079b8 <HAL_UART_MspInit+0x2b8>)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007978:	2200      	movs	r2, #0
 800797a:	2100      	movs	r1, #0
 800797c:	2047      	movs	r0, #71	@ 0x47
 800797e:	f000 ffba 	bl	80088f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007982:	2047      	movs	r0, #71	@ 0x47
 8007984:	f000 ffd3 	bl	800892e <HAL_NVIC_EnableIRQ>
}
 8007988:	bf00      	nop
 800798a:	3738      	adds	r7, #56	@ 0x38
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40004c00 	.word	0x40004c00
 8007994:	40023800 	.word	0x40023800
 8007998:	40020000 	.word	0x40020000
 800799c:	2000164c 	.word	0x2000164c
 80079a0:	40026070 	.word	0x40026070
 80079a4:	40004400 	.word	0x40004400
 80079a8:	200016ac 	.word	0x200016ac
 80079ac:	400260a0 	.word	0x400260a0
 80079b0:	40011400 	.word	0x40011400
 80079b4:	40020800 	.word	0x40020800
 80079b8:	2000170c 	.word	0x2000170c
 80079bc:	40026440 	.word	0x40026440

080079c0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a24      	ldr	r2, [pc, #144]	@ (8007a60 <HAL_UART_MspDeInit+0xa0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d112      	bne.n	80079f8 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80079d2:	4b24      	ldr	r3, [pc, #144]	@ (8007a64 <HAL_UART_MspDeInit+0xa4>)
 80079d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d6:	4a23      	ldr	r2, [pc, #140]	@ (8007a64 <HAL_UART_MspDeInit+0xa4>)
 80079d8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80079dc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80079de:	2103      	movs	r1, #3
 80079e0:	4821      	ldr	r0, [pc, #132]	@ (8007a68 <HAL_UART_MspDeInit+0xa8>)
 80079e2:	f001 fddb 	bl	800959c <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 f876 	bl	8008adc <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80079f0:	2034      	movs	r0, #52	@ 0x34
 80079f2:	f000 ffaa 	bl	800894a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80079f6:	e02e      	b.n	8007a56 <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART2)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a1b      	ldr	r2, [pc, #108]	@ (8007a6c <HAL_UART_MspDeInit+0xac>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d112      	bne.n	8007a28 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 8007a02:	4b18      	ldr	r3, [pc, #96]	@ (8007a64 <HAL_UART_MspDeInit+0xa4>)
 8007a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a06:	4a17      	ldr	r2, [pc, #92]	@ (8007a64 <HAL_UART_MspDeInit+0xa4>)
 8007a08:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007a0c:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8007a0e:	210c      	movs	r1, #12
 8007a10:	4815      	ldr	r0, [pc, #84]	@ (8007a68 <HAL_UART_MspDeInit+0xa8>)
 8007a12:	f001 fdc3 	bl	800959c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f001 f85e 	bl	8008adc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8007a20:	2026      	movs	r0, #38	@ 0x26
 8007a22:	f000 ff92 	bl	800894a <HAL_NVIC_DisableIRQ>
}
 8007a26:	e016      	b.n	8007a56 <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART6)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a10      	ldr	r2, [pc, #64]	@ (8007a70 <HAL_UART_MspDeInit+0xb0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d111      	bne.n	8007a56 <HAL_UART_MspDeInit+0x96>
    __HAL_RCC_USART6_CLK_DISABLE();
 8007a32:	4b0c      	ldr	r3, [pc, #48]	@ (8007a64 <HAL_UART_MspDeInit+0xa4>)
 8007a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a36:	4a0b      	ldr	r2, [pc, #44]	@ (8007a64 <HAL_UART_MspDeInit+0xa4>)
 8007a38:	f023 0320 	bic.w	r3, r3, #32
 8007a3c:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8007a3e:	21c0      	movs	r1, #192	@ 0xc0
 8007a40:	480c      	ldr	r0, [pc, #48]	@ (8007a74 <HAL_UART_MspDeInit+0xb4>)
 8007a42:	f001 fdab 	bl	800959c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f001 f846 	bl	8008adc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8007a50:	2047      	movs	r0, #71	@ 0x47
 8007a52:	f000 ff7a 	bl	800894a <HAL_NVIC_DisableIRQ>
}
 8007a56:	bf00      	nop
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	40004c00 	.word	0x40004c00
 8007a64:	40023800 	.word	0x40023800
 8007a68:	40020000 	.word	0x40020000
 8007a6c:	40004400 	.word	0x40004400
 8007a70:	40011400 	.word	0x40011400
 8007a74:	40020800 	.word	0x40020800

08007a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007a7c:	bf00      	nop
 8007a7e:	e7fd      	b.n	8007a7c <NMI_Handler+0x4>

08007a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <HardFault_Handler+0x4>

08007a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a8c:	bf00      	nop
 8007a8e:	e7fd      	b.n	8007a8c <MemManage_Handler+0x4>

08007a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a94:	bf00      	nop
 8007a96:	e7fd      	b.n	8007a94 <BusFault_Handler+0x4>

08007a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a9c:	bf00      	nop
 8007a9e:	e7fd      	b.n	8007a9c <UsageFault_Handler+0x4>

08007aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007aa4:	bf00      	nop
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aac:	4770      	bx	lr

08007aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007aae:	b480      	push	{r7}
 8007ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007ab2:	bf00      	nop
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ac0:	bf00      	nop
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ace:	f000 f9bf 	bl	8007e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007ad2:	bf00      	nop
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007ada:	2008      	movs	r0, #8
 8007adc:	f001 fe6c 	bl	80097b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007ae0:	bf00      	nop
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8007ae8:	2010      	movs	r0, #16
 8007aea:	f001 fe65 	bl	80097b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007aee:	bf00      	nop
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007af8:	4802      	ldr	r0, [pc, #8]	@ (8007b04 <DMA1_Stream0_IRQHandler+0x10>)
 8007afa:	f001 f937 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8007afe:	bf00      	nop
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	bf00      	nop
 8007b04:	200014cc 	.word	0x200014cc

08007b08 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8007b0c:	4802      	ldr	r0, [pc, #8]	@ (8007b18 <DMA1_Stream4_IRQHandler+0x10>)
 8007b0e:	f001 f92d 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007b12:	bf00      	nop
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	2000164c 	.word	0x2000164c

08007b1c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007b20:	4802      	ldr	r0, [pc, #8]	@ (8007b2c <DMA1_Stream6_IRQHandler+0x10>)
 8007b22:	f001 f923 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007b26:	bf00      	nop
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	200016ac 	.word	0x200016ac

08007b30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007b34:	4802      	ldr	r0, [pc, #8]	@ (8007b40 <TIM2_IRQHandler+0x10>)
 8007b36:	f005 fbc7 	bl	800d2c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007b3a:	bf00      	nop
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	2000152c 	.word	0x2000152c

08007b44 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007b48:	4802      	ldr	r0, [pc, #8]	@ (8007b54 <I2C1_EV_IRQHandler+0x10>)
 8007b4a:	f002 fc91 	bl	800a470 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007b4e:	bf00      	nop
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	20001424 	.word	0x20001424

08007b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007b5c:	4802      	ldr	r0, [pc, #8]	@ (8007b68 <USART2_IRQHandler+0x10>)
 8007b5e:	f006 f9a9 	bl	800deb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007b62:	bf00      	nop
 8007b64:	bd80      	pop	{r7, pc}
 8007b66:	bf00      	nop
 8007b68:	200015bc 	.word	0x200015bc

08007b6c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007b70:	4802      	ldr	r0, [pc, #8]	@ (8007b7c <UART4_IRQHandler+0x10>)
 8007b72:	f006 f99f 	bl	800deb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007b76:	bf00      	nop
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20001574 	.word	0x20001574

08007b80 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007b84:	4802      	ldr	r0, [pc, #8]	@ (8007b90 <DMA2_Stream2_IRQHandler+0x10>)
 8007b86:	f001 f8f1 	bl	8008d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007b8a:	bf00      	nop
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	2000170c 	.word	0x2000170c

08007b94 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007b98:	4802      	ldr	r0, [pc, #8]	@ (8007ba4 <USART6_IRQHandler+0x10>)
 8007b9a:	f006 f98b 	bl	800deb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007b9e:	bf00      	nop
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20001604 	.word	0x20001604

08007ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  return 1;
 8007bac:	2301      	movs	r3, #1
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <_kill>:

int _kill(int pid, int sig)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007bc2:	f008 fbdf 	bl	8010384 <__errno>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2216      	movs	r2, #22
 8007bca:	601a      	str	r2, [r3, #0]
  return -1;
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <_exit>:

void _exit (int status)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007be0:	f04f 31ff 	mov.w	r1, #4294967295
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ffe7 	bl	8007bb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <_exit+0x12>

08007bee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007bee:	b580      	push	{r7, lr}
 8007bf0:	b086      	sub	sp, #24
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	60f8      	str	r0, [r7, #12]
 8007bf6:	60b9      	str	r1, [r7, #8]
 8007bf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	e00a      	b.n	8007c16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007c00:	f3af 8000 	nop.w
 8007c04:	4601      	mov	r1, r0
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	60ba      	str	r2, [r7, #8]
 8007c0c:	b2ca      	uxtb	r2, r1
 8007c0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	3301      	adds	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	dbf0      	blt.n	8007c00 <_read+0x12>
  }

  return len;
 8007c1e:	687b      	ldr	r3, [r7, #4]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c34:	2300      	movs	r3, #0
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e009      	b.n	8007c4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	60ba      	str	r2, [r7, #8]
 8007c40:	781b      	ldrb	r3, [r3, #0]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	dbf1      	blt.n	8007c3a <_write+0x12>
  }
  return len;
 8007c56:	687b      	ldr	r3, [r7, #4]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <_close>:

int _close(int file)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007c68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007c88:	605a      	str	r2, [r3, #4]
  return 0;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <_isatty>:

int _isatty(int file)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007ca0:	2301      	movs	r3, #1
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	370c      	adds	r7, #12
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr

08007cae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007cae:	b480      	push	{r7}
 8007cb0:	b085      	sub	sp, #20
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	60f8      	str	r0, [r7, #12]
 8007cb6:	60b9      	str	r1, [r7, #8]
 8007cb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007cd0:	4a14      	ldr	r2, [pc, #80]	@ (8007d24 <_sbrk+0x5c>)
 8007cd2:	4b15      	ldr	r3, [pc, #84]	@ (8007d28 <_sbrk+0x60>)
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007cdc:	4b13      	ldr	r3, [pc, #76]	@ (8007d2c <_sbrk+0x64>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007ce4:	4b11      	ldr	r3, [pc, #68]	@ (8007d2c <_sbrk+0x64>)
 8007ce6:	4a12      	ldr	r2, [pc, #72]	@ (8007d30 <_sbrk+0x68>)
 8007ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007cea:	4b10      	ldr	r3, [pc, #64]	@ (8007d2c <_sbrk+0x64>)
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d207      	bcs.n	8007d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007cf8:	f008 fb44 	bl	8010384 <__errno>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	220c      	movs	r2, #12
 8007d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295
 8007d06:	e009      	b.n	8007d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007d08:	4b08      	ldr	r3, [pc, #32]	@ (8007d2c <_sbrk+0x64>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007d0e:	4b07      	ldr	r3, [pc, #28]	@ (8007d2c <_sbrk+0x64>)
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	4a05      	ldr	r2, [pc, #20]	@ (8007d2c <_sbrk+0x64>)
 8007d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20020000 	.word	0x20020000
 8007d28:	00000400 	.word	0x00000400
 8007d2c:	200019d4 	.word	0x200019d4
 8007d30:	20001b28 	.word	0x20001b28

08007d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d34:	b480      	push	{r7}
 8007d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <SystemInit+0x20>)
 8007d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d3e:	4a05      	ldr	r2, [pc, #20]	@ (8007d54 <SystemInit+0x20>)
 8007d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d48:	bf00      	nop
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	e000ed00 	.word	0xe000ed00

08007d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007d90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007d5c:	f7ff ffea 	bl	8007d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007d60:	480c      	ldr	r0, [pc, #48]	@ (8007d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007d62:	490d      	ldr	r1, [pc, #52]	@ (8007d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007d64:	4a0d      	ldr	r2, [pc, #52]	@ (8007d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d68:	e002      	b.n	8007d70 <LoopCopyDataInit>

08007d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d6e:	3304      	adds	r3, #4

08007d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d74:	d3f9      	bcc.n	8007d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d76:	4a0a      	ldr	r2, [pc, #40]	@ (8007da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007d78:	4c0a      	ldr	r4, [pc, #40]	@ (8007da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d7c:	e001      	b.n	8007d82 <LoopFillZerobss>

08007d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d80:	3204      	adds	r2, #4

08007d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d84:	d3fb      	bcc.n	8007d7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007d86:	f008 fb03 	bl	8010390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d8a:	f7fd f8c9 	bl	8004f20 <main>
  bx  lr    
 8007d8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007d90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d98:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 8007d9c:	08016c08 	.word	0x08016c08
  ldr r2, =_sbss
 8007da0:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8007da4:	20001b28 	.word	0x20001b28

08007da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007da8:	e7fe      	b.n	8007da8 <ADC_IRQHandler>
	...

08007dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007db0:	4b0e      	ldr	r3, [pc, #56]	@ (8007dec <HAL_Init+0x40>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a0d      	ldr	r2, [pc, #52]	@ (8007dec <HAL_Init+0x40>)
 8007db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007dec <HAL_Init+0x40>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8007dec <HAL_Init+0x40>)
 8007dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007dc8:	4b08      	ldr	r3, [pc, #32]	@ (8007dec <HAL_Init+0x40>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a07      	ldr	r2, [pc, #28]	@ (8007dec <HAL_Init+0x40>)
 8007dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007dd4:	2003      	movs	r0, #3
 8007dd6:	f000 fd83 	bl	80088e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007dda:	200f      	movs	r0, #15
 8007ddc:	f000 f808 	bl	8007df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007de0:	f7ff fa78 	bl	80072d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40023c00 	.word	0x40023c00

08007df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007df8:	4b12      	ldr	r3, [pc, #72]	@ (8007e44 <HAL_InitTick+0x54>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	4b12      	ldr	r3, [pc, #72]	@ (8007e48 <HAL_InitTick+0x58>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	4619      	mov	r1, r3
 8007e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 fda9 	bl	8008966 <HAL_SYSTICK_Config>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e00e      	b.n	8007e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b0f      	cmp	r3, #15
 8007e22:	d80a      	bhi.n	8007e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e24:	2200      	movs	r2, #0
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	f04f 30ff 	mov.w	r0, #4294967295
 8007e2c:	f000 fd63 	bl	80088f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007e30:	4a06      	ldr	r2, [pc, #24]	@ (8007e4c <HAL_InitTick+0x5c>)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	e000      	b.n	8007e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007e3a:	2301      	movs	r3, #1
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3708      	adds	r7, #8
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	20000060 	.word	0x20000060
 8007e48:	20000068 	.word	0x20000068
 8007e4c:	20000064 	.word	0x20000064

08007e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007e54:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <HAL_IncTick+0x20>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	461a      	mov	r2, r3
 8007e5a:	4b06      	ldr	r3, [pc, #24]	@ (8007e74 <HAL_IncTick+0x24>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4413      	add	r3, r2
 8007e60:	4a04      	ldr	r2, [pc, #16]	@ (8007e74 <HAL_IncTick+0x24>)
 8007e62:	6013      	str	r3, [r2, #0]
}
 8007e64:	bf00      	nop
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	20000068 	.word	0x20000068
 8007e74:	200019d8 	.word	0x200019d8

08007e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8007e7c:	4b03      	ldr	r3, [pc, #12]	@ (8007e8c <HAL_GetTick+0x14>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	200019d8 	.word	0x200019d8

08007e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e98:	f7ff ffee 	bl	8007e78 <HAL_GetTick>
 8007e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d005      	beq.n	8007eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8007ed4 <HAL_Delay+0x44>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007eb6:	bf00      	nop
 8007eb8:	f7ff ffde 	bl	8007e78 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d8f7      	bhi.n	8007eb8 <HAL_Delay+0x28>
  {
  }
}
 8007ec8:	bf00      	nop
 8007eca:	bf00      	nop
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000068 	.word	0x20000068

08007ed8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e033      	b.n	8007f56 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f7ff fa14 	bl	8007324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0e:	f003 0310 	and.w	r3, r3, #16
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d118      	bne.n	8007f48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007f1e:	f023 0302 	bic.w	r3, r3, #2
 8007f22:	f043 0202 	orr.w	r2, r3, #2
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fae8 	bl	8008500 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f3a:	f023 0303 	bic.w	r3, r3, #3
 8007f3e:	f043 0201 	orr.w	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f46:	e001      	b.n	8007f4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_ADC_Start+0x1a>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e0b2      	b.n	80080e0 <HAL_ADC_Start+0x180>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d018      	beq.n	8007fc2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	689a      	ldr	r2, [r3, #8]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0201 	orr.w	r2, r2, #1
 8007f9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007fa0:	4b52      	ldr	r3, [pc, #328]	@ (80080ec <HAL_ADC_Start+0x18c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a52      	ldr	r2, [pc, #328]	@ (80080f0 <HAL_ADC_Start+0x190>)
 8007fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8007faa:	0c9a      	lsrs	r2, r3, #18
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007fb4:	e002      	b.n	8007fbc <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f9      	bne.n	8007fb6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d17a      	bne.n	80080c6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007fd8:	f023 0301 	bic.w	r3, r3, #1
 8007fdc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d007      	beq.n	8008002 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007ffa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800800a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800800e:	d106      	bne.n	800801e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008014:	f023 0206 	bic.w	r2, r3, #6
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	645a      	str	r2, [r3, #68]	@ 0x44
 800801c:	e002      	b.n	8008024 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800802c:	4b31      	ldr	r3, [pc, #196]	@ (80080f4 <HAL_ADC_Start+0x194>)
 800802e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8008038:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	2b00      	cmp	r3, #0
 8008044:	d12a      	bne.n	800809c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a2b      	ldr	r2, [pc, #172]	@ (80080f8 <HAL_ADC_Start+0x198>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d015      	beq.n	800807c <HAL_ADC_Start+0x11c>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a29      	ldr	r2, [pc, #164]	@ (80080fc <HAL_ADC_Start+0x19c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d105      	bne.n	8008066 <HAL_ADC_Start+0x106>
 800805a:	4b26      	ldr	r3, [pc, #152]	@ (80080f4 <HAL_ADC_Start+0x194>)
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	2b00      	cmp	r3, #0
 8008064:	d00a      	beq.n	800807c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a25      	ldr	r2, [pc, #148]	@ (8008100 <HAL_ADC_Start+0x1a0>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d136      	bne.n	80080de <HAL_ADC_Start+0x17e>
 8008070:	4b20      	ldr	r3, [pc, #128]	@ (80080f4 <HAL_ADC_Start+0x194>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b00      	cmp	r3, #0
 800807a:	d130      	bne.n	80080de <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d129      	bne.n	80080de <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689a      	ldr	r2, [r3, #8]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8008098:	609a      	str	r2, [r3, #8]
 800809a:	e020      	b.n	80080de <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a15      	ldr	r2, [pc, #84]	@ (80080f8 <HAL_ADC_Start+0x198>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d11b      	bne.n	80080de <HAL_ADC_Start+0x17e>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d114      	bne.n	80080de <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80080c2:	609a      	str	r2, [r3, #8]
 80080c4:	e00b      	b.n	80080de <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ca:	f043 0210 	orr.w	r2, r3, #16
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080d6:	f043 0201 	orr.w	r2, r3, #1
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	20000060 	.word	0x20000060
 80080f0:	431bde83 	.word	0x431bde83
 80080f4:	40012300 	.word	0x40012300
 80080f8:	40012000 	.word	0x40012000
 80080fc:	40012100 	.word	0x40012100
 8008100:	40012200 	.word	0x40012200

08008104 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008112:	2b01      	cmp	r3, #1
 8008114:	d101      	bne.n	800811a <HAL_ADC_Stop+0x16>
 8008116:	2302      	movs	r3, #2
 8008118:	e021      	b.n	800815e <HAL_ADC_Stop+0x5a>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f022 0201 	bic.w	r2, r2, #1
 8008130:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 0301 	and.w	r3, r3, #1
 800813c:	2b00      	cmp	r3, #0
 800813e:	d109      	bne.n	8008154 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008144:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	f043 0201 	orr.w	r2, r3, #1
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800815c:	2300      	movs	r3, #0
}
 800815e:	4618      	mov	r0, r3
 8008160:	370c      	adds	r7, #12
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b084      	sub	sp, #16
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008182:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008186:	d113      	bne.n	80081b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008196:	d10b      	bne.n	80081b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800819c:	f043 0220 	orr.w	r2, r3, #32
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e063      	b.n	8008278 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80081b0:	f7ff fe62 	bl	8007e78 <HAL_GetTick>
 80081b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80081b6:	e021      	b.n	80081fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081be:	d01d      	beq.n	80081fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d007      	beq.n	80081d6 <HAL_ADC_PollForConversion+0x6c>
 80081c6:	f7ff fe57 	bl	8007e78 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d212      	bcs.n	80081fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0302 	and.w	r3, r3, #2
 80081e0:	2b02      	cmp	r3, #2
 80081e2:	d00b      	beq.n	80081fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e8:	f043 0204 	orr.w	r2, r3, #4
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80081f8:	2303      	movs	r3, #3
 80081fa:	e03d      	b.n	8008278 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b02      	cmp	r3, #2
 8008208:	d1d6      	bne.n	80081b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f06f 0212 	mvn.w	r2, #18
 8008212:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008218:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d123      	bne.n	8008276 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008232:	2b00      	cmp	r3, #0
 8008234:	d11f      	bne.n	8008276 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008240:	2b00      	cmp	r3, #0
 8008242:	d006      	beq.n	8008252 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800824e:	2b00      	cmp	r3, #0
 8008250:	d111      	bne.n	8008276 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008256:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008262:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	f043 0201 	orr.w	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
	...

0800829c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d101      	bne.n	80082b8 <HAL_ADC_ConfigChannel+0x1c>
 80082b4:	2302      	movs	r3, #2
 80082b6:	e113      	b.n	80084e0 <HAL_ADC_ConfigChannel+0x244>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b09      	cmp	r3, #9
 80082c6:	d925      	bls.n	8008314 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68d9      	ldr	r1, [r3, #12]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	461a      	mov	r2, r3
 80082d6:	4613      	mov	r3, r2
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	4413      	add	r3, r2
 80082dc:	3b1e      	subs	r3, #30
 80082de:	2207      	movs	r2, #7
 80082e0:	fa02 f303 	lsl.w	r3, r2, r3
 80082e4:	43da      	mvns	r2, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	400a      	ands	r2, r1
 80082ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68d9      	ldr	r1, [r3, #12]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	4618      	mov	r0, r3
 8008300:	4603      	mov	r3, r0
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	4403      	add	r3, r0
 8008306:	3b1e      	subs	r3, #30
 8008308:	409a      	lsls	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	430a      	orrs	r2, r1
 8008310:	60da      	str	r2, [r3, #12]
 8008312:	e022      	b.n	800835a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6919      	ldr	r1, [r3, #16]
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	461a      	mov	r2, r3
 8008322:	4613      	mov	r3, r2
 8008324:	005b      	lsls	r3, r3, #1
 8008326:	4413      	add	r3, r2
 8008328:	2207      	movs	r2, #7
 800832a:	fa02 f303 	lsl.w	r3, r2, r3
 800832e:	43da      	mvns	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	400a      	ands	r2, r1
 8008336:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6919      	ldr	r1, [r3, #16]
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	4618      	mov	r0, r3
 800834a:	4603      	mov	r3, r0
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	4403      	add	r3, r0
 8008350:	409a      	lsls	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2b06      	cmp	r3, #6
 8008360:	d824      	bhi.n	80083ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	3b05      	subs	r3, #5
 8008374:	221f      	movs	r2, #31
 8008376:	fa02 f303 	lsl.w	r3, r2, r3
 800837a:	43da      	mvns	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	400a      	ands	r2, r1
 8008382:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	b29b      	uxth	r3, r3
 8008390:	4618      	mov	r0, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	4613      	mov	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4413      	add	r3, r2
 800839c:	3b05      	subs	r3, #5
 800839e:	fa00 f203 	lsl.w	r2, r0, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80083aa:	e04c      	b.n	8008446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b0c      	cmp	r3, #12
 80083b2:	d824      	bhi.n	80083fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	4613      	mov	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	4413      	add	r3, r2
 80083c4:	3b23      	subs	r3, #35	@ 0x23
 80083c6:	221f      	movs	r2, #31
 80083c8:	fa02 f303 	lsl.w	r3, r2, r3
 80083cc:	43da      	mvns	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	400a      	ands	r2, r1
 80083d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	4618      	mov	r0, r3
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	4613      	mov	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	4413      	add	r3, r2
 80083ee:	3b23      	subs	r3, #35	@ 0x23
 80083f0:	fa00 f203 	lsl.w	r2, r0, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	430a      	orrs	r2, r1
 80083fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80083fc:	e023      	b.n	8008446 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	685a      	ldr	r2, [r3, #4]
 8008408:	4613      	mov	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	4413      	add	r3, r2
 800840e:	3b41      	subs	r3, #65	@ 0x41
 8008410:	221f      	movs	r2, #31
 8008412:	fa02 f303 	lsl.w	r3, r2, r3
 8008416:	43da      	mvns	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	400a      	ands	r2, r1
 800841e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	b29b      	uxth	r3, r3
 800842c:	4618      	mov	r0, r3
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	4613      	mov	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4413      	add	r3, r2
 8008438:	3b41      	subs	r3, #65	@ 0x41
 800843a:	fa00 f203 	lsl.w	r2, r0, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008446:	4b29      	ldr	r3, [pc, #164]	@ (80084ec <HAL_ADC_ConfigChannel+0x250>)
 8008448:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a28      	ldr	r2, [pc, #160]	@ (80084f0 <HAL_ADC_ConfigChannel+0x254>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d10f      	bne.n	8008474 <HAL_ADC_ConfigChannel+0x1d8>
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2b12      	cmp	r3, #18
 800845a:	d10b      	bne.n	8008474 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a1d      	ldr	r2, [pc, #116]	@ (80084f0 <HAL_ADC_ConfigChannel+0x254>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d12b      	bne.n	80084d6 <HAL_ADC_ConfigChannel+0x23a>
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a1c      	ldr	r2, [pc, #112]	@ (80084f4 <HAL_ADC_ConfigChannel+0x258>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <HAL_ADC_ConfigChannel+0x1f4>
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b11      	cmp	r3, #17
 800848e:	d122      	bne.n	80084d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a11      	ldr	r2, [pc, #68]	@ (80084f4 <HAL_ADC_ConfigChannel+0x258>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d111      	bne.n	80084d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80084b2:	4b11      	ldr	r3, [pc, #68]	@ (80084f8 <HAL_ADC_ConfigChannel+0x25c>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a11      	ldr	r2, [pc, #68]	@ (80084fc <HAL_ADC_ConfigChannel+0x260>)
 80084b8:	fba2 2303 	umull	r2, r3, r2, r3
 80084bc:	0c9a      	lsrs	r2, r3, #18
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	005b      	lsls	r3, r3, #1
 80084c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80084c8:	e002      	b.n	80084d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3b01      	subs	r3, #1
 80084ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1f9      	bne.n	80084ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3714      	adds	r7, #20
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	40012300 	.word	0x40012300
 80084f0:	40012000 	.word	0x40012000
 80084f4:	10000012 	.word	0x10000012
 80084f8:	20000060 	.word	0x20000060
 80084fc:	431bde83 	.word	0x431bde83

08008500 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008508:	4b79      	ldr	r3, [pc, #484]	@ (80086f0 <ADC_Init+0x1f0>)
 800850a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	431a      	orrs	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008534:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	6859      	ldr	r1, [r3, #4]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	691b      	ldr	r3, [r3, #16]
 8008540:	021a      	lsls	r2, r3, #8
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6859      	ldr	r1, [r3, #4]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689a      	ldr	r2, [r3, #8]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	430a      	orrs	r2, r1
 800856a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689a      	ldr	r2, [r3, #8]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800857a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6899      	ldr	r1, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	68da      	ldr	r2, [r3, #12]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008592:	4a58      	ldr	r2, [pc, #352]	@ (80086f4 <ADC_Init+0x1f4>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d022      	beq.n	80085de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80085a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6899      	ldr	r1, [r3, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	689a      	ldr	r2, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80085c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6899      	ldr	r1, [r3, #8]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	609a      	str	r2, [r3, #8]
 80085dc:	e00f      	b.n	80085fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689a      	ldr	r2, [r3, #8]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80085ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80085fc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0202 	bic.w	r2, r2, #2
 800860c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6899      	ldr	r1, [r3, #8]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	7e1b      	ldrb	r3, [r3, #24]
 8008618:	005a      	lsls	r2, r3, #1
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d01b      	beq.n	8008664 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800863a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800864a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6859      	ldr	r1, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008656:	3b01      	subs	r3, #1
 8008658:	035a      	lsls	r2, r3, #13
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	605a      	str	r2, [r3, #4]
 8008662:	e007      	b.n	8008674 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008672:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	3b01      	subs	r3, #1
 8008690:	051a      	lsls	r2, r3, #20
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	689a      	ldr	r2, [r3, #8]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80086a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	6899      	ldr	r1, [r3, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80086b6:	025a      	lsls	r2, r3, #9
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689a      	ldr	r2, [r3, #8]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6899      	ldr	r1, [r3, #8]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	695b      	ldr	r3, [r3, #20]
 80086da:	029a      	lsls	r2, r3, #10
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	430a      	orrs	r2, r1
 80086e2:	609a      	str	r2, [r3, #8]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	40012300 	.word	0x40012300
 80086f4:	0f000001 	.word	0x0f000001

080086f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008708:	4b0c      	ldr	r3, [pc, #48]	@ (800873c <__NVIC_SetPriorityGrouping+0x44>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008714:	4013      	ands	r3, r2
 8008716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008720:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800872a:	4a04      	ldr	r2, [pc, #16]	@ (800873c <__NVIC_SetPriorityGrouping+0x44>)
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	60d3      	str	r3, [r2, #12]
}
 8008730:	bf00      	nop
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	e000ed00 	.word	0xe000ed00

08008740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008744:	4b04      	ldr	r3, [pc, #16]	@ (8008758 <__NVIC_GetPriorityGrouping+0x18>)
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	0a1b      	lsrs	r3, r3, #8
 800874a:	f003 0307 	and.w	r3, r3, #7
}
 800874e:	4618      	mov	r0, r3
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	e000ed00 	.word	0xe000ed00

0800875c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800876a:	2b00      	cmp	r3, #0
 800876c:	db0b      	blt.n	8008786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	f003 021f 	and.w	r2, r3, #31
 8008774:	4907      	ldr	r1, [pc, #28]	@ (8008794 <__NVIC_EnableIRQ+0x38>)
 8008776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800877a:	095b      	lsrs	r3, r3, #5
 800877c:	2001      	movs	r0, #1
 800877e:	fa00 f202 	lsl.w	r2, r0, r2
 8008782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	e000e100 	.word	0xe000e100

08008798 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008798:	b480      	push	{r7}
 800879a:	b083      	sub	sp, #12
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	db12      	blt.n	80087d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	f003 021f 	and.w	r2, r3, #31
 80087b0:	490a      	ldr	r1, [pc, #40]	@ (80087dc <__NVIC_DisableIRQ+0x44>)
 80087b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087b6:	095b      	lsrs	r3, r3, #5
 80087b8:	2001      	movs	r0, #1
 80087ba:	fa00 f202 	lsl.w	r2, r0, r2
 80087be:	3320      	adds	r3, #32
 80087c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80087c4:	f3bf 8f4f 	dsb	sy
}
 80087c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80087ca:	f3bf 8f6f 	isb	sy
}
 80087ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr
 80087dc:	e000e100 	.word	0xe000e100

080087e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	6039      	str	r1, [r7, #0]
 80087ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80087ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	db0a      	blt.n	800880a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	490c      	ldr	r1, [pc, #48]	@ (800882c <__NVIC_SetPriority+0x4c>)
 80087fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087fe:	0112      	lsls	r2, r2, #4
 8008800:	b2d2      	uxtb	r2, r2
 8008802:	440b      	add	r3, r1
 8008804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008808:	e00a      	b.n	8008820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	b2da      	uxtb	r2, r3
 800880e:	4908      	ldr	r1, [pc, #32]	@ (8008830 <__NVIC_SetPriority+0x50>)
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	3b04      	subs	r3, #4
 8008818:	0112      	lsls	r2, r2, #4
 800881a:	b2d2      	uxtb	r2, r2
 800881c:	440b      	add	r3, r1
 800881e:	761a      	strb	r2, [r3, #24]
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr
 800882c:	e000e100 	.word	0xe000e100
 8008830:	e000ed00 	.word	0xe000ed00

08008834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008834:	b480      	push	{r7}
 8008836:	b089      	sub	sp, #36	@ 0x24
 8008838:	af00      	add	r7, sp, #0
 800883a:	60f8      	str	r0, [r7, #12]
 800883c:	60b9      	str	r1, [r7, #8]
 800883e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f003 0307 	and.w	r3, r3, #7
 8008846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	f1c3 0307 	rsb	r3, r3, #7
 800884e:	2b04      	cmp	r3, #4
 8008850:	bf28      	it	cs
 8008852:	2304      	movcs	r3, #4
 8008854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	3304      	adds	r3, #4
 800885a:	2b06      	cmp	r3, #6
 800885c:	d902      	bls.n	8008864 <NVIC_EncodePriority+0x30>
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	3b03      	subs	r3, #3
 8008862:	e000      	b.n	8008866 <NVIC_EncodePriority+0x32>
 8008864:	2300      	movs	r3, #0
 8008866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008868:	f04f 32ff 	mov.w	r2, #4294967295
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	fa02 f303 	lsl.w	r3, r2, r3
 8008872:	43da      	mvns	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	401a      	ands	r2, r3
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800887c:	f04f 31ff 	mov.w	r1, #4294967295
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	fa01 f303 	lsl.w	r3, r1, r3
 8008886:	43d9      	mvns	r1, r3
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800888c:	4313      	orrs	r3, r2
         );
}
 800888e:	4618      	mov	r0, r3
 8008890:	3724      	adds	r7, #36	@ 0x24
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
	...

0800889c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3b01      	subs	r3, #1
 80088a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088ac:	d301      	bcc.n	80088b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80088ae:	2301      	movs	r3, #1
 80088b0:	e00f      	b.n	80088d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80088b2:	4a0a      	ldr	r2, [pc, #40]	@ (80088dc <SysTick_Config+0x40>)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80088ba:	210f      	movs	r1, #15
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295
 80088c0:	f7ff ff8e 	bl	80087e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80088c4:	4b05      	ldr	r3, [pc, #20]	@ (80088dc <SysTick_Config+0x40>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80088ca:	4b04      	ldr	r3, [pc, #16]	@ (80088dc <SysTick_Config+0x40>)
 80088cc:	2207      	movs	r2, #7
 80088ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	e000e010 	.word	0xe000e010

080088e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7ff ff05 	bl	80086f8 <__NVIC_SetPriorityGrouping>
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	4603      	mov	r3, r0
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	607a      	str	r2, [r7, #4]
 8008902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008904:	2300      	movs	r3, #0
 8008906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008908:	f7ff ff1a 	bl	8008740 <__NVIC_GetPriorityGrouping>
 800890c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	68b9      	ldr	r1, [r7, #8]
 8008912:	6978      	ldr	r0, [r7, #20]
 8008914:	f7ff ff8e 	bl	8008834 <NVIC_EncodePriority>
 8008918:	4602      	mov	r2, r0
 800891a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff ff5d 	bl	80087e0 <__NVIC_SetPriority>
}
 8008926:	bf00      	nop
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	4603      	mov	r3, r0
 8008936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff ff0d 	bl	800875c <__NVIC_EnableIRQ>
}
 8008942:	bf00      	nop
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}

0800894a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b082      	sub	sp, #8
 800894e:	af00      	add	r7, sp, #0
 8008950:	4603      	mov	r3, r0
 8008952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008958:	4618      	mov	r0, r3
 800895a:	f7ff ff1d 	bl	8008798 <__NVIC_DisableIRQ>
}
 800895e:	bf00      	nop
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b082      	sub	sp, #8
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7ff ff94 	bl	800889c <SysTick_Config>
 8008974:	4603      	mov	r3, r0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3708      	adds	r7, #8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008988:	2300      	movs	r3, #0
 800898a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800898c:	f7ff fa74 	bl	8007e78 <HAL_GetTick>
 8008990:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d101      	bne.n	800899c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e099      	b.n	8008ad0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 0201 	bic.w	r2, r2, #1
 80089ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089bc:	e00f      	b.n	80089de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80089be:	f7ff fa5b 	bl	8007e78 <HAL_GetTick>
 80089c2:	4602      	mov	r2, r0
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	2b05      	cmp	r3, #5
 80089ca:	d908      	bls.n	80089de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2220      	movs	r2, #32
 80089d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2203      	movs	r2, #3
 80089d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80089da:	2303      	movs	r3, #3
 80089dc:	e078      	b.n	8008ad0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e8      	bne.n	80089be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80089f4:	697a      	ldr	r2, [r7, #20]
 80089f6:	4b38      	ldr	r3, [pc, #224]	@ (8008ad8 <HAL_DMA_Init+0x158>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008a16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008a22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d107      	bne.n	8008a48 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a40:	4313      	orrs	r3, r2
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	695b      	ldr	r3, [r3, #20]
 8008a56:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f023 0307 	bic.w	r3, r3, #7
 8008a5e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a64:	697a      	ldr	r2, [r7, #20]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	d117      	bne.n	8008aa2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00e      	beq.n	8008aa2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fb79 	bl	800917c <DMA_CheckFifoParam>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d008      	beq.n	8008aa2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2240      	movs	r2, #64	@ 0x40
 8008a94:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e016      	b.n	8008ad0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	697a      	ldr	r2, [r7, #20]
 8008aa8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fb30 	bl	8009110 <DMA_CalcBaseAndBitshift>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ab8:	223f      	movs	r2, #63	@ 0x3f
 8008aba:	409a      	lsls	r2, r3
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3718      	adds	r7, #24
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	f010803f 	.word	0xf010803f

08008adc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d101      	bne.n	8008aee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e050      	b.n	8008b90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d101      	bne.n	8008afe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008afa:	2302      	movs	r3, #2
 8008afc:	e048      	b.n	8008b90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0201 	bic.w	r2, r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2200      	movs	r2, #0
 8008b14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2200      	movs	r2, #0
 8008b24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2200      	movs	r2, #0
 8008b34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2221      	movs	r2, #33	@ 0x21
 8008b3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 fae6 	bl	8009110 <DMA_CalcBaseAndBitshift>
 8008b44:	4603      	mov	r3, r0
 8008b46:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2200      	movs	r2, #0
 8008b58:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b70:	223f      	movs	r2, #63	@ 0x3f
 8008b72:	409a      	lsls	r2, r3
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d101      	bne.n	8008bbe <HAL_DMA_Start_IT+0x26>
 8008bba:	2302      	movs	r3, #2
 8008bbc:	e040      	b.n	8008c40 <HAL_DMA_Start_IT+0xa8>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d12f      	bne.n	8008c32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2202      	movs	r2, #2
 8008bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	68b9      	ldr	r1, [r7, #8]
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 fa64 	bl	80090b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bf0:	223f      	movs	r2, #63	@ 0x3f
 8008bf2:	409a      	lsls	r2, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f042 0216 	orr.w	r2, r2, #22
 8008c06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d007      	beq.n	8008c20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0208 	orr.w	r2, r2, #8
 8008c1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0201 	orr.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	e005      	b.n	8008c3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3718      	adds	r7, #24
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008c56:	f7ff f90f 	bl	8007e78 <HAL_GetTick>
 8008c5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d008      	beq.n	8008c7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2280      	movs	r2, #128	@ 0x80
 8008c6c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	e052      	b.n	8008d20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f022 0216 	bic.w	r2, r2, #22
 8008c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	695a      	ldr	r2, [r3, #20]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d103      	bne.n	8008caa <HAL_DMA_Abort+0x62>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d007      	beq.n	8008cba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f022 0208 	bic.w	r2, r2, #8
 8008cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f022 0201 	bic.w	r2, r2, #1
 8008cc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008cca:	e013      	b.n	8008cf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008ccc:	f7ff f8d4 	bl	8007e78 <HAL_GetTick>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	1ad3      	subs	r3, r2, r3
 8008cd6:	2b05      	cmp	r3, #5
 8008cd8:	d90c      	bls.n	8008cf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2203      	movs	r2, #3
 8008ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e015      	b.n	8008d20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1e4      	bne.n	8008ccc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d06:	223f      	movs	r2, #63	@ 0x3f
 8008d08:	409a      	lsls	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}

08008d28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d004      	beq.n	8008d46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2280      	movs	r2, #128	@ 0x80
 8008d40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e00c      	b.n	8008d60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2205      	movs	r2, #5
 8008d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f022 0201 	bic.w	r2, r2, #1
 8008d5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008d78:	4b8e      	ldr	r3, [pc, #568]	@ (8008fb4 <HAL_DMA_IRQHandler+0x248>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8008fb8 <HAL_DMA_IRQHandler+0x24c>)
 8008d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d82:	0a9b      	lsrs	r3, r3, #10
 8008d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d96:	2208      	movs	r2, #8
 8008d98:	409a      	lsls	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d01a      	beq.n	8008dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d013      	beq.n	8008dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0204 	bic.w	r2, r2, #4
 8008dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dc4:	2208      	movs	r2, #8
 8008dc6:	409a      	lsls	r2, r3
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd0:	f043 0201 	orr.w	r2, r3, #1
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ddc:	2201      	movs	r2, #1
 8008dde:	409a      	lsls	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4013      	ands	r3, r2
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d012      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	409a      	lsls	r2, r3
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e06:	f043 0202 	orr.w	r2, r3, #2
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e12:	2204      	movs	r2, #4
 8008e14:	409a      	lsls	r2, r3
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	4013      	ands	r3, r2
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d012      	beq.n	8008e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 0302 	and.w	r3, r3, #2
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e30:	2204      	movs	r2, #4
 8008e32:	409a      	lsls	r2, r3
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e3c:	f043 0204 	orr.w	r2, r3, #4
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e48:	2210      	movs	r2, #16
 8008e4a:	409a      	lsls	r2, r3
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4013      	ands	r3, r2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d043      	beq.n	8008edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 0308 	and.w	r3, r3, #8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d03c      	beq.n	8008edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e66:	2210      	movs	r2, #16
 8008e68:	409a      	lsls	r2, r3
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d018      	beq.n	8008eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d108      	bne.n	8008e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d024      	beq.n	8008edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	4798      	blx	r3
 8008e9a:	e01f      	b.n	8008edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d01b      	beq.n	8008edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4798      	blx	r3
 8008eac:	e016      	b.n	8008edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d107      	bne.n	8008ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f022 0208 	bic.w	r2, r2, #8
 8008eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	409a      	lsls	r2, r3
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4013      	ands	r3, r2
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	f000 808f 	beq.w	800900c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 0310 	and.w	r3, r3, #16
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f000 8087 	beq.w	800900c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f02:	2220      	movs	r2, #32
 8008f04:	409a      	lsls	r2, r3
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b05      	cmp	r3, #5
 8008f14:	d136      	bne.n	8008f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f022 0216 	bic.w	r2, r2, #22
 8008f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	695a      	ldr	r2, [r3, #20]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d103      	bne.n	8008f46 <HAL_DMA_IRQHandler+0x1da>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d007      	beq.n	8008f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0208 	bic.w	r2, r2, #8
 8008f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f5a:	223f      	movs	r2, #63	@ 0x3f
 8008f5c:	409a      	lsls	r2, r3
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d07e      	beq.n	8009078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
        }
        return;
 8008f82:	e079      	b.n	8009078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01d      	beq.n	8008fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10d      	bne.n	8008fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d031      	beq.n	800900c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	4798      	blx	r3
 8008fb0:	e02c      	b.n	800900c <HAL_DMA_IRQHandler+0x2a0>
 8008fb2:	bf00      	nop
 8008fb4:	20000060 	.word	0x20000060
 8008fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d023      	beq.n	800900c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	4798      	blx	r3
 8008fcc:	e01e      	b.n	800900c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10f      	bne.n	8008ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f022 0210 	bic.w	r2, r2, #16
 8008fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009000:	2b00      	cmp	r3, #0
 8009002:	d003      	beq.n	800900c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009010:	2b00      	cmp	r3, #0
 8009012:	d032      	beq.n	800907a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b00      	cmp	r3, #0
 800901e:	d022      	beq.n	8009066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2205      	movs	r2, #5
 8009024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f022 0201 	bic.w	r2, r2, #1
 8009036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	3301      	adds	r3, #1
 800903c:	60bb      	str	r3, [r7, #8]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	429a      	cmp	r2, r3
 8009042:	d307      	bcc.n	8009054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f2      	bne.n	8009038 <HAL_DMA_IRQHandler+0x2cc>
 8009052:	e000      	b.n	8009056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2201      	movs	r2, #1
 800905a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800906a:	2b00      	cmp	r3, #0
 800906c:	d005      	beq.n	800907a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
 8009076:	e000      	b.n	800907a <HAL_DMA_IRQHandler+0x30e>
        return;
 8009078:	bf00      	nop
    }
  }
}
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800908e:	b2db      	uxtb	r3, r3
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	60f8      	str	r0, [r7, #12]
 80090bc:	60b9      	str	r1, [r7, #8]
 80090be:	607a      	str	r2, [r7, #4]
 80090c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80090d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b40      	cmp	r3, #64	@ 0x40
 80090e0:	d108      	bne.n	80090f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80090f2:	e007      	b.n	8009104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	60da      	str	r2, [r3, #12]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	b2db      	uxtb	r3, r3
 800911e:	3b10      	subs	r3, #16
 8009120:	4a14      	ldr	r2, [pc, #80]	@ (8009174 <DMA_CalcBaseAndBitshift+0x64>)
 8009122:	fba2 2303 	umull	r2, r3, r2, r3
 8009126:	091b      	lsrs	r3, r3, #4
 8009128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800912a:	4a13      	ldr	r2, [pc, #76]	@ (8009178 <DMA_CalcBaseAndBitshift+0x68>)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4413      	add	r3, r2
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	461a      	mov	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b03      	cmp	r3, #3
 800913c:	d909      	bls.n	8009152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009146:	f023 0303 	bic.w	r3, r3, #3
 800914a:	1d1a      	adds	r2, r3, #4
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	659a      	str	r2, [r3, #88]	@ 0x58
 8009150:	e007      	b.n	8009162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800915a:	f023 0303 	bic.w	r3, r3, #3
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	aaaaaaab 	.word	0xaaaaaaab
 8009178:	08016598 	.word	0x08016598

0800917c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800917c:	b480      	push	{r7}
 800917e:	b085      	sub	sp, #20
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800918c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d11f      	bne.n	80091d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b03      	cmp	r3, #3
 800919a:	d856      	bhi.n	800924a <DMA_CheckFifoParam+0xce>
 800919c:	a201      	add	r2, pc, #4	@ (adr r2, 80091a4 <DMA_CheckFifoParam+0x28>)
 800919e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a2:	bf00      	nop
 80091a4:	080091b5 	.word	0x080091b5
 80091a8:	080091c7 	.word	0x080091c7
 80091ac:	080091b5 	.word	0x080091b5
 80091b0:	0800924b 	.word	0x0800924b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d046      	beq.n	800924e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091c4:	e043      	b.n	800924e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80091ce:	d140      	bne.n	8009252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80091d4:	e03d      	b.n	8009252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091de:	d121      	bne.n	8009224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	2b03      	cmp	r3, #3
 80091e4:	d837      	bhi.n	8009256 <DMA_CheckFifoParam+0xda>
 80091e6:	a201      	add	r2, pc, #4	@ (adr r2, 80091ec <DMA_CheckFifoParam+0x70>)
 80091e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ec:	080091fd 	.word	0x080091fd
 80091f0:	08009203 	.word	0x08009203
 80091f4:	080091fd 	.word	0x080091fd
 80091f8:	08009215 	.word	0x08009215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009200:	e030      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009206:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800920a:	2b00      	cmp	r3, #0
 800920c:	d025      	beq.n	800925a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009212:	e022      	b.n	800925a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009218:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800921c:	d11f      	bne.n	800925e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009222:	e01c      	b.n	800925e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d903      	bls.n	8009232 <DMA_CheckFifoParam+0xb6>
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b03      	cmp	r3, #3
 800922e:	d003      	beq.n	8009238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009230:	e018      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009232:	2301      	movs	r3, #1
 8009234:	73fb      	strb	r3, [r7, #15]
      break;
 8009236:	e015      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800923c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d00e      	beq.n	8009262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	73fb      	strb	r3, [r7, #15]
      break;
 8009248:	e00b      	b.n	8009262 <DMA_CheckFifoParam+0xe6>
      break;
 800924a:	bf00      	nop
 800924c:	e00a      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
      break;
 800924e:	bf00      	nop
 8009250:	e008      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
      break;
 8009252:	bf00      	nop
 8009254:	e006      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
      break;
 8009256:	bf00      	nop
 8009258:	e004      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
      break;
 800925a:	bf00      	nop
 800925c:	e002      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
      break;   
 800925e:	bf00      	nop
 8009260:	e000      	b.n	8009264 <DMA_CheckFifoParam+0xe8>
      break;
 8009262:	bf00      	nop
    }
  } 
  
  return status; 
 8009264:	7bfb      	ldrb	r3, [r7, #15]
}
 8009266:	4618      	mov	r0, r3
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop

08009274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009274:	b480      	push	{r7}
 8009276:	b089      	sub	sp, #36	@ 0x24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800927e:	2300      	movs	r3, #0
 8009280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009282:	2300      	movs	r3, #0
 8009284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009286:	2300      	movs	r3, #0
 8009288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800928a:	2300      	movs	r3, #0
 800928c:	61fb      	str	r3, [r7, #28]
 800928e:	e165      	b.n	800955c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009290:	2201      	movs	r2, #1
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	4013      	ands	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	f040 8154 	bne.w	8009556 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	2b01      	cmp	r3, #1
 80092b8:	d005      	beq.n	80092c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d130      	bne.n	8009328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80092cc:	69fb      	ldr	r3, [r7, #28]
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	2203      	movs	r2, #3
 80092d2:	fa02 f303 	lsl.w	r3, r2, r3
 80092d6:	43db      	mvns	r3, r3
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	4013      	ands	r3, r2
 80092dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	68da      	ldr	r2, [r3, #12]
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	4313      	orrs	r3, r2
 80092ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80092fc:	2201      	movs	r2, #1
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	fa02 f303 	lsl.w	r3, r2, r3
 8009304:	43db      	mvns	r3, r3
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	4013      	ands	r3, r2
 800930a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	091b      	lsrs	r3, r3, #4
 8009312:	f003 0201 	and.w	r2, r3, #1
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	fa02 f303 	lsl.w	r3, r2, r3
 800931c:	69ba      	ldr	r2, [r7, #24]
 800931e:	4313      	orrs	r3, r2
 8009320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	f003 0303 	and.w	r3, r3, #3
 8009330:	2b03      	cmp	r3, #3
 8009332:	d017      	beq.n	8009364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	2203      	movs	r2, #3
 8009340:	fa02 f303 	lsl.w	r3, r2, r3
 8009344:	43db      	mvns	r3, r3
 8009346:	69ba      	ldr	r2, [r7, #24]
 8009348:	4013      	ands	r3, r2
 800934a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	69fb      	ldr	r3, [r7, #28]
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	fa02 f303 	lsl.w	r3, r2, r3
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	4313      	orrs	r3, r2
 800935c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	69ba      	ldr	r2, [r7, #24]
 8009362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	f003 0303 	and.w	r3, r3, #3
 800936c:	2b02      	cmp	r3, #2
 800936e:	d123      	bne.n	80093b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	08da      	lsrs	r2, r3, #3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	3208      	adds	r2, #8
 8009378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800937e:	69fb      	ldr	r3, [r7, #28]
 8009380:	f003 0307 	and.w	r3, r3, #7
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	220f      	movs	r2, #15
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	43db      	mvns	r3, r3
 800938e:	69ba      	ldr	r2, [r7, #24]
 8009390:	4013      	ands	r3, r2
 8009392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	691a      	ldr	r2, [r3, #16]
 8009398:	69fb      	ldr	r3, [r7, #28]
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80093aa:	69fb      	ldr	r3, [r7, #28]
 80093ac:	08da      	lsrs	r2, r3, #3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	3208      	adds	r2, #8
 80093b2:	69b9      	ldr	r1, [r7, #24]
 80093b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	005b      	lsls	r3, r3, #1
 80093c2:	2203      	movs	r2, #3
 80093c4:	fa02 f303 	lsl.w	r3, r2, r3
 80093c8:	43db      	mvns	r3, r3
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	4013      	ands	r3, r2
 80093ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f003 0203 	and.w	r2, r3, #3
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	005b      	lsls	r3, r3, #1
 80093dc:	fa02 f303 	lsl.w	r3, r2, r3
 80093e0:	69ba      	ldr	r2, [r7, #24]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f000 80ae 	beq.w	8009556 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	4b5d      	ldr	r3, [pc, #372]	@ (8009574 <HAL_GPIO_Init+0x300>)
 8009400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009402:	4a5c      	ldr	r2, [pc, #368]	@ (8009574 <HAL_GPIO_Init+0x300>)
 8009404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009408:	6453      	str	r3, [r2, #68]	@ 0x44
 800940a:	4b5a      	ldr	r3, [pc, #360]	@ (8009574 <HAL_GPIO_Init+0x300>)
 800940c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800940e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009416:	4a58      	ldr	r2, [pc, #352]	@ (8009578 <HAL_GPIO_Init+0x304>)
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	089b      	lsrs	r3, r3, #2
 800941c:	3302      	adds	r3, #2
 800941e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009424:	69fb      	ldr	r3, [r7, #28]
 8009426:	f003 0303 	and.w	r3, r3, #3
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	220f      	movs	r2, #15
 800942e:	fa02 f303 	lsl.w	r3, r2, r3
 8009432:	43db      	mvns	r3, r3
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	4013      	ands	r3, r2
 8009438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a4f      	ldr	r2, [pc, #316]	@ (800957c <HAL_GPIO_Init+0x308>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d025      	beq.n	800948e <HAL_GPIO_Init+0x21a>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a4e      	ldr	r2, [pc, #312]	@ (8009580 <HAL_GPIO_Init+0x30c>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d01f      	beq.n	800948a <HAL_GPIO_Init+0x216>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a4d      	ldr	r2, [pc, #308]	@ (8009584 <HAL_GPIO_Init+0x310>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d019      	beq.n	8009486 <HAL_GPIO_Init+0x212>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a4c      	ldr	r2, [pc, #304]	@ (8009588 <HAL_GPIO_Init+0x314>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d013      	beq.n	8009482 <HAL_GPIO_Init+0x20e>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a4b      	ldr	r2, [pc, #300]	@ (800958c <HAL_GPIO_Init+0x318>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00d      	beq.n	800947e <HAL_GPIO_Init+0x20a>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a4a      	ldr	r2, [pc, #296]	@ (8009590 <HAL_GPIO_Init+0x31c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d007      	beq.n	800947a <HAL_GPIO_Init+0x206>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a49      	ldr	r2, [pc, #292]	@ (8009594 <HAL_GPIO_Init+0x320>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d101      	bne.n	8009476 <HAL_GPIO_Init+0x202>
 8009472:	2306      	movs	r3, #6
 8009474:	e00c      	b.n	8009490 <HAL_GPIO_Init+0x21c>
 8009476:	2307      	movs	r3, #7
 8009478:	e00a      	b.n	8009490 <HAL_GPIO_Init+0x21c>
 800947a:	2305      	movs	r3, #5
 800947c:	e008      	b.n	8009490 <HAL_GPIO_Init+0x21c>
 800947e:	2304      	movs	r3, #4
 8009480:	e006      	b.n	8009490 <HAL_GPIO_Init+0x21c>
 8009482:	2303      	movs	r3, #3
 8009484:	e004      	b.n	8009490 <HAL_GPIO_Init+0x21c>
 8009486:	2302      	movs	r3, #2
 8009488:	e002      	b.n	8009490 <HAL_GPIO_Init+0x21c>
 800948a:	2301      	movs	r3, #1
 800948c:	e000      	b.n	8009490 <HAL_GPIO_Init+0x21c>
 800948e:	2300      	movs	r3, #0
 8009490:	69fa      	ldr	r2, [r7, #28]
 8009492:	f002 0203 	and.w	r2, r2, #3
 8009496:	0092      	lsls	r2, r2, #2
 8009498:	4093      	lsls	r3, r2
 800949a:	69ba      	ldr	r2, [r7, #24]
 800949c:	4313      	orrs	r3, r2
 800949e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80094a0:	4935      	ldr	r1, [pc, #212]	@ (8009578 <HAL_GPIO_Init+0x304>)
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	089b      	lsrs	r3, r3, #2
 80094a6:	3302      	adds	r3, #2
 80094a8:	69ba      	ldr	r2, [r7, #24]
 80094aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80094ae:	4b3a      	ldr	r3, [pc, #232]	@ (8009598 <HAL_GPIO_Init+0x324>)
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	43db      	mvns	r3, r3
 80094b8:	69ba      	ldr	r2, [r7, #24]
 80094ba:	4013      	ands	r3, r2
 80094bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	4313      	orrs	r3, r2
 80094d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80094d2:	4a31      	ldr	r2, [pc, #196]	@ (8009598 <HAL_GPIO_Init+0x324>)
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80094d8:	4b2f      	ldr	r3, [pc, #188]	@ (8009598 <HAL_GPIO_Init+0x324>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	43db      	mvns	r3, r3
 80094e2:	69ba      	ldr	r2, [r7, #24]
 80094e4:	4013      	ands	r3, r2
 80094e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d003      	beq.n	80094fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80094f4:	69ba      	ldr	r2, [r7, #24]
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80094fc:	4a26      	ldr	r2, [pc, #152]	@ (8009598 <HAL_GPIO_Init+0x324>)
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009502:	4b25      	ldr	r3, [pc, #148]	@ (8009598 <HAL_GPIO_Init+0x324>)
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	43db      	mvns	r3, r3
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	4013      	ands	r3, r2
 8009510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800951e:	69ba      	ldr	r2, [r7, #24]
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	4313      	orrs	r3, r2
 8009524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009526:	4a1c      	ldr	r2, [pc, #112]	@ (8009598 <HAL_GPIO_Init+0x324>)
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800952c:	4b1a      	ldr	r3, [pc, #104]	@ (8009598 <HAL_GPIO_Init+0x324>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	43db      	mvns	r3, r3
 8009536:	69ba      	ldr	r2, [r7, #24]
 8009538:	4013      	ands	r3, r2
 800953a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d003      	beq.n	8009550 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	4313      	orrs	r3, r2
 800954e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009550:	4a11      	ldr	r2, [pc, #68]	@ (8009598 <HAL_GPIO_Init+0x324>)
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	3301      	adds	r3, #1
 800955a:	61fb      	str	r3, [r7, #28]
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	2b0f      	cmp	r3, #15
 8009560:	f67f ae96 	bls.w	8009290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009564:	bf00      	nop
 8009566:	bf00      	nop
 8009568:	3724      	adds	r7, #36	@ 0x24
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	40023800 	.word	0x40023800
 8009578:	40013800 	.word	0x40013800
 800957c:	40020000 	.word	0x40020000
 8009580:	40020400 	.word	0x40020400
 8009584:	40020800 	.word	0x40020800
 8009588:	40020c00 	.word	0x40020c00
 800958c:	40021000 	.word	0x40021000
 8009590:	40021400 	.word	0x40021400
 8009594:	40021800 	.word	0x40021800
 8009598:	40013c00 	.word	0x40013c00

0800959c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80095a6:	2300      	movs	r3, #0
 80095a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80095aa:	2300      	movs	r3, #0
 80095ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80095b2:	2300      	movs	r3, #0
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	e0c7      	b.n	8009748 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80095b8:	2201      	movs	r2, #1
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	fa02 f303 	lsl.w	r3, r2, r3
 80095c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80095c2:	683a      	ldr	r2, [r7, #0]
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	4013      	ands	r3, r2
 80095c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80095ca:	68fa      	ldr	r2, [r7, #12]
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	f040 80b7 	bne.w	8009742 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80095d4:	4a62      	ldr	r2, [pc, #392]	@ (8009760 <HAL_GPIO_DeInit+0x1c4>)
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	089b      	lsrs	r3, r3, #2
 80095da:	3302      	adds	r3, #2
 80095dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095e0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f003 0303 	and.w	r3, r3, #3
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	220f      	movs	r2, #15
 80095ec:	fa02 f303 	lsl.w	r3, r2, r3
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	4013      	ands	r3, r2
 80095f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	4a5a      	ldr	r2, [pc, #360]	@ (8009764 <HAL_GPIO_DeInit+0x1c8>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d025      	beq.n	800964a <HAL_GPIO_DeInit+0xae>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4a59      	ldr	r2, [pc, #356]	@ (8009768 <HAL_GPIO_DeInit+0x1cc>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d01f      	beq.n	8009646 <HAL_GPIO_DeInit+0xaa>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	4a58      	ldr	r2, [pc, #352]	@ (800976c <HAL_GPIO_DeInit+0x1d0>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d019      	beq.n	8009642 <HAL_GPIO_DeInit+0xa6>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	4a57      	ldr	r2, [pc, #348]	@ (8009770 <HAL_GPIO_DeInit+0x1d4>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d013      	beq.n	800963e <HAL_GPIO_DeInit+0xa2>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4a56      	ldr	r2, [pc, #344]	@ (8009774 <HAL_GPIO_DeInit+0x1d8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00d      	beq.n	800963a <HAL_GPIO_DeInit+0x9e>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	4a55      	ldr	r2, [pc, #340]	@ (8009778 <HAL_GPIO_DeInit+0x1dc>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d007      	beq.n	8009636 <HAL_GPIO_DeInit+0x9a>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	4a54      	ldr	r2, [pc, #336]	@ (800977c <HAL_GPIO_DeInit+0x1e0>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d101      	bne.n	8009632 <HAL_GPIO_DeInit+0x96>
 800962e:	2306      	movs	r3, #6
 8009630:	e00c      	b.n	800964c <HAL_GPIO_DeInit+0xb0>
 8009632:	2307      	movs	r3, #7
 8009634:	e00a      	b.n	800964c <HAL_GPIO_DeInit+0xb0>
 8009636:	2305      	movs	r3, #5
 8009638:	e008      	b.n	800964c <HAL_GPIO_DeInit+0xb0>
 800963a:	2304      	movs	r3, #4
 800963c:	e006      	b.n	800964c <HAL_GPIO_DeInit+0xb0>
 800963e:	2303      	movs	r3, #3
 8009640:	e004      	b.n	800964c <HAL_GPIO_DeInit+0xb0>
 8009642:	2302      	movs	r3, #2
 8009644:	e002      	b.n	800964c <HAL_GPIO_DeInit+0xb0>
 8009646:	2301      	movs	r3, #1
 8009648:	e000      	b.n	800964c <HAL_GPIO_DeInit+0xb0>
 800964a:	2300      	movs	r3, #0
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	f002 0203 	and.w	r2, r2, #3
 8009652:	0092      	lsls	r2, r2, #2
 8009654:	4093      	lsls	r3, r2
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	429a      	cmp	r2, r3
 800965a:	d132      	bne.n	80096c2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800965c:	4b48      	ldr	r3, [pc, #288]	@ (8009780 <HAL_GPIO_DeInit+0x1e4>)
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	43db      	mvns	r3, r3
 8009664:	4946      	ldr	r1, [pc, #280]	@ (8009780 <HAL_GPIO_DeInit+0x1e4>)
 8009666:	4013      	ands	r3, r2
 8009668:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800966a:	4b45      	ldr	r3, [pc, #276]	@ (8009780 <HAL_GPIO_DeInit+0x1e4>)
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	43db      	mvns	r3, r3
 8009672:	4943      	ldr	r1, [pc, #268]	@ (8009780 <HAL_GPIO_DeInit+0x1e4>)
 8009674:	4013      	ands	r3, r2
 8009676:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009678:	4b41      	ldr	r3, [pc, #260]	@ (8009780 <HAL_GPIO_DeInit+0x1e4>)
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	43db      	mvns	r3, r3
 8009680:	493f      	ldr	r1, [pc, #252]	@ (8009780 <HAL_GPIO_DeInit+0x1e4>)
 8009682:	4013      	ands	r3, r2
 8009684:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009686:	4b3e      	ldr	r3, [pc, #248]	@ (8009780 <HAL_GPIO_DeInit+0x1e4>)
 8009688:	689a      	ldr	r2, [r3, #8]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	43db      	mvns	r3, r3
 800968e:	493c      	ldr	r1, [pc, #240]	@ (8009780 <HAL_GPIO_DeInit+0x1e4>)
 8009690:	4013      	ands	r3, r2
 8009692:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	f003 0303 	and.w	r3, r3, #3
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	220f      	movs	r2, #15
 800969e:	fa02 f303 	lsl.w	r3, r2, r3
 80096a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80096a4:	4a2e      	ldr	r2, [pc, #184]	@ (8009760 <HAL_GPIO_DeInit+0x1c4>)
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	089b      	lsrs	r3, r3, #2
 80096aa:	3302      	adds	r3, #2
 80096ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	43da      	mvns	r2, r3
 80096b4:	482a      	ldr	r0, [pc, #168]	@ (8009760 <HAL_GPIO_DeInit+0x1c4>)
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	089b      	lsrs	r3, r3, #2
 80096ba:	400a      	ands	r2, r1
 80096bc:	3302      	adds	r3, #2
 80096be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	2103      	movs	r1, #3
 80096cc:	fa01 f303 	lsl.w	r3, r1, r3
 80096d0:	43db      	mvns	r3, r3
 80096d2:	401a      	ands	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	08da      	lsrs	r2, r3, #3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3208      	adds	r2, #8
 80096e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	f003 0307 	and.w	r3, r3, #7
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	220f      	movs	r2, #15
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	43db      	mvns	r3, r3
 80096f4:	697a      	ldr	r2, [r7, #20]
 80096f6:	08d2      	lsrs	r2, r2, #3
 80096f8:	4019      	ands	r1, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	3208      	adds	r2, #8
 80096fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68da      	ldr	r2, [r3, #12]
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	005b      	lsls	r3, r3, #1
 800970a:	2103      	movs	r1, #3
 800970c:	fa01 f303 	lsl.w	r3, r1, r3
 8009710:	43db      	mvns	r3, r3
 8009712:	401a      	ands	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685a      	ldr	r2, [r3, #4]
 800971c:	2101      	movs	r1, #1
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	fa01 f303 	lsl.w	r3, r1, r3
 8009724:	43db      	mvns	r3, r3
 8009726:	401a      	ands	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	689a      	ldr	r2, [r3, #8]
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	005b      	lsls	r3, r3, #1
 8009734:	2103      	movs	r1, #3
 8009736:	fa01 f303 	lsl.w	r3, r1, r3
 800973a:	43db      	mvns	r3, r3
 800973c:	401a      	ands	r2, r3
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	3301      	adds	r3, #1
 8009746:	617b      	str	r3, [r7, #20]
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	2b0f      	cmp	r3, #15
 800974c:	f67f af34 	bls.w	80095b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009750:	bf00      	nop
 8009752:	bf00      	nop
 8009754:	371c      	adds	r7, #28
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	40013800 	.word	0x40013800
 8009764:	40020000 	.word	0x40020000
 8009768:	40020400 	.word	0x40020400
 800976c:	40020800 	.word	0x40020800
 8009770:	40020c00 	.word	0x40020c00
 8009774:	40021000 	.word	0x40021000
 8009778:	40021400 	.word	0x40021400
 800977c:	40021800 	.word	0x40021800
 8009780:	40013c00 	.word	0x40013c00

08009784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	807b      	strh	r3, [r7, #2]
 8009790:	4613      	mov	r3, r2
 8009792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009794:	787b      	ldrb	r3, [r7, #1]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d003      	beq.n	80097a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800979a:	887a      	ldrh	r2, [r7, #2]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80097a0:	e003      	b.n	80097aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80097a2:	887b      	ldrh	r3, [r7, #2]
 80097a4:	041a      	lsls	r2, r3, #16
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	619a      	str	r2, [r3, #24]
}
 80097aa:	bf00      	nop
 80097ac:	370c      	adds	r7, #12
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80097c2:	4b08      	ldr	r3, [pc, #32]	@ (80097e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80097c4:	695a      	ldr	r2, [r3, #20]
 80097c6:	88fb      	ldrh	r3, [r7, #6]
 80097c8:	4013      	ands	r3, r2
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d006      	beq.n	80097dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80097ce:	4a05      	ldr	r2, [pc, #20]	@ (80097e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80097d0:	88fb      	ldrh	r3, [r7, #6]
 80097d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80097d4:	88fb      	ldrh	r3, [r7, #6]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f7fc f934 	bl	8005a44 <HAL_GPIO_EXTI_Callback>
  }
}
 80097dc:	bf00      	nop
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	40013c00 	.word	0x40013c00

080097e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d101      	bne.n	80097fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	e12b      	b.n	8009a52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009800:	b2db      	uxtb	r3, r3
 8009802:	2b00      	cmp	r3, #0
 8009804:	d106      	bne.n	8009814 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7fd fe2e 	bl	8007470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2224      	movs	r2, #36	@ 0x24
 8009818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0201 	bic.w	r2, r2, #1
 800982a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800983a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800984a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800984c:	f002 ff86 	bl	800c75c <HAL_RCC_GetPCLK1Freq>
 8009850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	4a81      	ldr	r2, [pc, #516]	@ (8009a5c <HAL_I2C_Init+0x274>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d807      	bhi.n	800986c <HAL_I2C_Init+0x84>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4a80      	ldr	r2, [pc, #512]	@ (8009a60 <HAL_I2C_Init+0x278>)
 8009860:	4293      	cmp	r3, r2
 8009862:	bf94      	ite	ls
 8009864:	2301      	movls	r3, #1
 8009866:	2300      	movhi	r3, #0
 8009868:	b2db      	uxtb	r3, r3
 800986a:	e006      	b.n	800987a <HAL_I2C_Init+0x92>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	4a7d      	ldr	r2, [pc, #500]	@ (8009a64 <HAL_I2C_Init+0x27c>)
 8009870:	4293      	cmp	r3, r2
 8009872:	bf94      	ite	ls
 8009874:	2301      	movls	r3, #1
 8009876:	2300      	movhi	r3, #0
 8009878:	b2db      	uxtb	r3, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e0e7      	b.n	8009a52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	4a78      	ldr	r2, [pc, #480]	@ (8009a68 <HAL_I2C_Init+0x280>)
 8009886:	fba2 2303 	umull	r2, r3, r2, r3
 800988a:	0c9b      	lsrs	r3, r3, #18
 800988c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	430a      	orrs	r2, r1
 80098a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	6a1b      	ldr	r3, [r3, #32]
 80098a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	4a6a      	ldr	r2, [pc, #424]	@ (8009a5c <HAL_I2C_Init+0x274>)
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d802      	bhi.n	80098bc <HAL_I2C_Init+0xd4>
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	3301      	adds	r3, #1
 80098ba:	e009      	b.n	80098d0 <HAL_I2C_Init+0xe8>
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80098c2:	fb02 f303 	mul.w	r3, r2, r3
 80098c6:	4a69      	ldr	r2, [pc, #420]	@ (8009a6c <HAL_I2C_Init+0x284>)
 80098c8:	fba2 2303 	umull	r2, r3, r2, r3
 80098cc:	099b      	lsrs	r3, r3, #6
 80098ce:	3301      	adds	r3, #1
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	6812      	ldr	r2, [r2, #0]
 80098d4:	430b      	orrs	r3, r1
 80098d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	69db      	ldr	r3, [r3, #28]
 80098de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80098e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	495c      	ldr	r1, [pc, #368]	@ (8009a5c <HAL_I2C_Init+0x274>)
 80098ec:	428b      	cmp	r3, r1
 80098ee:	d819      	bhi.n	8009924 <HAL_I2C_Init+0x13c>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	1e59      	subs	r1, r3, #1
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80098fe:	1c59      	adds	r1, r3, #1
 8009900:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009904:	400b      	ands	r3, r1
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <HAL_I2C_Init+0x138>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	1e59      	subs	r1, r3, #1
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	685b      	ldr	r3, [r3, #4]
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	fbb1 f3f3 	udiv	r3, r1, r3
 8009918:	3301      	adds	r3, #1
 800991a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800991e:	e051      	b.n	80099c4 <HAL_I2C_Init+0x1dc>
 8009920:	2304      	movs	r3, #4
 8009922:	e04f      	b.n	80099c4 <HAL_I2C_Init+0x1dc>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d111      	bne.n	8009950 <HAL_I2C_Init+0x168>
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	1e58      	subs	r0, r3, #1
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6859      	ldr	r1, [r3, #4]
 8009934:	460b      	mov	r3, r1
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	440b      	add	r3, r1
 800993a:	fbb0 f3f3 	udiv	r3, r0, r3
 800993e:	3301      	adds	r3, #1
 8009940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009944:	2b00      	cmp	r3, #0
 8009946:	bf0c      	ite	eq
 8009948:	2301      	moveq	r3, #1
 800994a:	2300      	movne	r3, #0
 800994c:	b2db      	uxtb	r3, r3
 800994e:	e012      	b.n	8009976 <HAL_I2C_Init+0x18e>
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	1e58      	subs	r0, r3, #1
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6859      	ldr	r1, [r3, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	009b      	lsls	r3, r3, #2
 800995c:	440b      	add	r3, r1
 800995e:	0099      	lsls	r1, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	fbb0 f3f3 	udiv	r3, r0, r3
 8009966:	3301      	adds	r3, #1
 8009968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800996c:	2b00      	cmp	r3, #0
 800996e:	bf0c      	ite	eq
 8009970:	2301      	moveq	r3, #1
 8009972:	2300      	movne	r3, #0
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	d001      	beq.n	800997e <HAL_I2C_Init+0x196>
 800997a:	2301      	movs	r3, #1
 800997c:	e022      	b.n	80099c4 <HAL_I2C_Init+0x1dc>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d10e      	bne.n	80099a4 <HAL_I2C_Init+0x1bc>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	1e58      	subs	r0, r3, #1
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6859      	ldr	r1, [r3, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	005b      	lsls	r3, r3, #1
 8009992:	440b      	add	r3, r1
 8009994:	fbb0 f3f3 	udiv	r3, r0, r3
 8009998:	3301      	adds	r3, #1
 800999a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800999e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a2:	e00f      	b.n	80099c4 <HAL_I2C_Init+0x1dc>
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	1e58      	subs	r0, r3, #1
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6859      	ldr	r1, [r3, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	440b      	add	r3, r1
 80099b2:	0099      	lsls	r1, r3, #2
 80099b4:	440b      	add	r3, r1
 80099b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80099ba:	3301      	adds	r3, #1
 80099bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80099c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099c4:	6879      	ldr	r1, [r7, #4]
 80099c6:	6809      	ldr	r1, [r1, #0]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	69da      	ldr	r2, [r3, #28]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6a1b      	ldr	r3, [r3, #32]
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	430a      	orrs	r2, r1
 80099e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80099f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6911      	ldr	r1, [r2, #16]
 80099fa:	687a      	ldr	r2, [r7, #4]
 80099fc:	68d2      	ldr	r2, [r2, #12]
 80099fe:	4311      	orrs	r1, r2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	430b      	orrs	r3, r1
 8009a06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	695a      	ldr	r2, [r3, #20]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	699b      	ldr	r3, [r3, #24]
 8009a1a:	431a      	orrs	r2, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	430a      	orrs	r2, r1
 8009a22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2220      	movs	r2, #32
 8009a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	000186a0 	.word	0x000186a0
 8009a60:	001e847f 	.word	0x001e847f
 8009a64:	003d08ff 	.word	0x003d08ff
 8009a68:	431bde83 	.word	0x431bde83
 8009a6c:	10624dd3 	.word	0x10624dd3

08009a70 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e021      	b.n	8009ac6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2224      	movs	r2, #36	@ 0x24
 8009a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0201 	bic.w	r2, r2, #1
 8009a98:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7fd fdc2 	bl	8007624 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ae0:	2b80      	cmp	r3, #128	@ 0x80
 8009ae2:	d103      	bne.n	8009aec <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	611a      	str	r2, [r3, #16]
  }
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af02      	add	r7, sp, #8
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	4608      	mov	r0, r1
 8009b02:	4611      	mov	r1, r2
 8009b04:	461a      	mov	r2, r3
 8009b06:	4603      	mov	r3, r0
 8009b08:	817b      	strh	r3, [r7, #10]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	813b      	strh	r3, [r7, #8]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b12:	f7fe f9b1 	bl	8007e78 <HAL_GetTick>
 8009b16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b20      	cmp	r3, #32
 8009b22:	f040 80d9 	bne.w	8009cd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	2319      	movs	r3, #25
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	496d      	ldr	r1, [pc, #436]	@ (8009ce4 <HAL_I2C_Mem_Write+0x1ec>)
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f002 fa9d 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009b3c:	2302      	movs	r3, #2
 8009b3e:	e0cc      	b.n	8009cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d101      	bne.n	8009b4e <HAL_I2C_Mem_Write+0x56>
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	e0c5      	b.n	8009cda <HAL_I2C_Mem_Write+0x1e2>
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2201      	movs	r2, #1
 8009b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d007      	beq.n	8009b74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0201 	orr.w	r2, r2, #1
 8009b72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2221      	movs	r2, #33	@ 0x21
 8009b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2240      	movs	r2, #64	@ 0x40
 8009b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6a3a      	ldr	r2, [r7, #32]
 8009b9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009ba4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009baa:	b29a      	uxth	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4a4d      	ldr	r2, [pc, #308]	@ (8009ce8 <HAL_I2C_Mem_Write+0x1f0>)
 8009bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009bb6:	88f8      	ldrh	r0, [r7, #6]
 8009bb8:	893a      	ldrh	r2, [r7, #8]
 8009bba:	8979      	ldrh	r1, [r7, #10]
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	68f8      	ldr	r0, [r7, #12]
 8009bc8:	f001 ff10 	bl	800b9ec <I2C_RequestMemoryWrite>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d052      	beq.n	8009c78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e081      	b.n	8009cda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bd6:	697a      	ldr	r2, [r7, #20]
 8009bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bda:	68f8      	ldr	r0, [r7, #12]
 8009bdc:	f002 fb62 	bl	800c2a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00d      	beq.n	8009c02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bea:	2b04      	cmp	r3, #4
 8009bec:	d107      	bne.n	8009bfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009bfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e06b      	b.n	8009cda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c06:	781a      	ldrb	r2, [r3, #0]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c12:	1c5a      	adds	r2, r3, #1
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	b29a      	uxth	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	f003 0304 	and.w	r3, r3, #4
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d11b      	bne.n	8009c78 <HAL_I2C_Mem_Write+0x180>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d017      	beq.n	8009c78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4c:	781a      	ldrb	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c62:	3b01      	subs	r3, #1
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	3b01      	subs	r3, #1
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1aa      	bne.n	8009bd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c84:	68f8      	ldr	r0, [r7, #12]
 8009c86:	f002 fb55 	bl	800c334 <I2C_WaitOnBTFFlagUntilTimeout>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d00d      	beq.n	8009cac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	d107      	bne.n	8009ca8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ca6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	e016      	b.n	8009cda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e000      	b.n	8009cda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009cd8:	2302      	movs	r3, #2
  }
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3718      	adds	r7, #24
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	00100002 	.word	0x00100002
 8009ce8:	ffff0000 	.word	0xffff0000

08009cec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b08c      	sub	sp, #48	@ 0x30
 8009cf0:	af02      	add	r7, sp, #8
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	817b      	strh	r3, [r7, #10]
 8009cfe:	460b      	mov	r3, r1
 8009d00:	813b      	strh	r3, [r7, #8]
 8009d02:	4613      	mov	r3, r2
 8009d04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d06:	f7fe f8b7 	bl	8007e78 <HAL_GetTick>
 8009d0a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b20      	cmp	r3, #32
 8009d16:	f040 8214 	bne.w	800a142 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d1c:	9300      	str	r3, [sp, #0]
 8009d1e:	2319      	movs	r3, #25
 8009d20:	2201      	movs	r2, #1
 8009d22:	497b      	ldr	r1, [pc, #492]	@ (8009f10 <HAL_I2C_Mem_Read+0x224>)
 8009d24:	68f8      	ldr	r0, [r7, #12]
 8009d26:	f002 f9a3 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009d30:	2302      	movs	r3, #2
 8009d32:	e207      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d101      	bne.n	8009d42 <HAL_I2C_Mem_Read+0x56>
 8009d3e:	2302      	movs	r3, #2
 8009d40:	e200      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2201      	movs	r2, #1
 8009d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f003 0301 	and.w	r3, r3, #1
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d007      	beq.n	8009d68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f042 0201 	orr.w	r2, r2, #1
 8009d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2222      	movs	r2, #34	@ 0x22
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2240      	movs	r2, #64	@ 0x40
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009d98:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	4a5b      	ldr	r2, [pc, #364]	@ (8009f14 <HAL_I2C_Mem_Read+0x228>)
 8009da8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009daa:	88f8      	ldrh	r0, [r7, #6]
 8009dac:	893a      	ldrh	r2, [r7, #8]
 8009dae:	8979      	ldrh	r1, [r7, #10]
 8009db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009db2:	9301      	str	r3, [sp, #4]
 8009db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	4603      	mov	r3, r0
 8009dba:	68f8      	ldr	r0, [r7, #12]
 8009dbc:	f001 feac 	bl	800bb18 <I2C_RequestMemoryRead>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e1bc      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d113      	bne.n	8009dfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	623b      	str	r3, [r7, #32]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	623b      	str	r3, [r7, #32]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	699b      	ldr	r3, [r3, #24]
 8009de4:	623b      	str	r3, [r7, #32]
 8009de6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	e190      	b.n	800a11c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d11b      	bne.n	8009e3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e12:	2300      	movs	r3, #0
 8009e14:	61fb      	str	r3, [r7, #28]
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	695b      	ldr	r3, [r3, #20]
 8009e1c:	61fb      	str	r3, [r7, #28]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	61fb      	str	r3, [r7, #28]
 8009e26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e36:	601a      	str	r2, [r3, #0]
 8009e38:	e170      	b.n	800a11c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d11b      	bne.n	8009e7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e62:	2300      	movs	r3, #0
 8009e64:	61bb      	str	r3, [r7, #24]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	695b      	ldr	r3, [r3, #20]
 8009e6c:	61bb      	str	r3, [r7, #24]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	61bb      	str	r3, [r7, #24]
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	e150      	b.n	800a11c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	617b      	str	r3, [r7, #20]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	617b      	str	r3, [r7, #20]
 8009e8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009e90:	e144      	b.n	800a11c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	f200 80f1 	bhi.w	800a07e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d123      	bne.n	8009eec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ea4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ea6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f002 fabd 	bl	800c428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	e145      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691a      	ldr	r2, [r3, #16]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ec2:	b2d2      	uxtb	r2, r2
 8009ec4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	3b01      	subs	r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009eea:	e117      	b.n	800a11c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d14e      	bne.n	8009f92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef6:	9300      	str	r3, [sp, #0]
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009efa:	2200      	movs	r2, #0
 8009efc:	4906      	ldr	r1, [pc, #24]	@ (8009f18 <HAL_I2C_Mem_Read+0x22c>)
 8009efe:	68f8      	ldr	r0, [r7, #12]
 8009f00:	f002 f8b6 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d008      	beq.n	8009f1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e11a      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
 8009f0e:	bf00      	nop
 8009f10:	00100002 	.word	0x00100002
 8009f14:	ffff0000 	.word	0xffff0000
 8009f18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	691a      	ldr	r2, [r3, #16]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f36:	b2d2      	uxtb	r2, r2
 8009f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f3e:	1c5a      	adds	r2, r3, #1
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f48:	3b01      	subs	r3, #1
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	3b01      	subs	r3, #1
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	691a      	ldr	r2, [r3, #16]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f68:	b2d2      	uxtb	r2, r2
 8009f6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f70:	1c5a      	adds	r2, r3, #1
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009f90:	e0c4      	b.n	800a11c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f98:	2200      	movs	r2, #0
 8009f9a:	496c      	ldr	r1, [pc, #432]	@ (800a14c <HAL_I2C_Mem_Read+0x460>)
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f002 f867 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d001      	beq.n	8009fac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e0cb      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	691a      	ldr	r2, [r3, #16]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc6:	b2d2      	uxtb	r2, r2
 8009fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fce:	1c5a      	adds	r2, r3, #1
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4955      	ldr	r1, [pc, #340]	@ (800a14c <HAL_I2C_Mem_Read+0x460>)
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f002 f839 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e09d      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a022:	b2d2      	uxtb	r2, r2
 800a024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a034:	3b01      	subs	r3, #1
 800a036:	b29a      	uxth	r2, r3
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	b29a      	uxth	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	691a      	ldr	r2, [r3, #16]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a054:	b2d2      	uxtb	r2, r2
 800a056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a05c:	1c5a      	adds	r2, r3, #1
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a066:	3b01      	subs	r3, #1
 800a068:	b29a      	uxth	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a072:	b29b      	uxth	r3, r3
 800a074:	3b01      	subs	r3, #1
 800a076:	b29a      	uxth	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a07c:	e04e      	b.n	800a11c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a07e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a080:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	f002 f9d0 	bl	800c428 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e058      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	691a      	ldr	r2, [r3, #16]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09c:	b2d2      	uxtb	r2, r2
 800a09e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	b29a      	uxth	r2, r3
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	695b      	ldr	r3, [r3, #20]
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	2b04      	cmp	r3, #4
 800a0d0:	d124      	bne.n	800a11c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d107      	bne.n	800a0ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	691a      	ldr	r2, [r3, #16]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0f4:	b2d2      	uxtb	r2, r2
 800a0f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fc:	1c5a      	adds	r2, r3, #1
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a106:	3b01      	subs	r3, #1
 800a108:	b29a      	uxth	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a112:	b29b      	uxth	r3, r3
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a120:	2b00      	cmp	r3, #0
 800a122:	f47f aeb6 	bne.w	8009e92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2220      	movs	r2, #32
 800a12a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a13e:	2300      	movs	r3, #0
 800a140:	e000      	b.n	800a144 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a142:	2302      	movs	r3, #2
  }
}
 800a144:	4618      	mov	r0, r3
 800a146:	3728      	adds	r7, #40	@ 0x28
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	00010004 	.word	0x00010004

0800a150 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b08c      	sub	sp, #48	@ 0x30
 800a154:	af02      	add	r7, sp, #8
 800a156:	60f8      	str	r0, [r7, #12]
 800a158:	4608      	mov	r0, r1
 800a15a:	4611      	mov	r1, r2
 800a15c:	461a      	mov	r2, r3
 800a15e:	4603      	mov	r3, r0
 800a160:	817b      	strh	r3, [r7, #10]
 800a162:	460b      	mov	r3, r1
 800a164:	813b      	strh	r3, [r7, #8]
 800a166:	4613      	mov	r3, r2
 800a168:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a16a:	f7fd fe85 	bl	8007e78 <HAL_GetTick>
 800a16e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800a170:	2300      	movs	r3, #0
 800a172:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	2b20      	cmp	r3, #32
 800a17e:	f040 8172 	bne.w	800a466 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a182:	4b93      	ldr	r3, [pc, #588]	@ (800a3d0 <HAL_I2C_Mem_Read_DMA+0x280>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	08db      	lsrs	r3, r3, #3
 800a188:	4a92      	ldr	r2, [pc, #584]	@ (800a3d4 <HAL_I2C_Mem_Read_DMA+0x284>)
 800a18a:	fba2 2303 	umull	r2, r3, r2, r3
 800a18e:	0a1a      	lsrs	r2, r3, #8
 800a190:	4613      	mov	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	4413      	add	r3, r2
 800a196:	009a      	lsls	r2, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	3b01      	subs	r3, #1
 800a1a0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d112      	bne.n	800a1ce <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2220      	movs	r2, #32
 800a1b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1c2:	f043 0220 	orr.w	r2, r3, #32
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	e14c      	b.n	800a468 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d0df      	beq.n	800a19c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d101      	bne.n	800a1ea <HAL_I2C_Mem_Read_DMA+0x9a>
 800a1e6:	2302      	movs	r3, #2
 800a1e8:	e13e      	b.n	800a468 <HAL_I2C_Mem_Read_DMA+0x318>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2201      	movs	r2, #1
 800a1ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d007      	beq.n	800a210 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0201 	orr.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a21e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2222      	movs	r2, #34	@ 0x22
 800a224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2240      	movs	r2, #64	@ 0x40
 800a22c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a23a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a240:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4a62      	ldr	r2, [pc, #392]	@ (800a3d8 <HAL_I2C_Mem_Read_DMA+0x288>)
 800a250:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800a252:	897a      	ldrh	r2, [r7, #10]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800a258:	893a      	ldrh	r2, [r7, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800a25e:	88fa      	ldrh	r2, [r7, #6]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2200      	movs	r2, #0
 800a268:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a26e:	2b00      	cmp	r3, #0
 800a270:	f000 80cc 	beq.w	800a40c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d02d      	beq.n	800a2d8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a280:	4a56      	ldr	r2, [pc, #344]	@ (800a3dc <HAL_I2C_Mem_Read_DMA+0x28c>)
 800a282:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a288:	4a55      	ldr	r2, [pc, #340]	@ (800a3e0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800a28a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a290:	2200      	movs	r2, #0
 800a292:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a298:	2200      	movs	r2, #0
 800a29a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3310      	adds	r3, #16
 800a2b6:	4619      	mov	r1, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2bc:	461a      	mov	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2c2:	f7fe fc69 	bl	8008b98 <HAL_DMA_Start_IT>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a2cc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f040 8087 	bne.w	800a3e4 <HAL_I2C_Mem_Read_DMA+0x294>
 800a2d6:	e013      	b.n	800a300 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2220      	movs	r2, #32
 800a2dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e0b3      	b.n	800a468 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a300:	88f8      	ldrh	r0, [r7, #6]
 800a302:	893a      	ldrh	r2, [r7, #8]
 800a304:	8979      	ldrh	r1, [r7, #10]
 800a306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a308:	9301      	str	r3, [sp, #4]
 800a30a:	2323      	movs	r3, #35	@ 0x23
 800a30c:	9300      	str	r3, [sp, #0]
 800a30e:	4603      	mov	r3, r0
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f001 fc01 	bl	800bb18 <I2C_RequestMemoryRead>
 800a316:	4603      	mov	r3, r0
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d023      	beq.n	800a364 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a320:	4618      	mov	r0, r3
 800a322:	f7fe fd01 	bl	8008d28 <HAL_DMA_Abort_IT>
 800a326:	4603      	mov	r3, r0
 800a328:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a330:	2200      	movs	r2, #0
 800a332:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a342:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 0201 	bic.w	r2, r2, #1
 800a35e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e081      	b.n	800a468 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d108      	bne.n	800a37e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	e007      	b.n	800a38e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	685a      	ldr	r2, [r3, #4]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a38c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a38e:	2300      	movs	r3, #0
 800a390:	61bb      	str	r3, [r7, #24]
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	61bb      	str	r3, [r7, #24]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	61bb      	str	r3, [r7, #24]
 800a3a2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685a      	ldr	r2, [r3, #4]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a3ba:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3ca:	605a      	str	r2, [r3, #4]
 800a3cc:	e049      	b.n	800a462 <HAL_I2C_Mem_Read_DMA+0x312>
 800a3ce:	bf00      	nop
 800a3d0:	20000060 	.word	0x20000060
 800a3d4:	14f8b589 	.word	0x14f8b589
 800a3d8:	ffff0000 	.word	0xffff0000
 800a3dc:	0800bce9 	.word	0x0800bce9
 800a3e0:	0800bea7 	.word	0x0800bea7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2220      	movs	r2, #32
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3f8:	f043 0210 	orr.w	r2, r3, #16
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e02d      	b.n	800a468 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a40c:	88f8      	ldrh	r0, [r7, #6]
 800a40e:	893a      	ldrh	r2, [r7, #8]
 800a410:	8979      	ldrh	r1, [r7, #10]
 800a412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	2323      	movs	r3, #35	@ 0x23
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	4603      	mov	r3, r0
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f001 fb7b 	bl	800bb18 <I2C_RequestMemoryRead>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e01d      	b.n	800a468 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a42c:	2300      	movs	r3, #0
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	695b      	ldr	r3, [r3, #20]
 800a436:	617b      	str	r3, [r7, #20]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a450:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2220      	movs	r2, #32
 800a456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800a462:	2300      	movs	r3, #0
 800a464:	e000      	b.n	800a468 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800a466:	2302      	movs	r3, #2
  }
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3728      	adds	r7, #40	@ 0x28
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a488:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a490:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a498:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	2b10      	cmp	r3, #16
 800a49e:	d003      	beq.n	800a4a8 <HAL_I2C_EV_IRQHandler+0x38>
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	2b40      	cmp	r3, #64	@ 0x40
 800a4a4:	f040 80b1 	bne.w	800a60a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	699b      	ldr	r3, [r3, #24]
 800a4ae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	695b      	ldr	r3, [r3, #20]
 800a4b6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a4b8:	69fb      	ldr	r3, [r7, #28]
 800a4ba:	f003 0301 	and.w	r3, r3, #1
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d10d      	bne.n	800a4de <HAL_I2C_EV_IRQHandler+0x6e>
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a4c8:	d003      	beq.n	800a4d2 <HAL_I2C_EV_IRQHandler+0x62>
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a4d0:	d101      	bne.n	800a4d6 <HAL_I2C_EV_IRQHandler+0x66>
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	e000      	b.n	800a4d8 <HAL_I2C_EV_IRQHandler+0x68>
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	f000 8114 	beq.w	800a706 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00b      	beq.n	800a500 <HAL_I2C_EV_IRQHandler+0x90>
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d006      	beq.n	800a500 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f002 f824 	bl	800c540 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f000 fccd 	bl	800ae98 <I2C_Master_SB>
 800a4fe:	e083      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	f003 0308 	and.w	r3, r3, #8
 800a506:	2b00      	cmp	r3, #0
 800a508:	d008      	beq.n	800a51c <HAL_I2C_EV_IRQHandler+0xac>
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a510:	2b00      	cmp	r3, #0
 800a512:	d003      	beq.n	800a51c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fd45 	bl	800afa4 <I2C_Master_ADD10>
 800a51a:	e075      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d008      	beq.n	800a538 <HAL_I2C_EV_IRQHandler+0xc8>
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d003      	beq.n	800a538 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fd61 	bl	800aff8 <I2C_Master_ADDR>
 800a536:	e067      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d036      	beq.n	800a5b0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a54c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a550:	f000 80db 	beq.w	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00d      	beq.n	800a57a <HAL_I2C_EV_IRQHandler+0x10a>
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a564:	2b00      	cmp	r3, #0
 800a566:	d008      	beq.n	800a57a <HAL_I2C_EV_IRQHandler+0x10a>
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	f003 0304 	and.w	r3, r3, #4
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d103      	bne.n	800a57a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f000 f92d 	bl	800a7d2 <I2C_MasterTransmit_TXE>
 800a578:	e046      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	f003 0304 	and.w	r3, r3, #4
 800a580:	2b00      	cmp	r3, #0
 800a582:	f000 80c2 	beq.w	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f000 80bc 	beq.w	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a592:	7bbb      	ldrb	r3, [r7, #14]
 800a594:	2b21      	cmp	r3, #33	@ 0x21
 800a596:	d103      	bne.n	800a5a0 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 f9b6 	bl	800a90a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a59e:	e0b4      	b.n	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	2b40      	cmp	r3, #64	@ 0x40
 800a5a4:	f040 80b1 	bne.w	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fa24 	bl	800a9f6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5ae:	e0ac      	b.n	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a5ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a5be:	f000 80a4 	beq.w	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00d      	beq.n	800a5e8 <HAL_I2C_EV_IRQHandler+0x178>
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d008      	beq.n	800a5e8 <HAL_I2C_EV_IRQHandler+0x178>
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	f003 0304 	and.w	r3, r3, #4
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a5e0:	6878      	ldr	r0, [r7, #4]
 800a5e2:	f000 faa0 	bl	800ab26 <I2C_MasterReceive_RXNE>
 800a5e6:	e00f      	b.n	800a608 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	f003 0304 	and.w	r3, r3, #4
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	f000 808b 	beq.w	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 8085 	beq.w	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 fb58 	bl	800acb6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a606:	e080      	b.n	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
 800a608:	e07f      	b.n	800a70a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d004      	beq.n	800a61c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	695b      	ldr	r3, [r3, #20]
 800a618:	61fb      	str	r3, [r7, #28]
 800a61a:	e007      	b.n	800a62c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	699b      	ldr	r3, [r3, #24]
 800a622:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d011      	beq.n	800a65a <HAL_I2C_EV_IRQHandler+0x1ea>
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00c      	beq.n	800a65a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a650:	69b9      	ldr	r1, [r7, #24]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 ff1f 	bl	800b496 <I2C_Slave_ADDR>
 800a658:	e05a      	b.n	800a710 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	2b00      	cmp	r3, #0
 800a662:	d008      	beq.n	800a676 <HAL_I2C_EV_IRQHandler+0x206>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d003      	beq.n	800a676 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 ff5a 	bl	800b528 <I2C_Slave_STOPF>
 800a674:	e04c      	b.n	800a710 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a676:	7bbb      	ldrb	r3, [r7, #14]
 800a678:	2b21      	cmp	r3, #33	@ 0x21
 800a67a:	d002      	beq.n	800a682 <HAL_I2C_EV_IRQHandler+0x212>
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	2b29      	cmp	r3, #41	@ 0x29
 800a680:	d120      	bne.n	800a6c4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00d      	beq.n	800a6a8 <HAL_I2C_EV_IRQHandler+0x238>
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <HAL_I2C_EV_IRQHandler+0x238>
 800a696:	69fb      	ldr	r3, [r7, #28]
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d103      	bne.n	800a6a8 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fe3a 	bl	800b31a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a6a6:	e032      	b.n	800a70e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6a8:	69fb      	ldr	r3, [r7, #28]
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d02d      	beq.n	800a70e <HAL_I2C_EV_IRQHandler+0x29e>
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d028      	beq.n	800a70e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 fe69 	bl	800b394 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a6c2:	e024      	b.n	800a70e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00d      	beq.n	800a6ea <HAL_I2C_EV_IRQHandler+0x27a>
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d008      	beq.n	800a6ea <HAL_I2C_EV_IRQHandler+0x27a>
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	f003 0304 	and.w	r3, r3, #4
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d103      	bne.n	800a6ea <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 fe77 	bl	800b3d6 <I2C_SlaveReceive_RXNE>
 800a6e8:	e012      	b.n	800a710 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	f003 0304 	and.w	r3, r3, #4
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00d      	beq.n	800a710 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d008      	beq.n	800a710 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fea7 	bl	800b452 <I2C_SlaveReceive_BTF>
 800a704:	e004      	b.n	800a710 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a706:	bf00      	nop
 800a708:	e002      	b.n	800a710 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a70a:	bf00      	nop
 800a70c:	e000      	b.n	800a710 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a70e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a710:	3720      	adds	r7, #32
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a716:	b480      	push	{r7}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a72a:	b480      	push	{r7}
 800a72c:	b083      	sub	sp, #12
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a732:	bf00      	nop
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a73e:	b480      	push	{r7}
 800a740:	b083      	sub	sp, #12
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a746:	bf00      	nop
 800a748:	370c      	adds	r7, #12
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a752:	b480      	push	{r7}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	70fb      	strb	r3, [r7, #3]
 800a772:	4613      	mov	r3, r2
 800a774:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a776:	bf00      	nop
 800a778:	370c      	adds	r7, #12
 800a77a:	46bd      	mov	sp, r7
 800a77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a780:	4770      	bx	lr

0800a782 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a782:	b480      	push	{r7}
 800a784:	b083      	sub	sp, #12
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a78a:	bf00      	nop
 800a78c:	370c      	adds	r7, #12
 800a78e:	46bd      	mov	sp, r7
 800a790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a794:	4770      	bx	lr

0800a796 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a796:	b480      	push	{r7}
 800a798:	b083      	sub	sp, #12
 800a79a:	af00      	add	r7, sp, #0
 800a79c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a79e:	bf00      	nop
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a7aa:	b480      	push	{r7}
 800a7ac:	b083      	sub	sp, #12
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a7c6:	bf00      	nop
 800a7c8:	370c      	adds	r7, #12
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr

0800a7d2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a7e8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d150      	bne.n	800a89a <I2C_MasterTransmit_TXE+0xc8>
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	2b21      	cmp	r3, #33	@ 0x21
 800a7fc:	d14d      	bne.n	800a89a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b08      	cmp	r3, #8
 800a802:	d01d      	beq.n	800a840 <I2C_MasterTransmit_TXE+0x6e>
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2b20      	cmp	r3, #32
 800a808:	d01a      	beq.n	800a840 <I2C_MasterTransmit_TXE+0x6e>
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a810:	d016      	beq.n	800a840 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685a      	ldr	r2, [r3, #4]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a820:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2211      	movs	r2, #17
 800a826:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2220      	movs	r2, #32
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff ff6c 	bl	800a716 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a83e:	e060      	b.n	800a902 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a84e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a85e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2220      	movs	r2, #32
 800a86a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b40      	cmp	r3, #64	@ 0x40
 800a878:	d107      	bne.n	800a88a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7ff ff87 	bl	800a796 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a888:	e03b      	b.n	800a902 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f7ff ff3f 	bl	800a716 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a898:	e033      	b.n	800a902 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a89a:	7bfb      	ldrb	r3, [r7, #15]
 800a89c:	2b21      	cmp	r3, #33	@ 0x21
 800a89e:	d005      	beq.n	800a8ac <I2C_MasterTransmit_TXE+0xda>
 800a8a0:	7bbb      	ldrb	r3, [r7, #14]
 800a8a2:	2b40      	cmp	r3, #64	@ 0x40
 800a8a4:	d12d      	bne.n	800a902 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
 800a8a8:	2b22      	cmp	r3, #34	@ 0x22
 800a8aa:	d12a      	bne.n	800a902 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d108      	bne.n	800a8c8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8c4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a8c6:	e01c      	b.n	800a902 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8ce:	b2db      	uxtb	r3, r3
 800a8d0:	2b40      	cmp	r3, #64	@ 0x40
 800a8d2:	d103      	bne.n	800a8dc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 f88e 	bl	800a9f6 <I2C_MemoryTransmit_TXE_BTF>
}
 800a8da:	e012      	b.n	800a902 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ec:	1c5a      	adds	r2, r3, #1
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a900:	e7ff      	b.n	800a902 <I2C_MasterTransmit_TXE+0x130>
 800a902:	bf00      	nop
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}

0800a90a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a90a:	b580      	push	{r7, lr}
 800a90c:	b084      	sub	sp, #16
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a916:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b21      	cmp	r3, #33	@ 0x21
 800a922:	d164      	bne.n	800a9ee <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a928:	b29b      	uxth	r3, r3
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d012      	beq.n	800a954 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a932:	781a      	ldrb	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93e:	1c5a      	adds	r2, r3, #1
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a948:	b29b      	uxth	r3, r3
 800a94a:	3b01      	subs	r3, #1
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a952:	e04c      	b.n	800a9ee <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b08      	cmp	r3, #8
 800a958:	d01d      	beq.n	800a996 <I2C_MasterTransmit_BTF+0x8c>
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2b20      	cmp	r3, #32
 800a95e:	d01a      	beq.n	800a996 <I2C_MasterTransmit_BTF+0x8c>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a966:	d016      	beq.n	800a996 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a976:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2211      	movs	r2, #17
 800a97c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2200      	movs	r2, #0
 800a982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2220      	movs	r2, #32
 800a98a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fec1 	bl	800a716 <HAL_I2C_MasterTxCpltCallback>
}
 800a994:	e02b      	b.n	800a9ee <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685a      	ldr	r2, [r3, #4]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a9a4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9b4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2220      	movs	r2, #32
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	2b40      	cmp	r3, #64	@ 0x40
 800a9ce:	d107      	bne.n	800a9e0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f7ff fedc 	bl	800a796 <HAL_I2C_MemTxCpltCallback>
}
 800a9de:	e006      	b.n	800a9ee <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f7ff fe94 	bl	800a716 <HAL_I2C_MasterTxCpltCallback>
}
 800a9ee:	bf00      	nop
 800a9f0:	3710      	adds	r7, #16
 800a9f2:	46bd      	mov	sp, r7
 800a9f4:	bd80      	pop	{r7, pc}

0800a9f6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a9f6:	b580      	push	{r7, lr}
 800a9f8:	b084      	sub	sp, #16
 800a9fa:	af00      	add	r7, sp, #0
 800a9fc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d11d      	bne.n	800aa4a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d10b      	bne.n	800aa2e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa1a:	b2da      	uxtb	r2, r3
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa26:	1c9a      	adds	r2, r3, #2
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800aa2c:	e077      	b.n	800ab1e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	121b      	asrs	r3, r3, #8
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa42:	1c5a      	adds	r2, r3, #1
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800aa48:	e069      	b.n	800ab1e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d10b      	bne.n	800aa6a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aa56:	b2da      	uxtb	r2, r3
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa62:	1c5a      	adds	r2, r3, #1
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800aa68:	e059      	b.n	800ab1e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d152      	bne.n	800ab18 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800aa72:	7bfb      	ldrb	r3, [r7, #15]
 800aa74:	2b22      	cmp	r3, #34	@ 0x22
 800aa76:	d10d      	bne.n	800aa94 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa86:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa8c:	1c5a      	adds	r2, r3, #1
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800aa92:	e044      	b.n	800ab1e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d015      	beq.n	800aaca <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800aa9e:	7bfb      	ldrb	r3, [r7, #15]
 800aaa0:	2b21      	cmp	r3, #33	@ 0x21
 800aaa2:	d112      	bne.n	800aaca <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa8:	781a      	ldrb	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	3b01      	subs	r3, #1
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800aac8:	e029      	b.n	800ab1e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aace:	b29b      	uxth	r3, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d124      	bne.n	800ab1e <I2C_MemoryTransmit_TXE_BTF+0x128>
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	2b21      	cmp	r3, #33	@ 0x21
 800aad8:	d121      	bne.n	800ab1e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aae8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aaf8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2220      	movs	r2, #32
 800ab04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f7ff fe40 	bl	800a796 <HAL_I2C_MemTxCpltCallback>
}
 800ab16:	e002      	b.n	800ab1e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f7fe ffd8 	bl	8009ace <I2C_Flush_DR>
}
 800ab1e:	bf00      	nop
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}

0800ab26 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800ab26:	b580      	push	{r7, lr}
 800ab28:	b084      	sub	sp, #16
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b22      	cmp	r3, #34	@ 0x22
 800ab38:	f040 80b9 	bne.w	800acae <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab40:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b03      	cmp	r3, #3
 800ab4e:	d921      	bls.n	800ab94 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	691a      	ldr	r2, [r3, #16]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5a:	b2d2      	uxtb	r2, r2
 800ab5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab62:	1c5a      	adds	r2, r3, #1
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	3b01      	subs	r3, #1
 800ab70:	b29a      	uxth	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	f040 8096 	bne.w	800acae <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	685a      	ldr	r2, [r3, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab90:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800ab92:	e08c      	b.n	800acae <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d07f      	beq.n	800ac9c <I2C_MasterReceive_RXNE+0x176>
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d002      	beq.n	800aba8 <I2C_MasterReceive_RXNE+0x82>
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d179      	bne.n	800ac9c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f001 fc0b 	bl	800c3c4 <I2C_WaitOnSTOPRequestThroughIT>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d14c      	bne.n	800ac4e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abc2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685a      	ldr	r2, [r3, #4]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800abd2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	691a      	ldr	r2, [r3, #16]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abde:	b2d2      	uxtb	r2, r2
 800abe0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe6:	1c5a      	adds	r2, r3, #1
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abf0:	b29b      	uxth	r3, r3
 800abf2:	3b01      	subs	r3, #1
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2220      	movs	r2, #32
 800abfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b40      	cmp	r3, #64	@ 0x40
 800ac0c:	d10a      	bne.n	800ac24 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7fa ff6d 	bl	8005afc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ac22:	e044      	b.n	800acae <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2b08      	cmp	r3, #8
 800ac30:	d002      	beq.n	800ac38 <I2C_MasterReceive_RXNE+0x112>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b20      	cmp	r3, #32
 800ac36:	d103      	bne.n	800ac40 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac3e:	e002      	b.n	800ac46 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2212      	movs	r2, #18
 800ac44:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff fd6f 	bl	800a72a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ac4c:	e02f      	b.n	800acae <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	685a      	ldr	r2, [r3, #4]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ac5c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	691a      	ldr	r2, [r3, #16]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac68:	b2d2      	uxtb	r2, r2
 800ac6a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2220      	movs	r2, #32
 800ac88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7ff fd88 	bl	800a7aa <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ac9a:	e008      	b.n	800acae <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	685a      	ldr	r2, [r3, #4]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acaa:	605a      	str	r2, [r3, #4]
}
 800acac:	e7ff      	b.n	800acae <I2C_MasterReceive_RXNE+0x188>
 800acae:	bf00      	nop
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acc8:	b29b      	uxth	r3, r3
 800acca:	2b04      	cmp	r3, #4
 800accc:	d11b      	bne.n	800ad06 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	685a      	ldr	r2, [r3, #4]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800acdc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	691a      	ldr	r2, [r3, #16]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace8:	b2d2      	uxtb	r2, r2
 800acea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acf0:	1c5a      	adds	r2, r3, #1
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	3b01      	subs	r3, #1
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800ad04:	e0c4      	b.n	800ae90 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	2b03      	cmp	r3, #3
 800ad0e:	d129      	bne.n	800ad64 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad1e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d00a      	beq.n	800ad3c <I2C_MasterReceive_BTF+0x86>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	d007      	beq.n	800ad3c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad3a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	691a      	ldr	r2, [r3, #16]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad46:	b2d2      	uxtb	r2, r2
 800ad48:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad4e:	1c5a      	adds	r2, r3, #1
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ad62:	e095      	b.n	800ae90 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d17d      	bne.n	800ae6a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d002      	beq.n	800ad7a <I2C_MasterReceive_BTF+0xc4>
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2b10      	cmp	r3, #16
 800ad78:	d108      	bne.n	800ad8c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad88:	601a      	str	r2, [r3, #0]
 800ad8a:	e016      	b.n	800adba <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d002      	beq.n	800ad98 <I2C_MasterReceive_BTF+0xe2>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2b02      	cmp	r3, #2
 800ad96:	d108      	bne.n	800adaa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	e007      	b.n	800adba <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adb8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	691a      	ldr	r2, [r3, #16]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adc4:	b2d2      	uxtb	r2, r2
 800adc6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adcc:	1c5a      	adds	r2, r3, #1
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800add6:	b29b      	uxth	r3, r3
 800add8:	3b01      	subs	r3, #1
 800adda:	b29a      	uxth	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	691a      	ldr	r2, [r3, #16]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adea:	b2d2      	uxtb	r2, r2
 800adec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	3b01      	subs	r3, #1
 800ae00:	b29a      	uxth	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ae14:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2220      	movs	r2, #32
 800ae1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b40      	cmp	r3, #64	@ 0x40
 800ae28:	d10a      	bne.n	800ae40 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7fa fe5f 	bl	8005afc <HAL_I2C_MemRxCpltCallback>
}
 800ae3e:	e027      	b.n	800ae90 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b08      	cmp	r3, #8
 800ae4c:	d002      	beq.n	800ae54 <I2C_MasterReceive_BTF+0x19e>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b20      	cmp	r3, #32
 800ae52:	d103      	bne.n	800ae5c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae5a:	e002      	b.n	800ae62 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2212      	movs	r2, #18
 800ae60:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f7ff fc61 	bl	800a72a <HAL_I2C_MasterRxCpltCallback>
}
 800ae68:	e012      	b.n	800ae90 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	691a      	ldr	r2, [r3, #16]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae74:	b2d2      	uxtb	r2, r2
 800ae76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae7c:	1c5a      	adds	r2, r3, #1
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ae90:	bf00      	nop
 800ae92:	3710      	adds	r7, #16
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b083      	sub	sp, #12
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aea6:	b2db      	uxtb	r3, r3
 800aea8:	2b40      	cmp	r3, #64	@ 0x40
 800aeaa:	d117      	bne.n	800aedc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d109      	bne.n	800aec8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	461a      	mov	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800aec4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800aec6:	e067      	b.n	800af98 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	f043 0301 	orr.w	r3, r3, #1
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	611a      	str	r2, [r3, #16]
}
 800aeda:	e05d      	b.n	800af98 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aee4:	d133      	bne.n	800af4e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b21      	cmp	r3, #33	@ 0x21
 800aef0:	d109      	bne.n	800af06 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	461a      	mov	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800af02:	611a      	str	r2, [r3, #16]
 800af04:	e008      	b.n	800af18 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	f043 0301 	orr.w	r3, r3, #1
 800af10:	b2da      	uxtb	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d004      	beq.n	800af2a <I2C_Master_SB+0x92>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af26:	2b00      	cmp	r3, #0
 800af28:	d108      	bne.n	800af3c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d032      	beq.n	800af98 <I2C_Master_SB+0x100>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d02d      	beq.n	800af98 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af4a:	605a      	str	r2, [r3, #4]
}
 800af4c:	e024      	b.n	800af98 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af52:	2b00      	cmp	r3, #0
 800af54:	d10e      	bne.n	800af74 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	11db      	asrs	r3, r3, #7
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	f003 0306 	and.w	r3, r3, #6
 800af64:	b2db      	uxtb	r3, r3
 800af66:	f063 030f 	orn	r3, r3, #15
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	611a      	str	r2, [r3, #16]
}
 800af72:	e011      	b.n	800af98 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d10d      	bne.n	800af98 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af80:	b29b      	uxth	r3, r3
 800af82:	11db      	asrs	r3, r3, #7
 800af84:	b2db      	uxtb	r3, r3
 800af86:	f003 0306 	and.w	r3, r3, #6
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	f063 030e 	orn	r3, r3, #14
 800af90:	b2da      	uxtb	r2, r3
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	611a      	str	r2, [r3, #16]
}
 800af98:	bf00      	nop
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr

0800afa4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afb0:	b2da      	uxtb	r2, r3
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <I2C_Master_ADD10+0x26>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800afc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d108      	bne.n	800afdc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d00c      	beq.n	800afec <I2C_Master_ADD10+0x48>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d007      	beq.n	800afec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	685a      	ldr	r2, [r3, #4]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afea:	605a      	str	r2, [r3, #4]
  }
}
 800afec:	bf00      	nop
 800afee:	370c      	adds	r7, #12
 800aff0:	46bd      	mov	sp, r7
 800aff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff6:	4770      	bx	lr

0800aff8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800aff8:	b480      	push	{r7}
 800affa:	b091      	sub	sp, #68	@ 0x44
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b006:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b014:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b22      	cmp	r3, #34	@ 0x22
 800b020:	f040 8169 	bne.w	800b2f6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d10f      	bne.n	800b04c <I2C_Master_ADDR+0x54>
 800b02c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b030:	2b40      	cmp	r3, #64	@ 0x40
 800b032:	d10b      	bne.n	800b04c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b034:	2300      	movs	r3, #0
 800b036:	633b      	str	r3, [r7, #48]	@ 0x30
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	699b      	ldr	r3, [r3, #24]
 800b046:	633b      	str	r3, [r7, #48]	@ 0x30
 800b048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04a:	e160      	b.n	800b30e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b050:	2b00      	cmp	r3, #0
 800b052:	d11d      	bne.n	800b090 <I2C_Master_ADDR+0x98>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b05c:	d118      	bne.n	800b090 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b05e:	2300      	movs	r3, #0
 800b060:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	699b      	ldr	r3, [r3, #24]
 800b070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b082:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b088:	1c5a      	adds	r2, r3, #1
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	651a      	str	r2, [r3, #80]	@ 0x50
 800b08e:	e13e      	b.n	800b30e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b094:	b29b      	uxth	r3, r3
 800b096:	2b00      	cmp	r3, #0
 800b098:	d113      	bne.n	800b0c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b09a:	2300      	movs	r3, #0
 800b09c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b0ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0be:	601a      	str	r2, [r3, #0]
 800b0c0:	e115      	b.n	800b2ee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	f040 808a 	bne.w	800b1e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b0d4:	d137      	bne.n	800b146 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b0f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b0f4:	d113      	bne.n	800b11e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b104:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b106:	2300      	movs	r3, #0
 800b108:	627b      	str	r3, [r7, #36]	@ 0x24
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	695b      	ldr	r3, [r3, #20]
 800b110:	627b      	str	r3, [r7, #36]	@ 0x24
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	627b      	str	r3, [r7, #36]	@ 0x24
 800b11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11c:	e0e7      	b.n	800b2ee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b11e:	2300      	movs	r3, #0
 800b120:	623b      	str	r3, [r7, #32]
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	623b      	str	r3, [r7, #32]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	699b      	ldr	r3, [r3, #24]
 800b130:	623b      	str	r3, [r7, #32]
 800b132:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b142:	601a      	str	r2, [r3, #0]
 800b144:	e0d3      	b.n	800b2ee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b148:	2b08      	cmp	r3, #8
 800b14a:	d02e      	beq.n	800b1aa <I2C_Master_ADDR+0x1b2>
 800b14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14e:	2b20      	cmp	r3, #32
 800b150:	d02b      	beq.n	800b1aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b154:	2b12      	cmp	r3, #18
 800b156:	d102      	bne.n	800b15e <I2C_Master_ADDR+0x166>
 800b158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d125      	bne.n	800b1aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b160:	2b04      	cmp	r3, #4
 800b162:	d00e      	beq.n	800b182 <I2C_Master_ADDR+0x18a>
 800b164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b166:	2b02      	cmp	r3, #2
 800b168:	d00b      	beq.n	800b182 <I2C_Master_ADDR+0x18a>
 800b16a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16c:	2b10      	cmp	r3, #16
 800b16e:	d008      	beq.n	800b182 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	e007      	b.n	800b192 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b190:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b192:	2300      	movs	r3, #0
 800b194:	61fb      	str	r3, [r7, #28]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	695b      	ldr	r3, [r3, #20]
 800b19c:	61fb      	str	r3, [r7, #28]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	699b      	ldr	r3, [r3, #24]
 800b1a4:	61fb      	str	r3, [r7, #28]
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	e0a1      	b.n	800b2ee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	61bb      	str	r3, [r7, #24]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	695b      	ldr	r3, [r3, #20]
 800b1c4:	61bb      	str	r3, [r7, #24]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	61bb      	str	r3, [r7, #24]
 800b1ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	681a      	ldr	r2, [r3, #0]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1de:	601a      	str	r2, [r3, #0]
 800b1e0:	e085      	b.n	800b2ee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	2b02      	cmp	r3, #2
 800b1ea:	d14d      	bne.n	800b288 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	d016      	beq.n	800b220 <I2C_Master_ADDR+0x228>
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f4:	2b02      	cmp	r3, #2
 800b1f6:	d013      	beq.n	800b220 <I2C_Master_ADDR+0x228>
 800b1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fa:	2b10      	cmp	r3, #16
 800b1fc:	d010      	beq.n	800b220 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	681a      	ldr	r2, [r3, #0]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b20c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b21c:	601a      	str	r2, [r3, #0]
 800b21e:	e007      	b.n	800b230 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b22e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	685b      	ldr	r3, [r3, #4]
 800b236:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b23a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b23e:	d117      	bne.n	800b270 <I2C_Master_ADDR+0x278>
 800b240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b242:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b246:	d00b      	beq.n	800b260 <I2C_Master_ADDR+0x268>
 800b248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d008      	beq.n	800b260 <I2C_Master_ADDR+0x268>
 800b24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b250:	2b08      	cmp	r3, #8
 800b252:	d005      	beq.n	800b260 <I2C_Master_ADDR+0x268>
 800b254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b256:	2b10      	cmp	r3, #16
 800b258:	d002      	beq.n	800b260 <I2C_Master_ADDR+0x268>
 800b25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25c:	2b20      	cmp	r3, #32
 800b25e:	d107      	bne.n	800b270 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685a      	ldr	r2, [r3, #4]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b26e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b270:	2300      	movs	r3, #0
 800b272:	617b      	str	r3, [r7, #20]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	695b      	ldr	r3, [r3, #20]
 800b27a:	617b      	str	r3, [r7, #20]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	699b      	ldr	r3, [r3, #24]
 800b282:	617b      	str	r3, [r7, #20]
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	e032      	b.n	800b2ee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b296:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b2a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2a6:	d117      	bne.n	800b2d8 <I2C_Master_ADDR+0x2e0>
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b2ae:	d00b      	beq.n	800b2c8 <I2C_Master_ADDR+0x2d0>
 800b2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d008      	beq.n	800b2c8 <I2C_Master_ADDR+0x2d0>
 800b2b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	d005      	beq.n	800b2c8 <I2C_Master_ADDR+0x2d0>
 800b2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2be:	2b10      	cmp	r3, #16
 800b2c0:	d002      	beq.n	800b2c8 <I2C_Master_ADDR+0x2d0>
 800b2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c4:	2b20      	cmp	r3, #32
 800b2c6:	d107      	bne.n	800b2d8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685a      	ldr	r2, [r3, #4]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b2d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2d8:	2300      	movs	r3, #0
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	695b      	ldr	r3, [r3, #20]
 800b2e2:	613b      	str	r3, [r7, #16]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b2f4:	e00b      	b.n	800b30e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	695b      	ldr	r3, [r3, #20]
 800b300:	60fb      	str	r3, [r7, #12]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	60fb      	str	r3, [r7, #12]
 800b30a:	68fb      	ldr	r3, [r7, #12]
}
 800b30c:	e7ff      	b.n	800b30e <I2C_Master_ADDR+0x316>
 800b30e:	bf00      	nop
 800b310:	3744      	adds	r7, #68	@ 0x44
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b084      	sub	sp, #16
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b328:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b32e:	b29b      	uxth	r3, r3
 800b330:	2b00      	cmp	r3, #0
 800b332:	d02b      	beq.n	800b38c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b338:	781a      	ldrb	r2, [r3, #0]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b34e:	b29b      	uxth	r3, r3
 800b350:	3b01      	subs	r3, #1
 800b352:	b29a      	uxth	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d114      	bne.n	800b38c <I2C_SlaveTransmit_TXE+0x72>
 800b362:	7bfb      	ldrb	r3, [r7, #15]
 800b364:	2b29      	cmp	r3, #41	@ 0x29
 800b366:	d111      	bne.n	800b38c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	685a      	ldr	r2, [r3, #4]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b376:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2221      	movs	r2, #33	@ 0x21
 800b37c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2228      	movs	r2, #40	@ 0x28
 800b382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f7ff f9d9 	bl	800a73e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b38c:	bf00      	nop
 800b38e:	3710      	adds	r7, #16
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d011      	beq.n	800b3ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3aa:	781a      	ldrb	r2, [r3, #0]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	1c5a      	adds	r2, r3, #1
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	3b01      	subs	r3, #1
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ea:	b29b      	uxth	r3, r3
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d02c      	beq.n	800b44a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	691a      	ldr	r2, [r3, #16]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fa:	b2d2      	uxtb	r2, r2
 800b3fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b402:	1c5a      	adds	r2, r3, #1
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	3b01      	subs	r3, #1
 800b410:	b29a      	uxth	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d114      	bne.n	800b44a <I2C_SlaveReceive_RXNE+0x74>
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	2b2a      	cmp	r3, #42	@ 0x2a
 800b424:	d111      	bne.n	800b44a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	685a      	ldr	r2, [r3, #4]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b434:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2222      	movs	r2, #34	@ 0x22
 800b43a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2228      	movs	r2, #40	@ 0x28
 800b440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f7ff f984 	bl	800a752 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b44a:	bf00      	nop
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b452:	b480      	push	{r7}
 800b454:	b083      	sub	sp, #12
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b45e:	b29b      	uxth	r3, r3
 800b460:	2b00      	cmp	r3, #0
 800b462:	d012      	beq.n	800b48a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	691a      	ldr	r2, [r3, #16]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46e:	b2d2      	uxtb	r2, r2
 800b470:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b480:	b29b      	uxth	r3, r3
 800b482:	3b01      	subs	r3, #1
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b48a:	bf00      	nop
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b4b0:	2b28      	cmp	r3, #40	@ 0x28
 800b4b2:	d125      	bne.n	800b500 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b4c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	f003 0304 	and.w	r3, r3, #4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d103      	bne.n	800b4e4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	81bb      	strh	r3, [r7, #12]
 800b4e2:	e002      	b.n	800b4ea <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	699b      	ldr	r3, [r3, #24]
 800b4e8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b4f2:	89ba      	ldrh	r2, [r7, #12]
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7ff f934 	bl	800a766 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b4fe:	e00e      	b.n	800b51e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b500:	2300      	movs	r3, #0
 800b502:	60bb      	str	r3, [r7, #8]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	60bb      	str	r3, [r7, #8]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	60bb      	str	r3, [r7, #8]
 800b514:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b51e:	bf00      	nop
 800b520:	3710      	adds	r7, #16
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
	...

0800b528 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b536:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b546:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b548:	2300      	movs	r3, #0
 800b54a:	60bb      	str	r3, [r7, #8]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	695b      	ldr	r3, [r3, #20]
 800b552:	60bb      	str	r3, [r7, #8]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f042 0201 	orr.w	r2, r2, #1
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b574:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b584:	d172      	bne.n	800b66c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b586:	7bfb      	ldrb	r3, [r7, #15]
 800b588:	2b22      	cmp	r3, #34	@ 0x22
 800b58a:	d002      	beq.n	800b592 <I2C_Slave_STOPF+0x6a>
 800b58c:	7bfb      	ldrb	r3, [r7, #15]
 800b58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b590:	d135      	bne.n	800b5fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d005      	beq.n	800b5b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ae:	f043 0204 	orr.w	r2, r3, #4
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	685a      	ldr	r2, [r3, #4]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b5c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fd fd58 	bl	8009080 <HAL_DMA_GetState>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d049      	beq.n	800b66a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5da:	4a69      	ldr	r2, [pc, #420]	@ (800b780 <I2C_Slave_STOPF+0x258>)
 800b5dc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	f7fd fba0 	bl	8008d28 <HAL_DMA_Abort_IT>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d03d      	beq.n	800b66a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b5fc:	e035      	b.n	800b66a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	b29a      	uxth	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b610:	b29b      	uxth	r3, r3
 800b612:	2b00      	cmp	r3, #0
 800b614:	d005      	beq.n	800b622 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b61a:	f043 0204 	orr.w	r2, r3, #4
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	685a      	ldr	r2, [r3, #4]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b630:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b636:	4618      	mov	r0, r3
 800b638:	f7fd fd22 	bl	8009080 <HAL_DMA_GetState>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d014      	beq.n	800b66c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b646:	4a4e      	ldr	r2, [pc, #312]	@ (800b780 <I2C_Slave_STOPF+0x258>)
 800b648:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b64e:	4618      	mov	r0, r3
 800b650:	f7fd fb6a 	bl	8008d28 <HAL_DMA_Abort_IT>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d008      	beq.n	800b66c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b65e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b664:	4610      	mov	r0, r2
 800b666:	4798      	blx	r3
 800b668:	e000      	b.n	800b66c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b66a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b670:	b29b      	uxth	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d03e      	beq.n	800b6f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	695b      	ldr	r3, [r3, #20]
 800b67c:	f003 0304 	and.w	r3, r3, #4
 800b680:	2b04      	cmp	r3, #4
 800b682:	d112      	bne.n	800b6aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	691a      	ldr	r2, [r3, #16]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b696:	1c5a      	adds	r2, r3, #1
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	3b01      	subs	r3, #1
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6b4:	2b40      	cmp	r3, #64	@ 0x40
 800b6b6:	d112      	bne.n	800b6de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	691a      	ldr	r2, [r3, #16]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ca:	1c5a      	adds	r2, r3, #1
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	3b01      	subs	r3, #1
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d005      	beq.n	800b6f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ec:	f043 0204 	orr.w	r2, r3, #4
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f843 	bl	800b788 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b702:	e039      	b.n	800b778 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b704:	7bfb      	ldrb	r3, [r7, #15]
 800b706:	2b2a      	cmp	r3, #42	@ 0x2a
 800b708:	d109      	bne.n	800b71e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2228      	movs	r2, #40	@ 0x28
 800b714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f7ff f81a 	bl	800a752 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b724:	b2db      	uxtb	r3, r3
 800b726:	2b28      	cmp	r3, #40	@ 0x28
 800b728:	d111      	bne.n	800b74e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a15      	ldr	r2, [pc, #84]	@ (800b784 <I2C_Slave_STOPF+0x25c>)
 800b72e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2220      	movs	r2, #32
 800b73a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7ff f81b 	bl	800a782 <HAL_I2C_ListenCpltCallback>
}
 800b74c:	e014      	b.n	800b778 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b752:	2b22      	cmp	r3, #34	@ 0x22
 800b754:	d002      	beq.n	800b75c <I2C_Slave_STOPF+0x234>
 800b756:	7bfb      	ldrb	r3, [r7, #15]
 800b758:	2b22      	cmp	r3, #34	@ 0x22
 800b75a:	d10d      	bne.n	800b778 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2220      	movs	r2, #32
 800b766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2200      	movs	r2, #0
 800b76e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7fe ffed 	bl	800a752 <HAL_I2C_SlaveRxCpltCallback>
}
 800b778:	bf00      	nop
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}
 800b780:	0800bf21 	.word	0x0800bf21
 800b784:	ffff0000 	.word	0xffff0000

0800b788 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b796:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b79e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
 800b7a2:	2b10      	cmp	r3, #16
 800b7a4:	d002      	beq.n	800b7ac <I2C_ITError+0x24>
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
 800b7a8:	2b40      	cmp	r3, #64	@ 0x40
 800b7aa:	d10a      	bne.n	800b7c2 <I2C_ITError+0x3a>
 800b7ac:	7bfb      	ldrb	r3, [r7, #15]
 800b7ae:	2b22      	cmp	r3, #34	@ 0x22
 800b7b0:	d107      	bne.n	800b7c2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b7c0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
 800b7c4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b7c8:	2b28      	cmp	r3, #40	@ 0x28
 800b7ca:	d107      	bne.n	800b7dc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2228      	movs	r2, #40	@ 0x28
 800b7d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b7da:	e015      	b.n	800b808 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b7ea:	d00a      	beq.n	800b802 <I2C_ITError+0x7a>
 800b7ec:	7bfb      	ldrb	r3, [r7, #15]
 800b7ee:	2b60      	cmp	r3, #96	@ 0x60
 800b7f0:	d007      	beq.n	800b802 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2220      	movs	r2, #32
 800b7f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b816:	d162      	bne.n	800b8de <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	685a      	ldr	r2, [r3, #4]
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b826:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b82c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b01      	cmp	r3, #1
 800b834:	d020      	beq.n	800b878 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b83a:	4a6a      	ldr	r2, [pc, #424]	@ (800b9e4 <I2C_ITError+0x25c>)
 800b83c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b842:	4618      	mov	r0, r3
 800b844:	f7fd fa70 	bl	8008d28 <HAL_DMA_Abort_IT>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	f000 8089 	beq.w	800b962 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f022 0201 	bic.w	r2, r2, #1
 800b85e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2220      	movs	r2, #32
 800b864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b86c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b872:	4610      	mov	r0, r2
 800b874:	4798      	blx	r3
 800b876:	e074      	b.n	800b962 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b87c:	4a59      	ldr	r2, [pc, #356]	@ (800b9e4 <I2C_ITError+0x25c>)
 800b87e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b884:	4618      	mov	r0, r3
 800b886:	f7fd fa4f 	bl	8008d28 <HAL_DMA_Abort_IT>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d068      	beq.n	800b962 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b89a:	2b40      	cmp	r3, #64	@ 0x40
 800b89c:	d10b      	bne.n	800b8b6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	691a      	ldr	r2, [r3, #16]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a8:	b2d2      	uxtb	r2, r2
 800b8aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b0:	1c5a      	adds	r2, r3, #1
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f022 0201 	bic.w	r2, r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2220      	movs	r2, #32
 800b8ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4798      	blx	r3
 800b8dc:	e041      	b.n	800b962 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8e4:	b2db      	uxtb	r3, r3
 800b8e6:	2b60      	cmp	r3, #96	@ 0x60
 800b8e8:	d125      	bne.n	800b936 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2220      	movs	r2, #32
 800b8ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b902:	2b40      	cmp	r3, #64	@ 0x40
 800b904:	d10b      	bne.n	800b91e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	691a      	ldr	r2, [r3, #16]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b910:	b2d2      	uxtb	r2, r2
 800b912:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f022 0201 	bic.w	r2, r2, #1
 800b92c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7fe ff45 	bl	800a7be <HAL_I2C_AbortCpltCallback>
 800b934:	e015      	b.n	800b962 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b940:	2b40      	cmp	r3, #64	@ 0x40
 800b942:	d10b      	bne.n	800b95c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	691a      	ldr	r2, [r3, #16]
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b94e:	b2d2      	uxtb	r2, r2
 800b950:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b956:	1c5a      	adds	r2, r3, #1
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f7fe ff24 	bl	800a7aa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b966:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10e      	bne.n	800b990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d109      	bne.n	800b990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b982:	2b00      	cmp	r3, #0
 800b984:	d104      	bne.n	800b990 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d007      	beq.n	800b9a0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	685a      	ldr	r2, [r3, #4]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b99e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9a6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b04      	cmp	r3, #4
 800b9b2:	d113      	bne.n	800b9dc <I2C_ITError+0x254>
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	2b28      	cmp	r3, #40	@ 0x28
 800b9b8:	d110      	bne.n	800b9dc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b9e8 <I2C_ITError+0x260>)
 800b9be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2220      	movs	r2, #32
 800b9ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f7fe fed3 	bl	800a782 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b9dc:	bf00      	nop
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	0800bf21 	.word	0x0800bf21
 800b9e8:	ffff0000 	.word	0xffff0000

0800b9ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b088      	sub	sp, #32
 800b9f0:	af02      	add	r7, sp, #8
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	4608      	mov	r0, r1
 800b9f6:	4611      	mov	r1, r2
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	817b      	strh	r3, [r7, #10]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	813b      	strh	r3, [r7, #8]
 800ba02:	4613      	mov	r3, r2
 800ba04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	6a3b      	ldr	r3, [r7, #32]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 fb24 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00d      	beq.n	800ba4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba3c:	d103      	bne.n	800ba46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ba46:	2303      	movs	r3, #3
 800ba48:	e05f      	b.n	800bb0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ba4a:	897b      	ldrh	r3, [r7, #10]
 800ba4c:	b2db      	uxtb	r3, r3
 800ba4e:	461a      	mov	r2, r3
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ba58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	6a3a      	ldr	r2, [r7, #32]
 800ba5e:	492d      	ldr	r1, [pc, #180]	@ (800bb14 <I2C_RequestMemoryWrite+0x128>)
 800ba60:	68f8      	ldr	r0, [r7, #12]
 800ba62:	f000 fb7f 	bl	800c164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d001      	beq.n	800ba70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	e04c      	b.n	800bb0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba70:	2300      	movs	r3, #0
 800ba72:	617b      	str	r3, [r7, #20]
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	695b      	ldr	r3, [r3, #20]
 800ba7a:	617b      	str	r3, [r7, #20]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	699b      	ldr	r3, [r3, #24]
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba88:	6a39      	ldr	r1, [r7, #32]
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f000 fc0a 	bl	800c2a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00d      	beq.n	800bab2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba9a:	2b04      	cmp	r3, #4
 800ba9c:	d107      	bne.n	800baae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800baac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e02b      	b.n	800bb0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bab2:	88fb      	ldrh	r3, [r7, #6]
 800bab4:	2b01      	cmp	r3, #1
 800bab6:	d105      	bne.n	800bac4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bab8:	893b      	ldrh	r3, [r7, #8]
 800baba:	b2da      	uxtb	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	611a      	str	r2, [r3, #16]
 800bac2:	e021      	b.n	800bb08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bac4:	893b      	ldrh	r3, [r7, #8]
 800bac6:	0a1b      	lsrs	r3, r3, #8
 800bac8:	b29b      	uxth	r3, r3
 800baca:	b2da      	uxtb	r2, r3
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bad4:	6a39      	ldr	r1, [r7, #32]
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f000 fbe4 	bl	800c2a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00d      	beq.n	800bafe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae6:	2b04      	cmp	r3, #4
 800bae8:	d107      	bne.n	800bafa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800baf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bafa:	2301      	movs	r3, #1
 800bafc:	e005      	b.n	800bb0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bafe:	893b      	ldrh	r3, [r7, #8]
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3718      	adds	r7, #24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	00010002 	.word	0x00010002

0800bb18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b088      	sub	sp, #32
 800bb1c:	af02      	add	r7, sp, #8
 800bb1e:	60f8      	str	r0, [r7, #12]
 800bb20:	4608      	mov	r0, r1
 800bb22:	4611      	mov	r1, r2
 800bb24:	461a      	mov	r2, r3
 800bb26:	4603      	mov	r3, r0
 800bb28:	817b      	strh	r3, [r7, #10]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	813b      	strh	r3, [r7, #8]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bb40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681a      	ldr	r2, [r3, #0]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 fa86 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00d      	beq.n	800bb86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb78:	d103      	bne.n	800bb82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bb82:	2303      	movs	r3, #3
 800bb84:	e0aa      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bb86:	897b      	ldrh	r3, [r7, #10]
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bb94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb98:	6a3a      	ldr	r2, [r7, #32]
 800bb9a:	4952      	ldr	r1, [pc, #328]	@ (800bce4 <I2C_RequestMemoryRead+0x1cc>)
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 fae1 	bl	800c164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bba2:	4603      	mov	r3, r0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	e097      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bbac:	2300      	movs	r3, #0
 800bbae:	617b      	str	r3, [r7, #20]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	695b      	ldr	r3, [r3, #20]
 800bbb6:	617b      	str	r3, [r7, #20]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	617b      	str	r3, [r7, #20]
 800bbc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bbc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbc4:	6a39      	ldr	r1, [r7, #32]
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 fb6c 	bl	800c2a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00d      	beq.n	800bbee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbd6:	2b04      	cmp	r3, #4
 800bbd8:	d107      	bne.n	800bbea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bbe8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bbea:	2301      	movs	r3, #1
 800bbec:	e076      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bbee:	88fb      	ldrh	r3, [r7, #6]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d105      	bne.n	800bc00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bbf4:	893b      	ldrh	r3, [r7, #8]
 800bbf6:	b2da      	uxtb	r2, r3
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	611a      	str	r2, [r3, #16]
 800bbfe:	e021      	b.n	800bc44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bc00:	893b      	ldrh	r3, [r7, #8]
 800bc02:	0a1b      	lsrs	r3, r3, #8
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc10:	6a39      	ldr	r1, [r7, #32]
 800bc12:	68f8      	ldr	r0, [r7, #12]
 800bc14:	f000 fb46 	bl	800c2a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d00d      	beq.n	800bc3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc22:	2b04      	cmp	r3, #4
 800bc24:	d107      	bne.n	800bc36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bc36:	2301      	movs	r3, #1
 800bc38:	e050      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bc3a:	893b      	ldrh	r3, [r7, #8]
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bc44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc46:	6a39      	ldr	r1, [r7, #32]
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 fb2b 	bl	800c2a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00d      	beq.n	800bc70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc58:	2b04      	cmp	r3, #4
 800bc5a:	d107      	bne.n	800bc6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bc6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e035      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681a      	ldr	r2, [r3, #0]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bc7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bc8c:	68f8      	ldr	r0, [r7, #12]
 800bc8e:	f000 f9ef 	bl	800c070 <I2C_WaitOnFlagUntilTimeout>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00d      	beq.n	800bcb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bca6:	d103      	bne.n	800bcb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bcae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	e013      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bcb4:	897b      	ldrh	r3, [r7, #10]
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	f043 0301 	orr.w	r3, r3, #1
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc6:	6a3a      	ldr	r2, [r7, #32]
 800bcc8:	4906      	ldr	r1, [pc, #24]	@ (800bce4 <I2C_RequestMemoryRead+0x1cc>)
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f000 fa4a 	bl	800c164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d001      	beq.n	800bcda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e000      	b.n	800bcdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800bcda:	2300      	movs	r3, #0
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3718      	adds	r7, #24
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	00010002 	.word	0x00010002

0800bce8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b086      	sub	sp, #24
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcfc:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bd04:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd0a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	685a      	ldr	r2, [r3, #4]
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800bd1a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d003      	beq.n	800bd2c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd28:	2200      	movs	r2, #0
 800bd2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d003      	beq.n	800bd3c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd38:	2200      	movs	r2, #0
 800bd3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800bd3c:	7cfb      	ldrb	r3, [r7, #19]
 800bd3e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800bd42:	2b21      	cmp	r3, #33	@ 0x21
 800bd44:	d007      	beq.n	800bd56 <I2C_DMAXferCplt+0x6e>
 800bd46:	7cfb      	ldrb	r3, [r7, #19]
 800bd48:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800bd4c:	2b22      	cmp	r3, #34	@ 0x22
 800bd4e:	d131      	bne.n	800bdb4 <I2C_DMAXferCplt+0xcc>
 800bd50:	7cbb      	ldrb	r3, [r7, #18]
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	d12e      	bne.n	800bdb4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	685a      	ldr	r2, [r3, #4]
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd64:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bd6c:	7cfb      	ldrb	r3, [r7, #19]
 800bd6e:	2b29      	cmp	r3, #41	@ 0x29
 800bd70:	d10a      	bne.n	800bd88 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	2221      	movs	r2, #33	@ 0x21
 800bd76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	2228      	movs	r2, #40	@ 0x28
 800bd7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bd80:	6978      	ldr	r0, [r7, #20]
 800bd82:	f7fe fcdc 	bl	800a73e <HAL_I2C_SlaveTxCpltCallback>
 800bd86:	e00c      	b.n	800bda2 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bd88:	7cfb      	ldrb	r3, [r7, #19]
 800bd8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd8c:	d109      	bne.n	800bda2 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	2222      	movs	r2, #34	@ 0x22
 800bd92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2228      	movs	r2, #40	@ 0x28
 800bd98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bd9c:	6978      	ldr	r0, [r7, #20]
 800bd9e:	f7fe fcd8 	bl	800a752 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	685a      	ldr	r2, [r3, #4]
 800bda8:	697b      	ldr	r3, [r7, #20]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800bdb0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800bdb2:	e074      	b.n	800be9e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d06e      	beq.n	800be9e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d107      	bne.n	800bdda <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bdd8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	685a      	ldr	r2, [r3, #4]
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800bde8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bdf0:	d009      	beq.n	800be06 <I2C_DMAXferCplt+0x11e>
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2b08      	cmp	r3, #8
 800bdf6:	d006      	beq.n	800be06 <I2C_DMAXferCplt+0x11e>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800bdfe:	d002      	beq.n	800be06 <I2C_DMAXferCplt+0x11e>
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2b20      	cmp	r3, #32
 800be04:	d107      	bne.n	800be16 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be14:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	685a      	ldr	r2, [r3, #4]
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800be24:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	685a      	ldr	r2, [r3, #4]
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be34:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	2200      	movs	r2, #0
 800be3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800be44:	6978      	ldr	r0, [r7, #20]
 800be46:	f7fe fcb0 	bl	800a7aa <HAL_I2C_ErrorCallback>
}
 800be4a:	e028      	b.n	800be9e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2220      	movs	r2, #32
 800be50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	2b40      	cmp	r3, #64	@ 0x40
 800be5e:	d10a      	bne.n	800be76 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2200      	movs	r2, #0
 800be6c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800be6e:	6978      	ldr	r0, [r7, #20]
 800be70:	f7f9 fe44 	bl	8005afc <HAL_I2C_MemRxCpltCallback>
}
 800be74:	e013      	b.n	800be9e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2200      	movs	r2, #0
 800be7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2b08      	cmp	r3, #8
 800be82:	d002      	beq.n	800be8a <I2C_DMAXferCplt+0x1a2>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b20      	cmp	r3, #32
 800be88:	d103      	bne.n	800be92 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	2200      	movs	r2, #0
 800be8e:	631a      	str	r2, [r3, #48]	@ 0x30
 800be90:	e002      	b.n	800be98 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2212      	movs	r2, #18
 800be96:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800be98:	6978      	ldr	r0, [r7, #20]
 800be9a:	f7fe fc46 	bl	800a72a <HAL_I2C_MasterRxCpltCallback>
}
 800be9e:	bf00      	nop
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800bea6:	b580      	push	{r7, lr}
 800bea8:	b084      	sub	sp, #16
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d003      	beq.n	800bec4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bec0:	2200      	movs	r2, #0
 800bec2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d003      	beq.n	800bed4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bed0:	2200      	movs	r2, #0
 800bed2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7fd f8e1 	bl	800909c <HAL_DMA_GetError>
 800beda:	4603      	mov	r3, r0
 800bedc:	2b02      	cmp	r3, #2
 800bede:	d01b      	beq.n	800bf18 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beee:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2220      	movs	r2, #32
 800befa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2200      	movs	r2, #0
 800bf02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf0a:	f043 0210 	orr.w	r2, r3, #16
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800bf12:	68f8      	ldr	r0, [r7, #12]
 800bf14:	f7fe fc49 	bl	800a7aa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bf18:	bf00      	nop
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b086      	sub	sp, #24
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf30:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf38:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bf3a:	4b4b      	ldr	r3, [pc, #300]	@ (800c068 <I2C_DMAAbort+0x148>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	08db      	lsrs	r3, r3, #3
 800bf40:	4a4a      	ldr	r2, [pc, #296]	@ (800c06c <I2C_DMAAbort+0x14c>)
 800bf42:	fba2 2303 	umull	r2, r3, r2, r3
 800bf46:	0a1a      	lsrs	r2, r3, #8
 800bf48:	4613      	mov	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4413      	add	r3, r2
 800bf4e:	00da      	lsls	r2, r3, #3
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d106      	bne.n	800bf68 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf5e:	f043 0220 	orr.w	r2, r3, #32
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800bf66:	e00a      	b.n	800bf7e <I2C_DMAAbort+0x5e>
    }
    count--;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	3b01      	subs	r3, #1
 800bf6c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bf7c:	d0ea      	beq.n	800bf54 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d003      	beq.n	800bf8e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d003      	beq.n	800bf9e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf9e:	697b      	ldr	r3, [r7, #20]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfac:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d003      	beq.n	800bfd4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800bfd4:	697b      	ldr	r3, [r7, #20]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f022 0201 	bic.w	r2, r2, #1
 800bfe2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	2b60      	cmp	r3, #96	@ 0x60
 800bfee:	d10e      	bne.n	800c00e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bff0:	697b      	ldr	r3, [r7, #20]
 800bff2:	2220      	movs	r2, #32
 800bff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	2200      	movs	r2, #0
 800c004:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800c006:	6978      	ldr	r0, [r7, #20]
 800c008:	f7fe fbd9 	bl	800a7be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800c00c:	e027      	b.n	800c05e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800c00e:	7cfb      	ldrb	r3, [r7, #19]
 800c010:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c014:	2b28      	cmp	r3, #40	@ 0x28
 800c016:	d117      	bne.n	800c048 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f042 0201 	orr.w	r2, r2, #1
 800c026:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	681a      	ldr	r2, [r3, #0]
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c036:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	2200      	movs	r2, #0
 800c03c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800c03e:	697b      	ldr	r3, [r7, #20]
 800c040:	2228      	movs	r2, #40	@ 0x28
 800c042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800c046:	e007      	b.n	800c058 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	2220      	movs	r2, #32
 800c04c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c050:	697b      	ldr	r3, [r7, #20]
 800c052:	2200      	movs	r2, #0
 800c054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800c058:	6978      	ldr	r0, [r7, #20]
 800c05a:	f7fe fba6 	bl	800a7aa <HAL_I2C_ErrorCallback>
}
 800c05e:	bf00      	nop
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	20000060 	.word	0x20000060
 800c06c:	14f8b589 	.word	0x14f8b589

0800c070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	60f8      	str	r0, [r7, #12]
 800c078:	60b9      	str	r1, [r7, #8]
 800c07a:	603b      	str	r3, [r7, #0]
 800c07c:	4613      	mov	r3, r2
 800c07e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c080:	e048      	b.n	800c114 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c088:	d044      	beq.n	800c114 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c08a:	f7fb fef5 	bl	8007e78 <HAL_GetTick>
 800c08e:	4602      	mov	r2, r0
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	1ad3      	subs	r3, r2, r3
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	429a      	cmp	r2, r3
 800c098:	d302      	bcc.n	800c0a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d139      	bne.n	800c114 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	0c1b      	lsrs	r3, r3, #16
 800c0a4:	b2db      	uxtb	r3, r3
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d10d      	bne.n	800c0c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	695b      	ldr	r3, [r3, #20]
 800c0b0:	43da      	mvns	r2, r3
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	4013      	ands	r3, r2
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bf0c      	ite	eq
 800c0bc:	2301      	moveq	r3, #1
 800c0be:	2300      	movne	r3, #0
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	e00c      	b.n	800c0e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	699b      	ldr	r3, [r3, #24]
 800c0cc:	43da      	mvns	r2, r3
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	b29b      	uxth	r3, r3
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	bf0c      	ite	eq
 800c0d8:	2301      	moveq	r3, #1
 800c0da:	2300      	movne	r3, #0
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	461a      	mov	r2, r3
 800c0e0:	79fb      	ldrb	r3, [r7, #7]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d116      	bne.n	800c114 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2220      	movs	r2, #32
 800c0f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c100:	f043 0220 	orr.w	r2, r3, #32
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	e023      	b.n	800c15c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	0c1b      	lsrs	r3, r3, #16
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	2b01      	cmp	r3, #1
 800c11c:	d10d      	bne.n	800c13a <I2C_WaitOnFlagUntilTimeout+0xca>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	43da      	mvns	r2, r3
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	4013      	ands	r3, r2
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	bf0c      	ite	eq
 800c130:	2301      	moveq	r3, #1
 800c132:	2300      	movne	r3, #0
 800c134:	b2db      	uxtb	r3, r3
 800c136:	461a      	mov	r2, r3
 800c138:	e00c      	b.n	800c154 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	699b      	ldr	r3, [r3, #24]
 800c140:	43da      	mvns	r2, r3
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	4013      	ands	r3, r2
 800c146:	b29b      	uxth	r3, r3
 800c148:	2b00      	cmp	r3, #0
 800c14a:	bf0c      	ite	eq
 800c14c:	2301      	moveq	r3, #1
 800c14e:	2300      	movne	r3, #0
 800c150:	b2db      	uxtb	r3, r3
 800c152:	461a      	mov	r2, r3
 800c154:	79fb      	ldrb	r3, [r7, #7]
 800c156:	429a      	cmp	r2, r3
 800c158:	d093      	beq.n	800c082 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	607a      	str	r2, [r7, #4]
 800c170:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c172:	e071      	b.n	800c258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c17e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c182:	d123      	bne.n	800c1cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c192:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c19c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	2220      	movs	r2, #32
 800c1a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1b8:	f043 0204 	orr.w	r2, r3, #4
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	e067      	b.n	800c29c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1d2:	d041      	beq.n	800c258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1d4:	f7fb fe50 	bl	8007e78 <HAL_GetTick>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	1ad3      	subs	r3, r2, r3
 800c1de:	687a      	ldr	r2, [r7, #4]
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	d302      	bcc.n	800c1ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d136      	bne.n	800c258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c1ea:	68bb      	ldr	r3, [r7, #8]
 800c1ec:	0c1b      	lsrs	r3, r3, #16
 800c1ee:	b2db      	uxtb	r3, r3
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d10c      	bne.n	800c20e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	695b      	ldr	r3, [r3, #20]
 800c1fa:	43da      	mvns	r2, r3
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	4013      	ands	r3, r2
 800c200:	b29b      	uxth	r3, r3
 800c202:	2b00      	cmp	r3, #0
 800c204:	bf14      	ite	ne
 800c206:	2301      	movne	r3, #1
 800c208:	2300      	moveq	r3, #0
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	e00b      	b.n	800c226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	43da      	mvns	r2, r3
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	4013      	ands	r3, r2
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	bf14      	ite	ne
 800c220:	2301      	movne	r3, #1
 800c222:	2300      	moveq	r3, #0
 800c224:	b2db      	uxtb	r3, r3
 800c226:	2b00      	cmp	r3, #0
 800c228:	d016      	beq.n	800c258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2200      	movs	r2, #0
 800c22e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2220      	movs	r2, #32
 800c234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c244:	f043 0220 	orr.w	r2, r3, #32
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	2200      	movs	r2, #0
 800c250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c254:	2301      	movs	r3, #1
 800c256:	e021      	b.n	800c29c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c258:	68bb      	ldr	r3, [r7, #8]
 800c25a:	0c1b      	lsrs	r3, r3, #16
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d10c      	bne.n	800c27c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	43da      	mvns	r2, r3
 800c26a:	68bb      	ldr	r3, [r7, #8]
 800c26c:	4013      	ands	r3, r2
 800c26e:	b29b      	uxth	r3, r3
 800c270:	2b00      	cmp	r3, #0
 800c272:	bf14      	ite	ne
 800c274:	2301      	movne	r3, #1
 800c276:	2300      	moveq	r3, #0
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	e00b      	b.n	800c294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	43da      	mvns	r2, r3
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	4013      	ands	r3, r2
 800c288:	b29b      	uxth	r3, r3
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bf14      	ite	ne
 800c28e:	2301      	movne	r3, #1
 800c290:	2300      	moveq	r3, #0
 800c292:	b2db      	uxtb	r3, r3
 800c294:	2b00      	cmp	r3, #0
 800c296:	f47f af6d 	bne.w	800c174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c29a:	2300      	movs	r3, #0
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	3710      	adds	r7, #16
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c2b0:	e034      	b.n	800c31c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c2b2:	68f8      	ldr	r0, [r7, #12]
 800c2b4:	f000 f915 	bl	800c4e2 <I2C_IsAcknowledgeFailed>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e034      	b.n	800c32c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2c2:	68bb      	ldr	r3, [r7, #8]
 800c2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c8:	d028      	beq.n	800c31c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c2ca:	f7fb fdd5 	bl	8007e78 <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	68ba      	ldr	r2, [r7, #8]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d302      	bcc.n	800c2e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c2da:	68bb      	ldr	r3, [r7, #8]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d11d      	bne.n	800c31c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2ea:	2b80      	cmp	r3, #128	@ 0x80
 800c2ec:	d016      	beq.n	800c31c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2220      	movs	r2, #32
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c308:	f043 0220 	orr.w	r2, r3, #32
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	e007      	b.n	800c32c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c326:	2b80      	cmp	r3, #128	@ 0x80
 800c328:	d1c3      	bne.n	800c2b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c32a:	2300      	movs	r3, #0
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c340:	e034      	b.n	800c3ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f000 f8cd 	bl	800c4e2 <I2C_IsAcknowledgeFailed>
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	e034      	b.n	800c3bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c358:	d028      	beq.n	800c3ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c35a:	f7fb fd8d 	bl	8007e78 <HAL_GetTick>
 800c35e:	4602      	mov	r2, r0
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	1ad3      	subs	r3, r2, r3
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	429a      	cmp	r2, r3
 800c368:	d302      	bcc.n	800c370 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d11d      	bne.n	800c3ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	695b      	ldr	r3, [r3, #20]
 800c376:	f003 0304 	and.w	r3, r3, #4
 800c37a:	2b04      	cmp	r3, #4
 800c37c:	d016      	beq.n	800c3ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2200      	movs	r2, #0
 800c382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	2220      	movs	r2, #32
 800c388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c398:	f043 0220 	orr.w	r2, r3, #32
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e007      	b.n	800c3bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	695b      	ldr	r3, [r3, #20]
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b04      	cmp	r3, #4
 800c3b8:	d1c3      	bne.n	800c342 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c3cc:	2300      	movs	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c3d0:	4b13      	ldr	r3, [pc, #76]	@ (800c420 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	08db      	lsrs	r3, r3, #3
 800c3d6:	4a13      	ldr	r2, [pc, #76]	@ (800c424 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c3d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c3dc:	0a1a      	lsrs	r2, r3, #8
 800c3de:	4613      	mov	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d107      	bne.n	800c402 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3f6:	f043 0220 	orr.w	r2, r3, #32
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e008      	b.n	800c414 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c40c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c410:	d0e9      	beq.n	800c3e6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c412:	2300      	movs	r3, #0
}
 800c414:	4618      	mov	r0, r3
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	20000060 	.word	0x20000060
 800c424:	14f8b589 	.word	0x14f8b589

0800c428 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	60f8      	str	r0, [r7, #12]
 800c430:	60b9      	str	r1, [r7, #8]
 800c432:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c434:	e049      	b.n	800c4ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	f003 0310 	and.w	r3, r3, #16
 800c440:	2b10      	cmp	r3, #16
 800c442:	d119      	bne.n	800c478 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f06f 0210 	mvn.w	r2, #16
 800c44c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2200      	movs	r2, #0
 800c452:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2220      	movs	r2, #32
 800c458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	2200      	movs	r2, #0
 800c460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	e030      	b.n	800c4da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c478:	f7fb fcfe 	bl	8007e78 <HAL_GetTick>
 800c47c:	4602      	mov	r2, r0
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	1ad3      	subs	r3, r2, r3
 800c482:	68ba      	ldr	r2, [r7, #8]
 800c484:	429a      	cmp	r2, r3
 800c486:	d302      	bcc.n	800c48e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d11d      	bne.n	800c4ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	695b      	ldr	r3, [r3, #20]
 800c494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c498:	2b40      	cmp	r3, #64	@ 0x40
 800c49a:	d016      	beq.n	800c4ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	2220      	movs	r2, #32
 800c4a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4b6:	f043 0220 	orr.w	r2, r3, #32
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e007      	b.n	800c4da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	695b      	ldr	r3, [r3, #20]
 800c4d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4d4:	2b40      	cmp	r3, #64	@ 0x40
 800c4d6:	d1ae      	bne.n	800c436 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	b083      	sub	sp, #12
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	695b      	ldr	r3, [r3, #20]
 800c4f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4f8:	d11b      	bne.n	800c532 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c502:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2200      	movs	r2, #0
 800c508:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2220      	movs	r2, #32
 800c50e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2200      	movs	r2, #0
 800c516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c51e:	f043 0204 	orr.w	r2, r3, #4
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	e000      	b.n	800c534 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c532:	2300      	movs	r3, #0
}
 800c534:	4618      	mov	r0, r3
 800c536:	370c      	adds	r7, #12
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c54c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c550:	d103      	bne.n	800c55a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2201      	movs	r2, #1
 800c556:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c558:	e007      	b.n	800c56a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c55e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c562:	d102      	bne.n	800c56a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2208      	movs	r2, #8
 800c568:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c56a:	bf00      	nop
 800c56c:	370c      	adds	r7, #12
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr
	...

0800c578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b084      	sub	sp, #16
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d101      	bne.n	800c58c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c588:	2301      	movs	r3, #1
 800c58a:	e0cc      	b.n	800c726 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c58c:	4b68      	ldr	r3, [pc, #416]	@ (800c730 <HAL_RCC_ClockConfig+0x1b8>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 030f 	and.w	r3, r3, #15
 800c594:	683a      	ldr	r2, [r7, #0]
 800c596:	429a      	cmp	r2, r3
 800c598:	d90c      	bls.n	800c5b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c59a:	4b65      	ldr	r3, [pc, #404]	@ (800c730 <HAL_RCC_ClockConfig+0x1b8>)
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	b2d2      	uxtb	r2, r2
 800c5a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5a2:	4b63      	ldr	r3, [pc, #396]	@ (800c730 <HAL_RCC_ClockConfig+0x1b8>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f003 030f 	and.w	r3, r3, #15
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d001      	beq.n	800c5b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e0b8      	b.n	800c726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d020      	beq.n	800c602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d005      	beq.n	800c5d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c5cc:	4b59      	ldr	r3, [pc, #356]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	4a58      	ldr	r2, [pc, #352]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c5d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c5d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f003 0308 	and.w	r3, r3, #8
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d005      	beq.n	800c5f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c5e4:	4b53      	ldr	r3, [pc, #332]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c5e6:	689b      	ldr	r3, [r3, #8]
 800c5e8:	4a52      	ldr	r2, [pc, #328]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c5ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c5f0:	4b50      	ldr	r3, [pc, #320]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c5f2:	689b      	ldr	r3, [r3, #8]
 800c5f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	494d      	ldr	r1, [pc, #308]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c5fe:	4313      	orrs	r3, r2
 800c600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 0301 	and.w	r3, r3, #1
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d044      	beq.n	800c698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d107      	bne.n	800c626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c616:	4b47      	ldr	r3, [pc, #284]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d119      	bne.n	800c656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e07f      	b.n	800c726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d003      	beq.n	800c636 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c632:	2b03      	cmp	r3, #3
 800c634:	d107      	bne.n	800c646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c636:	4b3f      	ldr	r3, [pc, #252]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d109      	bne.n	800c656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c642:	2301      	movs	r3, #1
 800c644:	e06f      	b.n	800c726 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c646:	4b3b      	ldr	r3, [pc, #236]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 0302 	and.w	r3, r3, #2
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e067      	b.n	800c726 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c656:	4b37      	ldr	r3, [pc, #220]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f023 0203 	bic.w	r2, r3, #3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	4934      	ldr	r1, [pc, #208]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c664:	4313      	orrs	r3, r2
 800c666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c668:	f7fb fc06 	bl	8007e78 <HAL_GetTick>
 800c66c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c66e:	e00a      	b.n	800c686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c670:	f7fb fc02 	bl	8007e78 <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c67e:	4293      	cmp	r3, r2
 800c680:	d901      	bls.n	800c686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c682:	2303      	movs	r3, #3
 800c684:	e04f      	b.n	800c726 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c686:	4b2b      	ldr	r3, [pc, #172]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	f003 020c 	and.w	r2, r3, #12
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	685b      	ldr	r3, [r3, #4]
 800c692:	009b      	lsls	r3, r3, #2
 800c694:	429a      	cmp	r2, r3
 800c696:	d1eb      	bne.n	800c670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c698:	4b25      	ldr	r3, [pc, #148]	@ (800c730 <HAL_RCC_ClockConfig+0x1b8>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 030f 	and.w	r3, r3, #15
 800c6a0:	683a      	ldr	r2, [r7, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d20c      	bcs.n	800c6c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6a6:	4b22      	ldr	r3, [pc, #136]	@ (800c730 <HAL_RCC_ClockConfig+0x1b8>)
 800c6a8:	683a      	ldr	r2, [r7, #0]
 800c6aa:	b2d2      	uxtb	r2, r2
 800c6ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6ae:	4b20      	ldr	r3, [pc, #128]	@ (800c730 <HAL_RCC_ClockConfig+0x1b8>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 030f 	and.w	r3, r3, #15
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d001      	beq.n	800c6c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	e032      	b.n	800c726 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 0304 	and.w	r3, r3, #4
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d008      	beq.n	800c6de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c6cc:	4b19      	ldr	r3, [pc, #100]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	4916      	ldr	r1, [pc, #88]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 0308 	and.w	r3, r3, #8
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d009      	beq.n	800c6fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c6ea:	4b12      	ldr	r3, [pc, #72]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	00db      	lsls	r3, r3, #3
 800c6f8:	490e      	ldr	r1, [pc, #56]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c6fe:	f000 f855 	bl	800c7ac <HAL_RCC_GetSysClockFreq>
 800c702:	4602      	mov	r2, r0
 800c704:	4b0b      	ldr	r3, [pc, #44]	@ (800c734 <HAL_RCC_ClockConfig+0x1bc>)
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	091b      	lsrs	r3, r3, #4
 800c70a:	f003 030f 	and.w	r3, r3, #15
 800c70e:	490a      	ldr	r1, [pc, #40]	@ (800c738 <HAL_RCC_ClockConfig+0x1c0>)
 800c710:	5ccb      	ldrb	r3, [r1, r3]
 800c712:	fa22 f303 	lsr.w	r3, r2, r3
 800c716:	4a09      	ldr	r2, [pc, #36]	@ (800c73c <HAL_RCC_ClockConfig+0x1c4>)
 800c718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c71a:	4b09      	ldr	r3, [pc, #36]	@ (800c740 <HAL_RCC_ClockConfig+0x1c8>)
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fb fb66 	bl	8007df0 <HAL_InitTick>

  return HAL_OK;
 800c724:	2300      	movs	r3, #0
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	40023c00 	.word	0x40023c00
 800c734:	40023800 	.word	0x40023800
 800c738:	08016580 	.word	0x08016580
 800c73c:	20000060 	.word	0x20000060
 800c740:	20000064 	.word	0x20000064

0800c744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c744:	b480      	push	{r7}
 800c746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c748:	4b03      	ldr	r3, [pc, #12]	@ (800c758 <HAL_RCC_GetHCLKFreq+0x14>)
 800c74a:	681b      	ldr	r3, [r3, #0]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
 800c756:	bf00      	nop
 800c758:	20000060 	.word	0x20000060

0800c75c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c760:	f7ff fff0 	bl	800c744 <HAL_RCC_GetHCLKFreq>
 800c764:	4602      	mov	r2, r0
 800c766:	4b05      	ldr	r3, [pc, #20]	@ (800c77c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	0a9b      	lsrs	r3, r3, #10
 800c76c:	f003 0307 	and.w	r3, r3, #7
 800c770:	4903      	ldr	r1, [pc, #12]	@ (800c780 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c772:	5ccb      	ldrb	r3, [r1, r3]
 800c774:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c778:	4618      	mov	r0, r3
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	40023800 	.word	0x40023800
 800c780:	08016590 	.word	0x08016590

0800c784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c788:	f7ff ffdc 	bl	800c744 <HAL_RCC_GetHCLKFreq>
 800c78c:	4602      	mov	r2, r0
 800c78e:	4b05      	ldr	r3, [pc, #20]	@ (800c7a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c790:	689b      	ldr	r3, [r3, #8]
 800c792:	0b5b      	lsrs	r3, r3, #13
 800c794:	f003 0307 	and.w	r3, r3, #7
 800c798:	4903      	ldr	r1, [pc, #12]	@ (800c7a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c79a:	5ccb      	ldrb	r3, [r1, r3]
 800c79c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	40023800 	.word	0x40023800
 800c7a8:	08016590 	.word	0x08016590

0800c7ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c7ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7b0:	b0ae      	sub	sp, #184	@ 0xb8
 800c7b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c7d2:	4bcb      	ldr	r3, [pc, #812]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	f003 030c 	and.w	r3, r3, #12
 800c7da:	2b0c      	cmp	r3, #12
 800c7dc:	f200 8206 	bhi.w	800cbec <HAL_RCC_GetSysClockFreq+0x440>
 800c7e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e6:	bf00      	nop
 800c7e8:	0800c81d 	.word	0x0800c81d
 800c7ec:	0800cbed 	.word	0x0800cbed
 800c7f0:	0800cbed 	.word	0x0800cbed
 800c7f4:	0800cbed 	.word	0x0800cbed
 800c7f8:	0800c825 	.word	0x0800c825
 800c7fc:	0800cbed 	.word	0x0800cbed
 800c800:	0800cbed 	.word	0x0800cbed
 800c804:	0800cbed 	.word	0x0800cbed
 800c808:	0800c82d 	.word	0x0800c82d
 800c80c:	0800cbed 	.word	0x0800cbed
 800c810:	0800cbed 	.word	0x0800cbed
 800c814:	0800cbed 	.word	0x0800cbed
 800c818:	0800ca1d 	.word	0x0800ca1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c81c:	4bb9      	ldr	r3, [pc, #740]	@ (800cb04 <HAL_RCC_GetSysClockFreq+0x358>)
 800c81e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c822:	e1e7      	b.n	800cbf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c824:	4bb8      	ldr	r3, [pc, #736]	@ (800cb08 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c82a:	e1e3      	b.n	800cbf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c82c:	4bb4      	ldr	r3, [pc, #720]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c838:	4bb1      	ldr	r3, [pc, #708]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c840:	2b00      	cmp	r3, #0
 800c842:	d071      	beq.n	800c928 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c844:	4bae      	ldr	r3, [pc, #696]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	099b      	lsrs	r3, r3, #6
 800c84a:	2200      	movs	r2, #0
 800c84c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c850:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c854:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c85c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c860:	2300      	movs	r3, #0
 800c862:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c866:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c86a:	4622      	mov	r2, r4
 800c86c:	462b      	mov	r3, r5
 800c86e:	f04f 0000 	mov.w	r0, #0
 800c872:	f04f 0100 	mov.w	r1, #0
 800c876:	0159      	lsls	r1, r3, #5
 800c878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c87c:	0150      	lsls	r0, r2, #5
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	4621      	mov	r1, r4
 800c884:	1a51      	subs	r1, r2, r1
 800c886:	6439      	str	r1, [r7, #64]	@ 0x40
 800c888:	4629      	mov	r1, r5
 800c88a:	eb63 0301 	sbc.w	r3, r3, r1
 800c88e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c890:	f04f 0200 	mov.w	r2, #0
 800c894:	f04f 0300 	mov.w	r3, #0
 800c898:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800c89c:	4649      	mov	r1, r9
 800c89e:	018b      	lsls	r3, r1, #6
 800c8a0:	4641      	mov	r1, r8
 800c8a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c8a6:	4641      	mov	r1, r8
 800c8a8:	018a      	lsls	r2, r1, #6
 800c8aa:	4641      	mov	r1, r8
 800c8ac:	1a51      	subs	r1, r2, r1
 800c8ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c8b0:	4649      	mov	r1, r9
 800c8b2:	eb63 0301 	sbc.w	r3, r3, r1
 800c8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8b8:	f04f 0200 	mov.w	r2, #0
 800c8bc:	f04f 0300 	mov.w	r3, #0
 800c8c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800c8c4:	4649      	mov	r1, r9
 800c8c6:	00cb      	lsls	r3, r1, #3
 800c8c8:	4641      	mov	r1, r8
 800c8ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c8ce:	4641      	mov	r1, r8
 800c8d0:	00ca      	lsls	r2, r1, #3
 800c8d2:	4610      	mov	r0, r2
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	4622      	mov	r2, r4
 800c8da:	189b      	adds	r3, r3, r2
 800c8dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8de:	462b      	mov	r3, r5
 800c8e0:	460a      	mov	r2, r1
 800c8e2:	eb42 0303 	adc.w	r3, r2, r3
 800c8e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c8e8:	f04f 0200 	mov.w	r2, #0
 800c8ec:	f04f 0300 	mov.w	r3, #0
 800c8f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	024b      	lsls	r3, r1, #9
 800c8f8:	4621      	mov	r1, r4
 800c8fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c8fe:	4621      	mov	r1, r4
 800c900:	024a      	lsls	r2, r1, #9
 800c902:	4610      	mov	r0, r2
 800c904:	4619      	mov	r1, r3
 800c906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c90a:	2200      	movs	r2, #0
 800c90c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c910:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c914:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800c918:	f7f4 fb34 	bl	8000f84 <__aeabi_uldivmod>
 800c91c:	4602      	mov	r2, r0
 800c91e:	460b      	mov	r3, r1
 800c920:	4613      	mov	r3, r2
 800c922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c926:	e067      	b.n	800c9f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c928:	4b75      	ldr	r3, [pc, #468]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	099b      	lsrs	r3, r3, #6
 800c92e:	2200      	movs	r2, #0
 800c930:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c934:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c938:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c93c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c940:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c942:	2300      	movs	r3, #0
 800c944:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c946:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c94a:	4622      	mov	r2, r4
 800c94c:	462b      	mov	r3, r5
 800c94e:	f04f 0000 	mov.w	r0, #0
 800c952:	f04f 0100 	mov.w	r1, #0
 800c956:	0159      	lsls	r1, r3, #5
 800c958:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c95c:	0150      	lsls	r0, r2, #5
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4621      	mov	r1, r4
 800c964:	1a51      	subs	r1, r2, r1
 800c966:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c968:	4629      	mov	r1, r5
 800c96a:	eb63 0301 	sbc.w	r3, r3, r1
 800c96e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c970:	f04f 0200 	mov.w	r2, #0
 800c974:	f04f 0300 	mov.w	r3, #0
 800c978:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800c97c:	4649      	mov	r1, r9
 800c97e:	018b      	lsls	r3, r1, #6
 800c980:	4641      	mov	r1, r8
 800c982:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c986:	4641      	mov	r1, r8
 800c988:	018a      	lsls	r2, r1, #6
 800c98a:	4641      	mov	r1, r8
 800c98c:	ebb2 0a01 	subs.w	sl, r2, r1
 800c990:	4649      	mov	r1, r9
 800c992:	eb63 0b01 	sbc.w	fp, r3, r1
 800c996:	f04f 0200 	mov.w	r2, #0
 800c99a:	f04f 0300 	mov.w	r3, #0
 800c99e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c9a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c9a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9aa:	4692      	mov	sl, r2
 800c9ac:	469b      	mov	fp, r3
 800c9ae:	4623      	mov	r3, r4
 800c9b0:	eb1a 0303 	adds.w	r3, sl, r3
 800c9b4:	623b      	str	r3, [r7, #32]
 800c9b6:	462b      	mov	r3, r5
 800c9b8:	eb4b 0303 	adc.w	r3, fp, r3
 800c9bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9be:	f04f 0200 	mov.w	r2, #0
 800c9c2:	f04f 0300 	mov.w	r3, #0
 800c9c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c9ca:	4629      	mov	r1, r5
 800c9cc:	028b      	lsls	r3, r1, #10
 800c9ce:	4621      	mov	r1, r4
 800c9d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	028a      	lsls	r2, r1, #10
 800c9d8:	4610      	mov	r0, r2
 800c9da:	4619      	mov	r1, r3
 800c9dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c9e4:	677a      	str	r2, [r7, #116]	@ 0x74
 800c9e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c9ea:	f7f4 facb 	bl	8000f84 <__aeabi_uldivmod>
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c9f8:	4b41      	ldr	r3, [pc, #260]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	0c1b      	lsrs	r3, r3, #16
 800c9fe:	f003 0303 	and.w	r3, r3, #3
 800ca02:	3301      	adds	r3, #1
 800ca04:	005b      	lsls	r3, r3, #1
 800ca06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800ca0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ca0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ca12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800ca1a:	e0eb      	b.n	800cbf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ca1c:	4b38      	ldr	r3, [pc, #224]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ca24:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ca28:	4b35      	ldr	r3, [pc, #212]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d06b      	beq.n	800cb0c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ca34:	4b32      	ldr	r3, [pc, #200]	@ (800cb00 <HAL_RCC_GetSysClockFreq+0x354>)
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	099b      	lsrs	r3, r3, #6
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca46:	663b      	str	r3, [r7, #96]	@ 0x60
 800ca48:	2300      	movs	r3, #0
 800ca4a:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca4c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800ca50:	4622      	mov	r2, r4
 800ca52:	462b      	mov	r3, r5
 800ca54:	f04f 0000 	mov.w	r0, #0
 800ca58:	f04f 0100 	mov.w	r1, #0
 800ca5c:	0159      	lsls	r1, r3, #5
 800ca5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca62:	0150      	lsls	r0, r2, #5
 800ca64:	4602      	mov	r2, r0
 800ca66:	460b      	mov	r3, r1
 800ca68:	4621      	mov	r1, r4
 800ca6a:	1a51      	subs	r1, r2, r1
 800ca6c:	61b9      	str	r1, [r7, #24]
 800ca6e:	4629      	mov	r1, r5
 800ca70:	eb63 0301 	sbc.w	r3, r3, r1
 800ca74:	61fb      	str	r3, [r7, #28]
 800ca76:	f04f 0200 	mov.w	r2, #0
 800ca7a:	f04f 0300 	mov.w	r3, #0
 800ca7e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800ca82:	4659      	mov	r1, fp
 800ca84:	018b      	lsls	r3, r1, #6
 800ca86:	4651      	mov	r1, sl
 800ca88:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ca8c:	4651      	mov	r1, sl
 800ca8e:	018a      	lsls	r2, r1, #6
 800ca90:	4651      	mov	r1, sl
 800ca92:	ebb2 0801 	subs.w	r8, r2, r1
 800ca96:	4659      	mov	r1, fp
 800ca98:	eb63 0901 	sbc.w	r9, r3, r1
 800ca9c:	f04f 0200 	mov.w	r2, #0
 800caa0:	f04f 0300 	mov.w	r3, #0
 800caa4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800caa8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800caac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cab0:	4690      	mov	r8, r2
 800cab2:	4699      	mov	r9, r3
 800cab4:	4623      	mov	r3, r4
 800cab6:	eb18 0303 	adds.w	r3, r8, r3
 800caba:	613b      	str	r3, [r7, #16]
 800cabc:	462b      	mov	r3, r5
 800cabe:	eb49 0303 	adc.w	r3, r9, r3
 800cac2:	617b      	str	r3, [r7, #20]
 800cac4:	f04f 0200 	mov.w	r2, #0
 800cac8:	f04f 0300 	mov.w	r3, #0
 800cacc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800cad0:	4629      	mov	r1, r5
 800cad2:	024b      	lsls	r3, r1, #9
 800cad4:	4621      	mov	r1, r4
 800cad6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800cada:	4621      	mov	r1, r4
 800cadc:	024a      	lsls	r2, r1, #9
 800cade:	4610      	mov	r0, r2
 800cae0:	4619      	mov	r1, r3
 800cae2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cae6:	2200      	movs	r2, #0
 800cae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800caea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800caec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800caf0:	f7f4 fa48 	bl	8000f84 <__aeabi_uldivmod>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4613      	mov	r3, r2
 800cafa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cafe:	e065      	b.n	800cbcc <HAL_RCC_GetSysClockFreq+0x420>
 800cb00:	40023800 	.word	0x40023800
 800cb04:	00f42400 	.word	0x00f42400
 800cb08:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800cb0c:	4b3d      	ldr	r3, [pc, #244]	@ (800cc04 <HAL_RCC_GetSysClockFreq+0x458>)
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	099b      	lsrs	r3, r3, #6
 800cb12:	2200      	movs	r2, #0
 800cb14:	4618      	mov	r0, r3
 800cb16:	4611      	mov	r1, r2
 800cb18:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cb1c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb1e:	2300      	movs	r3, #0
 800cb20:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb22:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800cb26:	4642      	mov	r2, r8
 800cb28:	464b      	mov	r3, r9
 800cb2a:	f04f 0000 	mov.w	r0, #0
 800cb2e:	f04f 0100 	mov.w	r1, #0
 800cb32:	0159      	lsls	r1, r3, #5
 800cb34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cb38:	0150      	lsls	r0, r2, #5
 800cb3a:	4602      	mov	r2, r0
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	4641      	mov	r1, r8
 800cb40:	1a51      	subs	r1, r2, r1
 800cb42:	60b9      	str	r1, [r7, #8]
 800cb44:	4649      	mov	r1, r9
 800cb46:	eb63 0301 	sbc.w	r3, r3, r1
 800cb4a:	60fb      	str	r3, [r7, #12]
 800cb4c:	f04f 0200 	mov.w	r2, #0
 800cb50:	f04f 0300 	mov.w	r3, #0
 800cb54:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800cb58:	4659      	mov	r1, fp
 800cb5a:	018b      	lsls	r3, r1, #6
 800cb5c:	4651      	mov	r1, sl
 800cb5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cb62:	4651      	mov	r1, sl
 800cb64:	018a      	lsls	r2, r1, #6
 800cb66:	4651      	mov	r1, sl
 800cb68:	1a54      	subs	r4, r2, r1
 800cb6a:	4659      	mov	r1, fp
 800cb6c:	eb63 0501 	sbc.w	r5, r3, r1
 800cb70:	f04f 0200 	mov.w	r2, #0
 800cb74:	f04f 0300 	mov.w	r3, #0
 800cb78:	00eb      	lsls	r3, r5, #3
 800cb7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cb7e:	00e2      	lsls	r2, r4, #3
 800cb80:	4614      	mov	r4, r2
 800cb82:	461d      	mov	r5, r3
 800cb84:	4643      	mov	r3, r8
 800cb86:	18e3      	adds	r3, r4, r3
 800cb88:	603b      	str	r3, [r7, #0]
 800cb8a:	464b      	mov	r3, r9
 800cb8c:	eb45 0303 	adc.w	r3, r5, r3
 800cb90:	607b      	str	r3, [r7, #4]
 800cb92:	f04f 0200 	mov.w	r2, #0
 800cb96:	f04f 0300 	mov.w	r3, #0
 800cb9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800cb9e:	4629      	mov	r1, r5
 800cba0:	028b      	lsls	r3, r1, #10
 800cba2:	4621      	mov	r1, r4
 800cba4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cba8:	4621      	mov	r1, r4
 800cbaa:	028a      	lsls	r2, r1, #10
 800cbac:	4610      	mov	r0, r2
 800cbae:	4619      	mov	r1, r3
 800cbb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cbb8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800cbba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cbbe:	f7f4 f9e1 	bl	8000f84 <__aeabi_uldivmod>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	460b      	mov	r3, r1
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800cbcc:	4b0d      	ldr	r3, [pc, #52]	@ (800cc04 <HAL_RCC_GetSysClockFreq+0x458>)
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	0f1b      	lsrs	r3, r3, #28
 800cbd2:	f003 0307 	and.w	r3, r3, #7
 800cbd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800cbda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cbde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cbe2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbe6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800cbea:	e003      	b.n	800cbf4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cbec:	4b06      	ldr	r3, [pc, #24]	@ (800cc08 <HAL_RCC_GetSysClockFreq+0x45c>)
 800cbee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800cbf2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cbf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	37b8      	adds	r7, #184	@ 0xb8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc02:	bf00      	nop
 800cc04:	40023800 	.word	0x40023800
 800cc08:	00f42400 	.word	0x00f42400

0800cc0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b086      	sub	sp, #24
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	e28d      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 0301 	and.w	r3, r3, #1
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	f000 8083 	beq.w	800cd32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cc2c:	4b94      	ldr	r3, [pc, #592]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	f003 030c 	and.w	r3, r3, #12
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	d019      	beq.n	800cc6c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800cc38:	4b91      	ldr	r3, [pc, #580]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cc3a:	689b      	ldr	r3, [r3, #8]
 800cc3c:	f003 030c 	and.w	r3, r3, #12
        || \
 800cc40:	2b08      	cmp	r3, #8
 800cc42:	d106      	bne.n	800cc52 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800cc44:	4b8e      	ldr	r3, [pc, #568]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cc50:	d00c      	beq.n	800cc6c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cc52:	4b8b      	ldr	r3, [pc, #556]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800cc5a:	2b0c      	cmp	r3, #12
 800cc5c:	d112      	bne.n	800cc84 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cc5e:	4b88      	ldr	r3, [pc, #544]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cc6a:	d10b      	bne.n	800cc84 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc6c:	4b84      	ldr	r3, [pc, #528]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d05b      	beq.n	800cd30 <HAL_RCC_OscConfig+0x124>
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d157      	bne.n	800cd30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e25a      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc8c:	d106      	bne.n	800cc9c <HAL_RCC_OscConfig+0x90>
 800cc8e:	4b7c      	ldr	r3, [pc, #496]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	4a7b      	ldr	r2, [pc, #492]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cc94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc98:	6013      	str	r3, [r2, #0]
 800cc9a:	e01d      	b.n	800ccd8 <HAL_RCC_OscConfig+0xcc>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cca4:	d10c      	bne.n	800ccc0 <HAL_RCC_OscConfig+0xb4>
 800cca6:	4b76      	ldr	r3, [pc, #472]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	4a75      	ldr	r2, [pc, #468]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ccac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ccb0:	6013      	str	r3, [r2, #0]
 800ccb2:	4b73      	ldr	r3, [pc, #460]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	4a72      	ldr	r2, [pc, #456]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ccb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ccbc:	6013      	str	r3, [r2, #0]
 800ccbe:	e00b      	b.n	800ccd8 <HAL_RCC_OscConfig+0xcc>
 800ccc0:	4b6f      	ldr	r3, [pc, #444]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a6e      	ldr	r2, [pc, #440]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ccc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	4b6c      	ldr	r3, [pc, #432]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a6b      	ldr	r2, [pc, #428]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ccd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ccd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d013      	beq.n	800cd08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cce0:	f7fb f8ca 	bl	8007e78 <HAL_GetTick>
 800cce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cce6:	e008      	b.n	800ccfa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cce8:	f7fb f8c6 	bl	8007e78 <HAL_GetTick>
 800ccec:	4602      	mov	r2, r0
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	2b64      	cmp	r3, #100	@ 0x64
 800ccf4:	d901      	bls.n	800ccfa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800ccf6:	2303      	movs	r3, #3
 800ccf8:	e21f      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ccfa:	4b61      	ldr	r3, [pc, #388]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0f0      	beq.n	800cce8 <HAL_RCC_OscConfig+0xdc>
 800cd06:	e014      	b.n	800cd32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd08:	f7fb f8b6 	bl	8007e78 <HAL_GetTick>
 800cd0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd0e:	e008      	b.n	800cd22 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cd10:	f7fb f8b2 	bl	8007e78 <HAL_GetTick>
 800cd14:	4602      	mov	r2, r0
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	2b64      	cmp	r3, #100	@ 0x64
 800cd1c:	d901      	bls.n	800cd22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800cd1e:	2303      	movs	r3, #3
 800cd20:	e20b      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cd22:	4b57      	ldr	r3, [pc, #348]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1f0      	bne.n	800cd10 <HAL_RCC_OscConfig+0x104>
 800cd2e:	e000      	b.n	800cd32 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 0302 	and.w	r3, r3, #2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d06f      	beq.n	800ce1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cd3e:	4b50      	ldr	r3, [pc, #320]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	f003 030c 	and.w	r3, r3, #12
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d017      	beq.n	800cd7a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800cd4a:	4b4d      	ldr	r3, [pc, #308]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	f003 030c 	and.w	r3, r3, #12
        || \
 800cd52:	2b08      	cmp	r3, #8
 800cd54:	d105      	bne.n	800cd62 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800cd56:	4b4a      	ldr	r3, [pc, #296]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00b      	beq.n	800cd7a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd62:	4b47      	ldr	r3, [pc, #284]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800cd6a:	2b0c      	cmp	r3, #12
 800cd6c:	d11c      	bne.n	800cda8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cd6e:	4b44      	ldr	r3, [pc, #272]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cd70:	685b      	ldr	r3, [r3, #4]
 800cd72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d116      	bne.n	800cda8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cd7a:	4b41      	ldr	r3, [pc, #260]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f003 0302 	and.w	r3, r3, #2
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <HAL_RCC_OscConfig+0x186>
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d001      	beq.n	800cd92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e1d3      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd92:	4b3b      	ldr	r3, [pc, #236]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	691b      	ldr	r3, [r3, #16]
 800cd9e:	00db      	lsls	r3, r3, #3
 800cda0:	4937      	ldr	r1, [pc, #220]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cda2:	4313      	orrs	r3, r2
 800cda4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cda6:	e03a      	b.n	800ce1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d020      	beq.n	800cdf2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cdb0:	4b34      	ldr	r3, [pc, #208]	@ (800ce84 <HAL_RCC_OscConfig+0x278>)
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdb6:	f7fb f85f 	bl	8007e78 <HAL_GetTick>
 800cdba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdbc:	e008      	b.n	800cdd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cdbe:	f7fb f85b 	bl	8007e78 <HAL_GetTick>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	1ad3      	subs	r3, r2, r3
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d901      	bls.n	800cdd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800cdcc:	2303      	movs	r3, #3
 800cdce:	e1b4      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cdd0:	4b2b      	ldr	r3, [pc, #172]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 0302 	and.w	r3, r3, #2
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d0f0      	beq.n	800cdbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cddc:	4b28      	ldr	r3, [pc, #160]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	00db      	lsls	r3, r3, #3
 800cdea:	4925      	ldr	r1, [pc, #148]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800cdec:	4313      	orrs	r3, r2
 800cdee:	600b      	str	r3, [r1, #0]
 800cdf0:	e015      	b.n	800ce1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cdf2:	4b24      	ldr	r3, [pc, #144]	@ (800ce84 <HAL_RCC_OscConfig+0x278>)
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdf8:	f7fb f83e 	bl	8007e78 <HAL_GetTick>
 800cdfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cdfe:	e008      	b.n	800ce12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce00:	f7fb f83a 	bl	8007e78 <HAL_GetTick>
 800ce04:	4602      	mov	r2, r0
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d901      	bls.n	800ce12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ce0e:	2303      	movs	r3, #3
 800ce10:	e193      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ce12:	4b1b      	ldr	r3, [pc, #108]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f003 0302 	and.w	r3, r3, #2
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d1f0      	bne.n	800ce00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f003 0308 	and.w	r3, r3, #8
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d036      	beq.n	800ce98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	695b      	ldr	r3, [r3, #20]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d016      	beq.n	800ce60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ce32:	4b15      	ldr	r3, [pc, #84]	@ (800ce88 <HAL_RCC_OscConfig+0x27c>)
 800ce34:	2201      	movs	r2, #1
 800ce36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce38:	f7fb f81e 	bl	8007e78 <HAL_GetTick>
 800ce3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce3e:	e008      	b.n	800ce52 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce40:	f7fb f81a 	bl	8007e78 <HAL_GetTick>
 800ce44:	4602      	mov	r2, r0
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	2b02      	cmp	r3, #2
 800ce4c:	d901      	bls.n	800ce52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800ce4e:	2303      	movs	r3, #3
 800ce50:	e173      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ce52:	4b0b      	ldr	r3, [pc, #44]	@ (800ce80 <HAL_RCC_OscConfig+0x274>)
 800ce54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce56:	f003 0302 	and.w	r3, r3, #2
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d0f0      	beq.n	800ce40 <HAL_RCC_OscConfig+0x234>
 800ce5e:	e01b      	b.n	800ce98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ce60:	4b09      	ldr	r3, [pc, #36]	@ (800ce88 <HAL_RCC_OscConfig+0x27c>)
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce66:	f7fb f807 	bl	8007e78 <HAL_GetTick>
 800ce6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce6c:	e00e      	b.n	800ce8c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ce6e:	f7fb f803 	bl	8007e78 <HAL_GetTick>
 800ce72:	4602      	mov	r2, r0
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	1ad3      	subs	r3, r2, r3
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	d907      	bls.n	800ce8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	e15c      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
 800ce80:	40023800 	.word	0x40023800
 800ce84:	42470000 	.word	0x42470000
 800ce88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ce8c:	4b8a      	ldr	r3, [pc, #552]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800ce8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce90:	f003 0302 	and.w	r3, r3, #2
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d1ea      	bne.n	800ce6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f003 0304 	and.w	r3, r3, #4
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	f000 8097 	beq.w	800cfd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cea6:	2300      	movs	r3, #0
 800cea8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ceaa:	4b83      	ldr	r3, [pc, #524]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800ceac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10f      	bne.n	800ced6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	60bb      	str	r3, [r7, #8]
 800ceba:	4b7f      	ldr	r3, [pc, #508]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cebe:	4a7e      	ldr	r2, [pc, #504]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cec4:	6413      	str	r3, [r2, #64]	@ 0x40
 800cec6:	4b7c      	ldr	r3, [pc, #496]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cece:	60bb      	str	r3, [r7, #8]
 800ced0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ced2:	2301      	movs	r3, #1
 800ced4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ced6:	4b79      	ldr	r3, [pc, #484]	@ (800d0bc <HAL_RCC_OscConfig+0x4b0>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d118      	bne.n	800cf14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cee2:	4b76      	ldr	r3, [pc, #472]	@ (800d0bc <HAL_RCC_OscConfig+0x4b0>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a75      	ldr	r2, [pc, #468]	@ (800d0bc <HAL_RCC_OscConfig+0x4b0>)
 800cee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ceec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ceee:	f7fa ffc3 	bl	8007e78 <HAL_GetTick>
 800cef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cef4:	e008      	b.n	800cf08 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cef6:	f7fa ffbf 	bl	8007e78 <HAL_GetTick>
 800cefa:	4602      	mov	r2, r0
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	1ad3      	subs	r3, r2, r3
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	d901      	bls.n	800cf08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800cf04:	2303      	movs	r3, #3
 800cf06:	e118      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf08:	4b6c      	ldr	r3, [pc, #432]	@ (800d0bc <HAL_RCC_OscConfig+0x4b0>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d0f0      	beq.n	800cef6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d106      	bne.n	800cf2a <HAL_RCC_OscConfig+0x31e>
 800cf1c:	4b66      	ldr	r3, [pc, #408]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf20:	4a65      	ldr	r2, [pc, #404]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf22:	f043 0301 	orr.w	r3, r3, #1
 800cf26:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf28:	e01c      	b.n	800cf64 <HAL_RCC_OscConfig+0x358>
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	2b05      	cmp	r3, #5
 800cf30:	d10c      	bne.n	800cf4c <HAL_RCC_OscConfig+0x340>
 800cf32:	4b61      	ldr	r3, [pc, #388]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf36:	4a60      	ldr	r2, [pc, #384]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf38:	f043 0304 	orr.w	r3, r3, #4
 800cf3c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf3e:	4b5e      	ldr	r3, [pc, #376]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf42:	4a5d      	ldr	r2, [pc, #372]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf44:	f043 0301 	orr.w	r3, r3, #1
 800cf48:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf4a:	e00b      	b.n	800cf64 <HAL_RCC_OscConfig+0x358>
 800cf4c:	4b5a      	ldr	r3, [pc, #360]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf50:	4a59      	ldr	r2, [pc, #356]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf52:	f023 0301 	bic.w	r3, r3, #1
 800cf56:	6713      	str	r3, [r2, #112]	@ 0x70
 800cf58:	4b57      	ldr	r3, [pc, #348]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf5c:	4a56      	ldr	r2, [pc, #344]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf5e:	f023 0304 	bic.w	r3, r3, #4
 800cf62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d015      	beq.n	800cf98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf6c:	f7fa ff84 	bl	8007e78 <HAL_GetTick>
 800cf70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf72:	e00a      	b.n	800cf8a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf74:	f7fa ff80 	bl	8007e78 <HAL_GetTick>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d901      	bls.n	800cf8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800cf86:	2303      	movs	r3, #3
 800cf88:	e0d7      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cf8a:	4b4b      	ldr	r3, [pc, #300]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cf8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf8e:	f003 0302 	and.w	r3, r3, #2
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d0ee      	beq.n	800cf74 <HAL_RCC_OscConfig+0x368>
 800cf96:	e014      	b.n	800cfc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf98:	f7fa ff6e 	bl	8007e78 <HAL_GetTick>
 800cf9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf9e:	e00a      	b.n	800cfb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cfa0:	f7fa ff6a 	bl	8007e78 <HAL_GetTick>
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cfae:	4293      	cmp	r3, r2
 800cfb0:	d901      	bls.n	800cfb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	e0c1      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cfb6:	4b40      	ldr	r3, [pc, #256]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cfb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cfba:	f003 0302 	and.w	r3, r3, #2
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d1ee      	bne.n	800cfa0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cfc2:	7dfb      	ldrb	r3, [r7, #23]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d105      	bne.n	800cfd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cfc8:	4b3b      	ldr	r3, [pc, #236]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cfca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfcc:	4a3a      	ldr	r2, [pc, #232]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cfce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cfd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	699b      	ldr	r3, [r3, #24]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80ad 	beq.w	800d138 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cfde:	4b36      	ldr	r3, [pc, #216]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	f003 030c 	and.w	r3, r3, #12
 800cfe6:	2b08      	cmp	r3, #8
 800cfe8:	d060      	beq.n	800d0ac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	699b      	ldr	r3, [r3, #24]
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d145      	bne.n	800d07e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cff2:	4b33      	ldr	r3, [pc, #204]	@ (800d0c0 <HAL_RCC_OscConfig+0x4b4>)
 800cff4:	2200      	movs	r2, #0
 800cff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cff8:	f7fa ff3e 	bl	8007e78 <HAL_GetTick>
 800cffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cffe:	e008      	b.n	800d012 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d000:	f7fa ff3a 	bl	8007e78 <HAL_GetTick>
 800d004:	4602      	mov	r2, r0
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	1ad3      	subs	r3, r2, r3
 800d00a:	2b02      	cmp	r3, #2
 800d00c:	d901      	bls.n	800d012 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800d00e:	2303      	movs	r3, #3
 800d010:	e093      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d012:	4b29      	ldr	r3, [pc, #164]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1f0      	bne.n	800d000 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	69da      	ldr	r2, [r3, #28]
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6a1b      	ldr	r3, [r3, #32]
 800d026:	431a      	orrs	r2, r3
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d02c:	019b      	lsls	r3, r3, #6
 800d02e:	431a      	orrs	r2, r3
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d034:	085b      	lsrs	r3, r3, #1
 800d036:	3b01      	subs	r3, #1
 800d038:	041b      	lsls	r3, r3, #16
 800d03a:	431a      	orrs	r2, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d040:	061b      	lsls	r3, r3, #24
 800d042:	431a      	orrs	r2, r3
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d048:	071b      	lsls	r3, r3, #28
 800d04a:	491b      	ldr	r1, [pc, #108]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800d04c:	4313      	orrs	r3, r2
 800d04e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d050:	4b1b      	ldr	r3, [pc, #108]	@ (800d0c0 <HAL_RCC_OscConfig+0x4b4>)
 800d052:	2201      	movs	r2, #1
 800d054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d056:	f7fa ff0f 	bl	8007e78 <HAL_GetTick>
 800d05a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d05c:	e008      	b.n	800d070 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d05e:	f7fa ff0b 	bl	8007e78 <HAL_GetTick>
 800d062:	4602      	mov	r2, r0
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	1ad3      	subs	r3, r2, r3
 800d068:	2b02      	cmp	r3, #2
 800d06a:	d901      	bls.n	800d070 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800d06c:	2303      	movs	r3, #3
 800d06e:	e064      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d070:	4b11      	ldr	r3, [pc, #68]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d0f0      	beq.n	800d05e <HAL_RCC_OscConfig+0x452>
 800d07c:	e05c      	b.n	800d138 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d07e:	4b10      	ldr	r3, [pc, #64]	@ (800d0c0 <HAL_RCC_OscConfig+0x4b4>)
 800d080:	2200      	movs	r2, #0
 800d082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d084:	f7fa fef8 	bl	8007e78 <HAL_GetTick>
 800d088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d08a:	e008      	b.n	800d09e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d08c:	f7fa fef4 	bl	8007e78 <HAL_GetTick>
 800d090:	4602      	mov	r2, r0
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	1ad3      	subs	r3, r2, r3
 800d096:	2b02      	cmp	r3, #2
 800d098:	d901      	bls.n	800d09e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800d09a:	2303      	movs	r3, #3
 800d09c:	e04d      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d09e:	4b06      	ldr	r3, [pc, #24]	@ (800d0b8 <HAL_RCC_OscConfig+0x4ac>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d1f0      	bne.n	800d08c <HAL_RCC_OscConfig+0x480>
 800d0aa:	e045      	b.n	800d138 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	699b      	ldr	r3, [r3, #24]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d107      	bne.n	800d0c4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	e040      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
 800d0b8:	40023800 	.word	0x40023800
 800d0bc:	40007000 	.word	0x40007000
 800d0c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d0c4:	4b1f      	ldr	r3, [pc, #124]	@ (800d144 <HAL_RCC_OscConfig+0x538>)
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	699b      	ldr	r3, [r3, #24]
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d030      	beq.n	800d134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d129      	bne.n	800d134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d122      	bne.n	800d134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d0ee:	68fa      	ldr	r2, [r7, #12]
 800d0f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800d0f4:	4013      	ands	r3, r2
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d0fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d0fc:	4293      	cmp	r3, r2
 800d0fe:	d119      	bne.n	800d134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d10a:	085b      	lsrs	r3, r3, #1
 800d10c:	3b01      	subs	r3, #1
 800d10e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d110:	429a      	cmp	r2, r3
 800d112:	d10f      	bne.n	800d134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d11e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d120:	429a      	cmp	r2, r3
 800d122:	d107      	bne.n	800d134 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d12e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d130:	429a      	cmp	r2, r3
 800d132:	d001      	beq.n	800d138 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	e000      	b.n	800d13a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3718      	adds	r7, #24
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	40023800 	.word	0x40023800

0800d148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d101      	bne.n	800d15a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d156:	2301      	movs	r3, #1
 800d158:	e041      	b.n	800d1de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d106      	bne.n	800d174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f7fa faa0 	bl	80076b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2202      	movs	r2, #2
 800d178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681a      	ldr	r2, [r3, #0]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	3304      	adds	r3, #4
 800d184:	4619      	mov	r1, r3
 800d186:	4610      	mov	r0, r2
 800d188:	f000 fa7e 	bl	800d688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	2201      	movs	r2, #1
 800d198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2201      	movs	r2, #1
 800d1a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2201      	movs	r2, #1
 800d1d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	3708      	adds	r7, #8
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd80      	pop	{r7, pc}
	...

0800d1e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d001      	beq.n	800d200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e04e      	b.n	800d29e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2202      	movs	r2, #2
 800d204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	68da      	ldr	r2, [r3, #12]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f042 0201 	orr.w	r2, r2, #1
 800d216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a23      	ldr	r2, [pc, #140]	@ (800d2ac <HAL_TIM_Base_Start_IT+0xc4>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d022      	beq.n	800d268 <HAL_TIM_Base_Start_IT+0x80>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d22a:	d01d      	beq.n	800d268 <HAL_TIM_Base_Start_IT+0x80>
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a1f      	ldr	r2, [pc, #124]	@ (800d2b0 <HAL_TIM_Base_Start_IT+0xc8>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d018      	beq.n	800d268 <HAL_TIM_Base_Start_IT+0x80>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a1e      	ldr	r2, [pc, #120]	@ (800d2b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800d23c:	4293      	cmp	r3, r2
 800d23e:	d013      	beq.n	800d268 <HAL_TIM_Base_Start_IT+0x80>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	4a1c      	ldr	r2, [pc, #112]	@ (800d2b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d00e      	beq.n	800d268 <HAL_TIM_Base_Start_IT+0x80>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a1b      	ldr	r2, [pc, #108]	@ (800d2bc <HAL_TIM_Base_Start_IT+0xd4>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d009      	beq.n	800d268 <HAL_TIM_Base_Start_IT+0x80>
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a19      	ldr	r2, [pc, #100]	@ (800d2c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d004      	beq.n	800d268 <HAL_TIM_Base_Start_IT+0x80>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	4a18      	ldr	r2, [pc, #96]	@ (800d2c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800d264:	4293      	cmp	r3, r2
 800d266:	d111      	bne.n	800d28c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	689b      	ldr	r3, [r3, #8]
 800d26e:	f003 0307 	and.w	r3, r3, #7
 800d272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2b06      	cmp	r3, #6
 800d278:	d010      	beq.n	800d29c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f042 0201 	orr.w	r2, r2, #1
 800d288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d28a:	e007      	b.n	800d29c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	681a      	ldr	r2, [r3, #0]
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f042 0201 	orr.w	r2, r2, #1
 800d29a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	40010000 	.word	0x40010000
 800d2b0:	40000400 	.word	0x40000400
 800d2b4:	40000800 	.word	0x40000800
 800d2b8:	40000c00 	.word	0x40000c00
 800d2bc:	40010400 	.word	0x40010400
 800d2c0:	40014000 	.word	0x40014000
 800d2c4:	40001800 	.word	0x40001800

0800d2c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	68db      	ldr	r3, [r3, #12]
 800d2d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	691b      	ldr	r3, [r3, #16]
 800d2de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	f003 0302 	and.w	r3, r3, #2
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d020      	beq.n	800d32c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f003 0302 	and.w	r3, r3, #2
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d01b      	beq.n	800d32c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f06f 0202 	mvn.w	r2, #2
 800d2fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2201      	movs	r2, #1
 800d302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	699b      	ldr	r3, [r3, #24]
 800d30a:	f003 0303 	and.w	r3, r3, #3
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d003      	beq.n	800d31a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 f999 	bl	800d64a <HAL_TIM_IC_CaptureCallback>
 800d318:	e005      	b.n	800d326 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f98b 	bl	800d636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 f99c 	bl	800d65e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	f003 0304 	and.w	r3, r3, #4
 800d332:	2b00      	cmp	r3, #0
 800d334:	d020      	beq.n	800d378 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f003 0304 	and.w	r3, r3, #4
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d01b      	beq.n	800d378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f06f 0204 	mvn.w	r2, #4
 800d348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2202      	movs	r2, #2
 800d34e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d003      	beq.n	800d366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f973 	bl	800d64a <HAL_TIM_IC_CaptureCallback>
 800d364:	e005      	b.n	800d372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d366:	6878      	ldr	r0, [r7, #4]
 800d368:	f000 f965 	bl	800d636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f976 	bl	800d65e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2200      	movs	r2, #0
 800d376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f003 0308 	and.w	r3, r3, #8
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d020      	beq.n	800d3c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f003 0308 	and.w	r3, r3, #8
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d01b      	beq.n	800d3c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f06f 0208 	mvn.w	r2, #8
 800d394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2204      	movs	r2, #4
 800d39a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	69db      	ldr	r3, [r3, #28]
 800d3a2:	f003 0303 	and.w	r3, r3, #3
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d003      	beq.n	800d3b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f94d 	bl	800d64a <HAL_TIM_IC_CaptureCallback>
 800d3b0:	e005      	b.n	800d3be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 f93f 	bl	800d636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d3b8:	6878      	ldr	r0, [r7, #4]
 800d3ba:	f000 f950 	bl	800d65e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2200      	movs	r2, #0
 800d3c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	f003 0310 	and.w	r3, r3, #16
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d020      	beq.n	800d410 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f003 0310 	and.w	r3, r3, #16
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d01b      	beq.n	800d410 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f06f 0210 	mvn.w	r2, #16
 800d3e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2208      	movs	r2, #8
 800d3e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	69db      	ldr	r3, [r3, #28]
 800d3ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d003      	beq.n	800d3fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f927 	bl	800d64a <HAL_TIM_IC_CaptureCallback>
 800d3fc:	e005      	b.n	800d40a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f919 	bl	800d636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f000 f92a 	bl	800d65e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	f003 0301 	and.w	r3, r3, #1
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00c      	beq.n	800d434 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f003 0301 	and.w	r3, r3, #1
 800d420:	2b00      	cmp	r3, #0
 800d422:	d007      	beq.n	800d434 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f06f 0201 	mvn.w	r2, #1
 800d42c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f7f8 fb20 	bl	8005a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00c      	beq.n	800d458 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d444:	2b00      	cmp	r3, #0
 800d446:	d007      	beq.n	800d458 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 fade 	bl	800da14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d458:	68bb      	ldr	r3, [r7, #8]
 800d45a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00c      	beq.n	800d47c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d007      	beq.n	800d47c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f8fb 	bl	800d672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	f003 0320 	and.w	r3, r3, #32
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00c      	beq.n	800d4a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f003 0320 	and.w	r3, r3, #32
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d007      	beq.n	800d4a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f06f 0220 	mvn.w	r2, #32
 800d498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 fab0 	bl	800da00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d4a0:	bf00      	nop
 800d4a2:	3710      	adds	r7, #16
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	d101      	bne.n	800d4c4 <HAL_TIM_ConfigClockSource+0x1c>
 800d4c0:	2302      	movs	r3, #2
 800d4c2:	e0b4      	b.n	800d62e <HAL_TIM_ConfigClockSource+0x186>
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	2202      	movs	r2, #2
 800d4d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	689b      	ldr	r3, [r3, #8]
 800d4da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d4e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d4ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d4fc:	d03e      	beq.n	800d57c <HAL_TIM_ConfigClockSource+0xd4>
 800d4fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d502:	f200 8087 	bhi.w	800d614 <HAL_TIM_ConfigClockSource+0x16c>
 800d506:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d50a:	f000 8086 	beq.w	800d61a <HAL_TIM_ConfigClockSource+0x172>
 800d50e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d512:	d87f      	bhi.n	800d614 <HAL_TIM_ConfigClockSource+0x16c>
 800d514:	2b70      	cmp	r3, #112	@ 0x70
 800d516:	d01a      	beq.n	800d54e <HAL_TIM_ConfigClockSource+0xa6>
 800d518:	2b70      	cmp	r3, #112	@ 0x70
 800d51a:	d87b      	bhi.n	800d614 <HAL_TIM_ConfigClockSource+0x16c>
 800d51c:	2b60      	cmp	r3, #96	@ 0x60
 800d51e:	d050      	beq.n	800d5c2 <HAL_TIM_ConfigClockSource+0x11a>
 800d520:	2b60      	cmp	r3, #96	@ 0x60
 800d522:	d877      	bhi.n	800d614 <HAL_TIM_ConfigClockSource+0x16c>
 800d524:	2b50      	cmp	r3, #80	@ 0x50
 800d526:	d03c      	beq.n	800d5a2 <HAL_TIM_ConfigClockSource+0xfa>
 800d528:	2b50      	cmp	r3, #80	@ 0x50
 800d52a:	d873      	bhi.n	800d614 <HAL_TIM_ConfigClockSource+0x16c>
 800d52c:	2b40      	cmp	r3, #64	@ 0x40
 800d52e:	d058      	beq.n	800d5e2 <HAL_TIM_ConfigClockSource+0x13a>
 800d530:	2b40      	cmp	r3, #64	@ 0x40
 800d532:	d86f      	bhi.n	800d614 <HAL_TIM_ConfigClockSource+0x16c>
 800d534:	2b30      	cmp	r3, #48	@ 0x30
 800d536:	d064      	beq.n	800d602 <HAL_TIM_ConfigClockSource+0x15a>
 800d538:	2b30      	cmp	r3, #48	@ 0x30
 800d53a:	d86b      	bhi.n	800d614 <HAL_TIM_ConfigClockSource+0x16c>
 800d53c:	2b20      	cmp	r3, #32
 800d53e:	d060      	beq.n	800d602 <HAL_TIM_ConfigClockSource+0x15a>
 800d540:	2b20      	cmp	r3, #32
 800d542:	d867      	bhi.n	800d614 <HAL_TIM_ConfigClockSource+0x16c>
 800d544:	2b00      	cmp	r3, #0
 800d546:	d05c      	beq.n	800d602 <HAL_TIM_ConfigClockSource+0x15a>
 800d548:	2b10      	cmp	r3, #16
 800d54a:	d05a      	beq.n	800d602 <HAL_TIM_ConfigClockSource+0x15a>
 800d54c:	e062      	b.n	800d614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d55e:	f000 f9b3 	bl	800d8c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68ba      	ldr	r2, [r7, #8]
 800d578:	609a      	str	r2, [r3, #8]
      break;
 800d57a:	e04f      	b.n	800d61c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d58c:	f000 f99c 	bl	800d8c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	689a      	ldr	r2, [r3, #8]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d59e:	609a      	str	r2, [r3, #8]
      break;
 800d5a0:	e03c      	b.n	800d61c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5ae:	461a      	mov	r2, r3
 800d5b0:	f000 f910 	bl	800d7d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2150      	movs	r1, #80	@ 0x50
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 f969 	bl	800d892 <TIM_ITRx_SetConfig>
      break;
 800d5c0:	e02c      	b.n	800d61c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f000 f92f 	bl	800d832 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2160      	movs	r1, #96	@ 0x60
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 f959 	bl	800d892 <TIM_ITRx_SetConfig>
      break;
 800d5e0:	e01c      	b.n	800d61c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	f000 f8f0 	bl	800d7d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	2140      	movs	r1, #64	@ 0x40
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 f949 	bl	800d892 <TIM_ITRx_SetConfig>
      break;
 800d600:	e00c      	b.n	800d61c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681a      	ldr	r2, [r3, #0]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4619      	mov	r1, r3
 800d60c:	4610      	mov	r0, r2
 800d60e:	f000 f940 	bl	800d892 <TIM_ITRx_SetConfig>
      break;
 800d612:	e003      	b.n	800d61c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d614:	2301      	movs	r3, #1
 800d616:	73fb      	strb	r3, [r7, #15]
      break;
 800d618:	e000      	b.n	800d61c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d61a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2201      	movs	r2, #1
 800d620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d62c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3710      	adds	r7, #16
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}

0800d636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d636:	b480      	push	{r7}
 800d638:	b083      	sub	sp, #12
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d63e:	bf00      	nop
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr

0800d64a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d64a:	b480      	push	{r7}
 800d64c:	b083      	sub	sp, #12
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d652:	bf00      	nop
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d65e:	b480      	push	{r7}
 800d660:	b083      	sub	sp, #12
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d666:	bf00      	nop
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr

0800d672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d672:	b480      	push	{r7}
 800d674:	b083      	sub	sp, #12
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d67a:	bf00      	nop
 800d67c:	370c      	adds	r7, #12
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr
	...

0800d688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	4a43      	ldr	r2, [pc, #268]	@ (800d7a8 <TIM_Base_SetConfig+0x120>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d013      	beq.n	800d6c8 <TIM_Base_SetConfig+0x40>
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6a6:	d00f      	beq.n	800d6c8 <TIM_Base_SetConfig+0x40>
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	4a40      	ldr	r2, [pc, #256]	@ (800d7ac <TIM_Base_SetConfig+0x124>)
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d00b      	beq.n	800d6c8 <TIM_Base_SetConfig+0x40>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	4a3f      	ldr	r2, [pc, #252]	@ (800d7b0 <TIM_Base_SetConfig+0x128>)
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d007      	beq.n	800d6c8 <TIM_Base_SetConfig+0x40>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	4a3e      	ldr	r2, [pc, #248]	@ (800d7b4 <TIM_Base_SetConfig+0x12c>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d003      	beq.n	800d6c8 <TIM_Base_SetConfig+0x40>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a3d      	ldr	r2, [pc, #244]	@ (800d7b8 <TIM_Base_SetConfig+0x130>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d108      	bne.n	800d6da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d6d0:	683b      	ldr	r3, [r7, #0]
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	4a32      	ldr	r2, [pc, #200]	@ (800d7a8 <TIM_Base_SetConfig+0x120>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d02b      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d6e8:	d027      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	4a2f      	ldr	r2, [pc, #188]	@ (800d7ac <TIM_Base_SetConfig+0x124>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d023      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	4a2e      	ldr	r2, [pc, #184]	@ (800d7b0 <TIM_Base_SetConfig+0x128>)
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d01f      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	4a2d      	ldr	r2, [pc, #180]	@ (800d7b4 <TIM_Base_SetConfig+0x12c>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d01b      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	4a2c      	ldr	r2, [pc, #176]	@ (800d7b8 <TIM_Base_SetConfig+0x130>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d017      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	4a2b      	ldr	r2, [pc, #172]	@ (800d7bc <TIM_Base_SetConfig+0x134>)
 800d70e:	4293      	cmp	r3, r2
 800d710:	d013      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	4a2a      	ldr	r2, [pc, #168]	@ (800d7c0 <TIM_Base_SetConfig+0x138>)
 800d716:	4293      	cmp	r3, r2
 800d718:	d00f      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	4a29      	ldr	r2, [pc, #164]	@ (800d7c4 <TIM_Base_SetConfig+0x13c>)
 800d71e:	4293      	cmp	r3, r2
 800d720:	d00b      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	4a28      	ldr	r2, [pc, #160]	@ (800d7c8 <TIM_Base_SetConfig+0x140>)
 800d726:	4293      	cmp	r3, r2
 800d728:	d007      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4a27      	ldr	r2, [pc, #156]	@ (800d7cc <TIM_Base_SetConfig+0x144>)
 800d72e:	4293      	cmp	r3, r2
 800d730:	d003      	beq.n	800d73a <TIM_Base_SetConfig+0xb2>
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4a26      	ldr	r2, [pc, #152]	@ (800d7d0 <TIM_Base_SetConfig+0x148>)
 800d736:	4293      	cmp	r3, r2
 800d738:	d108      	bne.n	800d74c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	4313      	orrs	r3, r2
 800d74a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	695b      	ldr	r3, [r3, #20]
 800d756:	4313      	orrs	r3, r2
 800d758:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	689a      	ldr	r2, [r3, #8]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	4a0e      	ldr	r2, [pc, #56]	@ (800d7a8 <TIM_Base_SetConfig+0x120>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d003      	beq.n	800d77a <TIM_Base_SetConfig+0xf2>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	4a10      	ldr	r2, [pc, #64]	@ (800d7b8 <TIM_Base_SetConfig+0x130>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d103      	bne.n	800d782 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	691a      	ldr	r2, [r3, #16]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f043 0204 	orr.w	r2, r3, #4
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2201      	movs	r2, #1
 800d792:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	68fa      	ldr	r2, [r7, #12]
 800d798:	601a      	str	r2, [r3, #0]
}
 800d79a:	bf00      	nop
 800d79c:	3714      	adds	r7, #20
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr
 800d7a6:	bf00      	nop
 800d7a8:	40010000 	.word	0x40010000
 800d7ac:	40000400 	.word	0x40000400
 800d7b0:	40000800 	.word	0x40000800
 800d7b4:	40000c00 	.word	0x40000c00
 800d7b8:	40010400 	.word	0x40010400
 800d7bc:	40014000 	.word	0x40014000
 800d7c0:	40014400 	.word	0x40014400
 800d7c4:	40014800 	.word	0x40014800
 800d7c8:	40001800 	.word	0x40001800
 800d7cc:	40001c00 	.word	0x40001c00
 800d7d0:	40002000 	.word	0x40002000

0800d7d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b087      	sub	sp, #28
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	60f8      	str	r0, [r7, #12]
 800d7dc:	60b9      	str	r1, [r7, #8]
 800d7de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6a1b      	ldr	r3, [r3, #32]
 800d7ea:	f023 0201 	bic.w	r2, r3, #1
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d7fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	011b      	lsls	r3, r3, #4
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	4313      	orrs	r3, r2
 800d808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	f023 030a 	bic.w	r3, r3, #10
 800d810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d812:	697a      	ldr	r2, [r7, #20]
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	4313      	orrs	r3, r2
 800d818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	697a      	ldr	r2, [r7, #20]
 800d824:	621a      	str	r2, [r3, #32]
}
 800d826:	bf00      	nop
 800d828:	371c      	adds	r7, #28
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr

0800d832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d832:	b480      	push	{r7}
 800d834:	b087      	sub	sp, #28
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6a1b      	ldr	r3, [r3, #32]
 800d842:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6a1b      	ldr	r3, [r3, #32]
 800d848:	f023 0210 	bic.w	r2, r3, #16
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	699b      	ldr	r3, [r3, #24]
 800d854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d85c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	031b      	lsls	r3, r3, #12
 800d862:	693a      	ldr	r2, [r7, #16]
 800d864:	4313      	orrs	r3, r2
 800d866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d86e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d870:	68bb      	ldr	r3, [r7, #8]
 800d872:	011b      	lsls	r3, r3, #4
 800d874:	697a      	ldr	r2, [r7, #20]
 800d876:	4313      	orrs	r3, r2
 800d878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	693a      	ldr	r2, [r7, #16]
 800d87e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	697a      	ldr	r2, [r7, #20]
 800d884:	621a      	str	r2, [r3, #32]
}
 800d886:	bf00      	nop
 800d888:	371c      	adds	r7, #28
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d892:	b480      	push	{r7}
 800d894:	b085      	sub	sp, #20
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d8aa:	683a      	ldr	r2, [r7, #0]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	f043 0307 	orr.w	r3, r3, #7
 800d8b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	68fa      	ldr	r2, [r7, #12]
 800d8ba:	609a      	str	r2, [r3, #8]
}
 800d8bc:	bf00      	nop
 800d8be:	3714      	adds	r7, #20
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b087      	sub	sp, #28
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	60f8      	str	r0, [r7, #12]
 800d8d0:	60b9      	str	r1, [r7, #8]
 800d8d2:	607a      	str	r2, [r7, #4]
 800d8d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	689b      	ldr	r3, [r3, #8]
 800d8da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d8e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	021a      	lsls	r2, r3, #8
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	431a      	orrs	r2, r3
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	697a      	ldr	r2, [r7, #20]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	697a      	ldr	r2, [r7, #20]
 800d8fa:	609a      	str	r2, [r3, #8]
}
 800d8fc:	bf00      	nop
 800d8fe:	371c      	adds	r7, #28
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d908:	b480      	push	{r7}
 800d90a:	b085      	sub	sp, #20
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d101      	bne.n	800d920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d91c:	2302      	movs	r3, #2
 800d91e:	e05a      	b.n	800d9d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2201      	movs	r2, #1
 800d924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2202      	movs	r2, #2
 800d92c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	689b      	ldr	r3, [r3, #8]
 800d93e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d946:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	68fa      	ldr	r2, [r7, #12]
 800d94e:	4313      	orrs	r3, r2
 800d950:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	68fa      	ldr	r2, [r7, #12]
 800d958:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a21      	ldr	r2, [pc, #132]	@ (800d9e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d022      	beq.n	800d9aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d96c:	d01d      	beq.n	800d9aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a1d      	ldr	r2, [pc, #116]	@ (800d9e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d018      	beq.n	800d9aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4a1b      	ldr	r2, [pc, #108]	@ (800d9ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d97e:	4293      	cmp	r3, r2
 800d980:	d013      	beq.n	800d9aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	4a1a      	ldr	r2, [pc, #104]	@ (800d9f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d988:	4293      	cmp	r3, r2
 800d98a:	d00e      	beq.n	800d9aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a18      	ldr	r2, [pc, #96]	@ (800d9f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d009      	beq.n	800d9aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	4a17      	ldr	r2, [pc, #92]	@ (800d9f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d99c:	4293      	cmp	r3, r2
 800d99e:	d004      	beq.n	800d9aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	4a15      	ldr	r2, [pc, #84]	@ (800d9fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d9a6:	4293      	cmp	r3, r2
 800d9a8:	d10c      	bne.n	800d9c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	68ba      	ldr	r2, [r7, #8]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	68ba      	ldr	r2, [r7, #8]
 800d9c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2201      	movs	r2, #1
 800d9c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3714      	adds	r7, #20
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr
 800d9e2:	bf00      	nop
 800d9e4:	40010000 	.word	0x40010000
 800d9e8:	40000400 	.word	0x40000400
 800d9ec:	40000800 	.word	0x40000800
 800d9f0:	40000c00 	.word	0x40000c00
 800d9f4:	40010400 	.word	0x40010400
 800d9f8:	40014000 	.word	0x40014000
 800d9fc:	40001800 	.word	0x40001800

0800da00 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800da14:	b480      	push	{r7}
 800da16:	b083      	sub	sp, #12
 800da18:	af00      	add	r7, sp, #0
 800da1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800da1c:	bf00      	nop
 800da1e:	370c      	adds	r7, #12
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d101      	bne.n	800da3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800da36:	2301      	movs	r3, #1
 800da38:	e042      	b.n	800dac0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f7f9 fe56 	bl	8007700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2224      	movs	r2, #36	@ 0x24
 800da58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800da6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f001 f905 	bl	800ec7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	691a      	ldr	r2, [r3, #16]
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800da80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	695a      	ldr	r2, [r3, #20]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800da90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	68da      	ldr	r2, [r3, #12]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800daa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2220      	movs	r2, #32
 800daac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2220      	movs	r2, #32
 800dab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d101      	bne.n	800dada <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800dad6:	2301      	movs	r3, #1
 800dad8:	e024      	b.n	800db24 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2224      	movs	r2, #36	@ 0x24
 800dade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	68da      	ldr	r2, [r3, #12]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800daf0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7f9 ff64 	bl	80079c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2200      	movs	r2, #0
 800db18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2200      	movs	r2, #0
 800db1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b08a      	sub	sp, #40	@ 0x28
 800db30:	af02      	add	r7, sp, #8
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	4613      	mov	r3, r2
 800db3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800db3c:	2300      	movs	r3, #0
 800db3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800db46:	b2db      	uxtb	r3, r3
 800db48:	2b20      	cmp	r3, #32
 800db4a:	d175      	bne.n	800dc38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d002      	beq.n	800db58 <HAL_UART_Transmit+0x2c>
 800db52:	88fb      	ldrh	r3, [r7, #6]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d101      	bne.n	800db5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800db58:	2301      	movs	r3, #1
 800db5a:	e06e      	b.n	800dc3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2221      	movs	r2, #33	@ 0x21
 800db66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800db6a:	f7fa f985 	bl	8007e78 <HAL_GetTick>
 800db6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	88fa      	ldrh	r2, [r7, #6]
 800db74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	88fa      	ldrh	r2, [r7, #6]
 800db7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	689b      	ldr	r3, [r3, #8]
 800db80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800db84:	d108      	bne.n	800db98 <HAL_UART_Transmit+0x6c>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	691b      	ldr	r3, [r3, #16]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d104      	bne.n	800db98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	61bb      	str	r3, [r7, #24]
 800db96:	e003      	b.n	800dba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db9c:	2300      	movs	r3, #0
 800db9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800dba0:	e02e      	b.n	800dc00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	2180      	movs	r1, #128	@ 0x80
 800dbac:	68f8      	ldr	r0, [r7, #12]
 800dbae:	f000 fda4 	bl	800e6fa <UART_WaitOnFlagUntilTimeout>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d005      	beq.n	800dbc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2220      	movs	r2, #32
 800dbbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	e03a      	b.n	800dc3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10b      	bne.n	800dbe2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	881b      	ldrh	r3, [r3, #0]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dbd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	3302      	adds	r3, #2
 800dbde:	61bb      	str	r3, [r7, #24]
 800dbe0:	e007      	b.n	800dbf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	781a      	ldrb	r2, [r3, #0]
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	3301      	adds	r3, #1
 800dbf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dbf6:	b29b      	uxth	r3, r3
 800dbf8:	3b01      	subs	r3, #1
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1cb      	bne.n	800dba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	2200      	movs	r2, #0
 800dc12:	2140      	movs	r1, #64	@ 0x40
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 fd70 	bl	800e6fa <UART_WaitOnFlagUntilTimeout>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d005      	beq.n	800dc2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2220      	movs	r2, #32
 800dc24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	e006      	b.n	800dc3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2220      	movs	r2, #32
 800dc30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800dc34:	2300      	movs	r3, #0
 800dc36:	e000      	b.n	800dc3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800dc38:	2302      	movs	r3, #2
  }
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3720      	adds	r7, #32
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b08a      	sub	sp, #40	@ 0x28
 800dc46:	af02      	add	r7, sp, #8
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	603b      	str	r3, [r7, #0]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800dc52:	2300      	movs	r3, #0
 800dc54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	2b20      	cmp	r3, #32
 800dc60:	f040 8081 	bne.w	800dd66 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d002      	beq.n	800dc70 <HAL_UART_Receive+0x2e>
 800dc6a:	88fb      	ldrh	r3, [r7, #6]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d101      	bne.n	800dc74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e079      	b.n	800dd68 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2222      	movs	r2, #34	@ 0x22
 800dc7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800dc88:	f7fa f8f6 	bl	8007e78 <HAL_GetTick>
 800dc8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	88fa      	ldrh	r2, [r7, #6]
 800dc92:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	88fa      	ldrh	r2, [r7, #6]
 800dc98:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dca2:	d108      	bne.n	800dcb6 <HAL_UART_Receive+0x74>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	691b      	ldr	r3, [r3, #16]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d104      	bne.n	800dcb6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800dcac:	2300      	movs	r3, #0
 800dcae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	61bb      	str	r3, [r7, #24]
 800dcb4:	e003      	b.n	800dcbe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800dcbe:	e047      	b.n	800dd50 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	697b      	ldr	r3, [r7, #20]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	2120      	movs	r1, #32
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f000 fd15 	bl	800e6fa <UART_WaitOnFlagUntilTimeout>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d005      	beq.n	800dce2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	2220      	movs	r2, #32
 800dcda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800dcde:	2303      	movs	r3, #3
 800dce0:	e042      	b.n	800dd68 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800dce2:	69fb      	ldr	r3, [r7, #28]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10c      	bne.n	800dd02 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	b29b      	uxth	r3, r3
 800dcf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dcfa:	69bb      	ldr	r3, [r7, #24]
 800dcfc:	3302      	adds	r3, #2
 800dcfe:	61bb      	str	r3, [r7, #24]
 800dd00:	e01f      	b.n	800dd42 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	689b      	ldr	r3, [r3, #8]
 800dd06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd0a:	d007      	beq.n	800dd1c <HAL_UART_Receive+0xda>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10a      	bne.n	800dd2a <HAL_UART_Receive+0xe8>
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	691b      	ldr	r3, [r3, #16]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d106      	bne.n	800dd2a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	701a      	strb	r2, [r3, #0]
 800dd28:	e008      	b.n	800dd3c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	685b      	ldr	r3, [r3, #4]
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800dd3c:	69fb      	ldr	r3, [r7, #28]
 800dd3e:	3301      	adds	r3, #1
 800dd40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	b29a      	uxth	r2, r3
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d1b2      	bne.n	800dcc0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	2220      	movs	r2, #32
 800dd5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	e000      	b.n	800dd68 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800dd66:	2302      	movs	r3, #2
  }
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3720      	adds	r7, #32
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b08c      	sub	sp, #48	@ 0x30
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	60f8      	str	r0, [r7, #12]
 800dd78:	60b9      	str	r1, [r7, #8]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd84:	b2db      	uxtb	r3, r3
 800dd86:	2b20      	cmp	r3, #32
 800dd88:	d162      	bne.n	800de50 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd8a:	68bb      	ldr	r3, [r7, #8]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <HAL_UART_Transmit_DMA+0x26>
 800dd90:	88fb      	ldrh	r3, [r7, #6]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d101      	bne.n	800dd9a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800dd96:	2301      	movs	r3, #1
 800dd98:	e05b      	b.n	800de52 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	88fa      	ldrh	r2, [r7, #6]
 800dda4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	88fa      	ldrh	r2, [r7, #6]
 800ddaa:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2221      	movs	r2, #33	@ 0x21
 800ddb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddbe:	4a27      	ldr	r2, [pc, #156]	@ (800de5c <HAL_UART_Transmit_DMA+0xec>)
 800ddc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddc6:	4a26      	ldr	r2, [pc, #152]	@ (800de60 <HAL_UART_Transmit_DMA+0xf0>)
 800ddc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddce:	4a25      	ldr	r2, [pc, #148]	@ (800de64 <HAL_UART_Transmit_DMA+0xf4>)
 800ddd0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ddda:	f107 0308 	add.w	r3, r7, #8
 800ddde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800dde4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde6:	6819      	ldr	r1, [r3, #0]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3304      	adds	r3, #4
 800ddee:	461a      	mov	r2, r3
 800ddf0:	88fb      	ldrh	r3, [r7, #6]
 800ddf2:	f7fa fed1 	bl	8008b98 <HAL_DMA_Start_IT>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d008      	beq.n	800de0e <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2210      	movs	r2, #16
 800de00:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	2220      	movs	r2, #32
 800de06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800de0a:	2301      	movs	r3, #1
 800de0c:	e021      	b.n	800de52 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800de16:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	3314      	adds	r3, #20
 800de1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	e853 3f00 	ldrex	r3, [r3]
 800de26:	617b      	str	r3, [r7, #20]
   return(result);
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3314      	adds	r3, #20
 800de36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de38:	627a      	str	r2, [r7, #36]	@ 0x24
 800de3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de3c:	6a39      	ldr	r1, [r7, #32]
 800de3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de40:	e841 2300 	strex	r3, r2, [r1]
 800de44:	61fb      	str	r3, [r7, #28]
   return(result);
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d1e5      	bne.n	800de18 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800de4c:	2300      	movs	r3, #0
 800de4e:	e000      	b.n	800de52 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800de50:	2302      	movs	r3, #2
  }
}
 800de52:	4618      	mov	r0, r3
 800de54:	3730      	adds	r7, #48	@ 0x30
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	0800e449 	.word	0x0800e449
 800de60:	0800e4e3 	.word	0x0800e4e3
 800de64:	0800e667 	.word	0x0800e667

0800de68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	4613      	mov	r3, r2
 800de74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b20      	cmp	r3, #32
 800de80:	d112      	bne.n	800dea8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d002      	beq.n	800de8e <HAL_UART_Receive_DMA+0x26>
 800de88:	88fb      	ldrh	r3, [r7, #6]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d101      	bne.n	800de92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e00b      	b.n	800deaa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	2200      	movs	r2, #0
 800de96:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800de98:	88fb      	ldrh	r3, [r7, #6]
 800de9a:	461a      	mov	r2, r3
 800de9c:	68b9      	ldr	r1, [r7, #8]
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f000 fc84 	bl	800e7ac <UART_Start_Receive_DMA>
 800dea4:	4603      	mov	r3, r0
 800dea6:	e000      	b.n	800deaa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800dea8:	2302      	movs	r3, #2
  }
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
	...

0800deb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b0ba      	sub	sp, #232	@ 0xe8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800deda:	2300      	movs	r3, #0
 800dedc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800dee0:	2300      	movs	r3, #0
 800dee2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800dee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800deea:	f003 030f 	and.w	r3, r3, #15
 800deee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800def2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10f      	bne.n	800df1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800defa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800defe:	f003 0320 	and.w	r3, r3, #32
 800df02:	2b00      	cmp	r3, #0
 800df04:	d009      	beq.n	800df1a <HAL_UART_IRQHandler+0x66>
 800df06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df0a:	f003 0320 	and.w	r3, r3, #32
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d003      	beq.n	800df1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fdf4 	bl	800eb00 <UART_Receive_IT>
      return;
 800df18:	e273      	b.n	800e402 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800df1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f000 80de 	beq.w	800e0e0 <HAL_UART_IRQHandler+0x22c>
 800df24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df28:	f003 0301 	and.w	r3, r3, #1
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d106      	bne.n	800df3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800df30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 80d1 	beq.w	800e0e0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800df3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df42:	f003 0301 	and.w	r3, r3, #1
 800df46:	2b00      	cmp	r3, #0
 800df48:	d00b      	beq.n	800df62 <HAL_UART_IRQHandler+0xae>
 800df4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800df4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800df52:	2b00      	cmp	r3, #0
 800df54:	d005      	beq.n	800df62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df5a:	f043 0201 	orr.w	r2, r3, #1
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800df62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df66:	f003 0304 	and.w	r3, r3, #4
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d00b      	beq.n	800df86 <HAL_UART_IRQHandler+0xd2>
 800df6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	2b00      	cmp	r3, #0
 800df78:	d005      	beq.n	800df86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800df7e:	f043 0202 	orr.w	r2, r3, #2
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800df86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df8a:	f003 0302 	and.w	r3, r3, #2
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d00b      	beq.n	800dfaa <HAL_UART_IRQHandler+0xf6>
 800df92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800df96:	f003 0301 	and.w	r3, r3, #1
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d005      	beq.n	800dfaa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfa2:	f043 0204 	orr.w	r2, r3, #4
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800dfaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfae:	f003 0308 	and.w	r3, r3, #8
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d011      	beq.n	800dfda <HAL_UART_IRQHandler+0x126>
 800dfb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dfba:	f003 0320 	and.w	r3, r3, #32
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d105      	bne.n	800dfce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800dfc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dfc6:	f003 0301 	and.w	r3, r3, #1
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d005      	beq.n	800dfda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfd2:	f043 0208 	orr.w	r2, r3, #8
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f000 820a 	beq.w	800e3f8 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dfe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfe8:	f003 0320 	and.w	r3, r3, #32
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d008      	beq.n	800e002 <HAL_UART_IRQHandler+0x14e>
 800dff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dff4:	f003 0320 	and.w	r3, r3, #32
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 fd7f 	bl	800eb00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	695b      	ldr	r3, [r3, #20]
 800e008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e00c:	2b40      	cmp	r3, #64	@ 0x40
 800e00e:	bf0c      	ite	eq
 800e010:	2301      	moveq	r3, #1
 800e012:	2300      	movne	r3, #0
 800e014:	b2db      	uxtb	r3, r3
 800e016:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e01e:	f003 0308 	and.w	r3, r3, #8
 800e022:	2b00      	cmp	r3, #0
 800e024:	d103      	bne.n	800e02e <HAL_UART_IRQHandler+0x17a>
 800e026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d04f      	beq.n	800e0ce <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 fc8a 	bl	800e948 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e03e:	2b40      	cmp	r3, #64	@ 0x40
 800e040:	d141      	bne.n	800e0c6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	3314      	adds	r3, #20
 800e048:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e04c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e050:	e853 3f00 	ldrex	r3, [r3]
 800e054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e058:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e05c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e060:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	3314      	adds	r3, #20
 800e06a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e06e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e072:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e076:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e07a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e07e:	e841 2300 	strex	r3, r2, [r1]
 800e082:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e086:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d1d9      	bne.n	800e042 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e092:	2b00      	cmp	r3, #0
 800e094:	d013      	beq.n	800e0be <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e09a:	4a8a      	ldr	r2, [pc, #552]	@ (800e2c4 <HAL_UART_IRQHandler+0x410>)
 800e09c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fa fe40 	bl	8008d28 <HAL_DMA_Abort_IT>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d016      	beq.n	800e0dc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0b4:	687a      	ldr	r2, [r7, #4]
 800e0b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e0b8:	4610      	mov	r0, r2
 800e0ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0bc:	e00e      	b.n	800e0dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f9ac 	bl	800e41c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0c4:	e00a      	b.n	800e0dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 f9a8 	bl	800e41c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0cc:	e006      	b.n	800e0dc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f9a4 	bl	800e41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800e0da:	e18d      	b.n	800e3f8 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0dc:	bf00      	nop
    return;
 800e0de:	e18b      	b.n	800e3f8 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0e4:	2b01      	cmp	r3, #1
 800e0e6:	f040 8167 	bne.w	800e3b8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e0ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e0ee:	f003 0310 	and.w	r3, r3, #16
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	f000 8160 	beq.w	800e3b8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800e0f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e0fc:	f003 0310 	and.w	r3, r3, #16
 800e100:	2b00      	cmp	r3, #0
 800e102:	f000 8159 	beq.w	800e3b8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e106:	2300      	movs	r3, #0
 800e108:	60bb      	str	r3, [r7, #8]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	60bb      	str	r3, [r7, #8]
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	685b      	ldr	r3, [r3, #4]
 800e118:	60bb      	str	r3, [r7, #8]
 800e11a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e126:	2b40      	cmp	r3, #64	@ 0x40
 800e128:	f040 80ce 	bne.w	800e2c8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f000 80a9 	beq.w	800e294 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e146:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e14a:	429a      	cmp	r2, r3
 800e14c:	f080 80a2 	bcs.w	800e294 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e156:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e15c:	69db      	ldr	r3, [r3, #28]
 800e15e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e162:	f000 8088 	beq.w	800e276 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	330c      	adds	r3, #12
 800e16c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e170:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e174:	e853 3f00 	ldrex	r3, [r3]
 800e178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e17c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	330c      	adds	r3, #12
 800e18e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e192:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e19e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e1a2:	e841 2300 	strex	r3, r2, [r1]
 800e1a6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e1aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d1d9      	bne.n	800e166 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	3314      	adds	r3, #20
 800e1b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e1bc:	e853 3f00 	ldrex	r3, [r3]
 800e1c0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e1c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e1c4:	f023 0301 	bic.w	r3, r3, #1
 800e1c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3314      	adds	r3, #20
 800e1d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e1d6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e1da:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1dc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e1de:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e1e2:	e841 2300 	strex	r3, r2, [r1]
 800e1e6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e1e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d1e1      	bne.n	800e1b2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3314      	adds	r3, #20
 800e1f4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e1fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	3314      	adds	r3, #20
 800e20e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e212:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e214:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e216:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e218:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e21a:	e841 2300 	strex	r3, r2, [r1]
 800e21e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e220:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e222:	2b00      	cmp	r3, #0
 800e224:	d1e3      	bne.n	800e1ee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2220      	movs	r2, #32
 800e22a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	2200      	movs	r2, #0
 800e232:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	330c      	adds	r3, #12
 800e23a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e23c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e23e:	e853 3f00 	ldrex	r3, [r3]
 800e242:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e244:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e246:	f023 0310 	bic.w	r3, r3, #16
 800e24a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	330c      	adds	r3, #12
 800e254:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e258:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e25a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e25c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e25e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e260:	e841 2300 	strex	r3, r2, [r1]
 800e264:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e266:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1e3      	bne.n	800e234 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e270:	4618      	mov	r0, r3
 800e272:	f7fa fce9 	bl	8008c48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2202      	movs	r2, #2
 800e27a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e284:	b29b      	uxth	r3, r3
 800e286:	1ad3      	subs	r3, r2, r3
 800e288:	b29b      	uxth	r3, r3
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f000 f8cf 	bl	800e430 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800e292:	e0b3      	b.n	800e3fc <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e298:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e29c:	429a      	cmp	r2, r3
 800e29e:	f040 80ad 	bne.w	800e3fc <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e2a6:	69db      	ldr	r3, [r3, #28]
 800e2a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2ac:	f040 80a6 	bne.w	800e3fc <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2202      	movs	r2, #2
 800e2b4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e2ba:	4619      	mov	r1, r3
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 f8b7 	bl	800e430 <HAL_UARTEx_RxEventCallback>
      return;
 800e2c2:	e09b      	b.n	800e3fc <HAL_UART_IRQHandler+0x548>
 800e2c4:	0800ea0f 	.word	0x0800ea0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e2d0:	b29b      	uxth	r3, r3
 800e2d2:	1ad3      	subs	r3, r2, r3
 800e2d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	f000 808e 	beq.w	800e400 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800e2e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f000 8089 	beq.w	800e400 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	330c      	adds	r3, #12
 800e2f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f8:	e853 3f00 	ldrex	r3, [r3]
 800e2fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e304:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	330c      	adds	r3, #12
 800e30e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800e312:	647a      	str	r2, [r7, #68]	@ 0x44
 800e314:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e316:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e318:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e31a:	e841 2300 	strex	r3, r2, [r1]
 800e31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e322:	2b00      	cmp	r3, #0
 800e324:	d1e3      	bne.n	800e2ee <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	3314      	adds	r3, #20
 800e32c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e330:	e853 3f00 	ldrex	r3, [r3]
 800e334:	623b      	str	r3, [r7, #32]
   return(result);
 800e336:	6a3b      	ldr	r3, [r7, #32]
 800e338:	f023 0301 	bic.w	r3, r3, #1
 800e33c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	3314      	adds	r3, #20
 800e346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e34a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e34c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e34e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e352:	e841 2300 	strex	r3, r2, [r1]
 800e356:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d1e3      	bne.n	800e326 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	2220      	movs	r2, #32
 800e362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2200      	movs	r2, #0
 800e36a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	330c      	adds	r3, #12
 800e372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	e853 3f00 	ldrex	r3, [r3]
 800e37a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	f023 0310 	bic.w	r3, r3, #16
 800e382:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	330c      	adds	r3, #12
 800e38c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800e390:	61fa      	str	r2, [r7, #28]
 800e392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e394:	69b9      	ldr	r1, [r7, #24]
 800e396:	69fa      	ldr	r2, [r7, #28]
 800e398:	e841 2300 	strex	r3, r2, [r1]
 800e39c:	617b      	str	r3, [r7, #20]
   return(result);
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d1e3      	bne.n	800e36c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	2202      	movs	r2, #2
 800e3a8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e3aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f83d 	bl	800e430 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800e3b6:	e023      	b.n	800e400 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800e3b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d009      	beq.n	800e3d8 <HAL_UART_IRQHandler+0x524>
 800e3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d003      	beq.n	800e3d8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	f000 fb2d 	bl	800ea30 <UART_Transmit_IT>
    return;
 800e3d6:	e014      	b.n	800e402 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800e3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e3dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00e      	beq.n	800e402 <HAL_UART_IRQHandler+0x54e>
 800e3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d008      	beq.n	800e402 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fb6d 	bl	800ead0 <UART_EndTransmit_IT>
    return;
 800e3f6:	e004      	b.n	800e402 <HAL_UART_IRQHandler+0x54e>
    return;
 800e3f8:	bf00      	nop
 800e3fa:	e002      	b.n	800e402 <HAL_UART_IRQHandler+0x54e>
      return;
 800e3fc:	bf00      	nop
 800e3fe:	e000      	b.n	800e402 <HAL_UART_IRQHandler+0x54e>
      return;
 800e400:	bf00      	nop
  }
}
 800e402:	37e8      	adds	r7, #232	@ 0xe8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e408:	b480      	push	{r7}
 800e40a:	b083      	sub	sp, #12
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e41c:	b480      	push	{r7}
 800e41e:	b083      	sub	sp, #12
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800e424:	bf00      	nop
 800e426:	370c      	adds	r7, #12
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e430:	b480      	push	{r7}
 800e432:	b083      	sub	sp, #12
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e43c:	bf00      	nop
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b090      	sub	sp, #64	@ 0x40
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e460:	2b00      	cmp	r3, #0
 800e462:	d137      	bne.n	800e4d4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800e464:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e466:	2200      	movs	r2, #0
 800e468:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	3314      	adds	r3, #20
 800e470:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e474:	e853 3f00 	ldrex	r3, [r3]
 800e478:	623b      	str	r3, [r7, #32]
   return(result);
 800e47a:	6a3b      	ldr	r3, [r7, #32]
 800e47c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e480:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e482:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	3314      	adds	r3, #20
 800e488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e48a:	633a      	str	r2, [r7, #48]	@ 0x30
 800e48c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e492:	e841 2300 	strex	r3, r2, [r1]
 800e496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1e5      	bne.n	800e46a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	330c      	adds	r3, #12
 800e4a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a6:	693b      	ldr	r3, [r7, #16]
 800e4a8:	e853 3f00 	ldrex	r3, [r3]
 800e4ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	330c      	adds	r3, #12
 800e4bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e4be:	61fa      	str	r2, [r7, #28]
 800e4c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c2:	69b9      	ldr	r1, [r7, #24]
 800e4c4:	69fa      	ldr	r2, [r7, #28]
 800e4c6:	e841 2300 	strex	r3, r2, [r1]
 800e4ca:	617b      	str	r3, [r7, #20]
   return(result);
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d1e5      	bne.n	800e49e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4d2:	e002      	b.n	800e4da <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800e4d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e4d6:	f7f7 faef 	bl	8005ab8 <HAL_UART_TxCpltCallback>
}
 800e4da:	bf00      	nop
 800e4dc:	3740      	adds	r7, #64	@ 0x40
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b084      	sub	sp, #16
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4ee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f7ff ff89 	bl	800e408 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4f6:	bf00      	nop
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b09c      	sub	sp, #112	@ 0x70
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e50a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e516:	2b00      	cmp	r3, #0
 800e518:	d172      	bne.n	800e600 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800e51a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e51c:	2200      	movs	r2, #0
 800e51e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	330c      	adds	r3, #12
 800e526:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e52a:	e853 3f00 	ldrex	r3, [r3]
 800e52e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e532:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e536:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	330c      	adds	r3, #12
 800e53e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e540:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e542:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e544:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e546:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e548:	e841 2300 	strex	r3, r2, [r1]
 800e54c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e550:	2b00      	cmp	r3, #0
 800e552:	d1e5      	bne.n	800e520 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	3314      	adds	r3, #20
 800e55a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e55e:	e853 3f00 	ldrex	r3, [r3]
 800e562:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800e564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e566:	f023 0301 	bic.w	r3, r3, #1
 800e56a:	667b      	str	r3, [r7, #100]	@ 0x64
 800e56c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	3314      	adds	r3, #20
 800e572:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e574:	647a      	str	r2, [r7, #68]	@ 0x44
 800e576:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e578:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e57a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e57c:	e841 2300 	strex	r3, r2, [r1]
 800e580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e584:	2b00      	cmp	r3, #0
 800e586:	d1e5      	bne.n	800e554 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e588:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	3314      	adds	r3, #20
 800e58e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e592:	e853 3f00 	ldrex	r3, [r3]
 800e596:	623b      	str	r3, [r7, #32]
   return(result);
 800e598:	6a3b      	ldr	r3, [r7, #32]
 800e59a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e59e:	663b      	str	r3, [r7, #96]	@ 0x60
 800e5a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	3314      	adds	r3, #20
 800e5a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800e5a8:	633a      	str	r2, [r7, #48]	@ 0x30
 800e5aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e5ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e5b0:	e841 2300 	strex	r3, r2, [r1]
 800e5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d1e5      	bne.n	800e588 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5be:	2220      	movs	r2, #32
 800e5c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d119      	bne.n	800e600 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	330c      	adds	r3, #12
 800e5d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	e853 3f00 	ldrex	r3, [r3]
 800e5da:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	f023 0310 	bic.w	r3, r3, #16
 800e5e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e5e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	330c      	adds	r3, #12
 800e5ea:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e5ec:	61fa      	str	r2, [r7, #28]
 800e5ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5f0:	69b9      	ldr	r1, [r7, #24]
 800e5f2:	69fa      	ldr	r2, [r7, #28]
 800e5f4:	e841 2300 	strex	r3, r2, [r1]
 800e5f8:	617b      	str	r3, [r7, #20]
   return(result);
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d1e5      	bne.n	800e5cc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e600:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e602:	2200      	movs	r2, #0
 800e604:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d106      	bne.n	800e61c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e60e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e610:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e612:	4619      	mov	r1, r3
 800e614:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e616:	f7ff ff0b 	bl	800e430 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e61a:	e002      	b.n	800e622 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800e61c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e61e:	f7f6 f9db 	bl	80049d8 <HAL_UART_RxCpltCallback>
}
 800e622:	bf00      	nop
 800e624:	3770      	adds	r7, #112	@ 0x70
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b084      	sub	sp, #16
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e636:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2201      	movs	r2, #1
 800e63c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e642:	2b01      	cmp	r3, #1
 800e644:	d108      	bne.n	800e658 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e64a:	085b      	lsrs	r3, r3, #1
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	4619      	mov	r1, r3
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f7ff feed 	bl	800e430 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e656:	e002      	b.n	800e65e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f7f6 f9a7 	bl	80049ac <HAL_UART_RxHalfCpltCallback>
}
 800e65e:	bf00      	nop
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}

0800e666 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b084      	sub	sp, #16
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800e66e:	2300      	movs	r3, #0
 800e670:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e676:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	695b      	ldr	r3, [r3, #20]
 800e67e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e682:	2b80      	cmp	r3, #128	@ 0x80
 800e684:	bf0c      	ite	eq
 800e686:	2301      	moveq	r3, #1
 800e688:	2300      	movne	r3, #0
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800e68e:	68bb      	ldr	r3, [r7, #8]
 800e690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e694:	b2db      	uxtb	r3, r3
 800e696:	2b21      	cmp	r3, #33	@ 0x21
 800e698:	d108      	bne.n	800e6ac <UART_DMAError+0x46>
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d005      	beq.n	800e6ac <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800e6a6:	68b8      	ldr	r0, [r7, #8]
 800e6a8:	f000 f926 	bl	800e8f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6b6:	2b40      	cmp	r3, #64	@ 0x40
 800e6b8:	bf0c      	ite	eq
 800e6ba:	2301      	moveq	r3, #1
 800e6bc:	2300      	movne	r3, #0
 800e6be:	b2db      	uxtb	r3, r3
 800e6c0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e6c8:	b2db      	uxtb	r3, r3
 800e6ca:	2b22      	cmp	r3, #34	@ 0x22
 800e6cc:	d108      	bne.n	800e6e0 <UART_DMAError+0x7a>
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d005      	beq.n	800e6e0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2200      	movs	r2, #0
 800e6d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800e6da:	68b8      	ldr	r0, [r7, #8]
 800e6dc:	f000 f934 	bl	800e948 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6e4:	f043 0210 	orr.w	r2, r3, #16
 800e6e8:	68bb      	ldr	r3, [r7, #8]
 800e6ea:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e6ec:	68b8      	ldr	r0, [r7, #8]
 800e6ee:	f7ff fe95 	bl	800e41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e6f2:	bf00      	nop
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b086      	sub	sp, #24
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	60f8      	str	r0, [r7, #12]
 800e702:	60b9      	str	r1, [r7, #8]
 800e704:	603b      	str	r3, [r7, #0]
 800e706:	4613      	mov	r3, r2
 800e708:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e70a:	e03b      	b.n	800e784 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e70c:	6a3b      	ldr	r3, [r7, #32]
 800e70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e712:	d037      	beq.n	800e784 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e714:	f7f9 fbb0 	bl	8007e78 <HAL_GetTick>
 800e718:	4602      	mov	r2, r0
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	1ad3      	subs	r3, r2, r3
 800e71e:	6a3a      	ldr	r2, [r7, #32]
 800e720:	429a      	cmp	r2, r3
 800e722:	d302      	bcc.n	800e72a <UART_WaitOnFlagUntilTimeout+0x30>
 800e724:	6a3b      	ldr	r3, [r7, #32]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d101      	bne.n	800e72e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e72a:	2303      	movs	r3, #3
 800e72c:	e03a      	b.n	800e7a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	f003 0304 	and.w	r3, r3, #4
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d023      	beq.n	800e784 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	2b80      	cmp	r3, #128	@ 0x80
 800e740:	d020      	beq.n	800e784 <UART_WaitOnFlagUntilTimeout+0x8a>
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	2b40      	cmp	r3, #64	@ 0x40
 800e746:	d01d      	beq.n	800e784 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	f003 0308 	and.w	r3, r3, #8
 800e752:	2b08      	cmp	r3, #8
 800e754:	d116      	bne.n	800e784 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800e756:	2300      	movs	r3, #0
 800e758:	617b      	str	r3, [r7, #20]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	617b      	str	r3, [r7, #20]
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	617b      	str	r3, [r7, #20]
 800e76a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e76c:	68f8      	ldr	r0, [r7, #12]
 800e76e:	f000 f8eb 	bl	800e948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	2208      	movs	r2, #8
 800e776:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e780:	2301      	movs	r3, #1
 800e782:	e00f      	b.n	800e7a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	681a      	ldr	r2, [r3, #0]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	4013      	ands	r3, r2
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	429a      	cmp	r2, r3
 800e792:	bf0c      	ite	eq
 800e794:	2301      	moveq	r3, #1
 800e796:	2300      	movne	r3, #0
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	461a      	mov	r2, r3
 800e79c:	79fb      	ldrb	r3, [r7, #7]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d0b4      	beq.n	800e70c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3718      	adds	r7, #24
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}

0800e7ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b098      	sub	sp, #96	@ 0x60
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	60b9      	str	r1, [r7, #8]
 800e7b6:	4613      	mov	r3, r2
 800e7b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800e7ba:	68ba      	ldr	r2, [r7, #8]
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	88fa      	ldrh	r2, [r7, #6]
 800e7c4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	2222      	movs	r2, #34	@ 0x22
 800e7d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7d8:	4a44      	ldr	r2, [pc, #272]	@ (800e8ec <UART_Start_Receive_DMA+0x140>)
 800e7da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7e0:	4a43      	ldr	r2, [pc, #268]	@ (800e8f0 <UART_Start_Receive_DMA+0x144>)
 800e7e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7e8:	4a42      	ldr	r2, [pc, #264]	@ (800e8f4 <UART_Start_Receive_DMA+0x148>)
 800e7ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800e7f4:	f107 0308 	add.w	r3, r7, #8
 800e7f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	3304      	adds	r3, #4
 800e804:	4619      	mov	r1, r3
 800e806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	88fb      	ldrh	r3, [r7, #6]
 800e80c:	f7fa f9c4 	bl	8008b98 <HAL_DMA_Start_IT>
 800e810:	4603      	mov	r3, r0
 800e812:	2b00      	cmp	r3, #0
 800e814:	d008      	beq.n	800e828 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	2210      	movs	r2, #16
 800e81a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2220      	movs	r2, #32
 800e820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800e824:	2301      	movs	r3, #1
 800e826:	e05d      	b.n	800e8e4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800e828:	2300      	movs	r3, #0
 800e82a:	613b      	str	r3, [r7, #16]
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	613b      	str	r3, [r7, #16]
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	613b      	str	r3, [r7, #16]
 800e83c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	691b      	ldr	r3, [r3, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d019      	beq.n	800e87a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	330c      	adds	r3, #12
 800e84c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e84e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e850:	e853 3f00 	ldrex	r3, [r3]
 800e854:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800e856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e85c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	330c      	adds	r3, #12
 800e864:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e866:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800e868:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e86a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800e86c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e86e:	e841 2300 	strex	r3, r2, [r1]
 800e872:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800e874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1e5      	bne.n	800e846 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3314      	adds	r3, #20
 800e880:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e884:	e853 3f00 	ldrex	r3, [r3]
 800e888:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e88a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e88c:	f043 0301 	orr.w	r3, r3, #1
 800e890:	657b      	str	r3, [r7, #84]	@ 0x54
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	3314      	adds	r3, #20
 800e898:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e89a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e89c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e8a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e8a2:	e841 2300 	strex	r3, r2, [r1]
 800e8a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1e5      	bne.n	800e87a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	3314      	adds	r3, #20
 800e8b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	e853 3f00 	ldrex	r3, [r3]
 800e8bc:	617b      	str	r3, [r7, #20]
   return(result);
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8c4:	653b      	str	r3, [r7, #80]	@ 0x50
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	3314      	adds	r3, #20
 800e8cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e8ce:	627a      	str	r2, [r7, #36]	@ 0x24
 800e8d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d2:	6a39      	ldr	r1, [r7, #32]
 800e8d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8d6:	e841 2300 	strex	r3, r2, [r1]
 800e8da:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d1e5      	bne.n	800e8ae <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800e8e2:	2300      	movs	r3, #0
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3760      	adds	r7, #96	@ 0x60
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	0800e4ff 	.word	0x0800e4ff
 800e8f0:	0800e62b 	.word	0x0800e62b
 800e8f4:	0800e667 	.word	0x0800e667

0800e8f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e8f8:	b480      	push	{r7}
 800e8fa:	b089      	sub	sp, #36	@ 0x24
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	330c      	adds	r3, #12
 800e906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	e853 3f00 	ldrex	r3, [r3]
 800e90e:	60bb      	str	r3, [r7, #8]
   return(result);
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800e916:	61fb      	str	r3, [r7, #28]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	330c      	adds	r3, #12
 800e91e:	69fa      	ldr	r2, [r7, #28]
 800e920:	61ba      	str	r2, [r7, #24]
 800e922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e924:	6979      	ldr	r1, [r7, #20]
 800e926:	69ba      	ldr	r2, [r7, #24]
 800e928:	e841 2300 	strex	r3, r2, [r1]
 800e92c:	613b      	str	r3, [r7, #16]
   return(result);
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d1e5      	bne.n	800e900 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2220      	movs	r2, #32
 800e938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800e93c:	bf00      	nop
 800e93e:	3724      	adds	r7, #36	@ 0x24
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e948:	b480      	push	{r7}
 800e94a:	b095      	sub	sp, #84	@ 0x54
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	330c      	adds	r3, #12
 800e956:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e95a:	e853 3f00 	ldrex	r3, [r3]
 800e95e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e962:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e966:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	330c      	adds	r3, #12
 800e96e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e970:	643a      	str	r2, [r7, #64]	@ 0x40
 800e972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e978:	e841 2300 	strex	r3, r2, [r1]
 800e97c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e980:	2b00      	cmp	r3, #0
 800e982:	d1e5      	bne.n	800e950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	3314      	adds	r3, #20
 800e98a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	e853 3f00 	ldrex	r3, [r3]
 800e992:	61fb      	str	r3, [r7, #28]
   return(result);
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	f023 0301 	bic.w	r3, r3, #1
 800e99a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3314      	adds	r3, #20
 800e9a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e9a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e9aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e9ac:	e841 2300 	strex	r3, r2, [r1]
 800e9b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e9b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1e5      	bne.n	800e984 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d119      	bne.n	800e9f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	330c      	adds	r3, #12
 800e9c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	e853 3f00 	ldrex	r3, [r3]
 800e9ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800e9d0:	68bb      	ldr	r3, [r7, #8]
 800e9d2:	f023 0310 	bic.w	r3, r3, #16
 800e9d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	330c      	adds	r3, #12
 800e9de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e9e0:	61ba      	str	r2, [r7, #24]
 800e9e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9e4:	6979      	ldr	r1, [r7, #20]
 800e9e6:	69ba      	ldr	r2, [r7, #24]
 800e9e8:	e841 2300 	strex	r3, r2, [r1]
 800e9ec:	613b      	str	r3, [r7, #16]
   return(result);
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d1e5      	bne.n	800e9c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2220      	movs	r2, #32
 800e9f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ea02:	bf00      	nop
 800ea04:	3754      	adds	r7, #84	@ 0x54
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b084      	sub	sp, #16
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2200      	movs	r2, #0
 800ea20:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f7ff fcfa 	bl	800e41c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea28:	bf00      	nop
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ea3e:	b2db      	uxtb	r3, r3
 800ea40:	2b21      	cmp	r3, #33	@ 0x21
 800ea42:	d13e      	bne.n	800eac2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea4c:	d114      	bne.n	800ea78 <UART_Transmit_IT+0x48>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d110      	bne.n	800ea78 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a1b      	ldr	r3, [r3, #32]
 800ea5a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	461a      	mov	r2, r3
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ea6a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6a1b      	ldr	r3, [r3, #32]
 800ea70:	1c9a      	adds	r2, r3, #2
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	621a      	str	r2, [r3, #32]
 800ea76:	e008      	b.n	800ea8a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a1b      	ldr	r3, [r3, #32]
 800ea7c:	1c59      	adds	r1, r3, #1
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	6211      	str	r1, [r2, #32]
 800ea82:	781a      	ldrb	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	3b01      	subs	r3, #1
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	4619      	mov	r1, r3
 800ea98:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d10f      	bne.n	800eabe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	68da      	ldr	r2, [r3, #12]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800eaac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	68da      	ldr	r2, [r3, #12]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eabc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800eabe:	2300      	movs	r3, #0
 800eac0:	e000      	b.n	800eac4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800eac2:	2302      	movs	r3, #2
  }
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3714      	adds	r7, #20
 800eac8:	46bd      	mov	sp, r7
 800eaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eace:	4770      	bx	lr

0800ead0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68da      	ldr	r2, [r3, #12]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800eae6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2220      	movs	r2, #32
 800eaec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f7f6 ffe1 	bl	8005ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800eaf6:	2300      	movs	r3, #0
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3708      	adds	r7, #8
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b08c      	sub	sp, #48	@ 0x30
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	2b22      	cmp	r3, #34	@ 0x22
 800eb1a:	f040 80aa 	bne.w	800ec72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	689b      	ldr	r3, [r3, #8]
 800eb22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb26:	d115      	bne.n	800eb54 <UART_Receive_IT+0x54>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	691b      	ldr	r3, [r3, #16]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d111      	bne.n	800eb54 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb34:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb4c:	1c9a      	adds	r2, r3, #2
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	629a      	str	r2, [r3, #40]	@ 0x28
 800eb52:	e024      	b.n	800eb9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb58:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb62:	d007      	beq.n	800eb74 <UART_Receive_IT+0x74>
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d10a      	bne.n	800eb82 <UART_Receive_IT+0x82>
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	691b      	ldr	r3, [r3, #16]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d106      	bne.n	800eb82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	685b      	ldr	r3, [r3, #4]
 800eb7a:	b2da      	uxtb	r2, r3
 800eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7e:	701a      	strb	r2, [r3, #0]
 800eb80:	e008      	b.n	800eb94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb8e:	b2da      	uxtb	r2, r3
 800eb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb98:	1c5a      	adds	r2, r3, #1
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	3b01      	subs	r3, #1
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	687a      	ldr	r2, [r7, #4]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d15d      	bne.n	800ec6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	68da      	ldr	r2, [r3, #12]
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	f022 0220 	bic.w	r2, r2, #32
 800ebc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	68da      	ldr	r2, [r3, #12]
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ebd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	695a      	ldr	r2, [r3, #20]
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	f022 0201 	bic.w	r2, r2, #1
 800ebe0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2220      	movs	r2, #32
 800ebe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ebf4:	2b01      	cmp	r3, #1
 800ebf6:	d135      	bne.n	800ec64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	330c      	adds	r3, #12
 800ec04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	e853 3f00 	ldrex	r3, [r3]
 800ec0c:	613b      	str	r3, [r7, #16]
   return(result);
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	f023 0310 	bic.w	r3, r3, #16
 800ec14:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	330c      	adds	r3, #12
 800ec1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec1e:	623a      	str	r2, [r7, #32]
 800ec20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec22:	69f9      	ldr	r1, [r7, #28]
 800ec24:	6a3a      	ldr	r2, [r7, #32]
 800ec26:	e841 2300 	strex	r3, r2, [r1]
 800ec2a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d1e5      	bne.n	800ebfe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 0310 	and.w	r3, r3, #16
 800ec3c:	2b10      	cmp	r3, #16
 800ec3e:	d10a      	bne.n	800ec56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ec40:	2300      	movs	r3, #0
 800ec42:	60fb      	str	r3, [r7, #12]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	60fb      	str	r3, [r7, #12]
 800ec54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff fbe7 	bl	800e430 <HAL_UARTEx_RxEventCallback>
 800ec62:	e002      	b.n	800ec6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7f5 feb7 	bl	80049d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	e002      	b.n	800ec74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e000      	b.n	800ec74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ec72:	2302      	movs	r3, #2
  }
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3730      	adds	r7, #48	@ 0x30
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ec7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ec80:	b0c0      	sub	sp, #256	@ 0x100
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	691b      	ldr	r3, [r3, #16]
 800ec90:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ec94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec98:	68d9      	ldr	r1, [r3, #12]
 800ec9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	ea40 0301 	orr.w	r3, r0, r1
 800eca4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800eca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecaa:	689a      	ldr	r2, [r3, #8]
 800ecac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecb0:	691b      	ldr	r3, [r3, #16]
 800ecb2:	431a      	orrs	r2, r3
 800ecb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecb8:	695b      	ldr	r3, [r3, #20]
 800ecba:	431a      	orrs	r2, r3
 800ecbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecc0:	69db      	ldr	r3, [r3, #28]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ecc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ecd4:	f021 010c 	bic.w	r1, r1, #12
 800ecd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecdc:	681a      	ldr	r2, [r3, #0]
 800ecde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ece2:	430b      	orrs	r3, r1
 800ece4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ece6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	695b      	ldr	r3, [r3, #20]
 800ecee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ecf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecf6:	6999      	ldr	r1, [r3, #24]
 800ecf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	ea40 0301 	orr.w	r3, r0, r1
 800ed02:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ed04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed08:	681a      	ldr	r2, [r3, #0]
 800ed0a:	4b8f      	ldr	r3, [pc, #572]	@ (800ef48 <UART_SetConfig+0x2cc>)
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d005      	beq.n	800ed1c <UART_SetConfig+0xa0>
 800ed10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	4b8d      	ldr	r3, [pc, #564]	@ (800ef4c <UART_SetConfig+0x2d0>)
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	d104      	bne.n	800ed26 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ed1c:	f7fd fd32 	bl	800c784 <HAL_RCC_GetPCLK2Freq>
 800ed20:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ed24:	e003      	b.n	800ed2e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ed26:	f7fd fd19 	bl	800c75c <HAL_RCC_GetPCLK1Freq>
 800ed2a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ed2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed32:	69db      	ldr	r3, [r3, #28]
 800ed34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ed38:	f040 810c 	bne.w	800ef54 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ed3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ed40:	2200      	movs	r2, #0
 800ed42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ed46:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ed4a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ed4e:	4622      	mov	r2, r4
 800ed50:	462b      	mov	r3, r5
 800ed52:	1891      	adds	r1, r2, r2
 800ed54:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ed56:	415b      	adcs	r3, r3
 800ed58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed5a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ed5e:	4621      	mov	r1, r4
 800ed60:	eb12 0801 	adds.w	r8, r2, r1
 800ed64:	4629      	mov	r1, r5
 800ed66:	eb43 0901 	adc.w	r9, r3, r1
 800ed6a:	f04f 0200 	mov.w	r2, #0
 800ed6e:	f04f 0300 	mov.w	r3, #0
 800ed72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ed76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ed7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ed7e:	4690      	mov	r8, r2
 800ed80:	4699      	mov	r9, r3
 800ed82:	4623      	mov	r3, r4
 800ed84:	eb18 0303 	adds.w	r3, r8, r3
 800ed88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed8c:	462b      	mov	r3, r5
 800ed8e:	eb49 0303 	adc.w	r3, r9, r3
 800ed92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ed96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800eda2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800eda6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800edaa:	460b      	mov	r3, r1
 800edac:	18db      	adds	r3, r3, r3
 800edae:	653b      	str	r3, [r7, #80]	@ 0x50
 800edb0:	4613      	mov	r3, r2
 800edb2:	eb42 0303 	adc.w	r3, r2, r3
 800edb6:	657b      	str	r3, [r7, #84]	@ 0x54
 800edb8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800edbc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800edc0:	f7f2 f8e0 	bl	8000f84 <__aeabi_uldivmod>
 800edc4:	4602      	mov	r2, r0
 800edc6:	460b      	mov	r3, r1
 800edc8:	4b61      	ldr	r3, [pc, #388]	@ (800ef50 <UART_SetConfig+0x2d4>)
 800edca:	fba3 2302 	umull	r2, r3, r3, r2
 800edce:	095b      	lsrs	r3, r3, #5
 800edd0:	011c      	lsls	r4, r3, #4
 800edd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800edd6:	2200      	movs	r2, #0
 800edd8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800eddc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ede0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ede4:	4642      	mov	r2, r8
 800ede6:	464b      	mov	r3, r9
 800ede8:	1891      	adds	r1, r2, r2
 800edea:	64b9      	str	r1, [r7, #72]	@ 0x48
 800edec:	415b      	adcs	r3, r3
 800edee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800edf0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800edf4:	4641      	mov	r1, r8
 800edf6:	eb12 0a01 	adds.w	sl, r2, r1
 800edfa:	4649      	mov	r1, r9
 800edfc:	eb43 0b01 	adc.w	fp, r3, r1
 800ee00:	f04f 0200 	mov.w	r2, #0
 800ee04:	f04f 0300 	mov.w	r3, #0
 800ee08:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800ee0c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800ee10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ee14:	4692      	mov	sl, r2
 800ee16:	469b      	mov	fp, r3
 800ee18:	4643      	mov	r3, r8
 800ee1a:	eb1a 0303 	adds.w	r3, sl, r3
 800ee1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ee22:	464b      	mov	r3, r9
 800ee24:	eb4b 0303 	adc.w	r3, fp, r3
 800ee28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ee2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ee30:	685b      	ldr	r3, [r3, #4]
 800ee32:	2200      	movs	r2, #0
 800ee34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ee38:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800ee3c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ee40:	460b      	mov	r3, r1
 800ee42:	18db      	adds	r3, r3, r3
 800ee44:	643b      	str	r3, [r7, #64]	@ 0x40
 800ee46:	4613      	mov	r3, r2
 800ee48:	eb42 0303 	adc.w	r3, r2, r3
 800ee4c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ee4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800ee52:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800ee56:	f7f2 f895 	bl	8000f84 <__aeabi_uldivmod>
 800ee5a:	4602      	mov	r2, r0
 800ee5c:	460b      	mov	r3, r1
 800ee5e:	4611      	mov	r1, r2
 800ee60:	4b3b      	ldr	r3, [pc, #236]	@ (800ef50 <UART_SetConfig+0x2d4>)
 800ee62:	fba3 2301 	umull	r2, r3, r3, r1
 800ee66:	095b      	lsrs	r3, r3, #5
 800ee68:	2264      	movs	r2, #100	@ 0x64
 800ee6a:	fb02 f303 	mul.w	r3, r2, r3
 800ee6e:	1acb      	subs	r3, r1, r3
 800ee70:	00db      	lsls	r3, r3, #3
 800ee72:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800ee76:	4b36      	ldr	r3, [pc, #216]	@ (800ef50 <UART_SetConfig+0x2d4>)
 800ee78:	fba3 2302 	umull	r2, r3, r3, r2
 800ee7c:	095b      	lsrs	r3, r3, #5
 800ee7e:	005b      	lsls	r3, r3, #1
 800ee80:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800ee84:	441c      	add	r4, r3
 800ee86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ee90:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ee94:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800ee98:	4642      	mov	r2, r8
 800ee9a:	464b      	mov	r3, r9
 800ee9c:	1891      	adds	r1, r2, r2
 800ee9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800eea0:	415b      	adcs	r3, r3
 800eea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eea4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800eea8:	4641      	mov	r1, r8
 800eeaa:	1851      	adds	r1, r2, r1
 800eeac:	6339      	str	r1, [r7, #48]	@ 0x30
 800eeae:	4649      	mov	r1, r9
 800eeb0:	414b      	adcs	r3, r1
 800eeb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800eeb4:	f04f 0200 	mov.w	r2, #0
 800eeb8:	f04f 0300 	mov.w	r3, #0
 800eebc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800eec0:	4659      	mov	r1, fp
 800eec2:	00cb      	lsls	r3, r1, #3
 800eec4:	4651      	mov	r1, sl
 800eec6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800eeca:	4651      	mov	r1, sl
 800eecc:	00ca      	lsls	r2, r1, #3
 800eece:	4610      	mov	r0, r2
 800eed0:	4619      	mov	r1, r3
 800eed2:	4603      	mov	r3, r0
 800eed4:	4642      	mov	r2, r8
 800eed6:	189b      	adds	r3, r3, r2
 800eed8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800eedc:	464b      	mov	r3, r9
 800eede:	460a      	mov	r2, r1
 800eee0:	eb42 0303 	adc.w	r3, r2, r3
 800eee4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800eeec:	685b      	ldr	r3, [r3, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800eef4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800eef8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800eefc:	460b      	mov	r3, r1
 800eefe:	18db      	adds	r3, r3, r3
 800ef00:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ef02:	4613      	mov	r3, r2
 800ef04:	eb42 0303 	adc.w	r3, r2, r3
 800ef08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ef0a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ef0e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ef12:	f7f2 f837 	bl	8000f84 <__aeabi_uldivmod>
 800ef16:	4602      	mov	r2, r0
 800ef18:	460b      	mov	r3, r1
 800ef1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ef50 <UART_SetConfig+0x2d4>)
 800ef1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ef20:	095b      	lsrs	r3, r3, #5
 800ef22:	2164      	movs	r1, #100	@ 0x64
 800ef24:	fb01 f303 	mul.w	r3, r1, r3
 800ef28:	1ad3      	subs	r3, r2, r3
 800ef2a:	00db      	lsls	r3, r3, #3
 800ef2c:	3332      	adds	r3, #50	@ 0x32
 800ef2e:	4a08      	ldr	r2, [pc, #32]	@ (800ef50 <UART_SetConfig+0x2d4>)
 800ef30:	fba2 2303 	umull	r2, r3, r2, r3
 800ef34:	095b      	lsrs	r3, r3, #5
 800ef36:	f003 0207 	and.w	r2, r3, #7
 800ef3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4422      	add	r2, r4
 800ef42:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ef44:	e106      	b.n	800f154 <UART_SetConfig+0x4d8>
 800ef46:	bf00      	nop
 800ef48:	40011000 	.word	0x40011000
 800ef4c:	40011400 	.word	0x40011400
 800ef50:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ef54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ef58:	2200      	movs	r2, #0
 800ef5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ef5e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ef62:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ef66:	4642      	mov	r2, r8
 800ef68:	464b      	mov	r3, r9
 800ef6a:	1891      	adds	r1, r2, r2
 800ef6c:	6239      	str	r1, [r7, #32]
 800ef6e:	415b      	adcs	r3, r3
 800ef70:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ef76:	4641      	mov	r1, r8
 800ef78:	1854      	adds	r4, r2, r1
 800ef7a:	4649      	mov	r1, r9
 800ef7c:	eb43 0501 	adc.w	r5, r3, r1
 800ef80:	f04f 0200 	mov.w	r2, #0
 800ef84:	f04f 0300 	mov.w	r3, #0
 800ef88:	00eb      	lsls	r3, r5, #3
 800ef8a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ef8e:	00e2      	lsls	r2, r4, #3
 800ef90:	4614      	mov	r4, r2
 800ef92:	461d      	mov	r5, r3
 800ef94:	4643      	mov	r3, r8
 800ef96:	18e3      	adds	r3, r4, r3
 800ef98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ef9c:	464b      	mov	r3, r9
 800ef9e:	eb45 0303 	adc.w	r3, r5, r3
 800efa2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800efa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800efaa:	685b      	ldr	r3, [r3, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800efb2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800efb6:	f04f 0200 	mov.w	r2, #0
 800efba:	f04f 0300 	mov.w	r3, #0
 800efbe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800efc2:	4629      	mov	r1, r5
 800efc4:	008b      	lsls	r3, r1, #2
 800efc6:	4621      	mov	r1, r4
 800efc8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800efcc:	4621      	mov	r1, r4
 800efce:	008a      	lsls	r2, r1, #2
 800efd0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800efd4:	f7f1 ffd6 	bl	8000f84 <__aeabi_uldivmod>
 800efd8:	4602      	mov	r2, r0
 800efda:	460b      	mov	r3, r1
 800efdc:	4b60      	ldr	r3, [pc, #384]	@ (800f160 <UART_SetConfig+0x4e4>)
 800efde:	fba3 2302 	umull	r2, r3, r3, r2
 800efe2:	095b      	lsrs	r3, r3, #5
 800efe4:	011c      	lsls	r4, r3, #4
 800efe6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800efea:	2200      	movs	r2, #0
 800efec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800eff0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800eff4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800eff8:	4642      	mov	r2, r8
 800effa:	464b      	mov	r3, r9
 800effc:	1891      	adds	r1, r2, r2
 800effe:	61b9      	str	r1, [r7, #24]
 800f000:	415b      	adcs	r3, r3
 800f002:	61fb      	str	r3, [r7, #28]
 800f004:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f008:	4641      	mov	r1, r8
 800f00a:	1851      	adds	r1, r2, r1
 800f00c:	6139      	str	r1, [r7, #16]
 800f00e:	4649      	mov	r1, r9
 800f010:	414b      	adcs	r3, r1
 800f012:	617b      	str	r3, [r7, #20]
 800f014:	f04f 0200 	mov.w	r2, #0
 800f018:	f04f 0300 	mov.w	r3, #0
 800f01c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f020:	4659      	mov	r1, fp
 800f022:	00cb      	lsls	r3, r1, #3
 800f024:	4651      	mov	r1, sl
 800f026:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f02a:	4651      	mov	r1, sl
 800f02c:	00ca      	lsls	r2, r1, #3
 800f02e:	4610      	mov	r0, r2
 800f030:	4619      	mov	r1, r3
 800f032:	4603      	mov	r3, r0
 800f034:	4642      	mov	r2, r8
 800f036:	189b      	adds	r3, r3, r2
 800f038:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f03c:	464b      	mov	r3, r9
 800f03e:	460a      	mov	r2, r1
 800f040:	eb42 0303 	adc.w	r3, r2, r3
 800f044:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f04c:	685b      	ldr	r3, [r3, #4]
 800f04e:	2200      	movs	r2, #0
 800f050:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f052:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f054:	f04f 0200 	mov.w	r2, #0
 800f058:	f04f 0300 	mov.w	r3, #0
 800f05c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800f060:	4649      	mov	r1, r9
 800f062:	008b      	lsls	r3, r1, #2
 800f064:	4641      	mov	r1, r8
 800f066:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f06a:	4641      	mov	r1, r8
 800f06c:	008a      	lsls	r2, r1, #2
 800f06e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f072:	f7f1 ff87 	bl	8000f84 <__aeabi_uldivmod>
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	4611      	mov	r1, r2
 800f07c:	4b38      	ldr	r3, [pc, #224]	@ (800f160 <UART_SetConfig+0x4e4>)
 800f07e:	fba3 2301 	umull	r2, r3, r3, r1
 800f082:	095b      	lsrs	r3, r3, #5
 800f084:	2264      	movs	r2, #100	@ 0x64
 800f086:	fb02 f303 	mul.w	r3, r2, r3
 800f08a:	1acb      	subs	r3, r1, r3
 800f08c:	011b      	lsls	r3, r3, #4
 800f08e:	3332      	adds	r3, #50	@ 0x32
 800f090:	4a33      	ldr	r2, [pc, #204]	@ (800f160 <UART_SetConfig+0x4e4>)
 800f092:	fba2 2303 	umull	r2, r3, r2, r3
 800f096:	095b      	lsrs	r3, r3, #5
 800f098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f09c:	441c      	add	r4, r3
 800f09e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	673b      	str	r3, [r7, #112]	@ 0x70
 800f0a6:	677a      	str	r2, [r7, #116]	@ 0x74
 800f0a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800f0ac:	4642      	mov	r2, r8
 800f0ae:	464b      	mov	r3, r9
 800f0b0:	1891      	adds	r1, r2, r2
 800f0b2:	60b9      	str	r1, [r7, #8]
 800f0b4:	415b      	adcs	r3, r3
 800f0b6:	60fb      	str	r3, [r7, #12]
 800f0b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f0bc:	4641      	mov	r1, r8
 800f0be:	1851      	adds	r1, r2, r1
 800f0c0:	6039      	str	r1, [r7, #0]
 800f0c2:	4649      	mov	r1, r9
 800f0c4:	414b      	adcs	r3, r1
 800f0c6:	607b      	str	r3, [r7, #4]
 800f0c8:	f04f 0200 	mov.w	r2, #0
 800f0cc:	f04f 0300 	mov.w	r3, #0
 800f0d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f0d4:	4659      	mov	r1, fp
 800f0d6:	00cb      	lsls	r3, r1, #3
 800f0d8:	4651      	mov	r1, sl
 800f0da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f0de:	4651      	mov	r1, sl
 800f0e0:	00ca      	lsls	r2, r1, #3
 800f0e2:	4610      	mov	r0, r2
 800f0e4:	4619      	mov	r1, r3
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	4642      	mov	r2, r8
 800f0ea:	189b      	adds	r3, r3, r2
 800f0ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f0ee:	464b      	mov	r3, r9
 800f0f0:	460a      	mov	r2, r1
 800f0f2:	eb42 0303 	adc.w	r3, r2, r3
 800f0f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f0f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f0fc:	685b      	ldr	r3, [r3, #4]
 800f0fe:	2200      	movs	r2, #0
 800f100:	663b      	str	r3, [r7, #96]	@ 0x60
 800f102:	667a      	str	r2, [r7, #100]	@ 0x64
 800f104:	f04f 0200 	mov.w	r2, #0
 800f108:	f04f 0300 	mov.w	r3, #0
 800f10c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800f110:	4649      	mov	r1, r9
 800f112:	008b      	lsls	r3, r1, #2
 800f114:	4641      	mov	r1, r8
 800f116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f11a:	4641      	mov	r1, r8
 800f11c:	008a      	lsls	r2, r1, #2
 800f11e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800f122:	f7f1 ff2f 	bl	8000f84 <__aeabi_uldivmod>
 800f126:	4602      	mov	r2, r0
 800f128:	460b      	mov	r3, r1
 800f12a:	4b0d      	ldr	r3, [pc, #52]	@ (800f160 <UART_SetConfig+0x4e4>)
 800f12c:	fba3 1302 	umull	r1, r3, r3, r2
 800f130:	095b      	lsrs	r3, r3, #5
 800f132:	2164      	movs	r1, #100	@ 0x64
 800f134:	fb01 f303 	mul.w	r3, r1, r3
 800f138:	1ad3      	subs	r3, r2, r3
 800f13a:	011b      	lsls	r3, r3, #4
 800f13c:	3332      	adds	r3, #50	@ 0x32
 800f13e:	4a08      	ldr	r2, [pc, #32]	@ (800f160 <UART_SetConfig+0x4e4>)
 800f140:	fba2 2303 	umull	r2, r3, r2, r3
 800f144:	095b      	lsrs	r3, r3, #5
 800f146:	f003 020f 	and.w	r2, r3, #15
 800f14a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	4422      	add	r2, r4
 800f152:	609a      	str	r2, [r3, #8]
}
 800f154:	bf00      	nop
 800f156:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800f15a:	46bd      	mov	sp, r7
 800f15c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f160:	51eb851f 	.word	0x51eb851f

0800f164 <calloc>:
 800f164:	4b02      	ldr	r3, [pc, #8]	@ (800f170 <calloc+0xc>)
 800f166:	460a      	mov	r2, r1
 800f168:	4601      	mov	r1, r0
 800f16a:	6818      	ldr	r0, [r3, #0]
 800f16c:	f000 b802 	b.w	800f174 <_calloc_r>
 800f170:	20000078 	.word	0x20000078

0800f174 <_calloc_r>:
 800f174:	b570      	push	{r4, r5, r6, lr}
 800f176:	fba1 5402 	umull	r5, r4, r1, r2
 800f17a:	b93c      	cbnz	r4, 800f18c <_calloc_r+0x18>
 800f17c:	4629      	mov	r1, r5
 800f17e:	f000 f82f 	bl	800f1e0 <_malloc_r>
 800f182:	4606      	mov	r6, r0
 800f184:	b928      	cbnz	r0, 800f192 <_calloc_r+0x1e>
 800f186:	2600      	movs	r6, #0
 800f188:	4630      	mov	r0, r6
 800f18a:	bd70      	pop	{r4, r5, r6, pc}
 800f18c:	220c      	movs	r2, #12
 800f18e:	6002      	str	r2, [r0, #0]
 800f190:	e7f9      	b.n	800f186 <_calloc_r+0x12>
 800f192:	462a      	mov	r2, r5
 800f194:	4621      	mov	r1, r4
 800f196:	f001 f87c 	bl	8010292 <memset>
 800f19a:	e7f5      	b.n	800f188 <_calloc_r+0x14>

0800f19c <sbrk_aligned>:
 800f19c:	b570      	push	{r4, r5, r6, lr}
 800f19e:	4e0f      	ldr	r6, [pc, #60]	@ (800f1dc <sbrk_aligned+0x40>)
 800f1a0:	460c      	mov	r4, r1
 800f1a2:	6831      	ldr	r1, [r6, #0]
 800f1a4:	4605      	mov	r5, r0
 800f1a6:	b911      	cbnz	r1, 800f1ae <sbrk_aligned+0x12>
 800f1a8:	f001 f8ca 	bl	8010340 <_sbrk_r>
 800f1ac:	6030      	str	r0, [r6, #0]
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f001 f8c5 	bl	8010340 <_sbrk_r>
 800f1b6:	1c43      	adds	r3, r0, #1
 800f1b8:	d103      	bne.n	800f1c2 <sbrk_aligned+0x26>
 800f1ba:	f04f 34ff 	mov.w	r4, #4294967295
 800f1be:	4620      	mov	r0, r4
 800f1c0:	bd70      	pop	{r4, r5, r6, pc}
 800f1c2:	1cc4      	adds	r4, r0, #3
 800f1c4:	f024 0403 	bic.w	r4, r4, #3
 800f1c8:	42a0      	cmp	r0, r4
 800f1ca:	d0f8      	beq.n	800f1be <sbrk_aligned+0x22>
 800f1cc:	1a21      	subs	r1, r4, r0
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	f001 f8b6 	bl	8010340 <_sbrk_r>
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	d1f2      	bne.n	800f1be <sbrk_aligned+0x22>
 800f1d8:	e7ef      	b.n	800f1ba <sbrk_aligned+0x1e>
 800f1da:	bf00      	nop
 800f1dc:	200019dc 	.word	0x200019dc

0800f1e0 <_malloc_r>:
 800f1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1e4:	1ccd      	adds	r5, r1, #3
 800f1e6:	f025 0503 	bic.w	r5, r5, #3
 800f1ea:	3508      	adds	r5, #8
 800f1ec:	2d0c      	cmp	r5, #12
 800f1ee:	bf38      	it	cc
 800f1f0:	250c      	movcc	r5, #12
 800f1f2:	2d00      	cmp	r5, #0
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	db01      	blt.n	800f1fc <_malloc_r+0x1c>
 800f1f8:	42a9      	cmp	r1, r5
 800f1fa:	d904      	bls.n	800f206 <_malloc_r+0x26>
 800f1fc:	230c      	movs	r3, #12
 800f1fe:	6033      	str	r3, [r6, #0]
 800f200:	2000      	movs	r0, #0
 800f202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f2dc <_malloc_r+0xfc>
 800f20a:	f000 f869 	bl	800f2e0 <__malloc_lock>
 800f20e:	f8d8 3000 	ldr.w	r3, [r8]
 800f212:	461c      	mov	r4, r3
 800f214:	bb44      	cbnz	r4, 800f268 <_malloc_r+0x88>
 800f216:	4629      	mov	r1, r5
 800f218:	4630      	mov	r0, r6
 800f21a:	f7ff ffbf 	bl	800f19c <sbrk_aligned>
 800f21e:	1c43      	adds	r3, r0, #1
 800f220:	4604      	mov	r4, r0
 800f222:	d158      	bne.n	800f2d6 <_malloc_r+0xf6>
 800f224:	f8d8 4000 	ldr.w	r4, [r8]
 800f228:	4627      	mov	r7, r4
 800f22a:	2f00      	cmp	r7, #0
 800f22c:	d143      	bne.n	800f2b6 <_malloc_r+0xd6>
 800f22e:	2c00      	cmp	r4, #0
 800f230:	d04b      	beq.n	800f2ca <_malloc_r+0xea>
 800f232:	6823      	ldr	r3, [r4, #0]
 800f234:	4639      	mov	r1, r7
 800f236:	4630      	mov	r0, r6
 800f238:	eb04 0903 	add.w	r9, r4, r3
 800f23c:	f001 f880 	bl	8010340 <_sbrk_r>
 800f240:	4581      	cmp	r9, r0
 800f242:	d142      	bne.n	800f2ca <_malloc_r+0xea>
 800f244:	6821      	ldr	r1, [r4, #0]
 800f246:	1a6d      	subs	r5, r5, r1
 800f248:	4629      	mov	r1, r5
 800f24a:	4630      	mov	r0, r6
 800f24c:	f7ff ffa6 	bl	800f19c <sbrk_aligned>
 800f250:	3001      	adds	r0, #1
 800f252:	d03a      	beq.n	800f2ca <_malloc_r+0xea>
 800f254:	6823      	ldr	r3, [r4, #0]
 800f256:	442b      	add	r3, r5
 800f258:	6023      	str	r3, [r4, #0]
 800f25a:	f8d8 3000 	ldr.w	r3, [r8]
 800f25e:	685a      	ldr	r2, [r3, #4]
 800f260:	bb62      	cbnz	r2, 800f2bc <_malloc_r+0xdc>
 800f262:	f8c8 7000 	str.w	r7, [r8]
 800f266:	e00f      	b.n	800f288 <_malloc_r+0xa8>
 800f268:	6822      	ldr	r2, [r4, #0]
 800f26a:	1b52      	subs	r2, r2, r5
 800f26c:	d420      	bmi.n	800f2b0 <_malloc_r+0xd0>
 800f26e:	2a0b      	cmp	r2, #11
 800f270:	d917      	bls.n	800f2a2 <_malloc_r+0xc2>
 800f272:	1961      	adds	r1, r4, r5
 800f274:	42a3      	cmp	r3, r4
 800f276:	6025      	str	r5, [r4, #0]
 800f278:	bf18      	it	ne
 800f27a:	6059      	strne	r1, [r3, #4]
 800f27c:	6863      	ldr	r3, [r4, #4]
 800f27e:	bf08      	it	eq
 800f280:	f8c8 1000 	streq.w	r1, [r8]
 800f284:	5162      	str	r2, [r4, r5]
 800f286:	604b      	str	r3, [r1, #4]
 800f288:	4630      	mov	r0, r6
 800f28a:	f000 f82f 	bl	800f2ec <__malloc_unlock>
 800f28e:	f104 000b 	add.w	r0, r4, #11
 800f292:	1d23      	adds	r3, r4, #4
 800f294:	f020 0007 	bic.w	r0, r0, #7
 800f298:	1ac2      	subs	r2, r0, r3
 800f29a:	bf1c      	itt	ne
 800f29c:	1a1b      	subne	r3, r3, r0
 800f29e:	50a3      	strne	r3, [r4, r2]
 800f2a0:	e7af      	b.n	800f202 <_malloc_r+0x22>
 800f2a2:	6862      	ldr	r2, [r4, #4]
 800f2a4:	42a3      	cmp	r3, r4
 800f2a6:	bf0c      	ite	eq
 800f2a8:	f8c8 2000 	streq.w	r2, [r8]
 800f2ac:	605a      	strne	r2, [r3, #4]
 800f2ae:	e7eb      	b.n	800f288 <_malloc_r+0xa8>
 800f2b0:	4623      	mov	r3, r4
 800f2b2:	6864      	ldr	r4, [r4, #4]
 800f2b4:	e7ae      	b.n	800f214 <_malloc_r+0x34>
 800f2b6:	463c      	mov	r4, r7
 800f2b8:	687f      	ldr	r7, [r7, #4]
 800f2ba:	e7b6      	b.n	800f22a <_malloc_r+0x4a>
 800f2bc:	461a      	mov	r2, r3
 800f2be:	685b      	ldr	r3, [r3, #4]
 800f2c0:	42a3      	cmp	r3, r4
 800f2c2:	d1fb      	bne.n	800f2bc <_malloc_r+0xdc>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	6053      	str	r3, [r2, #4]
 800f2c8:	e7de      	b.n	800f288 <_malloc_r+0xa8>
 800f2ca:	230c      	movs	r3, #12
 800f2cc:	6033      	str	r3, [r6, #0]
 800f2ce:	4630      	mov	r0, r6
 800f2d0:	f000 f80c 	bl	800f2ec <__malloc_unlock>
 800f2d4:	e794      	b.n	800f200 <_malloc_r+0x20>
 800f2d6:	6005      	str	r5, [r0, #0]
 800f2d8:	e7d6      	b.n	800f288 <_malloc_r+0xa8>
 800f2da:	bf00      	nop
 800f2dc:	200019e0 	.word	0x200019e0

0800f2e0 <__malloc_lock>:
 800f2e0:	4801      	ldr	r0, [pc, #4]	@ (800f2e8 <__malloc_lock+0x8>)
 800f2e2:	f001 b87a 	b.w	80103da <__retarget_lock_acquire_recursive>
 800f2e6:	bf00      	nop
 800f2e8:	20001b24 	.word	0x20001b24

0800f2ec <__malloc_unlock>:
 800f2ec:	4801      	ldr	r0, [pc, #4]	@ (800f2f4 <__malloc_unlock+0x8>)
 800f2ee:	f001 b875 	b.w	80103dc <__retarget_lock_release_recursive>
 800f2f2:	bf00      	nop
 800f2f4:	20001b24 	.word	0x20001b24

0800f2f8 <__cvt>:
 800f2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2fc:	ec57 6b10 	vmov	r6, r7, d0
 800f300:	2f00      	cmp	r7, #0
 800f302:	460c      	mov	r4, r1
 800f304:	4619      	mov	r1, r3
 800f306:	463b      	mov	r3, r7
 800f308:	bfbb      	ittet	lt
 800f30a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800f30e:	461f      	movlt	r7, r3
 800f310:	2300      	movge	r3, #0
 800f312:	232d      	movlt	r3, #45	@ 0x2d
 800f314:	700b      	strb	r3, [r1, #0]
 800f316:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f318:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800f31c:	4691      	mov	r9, r2
 800f31e:	f023 0820 	bic.w	r8, r3, #32
 800f322:	bfbc      	itt	lt
 800f324:	4632      	movlt	r2, r6
 800f326:	4616      	movlt	r6, r2
 800f328:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f32c:	d005      	beq.n	800f33a <__cvt+0x42>
 800f32e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800f332:	d100      	bne.n	800f336 <__cvt+0x3e>
 800f334:	3401      	adds	r4, #1
 800f336:	2102      	movs	r1, #2
 800f338:	e000      	b.n	800f33c <__cvt+0x44>
 800f33a:	2103      	movs	r1, #3
 800f33c:	ab03      	add	r3, sp, #12
 800f33e:	9301      	str	r3, [sp, #4]
 800f340:	ab02      	add	r3, sp, #8
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	ec47 6b10 	vmov	d0, r6, r7
 800f348:	4653      	mov	r3, sl
 800f34a:	4622      	mov	r2, r4
 800f34c:	f001 f8e4 	bl	8010518 <_dtoa_r>
 800f350:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800f354:	4605      	mov	r5, r0
 800f356:	d119      	bne.n	800f38c <__cvt+0x94>
 800f358:	f019 0f01 	tst.w	r9, #1
 800f35c:	d00e      	beq.n	800f37c <__cvt+0x84>
 800f35e:	eb00 0904 	add.w	r9, r0, r4
 800f362:	2200      	movs	r2, #0
 800f364:	2300      	movs	r3, #0
 800f366:	4630      	mov	r0, r6
 800f368:	4639      	mov	r1, r7
 800f36a:	f7f1 fbcd 	bl	8000b08 <__aeabi_dcmpeq>
 800f36e:	b108      	cbz	r0, 800f374 <__cvt+0x7c>
 800f370:	f8cd 900c 	str.w	r9, [sp, #12]
 800f374:	2230      	movs	r2, #48	@ 0x30
 800f376:	9b03      	ldr	r3, [sp, #12]
 800f378:	454b      	cmp	r3, r9
 800f37a:	d31e      	bcc.n	800f3ba <__cvt+0xc2>
 800f37c:	9b03      	ldr	r3, [sp, #12]
 800f37e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f380:	1b5b      	subs	r3, r3, r5
 800f382:	4628      	mov	r0, r5
 800f384:	6013      	str	r3, [r2, #0]
 800f386:	b004      	add	sp, #16
 800f388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f38c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800f390:	eb00 0904 	add.w	r9, r0, r4
 800f394:	d1e5      	bne.n	800f362 <__cvt+0x6a>
 800f396:	7803      	ldrb	r3, [r0, #0]
 800f398:	2b30      	cmp	r3, #48	@ 0x30
 800f39a:	d10a      	bne.n	800f3b2 <__cvt+0xba>
 800f39c:	2200      	movs	r2, #0
 800f39e:	2300      	movs	r3, #0
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	f7f1 fbb0 	bl	8000b08 <__aeabi_dcmpeq>
 800f3a8:	b918      	cbnz	r0, 800f3b2 <__cvt+0xba>
 800f3aa:	f1c4 0401 	rsb	r4, r4, #1
 800f3ae:	f8ca 4000 	str.w	r4, [sl]
 800f3b2:	f8da 3000 	ldr.w	r3, [sl]
 800f3b6:	4499      	add	r9, r3
 800f3b8:	e7d3      	b.n	800f362 <__cvt+0x6a>
 800f3ba:	1c59      	adds	r1, r3, #1
 800f3bc:	9103      	str	r1, [sp, #12]
 800f3be:	701a      	strb	r2, [r3, #0]
 800f3c0:	e7d9      	b.n	800f376 <__cvt+0x7e>

0800f3c2 <__exponent>:
 800f3c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f3c4:	2900      	cmp	r1, #0
 800f3c6:	bfba      	itte	lt
 800f3c8:	4249      	neglt	r1, r1
 800f3ca:	232d      	movlt	r3, #45	@ 0x2d
 800f3cc:	232b      	movge	r3, #43	@ 0x2b
 800f3ce:	2909      	cmp	r1, #9
 800f3d0:	7002      	strb	r2, [r0, #0]
 800f3d2:	7043      	strb	r3, [r0, #1]
 800f3d4:	dd29      	ble.n	800f42a <__exponent+0x68>
 800f3d6:	f10d 0307 	add.w	r3, sp, #7
 800f3da:	461d      	mov	r5, r3
 800f3dc:	270a      	movs	r7, #10
 800f3de:	461a      	mov	r2, r3
 800f3e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800f3e4:	fb07 1416 	mls	r4, r7, r6, r1
 800f3e8:	3430      	adds	r4, #48	@ 0x30
 800f3ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	2c63      	cmp	r4, #99	@ 0x63
 800f3f2:	f103 33ff 	add.w	r3, r3, #4294967295
 800f3f6:	4631      	mov	r1, r6
 800f3f8:	dcf1      	bgt.n	800f3de <__exponent+0x1c>
 800f3fa:	3130      	adds	r1, #48	@ 0x30
 800f3fc:	1e94      	subs	r4, r2, #2
 800f3fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f402:	1c41      	adds	r1, r0, #1
 800f404:	4623      	mov	r3, r4
 800f406:	42ab      	cmp	r3, r5
 800f408:	d30a      	bcc.n	800f420 <__exponent+0x5e>
 800f40a:	f10d 0309 	add.w	r3, sp, #9
 800f40e:	1a9b      	subs	r3, r3, r2
 800f410:	42ac      	cmp	r4, r5
 800f412:	bf88      	it	hi
 800f414:	2300      	movhi	r3, #0
 800f416:	3302      	adds	r3, #2
 800f418:	4403      	add	r3, r0
 800f41a:	1a18      	subs	r0, r3, r0
 800f41c:	b003      	add	sp, #12
 800f41e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f420:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f424:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f428:	e7ed      	b.n	800f406 <__exponent+0x44>
 800f42a:	2330      	movs	r3, #48	@ 0x30
 800f42c:	3130      	adds	r1, #48	@ 0x30
 800f42e:	7083      	strb	r3, [r0, #2]
 800f430:	70c1      	strb	r1, [r0, #3]
 800f432:	1d03      	adds	r3, r0, #4
 800f434:	e7f1      	b.n	800f41a <__exponent+0x58>
	...

0800f438 <_printf_float>:
 800f438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f43c:	b08d      	sub	sp, #52	@ 0x34
 800f43e:	460c      	mov	r4, r1
 800f440:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f444:	4616      	mov	r6, r2
 800f446:	461f      	mov	r7, r3
 800f448:	4605      	mov	r5, r0
 800f44a:	f000 ff41 	bl	80102d0 <_localeconv_r>
 800f44e:	6803      	ldr	r3, [r0, #0]
 800f450:	9304      	str	r3, [sp, #16]
 800f452:	4618      	mov	r0, r3
 800f454:	f7f0 ff2c 	bl	80002b0 <strlen>
 800f458:	2300      	movs	r3, #0
 800f45a:	930a      	str	r3, [sp, #40]	@ 0x28
 800f45c:	f8d8 3000 	ldr.w	r3, [r8]
 800f460:	9005      	str	r0, [sp, #20]
 800f462:	3307      	adds	r3, #7
 800f464:	f023 0307 	bic.w	r3, r3, #7
 800f468:	f103 0208 	add.w	r2, r3, #8
 800f46c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800f470:	f8d4 b000 	ldr.w	fp, [r4]
 800f474:	f8c8 2000 	str.w	r2, [r8]
 800f478:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f47c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800f480:	9307      	str	r3, [sp, #28]
 800f482:	f8cd 8018 	str.w	r8, [sp, #24]
 800f486:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800f48a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f48e:	4b9c      	ldr	r3, [pc, #624]	@ (800f700 <_printf_float+0x2c8>)
 800f490:	f04f 32ff 	mov.w	r2, #4294967295
 800f494:	f7f1 fb6a 	bl	8000b6c <__aeabi_dcmpun>
 800f498:	bb70      	cbnz	r0, 800f4f8 <_printf_float+0xc0>
 800f49a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f49e:	4b98      	ldr	r3, [pc, #608]	@ (800f700 <_printf_float+0x2c8>)
 800f4a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4a4:	f7f1 fb44 	bl	8000b30 <__aeabi_dcmple>
 800f4a8:	bb30      	cbnz	r0, 800f4f8 <_printf_float+0xc0>
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	4640      	mov	r0, r8
 800f4b0:	4649      	mov	r1, r9
 800f4b2:	f7f1 fb33 	bl	8000b1c <__aeabi_dcmplt>
 800f4b6:	b110      	cbz	r0, 800f4be <_printf_float+0x86>
 800f4b8:	232d      	movs	r3, #45	@ 0x2d
 800f4ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4be:	4a91      	ldr	r2, [pc, #580]	@ (800f704 <_printf_float+0x2cc>)
 800f4c0:	4b91      	ldr	r3, [pc, #580]	@ (800f708 <_printf_float+0x2d0>)
 800f4c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f4c6:	bf94      	ite	ls
 800f4c8:	4690      	movls	r8, r2
 800f4ca:	4698      	movhi	r8, r3
 800f4cc:	2303      	movs	r3, #3
 800f4ce:	6123      	str	r3, [r4, #16]
 800f4d0:	f02b 0304 	bic.w	r3, fp, #4
 800f4d4:	6023      	str	r3, [r4, #0]
 800f4d6:	f04f 0900 	mov.w	r9, #0
 800f4da:	9700      	str	r7, [sp, #0]
 800f4dc:	4633      	mov	r3, r6
 800f4de:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f4e0:	4621      	mov	r1, r4
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	f000 f9d2 	bl	800f88c <_printf_common>
 800f4e8:	3001      	adds	r0, #1
 800f4ea:	f040 808d 	bne.w	800f608 <_printf_float+0x1d0>
 800f4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f4f2:	b00d      	add	sp, #52	@ 0x34
 800f4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4f8:	4642      	mov	r2, r8
 800f4fa:	464b      	mov	r3, r9
 800f4fc:	4640      	mov	r0, r8
 800f4fe:	4649      	mov	r1, r9
 800f500:	f7f1 fb34 	bl	8000b6c <__aeabi_dcmpun>
 800f504:	b140      	cbz	r0, 800f518 <_printf_float+0xe0>
 800f506:	464b      	mov	r3, r9
 800f508:	2b00      	cmp	r3, #0
 800f50a:	bfbc      	itt	lt
 800f50c:	232d      	movlt	r3, #45	@ 0x2d
 800f50e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f512:	4a7e      	ldr	r2, [pc, #504]	@ (800f70c <_printf_float+0x2d4>)
 800f514:	4b7e      	ldr	r3, [pc, #504]	@ (800f710 <_printf_float+0x2d8>)
 800f516:	e7d4      	b.n	800f4c2 <_printf_float+0x8a>
 800f518:	6863      	ldr	r3, [r4, #4]
 800f51a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800f51e:	9206      	str	r2, [sp, #24]
 800f520:	1c5a      	adds	r2, r3, #1
 800f522:	d13b      	bne.n	800f59c <_printf_float+0x164>
 800f524:	2306      	movs	r3, #6
 800f526:	6063      	str	r3, [r4, #4]
 800f528:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800f52c:	2300      	movs	r3, #0
 800f52e:	6022      	str	r2, [r4, #0]
 800f530:	9303      	str	r3, [sp, #12]
 800f532:	ab0a      	add	r3, sp, #40	@ 0x28
 800f534:	e9cd a301 	strd	sl, r3, [sp, #4]
 800f538:	ab09      	add	r3, sp, #36	@ 0x24
 800f53a:	9300      	str	r3, [sp, #0]
 800f53c:	6861      	ldr	r1, [r4, #4]
 800f53e:	ec49 8b10 	vmov	d0, r8, r9
 800f542:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f546:	4628      	mov	r0, r5
 800f548:	f7ff fed6 	bl	800f2f8 <__cvt>
 800f54c:	9b06      	ldr	r3, [sp, #24]
 800f54e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f550:	2b47      	cmp	r3, #71	@ 0x47
 800f552:	4680      	mov	r8, r0
 800f554:	d129      	bne.n	800f5aa <_printf_float+0x172>
 800f556:	1cc8      	adds	r0, r1, #3
 800f558:	db02      	blt.n	800f560 <_printf_float+0x128>
 800f55a:	6863      	ldr	r3, [r4, #4]
 800f55c:	4299      	cmp	r1, r3
 800f55e:	dd41      	ble.n	800f5e4 <_printf_float+0x1ac>
 800f560:	f1aa 0a02 	sub.w	sl, sl, #2
 800f564:	fa5f fa8a 	uxtb.w	sl, sl
 800f568:	3901      	subs	r1, #1
 800f56a:	4652      	mov	r2, sl
 800f56c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f570:	9109      	str	r1, [sp, #36]	@ 0x24
 800f572:	f7ff ff26 	bl	800f3c2 <__exponent>
 800f576:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f578:	1813      	adds	r3, r2, r0
 800f57a:	2a01      	cmp	r2, #1
 800f57c:	4681      	mov	r9, r0
 800f57e:	6123      	str	r3, [r4, #16]
 800f580:	dc02      	bgt.n	800f588 <_printf_float+0x150>
 800f582:	6822      	ldr	r2, [r4, #0]
 800f584:	07d2      	lsls	r2, r2, #31
 800f586:	d501      	bpl.n	800f58c <_printf_float+0x154>
 800f588:	3301      	adds	r3, #1
 800f58a:	6123      	str	r3, [r4, #16]
 800f58c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f590:	2b00      	cmp	r3, #0
 800f592:	d0a2      	beq.n	800f4da <_printf_float+0xa2>
 800f594:	232d      	movs	r3, #45	@ 0x2d
 800f596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f59a:	e79e      	b.n	800f4da <_printf_float+0xa2>
 800f59c:	9a06      	ldr	r2, [sp, #24]
 800f59e:	2a47      	cmp	r2, #71	@ 0x47
 800f5a0:	d1c2      	bne.n	800f528 <_printf_float+0xf0>
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1c0      	bne.n	800f528 <_printf_float+0xf0>
 800f5a6:	2301      	movs	r3, #1
 800f5a8:	e7bd      	b.n	800f526 <_printf_float+0xee>
 800f5aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f5ae:	d9db      	bls.n	800f568 <_printf_float+0x130>
 800f5b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f5b4:	d118      	bne.n	800f5e8 <_printf_float+0x1b0>
 800f5b6:	2900      	cmp	r1, #0
 800f5b8:	6863      	ldr	r3, [r4, #4]
 800f5ba:	dd0b      	ble.n	800f5d4 <_printf_float+0x19c>
 800f5bc:	6121      	str	r1, [r4, #16]
 800f5be:	b913      	cbnz	r3, 800f5c6 <_printf_float+0x18e>
 800f5c0:	6822      	ldr	r2, [r4, #0]
 800f5c2:	07d0      	lsls	r0, r2, #31
 800f5c4:	d502      	bpl.n	800f5cc <_printf_float+0x194>
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	440b      	add	r3, r1
 800f5ca:	6123      	str	r3, [r4, #16]
 800f5cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f5ce:	f04f 0900 	mov.w	r9, #0
 800f5d2:	e7db      	b.n	800f58c <_printf_float+0x154>
 800f5d4:	b913      	cbnz	r3, 800f5dc <_printf_float+0x1a4>
 800f5d6:	6822      	ldr	r2, [r4, #0]
 800f5d8:	07d2      	lsls	r2, r2, #31
 800f5da:	d501      	bpl.n	800f5e0 <_printf_float+0x1a8>
 800f5dc:	3302      	adds	r3, #2
 800f5de:	e7f4      	b.n	800f5ca <_printf_float+0x192>
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	e7f2      	b.n	800f5ca <_printf_float+0x192>
 800f5e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f5e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f5ea:	4299      	cmp	r1, r3
 800f5ec:	db05      	blt.n	800f5fa <_printf_float+0x1c2>
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	6121      	str	r1, [r4, #16]
 800f5f2:	07d8      	lsls	r0, r3, #31
 800f5f4:	d5ea      	bpl.n	800f5cc <_printf_float+0x194>
 800f5f6:	1c4b      	adds	r3, r1, #1
 800f5f8:	e7e7      	b.n	800f5ca <_printf_float+0x192>
 800f5fa:	2900      	cmp	r1, #0
 800f5fc:	bfd4      	ite	le
 800f5fe:	f1c1 0202 	rsble	r2, r1, #2
 800f602:	2201      	movgt	r2, #1
 800f604:	4413      	add	r3, r2
 800f606:	e7e0      	b.n	800f5ca <_printf_float+0x192>
 800f608:	6823      	ldr	r3, [r4, #0]
 800f60a:	055a      	lsls	r2, r3, #21
 800f60c:	d407      	bmi.n	800f61e <_printf_float+0x1e6>
 800f60e:	6923      	ldr	r3, [r4, #16]
 800f610:	4642      	mov	r2, r8
 800f612:	4631      	mov	r1, r6
 800f614:	4628      	mov	r0, r5
 800f616:	47b8      	blx	r7
 800f618:	3001      	adds	r0, #1
 800f61a:	d12b      	bne.n	800f674 <_printf_float+0x23c>
 800f61c:	e767      	b.n	800f4ee <_printf_float+0xb6>
 800f61e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f622:	f240 80dd 	bls.w	800f7e0 <_printf_float+0x3a8>
 800f626:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f62a:	2200      	movs	r2, #0
 800f62c:	2300      	movs	r3, #0
 800f62e:	f7f1 fa6b 	bl	8000b08 <__aeabi_dcmpeq>
 800f632:	2800      	cmp	r0, #0
 800f634:	d033      	beq.n	800f69e <_printf_float+0x266>
 800f636:	4a37      	ldr	r2, [pc, #220]	@ (800f714 <_printf_float+0x2dc>)
 800f638:	2301      	movs	r3, #1
 800f63a:	4631      	mov	r1, r6
 800f63c:	4628      	mov	r0, r5
 800f63e:	47b8      	blx	r7
 800f640:	3001      	adds	r0, #1
 800f642:	f43f af54 	beq.w	800f4ee <_printf_float+0xb6>
 800f646:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f64a:	4543      	cmp	r3, r8
 800f64c:	db02      	blt.n	800f654 <_printf_float+0x21c>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	07d8      	lsls	r0, r3, #31
 800f652:	d50f      	bpl.n	800f674 <_printf_float+0x23c>
 800f654:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f658:	4631      	mov	r1, r6
 800f65a:	4628      	mov	r0, r5
 800f65c:	47b8      	blx	r7
 800f65e:	3001      	adds	r0, #1
 800f660:	f43f af45 	beq.w	800f4ee <_printf_float+0xb6>
 800f664:	f04f 0900 	mov.w	r9, #0
 800f668:	f108 38ff 	add.w	r8, r8, #4294967295
 800f66c:	f104 0a1a 	add.w	sl, r4, #26
 800f670:	45c8      	cmp	r8, r9
 800f672:	dc09      	bgt.n	800f688 <_printf_float+0x250>
 800f674:	6823      	ldr	r3, [r4, #0]
 800f676:	079b      	lsls	r3, r3, #30
 800f678:	f100 8103 	bmi.w	800f882 <_printf_float+0x44a>
 800f67c:	68e0      	ldr	r0, [r4, #12]
 800f67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f680:	4298      	cmp	r0, r3
 800f682:	bfb8      	it	lt
 800f684:	4618      	movlt	r0, r3
 800f686:	e734      	b.n	800f4f2 <_printf_float+0xba>
 800f688:	2301      	movs	r3, #1
 800f68a:	4652      	mov	r2, sl
 800f68c:	4631      	mov	r1, r6
 800f68e:	4628      	mov	r0, r5
 800f690:	47b8      	blx	r7
 800f692:	3001      	adds	r0, #1
 800f694:	f43f af2b 	beq.w	800f4ee <_printf_float+0xb6>
 800f698:	f109 0901 	add.w	r9, r9, #1
 800f69c:	e7e8      	b.n	800f670 <_printf_float+0x238>
 800f69e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	dc39      	bgt.n	800f718 <_printf_float+0x2e0>
 800f6a4:	4a1b      	ldr	r2, [pc, #108]	@ (800f714 <_printf_float+0x2dc>)
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	4631      	mov	r1, r6
 800f6aa:	4628      	mov	r0, r5
 800f6ac:	47b8      	blx	r7
 800f6ae:	3001      	adds	r0, #1
 800f6b0:	f43f af1d 	beq.w	800f4ee <_printf_float+0xb6>
 800f6b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f6b8:	ea59 0303 	orrs.w	r3, r9, r3
 800f6bc:	d102      	bne.n	800f6c4 <_printf_float+0x28c>
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	07d9      	lsls	r1, r3, #31
 800f6c2:	d5d7      	bpl.n	800f674 <_printf_float+0x23c>
 800f6c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f6c8:	4631      	mov	r1, r6
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	47b8      	blx	r7
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	f43f af0d 	beq.w	800f4ee <_printf_float+0xb6>
 800f6d4:	f04f 0a00 	mov.w	sl, #0
 800f6d8:	f104 0b1a 	add.w	fp, r4, #26
 800f6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6de:	425b      	negs	r3, r3
 800f6e0:	4553      	cmp	r3, sl
 800f6e2:	dc01      	bgt.n	800f6e8 <_printf_float+0x2b0>
 800f6e4:	464b      	mov	r3, r9
 800f6e6:	e793      	b.n	800f610 <_printf_float+0x1d8>
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	465a      	mov	r2, fp
 800f6ec:	4631      	mov	r1, r6
 800f6ee:	4628      	mov	r0, r5
 800f6f0:	47b8      	blx	r7
 800f6f2:	3001      	adds	r0, #1
 800f6f4:	f43f aefb 	beq.w	800f4ee <_printf_float+0xb6>
 800f6f8:	f10a 0a01 	add.w	sl, sl, #1
 800f6fc:	e7ee      	b.n	800f6dc <_printf_float+0x2a4>
 800f6fe:	bf00      	nop
 800f700:	7fefffff 	.word	0x7fefffff
 800f704:	080165a0 	.word	0x080165a0
 800f708:	080165a4 	.word	0x080165a4
 800f70c:	080165a8 	.word	0x080165a8
 800f710:	080165ac 	.word	0x080165ac
 800f714:	08016940 	.word	0x08016940
 800f718:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f71a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f71e:	4553      	cmp	r3, sl
 800f720:	bfa8      	it	ge
 800f722:	4653      	movge	r3, sl
 800f724:	2b00      	cmp	r3, #0
 800f726:	4699      	mov	r9, r3
 800f728:	dc36      	bgt.n	800f798 <_printf_float+0x360>
 800f72a:	f04f 0b00 	mov.w	fp, #0
 800f72e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f732:	f104 021a 	add.w	r2, r4, #26
 800f736:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f738:	9306      	str	r3, [sp, #24]
 800f73a:	eba3 0309 	sub.w	r3, r3, r9
 800f73e:	455b      	cmp	r3, fp
 800f740:	dc31      	bgt.n	800f7a6 <_printf_float+0x36e>
 800f742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f744:	459a      	cmp	sl, r3
 800f746:	dc3a      	bgt.n	800f7be <_printf_float+0x386>
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	07da      	lsls	r2, r3, #31
 800f74c:	d437      	bmi.n	800f7be <_printf_float+0x386>
 800f74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f750:	ebaa 0903 	sub.w	r9, sl, r3
 800f754:	9b06      	ldr	r3, [sp, #24]
 800f756:	ebaa 0303 	sub.w	r3, sl, r3
 800f75a:	4599      	cmp	r9, r3
 800f75c:	bfa8      	it	ge
 800f75e:	4699      	movge	r9, r3
 800f760:	f1b9 0f00 	cmp.w	r9, #0
 800f764:	dc33      	bgt.n	800f7ce <_printf_float+0x396>
 800f766:	f04f 0800 	mov.w	r8, #0
 800f76a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f76e:	f104 0b1a 	add.w	fp, r4, #26
 800f772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f774:	ebaa 0303 	sub.w	r3, sl, r3
 800f778:	eba3 0309 	sub.w	r3, r3, r9
 800f77c:	4543      	cmp	r3, r8
 800f77e:	f77f af79 	ble.w	800f674 <_printf_float+0x23c>
 800f782:	2301      	movs	r3, #1
 800f784:	465a      	mov	r2, fp
 800f786:	4631      	mov	r1, r6
 800f788:	4628      	mov	r0, r5
 800f78a:	47b8      	blx	r7
 800f78c:	3001      	adds	r0, #1
 800f78e:	f43f aeae 	beq.w	800f4ee <_printf_float+0xb6>
 800f792:	f108 0801 	add.w	r8, r8, #1
 800f796:	e7ec      	b.n	800f772 <_printf_float+0x33a>
 800f798:	4642      	mov	r2, r8
 800f79a:	4631      	mov	r1, r6
 800f79c:	4628      	mov	r0, r5
 800f79e:	47b8      	blx	r7
 800f7a0:	3001      	adds	r0, #1
 800f7a2:	d1c2      	bne.n	800f72a <_printf_float+0x2f2>
 800f7a4:	e6a3      	b.n	800f4ee <_printf_float+0xb6>
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	9206      	str	r2, [sp, #24]
 800f7ae:	47b8      	blx	r7
 800f7b0:	3001      	adds	r0, #1
 800f7b2:	f43f ae9c 	beq.w	800f4ee <_printf_float+0xb6>
 800f7b6:	9a06      	ldr	r2, [sp, #24]
 800f7b8:	f10b 0b01 	add.w	fp, fp, #1
 800f7bc:	e7bb      	b.n	800f736 <_printf_float+0x2fe>
 800f7be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f7c2:	4631      	mov	r1, r6
 800f7c4:	4628      	mov	r0, r5
 800f7c6:	47b8      	blx	r7
 800f7c8:	3001      	adds	r0, #1
 800f7ca:	d1c0      	bne.n	800f74e <_printf_float+0x316>
 800f7cc:	e68f      	b.n	800f4ee <_printf_float+0xb6>
 800f7ce:	9a06      	ldr	r2, [sp, #24]
 800f7d0:	464b      	mov	r3, r9
 800f7d2:	4442      	add	r2, r8
 800f7d4:	4631      	mov	r1, r6
 800f7d6:	4628      	mov	r0, r5
 800f7d8:	47b8      	blx	r7
 800f7da:	3001      	adds	r0, #1
 800f7dc:	d1c3      	bne.n	800f766 <_printf_float+0x32e>
 800f7de:	e686      	b.n	800f4ee <_printf_float+0xb6>
 800f7e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f7e4:	f1ba 0f01 	cmp.w	sl, #1
 800f7e8:	dc01      	bgt.n	800f7ee <_printf_float+0x3b6>
 800f7ea:	07db      	lsls	r3, r3, #31
 800f7ec:	d536      	bpl.n	800f85c <_printf_float+0x424>
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	4642      	mov	r2, r8
 800f7f2:	4631      	mov	r1, r6
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	47b8      	blx	r7
 800f7f8:	3001      	adds	r0, #1
 800f7fa:	f43f ae78 	beq.w	800f4ee <_printf_float+0xb6>
 800f7fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f802:	4631      	mov	r1, r6
 800f804:	4628      	mov	r0, r5
 800f806:	47b8      	blx	r7
 800f808:	3001      	adds	r0, #1
 800f80a:	f43f ae70 	beq.w	800f4ee <_printf_float+0xb6>
 800f80e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f812:	2200      	movs	r2, #0
 800f814:	2300      	movs	r3, #0
 800f816:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f81a:	f7f1 f975 	bl	8000b08 <__aeabi_dcmpeq>
 800f81e:	b9c0      	cbnz	r0, 800f852 <_printf_float+0x41a>
 800f820:	4653      	mov	r3, sl
 800f822:	f108 0201 	add.w	r2, r8, #1
 800f826:	4631      	mov	r1, r6
 800f828:	4628      	mov	r0, r5
 800f82a:	47b8      	blx	r7
 800f82c:	3001      	adds	r0, #1
 800f82e:	d10c      	bne.n	800f84a <_printf_float+0x412>
 800f830:	e65d      	b.n	800f4ee <_printf_float+0xb6>
 800f832:	2301      	movs	r3, #1
 800f834:	465a      	mov	r2, fp
 800f836:	4631      	mov	r1, r6
 800f838:	4628      	mov	r0, r5
 800f83a:	47b8      	blx	r7
 800f83c:	3001      	adds	r0, #1
 800f83e:	f43f ae56 	beq.w	800f4ee <_printf_float+0xb6>
 800f842:	f108 0801 	add.w	r8, r8, #1
 800f846:	45d0      	cmp	r8, sl
 800f848:	dbf3      	blt.n	800f832 <_printf_float+0x3fa>
 800f84a:	464b      	mov	r3, r9
 800f84c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f850:	e6df      	b.n	800f612 <_printf_float+0x1da>
 800f852:	f04f 0800 	mov.w	r8, #0
 800f856:	f104 0b1a 	add.w	fp, r4, #26
 800f85a:	e7f4      	b.n	800f846 <_printf_float+0x40e>
 800f85c:	2301      	movs	r3, #1
 800f85e:	4642      	mov	r2, r8
 800f860:	e7e1      	b.n	800f826 <_printf_float+0x3ee>
 800f862:	2301      	movs	r3, #1
 800f864:	464a      	mov	r2, r9
 800f866:	4631      	mov	r1, r6
 800f868:	4628      	mov	r0, r5
 800f86a:	47b8      	blx	r7
 800f86c:	3001      	adds	r0, #1
 800f86e:	f43f ae3e 	beq.w	800f4ee <_printf_float+0xb6>
 800f872:	f108 0801 	add.w	r8, r8, #1
 800f876:	68e3      	ldr	r3, [r4, #12]
 800f878:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f87a:	1a5b      	subs	r3, r3, r1
 800f87c:	4543      	cmp	r3, r8
 800f87e:	dcf0      	bgt.n	800f862 <_printf_float+0x42a>
 800f880:	e6fc      	b.n	800f67c <_printf_float+0x244>
 800f882:	f04f 0800 	mov.w	r8, #0
 800f886:	f104 0919 	add.w	r9, r4, #25
 800f88a:	e7f4      	b.n	800f876 <_printf_float+0x43e>

0800f88c <_printf_common>:
 800f88c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f890:	4616      	mov	r6, r2
 800f892:	4698      	mov	r8, r3
 800f894:	688a      	ldr	r2, [r1, #8]
 800f896:	690b      	ldr	r3, [r1, #16]
 800f898:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f89c:	4293      	cmp	r3, r2
 800f89e:	bfb8      	it	lt
 800f8a0:	4613      	movlt	r3, r2
 800f8a2:	6033      	str	r3, [r6, #0]
 800f8a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f8a8:	4607      	mov	r7, r0
 800f8aa:	460c      	mov	r4, r1
 800f8ac:	b10a      	cbz	r2, 800f8b2 <_printf_common+0x26>
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	6033      	str	r3, [r6, #0]
 800f8b2:	6823      	ldr	r3, [r4, #0]
 800f8b4:	0699      	lsls	r1, r3, #26
 800f8b6:	bf42      	ittt	mi
 800f8b8:	6833      	ldrmi	r3, [r6, #0]
 800f8ba:	3302      	addmi	r3, #2
 800f8bc:	6033      	strmi	r3, [r6, #0]
 800f8be:	6825      	ldr	r5, [r4, #0]
 800f8c0:	f015 0506 	ands.w	r5, r5, #6
 800f8c4:	d106      	bne.n	800f8d4 <_printf_common+0x48>
 800f8c6:	f104 0a19 	add.w	sl, r4, #25
 800f8ca:	68e3      	ldr	r3, [r4, #12]
 800f8cc:	6832      	ldr	r2, [r6, #0]
 800f8ce:	1a9b      	subs	r3, r3, r2
 800f8d0:	42ab      	cmp	r3, r5
 800f8d2:	dc26      	bgt.n	800f922 <_printf_common+0x96>
 800f8d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f8d8:	6822      	ldr	r2, [r4, #0]
 800f8da:	3b00      	subs	r3, #0
 800f8dc:	bf18      	it	ne
 800f8de:	2301      	movne	r3, #1
 800f8e0:	0692      	lsls	r2, r2, #26
 800f8e2:	d42b      	bmi.n	800f93c <_printf_common+0xb0>
 800f8e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f8e8:	4641      	mov	r1, r8
 800f8ea:	4638      	mov	r0, r7
 800f8ec:	47c8      	blx	r9
 800f8ee:	3001      	adds	r0, #1
 800f8f0:	d01e      	beq.n	800f930 <_printf_common+0xa4>
 800f8f2:	6823      	ldr	r3, [r4, #0]
 800f8f4:	6922      	ldr	r2, [r4, #16]
 800f8f6:	f003 0306 	and.w	r3, r3, #6
 800f8fa:	2b04      	cmp	r3, #4
 800f8fc:	bf02      	ittt	eq
 800f8fe:	68e5      	ldreq	r5, [r4, #12]
 800f900:	6833      	ldreq	r3, [r6, #0]
 800f902:	1aed      	subeq	r5, r5, r3
 800f904:	68a3      	ldr	r3, [r4, #8]
 800f906:	bf0c      	ite	eq
 800f908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f90c:	2500      	movne	r5, #0
 800f90e:	4293      	cmp	r3, r2
 800f910:	bfc4      	itt	gt
 800f912:	1a9b      	subgt	r3, r3, r2
 800f914:	18ed      	addgt	r5, r5, r3
 800f916:	2600      	movs	r6, #0
 800f918:	341a      	adds	r4, #26
 800f91a:	42b5      	cmp	r5, r6
 800f91c:	d11a      	bne.n	800f954 <_printf_common+0xc8>
 800f91e:	2000      	movs	r0, #0
 800f920:	e008      	b.n	800f934 <_printf_common+0xa8>
 800f922:	2301      	movs	r3, #1
 800f924:	4652      	mov	r2, sl
 800f926:	4641      	mov	r1, r8
 800f928:	4638      	mov	r0, r7
 800f92a:	47c8      	blx	r9
 800f92c:	3001      	adds	r0, #1
 800f92e:	d103      	bne.n	800f938 <_printf_common+0xac>
 800f930:	f04f 30ff 	mov.w	r0, #4294967295
 800f934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f938:	3501      	adds	r5, #1
 800f93a:	e7c6      	b.n	800f8ca <_printf_common+0x3e>
 800f93c:	18e1      	adds	r1, r4, r3
 800f93e:	1c5a      	adds	r2, r3, #1
 800f940:	2030      	movs	r0, #48	@ 0x30
 800f942:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f946:	4422      	add	r2, r4
 800f948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f94c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f950:	3302      	adds	r3, #2
 800f952:	e7c7      	b.n	800f8e4 <_printf_common+0x58>
 800f954:	2301      	movs	r3, #1
 800f956:	4622      	mov	r2, r4
 800f958:	4641      	mov	r1, r8
 800f95a:	4638      	mov	r0, r7
 800f95c:	47c8      	blx	r9
 800f95e:	3001      	adds	r0, #1
 800f960:	d0e6      	beq.n	800f930 <_printf_common+0xa4>
 800f962:	3601      	adds	r6, #1
 800f964:	e7d9      	b.n	800f91a <_printf_common+0x8e>
	...

0800f968 <_printf_i>:
 800f968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f96c:	7e0f      	ldrb	r7, [r1, #24]
 800f96e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f970:	2f78      	cmp	r7, #120	@ 0x78
 800f972:	4691      	mov	r9, r2
 800f974:	4680      	mov	r8, r0
 800f976:	460c      	mov	r4, r1
 800f978:	469a      	mov	sl, r3
 800f97a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f97e:	d807      	bhi.n	800f990 <_printf_i+0x28>
 800f980:	2f62      	cmp	r7, #98	@ 0x62
 800f982:	d80a      	bhi.n	800f99a <_printf_i+0x32>
 800f984:	2f00      	cmp	r7, #0
 800f986:	f000 80d2 	beq.w	800fb2e <_printf_i+0x1c6>
 800f98a:	2f58      	cmp	r7, #88	@ 0x58
 800f98c:	f000 80b9 	beq.w	800fb02 <_printf_i+0x19a>
 800f990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f994:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f998:	e03a      	b.n	800fa10 <_printf_i+0xa8>
 800f99a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f99e:	2b15      	cmp	r3, #21
 800f9a0:	d8f6      	bhi.n	800f990 <_printf_i+0x28>
 800f9a2:	a101      	add	r1, pc, #4	@ (adr r1, 800f9a8 <_printf_i+0x40>)
 800f9a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f9a8:	0800fa01 	.word	0x0800fa01
 800f9ac:	0800fa15 	.word	0x0800fa15
 800f9b0:	0800f991 	.word	0x0800f991
 800f9b4:	0800f991 	.word	0x0800f991
 800f9b8:	0800f991 	.word	0x0800f991
 800f9bc:	0800f991 	.word	0x0800f991
 800f9c0:	0800fa15 	.word	0x0800fa15
 800f9c4:	0800f991 	.word	0x0800f991
 800f9c8:	0800f991 	.word	0x0800f991
 800f9cc:	0800f991 	.word	0x0800f991
 800f9d0:	0800f991 	.word	0x0800f991
 800f9d4:	0800fb15 	.word	0x0800fb15
 800f9d8:	0800fa3f 	.word	0x0800fa3f
 800f9dc:	0800facf 	.word	0x0800facf
 800f9e0:	0800f991 	.word	0x0800f991
 800f9e4:	0800f991 	.word	0x0800f991
 800f9e8:	0800fb37 	.word	0x0800fb37
 800f9ec:	0800f991 	.word	0x0800f991
 800f9f0:	0800fa3f 	.word	0x0800fa3f
 800f9f4:	0800f991 	.word	0x0800f991
 800f9f8:	0800f991 	.word	0x0800f991
 800f9fc:	0800fad7 	.word	0x0800fad7
 800fa00:	6833      	ldr	r3, [r6, #0]
 800fa02:	1d1a      	adds	r2, r3, #4
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	6032      	str	r2, [r6, #0]
 800fa08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fa0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fa10:	2301      	movs	r3, #1
 800fa12:	e09d      	b.n	800fb50 <_printf_i+0x1e8>
 800fa14:	6833      	ldr	r3, [r6, #0]
 800fa16:	6820      	ldr	r0, [r4, #0]
 800fa18:	1d19      	adds	r1, r3, #4
 800fa1a:	6031      	str	r1, [r6, #0]
 800fa1c:	0606      	lsls	r6, r0, #24
 800fa1e:	d501      	bpl.n	800fa24 <_printf_i+0xbc>
 800fa20:	681d      	ldr	r5, [r3, #0]
 800fa22:	e003      	b.n	800fa2c <_printf_i+0xc4>
 800fa24:	0645      	lsls	r5, r0, #25
 800fa26:	d5fb      	bpl.n	800fa20 <_printf_i+0xb8>
 800fa28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fa2c:	2d00      	cmp	r5, #0
 800fa2e:	da03      	bge.n	800fa38 <_printf_i+0xd0>
 800fa30:	232d      	movs	r3, #45	@ 0x2d
 800fa32:	426d      	negs	r5, r5
 800fa34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fa38:	4859      	ldr	r0, [pc, #356]	@ (800fba0 <_printf_i+0x238>)
 800fa3a:	230a      	movs	r3, #10
 800fa3c:	e011      	b.n	800fa62 <_printf_i+0xfa>
 800fa3e:	6821      	ldr	r1, [r4, #0]
 800fa40:	6833      	ldr	r3, [r6, #0]
 800fa42:	0608      	lsls	r0, r1, #24
 800fa44:	f853 5b04 	ldr.w	r5, [r3], #4
 800fa48:	d402      	bmi.n	800fa50 <_printf_i+0xe8>
 800fa4a:	0649      	lsls	r1, r1, #25
 800fa4c:	bf48      	it	mi
 800fa4e:	b2ad      	uxthmi	r5, r5
 800fa50:	2f6f      	cmp	r7, #111	@ 0x6f
 800fa52:	4853      	ldr	r0, [pc, #332]	@ (800fba0 <_printf_i+0x238>)
 800fa54:	6033      	str	r3, [r6, #0]
 800fa56:	bf14      	ite	ne
 800fa58:	230a      	movne	r3, #10
 800fa5a:	2308      	moveq	r3, #8
 800fa5c:	2100      	movs	r1, #0
 800fa5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fa62:	6866      	ldr	r6, [r4, #4]
 800fa64:	60a6      	str	r6, [r4, #8]
 800fa66:	2e00      	cmp	r6, #0
 800fa68:	bfa2      	ittt	ge
 800fa6a:	6821      	ldrge	r1, [r4, #0]
 800fa6c:	f021 0104 	bicge.w	r1, r1, #4
 800fa70:	6021      	strge	r1, [r4, #0]
 800fa72:	b90d      	cbnz	r5, 800fa78 <_printf_i+0x110>
 800fa74:	2e00      	cmp	r6, #0
 800fa76:	d04b      	beq.n	800fb10 <_printf_i+0x1a8>
 800fa78:	4616      	mov	r6, r2
 800fa7a:	fbb5 f1f3 	udiv	r1, r5, r3
 800fa7e:	fb03 5711 	mls	r7, r3, r1, r5
 800fa82:	5dc7      	ldrb	r7, [r0, r7]
 800fa84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fa88:	462f      	mov	r7, r5
 800fa8a:	42bb      	cmp	r3, r7
 800fa8c:	460d      	mov	r5, r1
 800fa8e:	d9f4      	bls.n	800fa7a <_printf_i+0x112>
 800fa90:	2b08      	cmp	r3, #8
 800fa92:	d10b      	bne.n	800faac <_printf_i+0x144>
 800fa94:	6823      	ldr	r3, [r4, #0]
 800fa96:	07df      	lsls	r7, r3, #31
 800fa98:	d508      	bpl.n	800faac <_printf_i+0x144>
 800fa9a:	6923      	ldr	r3, [r4, #16]
 800fa9c:	6861      	ldr	r1, [r4, #4]
 800fa9e:	4299      	cmp	r1, r3
 800faa0:	bfde      	ittt	le
 800faa2:	2330      	movle	r3, #48	@ 0x30
 800faa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800faa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800faac:	1b92      	subs	r2, r2, r6
 800faae:	6122      	str	r2, [r4, #16]
 800fab0:	f8cd a000 	str.w	sl, [sp]
 800fab4:	464b      	mov	r3, r9
 800fab6:	aa03      	add	r2, sp, #12
 800fab8:	4621      	mov	r1, r4
 800faba:	4640      	mov	r0, r8
 800fabc:	f7ff fee6 	bl	800f88c <_printf_common>
 800fac0:	3001      	adds	r0, #1
 800fac2:	d14a      	bne.n	800fb5a <_printf_i+0x1f2>
 800fac4:	f04f 30ff 	mov.w	r0, #4294967295
 800fac8:	b004      	add	sp, #16
 800faca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800face:	6823      	ldr	r3, [r4, #0]
 800fad0:	f043 0320 	orr.w	r3, r3, #32
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	4833      	ldr	r0, [pc, #204]	@ (800fba4 <_printf_i+0x23c>)
 800fad8:	2778      	movs	r7, #120	@ 0x78
 800fada:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fade:	6823      	ldr	r3, [r4, #0]
 800fae0:	6831      	ldr	r1, [r6, #0]
 800fae2:	061f      	lsls	r7, r3, #24
 800fae4:	f851 5b04 	ldr.w	r5, [r1], #4
 800fae8:	d402      	bmi.n	800faf0 <_printf_i+0x188>
 800faea:	065f      	lsls	r7, r3, #25
 800faec:	bf48      	it	mi
 800faee:	b2ad      	uxthmi	r5, r5
 800faf0:	6031      	str	r1, [r6, #0]
 800faf2:	07d9      	lsls	r1, r3, #31
 800faf4:	bf44      	itt	mi
 800faf6:	f043 0320 	orrmi.w	r3, r3, #32
 800fafa:	6023      	strmi	r3, [r4, #0]
 800fafc:	b11d      	cbz	r5, 800fb06 <_printf_i+0x19e>
 800fafe:	2310      	movs	r3, #16
 800fb00:	e7ac      	b.n	800fa5c <_printf_i+0xf4>
 800fb02:	4827      	ldr	r0, [pc, #156]	@ (800fba0 <_printf_i+0x238>)
 800fb04:	e7e9      	b.n	800fada <_printf_i+0x172>
 800fb06:	6823      	ldr	r3, [r4, #0]
 800fb08:	f023 0320 	bic.w	r3, r3, #32
 800fb0c:	6023      	str	r3, [r4, #0]
 800fb0e:	e7f6      	b.n	800fafe <_printf_i+0x196>
 800fb10:	4616      	mov	r6, r2
 800fb12:	e7bd      	b.n	800fa90 <_printf_i+0x128>
 800fb14:	6833      	ldr	r3, [r6, #0]
 800fb16:	6825      	ldr	r5, [r4, #0]
 800fb18:	6961      	ldr	r1, [r4, #20]
 800fb1a:	1d18      	adds	r0, r3, #4
 800fb1c:	6030      	str	r0, [r6, #0]
 800fb1e:	062e      	lsls	r6, r5, #24
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	d501      	bpl.n	800fb28 <_printf_i+0x1c0>
 800fb24:	6019      	str	r1, [r3, #0]
 800fb26:	e002      	b.n	800fb2e <_printf_i+0x1c6>
 800fb28:	0668      	lsls	r0, r5, #25
 800fb2a:	d5fb      	bpl.n	800fb24 <_printf_i+0x1bc>
 800fb2c:	8019      	strh	r1, [r3, #0]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	6123      	str	r3, [r4, #16]
 800fb32:	4616      	mov	r6, r2
 800fb34:	e7bc      	b.n	800fab0 <_printf_i+0x148>
 800fb36:	6833      	ldr	r3, [r6, #0]
 800fb38:	1d1a      	adds	r2, r3, #4
 800fb3a:	6032      	str	r2, [r6, #0]
 800fb3c:	681e      	ldr	r6, [r3, #0]
 800fb3e:	6862      	ldr	r2, [r4, #4]
 800fb40:	2100      	movs	r1, #0
 800fb42:	4630      	mov	r0, r6
 800fb44:	f7f0 fb64 	bl	8000210 <memchr>
 800fb48:	b108      	cbz	r0, 800fb4e <_printf_i+0x1e6>
 800fb4a:	1b80      	subs	r0, r0, r6
 800fb4c:	6060      	str	r0, [r4, #4]
 800fb4e:	6863      	ldr	r3, [r4, #4]
 800fb50:	6123      	str	r3, [r4, #16]
 800fb52:	2300      	movs	r3, #0
 800fb54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb58:	e7aa      	b.n	800fab0 <_printf_i+0x148>
 800fb5a:	6923      	ldr	r3, [r4, #16]
 800fb5c:	4632      	mov	r2, r6
 800fb5e:	4649      	mov	r1, r9
 800fb60:	4640      	mov	r0, r8
 800fb62:	47d0      	blx	sl
 800fb64:	3001      	adds	r0, #1
 800fb66:	d0ad      	beq.n	800fac4 <_printf_i+0x15c>
 800fb68:	6823      	ldr	r3, [r4, #0]
 800fb6a:	079b      	lsls	r3, r3, #30
 800fb6c:	d413      	bmi.n	800fb96 <_printf_i+0x22e>
 800fb6e:	68e0      	ldr	r0, [r4, #12]
 800fb70:	9b03      	ldr	r3, [sp, #12]
 800fb72:	4298      	cmp	r0, r3
 800fb74:	bfb8      	it	lt
 800fb76:	4618      	movlt	r0, r3
 800fb78:	e7a6      	b.n	800fac8 <_printf_i+0x160>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	4632      	mov	r2, r6
 800fb7e:	4649      	mov	r1, r9
 800fb80:	4640      	mov	r0, r8
 800fb82:	47d0      	blx	sl
 800fb84:	3001      	adds	r0, #1
 800fb86:	d09d      	beq.n	800fac4 <_printf_i+0x15c>
 800fb88:	3501      	adds	r5, #1
 800fb8a:	68e3      	ldr	r3, [r4, #12]
 800fb8c:	9903      	ldr	r1, [sp, #12]
 800fb8e:	1a5b      	subs	r3, r3, r1
 800fb90:	42ab      	cmp	r3, r5
 800fb92:	dcf2      	bgt.n	800fb7a <_printf_i+0x212>
 800fb94:	e7eb      	b.n	800fb6e <_printf_i+0x206>
 800fb96:	2500      	movs	r5, #0
 800fb98:	f104 0619 	add.w	r6, r4, #25
 800fb9c:	e7f5      	b.n	800fb8a <_printf_i+0x222>
 800fb9e:	bf00      	nop
 800fba0:	080165b0 	.word	0x080165b0
 800fba4:	080165c1 	.word	0x080165c1

0800fba8 <_scanf_float>:
 800fba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbac:	b087      	sub	sp, #28
 800fbae:	4617      	mov	r7, r2
 800fbb0:	9303      	str	r3, [sp, #12]
 800fbb2:	688b      	ldr	r3, [r1, #8]
 800fbb4:	1e5a      	subs	r2, r3, #1
 800fbb6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fbba:	bf81      	itttt	hi
 800fbbc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fbc0:	eb03 0b05 	addhi.w	fp, r3, r5
 800fbc4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fbc8:	608b      	strhi	r3, [r1, #8]
 800fbca:	680b      	ldr	r3, [r1, #0]
 800fbcc:	460a      	mov	r2, r1
 800fbce:	f04f 0500 	mov.w	r5, #0
 800fbd2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800fbd6:	f842 3b1c 	str.w	r3, [r2], #28
 800fbda:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fbde:	4680      	mov	r8, r0
 800fbe0:	460c      	mov	r4, r1
 800fbe2:	bf98      	it	ls
 800fbe4:	f04f 0b00 	movls.w	fp, #0
 800fbe8:	9201      	str	r2, [sp, #4]
 800fbea:	4616      	mov	r6, r2
 800fbec:	46aa      	mov	sl, r5
 800fbee:	46a9      	mov	r9, r5
 800fbf0:	9502      	str	r5, [sp, #8]
 800fbf2:	68a2      	ldr	r2, [r4, #8]
 800fbf4:	b152      	cbz	r2, 800fc0c <_scanf_float+0x64>
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	2b4e      	cmp	r3, #78	@ 0x4e
 800fbfc:	d864      	bhi.n	800fcc8 <_scanf_float+0x120>
 800fbfe:	2b40      	cmp	r3, #64	@ 0x40
 800fc00:	d83c      	bhi.n	800fc7c <_scanf_float+0xd4>
 800fc02:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800fc06:	b2c8      	uxtb	r0, r1
 800fc08:	280e      	cmp	r0, #14
 800fc0a:	d93a      	bls.n	800fc82 <_scanf_float+0xda>
 800fc0c:	f1b9 0f00 	cmp.w	r9, #0
 800fc10:	d003      	beq.n	800fc1a <_scanf_float+0x72>
 800fc12:	6823      	ldr	r3, [r4, #0]
 800fc14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc18:	6023      	str	r3, [r4, #0]
 800fc1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fc1e:	f1ba 0f01 	cmp.w	sl, #1
 800fc22:	f200 8117 	bhi.w	800fe54 <_scanf_float+0x2ac>
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	429e      	cmp	r6, r3
 800fc2a:	f200 8108 	bhi.w	800fe3e <_scanf_float+0x296>
 800fc2e:	2001      	movs	r0, #1
 800fc30:	b007      	add	sp, #28
 800fc32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc36:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800fc3a:	2a0d      	cmp	r2, #13
 800fc3c:	d8e6      	bhi.n	800fc0c <_scanf_float+0x64>
 800fc3e:	a101      	add	r1, pc, #4	@ (adr r1, 800fc44 <_scanf_float+0x9c>)
 800fc40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fc44:	0800fd8b 	.word	0x0800fd8b
 800fc48:	0800fc0d 	.word	0x0800fc0d
 800fc4c:	0800fc0d 	.word	0x0800fc0d
 800fc50:	0800fc0d 	.word	0x0800fc0d
 800fc54:	0800fdeb 	.word	0x0800fdeb
 800fc58:	0800fdc3 	.word	0x0800fdc3
 800fc5c:	0800fc0d 	.word	0x0800fc0d
 800fc60:	0800fc0d 	.word	0x0800fc0d
 800fc64:	0800fd99 	.word	0x0800fd99
 800fc68:	0800fc0d 	.word	0x0800fc0d
 800fc6c:	0800fc0d 	.word	0x0800fc0d
 800fc70:	0800fc0d 	.word	0x0800fc0d
 800fc74:	0800fc0d 	.word	0x0800fc0d
 800fc78:	0800fd51 	.word	0x0800fd51
 800fc7c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800fc80:	e7db      	b.n	800fc3a <_scanf_float+0x92>
 800fc82:	290e      	cmp	r1, #14
 800fc84:	d8c2      	bhi.n	800fc0c <_scanf_float+0x64>
 800fc86:	a001      	add	r0, pc, #4	@ (adr r0, 800fc8c <_scanf_float+0xe4>)
 800fc88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fc8c:	0800fd41 	.word	0x0800fd41
 800fc90:	0800fc0d 	.word	0x0800fc0d
 800fc94:	0800fd41 	.word	0x0800fd41
 800fc98:	0800fdd7 	.word	0x0800fdd7
 800fc9c:	0800fc0d 	.word	0x0800fc0d
 800fca0:	0800fce9 	.word	0x0800fce9
 800fca4:	0800fd27 	.word	0x0800fd27
 800fca8:	0800fd27 	.word	0x0800fd27
 800fcac:	0800fd27 	.word	0x0800fd27
 800fcb0:	0800fd27 	.word	0x0800fd27
 800fcb4:	0800fd27 	.word	0x0800fd27
 800fcb8:	0800fd27 	.word	0x0800fd27
 800fcbc:	0800fd27 	.word	0x0800fd27
 800fcc0:	0800fd27 	.word	0x0800fd27
 800fcc4:	0800fd27 	.word	0x0800fd27
 800fcc8:	2b6e      	cmp	r3, #110	@ 0x6e
 800fcca:	d809      	bhi.n	800fce0 <_scanf_float+0x138>
 800fccc:	2b60      	cmp	r3, #96	@ 0x60
 800fcce:	d8b2      	bhi.n	800fc36 <_scanf_float+0x8e>
 800fcd0:	2b54      	cmp	r3, #84	@ 0x54
 800fcd2:	d07b      	beq.n	800fdcc <_scanf_float+0x224>
 800fcd4:	2b59      	cmp	r3, #89	@ 0x59
 800fcd6:	d199      	bne.n	800fc0c <_scanf_float+0x64>
 800fcd8:	2d07      	cmp	r5, #7
 800fcda:	d197      	bne.n	800fc0c <_scanf_float+0x64>
 800fcdc:	2508      	movs	r5, #8
 800fcde:	e02c      	b.n	800fd3a <_scanf_float+0x192>
 800fce0:	2b74      	cmp	r3, #116	@ 0x74
 800fce2:	d073      	beq.n	800fdcc <_scanf_float+0x224>
 800fce4:	2b79      	cmp	r3, #121	@ 0x79
 800fce6:	e7f6      	b.n	800fcd6 <_scanf_float+0x12e>
 800fce8:	6821      	ldr	r1, [r4, #0]
 800fcea:	05c8      	lsls	r0, r1, #23
 800fcec:	d51b      	bpl.n	800fd26 <_scanf_float+0x17e>
 800fcee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800fcf2:	6021      	str	r1, [r4, #0]
 800fcf4:	f109 0901 	add.w	r9, r9, #1
 800fcf8:	f1bb 0f00 	cmp.w	fp, #0
 800fcfc:	d003      	beq.n	800fd06 <_scanf_float+0x15e>
 800fcfe:	3201      	adds	r2, #1
 800fd00:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fd04:	60a2      	str	r2, [r4, #8]
 800fd06:	68a3      	ldr	r3, [r4, #8]
 800fd08:	3b01      	subs	r3, #1
 800fd0a:	60a3      	str	r3, [r4, #8]
 800fd0c:	6923      	ldr	r3, [r4, #16]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	6123      	str	r3, [r4, #16]
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	3b01      	subs	r3, #1
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	607b      	str	r3, [r7, #4]
 800fd1a:	f340 8087 	ble.w	800fe2c <_scanf_float+0x284>
 800fd1e:	683b      	ldr	r3, [r7, #0]
 800fd20:	3301      	adds	r3, #1
 800fd22:	603b      	str	r3, [r7, #0]
 800fd24:	e765      	b.n	800fbf2 <_scanf_float+0x4a>
 800fd26:	eb1a 0105 	adds.w	r1, sl, r5
 800fd2a:	f47f af6f 	bne.w	800fc0c <_scanf_float+0x64>
 800fd2e:	6822      	ldr	r2, [r4, #0]
 800fd30:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800fd34:	6022      	str	r2, [r4, #0]
 800fd36:	460d      	mov	r5, r1
 800fd38:	468a      	mov	sl, r1
 800fd3a:	f806 3b01 	strb.w	r3, [r6], #1
 800fd3e:	e7e2      	b.n	800fd06 <_scanf_float+0x15e>
 800fd40:	6822      	ldr	r2, [r4, #0]
 800fd42:	0610      	lsls	r0, r2, #24
 800fd44:	f57f af62 	bpl.w	800fc0c <_scanf_float+0x64>
 800fd48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fd4c:	6022      	str	r2, [r4, #0]
 800fd4e:	e7f4      	b.n	800fd3a <_scanf_float+0x192>
 800fd50:	f1ba 0f00 	cmp.w	sl, #0
 800fd54:	d10e      	bne.n	800fd74 <_scanf_float+0x1cc>
 800fd56:	f1b9 0f00 	cmp.w	r9, #0
 800fd5a:	d10e      	bne.n	800fd7a <_scanf_float+0x1d2>
 800fd5c:	6822      	ldr	r2, [r4, #0]
 800fd5e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fd62:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fd66:	d108      	bne.n	800fd7a <_scanf_float+0x1d2>
 800fd68:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fd6c:	6022      	str	r2, [r4, #0]
 800fd6e:	f04f 0a01 	mov.w	sl, #1
 800fd72:	e7e2      	b.n	800fd3a <_scanf_float+0x192>
 800fd74:	f1ba 0f02 	cmp.w	sl, #2
 800fd78:	d055      	beq.n	800fe26 <_scanf_float+0x27e>
 800fd7a:	2d01      	cmp	r5, #1
 800fd7c:	d002      	beq.n	800fd84 <_scanf_float+0x1dc>
 800fd7e:	2d04      	cmp	r5, #4
 800fd80:	f47f af44 	bne.w	800fc0c <_scanf_float+0x64>
 800fd84:	3501      	adds	r5, #1
 800fd86:	b2ed      	uxtb	r5, r5
 800fd88:	e7d7      	b.n	800fd3a <_scanf_float+0x192>
 800fd8a:	f1ba 0f01 	cmp.w	sl, #1
 800fd8e:	f47f af3d 	bne.w	800fc0c <_scanf_float+0x64>
 800fd92:	f04f 0a02 	mov.w	sl, #2
 800fd96:	e7d0      	b.n	800fd3a <_scanf_float+0x192>
 800fd98:	b97d      	cbnz	r5, 800fdba <_scanf_float+0x212>
 800fd9a:	f1b9 0f00 	cmp.w	r9, #0
 800fd9e:	f47f af38 	bne.w	800fc12 <_scanf_float+0x6a>
 800fda2:	6822      	ldr	r2, [r4, #0]
 800fda4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800fda8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800fdac:	f040 8108 	bne.w	800ffc0 <_scanf_float+0x418>
 800fdb0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fdb4:	6022      	str	r2, [r4, #0]
 800fdb6:	2501      	movs	r5, #1
 800fdb8:	e7bf      	b.n	800fd3a <_scanf_float+0x192>
 800fdba:	2d03      	cmp	r5, #3
 800fdbc:	d0e2      	beq.n	800fd84 <_scanf_float+0x1dc>
 800fdbe:	2d05      	cmp	r5, #5
 800fdc0:	e7de      	b.n	800fd80 <_scanf_float+0x1d8>
 800fdc2:	2d02      	cmp	r5, #2
 800fdc4:	f47f af22 	bne.w	800fc0c <_scanf_float+0x64>
 800fdc8:	2503      	movs	r5, #3
 800fdca:	e7b6      	b.n	800fd3a <_scanf_float+0x192>
 800fdcc:	2d06      	cmp	r5, #6
 800fdce:	f47f af1d 	bne.w	800fc0c <_scanf_float+0x64>
 800fdd2:	2507      	movs	r5, #7
 800fdd4:	e7b1      	b.n	800fd3a <_scanf_float+0x192>
 800fdd6:	6822      	ldr	r2, [r4, #0]
 800fdd8:	0591      	lsls	r1, r2, #22
 800fdda:	f57f af17 	bpl.w	800fc0c <_scanf_float+0x64>
 800fdde:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800fde2:	6022      	str	r2, [r4, #0]
 800fde4:	f8cd 9008 	str.w	r9, [sp, #8]
 800fde8:	e7a7      	b.n	800fd3a <_scanf_float+0x192>
 800fdea:	6822      	ldr	r2, [r4, #0]
 800fdec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800fdf0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800fdf4:	d006      	beq.n	800fe04 <_scanf_float+0x25c>
 800fdf6:	0550      	lsls	r0, r2, #21
 800fdf8:	f57f af08 	bpl.w	800fc0c <_scanf_float+0x64>
 800fdfc:	f1b9 0f00 	cmp.w	r9, #0
 800fe00:	f000 80de 	beq.w	800ffc0 <_scanf_float+0x418>
 800fe04:	0591      	lsls	r1, r2, #22
 800fe06:	bf58      	it	pl
 800fe08:	9902      	ldrpl	r1, [sp, #8]
 800fe0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800fe0e:	bf58      	it	pl
 800fe10:	eba9 0101 	subpl.w	r1, r9, r1
 800fe14:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800fe18:	bf58      	it	pl
 800fe1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800fe1e:	6022      	str	r2, [r4, #0]
 800fe20:	f04f 0900 	mov.w	r9, #0
 800fe24:	e789      	b.n	800fd3a <_scanf_float+0x192>
 800fe26:	f04f 0a03 	mov.w	sl, #3
 800fe2a:	e786      	b.n	800fd3a <_scanf_float+0x192>
 800fe2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fe30:	4639      	mov	r1, r7
 800fe32:	4640      	mov	r0, r8
 800fe34:	4798      	blx	r3
 800fe36:	2800      	cmp	r0, #0
 800fe38:	f43f aedb 	beq.w	800fbf2 <_scanf_float+0x4a>
 800fe3c:	e6e6      	b.n	800fc0c <_scanf_float+0x64>
 800fe3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe46:	463a      	mov	r2, r7
 800fe48:	4640      	mov	r0, r8
 800fe4a:	4798      	blx	r3
 800fe4c:	6923      	ldr	r3, [r4, #16]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	6123      	str	r3, [r4, #16]
 800fe52:	e6e8      	b.n	800fc26 <_scanf_float+0x7e>
 800fe54:	1e6b      	subs	r3, r5, #1
 800fe56:	2b06      	cmp	r3, #6
 800fe58:	d824      	bhi.n	800fea4 <_scanf_float+0x2fc>
 800fe5a:	2d02      	cmp	r5, #2
 800fe5c:	d836      	bhi.n	800fecc <_scanf_float+0x324>
 800fe5e:	9b01      	ldr	r3, [sp, #4]
 800fe60:	429e      	cmp	r6, r3
 800fe62:	f67f aee4 	bls.w	800fc2e <_scanf_float+0x86>
 800fe66:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800fe6e:	463a      	mov	r2, r7
 800fe70:	4640      	mov	r0, r8
 800fe72:	4798      	blx	r3
 800fe74:	6923      	ldr	r3, [r4, #16]
 800fe76:	3b01      	subs	r3, #1
 800fe78:	6123      	str	r3, [r4, #16]
 800fe7a:	e7f0      	b.n	800fe5e <_scanf_float+0x2b6>
 800fe7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800fe80:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800fe84:	463a      	mov	r2, r7
 800fe86:	4640      	mov	r0, r8
 800fe88:	4798      	blx	r3
 800fe8a:	6923      	ldr	r3, [r4, #16]
 800fe8c:	3b01      	subs	r3, #1
 800fe8e:	6123      	str	r3, [r4, #16]
 800fe90:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fe94:	fa5f fa8a 	uxtb.w	sl, sl
 800fe98:	f1ba 0f02 	cmp.w	sl, #2
 800fe9c:	d1ee      	bne.n	800fe7c <_scanf_float+0x2d4>
 800fe9e:	3d03      	subs	r5, #3
 800fea0:	b2ed      	uxtb	r5, r5
 800fea2:	1b76      	subs	r6, r6, r5
 800fea4:	6823      	ldr	r3, [r4, #0]
 800fea6:	05da      	lsls	r2, r3, #23
 800fea8:	d530      	bpl.n	800ff0c <_scanf_float+0x364>
 800feaa:	055b      	lsls	r3, r3, #21
 800feac:	d511      	bpl.n	800fed2 <_scanf_float+0x32a>
 800feae:	9b01      	ldr	r3, [sp, #4]
 800feb0:	429e      	cmp	r6, r3
 800feb2:	f67f aebc 	bls.w	800fc2e <_scanf_float+0x86>
 800feb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800feba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800febe:	463a      	mov	r2, r7
 800fec0:	4640      	mov	r0, r8
 800fec2:	4798      	blx	r3
 800fec4:	6923      	ldr	r3, [r4, #16]
 800fec6:	3b01      	subs	r3, #1
 800fec8:	6123      	str	r3, [r4, #16]
 800feca:	e7f0      	b.n	800feae <_scanf_float+0x306>
 800fecc:	46aa      	mov	sl, r5
 800fece:	46b3      	mov	fp, r6
 800fed0:	e7de      	b.n	800fe90 <_scanf_float+0x2e8>
 800fed2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800fed6:	6923      	ldr	r3, [r4, #16]
 800fed8:	2965      	cmp	r1, #101	@ 0x65
 800feda:	f103 33ff 	add.w	r3, r3, #4294967295
 800fede:	f106 35ff 	add.w	r5, r6, #4294967295
 800fee2:	6123      	str	r3, [r4, #16]
 800fee4:	d00c      	beq.n	800ff00 <_scanf_float+0x358>
 800fee6:	2945      	cmp	r1, #69	@ 0x45
 800fee8:	d00a      	beq.n	800ff00 <_scanf_float+0x358>
 800feea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800feee:	463a      	mov	r2, r7
 800fef0:	4640      	mov	r0, r8
 800fef2:	4798      	blx	r3
 800fef4:	6923      	ldr	r3, [r4, #16]
 800fef6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800fefa:	3b01      	subs	r3, #1
 800fefc:	1eb5      	subs	r5, r6, #2
 800fefe:	6123      	str	r3, [r4, #16]
 800ff00:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ff04:	463a      	mov	r2, r7
 800ff06:	4640      	mov	r0, r8
 800ff08:	4798      	blx	r3
 800ff0a:	462e      	mov	r6, r5
 800ff0c:	6822      	ldr	r2, [r4, #0]
 800ff0e:	f012 0210 	ands.w	r2, r2, #16
 800ff12:	d001      	beq.n	800ff18 <_scanf_float+0x370>
 800ff14:	2000      	movs	r0, #0
 800ff16:	e68b      	b.n	800fc30 <_scanf_float+0x88>
 800ff18:	7032      	strb	r2, [r6, #0]
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ff20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ff24:	d11c      	bne.n	800ff60 <_scanf_float+0x3b8>
 800ff26:	9b02      	ldr	r3, [sp, #8]
 800ff28:	454b      	cmp	r3, r9
 800ff2a:	eba3 0209 	sub.w	r2, r3, r9
 800ff2e:	d123      	bne.n	800ff78 <_scanf_float+0x3d0>
 800ff30:	9901      	ldr	r1, [sp, #4]
 800ff32:	2200      	movs	r2, #0
 800ff34:	4640      	mov	r0, r8
 800ff36:	f002 fbbb 	bl	80126b0 <_strtod_r>
 800ff3a:	9b03      	ldr	r3, [sp, #12]
 800ff3c:	6821      	ldr	r1, [r4, #0]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	f011 0f02 	tst.w	r1, #2
 800ff44:	ec57 6b10 	vmov	r6, r7, d0
 800ff48:	f103 0204 	add.w	r2, r3, #4
 800ff4c:	d01f      	beq.n	800ff8e <_scanf_float+0x3e6>
 800ff4e:	9903      	ldr	r1, [sp, #12]
 800ff50:	600a      	str	r2, [r1, #0]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	e9c3 6700 	strd	r6, r7, [r3]
 800ff58:	68e3      	ldr	r3, [r4, #12]
 800ff5a:	3301      	adds	r3, #1
 800ff5c:	60e3      	str	r3, [r4, #12]
 800ff5e:	e7d9      	b.n	800ff14 <_scanf_float+0x36c>
 800ff60:	9b04      	ldr	r3, [sp, #16]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d0e4      	beq.n	800ff30 <_scanf_float+0x388>
 800ff66:	9905      	ldr	r1, [sp, #20]
 800ff68:	230a      	movs	r3, #10
 800ff6a:	3101      	adds	r1, #1
 800ff6c:	4640      	mov	r0, r8
 800ff6e:	f002 fc1f 	bl	80127b0 <_strtol_r>
 800ff72:	9b04      	ldr	r3, [sp, #16]
 800ff74:	9e05      	ldr	r6, [sp, #20]
 800ff76:	1ac2      	subs	r2, r0, r3
 800ff78:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ff7c:	429e      	cmp	r6, r3
 800ff7e:	bf28      	it	cs
 800ff80:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ff84:	4910      	ldr	r1, [pc, #64]	@ (800ffc8 <_scanf_float+0x420>)
 800ff86:	4630      	mov	r0, r6
 800ff88:	f000 f8e4 	bl	8010154 <siprintf>
 800ff8c:	e7d0      	b.n	800ff30 <_scanf_float+0x388>
 800ff8e:	f011 0f04 	tst.w	r1, #4
 800ff92:	9903      	ldr	r1, [sp, #12]
 800ff94:	600a      	str	r2, [r1, #0]
 800ff96:	d1dc      	bne.n	800ff52 <_scanf_float+0x3aa>
 800ff98:	681d      	ldr	r5, [r3, #0]
 800ff9a:	4632      	mov	r2, r6
 800ff9c:	463b      	mov	r3, r7
 800ff9e:	4630      	mov	r0, r6
 800ffa0:	4639      	mov	r1, r7
 800ffa2:	f7f0 fde3 	bl	8000b6c <__aeabi_dcmpun>
 800ffa6:	b128      	cbz	r0, 800ffb4 <_scanf_float+0x40c>
 800ffa8:	4808      	ldr	r0, [pc, #32]	@ (800ffcc <_scanf_float+0x424>)
 800ffaa:	f000 fa27 	bl	80103fc <nanf>
 800ffae:	ed85 0a00 	vstr	s0, [r5]
 800ffb2:	e7d1      	b.n	800ff58 <_scanf_float+0x3b0>
 800ffb4:	4630      	mov	r0, r6
 800ffb6:	4639      	mov	r1, r7
 800ffb8:	f7f0 fe36 	bl	8000c28 <__aeabi_d2f>
 800ffbc:	6028      	str	r0, [r5, #0]
 800ffbe:	e7cb      	b.n	800ff58 <_scanf_float+0x3b0>
 800ffc0:	f04f 0900 	mov.w	r9, #0
 800ffc4:	e629      	b.n	800fc1a <_scanf_float+0x72>
 800ffc6:	bf00      	nop
 800ffc8:	080165d2 	.word	0x080165d2
 800ffcc:	08016988 	.word	0x08016988

0800ffd0 <std>:
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	b510      	push	{r4, lr}
 800ffd4:	4604      	mov	r4, r0
 800ffd6:	e9c0 3300 	strd	r3, r3, [r0]
 800ffda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ffde:	6083      	str	r3, [r0, #8]
 800ffe0:	8181      	strh	r1, [r0, #12]
 800ffe2:	6643      	str	r3, [r0, #100]	@ 0x64
 800ffe4:	81c2      	strh	r2, [r0, #14]
 800ffe6:	6183      	str	r3, [r0, #24]
 800ffe8:	4619      	mov	r1, r3
 800ffea:	2208      	movs	r2, #8
 800ffec:	305c      	adds	r0, #92	@ 0x5c
 800ffee:	f000 f950 	bl	8010292 <memset>
 800fff2:	4b0d      	ldr	r3, [pc, #52]	@ (8010028 <std+0x58>)
 800fff4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fff6:	4b0d      	ldr	r3, [pc, #52]	@ (801002c <std+0x5c>)
 800fff8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fffa:	4b0d      	ldr	r3, [pc, #52]	@ (8010030 <std+0x60>)
 800fffc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fffe:	4b0d      	ldr	r3, [pc, #52]	@ (8010034 <std+0x64>)
 8010000:	6323      	str	r3, [r4, #48]	@ 0x30
 8010002:	4b0d      	ldr	r3, [pc, #52]	@ (8010038 <std+0x68>)
 8010004:	6224      	str	r4, [r4, #32]
 8010006:	429c      	cmp	r4, r3
 8010008:	d006      	beq.n	8010018 <std+0x48>
 801000a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801000e:	4294      	cmp	r4, r2
 8010010:	d002      	beq.n	8010018 <std+0x48>
 8010012:	33d0      	adds	r3, #208	@ 0xd0
 8010014:	429c      	cmp	r4, r3
 8010016:	d105      	bne.n	8010024 <std+0x54>
 8010018:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801001c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010020:	f000 b9da 	b.w	80103d8 <__retarget_lock_init_recursive>
 8010024:	bd10      	pop	{r4, pc}
 8010026:	bf00      	nop
 8010028:	080101e9 	.word	0x080101e9
 801002c:	0801020f 	.word	0x0801020f
 8010030:	08010247 	.word	0x08010247
 8010034:	0801026b 	.word	0x0801026b
 8010038:	200019e4 	.word	0x200019e4

0801003c <stdio_exit_handler>:
 801003c:	4a02      	ldr	r2, [pc, #8]	@ (8010048 <stdio_exit_handler+0xc>)
 801003e:	4903      	ldr	r1, [pc, #12]	@ (801004c <stdio_exit_handler+0x10>)
 8010040:	4803      	ldr	r0, [pc, #12]	@ (8010050 <stdio_exit_handler+0x14>)
 8010042:	f000 b869 	b.w	8010118 <_fwalk_sglue>
 8010046:	bf00      	nop
 8010048:	2000006c 	.word	0x2000006c
 801004c:	080131a1 	.word	0x080131a1
 8010050:	2000007c 	.word	0x2000007c

08010054 <cleanup_stdio>:
 8010054:	6841      	ldr	r1, [r0, #4]
 8010056:	4b0c      	ldr	r3, [pc, #48]	@ (8010088 <cleanup_stdio+0x34>)
 8010058:	4299      	cmp	r1, r3
 801005a:	b510      	push	{r4, lr}
 801005c:	4604      	mov	r4, r0
 801005e:	d001      	beq.n	8010064 <cleanup_stdio+0x10>
 8010060:	f003 f89e 	bl	80131a0 <_fflush_r>
 8010064:	68a1      	ldr	r1, [r4, #8]
 8010066:	4b09      	ldr	r3, [pc, #36]	@ (801008c <cleanup_stdio+0x38>)
 8010068:	4299      	cmp	r1, r3
 801006a:	d002      	beq.n	8010072 <cleanup_stdio+0x1e>
 801006c:	4620      	mov	r0, r4
 801006e:	f003 f897 	bl	80131a0 <_fflush_r>
 8010072:	68e1      	ldr	r1, [r4, #12]
 8010074:	4b06      	ldr	r3, [pc, #24]	@ (8010090 <cleanup_stdio+0x3c>)
 8010076:	4299      	cmp	r1, r3
 8010078:	d004      	beq.n	8010084 <cleanup_stdio+0x30>
 801007a:	4620      	mov	r0, r4
 801007c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010080:	f003 b88e 	b.w	80131a0 <_fflush_r>
 8010084:	bd10      	pop	{r4, pc}
 8010086:	bf00      	nop
 8010088:	200019e4 	.word	0x200019e4
 801008c:	20001a4c 	.word	0x20001a4c
 8010090:	20001ab4 	.word	0x20001ab4

08010094 <global_stdio_init.part.0>:
 8010094:	b510      	push	{r4, lr}
 8010096:	4b0b      	ldr	r3, [pc, #44]	@ (80100c4 <global_stdio_init.part.0+0x30>)
 8010098:	4c0b      	ldr	r4, [pc, #44]	@ (80100c8 <global_stdio_init.part.0+0x34>)
 801009a:	4a0c      	ldr	r2, [pc, #48]	@ (80100cc <global_stdio_init.part.0+0x38>)
 801009c:	601a      	str	r2, [r3, #0]
 801009e:	4620      	mov	r0, r4
 80100a0:	2200      	movs	r2, #0
 80100a2:	2104      	movs	r1, #4
 80100a4:	f7ff ff94 	bl	800ffd0 <std>
 80100a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80100ac:	2201      	movs	r2, #1
 80100ae:	2109      	movs	r1, #9
 80100b0:	f7ff ff8e 	bl	800ffd0 <std>
 80100b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80100b8:	2202      	movs	r2, #2
 80100ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100be:	2112      	movs	r1, #18
 80100c0:	f7ff bf86 	b.w	800ffd0 <std>
 80100c4:	20001b1c 	.word	0x20001b1c
 80100c8:	200019e4 	.word	0x200019e4
 80100cc:	0801003d 	.word	0x0801003d

080100d0 <__sfp_lock_acquire>:
 80100d0:	4801      	ldr	r0, [pc, #4]	@ (80100d8 <__sfp_lock_acquire+0x8>)
 80100d2:	f000 b982 	b.w	80103da <__retarget_lock_acquire_recursive>
 80100d6:	bf00      	nop
 80100d8:	20001b25 	.word	0x20001b25

080100dc <__sfp_lock_release>:
 80100dc:	4801      	ldr	r0, [pc, #4]	@ (80100e4 <__sfp_lock_release+0x8>)
 80100de:	f000 b97d 	b.w	80103dc <__retarget_lock_release_recursive>
 80100e2:	bf00      	nop
 80100e4:	20001b25 	.word	0x20001b25

080100e8 <__sinit>:
 80100e8:	b510      	push	{r4, lr}
 80100ea:	4604      	mov	r4, r0
 80100ec:	f7ff fff0 	bl	80100d0 <__sfp_lock_acquire>
 80100f0:	6a23      	ldr	r3, [r4, #32]
 80100f2:	b11b      	cbz	r3, 80100fc <__sinit+0x14>
 80100f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80100f8:	f7ff bff0 	b.w	80100dc <__sfp_lock_release>
 80100fc:	4b04      	ldr	r3, [pc, #16]	@ (8010110 <__sinit+0x28>)
 80100fe:	6223      	str	r3, [r4, #32]
 8010100:	4b04      	ldr	r3, [pc, #16]	@ (8010114 <__sinit+0x2c>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d1f5      	bne.n	80100f4 <__sinit+0xc>
 8010108:	f7ff ffc4 	bl	8010094 <global_stdio_init.part.0>
 801010c:	e7f2      	b.n	80100f4 <__sinit+0xc>
 801010e:	bf00      	nop
 8010110:	08010055 	.word	0x08010055
 8010114:	20001b1c 	.word	0x20001b1c

08010118 <_fwalk_sglue>:
 8010118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801011c:	4607      	mov	r7, r0
 801011e:	4688      	mov	r8, r1
 8010120:	4614      	mov	r4, r2
 8010122:	2600      	movs	r6, #0
 8010124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010128:	f1b9 0901 	subs.w	r9, r9, #1
 801012c:	d505      	bpl.n	801013a <_fwalk_sglue+0x22>
 801012e:	6824      	ldr	r4, [r4, #0]
 8010130:	2c00      	cmp	r4, #0
 8010132:	d1f7      	bne.n	8010124 <_fwalk_sglue+0xc>
 8010134:	4630      	mov	r0, r6
 8010136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801013a:	89ab      	ldrh	r3, [r5, #12]
 801013c:	2b01      	cmp	r3, #1
 801013e:	d907      	bls.n	8010150 <_fwalk_sglue+0x38>
 8010140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010144:	3301      	adds	r3, #1
 8010146:	d003      	beq.n	8010150 <_fwalk_sglue+0x38>
 8010148:	4629      	mov	r1, r5
 801014a:	4638      	mov	r0, r7
 801014c:	47c0      	blx	r8
 801014e:	4306      	orrs	r6, r0
 8010150:	3568      	adds	r5, #104	@ 0x68
 8010152:	e7e9      	b.n	8010128 <_fwalk_sglue+0x10>

08010154 <siprintf>:
 8010154:	b40e      	push	{r1, r2, r3}
 8010156:	b500      	push	{lr}
 8010158:	b09c      	sub	sp, #112	@ 0x70
 801015a:	ab1d      	add	r3, sp, #116	@ 0x74
 801015c:	9002      	str	r0, [sp, #8]
 801015e:	9006      	str	r0, [sp, #24]
 8010160:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010164:	4809      	ldr	r0, [pc, #36]	@ (801018c <siprintf+0x38>)
 8010166:	9107      	str	r1, [sp, #28]
 8010168:	9104      	str	r1, [sp, #16]
 801016a:	4909      	ldr	r1, [pc, #36]	@ (8010190 <siprintf+0x3c>)
 801016c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010170:	9105      	str	r1, [sp, #20]
 8010172:	6800      	ldr	r0, [r0, #0]
 8010174:	9301      	str	r3, [sp, #4]
 8010176:	a902      	add	r1, sp, #8
 8010178:	f002 fb78 	bl	801286c <_svfiprintf_r>
 801017c:	9b02      	ldr	r3, [sp, #8]
 801017e:	2200      	movs	r2, #0
 8010180:	701a      	strb	r2, [r3, #0]
 8010182:	b01c      	add	sp, #112	@ 0x70
 8010184:	f85d eb04 	ldr.w	lr, [sp], #4
 8010188:	b003      	add	sp, #12
 801018a:	4770      	bx	lr
 801018c:	20000078 	.word	0x20000078
 8010190:	ffff0208 	.word	0xffff0208

08010194 <siscanf>:
 8010194:	b40e      	push	{r1, r2, r3}
 8010196:	b530      	push	{r4, r5, lr}
 8010198:	b09c      	sub	sp, #112	@ 0x70
 801019a:	ac1f      	add	r4, sp, #124	@ 0x7c
 801019c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80101a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80101a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80101a8:	9002      	str	r0, [sp, #8]
 80101aa:	9006      	str	r0, [sp, #24]
 80101ac:	f7f0 f880 	bl	80002b0 <strlen>
 80101b0:	4b0b      	ldr	r3, [pc, #44]	@ (80101e0 <siscanf+0x4c>)
 80101b2:	9003      	str	r0, [sp, #12]
 80101b4:	9007      	str	r0, [sp, #28]
 80101b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80101b8:	480a      	ldr	r0, [pc, #40]	@ (80101e4 <siscanf+0x50>)
 80101ba:	9401      	str	r4, [sp, #4]
 80101bc:	2300      	movs	r3, #0
 80101be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80101c0:	9314      	str	r3, [sp, #80]	@ 0x50
 80101c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80101c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80101ca:	462a      	mov	r2, r5
 80101cc:	4623      	mov	r3, r4
 80101ce:	a902      	add	r1, sp, #8
 80101d0:	6800      	ldr	r0, [r0, #0]
 80101d2:	f002 fc9f 	bl	8012b14 <__ssvfiscanf_r>
 80101d6:	b01c      	add	sp, #112	@ 0x70
 80101d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80101dc:	b003      	add	sp, #12
 80101de:	4770      	bx	lr
 80101e0:	0801020b 	.word	0x0801020b
 80101e4:	20000078 	.word	0x20000078

080101e8 <__sread>:
 80101e8:	b510      	push	{r4, lr}
 80101ea:	460c      	mov	r4, r1
 80101ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101f0:	f000 f894 	bl	801031c <_read_r>
 80101f4:	2800      	cmp	r0, #0
 80101f6:	bfab      	itete	ge
 80101f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80101fa:	89a3      	ldrhlt	r3, [r4, #12]
 80101fc:	181b      	addge	r3, r3, r0
 80101fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010202:	bfac      	ite	ge
 8010204:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010206:	81a3      	strhlt	r3, [r4, #12]
 8010208:	bd10      	pop	{r4, pc}

0801020a <__seofread>:
 801020a:	2000      	movs	r0, #0
 801020c:	4770      	bx	lr

0801020e <__swrite>:
 801020e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010212:	461f      	mov	r7, r3
 8010214:	898b      	ldrh	r3, [r1, #12]
 8010216:	05db      	lsls	r3, r3, #23
 8010218:	4605      	mov	r5, r0
 801021a:	460c      	mov	r4, r1
 801021c:	4616      	mov	r6, r2
 801021e:	d505      	bpl.n	801022c <__swrite+0x1e>
 8010220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010224:	2302      	movs	r3, #2
 8010226:	2200      	movs	r2, #0
 8010228:	f000 f866 	bl	80102f8 <_lseek_r>
 801022c:	89a3      	ldrh	r3, [r4, #12]
 801022e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010232:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010236:	81a3      	strh	r3, [r4, #12]
 8010238:	4632      	mov	r2, r6
 801023a:	463b      	mov	r3, r7
 801023c:	4628      	mov	r0, r5
 801023e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010242:	f000 b88d 	b.w	8010360 <_write_r>

08010246 <__sseek>:
 8010246:	b510      	push	{r4, lr}
 8010248:	460c      	mov	r4, r1
 801024a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801024e:	f000 f853 	bl	80102f8 <_lseek_r>
 8010252:	1c43      	adds	r3, r0, #1
 8010254:	89a3      	ldrh	r3, [r4, #12]
 8010256:	bf15      	itete	ne
 8010258:	6560      	strne	r0, [r4, #84]	@ 0x54
 801025a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801025e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010262:	81a3      	strheq	r3, [r4, #12]
 8010264:	bf18      	it	ne
 8010266:	81a3      	strhne	r3, [r4, #12]
 8010268:	bd10      	pop	{r4, pc}

0801026a <__sclose>:
 801026a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801026e:	f000 b833 	b.w	80102d8 <_close_r>

08010272 <memcmp>:
 8010272:	b510      	push	{r4, lr}
 8010274:	3901      	subs	r1, #1
 8010276:	4402      	add	r2, r0
 8010278:	4290      	cmp	r0, r2
 801027a:	d101      	bne.n	8010280 <memcmp+0xe>
 801027c:	2000      	movs	r0, #0
 801027e:	e005      	b.n	801028c <memcmp+0x1a>
 8010280:	7803      	ldrb	r3, [r0, #0]
 8010282:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010286:	42a3      	cmp	r3, r4
 8010288:	d001      	beq.n	801028e <memcmp+0x1c>
 801028a:	1b18      	subs	r0, r3, r4
 801028c:	bd10      	pop	{r4, pc}
 801028e:	3001      	adds	r0, #1
 8010290:	e7f2      	b.n	8010278 <memcmp+0x6>

08010292 <memset>:
 8010292:	4402      	add	r2, r0
 8010294:	4603      	mov	r3, r0
 8010296:	4293      	cmp	r3, r2
 8010298:	d100      	bne.n	801029c <memset+0xa>
 801029a:	4770      	bx	lr
 801029c:	f803 1b01 	strb.w	r1, [r3], #1
 80102a0:	e7f9      	b.n	8010296 <memset+0x4>

080102a2 <strstr>:
 80102a2:	780a      	ldrb	r2, [r1, #0]
 80102a4:	b570      	push	{r4, r5, r6, lr}
 80102a6:	b96a      	cbnz	r2, 80102c4 <strstr+0x22>
 80102a8:	bd70      	pop	{r4, r5, r6, pc}
 80102aa:	429a      	cmp	r2, r3
 80102ac:	d109      	bne.n	80102c2 <strstr+0x20>
 80102ae:	460c      	mov	r4, r1
 80102b0:	4605      	mov	r5, r0
 80102b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d0f6      	beq.n	80102a8 <strstr+0x6>
 80102ba:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80102be:	429e      	cmp	r6, r3
 80102c0:	d0f7      	beq.n	80102b2 <strstr+0x10>
 80102c2:	3001      	adds	r0, #1
 80102c4:	7803      	ldrb	r3, [r0, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1ef      	bne.n	80102aa <strstr+0x8>
 80102ca:	4618      	mov	r0, r3
 80102cc:	e7ec      	b.n	80102a8 <strstr+0x6>
	...

080102d0 <_localeconv_r>:
 80102d0:	4800      	ldr	r0, [pc, #0]	@ (80102d4 <_localeconv_r+0x4>)
 80102d2:	4770      	bx	lr
 80102d4:	200001b8 	.word	0x200001b8

080102d8 <_close_r>:
 80102d8:	b538      	push	{r3, r4, r5, lr}
 80102da:	4d06      	ldr	r5, [pc, #24]	@ (80102f4 <_close_r+0x1c>)
 80102dc:	2300      	movs	r3, #0
 80102de:	4604      	mov	r4, r0
 80102e0:	4608      	mov	r0, r1
 80102e2:	602b      	str	r3, [r5, #0]
 80102e4:	f7f7 fcbc 	bl	8007c60 <_close>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	d102      	bne.n	80102f2 <_close_r+0x1a>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	b103      	cbz	r3, 80102f2 <_close_r+0x1a>
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	20001b20 	.word	0x20001b20

080102f8 <_lseek_r>:
 80102f8:	b538      	push	{r3, r4, r5, lr}
 80102fa:	4d07      	ldr	r5, [pc, #28]	@ (8010318 <_lseek_r+0x20>)
 80102fc:	4604      	mov	r4, r0
 80102fe:	4608      	mov	r0, r1
 8010300:	4611      	mov	r1, r2
 8010302:	2200      	movs	r2, #0
 8010304:	602a      	str	r2, [r5, #0]
 8010306:	461a      	mov	r2, r3
 8010308:	f7f7 fcd1 	bl	8007cae <_lseek>
 801030c:	1c43      	adds	r3, r0, #1
 801030e:	d102      	bne.n	8010316 <_lseek_r+0x1e>
 8010310:	682b      	ldr	r3, [r5, #0]
 8010312:	b103      	cbz	r3, 8010316 <_lseek_r+0x1e>
 8010314:	6023      	str	r3, [r4, #0]
 8010316:	bd38      	pop	{r3, r4, r5, pc}
 8010318:	20001b20 	.word	0x20001b20

0801031c <_read_r>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	4d07      	ldr	r5, [pc, #28]	@ (801033c <_read_r+0x20>)
 8010320:	4604      	mov	r4, r0
 8010322:	4608      	mov	r0, r1
 8010324:	4611      	mov	r1, r2
 8010326:	2200      	movs	r2, #0
 8010328:	602a      	str	r2, [r5, #0]
 801032a:	461a      	mov	r2, r3
 801032c:	f7f7 fc5f 	bl	8007bee <_read>
 8010330:	1c43      	adds	r3, r0, #1
 8010332:	d102      	bne.n	801033a <_read_r+0x1e>
 8010334:	682b      	ldr	r3, [r5, #0]
 8010336:	b103      	cbz	r3, 801033a <_read_r+0x1e>
 8010338:	6023      	str	r3, [r4, #0]
 801033a:	bd38      	pop	{r3, r4, r5, pc}
 801033c:	20001b20 	.word	0x20001b20

08010340 <_sbrk_r>:
 8010340:	b538      	push	{r3, r4, r5, lr}
 8010342:	4d06      	ldr	r5, [pc, #24]	@ (801035c <_sbrk_r+0x1c>)
 8010344:	2300      	movs	r3, #0
 8010346:	4604      	mov	r4, r0
 8010348:	4608      	mov	r0, r1
 801034a:	602b      	str	r3, [r5, #0]
 801034c:	f7f7 fcbc 	bl	8007cc8 <_sbrk>
 8010350:	1c43      	adds	r3, r0, #1
 8010352:	d102      	bne.n	801035a <_sbrk_r+0x1a>
 8010354:	682b      	ldr	r3, [r5, #0]
 8010356:	b103      	cbz	r3, 801035a <_sbrk_r+0x1a>
 8010358:	6023      	str	r3, [r4, #0]
 801035a:	bd38      	pop	{r3, r4, r5, pc}
 801035c:	20001b20 	.word	0x20001b20

08010360 <_write_r>:
 8010360:	b538      	push	{r3, r4, r5, lr}
 8010362:	4d07      	ldr	r5, [pc, #28]	@ (8010380 <_write_r+0x20>)
 8010364:	4604      	mov	r4, r0
 8010366:	4608      	mov	r0, r1
 8010368:	4611      	mov	r1, r2
 801036a:	2200      	movs	r2, #0
 801036c:	602a      	str	r2, [r5, #0]
 801036e:	461a      	mov	r2, r3
 8010370:	f7f7 fc5a 	bl	8007c28 <_write>
 8010374:	1c43      	adds	r3, r0, #1
 8010376:	d102      	bne.n	801037e <_write_r+0x1e>
 8010378:	682b      	ldr	r3, [r5, #0]
 801037a:	b103      	cbz	r3, 801037e <_write_r+0x1e>
 801037c:	6023      	str	r3, [r4, #0]
 801037e:	bd38      	pop	{r3, r4, r5, pc}
 8010380:	20001b20 	.word	0x20001b20

08010384 <__errno>:
 8010384:	4b01      	ldr	r3, [pc, #4]	@ (801038c <__errno+0x8>)
 8010386:	6818      	ldr	r0, [r3, #0]
 8010388:	4770      	bx	lr
 801038a:	bf00      	nop
 801038c:	20000078 	.word	0x20000078

08010390 <__libc_init_array>:
 8010390:	b570      	push	{r4, r5, r6, lr}
 8010392:	4d0d      	ldr	r5, [pc, #52]	@ (80103c8 <__libc_init_array+0x38>)
 8010394:	4c0d      	ldr	r4, [pc, #52]	@ (80103cc <__libc_init_array+0x3c>)
 8010396:	1b64      	subs	r4, r4, r5
 8010398:	10a4      	asrs	r4, r4, #2
 801039a:	2600      	movs	r6, #0
 801039c:	42a6      	cmp	r6, r4
 801039e:	d109      	bne.n	80103b4 <__libc_init_array+0x24>
 80103a0:	4d0b      	ldr	r5, [pc, #44]	@ (80103d0 <__libc_init_array+0x40>)
 80103a2:	4c0c      	ldr	r4, [pc, #48]	@ (80103d4 <__libc_init_array+0x44>)
 80103a4:	f005 ff74 	bl	8016290 <_init>
 80103a8:	1b64      	subs	r4, r4, r5
 80103aa:	10a4      	asrs	r4, r4, #2
 80103ac:	2600      	movs	r6, #0
 80103ae:	42a6      	cmp	r6, r4
 80103b0:	d105      	bne.n	80103be <__libc_init_array+0x2e>
 80103b2:	bd70      	pop	{r4, r5, r6, pc}
 80103b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80103b8:	4798      	blx	r3
 80103ba:	3601      	adds	r6, #1
 80103bc:	e7ee      	b.n	801039c <__libc_init_array+0xc>
 80103be:	f855 3b04 	ldr.w	r3, [r5], #4
 80103c2:	4798      	blx	r3
 80103c4:	3601      	adds	r6, #1
 80103c6:	e7f2      	b.n	80103ae <__libc_init_array+0x1e>
 80103c8:	08016c00 	.word	0x08016c00
 80103cc:	08016c00 	.word	0x08016c00
 80103d0:	08016c00 	.word	0x08016c00
 80103d4:	08016c04 	.word	0x08016c04

080103d8 <__retarget_lock_init_recursive>:
 80103d8:	4770      	bx	lr

080103da <__retarget_lock_acquire_recursive>:
 80103da:	4770      	bx	lr

080103dc <__retarget_lock_release_recursive>:
 80103dc:	4770      	bx	lr

080103de <memcpy>:
 80103de:	440a      	add	r2, r1
 80103e0:	4291      	cmp	r1, r2
 80103e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80103e6:	d100      	bne.n	80103ea <memcpy+0xc>
 80103e8:	4770      	bx	lr
 80103ea:	b510      	push	{r4, lr}
 80103ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80103f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80103f4:	4291      	cmp	r1, r2
 80103f6:	d1f9      	bne.n	80103ec <memcpy+0xe>
 80103f8:	bd10      	pop	{r4, pc}
	...

080103fc <nanf>:
 80103fc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010404 <nanf+0x8>
 8010400:	4770      	bx	lr
 8010402:	bf00      	nop
 8010404:	7fc00000 	.word	0x7fc00000

08010408 <quorem>:
 8010408:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801040c:	6903      	ldr	r3, [r0, #16]
 801040e:	690c      	ldr	r4, [r1, #16]
 8010410:	42a3      	cmp	r3, r4
 8010412:	4607      	mov	r7, r0
 8010414:	db7e      	blt.n	8010514 <quorem+0x10c>
 8010416:	3c01      	subs	r4, #1
 8010418:	f101 0814 	add.w	r8, r1, #20
 801041c:	00a3      	lsls	r3, r4, #2
 801041e:	f100 0514 	add.w	r5, r0, #20
 8010422:	9300      	str	r3, [sp, #0]
 8010424:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010428:	9301      	str	r3, [sp, #4]
 801042a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801042e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010432:	3301      	adds	r3, #1
 8010434:	429a      	cmp	r2, r3
 8010436:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801043a:	fbb2 f6f3 	udiv	r6, r2, r3
 801043e:	d32e      	bcc.n	801049e <quorem+0x96>
 8010440:	f04f 0a00 	mov.w	sl, #0
 8010444:	46c4      	mov	ip, r8
 8010446:	46ae      	mov	lr, r5
 8010448:	46d3      	mov	fp, sl
 801044a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801044e:	b298      	uxth	r0, r3
 8010450:	fb06 a000 	mla	r0, r6, r0, sl
 8010454:	0c02      	lsrs	r2, r0, #16
 8010456:	0c1b      	lsrs	r3, r3, #16
 8010458:	fb06 2303 	mla	r3, r6, r3, r2
 801045c:	f8de 2000 	ldr.w	r2, [lr]
 8010460:	b280      	uxth	r0, r0
 8010462:	b292      	uxth	r2, r2
 8010464:	1a12      	subs	r2, r2, r0
 8010466:	445a      	add	r2, fp
 8010468:	f8de 0000 	ldr.w	r0, [lr]
 801046c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010470:	b29b      	uxth	r3, r3
 8010472:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010476:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801047a:	b292      	uxth	r2, r2
 801047c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010480:	45e1      	cmp	r9, ip
 8010482:	f84e 2b04 	str.w	r2, [lr], #4
 8010486:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801048a:	d2de      	bcs.n	801044a <quorem+0x42>
 801048c:	9b00      	ldr	r3, [sp, #0]
 801048e:	58eb      	ldr	r3, [r5, r3]
 8010490:	b92b      	cbnz	r3, 801049e <quorem+0x96>
 8010492:	9b01      	ldr	r3, [sp, #4]
 8010494:	3b04      	subs	r3, #4
 8010496:	429d      	cmp	r5, r3
 8010498:	461a      	mov	r2, r3
 801049a:	d32f      	bcc.n	80104fc <quorem+0xf4>
 801049c:	613c      	str	r4, [r7, #16]
 801049e:	4638      	mov	r0, r7
 80104a0:	f001 f914 	bl	80116cc <__mcmp>
 80104a4:	2800      	cmp	r0, #0
 80104a6:	db25      	blt.n	80104f4 <quorem+0xec>
 80104a8:	4629      	mov	r1, r5
 80104aa:	2000      	movs	r0, #0
 80104ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80104b0:	f8d1 c000 	ldr.w	ip, [r1]
 80104b4:	fa1f fe82 	uxth.w	lr, r2
 80104b8:	fa1f f38c 	uxth.w	r3, ip
 80104bc:	eba3 030e 	sub.w	r3, r3, lr
 80104c0:	4403      	add	r3, r0
 80104c2:	0c12      	lsrs	r2, r2, #16
 80104c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80104c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80104cc:	b29b      	uxth	r3, r3
 80104ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80104d2:	45c1      	cmp	r9, r8
 80104d4:	f841 3b04 	str.w	r3, [r1], #4
 80104d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80104dc:	d2e6      	bcs.n	80104ac <quorem+0xa4>
 80104de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80104e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80104e6:	b922      	cbnz	r2, 80104f2 <quorem+0xea>
 80104e8:	3b04      	subs	r3, #4
 80104ea:	429d      	cmp	r5, r3
 80104ec:	461a      	mov	r2, r3
 80104ee:	d30b      	bcc.n	8010508 <quorem+0x100>
 80104f0:	613c      	str	r4, [r7, #16]
 80104f2:	3601      	adds	r6, #1
 80104f4:	4630      	mov	r0, r6
 80104f6:	b003      	add	sp, #12
 80104f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104fc:	6812      	ldr	r2, [r2, #0]
 80104fe:	3b04      	subs	r3, #4
 8010500:	2a00      	cmp	r2, #0
 8010502:	d1cb      	bne.n	801049c <quorem+0x94>
 8010504:	3c01      	subs	r4, #1
 8010506:	e7c6      	b.n	8010496 <quorem+0x8e>
 8010508:	6812      	ldr	r2, [r2, #0]
 801050a:	3b04      	subs	r3, #4
 801050c:	2a00      	cmp	r2, #0
 801050e:	d1ef      	bne.n	80104f0 <quorem+0xe8>
 8010510:	3c01      	subs	r4, #1
 8010512:	e7ea      	b.n	80104ea <quorem+0xe2>
 8010514:	2000      	movs	r0, #0
 8010516:	e7ee      	b.n	80104f6 <quorem+0xee>

08010518 <_dtoa_r>:
 8010518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801051c:	69c7      	ldr	r7, [r0, #28]
 801051e:	b099      	sub	sp, #100	@ 0x64
 8010520:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010524:	ec55 4b10 	vmov	r4, r5, d0
 8010528:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801052a:	9109      	str	r1, [sp, #36]	@ 0x24
 801052c:	4683      	mov	fp, r0
 801052e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010530:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010532:	b97f      	cbnz	r7, 8010554 <_dtoa_r+0x3c>
 8010534:	2010      	movs	r0, #16
 8010536:	f000 fdfd 	bl	8011134 <malloc>
 801053a:	4602      	mov	r2, r0
 801053c:	f8cb 001c 	str.w	r0, [fp, #28]
 8010540:	b920      	cbnz	r0, 801054c <_dtoa_r+0x34>
 8010542:	4ba7      	ldr	r3, [pc, #668]	@ (80107e0 <_dtoa_r+0x2c8>)
 8010544:	21ef      	movs	r1, #239	@ 0xef
 8010546:	48a7      	ldr	r0, [pc, #668]	@ (80107e4 <_dtoa_r+0x2cc>)
 8010548:	f002 fefa 	bl	8013340 <__assert_func>
 801054c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8010550:	6007      	str	r7, [r0, #0]
 8010552:	60c7      	str	r7, [r0, #12]
 8010554:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010558:	6819      	ldr	r1, [r3, #0]
 801055a:	b159      	cbz	r1, 8010574 <_dtoa_r+0x5c>
 801055c:	685a      	ldr	r2, [r3, #4]
 801055e:	604a      	str	r2, [r1, #4]
 8010560:	2301      	movs	r3, #1
 8010562:	4093      	lsls	r3, r2
 8010564:	608b      	str	r3, [r1, #8]
 8010566:	4658      	mov	r0, fp
 8010568:	f000 fe2c 	bl	80111c4 <_Bfree>
 801056c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010570:	2200      	movs	r2, #0
 8010572:	601a      	str	r2, [r3, #0]
 8010574:	1e2b      	subs	r3, r5, #0
 8010576:	bfb9      	ittee	lt
 8010578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801057c:	9303      	strlt	r3, [sp, #12]
 801057e:	2300      	movge	r3, #0
 8010580:	6033      	strge	r3, [r6, #0]
 8010582:	9f03      	ldr	r7, [sp, #12]
 8010584:	4b98      	ldr	r3, [pc, #608]	@ (80107e8 <_dtoa_r+0x2d0>)
 8010586:	bfbc      	itt	lt
 8010588:	2201      	movlt	r2, #1
 801058a:	6032      	strlt	r2, [r6, #0]
 801058c:	43bb      	bics	r3, r7
 801058e:	d112      	bne.n	80105b6 <_dtoa_r+0x9e>
 8010590:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8010592:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010596:	6013      	str	r3, [r2, #0]
 8010598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801059c:	4323      	orrs	r3, r4
 801059e:	f000 854d 	beq.w	801103c <_dtoa_r+0xb24>
 80105a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80105a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80107fc <_dtoa_r+0x2e4>
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 854f 	beq.w	801104c <_dtoa_r+0xb34>
 80105ae:	f10a 0303 	add.w	r3, sl, #3
 80105b2:	f000 bd49 	b.w	8011048 <_dtoa_r+0xb30>
 80105b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80105ba:	2200      	movs	r2, #0
 80105bc:	ec51 0b17 	vmov	r0, r1, d7
 80105c0:	2300      	movs	r3, #0
 80105c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80105c6:	f7f0 fa9f 	bl	8000b08 <__aeabi_dcmpeq>
 80105ca:	4680      	mov	r8, r0
 80105cc:	b158      	cbz	r0, 80105e6 <_dtoa_r+0xce>
 80105ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80105d0:	2301      	movs	r3, #1
 80105d2:	6013      	str	r3, [r2, #0]
 80105d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80105d6:	b113      	cbz	r3, 80105de <_dtoa_r+0xc6>
 80105d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80105da:	4b84      	ldr	r3, [pc, #528]	@ (80107ec <_dtoa_r+0x2d4>)
 80105dc:	6013      	str	r3, [r2, #0]
 80105de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8010800 <_dtoa_r+0x2e8>
 80105e2:	f000 bd33 	b.w	801104c <_dtoa_r+0xb34>
 80105e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80105ea:	aa16      	add	r2, sp, #88	@ 0x58
 80105ec:	a917      	add	r1, sp, #92	@ 0x5c
 80105ee:	4658      	mov	r0, fp
 80105f0:	f001 f98c 	bl	801190c <__d2b>
 80105f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80105f8:	4681      	mov	r9, r0
 80105fa:	2e00      	cmp	r6, #0
 80105fc:	d077      	beq.n	80106ee <_dtoa_r+0x1d6>
 80105fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010600:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8010604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010608:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801060c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8010610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8010614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8010618:	4619      	mov	r1, r3
 801061a:	2200      	movs	r2, #0
 801061c:	4b74      	ldr	r3, [pc, #464]	@ (80107f0 <_dtoa_r+0x2d8>)
 801061e:	f7ef fe53 	bl	80002c8 <__aeabi_dsub>
 8010622:	a369      	add	r3, pc, #420	@ (adr r3, 80107c8 <_dtoa_r+0x2b0>)
 8010624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010628:	f7f0 f806 	bl	8000638 <__aeabi_dmul>
 801062c:	a368      	add	r3, pc, #416	@ (adr r3, 80107d0 <_dtoa_r+0x2b8>)
 801062e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010632:	f7ef fe4b 	bl	80002cc <__adddf3>
 8010636:	4604      	mov	r4, r0
 8010638:	4630      	mov	r0, r6
 801063a:	460d      	mov	r5, r1
 801063c:	f7ef ff92 	bl	8000564 <__aeabi_i2d>
 8010640:	a365      	add	r3, pc, #404	@ (adr r3, 80107d8 <_dtoa_r+0x2c0>)
 8010642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010646:	f7ef fff7 	bl	8000638 <__aeabi_dmul>
 801064a:	4602      	mov	r2, r0
 801064c:	460b      	mov	r3, r1
 801064e:	4620      	mov	r0, r4
 8010650:	4629      	mov	r1, r5
 8010652:	f7ef fe3b 	bl	80002cc <__adddf3>
 8010656:	4604      	mov	r4, r0
 8010658:	460d      	mov	r5, r1
 801065a:	f7f0 fa9d 	bl	8000b98 <__aeabi_d2iz>
 801065e:	2200      	movs	r2, #0
 8010660:	4607      	mov	r7, r0
 8010662:	2300      	movs	r3, #0
 8010664:	4620      	mov	r0, r4
 8010666:	4629      	mov	r1, r5
 8010668:	f7f0 fa58 	bl	8000b1c <__aeabi_dcmplt>
 801066c:	b140      	cbz	r0, 8010680 <_dtoa_r+0x168>
 801066e:	4638      	mov	r0, r7
 8010670:	f7ef ff78 	bl	8000564 <__aeabi_i2d>
 8010674:	4622      	mov	r2, r4
 8010676:	462b      	mov	r3, r5
 8010678:	f7f0 fa46 	bl	8000b08 <__aeabi_dcmpeq>
 801067c:	b900      	cbnz	r0, 8010680 <_dtoa_r+0x168>
 801067e:	3f01      	subs	r7, #1
 8010680:	2f16      	cmp	r7, #22
 8010682:	d851      	bhi.n	8010728 <_dtoa_r+0x210>
 8010684:	4b5b      	ldr	r3, [pc, #364]	@ (80107f4 <_dtoa_r+0x2dc>)
 8010686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8010692:	f7f0 fa43 	bl	8000b1c <__aeabi_dcmplt>
 8010696:	2800      	cmp	r0, #0
 8010698:	d048      	beq.n	801072c <_dtoa_r+0x214>
 801069a:	3f01      	subs	r7, #1
 801069c:	2300      	movs	r3, #0
 801069e:	9312      	str	r3, [sp, #72]	@ 0x48
 80106a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80106a2:	1b9b      	subs	r3, r3, r6
 80106a4:	1e5a      	subs	r2, r3, #1
 80106a6:	bf44      	itt	mi
 80106a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80106ac:	2300      	movmi	r3, #0
 80106ae:	9208      	str	r2, [sp, #32]
 80106b0:	bf54      	ite	pl
 80106b2:	f04f 0800 	movpl.w	r8, #0
 80106b6:	9308      	strmi	r3, [sp, #32]
 80106b8:	2f00      	cmp	r7, #0
 80106ba:	db39      	blt.n	8010730 <_dtoa_r+0x218>
 80106bc:	9b08      	ldr	r3, [sp, #32]
 80106be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80106c0:	443b      	add	r3, r7
 80106c2:	9308      	str	r3, [sp, #32]
 80106c4:	2300      	movs	r3, #0
 80106c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80106c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106ca:	2b09      	cmp	r3, #9
 80106cc:	d864      	bhi.n	8010798 <_dtoa_r+0x280>
 80106ce:	2b05      	cmp	r3, #5
 80106d0:	bfc4      	itt	gt
 80106d2:	3b04      	subgt	r3, #4
 80106d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80106d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106d8:	f1a3 0302 	sub.w	r3, r3, #2
 80106dc:	bfcc      	ite	gt
 80106de:	2400      	movgt	r4, #0
 80106e0:	2401      	movle	r4, #1
 80106e2:	2b03      	cmp	r3, #3
 80106e4:	d863      	bhi.n	80107ae <_dtoa_r+0x296>
 80106e6:	e8df f003 	tbb	[pc, r3]
 80106ea:	372a      	.short	0x372a
 80106ec:	5535      	.short	0x5535
 80106ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80106f2:	441e      	add	r6, r3
 80106f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80106f8:	2b20      	cmp	r3, #32
 80106fa:	bfc1      	itttt	gt
 80106fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8010700:	409f      	lslgt	r7, r3
 8010702:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010706:	fa24 f303 	lsrgt.w	r3, r4, r3
 801070a:	bfd6      	itet	le
 801070c:	f1c3 0320 	rsble	r3, r3, #32
 8010710:	ea47 0003 	orrgt.w	r0, r7, r3
 8010714:	fa04 f003 	lslle.w	r0, r4, r3
 8010718:	f7ef ff14 	bl	8000544 <__aeabi_ui2d>
 801071c:	2201      	movs	r2, #1
 801071e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8010722:	3e01      	subs	r6, #1
 8010724:	9214      	str	r2, [sp, #80]	@ 0x50
 8010726:	e777      	b.n	8010618 <_dtoa_r+0x100>
 8010728:	2301      	movs	r3, #1
 801072a:	e7b8      	b.n	801069e <_dtoa_r+0x186>
 801072c:	9012      	str	r0, [sp, #72]	@ 0x48
 801072e:	e7b7      	b.n	80106a0 <_dtoa_r+0x188>
 8010730:	427b      	negs	r3, r7
 8010732:	930a      	str	r3, [sp, #40]	@ 0x28
 8010734:	2300      	movs	r3, #0
 8010736:	eba8 0807 	sub.w	r8, r8, r7
 801073a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801073c:	e7c4      	b.n	80106c8 <_dtoa_r+0x1b0>
 801073e:	2300      	movs	r3, #0
 8010740:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010742:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010744:	2b00      	cmp	r3, #0
 8010746:	dc35      	bgt.n	80107b4 <_dtoa_r+0x29c>
 8010748:	2301      	movs	r3, #1
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	9307      	str	r3, [sp, #28]
 801074e:	461a      	mov	r2, r3
 8010750:	920e      	str	r2, [sp, #56]	@ 0x38
 8010752:	e00b      	b.n	801076c <_dtoa_r+0x254>
 8010754:	2301      	movs	r3, #1
 8010756:	e7f3      	b.n	8010740 <_dtoa_r+0x228>
 8010758:	2300      	movs	r3, #0
 801075a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801075c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801075e:	18fb      	adds	r3, r7, r3
 8010760:	9300      	str	r3, [sp, #0]
 8010762:	3301      	adds	r3, #1
 8010764:	2b01      	cmp	r3, #1
 8010766:	9307      	str	r3, [sp, #28]
 8010768:	bfb8      	it	lt
 801076a:	2301      	movlt	r3, #1
 801076c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8010770:	2100      	movs	r1, #0
 8010772:	2204      	movs	r2, #4
 8010774:	f102 0514 	add.w	r5, r2, #20
 8010778:	429d      	cmp	r5, r3
 801077a:	d91f      	bls.n	80107bc <_dtoa_r+0x2a4>
 801077c:	6041      	str	r1, [r0, #4]
 801077e:	4658      	mov	r0, fp
 8010780:	f000 fce0 	bl	8011144 <_Balloc>
 8010784:	4682      	mov	sl, r0
 8010786:	2800      	cmp	r0, #0
 8010788:	d13c      	bne.n	8010804 <_dtoa_r+0x2ec>
 801078a:	4b1b      	ldr	r3, [pc, #108]	@ (80107f8 <_dtoa_r+0x2e0>)
 801078c:	4602      	mov	r2, r0
 801078e:	f240 11af 	movw	r1, #431	@ 0x1af
 8010792:	e6d8      	b.n	8010546 <_dtoa_r+0x2e>
 8010794:	2301      	movs	r3, #1
 8010796:	e7e0      	b.n	801075a <_dtoa_r+0x242>
 8010798:	2401      	movs	r4, #1
 801079a:	2300      	movs	r3, #0
 801079c:	9309      	str	r3, [sp, #36]	@ 0x24
 801079e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80107a0:	f04f 33ff 	mov.w	r3, #4294967295
 80107a4:	9300      	str	r3, [sp, #0]
 80107a6:	9307      	str	r3, [sp, #28]
 80107a8:	2200      	movs	r2, #0
 80107aa:	2312      	movs	r3, #18
 80107ac:	e7d0      	b.n	8010750 <_dtoa_r+0x238>
 80107ae:	2301      	movs	r3, #1
 80107b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80107b2:	e7f5      	b.n	80107a0 <_dtoa_r+0x288>
 80107b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80107b6:	9300      	str	r3, [sp, #0]
 80107b8:	9307      	str	r3, [sp, #28]
 80107ba:	e7d7      	b.n	801076c <_dtoa_r+0x254>
 80107bc:	3101      	adds	r1, #1
 80107be:	0052      	lsls	r2, r2, #1
 80107c0:	e7d8      	b.n	8010774 <_dtoa_r+0x25c>
 80107c2:	bf00      	nop
 80107c4:	f3af 8000 	nop.w
 80107c8:	636f4361 	.word	0x636f4361
 80107cc:	3fd287a7 	.word	0x3fd287a7
 80107d0:	8b60c8b3 	.word	0x8b60c8b3
 80107d4:	3fc68a28 	.word	0x3fc68a28
 80107d8:	509f79fb 	.word	0x509f79fb
 80107dc:	3fd34413 	.word	0x3fd34413
 80107e0:	080165e4 	.word	0x080165e4
 80107e4:	080165fb 	.word	0x080165fb
 80107e8:	7ff00000 	.word	0x7ff00000
 80107ec:	08016941 	.word	0x08016941
 80107f0:	3ff80000 	.word	0x3ff80000
 80107f4:	080166f8 	.word	0x080166f8
 80107f8:	08016653 	.word	0x08016653
 80107fc:	080165e0 	.word	0x080165e0
 8010800:	08016940 	.word	0x08016940
 8010804:	f8db 301c 	ldr.w	r3, [fp, #28]
 8010808:	6018      	str	r0, [r3, #0]
 801080a:	9b07      	ldr	r3, [sp, #28]
 801080c:	2b0e      	cmp	r3, #14
 801080e:	f200 80a4 	bhi.w	801095a <_dtoa_r+0x442>
 8010812:	2c00      	cmp	r4, #0
 8010814:	f000 80a1 	beq.w	801095a <_dtoa_r+0x442>
 8010818:	2f00      	cmp	r7, #0
 801081a:	dd33      	ble.n	8010884 <_dtoa_r+0x36c>
 801081c:	4bad      	ldr	r3, [pc, #692]	@ (8010ad4 <_dtoa_r+0x5bc>)
 801081e:	f007 020f 	and.w	r2, r7, #15
 8010822:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010826:	ed93 7b00 	vldr	d7, [r3]
 801082a:	05f8      	lsls	r0, r7, #23
 801082c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010830:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010834:	d516      	bpl.n	8010864 <_dtoa_r+0x34c>
 8010836:	4ba8      	ldr	r3, [pc, #672]	@ (8010ad8 <_dtoa_r+0x5c0>)
 8010838:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801083c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010840:	f7f0 f824 	bl	800088c <__aeabi_ddiv>
 8010844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010848:	f004 040f 	and.w	r4, r4, #15
 801084c:	2603      	movs	r6, #3
 801084e:	4da2      	ldr	r5, [pc, #648]	@ (8010ad8 <_dtoa_r+0x5c0>)
 8010850:	b954      	cbnz	r4, 8010868 <_dtoa_r+0x350>
 8010852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010856:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801085a:	f7f0 f817 	bl	800088c <__aeabi_ddiv>
 801085e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010862:	e028      	b.n	80108b6 <_dtoa_r+0x39e>
 8010864:	2602      	movs	r6, #2
 8010866:	e7f2      	b.n	801084e <_dtoa_r+0x336>
 8010868:	07e1      	lsls	r1, r4, #31
 801086a:	d508      	bpl.n	801087e <_dtoa_r+0x366>
 801086c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010870:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010874:	f7ef fee0 	bl	8000638 <__aeabi_dmul>
 8010878:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801087c:	3601      	adds	r6, #1
 801087e:	1064      	asrs	r4, r4, #1
 8010880:	3508      	adds	r5, #8
 8010882:	e7e5      	b.n	8010850 <_dtoa_r+0x338>
 8010884:	f000 80d2 	beq.w	8010a2c <_dtoa_r+0x514>
 8010888:	427c      	negs	r4, r7
 801088a:	4b92      	ldr	r3, [pc, #584]	@ (8010ad4 <_dtoa_r+0x5bc>)
 801088c:	4d92      	ldr	r5, [pc, #584]	@ (8010ad8 <_dtoa_r+0x5c0>)
 801088e:	f004 020f 	and.w	r2, r4, #15
 8010892:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801089a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801089e:	f7ef fecb 	bl	8000638 <__aeabi_dmul>
 80108a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108a6:	1124      	asrs	r4, r4, #4
 80108a8:	2300      	movs	r3, #0
 80108aa:	2602      	movs	r6, #2
 80108ac:	2c00      	cmp	r4, #0
 80108ae:	f040 80b2 	bne.w	8010a16 <_dtoa_r+0x4fe>
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d1d3      	bne.n	801085e <_dtoa_r+0x346>
 80108b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80108b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	f000 80b7 	beq.w	8010a30 <_dtoa_r+0x518>
 80108c2:	4b86      	ldr	r3, [pc, #536]	@ (8010adc <_dtoa_r+0x5c4>)
 80108c4:	2200      	movs	r2, #0
 80108c6:	4620      	mov	r0, r4
 80108c8:	4629      	mov	r1, r5
 80108ca:	f7f0 f927 	bl	8000b1c <__aeabi_dcmplt>
 80108ce:	2800      	cmp	r0, #0
 80108d0:	f000 80ae 	beq.w	8010a30 <_dtoa_r+0x518>
 80108d4:	9b07      	ldr	r3, [sp, #28]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	f000 80aa 	beq.w	8010a30 <_dtoa_r+0x518>
 80108dc:	9b00      	ldr	r3, [sp, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	dd37      	ble.n	8010952 <_dtoa_r+0x43a>
 80108e2:	1e7b      	subs	r3, r7, #1
 80108e4:	9304      	str	r3, [sp, #16]
 80108e6:	4620      	mov	r0, r4
 80108e8:	4b7d      	ldr	r3, [pc, #500]	@ (8010ae0 <_dtoa_r+0x5c8>)
 80108ea:	2200      	movs	r2, #0
 80108ec:	4629      	mov	r1, r5
 80108ee:	f7ef fea3 	bl	8000638 <__aeabi_dmul>
 80108f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108f6:	9c00      	ldr	r4, [sp, #0]
 80108f8:	3601      	adds	r6, #1
 80108fa:	4630      	mov	r0, r6
 80108fc:	f7ef fe32 	bl	8000564 <__aeabi_i2d>
 8010900:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010904:	f7ef fe98 	bl	8000638 <__aeabi_dmul>
 8010908:	4b76      	ldr	r3, [pc, #472]	@ (8010ae4 <_dtoa_r+0x5cc>)
 801090a:	2200      	movs	r2, #0
 801090c:	f7ef fcde 	bl	80002cc <__adddf3>
 8010910:	4605      	mov	r5, r0
 8010912:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010916:	2c00      	cmp	r4, #0
 8010918:	f040 808d 	bne.w	8010a36 <_dtoa_r+0x51e>
 801091c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010920:	4b71      	ldr	r3, [pc, #452]	@ (8010ae8 <_dtoa_r+0x5d0>)
 8010922:	2200      	movs	r2, #0
 8010924:	f7ef fcd0 	bl	80002c8 <__aeabi_dsub>
 8010928:	4602      	mov	r2, r0
 801092a:	460b      	mov	r3, r1
 801092c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010930:	462a      	mov	r2, r5
 8010932:	4633      	mov	r3, r6
 8010934:	f7f0 f910 	bl	8000b58 <__aeabi_dcmpgt>
 8010938:	2800      	cmp	r0, #0
 801093a:	f040 828b 	bne.w	8010e54 <_dtoa_r+0x93c>
 801093e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010942:	462a      	mov	r2, r5
 8010944:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010948:	f7f0 f8e8 	bl	8000b1c <__aeabi_dcmplt>
 801094c:	2800      	cmp	r0, #0
 801094e:	f040 8128 	bne.w	8010ba2 <_dtoa_r+0x68a>
 8010952:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8010956:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801095a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801095c:	2b00      	cmp	r3, #0
 801095e:	f2c0 815a 	blt.w	8010c16 <_dtoa_r+0x6fe>
 8010962:	2f0e      	cmp	r7, #14
 8010964:	f300 8157 	bgt.w	8010c16 <_dtoa_r+0x6fe>
 8010968:	4b5a      	ldr	r3, [pc, #360]	@ (8010ad4 <_dtoa_r+0x5bc>)
 801096a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801096e:	ed93 7b00 	vldr	d7, [r3]
 8010972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010974:	2b00      	cmp	r3, #0
 8010976:	ed8d 7b00 	vstr	d7, [sp]
 801097a:	da03      	bge.n	8010984 <_dtoa_r+0x46c>
 801097c:	9b07      	ldr	r3, [sp, #28]
 801097e:	2b00      	cmp	r3, #0
 8010980:	f340 8101 	ble.w	8010b86 <_dtoa_r+0x66e>
 8010984:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8010988:	4656      	mov	r6, sl
 801098a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801098e:	4620      	mov	r0, r4
 8010990:	4629      	mov	r1, r5
 8010992:	f7ef ff7b 	bl	800088c <__aeabi_ddiv>
 8010996:	f7f0 f8ff 	bl	8000b98 <__aeabi_d2iz>
 801099a:	4680      	mov	r8, r0
 801099c:	f7ef fde2 	bl	8000564 <__aeabi_i2d>
 80109a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109a4:	f7ef fe48 	bl	8000638 <__aeabi_dmul>
 80109a8:	4602      	mov	r2, r0
 80109aa:	460b      	mov	r3, r1
 80109ac:	4620      	mov	r0, r4
 80109ae:	4629      	mov	r1, r5
 80109b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80109b4:	f7ef fc88 	bl	80002c8 <__aeabi_dsub>
 80109b8:	f806 4b01 	strb.w	r4, [r6], #1
 80109bc:	9d07      	ldr	r5, [sp, #28]
 80109be:	eba6 040a 	sub.w	r4, r6, sl
 80109c2:	42a5      	cmp	r5, r4
 80109c4:	4602      	mov	r2, r0
 80109c6:	460b      	mov	r3, r1
 80109c8:	f040 8117 	bne.w	8010bfa <_dtoa_r+0x6e2>
 80109cc:	f7ef fc7e 	bl	80002cc <__adddf3>
 80109d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109d4:	4604      	mov	r4, r0
 80109d6:	460d      	mov	r5, r1
 80109d8:	f7f0 f8be 	bl	8000b58 <__aeabi_dcmpgt>
 80109dc:	2800      	cmp	r0, #0
 80109de:	f040 80f9 	bne.w	8010bd4 <_dtoa_r+0x6bc>
 80109e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109e6:	4620      	mov	r0, r4
 80109e8:	4629      	mov	r1, r5
 80109ea:	f7f0 f88d 	bl	8000b08 <__aeabi_dcmpeq>
 80109ee:	b118      	cbz	r0, 80109f8 <_dtoa_r+0x4e0>
 80109f0:	f018 0f01 	tst.w	r8, #1
 80109f4:	f040 80ee 	bne.w	8010bd4 <_dtoa_r+0x6bc>
 80109f8:	4649      	mov	r1, r9
 80109fa:	4658      	mov	r0, fp
 80109fc:	f000 fbe2 	bl	80111c4 <_Bfree>
 8010a00:	2300      	movs	r3, #0
 8010a02:	7033      	strb	r3, [r6, #0]
 8010a04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010a06:	3701      	adds	r7, #1
 8010a08:	601f      	str	r7, [r3, #0]
 8010a0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	f000 831d 	beq.w	801104c <_dtoa_r+0xb34>
 8010a12:	601e      	str	r6, [r3, #0]
 8010a14:	e31a      	b.n	801104c <_dtoa_r+0xb34>
 8010a16:	07e2      	lsls	r2, r4, #31
 8010a18:	d505      	bpl.n	8010a26 <_dtoa_r+0x50e>
 8010a1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010a1e:	f7ef fe0b 	bl	8000638 <__aeabi_dmul>
 8010a22:	3601      	adds	r6, #1
 8010a24:	2301      	movs	r3, #1
 8010a26:	1064      	asrs	r4, r4, #1
 8010a28:	3508      	adds	r5, #8
 8010a2a:	e73f      	b.n	80108ac <_dtoa_r+0x394>
 8010a2c:	2602      	movs	r6, #2
 8010a2e:	e742      	b.n	80108b6 <_dtoa_r+0x39e>
 8010a30:	9c07      	ldr	r4, [sp, #28]
 8010a32:	9704      	str	r7, [sp, #16]
 8010a34:	e761      	b.n	80108fa <_dtoa_r+0x3e2>
 8010a36:	4b27      	ldr	r3, [pc, #156]	@ (8010ad4 <_dtoa_r+0x5bc>)
 8010a38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010a3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010a3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010a42:	4454      	add	r4, sl
 8010a44:	2900      	cmp	r1, #0
 8010a46:	d053      	beq.n	8010af0 <_dtoa_r+0x5d8>
 8010a48:	4928      	ldr	r1, [pc, #160]	@ (8010aec <_dtoa_r+0x5d4>)
 8010a4a:	2000      	movs	r0, #0
 8010a4c:	f7ef ff1e 	bl	800088c <__aeabi_ddiv>
 8010a50:	4633      	mov	r3, r6
 8010a52:	462a      	mov	r2, r5
 8010a54:	f7ef fc38 	bl	80002c8 <__aeabi_dsub>
 8010a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010a5c:	4656      	mov	r6, sl
 8010a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a62:	f7f0 f899 	bl	8000b98 <__aeabi_d2iz>
 8010a66:	4605      	mov	r5, r0
 8010a68:	f7ef fd7c 	bl	8000564 <__aeabi_i2d>
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	460b      	mov	r3, r1
 8010a70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010a74:	f7ef fc28 	bl	80002c8 <__aeabi_dsub>
 8010a78:	3530      	adds	r5, #48	@ 0x30
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010a82:	f806 5b01 	strb.w	r5, [r6], #1
 8010a86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010a8a:	f7f0 f847 	bl	8000b1c <__aeabi_dcmplt>
 8010a8e:	2800      	cmp	r0, #0
 8010a90:	d171      	bne.n	8010b76 <_dtoa_r+0x65e>
 8010a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a96:	4911      	ldr	r1, [pc, #68]	@ (8010adc <_dtoa_r+0x5c4>)
 8010a98:	2000      	movs	r0, #0
 8010a9a:	f7ef fc15 	bl	80002c8 <__aeabi_dsub>
 8010a9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010aa2:	f7f0 f83b 	bl	8000b1c <__aeabi_dcmplt>
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	f040 8095 	bne.w	8010bd6 <_dtoa_r+0x6be>
 8010aac:	42a6      	cmp	r6, r4
 8010aae:	f43f af50 	beq.w	8010952 <_dtoa_r+0x43a>
 8010ab2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8010ae0 <_dtoa_r+0x5c8>)
 8010ab8:	2200      	movs	r2, #0
 8010aba:	f7ef fdbd 	bl	8000638 <__aeabi_dmul>
 8010abe:	4b08      	ldr	r3, [pc, #32]	@ (8010ae0 <_dtoa_r+0x5c8>)
 8010ac0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010aca:	f7ef fdb5 	bl	8000638 <__aeabi_dmul>
 8010ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010ad2:	e7c4      	b.n	8010a5e <_dtoa_r+0x546>
 8010ad4:	080166f8 	.word	0x080166f8
 8010ad8:	080166d0 	.word	0x080166d0
 8010adc:	3ff00000 	.word	0x3ff00000
 8010ae0:	40240000 	.word	0x40240000
 8010ae4:	401c0000 	.word	0x401c0000
 8010ae8:	40140000 	.word	0x40140000
 8010aec:	3fe00000 	.word	0x3fe00000
 8010af0:	4631      	mov	r1, r6
 8010af2:	4628      	mov	r0, r5
 8010af4:	f7ef fda0 	bl	8000638 <__aeabi_dmul>
 8010af8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8010afc:	9415      	str	r4, [sp, #84]	@ 0x54
 8010afe:	4656      	mov	r6, sl
 8010b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b04:	f7f0 f848 	bl	8000b98 <__aeabi_d2iz>
 8010b08:	4605      	mov	r5, r0
 8010b0a:	f7ef fd2b 	bl	8000564 <__aeabi_i2d>
 8010b0e:	4602      	mov	r2, r0
 8010b10:	460b      	mov	r3, r1
 8010b12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b16:	f7ef fbd7 	bl	80002c8 <__aeabi_dsub>
 8010b1a:	3530      	adds	r5, #48	@ 0x30
 8010b1c:	f806 5b01 	strb.w	r5, [r6], #1
 8010b20:	4602      	mov	r2, r0
 8010b22:	460b      	mov	r3, r1
 8010b24:	42a6      	cmp	r6, r4
 8010b26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010b2a:	f04f 0200 	mov.w	r2, #0
 8010b2e:	d124      	bne.n	8010b7a <_dtoa_r+0x662>
 8010b30:	4bac      	ldr	r3, [pc, #688]	@ (8010de4 <_dtoa_r+0x8cc>)
 8010b32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8010b36:	f7ef fbc9 	bl	80002cc <__adddf3>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b42:	f7f0 f809 	bl	8000b58 <__aeabi_dcmpgt>
 8010b46:	2800      	cmp	r0, #0
 8010b48:	d145      	bne.n	8010bd6 <_dtoa_r+0x6be>
 8010b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8010b4e:	49a5      	ldr	r1, [pc, #660]	@ (8010de4 <_dtoa_r+0x8cc>)
 8010b50:	2000      	movs	r0, #0
 8010b52:	f7ef fbb9 	bl	80002c8 <__aeabi_dsub>
 8010b56:	4602      	mov	r2, r0
 8010b58:	460b      	mov	r3, r1
 8010b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b5e:	f7ef ffdd 	bl	8000b1c <__aeabi_dcmplt>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	f43f aef5 	beq.w	8010952 <_dtoa_r+0x43a>
 8010b68:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8010b6a:	1e73      	subs	r3, r6, #1
 8010b6c:	9315      	str	r3, [sp, #84]	@ 0x54
 8010b6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010b72:	2b30      	cmp	r3, #48	@ 0x30
 8010b74:	d0f8      	beq.n	8010b68 <_dtoa_r+0x650>
 8010b76:	9f04      	ldr	r7, [sp, #16]
 8010b78:	e73e      	b.n	80109f8 <_dtoa_r+0x4e0>
 8010b7a:	4b9b      	ldr	r3, [pc, #620]	@ (8010de8 <_dtoa_r+0x8d0>)
 8010b7c:	f7ef fd5c 	bl	8000638 <__aeabi_dmul>
 8010b80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b84:	e7bc      	b.n	8010b00 <_dtoa_r+0x5e8>
 8010b86:	d10c      	bne.n	8010ba2 <_dtoa_r+0x68a>
 8010b88:	4b98      	ldr	r3, [pc, #608]	@ (8010dec <_dtoa_r+0x8d4>)
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010b90:	f7ef fd52 	bl	8000638 <__aeabi_dmul>
 8010b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b98:	f7ef ffd4 	bl	8000b44 <__aeabi_dcmpge>
 8010b9c:	2800      	cmp	r0, #0
 8010b9e:	f000 8157 	beq.w	8010e50 <_dtoa_r+0x938>
 8010ba2:	2400      	movs	r4, #0
 8010ba4:	4625      	mov	r5, r4
 8010ba6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ba8:	43db      	mvns	r3, r3
 8010baa:	9304      	str	r3, [sp, #16]
 8010bac:	4656      	mov	r6, sl
 8010bae:	2700      	movs	r7, #0
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	4658      	mov	r0, fp
 8010bb4:	f000 fb06 	bl	80111c4 <_Bfree>
 8010bb8:	2d00      	cmp	r5, #0
 8010bba:	d0dc      	beq.n	8010b76 <_dtoa_r+0x65e>
 8010bbc:	b12f      	cbz	r7, 8010bca <_dtoa_r+0x6b2>
 8010bbe:	42af      	cmp	r7, r5
 8010bc0:	d003      	beq.n	8010bca <_dtoa_r+0x6b2>
 8010bc2:	4639      	mov	r1, r7
 8010bc4:	4658      	mov	r0, fp
 8010bc6:	f000 fafd 	bl	80111c4 <_Bfree>
 8010bca:	4629      	mov	r1, r5
 8010bcc:	4658      	mov	r0, fp
 8010bce:	f000 faf9 	bl	80111c4 <_Bfree>
 8010bd2:	e7d0      	b.n	8010b76 <_dtoa_r+0x65e>
 8010bd4:	9704      	str	r7, [sp, #16]
 8010bd6:	4633      	mov	r3, r6
 8010bd8:	461e      	mov	r6, r3
 8010bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010bde:	2a39      	cmp	r2, #57	@ 0x39
 8010be0:	d107      	bne.n	8010bf2 <_dtoa_r+0x6da>
 8010be2:	459a      	cmp	sl, r3
 8010be4:	d1f8      	bne.n	8010bd8 <_dtoa_r+0x6c0>
 8010be6:	9a04      	ldr	r2, [sp, #16]
 8010be8:	3201      	adds	r2, #1
 8010bea:	9204      	str	r2, [sp, #16]
 8010bec:	2230      	movs	r2, #48	@ 0x30
 8010bee:	f88a 2000 	strb.w	r2, [sl]
 8010bf2:	781a      	ldrb	r2, [r3, #0]
 8010bf4:	3201      	adds	r2, #1
 8010bf6:	701a      	strb	r2, [r3, #0]
 8010bf8:	e7bd      	b.n	8010b76 <_dtoa_r+0x65e>
 8010bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8010de8 <_dtoa_r+0x8d0>)
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	f7ef fd1b 	bl	8000638 <__aeabi_dmul>
 8010c02:	2200      	movs	r2, #0
 8010c04:	2300      	movs	r3, #0
 8010c06:	4604      	mov	r4, r0
 8010c08:	460d      	mov	r5, r1
 8010c0a:	f7ef ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 8010c0e:	2800      	cmp	r0, #0
 8010c10:	f43f aebb 	beq.w	801098a <_dtoa_r+0x472>
 8010c14:	e6f0      	b.n	80109f8 <_dtoa_r+0x4e0>
 8010c16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8010c18:	2a00      	cmp	r2, #0
 8010c1a:	f000 80db 	beq.w	8010dd4 <_dtoa_r+0x8bc>
 8010c1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c20:	2a01      	cmp	r2, #1
 8010c22:	f300 80bf 	bgt.w	8010da4 <_dtoa_r+0x88c>
 8010c26:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8010c28:	2a00      	cmp	r2, #0
 8010c2a:	f000 80b7 	beq.w	8010d9c <_dtoa_r+0x884>
 8010c2e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010c32:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010c34:	4646      	mov	r6, r8
 8010c36:	9a08      	ldr	r2, [sp, #32]
 8010c38:	2101      	movs	r1, #1
 8010c3a:	441a      	add	r2, r3
 8010c3c:	4658      	mov	r0, fp
 8010c3e:	4498      	add	r8, r3
 8010c40:	9208      	str	r2, [sp, #32]
 8010c42:	f000 fbbd 	bl	80113c0 <__i2b>
 8010c46:	4605      	mov	r5, r0
 8010c48:	b15e      	cbz	r6, 8010c62 <_dtoa_r+0x74a>
 8010c4a:	9b08      	ldr	r3, [sp, #32]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	dd08      	ble.n	8010c62 <_dtoa_r+0x74a>
 8010c50:	42b3      	cmp	r3, r6
 8010c52:	9a08      	ldr	r2, [sp, #32]
 8010c54:	bfa8      	it	ge
 8010c56:	4633      	movge	r3, r6
 8010c58:	eba8 0803 	sub.w	r8, r8, r3
 8010c5c:	1af6      	subs	r6, r6, r3
 8010c5e:	1ad3      	subs	r3, r2, r3
 8010c60:	9308      	str	r3, [sp, #32]
 8010c62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c64:	b1f3      	cbz	r3, 8010ca4 <_dtoa_r+0x78c>
 8010c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	f000 80b7 	beq.w	8010ddc <_dtoa_r+0x8c4>
 8010c6e:	b18c      	cbz	r4, 8010c94 <_dtoa_r+0x77c>
 8010c70:	4629      	mov	r1, r5
 8010c72:	4622      	mov	r2, r4
 8010c74:	4658      	mov	r0, fp
 8010c76:	f000 fc63 	bl	8011540 <__pow5mult>
 8010c7a:	464a      	mov	r2, r9
 8010c7c:	4601      	mov	r1, r0
 8010c7e:	4605      	mov	r5, r0
 8010c80:	4658      	mov	r0, fp
 8010c82:	f000 fbb3 	bl	80113ec <__multiply>
 8010c86:	4649      	mov	r1, r9
 8010c88:	9004      	str	r0, [sp, #16]
 8010c8a:	4658      	mov	r0, fp
 8010c8c:	f000 fa9a 	bl	80111c4 <_Bfree>
 8010c90:	9b04      	ldr	r3, [sp, #16]
 8010c92:	4699      	mov	r9, r3
 8010c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010c96:	1b1a      	subs	r2, r3, r4
 8010c98:	d004      	beq.n	8010ca4 <_dtoa_r+0x78c>
 8010c9a:	4649      	mov	r1, r9
 8010c9c:	4658      	mov	r0, fp
 8010c9e:	f000 fc4f 	bl	8011540 <__pow5mult>
 8010ca2:	4681      	mov	r9, r0
 8010ca4:	2101      	movs	r1, #1
 8010ca6:	4658      	mov	r0, fp
 8010ca8:	f000 fb8a 	bl	80113c0 <__i2b>
 8010cac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cae:	4604      	mov	r4, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	f000 81cf 	beq.w	8011054 <_dtoa_r+0xb3c>
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	4601      	mov	r1, r0
 8010cba:	4658      	mov	r0, fp
 8010cbc:	f000 fc40 	bl	8011540 <__pow5mult>
 8010cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010cc2:	2b01      	cmp	r3, #1
 8010cc4:	4604      	mov	r4, r0
 8010cc6:	f300 8095 	bgt.w	8010df4 <_dtoa_r+0x8dc>
 8010cca:	9b02      	ldr	r3, [sp, #8]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	f040 8087 	bne.w	8010de0 <_dtoa_r+0x8c8>
 8010cd2:	9b03      	ldr	r3, [sp, #12]
 8010cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	f040 8089 	bne.w	8010df0 <_dtoa_r+0x8d8>
 8010cde:	9b03      	ldr	r3, [sp, #12]
 8010ce0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010ce4:	0d1b      	lsrs	r3, r3, #20
 8010ce6:	051b      	lsls	r3, r3, #20
 8010ce8:	b12b      	cbz	r3, 8010cf6 <_dtoa_r+0x7de>
 8010cea:	9b08      	ldr	r3, [sp, #32]
 8010cec:	3301      	adds	r3, #1
 8010cee:	9308      	str	r3, [sp, #32]
 8010cf0:	f108 0801 	add.w	r8, r8, #1
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010cf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f000 81b0 	beq.w	8011060 <_dtoa_r+0xb48>
 8010d00:	6923      	ldr	r3, [r4, #16]
 8010d02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010d06:	6918      	ldr	r0, [r3, #16]
 8010d08:	f000 fb0e 	bl	8011328 <__hi0bits>
 8010d0c:	f1c0 0020 	rsb	r0, r0, #32
 8010d10:	9b08      	ldr	r3, [sp, #32]
 8010d12:	4418      	add	r0, r3
 8010d14:	f010 001f 	ands.w	r0, r0, #31
 8010d18:	d077      	beq.n	8010e0a <_dtoa_r+0x8f2>
 8010d1a:	f1c0 0320 	rsb	r3, r0, #32
 8010d1e:	2b04      	cmp	r3, #4
 8010d20:	dd6b      	ble.n	8010dfa <_dtoa_r+0x8e2>
 8010d22:	9b08      	ldr	r3, [sp, #32]
 8010d24:	f1c0 001c 	rsb	r0, r0, #28
 8010d28:	4403      	add	r3, r0
 8010d2a:	4480      	add	r8, r0
 8010d2c:	4406      	add	r6, r0
 8010d2e:	9308      	str	r3, [sp, #32]
 8010d30:	f1b8 0f00 	cmp.w	r8, #0
 8010d34:	dd05      	ble.n	8010d42 <_dtoa_r+0x82a>
 8010d36:	4649      	mov	r1, r9
 8010d38:	4642      	mov	r2, r8
 8010d3a:	4658      	mov	r0, fp
 8010d3c:	f000 fc5a 	bl	80115f4 <__lshift>
 8010d40:	4681      	mov	r9, r0
 8010d42:	9b08      	ldr	r3, [sp, #32]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	dd05      	ble.n	8010d54 <_dtoa_r+0x83c>
 8010d48:	4621      	mov	r1, r4
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	4658      	mov	r0, fp
 8010d4e:	f000 fc51 	bl	80115f4 <__lshift>
 8010d52:	4604      	mov	r4, r0
 8010d54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d059      	beq.n	8010e0e <_dtoa_r+0x8f6>
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	4648      	mov	r0, r9
 8010d5e:	f000 fcb5 	bl	80116cc <__mcmp>
 8010d62:	2800      	cmp	r0, #0
 8010d64:	da53      	bge.n	8010e0e <_dtoa_r+0x8f6>
 8010d66:	1e7b      	subs	r3, r7, #1
 8010d68:	9304      	str	r3, [sp, #16]
 8010d6a:	4649      	mov	r1, r9
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	220a      	movs	r2, #10
 8010d70:	4658      	mov	r0, fp
 8010d72:	f000 fa49 	bl	8011208 <__multadd>
 8010d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010d78:	4681      	mov	r9, r0
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	f000 8172 	beq.w	8011064 <_dtoa_r+0xb4c>
 8010d80:	2300      	movs	r3, #0
 8010d82:	4629      	mov	r1, r5
 8010d84:	220a      	movs	r2, #10
 8010d86:	4658      	mov	r0, fp
 8010d88:	f000 fa3e 	bl	8011208 <__multadd>
 8010d8c:	9b00      	ldr	r3, [sp, #0]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	4605      	mov	r5, r0
 8010d92:	dc67      	bgt.n	8010e64 <_dtoa_r+0x94c>
 8010d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d96:	2b02      	cmp	r3, #2
 8010d98:	dc41      	bgt.n	8010e1e <_dtoa_r+0x906>
 8010d9a:	e063      	b.n	8010e64 <_dtoa_r+0x94c>
 8010d9c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010d9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010da2:	e746      	b.n	8010c32 <_dtoa_r+0x71a>
 8010da4:	9b07      	ldr	r3, [sp, #28]
 8010da6:	1e5c      	subs	r4, r3, #1
 8010da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010daa:	42a3      	cmp	r3, r4
 8010dac:	bfbf      	itttt	lt
 8010dae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010db0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8010db2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8010db4:	1ae3      	sublt	r3, r4, r3
 8010db6:	bfb4      	ite	lt
 8010db8:	18d2      	addlt	r2, r2, r3
 8010dba:	1b1c      	subge	r4, r3, r4
 8010dbc:	9b07      	ldr	r3, [sp, #28]
 8010dbe:	bfbc      	itt	lt
 8010dc0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8010dc2:	2400      	movlt	r4, #0
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	bfb5      	itete	lt
 8010dc8:	eba8 0603 	sublt.w	r6, r8, r3
 8010dcc:	9b07      	ldrge	r3, [sp, #28]
 8010dce:	2300      	movlt	r3, #0
 8010dd0:	4646      	movge	r6, r8
 8010dd2:	e730      	b.n	8010c36 <_dtoa_r+0x71e>
 8010dd4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010dd6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010dd8:	4646      	mov	r6, r8
 8010dda:	e735      	b.n	8010c48 <_dtoa_r+0x730>
 8010ddc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010dde:	e75c      	b.n	8010c9a <_dtoa_r+0x782>
 8010de0:	2300      	movs	r3, #0
 8010de2:	e788      	b.n	8010cf6 <_dtoa_r+0x7de>
 8010de4:	3fe00000 	.word	0x3fe00000
 8010de8:	40240000 	.word	0x40240000
 8010dec:	40140000 	.word	0x40140000
 8010df0:	9b02      	ldr	r3, [sp, #8]
 8010df2:	e780      	b.n	8010cf6 <_dtoa_r+0x7de>
 8010df4:	2300      	movs	r3, #0
 8010df6:	930a      	str	r3, [sp, #40]	@ 0x28
 8010df8:	e782      	b.n	8010d00 <_dtoa_r+0x7e8>
 8010dfa:	d099      	beq.n	8010d30 <_dtoa_r+0x818>
 8010dfc:	9a08      	ldr	r2, [sp, #32]
 8010dfe:	331c      	adds	r3, #28
 8010e00:	441a      	add	r2, r3
 8010e02:	4498      	add	r8, r3
 8010e04:	441e      	add	r6, r3
 8010e06:	9208      	str	r2, [sp, #32]
 8010e08:	e792      	b.n	8010d30 <_dtoa_r+0x818>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	e7f6      	b.n	8010dfc <_dtoa_r+0x8e4>
 8010e0e:	9b07      	ldr	r3, [sp, #28]
 8010e10:	9704      	str	r7, [sp, #16]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	dc20      	bgt.n	8010e58 <_dtoa_r+0x940>
 8010e16:	9300      	str	r3, [sp, #0]
 8010e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e1a:	2b02      	cmp	r3, #2
 8010e1c:	dd1e      	ble.n	8010e5c <_dtoa_r+0x944>
 8010e1e:	9b00      	ldr	r3, [sp, #0]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	f47f aec0 	bne.w	8010ba6 <_dtoa_r+0x68e>
 8010e26:	4621      	mov	r1, r4
 8010e28:	2205      	movs	r2, #5
 8010e2a:	4658      	mov	r0, fp
 8010e2c:	f000 f9ec 	bl	8011208 <__multadd>
 8010e30:	4601      	mov	r1, r0
 8010e32:	4604      	mov	r4, r0
 8010e34:	4648      	mov	r0, r9
 8010e36:	f000 fc49 	bl	80116cc <__mcmp>
 8010e3a:	2800      	cmp	r0, #0
 8010e3c:	f77f aeb3 	ble.w	8010ba6 <_dtoa_r+0x68e>
 8010e40:	4656      	mov	r6, sl
 8010e42:	2331      	movs	r3, #49	@ 0x31
 8010e44:	f806 3b01 	strb.w	r3, [r6], #1
 8010e48:	9b04      	ldr	r3, [sp, #16]
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	9304      	str	r3, [sp, #16]
 8010e4e:	e6ae      	b.n	8010bae <_dtoa_r+0x696>
 8010e50:	9c07      	ldr	r4, [sp, #28]
 8010e52:	9704      	str	r7, [sp, #16]
 8010e54:	4625      	mov	r5, r4
 8010e56:	e7f3      	b.n	8010e40 <_dtoa_r+0x928>
 8010e58:	9b07      	ldr	r3, [sp, #28]
 8010e5a:	9300      	str	r3, [sp, #0]
 8010e5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 8104 	beq.w	801106c <_dtoa_r+0xb54>
 8010e64:	2e00      	cmp	r6, #0
 8010e66:	dd05      	ble.n	8010e74 <_dtoa_r+0x95c>
 8010e68:	4629      	mov	r1, r5
 8010e6a:	4632      	mov	r2, r6
 8010e6c:	4658      	mov	r0, fp
 8010e6e:	f000 fbc1 	bl	80115f4 <__lshift>
 8010e72:	4605      	mov	r5, r0
 8010e74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d05a      	beq.n	8010f30 <_dtoa_r+0xa18>
 8010e7a:	6869      	ldr	r1, [r5, #4]
 8010e7c:	4658      	mov	r0, fp
 8010e7e:	f000 f961 	bl	8011144 <_Balloc>
 8010e82:	4606      	mov	r6, r0
 8010e84:	b928      	cbnz	r0, 8010e92 <_dtoa_r+0x97a>
 8010e86:	4b84      	ldr	r3, [pc, #528]	@ (8011098 <_dtoa_r+0xb80>)
 8010e88:	4602      	mov	r2, r0
 8010e8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010e8e:	f7ff bb5a 	b.w	8010546 <_dtoa_r+0x2e>
 8010e92:	692a      	ldr	r2, [r5, #16]
 8010e94:	3202      	adds	r2, #2
 8010e96:	0092      	lsls	r2, r2, #2
 8010e98:	f105 010c 	add.w	r1, r5, #12
 8010e9c:	300c      	adds	r0, #12
 8010e9e:	f7ff fa9e 	bl	80103de <memcpy>
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	4631      	mov	r1, r6
 8010ea6:	4658      	mov	r0, fp
 8010ea8:	f000 fba4 	bl	80115f4 <__lshift>
 8010eac:	f10a 0301 	add.w	r3, sl, #1
 8010eb0:	9307      	str	r3, [sp, #28]
 8010eb2:	9b00      	ldr	r3, [sp, #0]
 8010eb4:	4453      	add	r3, sl
 8010eb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010eb8:	9b02      	ldr	r3, [sp, #8]
 8010eba:	f003 0301 	and.w	r3, r3, #1
 8010ebe:	462f      	mov	r7, r5
 8010ec0:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	9b07      	ldr	r3, [sp, #28]
 8010ec6:	4621      	mov	r1, r4
 8010ec8:	3b01      	subs	r3, #1
 8010eca:	4648      	mov	r0, r9
 8010ecc:	9300      	str	r3, [sp, #0]
 8010ece:	f7ff fa9b 	bl	8010408 <quorem>
 8010ed2:	4639      	mov	r1, r7
 8010ed4:	9002      	str	r0, [sp, #8]
 8010ed6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010eda:	4648      	mov	r0, r9
 8010edc:	f000 fbf6 	bl	80116cc <__mcmp>
 8010ee0:	462a      	mov	r2, r5
 8010ee2:	9008      	str	r0, [sp, #32]
 8010ee4:	4621      	mov	r1, r4
 8010ee6:	4658      	mov	r0, fp
 8010ee8:	f000 fc0c 	bl	8011704 <__mdiff>
 8010eec:	68c2      	ldr	r2, [r0, #12]
 8010eee:	4606      	mov	r6, r0
 8010ef0:	bb02      	cbnz	r2, 8010f34 <_dtoa_r+0xa1c>
 8010ef2:	4601      	mov	r1, r0
 8010ef4:	4648      	mov	r0, r9
 8010ef6:	f000 fbe9 	bl	80116cc <__mcmp>
 8010efa:	4602      	mov	r2, r0
 8010efc:	4631      	mov	r1, r6
 8010efe:	4658      	mov	r0, fp
 8010f00:	920e      	str	r2, [sp, #56]	@ 0x38
 8010f02:	f000 f95f 	bl	80111c4 <_Bfree>
 8010f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f0a:	9e07      	ldr	r6, [sp, #28]
 8010f0c:	ea43 0102 	orr.w	r1, r3, r2
 8010f10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010f12:	4319      	orrs	r1, r3
 8010f14:	d110      	bne.n	8010f38 <_dtoa_r+0xa20>
 8010f16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010f1a:	d029      	beq.n	8010f70 <_dtoa_r+0xa58>
 8010f1c:	9b08      	ldr	r3, [sp, #32]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	dd02      	ble.n	8010f28 <_dtoa_r+0xa10>
 8010f22:	9b02      	ldr	r3, [sp, #8]
 8010f24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8010f28:	9b00      	ldr	r3, [sp, #0]
 8010f2a:	f883 8000 	strb.w	r8, [r3]
 8010f2e:	e63f      	b.n	8010bb0 <_dtoa_r+0x698>
 8010f30:	4628      	mov	r0, r5
 8010f32:	e7bb      	b.n	8010eac <_dtoa_r+0x994>
 8010f34:	2201      	movs	r2, #1
 8010f36:	e7e1      	b.n	8010efc <_dtoa_r+0x9e4>
 8010f38:	9b08      	ldr	r3, [sp, #32]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	db04      	blt.n	8010f48 <_dtoa_r+0xa30>
 8010f3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010f40:	430b      	orrs	r3, r1
 8010f42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010f44:	430b      	orrs	r3, r1
 8010f46:	d120      	bne.n	8010f8a <_dtoa_r+0xa72>
 8010f48:	2a00      	cmp	r2, #0
 8010f4a:	dded      	ble.n	8010f28 <_dtoa_r+0xa10>
 8010f4c:	4649      	mov	r1, r9
 8010f4e:	2201      	movs	r2, #1
 8010f50:	4658      	mov	r0, fp
 8010f52:	f000 fb4f 	bl	80115f4 <__lshift>
 8010f56:	4621      	mov	r1, r4
 8010f58:	4681      	mov	r9, r0
 8010f5a:	f000 fbb7 	bl	80116cc <__mcmp>
 8010f5e:	2800      	cmp	r0, #0
 8010f60:	dc03      	bgt.n	8010f6a <_dtoa_r+0xa52>
 8010f62:	d1e1      	bne.n	8010f28 <_dtoa_r+0xa10>
 8010f64:	f018 0f01 	tst.w	r8, #1
 8010f68:	d0de      	beq.n	8010f28 <_dtoa_r+0xa10>
 8010f6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010f6e:	d1d8      	bne.n	8010f22 <_dtoa_r+0xa0a>
 8010f70:	9a00      	ldr	r2, [sp, #0]
 8010f72:	2339      	movs	r3, #57	@ 0x39
 8010f74:	7013      	strb	r3, [r2, #0]
 8010f76:	4633      	mov	r3, r6
 8010f78:	461e      	mov	r6, r3
 8010f7a:	3b01      	subs	r3, #1
 8010f7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010f80:	2a39      	cmp	r2, #57	@ 0x39
 8010f82:	d052      	beq.n	801102a <_dtoa_r+0xb12>
 8010f84:	3201      	adds	r2, #1
 8010f86:	701a      	strb	r2, [r3, #0]
 8010f88:	e612      	b.n	8010bb0 <_dtoa_r+0x698>
 8010f8a:	2a00      	cmp	r2, #0
 8010f8c:	dd07      	ble.n	8010f9e <_dtoa_r+0xa86>
 8010f8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010f92:	d0ed      	beq.n	8010f70 <_dtoa_r+0xa58>
 8010f94:	9a00      	ldr	r2, [sp, #0]
 8010f96:	f108 0301 	add.w	r3, r8, #1
 8010f9a:	7013      	strb	r3, [r2, #0]
 8010f9c:	e608      	b.n	8010bb0 <_dtoa_r+0x698>
 8010f9e:	9b07      	ldr	r3, [sp, #28]
 8010fa0:	9a07      	ldr	r2, [sp, #28]
 8010fa2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8010fa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d028      	beq.n	8010ffe <_dtoa_r+0xae6>
 8010fac:	4649      	mov	r1, r9
 8010fae:	2300      	movs	r3, #0
 8010fb0:	220a      	movs	r2, #10
 8010fb2:	4658      	mov	r0, fp
 8010fb4:	f000 f928 	bl	8011208 <__multadd>
 8010fb8:	42af      	cmp	r7, r5
 8010fba:	4681      	mov	r9, r0
 8010fbc:	f04f 0300 	mov.w	r3, #0
 8010fc0:	f04f 020a 	mov.w	r2, #10
 8010fc4:	4639      	mov	r1, r7
 8010fc6:	4658      	mov	r0, fp
 8010fc8:	d107      	bne.n	8010fda <_dtoa_r+0xac2>
 8010fca:	f000 f91d 	bl	8011208 <__multadd>
 8010fce:	4607      	mov	r7, r0
 8010fd0:	4605      	mov	r5, r0
 8010fd2:	9b07      	ldr	r3, [sp, #28]
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	9307      	str	r3, [sp, #28]
 8010fd8:	e774      	b.n	8010ec4 <_dtoa_r+0x9ac>
 8010fda:	f000 f915 	bl	8011208 <__multadd>
 8010fde:	4629      	mov	r1, r5
 8010fe0:	4607      	mov	r7, r0
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	220a      	movs	r2, #10
 8010fe6:	4658      	mov	r0, fp
 8010fe8:	f000 f90e 	bl	8011208 <__multadd>
 8010fec:	4605      	mov	r5, r0
 8010fee:	e7f0      	b.n	8010fd2 <_dtoa_r+0xaba>
 8010ff0:	9b00      	ldr	r3, [sp, #0]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	bfcc      	ite	gt
 8010ff6:	461e      	movgt	r6, r3
 8010ff8:	2601      	movle	r6, #1
 8010ffa:	4456      	add	r6, sl
 8010ffc:	2700      	movs	r7, #0
 8010ffe:	4649      	mov	r1, r9
 8011000:	2201      	movs	r2, #1
 8011002:	4658      	mov	r0, fp
 8011004:	f000 faf6 	bl	80115f4 <__lshift>
 8011008:	4621      	mov	r1, r4
 801100a:	4681      	mov	r9, r0
 801100c:	f000 fb5e 	bl	80116cc <__mcmp>
 8011010:	2800      	cmp	r0, #0
 8011012:	dcb0      	bgt.n	8010f76 <_dtoa_r+0xa5e>
 8011014:	d102      	bne.n	801101c <_dtoa_r+0xb04>
 8011016:	f018 0f01 	tst.w	r8, #1
 801101a:	d1ac      	bne.n	8010f76 <_dtoa_r+0xa5e>
 801101c:	4633      	mov	r3, r6
 801101e:	461e      	mov	r6, r3
 8011020:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011024:	2a30      	cmp	r2, #48	@ 0x30
 8011026:	d0fa      	beq.n	801101e <_dtoa_r+0xb06>
 8011028:	e5c2      	b.n	8010bb0 <_dtoa_r+0x698>
 801102a:	459a      	cmp	sl, r3
 801102c:	d1a4      	bne.n	8010f78 <_dtoa_r+0xa60>
 801102e:	9b04      	ldr	r3, [sp, #16]
 8011030:	3301      	adds	r3, #1
 8011032:	9304      	str	r3, [sp, #16]
 8011034:	2331      	movs	r3, #49	@ 0x31
 8011036:	f88a 3000 	strb.w	r3, [sl]
 801103a:	e5b9      	b.n	8010bb0 <_dtoa_r+0x698>
 801103c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801103e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801109c <_dtoa_r+0xb84>
 8011042:	b11b      	cbz	r3, 801104c <_dtoa_r+0xb34>
 8011044:	f10a 0308 	add.w	r3, sl, #8
 8011048:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801104a:	6013      	str	r3, [r2, #0]
 801104c:	4650      	mov	r0, sl
 801104e:	b019      	add	sp, #100	@ 0x64
 8011050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011056:	2b01      	cmp	r3, #1
 8011058:	f77f ae37 	ble.w	8010cca <_dtoa_r+0x7b2>
 801105c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801105e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011060:	2001      	movs	r0, #1
 8011062:	e655      	b.n	8010d10 <_dtoa_r+0x7f8>
 8011064:	9b00      	ldr	r3, [sp, #0]
 8011066:	2b00      	cmp	r3, #0
 8011068:	f77f aed6 	ble.w	8010e18 <_dtoa_r+0x900>
 801106c:	4656      	mov	r6, sl
 801106e:	4621      	mov	r1, r4
 8011070:	4648      	mov	r0, r9
 8011072:	f7ff f9c9 	bl	8010408 <quorem>
 8011076:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801107a:	f806 8b01 	strb.w	r8, [r6], #1
 801107e:	9b00      	ldr	r3, [sp, #0]
 8011080:	eba6 020a 	sub.w	r2, r6, sl
 8011084:	4293      	cmp	r3, r2
 8011086:	ddb3      	ble.n	8010ff0 <_dtoa_r+0xad8>
 8011088:	4649      	mov	r1, r9
 801108a:	2300      	movs	r3, #0
 801108c:	220a      	movs	r2, #10
 801108e:	4658      	mov	r0, fp
 8011090:	f000 f8ba 	bl	8011208 <__multadd>
 8011094:	4681      	mov	r9, r0
 8011096:	e7ea      	b.n	801106e <_dtoa_r+0xb56>
 8011098:	08016653 	.word	0x08016653
 801109c:	080165d7 	.word	0x080165d7

080110a0 <_free_r>:
 80110a0:	b538      	push	{r3, r4, r5, lr}
 80110a2:	4605      	mov	r5, r0
 80110a4:	2900      	cmp	r1, #0
 80110a6:	d041      	beq.n	801112c <_free_r+0x8c>
 80110a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110ac:	1f0c      	subs	r4, r1, #4
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	bfb8      	it	lt
 80110b2:	18e4      	addlt	r4, r4, r3
 80110b4:	f7fe f914 	bl	800f2e0 <__malloc_lock>
 80110b8:	4a1d      	ldr	r2, [pc, #116]	@ (8011130 <_free_r+0x90>)
 80110ba:	6813      	ldr	r3, [r2, #0]
 80110bc:	b933      	cbnz	r3, 80110cc <_free_r+0x2c>
 80110be:	6063      	str	r3, [r4, #4]
 80110c0:	6014      	str	r4, [r2, #0]
 80110c2:	4628      	mov	r0, r5
 80110c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110c8:	f7fe b910 	b.w	800f2ec <__malloc_unlock>
 80110cc:	42a3      	cmp	r3, r4
 80110ce:	d908      	bls.n	80110e2 <_free_r+0x42>
 80110d0:	6820      	ldr	r0, [r4, #0]
 80110d2:	1821      	adds	r1, r4, r0
 80110d4:	428b      	cmp	r3, r1
 80110d6:	bf01      	itttt	eq
 80110d8:	6819      	ldreq	r1, [r3, #0]
 80110da:	685b      	ldreq	r3, [r3, #4]
 80110dc:	1809      	addeq	r1, r1, r0
 80110de:	6021      	streq	r1, [r4, #0]
 80110e0:	e7ed      	b.n	80110be <_free_r+0x1e>
 80110e2:	461a      	mov	r2, r3
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	b10b      	cbz	r3, 80110ec <_free_r+0x4c>
 80110e8:	42a3      	cmp	r3, r4
 80110ea:	d9fa      	bls.n	80110e2 <_free_r+0x42>
 80110ec:	6811      	ldr	r1, [r2, #0]
 80110ee:	1850      	adds	r0, r2, r1
 80110f0:	42a0      	cmp	r0, r4
 80110f2:	d10b      	bne.n	801110c <_free_r+0x6c>
 80110f4:	6820      	ldr	r0, [r4, #0]
 80110f6:	4401      	add	r1, r0
 80110f8:	1850      	adds	r0, r2, r1
 80110fa:	4283      	cmp	r3, r0
 80110fc:	6011      	str	r1, [r2, #0]
 80110fe:	d1e0      	bne.n	80110c2 <_free_r+0x22>
 8011100:	6818      	ldr	r0, [r3, #0]
 8011102:	685b      	ldr	r3, [r3, #4]
 8011104:	6053      	str	r3, [r2, #4]
 8011106:	4408      	add	r0, r1
 8011108:	6010      	str	r0, [r2, #0]
 801110a:	e7da      	b.n	80110c2 <_free_r+0x22>
 801110c:	d902      	bls.n	8011114 <_free_r+0x74>
 801110e:	230c      	movs	r3, #12
 8011110:	602b      	str	r3, [r5, #0]
 8011112:	e7d6      	b.n	80110c2 <_free_r+0x22>
 8011114:	6820      	ldr	r0, [r4, #0]
 8011116:	1821      	adds	r1, r4, r0
 8011118:	428b      	cmp	r3, r1
 801111a:	bf04      	itt	eq
 801111c:	6819      	ldreq	r1, [r3, #0]
 801111e:	685b      	ldreq	r3, [r3, #4]
 8011120:	6063      	str	r3, [r4, #4]
 8011122:	bf04      	itt	eq
 8011124:	1809      	addeq	r1, r1, r0
 8011126:	6021      	streq	r1, [r4, #0]
 8011128:	6054      	str	r4, [r2, #4]
 801112a:	e7ca      	b.n	80110c2 <_free_r+0x22>
 801112c:	bd38      	pop	{r3, r4, r5, pc}
 801112e:	bf00      	nop
 8011130:	200019e0 	.word	0x200019e0

08011134 <malloc>:
 8011134:	4b02      	ldr	r3, [pc, #8]	@ (8011140 <malloc+0xc>)
 8011136:	4601      	mov	r1, r0
 8011138:	6818      	ldr	r0, [r3, #0]
 801113a:	f7fe b851 	b.w	800f1e0 <_malloc_r>
 801113e:	bf00      	nop
 8011140:	20000078 	.word	0x20000078

08011144 <_Balloc>:
 8011144:	b570      	push	{r4, r5, r6, lr}
 8011146:	69c6      	ldr	r6, [r0, #28]
 8011148:	4604      	mov	r4, r0
 801114a:	460d      	mov	r5, r1
 801114c:	b976      	cbnz	r6, 801116c <_Balloc+0x28>
 801114e:	2010      	movs	r0, #16
 8011150:	f7ff fff0 	bl	8011134 <malloc>
 8011154:	4602      	mov	r2, r0
 8011156:	61e0      	str	r0, [r4, #28]
 8011158:	b920      	cbnz	r0, 8011164 <_Balloc+0x20>
 801115a:	4b18      	ldr	r3, [pc, #96]	@ (80111bc <_Balloc+0x78>)
 801115c:	4818      	ldr	r0, [pc, #96]	@ (80111c0 <_Balloc+0x7c>)
 801115e:	216b      	movs	r1, #107	@ 0x6b
 8011160:	f002 f8ee 	bl	8013340 <__assert_func>
 8011164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011168:	6006      	str	r6, [r0, #0]
 801116a:	60c6      	str	r6, [r0, #12]
 801116c:	69e6      	ldr	r6, [r4, #28]
 801116e:	68f3      	ldr	r3, [r6, #12]
 8011170:	b183      	cbz	r3, 8011194 <_Balloc+0x50>
 8011172:	69e3      	ldr	r3, [r4, #28]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801117a:	b9b8      	cbnz	r0, 80111ac <_Balloc+0x68>
 801117c:	2101      	movs	r1, #1
 801117e:	fa01 f605 	lsl.w	r6, r1, r5
 8011182:	1d72      	adds	r2, r6, #5
 8011184:	0092      	lsls	r2, r2, #2
 8011186:	4620      	mov	r0, r4
 8011188:	f7fd fff4 	bl	800f174 <_calloc_r>
 801118c:	b160      	cbz	r0, 80111a8 <_Balloc+0x64>
 801118e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011192:	e00e      	b.n	80111b2 <_Balloc+0x6e>
 8011194:	2221      	movs	r2, #33	@ 0x21
 8011196:	2104      	movs	r1, #4
 8011198:	4620      	mov	r0, r4
 801119a:	f7fd ffeb 	bl	800f174 <_calloc_r>
 801119e:	69e3      	ldr	r3, [r4, #28]
 80111a0:	60f0      	str	r0, [r6, #12]
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d1e4      	bne.n	8011172 <_Balloc+0x2e>
 80111a8:	2000      	movs	r0, #0
 80111aa:	bd70      	pop	{r4, r5, r6, pc}
 80111ac:	6802      	ldr	r2, [r0, #0]
 80111ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111b2:	2300      	movs	r3, #0
 80111b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111b8:	e7f7      	b.n	80111aa <_Balloc+0x66>
 80111ba:	bf00      	nop
 80111bc:	080165e4 	.word	0x080165e4
 80111c0:	08016664 	.word	0x08016664

080111c4 <_Bfree>:
 80111c4:	b570      	push	{r4, r5, r6, lr}
 80111c6:	69c6      	ldr	r6, [r0, #28]
 80111c8:	4605      	mov	r5, r0
 80111ca:	460c      	mov	r4, r1
 80111cc:	b976      	cbnz	r6, 80111ec <_Bfree+0x28>
 80111ce:	2010      	movs	r0, #16
 80111d0:	f7ff ffb0 	bl	8011134 <malloc>
 80111d4:	4602      	mov	r2, r0
 80111d6:	61e8      	str	r0, [r5, #28]
 80111d8:	b920      	cbnz	r0, 80111e4 <_Bfree+0x20>
 80111da:	4b09      	ldr	r3, [pc, #36]	@ (8011200 <_Bfree+0x3c>)
 80111dc:	4809      	ldr	r0, [pc, #36]	@ (8011204 <_Bfree+0x40>)
 80111de:	218f      	movs	r1, #143	@ 0x8f
 80111e0:	f002 f8ae 	bl	8013340 <__assert_func>
 80111e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111e8:	6006      	str	r6, [r0, #0]
 80111ea:	60c6      	str	r6, [r0, #12]
 80111ec:	b13c      	cbz	r4, 80111fe <_Bfree+0x3a>
 80111ee:	69eb      	ldr	r3, [r5, #28]
 80111f0:	6862      	ldr	r2, [r4, #4]
 80111f2:	68db      	ldr	r3, [r3, #12]
 80111f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111f8:	6021      	str	r1, [r4, #0]
 80111fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80111fe:	bd70      	pop	{r4, r5, r6, pc}
 8011200:	080165e4 	.word	0x080165e4
 8011204:	08016664 	.word	0x08016664

08011208 <__multadd>:
 8011208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801120c:	690d      	ldr	r5, [r1, #16]
 801120e:	4607      	mov	r7, r0
 8011210:	460c      	mov	r4, r1
 8011212:	461e      	mov	r6, r3
 8011214:	f101 0c14 	add.w	ip, r1, #20
 8011218:	2000      	movs	r0, #0
 801121a:	f8dc 3000 	ldr.w	r3, [ip]
 801121e:	b299      	uxth	r1, r3
 8011220:	fb02 6101 	mla	r1, r2, r1, r6
 8011224:	0c1e      	lsrs	r6, r3, #16
 8011226:	0c0b      	lsrs	r3, r1, #16
 8011228:	fb02 3306 	mla	r3, r2, r6, r3
 801122c:	b289      	uxth	r1, r1
 801122e:	3001      	adds	r0, #1
 8011230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8011234:	4285      	cmp	r5, r0
 8011236:	f84c 1b04 	str.w	r1, [ip], #4
 801123a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801123e:	dcec      	bgt.n	801121a <__multadd+0x12>
 8011240:	b30e      	cbz	r6, 8011286 <__multadd+0x7e>
 8011242:	68a3      	ldr	r3, [r4, #8]
 8011244:	42ab      	cmp	r3, r5
 8011246:	dc19      	bgt.n	801127c <__multadd+0x74>
 8011248:	6861      	ldr	r1, [r4, #4]
 801124a:	4638      	mov	r0, r7
 801124c:	3101      	adds	r1, #1
 801124e:	f7ff ff79 	bl	8011144 <_Balloc>
 8011252:	4680      	mov	r8, r0
 8011254:	b928      	cbnz	r0, 8011262 <__multadd+0x5a>
 8011256:	4602      	mov	r2, r0
 8011258:	4b0c      	ldr	r3, [pc, #48]	@ (801128c <__multadd+0x84>)
 801125a:	480d      	ldr	r0, [pc, #52]	@ (8011290 <__multadd+0x88>)
 801125c:	21ba      	movs	r1, #186	@ 0xba
 801125e:	f002 f86f 	bl	8013340 <__assert_func>
 8011262:	6922      	ldr	r2, [r4, #16]
 8011264:	3202      	adds	r2, #2
 8011266:	f104 010c 	add.w	r1, r4, #12
 801126a:	0092      	lsls	r2, r2, #2
 801126c:	300c      	adds	r0, #12
 801126e:	f7ff f8b6 	bl	80103de <memcpy>
 8011272:	4621      	mov	r1, r4
 8011274:	4638      	mov	r0, r7
 8011276:	f7ff ffa5 	bl	80111c4 <_Bfree>
 801127a:	4644      	mov	r4, r8
 801127c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011280:	3501      	adds	r5, #1
 8011282:	615e      	str	r6, [r3, #20]
 8011284:	6125      	str	r5, [r4, #16]
 8011286:	4620      	mov	r0, r4
 8011288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801128c:	08016653 	.word	0x08016653
 8011290:	08016664 	.word	0x08016664

08011294 <__s2b>:
 8011294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011298:	460c      	mov	r4, r1
 801129a:	4615      	mov	r5, r2
 801129c:	461f      	mov	r7, r3
 801129e:	2209      	movs	r2, #9
 80112a0:	3308      	adds	r3, #8
 80112a2:	4606      	mov	r6, r0
 80112a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80112a8:	2100      	movs	r1, #0
 80112aa:	2201      	movs	r2, #1
 80112ac:	429a      	cmp	r2, r3
 80112ae:	db09      	blt.n	80112c4 <__s2b+0x30>
 80112b0:	4630      	mov	r0, r6
 80112b2:	f7ff ff47 	bl	8011144 <_Balloc>
 80112b6:	b940      	cbnz	r0, 80112ca <__s2b+0x36>
 80112b8:	4602      	mov	r2, r0
 80112ba:	4b19      	ldr	r3, [pc, #100]	@ (8011320 <__s2b+0x8c>)
 80112bc:	4819      	ldr	r0, [pc, #100]	@ (8011324 <__s2b+0x90>)
 80112be:	21d3      	movs	r1, #211	@ 0xd3
 80112c0:	f002 f83e 	bl	8013340 <__assert_func>
 80112c4:	0052      	lsls	r2, r2, #1
 80112c6:	3101      	adds	r1, #1
 80112c8:	e7f0      	b.n	80112ac <__s2b+0x18>
 80112ca:	9b08      	ldr	r3, [sp, #32]
 80112cc:	6143      	str	r3, [r0, #20]
 80112ce:	2d09      	cmp	r5, #9
 80112d0:	f04f 0301 	mov.w	r3, #1
 80112d4:	6103      	str	r3, [r0, #16]
 80112d6:	dd16      	ble.n	8011306 <__s2b+0x72>
 80112d8:	f104 0909 	add.w	r9, r4, #9
 80112dc:	46c8      	mov	r8, r9
 80112de:	442c      	add	r4, r5
 80112e0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112e4:	4601      	mov	r1, r0
 80112e6:	3b30      	subs	r3, #48	@ 0x30
 80112e8:	220a      	movs	r2, #10
 80112ea:	4630      	mov	r0, r6
 80112ec:	f7ff ff8c 	bl	8011208 <__multadd>
 80112f0:	45a0      	cmp	r8, r4
 80112f2:	d1f5      	bne.n	80112e0 <__s2b+0x4c>
 80112f4:	f1a5 0408 	sub.w	r4, r5, #8
 80112f8:	444c      	add	r4, r9
 80112fa:	1b2d      	subs	r5, r5, r4
 80112fc:	1963      	adds	r3, r4, r5
 80112fe:	42bb      	cmp	r3, r7
 8011300:	db04      	blt.n	801130c <__s2b+0x78>
 8011302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011306:	340a      	adds	r4, #10
 8011308:	2509      	movs	r5, #9
 801130a:	e7f6      	b.n	80112fa <__s2b+0x66>
 801130c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011310:	4601      	mov	r1, r0
 8011312:	3b30      	subs	r3, #48	@ 0x30
 8011314:	220a      	movs	r2, #10
 8011316:	4630      	mov	r0, r6
 8011318:	f7ff ff76 	bl	8011208 <__multadd>
 801131c:	e7ee      	b.n	80112fc <__s2b+0x68>
 801131e:	bf00      	nop
 8011320:	08016653 	.word	0x08016653
 8011324:	08016664 	.word	0x08016664

08011328 <__hi0bits>:
 8011328:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801132c:	4603      	mov	r3, r0
 801132e:	bf36      	itet	cc
 8011330:	0403      	lslcc	r3, r0, #16
 8011332:	2000      	movcs	r0, #0
 8011334:	2010      	movcc	r0, #16
 8011336:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801133a:	bf3c      	itt	cc
 801133c:	021b      	lslcc	r3, r3, #8
 801133e:	3008      	addcc	r0, #8
 8011340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011344:	bf3c      	itt	cc
 8011346:	011b      	lslcc	r3, r3, #4
 8011348:	3004      	addcc	r0, #4
 801134a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801134e:	bf3c      	itt	cc
 8011350:	009b      	lslcc	r3, r3, #2
 8011352:	3002      	addcc	r0, #2
 8011354:	2b00      	cmp	r3, #0
 8011356:	db05      	blt.n	8011364 <__hi0bits+0x3c>
 8011358:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801135c:	f100 0001 	add.w	r0, r0, #1
 8011360:	bf08      	it	eq
 8011362:	2020      	moveq	r0, #32
 8011364:	4770      	bx	lr

08011366 <__lo0bits>:
 8011366:	6803      	ldr	r3, [r0, #0]
 8011368:	4602      	mov	r2, r0
 801136a:	f013 0007 	ands.w	r0, r3, #7
 801136e:	d00b      	beq.n	8011388 <__lo0bits+0x22>
 8011370:	07d9      	lsls	r1, r3, #31
 8011372:	d421      	bmi.n	80113b8 <__lo0bits+0x52>
 8011374:	0798      	lsls	r0, r3, #30
 8011376:	bf49      	itett	mi
 8011378:	085b      	lsrmi	r3, r3, #1
 801137a:	089b      	lsrpl	r3, r3, #2
 801137c:	2001      	movmi	r0, #1
 801137e:	6013      	strmi	r3, [r2, #0]
 8011380:	bf5c      	itt	pl
 8011382:	6013      	strpl	r3, [r2, #0]
 8011384:	2002      	movpl	r0, #2
 8011386:	4770      	bx	lr
 8011388:	b299      	uxth	r1, r3
 801138a:	b909      	cbnz	r1, 8011390 <__lo0bits+0x2a>
 801138c:	0c1b      	lsrs	r3, r3, #16
 801138e:	2010      	movs	r0, #16
 8011390:	b2d9      	uxtb	r1, r3
 8011392:	b909      	cbnz	r1, 8011398 <__lo0bits+0x32>
 8011394:	3008      	adds	r0, #8
 8011396:	0a1b      	lsrs	r3, r3, #8
 8011398:	0719      	lsls	r1, r3, #28
 801139a:	bf04      	itt	eq
 801139c:	091b      	lsreq	r3, r3, #4
 801139e:	3004      	addeq	r0, #4
 80113a0:	0799      	lsls	r1, r3, #30
 80113a2:	bf04      	itt	eq
 80113a4:	089b      	lsreq	r3, r3, #2
 80113a6:	3002      	addeq	r0, #2
 80113a8:	07d9      	lsls	r1, r3, #31
 80113aa:	d403      	bmi.n	80113b4 <__lo0bits+0x4e>
 80113ac:	085b      	lsrs	r3, r3, #1
 80113ae:	f100 0001 	add.w	r0, r0, #1
 80113b2:	d003      	beq.n	80113bc <__lo0bits+0x56>
 80113b4:	6013      	str	r3, [r2, #0]
 80113b6:	4770      	bx	lr
 80113b8:	2000      	movs	r0, #0
 80113ba:	4770      	bx	lr
 80113bc:	2020      	movs	r0, #32
 80113be:	4770      	bx	lr

080113c0 <__i2b>:
 80113c0:	b510      	push	{r4, lr}
 80113c2:	460c      	mov	r4, r1
 80113c4:	2101      	movs	r1, #1
 80113c6:	f7ff febd 	bl	8011144 <_Balloc>
 80113ca:	4602      	mov	r2, r0
 80113cc:	b928      	cbnz	r0, 80113da <__i2b+0x1a>
 80113ce:	4b05      	ldr	r3, [pc, #20]	@ (80113e4 <__i2b+0x24>)
 80113d0:	4805      	ldr	r0, [pc, #20]	@ (80113e8 <__i2b+0x28>)
 80113d2:	f240 1145 	movw	r1, #325	@ 0x145
 80113d6:	f001 ffb3 	bl	8013340 <__assert_func>
 80113da:	2301      	movs	r3, #1
 80113dc:	6144      	str	r4, [r0, #20]
 80113de:	6103      	str	r3, [r0, #16]
 80113e0:	bd10      	pop	{r4, pc}
 80113e2:	bf00      	nop
 80113e4:	08016653 	.word	0x08016653
 80113e8:	08016664 	.word	0x08016664

080113ec <__multiply>:
 80113ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113f0:	4614      	mov	r4, r2
 80113f2:	690a      	ldr	r2, [r1, #16]
 80113f4:	6923      	ldr	r3, [r4, #16]
 80113f6:	429a      	cmp	r2, r3
 80113f8:	bfa8      	it	ge
 80113fa:	4623      	movge	r3, r4
 80113fc:	460f      	mov	r7, r1
 80113fe:	bfa4      	itt	ge
 8011400:	460c      	movge	r4, r1
 8011402:	461f      	movge	r7, r3
 8011404:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8011408:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801140c:	68a3      	ldr	r3, [r4, #8]
 801140e:	6861      	ldr	r1, [r4, #4]
 8011410:	eb0a 0609 	add.w	r6, sl, r9
 8011414:	42b3      	cmp	r3, r6
 8011416:	b085      	sub	sp, #20
 8011418:	bfb8      	it	lt
 801141a:	3101      	addlt	r1, #1
 801141c:	f7ff fe92 	bl	8011144 <_Balloc>
 8011420:	b930      	cbnz	r0, 8011430 <__multiply+0x44>
 8011422:	4602      	mov	r2, r0
 8011424:	4b44      	ldr	r3, [pc, #272]	@ (8011538 <__multiply+0x14c>)
 8011426:	4845      	ldr	r0, [pc, #276]	@ (801153c <__multiply+0x150>)
 8011428:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801142c:	f001 ff88 	bl	8013340 <__assert_func>
 8011430:	f100 0514 	add.w	r5, r0, #20
 8011434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011438:	462b      	mov	r3, r5
 801143a:	2200      	movs	r2, #0
 801143c:	4543      	cmp	r3, r8
 801143e:	d321      	bcc.n	8011484 <__multiply+0x98>
 8011440:	f107 0114 	add.w	r1, r7, #20
 8011444:	f104 0214 	add.w	r2, r4, #20
 8011448:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801144c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011450:	9302      	str	r3, [sp, #8]
 8011452:	1b13      	subs	r3, r2, r4
 8011454:	3b15      	subs	r3, #21
 8011456:	f023 0303 	bic.w	r3, r3, #3
 801145a:	3304      	adds	r3, #4
 801145c:	f104 0715 	add.w	r7, r4, #21
 8011460:	42ba      	cmp	r2, r7
 8011462:	bf38      	it	cc
 8011464:	2304      	movcc	r3, #4
 8011466:	9301      	str	r3, [sp, #4]
 8011468:	9b02      	ldr	r3, [sp, #8]
 801146a:	9103      	str	r1, [sp, #12]
 801146c:	428b      	cmp	r3, r1
 801146e:	d80c      	bhi.n	801148a <__multiply+0x9e>
 8011470:	2e00      	cmp	r6, #0
 8011472:	dd03      	ble.n	801147c <__multiply+0x90>
 8011474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011478:	2b00      	cmp	r3, #0
 801147a:	d05b      	beq.n	8011534 <__multiply+0x148>
 801147c:	6106      	str	r6, [r0, #16]
 801147e:	b005      	add	sp, #20
 8011480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011484:	f843 2b04 	str.w	r2, [r3], #4
 8011488:	e7d8      	b.n	801143c <__multiply+0x50>
 801148a:	f8b1 a000 	ldrh.w	sl, [r1]
 801148e:	f1ba 0f00 	cmp.w	sl, #0
 8011492:	d024      	beq.n	80114de <__multiply+0xf2>
 8011494:	f104 0e14 	add.w	lr, r4, #20
 8011498:	46a9      	mov	r9, r5
 801149a:	f04f 0c00 	mov.w	ip, #0
 801149e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80114a2:	f8d9 3000 	ldr.w	r3, [r9]
 80114a6:	fa1f fb87 	uxth.w	fp, r7
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80114b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80114b4:	f8d9 7000 	ldr.w	r7, [r9]
 80114b8:	4463      	add	r3, ip
 80114ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80114be:	fb0a c70b 	mla	r7, sl, fp, ip
 80114c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80114cc:	4572      	cmp	r2, lr
 80114ce:	f849 3b04 	str.w	r3, [r9], #4
 80114d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80114d6:	d8e2      	bhi.n	801149e <__multiply+0xb2>
 80114d8:	9b01      	ldr	r3, [sp, #4]
 80114da:	f845 c003 	str.w	ip, [r5, r3]
 80114de:	9b03      	ldr	r3, [sp, #12]
 80114e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80114e4:	3104      	adds	r1, #4
 80114e6:	f1b9 0f00 	cmp.w	r9, #0
 80114ea:	d021      	beq.n	8011530 <__multiply+0x144>
 80114ec:	682b      	ldr	r3, [r5, #0]
 80114ee:	f104 0c14 	add.w	ip, r4, #20
 80114f2:	46ae      	mov	lr, r5
 80114f4:	f04f 0a00 	mov.w	sl, #0
 80114f8:	f8bc b000 	ldrh.w	fp, [ip]
 80114fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8011500:	fb09 770b 	mla	r7, r9, fp, r7
 8011504:	4457      	add	r7, sl
 8011506:	b29b      	uxth	r3, r3
 8011508:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801150c:	f84e 3b04 	str.w	r3, [lr], #4
 8011510:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011514:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011518:	f8be 3000 	ldrh.w	r3, [lr]
 801151c:	fb09 330a 	mla	r3, r9, sl, r3
 8011520:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011524:	4562      	cmp	r2, ip
 8011526:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801152a:	d8e5      	bhi.n	80114f8 <__multiply+0x10c>
 801152c:	9f01      	ldr	r7, [sp, #4]
 801152e:	51eb      	str	r3, [r5, r7]
 8011530:	3504      	adds	r5, #4
 8011532:	e799      	b.n	8011468 <__multiply+0x7c>
 8011534:	3e01      	subs	r6, #1
 8011536:	e79b      	b.n	8011470 <__multiply+0x84>
 8011538:	08016653 	.word	0x08016653
 801153c:	08016664 	.word	0x08016664

08011540 <__pow5mult>:
 8011540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011544:	4615      	mov	r5, r2
 8011546:	f012 0203 	ands.w	r2, r2, #3
 801154a:	4607      	mov	r7, r0
 801154c:	460e      	mov	r6, r1
 801154e:	d007      	beq.n	8011560 <__pow5mult+0x20>
 8011550:	4c25      	ldr	r4, [pc, #148]	@ (80115e8 <__pow5mult+0xa8>)
 8011552:	3a01      	subs	r2, #1
 8011554:	2300      	movs	r3, #0
 8011556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801155a:	f7ff fe55 	bl	8011208 <__multadd>
 801155e:	4606      	mov	r6, r0
 8011560:	10ad      	asrs	r5, r5, #2
 8011562:	d03d      	beq.n	80115e0 <__pow5mult+0xa0>
 8011564:	69fc      	ldr	r4, [r7, #28]
 8011566:	b97c      	cbnz	r4, 8011588 <__pow5mult+0x48>
 8011568:	2010      	movs	r0, #16
 801156a:	f7ff fde3 	bl	8011134 <malloc>
 801156e:	4602      	mov	r2, r0
 8011570:	61f8      	str	r0, [r7, #28]
 8011572:	b928      	cbnz	r0, 8011580 <__pow5mult+0x40>
 8011574:	4b1d      	ldr	r3, [pc, #116]	@ (80115ec <__pow5mult+0xac>)
 8011576:	481e      	ldr	r0, [pc, #120]	@ (80115f0 <__pow5mult+0xb0>)
 8011578:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801157c:	f001 fee0 	bl	8013340 <__assert_func>
 8011580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011584:	6004      	str	r4, [r0, #0]
 8011586:	60c4      	str	r4, [r0, #12]
 8011588:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801158c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011590:	b94c      	cbnz	r4, 80115a6 <__pow5mult+0x66>
 8011592:	f240 2171 	movw	r1, #625	@ 0x271
 8011596:	4638      	mov	r0, r7
 8011598:	f7ff ff12 	bl	80113c0 <__i2b>
 801159c:	2300      	movs	r3, #0
 801159e:	f8c8 0008 	str.w	r0, [r8, #8]
 80115a2:	4604      	mov	r4, r0
 80115a4:	6003      	str	r3, [r0, #0]
 80115a6:	f04f 0900 	mov.w	r9, #0
 80115aa:	07eb      	lsls	r3, r5, #31
 80115ac:	d50a      	bpl.n	80115c4 <__pow5mult+0x84>
 80115ae:	4631      	mov	r1, r6
 80115b0:	4622      	mov	r2, r4
 80115b2:	4638      	mov	r0, r7
 80115b4:	f7ff ff1a 	bl	80113ec <__multiply>
 80115b8:	4631      	mov	r1, r6
 80115ba:	4680      	mov	r8, r0
 80115bc:	4638      	mov	r0, r7
 80115be:	f7ff fe01 	bl	80111c4 <_Bfree>
 80115c2:	4646      	mov	r6, r8
 80115c4:	106d      	asrs	r5, r5, #1
 80115c6:	d00b      	beq.n	80115e0 <__pow5mult+0xa0>
 80115c8:	6820      	ldr	r0, [r4, #0]
 80115ca:	b938      	cbnz	r0, 80115dc <__pow5mult+0x9c>
 80115cc:	4622      	mov	r2, r4
 80115ce:	4621      	mov	r1, r4
 80115d0:	4638      	mov	r0, r7
 80115d2:	f7ff ff0b 	bl	80113ec <__multiply>
 80115d6:	6020      	str	r0, [r4, #0]
 80115d8:	f8c0 9000 	str.w	r9, [r0]
 80115dc:	4604      	mov	r4, r0
 80115de:	e7e4      	b.n	80115aa <__pow5mult+0x6a>
 80115e0:	4630      	mov	r0, r6
 80115e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115e6:	bf00      	nop
 80115e8:	080166c0 	.word	0x080166c0
 80115ec:	080165e4 	.word	0x080165e4
 80115f0:	08016664 	.word	0x08016664

080115f4 <__lshift>:
 80115f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115f8:	460c      	mov	r4, r1
 80115fa:	6849      	ldr	r1, [r1, #4]
 80115fc:	6923      	ldr	r3, [r4, #16]
 80115fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011602:	68a3      	ldr	r3, [r4, #8]
 8011604:	4607      	mov	r7, r0
 8011606:	4691      	mov	r9, r2
 8011608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801160c:	f108 0601 	add.w	r6, r8, #1
 8011610:	42b3      	cmp	r3, r6
 8011612:	db0b      	blt.n	801162c <__lshift+0x38>
 8011614:	4638      	mov	r0, r7
 8011616:	f7ff fd95 	bl	8011144 <_Balloc>
 801161a:	4605      	mov	r5, r0
 801161c:	b948      	cbnz	r0, 8011632 <__lshift+0x3e>
 801161e:	4602      	mov	r2, r0
 8011620:	4b28      	ldr	r3, [pc, #160]	@ (80116c4 <__lshift+0xd0>)
 8011622:	4829      	ldr	r0, [pc, #164]	@ (80116c8 <__lshift+0xd4>)
 8011624:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011628:	f001 fe8a 	bl	8013340 <__assert_func>
 801162c:	3101      	adds	r1, #1
 801162e:	005b      	lsls	r3, r3, #1
 8011630:	e7ee      	b.n	8011610 <__lshift+0x1c>
 8011632:	2300      	movs	r3, #0
 8011634:	f100 0114 	add.w	r1, r0, #20
 8011638:	f100 0210 	add.w	r2, r0, #16
 801163c:	4618      	mov	r0, r3
 801163e:	4553      	cmp	r3, sl
 8011640:	db33      	blt.n	80116aa <__lshift+0xb6>
 8011642:	6920      	ldr	r0, [r4, #16]
 8011644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011648:	f104 0314 	add.w	r3, r4, #20
 801164c:	f019 091f 	ands.w	r9, r9, #31
 8011650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011654:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011658:	d02b      	beq.n	80116b2 <__lshift+0xbe>
 801165a:	f1c9 0e20 	rsb	lr, r9, #32
 801165e:	468a      	mov	sl, r1
 8011660:	2200      	movs	r2, #0
 8011662:	6818      	ldr	r0, [r3, #0]
 8011664:	fa00 f009 	lsl.w	r0, r0, r9
 8011668:	4310      	orrs	r0, r2
 801166a:	f84a 0b04 	str.w	r0, [sl], #4
 801166e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011672:	459c      	cmp	ip, r3
 8011674:	fa22 f20e 	lsr.w	r2, r2, lr
 8011678:	d8f3      	bhi.n	8011662 <__lshift+0x6e>
 801167a:	ebac 0304 	sub.w	r3, ip, r4
 801167e:	3b15      	subs	r3, #21
 8011680:	f023 0303 	bic.w	r3, r3, #3
 8011684:	3304      	adds	r3, #4
 8011686:	f104 0015 	add.w	r0, r4, #21
 801168a:	4584      	cmp	ip, r0
 801168c:	bf38      	it	cc
 801168e:	2304      	movcc	r3, #4
 8011690:	50ca      	str	r2, [r1, r3]
 8011692:	b10a      	cbz	r2, 8011698 <__lshift+0xa4>
 8011694:	f108 0602 	add.w	r6, r8, #2
 8011698:	3e01      	subs	r6, #1
 801169a:	4638      	mov	r0, r7
 801169c:	612e      	str	r6, [r5, #16]
 801169e:	4621      	mov	r1, r4
 80116a0:	f7ff fd90 	bl	80111c4 <_Bfree>
 80116a4:	4628      	mov	r0, r5
 80116a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80116ae:	3301      	adds	r3, #1
 80116b0:	e7c5      	b.n	801163e <__lshift+0x4a>
 80116b2:	3904      	subs	r1, #4
 80116b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80116b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80116bc:	459c      	cmp	ip, r3
 80116be:	d8f9      	bhi.n	80116b4 <__lshift+0xc0>
 80116c0:	e7ea      	b.n	8011698 <__lshift+0xa4>
 80116c2:	bf00      	nop
 80116c4:	08016653 	.word	0x08016653
 80116c8:	08016664 	.word	0x08016664

080116cc <__mcmp>:
 80116cc:	690a      	ldr	r2, [r1, #16]
 80116ce:	4603      	mov	r3, r0
 80116d0:	6900      	ldr	r0, [r0, #16]
 80116d2:	1a80      	subs	r0, r0, r2
 80116d4:	b530      	push	{r4, r5, lr}
 80116d6:	d10e      	bne.n	80116f6 <__mcmp+0x2a>
 80116d8:	3314      	adds	r3, #20
 80116da:	3114      	adds	r1, #20
 80116dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80116e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80116e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80116e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80116ec:	4295      	cmp	r5, r2
 80116ee:	d003      	beq.n	80116f8 <__mcmp+0x2c>
 80116f0:	d205      	bcs.n	80116fe <__mcmp+0x32>
 80116f2:	f04f 30ff 	mov.w	r0, #4294967295
 80116f6:	bd30      	pop	{r4, r5, pc}
 80116f8:	42a3      	cmp	r3, r4
 80116fa:	d3f3      	bcc.n	80116e4 <__mcmp+0x18>
 80116fc:	e7fb      	b.n	80116f6 <__mcmp+0x2a>
 80116fe:	2001      	movs	r0, #1
 8011700:	e7f9      	b.n	80116f6 <__mcmp+0x2a>
	...

08011704 <__mdiff>:
 8011704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011708:	4689      	mov	r9, r1
 801170a:	4606      	mov	r6, r0
 801170c:	4611      	mov	r1, r2
 801170e:	4648      	mov	r0, r9
 8011710:	4614      	mov	r4, r2
 8011712:	f7ff ffdb 	bl	80116cc <__mcmp>
 8011716:	1e05      	subs	r5, r0, #0
 8011718:	d112      	bne.n	8011740 <__mdiff+0x3c>
 801171a:	4629      	mov	r1, r5
 801171c:	4630      	mov	r0, r6
 801171e:	f7ff fd11 	bl	8011144 <_Balloc>
 8011722:	4602      	mov	r2, r0
 8011724:	b928      	cbnz	r0, 8011732 <__mdiff+0x2e>
 8011726:	4b3f      	ldr	r3, [pc, #252]	@ (8011824 <__mdiff+0x120>)
 8011728:	f240 2137 	movw	r1, #567	@ 0x237
 801172c:	483e      	ldr	r0, [pc, #248]	@ (8011828 <__mdiff+0x124>)
 801172e:	f001 fe07 	bl	8013340 <__assert_func>
 8011732:	2301      	movs	r3, #1
 8011734:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011738:	4610      	mov	r0, r2
 801173a:	b003      	add	sp, #12
 801173c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011740:	bfbc      	itt	lt
 8011742:	464b      	movlt	r3, r9
 8011744:	46a1      	movlt	r9, r4
 8011746:	4630      	mov	r0, r6
 8011748:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801174c:	bfba      	itte	lt
 801174e:	461c      	movlt	r4, r3
 8011750:	2501      	movlt	r5, #1
 8011752:	2500      	movge	r5, #0
 8011754:	f7ff fcf6 	bl	8011144 <_Balloc>
 8011758:	4602      	mov	r2, r0
 801175a:	b918      	cbnz	r0, 8011764 <__mdiff+0x60>
 801175c:	4b31      	ldr	r3, [pc, #196]	@ (8011824 <__mdiff+0x120>)
 801175e:	f240 2145 	movw	r1, #581	@ 0x245
 8011762:	e7e3      	b.n	801172c <__mdiff+0x28>
 8011764:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011768:	6926      	ldr	r6, [r4, #16]
 801176a:	60c5      	str	r5, [r0, #12]
 801176c:	f109 0310 	add.w	r3, r9, #16
 8011770:	f109 0514 	add.w	r5, r9, #20
 8011774:	f104 0e14 	add.w	lr, r4, #20
 8011778:	f100 0b14 	add.w	fp, r0, #20
 801177c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011780:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011784:	9301      	str	r3, [sp, #4]
 8011786:	46d9      	mov	r9, fp
 8011788:	f04f 0c00 	mov.w	ip, #0
 801178c:	9b01      	ldr	r3, [sp, #4]
 801178e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011792:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011796:	9301      	str	r3, [sp, #4]
 8011798:	fa1f f38a 	uxth.w	r3, sl
 801179c:	4619      	mov	r1, r3
 801179e:	b283      	uxth	r3, r0
 80117a0:	1acb      	subs	r3, r1, r3
 80117a2:	0c00      	lsrs	r0, r0, #16
 80117a4:	4463      	add	r3, ip
 80117a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80117aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80117b4:	4576      	cmp	r6, lr
 80117b6:	f849 3b04 	str.w	r3, [r9], #4
 80117ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80117be:	d8e5      	bhi.n	801178c <__mdiff+0x88>
 80117c0:	1b33      	subs	r3, r6, r4
 80117c2:	3b15      	subs	r3, #21
 80117c4:	f023 0303 	bic.w	r3, r3, #3
 80117c8:	3415      	adds	r4, #21
 80117ca:	3304      	adds	r3, #4
 80117cc:	42a6      	cmp	r6, r4
 80117ce:	bf38      	it	cc
 80117d0:	2304      	movcc	r3, #4
 80117d2:	441d      	add	r5, r3
 80117d4:	445b      	add	r3, fp
 80117d6:	461e      	mov	r6, r3
 80117d8:	462c      	mov	r4, r5
 80117da:	4544      	cmp	r4, r8
 80117dc:	d30e      	bcc.n	80117fc <__mdiff+0xf8>
 80117de:	f108 0103 	add.w	r1, r8, #3
 80117e2:	1b49      	subs	r1, r1, r5
 80117e4:	f021 0103 	bic.w	r1, r1, #3
 80117e8:	3d03      	subs	r5, #3
 80117ea:	45a8      	cmp	r8, r5
 80117ec:	bf38      	it	cc
 80117ee:	2100      	movcc	r1, #0
 80117f0:	440b      	add	r3, r1
 80117f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80117f6:	b191      	cbz	r1, 801181e <__mdiff+0x11a>
 80117f8:	6117      	str	r7, [r2, #16]
 80117fa:	e79d      	b.n	8011738 <__mdiff+0x34>
 80117fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8011800:	46e6      	mov	lr, ip
 8011802:	0c08      	lsrs	r0, r1, #16
 8011804:	fa1c fc81 	uxtah	ip, ip, r1
 8011808:	4471      	add	r1, lr
 801180a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801180e:	b289      	uxth	r1, r1
 8011810:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011814:	f846 1b04 	str.w	r1, [r6], #4
 8011818:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801181c:	e7dd      	b.n	80117da <__mdiff+0xd6>
 801181e:	3f01      	subs	r7, #1
 8011820:	e7e7      	b.n	80117f2 <__mdiff+0xee>
 8011822:	bf00      	nop
 8011824:	08016653 	.word	0x08016653
 8011828:	08016664 	.word	0x08016664

0801182c <__ulp>:
 801182c:	b082      	sub	sp, #8
 801182e:	ed8d 0b00 	vstr	d0, [sp]
 8011832:	9a01      	ldr	r2, [sp, #4]
 8011834:	4b0f      	ldr	r3, [pc, #60]	@ (8011874 <__ulp+0x48>)
 8011836:	4013      	ands	r3, r2
 8011838:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801183c:	2b00      	cmp	r3, #0
 801183e:	dc08      	bgt.n	8011852 <__ulp+0x26>
 8011840:	425b      	negs	r3, r3
 8011842:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011846:	ea4f 5223 	mov.w	r2, r3, asr #20
 801184a:	da04      	bge.n	8011856 <__ulp+0x2a>
 801184c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011850:	4113      	asrs	r3, r2
 8011852:	2200      	movs	r2, #0
 8011854:	e008      	b.n	8011868 <__ulp+0x3c>
 8011856:	f1a2 0314 	sub.w	r3, r2, #20
 801185a:	2b1e      	cmp	r3, #30
 801185c:	bfda      	itte	le
 801185e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011862:	40da      	lsrle	r2, r3
 8011864:	2201      	movgt	r2, #1
 8011866:	2300      	movs	r3, #0
 8011868:	4619      	mov	r1, r3
 801186a:	4610      	mov	r0, r2
 801186c:	ec41 0b10 	vmov	d0, r0, r1
 8011870:	b002      	add	sp, #8
 8011872:	4770      	bx	lr
 8011874:	7ff00000 	.word	0x7ff00000

08011878 <__b2d>:
 8011878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801187c:	6906      	ldr	r6, [r0, #16]
 801187e:	f100 0814 	add.w	r8, r0, #20
 8011882:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011886:	1f37      	subs	r7, r6, #4
 8011888:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801188c:	4610      	mov	r0, r2
 801188e:	f7ff fd4b 	bl	8011328 <__hi0bits>
 8011892:	f1c0 0320 	rsb	r3, r0, #32
 8011896:	280a      	cmp	r0, #10
 8011898:	600b      	str	r3, [r1, #0]
 801189a:	491b      	ldr	r1, [pc, #108]	@ (8011908 <__b2d+0x90>)
 801189c:	dc15      	bgt.n	80118ca <__b2d+0x52>
 801189e:	f1c0 0c0b 	rsb	ip, r0, #11
 80118a2:	fa22 f30c 	lsr.w	r3, r2, ip
 80118a6:	45b8      	cmp	r8, r7
 80118a8:	ea43 0501 	orr.w	r5, r3, r1
 80118ac:	bf34      	ite	cc
 80118ae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80118b2:	2300      	movcs	r3, #0
 80118b4:	3015      	adds	r0, #21
 80118b6:	fa02 f000 	lsl.w	r0, r2, r0
 80118ba:	fa23 f30c 	lsr.w	r3, r3, ip
 80118be:	4303      	orrs	r3, r0
 80118c0:	461c      	mov	r4, r3
 80118c2:	ec45 4b10 	vmov	d0, r4, r5
 80118c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ca:	45b8      	cmp	r8, r7
 80118cc:	bf3a      	itte	cc
 80118ce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80118d2:	f1a6 0708 	subcc.w	r7, r6, #8
 80118d6:	2300      	movcs	r3, #0
 80118d8:	380b      	subs	r0, #11
 80118da:	d012      	beq.n	8011902 <__b2d+0x8a>
 80118dc:	f1c0 0120 	rsb	r1, r0, #32
 80118e0:	fa23 f401 	lsr.w	r4, r3, r1
 80118e4:	4082      	lsls	r2, r0
 80118e6:	4322      	orrs	r2, r4
 80118e8:	4547      	cmp	r7, r8
 80118ea:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80118ee:	bf8c      	ite	hi
 80118f0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80118f4:	2200      	movls	r2, #0
 80118f6:	4083      	lsls	r3, r0
 80118f8:	40ca      	lsrs	r2, r1
 80118fa:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80118fe:	4313      	orrs	r3, r2
 8011900:	e7de      	b.n	80118c0 <__b2d+0x48>
 8011902:	ea42 0501 	orr.w	r5, r2, r1
 8011906:	e7db      	b.n	80118c0 <__b2d+0x48>
 8011908:	3ff00000 	.word	0x3ff00000

0801190c <__d2b>:
 801190c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011910:	460f      	mov	r7, r1
 8011912:	2101      	movs	r1, #1
 8011914:	ec59 8b10 	vmov	r8, r9, d0
 8011918:	4616      	mov	r6, r2
 801191a:	f7ff fc13 	bl	8011144 <_Balloc>
 801191e:	4604      	mov	r4, r0
 8011920:	b930      	cbnz	r0, 8011930 <__d2b+0x24>
 8011922:	4602      	mov	r2, r0
 8011924:	4b23      	ldr	r3, [pc, #140]	@ (80119b4 <__d2b+0xa8>)
 8011926:	4824      	ldr	r0, [pc, #144]	@ (80119b8 <__d2b+0xac>)
 8011928:	f240 310f 	movw	r1, #783	@ 0x30f
 801192c:	f001 fd08 	bl	8013340 <__assert_func>
 8011930:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011934:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011938:	b10d      	cbz	r5, 801193e <__d2b+0x32>
 801193a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801193e:	9301      	str	r3, [sp, #4]
 8011940:	f1b8 0300 	subs.w	r3, r8, #0
 8011944:	d023      	beq.n	801198e <__d2b+0x82>
 8011946:	4668      	mov	r0, sp
 8011948:	9300      	str	r3, [sp, #0]
 801194a:	f7ff fd0c 	bl	8011366 <__lo0bits>
 801194e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011952:	b1d0      	cbz	r0, 801198a <__d2b+0x7e>
 8011954:	f1c0 0320 	rsb	r3, r0, #32
 8011958:	fa02 f303 	lsl.w	r3, r2, r3
 801195c:	430b      	orrs	r3, r1
 801195e:	40c2      	lsrs	r2, r0
 8011960:	6163      	str	r3, [r4, #20]
 8011962:	9201      	str	r2, [sp, #4]
 8011964:	9b01      	ldr	r3, [sp, #4]
 8011966:	61a3      	str	r3, [r4, #24]
 8011968:	2b00      	cmp	r3, #0
 801196a:	bf0c      	ite	eq
 801196c:	2201      	moveq	r2, #1
 801196e:	2202      	movne	r2, #2
 8011970:	6122      	str	r2, [r4, #16]
 8011972:	b1a5      	cbz	r5, 801199e <__d2b+0x92>
 8011974:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011978:	4405      	add	r5, r0
 801197a:	603d      	str	r5, [r7, #0]
 801197c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011980:	6030      	str	r0, [r6, #0]
 8011982:	4620      	mov	r0, r4
 8011984:	b003      	add	sp, #12
 8011986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801198a:	6161      	str	r1, [r4, #20]
 801198c:	e7ea      	b.n	8011964 <__d2b+0x58>
 801198e:	a801      	add	r0, sp, #4
 8011990:	f7ff fce9 	bl	8011366 <__lo0bits>
 8011994:	9b01      	ldr	r3, [sp, #4]
 8011996:	6163      	str	r3, [r4, #20]
 8011998:	3020      	adds	r0, #32
 801199a:	2201      	movs	r2, #1
 801199c:	e7e8      	b.n	8011970 <__d2b+0x64>
 801199e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80119a6:	6038      	str	r0, [r7, #0]
 80119a8:	6918      	ldr	r0, [r3, #16]
 80119aa:	f7ff fcbd 	bl	8011328 <__hi0bits>
 80119ae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119b2:	e7e5      	b.n	8011980 <__d2b+0x74>
 80119b4:	08016653 	.word	0x08016653
 80119b8:	08016664 	.word	0x08016664

080119bc <__ratio>:
 80119bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	b085      	sub	sp, #20
 80119c2:	e9cd 1000 	strd	r1, r0, [sp]
 80119c6:	a902      	add	r1, sp, #8
 80119c8:	f7ff ff56 	bl	8011878 <__b2d>
 80119cc:	9800      	ldr	r0, [sp, #0]
 80119ce:	a903      	add	r1, sp, #12
 80119d0:	ec55 4b10 	vmov	r4, r5, d0
 80119d4:	f7ff ff50 	bl	8011878 <__b2d>
 80119d8:	9b01      	ldr	r3, [sp, #4]
 80119da:	6919      	ldr	r1, [r3, #16]
 80119dc:	9b00      	ldr	r3, [sp, #0]
 80119de:	691b      	ldr	r3, [r3, #16]
 80119e0:	1ac9      	subs	r1, r1, r3
 80119e2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80119e6:	1a9b      	subs	r3, r3, r2
 80119e8:	ec5b ab10 	vmov	sl, fp, d0
 80119ec:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	bfce      	itee	gt
 80119f4:	462a      	movgt	r2, r5
 80119f6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80119fa:	465a      	movle	r2, fp
 80119fc:	462f      	mov	r7, r5
 80119fe:	46d9      	mov	r9, fp
 8011a00:	bfcc      	ite	gt
 8011a02:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011a06:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011a0a:	464b      	mov	r3, r9
 8011a0c:	4652      	mov	r2, sl
 8011a0e:	4620      	mov	r0, r4
 8011a10:	4639      	mov	r1, r7
 8011a12:	f7ee ff3b 	bl	800088c <__aeabi_ddiv>
 8011a16:	ec41 0b10 	vmov	d0, r0, r1
 8011a1a:	b005      	add	sp, #20
 8011a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a20 <__copybits>:
 8011a20:	3901      	subs	r1, #1
 8011a22:	b570      	push	{r4, r5, r6, lr}
 8011a24:	1149      	asrs	r1, r1, #5
 8011a26:	6914      	ldr	r4, [r2, #16]
 8011a28:	3101      	adds	r1, #1
 8011a2a:	f102 0314 	add.w	r3, r2, #20
 8011a2e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a32:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a36:	1f05      	subs	r5, r0, #4
 8011a38:	42a3      	cmp	r3, r4
 8011a3a:	d30c      	bcc.n	8011a56 <__copybits+0x36>
 8011a3c:	1aa3      	subs	r3, r4, r2
 8011a3e:	3b11      	subs	r3, #17
 8011a40:	f023 0303 	bic.w	r3, r3, #3
 8011a44:	3211      	adds	r2, #17
 8011a46:	42a2      	cmp	r2, r4
 8011a48:	bf88      	it	hi
 8011a4a:	2300      	movhi	r3, #0
 8011a4c:	4418      	add	r0, r3
 8011a4e:	2300      	movs	r3, #0
 8011a50:	4288      	cmp	r0, r1
 8011a52:	d305      	bcc.n	8011a60 <__copybits+0x40>
 8011a54:	bd70      	pop	{r4, r5, r6, pc}
 8011a56:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a5a:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a5e:	e7eb      	b.n	8011a38 <__copybits+0x18>
 8011a60:	f840 3b04 	str.w	r3, [r0], #4
 8011a64:	e7f4      	b.n	8011a50 <__copybits+0x30>

08011a66 <__any_on>:
 8011a66:	f100 0214 	add.w	r2, r0, #20
 8011a6a:	6900      	ldr	r0, [r0, #16]
 8011a6c:	114b      	asrs	r3, r1, #5
 8011a6e:	4298      	cmp	r0, r3
 8011a70:	b510      	push	{r4, lr}
 8011a72:	db11      	blt.n	8011a98 <__any_on+0x32>
 8011a74:	dd0a      	ble.n	8011a8c <__any_on+0x26>
 8011a76:	f011 011f 	ands.w	r1, r1, #31
 8011a7a:	d007      	beq.n	8011a8c <__any_on+0x26>
 8011a7c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a80:	fa24 f001 	lsr.w	r0, r4, r1
 8011a84:	fa00 f101 	lsl.w	r1, r0, r1
 8011a88:	428c      	cmp	r4, r1
 8011a8a:	d10b      	bne.n	8011aa4 <__any_on+0x3e>
 8011a8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d803      	bhi.n	8011a9c <__any_on+0x36>
 8011a94:	2000      	movs	r0, #0
 8011a96:	bd10      	pop	{r4, pc}
 8011a98:	4603      	mov	r3, r0
 8011a9a:	e7f7      	b.n	8011a8c <__any_on+0x26>
 8011a9c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011aa0:	2900      	cmp	r1, #0
 8011aa2:	d0f5      	beq.n	8011a90 <__any_on+0x2a>
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	e7f6      	b.n	8011a96 <__any_on+0x30>

08011aa8 <sulp>:
 8011aa8:	b570      	push	{r4, r5, r6, lr}
 8011aaa:	4604      	mov	r4, r0
 8011aac:	460d      	mov	r5, r1
 8011aae:	ec45 4b10 	vmov	d0, r4, r5
 8011ab2:	4616      	mov	r6, r2
 8011ab4:	f7ff feba 	bl	801182c <__ulp>
 8011ab8:	ec51 0b10 	vmov	r0, r1, d0
 8011abc:	b17e      	cbz	r6, 8011ade <sulp+0x36>
 8011abe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011ac2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	dd09      	ble.n	8011ade <sulp+0x36>
 8011aca:	051b      	lsls	r3, r3, #20
 8011acc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8011ad0:	2400      	movs	r4, #0
 8011ad2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8011ad6:	4622      	mov	r2, r4
 8011ad8:	462b      	mov	r3, r5
 8011ada:	f7ee fdad 	bl	8000638 <__aeabi_dmul>
 8011ade:	ec41 0b10 	vmov	d0, r0, r1
 8011ae2:	bd70      	pop	{r4, r5, r6, pc}
 8011ae4:	0000      	movs	r0, r0
	...

08011ae8 <_strtod_l>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	b09f      	sub	sp, #124	@ 0x7c
 8011aee:	460c      	mov	r4, r1
 8011af0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8011af2:	2200      	movs	r2, #0
 8011af4:	921a      	str	r2, [sp, #104]	@ 0x68
 8011af6:	9005      	str	r0, [sp, #20]
 8011af8:	f04f 0a00 	mov.w	sl, #0
 8011afc:	f04f 0b00 	mov.w	fp, #0
 8011b00:	460a      	mov	r2, r1
 8011b02:	9219      	str	r2, [sp, #100]	@ 0x64
 8011b04:	7811      	ldrb	r1, [r2, #0]
 8011b06:	292b      	cmp	r1, #43	@ 0x2b
 8011b08:	d04a      	beq.n	8011ba0 <_strtod_l+0xb8>
 8011b0a:	d838      	bhi.n	8011b7e <_strtod_l+0x96>
 8011b0c:	290d      	cmp	r1, #13
 8011b0e:	d832      	bhi.n	8011b76 <_strtod_l+0x8e>
 8011b10:	2908      	cmp	r1, #8
 8011b12:	d832      	bhi.n	8011b7a <_strtod_l+0x92>
 8011b14:	2900      	cmp	r1, #0
 8011b16:	d03b      	beq.n	8011b90 <_strtod_l+0xa8>
 8011b18:	2200      	movs	r2, #0
 8011b1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011b1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8011b1e:	782a      	ldrb	r2, [r5, #0]
 8011b20:	2a30      	cmp	r2, #48	@ 0x30
 8011b22:	f040 80b3 	bne.w	8011c8c <_strtod_l+0x1a4>
 8011b26:	786a      	ldrb	r2, [r5, #1]
 8011b28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011b2c:	2a58      	cmp	r2, #88	@ 0x58
 8011b2e:	d16e      	bne.n	8011c0e <_strtod_l+0x126>
 8011b30:	9302      	str	r3, [sp, #8]
 8011b32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b34:	9301      	str	r3, [sp, #4]
 8011b36:	ab1a      	add	r3, sp, #104	@ 0x68
 8011b38:	9300      	str	r3, [sp, #0]
 8011b3a:	4a8e      	ldr	r2, [pc, #568]	@ (8011d74 <_strtod_l+0x28c>)
 8011b3c:	9805      	ldr	r0, [sp, #20]
 8011b3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8011b40:	a919      	add	r1, sp, #100	@ 0x64
 8011b42:	f001 fc83 	bl	801344c <__gethex>
 8011b46:	f010 060f 	ands.w	r6, r0, #15
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	d005      	beq.n	8011b5a <_strtod_l+0x72>
 8011b4e:	2e06      	cmp	r6, #6
 8011b50:	d128      	bne.n	8011ba4 <_strtod_l+0xbc>
 8011b52:	3501      	adds	r5, #1
 8011b54:	2300      	movs	r3, #0
 8011b56:	9519      	str	r5, [sp, #100]	@ 0x64
 8011b58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f040 858e 	bne.w	801267e <_strtod_l+0xb96>
 8011b62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b64:	b1cb      	cbz	r3, 8011b9a <_strtod_l+0xb2>
 8011b66:	4652      	mov	r2, sl
 8011b68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8011b6c:	ec43 2b10 	vmov	d0, r2, r3
 8011b70:	b01f      	add	sp, #124	@ 0x7c
 8011b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b76:	2920      	cmp	r1, #32
 8011b78:	d1ce      	bne.n	8011b18 <_strtod_l+0x30>
 8011b7a:	3201      	adds	r2, #1
 8011b7c:	e7c1      	b.n	8011b02 <_strtod_l+0x1a>
 8011b7e:	292d      	cmp	r1, #45	@ 0x2d
 8011b80:	d1ca      	bne.n	8011b18 <_strtod_l+0x30>
 8011b82:	2101      	movs	r1, #1
 8011b84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8011b86:	1c51      	adds	r1, r2, #1
 8011b88:	9119      	str	r1, [sp, #100]	@ 0x64
 8011b8a:	7852      	ldrb	r2, [r2, #1]
 8011b8c:	2a00      	cmp	r2, #0
 8011b8e:	d1c5      	bne.n	8011b1c <_strtod_l+0x34>
 8011b90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011b92:	9419      	str	r4, [sp, #100]	@ 0x64
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	f040 8570 	bne.w	801267a <_strtod_l+0xb92>
 8011b9a:	4652      	mov	r2, sl
 8011b9c:	465b      	mov	r3, fp
 8011b9e:	e7e5      	b.n	8011b6c <_strtod_l+0x84>
 8011ba0:	2100      	movs	r1, #0
 8011ba2:	e7ef      	b.n	8011b84 <_strtod_l+0x9c>
 8011ba4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011ba6:	b13a      	cbz	r2, 8011bb8 <_strtod_l+0xd0>
 8011ba8:	2135      	movs	r1, #53	@ 0x35
 8011baa:	a81c      	add	r0, sp, #112	@ 0x70
 8011bac:	f7ff ff38 	bl	8011a20 <__copybits>
 8011bb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011bb2:	9805      	ldr	r0, [sp, #20]
 8011bb4:	f7ff fb06 	bl	80111c4 <_Bfree>
 8011bb8:	3e01      	subs	r6, #1
 8011bba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8011bbc:	2e04      	cmp	r6, #4
 8011bbe:	d806      	bhi.n	8011bce <_strtod_l+0xe6>
 8011bc0:	e8df f006 	tbb	[pc, r6]
 8011bc4:	201d0314 	.word	0x201d0314
 8011bc8:	14          	.byte	0x14
 8011bc9:	00          	.byte	0x00
 8011bca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8011bce:	05e1      	lsls	r1, r4, #23
 8011bd0:	bf48      	it	mi
 8011bd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8011bd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011bda:	0d1b      	lsrs	r3, r3, #20
 8011bdc:	051b      	lsls	r3, r3, #20
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1bb      	bne.n	8011b5a <_strtod_l+0x72>
 8011be2:	f7fe fbcf 	bl	8010384 <__errno>
 8011be6:	2322      	movs	r3, #34	@ 0x22
 8011be8:	6003      	str	r3, [r0, #0]
 8011bea:	e7b6      	b.n	8011b5a <_strtod_l+0x72>
 8011bec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8011bf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8011bf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8011bf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011bfc:	e7e7      	b.n	8011bce <_strtod_l+0xe6>
 8011bfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8011d7c <_strtod_l+0x294>
 8011c02:	e7e4      	b.n	8011bce <_strtod_l+0xe6>
 8011c04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011c08:	f04f 3aff 	mov.w	sl, #4294967295
 8011c0c:	e7df      	b.n	8011bce <_strtod_l+0xe6>
 8011c0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	9219      	str	r2, [sp, #100]	@ 0x64
 8011c14:	785b      	ldrb	r3, [r3, #1]
 8011c16:	2b30      	cmp	r3, #48	@ 0x30
 8011c18:	d0f9      	beq.n	8011c0e <_strtod_l+0x126>
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d09d      	beq.n	8011b5a <_strtod_l+0x72>
 8011c1e:	2301      	movs	r3, #1
 8011c20:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011c24:	930c      	str	r3, [sp, #48]	@ 0x30
 8011c26:	2300      	movs	r3, #0
 8011c28:	9308      	str	r3, [sp, #32]
 8011c2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011c2c:	461f      	mov	r7, r3
 8011c2e:	220a      	movs	r2, #10
 8011c30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011c32:	7805      	ldrb	r5, [r0, #0]
 8011c34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011c38:	b2d9      	uxtb	r1, r3
 8011c3a:	2909      	cmp	r1, #9
 8011c3c:	d928      	bls.n	8011c90 <_strtod_l+0x1a8>
 8011c3e:	494e      	ldr	r1, [pc, #312]	@ (8011d78 <_strtod_l+0x290>)
 8011c40:	2201      	movs	r2, #1
 8011c42:	f001 fb62 	bl	801330a <strncmp>
 8011c46:	2800      	cmp	r0, #0
 8011c48:	d032      	beq.n	8011cb0 <_strtod_l+0x1c8>
 8011c4a:	2000      	movs	r0, #0
 8011c4c:	462a      	mov	r2, r5
 8011c4e:	4681      	mov	r9, r0
 8011c50:	463d      	mov	r5, r7
 8011c52:	4603      	mov	r3, r0
 8011c54:	2a65      	cmp	r2, #101	@ 0x65
 8011c56:	d001      	beq.n	8011c5c <_strtod_l+0x174>
 8011c58:	2a45      	cmp	r2, #69	@ 0x45
 8011c5a:	d114      	bne.n	8011c86 <_strtod_l+0x19e>
 8011c5c:	b91d      	cbnz	r5, 8011c66 <_strtod_l+0x17e>
 8011c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011c60:	4302      	orrs	r2, r0
 8011c62:	d095      	beq.n	8011b90 <_strtod_l+0xa8>
 8011c64:	2500      	movs	r5, #0
 8011c66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011c68:	1c62      	adds	r2, r4, #1
 8011c6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8011c6c:	7862      	ldrb	r2, [r4, #1]
 8011c6e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011c70:	d077      	beq.n	8011d62 <_strtod_l+0x27a>
 8011c72:	2a2d      	cmp	r2, #45	@ 0x2d
 8011c74:	d07b      	beq.n	8011d6e <_strtod_l+0x286>
 8011c76:	f04f 0c00 	mov.w	ip, #0
 8011c7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8011c7e:	2909      	cmp	r1, #9
 8011c80:	f240 8082 	bls.w	8011d88 <_strtod_l+0x2a0>
 8011c84:	9419      	str	r4, [sp, #100]	@ 0x64
 8011c86:	f04f 0800 	mov.w	r8, #0
 8011c8a:	e0a2      	b.n	8011dd2 <_strtod_l+0x2ea>
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	e7c7      	b.n	8011c20 <_strtod_l+0x138>
 8011c90:	2f08      	cmp	r7, #8
 8011c92:	bfd5      	itete	le
 8011c94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011c96:	9908      	ldrgt	r1, [sp, #32]
 8011c98:	fb02 3301 	mlale	r3, r2, r1, r3
 8011c9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8011ca0:	f100 0001 	add.w	r0, r0, #1
 8011ca4:	bfd4      	ite	le
 8011ca6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8011ca8:	9308      	strgt	r3, [sp, #32]
 8011caa:	3701      	adds	r7, #1
 8011cac:	9019      	str	r0, [sp, #100]	@ 0x64
 8011cae:	e7bf      	b.n	8011c30 <_strtod_l+0x148>
 8011cb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011cb2:	1c5a      	adds	r2, r3, #1
 8011cb4:	9219      	str	r2, [sp, #100]	@ 0x64
 8011cb6:	785a      	ldrb	r2, [r3, #1]
 8011cb8:	b37f      	cbz	r7, 8011d1a <_strtod_l+0x232>
 8011cba:	4681      	mov	r9, r0
 8011cbc:	463d      	mov	r5, r7
 8011cbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8011cc2:	2b09      	cmp	r3, #9
 8011cc4:	d912      	bls.n	8011cec <_strtod_l+0x204>
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	e7c4      	b.n	8011c54 <_strtod_l+0x16c>
 8011cca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ccc:	1c5a      	adds	r2, r3, #1
 8011cce:	9219      	str	r2, [sp, #100]	@ 0x64
 8011cd0:	785a      	ldrb	r2, [r3, #1]
 8011cd2:	3001      	adds	r0, #1
 8011cd4:	2a30      	cmp	r2, #48	@ 0x30
 8011cd6:	d0f8      	beq.n	8011cca <_strtod_l+0x1e2>
 8011cd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8011cdc:	2b08      	cmp	r3, #8
 8011cde:	f200 84d3 	bhi.w	8012688 <_strtod_l+0xba0>
 8011ce2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011ce4:	930c      	str	r3, [sp, #48]	@ 0x30
 8011ce6:	4681      	mov	r9, r0
 8011ce8:	2000      	movs	r0, #0
 8011cea:	4605      	mov	r5, r0
 8011cec:	3a30      	subs	r2, #48	@ 0x30
 8011cee:	f100 0301 	add.w	r3, r0, #1
 8011cf2:	d02a      	beq.n	8011d4a <_strtod_l+0x262>
 8011cf4:	4499      	add	r9, r3
 8011cf6:	eb00 0c05 	add.w	ip, r0, r5
 8011cfa:	462b      	mov	r3, r5
 8011cfc:	210a      	movs	r1, #10
 8011cfe:	4563      	cmp	r3, ip
 8011d00:	d10d      	bne.n	8011d1e <_strtod_l+0x236>
 8011d02:	1c69      	adds	r1, r5, #1
 8011d04:	4401      	add	r1, r0
 8011d06:	4428      	add	r0, r5
 8011d08:	2808      	cmp	r0, #8
 8011d0a:	dc16      	bgt.n	8011d3a <_strtod_l+0x252>
 8011d0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011d0e:	230a      	movs	r3, #10
 8011d10:	fb03 2300 	mla	r3, r3, r0, r2
 8011d14:	930a      	str	r3, [sp, #40]	@ 0x28
 8011d16:	2300      	movs	r3, #0
 8011d18:	e018      	b.n	8011d4c <_strtod_l+0x264>
 8011d1a:	4638      	mov	r0, r7
 8011d1c:	e7da      	b.n	8011cd4 <_strtod_l+0x1ec>
 8011d1e:	2b08      	cmp	r3, #8
 8011d20:	f103 0301 	add.w	r3, r3, #1
 8011d24:	dc03      	bgt.n	8011d2e <_strtod_l+0x246>
 8011d26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011d28:	434e      	muls	r6, r1
 8011d2a:	960a      	str	r6, [sp, #40]	@ 0x28
 8011d2c:	e7e7      	b.n	8011cfe <_strtod_l+0x216>
 8011d2e:	2b10      	cmp	r3, #16
 8011d30:	bfde      	ittt	le
 8011d32:	9e08      	ldrle	r6, [sp, #32]
 8011d34:	434e      	mulle	r6, r1
 8011d36:	9608      	strle	r6, [sp, #32]
 8011d38:	e7e1      	b.n	8011cfe <_strtod_l+0x216>
 8011d3a:	280f      	cmp	r0, #15
 8011d3c:	dceb      	bgt.n	8011d16 <_strtod_l+0x22e>
 8011d3e:	9808      	ldr	r0, [sp, #32]
 8011d40:	230a      	movs	r3, #10
 8011d42:	fb03 2300 	mla	r3, r3, r0, r2
 8011d46:	9308      	str	r3, [sp, #32]
 8011d48:	e7e5      	b.n	8011d16 <_strtod_l+0x22e>
 8011d4a:	4629      	mov	r1, r5
 8011d4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011d4e:	1c50      	adds	r0, r2, #1
 8011d50:	9019      	str	r0, [sp, #100]	@ 0x64
 8011d52:	7852      	ldrb	r2, [r2, #1]
 8011d54:	4618      	mov	r0, r3
 8011d56:	460d      	mov	r5, r1
 8011d58:	e7b1      	b.n	8011cbe <_strtod_l+0x1d6>
 8011d5a:	f04f 0900 	mov.w	r9, #0
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e77d      	b.n	8011c5e <_strtod_l+0x176>
 8011d62:	f04f 0c00 	mov.w	ip, #0
 8011d66:	1ca2      	adds	r2, r4, #2
 8011d68:	9219      	str	r2, [sp, #100]	@ 0x64
 8011d6a:	78a2      	ldrb	r2, [r4, #2]
 8011d6c:	e785      	b.n	8011c7a <_strtod_l+0x192>
 8011d6e:	f04f 0c01 	mov.w	ip, #1
 8011d72:	e7f8      	b.n	8011d66 <_strtod_l+0x27e>
 8011d74:	080167d8 	.word	0x080167d8
 8011d78:	080167c0 	.word	0x080167c0
 8011d7c:	7ff00000 	.word	0x7ff00000
 8011d80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011d82:	1c51      	adds	r1, r2, #1
 8011d84:	9119      	str	r1, [sp, #100]	@ 0x64
 8011d86:	7852      	ldrb	r2, [r2, #1]
 8011d88:	2a30      	cmp	r2, #48	@ 0x30
 8011d8a:	d0f9      	beq.n	8011d80 <_strtod_l+0x298>
 8011d8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011d90:	2908      	cmp	r1, #8
 8011d92:	f63f af78 	bhi.w	8011c86 <_strtod_l+0x19e>
 8011d96:	3a30      	subs	r2, #48	@ 0x30
 8011d98:	920e      	str	r2, [sp, #56]	@ 0x38
 8011d9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011d9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8011d9e:	f04f 080a 	mov.w	r8, #10
 8011da2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011da4:	1c56      	adds	r6, r2, #1
 8011da6:	9619      	str	r6, [sp, #100]	@ 0x64
 8011da8:	7852      	ldrb	r2, [r2, #1]
 8011daa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8011dae:	f1be 0f09 	cmp.w	lr, #9
 8011db2:	d939      	bls.n	8011e28 <_strtod_l+0x340>
 8011db4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011db6:	1a76      	subs	r6, r6, r1
 8011db8:	2e08      	cmp	r6, #8
 8011dba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8011dbe:	dc03      	bgt.n	8011dc8 <_strtod_l+0x2e0>
 8011dc0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011dc2:	4588      	cmp	r8, r1
 8011dc4:	bfa8      	it	ge
 8011dc6:	4688      	movge	r8, r1
 8011dc8:	f1bc 0f00 	cmp.w	ip, #0
 8011dcc:	d001      	beq.n	8011dd2 <_strtod_l+0x2ea>
 8011dce:	f1c8 0800 	rsb	r8, r8, #0
 8011dd2:	2d00      	cmp	r5, #0
 8011dd4:	d14e      	bne.n	8011e74 <_strtod_l+0x38c>
 8011dd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011dd8:	4308      	orrs	r0, r1
 8011dda:	f47f aebe 	bne.w	8011b5a <_strtod_l+0x72>
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	f47f aed6 	bne.w	8011b90 <_strtod_l+0xa8>
 8011de4:	2a69      	cmp	r2, #105	@ 0x69
 8011de6:	d028      	beq.n	8011e3a <_strtod_l+0x352>
 8011de8:	dc25      	bgt.n	8011e36 <_strtod_l+0x34e>
 8011dea:	2a49      	cmp	r2, #73	@ 0x49
 8011dec:	d025      	beq.n	8011e3a <_strtod_l+0x352>
 8011dee:	2a4e      	cmp	r2, #78	@ 0x4e
 8011df0:	f47f aece 	bne.w	8011b90 <_strtod_l+0xa8>
 8011df4:	499b      	ldr	r1, [pc, #620]	@ (8012064 <_strtod_l+0x57c>)
 8011df6:	a819      	add	r0, sp, #100	@ 0x64
 8011df8:	f001 fd4a 	bl	8013890 <__match>
 8011dfc:	2800      	cmp	r0, #0
 8011dfe:	f43f aec7 	beq.w	8011b90 <_strtod_l+0xa8>
 8011e02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e04:	781b      	ldrb	r3, [r3, #0]
 8011e06:	2b28      	cmp	r3, #40	@ 0x28
 8011e08:	d12e      	bne.n	8011e68 <_strtod_l+0x380>
 8011e0a:	4997      	ldr	r1, [pc, #604]	@ (8012068 <_strtod_l+0x580>)
 8011e0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8011e0e:	a819      	add	r0, sp, #100	@ 0x64
 8011e10:	f001 fd52 	bl	80138b8 <__hexnan>
 8011e14:	2805      	cmp	r0, #5
 8011e16:	d127      	bne.n	8011e68 <_strtod_l+0x380>
 8011e18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011e1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8011e1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011e22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011e26:	e698      	b.n	8011b5a <_strtod_l+0x72>
 8011e28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011e2a:	fb08 2101 	mla	r1, r8, r1, r2
 8011e2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011e32:	920e      	str	r2, [sp, #56]	@ 0x38
 8011e34:	e7b5      	b.n	8011da2 <_strtod_l+0x2ba>
 8011e36:	2a6e      	cmp	r2, #110	@ 0x6e
 8011e38:	e7da      	b.n	8011df0 <_strtod_l+0x308>
 8011e3a:	498c      	ldr	r1, [pc, #560]	@ (801206c <_strtod_l+0x584>)
 8011e3c:	a819      	add	r0, sp, #100	@ 0x64
 8011e3e:	f001 fd27 	bl	8013890 <__match>
 8011e42:	2800      	cmp	r0, #0
 8011e44:	f43f aea4 	beq.w	8011b90 <_strtod_l+0xa8>
 8011e48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e4a:	4989      	ldr	r1, [pc, #548]	@ (8012070 <_strtod_l+0x588>)
 8011e4c:	3b01      	subs	r3, #1
 8011e4e:	a819      	add	r0, sp, #100	@ 0x64
 8011e50:	9319      	str	r3, [sp, #100]	@ 0x64
 8011e52:	f001 fd1d 	bl	8013890 <__match>
 8011e56:	b910      	cbnz	r0, 8011e5e <_strtod_l+0x376>
 8011e58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011e5a:	3301      	adds	r3, #1
 8011e5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8011e5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8012080 <_strtod_l+0x598>
 8011e62:	f04f 0a00 	mov.w	sl, #0
 8011e66:	e678      	b.n	8011b5a <_strtod_l+0x72>
 8011e68:	4882      	ldr	r0, [pc, #520]	@ (8012074 <_strtod_l+0x58c>)
 8011e6a:	f001 fa61 	bl	8013330 <nan>
 8011e6e:	ec5b ab10 	vmov	sl, fp, d0
 8011e72:	e672      	b.n	8011b5a <_strtod_l+0x72>
 8011e74:	eba8 0309 	sub.w	r3, r8, r9
 8011e78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e7c:	2f00      	cmp	r7, #0
 8011e7e:	bf08      	it	eq
 8011e80:	462f      	moveq	r7, r5
 8011e82:	2d10      	cmp	r5, #16
 8011e84:	462c      	mov	r4, r5
 8011e86:	bfa8      	it	ge
 8011e88:	2410      	movge	r4, #16
 8011e8a:	f7ee fb5b 	bl	8000544 <__aeabi_ui2d>
 8011e8e:	2d09      	cmp	r5, #9
 8011e90:	4682      	mov	sl, r0
 8011e92:	468b      	mov	fp, r1
 8011e94:	dc13      	bgt.n	8011ebe <_strtod_l+0x3d6>
 8011e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	f43f ae5e 	beq.w	8011b5a <_strtod_l+0x72>
 8011e9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ea0:	dd78      	ble.n	8011f94 <_strtod_l+0x4ac>
 8011ea2:	2b16      	cmp	r3, #22
 8011ea4:	dc5f      	bgt.n	8011f66 <_strtod_l+0x47e>
 8011ea6:	4974      	ldr	r1, [pc, #464]	@ (8012078 <_strtod_l+0x590>)
 8011ea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011eb0:	4652      	mov	r2, sl
 8011eb2:	465b      	mov	r3, fp
 8011eb4:	f7ee fbc0 	bl	8000638 <__aeabi_dmul>
 8011eb8:	4682      	mov	sl, r0
 8011eba:	468b      	mov	fp, r1
 8011ebc:	e64d      	b.n	8011b5a <_strtod_l+0x72>
 8011ebe:	4b6e      	ldr	r3, [pc, #440]	@ (8012078 <_strtod_l+0x590>)
 8011ec0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011ec4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8011ec8:	f7ee fbb6 	bl	8000638 <__aeabi_dmul>
 8011ecc:	4682      	mov	sl, r0
 8011ece:	9808      	ldr	r0, [sp, #32]
 8011ed0:	468b      	mov	fp, r1
 8011ed2:	f7ee fb37 	bl	8000544 <__aeabi_ui2d>
 8011ed6:	4602      	mov	r2, r0
 8011ed8:	460b      	mov	r3, r1
 8011eda:	4650      	mov	r0, sl
 8011edc:	4659      	mov	r1, fp
 8011ede:	f7ee f9f5 	bl	80002cc <__adddf3>
 8011ee2:	2d0f      	cmp	r5, #15
 8011ee4:	4682      	mov	sl, r0
 8011ee6:	468b      	mov	fp, r1
 8011ee8:	ddd5      	ble.n	8011e96 <_strtod_l+0x3ae>
 8011eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011eec:	1b2c      	subs	r4, r5, r4
 8011eee:	441c      	add	r4, r3
 8011ef0:	2c00      	cmp	r4, #0
 8011ef2:	f340 8096 	ble.w	8012022 <_strtod_l+0x53a>
 8011ef6:	f014 030f 	ands.w	r3, r4, #15
 8011efa:	d00a      	beq.n	8011f12 <_strtod_l+0x42a>
 8011efc:	495e      	ldr	r1, [pc, #376]	@ (8012078 <_strtod_l+0x590>)
 8011efe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011f02:	4652      	mov	r2, sl
 8011f04:	465b      	mov	r3, fp
 8011f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f0a:	f7ee fb95 	bl	8000638 <__aeabi_dmul>
 8011f0e:	4682      	mov	sl, r0
 8011f10:	468b      	mov	fp, r1
 8011f12:	f034 040f 	bics.w	r4, r4, #15
 8011f16:	d073      	beq.n	8012000 <_strtod_l+0x518>
 8011f18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8011f1c:	dd48      	ble.n	8011fb0 <_strtod_l+0x4c8>
 8011f1e:	2400      	movs	r4, #0
 8011f20:	46a0      	mov	r8, r4
 8011f22:	940a      	str	r4, [sp, #40]	@ 0x28
 8011f24:	46a1      	mov	r9, r4
 8011f26:	9a05      	ldr	r2, [sp, #20]
 8011f28:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8012080 <_strtod_l+0x598>
 8011f2c:	2322      	movs	r3, #34	@ 0x22
 8011f2e:	6013      	str	r3, [r2, #0]
 8011f30:	f04f 0a00 	mov.w	sl, #0
 8011f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	f43f ae0f 	beq.w	8011b5a <_strtod_l+0x72>
 8011f3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011f3e:	9805      	ldr	r0, [sp, #20]
 8011f40:	f7ff f940 	bl	80111c4 <_Bfree>
 8011f44:	9805      	ldr	r0, [sp, #20]
 8011f46:	4649      	mov	r1, r9
 8011f48:	f7ff f93c 	bl	80111c4 <_Bfree>
 8011f4c:	9805      	ldr	r0, [sp, #20]
 8011f4e:	4641      	mov	r1, r8
 8011f50:	f7ff f938 	bl	80111c4 <_Bfree>
 8011f54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011f56:	9805      	ldr	r0, [sp, #20]
 8011f58:	f7ff f934 	bl	80111c4 <_Bfree>
 8011f5c:	9805      	ldr	r0, [sp, #20]
 8011f5e:	4621      	mov	r1, r4
 8011f60:	f7ff f930 	bl	80111c4 <_Bfree>
 8011f64:	e5f9      	b.n	8011b5a <_strtod_l+0x72>
 8011f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8011f6c:	4293      	cmp	r3, r2
 8011f6e:	dbbc      	blt.n	8011eea <_strtod_l+0x402>
 8011f70:	4c41      	ldr	r4, [pc, #260]	@ (8012078 <_strtod_l+0x590>)
 8011f72:	f1c5 050f 	rsb	r5, r5, #15
 8011f76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011f7a:	4652      	mov	r2, sl
 8011f7c:	465b      	mov	r3, fp
 8011f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011f82:	f7ee fb59 	bl	8000638 <__aeabi_dmul>
 8011f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011f88:	1b5d      	subs	r5, r3, r5
 8011f8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011f8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011f92:	e78f      	b.n	8011eb4 <_strtod_l+0x3cc>
 8011f94:	3316      	adds	r3, #22
 8011f96:	dba8      	blt.n	8011eea <_strtod_l+0x402>
 8011f98:	4b37      	ldr	r3, [pc, #220]	@ (8012078 <_strtod_l+0x590>)
 8011f9a:	eba9 0808 	sub.w	r8, r9, r8
 8011f9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8011fa2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8011fa6:	4650      	mov	r0, sl
 8011fa8:	4659      	mov	r1, fp
 8011faa:	f7ee fc6f 	bl	800088c <__aeabi_ddiv>
 8011fae:	e783      	b.n	8011eb8 <_strtod_l+0x3d0>
 8011fb0:	4b32      	ldr	r3, [pc, #200]	@ (801207c <_strtod_l+0x594>)
 8011fb2:	9308      	str	r3, [sp, #32]
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	1124      	asrs	r4, r4, #4
 8011fb8:	4650      	mov	r0, sl
 8011fba:	4659      	mov	r1, fp
 8011fbc:	461e      	mov	r6, r3
 8011fbe:	2c01      	cmp	r4, #1
 8011fc0:	dc21      	bgt.n	8012006 <_strtod_l+0x51e>
 8011fc2:	b10b      	cbz	r3, 8011fc8 <_strtod_l+0x4e0>
 8011fc4:	4682      	mov	sl, r0
 8011fc6:	468b      	mov	fp, r1
 8011fc8:	492c      	ldr	r1, [pc, #176]	@ (801207c <_strtod_l+0x594>)
 8011fca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8011fce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8011fd2:	4652      	mov	r2, sl
 8011fd4:	465b      	mov	r3, fp
 8011fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011fda:	f7ee fb2d 	bl	8000638 <__aeabi_dmul>
 8011fde:	4b28      	ldr	r3, [pc, #160]	@ (8012080 <_strtod_l+0x598>)
 8011fe0:	460a      	mov	r2, r1
 8011fe2:	400b      	ands	r3, r1
 8011fe4:	4927      	ldr	r1, [pc, #156]	@ (8012084 <_strtod_l+0x59c>)
 8011fe6:	428b      	cmp	r3, r1
 8011fe8:	4682      	mov	sl, r0
 8011fea:	d898      	bhi.n	8011f1e <_strtod_l+0x436>
 8011fec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8011ff0:	428b      	cmp	r3, r1
 8011ff2:	bf86      	itte	hi
 8011ff4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8012088 <_strtod_l+0x5a0>
 8011ff8:	f04f 3aff 	movhi.w	sl, #4294967295
 8011ffc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8012000:	2300      	movs	r3, #0
 8012002:	9308      	str	r3, [sp, #32]
 8012004:	e07a      	b.n	80120fc <_strtod_l+0x614>
 8012006:	07e2      	lsls	r2, r4, #31
 8012008:	d505      	bpl.n	8012016 <_strtod_l+0x52e>
 801200a:	9b08      	ldr	r3, [sp, #32]
 801200c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012010:	f7ee fb12 	bl	8000638 <__aeabi_dmul>
 8012014:	2301      	movs	r3, #1
 8012016:	9a08      	ldr	r2, [sp, #32]
 8012018:	3208      	adds	r2, #8
 801201a:	3601      	adds	r6, #1
 801201c:	1064      	asrs	r4, r4, #1
 801201e:	9208      	str	r2, [sp, #32]
 8012020:	e7cd      	b.n	8011fbe <_strtod_l+0x4d6>
 8012022:	d0ed      	beq.n	8012000 <_strtod_l+0x518>
 8012024:	4264      	negs	r4, r4
 8012026:	f014 020f 	ands.w	r2, r4, #15
 801202a:	d00a      	beq.n	8012042 <_strtod_l+0x55a>
 801202c:	4b12      	ldr	r3, [pc, #72]	@ (8012078 <_strtod_l+0x590>)
 801202e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012032:	4650      	mov	r0, sl
 8012034:	4659      	mov	r1, fp
 8012036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203a:	f7ee fc27 	bl	800088c <__aeabi_ddiv>
 801203e:	4682      	mov	sl, r0
 8012040:	468b      	mov	fp, r1
 8012042:	1124      	asrs	r4, r4, #4
 8012044:	d0dc      	beq.n	8012000 <_strtod_l+0x518>
 8012046:	2c1f      	cmp	r4, #31
 8012048:	dd20      	ble.n	801208c <_strtod_l+0x5a4>
 801204a:	2400      	movs	r4, #0
 801204c:	46a0      	mov	r8, r4
 801204e:	940a      	str	r4, [sp, #40]	@ 0x28
 8012050:	46a1      	mov	r9, r4
 8012052:	9a05      	ldr	r2, [sp, #20]
 8012054:	2322      	movs	r3, #34	@ 0x22
 8012056:	f04f 0a00 	mov.w	sl, #0
 801205a:	f04f 0b00 	mov.w	fp, #0
 801205e:	6013      	str	r3, [r2, #0]
 8012060:	e768      	b.n	8011f34 <_strtod_l+0x44c>
 8012062:	bf00      	nop
 8012064:	080165ad 	.word	0x080165ad
 8012068:	080167c4 	.word	0x080167c4
 801206c:	080165a5 	.word	0x080165a5
 8012070:	080165da 	.word	0x080165da
 8012074:	08016988 	.word	0x08016988
 8012078:	080166f8 	.word	0x080166f8
 801207c:	080166d0 	.word	0x080166d0
 8012080:	7ff00000 	.word	0x7ff00000
 8012084:	7ca00000 	.word	0x7ca00000
 8012088:	7fefffff 	.word	0x7fefffff
 801208c:	f014 0310 	ands.w	r3, r4, #16
 8012090:	bf18      	it	ne
 8012092:	236a      	movne	r3, #106	@ 0x6a
 8012094:	4ea9      	ldr	r6, [pc, #676]	@ (801233c <_strtod_l+0x854>)
 8012096:	9308      	str	r3, [sp, #32]
 8012098:	4650      	mov	r0, sl
 801209a:	4659      	mov	r1, fp
 801209c:	2300      	movs	r3, #0
 801209e:	07e2      	lsls	r2, r4, #31
 80120a0:	d504      	bpl.n	80120ac <_strtod_l+0x5c4>
 80120a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80120a6:	f7ee fac7 	bl	8000638 <__aeabi_dmul>
 80120aa:	2301      	movs	r3, #1
 80120ac:	1064      	asrs	r4, r4, #1
 80120ae:	f106 0608 	add.w	r6, r6, #8
 80120b2:	d1f4      	bne.n	801209e <_strtod_l+0x5b6>
 80120b4:	b10b      	cbz	r3, 80120ba <_strtod_l+0x5d2>
 80120b6:	4682      	mov	sl, r0
 80120b8:	468b      	mov	fp, r1
 80120ba:	9b08      	ldr	r3, [sp, #32]
 80120bc:	b1b3      	cbz	r3, 80120ec <_strtod_l+0x604>
 80120be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80120c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	4659      	mov	r1, fp
 80120ca:	dd0f      	ble.n	80120ec <_strtod_l+0x604>
 80120cc:	2b1f      	cmp	r3, #31
 80120ce:	dd55      	ble.n	801217c <_strtod_l+0x694>
 80120d0:	2b34      	cmp	r3, #52	@ 0x34
 80120d2:	bfde      	ittt	le
 80120d4:	f04f 33ff 	movle.w	r3, #4294967295
 80120d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80120dc:	4093      	lslle	r3, r2
 80120de:	f04f 0a00 	mov.w	sl, #0
 80120e2:	bfcc      	ite	gt
 80120e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80120e8:	ea03 0b01 	andle.w	fp, r3, r1
 80120ec:	2200      	movs	r2, #0
 80120ee:	2300      	movs	r3, #0
 80120f0:	4650      	mov	r0, sl
 80120f2:	4659      	mov	r1, fp
 80120f4:	f7ee fd08 	bl	8000b08 <__aeabi_dcmpeq>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	d1a6      	bne.n	801204a <_strtod_l+0x562>
 80120fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120fe:	9300      	str	r3, [sp, #0]
 8012100:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012102:	9805      	ldr	r0, [sp, #20]
 8012104:	462b      	mov	r3, r5
 8012106:	463a      	mov	r2, r7
 8012108:	f7ff f8c4 	bl	8011294 <__s2b>
 801210c:	900a      	str	r0, [sp, #40]	@ 0x28
 801210e:	2800      	cmp	r0, #0
 8012110:	f43f af05 	beq.w	8011f1e <_strtod_l+0x436>
 8012114:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012116:	2a00      	cmp	r2, #0
 8012118:	eba9 0308 	sub.w	r3, r9, r8
 801211c:	bfa8      	it	ge
 801211e:	2300      	movge	r3, #0
 8012120:	9312      	str	r3, [sp, #72]	@ 0x48
 8012122:	2400      	movs	r4, #0
 8012124:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012128:	9316      	str	r3, [sp, #88]	@ 0x58
 801212a:	46a0      	mov	r8, r4
 801212c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801212e:	9805      	ldr	r0, [sp, #20]
 8012130:	6859      	ldr	r1, [r3, #4]
 8012132:	f7ff f807 	bl	8011144 <_Balloc>
 8012136:	4681      	mov	r9, r0
 8012138:	2800      	cmp	r0, #0
 801213a:	f43f aef4 	beq.w	8011f26 <_strtod_l+0x43e>
 801213e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012140:	691a      	ldr	r2, [r3, #16]
 8012142:	3202      	adds	r2, #2
 8012144:	f103 010c 	add.w	r1, r3, #12
 8012148:	0092      	lsls	r2, r2, #2
 801214a:	300c      	adds	r0, #12
 801214c:	f7fe f947 	bl	80103de <memcpy>
 8012150:	ec4b ab10 	vmov	d0, sl, fp
 8012154:	9805      	ldr	r0, [sp, #20]
 8012156:	aa1c      	add	r2, sp, #112	@ 0x70
 8012158:	a91b      	add	r1, sp, #108	@ 0x6c
 801215a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801215e:	f7ff fbd5 	bl	801190c <__d2b>
 8012162:	901a      	str	r0, [sp, #104]	@ 0x68
 8012164:	2800      	cmp	r0, #0
 8012166:	f43f aede 	beq.w	8011f26 <_strtod_l+0x43e>
 801216a:	9805      	ldr	r0, [sp, #20]
 801216c:	2101      	movs	r1, #1
 801216e:	f7ff f927 	bl	80113c0 <__i2b>
 8012172:	4680      	mov	r8, r0
 8012174:	b948      	cbnz	r0, 801218a <_strtod_l+0x6a2>
 8012176:	f04f 0800 	mov.w	r8, #0
 801217a:	e6d4      	b.n	8011f26 <_strtod_l+0x43e>
 801217c:	f04f 32ff 	mov.w	r2, #4294967295
 8012180:	fa02 f303 	lsl.w	r3, r2, r3
 8012184:	ea03 0a0a 	and.w	sl, r3, sl
 8012188:	e7b0      	b.n	80120ec <_strtod_l+0x604>
 801218a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801218c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801218e:	2d00      	cmp	r5, #0
 8012190:	bfab      	itete	ge
 8012192:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8012194:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8012196:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8012198:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801219a:	bfac      	ite	ge
 801219c:	18ef      	addge	r7, r5, r3
 801219e:	1b5e      	sublt	r6, r3, r5
 80121a0:	9b08      	ldr	r3, [sp, #32]
 80121a2:	1aed      	subs	r5, r5, r3
 80121a4:	4415      	add	r5, r2
 80121a6:	4b66      	ldr	r3, [pc, #408]	@ (8012340 <_strtod_l+0x858>)
 80121a8:	3d01      	subs	r5, #1
 80121aa:	429d      	cmp	r5, r3
 80121ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80121b0:	da50      	bge.n	8012254 <_strtod_l+0x76c>
 80121b2:	1b5b      	subs	r3, r3, r5
 80121b4:	2b1f      	cmp	r3, #31
 80121b6:	eba2 0203 	sub.w	r2, r2, r3
 80121ba:	f04f 0101 	mov.w	r1, #1
 80121be:	dc3d      	bgt.n	801223c <_strtod_l+0x754>
 80121c0:	fa01 f303 	lsl.w	r3, r1, r3
 80121c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80121c6:	2300      	movs	r3, #0
 80121c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80121ca:	18bd      	adds	r5, r7, r2
 80121cc:	9b08      	ldr	r3, [sp, #32]
 80121ce:	42af      	cmp	r7, r5
 80121d0:	4416      	add	r6, r2
 80121d2:	441e      	add	r6, r3
 80121d4:	463b      	mov	r3, r7
 80121d6:	bfa8      	it	ge
 80121d8:	462b      	movge	r3, r5
 80121da:	42b3      	cmp	r3, r6
 80121dc:	bfa8      	it	ge
 80121de:	4633      	movge	r3, r6
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	bfc2      	ittt	gt
 80121e4:	1aed      	subgt	r5, r5, r3
 80121e6:	1af6      	subgt	r6, r6, r3
 80121e8:	1aff      	subgt	r7, r7, r3
 80121ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	dd16      	ble.n	801221e <_strtod_l+0x736>
 80121f0:	4641      	mov	r1, r8
 80121f2:	9805      	ldr	r0, [sp, #20]
 80121f4:	461a      	mov	r2, r3
 80121f6:	f7ff f9a3 	bl	8011540 <__pow5mult>
 80121fa:	4680      	mov	r8, r0
 80121fc:	2800      	cmp	r0, #0
 80121fe:	d0ba      	beq.n	8012176 <_strtod_l+0x68e>
 8012200:	4601      	mov	r1, r0
 8012202:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8012204:	9805      	ldr	r0, [sp, #20]
 8012206:	f7ff f8f1 	bl	80113ec <__multiply>
 801220a:	900e      	str	r0, [sp, #56]	@ 0x38
 801220c:	2800      	cmp	r0, #0
 801220e:	f43f ae8a 	beq.w	8011f26 <_strtod_l+0x43e>
 8012212:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012214:	9805      	ldr	r0, [sp, #20]
 8012216:	f7fe ffd5 	bl	80111c4 <_Bfree>
 801221a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801221c:	931a      	str	r3, [sp, #104]	@ 0x68
 801221e:	2d00      	cmp	r5, #0
 8012220:	dc1d      	bgt.n	801225e <_strtod_l+0x776>
 8012222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012224:	2b00      	cmp	r3, #0
 8012226:	dd23      	ble.n	8012270 <_strtod_l+0x788>
 8012228:	4649      	mov	r1, r9
 801222a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801222c:	9805      	ldr	r0, [sp, #20]
 801222e:	f7ff f987 	bl	8011540 <__pow5mult>
 8012232:	4681      	mov	r9, r0
 8012234:	b9e0      	cbnz	r0, 8012270 <_strtod_l+0x788>
 8012236:	f04f 0900 	mov.w	r9, #0
 801223a:	e674      	b.n	8011f26 <_strtod_l+0x43e>
 801223c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8012240:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8012244:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8012248:	35e2      	adds	r5, #226	@ 0xe2
 801224a:	fa01 f305 	lsl.w	r3, r1, r5
 801224e:	9310      	str	r3, [sp, #64]	@ 0x40
 8012250:	9113      	str	r1, [sp, #76]	@ 0x4c
 8012252:	e7ba      	b.n	80121ca <_strtod_l+0x6e2>
 8012254:	2300      	movs	r3, #0
 8012256:	9310      	str	r3, [sp, #64]	@ 0x40
 8012258:	2301      	movs	r3, #1
 801225a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801225c:	e7b5      	b.n	80121ca <_strtod_l+0x6e2>
 801225e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8012260:	9805      	ldr	r0, [sp, #20]
 8012262:	462a      	mov	r2, r5
 8012264:	f7ff f9c6 	bl	80115f4 <__lshift>
 8012268:	901a      	str	r0, [sp, #104]	@ 0x68
 801226a:	2800      	cmp	r0, #0
 801226c:	d1d9      	bne.n	8012222 <_strtod_l+0x73a>
 801226e:	e65a      	b.n	8011f26 <_strtod_l+0x43e>
 8012270:	2e00      	cmp	r6, #0
 8012272:	dd07      	ble.n	8012284 <_strtod_l+0x79c>
 8012274:	4649      	mov	r1, r9
 8012276:	9805      	ldr	r0, [sp, #20]
 8012278:	4632      	mov	r2, r6
 801227a:	f7ff f9bb 	bl	80115f4 <__lshift>
 801227e:	4681      	mov	r9, r0
 8012280:	2800      	cmp	r0, #0
 8012282:	d0d8      	beq.n	8012236 <_strtod_l+0x74e>
 8012284:	2f00      	cmp	r7, #0
 8012286:	dd08      	ble.n	801229a <_strtod_l+0x7b2>
 8012288:	4641      	mov	r1, r8
 801228a:	9805      	ldr	r0, [sp, #20]
 801228c:	463a      	mov	r2, r7
 801228e:	f7ff f9b1 	bl	80115f4 <__lshift>
 8012292:	4680      	mov	r8, r0
 8012294:	2800      	cmp	r0, #0
 8012296:	f43f ae46 	beq.w	8011f26 <_strtod_l+0x43e>
 801229a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801229c:	9805      	ldr	r0, [sp, #20]
 801229e:	464a      	mov	r2, r9
 80122a0:	f7ff fa30 	bl	8011704 <__mdiff>
 80122a4:	4604      	mov	r4, r0
 80122a6:	2800      	cmp	r0, #0
 80122a8:	f43f ae3d 	beq.w	8011f26 <_strtod_l+0x43e>
 80122ac:	68c3      	ldr	r3, [r0, #12]
 80122ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80122b0:	2300      	movs	r3, #0
 80122b2:	60c3      	str	r3, [r0, #12]
 80122b4:	4641      	mov	r1, r8
 80122b6:	f7ff fa09 	bl	80116cc <__mcmp>
 80122ba:	2800      	cmp	r0, #0
 80122bc:	da46      	bge.n	801234c <_strtod_l+0x864>
 80122be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80122c0:	ea53 030a 	orrs.w	r3, r3, sl
 80122c4:	d16c      	bne.n	80123a0 <_strtod_l+0x8b8>
 80122c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d168      	bne.n	80123a0 <_strtod_l+0x8b8>
 80122ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80122d2:	0d1b      	lsrs	r3, r3, #20
 80122d4:	051b      	lsls	r3, r3, #20
 80122d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80122da:	d961      	bls.n	80123a0 <_strtod_l+0x8b8>
 80122dc:	6963      	ldr	r3, [r4, #20]
 80122de:	b913      	cbnz	r3, 80122e6 <_strtod_l+0x7fe>
 80122e0:	6923      	ldr	r3, [r4, #16]
 80122e2:	2b01      	cmp	r3, #1
 80122e4:	dd5c      	ble.n	80123a0 <_strtod_l+0x8b8>
 80122e6:	4621      	mov	r1, r4
 80122e8:	2201      	movs	r2, #1
 80122ea:	9805      	ldr	r0, [sp, #20]
 80122ec:	f7ff f982 	bl	80115f4 <__lshift>
 80122f0:	4641      	mov	r1, r8
 80122f2:	4604      	mov	r4, r0
 80122f4:	f7ff f9ea 	bl	80116cc <__mcmp>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	dd51      	ble.n	80123a0 <_strtod_l+0x8b8>
 80122fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012300:	9a08      	ldr	r2, [sp, #32]
 8012302:	0d1b      	lsrs	r3, r3, #20
 8012304:	051b      	lsls	r3, r3, #20
 8012306:	2a00      	cmp	r2, #0
 8012308:	d06b      	beq.n	80123e2 <_strtod_l+0x8fa>
 801230a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801230e:	d868      	bhi.n	80123e2 <_strtod_l+0x8fa>
 8012310:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8012314:	f67f ae9d 	bls.w	8012052 <_strtod_l+0x56a>
 8012318:	4b0a      	ldr	r3, [pc, #40]	@ (8012344 <_strtod_l+0x85c>)
 801231a:	4650      	mov	r0, sl
 801231c:	4659      	mov	r1, fp
 801231e:	2200      	movs	r2, #0
 8012320:	f7ee f98a 	bl	8000638 <__aeabi_dmul>
 8012324:	4b08      	ldr	r3, [pc, #32]	@ (8012348 <_strtod_l+0x860>)
 8012326:	400b      	ands	r3, r1
 8012328:	4682      	mov	sl, r0
 801232a:	468b      	mov	fp, r1
 801232c:	2b00      	cmp	r3, #0
 801232e:	f47f ae05 	bne.w	8011f3c <_strtod_l+0x454>
 8012332:	9a05      	ldr	r2, [sp, #20]
 8012334:	2322      	movs	r3, #34	@ 0x22
 8012336:	6013      	str	r3, [r2, #0]
 8012338:	e600      	b.n	8011f3c <_strtod_l+0x454>
 801233a:	bf00      	nop
 801233c:	080167f0 	.word	0x080167f0
 8012340:	fffffc02 	.word	0xfffffc02
 8012344:	39500000 	.word	0x39500000
 8012348:	7ff00000 	.word	0x7ff00000
 801234c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012350:	d165      	bne.n	801241e <_strtod_l+0x936>
 8012352:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012358:	b35a      	cbz	r2, 80123b2 <_strtod_l+0x8ca>
 801235a:	4a9f      	ldr	r2, [pc, #636]	@ (80125d8 <_strtod_l+0xaf0>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d12b      	bne.n	80123b8 <_strtod_l+0x8d0>
 8012360:	9b08      	ldr	r3, [sp, #32]
 8012362:	4651      	mov	r1, sl
 8012364:	b303      	cbz	r3, 80123a8 <_strtod_l+0x8c0>
 8012366:	4b9d      	ldr	r3, [pc, #628]	@ (80125dc <_strtod_l+0xaf4>)
 8012368:	465a      	mov	r2, fp
 801236a:	4013      	ands	r3, r2
 801236c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8012370:	f04f 32ff 	mov.w	r2, #4294967295
 8012374:	d81b      	bhi.n	80123ae <_strtod_l+0x8c6>
 8012376:	0d1b      	lsrs	r3, r3, #20
 8012378:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801237c:	fa02 f303 	lsl.w	r3, r2, r3
 8012380:	4299      	cmp	r1, r3
 8012382:	d119      	bne.n	80123b8 <_strtod_l+0x8d0>
 8012384:	4b96      	ldr	r3, [pc, #600]	@ (80125e0 <_strtod_l+0xaf8>)
 8012386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012388:	429a      	cmp	r2, r3
 801238a:	d102      	bne.n	8012392 <_strtod_l+0x8aa>
 801238c:	3101      	adds	r1, #1
 801238e:	f43f adca 	beq.w	8011f26 <_strtod_l+0x43e>
 8012392:	4b92      	ldr	r3, [pc, #584]	@ (80125dc <_strtod_l+0xaf4>)
 8012394:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012396:	401a      	ands	r2, r3
 8012398:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801239c:	f04f 0a00 	mov.w	sl, #0
 80123a0:	9b08      	ldr	r3, [sp, #32]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d1b8      	bne.n	8012318 <_strtod_l+0x830>
 80123a6:	e5c9      	b.n	8011f3c <_strtod_l+0x454>
 80123a8:	f04f 33ff 	mov.w	r3, #4294967295
 80123ac:	e7e8      	b.n	8012380 <_strtod_l+0x898>
 80123ae:	4613      	mov	r3, r2
 80123b0:	e7e6      	b.n	8012380 <_strtod_l+0x898>
 80123b2:	ea53 030a 	orrs.w	r3, r3, sl
 80123b6:	d0a1      	beq.n	80122fc <_strtod_l+0x814>
 80123b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80123ba:	b1db      	cbz	r3, 80123f4 <_strtod_l+0x90c>
 80123bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80123be:	4213      	tst	r3, r2
 80123c0:	d0ee      	beq.n	80123a0 <_strtod_l+0x8b8>
 80123c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80123c4:	9a08      	ldr	r2, [sp, #32]
 80123c6:	4650      	mov	r0, sl
 80123c8:	4659      	mov	r1, fp
 80123ca:	b1bb      	cbz	r3, 80123fc <_strtod_l+0x914>
 80123cc:	f7ff fb6c 	bl	8011aa8 <sulp>
 80123d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80123d4:	ec53 2b10 	vmov	r2, r3, d0
 80123d8:	f7ed ff78 	bl	80002cc <__adddf3>
 80123dc:	4682      	mov	sl, r0
 80123de:	468b      	mov	fp, r1
 80123e0:	e7de      	b.n	80123a0 <_strtod_l+0x8b8>
 80123e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80123e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80123ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80123ee:	f04f 3aff 	mov.w	sl, #4294967295
 80123f2:	e7d5      	b.n	80123a0 <_strtod_l+0x8b8>
 80123f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80123f6:	ea13 0f0a 	tst.w	r3, sl
 80123fa:	e7e1      	b.n	80123c0 <_strtod_l+0x8d8>
 80123fc:	f7ff fb54 	bl	8011aa8 <sulp>
 8012400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012404:	ec53 2b10 	vmov	r2, r3, d0
 8012408:	f7ed ff5e 	bl	80002c8 <__aeabi_dsub>
 801240c:	2200      	movs	r2, #0
 801240e:	2300      	movs	r3, #0
 8012410:	4682      	mov	sl, r0
 8012412:	468b      	mov	fp, r1
 8012414:	f7ee fb78 	bl	8000b08 <__aeabi_dcmpeq>
 8012418:	2800      	cmp	r0, #0
 801241a:	d0c1      	beq.n	80123a0 <_strtod_l+0x8b8>
 801241c:	e619      	b.n	8012052 <_strtod_l+0x56a>
 801241e:	4641      	mov	r1, r8
 8012420:	4620      	mov	r0, r4
 8012422:	f7ff facb 	bl	80119bc <__ratio>
 8012426:	ec57 6b10 	vmov	r6, r7, d0
 801242a:	2200      	movs	r2, #0
 801242c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8012430:	4630      	mov	r0, r6
 8012432:	4639      	mov	r1, r7
 8012434:	f7ee fb7c 	bl	8000b30 <__aeabi_dcmple>
 8012438:	2800      	cmp	r0, #0
 801243a:	d06f      	beq.n	801251c <_strtod_l+0xa34>
 801243c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801243e:	2b00      	cmp	r3, #0
 8012440:	d17a      	bne.n	8012538 <_strtod_l+0xa50>
 8012442:	f1ba 0f00 	cmp.w	sl, #0
 8012446:	d158      	bne.n	80124fa <_strtod_l+0xa12>
 8012448:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801244a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801244e:	2b00      	cmp	r3, #0
 8012450:	d15a      	bne.n	8012508 <_strtod_l+0xa20>
 8012452:	4b64      	ldr	r3, [pc, #400]	@ (80125e4 <_strtod_l+0xafc>)
 8012454:	2200      	movs	r2, #0
 8012456:	4630      	mov	r0, r6
 8012458:	4639      	mov	r1, r7
 801245a:	f7ee fb5f 	bl	8000b1c <__aeabi_dcmplt>
 801245e:	2800      	cmp	r0, #0
 8012460:	d159      	bne.n	8012516 <_strtod_l+0xa2e>
 8012462:	4630      	mov	r0, r6
 8012464:	4639      	mov	r1, r7
 8012466:	4b60      	ldr	r3, [pc, #384]	@ (80125e8 <_strtod_l+0xb00>)
 8012468:	2200      	movs	r2, #0
 801246a:	f7ee f8e5 	bl	8000638 <__aeabi_dmul>
 801246e:	4606      	mov	r6, r0
 8012470:	460f      	mov	r7, r1
 8012472:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8012476:	9606      	str	r6, [sp, #24]
 8012478:	9307      	str	r3, [sp, #28]
 801247a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801247e:	4d57      	ldr	r5, [pc, #348]	@ (80125dc <_strtod_l+0xaf4>)
 8012480:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012486:	401d      	ands	r5, r3
 8012488:	4b58      	ldr	r3, [pc, #352]	@ (80125ec <_strtod_l+0xb04>)
 801248a:	429d      	cmp	r5, r3
 801248c:	f040 80b2 	bne.w	80125f4 <_strtod_l+0xb0c>
 8012490:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012492:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8012496:	ec4b ab10 	vmov	d0, sl, fp
 801249a:	f7ff f9c7 	bl	801182c <__ulp>
 801249e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80124a2:	ec51 0b10 	vmov	r0, r1, d0
 80124a6:	f7ee f8c7 	bl	8000638 <__aeabi_dmul>
 80124aa:	4652      	mov	r2, sl
 80124ac:	465b      	mov	r3, fp
 80124ae:	f7ed ff0d 	bl	80002cc <__adddf3>
 80124b2:	460b      	mov	r3, r1
 80124b4:	4949      	ldr	r1, [pc, #292]	@ (80125dc <_strtod_l+0xaf4>)
 80124b6:	4a4e      	ldr	r2, [pc, #312]	@ (80125f0 <_strtod_l+0xb08>)
 80124b8:	4019      	ands	r1, r3
 80124ba:	4291      	cmp	r1, r2
 80124bc:	4682      	mov	sl, r0
 80124be:	d942      	bls.n	8012546 <_strtod_l+0xa5e>
 80124c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80124c2:	4b47      	ldr	r3, [pc, #284]	@ (80125e0 <_strtod_l+0xaf8>)
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d103      	bne.n	80124d0 <_strtod_l+0x9e8>
 80124c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80124ca:	3301      	adds	r3, #1
 80124cc:	f43f ad2b 	beq.w	8011f26 <_strtod_l+0x43e>
 80124d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80125e0 <_strtod_l+0xaf8>
 80124d4:	f04f 3aff 	mov.w	sl, #4294967295
 80124d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80124da:	9805      	ldr	r0, [sp, #20]
 80124dc:	f7fe fe72 	bl	80111c4 <_Bfree>
 80124e0:	9805      	ldr	r0, [sp, #20]
 80124e2:	4649      	mov	r1, r9
 80124e4:	f7fe fe6e 	bl	80111c4 <_Bfree>
 80124e8:	9805      	ldr	r0, [sp, #20]
 80124ea:	4641      	mov	r1, r8
 80124ec:	f7fe fe6a 	bl	80111c4 <_Bfree>
 80124f0:	9805      	ldr	r0, [sp, #20]
 80124f2:	4621      	mov	r1, r4
 80124f4:	f7fe fe66 	bl	80111c4 <_Bfree>
 80124f8:	e618      	b.n	801212c <_strtod_l+0x644>
 80124fa:	f1ba 0f01 	cmp.w	sl, #1
 80124fe:	d103      	bne.n	8012508 <_strtod_l+0xa20>
 8012500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012502:	2b00      	cmp	r3, #0
 8012504:	f43f ada5 	beq.w	8012052 <_strtod_l+0x56a>
 8012508:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80125b8 <_strtod_l+0xad0>
 801250c:	4f35      	ldr	r7, [pc, #212]	@ (80125e4 <_strtod_l+0xafc>)
 801250e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012512:	2600      	movs	r6, #0
 8012514:	e7b1      	b.n	801247a <_strtod_l+0x992>
 8012516:	4f34      	ldr	r7, [pc, #208]	@ (80125e8 <_strtod_l+0xb00>)
 8012518:	2600      	movs	r6, #0
 801251a:	e7aa      	b.n	8012472 <_strtod_l+0x98a>
 801251c:	4b32      	ldr	r3, [pc, #200]	@ (80125e8 <_strtod_l+0xb00>)
 801251e:	4630      	mov	r0, r6
 8012520:	4639      	mov	r1, r7
 8012522:	2200      	movs	r2, #0
 8012524:	f7ee f888 	bl	8000638 <__aeabi_dmul>
 8012528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801252a:	4606      	mov	r6, r0
 801252c:	460f      	mov	r7, r1
 801252e:	2b00      	cmp	r3, #0
 8012530:	d09f      	beq.n	8012472 <_strtod_l+0x98a>
 8012532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012536:	e7a0      	b.n	801247a <_strtod_l+0x992>
 8012538:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80125c0 <_strtod_l+0xad8>
 801253c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012540:	ec57 6b17 	vmov	r6, r7, d7
 8012544:	e799      	b.n	801247a <_strtod_l+0x992>
 8012546:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801254a:	9b08      	ldr	r3, [sp, #32]
 801254c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8012550:	2b00      	cmp	r3, #0
 8012552:	d1c1      	bne.n	80124d8 <_strtod_l+0x9f0>
 8012554:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8012558:	0d1b      	lsrs	r3, r3, #20
 801255a:	051b      	lsls	r3, r3, #20
 801255c:	429d      	cmp	r5, r3
 801255e:	d1bb      	bne.n	80124d8 <_strtod_l+0x9f0>
 8012560:	4630      	mov	r0, r6
 8012562:	4639      	mov	r1, r7
 8012564:	f7ee fd26 	bl	8000fb4 <__aeabi_d2lz>
 8012568:	f7ee f838 	bl	80005dc <__aeabi_l2d>
 801256c:	4602      	mov	r2, r0
 801256e:	460b      	mov	r3, r1
 8012570:	4630      	mov	r0, r6
 8012572:	4639      	mov	r1, r7
 8012574:	f7ed fea8 	bl	80002c8 <__aeabi_dsub>
 8012578:	460b      	mov	r3, r1
 801257a:	4602      	mov	r2, r0
 801257c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8012580:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8012584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012586:	ea46 060a 	orr.w	r6, r6, sl
 801258a:	431e      	orrs	r6, r3
 801258c:	d06f      	beq.n	801266e <_strtod_l+0xb86>
 801258e:	a30e      	add	r3, pc, #56	@ (adr r3, 80125c8 <_strtod_l+0xae0>)
 8012590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012594:	f7ee fac2 	bl	8000b1c <__aeabi_dcmplt>
 8012598:	2800      	cmp	r0, #0
 801259a:	f47f accf 	bne.w	8011f3c <_strtod_l+0x454>
 801259e:	a30c      	add	r3, pc, #48	@ (adr r3, 80125d0 <_strtod_l+0xae8>)
 80125a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80125a8:	f7ee fad6 	bl	8000b58 <__aeabi_dcmpgt>
 80125ac:	2800      	cmp	r0, #0
 80125ae:	d093      	beq.n	80124d8 <_strtod_l+0x9f0>
 80125b0:	e4c4      	b.n	8011f3c <_strtod_l+0x454>
 80125b2:	bf00      	nop
 80125b4:	f3af 8000 	nop.w
 80125b8:	00000000 	.word	0x00000000
 80125bc:	bff00000 	.word	0xbff00000
 80125c0:	00000000 	.word	0x00000000
 80125c4:	3ff00000 	.word	0x3ff00000
 80125c8:	94a03595 	.word	0x94a03595
 80125cc:	3fdfffff 	.word	0x3fdfffff
 80125d0:	35afe535 	.word	0x35afe535
 80125d4:	3fe00000 	.word	0x3fe00000
 80125d8:	000fffff 	.word	0x000fffff
 80125dc:	7ff00000 	.word	0x7ff00000
 80125e0:	7fefffff 	.word	0x7fefffff
 80125e4:	3ff00000 	.word	0x3ff00000
 80125e8:	3fe00000 	.word	0x3fe00000
 80125ec:	7fe00000 	.word	0x7fe00000
 80125f0:	7c9fffff 	.word	0x7c9fffff
 80125f4:	9b08      	ldr	r3, [sp, #32]
 80125f6:	b323      	cbz	r3, 8012642 <_strtod_l+0xb5a>
 80125f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80125fc:	d821      	bhi.n	8012642 <_strtod_l+0xb5a>
 80125fe:	a328      	add	r3, pc, #160	@ (adr r3, 80126a0 <_strtod_l+0xbb8>)
 8012600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012604:	4630      	mov	r0, r6
 8012606:	4639      	mov	r1, r7
 8012608:	f7ee fa92 	bl	8000b30 <__aeabi_dcmple>
 801260c:	b1a0      	cbz	r0, 8012638 <_strtod_l+0xb50>
 801260e:	4639      	mov	r1, r7
 8012610:	4630      	mov	r0, r6
 8012612:	f7ee fae9 	bl	8000be8 <__aeabi_d2uiz>
 8012616:	2801      	cmp	r0, #1
 8012618:	bf38      	it	cc
 801261a:	2001      	movcc	r0, #1
 801261c:	f7ed ff92 	bl	8000544 <__aeabi_ui2d>
 8012620:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012622:	4606      	mov	r6, r0
 8012624:	460f      	mov	r7, r1
 8012626:	b9fb      	cbnz	r3, 8012668 <_strtod_l+0xb80>
 8012628:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801262c:	9014      	str	r0, [sp, #80]	@ 0x50
 801262e:	9315      	str	r3, [sp, #84]	@ 0x54
 8012630:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8012634:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8012638:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801263a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801263e:	1b5b      	subs	r3, r3, r5
 8012640:	9311      	str	r3, [sp, #68]	@ 0x44
 8012642:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012646:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801264a:	f7ff f8ef 	bl	801182c <__ulp>
 801264e:	4650      	mov	r0, sl
 8012650:	ec53 2b10 	vmov	r2, r3, d0
 8012654:	4659      	mov	r1, fp
 8012656:	f7ed ffef 	bl	8000638 <__aeabi_dmul>
 801265a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801265e:	f7ed fe35 	bl	80002cc <__adddf3>
 8012662:	4682      	mov	sl, r0
 8012664:	468b      	mov	fp, r1
 8012666:	e770      	b.n	801254a <_strtod_l+0xa62>
 8012668:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801266c:	e7e0      	b.n	8012630 <_strtod_l+0xb48>
 801266e:	a30e      	add	r3, pc, #56	@ (adr r3, 80126a8 <_strtod_l+0xbc0>)
 8012670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012674:	f7ee fa52 	bl	8000b1c <__aeabi_dcmplt>
 8012678:	e798      	b.n	80125ac <_strtod_l+0xac4>
 801267a:	2300      	movs	r3, #0
 801267c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801267e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8012680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012682:	6013      	str	r3, [r2, #0]
 8012684:	f7ff ba6d 	b.w	8011b62 <_strtod_l+0x7a>
 8012688:	2a65      	cmp	r2, #101	@ 0x65
 801268a:	f43f ab66 	beq.w	8011d5a <_strtod_l+0x272>
 801268e:	2a45      	cmp	r2, #69	@ 0x45
 8012690:	f43f ab63 	beq.w	8011d5a <_strtod_l+0x272>
 8012694:	2301      	movs	r3, #1
 8012696:	f7ff bb9e 	b.w	8011dd6 <_strtod_l+0x2ee>
 801269a:	bf00      	nop
 801269c:	f3af 8000 	nop.w
 80126a0:	ffc00000 	.word	0xffc00000
 80126a4:	41dfffff 	.word	0x41dfffff
 80126a8:	94a03595 	.word	0x94a03595
 80126ac:	3fcfffff 	.word	0x3fcfffff

080126b0 <_strtod_r>:
 80126b0:	4b01      	ldr	r3, [pc, #4]	@ (80126b8 <_strtod_r+0x8>)
 80126b2:	f7ff ba19 	b.w	8011ae8 <_strtod_l>
 80126b6:	bf00      	nop
 80126b8:	200000c8 	.word	0x200000c8

080126bc <_strtol_l.constprop.0>:
 80126bc:	2b24      	cmp	r3, #36	@ 0x24
 80126be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80126c2:	4686      	mov	lr, r0
 80126c4:	4690      	mov	r8, r2
 80126c6:	d801      	bhi.n	80126cc <_strtol_l.constprop.0+0x10>
 80126c8:	2b01      	cmp	r3, #1
 80126ca:	d106      	bne.n	80126da <_strtol_l.constprop.0+0x1e>
 80126cc:	f7fd fe5a 	bl	8010384 <__errno>
 80126d0:	2316      	movs	r3, #22
 80126d2:	6003      	str	r3, [r0, #0]
 80126d4:	2000      	movs	r0, #0
 80126d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126da:	4834      	ldr	r0, [pc, #208]	@ (80127ac <_strtol_l.constprop.0+0xf0>)
 80126dc:	460d      	mov	r5, r1
 80126de:	462a      	mov	r2, r5
 80126e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126e4:	5d06      	ldrb	r6, [r0, r4]
 80126e6:	f016 0608 	ands.w	r6, r6, #8
 80126ea:	d1f8      	bne.n	80126de <_strtol_l.constprop.0+0x22>
 80126ec:	2c2d      	cmp	r4, #45	@ 0x2d
 80126ee:	d12d      	bne.n	801274c <_strtol_l.constprop.0+0x90>
 80126f0:	782c      	ldrb	r4, [r5, #0]
 80126f2:	2601      	movs	r6, #1
 80126f4:	1c95      	adds	r5, r2, #2
 80126f6:	f033 0210 	bics.w	r2, r3, #16
 80126fa:	d109      	bne.n	8012710 <_strtol_l.constprop.0+0x54>
 80126fc:	2c30      	cmp	r4, #48	@ 0x30
 80126fe:	d12a      	bne.n	8012756 <_strtol_l.constprop.0+0x9a>
 8012700:	782a      	ldrb	r2, [r5, #0]
 8012702:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012706:	2a58      	cmp	r2, #88	@ 0x58
 8012708:	d125      	bne.n	8012756 <_strtol_l.constprop.0+0x9a>
 801270a:	786c      	ldrb	r4, [r5, #1]
 801270c:	2310      	movs	r3, #16
 801270e:	3502      	adds	r5, #2
 8012710:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8012714:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012718:	2200      	movs	r2, #0
 801271a:	fbbc f9f3 	udiv	r9, ip, r3
 801271e:	4610      	mov	r0, r2
 8012720:	fb03 ca19 	mls	sl, r3, r9, ip
 8012724:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8012728:	2f09      	cmp	r7, #9
 801272a:	d81b      	bhi.n	8012764 <_strtol_l.constprop.0+0xa8>
 801272c:	463c      	mov	r4, r7
 801272e:	42a3      	cmp	r3, r4
 8012730:	dd27      	ble.n	8012782 <_strtol_l.constprop.0+0xc6>
 8012732:	1c57      	adds	r7, r2, #1
 8012734:	d007      	beq.n	8012746 <_strtol_l.constprop.0+0x8a>
 8012736:	4581      	cmp	r9, r0
 8012738:	d320      	bcc.n	801277c <_strtol_l.constprop.0+0xc0>
 801273a:	d101      	bne.n	8012740 <_strtol_l.constprop.0+0x84>
 801273c:	45a2      	cmp	sl, r4
 801273e:	db1d      	blt.n	801277c <_strtol_l.constprop.0+0xc0>
 8012740:	fb00 4003 	mla	r0, r0, r3, r4
 8012744:	2201      	movs	r2, #1
 8012746:	f815 4b01 	ldrb.w	r4, [r5], #1
 801274a:	e7eb      	b.n	8012724 <_strtol_l.constprop.0+0x68>
 801274c:	2c2b      	cmp	r4, #43	@ 0x2b
 801274e:	bf04      	itt	eq
 8012750:	782c      	ldrbeq	r4, [r5, #0]
 8012752:	1c95      	addeq	r5, r2, #2
 8012754:	e7cf      	b.n	80126f6 <_strtol_l.constprop.0+0x3a>
 8012756:	2b00      	cmp	r3, #0
 8012758:	d1da      	bne.n	8012710 <_strtol_l.constprop.0+0x54>
 801275a:	2c30      	cmp	r4, #48	@ 0x30
 801275c:	bf0c      	ite	eq
 801275e:	2308      	moveq	r3, #8
 8012760:	230a      	movne	r3, #10
 8012762:	e7d5      	b.n	8012710 <_strtol_l.constprop.0+0x54>
 8012764:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8012768:	2f19      	cmp	r7, #25
 801276a:	d801      	bhi.n	8012770 <_strtol_l.constprop.0+0xb4>
 801276c:	3c37      	subs	r4, #55	@ 0x37
 801276e:	e7de      	b.n	801272e <_strtol_l.constprop.0+0x72>
 8012770:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8012774:	2f19      	cmp	r7, #25
 8012776:	d804      	bhi.n	8012782 <_strtol_l.constprop.0+0xc6>
 8012778:	3c57      	subs	r4, #87	@ 0x57
 801277a:	e7d8      	b.n	801272e <_strtol_l.constprop.0+0x72>
 801277c:	f04f 32ff 	mov.w	r2, #4294967295
 8012780:	e7e1      	b.n	8012746 <_strtol_l.constprop.0+0x8a>
 8012782:	1c53      	adds	r3, r2, #1
 8012784:	d108      	bne.n	8012798 <_strtol_l.constprop.0+0xdc>
 8012786:	2322      	movs	r3, #34	@ 0x22
 8012788:	f8ce 3000 	str.w	r3, [lr]
 801278c:	4660      	mov	r0, ip
 801278e:	f1b8 0f00 	cmp.w	r8, #0
 8012792:	d0a0      	beq.n	80126d6 <_strtol_l.constprop.0+0x1a>
 8012794:	1e69      	subs	r1, r5, #1
 8012796:	e006      	b.n	80127a6 <_strtol_l.constprop.0+0xea>
 8012798:	b106      	cbz	r6, 801279c <_strtol_l.constprop.0+0xe0>
 801279a:	4240      	negs	r0, r0
 801279c:	f1b8 0f00 	cmp.w	r8, #0
 80127a0:	d099      	beq.n	80126d6 <_strtol_l.constprop.0+0x1a>
 80127a2:	2a00      	cmp	r2, #0
 80127a4:	d1f6      	bne.n	8012794 <_strtol_l.constprop.0+0xd8>
 80127a6:	f8c8 1000 	str.w	r1, [r8]
 80127aa:	e794      	b.n	80126d6 <_strtol_l.constprop.0+0x1a>
 80127ac:	08016819 	.word	0x08016819

080127b0 <_strtol_r>:
 80127b0:	f7ff bf84 	b.w	80126bc <_strtol_l.constprop.0>

080127b4 <__ssputs_r>:
 80127b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127b8:	688e      	ldr	r6, [r1, #8]
 80127ba:	461f      	mov	r7, r3
 80127bc:	42be      	cmp	r6, r7
 80127be:	680b      	ldr	r3, [r1, #0]
 80127c0:	4682      	mov	sl, r0
 80127c2:	460c      	mov	r4, r1
 80127c4:	4690      	mov	r8, r2
 80127c6:	d82d      	bhi.n	8012824 <__ssputs_r+0x70>
 80127c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80127cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80127d0:	d026      	beq.n	8012820 <__ssputs_r+0x6c>
 80127d2:	6965      	ldr	r5, [r4, #20]
 80127d4:	6909      	ldr	r1, [r1, #16]
 80127d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80127da:	eba3 0901 	sub.w	r9, r3, r1
 80127de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80127e2:	1c7b      	adds	r3, r7, #1
 80127e4:	444b      	add	r3, r9
 80127e6:	106d      	asrs	r5, r5, #1
 80127e8:	429d      	cmp	r5, r3
 80127ea:	bf38      	it	cc
 80127ec:	461d      	movcc	r5, r3
 80127ee:	0553      	lsls	r3, r2, #21
 80127f0:	d527      	bpl.n	8012842 <__ssputs_r+0x8e>
 80127f2:	4629      	mov	r1, r5
 80127f4:	f7fc fcf4 	bl	800f1e0 <_malloc_r>
 80127f8:	4606      	mov	r6, r0
 80127fa:	b360      	cbz	r0, 8012856 <__ssputs_r+0xa2>
 80127fc:	6921      	ldr	r1, [r4, #16]
 80127fe:	464a      	mov	r2, r9
 8012800:	f7fd fded 	bl	80103de <memcpy>
 8012804:	89a3      	ldrh	r3, [r4, #12]
 8012806:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801280a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801280e:	81a3      	strh	r3, [r4, #12]
 8012810:	6126      	str	r6, [r4, #16]
 8012812:	6165      	str	r5, [r4, #20]
 8012814:	444e      	add	r6, r9
 8012816:	eba5 0509 	sub.w	r5, r5, r9
 801281a:	6026      	str	r6, [r4, #0]
 801281c:	60a5      	str	r5, [r4, #8]
 801281e:	463e      	mov	r6, r7
 8012820:	42be      	cmp	r6, r7
 8012822:	d900      	bls.n	8012826 <__ssputs_r+0x72>
 8012824:	463e      	mov	r6, r7
 8012826:	6820      	ldr	r0, [r4, #0]
 8012828:	4632      	mov	r2, r6
 801282a:	4641      	mov	r1, r8
 801282c:	f000 fd53 	bl	80132d6 <memmove>
 8012830:	68a3      	ldr	r3, [r4, #8]
 8012832:	1b9b      	subs	r3, r3, r6
 8012834:	60a3      	str	r3, [r4, #8]
 8012836:	6823      	ldr	r3, [r4, #0]
 8012838:	4433      	add	r3, r6
 801283a:	6023      	str	r3, [r4, #0]
 801283c:	2000      	movs	r0, #0
 801283e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012842:	462a      	mov	r2, r5
 8012844:	f001 f8e5 	bl	8013a12 <_realloc_r>
 8012848:	4606      	mov	r6, r0
 801284a:	2800      	cmp	r0, #0
 801284c:	d1e0      	bne.n	8012810 <__ssputs_r+0x5c>
 801284e:	6921      	ldr	r1, [r4, #16]
 8012850:	4650      	mov	r0, sl
 8012852:	f7fe fc25 	bl	80110a0 <_free_r>
 8012856:	230c      	movs	r3, #12
 8012858:	f8ca 3000 	str.w	r3, [sl]
 801285c:	89a3      	ldrh	r3, [r4, #12]
 801285e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012862:	81a3      	strh	r3, [r4, #12]
 8012864:	f04f 30ff 	mov.w	r0, #4294967295
 8012868:	e7e9      	b.n	801283e <__ssputs_r+0x8a>
	...

0801286c <_svfiprintf_r>:
 801286c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012870:	4698      	mov	r8, r3
 8012872:	898b      	ldrh	r3, [r1, #12]
 8012874:	061b      	lsls	r3, r3, #24
 8012876:	b09d      	sub	sp, #116	@ 0x74
 8012878:	4607      	mov	r7, r0
 801287a:	460d      	mov	r5, r1
 801287c:	4614      	mov	r4, r2
 801287e:	d510      	bpl.n	80128a2 <_svfiprintf_r+0x36>
 8012880:	690b      	ldr	r3, [r1, #16]
 8012882:	b973      	cbnz	r3, 80128a2 <_svfiprintf_r+0x36>
 8012884:	2140      	movs	r1, #64	@ 0x40
 8012886:	f7fc fcab 	bl	800f1e0 <_malloc_r>
 801288a:	6028      	str	r0, [r5, #0]
 801288c:	6128      	str	r0, [r5, #16]
 801288e:	b930      	cbnz	r0, 801289e <_svfiprintf_r+0x32>
 8012890:	230c      	movs	r3, #12
 8012892:	603b      	str	r3, [r7, #0]
 8012894:	f04f 30ff 	mov.w	r0, #4294967295
 8012898:	b01d      	add	sp, #116	@ 0x74
 801289a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801289e:	2340      	movs	r3, #64	@ 0x40
 80128a0:	616b      	str	r3, [r5, #20]
 80128a2:	2300      	movs	r3, #0
 80128a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80128a6:	2320      	movs	r3, #32
 80128a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80128ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80128b0:	2330      	movs	r3, #48	@ 0x30
 80128b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012a50 <_svfiprintf_r+0x1e4>
 80128b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80128ba:	f04f 0901 	mov.w	r9, #1
 80128be:	4623      	mov	r3, r4
 80128c0:	469a      	mov	sl, r3
 80128c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80128c6:	b10a      	cbz	r2, 80128cc <_svfiprintf_r+0x60>
 80128c8:	2a25      	cmp	r2, #37	@ 0x25
 80128ca:	d1f9      	bne.n	80128c0 <_svfiprintf_r+0x54>
 80128cc:	ebba 0b04 	subs.w	fp, sl, r4
 80128d0:	d00b      	beq.n	80128ea <_svfiprintf_r+0x7e>
 80128d2:	465b      	mov	r3, fp
 80128d4:	4622      	mov	r2, r4
 80128d6:	4629      	mov	r1, r5
 80128d8:	4638      	mov	r0, r7
 80128da:	f7ff ff6b 	bl	80127b4 <__ssputs_r>
 80128de:	3001      	adds	r0, #1
 80128e0:	f000 80a7 	beq.w	8012a32 <_svfiprintf_r+0x1c6>
 80128e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80128e6:	445a      	add	r2, fp
 80128e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80128ea:	f89a 3000 	ldrb.w	r3, [sl]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	f000 809f 	beq.w	8012a32 <_svfiprintf_r+0x1c6>
 80128f4:	2300      	movs	r3, #0
 80128f6:	f04f 32ff 	mov.w	r2, #4294967295
 80128fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80128fe:	f10a 0a01 	add.w	sl, sl, #1
 8012902:	9304      	str	r3, [sp, #16]
 8012904:	9307      	str	r3, [sp, #28]
 8012906:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801290a:	931a      	str	r3, [sp, #104]	@ 0x68
 801290c:	4654      	mov	r4, sl
 801290e:	2205      	movs	r2, #5
 8012910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012914:	484e      	ldr	r0, [pc, #312]	@ (8012a50 <_svfiprintf_r+0x1e4>)
 8012916:	f7ed fc7b 	bl	8000210 <memchr>
 801291a:	9a04      	ldr	r2, [sp, #16]
 801291c:	b9d8      	cbnz	r0, 8012956 <_svfiprintf_r+0xea>
 801291e:	06d0      	lsls	r0, r2, #27
 8012920:	bf44      	itt	mi
 8012922:	2320      	movmi	r3, #32
 8012924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012928:	0711      	lsls	r1, r2, #28
 801292a:	bf44      	itt	mi
 801292c:	232b      	movmi	r3, #43	@ 0x2b
 801292e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012932:	f89a 3000 	ldrb.w	r3, [sl]
 8012936:	2b2a      	cmp	r3, #42	@ 0x2a
 8012938:	d015      	beq.n	8012966 <_svfiprintf_r+0xfa>
 801293a:	9a07      	ldr	r2, [sp, #28]
 801293c:	4654      	mov	r4, sl
 801293e:	2000      	movs	r0, #0
 8012940:	f04f 0c0a 	mov.w	ip, #10
 8012944:	4621      	mov	r1, r4
 8012946:	f811 3b01 	ldrb.w	r3, [r1], #1
 801294a:	3b30      	subs	r3, #48	@ 0x30
 801294c:	2b09      	cmp	r3, #9
 801294e:	d94b      	bls.n	80129e8 <_svfiprintf_r+0x17c>
 8012950:	b1b0      	cbz	r0, 8012980 <_svfiprintf_r+0x114>
 8012952:	9207      	str	r2, [sp, #28]
 8012954:	e014      	b.n	8012980 <_svfiprintf_r+0x114>
 8012956:	eba0 0308 	sub.w	r3, r0, r8
 801295a:	fa09 f303 	lsl.w	r3, r9, r3
 801295e:	4313      	orrs	r3, r2
 8012960:	9304      	str	r3, [sp, #16]
 8012962:	46a2      	mov	sl, r4
 8012964:	e7d2      	b.n	801290c <_svfiprintf_r+0xa0>
 8012966:	9b03      	ldr	r3, [sp, #12]
 8012968:	1d19      	adds	r1, r3, #4
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	9103      	str	r1, [sp, #12]
 801296e:	2b00      	cmp	r3, #0
 8012970:	bfbb      	ittet	lt
 8012972:	425b      	neglt	r3, r3
 8012974:	f042 0202 	orrlt.w	r2, r2, #2
 8012978:	9307      	strge	r3, [sp, #28]
 801297a:	9307      	strlt	r3, [sp, #28]
 801297c:	bfb8      	it	lt
 801297e:	9204      	strlt	r2, [sp, #16]
 8012980:	7823      	ldrb	r3, [r4, #0]
 8012982:	2b2e      	cmp	r3, #46	@ 0x2e
 8012984:	d10a      	bne.n	801299c <_svfiprintf_r+0x130>
 8012986:	7863      	ldrb	r3, [r4, #1]
 8012988:	2b2a      	cmp	r3, #42	@ 0x2a
 801298a:	d132      	bne.n	80129f2 <_svfiprintf_r+0x186>
 801298c:	9b03      	ldr	r3, [sp, #12]
 801298e:	1d1a      	adds	r2, r3, #4
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	9203      	str	r2, [sp, #12]
 8012994:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012998:	3402      	adds	r4, #2
 801299a:	9305      	str	r3, [sp, #20]
 801299c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012a60 <_svfiprintf_r+0x1f4>
 80129a0:	7821      	ldrb	r1, [r4, #0]
 80129a2:	2203      	movs	r2, #3
 80129a4:	4650      	mov	r0, sl
 80129a6:	f7ed fc33 	bl	8000210 <memchr>
 80129aa:	b138      	cbz	r0, 80129bc <_svfiprintf_r+0x150>
 80129ac:	9b04      	ldr	r3, [sp, #16]
 80129ae:	eba0 000a 	sub.w	r0, r0, sl
 80129b2:	2240      	movs	r2, #64	@ 0x40
 80129b4:	4082      	lsls	r2, r0
 80129b6:	4313      	orrs	r3, r2
 80129b8:	3401      	adds	r4, #1
 80129ba:	9304      	str	r3, [sp, #16]
 80129bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129c0:	4824      	ldr	r0, [pc, #144]	@ (8012a54 <_svfiprintf_r+0x1e8>)
 80129c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80129c6:	2206      	movs	r2, #6
 80129c8:	f7ed fc22 	bl	8000210 <memchr>
 80129cc:	2800      	cmp	r0, #0
 80129ce:	d036      	beq.n	8012a3e <_svfiprintf_r+0x1d2>
 80129d0:	4b21      	ldr	r3, [pc, #132]	@ (8012a58 <_svfiprintf_r+0x1ec>)
 80129d2:	bb1b      	cbnz	r3, 8012a1c <_svfiprintf_r+0x1b0>
 80129d4:	9b03      	ldr	r3, [sp, #12]
 80129d6:	3307      	adds	r3, #7
 80129d8:	f023 0307 	bic.w	r3, r3, #7
 80129dc:	3308      	adds	r3, #8
 80129de:	9303      	str	r3, [sp, #12]
 80129e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129e2:	4433      	add	r3, r6
 80129e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80129e6:	e76a      	b.n	80128be <_svfiprintf_r+0x52>
 80129e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80129ec:	460c      	mov	r4, r1
 80129ee:	2001      	movs	r0, #1
 80129f0:	e7a8      	b.n	8012944 <_svfiprintf_r+0xd8>
 80129f2:	2300      	movs	r3, #0
 80129f4:	3401      	adds	r4, #1
 80129f6:	9305      	str	r3, [sp, #20]
 80129f8:	4619      	mov	r1, r3
 80129fa:	f04f 0c0a 	mov.w	ip, #10
 80129fe:	4620      	mov	r0, r4
 8012a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012a04:	3a30      	subs	r2, #48	@ 0x30
 8012a06:	2a09      	cmp	r2, #9
 8012a08:	d903      	bls.n	8012a12 <_svfiprintf_r+0x1a6>
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d0c6      	beq.n	801299c <_svfiprintf_r+0x130>
 8012a0e:	9105      	str	r1, [sp, #20]
 8012a10:	e7c4      	b.n	801299c <_svfiprintf_r+0x130>
 8012a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8012a16:	4604      	mov	r4, r0
 8012a18:	2301      	movs	r3, #1
 8012a1a:	e7f0      	b.n	80129fe <_svfiprintf_r+0x192>
 8012a1c:	ab03      	add	r3, sp, #12
 8012a1e:	9300      	str	r3, [sp, #0]
 8012a20:	462a      	mov	r2, r5
 8012a22:	4b0e      	ldr	r3, [pc, #56]	@ (8012a5c <_svfiprintf_r+0x1f0>)
 8012a24:	a904      	add	r1, sp, #16
 8012a26:	4638      	mov	r0, r7
 8012a28:	f7fc fd06 	bl	800f438 <_printf_float>
 8012a2c:	1c42      	adds	r2, r0, #1
 8012a2e:	4606      	mov	r6, r0
 8012a30:	d1d6      	bne.n	80129e0 <_svfiprintf_r+0x174>
 8012a32:	89ab      	ldrh	r3, [r5, #12]
 8012a34:	065b      	lsls	r3, r3, #25
 8012a36:	f53f af2d 	bmi.w	8012894 <_svfiprintf_r+0x28>
 8012a3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012a3c:	e72c      	b.n	8012898 <_svfiprintf_r+0x2c>
 8012a3e:	ab03      	add	r3, sp, #12
 8012a40:	9300      	str	r3, [sp, #0]
 8012a42:	462a      	mov	r2, r5
 8012a44:	4b05      	ldr	r3, [pc, #20]	@ (8012a5c <_svfiprintf_r+0x1f0>)
 8012a46:	a904      	add	r1, sp, #16
 8012a48:	4638      	mov	r0, r7
 8012a4a:	f7fc ff8d 	bl	800f968 <_printf_i>
 8012a4e:	e7ed      	b.n	8012a2c <_svfiprintf_r+0x1c0>
 8012a50:	08016919 	.word	0x08016919
 8012a54:	08016923 	.word	0x08016923
 8012a58:	0800f439 	.word	0x0800f439
 8012a5c:	080127b5 	.word	0x080127b5
 8012a60:	0801691f 	.word	0x0801691f

08012a64 <_sungetc_r>:
 8012a64:	b538      	push	{r3, r4, r5, lr}
 8012a66:	1c4b      	adds	r3, r1, #1
 8012a68:	4614      	mov	r4, r2
 8012a6a:	d103      	bne.n	8012a74 <_sungetc_r+0x10>
 8012a6c:	f04f 35ff 	mov.w	r5, #4294967295
 8012a70:	4628      	mov	r0, r5
 8012a72:	bd38      	pop	{r3, r4, r5, pc}
 8012a74:	8993      	ldrh	r3, [r2, #12]
 8012a76:	f023 0320 	bic.w	r3, r3, #32
 8012a7a:	8193      	strh	r3, [r2, #12]
 8012a7c:	6853      	ldr	r3, [r2, #4]
 8012a7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012a80:	b2cd      	uxtb	r5, r1
 8012a82:	b18a      	cbz	r2, 8012aa8 <_sungetc_r+0x44>
 8012a84:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8012a86:	429a      	cmp	r2, r3
 8012a88:	dd08      	ble.n	8012a9c <_sungetc_r+0x38>
 8012a8a:	6823      	ldr	r3, [r4, #0]
 8012a8c:	1e5a      	subs	r2, r3, #1
 8012a8e:	6022      	str	r2, [r4, #0]
 8012a90:	f803 5c01 	strb.w	r5, [r3, #-1]
 8012a94:	6863      	ldr	r3, [r4, #4]
 8012a96:	3301      	adds	r3, #1
 8012a98:	6063      	str	r3, [r4, #4]
 8012a9a:	e7e9      	b.n	8012a70 <_sungetc_r+0xc>
 8012a9c:	4621      	mov	r1, r4
 8012a9e:	f000 fbe0 	bl	8013262 <__submore>
 8012aa2:	2800      	cmp	r0, #0
 8012aa4:	d0f1      	beq.n	8012a8a <_sungetc_r+0x26>
 8012aa6:	e7e1      	b.n	8012a6c <_sungetc_r+0x8>
 8012aa8:	6921      	ldr	r1, [r4, #16]
 8012aaa:	6822      	ldr	r2, [r4, #0]
 8012aac:	b141      	cbz	r1, 8012ac0 <_sungetc_r+0x5c>
 8012aae:	4291      	cmp	r1, r2
 8012ab0:	d206      	bcs.n	8012ac0 <_sungetc_r+0x5c>
 8012ab2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8012ab6:	42a9      	cmp	r1, r5
 8012ab8:	d102      	bne.n	8012ac0 <_sungetc_r+0x5c>
 8012aba:	3a01      	subs	r2, #1
 8012abc:	6022      	str	r2, [r4, #0]
 8012abe:	e7ea      	b.n	8012a96 <_sungetc_r+0x32>
 8012ac0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8012ac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ac8:	6363      	str	r3, [r4, #52]	@ 0x34
 8012aca:	2303      	movs	r3, #3
 8012acc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8012ace:	4623      	mov	r3, r4
 8012ad0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8012ad4:	6023      	str	r3, [r4, #0]
 8012ad6:	2301      	movs	r3, #1
 8012ad8:	e7de      	b.n	8012a98 <_sungetc_r+0x34>

08012ada <__ssrefill_r>:
 8012ada:	b510      	push	{r4, lr}
 8012adc:	460c      	mov	r4, r1
 8012ade:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012ae0:	b169      	cbz	r1, 8012afe <__ssrefill_r+0x24>
 8012ae2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ae6:	4299      	cmp	r1, r3
 8012ae8:	d001      	beq.n	8012aee <__ssrefill_r+0x14>
 8012aea:	f7fe fad9 	bl	80110a0 <_free_r>
 8012aee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012af0:	6063      	str	r3, [r4, #4]
 8012af2:	2000      	movs	r0, #0
 8012af4:	6360      	str	r0, [r4, #52]	@ 0x34
 8012af6:	b113      	cbz	r3, 8012afe <__ssrefill_r+0x24>
 8012af8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8012afa:	6023      	str	r3, [r4, #0]
 8012afc:	bd10      	pop	{r4, pc}
 8012afe:	6923      	ldr	r3, [r4, #16]
 8012b00:	6023      	str	r3, [r4, #0]
 8012b02:	2300      	movs	r3, #0
 8012b04:	6063      	str	r3, [r4, #4]
 8012b06:	89a3      	ldrh	r3, [r4, #12]
 8012b08:	f043 0320 	orr.w	r3, r3, #32
 8012b0c:	81a3      	strh	r3, [r4, #12]
 8012b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8012b12:	e7f3      	b.n	8012afc <__ssrefill_r+0x22>

08012b14 <__ssvfiscanf_r>:
 8012b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b18:	460c      	mov	r4, r1
 8012b1a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012b1e:	2100      	movs	r1, #0
 8012b20:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8012b24:	49a5      	ldr	r1, [pc, #660]	@ (8012dbc <__ssvfiscanf_r+0x2a8>)
 8012b26:	91a0      	str	r1, [sp, #640]	@ 0x280
 8012b28:	f10d 0804 	add.w	r8, sp, #4
 8012b2c:	49a4      	ldr	r1, [pc, #656]	@ (8012dc0 <__ssvfiscanf_r+0x2ac>)
 8012b2e:	4fa5      	ldr	r7, [pc, #660]	@ (8012dc4 <__ssvfiscanf_r+0x2b0>)
 8012b30:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8012b34:	4606      	mov	r6, r0
 8012b36:	91a1      	str	r1, [sp, #644]	@ 0x284
 8012b38:	9300      	str	r3, [sp, #0]
 8012b3a:	7813      	ldrb	r3, [r2, #0]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f000 8158 	beq.w	8012df2 <__ssvfiscanf_r+0x2de>
 8012b42:	5cf9      	ldrb	r1, [r7, r3]
 8012b44:	f011 0108 	ands.w	r1, r1, #8
 8012b48:	f102 0501 	add.w	r5, r2, #1
 8012b4c:	d019      	beq.n	8012b82 <__ssvfiscanf_r+0x6e>
 8012b4e:	6863      	ldr	r3, [r4, #4]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	dd0f      	ble.n	8012b74 <__ssvfiscanf_r+0x60>
 8012b54:	6823      	ldr	r3, [r4, #0]
 8012b56:	781a      	ldrb	r2, [r3, #0]
 8012b58:	5cba      	ldrb	r2, [r7, r2]
 8012b5a:	0712      	lsls	r2, r2, #28
 8012b5c:	d401      	bmi.n	8012b62 <__ssvfiscanf_r+0x4e>
 8012b5e:	462a      	mov	r2, r5
 8012b60:	e7eb      	b.n	8012b3a <__ssvfiscanf_r+0x26>
 8012b62:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012b64:	3201      	adds	r2, #1
 8012b66:	9245      	str	r2, [sp, #276]	@ 0x114
 8012b68:	6862      	ldr	r2, [r4, #4]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	3a01      	subs	r2, #1
 8012b6e:	6062      	str	r2, [r4, #4]
 8012b70:	6023      	str	r3, [r4, #0]
 8012b72:	e7ec      	b.n	8012b4e <__ssvfiscanf_r+0x3a>
 8012b74:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012b76:	4621      	mov	r1, r4
 8012b78:	4630      	mov	r0, r6
 8012b7a:	4798      	blx	r3
 8012b7c:	2800      	cmp	r0, #0
 8012b7e:	d0e9      	beq.n	8012b54 <__ssvfiscanf_r+0x40>
 8012b80:	e7ed      	b.n	8012b5e <__ssvfiscanf_r+0x4a>
 8012b82:	2b25      	cmp	r3, #37	@ 0x25
 8012b84:	d012      	beq.n	8012bac <__ssvfiscanf_r+0x98>
 8012b86:	4699      	mov	r9, r3
 8012b88:	6863      	ldr	r3, [r4, #4]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	f340 8093 	ble.w	8012cb6 <__ssvfiscanf_r+0x1a2>
 8012b90:	6822      	ldr	r2, [r4, #0]
 8012b92:	7813      	ldrb	r3, [r2, #0]
 8012b94:	454b      	cmp	r3, r9
 8012b96:	f040 812c 	bne.w	8012df2 <__ssvfiscanf_r+0x2de>
 8012b9a:	6863      	ldr	r3, [r4, #4]
 8012b9c:	3b01      	subs	r3, #1
 8012b9e:	6063      	str	r3, [r4, #4]
 8012ba0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8012ba2:	3201      	adds	r2, #1
 8012ba4:	3301      	adds	r3, #1
 8012ba6:	6022      	str	r2, [r4, #0]
 8012ba8:	9345      	str	r3, [sp, #276]	@ 0x114
 8012baa:	e7d8      	b.n	8012b5e <__ssvfiscanf_r+0x4a>
 8012bac:	9141      	str	r1, [sp, #260]	@ 0x104
 8012bae:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012bb0:	7853      	ldrb	r3, [r2, #1]
 8012bb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8012bb4:	bf02      	ittt	eq
 8012bb6:	2310      	moveq	r3, #16
 8012bb8:	1c95      	addeq	r5, r2, #2
 8012bba:	9341      	streq	r3, [sp, #260]	@ 0x104
 8012bbc:	220a      	movs	r2, #10
 8012bbe:	46a9      	mov	r9, r5
 8012bc0:	f819 1b01 	ldrb.w	r1, [r9], #1
 8012bc4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8012bc8:	2b09      	cmp	r3, #9
 8012bca:	d91e      	bls.n	8012c0a <__ssvfiscanf_r+0xf6>
 8012bcc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8012dc8 <__ssvfiscanf_r+0x2b4>
 8012bd0:	2203      	movs	r2, #3
 8012bd2:	4650      	mov	r0, sl
 8012bd4:	f7ed fb1c 	bl	8000210 <memchr>
 8012bd8:	b138      	cbz	r0, 8012bea <__ssvfiscanf_r+0xd6>
 8012bda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012bdc:	eba0 000a 	sub.w	r0, r0, sl
 8012be0:	2301      	movs	r3, #1
 8012be2:	4083      	lsls	r3, r0
 8012be4:	4313      	orrs	r3, r2
 8012be6:	9341      	str	r3, [sp, #260]	@ 0x104
 8012be8:	464d      	mov	r5, r9
 8012bea:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012bee:	2b78      	cmp	r3, #120	@ 0x78
 8012bf0:	d806      	bhi.n	8012c00 <__ssvfiscanf_r+0xec>
 8012bf2:	2b57      	cmp	r3, #87	@ 0x57
 8012bf4:	d810      	bhi.n	8012c18 <__ssvfiscanf_r+0x104>
 8012bf6:	2b25      	cmp	r3, #37	@ 0x25
 8012bf8:	d0c5      	beq.n	8012b86 <__ssvfiscanf_r+0x72>
 8012bfa:	d857      	bhi.n	8012cac <__ssvfiscanf_r+0x198>
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d065      	beq.n	8012ccc <__ssvfiscanf_r+0x1b8>
 8012c00:	2303      	movs	r3, #3
 8012c02:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012c04:	230a      	movs	r3, #10
 8012c06:	9342      	str	r3, [sp, #264]	@ 0x108
 8012c08:	e078      	b.n	8012cfc <__ssvfiscanf_r+0x1e8>
 8012c0a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8012c0c:	fb02 1103 	mla	r1, r2, r3, r1
 8012c10:	3930      	subs	r1, #48	@ 0x30
 8012c12:	9143      	str	r1, [sp, #268]	@ 0x10c
 8012c14:	464d      	mov	r5, r9
 8012c16:	e7d2      	b.n	8012bbe <__ssvfiscanf_r+0xaa>
 8012c18:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8012c1c:	2a20      	cmp	r2, #32
 8012c1e:	d8ef      	bhi.n	8012c00 <__ssvfiscanf_r+0xec>
 8012c20:	a101      	add	r1, pc, #4	@ (adr r1, 8012c28 <__ssvfiscanf_r+0x114>)
 8012c22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8012c26:	bf00      	nop
 8012c28:	08012cdb 	.word	0x08012cdb
 8012c2c:	08012c01 	.word	0x08012c01
 8012c30:	08012c01 	.word	0x08012c01
 8012c34:	08012d35 	.word	0x08012d35
 8012c38:	08012c01 	.word	0x08012c01
 8012c3c:	08012c01 	.word	0x08012c01
 8012c40:	08012c01 	.word	0x08012c01
 8012c44:	08012c01 	.word	0x08012c01
 8012c48:	08012c01 	.word	0x08012c01
 8012c4c:	08012c01 	.word	0x08012c01
 8012c50:	08012c01 	.word	0x08012c01
 8012c54:	08012d4b 	.word	0x08012d4b
 8012c58:	08012d31 	.word	0x08012d31
 8012c5c:	08012cb3 	.word	0x08012cb3
 8012c60:	08012cb3 	.word	0x08012cb3
 8012c64:	08012cb3 	.word	0x08012cb3
 8012c68:	08012c01 	.word	0x08012c01
 8012c6c:	08012ced 	.word	0x08012ced
 8012c70:	08012c01 	.word	0x08012c01
 8012c74:	08012c01 	.word	0x08012c01
 8012c78:	08012c01 	.word	0x08012c01
 8012c7c:	08012c01 	.word	0x08012c01
 8012c80:	08012d5b 	.word	0x08012d5b
 8012c84:	08012cf5 	.word	0x08012cf5
 8012c88:	08012cd3 	.word	0x08012cd3
 8012c8c:	08012c01 	.word	0x08012c01
 8012c90:	08012c01 	.word	0x08012c01
 8012c94:	08012d57 	.word	0x08012d57
 8012c98:	08012c01 	.word	0x08012c01
 8012c9c:	08012d31 	.word	0x08012d31
 8012ca0:	08012c01 	.word	0x08012c01
 8012ca4:	08012c01 	.word	0x08012c01
 8012ca8:	08012cdb 	.word	0x08012cdb
 8012cac:	3b45      	subs	r3, #69	@ 0x45
 8012cae:	2b02      	cmp	r3, #2
 8012cb0:	d8a6      	bhi.n	8012c00 <__ssvfiscanf_r+0xec>
 8012cb2:	2305      	movs	r3, #5
 8012cb4:	e021      	b.n	8012cfa <__ssvfiscanf_r+0x1e6>
 8012cb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012cb8:	4621      	mov	r1, r4
 8012cba:	4630      	mov	r0, r6
 8012cbc:	4798      	blx	r3
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	f43f af66 	beq.w	8012b90 <__ssvfiscanf_r+0x7c>
 8012cc4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012cc6:	2800      	cmp	r0, #0
 8012cc8:	f040 808b 	bne.w	8012de2 <__ssvfiscanf_r+0x2ce>
 8012ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8012cd0:	e08b      	b.n	8012dea <__ssvfiscanf_r+0x2d6>
 8012cd2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012cd4:	f042 0220 	orr.w	r2, r2, #32
 8012cd8:	9241      	str	r2, [sp, #260]	@ 0x104
 8012cda:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8012cdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012ce0:	9241      	str	r2, [sp, #260]	@ 0x104
 8012ce2:	2210      	movs	r2, #16
 8012ce4:	2b6e      	cmp	r3, #110	@ 0x6e
 8012ce6:	9242      	str	r2, [sp, #264]	@ 0x108
 8012ce8:	d902      	bls.n	8012cf0 <__ssvfiscanf_r+0x1dc>
 8012cea:	e005      	b.n	8012cf8 <__ssvfiscanf_r+0x1e4>
 8012cec:	2300      	movs	r3, #0
 8012cee:	9342      	str	r3, [sp, #264]	@ 0x108
 8012cf0:	2303      	movs	r3, #3
 8012cf2:	e002      	b.n	8012cfa <__ssvfiscanf_r+0x1e6>
 8012cf4:	2308      	movs	r3, #8
 8012cf6:	9342      	str	r3, [sp, #264]	@ 0x108
 8012cf8:	2304      	movs	r3, #4
 8012cfa:	9347      	str	r3, [sp, #284]	@ 0x11c
 8012cfc:	6863      	ldr	r3, [r4, #4]
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	dd39      	ble.n	8012d76 <__ssvfiscanf_r+0x262>
 8012d02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012d04:	0659      	lsls	r1, r3, #25
 8012d06:	d404      	bmi.n	8012d12 <__ssvfiscanf_r+0x1fe>
 8012d08:	6823      	ldr	r3, [r4, #0]
 8012d0a:	781a      	ldrb	r2, [r3, #0]
 8012d0c:	5cba      	ldrb	r2, [r7, r2]
 8012d0e:	0712      	lsls	r2, r2, #28
 8012d10:	d438      	bmi.n	8012d84 <__ssvfiscanf_r+0x270>
 8012d12:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8012d14:	2b02      	cmp	r3, #2
 8012d16:	dc47      	bgt.n	8012da8 <__ssvfiscanf_r+0x294>
 8012d18:	466b      	mov	r3, sp
 8012d1a:	4622      	mov	r2, r4
 8012d1c:	a941      	add	r1, sp, #260	@ 0x104
 8012d1e:	4630      	mov	r0, r6
 8012d20:	f000 f86c 	bl	8012dfc <_scanf_chars>
 8012d24:	2801      	cmp	r0, #1
 8012d26:	d064      	beq.n	8012df2 <__ssvfiscanf_r+0x2de>
 8012d28:	2802      	cmp	r0, #2
 8012d2a:	f47f af18 	bne.w	8012b5e <__ssvfiscanf_r+0x4a>
 8012d2e:	e7c9      	b.n	8012cc4 <__ssvfiscanf_r+0x1b0>
 8012d30:	220a      	movs	r2, #10
 8012d32:	e7d7      	b.n	8012ce4 <__ssvfiscanf_r+0x1d0>
 8012d34:	4629      	mov	r1, r5
 8012d36:	4640      	mov	r0, r8
 8012d38:	f000 fa5a 	bl	80131f0 <__sccl>
 8012d3c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d42:	9341      	str	r3, [sp, #260]	@ 0x104
 8012d44:	4605      	mov	r5, r0
 8012d46:	2301      	movs	r3, #1
 8012d48:	e7d7      	b.n	8012cfa <__ssvfiscanf_r+0x1e6>
 8012d4a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8012d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d50:	9341      	str	r3, [sp, #260]	@ 0x104
 8012d52:	2300      	movs	r3, #0
 8012d54:	e7d1      	b.n	8012cfa <__ssvfiscanf_r+0x1e6>
 8012d56:	2302      	movs	r3, #2
 8012d58:	e7cf      	b.n	8012cfa <__ssvfiscanf_r+0x1e6>
 8012d5a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8012d5c:	06c3      	lsls	r3, r0, #27
 8012d5e:	f53f aefe 	bmi.w	8012b5e <__ssvfiscanf_r+0x4a>
 8012d62:	9b00      	ldr	r3, [sp, #0]
 8012d64:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012d66:	1d19      	adds	r1, r3, #4
 8012d68:	9100      	str	r1, [sp, #0]
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	07c0      	lsls	r0, r0, #31
 8012d6e:	bf4c      	ite	mi
 8012d70:	801a      	strhmi	r2, [r3, #0]
 8012d72:	601a      	strpl	r2, [r3, #0]
 8012d74:	e6f3      	b.n	8012b5e <__ssvfiscanf_r+0x4a>
 8012d76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012d78:	4621      	mov	r1, r4
 8012d7a:	4630      	mov	r0, r6
 8012d7c:	4798      	blx	r3
 8012d7e:	2800      	cmp	r0, #0
 8012d80:	d0bf      	beq.n	8012d02 <__ssvfiscanf_r+0x1ee>
 8012d82:	e79f      	b.n	8012cc4 <__ssvfiscanf_r+0x1b0>
 8012d84:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8012d86:	3201      	adds	r2, #1
 8012d88:	9245      	str	r2, [sp, #276]	@ 0x114
 8012d8a:	6862      	ldr	r2, [r4, #4]
 8012d8c:	3a01      	subs	r2, #1
 8012d8e:	2a00      	cmp	r2, #0
 8012d90:	6062      	str	r2, [r4, #4]
 8012d92:	dd02      	ble.n	8012d9a <__ssvfiscanf_r+0x286>
 8012d94:	3301      	adds	r3, #1
 8012d96:	6023      	str	r3, [r4, #0]
 8012d98:	e7b6      	b.n	8012d08 <__ssvfiscanf_r+0x1f4>
 8012d9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8012d9c:	4621      	mov	r1, r4
 8012d9e:	4630      	mov	r0, r6
 8012da0:	4798      	blx	r3
 8012da2:	2800      	cmp	r0, #0
 8012da4:	d0b0      	beq.n	8012d08 <__ssvfiscanf_r+0x1f4>
 8012da6:	e78d      	b.n	8012cc4 <__ssvfiscanf_r+0x1b0>
 8012da8:	2b04      	cmp	r3, #4
 8012daa:	dc0f      	bgt.n	8012dcc <__ssvfiscanf_r+0x2b8>
 8012dac:	466b      	mov	r3, sp
 8012dae:	4622      	mov	r2, r4
 8012db0:	a941      	add	r1, sp, #260	@ 0x104
 8012db2:	4630      	mov	r0, r6
 8012db4:	f000 f87c 	bl	8012eb0 <_scanf_i>
 8012db8:	e7b4      	b.n	8012d24 <__ssvfiscanf_r+0x210>
 8012dba:	bf00      	nop
 8012dbc:	08012a65 	.word	0x08012a65
 8012dc0:	08012adb 	.word	0x08012adb
 8012dc4:	08016819 	.word	0x08016819
 8012dc8:	0801691f 	.word	0x0801691f
 8012dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8012df8 <__ssvfiscanf_r+0x2e4>)
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f43f aec5 	beq.w	8012b5e <__ssvfiscanf_r+0x4a>
 8012dd4:	466b      	mov	r3, sp
 8012dd6:	4622      	mov	r2, r4
 8012dd8:	a941      	add	r1, sp, #260	@ 0x104
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f7fc fee4 	bl	800fba8 <_scanf_float>
 8012de0:	e7a0      	b.n	8012d24 <__ssvfiscanf_r+0x210>
 8012de2:	89a3      	ldrh	r3, [r4, #12]
 8012de4:	065b      	lsls	r3, r3, #25
 8012de6:	f53f af71 	bmi.w	8012ccc <__ssvfiscanf_r+0x1b8>
 8012dea:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8012dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012df2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8012df4:	e7f9      	b.n	8012dea <__ssvfiscanf_r+0x2d6>
 8012df6:	bf00      	nop
 8012df8:	0800fba9 	.word	0x0800fba9

08012dfc <_scanf_chars>:
 8012dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e00:	4615      	mov	r5, r2
 8012e02:	688a      	ldr	r2, [r1, #8]
 8012e04:	4680      	mov	r8, r0
 8012e06:	460c      	mov	r4, r1
 8012e08:	b932      	cbnz	r2, 8012e18 <_scanf_chars+0x1c>
 8012e0a:	698a      	ldr	r2, [r1, #24]
 8012e0c:	2a00      	cmp	r2, #0
 8012e0e:	bf14      	ite	ne
 8012e10:	f04f 32ff 	movne.w	r2, #4294967295
 8012e14:	2201      	moveq	r2, #1
 8012e16:	608a      	str	r2, [r1, #8]
 8012e18:	6822      	ldr	r2, [r4, #0]
 8012e1a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8012eac <_scanf_chars+0xb0>
 8012e1e:	06d1      	lsls	r1, r2, #27
 8012e20:	bf5f      	itttt	pl
 8012e22:	681a      	ldrpl	r2, [r3, #0]
 8012e24:	1d11      	addpl	r1, r2, #4
 8012e26:	6019      	strpl	r1, [r3, #0]
 8012e28:	6816      	ldrpl	r6, [r2, #0]
 8012e2a:	2700      	movs	r7, #0
 8012e2c:	69a0      	ldr	r0, [r4, #24]
 8012e2e:	b188      	cbz	r0, 8012e54 <_scanf_chars+0x58>
 8012e30:	2801      	cmp	r0, #1
 8012e32:	d107      	bne.n	8012e44 <_scanf_chars+0x48>
 8012e34:	682b      	ldr	r3, [r5, #0]
 8012e36:	781a      	ldrb	r2, [r3, #0]
 8012e38:	6963      	ldr	r3, [r4, #20]
 8012e3a:	5c9b      	ldrb	r3, [r3, r2]
 8012e3c:	b953      	cbnz	r3, 8012e54 <_scanf_chars+0x58>
 8012e3e:	2f00      	cmp	r7, #0
 8012e40:	d031      	beq.n	8012ea6 <_scanf_chars+0xaa>
 8012e42:	e022      	b.n	8012e8a <_scanf_chars+0x8e>
 8012e44:	2802      	cmp	r0, #2
 8012e46:	d120      	bne.n	8012e8a <_scanf_chars+0x8e>
 8012e48:	682b      	ldr	r3, [r5, #0]
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8012e50:	071b      	lsls	r3, r3, #28
 8012e52:	d41a      	bmi.n	8012e8a <_scanf_chars+0x8e>
 8012e54:	6823      	ldr	r3, [r4, #0]
 8012e56:	06da      	lsls	r2, r3, #27
 8012e58:	bf5e      	ittt	pl
 8012e5a:	682b      	ldrpl	r3, [r5, #0]
 8012e5c:	781b      	ldrbpl	r3, [r3, #0]
 8012e5e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8012e62:	682a      	ldr	r2, [r5, #0]
 8012e64:	686b      	ldr	r3, [r5, #4]
 8012e66:	3201      	adds	r2, #1
 8012e68:	602a      	str	r2, [r5, #0]
 8012e6a:	68a2      	ldr	r2, [r4, #8]
 8012e6c:	3b01      	subs	r3, #1
 8012e6e:	3a01      	subs	r2, #1
 8012e70:	606b      	str	r3, [r5, #4]
 8012e72:	3701      	adds	r7, #1
 8012e74:	60a2      	str	r2, [r4, #8]
 8012e76:	b142      	cbz	r2, 8012e8a <_scanf_chars+0x8e>
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	dcd7      	bgt.n	8012e2c <_scanf_chars+0x30>
 8012e7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8012e80:	4629      	mov	r1, r5
 8012e82:	4640      	mov	r0, r8
 8012e84:	4798      	blx	r3
 8012e86:	2800      	cmp	r0, #0
 8012e88:	d0d0      	beq.n	8012e2c <_scanf_chars+0x30>
 8012e8a:	6823      	ldr	r3, [r4, #0]
 8012e8c:	f013 0310 	ands.w	r3, r3, #16
 8012e90:	d105      	bne.n	8012e9e <_scanf_chars+0xa2>
 8012e92:	68e2      	ldr	r2, [r4, #12]
 8012e94:	3201      	adds	r2, #1
 8012e96:	60e2      	str	r2, [r4, #12]
 8012e98:	69a2      	ldr	r2, [r4, #24]
 8012e9a:	b102      	cbz	r2, 8012e9e <_scanf_chars+0xa2>
 8012e9c:	7033      	strb	r3, [r6, #0]
 8012e9e:	6923      	ldr	r3, [r4, #16]
 8012ea0:	443b      	add	r3, r7
 8012ea2:	6123      	str	r3, [r4, #16]
 8012ea4:	2000      	movs	r0, #0
 8012ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012eaa:	bf00      	nop
 8012eac:	08016819 	.word	0x08016819

08012eb0 <_scanf_i>:
 8012eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eb4:	4698      	mov	r8, r3
 8012eb6:	4b74      	ldr	r3, [pc, #464]	@ (8013088 <_scanf_i+0x1d8>)
 8012eb8:	460c      	mov	r4, r1
 8012eba:	4682      	mov	sl, r0
 8012ebc:	4616      	mov	r6, r2
 8012ebe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012ec2:	b087      	sub	sp, #28
 8012ec4:	ab03      	add	r3, sp, #12
 8012ec6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012eca:	4b70      	ldr	r3, [pc, #448]	@ (801308c <_scanf_i+0x1dc>)
 8012ecc:	69a1      	ldr	r1, [r4, #24]
 8012ece:	4a70      	ldr	r2, [pc, #448]	@ (8013090 <_scanf_i+0x1e0>)
 8012ed0:	2903      	cmp	r1, #3
 8012ed2:	bf08      	it	eq
 8012ed4:	461a      	moveq	r2, r3
 8012ed6:	68a3      	ldr	r3, [r4, #8]
 8012ed8:	9201      	str	r2, [sp, #4]
 8012eda:	1e5a      	subs	r2, r3, #1
 8012edc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8012ee0:	bf88      	it	hi
 8012ee2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8012ee6:	4627      	mov	r7, r4
 8012ee8:	bf82      	ittt	hi
 8012eea:	eb03 0905 	addhi.w	r9, r3, r5
 8012eee:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8012ef2:	60a3      	strhi	r3, [r4, #8]
 8012ef4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8012ef8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8012efc:	bf98      	it	ls
 8012efe:	f04f 0900 	movls.w	r9, #0
 8012f02:	6023      	str	r3, [r4, #0]
 8012f04:	463d      	mov	r5, r7
 8012f06:	f04f 0b00 	mov.w	fp, #0
 8012f0a:	6831      	ldr	r1, [r6, #0]
 8012f0c:	ab03      	add	r3, sp, #12
 8012f0e:	7809      	ldrb	r1, [r1, #0]
 8012f10:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8012f14:	2202      	movs	r2, #2
 8012f16:	f7ed f97b 	bl	8000210 <memchr>
 8012f1a:	b328      	cbz	r0, 8012f68 <_scanf_i+0xb8>
 8012f1c:	f1bb 0f01 	cmp.w	fp, #1
 8012f20:	d159      	bne.n	8012fd6 <_scanf_i+0x126>
 8012f22:	6862      	ldr	r2, [r4, #4]
 8012f24:	b92a      	cbnz	r2, 8012f32 <_scanf_i+0x82>
 8012f26:	6822      	ldr	r2, [r4, #0]
 8012f28:	2108      	movs	r1, #8
 8012f2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012f2e:	6061      	str	r1, [r4, #4]
 8012f30:	6022      	str	r2, [r4, #0]
 8012f32:	6822      	ldr	r2, [r4, #0]
 8012f34:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8012f38:	6022      	str	r2, [r4, #0]
 8012f3a:	68a2      	ldr	r2, [r4, #8]
 8012f3c:	1e51      	subs	r1, r2, #1
 8012f3e:	60a1      	str	r1, [r4, #8]
 8012f40:	b192      	cbz	r2, 8012f68 <_scanf_i+0xb8>
 8012f42:	6832      	ldr	r2, [r6, #0]
 8012f44:	1c51      	adds	r1, r2, #1
 8012f46:	6031      	str	r1, [r6, #0]
 8012f48:	7812      	ldrb	r2, [r2, #0]
 8012f4a:	f805 2b01 	strb.w	r2, [r5], #1
 8012f4e:	6872      	ldr	r2, [r6, #4]
 8012f50:	3a01      	subs	r2, #1
 8012f52:	2a00      	cmp	r2, #0
 8012f54:	6072      	str	r2, [r6, #4]
 8012f56:	dc07      	bgt.n	8012f68 <_scanf_i+0xb8>
 8012f58:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8012f5c:	4631      	mov	r1, r6
 8012f5e:	4650      	mov	r0, sl
 8012f60:	4790      	blx	r2
 8012f62:	2800      	cmp	r0, #0
 8012f64:	f040 8085 	bne.w	8013072 <_scanf_i+0x1c2>
 8012f68:	f10b 0b01 	add.w	fp, fp, #1
 8012f6c:	f1bb 0f03 	cmp.w	fp, #3
 8012f70:	d1cb      	bne.n	8012f0a <_scanf_i+0x5a>
 8012f72:	6863      	ldr	r3, [r4, #4]
 8012f74:	b90b      	cbnz	r3, 8012f7a <_scanf_i+0xca>
 8012f76:	230a      	movs	r3, #10
 8012f78:	6063      	str	r3, [r4, #4]
 8012f7a:	6863      	ldr	r3, [r4, #4]
 8012f7c:	4945      	ldr	r1, [pc, #276]	@ (8013094 <_scanf_i+0x1e4>)
 8012f7e:	6960      	ldr	r0, [r4, #20]
 8012f80:	1ac9      	subs	r1, r1, r3
 8012f82:	f000 f935 	bl	80131f0 <__sccl>
 8012f86:	f04f 0b00 	mov.w	fp, #0
 8012f8a:	68a3      	ldr	r3, [r4, #8]
 8012f8c:	6822      	ldr	r2, [r4, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d03d      	beq.n	801300e <_scanf_i+0x15e>
 8012f92:	6831      	ldr	r1, [r6, #0]
 8012f94:	6960      	ldr	r0, [r4, #20]
 8012f96:	f891 c000 	ldrb.w	ip, [r1]
 8012f9a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8012f9e:	2800      	cmp	r0, #0
 8012fa0:	d035      	beq.n	801300e <_scanf_i+0x15e>
 8012fa2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8012fa6:	d124      	bne.n	8012ff2 <_scanf_i+0x142>
 8012fa8:	0510      	lsls	r0, r2, #20
 8012faa:	d522      	bpl.n	8012ff2 <_scanf_i+0x142>
 8012fac:	f10b 0b01 	add.w	fp, fp, #1
 8012fb0:	f1b9 0f00 	cmp.w	r9, #0
 8012fb4:	d003      	beq.n	8012fbe <_scanf_i+0x10e>
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	f109 39ff 	add.w	r9, r9, #4294967295
 8012fbc:	60a3      	str	r3, [r4, #8]
 8012fbe:	6873      	ldr	r3, [r6, #4]
 8012fc0:	3b01      	subs	r3, #1
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	6073      	str	r3, [r6, #4]
 8012fc6:	dd1b      	ble.n	8013000 <_scanf_i+0x150>
 8012fc8:	6833      	ldr	r3, [r6, #0]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	6033      	str	r3, [r6, #0]
 8012fce:	68a3      	ldr	r3, [r4, #8]
 8012fd0:	3b01      	subs	r3, #1
 8012fd2:	60a3      	str	r3, [r4, #8]
 8012fd4:	e7d9      	b.n	8012f8a <_scanf_i+0xda>
 8012fd6:	f1bb 0f02 	cmp.w	fp, #2
 8012fda:	d1ae      	bne.n	8012f3a <_scanf_i+0x8a>
 8012fdc:	6822      	ldr	r2, [r4, #0]
 8012fde:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8012fe2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8012fe6:	d1bf      	bne.n	8012f68 <_scanf_i+0xb8>
 8012fe8:	2110      	movs	r1, #16
 8012fea:	6061      	str	r1, [r4, #4]
 8012fec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012ff0:	e7a2      	b.n	8012f38 <_scanf_i+0x88>
 8012ff2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8012ff6:	6022      	str	r2, [r4, #0]
 8012ff8:	780b      	ldrb	r3, [r1, #0]
 8012ffa:	f805 3b01 	strb.w	r3, [r5], #1
 8012ffe:	e7de      	b.n	8012fbe <_scanf_i+0x10e>
 8013000:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013004:	4631      	mov	r1, r6
 8013006:	4650      	mov	r0, sl
 8013008:	4798      	blx	r3
 801300a:	2800      	cmp	r0, #0
 801300c:	d0df      	beq.n	8012fce <_scanf_i+0x11e>
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	05d9      	lsls	r1, r3, #23
 8013012:	d50d      	bpl.n	8013030 <_scanf_i+0x180>
 8013014:	42bd      	cmp	r5, r7
 8013016:	d909      	bls.n	801302c <_scanf_i+0x17c>
 8013018:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801301c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013020:	4632      	mov	r2, r6
 8013022:	4650      	mov	r0, sl
 8013024:	4798      	blx	r3
 8013026:	f105 39ff 	add.w	r9, r5, #4294967295
 801302a:	464d      	mov	r5, r9
 801302c:	42bd      	cmp	r5, r7
 801302e:	d028      	beq.n	8013082 <_scanf_i+0x1d2>
 8013030:	6822      	ldr	r2, [r4, #0]
 8013032:	f012 0210 	ands.w	r2, r2, #16
 8013036:	d113      	bne.n	8013060 <_scanf_i+0x1b0>
 8013038:	702a      	strb	r2, [r5, #0]
 801303a:	6863      	ldr	r3, [r4, #4]
 801303c:	9e01      	ldr	r6, [sp, #4]
 801303e:	4639      	mov	r1, r7
 8013040:	4650      	mov	r0, sl
 8013042:	47b0      	blx	r6
 8013044:	f8d8 3000 	ldr.w	r3, [r8]
 8013048:	6821      	ldr	r1, [r4, #0]
 801304a:	1d1a      	adds	r2, r3, #4
 801304c:	f8c8 2000 	str.w	r2, [r8]
 8013050:	f011 0f20 	tst.w	r1, #32
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	d00f      	beq.n	8013078 <_scanf_i+0x1c8>
 8013058:	6018      	str	r0, [r3, #0]
 801305a:	68e3      	ldr	r3, [r4, #12]
 801305c:	3301      	adds	r3, #1
 801305e:	60e3      	str	r3, [r4, #12]
 8013060:	6923      	ldr	r3, [r4, #16]
 8013062:	1bed      	subs	r5, r5, r7
 8013064:	445d      	add	r5, fp
 8013066:	442b      	add	r3, r5
 8013068:	6123      	str	r3, [r4, #16]
 801306a:	2000      	movs	r0, #0
 801306c:	b007      	add	sp, #28
 801306e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013072:	f04f 0b00 	mov.w	fp, #0
 8013076:	e7ca      	b.n	801300e <_scanf_i+0x15e>
 8013078:	07ca      	lsls	r2, r1, #31
 801307a:	bf4c      	ite	mi
 801307c:	8018      	strhmi	r0, [r3, #0]
 801307e:	6018      	strpl	r0, [r3, #0]
 8013080:	e7eb      	b.n	801305a <_scanf_i+0x1aa>
 8013082:	2001      	movs	r0, #1
 8013084:	e7f2      	b.n	801306c <_scanf_i+0x1bc>
 8013086:	bf00      	nop
 8013088:	08016574 	.word	0x08016574
 801308c:	080127b1 	.word	0x080127b1
 8013090:	08013b4d 	.word	0x08013b4d
 8013094:	0801693a 	.word	0x0801693a

08013098 <__sflush_r>:
 8013098:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801309c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130a0:	0716      	lsls	r6, r2, #28
 80130a2:	4605      	mov	r5, r0
 80130a4:	460c      	mov	r4, r1
 80130a6:	d454      	bmi.n	8013152 <__sflush_r+0xba>
 80130a8:	684b      	ldr	r3, [r1, #4]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	dc02      	bgt.n	80130b4 <__sflush_r+0x1c>
 80130ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	dd48      	ble.n	8013146 <__sflush_r+0xae>
 80130b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130b6:	2e00      	cmp	r6, #0
 80130b8:	d045      	beq.n	8013146 <__sflush_r+0xae>
 80130ba:	2300      	movs	r3, #0
 80130bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80130c0:	682f      	ldr	r7, [r5, #0]
 80130c2:	6a21      	ldr	r1, [r4, #32]
 80130c4:	602b      	str	r3, [r5, #0]
 80130c6:	d030      	beq.n	801312a <__sflush_r+0x92>
 80130c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80130ca:	89a3      	ldrh	r3, [r4, #12]
 80130cc:	0759      	lsls	r1, r3, #29
 80130ce:	d505      	bpl.n	80130dc <__sflush_r+0x44>
 80130d0:	6863      	ldr	r3, [r4, #4]
 80130d2:	1ad2      	subs	r2, r2, r3
 80130d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80130d6:	b10b      	cbz	r3, 80130dc <__sflush_r+0x44>
 80130d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80130da:	1ad2      	subs	r2, r2, r3
 80130dc:	2300      	movs	r3, #0
 80130de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130e0:	6a21      	ldr	r1, [r4, #32]
 80130e2:	4628      	mov	r0, r5
 80130e4:	47b0      	blx	r6
 80130e6:	1c43      	adds	r3, r0, #1
 80130e8:	89a3      	ldrh	r3, [r4, #12]
 80130ea:	d106      	bne.n	80130fa <__sflush_r+0x62>
 80130ec:	6829      	ldr	r1, [r5, #0]
 80130ee:	291d      	cmp	r1, #29
 80130f0:	d82b      	bhi.n	801314a <__sflush_r+0xb2>
 80130f2:	4a2a      	ldr	r2, [pc, #168]	@ (801319c <__sflush_r+0x104>)
 80130f4:	410a      	asrs	r2, r1
 80130f6:	07d6      	lsls	r6, r2, #31
 80130f8:	d427      	bmi.n	801314a <__sflush_r+0xb2>
 80130fa:	2200      	movs	r2, #0
 80130fc:	6062      	str	r2, [r4, #4]
 80130fe:	04d9      	lsls	r1, r3, #19
 8013100:	6922      	ldr	r2, [r4, #16]
 8013102:	6022      	str	r2, [r4, #0]
 8013104:	d504      	bpl.n	8013110 <__sflush_r+0x78>
 8013106:	1c42      	adds	r2, r0, #1
 8013108:	d101      	bne.n	801310e <__sflush_r+0x76>
 801310a:	682b      	ldr	r3, [r5, #0]
 801310c:	b903      	cbnz	r3, 8013110 <__sflush_r+0x78>
 801310e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013110:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013112:	602f      	str	r7, [r5, #0]
 8013114:	b1b9      	cbz	r1, 8013146 <__sflush_r+0xae>
 8013116:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801311a:	4299      	cmp	r1, r3
 801311c:	d002      	beq.n	8013124 <__sflush_r+0x8c>
 801311e:	4628      	mov	r0, r5
 8013120:	f7fd ffbe 	bl	80110a0 <_free_r>
 8013124:	2300      	movs	r3, #0
 8013126:	6363      	str	r3, [r4, #52]	@ 0x34
 8013128:	e00d      	b.n	8013146 <__sflush_r+0xae>
 801312a:	2301      	movs	r3, #1
 801312c:	4628      	mov	r0, r5
 801312e:	47b0      	blx	r6
 8013130:	4602      	mov	r2, r0
 8013132:	1c50      	adds	r0, r2, #1
 8013134:	d1c9      	bne.n	80130ca <__sflush_r+0x32>
 8013136:	682b      	ldr	r3, [r5, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d0c6      	beq.n	80130ca <__sflush_r+0x32>
 801313c:	2b1d      	cmp	r3, #29
 801313e:	d001      	beq.n	8013144 <__sflush_r+0xac>
 8013140:	2b16      	cmp	r3, #22
 8013142:	d11e      	bne.n	8013182 <__sflush_r+0xea>
 8013144:	602f      	str	r7, [r5, #0]
 8013146:	2000      	movs	r0, #0
 8013148:	e022      	b.n	8013190 <__sflush_r+0xf8>
 801314a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801314e:	b21b      	sxth	r3, r3
 8013150:	e01b      	b.n	801318a <__sflush_r+0xf2>
 8013152:	690f      	ldr	r7, [r1, #16]
 8013154:	2f00      	cmp	r7, #0
 8013156:	d0f6      	beq.n	8013146 <__sflush_r+0xae>
 8013158:	0793      	lsls	r3, r2, #30
 801315a:	680e      	ldr	r6, [r1, #0]
 801315c:	bf08      	it	eq
 801315e:	694b      	ldreq	r3, [r1, #20]
 8013160:	600f      	str	r7, [r1, #0]
 8013162:	bf18      	it	ne
 8013164:	2300      	movne	r3, #0
 8013166:	eba6 0807 	sub.w	r8, r6, r7
 801316a:	608b      	str	r3, [r1, #8]
 801316c:	f1b8 0f00 	cmp.w	r8, #0
 8013170:	dde9      	ble.n	8013146 <__sflush_r+0xae>
 8013172:	6a21      	ldr	r1, [r4, #32]
 8013174:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013176:	4643      	mov	r3, r8
 8013178:	463a      	mov	r2, r7
 801317a:	4628      	mov	r0, r5
 801317c:	47b0      	blx	r6
 801317e:	2800      	cmp	r0, #0
 8013180:	dc08      	bgt.n	8013194 <__sflush_r+0xfc>
 8013182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801318a:	81a3      	strh	r3, [r4, #12]
 801318c:	f04f 30ff 	mov.w	r0, #4294967295
 8013190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013194:	4407      	add	r7, r0
 8013196:	eba8 0800 	sub.w	r8, r8, r0
 801319a:	e7e7      	b.n	801316c <__sflush_r+0xd4>
 801319c:	dfbffffe 	.word	0xdfbffffe

080131a0 <_fflush_r>:
 80131a0:	b538      	push	{r3, r4, r5, lr}
 80131a2:	690b      	ldr	r3, [r1, #16]
 80131a4:	4605      	mov	r5, r0
 80131a6:	460c      	mov	r4, r1
 80131a8:	b913      	cbnz	r3, 80131b0 <_fflush_r+0x10>
 80131aa:	2500      	movs	r5, #0
 80131ac:	4628      	mov	r0, r5
 80131ae:	bd38      	pop	{r3, r4, r5, pc}
 80131b0:	b118      	cbz	r0, 80131ba <_fflush_r+0x1a>
 80131b2:	6a03      	ldr	r3, [r0, #32]
 80131b4:	b90b      	cbnz	r3, 80131ba <_fflush_r+0x1a>
 80131b6:	f7fc ff97 	bl	80100e8 <__sinit>
 80131ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d0f3      	beq.n	80131aa <_fflush_r+0xa>
 80131c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80131c4:	07d0      	lsls	r0, r2, #31
 80131c6:	d404      	bmi.n	80131d2 <_fflush_r+0x32>
 80131c8:	0599      	lsls	r1, r3, #22
 80131ca:	d402      	bmi.n	80131d2 <_fflush_r+0x32>
 80131cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131ce:	f7fd f904 	bl	80103da <__retarget_lock_acquire_recursive>
 80131d2:	4628      	mov	r0, r5
 80131d4:	4621      	mov	r1, r4
 80131d6:	f7ff ff5f 	bl	8013098 <__sflush_r>
 80131da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80131dc:	07da      	lsls	r2, r3, #31
 80131de:	4605      	mov	r5, r0
 80131e0:	d4e4      	bmi.n	80131ac <_fflush_r+0xc>
 80131e2:	89a3      	ldrh	r3, [r4, #12]
 80131e4:	059b      	lsls	r3, r3, #22
 80131e6:	d4e1      	bmi.n	80131ac <_fflush_r+0xc>
 80131e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131ea:	f7fd f8f7 	bl	80103dc <__retarget_lock_release_recursive>
 80131ee:	e7dd      	b.n	80131ac <_fflush_r+0xc>

080131f0 <__sccl>:
 80131f0:	b570      	push	{r4, r5, r6, lr}
 80131f2:	780b      	ldrb	r3, [r1, #0]
 80131f4:	4604      	mov	r4, r0
 80131f6:	2b5e      	cmp	r3, #94	@ 0x5e
 80131f8:	bf0b      	itete	eq
 80131fa:	784b      	ldrbeq	r3, [r1, #1]
 80131fc:	1c4a      	addne	r2, r1, #1
 80131fe:	1c8a      	addeq	r2, r1, #2
 8013200:	2100      	movne	r1, #0
 8013202:	bf08      	it	eq
 8013204:	2101      	moveq	r1, #1
 8013206:	3801      	subs	r0, #1
 8013208:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801320c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8013210:	42a8      	cmp	r0, r5
 8013212:	d1fb      	bne.n	801320c <__sccl+0x1c>
 8013214:	b90b      	cbnz	r3, 801321a <__sccl+0x2a>
 8013216:	1e50      	subs	r0, r2, #1
 8013218:	bd70      	pop	{r4, r5, r6, pc}
 801321a:	f081 0101 	eor.w	r1, r1, #1
 801321e:	54e1      	strb	r1, [r4, r3]
 8013220:	4610      	mov	r0, r2
 8013222:	4602      	mov	r2, r0
 8013224:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013228:	2d2d      	cmp	r5, #45	@ 0x2d
 801322a:	d005      	beq.n	8013238 <__sccl+0x48>
 801322c:	2d5d      	cmp	r5, #93	@ 0x5d
 801322e:	d016      	beq.n	801325e <__sccl+0x6e>
 8013230:	2d00      	cmp	r5, #0
 8013232:	d0f1      	beq.n	8013218 <__sccl+0x28>
 8013234:	462b      	mov	r3, r5
 8013236:	e7f2      	b.n	801321e <__sccl+0x2e>
 8013238:	7846      	ldrb	r6, [r0, #1]
 801323a:	2e5d      	cmp	r6, #93	@ 0x5d
 801323c:	d0fa      	beq.n	8013234 <__sccl+0x44>
 801323e:	42b3      	cmp	r3, r6
 8013240:	dcf8      	bgt.n	8013234 <__sccl+0x44>
 8013242:	3002      	adds	r0, #2
 8013244:	461a      	mov	r2, r3
 8013246:	3201      	adds	r2, #1
 8013248:	4296      	cmp	r6, r2
 801324a:	54a1      	strb	r1, [r4, r2]
 801324c:	dcfb      	bgt.n	8013246 <__sccl+0x56>
 801324e:	1af2      	subs	r2, r6, r3
 8013250:	3a01      	subs	r2, #1
 8013252:	1c5d      	adds	r5, r3, #1
 8013254:	42b3      	cmp	r3, r6
 8013256:	bfa8      	it	ge
 8013258:	2200      	movge	r2, #0
 801325a:	18ab      	adds	r3, r5, r2
 801325c:	e7e1      	b.n	8013222 <__sccl+0x32>
 801325e:	4610      	mov	r0, r2
 8013260:	e7da      	b.n	8013218 <__sccl+0x28>

08013262 <__submore>:
 8013262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013266:	460c      	mov	r4, r1
 8013268:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801326a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801326e:	4299      	cmp	r1, r3
 8013270:	d11d      	bne.n	80132ae <__submore+0x4c>
 8013272:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8013276:	f7fb ffb3 	bl	800f1e0 <_malloc_r>
 801327a:	b918      	cbnz	r0, 8013284 <__submore+0x22>
 801327c:	f04f 30ff 	mov.w	r0, #4294967295
 8013280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013288:	63a3      	str	r3, [r4, #56]	@ 0x38
 801328a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801328e:	6360      	str	r0, [r4, #52]	@ 0x34
 8013290:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8013294:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8013298:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801329c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80132a0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80132a4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80132a8:	6020      	str	r0, [r4, #0]
 80132aa:	2000      	movs	r0, #0
 80132ac:	e7e8      	b.n	8013280 <__submore+0x1e>
 80132ae:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80132b0:	0077      	lsls	r7, r6, #1
 80132b2:	463a      	mov	r2, r7
 80132b4:	f000 fbad 	bl	8013a12 <_realloc_r>
 80132b8:	4605      	mov	r5, r0
 80132ba:	2800      	cmp	r0, #0
 80132bc:	d0de      	beq.n	801327c <__submore+0x1a>
 80132be:	eb00 0806 	add.w	r8, r0, r6
 80132c2:	4601      	mov	r1, r0
 80132c4:	4632      	mov	r2, r6
 80132c6:	4640      	mov	r0, r8
 80132c8:	f7fd f889 	bl	80103de <memcpy>
 80132cc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80132d0:	f8c4 8000 	str.w	r8, [r4]
 80132d4:	e7e9      	b.n	80132aa <__submore+0x48>

080132d6 <memmove>:
 80132d6:	4288      	cmp	r0, r1
 80132d8:	b510      	push	{r4, lr}
 80132da:	eb01 0402 	add.w	r4, r1, r2
 80132de:	d902      	bls.n	80132e6 <memmove+0x10>
 80132e0:	4284      	cmp	r4, r0
 80132e2:	4623      	mov	r3, r4
 80132e4:	d807      	bhi.n	80132f6 <memmove+0x20>
 80132e6:	1e43      	subs	r3, r0, #1
 80132e8:	42a1      	cmp	r1, r4
 80132ea:	d008      	beq.n	80132fe <memmove+0x28>
 80132ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132f4:	e7f8      	b.n	80132e8 <memmove+0x12>
 80132f6:	4402      	add	r2, r0
 80132f8:	4601      	mov	r1, r0
 80132fa:	428a      	cmp	r2, r1
 80132fc:	d100      	bne.n	8013300 <memmove+0x2a>
 80132fe:	bd10      	pop	{r4, pc}
 8013300:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013304:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013308:	e7f7      	b.n	80132fa <memmove+0x24>

0801330a <strncmp>:
 801330a:	b510      	push	{r4, lr}
 801330c:	b16a      	cbz	r2, 801332a <strncmp+0x20>
 801330e:	3901      	subs	r1, #1
 8013310:	1884      	adds	r4, r0, r2
 8013312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013316:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801331a:	429a      	cmp	r2, r3
 801331c:	d103      	bne.n	8013326 <strncmp+0x1c>
 801331e:	42a0      	cmp	r0, r4
 8013320:	d001      	beq.n	8013326 <strncmp+0x1c>
 8013322:	2a00      	cmp	r2, #0
 8013324:	d1f5      	bne.n	8013312 <strncmp+0x8>
 8013326:	1ad0      	subs	r0, r2, r3
 8013328:	bd10      	pop	{r4, pc}
 801332a:	4610      	mov	r0, r2
 801332c:	e7fc      	b.n	8013328 <strncmp+0x1e>
	...

08013330 <nan>:
 8013330:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8013338 <nan+0x8>
 8013334:	4770      	bx	lr
 8013336:	bf00      	nop
 8013338:	00000000 	.word	0x00000000
 801333c:	7ff80000 	.word	0x7ff80000

08013340 <__assert_func>:
 8013340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013342:	4614      	mov	r4, r2
 8013344:	461a      	mov	r2, r3
 8013346:	4b09      	ldr	r3, [pc, #36]	@ (801336c <__assert_func+0x2c>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	4605      	mov	r5, r0
 801334c:	68d8      	ldr	r0, [r3, #12]
 801334e:	b954      	cbnz	r4, 8013366 <__assert_func+0x26>
 8013350:	4b07      	ldr	r3, [pc, #28]	@ (8013370 <__assert_func+0x30>)
 8013352:	461c      	mov	r4, r3
 8013354:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013358:	9100      	str	r1, [sp, #0]
 801335a:	462b      	mov	r3, r5
 801335c:	4905      	ldr	r1, [pc, #20]	@ (8013374 <__assert_func+0x34>)
 801335e:	f000 fc05 	bl	8013b6c <fiprintf>
 8013362:	f000 fc15 	bl	8013b90 <abort>
 8013366:	4b04      	ldr	r3, [pc, #16]	@ (8013378 <__assert_func+0x38>)
 8013368:	e7f4      	b.n	8013354 <__assert_func+0x14>
 801336a:	bf00      	nop
 801336c:	20000078 	.word	0x20000078
 8013370:	08016988 	.word	0x08016988
 8013374:	0801695a 	.word	0x0801695a
 8013378:	0801694d 	.word	0x0801694d

0801337c <rshift>:
 801337c:	6903      	ldr	r3, [r0, #16]
 801337e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8013382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013386:	ea4f 1261 	mov.w	r2, r1, asr #5
 801338a:	f100 0414 	add.w	r4, r0, #20
 801338e:	dd45      	ble.n	801341c <rshift+0xa0>
 8013390:	f011 011f 	ands.w	r1, r1, #31
 8013394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8013398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801339c:	d10c      	bne.n	80133b8 <rshift+0x3c>
 801339e:	f100 0710 	add.w	r7, r0, #16
 80133a2:	4629      	mov	r1, r5
 80133a4:	42b1      	cmp	r1, r6
 80133a6:	d334      	bcc.n	8013412 <rshift+0x96>
 80133a8:	1a9b      	subs	r3, r3, r2
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	1eea      	subs	r2, r5, #3
 80133ae:	4296      	cmp	r6, r2
 80133b0:	bf38      	it	cc
 80133b2:	2300      	movcc	r3, #0
 80133b4:	4423      	add	r3, r4
 80133b6:	e015      	b.n	80133e4 <rshift+0x68>
 80133b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80133bc:	f1c1 0820 	rsb	r8, r1, #32
 80133c0:	40cf      	lsrs	r7, r1
 80133c2:	f105 0e04 	add.w	lr, r5, #4
 80133c6:	46a1      	mov	r9, r4
 80133c8:	4576      	cmp	r6, lr
 80133ca:	46f4      	mov	ip, lr
 80133cc:	d815      	bhi.n	80133fa <rshift+0x7e>
 80133ce:	1a9a      	subs	r2, r3, r2
 80133d0:	0092      	lsls	r2, r2, #2
 80133d2:	3a04      	subs	r2, #4
 80133d4:	3501      	adds	r5, #1
 80133d6:	42ae      	cmp	r6, r5
 80133d8:	bf38      	it	cc
 80133da:	2200      	movcc	r2, #0
 80133dc:	18a3      	adds	r3, r4, r2
 80133de:	50a7      	str	r7, [r4, r2]
 80133e0:	b107      	cbz	r7, 80133e4 <rshift+0x68>
 80133e2:	3304      	adds	r3, #4
 80133e4:	1b1a      	subs	r2, r3, r4
 80133e6:	42a3      	cmp	r3, r4
 80133e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80133ec:	bf08      	it	eq
 80133ee:	2300      	moveq	r3, #0
 80133f0:	6102      	str	r2, [r0, #16]
 80133f2:	bf08      	it	eq
 80133f4:	6143      	streq	r3, [r0, #20]
 80133f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133fa:	f8dc c000 	ldr.w	ip, [ip]
 80133fe:	fa0c fc08 	lsl.w	ip, ip, r8
 8013402:	ea4c 0707 	orr.w	r7, ip, r7
 8013406:	f849 7b04 	str.w	r7, [r9], #4
 801340a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801340e:	40cf      	lsrs	r7, r1
 8013410:	e7da      	b.n	80133c8 <rshift+0x4c>
 8013412:	f851 cb04 	ldr.w	ip, [r1], #4
 8013416:	f847 cf04 	str.w	ip, [r7, #4]!
 801341a:	e7c3      	b.n	80133a4 <rshift+0x28>
 801341c:	4623      	mov	r3, r4
 801341e:	e7e1      	b.n	80133e4 <rshift+0x68>

08013420 <__hexdig_fun>:
 8013420:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8013424:	2b09      	cmp	r3, #9
 8013426:	d802      	bhi.n	801342e <__hexdig_fun+0xe>
 8013428:	3820      	subs	r0, #32
 801342a:	b2c0      	uxtb	r0, r0
 801342c:	4770      	bx	lr
 801342e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8013432:	2b05      	cmp	r3, #5
 8013434:	d801      	bhi.n	801343a <__hexdig_fun+0x1a>
 8013436:	3847      	subs	r0, #71	@ 0x47
 8013438:	e7f7      	b.n	801342a <__hexdig_fun+0xa>
 801343a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801343e:	2b05      	cmp	r3, #5
 8013440:	d801      	bhi.n	8013446 <__hexdig_fun+0x26>
 8013442:	3827      	subs	r0, #39	@ 0x27
 8013444:	e7f1      	b.n	801342a <__hexdig_fun+0xa>
 8013446:	2000      	movs	r0, #0
 8013448:	4770      	bx	lr
	...

0801344c <__gethex>:
 801344c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013450:	b085      	sub	sp, #20
 8013452:	468a      	mov	sl, r1
 8013454:	9302      	str	r3, [sp, #8]
 8013456:	680b      	ldr	r3, [r1, #0]
 8013458:	9001      	str	r0, [sp, #4]
 801345a:	4690      	mov	r8, r2
 801345c:	1c9c      	adds	r4, r3, #2
 801345e:	46a1      	mov	r9, r4
 8013460:	f814 0b01 	ldrb.w	r0, [r4], #1
 8013464:	2830      	cmp	r0, #48	@ 0x30
 8013466:	d0fa      	beq.n	801345e <__gethex+0x12>
 8013468:	eba9 0303 	sub.w	r3, r9, r3
 801346c:	f1a3 0b02 	sub.w	fp, r3, #2
 8013470:	f7ff ffd6 	bl	8013420 <__hexdig_fun>
 8013474:	4605      	mov	r5, r0
 8013476:	2800      	cmp	r0, #0
 8013478:	d168      	bne.n	801354c <__gethex+0x100>
 801347a:	49a0      	ldr	r1, [pc, #640]	@ (80136fc <__gethex+0x2b0>)
 801347c:	2201      	movs	r2, #1
 801347e:	4648      	mov	r0, r9
 8013480:	f7ff ff43 	bl	801330a <strncmp>
 8013484:	4607      	mov	r7, r0
 8013486:	2800      	cmp	r0, #0
 8013488:	d167      	bne.n	801355a <__gethex+0x10e>
 801348a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801348e:	4626      	mov	r6, r4
 8013490:	f7ff ffc6 	bl	8013420 <__hexdig_fun>
 8013494:	2800      	cmp	r0, #0
 8013496:	d062      	beq.n	801355e <__gethex+0x112>
 8013498:	4623      	mov	r3, r4
 801349a:	7818      	ldrb	r0, [r3, #0]
 801349c:	2830      	cmp	r0, #48	@ 0x30
 801349e:	4699      	mov	r9, r3
 80134a0:	f103 0301 	add.w	r3, r3, #1
 80134a4:	d0f9      	beq.n	801349a <__gethex+0x4e>
 80134a6:	f7ff ffbb 	bl	8013420 <__hexdig_fun>
 80134aa:	fab0 f580 	clz	r5, r0
 80134ae:	096d      	lsrs	r5, r5, #5
 80134b0:	f04f 0b01 	mov.w	fp, #1
 80134b4:	464a      	mov	r2, r9
 80134b6:	4616      	mov	r6, r2
 80134b8:	3201      	adds	r2, #1
 80134ba:	7830      	ldrb	r0, [r6, #0]
 80134bc:	f7ff ffb0 	bl	8013420 <__hexdig_fun>
 80134c0:	2800      	cmp	r0, #0
 80134c2:	d1f8      	bne.n	80134b6 <__gethex+0x6a>
 80134c4:	498d      	ldr	r1, [pc, #564]	@ (80136fc <__gethex+0x2b0>)
 80134c6:	2201      	movs	r2, #1
 80134c8:	4630      	mov	r0, r6
 80134ca:	f7ff ff1e 	bl	801330a <strncmp>
 80134ce:	2800      	cmp	r0, #0
 80134d0:	d13f      	bne.n	8013552 <__gethex+0x106>
 80134d2:	b944      	cbnz	r4, 80134e6 <__gethex+0x9a>
 80134d4:	1c74      	adds	r4, r6, #1
 80134d6:	4622      	mov	r2, r4
 80134d8:	4616      	mov	r6, r2
 80134da:	3201      	adds	r2, #1
 80134dc:	7830      	ldrb	r0, [r6, #0]
 80134de:	f7ff ff9f 	bl	8013420 <__hexdig_fun>
 80134e2:	2800      	cmp	r0, #0
 80134e4:	d1f8      	bne.n	80134d8 <__gethex+0x8c>
 80134e6:	1ba4      	subs	r4, r4, r6
 80134e8:	00a7      	lsls	r7, r4, #2
 80134ea:	7833      	ldrb	r3, [r6, #0]
 80134ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80134f0:	2b50      	cmp	r3, #80	@ 0x50
 80134f2:	d13e      	bne.n	8013572 <__gethex+0x126>
 80134f4:	7873      	ldrb	r3, [r6, #1]
 80134f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80134f8:	d033      	beq.n	8013562 <__gethex+0x116>
 80134fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80134fc:	d034      	beq.n	8013568 <__gethex+0x11c>
 80134fe:	1c71      	adds	r1, r6, #1
 8013500:	2400      	movs	r4, #0
 8013502:	7808      	ldrb	r0, [r1, #0]
 8013504:	f7ff ff8c 	bl	8013420 <__hexdig_fun>
 8013508:	1e43      	subs	r3, r0, #1
 801350a:	b2db      	uxtb	r3, r3
 801350c:	2b18      	cmp	r3, #24
 801350e:	d830      	bhi.n	8013572 <__gethex+0x126>
 8013510:	f1a0 0210 	sub.w	r2, r0, #16
 8013514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013518:	f7ff ff82 	bl	8013420 <__hexdig_fun>
 801351c:	f100 3cff 	add.w	ip, r0, #4294967295
 8013520:	fa5f fc8c 	uxtb.w	ip, ip
 8013524:	f1bc 0f18 	cmp.w	ip, #24
 8013528:	f04f 030a 	mov.w	r3, #10
 801352c:	d91e      	bls.n	801356c <__gethex+0x120>
 801352e:	b104      	cbz	r4, 8013532 <__gethex+0xe6>
 8013530:	4252      	negs	r2, r2
 8013532:	4417      	add	r7, r2
 8013534:	f8ca 1000 	str.w	r1, [sl]
 8013538:	b1ed      	cbz	r5, 8013576 <__gethex+0x12a>
 801353a:	f1bb 0f00 	cmp.w	fp, #0
 801353e:	bf0c      	ite	eq
 8013540:	2506      	moveq	r5, #6
 8013542:	2500      	movne	r5, #0
 8013544:	4628      	mov	r0, r5
 8013546:	b005      	add	sp, #20
 8013548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354c:	2500      	movs	r5, #0
 801354e:	462c      	mov	r4, r5
 8013550:	e7b0      	b.n	80134b4 <__gethex+0x68>
 8013552:	2c00      	cmp	r4, #0
 8013554:	d1c7      	bne.n	80134e6 <__gethex+0x9a>
 8013556:	4627      	mov	r7, r4
 8013558:	e7c7      	b.n	80134ea <__gethex+0x9e>
 801355a:	464e      	mov	r6, r9
 801355c:	462f      	mov	r7, r5
 801355e:	2501      	movs	r5, #1
 8013560:	e7c3      	b.n	80134ea <__gethex+0x9e>
 8013562:	2400      	movs	r4, #0
 8013564:	1cb1      	adds	r1, r6, #2
 8013566:	e7cc      	b.n	8013502 <__gethex+0xb6>
 8013568:	2401      	movs	r4, #1
 801356a:	e7fb      	b.n	8013564 <__gethex+0x118>
 801356c:	fb03 0002 	mla	r0, r3, r2, r0
 8013570:	e7ce      	b.n	8013510 <__gethex+0xc4>
 8013572:	4631      	mov	r1, r6
 8013574:	e7de      	b.n	8013534 <__gethex+0xe8>
 8013576:	eba6 0309 	sub.w	r3, r6, r9
 801357a:	3b01      	subs	r3, #1
 801357c:	4629      	mov	r1, r5
 801357e:	2b07      	cmp	r3, #7
 8013580:	dc0a      	bgt.n	8013598 <__gethex+0x14c>
 8013582:	9801      	ldr	r0, [sp, #4]
 8013584:	f7fd fdde 	bl	8011144 <_Balloc>
 8013588:	4604      	mov	r4, r0
 801358a:	b940      	cbnz	r0, 801359e <__gethex+0x152>
 801358c:	4b5c      	ldr	r3, [pc, #368]	@ (8013700 <__gethex+0x2b4>)
 801358e:	4602      	mov	r2, r0
 8013590:	21e4      	movs	r1, #228	@ 0xe4
 8013592:	485c      	ldr	r0, [pc, #368]	@ (8013704 <__gethex+0x2b8>)
 8013594:	f7ff fed4 	bl	8013340 <__assert_func>
 8013598:	3101      	adds	r1, #1
 801359a:	105b      	asrs	r3, r3, #1
 801359c:	e7ef      	b.n	801357e <__gethex+0x132>
 801359e:	f100 0a14 	add.w	sl, r0, #20
 80135a2:	2300      	movs	r3, #0
 80135a4:	4655      	mov	r5, sl
 80135a6:	469b      	mov	fp, r3
 80135a8:	45b1      	cmp	r9, r6
 80135aa:	d337      	bcc.n	801361c <__gethex+0x1d0>
 80135ac:	f845 bb04 	str.w	fp, [r5], #4
 80135b0:	eba5 050a 	sub.w	r5, r5, sl
 80135b4:	10ad      	asrs	r5, r5, #2
 80135b6:	6125      	str	r5, [r4, #16]
 80135b8:	4658      	mov	r0, fp
 80135ba:	f7fd feb5 	bl	8011328 <__hi0bits>
 80135be:	016d      	lsls	r5, r5, #5
 80135c0:	f8d8 6000 	ldr.w	r6, [r8]
 80135c4:	1a2d      	subs	r5, r5, r0
 80135c6:	42b5      	cmp	r5, r6
 80135c8:	dd54      	ble.n	8013674 <__gethex+0x228>
 80135ca:	1bad      	subs	r5, r5, r6
 80135cc:	4629      	mov	r1, r5
 80135ce:	4620      	mov	r0, r4
 80135d0:	f7fe fa49 	bl	8011a66 <__any_on>
 80135d4:	4681      	mov	r9, r0
 80135d6:	b178      	cbz	r0, 80135f8 <__gethex+0x1ac>
 80135d8:	1e6b      	subs	r3, r5, #1
 80135da:	1159      	asrs	r1, r3, #5
 80135dc:	f003 021f 	and.w	r2, r3, #31
 80135e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80135e4:	f04f 0901 	mov.w	r9, #1
 80135e8:	fa09 f202 	lsl.w	r2, r9, r2
 80135ec:	420a      	tst	r2, r1
 80135ee:	d003      	beq.n	80135f8 <__gethex+0x1ac>
 80135f0:	454b      	cmp	r3, r9
 80135f2:	dc36      	bgt.n	8013662 <__gethex+0x216>
 80135f4:	f04f 0902 	mov.w	r9, #2
 80135f8:	4629      	mov	r1, r5
 80135fa:	4620      	mov	r0, r4
 80135fc:	f7ff febe 	bl	801337c <rshift>
 8013600:	442f      	add	r7, r5
 8013602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013606:	42bb      	cmp	r3, r7
 8013608:	da42      	bge.n	8013690 <__gethex+0x244>
 801360a:	9801      	ldr	r0, [sp, #4]
 801360c:	4621      	mov	r1, r4
 801360e:	f7fd fdd9 	bl	80111c4 <_Bfree>
 8013612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013614:	2300      	movs	r3, #0
 8013616:	6013      	str	r3, [r2, #0]
 8013618:	25a3      	movs	r5, #163	@ 0xa3
 801361a:	e793      	b.n	8013544 <__gethex+0xf8>
 801361c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8013620:	2a2e      	cmp	r2, #46	@ 0x2e
 8013622:	d012      	beq.n	801364a <__gethex+0x1fe>
 8013624:	2b20      	cmp	r3, #32
 8013626:	d104      	bne.n	8013632 <__gethex+0x1e6>
 8013628:	f845 bb04 	str.w	fp, [r5], #4
 801362c:	f04f 0b00 	mov.w	fp, #0
 8013630:	465b      	mov	r3, fp
 8013632:	7830      	ldrb	r0, [r6, #0]
 8013634:	9303      	str	r3, [sp, #12]
 8013636:	f7ff fef3 	bl	8013420 <__hexdig_fun>
 801363a:	9b03      	ldr	r3, [sp, #12]
 801363c:	f000 000f 	and.w	r0, r0, #15
 8013640:	4098      	lsls	r0, r3
 8013642:	ea4b 0b00 	orr.w	fp, fp, r0
 8013646:	3304      	adds	r3, #4
 8013648:	e7ae      	b.n	80135a8 <__gethex+0x15c>
 801364a:	45b1      	cmp	r9, r6
 801364c:	d8ea      	bhi.n	8013624 <__gethex+0x1d8>
 801364e:	492b      	ldr	r1, [pc, #172]	@ (80136fc <__gethex+0x2b0>)
 8013650:	9303      	str	r3, [sp, #12]
 8013652:	2201      	movs	r2, #1
 8013654:	4630      	mov	r0, r6
 8013656:	f7ff fe58 	bl	801330a <strncmp>
 801365a:	9b03      	ldr	r3, [sp, #12]
 801365c:	2800      	cmp	r0, #0
 801365e:	d1e1      	bne.n	8013624 <__gethex+0x1d8>
 8013660:	e7a2      	b.n	80135a8 <__gethex+0x15c>
 8013662:	1ea9      	subs	r1, r5, #2
 8013664:	4620      	mov	r0, r4
 8013666:	f7fe f9fe 	bl	8011a66 <__any_on>
 801366a:	2800      	cmp	r0, #0
 801366c:	d0c2      	beq.n	80135f4 <__gethex+0x1a8>
 801366e:	f04f 0903 	mov.w	r9, #3
 8013672:	e7c1      	b.n	80135f8 <__gethex+0x1ac>
 8013674:	da09      	bge.n	801368a <__gethex+0x23e>
 8013676:	1b75      	subs	r5, r6, r5
 8013678:	4621      	mov	r1, r4
 801367a:	9801      	ldr	r0, [sp, #4]
 801367c:	462a      	mov	r2, r5
 801367e:	f7fd ffb9 	bl	80115f4 <__lshift>
 8013682:	1b7f      	subs	r7, r7, r5
 8013684:	4604      	mov	r4, r0
 8013686:	f100 0a14 	add.w	sl, r0, #20
 801368a:	f04f 0900 	mov.w	r9, #0
 801368e:	e7b8      	b.n	8013602 <__gethex+0x1b6>
 8013690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8013694:	42bd      	cmp	r5, r7
 8013696:	dd6f      	ble.n	8013778 <__gethex+0x32c>
 8013698:	1bed      	subs	r5, r5, r7
 801369a:	42ae      	cmp	r6, r5
 801369c:	dc34      	bgt.n	8013708 <__gethex+0x2bc>
 801369e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80136a2:	2b02      	cmp	r3, #2
 80136a4:	d022      	beq.n	80136ec <__gethex+0x2a0>
 80136a6:	2b03      	cmp	r3, #3
 80136a8:	d024      	beq.n	80136f4 <__gethex+0x2a8>
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d115      	bne.n	80136da <__gethex+0x28e>
 80136ae:	42ae      	cmp	r6, r5
 80136b0:	d113      	bne.n	80136da <__gethex+0x28e>
 80136b2:	2e01      	cmp	r6, #1
 80136b4:	d10b      	bne.n	80136ce <__gethex+0x282>
 80136b6:	9a02      	ldr	r2, [sp, #8]
 80136b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80136bc:	6013      	str	r3, [r2, #0]
 80136be:	2301      	movs	r3, #1
 80136c0:	6123      	str	r3, [r4, #16]
 80136c2:	f8ca 3000 	str.w	r3, [sl]
 80136c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80136c8:	2562      	movs	r5, #98	@ 0x62
 80136ca:	601c      	str	r4, [r3, #0]
 80136cc:	e73a      	b.n	8013544 <__gethex+0xf8>
 80136ce:	1e71      	subs	r1, r6, #1
 80136d0:	4620      	mov	r0, r4
 80136d2:	f7fe f9c8 	bl	8011a66 <__any_on>
 80136d6:	2800      	cmp	r0, #0
 80136d8:	d1ed      	bne.n	80136b6 <__gethex+0x26a>
 80136da:	9801      	ldr	r0, [sp, #4]
 80136dc:	4621      	mov	r1, r4
 80136de:	f7fd fd71 	bl	80111c4 <_Bfree>
 80136e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80136e4:	2300      	movs	r3, #0
 80136e6:	6013      	str	r3, [r2, #0]
 80136e8:	2550      	movs	r5, #80	@ 0x50
 80136ea:	e72b      	b.n	8013544 <__gethex+0xf8>
 80136ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	d1f3      	bne.n	80136da <__gethex+0x28e>
 80136f2:	e7e0      	b.n	80136b6 <__gethex+0x26a>
 80136f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d1dd      	bne.n	80136b6 <__gethex+0x26a>
 80136fa:	e7ee      	b.n	80136da <__gethex+0x28e>
 80136fc:	080167c0 	.word	0x080167c0
 8013700:	08016653 	.word	0x08016653
 8013704:	08016989 	.word	0x08016989
 8013708:	1e6f      	subs	r7, r5, #1
 801370a:	f1b9 0f00 	cmp.w	r9, #0
 801370e:	d130      	bne.n	8013772 <__gethex+0x326>
 8013710:	b127      	cbz	r7, 801371c <__gethex+0x2d0>
 8013712:	4639      	mov	r1, r7
 8013714:	4620      	mov	r0, r4
 8013716:	f7fe f9a6 	bl	8011a66 <__any_on>
 801371a:	4681      	mov	r9, r0
 801371c:	117a      	asrs	r2, r7, #5
 801371e:	2301      	movs	r3, #1
 8013720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013724:	f007 071f 	and.w	r7, r7, #31
 8013728:	40bb      	lsls	r3, r7
 801372a:	4213      	tst	r3, r2
 801372c:	4629      	mov	r1, r5
 801372e:	4620      	mov	r0, r4
 8013730:	bf18      	it	ne
 8013732:	f049 0902 	orrne.w	r9, r9, #2
 8013736:	f7ff fe21 	bl	801337c <rshift>
 801373a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801373e:	1b76      	subs	r6, r6, r5
 8013740:	2502      	movs	r5, #2
 8013742:	f1b9 0f00 	cmp.w	r9, #0
 8013746:	d047      	beq.n	80137d8 <__gethex+0x38c>
 8013748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801374c:	2b02      	cmp	r3, #2
 801374e:	d015      	beq.n	801377c <__gethex+0x330>
 8013750:	2b03      	cmp	r3, #3
 8013752:	d017      	beq.n	8013784 <__gethex+0x338>
 8013754:	2b01      	cmp	r3, #1
 8013756:	d109      	bne.n	801376c <__gethex+0x320>
 8013758:	f019 0f02 	tst.w	r9, #2
 801375c:	d006      	beq.n	801376c <__gethex+0x320>
 801375e:	f8da 3000 	ldr.w	r3, [sl]
 8013762:	ea49 0903 	orr.w	r9, r9, r3
 8013766:	f019 0f01 	tst.w	r9, #1
 801376a:	d10e      	bne.n	801378a <__gethex+0x33e>
 801376c:	f045 0510 	orr.w	r5, r5, #16
 8013770:	e032      	b.n	80137d8 <__gethex+0x38c>
 8013772:	f04f 0901 	mov.w	r9, #1
 8013776:	e7d1      	b.n	801371c <__gethex+0x2d0>
 8013778:	2501      	movs	r5, #1
 801377a:	e7e2      	b.n	8013742 <__gethex+0x2f6>
 801377c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801377e:	f1c3 0301 	rsb	r3, r3, #1
 8013782:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013786:	2b00      	cmp	r3, #0
 8013788:	d0f0      	beq.n	801376c <__gethex+0x320>
 801378a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801378e:	f104 0314 	add.w	r3, r4, #20
 8013792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8013796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801379a:	f04f 0c00 	mov.w	ip, #0
 801379e:	4618      	mov	r0, r3
 80137a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80137a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80137a8:	d01b      	beq.n	80137e2 <__gethex+0x396>
 80137aa:	3201      	adds	r2, #1
 80137ac:	6002      	str	r2, [r0, #0]
 80137ae:	2d02      	cmp	r5, #2
 80137b0:	f104 0314 	add.w	r3, r4, #20
 80137b4:	d13c      	bne.n	8013830 <__gethex+0x3e4>
 80137b6:	f8d8 2000 	ldr.w	r2, [r8]
 80137ba:	3a01      	subs	r2, #1
 80137bc:	42b2      	cmp	r2, r6
 80137be:	d109      	bne.n	80137d4 <__gethex+0x388>
 80137c0:	1171      	asrs	r1, r6, #5
 80137c2:	2201      	movs	r2, #1
 80137c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80137c8:	f006 061f 	and.w	r6, r6, #31
 80137cc:	fa02 f606 	lsl.w	r6, r2, r6
 80137d0:	421e      	tst	r6, r3
 80137d2:	d13a      	bne.n	801384a <__gethex+0x3fe>
 80137d4:	f045 0520 	orr.w	r5, r5, #32
 80137d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80137da:	601c      	str	r4, [r3, #0]
 80137dc:	9b02      	ldr	r3, [sp, #8]
 80137de:	601f      	str	r7, [r3, #0]
 80137e0:	e6b0      	b.n	8013544 <__gethex+0xf8>
 80137e2:	4299      	cmp	r1, r3
 80137e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80137e8:	d8d9      	bhi.n	801379e <__gethex+0x352>
 80137ea:	68a3      	ldr	r3, [r4, #8]
 80137ec:	459b      	cmp	fp, r3
 80137ee:	db17      	blt.n	8013820 <__gethex+0x3d4>
 80137f0:	6861      	ldr	r1, [r4, #4]
 80137f2:	9801      	ldr	r0, [sp, #4]
 80137f4:	3101      	adds	r1, #1
 80137f6:	f7fd fca5 	bl	8011144 <_Balloc>
 80137fa:	4681      	mov	r9, r0
 80137fc:	b918      	cbnz	r0, 8013806 <__gethex+0x3ba>
 80137fe:	4b1a      	ldr	r3, [pc, #104]	@ (8013868 <__gethex+0x41c>)
 8013800:	4602      	mov	r2, r0
 8013802:	2184      	movs	r1, #132	@ 0x84
 8013804:	e6c5      	b.n	8013592 <__gethex+0x146>
 8013806:	6922      	ldr	r2, [r4, #16]
 8013808:	3202      	adds	r2, #2
 801380a:	f104 010c 	add.w	r1, r4, #12
 801380e:	0092      	lsls	r2, r2, #2
 8013810:	300c      	adds	r0, #12
 8013812:	f7fc fde4 	bl	80103de <memcpy>
 8013816:	4621      	mov	r1, r4
 8013818:	9801      	ldr	r0, [sp, #4]
 801381a:	f7fd fcd3 	bl	80111c4 <_Bfree>
 801381e:	464c      	mov	r4, r9
 8013820:	6923      	ldr	r3, [r4, #16]
 8013822:	1c5a      	adds	r2, r3, #1
 8013824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013828:	6122      	str	r2, [r4, #16]
 801382a:	2201      	movs	r2, #1
 801382c:	615a      	str	r2, [r3, #20]
 801382e:	e7be      	b.n	80137ae <__gethex+0x362>
 8013830:	6922      	ldr	r2, [r4, #16]
 8013832:	455a      	cmp	r2, fp
 8013834:	dd0b      	ble.n	801384e <__gethex+0x402>
 8013836:	2101      	movs	r1, #1
 8013838:	4620      	mov	r0, r4
 801383a:	f7ff fd9f 	bl	801337c <rshift>
 801383e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013842:	3701      	adds	r7, #1
 8013844:	42bb      	cmp	r3, r7
 8013846:	f6ff aee0 	blt.w	801360a <__gethex+0x1be>
 801384a:	2501      	movs	r5, #1
 801384c:	e7c2      	b.n	80137d4 <__gethex+0x388>
 801384e:	f016 061f 	ands.w	r6, r6, #31
 8013852:	d0fa      	beq.n	801384a <__gethex+0x3fe>
 8013854:	4453      	add	r3, sl
 8013856:	f1c6 0620 	rsb	r6, r6, #32
 801385a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801385e:	f7fd fd63 	bl	8011328 <__hi0bits>
 8013862:	42b0      	cmp	r0, r6
 8013864:	dbe7      	blt.n	8013836 <__gethex+0x3ea>
 8013866:	e7f0      	b.n	801384a <__gethex+0x3fe>
 8013868:	08016653 	.word	0x08016653

0801386c <L_shift>:
 801386c:	f1c2 0208 	rsb	r2, r2, #8
 8013870:	0092      	lsls	r2, r2, #2
 8013872:	b570      	push	{r4, r5, r6, lr}
 8013874:	f1c2 0620 	rsb	r6, r2, #32
 8013878:	6843      	ldr	r3, [r0, #4]
 801387a:	6804      	ldr	r4, [r0, #0]
 801387c:	fa03 f506 	lsl.w	r5, r3, r6
 8013880:	432c      	orrs	r4, r5
 8013882:	40d3      	lsrs	r3, r2
 8013884:	6004      	str	r4, [r0, #0]
 8013886:	f840 3f04 	str.w	r3, [r0, #4]!
 801388a:	4288      	cmp	r0, r1
 801388c:	d3f4      	bcc.n	8013878 <L_shift+0xc>
 801388e:	bd70      	pop	{r4, r5, r6, pc}

08013890 <__match>:
 8013890:	b530      	push	{r4, r5, lr}
 8013892:	6803      	ldr	r3, [r0, #0]
 8013894:	3301      	adds	r3, #1
 8013896:	f811 4b01 	ldrb.w	r4, [r1], #1
 801389a:	b914      	cbnz	r4, 80138a2 <__match+0x12>
 801389c:	6003      	str	r3, [r0, #0]
 801389e:	2001      	movs	r0, #1
 80138a0:	bd30      	pop	{r4, r5, pc}
 80138a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80138a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80138aa:	2d19      	cmp	r5, #25
 80138ac:	bf98      	it	ls
 80138ae:	3220      	addls	r2, #32
 80138b0:	42a2      	cmp	r2, r4
 80138b2:	d0f0      	beq.n	8013896 <__match+0x6>
 80138b4:	2000      	movs	r0, #0
 80138b6:	e7f3      	b.n	80138a0 <__match+0x10>

080138b8 <__hexnan>:
 80138b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138bc:	680b      	ldr	r3, [r1, #0]
 80138be:	6801      	ldr	r1, [r0, #0]
 80138c0:	115e      	asrs	r6, r3, #5
 80138c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80138c6:	f013 031f 	ands.w	r3, r3, #31
 80138ca:	b087      	sub	sp, #28
 80138cc:	bf18      	it	ne
 80138ce:	3604      	addne	r6, #4
 80138d0:	2500      	movs	r5, #0
 80138d2:	1f37      	subs	r7, r6, #4
 80138d4:	4682      	mov	sl, r0
 80138d6:	4690      	mov	r8, r2
 80138d8:	9301      	str	r3, [sp, #4]
 80138da:	f846 5c04 	str.w	r5, [r6, #-4]
 80138de:	46b9      	mov	r9, r7
 80138e0:	463c      	mov	r4, r7
 80138e2:	9502      	str	r5, [sp, #8]
 80138e4:	46ab      	mov	fp, r5
 80138e6:	784a      	ldrb	r2, [r1, #1]
 80138e8:	1c4b      	adds	r3, r1, #1
 80138ea:	9303      	str	r3, [sp, #12]
 80138ec:	b342      	cbz	r2, 8013940 <__hexnan+0x88>
 80138ee:	4610      	mov	r0, r2
 80138f0:	9105      	str	r1, [sp, #20]
 80138f2:	9204      	str	r2, [sp, #16]
 80138f4:	f7ff fd94 	bl	8013420 <__hexdig_fun>
 80138f8:	2800      	cmp	r0, #0
 80138fa:	d151      	bne.n	80139a0 <__hexnan+0xe8>
 80138fc:	9a04      	ldr	r2, [sp, #16]
 80138fe:	9905      	ldr	r1, [sp, #20]
 8013900:	2a20      	cmp	r2, #32
 8013902:	d818      	bhi.n	8013936 <__hexnan+0x7e>
 8013904:	9b02      	ldr	r3, [sp, #8]
 8013906:	459b      	cmp	fp, r3
 8013908:	dd13      	ble.n	8013932 <__hexnan+0x7a>
 801390a:	454c      	cmp	r4, r9
 801390c:	d206      	bcs.n	801391c <__hexnan+0x64>
 801390e:	2d07      	cmp	r5, #7
 8013910:	dc04      	bgt.n	801391c <__hexnan+0x64>
 8013912:	462a      	mov	r2, r5
 8013914:	4649      	mov	r1, r9
 8013916:	4620      	mov	r0, r4
 8013918:	f7ff ffa8 	bl	801386c <L_shift>
 801391c:	4544      	cmp	r4, r8
 801391e:	d952      	bls.n	80139c6 <__hexnan+0x10e>
 8013920:	2300      	movs	r3, #0
 8013922:	f1a4 0904 	sub.w	r9, r4, #4
 8013926:	f844 3c04 	str.w	r3, [r4, #-4]
 801392a:	f8cd b008 	str.w	fp, [sp, #8]
 801392e:	464c      	mov	r4, r9
 8013930:	461d      	mov	r5, r3
 8013932:	9903      	ldr	r1, [sp, #12]
 8013934:	e7d7      	b.n	80138e6 <__hexnan+0x2e>
 8013936:	2a29      	cmp	r2, #41	@ 0x29
 8013938:	d157      	bne.n	80139ea <__hexnan+0x132>
 801393a:	3102      	adds	r1, #2
 801393c:	f8ca 1000 	str.w	r1, [sl]
 8013940:	f1bb 0f00 	cmp.w	fp, #0
 8013944:	d051      	beq.n	80139ea <__hexnan+0x132>
 8013946:	454c      	cmp	r4, r9
 8013948:	d206      	bcs.n	8013958 <__hexnan+0xa0>
 801394a:	2d07      	cmp	r5, #7
 801394c:	dc04      	bgt.n	8013958 <__hexnan+0xa0>
 801394e:	462a      	mov	r2, r5
 8013950:	4649      	mov	r1, r9
 8013952:	4620      	mov	r0, r4
 8013954:	f7ff ff8a 	bl	801386c <L_shift>
 8013958:	4544      	cmp	r4, r8
 801395a:	d936      	bls.n	80139ca <__hexnan+0x112>
 801395c:	f1a8 0204 	sub.w	r2, r8, #4
 8013960:	4623      	mov	r3, r4
 8013962:	f853 1b04 	ldr.w	r1, [r3], #4
 8013966:	f842 1f04 	str.w	r1, [r2, #4]!
 801396a:	429f      	cmp	r7, r3
 801396c:	d2f9      	bcs.n	8013962 <__hexnan+0xaa>
 801396e:	1b3b      	subs	r3, r7, r4
 8013970:	f023 0303 	bic.w	r3, r3, #3
 8013974:	3304      	adds	r3, #4
 8013976:	3401      	adds	r4, #1
 8013978:	3e03      	subs	r6, #3
 801397a:	42b4      	cmp	r4, r6
 801397c:	bf88      	it	hi
 801397e:	2304      	movhi	r3, #4
 8013980:	4443      	add	r3, r8
 8013982:	2200      	movs	r2, #0
 8013984:	f843 2b04 	str.w	r2, [r3], #4
 8013988:	429f      	cmp	r7, r3
 801398a:	d2fb      	bcs.n	8013984 <__hexnan+0xcc>
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	b91b      	cbnz	r3, 8013998 <__hexnan+0xe0>
 8013990:	4547      	cmp	r7, r8
 8013992:	d128      	bne.n	80139e6 <__hexnan+0x12e>
 8013994:	2301      	movs	r3, #1
 8013996:	603b      	str	r3, [r7, #0]
 8013998:	2005      	movs	r0, #5
 801399a:	b007      	add	sp, #28
 801399c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139a0:	3501      	adds	r5, #1
 80139a2:	2d08      	cmp	r5, #8
 80139a4:	f10b 0b01 	add.w	fp, fp, #1
 80139a8:	dd06      	ble.n	80139b8 <__hexnan+0x100>
 80139aa:	4544      	cmp	r4, r8
 80139ac:	d9c1      	bls.n	8013932 <__hexnan+0x7a>
 80139ae:	2300      	movs	r3, #0
 80139b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80139b4:	2501      	movs	r5, #1
 80139b6:	3c04      	subs	r4, #4
 80139b8:	6822      	ldr	r2, [r4, #0]
 80139ba:	f000 000f 	and.w	r0, r0, #15
 80139be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80139c2:	6020      	str	r0, [r4, #0]
 80139c4:	e7b5      	b.n	8013932 <__hexnan+0x7a>
 80139c6:	2508      	movs	r5, #8
 80139c8:	e7b3      	b.n	8013932 <__hexnan+0x7a>
 80139ca:	9b01      	ldr	r3, [sp, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d0dd      	beq.n	801398c <__hexnan+0xd4>
 80139d0:	f1c3 0320 	rsb	r3, r3, #32
 80139d4:	f04f 32ff 	mov.w	r2, #4294967295
 80139d8:	40da      	lsrs	r2, r3
 80139da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80139de:	4013      	ands	r3, r2
 80139e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80139e4:	e7d2      	b.n	801398c <__hexnan+0xd4>
 80139e6:	3f04      	subs	r7, #4
 80139e8:	e7d0      	b.n	801398c <__hexnan+0xd4>
 80139ea:	2004      	movs	r0, #4
 80139ec:	e7d5      	b.n	801399a <__hexnan+0xe2>

080139ee <__ascii_mbtowc>:
 80139ee:	b082      	sub	sp, #8
 80139f0:	b901      	cbnz	r1, 80139f4 <__ascii_mbtowc+0x6>
 80139f2:	a901      	add	r1, sp, #4
 80139f4:	b142      	cbz	r2, 8013a08 <__ascii_mbtowc+0x1a>
 80139f6:	b14b      	cbz	r3, 8013a0c <__ascii_mbtowc+0x1e>
 80139f8:	7813      	ldrb	r3, [r2, #0]
 80139fa:	600b      	str	r3, [r1, #0]
 80139fc:	7812      	ldrb	r2, [r2, #0]
 80139fe:	1e10      	subs	r0, r2, #0
 8013a00:	bf18      	it	ne
 8013a02:	2001      	movne	r0, #1
 8013a04:	b002      	add	sp, #8
 8013a06:	4770      	bx	lr
 8013a08:	4610      	mov	r0, r2
 8013a0a:	e7fb      	b.n	8013a04 <__ascii_mbtowc+0x16>
 8013a0c:	f06f 0001 	mvn.w	r0, #1
 8013a10:	e7f8      	b.n	8013a04 <__ascii_mbtowc+0x16>

08013a12 <_realloc_r>:
 8013a12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a16:	4680      	mov	r8, r0
 8013a18:	4615      	mov	r5, r2
 8013a1a:	460c      	mov	r4, r1
 8013a1c:	b921      	cbnz	r1, 8013a28 <_realloc_r+0x16>
 8013a1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a22:	4611      	mov	r1, r2
 8013a24:	f7fb bbdc 	b.w	800f1e0 <_malloc_r>
 8013a28:	b92a      	cbnz	r2, 8013a36 <_realloc_r+0x24>
 8013a2a:	f7fd fb39 	bl	80110a0 <_free_r>
 8013a2e:	2400      	movs	r4, #0
 8013a30:	4620      	mov	r0, r4
 8013a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a36:	f000 f8b2 	bl	8013b9e <_malloc_usable_size_r>
 8013a3a:	4285      	cmp	r5, r0
 8013a3c:	4606      	mov	r6, r0
 8013a3e:	d802      	bhi.n	8013a46 <_realloc_r+0x34>
 8013a40:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013a44:	d8f4      	bhi.n	8013a30 <_realloc_r+0x1e>
 8013a46:	4629      	mov	r1, r5
 8013a48:	4640      	mov	r0, r8
 8013a4a:	f7fb fbc9 	bl	800f1e0 <_malloc_r>
 8013a4e:	4607      	mov	r7, r0
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d0ec      	beq.n	8013a2e <_realloc_r+0x1c>
 8013a54:	42b5      	cmp	r5, r6
 8013a56:	462a      	mov	r2, r5
 8013a58:	4621      	mov	r1, r4
 8013a5a:	bf28      	it	cs
 8013a5c:	4632      	movcs	r2, r6
 8013a5e:	f7fc fcbe 	bl	80103de <memcpy>
 8013a62:	4621      	mov	r1, r4
 8013a64:	4640      	mov	r0, r8
 8013a66:	f7fd fb1b 	bl	80110a0 <_free_r>
 8013a6a:	463c      	mov	r4, r7
 8013a6c:	e7e0      	b.n	8013a30 <_realloc_r+0x1e>
	...

08013a70 <_strtoul_l.constprop.0>:
 8013a70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a74:	4e34      	ldr	r6, [pc, #208]	@ (8013b48 <_strtoul_l.constprop.0+0xd8>)
 8013a76:	4686      	mov	lr, r0
 8013a78:	460d      	mov	r5, r1
 8013a7a:	4628      	mov	r0, r5
 8013a7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a80:	5d37      	ldrb	r7, [r6, r4]
 8013a82:	f017 0708 	ands.w	r7, r7, #8
 8013a86:	d1f8      	bne.n	8013a7a <_strtoul_l.constprop.0+0xa>
 8013a88:	2c2d      	cmp	r4, #45	@ 0x2d
 8013a8a:	d12f      	bne.n	8013aec <_strtoul_l.constprop.0+0x7c>
 8013a8c:	782c      	ldrb	r4, [r5, #0]
 8013a8e:	2701      	movs	r7, #1
 8013a90:	1c85      	adds	r5, r0, #2
 8013a92:	f033 0010 	bics.w	r0, r3, #16
 8013a96:	d109      	bne.n	8013aac <_strtoul_l.constprop.0+0x3c>
 8013a98:	2c30      	cmp	r4, #48	@ 0x30
 8013a9a:	d12c      	bne.n	8013af6 <_strtoul_l.constprop.0+0x86>
 8013a9c:	7828      	ldrb	r0, [r5, #0]
 8013a9e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8013aa2:	2858      	cmp	r0, #88	@ 0x58
 8013aa4:	d127      	bne.n	8013af6 <_strtoul_l.constprop.0+0x86>
 8013aa6:	786c      	ldrb	r4, [r5, #1]
 8013aa8:	2310      	movs	r3, #16
 8013aaa:	3502      	adds	r5, #2
 8013aac:	f04f 38ff 	mov.w	r8, #4294967295
 8013ab0:	2600      	movs	r6, #0
 8013ab2:	fbb8 f8f3 	udiv	r8, r8, r3
 8013ab6:	fb03 f908 	mul.w	r9, r3, r8
 8013aba:	ea6f 0909 	mvn.w	r9, r9
 8013abe:	4630      	mov	r0, r6
 8013ac0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8013ac4:	f1bc 0f09 	cmp.w	ip, #9
 8013ac8:	d81c      	bhi.n	8013b04 <_strtoul_l.constprop.0+0x94>
 8013aca:	4664      	mov	r4, ip
 8013acc:	42a3      	cmp	r3, r4
 8013ace:	dd2a      	ble.n	8013b26 <_strtoul_l.constprop.0+0xb6>
 8013ad0:	f1b6 3fff 	cmp.w	r6, #4294967295
 8013ad4:	d007      	beq.n	8013ae6 <_strtoul_l.constprop.0+0x76>
 8013ad6:	4580      	cmp	r8, r0
 8013ad8:	d322      	bcc.n	8013b20 <_strtoul_l.constprop.0+0xb0>
 8013ada:	d101      	bne.n	8013ae0 <_strtoul_l.constprop.0+0x70>
 8013adc:	45a1      	cmp	r9, r4
 8013ade:	db1f      	blt.n	8013b20 <_strtoul_l.constprop.0+0xb0>
 8013ae0:	fb00 4003 	mla	r0, r0, r3, r4
 8013ae4:	2601      	movs	r6, #1
 8013ae6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013aea:	e7e9      	b.n	8013ac0 <_strtoul_l.constprop.0+0x50>
 8013aec:	2c2b      	cmp	r4, #43	@ 0x2b
 8013aee:	bf04      	itt	eq
 8013af0:	782c      	ldrbeq	r4, [r5, #0]
 8013af2:	1c85      	addeq	r5, r0, #2
 8013af4:	e7cd      	b.n	8013a92 <_strtoul_l.constprop.0+0x22>
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d1d8      	bne.n	8013aac <_strtoul_l.constprop.0+0x3c>
 8013afa:	2c30      	cmp	r4, #48	@ 0x30
 8013afc:	bf0c      	ite	eq
 8013afe:	2308      	moveq	r3, #8
 8013b00:	230a      	movne	r3, #10
 8013b02:	e7d3      	b.n	8013aac <_strtoul_l.constprop.0+0x3c>
 8013b04:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8013b08:	f1bc 0f19 	cmp.w	ip, #25
 8013b0c:	d801      	bhi.n	8013b12 <_strtoul_l.constprop.0+0xa2>
 8013b0e:	3c37      	subs	r4, #55	@ 0x37
 8013b10:	e7dc      	b.n	8013acc <_strtoul_l.constprop.0+0x5c>
 8013b12:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8013b16:	f1bc 0f19 	cmp.w	ip, #25
 8013b1a:	d804      	bhi.n	8013b26 <_strtoul_l.constprop.0+0xb6>
 8013b1c:	3c57      	subs	r4, #87	@ 0x57
 8013b1e:	e7d5      	b.n	8013acc <_strtoul_l.constprop.0+0x5c>
 8013b20:	f04f 36ff 	mov.w	r6, #4294967295
 8013b24:	e7df      	b.n	8013ae6 <_strtoul_l.constprop.0+0x76>
 8013b26:	1c73      	adds	r3, r6, #1
 8013b28:	d106      	bne.n	8013b38 <_strtoul_l.constprop.0+0xc8>
 8013b2a:	2322      	movs	r3, #34	@ 0x22
 8013b2c:	f8ce 3000 	str.w	r3, [lr]
 8013b30:	4630      	mov	r0, r6
 8013b32:	b932      	cbnz	r2, 8013b42 <_strtoul_l.constprop.0+0xd2>
 8013b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b38:	b107      	cbz	r7, 8013b3c <_strtoul_l.constprop.0+0xcc>
 8013b3a:	4240      	negs	r0, r0
 8013b3c:	2a00      	cmp	r2, #0
 8013b3e:	d0f9      	beq.n	8013b34 <_strtoul_l.constprop.0+0xc4>
 8013b40:	b106      	cbz	r6, 8013b44 <_strtoul_l.constprop.0+0xd4>
 8013b42:	1e69      	subs	r1, r5, #1
 8013b44:	6011      	str	r1, [r2, #0]
 8013b46:	e7f5      	b.n	8013b34 <_strtoul_l.constprop.0+0xc4>
 8013b48:	08016819 	.word	0x08016819

08013b4c <_strtoul_r>:
 8013b4c:	f7ff bf90 	b.w	8013a70 <_strtoul_l.constprop.0>

08013b50 <__ascii_wctomb>:
 8013b50:	4603      	mov	r3, r0
 8013b52:	4608      	mov	r0, r1
 8013b54:	b141      	cbz	r1, 8013b68 <__ascii_wctomb+0x18>
 8013b56:	2aff      	cmp	r2, #255	@ 0xff
 8013b58:	d904      	bls.n	8013b64 <__ascii_wctomb+0x14>
 8013b5a:	228a      	movs	r2, #138	@ 0x8a
 8013b5c:	601a      	str	r2, [r3, #0]
 8013b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b62:	4770      	bx	lr
 8013b64:	700a      	strb	r2, [r1, #0]
 8013b66:	2001      	movs	r0, #1
 8013b68:	4770      	bx	lr
	...

08013b6c <fiprintf>:
 8013b6c:	b40e      	push	{r1, r2, r3}
 8013b6e:	b503      	push	{r0, r1, lr}
 8013b70:	4601      	mov	r1, r0
 8013b72:	ab03      	add	r3, sp, #12
 8013b74:	4805      	ldr	r0, [pc, #20]	@ (8013b8c <fiprintf+0x20>)
 8013b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b7a:	6800      	ldr	r0, [r0, #0]
 8013b7c:	9301      	str	r3, [sp, #4]
 8013b7e:	f000 f83f 	bl	8013c00 <_vfiprintf_r>
 8013b82:	b002      	add	sp, #8
 8013b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b88:	b003      	add	sp, #12
 8013b8a:	4770      	bx	lr
 8013b8c:	20000078 	.word	0x20000078

08013b90 <abort>:
 8013b90:	b508      	push	{r3, lr}
 8013b92:	2006      	movs	r0, #6
 8013b94:	f000 fa08 	bl	8013fa8 <raise>
 8013b98:	2001      	movs	r0, #1
 8013b9a:	f7f4 f81d 	bl	8007bd8 <_exit>

08013b9e <_malloc_usable_size_r>:
 8013b9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ba2:	1f18      	subs	r0, r3, #4
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	bfbc      	itt	lt
 8013ba8:	580b      	ldrlt	r3, [r1, r0]
 8013baa:	18c0      	addlt	r0, r0, r3
 8013bac:	4770      	bx	lr

08013bae <__sfputc_r>:
 8013bae:	6893      	ldr	r3, [r2, #8]
 8013bb0:	3b01      	subs	r3, #1
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	b410      	push	{r4}
 8013bb6:	6093      	str	r3, [r2, #8]
 8013bb8:	da08      	bge.n	8013bcc <__sfputc_r+0x1e>
 8013bba:	6994      	ldr	r4, [r2, #24]
 8013bbc:	42a3      	cmp	r3, r4
 8013bbe:	db01      	blt.n	8013bc4 <__sfputc_r+0x16>
 8013bc0:	290a      	cmp	r1, #10
 8013bc2:	d103      	bne.n	8013bcc <__sfputc_r+0x1e>
 8013bc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bc8:	f000 b932 	b.w	8013e30 <__swbuf_r>
 8013bcc:	6813      	ldr	r3, [r2, #0]
 8013bce:	1c58      	adds	r0, r3, #1
 8013bd0:	6010      	str	r0, [r2, #0]
 8013bd2:	7019      	strb	r1, [r3, #0]
 8013bd4:	4608      	mov	r0, r1
 8013bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013bda:	4770      	bx	lr

08013bdc <__sfputs_r>:
 8013bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bde:	4606      	mov	r6, r0
 8013be0:	460f      	mov	r7, r1
 8013be2:	4614      	mov	r4, r2
 8013be4:	18d5      	adds	r5, r2, r3
 8013be6:	42ac      	cmp	r4, r5
 8013be8:	d101      	bne.n	8013bee <__sfputs_r+0x12>
 8013bea:	2000      	movs	r0, #0
 8013bec:	e007      	b.n	8013bfe <__sfputs_r+0x22>
 8013bee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013bf2:	463a      	mov	r2, r7
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f7ff ffda 	bl	8013bae <__sfputc_r>
 8013bfa:	1c43      	adds	r3, r0, #1
 8013bfc:	d1f3      	bne.n	8013be6 <__sfputs_r+0xa>
 8013bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013c00 <_vfiprintf_r>:
 8013c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c04:	460d      	mov	r5, r1
 8013c06:	b09d      	sub	sp, #116	@ 0x74
 8013c08:	4614      	mov	r4, r2
 8013c0a:	4698      	mov	r8, r3
 8013c0c:	4606      	mov	r6, r0
 8013c0e:	b118      	cbz	r0, 8013c18 <_vfiprintf_r+0x18>
 8013c10:	6a03      	ldr	r3, [r0, #32]
 8013c12:	b90b      	cbnz	r3, 8013c18 <_vfiprintf_r+0x18>
 8013c14:	f7fc fa68 	bl	80100e8 <__sinit>
 8013c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c1a:	07d9      	lsls	r1, r3, #31
 8013c1c:	d405      	bmi.n	8013c2a <_vfiprintf_r+0x2a>
 8013c1e:	89ab      	ldrh	r3, [r5, #12]
 8013c20:	059a      	lsls	r2, r3, #22
 8013c22:	d402      	bmi.n	8013c2a <_vfiprintf_r+0x2a>
 8013c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c26:	f7fc fbd8 	bl	80103da <__retarget_lock_acquire_recursive>
 8013c2a:	89ab      	ldrh	r3, [r5, #12]
 8013c2c:	071b      	lsls	r3, r3, #28
 8013c2e:	d501      	bpl.n	8013c34 <_vfiprintf_r+0x34>
 8013c30:	692b      	ldr	r3, [r5, #16]
 8013c32:	b99b      	cbnz	r3, 8013c5c <_vfiprintf_r+0x5c>
 8013c34:	4629      	mov	r1, r5
 8013c36:	4630      	mov	r0, r6
 8013c38:	f000 f938 	bl	8013eac <__swsetup_r>
 8013c3c:	b170      	cbz	r0, 8013c5c <_vfiprintf_r+0x5c>
 8013c3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013c40:	07dc      	lsls	r4, r3, #31
 8013c42:	d504      	bpl.n	8013c4e <_vfiprintf_r+0x4e>
 8013c44:	f04f 30ff 	mov.w	r0, #4294967295
 8013c48:	b01d      	add	sp, #116	@ 0x74
 8013c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c4e:	89ab      	ldrh	r3, [r5, #12]
 8013c50:	0598      	lsls	r0, r3, #22
 8013c52:	d4f7      	bmi.n	8013c44 <_vfiprintf_r+0x44>
 8013c54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013c56:	f7fc fbc1 	bl	80103dc <__retarget_lock_release_recursive>
 8013c5a:	e7f3      	b.n	8013c44 <_vfiprintf_r+0x44>
 8013c5c:	2300      	movs	r3, #0
 8013c5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c60:	2320      	movs	r3, #32
 8013c62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c6a:	2330      	movs	r3, #48	@ 0x30
 8013c6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013e1c <_vfiprintf_r+0x21c>
 8013c70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c74:	f04f 0901 	mov.w	r9, #1
 8013c78:	4623      	mov	r3, r4
 8013c7a:	469a      	mov	sl, r3
 8013c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c80:	b10a      	cbz	r2, 8013c86 <_vfiprintf_r+0x86>
 8013c82:	2a25      	cmp	r2, #37	@ 0x25
 8013c84:	d1f9      	bne.n	8013c7a <_vfiprintf_r+0x7a>
 8013c86:	ebba 0b04 	subs.w	fp, sl, r4
 8013c8a:	d00b      	beq.n	8013ca4 <_vfiprintf_r+0xa4>
 8013c8c:	465b      	mov	r3, fp
 8013c8e:	4622      	mov	r2, r4
 8013c90:	4629      	mov	r1, r5
 8013c92:	4630      	mov	r0, r6
 8013c94:	f7ff ffa2 	bl	8013bdc <__sfputs_r>
 8013c98:	3001      	adds	r0, #1
 8013c9a:	f000 80a7 	beq.w	8013dec <_vfiprintf_r+0x1ec>
 8013c9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ca0:	445a      	add	r2, fp
 8013ca2:	9209      	str	r2, [sp, #36]	@ 0x24
 8013ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	f000 809f 	beq.w	8013dec <_vfiprintf_r+0x1ec>
 8013cae:	2300      	movs	r3, #0
 8013cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013cb8:	f10a 0a01 	add.w	sl, sl, #1
 8013cbc:	9304      	str	r3, [sp, #16]
 8013cbe:	9307      	str	r3, [sp, #28]
 8013cc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013cc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8013cc6:	4654      	mov	r4, sl
 8013cc8:	2205      	movs	r2, #5
 8013cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013cce:	4853      	ldr	r0, [pc, #332]	@ (8013e1c <_vfiprintf_r+0x21c>)
 8013cd0:	f7ec fa9e 	bl	8000210 <memchr>
 8013cd4:	9a04      	ldr	r2, [sp, #16]
 8013cd6:	b9d8      	cbnz	r0, 8013d10 <_vfiprintf_r+0x110>
 8013cd8:	06d1      	lsls	r1, r2, #27
 8013cda:	bf44      	itt	mi
 8013cdc:	2320      	movmi	r3, #32
 8013cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ce2:	0713      	lsls	r3, r2, #28
 8013ce4:	bf44      	itt	mi
 8013ce6:	232b      	movmi	r3, #43	@ 0x2b
 8013ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013cec:	f89a 3000 	ldrb.w	r3, [sl]
 8013cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013cf2:	d015      	beq.n	8013d20 <_vfiprintf_r+0x120>
 8013cf4:	9a07      	ldr	r2, [sp, #28]
 8013cf6:	4654      	mov	r4, sl
 8013cf8:	2000      	movs	r0, #0
 8013cfa:	f04f 0c0a 	mov.w	ip, #10
 8013cfe:	4621      	mov	r1, r4
 8013d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013d04:	3b30      	subs	r3, #48	@ 0x30
 8013d06:	2b09      	cmp	r3, #9
 8013d08:	d94b      	bls.n	8013da2 <_vfiprintf_r+0x1a2>
 8013d0a:	b1b0      	cbz	r0, 8013d3a <_vfiprintf_r+0x13a>
 8013d0c:	9207      	str	r2, [sp, #28]
 8013d0e:	e014      	b.n	8013d3a <_vfiprintf_r+0x13a>
 8013d10:	eba0 0308 	sub.w	r3, r0, r8
 8013d14:	fa09 f303 	lsl.w	r3, r9, r3
 8013d18:	4313      	orrs	r3, r2
 8013d1a:	9304      	str	r3, [sp, #16]
 8013d1c:	46a2      	mov	sl, r4
 8013d1e:	e7d2      	b.n	8013cc6 <_vfiprintf_r+0xc6>
 8013d20:	9b03      	ldr	r3, [sp, #12]
 8013d22:	1d19      	adds	r1, r3, #4
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	9103      	str	r1, [sp, #12]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	bfbb      	ittet	lt
 8013d2c:	425b      	neglt	r3, r3
 8013d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8013d32:	9307      	strge	r3, [sp, #28]
 8013d34:	9307      	strlt	r3, [sp, #28]
 8013d36:	bfb8      	it	lt
 8013d38:	9204      	strlt	r2, [sp, #16]
 8013d3a:	7823      	ldrb	r3, [r4, #0]
 8013d3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8013d3e:	d10a      	bne.n	8013d56 <_vfiprintf_r+0x156>
 8013d40:	7863      	ldrb	r3, [r4, #1]
 8013d42:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d44:	d132      	bne.n	8013dac <_vfiprintf_r+0x1ac>
 8013d46:	9b03      	ldr	r3, [sp, #12]
 8013d48:	1d1a      	adds	r2, r3, #4
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	9203      	str	r2, [sp, #12]
 8013d4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013d52:	3402      	adds	r4, #2
 8013d54:	9305      	str	r3, [sp, #20]
 8013d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013e2c <_vfiprintf_r+0x22c>
 8013d5a:	7821      	ldrb	r1, [r4, #0]
 8013d5c:	2203      	movs	r2, #3
 8013d5e:	4650      	mov	r0, sl
 8013d60:	f7ec fa56 	bl	8000210 <memchr>
 8013d64:	b138      	cbz	r0, 8013d76 <_vfiprintf_r+0x176>
 8013d66:	9b04      	ldr	r3, [sp, #16]
 8013d68:	eba0 000a 	sub.w	r0, r0, sl
 8013d6c:	2240      	movs	r2, #64	@ 0x40
 8013d6e:	4082      	lsls	r2, r0
 8013d70:	4313      	orrs	r3, r2
 8013d72:	3401      	adds	r4, #1
 8013d74:	9304      	str	r3, [sp, #16]
 8013d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d7a:	4829      	ldr	r0, [pc, #164]	@ (8013e20 <_vfiprintf_r+0x220>)
 8013d7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d80:	2206      	movs	r2, #6
 8013d82:	f7ec fa45 	bl	8000210 <memchr>
 8013d86:	2800      	cmp	r0, #0
 8013d88:	d03f      	beq.n	8013e0a <_vfiprintf_r+0x20a>
 8013d8a:	4b26      	ldr	r3, [pc, #152]	@ (8013e24 <_vfiprintf_r+0x224>)
 8013d8c:	bb1b      	cbnz	r3, 8013dd6 <_vfiprintf_r+0x1d6>
 8013d8e:	9b03      	ldr	r3, [sp, #12]
 8013d90:	3307      	adds	r3, #7
 8013d92:	f023 0307 	bic.w	r3, r3, #7
 8013d96:	3308      	adds	r3, #8
 8013d98:	9303      	str	r3, [sp, #12]
 8013d9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d9c:	443b      	add	r3, r7
 8013d9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013da0:	e76a      	b.n	8013c78 <_vfiprintf_r+0x78>
 8013da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8013da6:	460c      	mov	r4, r1
 8013da8:	2001      	movs	r0, #1
 8013daa:	e7a8      	b.n	8013cfe <_vfiprintf_r+0xfe>
 8013dac:	2300      	movs	r3, #0
 8013dae:	3401      	adds	r4, #1
 8013db0:	9305      	str	r3, [sp, #20]
 8013db2:	4619      	mov	r1, r3
 8013db4:	f04f 0c0a 	mov.w	ip, #10
 8013db8:	4620      	mov	r0, r4
 8013dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013dbe:	3a30      	subs	r2, #48	@ 0x30
 8013dc0:	2a09      	cmp	r2, #9
 8013dc2:	d903      	bls.n	8013dcc <_vfiprintf_r+0x1cc>
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d0c6      	beq.n	8013d56 <_vfiprintf_r+0x156>
 8013dc8:	9105      	str	r1, [sp, #20]
 8013dca:	e7c4      	b.n	8013d56 <_vfiprintf_r+0x156>
 8013dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8013dd0:	4604      	mov	r4, r0
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	e7f0      	b.n	8013db8 <_vfiprintf_r+0x1b8>
 8013dd6:	ab03      	add	r3, sp, #12
 8013dd8:	9300      	str	r3, [sp, #0]
 8013dda:	462a      	mov	r2, r5
 8013ddc:	4b12      	ldr	r3, [pc, #72]	@ (8013e28 <_vfiprintf_r+0x228>)
 8013dde:	a904      	add	r1, sp, #16
 8013de0:	4630      	mov	r0, r6
 8013de2:	f7fb fb29 	bl	800f438 <_printf_float>
 8013de6:	4607      	mov	r7, r0
 8013de8:	1c78      	adds	r0, r7, #1
 8013dea:	d1d6      	bne.n	8013d9a <_vfiprintf_r+0x19a>
 8013dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013dee:	07d9      	lsls	r1, r3, #31
 8013df0:	d405      	bmi.n	8013dfe <_vfiprintf_r+0x1fe>
 8013df2:	89ab      	ldrh	r3, [r5, #12]
 8013df4:	059a      	lsls	r2, r3, #22
 8013df6:	d402      	bmi.n	8013dfe <_vfiprintf_r+0x1fe>
 8013df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013dfa:	f7fc faef 	bl	80103dc <__retarget_lock_release_recursive>
 8013dfe:	89ab      	ldrh	r3, [r5, #12]
 8013e00:	065b      	lsls	r3, r3, #25
 8013e02:	f53f af1f 	bmi.w	8013c44 <_vfiprintf_r+0x44>
 8013e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e08:	e71e      	b.n	8013c48 <_vfiprintf_r+0x48>
 8013e0a:	ab03      	add	r3, sp, #12
 8013e0c:	9300      	str	r3, [sp, #0]
 8013e0e:	462a      	mov	r2, r5
 8013e10:	4b05      	ldr	r3, [pc, #20]	@ (8013e28 <_vfiprintf_r+0x228>)
 8013e12:	a904      	add	r1, sp, #16
 8013e14:	4630      	mov	r0, r6
 8013e16:	f7fb fda7 	bl	800f968 <_printf_i>
 8013e1a:	e7e4      	b.n	8013de6 <_vfiprintf_r+0x1e6>
 8013e1c:	08016919 	.word	0x08016919
 8013e20:	08016923 	.word	0x08016923
 8013e24:	0800f439 	.word	0x0800f439
 8013e28:	08013bdd 	.word	0x08013bdd
 8013e2c:	0801691f 	.word	0x0801691f

08013e30 <__swbuf_r>:
 8013e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e32:	460e      	mov	r6, r1
 8013e34:	4614      	mov	r4, r2
 8013e36:	4605      	mov	r5, r0
 8013e38:	b118      	cbz	r0, 8013e42 <__swbuf_r+0x12>
 8013e3a:	6a03      	ldr	r3, [r0, #32]
 8013e3c:	b90b      	cbnz	r3, 8013e42 <__swbuf_r+0x12>
 8013e3e:	f7fc f953 	bl	80100e8 <__sinit>
 8013e42:	69a3      	ldr	r3, [r4, #24]
 8013e44:	60a3      	str	r3, [r4, #8]
 8013e46:	89a3      	ldrh	r3, [r4, #12]
 8013e48:	071a      	lsls	r2, r3, #28
 8013e4a:	d501      	bpl.n	8013e50 <__swbuf_r+0x20>
 8013e4c:	6923      	ldr	r3, [r4, #16]
 8013e4e:	b943      	cbnz	r3, 8013e62 <__swbuf_r+0x32>
 8013e50:	4621      	mov	r1, r4
 8013e52:	4628      	mov	r0, r5
 8013e54:	f000 f82a 	bl	8013eac <__swsetup_r>
 8013e58:	b118      	cbz	r0, 8013e62 <__swbuf_r+0x32>
 8013e5a:	f04f 37ff 	mov.w	r7, #4294967295
 8013e5e:	4638      	mov	r0, r7
 8013e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e62:	6823      	ldr	r3, [r4, #0]
 8013e64:	6922      	ldr	r2, [r4, #16]
 8013e66:	1a98      	subs	r0, r3, r2
 8013e68:	6963      	ldr	r3, [r4, #20]
 8013e6a:	b2f6      	uxtb	r6, r6
 8013e6c:	4283      	cmp	r3, r0
 8013e6e:	4637      	mov	r7, r6
 8013e70:	dc05      	bgt.n	8013e7e <__swbuf_r+0x4e>
 8013e72:	4621      	mov	r1, r4
 8013e74:	4628      	mov	r0, r5
 8013e76:	f7ff f993 	bl	80131a0 <_fflush_r>
 8013e7a:	2800      	cmp	r0, #0
 8013e7c:	d1ed      	bne.n	8013e5a <__swbuf_r+0x2a>
 8013e7e:	68a3      	ldr	r3, [r4, #8]
 8013e80:	3b01      	subs	r3, #1
 8013e82:	60a3      	str	r3, [r4, #8]
 8013e84:	6823      	ldr	r3, [r4, #0]
 8013e86:	1c5a      	adds	r2, r3, #1
 8013e88:	6022      	str	r2, [r4, #0]
 8013e8a:	701e      	strb	r6, [r3, #0]
 8013e8c:	6962      	ldr	r2, [r4, #20]
 8013e8e:	1c43      	adds	r3, r0, #1
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d004      	beq.n	8013e9e <__swbuf_r+0x6e>
 8013e94:	89a3      	ldrh	r3, [r4, #12]
 8013e96:	07db      	lsls	r3, r3, #31
 8013e98:	d5e1      	bpl.n	8013e5e <__swbuf_r+0x2e>
 8013e9a:	2e0a      	cmp	r6, #10
 8013e9c:	d1df      	bne.n	8013e5e <__swbuf_r+0x2e>
 8013e9e:	4621      	mov	r1, r4
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	f7ff f97d 	bl	80131a0 <_fflush_r>
 8013ea6:	2800      	cmp	r0, #0
 8013ea8:	d0d9      	beq.n	8013e5e <__swbuf_r+0x2e>
 8013eaa:	e7d6      	b.n	8013e5a <__swbuf_r+0x2a>

08013eac <__swsetup_r>:
 8013eac:	b538      	push	{r3, r4, r5, lr}
 8013eae:	4b29      	ldr	r3, [pc, #164]	@ (8013f54 <__swsetup_r+0xa8>)
 8013eb0:	4605      	mov	r5, r0
 8013eb2:	6818      	ldr	r0, [r3, #0]
 8013eb4:	460c      	mov	r4, r1
 8013eb6:	b118      	cbz	r0, 8013ec0 <__swsetup_r+0x14>
 8013eb8:	6a03      	ldr	r3, [r0, #32]
 8013eba:	b90b      	cbnz	r3, 8013ec0 <__swsetup_r+0x14>
 8013ebc:	f7fc f914 	bl	80100e8 <__sinit>
 8013ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ec4:	0719      	lsls	r1, r3, #28
 8013ec6:	d422      	bmi.n	8013f0e <__swsetup_r+0x62>
 8013ec8:	06da      	lsls	r2, r3, #27
 8013eca:	d407      	bmi.n	8013edc <__swsetup_r+0x30>
 8013ecc:	2209      	movs	r2, #9
 8013ece:	602a      	str	r2, [r5, #0]
 8013ed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ed4:	81a3      	strh	r3, [r4, #12]
 8013ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8013eda:	e033      	b.n	8013f44 <__swsetup_r+0x98>
 8013edc:	0758      	lsls	r0, r3, #29
 8013ede:	d512      	bpl.n	8013f06 <__swsetup_r+0x5a>
 8013ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013ee2:	b141      	cbz	r1, 8013ef6 <__swsetup_r+0x4a>
 8013ee4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ee8:	4299      	cmp	r1, r3
 8013eea:	d002      	beq.n	8013ef2 <__swsetup_r+0x46>
 8013eec:	4628      	mov	r0, r5
 8013eee:	f7fd f8d7 	bl	80110a0 <_free_r>
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	6363      	str	r3, [r4, #52]	@ 0x34
 8013ef6:	89a3      	ldrh	r3, [r4, #12]
 8013ef8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013efc:	81a3      	strh	r3, [r4, #12]
 8013efe:	2300      	movs	r3, #0
 8013f00:	6063      	str	r3, [r4, #4]
 8013f02:	6923      	ldr	r3, [r4, #16]
 8013f04:	6023      	str	r3, [r4, #0]
 8013f06:	89a3      	ldrh	r3, [r4, #12]
 8013f08:	f043 0308 	orr.w	r3, r3, #8
 8013f0c:	81a3      	strh	r3, [r4, #12]
 8013f0e:	6923      	ldr	r3, [r4, #16]
 8013f10:	b94b      	cbnz	r3, 8013f26 <__swsetup_r+0x7a>
 8013f12:	89a3      	ldrh	r3, [r4, #12]
 8013f14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013f18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013f1c:	d003      	beq.n	8013f26 <__swsetup_r+0x7a>
 8013f1e:	4621      	mov	r1, r4
 8013f20:	4628      	mov	r0, r5
 8013f22:	f000 f883 	bl	801402c <__smakebuf_r>
 8013f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f2a:	f013 0201 	ands.w	r2, r3, #1
 8013f2e:	d00a      	beq.n	8013f46 <__swsetup_r+0x9a>
 8013f30:	2200      	movs	r2, #0
 8013f32:	60a2      	str	r2, [r4, #8]
 8013f34:	6962      	ldr	r2, [r4, #20]
 8013f36:	4252      	negs	r2, r2
 8013f38:	61a2      	str	r2, [r4, #24]
 8013f3a:	6922      	ldr	r2, [r4, #16]
 8013f3c:	b942      	cbnz	r2, 8013f50 <__swsetup_r+0xa4>
 8013f3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013f42:	d1c5      	bne.n	8013ed0 <__swsetup_r+0x24>
 8013f44:	bd38      	pop	{r3, r4, r5, pc}
 8013f46:	0799      	lsls	r1, r3, #30
 8013f48:	bf58      	it	pl
 8013f4a:	6962      	ldrpl	r2, [r4, #20]
 8013f4c:	60a2      	str	r2, [r4, #8]
 8013f4e:	e7f4      	b.n	8013f3a <__swsetup_r+0x8e>
 8013f50:	2000      	movs	r0, #0
 8013f52:	e7f7      	b.n	8013f44 <__swsetup_r+0x98>
 8013f54:	20000078 	.word	0x20000078

08013f58 <_raise_r>:
 8013f58:	291f      	cmp	r1, #31
 8013f5a:	b538      	push	{r3, r4, r5, lr}
 8013f5c:	4605      	mov	r5, r0
 8013f5e:	460c      	mov	r4, r1
 8013f60:	d904      	bls.n	8013f6c <_raise_r+0x14>
 8013f62:	2316      	movs	r3, #22
 8013f64:	6003      	str	r3, [r0, #0]
 8013f66:	f04f 30ff 	mov.w	r0, #4294967295
 8013f6a:	bd38      	pop	{r3, r4, r5, pc}
 8013f6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013f6e:	b112      	cbz	r2, 8013f76 <_raise_r+0x1e>
 8013f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f74:	b94b      	cbnz	r3, 8013f8a <_raise_r+0x32>
 8013f76:	4628      	mov	r0, r5
 8013f78:	f000 f830 	bl	8013fdc <_getpid_r>
 8013f7c:	4622      	mov	r2, r4
 8013f7e:	4601      	mov	r1, r0
 8013f80:	4628      	mov	r0, r5
 8013f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f86:	f000 b817 	b.w	8013fb8 <_kill_r>
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d00a      	beq.n	8013fa4 <_raise_r+0x4c>
 8013f8e:	1c59      	adds	r1, r3, #1
 8013f90:	d103      	bne.n	8013f9a <_raise_r+0x42>
 8013f92:	2316      	movs	r3, #22
 8013f94:	6003      	str	r3, [r0, #0]
 8013f96:	2001      	movs	r0, #1
 8013f98:	e7e7      	b.n	8013f6a <_raise_r+0x12>
 8013f9a:	2100      	movs	r1, #0
 8013f9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	4798      	blx	r3
 8013fa4:	2000      	movs	r0, #0
 8013fa6:	e7e0      	b.n	8013f6a <_raise_r+0x12>

08013fa8 <raise>:
 8013fa8:	4b02      	ldr	r3, [pc, #8]	@ (8013fb4 <raise+0xc>)
 8013faa:	4601      	mov	r1, r0
 8013fac:	6818      	ldr	r0, [r3, #0]
 8013fae:	f7ff bfd3 	b.w	8013f58 <_raise_r>
 8013fb2:	bf00      	nop
 8013fb4:	20000078 	.word	0x20000078

08013fb8 <_kill_r>:
 8013fb8:	b538      	push	{r3, r4, r5, lr}
 8013fba:	4d07      	ldr	r5, [pc, #28]	@ (8013fd8 <_kill_r+0x20>)
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	4604      	mov	r4, r0
 8013fc0:	4608      	mov	r0, r1
 8013fc2:	4611      	mov	r1, r2
 8013fc4:	602b      	str	r3, [r5, #0]
 8013fc6:	f7f3 fdf7 	bl	8007bb8 <_kill>
 8013fca:	1c43      	adds	r3, r0, #1
 8013fcc:	d102      	bne.n	8013fd4 <_kill_r+0x1c>
 8013fce:	682b      	ldr	r3, [r5, #0]
 8013fd0:	b103      	cbz	r3, 8013fd4 <_kill_r+0x1c>
 8013fd2:	6023      	str	r3, [r4, #0]
 8013fd4:	bd38      	pop	{r3, r4, r5, pc}
 8013fd6:	bf00      	nop
 8013fd8:	20001b20 	.word	0x20001b20

08013fdc <_getpid_r>:
 8013fdc:	f7f3 bde4 	b.w	8007ba8 <_getpid>

08013fe0 <__swhatbuf_r>:
 8013fe0:	b570      	push	{r4, r5, r6, lr}
 8013fe2:	460c      	mov	r4, r1
 8013fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fe8:	2900      	cmp	r1, #0
 8013fea:	b096      	sub	sp, #88	@ 0x58
 8013fec:	4615      	mov	r5, r2
 8013fee:	461e      	mov	r6, r3
 8013ff0:	da0d      	bge.n	801400e <__swhatbuf_r+0x2e>
 8013ff2:	89a3      	ldrh	r3, [r4, #12]
 8013ff4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013ff8:	f04f 0100 	mov.w	r1, #0
 8013ffc:	bf14      	ite	ne
 8013ffe:	2340      	movne	r3, #64	@ 0x40
 8014000:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014004:	2000      	movs	r0, #0
 8014006:	6031      	str	r1, [r6, #0]
 8014008:	602b      	str	r3, [r5, #0]
 801400a:	b016      	add	sp, #88	@ 0x58
 801400c:	bd70      	pop	{r4, r5, r6, pc}
 801400e:	466a      	mov	r2, sp
 8014010:	f000 f848 	bl	80140a4 <_fstat_r>
 8014014:	2800      	cmp	r0, #0
 8014016:	dbec      	blt.n	8013ff2 <__swhatbuf_r+0x12>
 8014018:	9901      	ldr	r1, [sp, #4]
 801401a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801401e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014022:	4259      	negs	r1, r3
 8014024:	4159      	adcs	r1, r3
 8014026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801402a:	e7eb      	b.n	8014004 <__swhatbuf_r+0x24>

0801402c <__smakebuf_r>:
 801402c:	898b      	ldrh	r3, [r1, #12]
 801402e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014030:	079d      	lsls	r5, r3, #30
 8014032:	4606      	mov	r6, r0
 8014034:	460c      	mov	r4, r1
 8014036:	d507      	bpl.n	8014048 <__smakebuf_r+0x1c>
 8014038:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801403c:	6023      	str	r3, [r4, #0]
 801403e:	6123      	str	r3, [r4, #16]
 8014040:	2301      	movs	r3, #1
 8014042:	6163      	str	r3, [r4, #20]
 8014044:	b003      	add	sp, #12
 8014046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014048:	ab01      	add	r3, sp, #4
 801404a:	466a      	mov	r2, sp
 801404c:	f7ff ffc8 	bl	8013fe0 <__swhatbuf_r>
 8014050:	9f00      	ldr	r7, [sp, #0]
 8014052:	4605      	mov	r5, r0
 8014054:	4639      	mov	r1, r7
 8014056:	4630      	mov	r0, r6
 8014058:	f7fb f8c2 	bl	800f1e0 <_malloc_r>
 801405c:	b948      	cbnz	r0, 8014072 <__smakebuf_r+0x46>
 801405e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014062:	059a      	lsls	r2, r3, #22
 8014064:	d4ee      	bmi.n	8014044 <__smakebuf_r+0x18>
 8014066:	f023 0303 	bic.w	r3, r3, #3
 801406a:	f043 0302 	orr.w	r3, r3, #2
 801406e:	81a3      	strh	r3, [r4, #12]
 8014070:	e7e2      	b.n	8014038 <__smakebuf_r+0xc>
 8014072:	89a3      	ldrh	r3, [r4, #12]
 8014074:	6020      	str	r0, [r4, #0]
 8014076:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801407a:	81a3      	strh	r3, [r4, #12]
 801407c:	9b01      	ldr	r3, [sp, #4]
 801407e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014082:	b15b      	cbz	r3, 801409c <__smakebuf_r+0x70>
 8014084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014088:	4630      	mov	r0, r6
 801408a:	f000 f81d 	bl	80140c8 <_isatty_r>
 801408e:	b128      	cbz	r0, 801409c <__smakebuf_r+0x70>
 8014090:	89a3      	ldrh	r3, [r4, #12]
 8014092:	f023 0303 	bic.w	r3, r3, #3
 8014096:	f043 0301 	orr.w	r3, r3, #1
 801409a:	81a3      	strh	r3, [r4, #12]
 801409c:	89a3      	ldrh	r3, [r4, #12]
 801409e:	431d      	orrs	r5, r3
 80140a0:	81a5      	strh	r5, [r4, #12]
 80140a2:	e7cf      	b.n	8014044 <__smakebuf_r+0x18>

080140a4 <_fstat_r>:
 80140a4:	b538      	push	{r3, r4, r5, lr}
 80140a6:	4d07      	ldr	r5, [pc, #28]	@ (80140c4 <_fstat_r+0x20>)
 80140a8:	2300      	movs	r3, #0
 80140aa:	4604      	mov	r4, r0
 80140ac:	4608      	mov	r0, r1
 80140ae:	4611      	mov	r1, r2
 80140b0:	602b      	str	r3, [r5, #0]
 80140b2:	f7f3 fde1 	bl	8007c78 <_fstat>
 80140b6:	1c43      	adds	r3, r0, #1
 80140b8:	d102      	bne.n	80140c0 <_fstat_r+0x1c>
 80140ba:	682b      	ldr	r3, [r5, #0]
 80140bc:	b103      	cbz	r3, 80140c0 <_fstat_r+0x1c>
 80140be:	6023      	str	r3, [r4, #0]
 80140c0:	bd38      	pop	{r3, r4, r5, pc}
 80140c2:	bf00      	nop
 80140c4:	20001b20 	.word	0x20001b20

080140c8 <_isatty_r>:
 80140c8:	b538      	push	{r3, r4, r5, lr}
 80140ca:	4d06      	ldr	r5, [pc, #24]	@ (80140e4 <_isatty_r+0x1c>)
 80140cc:	2300      	movs	r3, #0
 80140ce:	4604      	mov	r4, r0
 80140d0:	4608      	mov	r0, r1
 80140d2:	602b      	str	r3, [r5, #0]
 80140d4:	f7f3 fde0 	bl	8007c98 <_isatty>
 80140d8:	1c43      	adds	r3, r0, #1
 80140da:	d102      	bne.n	80140e2 <_isatty_r+0x1a>
 80140dc:	682b      	ldr	r3, [r5, #0]
 80140de:	b103      	cbz	r3, 80140e2 <_isatty_r+0x1a>
 80140e0:	6023      	str	r3, [r4, #0]
 80140e2:	bd38      	pop	{r3, r4, r5, pc}
 80140e4:	20001b20 	.word	0x20001b20

080140e8 <pow>:
 80140e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ea:	ed2d 8b02 	vpush	{d8}
 80140ee:	eeb0 8a40 	vmov.f32	s16, s0
 80140f2:	eef0 8a60 	vmov.f32	s17, s1
 80140f6:	ec55 4b11 	vmov	r4, r5, d1
 80140fa:	f000 fc75 	bl	80149e8 <__ieee754_pow>
 80140fe:	4622      	mov	r2, r4
 8014100:	462b      	mov	r3, r5
 8014102:	4620      	mov	r0, r4
 8014104:	4629      	mov	r1, r5
 8014106:	ec57 6b10 	vmov	r6, r7, d0
 801410a:	f7ec fd2f 	bl	8000b6c <__aeabi_dcmpun>
 801410e:	2800      	cmp	r0, #0
 8014110:	d13b      	bne.n	801418a <pow+0xa2>
 8014112:	ec51 0b18 	vmov	r0, r1, d8
 8014116:	2200      	movs	r2, #0
 8014118:	2300      	movs	r3, #0
 801411a:	f7ec fcf5 	bl	8000b08 <__aeabi_dcmpeq>
 801411e:	b1b8      	cbz	r0, 8014150 <pow+0x68>
 8014120:	2200      	movs	r2, #0
 8014122:	2300      	movs	r3, #0
 8014124:	4620      	mov	r0, r4
 8014126:	4629      	mov	r1, r5
 8014128:	f7ec fcee 	bl	8000b08 <__aeabi_dcmpeq>
 801412c:	2800      	cmp	r0, #0
 801412e:	d146      	bne.n	80141be <pow+0xd6>
 8014130:	ec45 4b10 	vmov	d0, r4, r5
 8014134:	f000 f919 	bl	801436a <finite>
 8014138:	b338      	cbz	r0, 801418a <pow+0xa2>
 801413a:	2200      	movs	r2, #0
 801413c:	2300      	movs	r3, #0
 801413e:	4620      	mov	r0, r4
 8014140:	4629      	mov	r1, r5
 8014142:	f7ec fceb 	bl	8000b1c <__aeabi_dcmplt>
 8014146:	b300      	cbz	r0, 801418a <pow+0xa2>
 8014148:	f7fc f91c 	bl	8010384 <__errno>
 801414c:	2322      	movs	r3, #34	@ 0x22
 801414e:	e01b      	b.n	8014188 <pow+0xa0>
 8014150:	ec47 6b10 	vmov	d0, r6, r7
 8014154:	f000 f909 	bl	801436a <finite>
 8014158:	b9e0      	cbnz	r0, 8014194 <pow+0xac>
 801415a:	eeb0 0a48 	vmov.f32	s0, s16
 801415e:	eef0 0a68 	vmov.f32	s1, s17
 8014162:	f000 f902 	bl	801436a <finite>
 8014166:	b1a8      	cbz	r0, 8014194 <pow+0xac>
 8014168:	ec45 4b10 	vmov	d0, r4, r5
 801416c:	f000 f8fd 	bl	801436a <finite>
 8014170:	b180      	cbz	r0, 8014194 <pow+0xac>
 8014172:	4632      	mov	r2, r6
 8014174:	463b      	mov	r3, r7
 8014176:	4630      	mov	r0, r6
 8014178:	4639      	mov	r1, r7
 801417a:	f7ec fcf7 	bl	8000b6c <__aeabi_dcmpun>
 801417e:	2800      	cmp	r0, #0
 8014180:	d0e2      	beq.n	8014148 <pow+0x60>
 8014182:	f7fc f8ff 	bl	8010384 <__errno>
 8014186:	2321      	movs	r3, #33	@ 0x21
 8014188:	6003      	str	r3, [r0, #0]
 801418a:	ecbd 8b02 	vpop	{d8}
 801418e:	ec47 6b10 	vmov	d0, r6, r7
 8014192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014194:	2200      	movs	r2, #0
 8014196:	2300      	movs	r3, #0
 8014198:	4630      	mov	r0, r6
 801419a:	4639      	mov	r1, r7
 801419c:	f7ec fcb4 	bl	8000b08 <__aeabi_dcmpeq>
 80141a0:	2800      	cmp	r0, #0
 80141a2:	d0f2      	beq.n	801418a <pow+0xa2>
 80141a4:	eeb0 0a48 	vmov.f32	s0, s16
 80141a8:	eef0 0a68 	vmov.f32	s1, s17
 80141ac:	f000 f8dd 	bl	801436a <finite>
 80141b0:	2800      	cmp	r0, #0
 80141b2:	d0ea      	beq.n	801418a <pow+0xa2>
 80141b4:	ec45 4b10 	vmov	d0, r4, r5
 80141b8:	f000 f8d7 	bl	801436a <finite>
 80141bc:	e7c3      	b.n	8014146 <pow+0x5e>
 80141be:	4f01      	ldr	r7, [pc, #4]	@ (80141c4 <pow+0xdc>)
 80141c0:	2600      	movs	r6, #0
 80141c2:	e7e2      	b.n	801418a <pow+0xa2>
 80141c4:	3ff00000 	.word	0x3ff00000

080141c8 <sqrt>:
 80141c8:	b538      	push	{r3, r4, r5, lr}
 80141ca:	ed2d 8b02 	vpush	{d8}
 80141ce:	ec55 4b10 	vmov	r4, r5, d0
 80141d2:	f000 f92b 	bl	801442c <__ieee754_sqrt>
 80141d6:	4622      	mov	r2, r4
 80141d8:	462b      	mov	r3, r5
 80141da:	4620      	mov	r0, r4
 80141dc:	4629      	mov	r1, r5
 80141de:	eeb0 8a40 	vmov.f32	s16, s0
 80141e2:	eef0 8a60 	vmov.f32	s17, s1
 80141e6:	f7ec fcc1 	bl	8000b6c <__aeabi_dcmpun>
 80141ea:	b990      	cbnz	r0, 8014212 <sqrt+0x4a>
 80141ec:	2200      	movs	r2, #0
 80141ee:	2300      	movs	r3, #0
 80141f0:	4620      	mov	r0, r4
 80141f2:	4629      	mov	r1, r5
 80141f4:	f7ec fc92 	bl	8000b1c <__aeabi_dcmplt>
 80141f8:	b158      	cbz	r0, 8014212 <sqrt+0x4a>
 80141fa:	f7fc f8c3 	bl	8010384 <__errno>
 80141fe:	2321      	movs	r3, #33	@ 0x21
 8014200:	6003      	str	r3, [r0, #0]
 8014202:	2200      	movs	r2, #0
 8014204:	2300      	movs	r3, #0
 8014206:	4610      	mov	r0, r2
 8014208:	4619      	mov	r1, r3
 801420a:	f7ec fb3f 	bl	800088c <__aeabi_ddiv>
 801420e:	ec41 0b18 	vmov	d8, r0, r1
 8014212:	eeb0 0a48 	vmov.f32	s0, s16
 8014216:	eef0 0a68 	vmov.f32	s1, s17
 801421a:	ecbd 8b02 	vpop	{d8}
 801421e:	bd38      	pop	{r3, r4, r5, pc}

08014220 <cos>:
 8014220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014222:	ec53 2b10 	vmov	r2, r3, d0
 8014226:	4826      	ldr	r0, [pc, #152]	@ (80142c0 <cos+0xa0>)
 8014228:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801422c:	4281      	cmp	r1, r0
 801422e:	d806      	bhi.n	801423e <cos+0x1e>
 8014230:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80142b8 <cos+0x98>
 8014234:	b005      	add	sp, #20
 8014236:	f85d eb04 	ldr.w	lr, [sp], #4
 801423a:	f000 ba51 	b.w	80146e0 <__kernel_cos>
 801423e:	4821      	ldr	r0, [pc, #132]	@ (80142c4 <cos+0xa4>)
 8014240:	4281      	cmp	r1, r0
 8014242:	d908      	bls.n	8014256 <cos+0x36>
 8014244:	4610      	mov	r0, r2
 8014246:	4619      	mov	r1, r3
 8014248:	f7ec f83e 	bl	80002c8 <__aeabi_dsub>
 801424c:	ec41 0b10 	vmov	d0, r0, r1
 8014250:	b005      	add	sp, #20
 8014252:	f85d fb04 	ldr.w	pc, [sp], #4
 8014256:	4668      	mov	r0, sp
 8014258:	f001 f90a 	bl	8015470 <__ieee754_rem_pio2>
 801425c:	f000 0003 	and.w	r0, r0, #3
 8014260:	2801      	cmp	r0, #1
 8014262:	d00b      	beq.n	801427c <cos+0x5c>
 8014264:	2802      	cmp	r0, #2
 8014266:	d015      	beq.n	8014294 <cos+0x74>
 8014268:	b9d8      	cbnz	r0, 80142a2 <cos+0x82>
 801426a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801426e:	ed9d 0b00 	vldr	d0, [sp]
 8014272:	f000 fa35 	bl	80146e0 <__kernel_cos>
 8014276:	ec51 0b10 	vmov	r0, r1, d0
 801427a:	e7e7      	b.n	801424c <cos+0x2c>
 801427c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014280:	ed9d 0b00 	vldr	d0, [sp]
 8014284:	f000 faf4 	bl	8014870 <__kernel_sin>
 8014288:	ec53 2b10 	vmov	r2, r3, d0
 801428c:	4610      	mov	r0, r2
 801428e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014292:	e7db      	b.n	801424c <cos+0x2c>
 8014294:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014298:	ed9d 0b00 	vldr	d0, [sp]
 801429c:	f000 fa20 	bl	80146e0 <__kernel_cos>
 80142a0:	e7f2      	b.n	8014288 <cos+0x68>
 80142a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80142a6:	ed9d 0b00 	vldr	d0, [sp]
 80142aa:	2001      	movs	r0, #1
 80142ac:	f000 fae0 	bl	8014870 <__kernel_sin>
 80142b0:	e7e1      	b.n	8014276 <cos+0x56>
 80142b2:	bf00      	nop
 80142b4:	f3af 8000 	nop.w
	...
 80142c0:	3fe921fb 	.word	0x3fe921fb
 80142c4:	7fefffff 	.word	0x7fefffff

080142c8 <acosf>:
 80142c8:	b508      	push	{r3, lr}
 80142ca:	ed2d 8b02 	vpush	{d8}
 80142ce:	eeb0 8a40 	vmov.f32	s16, s0
 80142d2:	f001 fad1 	bl	8015878 <__ieee754_acosf>
 80142d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80142da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142de:	eef0 8a40 	vmov.f32	s17, s0
 80142e2:	d615      	bvs.n	8014310 <acosf+0x48>
 80142e4:	eeb0 0a48 	vmov.f32	s0, s16
 80142e8:	f000 f838 	bl	801435c <fabsf>
 80142ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80142f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80142f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142f8:	dd0a      	ble.n	8014310 <acosf+0x48>
 80142fa:	f7fc f843 	bl	8010384 <__errno>
 80142fe:	ecbd 8b02 	vpop	{d8}
 8014302:	2321      	movs	r3, #33	@ 0x21
 8014304:	6003      	str	r3, [r0, #0]
 8014306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801430a:	4804      	ldr	r0, [pc, #16]	@ (801431c <acosf+0x54>)
 801430c:	f7fc b876 	b.w	80103fc <nanf>
 8014310:	eeb0 0a68 	vmov.f32	s0, s17
 8014314:	ecbd 8b02 	vpop	{d8}
 8014318:	bd08      	pop	{r3, pc}
 801431a:	bf00      	nop
 801431c:	08016988 	.word	0x08016988

08014320 <sqrtf>:
 8014320:	b508      	push	{r3, lr}
 8014322:	ed2d 8b02 	vpush	{d8}
 8014326:	eeb0 8a40 	vmov.f32	s16, s0
 801432a:	f000 f959 	bl	80145e0 <__ieee754_sqrtf>
 801432e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014336:	d60c      	bvs.n	8014352 <sqrtf+0x32>
 8014338:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8014358 <sqrtf+0x38>
 801433c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8014340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014344:	d505      	bpl.n	8014352 <sqrtf+0x32>
 8014346:	f7fc f81d 	bl	8010384 <__errno>
 801434a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801434e:	2321      	movs	r3, #33	@ 0x21
 8014350:	6003      	str	r3, [r0, #0]
 8014352:	ecbd 8b02 	vpop	{d8}
 8014356:	bd08      	pop	{r3, pc}
 8014358:	00000000 	.word	0x00000000

0801435c <fabsf>:
 801435c:	ee10 3a10 	vmov	r3, s0
 8014360:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8014364:	ee00 3a10 	vmov	s0, r3
 8014368:	4770      	bx	lr

0801436a <finite>:
 801436a:	b082      	sub	sp, #8
 801436c:	ed8d 0b00 	vstr	d0, [sp]
 8014370:	9801      	ldr	r0, [sp, #4]
 8014372:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8014376:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801437a:	0fc0      	lsrs	r0, r0, #31
 801437c:	b002      	add	sp, #8
 801437e:	4770      	bx	lr

08014380 <fmaxf>:
 8014380:	b508      	push	{r3, lr}
 8014382:	ed2d 8b02 	vpush	{d8}
 8014386:	eeb0 8a40 	vmov.f32	s16, s0
 801438a:	eef0 8a60 	vmov.f32	s17, s1
 801438e:	f000 f831 	bl	80143f4 <__fpclassifyf>
 8014392:	b930      	cbnz	r0, 80143a2 <fmaxf+0x22>
 8014394:	eeb0 8a68 	vmov.f32	s16, s17
 8014398:	eeb0 0a48 	vmov.f32	s0, s16
 801439c:	ecbd 8b02 	vpop	{d8}
 80143a0:	bd08      	pop	{r3, pc}
 80143a2:	eeb0 0a68 	vmov.f32	s0, s17
 80143a6:	f000 f825 	bl	80143f4 <__fpclassifyf>
 80143aa:	2800      	cmp	r0, #0
 80143ac:	d0f4      	beq.n	8014398 <fmaxf+0x18>
 80143ae:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80143b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143b6:	dded      	ble.n	8014394 <fmaxf+0x14>
 80143b8:	e7ee      	b.n	8014398 <fmaxf+0x18>

080143ba <fminf>:
 80143ba:	b508      	push	{r3, lr}
 80143bc:	ed2d 8b02 	vpush	{d8}
 80143c0:	eeb0 8a40 	vmov.f32	s16, s0
 80143c4:	eef0 8a60 	vmov.f32	s17, s1
 80143c8:	f000 f814 	bl	80143f4 <__fpclassifyf>
 80143cc:	b930      	cbnz	r0, 80143dc <fminf+0x22>
 80143ce:	eeb0 8a68 	vmov.f32	s16, s17
 80143d2:	eeb0 0a48 	vmov.f32	s0, s16
 80143d6:	ecbd 8b02 	vpop	{d8}
 80143da:	bd08      	pop	{r3, pc}
 80143dc:	eeb0 0a68 	vmov.f32	s0, s17
 80143e0:	f000 f808 	bl	80143f4 <__fpclassifyf>
 80143e4:	2800      	cmp	r0, #0
 80143e6:	d0f4      	beq.n	80143d2 <fminf+0x18>
 80143e8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80143ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f0:	d5ed      	bpl.n	80143ce <fminf+0x14>
 80143f2:	e7ee      	b.n	80143d2 <fminf+0x18>

080143f4 <__fpclassifyf>:
 80143f4:	ee10 3a10 	vmov	r3, s0
 80143f8:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 80143fc:	d00d      	beq.n	801441a <__fpclassifyf+0x26>
 80143fe:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8014402:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8014406:	d30a      	bcc.n	801441e <__fpclassifyf+0x2a>
 8014408:	4b07      	ldr	r3, [pc, #28]	@ (8014428 <__fpclassifyf+0x34>)
 801440a:	1e42      	subs	r2, r0, #1
 801440c:	429a      	cmp	r2, r3
 801440e:	d908      	bls.n	8014422 <__fpclassifyf+0x2e>
 8014410:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8014414:	4258      	negs	r0, r3
 8014416:	4158      	adcs	r0, r3
 8014418:	4770      	bx	lr
 801441a:	2002      	movs	r0, #2
 801441c:	4770      	bx	lr
 801441e:	2004      	movs	r0, #4
 8014420:	4770      	bx	lr
 8014422:	2003      	movs	r0, #3
 8014424:	4770      	bx	lr
 8014426:	bf00      	nop
 8014428:	007ffffe 	.word	0x007ffffe

0801442c <__ieee754_sqrt>:
 801442c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014430:	4a68      	ldr	r2, [pc, #416]	@ (80145d4 <__ieee754_sqrt+0x1a8>)
 8014432:	ec55 4b10 	vmov	r4, r5, d0
 8014436:	43aa      	bics	r2, r5
 8014438:	462b      	mov	r3, r5
 801443a:	4621      	mov	r1, r4
 801443c:	d110      	bne.n	8014460 <__ieee754_sqrt+0x34>
 801443e:	4622      	mov	r2, r4
 8014440:	4620      	mov	r0, r4
 8014442:	4629      	mov	r1, r5
 8014444:	f7ec f8f8 	bl	8000638 <__aeabi_dmul>
 8014448:	4602      	mov	r2, r0
 801444a:	460b      	mov	r3, r1
 801444c:	4620      	mov	r0, r4
 801444e:	4629      	mov	r1, r5
 8014450:	f7eb ff3c 	bl	80002cc <__adddf3>
 8014454:	4604      	mov	r4, r0
 8014456:	460d      	mov	r5, r1
 8014458:	ec45 4b10 	vmov	d0, r4, r5
 801445c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014460:	2d00      	cmp	r5, #0
 8014462:	dc0e      	bgt.n	8014482 <__ieee754_sqrt+0x56>
 8014464:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8014468:	4322      	orrs	r2, r4
 801446a:	d0f5      	beq.n	8014458 <__ieee754_sqrt+0x2c>
 801446c:	b19d      	cbz	r5, 8014496 <__ieee754_sqrt+0x6a>
 801446e:	4622      	mov	r2, r4
 8014470:	4620      	mov	r0, r4
 8014472:	4629      	mov	r1, r5
 8014474:	f7eb ff28 	bl	80002c8 <__aeabi_dsub>
 8014478:	4602      	mov	r2, r0
 801447a:	460b      	mov	r3, r1
 801447c:	f7ec fa06 	bl	800088c <__aeabi_ddiv>
 8014480:	e7e8      	b.n	8014454 <__ieee754_sqrt+0x28>
 8014482:	152a      	asrs	r2, r5, #20
 8014484:	d115      	bne.n	80144b2 <__ieee754_sqrt+0x86>
 8014486:	2000      	movs	r0, #0
 8014488:	e009      	b.n	801449e <__ieee754_sqrt+0x72>
 801448a:	0acb      	lsrs	r3, r1, #11
 801448c:	3a15      	subs	r2, #21
 801448e:	0549      	lsls	r1, r1, #21
 8014490:	2b00      	cmp	r3, #0
 8014492:	d0fa      	beq.n	801448a <__ieee754_sqrt+0x5e>
 8014494:	e7f7      	b.n	8014486 <__ieee754_sqrt+0x5a>
 8014496:	462a      	mov	r2, r5
 8014498:	e7fa      	b.n	8014490 <__ieee754_sqrt+0x64>
 801449a:	005b      	lsls	r3, r3, #1
 801449c:	3001      	adds	r0, #1
 801449e:	02dc      	lsls	r4, r3, #11
 80144a0:	d5fb      	bpl.n	801449a <__ieee754_sqrt+0x6e>
 80144a2:	1e44      	subs	r4, r0, #1
 80144a4:	1b12      	subs	r2, r2, r4
 80144a6:	f1c0 0420 	rsb	r4, r0, #32
 80144aa:	fa21 f404 	lsr.w	r4, r1, r4
 80144ae:	4323      	orrs	r3, r4
 80144b0:	4081      	lsls	r1, r0
 80144b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80144b6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80144ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80144be:	07d2      	lsls	r2, r2, #31
 80144c0:	bf5c      	itt	pl
 80144c2:	005b      	lslpl	r3, r3, #1
 80144c4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80144c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80144cc:	bf58      	it	pl
 80144ce:	0049      	lslpl	r1, r1, #1
 80144d0:	2600      	movs	r6, #0
 80144d2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80144d6:	106d      	asrs	r5, r5, #1
 80144d8:	0049      	lsls	r1, r1, #1
 80144da:	2016      	movs	r0, #22
 80144dc:	4632      	mov	r2, r6
 80144de:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80144e2:	1917      	adds	r7, r2, r4
 80144e4:	429f      	cmp	r7, r3
 80144e6:	bfde      	ittt	le
 80144e8:	193a      	addle	r2, r7, r4
 80144ea:	1bdb      	suble	r3, r3, r7
 80144ec:	1936      	addle	r6, r6, r4
 80144ee:	0fcf      	lsrs	r7, r1, #31
 80144f0:	3801      	subs	r0, #1
 80144f2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80144f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80144fa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80144fe:	d1f0      	bne.n	80144e2 <__ieee754_sqrt+0xb6>
 8014500:	4604      	mov	r4, r0
 8014502:	2720      	movs	r7, #32
 8014504:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8014508:	429a      	cmp	r2, r3
 801450a:	eb00 0e0c 	add.w	lr, r0, ip
 801450e:	db02      	blt.n	8014516 <__ieee754_sqrt+0xea>
 8014510:	d113      	bne.n	801453a <__ieee754_sqrt+0x10e>
 8014512:	458e      	cmp	lr, r1
 8014514:	d811      	bhi.n	801453a <__ieee754_sqrt+0x10e>
 8014516:	f1be 0f00 	cmp.w	lr, #0
 801451a:	eb0e 000c 	add.w	r0, lr, ip
 801451e:	da42      	bge.n	80145a6 <__ieee754_sqrt+0x17a>
 8014520:	2800      	cmp	r0, #0
 8014522:	db40      	blt.n	80145a6 <__ieee754_sqrt+0x17a>
 8014524:	f102 0801 	add.w	r8, r2, #1
 8014528:	1a9b      	subs	r3, r3, r2
 801452a:	458e      	cmp	lr, r1
 801452c:	bf88      	it	hi
 801452e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8014532:	eba1 010e 	sub.w	r1, r1, lr
 8014536:	4464      	add	r4, ip
 8014538:	4642      	mov	r2, r8
 801453a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801453e:	3f01      	subs	r7, #1
 8014540:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8014544:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014548:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801454c:	d1dc      	bne.n	8014508 <__ieee754_sqrt+0xdc>
 801454e:	4319      	orrs	r1, r3
 8014550:	d01b      	beq.n	801458a <__ieee754_sqrt+0x15e>
 8014552:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80145d8 <__ieee754_sqrt+0x1ac>
 8014556:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80145dc <__ieee754_sqrt+0x1b0>
 801455a:	e9da 0100 	ldrd	r0, r1, [sl]
 801455e:	e9db 2300 	ldrd	r2, r3, [fp]
 8014562:	f7eb feb1 	bl	80002c8 <__aeabi_dsub>
 8014566:	e9da 8900 	ldrd	r8, r9, [sl]
 801456a:	4602      	mov	r2, r0
 801456c:	460b      	mov	r3, r1
 801456e:	4640      	mov	r0, r8
 8014570:	4649      	mov	r1, r9
 8014572:	f7ec fadd 	bl	8000b30 <__aeabi_dcmple>
 8014576:	b140      	cbz	r0, 801458a <__ieee754_sqrt+0x15e>
 8014578:	f1b4 3fff 	cmp.w	r4, #4294967295
 801457c:	e9da 0100 	ldrd	r0, r1, [sl]
 8014580:	e9db 2300 	ldrd	r2, r3, [fp]
 8014584:	d111      	bne.n	80145aa <__ieee754_sqrt+0x17e>
 8014586:	3601      	adds	r6, #1
 8014588:	463c      	mov	r4, r7
 801458a:	1072      	asrs	r2, r6, #1
 801458c:	0863      	lsrs	r3, r4, #1
 801458e:	07f1      	lsls	r1, r6, #31
 8014590:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8014594:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8014598:	bf48      	it	mi
 801459a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801459e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80145a2:	4618      	mov	r0, r3
 80145a4:	e756      	b.n	8014454 <__ieee754_sqrt+0x28>
 80145a6:	4690      	mov	r8, r2
 80145a8:	e7be      	b.n	8014528 <__ieee754_sqrt+0xfc>
 80145aa:	f7eb fe8f 	bl	80002cc <__adddf3>
 80145ae:	e9da 8900 	ldrd	r8, r9, [sl]
 80145b2:	4602      	mov	r2, r0
 80145b4:	460b      	mov	r3, r1
 80145b6:	4640      	mov	r0, r8
 80145b8:	4649      	mov	r1, r9
 80145ba:	f7ec faaf 	bl	8000b1c <__aeabi_dcmplt>
 80145be:	b120      	cbz	r0, 80145ca <__ieee754_sqrt+0x19e>
 80145c0:	1ca0      	adds	r0, r4, #2
 80145c2:	bf08      	it	eq
 80145c4:	3601      	addeq	r6, #1
 80145c6:	3402      	adds	r4, #2
 80145c8:	e7df      	b.n	801458a <__ieee754_sqrt+0x15e>
 80145ca:	1c63      	adds	r3, r4, #1
 80145cc:	f023 0401 	bic.w	r4, r3, #1
 80145d0:	e7db      	b.n	801458a <__ieee754_sqrt+0x15e>
 80145d2:	bf00      	nop
 80145d4:	7ff00000 	.word	0x7ff00000
 80145d8:	20000240 	.word	0x20000240
 80145dc:	20000238 	.word	0x20000238

080145e0 <__ieee754_sqrtf>:
 80145e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80145e4:	4770      	bx	lr
	...

080145e8 <floor>:
 80145e8:	ec51 0b10 	vmov	r0, r1, d0
 80145ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80145f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145f4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80145f8:	2e13      	cmp	r6, #19
 80145fa:	460c      	mov	r4, r1
 80145fc:	4605      	mov	r5, r0
 80145fe:	4680      	mov	r8, r0
 8014600:	dc34      	bgt.n	801466c <floor+0x84>
 8014602:	2e00      	cmp	r6, #0
 8014604:	da17      	bge.n	8014636 <floor+0x4e>
 8014606:	a332      	add	r3, pc, #200	@ (adr r3, 80146d0 <floor+0xe8>)
 8014608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460c:	f7eb fe5e 	bl	80002cc <__adddf3>
 8014610:	2200      	movs	r2, #0
 8014612:	2300      	movs	r3, #0
 8014614:	f7ec faa0 	bl	8000b58 <__aeabi_dcmpgt>
 8014618:	b150      	cbz	r0, 8014630 <floor+0x48>
 801461a:	2c00      	cmp	r4, #0
 801461c:	da55      	bge.n	80146ca <floor+0xe2>
 801461e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8014622:	432c      	orrs	r4, r5
 8014624:	2500      	movs	r5, #0
 8014626:	42ac      	cmp	r4, r5
 8014628:	4c2b      	ldr	r4, [pc, #172]	@ (80146d8 <floor+0xf0>)
 801462a:	bf08      	it	eq
 801462c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8014630:	4621      	mov	r1, r4
 8014632:	4628      	mov	r0, r5
 8014634:	e023      	b.n	801467e <floor+0x96>
 8014636:	4f29      	ldr	r7, [pc, #164]	@ (80146dc <floor+0xf4>)
 8014638:	4137      	asrs	r7, r6
 801463a:	ea01 0307 	and.w	r3, r1, r7
 801463e:	4303      	orrs	r3, r0
 8014640:	d01d      	beq.n	801467e <floor+0x96>
 8014642:	a323      	add	r3, pc, #140	@ (adr r3, 80146d0 <floor+0xe8>)
 8014644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014648:	f7eb fe40 	bl	80002cc <__adddf3>
 801464c:	2200      	movs	r2, #0
 801464e:	2300      	movs	r3, #0
 8014650:	f7ec fa82 	bl	8000b58 <__aeabi_dcmpgt>
 8014654:	2800      	cmp	r0, #0
 8014656:	d0eb      	beq.n	8014630 <floor+0x48>
 8014658:	2c00      	cmp	r4, #0
 801465a:	bfbe      	ittt	lt
 801465c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014660:	4133      	asrlt	r3, r6
 8014662:	18e4      	addlt	r4, r4, r3
 8014664:	ea24 0407 	bic.w	r4, r4, r7
 8014668:	2500      	movs	r5, #0
 801466a:	e7e1      	b.n	8014630 <floor+0x48>
 801466c:	2e33      	cmp	r6, #51	@ 0x33
 801466e:	dd0a      	ble.n	8014686 <floor+0x9e>
 8014670:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014674:	d103      	bne.n	801467e <floor+0x96>
 8014676:	4602      	mov	r2, r0
 8014678:	460b      	mov	r3, r1
 801467a:	f7eb fe27 	bl	80002cc <__adddf3>
 801467e:	ec41 0b10 	vmov	d0, r0, r1
 8014682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014686:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801468a:	f04f 37ff 	mov.w	r7, #4294967295
 801468e:	40df      	lsrs	r7, r3
 8014690:	4207      	tst	r7, r0
 8014692:	d0f4      	beq.n	801467e <floor+0x96>
 8014694:	a30e      	add	r3, pc, #56	@ (adr r3, 80146d0 <floor+0xe8>)
 8014696:	e9d3 2300 	ldrd	r2, r3, [r3]
 801469a:	f7eb fe17 	bl	80002cc <__adddf3>
 801469e:	2200      	movs	r2, #0
 80146a0:	2300      	movs	r3, #0
 80146a2:	f7ec fa59 	bl	8000b58 <__aeabi_dcmpgt>
 80146a6:	2800      	cmp	r0, #0
 80146a8:	d0c2      	beq.n	8014630 <floor+0x48>
 80146aa:	2c00      	cmp	r4, #0
 80146ac:	da0a      	bge.n	80146c4 <floor+0xdc>
 80146ae:	2e14      	cmp	r6, #20
 80146b0:	d101      	bne.n	80146b6 <floor+0xce>
 80146b2:	3401      	adds	r4, #1
 80146b4:	e006      	b.n	80146c4 <floor+0xdc>
 80146b6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80146ba:	2301      	movs	r3, #1
 80146bc:	40b3      	lsls	r3, r6
 80146be:	441d      	add	r5, r3
 80146c0:	4545      	cmp	r5, r8
 80146c2:	d3f6      	bcc.n	80146b2 <floor+0xca>
 80146c4:	ea25 0507 	bic.w	r5, r5, r7
 80146c8:	e7b2      	b.n	8014630 <floor+0x48>
 80146ca:	2500      	movs	r5, #0
 80146cc:	462c      	mov	r4, r5
 80146ce:	e7af      	b.n	8014630 <floor+0x48>
 80146d0:	8800759c 	.word	0x8800759c
 80146d4:	7e37e43c 	.word	0x7e37e43c
 80146d8:	bff00000 	.word	0xbff00000
 80146dc:	000fffff 	.word	0x000fffff

080146e0 <__kernel_cos>:
 80146e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146e4:	ec57 6b10 	vmov	r6, r7, d0
 80146e8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80146ec:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80146f0:	ed8d 1b00 	vstr	d1, [sp]
 80146f4:	d206      	bcs.n	8014704 <__kernel_cos+0x24>
 80146f6:	4630      	mov	r0, r6
 80146f8:	4639      	mov	r1, r7
 80146fa:	f7ec fa4d 	bl	8000b98 <__aeabi_d2iz>
 80146fe:	2800      	cmp	r0, #0
 8014700:	f000 8088 	beq.w	8014814 <__kernel_cos+0x134>
 8014704:	4632      	mov	r2, r6
 8014706:	463b      	mov	r3, r7
 8014708:	4630      	mov	r0, r6
 801470a:	4639      	mov	r1, r7
 801470c:	f7eb ff94 	bl	8000638 <__aeabi_dmul>
 8014710:	4b51      	ldr	r3, [pc, #324]	@ (8014858 <__kernel_cos+0x178>)
 8014712:	2200      	movs	r2, #0
 8014714:	4604      	mov	r4, r0
 8014716:	460d      	mov	r5, r1
 8014718:	f7eb ff8e 	bl	8000638 <__aeabi_dmul>
 801471c:	a340      	add	r3, pc, #256	@ (adr r3, 8014820 <__kernel_cos+0x140>)
 801471e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014722:	4682      	mov	sl, r0
 8014724:	468b      	mov	fp, r1
 8014726:	4620      	mov	r0, r4
 8014728:	4629      	mov	r1, r5
 801472a:	f7eb ff85 	bl	8000638 <__aeabi_dmul>
 801472e:	a33e      	add	r3, pc, #248	@ (adr r3, 8014828 <__kernel_cos+0x148>)
 8014730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014734:	f7eb fdca 	bl	80002cc <__adddf3>
 8014738:	4622      	mov	r2, r4
 801473a:	462b      	mov	r3, r5
 801473c:	f7eb ff7c 	bl	8000638 <__aeabi_dmul>
 8014740:	a33b      	add	r3, pc, #236	@ (adr r3, 8014830 <__kernel_cos+0x150>)
 8014742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014746:	f7eb fdbf 	bl	80002c8 <__aeabi_dsub>
 801474a:	4622      	mov	r2, r4
 801474c:	462b      	mov	r3, r5
 801474e:	f7eb ff73 	bl	8000638 <__aeabi_dmul>
 8014752:	a339      	add	r3, pc, #228	@ (adr r3, 8014838 <__kernel_cos+0x158>)
 8014754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014758:	f7eb fdb8 	bl	80002cc <__adddf3>
 801475c:	4622      	mov	r2, r4
 801475e:	462b      	mov	r3, r5
 8014760:	f7eb ff6a 	bl	8000638 <__aeabi_dmul>
 8014764:	a336      	add	r3, pc, #216	@ (adr r3, 8014840 <__kernel_cos+0x160>)
 8014766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476a:	f7eb fdad 	bl	80002c8 <__aeabi_dsub>
 801476e:	4622      	mov	r2, r4
 8014770:	462b      	mov	r3, r5
 8014772:	f7eb ff61 	bl	8000638 <__aeabi_dmul>
 8014776:	a334      	add	r3, pc, #208	@ (adr r3, 8014848 <__kernel_cos+0x168>)
 8014778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801477c:	f7eb fda6 	bl	80002cc <__adddf3>
 8014780:	4622      	mov	r2, r4
 8014782:	462b      	mov	r3, r5
 8014784:	f7eb ff58 	bl	8000638 <__aeabi_dmul>
 8014788:	4622      	mov	r2, r4
 801478a:	462b      	mov	r3, r5
 801478c:	f7eb ff54 	bl	8000638 <__aeabi_dmul>
 8014790:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014794:	4604      	mov	r4, r0
 8014796:	460d      	mov	r5, r1
 8014798:	4630      	mov	r0, r6
 801479a:	4639      	mov	r1, r7
 801479c:	f7eb ff4c 	bl	8000638 <__aeabi_dmul>
 80147a0:	460b      	mov	r3, r1
 80147a2:	4602      	mov	r2, r0
 80147a4:	4629      	mov	r1, r5
 80147a6:	4620      	mov	r0, r4
 80147a8:	f7eb fd8e 	bl	80002c8 <__aeabi_dsub>
 80147ac:	4b2b      	ldr	r3, [pc, #172]	@ (801485c <__kernel_cos+0x17c>)
 80147ae:	4598      	cmp	r8, r3
 80147b0:	4606      	mov	r6, r0
 80147b2:	460f      	mov	r7, r1
 80147b4:	d810      	bhi.n	80147d8 <__kernel_cos+0xf8>
 80147b6:	4602      	mov	r2, r0
 80147b8:	460b      	mov	r3, r1
 80147ba:	4650      	mov	r0, sl
 80147bc:	4659      	mov	r1, fp
 80147be:	f7eb fd83 	bl	80002c8 <__aeabi_dsub>
 80147c2:	460b      	mov	r3, r1
 80147c4:	4926      	ldr	r1, [pc, #152]	@ (8014860 <__kernel_cos+0x180>)
 80147c6:	4602      	mov	r2, r0
 80147c8:	2000      	movs	r0, #0
 80147ca:	f7eb fd7d 	bl	80002c8 <__aeabi_dsub>
 80147ce:	ec41 0b10 	vmov	d0, r0, r1
 80147d2:	b003      	add	sp, #12
 80147d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147d8:	4b22      	ldr	r3, [pc, #136]	@ (8014864 <__kernel_cos+0x184>)
 80147da:	4921      	ldr	r1, [pc, #132]	@ (8014860 <__kernel_cos+0x180>)
 80147dc:	4598      	cmp	r8, r3
 80147de:	bf8c      	ite	hi
 80147e0:	4d21      	ldrhi	r5, [pc, #132]	@ (8014868 <__kernel_cos+0x188>)
 80147e2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80147e6:	2400      	movs	r4, #0
 80147e8:	4622      	mov	r2, r4
 80147ea:	462b      	mov	r3, r5
 80147ec:	2000      	movs	r0, #0
 80147ee:	f7eb fd6b 	bl	80002c8 <__aeabi_dsub>
 80147f2:	4622      	mov	r2, r4
 80147f4:	4680      	mov	r8, r0
 80147f6:	4689      	mov	r9, r1
 80147f8:	462b      	mov	r3, r5
 80147fa:	4650      	mov	r0, sl
 80147fc:	4659      	mov	r1, fp
 80147fe:	f7eb fd63 	bl	80002c8 <__aeabi_dsub>
 8014802:	4632      	mov	r2, r6
 8014804:	463b      	mov	r3, r7
 8014806:	f7eb fd5f 	bl	80002c8 <__aeabi_dsub>
 801480a:	4602      	mov	r2, r0
 801480c:	460b      	mov	r3, r1
 801480e:	4640      	mov	r0, r8
 8014810:	4649      	mov	r1, r9
 8014812:	e7da      	b.n	80147ca <__kernel_cos+0xea>
 8014814:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8014850 <__kernel_cos+0x170>
 8014818:	e7db      	b.n	80147d2 <__kernel_cos+0xf2>
 801481a:	bf00      	nop
 801481c:	f3af 8000 	nop.w
 8014820:	be8838d4 	.word	0xbe8838d4
 8014824:	bda8fae9 	.word	0xbda8fae9
 8014828:	bdb4b1c4 	.word	0xbdb4b1c4
 801482c:	3e21ee9e 	.word	0x3e21ee9e
 8014830:	809c52ad 	.word	0x809c52ad
 8014834:	3e927e4f 	.word	0x3e927e4f
 8014838:	19cb1590 	.word	0x19cb1590
 801483c:	3efa01a0 	.word	0x3efa01a0
 8014840:	16c15177 	.word	0x16c15177
 8014844:	3f56c16c 	.word	0x3f56c16c
 8014848:	5555554c 	.word	0x5555554c
 801484c:	3fa55555 	.word	0x3fa55555
 8014850:	00000000 	.word	0x00000000
 8014854:	3ff00000 	.word	0x3ff00000
 8014858:	3fe00000 	.word	0x3fe00000
 801485c:	3fd33332 	.word	0x3fd33332
 8014860:	3ff00000 	.word	0x3ff00000
 8014864:	3fe90000 	.word	0x3fe90000
 8014868:	3fd20000 	.word	0x3fd20000
 801486c:	00000000 	.word	0x00000000

08014870 <__kernel_sin>:
 8014870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014874:	ec55 4b10 	vmov	r4, r5, d0
 8014878:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801487c:	b085      	sub	sp, #20
 801487e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8014882:	ed8d 1b02 	vstr	d1, [sp, #8]
 8014886:	4680      	mov	r8, r0
 8014888:	d205      	bcs.n	8014896 <__kernel_sin+0x26>
 801488a:	4620      	mov	r0, r4
 801488c:	4629      	mov	r1, r5
 801488e:	f7ec f983 	bl	8000b98 <__aeabi_d2iz>
 8014892:	2800      	cmp	r0, #0
 8014894:	d052      	beq.n	801493c <__kernel_sin+0xcc>
 8014896:	4622      	mov	r2, r4
 8014898:	462b      	mov	r3, r5
 801489a:	4620      	mov	r0, r4
 801489c:	4629      	mov	r1, r5
 801489e:	f7eb fecb 	bl	8000638 <__aeabi_dmul>
 80148a2:	4682      	mov	sl, r0
 80148a4:	468b      	mov	fp, r1
 80148a6:	4602      	mov	r2, r0
 80148a8:	460b      	mov	r3, r1
 80148aa:	4620      	mov	r0, r4
 80148ac:	4629      	mov	r1, r5
 80148ae:	f7eb fec3 	bl	8000638 <__aeabi_dmul>
 80148b2:	a342      	add	r3, pc, #264	@ (adr r3, 80149bc <__kernel_sin+0x14c>)
 80148b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b8:	e9cd 0100 	strd	r0, r1, [sp]
 80148bc:	4650      	mov	r0, sl
 80148be:	4659      	mov	r1, fp
 80148c0:	f7eb feba 	bl	8000638 <__aeabi_dmul>
 80148c4:	a33f      	add	r3, pc, #252	@ (adr r3, 80149c4 <__kernel_sin+0x154>)
 80148c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ca:	f7eb fcfd 	bl	80002c8 <__aeabi_dsub>
 80148ce:	4652      	mov	r2, sl
 80148d0:	465b      	mov	r3, fp
 80148d2:	f7eb feb1 	bl	8000638 <__aeabi_dmul>
 80148d6:	a33d      	add	r3, pc, #244	@ (adr r3, 80149cc <__kernel_sin+0x15c>)
 80148d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148dc:	f7eb fcf6 	bl	80002cc <__adddf3>
 80148e0:	4652      	mov	r2, sl
 80148e2:	465b      	mov	r3, fp
 80148e4:	f7eb fea8 	bl	8000638 <__aeabi_dmul>
 80148e8:	a33a      	add	r3, pc, #232	@ (adr r3, 80149d4 <__kernel_sin+0x164>)
 80148ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ee:	f7eb fceb 	bl	80002c8 <__aeabi_dsub>
 80148f2:	4652      	mov	r2, sl
 80148f4:	465b      	mov	r3, fp
 80148f6:	f7eb fe9f 	bl	8000638 <__aeabi_dmul>
 80148fa:	a338      	add	r3, pc, #224	@ (adr r3, 80149dc <__kernel_sin+0x16c>)
 80148fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014900:	f7eb fce4 	bl	80002cc <__adddf3>
 8014904:	4606      	mov	r6, r0
 8014906:	460f      	mov	r7, r1
 8014908:	f1b8 0f00 	cmp.w	r8, #0
 801490c:	d11b      	bne.n	8014946 <__kernel_sin+0xd6>
 801490e:	4602      	mov	r2, r0
 8014910:	460b      	mov	r3, r1
 8014912:	4650      	mov	r0, sl
 8014914:	4659      	mov	r1, fp
 8014916:	f7eb fe8f 	bl	8000638 <__aeabi_dmul>
 801491a:	a325      	add	r3, pc, #148	@ (adr r3, 80149b0 <__kernel_sin+0x140>)
 801491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014920:	f7eb fcd2 	bl	80002c8 <__aeabi_dsub>
 8014924:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014928:	f7eb fe86 	bl	8000638 <__aeabi_dmul>
 801492c:	4602      	mov	r2, r0
 801492e:	460b      	mov	r3, r1
 8014930:	4620      	mov	r0, r4
 8014932:	4629      	mov	r1, r5
 8014934:	f7eb fcca 	bl	80002cc <__adddf3>
 8014938:	4604      	mov	r4, r0
 801493a:	460d      	mov	r5, r1
 801493c:	ec45 4b10 	vmov	d0, r4, r5
 8014940:	b005      	add	sp, #20
 8014942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801494a:	4b1b      	ldr	r3, [pc, #108]	@ (80149b8 <__kernel_sin+0x148>)
 801494c:	2200      	movs	r2, #0
 801494e:	f7eb fe73 	bl	8000638 <__aeabi_dmul>
 8014952:	4632      	mov	r2, r6
 8014954:	4680      	mov	r8, r0
 8014956:	4689      	mov	r9, r1
 8014958:	463b      	mov	r3, r7
 801495a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801495e:	f7eb fe6b 	bl	8000638 <__aeabi_dmul>
 8014962:	4602      	mov	r2, r0
 8014964:	460b      	mov	r3, r1
 8014966:	4640      	mov	r0, r8
 8014968:	4649      	mov	r1, r9
 801496a:	f7eb fcad 	bl	80002c8 <__aeabi_dsub>
 801496e:	4652      	mov	r2, sl
 8014970:	465b      	mov	r3, fp
 8014972:	f7eb fe61 	bl	8000638 <__aeabi_dmul>
 8014976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801497a:	f7eb fca5 	bl	80002c8 <__aeabi_dsub>
 801497e:	a30c      	add	r3, pc, #48	@ (adr r3, 80149b0 <__kernel_sin+0x140>)
 8014980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014984:	4606      	mov	r6, r0
 8014986:	460f      	mov	r7, r1
 8014988:	e9dd 0100 	ldrd	r0, r1, [sp]
 801498c:	f7eb fe54 	bl	8000638 <__aeabi_dmul>
 8014990:	4602      	mov	r2, r0
 8014992:	460b      	mov	r3, r1
 8014994:	4630      	mov	r0, r6
 8014996:	4639      	mov	r1, r7
 8014998:	f7eb fc98 	bl	80002cc <__adddf3>
 801499c:	4602      	mov	r2, r0
 801499e:	460b      	mov	r3, r1
 80149a0:	4620      	mov	r0, r4
 80149a2:	4629      	mov	r1, r5
 80149a4:	f7eb fc90 	bl	80002c8 <__aeabi_dsub>
 80149a8:	e7c6      	b.n	8014938 <__kernel_sin+0xc8>
 80149aa:	bf00      	nop
 80149ac:	f3af 8000 	nop.w
 80149b0:	55555549 	.word	0x55555549
 80149b4:	3fc55555 	.word	0x3fc55555
 80149b8:	3fe00000 	.word	0x3fe00000
 80149bc:	5acfd57c 	.word	0x5acfd57c
 80149c0:	3de5d93a 	.word	0x3de5d93a
 80149c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80149c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80149cc:	57b1fe7d 	.word	0x57b1fe7d
 80149d0:	3ec71de3 	.word	0x3ec71de3
 80149d4:	19c161d5 	.word	0x19c161d5
 80149d8:	3f2a01a0 	.word	0x3f2a01a0
 80149dc:	1110f8a6 	.word	0x1110f8a6
 80149e0:	3f811111 	.word	0x3f811111
 80149e4:	00000000 	.word	0x00000000

080149e8 <__ieee754_pow>:
 80149e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ec:	b091      	sub	sp, #68	@ 0x44
 80149ee:	ed8d 1b00 	vstr	d1, [sp]
 80149f2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80149f6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80149fa:	ea5a 0001 	orrs.w	r0, sl, r1
 80149fe:	ec57 6b10 	vmov	r6, r7, d0
 8014a02:	d113      	bne.n	8014a2c <__ieee754_pow+0x44>
 8014a04:	19b3      	adds	r3, r6, r6
 8014a06:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8014a0a:	4152      	adcs	r2, r2
 8014a0c:	4298      	cmp	r0, r3
 8014a0e:	4b98      	ldr	r3, [pc, #608]	@ (8014c70 <__ieee754_pow+0x288>)
 8014a10:	4193      	sbcs	r3, r2
 8014a12:	f080 84ea 	bcs.w	80153ea <__ieee754_pow+0xa02>
 8014a16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014a1a:	4630      	mov	r0, r6
 8014a1c:	4639      	mov	r1, r7
 8014a1e:	f7eb fc55 	bl	80002cc <__adddf3>
 8014a22:	ec41 0b10 	vmov	d0, r0, r1
 8014a26:	b011      	add	sp, #68	@ 0x44
 8014a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a2c:	4a91      	ldr	r2, [pc, #580]	@ (8014c74 <__ieee754_pow+0x28c>)
 8014a2e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8014a32:	4590      	cmp	r8, r2
 8014a34:	463d      	mov	r5, r7
 8014a36:	4633      	mov	r3, r6
 8014a38:	d806      	bhi.n	8014a48 <__ieee754_pow+0x60>
 8014a3a:	d101      	bne.n	8014a40 <__ieee754_pow+0x58>
 8014a3c:	2e00      	cmp	r6, #0
 8014a3e:	d1ea      	bne.n	8014a16 <__ieee754_pow+0x2e>
 8014a40:	4592      	cmp	sl, r2
 8014a42:	d801      	bhi.n	8014a48 <__ieee754_pow+0x60>
 8014a44:	d10e      	bne.n	8014a64 <__ieee754_pow+0x7c>
 8014a46:	b169      	cbz	r1, 8014a64 <__ieee754_pow+0x7c>
 8014a48:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8014a4c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8014a50:	431d      	orrs	r5, r3
 8014a52:	d1e0      	bne.n	8014a16 <__ieee754_pow+0x2e>
 8014a54:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014a58:	18db      	adds	r3, r3, r3
 8014a5a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8014a5e:	4152      	adcs	r2, r2
 8014a60:	429d      	cmp	r5, r3
 8014a62:	e7d4      	b.n	8014a0e <__ieee754_pow+0x26>
 8014a64:	2d00      	cmp	r5, #0
 8014a66:	46c3      	mov	fp, r8
 8014a68:	da3a      	bge.n	8014ae0 <__ieee754_pow+0xf8>
 8014a6a:	4a83      	ldr	r2, [pc, #524]	@ (8014c78 <__ieee754_pow+0x290>)
 8014a6c:	4592      	cmp	sl, r2
 8014a6e:	d84d      	bhi.n	8014b0c <__ieee754_pow+0x124>
 8014a70:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8014a74:	4592      	cmp	sl, r2
 8014a76:	f240 84c7 	bls.w	8015408 <__ieee754_pow+0xa20>
 8014a7a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8014a7e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8014a82:	2a14      	cmp	r2, #20
 8014a84:	dd0f      	ble.n	8014aa6 <__ieee754_pow+0xbe>
 8014a86:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8014a8a:	fa21 f402 	lsr.w	r4, r1, r2
 8014a8e:	fa04 f202 	lsl.w	r2, r4, r2
 8014a92:	428a      	cmp	r2, r1
 8014a94:	f040 84b8 	bne.w	8015408 <__ieee754_pow+0xa20>
 8014a98:	f004 0401 	and.w	r4, r4, #1
 8014a9c:	f1c4 0402 	rsb	r4, r4, #2
 8014aa0:	2900      	cmp	r1, #0
 8014aa2:	d158      	bne.n	8014b56 <__ieee754_pow+0x16e>
 8014aa4:	e00e      	b.n	8014ac4 <__ieee754_pow+0xdc>
 8014aa6:	2900      	cmp	r1, #0
 8014aa8:	d154      	bne.n	8014b54 <__ieee754_pow+0x16c>
 8014aaa:	f1c2 0214 	rsb	r2, r2, #20
 8014aae:	fa4a f402 	asr.w	r4, sl, r2
 8014ab2:	fa04 f202 	lsl.w	r2, r4, r2
 8014ab6:	4552      	cmp	r2, sl
 8014ab8:	f040 84a3 	bne.w	8015402 <__ieee754_pow+0xa1a>
 8014abc:	f004 0401 	and.w	r4, r4, #1
 8014ac0:	f1c4 0402 	rsb	r4, r4, #2
 8014ac4:	4a6d      	ldr	r2, [pc, #436]	@ (8014c7c <__ieee754_pow+0x294>)
 8014ac6:	4592      	cmp	sl, r2
 8014ac8:	d12e      	bne.n	8014b28 <__ieee754_pow+0x140>
 8014aca:	f1b9 0f00 	cmp.w	r9, #0
 8014ace:	f280 8494 	bge.w	80153fa <__ieee754_pow+0xa12>
 8014ad2:	496a      	ldr	r1, [pc, #424]	@ (8014c7c <__ieee754_pow+0x294>)
 8014ad4:	4632      	mov	r2, r6
 8014ad6:	463b      	mov	r3, r7
 8014ad8:	2000      	movs	r0, #0
 8014ada:	f7eb fed7 	bl	800088c <__aeabi_ddiv>
 8014ade:	e7a0      	b.n	8014a22 <__ieee754_pow+0x3a>
 8014ae0:	2400      	movs	r4, #0
 8014ae2:	bbc1      	cbnz	r1, 8014b56 <__ieee754_pow+0x16e>
 8014ae4:	4a63      	ldr	r2, [pc, #396]	@ (8014c74 <__ieee754_pow+0x28c>)
 8014ae6:	4592      	cmp	sl, r2
 8014ae8:	d1ec      	bne.n	8014ac4 <__ieee754_pow+0xdc>
 8014aea:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8014aee:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8014af2:	431a      	orrs	r2, r3
 8014af4:	f000 8479 	beq.w	80153ea <__ieee754_pow+0xa02>
 8014af8:	4b61      	ldr	r3, [pc, #388]	@ (8014c80 <__ieee754_pow+0x298>)
 8014afa:	4598      	cmp	r8, r3
 8014afc:	d908      	bls.n	8014b10 <__ieee754_pow+0x128>
 8014afe:	f1b9 0f00 	cmp.w	r9, #0
 8014b02:	f2c0 8476 	blt.w	80153f2 <__ieee754_pow+0xa0a>
 8014b06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014b0a:	e78a      	b.n	8014a22 <__ieee754_pow+0x3a>
 8014b0c:	2402      	movs	r4, #2
 8014b0e:	e7e8      	b.n	8014ae2 <__ieee754_pow+0xfa>
 8014b10:	f1b9 0f00 	cmp.w	r9, #0
 8014b14:	f04f 0000 	mov.w	r0, #0
 8014b18:	f04f 0100 	mov.w	r1, #0
 8014b1c:	da81      	bge.n	8014a22 <__ieee754_pow+0x3a>
 8014b1e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014b22:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8014b26:	e77c      	b.n	8014a22 <__ieee754_pow+0x3a>
 8014b28:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8014b2c:	d106      	bne.n	8014b3c <__ieee754_pow+0x154>
 8014b2e:	4632      	mov	r2, r6
 8014b30:	463b      	mov	r3, r7
 8014b32:	4630      	mov	r0, r6
 8014b34:	4639      	mov	r1, r7
 8014b36:	f7eb fd7f 	bl	8000638 <__aeabi_dmul>
 8014b3a:	e772      	b.n	8014a22 <__ieee754_pow+0x3a>
 8014b3c:	4a51      	ldr	r2, [pc, #324]	@ (8014c84 <__ieee754_pow+0x29c>)
 8014b3e:	4591      	cmp	r9, r2
 8014b40:	d109      	bne.n	8014b56 <__ieee754_pow+0x16e>
 8014b42:	2d00      	cmp	r5, #0
 8014b44:	db07      	blt.n	8014b56 <__ieee754_pow+0x16e>
 8014b46:	ec47 6b10 	vmov	d0, r6, r7
 8014b4a:	b011      	add	sp, #68	@ 0x44
 8014b4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b50:	f7ff bc6c 	b.w	801442c <__ieee754_sqrt>
 8014b54:	2400      	movs	r4, #0
 8014b56:	ec47 6b10 	vmov	d0, r6, r7
 8014b5a:	9302      	str	r3, [sp, #8]
 8014b5c:	f000 fe84 	bl	8015868 <fabs>
 8014b60:	9b02      	ldr	r3, [sp, #8]
 8014b62:	ec51 0b10 	vmov	r0, r1, d0
 8014b66:	bb53      	cbnz	r3, 8014bbe <__ieee754_pow+0x1d6>
 8014b68:	4b44      	ldr	r3, [pc, #272]	@ (8014c7c <__ieee754_pow+0x294>)
 8014b6a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d002      	beq.n	8014b78 <__ieee754_pow+0x190>
 8014b72:	f1b8 0f00 	cmp.w	r8, #0
 8014b76:	d122      	bne.n	8014bbe <__ieee754_pow+0x1d6>
 8014b78:	f1b9 0f00 	cmp.w	r9, #0
 8014b7c:	da05      	bge.n	8014b8a <__ieee754_pow+0x1a2>
 8014b7e:	4602      	mov	r2, r0
 8014b80:	460b      	mov	r3, r1
 8014b82:	2000      	movs	r0, #0
 8014b84:	493d      	ldr	r1, [pc, #244]	@ (8014c7c <__ieee754_pow+0x294>)
 8014b86:	f7eb fe81 	bl	800088c <__aeabi_ddiv>
 8014b8a:	2d00      	cmp	r5, #0
 8014b8c:	f6bf af49 	bge.w	8014a22 <__ieee754_pow+0x3a>
 8014b90:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8014b94:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8014b98:	ea58 0804 	orrs.w	r8, r8, r4
 8014b9c:	d108      	bne.n	8014bb0 <__ieee754_pow+0x1c8>
 8014b9e:	4602      	mov	r2, r0
 8014ba0:	460b      	mov	r3, r1
 8014ba2:	4610      	mov	r0, r2
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	f7eb fb8f 	bl	80002c8 <__aeabi_dsub>
 8014baa:	4602      	mov	r2, r0
 8014bac:	460b      	mov	r3, r1
 8014bae:	e794      	b.n	8014ada <__ieee754_pow+0xf2>
 8014bb0:	2c01      	cmp	r4, #1
 8014bb2:	f47f af36 	bne.w	8014a22 <__ieee754_pow+0x3a>
 8014bb6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014bba:	4619      	mov	r1, r3
 8014bbc:	e731      	b.n	8014a22 <__ieee754_pow+0x3a>
 8014bbe:	0feb      	lsrs	r3, r5, #31
 8014bc0:	3b01      	subs	r3, #1
 8014bc2:	ea53 0204 	orrs.w	r2, r3, r4
 8014bc6:	d102      	bne.n	8014bce <__ieee754_pow+0x1e6>
 8014bc8:	4632      	mov	r2, r6
 8014bca:	463b      	mov	r3, r7
 8014bcc:	e7e9      	b.n	8014ba2 <__ieee754_pow+0x1ba>
 8014bce:	3c01      	subs	r4, #1
 8014bd0:	431c      	orrs	r4, r3
 8014bd2:	d016      	beq.n	8014c02 <__ieee754_pow+0x21a>
 8014bd4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8014c60 <__ieee754_pow+0x278>
 8014bd8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8014bdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014be0:	f240 8112 	bls.w	8014e08 <__ieee754_pow+0x420>
 8014be4:	4b28      	ldr	r3, [pc, #160]	@ (8014c88 <__ieee754_pow+0x2a0>)
 8014be6:	459a      	cmp	sl, r3
 8014be8:	4b25      	ldr	r3, [pc, #148]	@ (8014c80 <__ieee754_pow+0x298>)
 8014bea:	d916      	bls.n	8014c1a <__ieee754_pow+0x232>
 8014bec:	4598      	cmp	r8, r3
 8014bee:	d80b      	bhi.n	8014c08 <__ieee754_pow+0x220>
 8014bf0:	f1b9 0f00 	cmp.w	r9, #0
 8014bf4:	da0b      	bge.n	8014c0e <__ieee754_pow+0x226>
 8014bf6:	2000      	movs	r0, #0
 8014bf8:	b011      	add	sp, #68	@ 0x44
 8014bfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bfe:	f000 bfe7 	b.w	8015bd0 <__math_oflow>
 8014c02:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8014c68 <__ieee754_pow+0x280>
 8014c06:	e7e7      	b.n	8014bd8 <__ieee754_pow+0x1f0>
 8014c08:	f1b9 0f00 	cmp.w	r9, #0
 8014c0c:	dcf3      	bgt.n	8014bf6 <__ieee754_pow+0x20e>
 8014c0e:	2000      	movs	r0, #0
 8014c10:	b011      	add	sp, #68	@ 0x44
 8014c12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c16:	f000 bfd3 	b.w	8015bc0 <__math_uflow>
 8014c1a:	4598      	cmp	r8, r3
 8014c1c:	d20c      	bcs.n	8014c38 <__ieee754_pow+0x250>
 8014c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c22:	2200      	movs	r2, #0
 8014c24:	2300      	movs	r3, #0
 8014c26:	f7eb ff79 	bl	8000b1c <__aeabi_dcmplt>
 8014c2a:	3800      	subs	r0, #0
 8014c2c:	bf18      	it	ne
 8014c2e:	2001      	movne	r0, #1
 8014c30:	f1b9 0f00 	cmp.w	r9, #0
 8014c34:	daec      	bge.n	8014c10 <__ieee754_pow+0x228>
 8014c36:	e7df      	b.n	8014bf8 <__ieee754_pow+0x210>
 8014c38:	4b10      	ldr	r3, [pc, #64]	@ (8014c7c <__ieee754_pow+0x294>)
 8014c3a:	4598      	cmp	r8, r3
 8014c3c:	f04f 0200 	mov.w	r2, #0
 8014c40:	d924      	bls.n	8014c8c <__ieee754_pow+0x2a4>
 8014c42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c46:	2300      	movs	r3, #0
 8014c48:	f7eb ff68 	bl	8000b1c <__aeabi_dcmplt>
 8014c4c:	3800      	subs	r0, #0
 8014c4e:	bf18      	it	ne
 8014c50:	2001      	movne	r0, #1
 8014c52:	f1b9 0f00 	cmp.w	r9, #0
 8014c56:	dccf      	bgt.n	8014bf8 <__ieee754_pow+0x210>
 8014c58:	e7da      	b.n	8014c10 <__ieee754_pow+0x228>
 8014c5a:	bf00      	nop
 8014c5c:	f3af 8000 	nop.w
 8014c60:	00000000 	.word	0x00000000
 8014c64:	3ff00000 	.word	0x3ff00000
 8014c68:	00000000 	.word	0x00000000
 8014c6c:	bff00000 	.word	0xbff00000
 8014c70:	fff00000 	.word	0xfff00000
 8014c74:	7ff00000 	.word	0x7ff00000
 8014c78:	433fffff 	.word	0x433fffff
 8014c7c:	3ff00000 	.word	0x3ff00000
 8014c80:	3fefffff 	.word	0x3fefffff
 8014c84:	3fe00000 	.word	0x3fe00000
 8014c88:	43f00000 	.word	0x43f00000
 8014c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8014df8 <__ieee754_pow+0x410>)
 8014c8e:	f7eb fb1b 	bl	80002c8 <__aeabi_dsub>
 8014c92:	a351      	add	r3, pc, #324	@ (adr r3, 8014dd8 <__ieee754_pow+0x3f0>)
 8014c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c98:	4604      	mov	r4, r0
 8014c9a:	460d      	mov	r5, r1
 8014c9c:	f7eb fccc 	bl	8000638 <__aeabi_dmul>
 8014ca0:	a34f      	add	r3, pc, #316	@ (adr r3, 8014de0 <__ieee754_pow+0x3f8>)
 8014ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ca6:	4606      	mov	r6, r0
 8014ca8:	460f      	mov	r7, r1
 8014caa:	4620      	mov	r0, r4
 8014cac:	4629      	mov	r1, r5
 8014cae:	f7eb fcc3 	bl	8000638 <__aeabi_dmul>
 8014cb2:	4b52      	ldr	r3, [pc, #328]	@ (8014dfc <__ieee754_pow+0x414>)
 8014cb4:	4682      	mov	sl, r0
 8014cb6:	468b      	mov	fp, r1
 8014cb8:	2200      	movs	r2, #0
 8014cba:	4620      	mov	r0, r4
 8014cbc:	4629      	mov	r1, r5
 8014cbe:	f7eb fcbb 	bl	8000638 <__aeabi_dmul>
 8014cc2:	4602      	mov	r2, r0
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	a148      	add	r1, pc, #288	@ (adr r1, 8014de8 <__ieee754_pow+0x400>)
 8014cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ccc:	f7eb fafc 	bl	80002c8 <__aeabi_dsub>
 8014cd0:	4622      	mov	r2, r4
 8014cd2:	462b      	mov	r3, r5
 8014cd4:	f7eb fcb0 	bl	8000638 <__aeabi_dmul>
 8014cd8:	4602      	mov	r2, r0
 8014cda:	460b      	mov	r3, r1
 8014cdc:	2000      	movs	r0, #0
 8014cde:	4948      	ldr	r1, [pc, #288]	@ (8014e00 <__ieee754_pow+0x418>)
 8014ce0:	f7eb faf2 	bl	80002c8 <__aeabi_dsub>
 8014ce4:	4622      	mov	r2, r4
 8014ce6:	4680      	mov	r8, r0
 8014ce8:	4689      	mov	r9, r1
 8014cea:	462b      	mov	r3, r5
 8014cec:	4620      	mov	r0, r4
 8014cee:	4629      	mov	r1, r5
 8014cf0:	f7eb fca2 	bl	8000638 <__aeabi_dmul>
 8014cf4:	4602      	mov	r2, r0
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	4640      	mov	r0, r8
 8014cfa:	4649      	mov	r1, r9
 8014cfc:	f7eb fc9c 	bl	8000638 <__aeabi_dmul>
 8014d00:	a33b      	add	r3, pc, #236	@ (adr r3, 8014df0 <__ieee754_pow+0x408>)
 8014d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d06:	f7eb fc97 	bl	8000638 <__aeabi_dmul>
 8014d0a:	4602      	mov	r2, r0
 8014d0c:	460b      	mov	r3, r1
 8014d0e:	4650      	mov	r0, sl
 8014d10:	4659      	mov	r1, fp
 8014d12:	f7eb fad9 	bl	80002c8 <__aeabi_dsub>
 8014d16:	4602      	mov	r2, r0
 8014d18:	460b      	mov	r3, r1
 8014d1a:	4680      	mov	r8, r0
 8014d1c:	4689      	mov	r9, r1
 8014d1e:	4630      	mov	r0, r6
 8014d20:	4639      	mov	r1, r7
 8014d22:	f7eb fad3 	bl	80002cc <__adddf3>
 8014d26:	2400      	movs	r4, #0
 8014d28:	4632      	mov	r2, r6
 8014d2a:	463b      	mov	r3, r7
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	460d      	mov	r5, r1
 8014d30:	f7eb faca 	bl	80002c8 <__aeabi_dsub>
 8014d34:	4602      	mov	r2, r0
 8014d36:	460b      	mov	r3, r1
 8014d38:	4640      	mov	r0, r8
 8014d3a:	4649      	mov	r1, r9
 8014d3c:	f7eb fac4 	bl	80002c8 <__aeabi_dsub>
 8014d40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8014d48:	2300      	movs	r3, #0
 8014d4a:	9304      	str	r3, [sp, #16]
 8014d4c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8014d50:	4606      	mov	r6, r0
 8014d52:	460f      	mov	r7, r1
 8014d54:	4652      	mov	r2, sl
 8014d56:	465b      	mov	r3, fp
 8014d58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014d5c:	f7eb fab4 	bl	80002c8 <__aeabi_dsub>
 8014d60:	4622      	mov	r2, r4
 8014d62:	462b      	mov	r3, r5
 8014d64:	f7eb fc68 	bl	8000638 <__aeabi_dmul>
 8014d68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d6c:	4680      	mov	r8, r0
 8014d6e:	4689      	mov	r9, r1
 8014d70:	4630      	mov	r0, r6
 8014d72:	4639      	mov	r1, r7
 8014d74:	f7eb fc60 	bl	8000638 <__aeabi_dmul>
 8014d78:	4602      	mov	r2, r0
 8014d7a:	460b      	mov	r3, r1
 8014d7c:	4640      	mov	r0, r8
 8014d7e:	4649      	mov	r1, r9
 8014d80:	f7eb faa4 	bl	80002cc <__adddf3>
 8014d84:	4652      	mov	r2, sl
 8014d86:	465b      	mov	r3, fp
 8014d88:	4606      	mov	r6, r0
 8014d8a:	460f      	mov	r7, r1
 8014d8c:	4620      	mov	r0, r4
 8014d8e:	4629      	mov	r1, r5
 8014d90:	f7eb fc52 	bl	8000638 <__aeabi_dmul>
 8014d94:	460b      	mov	r3, r1
 8014d96:	4602      	mov	r2, r0
 8014d98:	4680      	mov	r8, r0
 8014d9a:	4689      	mov	r9, r1
 8014d9c:	4630      	mov	r0, r6
 8014d9e:	4639      	mov	r1, r7
 8014da0:	f7eb fa94 	bl	80002cc <__adddf3>
 8014da4:	4b17      	ldr	r3, [pc, #92]	@ (8014e04 <__ieee754_pow+0x41c>)
 8014da6:	4299      	cmp	r1, r3
 8014da8:	4604      	mov	r4, r0
 8014daa:	460d      	mov	r5, r1
 8014dac:	468a      	mov	sl, r1
 8014dae:	468b      	mov	fp, r1
 8014db0:	f340 82ef 	ble.w	8015392 <__ieee754_pow+0x9aa>
 8014db4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8014db8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8014dbc:	4303      	orrs	r3, r0
 8014dbe:	f000 81e8 	beq.w	8015192 <__ieee754_pow+0x7aa>
 8014dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	2300      	movs	r3, #0
 8014dca:	f7eb fea7 	bl	8000b1c <__aeabi_dcmplt>
 8014dce:	3800      	subs	r0, #0
 8014dd0:	bf18      	it	ne
 8014dd2:	2001      	movne	r0, #1
 8014dd4:	e710      	b.n	8014bf8 <__ieee754_pow+0x210>
 8014dd6:	bf00      	nop
 8014dd8:	60000000 	.word	0x60000000
 8014ddc:	3ff71547 	.word	0x3ff71547
 8014de0:	f85ddf44 	.word	0xf85ddf44
 8014de4:	3e54ae0b 	.word	0x3e54ae0b
 8014de8:	55555555 	.word	0x55555555
 8014dec:	3fd55555 	.word	0x3fd55555
 8014df0:	652b82fe 	.word	0x652b82fe
 8014df4:	3ff71547 	.word	0x3ff71547
 8014df8:	3ff00000 	.word	0x3ff00000
 8014dfc:	3fd00000 	.word	0x3fd00000
 8014e00:	3fe00000 	.word	0x3fe00000
 8014e04:	408fffff 	.word	0x408fffff
 8014e08:	4bd5      	ldr	r3, [pc, #852]	@ (8015160 <__ieee754_pow+0x778>)
 8014e0a:	402b      	ands	r3, r5
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	b92b      	cbnz	r3, 8014e1c <__ieee754_pow+0x434>
 8014e10:	4bd4      	ldr	r3, [pc, #848]	@ (8015164 <__ieee754_pow+0x77c>)
 8014e12:	f7eb fc11 	bl	8000638 <__aeabi_dmul>
 8014e16:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8014e1a:	468b      	mov	fp, r1
 8014e1c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8014e20:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8014e24:	4413      	add	r3, r2
 8014e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e28:	4bcf      	ldr	r3, [pc, #828]	@ (8015168 <__ieee754_pow+0x780>)
 8014e2a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8014e2e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8014e32:	459b      	cmp	fp, r3
 8014e34:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8014e38:	dd08      	ble.n	8014e4c <__ieee754_pow+0x464>
 8014e3a:	4bcc      	ldr	r3, [pc, #816]	@ (801516c <__ieee754_pow+0x784>)
 8014e3c:	459b      	cmp	fp, r3
 8014e3e:	f340 81a5 	ble.w	801518c <__ieee754_pow+0x7a4>
 8014e42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014e44:	3301      	adds	r3, #1
 8014e46:	930a      	str	r3, [sp, #40]	@ 0x28
 8014e48:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8014e4c:	f04f 0a00 	mov.w	sl, #0
 8014e50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8014e54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014e56:	4bc6      	ldr	r3, [pc, #792]	@ (8015170 <__ieee754_pow+0x788>)
 8014e58:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014e5c:	ed93 7b00 	vldr	d7, [r3]
 8014e60:	4629      	mov	r1, r5
 8014e62:	ec53 2b17 	vmov	r2, r3, d7
 8014e66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014e6a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014e6e:	f7eb fa2b 	bl	80002c8 <__aeabi_dsub>
 8014e72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e76:	4606      	mov	r6, r0
 8014e78:	460f      	mov	r7, r1
 8014e7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014e7e:	f7eb fa25 	bl	80002cc <__adddf3>
 8014e82:	4602      	mov	r2, r0
 8014e84:	460b      	mov	r3, r1
 8014e86:	2000      	movs	r0, #0
 8014e88:	49ba      	ldr	r1, [pc, #744]	@ (8015174 <__ieee754_pow+0x78c>)
 8014e8a:	f7eb fcff 	bl	800088c <__aeabi_ddiv>
 8014e8e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8014e92:	4602      	mov	r2, r0
 8014e94:	460b      	mov	r3, r1
 8014e96:	4630      	mov	r0, r6
 8014e98:	4639      	mov	r1, r7
 8014e9a:	f7eb fbcd 	bl	8000638 <__aeabi_dmul>
 8014e9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ea2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8014ea6:	106d      	asrs	r5, r5, #1
 8014ea8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8014eac:	f04f 0b00 	mov.w	fp, #0
 8014eb0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8014eb4:	4661      	mov	r1, ip
 8014eb6:	2200      	movs	r2, #0
 8014eb8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014ebc:	4658      	mov	r0, fp
 8014ebe:	46e1      	mov	r9, ip
 8014ec0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8014ec4:	4614      	mov	r4, r2
 8014ec6:	461d      	mov	r5, r3
 8014ec8:	f7eb fbb6 	bl	8000638 <__aeabi_dmul>
 8014ecc:	4602      	mov	r2, r0
 8014ece:	460b      	mov	r3, r1
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	4639      	mov	r1, r7
 8014ed4:	f7eb f9f8 	bl	80002c8 <__aeabi_dsub>
 8014ed8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014edc:	4606      	mov	r6, r0
 8014ede:	460f      	mov	r7, r1
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	4629      	mov	r1, r5
 8014ee4:	f7eb f9f0 	bl	80002c8 <__aeabi_dsub>
 8014ee8:	4602      	mov	r2, r0
 8014eea:	460b      	mov	r3, r1
 8014eec:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ef0:	f7eb f9ea 	bl	80002c8 <__aeabi_dsub>
 8014ef4:	465a      	mov	r2, fp
 8014ef6:	464b      	mov	r3, r9
 8014ef8:	f7eb fb9e 	bl	8000638 <__aeabi_dmul>
 8014efc:	4602      	mov	r2, r0
 8014efe:	460b      	mov	r3, r1
 8014f00:	4630      	mov	r0, r6
 8014f02:	4639      	mov	r1, r7
 8014f04:	f7eb f9e0 	bl	80002c8 <__aeabi_dsub>
 8014f08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014f0c:	f7eb fb94 	bl	8000638 <__aeabi_dmul>
 8014f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f14:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014f18:	4610      	mov	r0, r2
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	f7eb fb8c 	bl	8000638 <__aeabi_dmul>
 8014f20:	a37d      	add	r3, pc, #500	@ (adr r3, 8015118 <__ieee754_pow+0x730>)
 8014f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f26:	4604      	mov	r4, r0
 8014f28:	460d      	mov	r5, r1
 8014f2a:	f7eb fb85 	bl	8000638 <__aeabi_dmul>
 8014f2e:	a37c      	add	r3, pc, #496	@ (adr r3, 8015120 <__ieee754_pow+0x738>)
 8014f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f34:	f7eb f9ca 	bl	80002cc <__adddf3>
 8014f38:	4622      	mov	r2, r4
 8014f3a:	462b      	mov	r3, r5
 8014f3c:	f7eb fb7c 	bl	8000638 <__aeabi_dmul>
 8014f40:	a379      	add	r3, pc, #484	@ (adr r3, 8015128 <__ieee754_pow+0x740>)
 8014f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f46:	f7eb f9c1 	bl	80002cc <__adddf3>
 8014f4a:	4622      	mov	r2, r4
 8014f4c:	462b      	mov	r3, r5
 8014f4e:	f7eb fb73 	bl	8000638 <__aeabi_dmul>
 8014f52:	a377      	add	r3, pc, #476	@ (adr r3, 8015130 <__ieee754_pow+0x748>)
 8014f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f58:	f7eb f9b8 	bl	80002cc <__adddf3>
 8014f5c:	4622      	mov	r2, r4
 8014f5e:	462b      	mov	r3, r5
 8014f60:	f7eb fb6a 	bl	8000638 <__aeabi_dmul>
 8014f64:	a374      	add	r3, pc, #464	@ (adr r3, 8015138 <__ieee754_pow+0x750>)
 8014f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f6a:	f7eb f9af 	bl	80002cc <__adddf3>
 8014f6e:	4622      	mov	r2, r4
 8014f70:	462b      	mov	r3, r5
 8014f72:	f7eb fb61 	bl	8000638 <__aeabi_dmul>
 8014f76:	a372      	add	r3, pc, #456	@ (adr r3, 8015140 <__ieee754_pow+0x758>)
 8014f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f7c:	f7eb f9a6 	bl	80002cc <__adddf3>
 8014f80:	4622      	mov	r2, r4
 8014f82:	4606      	mov	r6, r0
 8014f84:	460f      	mov	r7, r1
 8014f86:	462b      	mov	r3, r5
 8014f88:	4620      	mov	r0, r4
 8014f8a:	4629      	mov	r1, r5
 8014f8c:	f7eb fb54 	bl	8000638 <__aeabi_dmul>
 8014f90:	4602      	mov	r2, r0
 8014f92:	460b      	mov	r3, r1
 8014f94:	4630      	mov	r0, r6
 8014f96:	4639      	mov	r1, r7
 8014f98:	f7eb fb4e 	bl	8000638 <__aeabi_dmul>
 8014f9c:	465a      	mov	r2, fp
 8014f9e:	4604      	mov	r4, r0
 8014fa0:	460d      	mov	r5, r1
 8014fa2:	464b      	mov	r3, r9
 8014fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014fa8:	f7eb f990 	bl	80002cc <__adddf3>
 8014fac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014fb0:	f7eb fb42 	bl	8000638 <__aeabi_dmul>
 8014fb4:	4622      	mov	r2, r4
 8014fb6:	462b      	mov	r3, r5
 8014fb8:	f7eb f988 	bl	80002cc <__adddf3>
 8014fbc:	465a      	mov	r2, fp
 8014fbe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014fc2:	464b      	mov	r3, r9
 8014fc4:	4658      	mov	r0, fp
 8014fc6:	4649      	mov	r1, r9
 8014fc8:	f7eb fb36 	bl	8000638 <__aeabi_dmul>
 8014fcc:	4b6a      	ldr	r3, [pc, #424]	@ (8015178 <__ieee754_pow+0x790>)
 8014fce:	2200      	movs	r2, #0
 8014fd0:	4606      	mov	r6, r0
 8014fd2:	460f      	mov	r7, r1
 8014fd4:	f7eb f97a 	bl	80002cc <__adddf3>
 8014fd8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014fdc:	f7eb f976 	bl	80002cc <__adddf3>
 8014fe0:	46d8      	mov	r8, fp
 8014fe2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8014fe6:	460d      	mov	r5, r1
 8014fe8:	465a      	mov	r2, fp
 8014fea:	460b      	mov	r3, r1
 8014fec:	4640      	mov	r0, r8
 8014fee:	4649      	mov	r1, r9
 8014ff0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8014ff4:	f7eb fb20 	bl	8000638 <__aeabi_dmul>
 8014ff8:	465c      	mov	r4, fp
 8014ffa:	4680      	mov	r8, r0
 8014ffc:	4689      	mov	r9, r1
 8014ffe:	4b5e      	ldr	r3, [pc, #376]	@ (8015178 <__ieee754_pow+0x790>)
 8015000:	2200      	movs	r2, #0
 8015002:	4620      	mov	r0, r4
 8015004:	4629      	mov	r1, r5
 8015006:	f7eb f95f 	bl	80002c8 <__aeabi_dsub>
 801500a:	4632      	mov	r2, r6
 801500c:	463b      	mov	r3, r7
 801500e:	f7eb f95b 	bl	80002c8 <__aeabi_dsub>
 8015012:	4602      	mov	r2, r0
 8015014:	460b      	mov	r3, r1
 8015016:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801501a:	f7eb f955 	bl	80002c8 <__aeabi_dsub>
 801501e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015022:	f7eb fb09 	bl	8000638 <__aeabi_dmul>
 8015026:	4622      	mov	r2, r4
 8015028:	4606      	mov	r6, r0
 801502a:	460f      	mov	r7, r1
 801502c:	462b      	mov	r3, r5
 801502e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015032:	f7eb fb01 	bl	8000638 <__aeabi_dmul>
 8015036:	4602      	mov	r2, r0
 8015038:	460b      	mov	r3, r1
 801503a:	4630      	mov	r0, r6
 801503c:	4639      	mov	r1, r7
 801503e:	f7eb f945 	bl	80002cc <__adddf3>
 8015042:	4606      	mov	r6, r0
 8015044:	460f      	mov	r7, r1
 8015046:	4602      	mov	r2, r0
 8015048:	460b      	mov	r3, r1
 801504a:	4640      	mov	r0, r8
 801504c:	4649      	mov	r1, r9
 801504e:	f7eb f93d 	bl	80002cc <__adddf3>
 8015052:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8015056:	a33c      	add	r3, pc, #240	@ (adr r3, 8015148 <__ieee754_pow+0x760>)
 8015058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801505c:	4658      	mov	r0, fp
 801505e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8015062:	460d      	mov	r5, r1
 8015064:	f7eb fae8 	bl	8000638 <__aeabi_dmul>
 8015068:	465c      	mov	r4, fp
 801506a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801506e:	4642      	mov	r2, r8
 8015070:	464b      	mov	r3, r9
 8015072:	4620      	mov	r0, r4
 8015074:	4629      	mov	r1, r5
 8015076:	f7eb f927 	bl	80002c8 <__aeabi_dsub>
 801507a:	4602      	mov	r2, r0
 801507c:	460b      	mov	r3, r1
 801507e:	4630      	mov	r0, r6
 8015080:	4639      	mov	r1, r7
 8015082:	f7eb f921 	bl	80002c8 <__aeabi_dsub>
 8015086:	a332      	add	r3, pc, #200	@ (adr r3, 8015150 <__ieee754_pow+0x768>)
 8015088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801508c:	f7eb fad4 	bl	8000638 <__aeabi_dmul>
 8015090:	a331      	add	r3, pc, #196	@ (adr r3, 8015158 <__ieee754_pow+0x770>)
 8015092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015096:	4606      	mov	r6, r0
 8015098:	460f      	mov	r7, r1
 801509a:	4620      	mov	r0, r4
 801509c:	4629      	mov	r1, r5
 801509e:	f7eb facb 	bl	8000638 <__aeabi_dmul>
 80150a2:	4602      	mov	r2, r0
 80150a4:	460b      	mov	r3, r1
 80150a6:	4630      	mov	r0, r6
 80150a8:	4639      	mov	r1, r7
 80150aa:	f7eb f90f 	bl	80002cc <__adddf3>
 80150ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80150b0:	4b32      	ldr	r3, [pc, #200]	@ (801517c <__ieee754_pow+0x794>)
 80150b2:	4413      	add	r3, r2
 80150b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b8:	f7eb f908 	bl	80002cc <__adddf3>
 80150bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80150c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80150c2:	f7eb fa4f 	bl	8000564 <__aeabi_i2d>
 80150c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80150c8:	4b2d      	ldr	r3, [pc, #180]	@ (8015180 <__ieee754_pow+0x798>)
 80150ca:	4413      	add	r3, r2
 80150cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80150d0:	4606      	mov	r6, r0
 80150d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80150d6:	460f      	mov	r7, r1
 80150d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80150dc:	f7eb f8f6 	bl	80002cc <__adddf3>
 80150e0:	4642      	mov	r2, r8
 80150e2:	464b      	mov	r3, r9
 80150e4:	f7eb f8f2 	bl	80002cc <__adddf3>
 80150e8:	4632      	mov	r2, r6
 80150ea:	463b      	mov	r3, r7
 80150ec:	f7eb f8ee 	bl	80002cc <__adddf3>
 80150f0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80150f4:	4632      	mov	r2, r6
 80150f6:	463b      	mov	r3, r7
 80150f8:	4658      	mov	r0, fp
 80150fa:	460d      	mov	r5, r1
 80150fc:	f7eb f8e4 	bl	80002c8 <__aeabi_dsub>
 8015100:	4642      	mov	r2, r8
 8015102:	464b      	mov	r3, r9
 8015104:	f7eb f8e0 	bl	80002c8 <__aeabi_dsub>
 8015108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801510c:	f7eb f8dc 	bl	80002c8 <__aeabi_dsub>
 8015110:	465c      	mov	r4, fp
 8015112:	4602      	mov	r2, r0
 8015114:	e036      	b.n	8015184 <__ieee754_pow+0x79c>
 8015116:	bf00      	nop
 8015118:	4a454eef 	.word	0x4a454eef
 801511c:	3fca7e28 	.word	0x3fca7e28
 8015120:	93c9db65 	.word	0x93c9db65
 8015124:	3fcd864a 	.word	0x3fcd864a
 8015128:	a91d4101 	.word	0xa91d4101
 801512c:	3fd17460 	.word	0x3fd17460
 8015130:	518f264d 	.word	0x518f264d
 8015134:	3fd55555 	.word	0x3fd55555
 8015138:	db6fabff 	.word	0xdb6fabff
 801513c:	3fdb6db6 	.word	0x3fdb6db6
 8015140:	33333303 	.word	0x33333303
 8015144:	3fe33333 	.word	0x3fe33333
 8015148:	e0000000 	.word	0xe0000000
 801514c:	3feec709 	.word	0x3feec709
 8015150:	dc3a03fd 	.word	0xdc3a03fd
 8015154:	3feec709 	.word	0x3feec709
 8015158:	145b01f5 	.word	0x145b01f5
 801515c:	be3e2fe0 	.word	0xbe3e2fe0
 8015160:	7ff00000 	.word	0x7ff00000
 8015164:	43400000 	.word	0x43400000
 8015168:	0003988e 	.word	0x0003988e
 801516c:	000bb679 	.word	0x000bb679
 8015170:	08016a10 	.word	0x08016a10
 8015174:	3ff00000 	.word	0x3ff00000
 8015178:	40080000 	.word	0x40080000
 801517c:	080169f0 	.word	0x080169f0
 8015180:	08016a00 	.word	0x08016a00
 8015184:	460b      	mov	r3, r1
 8015186:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801518a:	e5d7      	b.n	8014d3c <__ieee754_pow+0x354>
 801518c:	f04f 0a01 	mov.w	sl, #1
 8015190:	e65e      	b.n	8014e50 <__ieee754_pow+0x468>
 8015192:	a3b4      	add	r3, pc, #720	@ (adr r3, 8015464 <__ieee754_pow+0xa7c>)
 8015194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015198:	4630      	mov	r0, r6
 801519a:	4639      	mov	r1, r7
 801519c:	f7eb f896 	bl	80002cc <__adddf3>
 80151a0:	4642      	mov	r2, r8
 80151a2:	e9cd 0100 	strd	r0, r1, [sp]
 80151a6:	464b      	mov	r3, r9
 80151a8:	4620      	mov	r0, r4
 80151aa:	4629      	mov	r1, r5
 80151ac:	f7eb f88c 	bl	80002c8 <__aeabi_dsub>
 80151b0:	4602      	mov	r2, r0
 80151b2:	460b      	mov	r3, r1
 80151b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151b8:	f7eb fcce 	bl	8000b58 <__aeabi_dcmpgt>
 80151bc:	2800      	cmp	r0, #0
 80151be:	f47f ae00 	bne.w	8014dc2 <__ieee754_pow+0x3da>
 80151c2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80151c6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80151ca:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80151ce:	fa43 fa0a 	asr.w	sl, r3, sl
 80151d2:	44da      	add	sl, fp
 80151d4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80151d8:	489d      	ldr	r0, [pc, #628]	@ (8015450 <__ieee754_pow+0xa68>)
 80151da:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80151de:	4108      	asrs	r0, r1
 80151e0:	ea00 030a 	and.w	r3, r0, sl
 80151e4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80151e8:	f1c1 0114 	rsb	r1, r1, #20
 80151ec:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80151f0:	fa4a fa01 	asr.w	sl, sl, r1
 80151f4:	f1bb 0f00 	cmp.w	fp, #0
 80151f8:	4640      	mov	r0, r8
 80151fa:	4649      	mov	r1, r9
 80151fc:	f04f 0200 	mov.w	r2, #0
 8015200:	bfb8      	it	lt
 8015202:	f1ca 0a00 	rsblt	sl, sl, #0
 8015206:	f7eb f85f 	bl	80002c8 <__aeabi_dsub>
 801520a:	4680      	mov	r8, r0
 801520c:	4689      	mov	r9, r1
 801520e:	4632      	mov	r2, r6
 8015210:	463b      	mov	r3, r7
 8015212:	4640      	mov	r0, r8
 8015214:	4649      	mov	r1, r9
 8015216:	f7eb f859 	bl	80002cc <__adddf3>
 801521a:	2400      	movs	r4, #0
 801521c:	a37c      	add	r3, pc, #496	@ (adr r3, 8015410 <__ieee754_pow+0xa28>)
 801521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015222:	4620      	mov	r0, r4
 8015224:	460d      	mov	r5, r1
 8015226:	f7eb fa07 	bl	8000638 <__aeabi_dmul>
 801522a:	4642      	mov	r2, r8
 801522c:	e9cd 0100 	strd	r0, r1, [sp]
 8015230:	464b      	mov	r3, r9
 8015232:	4620      	mov	r0, r4
 8015234:	4629      	mov	r1, r5
 8015236:	f7eb f847 	bl	80002c8 <__aeabi_dsub>
 801523a:	4602      	mov	r2, r0
 801523c:	460b      	mov	r3, r1
 801523e:	4630      	mov	r0, r6
 8015240:	4639      	mov	r1, r7
 8015242:	f7eb f841 	bl	80002c8 <__aeabi_dsub>
 8015246:	a374      	add	r3, pc, #464	@ (adr r3, 8015418 <__ieee754_pow+0xa30>)
 8015248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801524c:	f7eb f9f4 	bl	8000638 <__aeabi_dmul>
 8015250:	a373      	add	r3, pc, #460	@ (adr r3, 8015420 <__ieee754_pow+0xa38>)
 8015252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015256:	4680      	mov	r8, r0
 8015258:	4689      	mov	r9, r1
 801525a:	4620      	mov	r0, r4
 801525c:	4629      	mov	r1, r5
 801525e:	f7eb f9eb 	bl	8000638 <__aeabi_dmul>
 8015262:	4602      	mov	r2, r0
 8015264:	460b      	mov	r3, r1
 8015266:	4640      	mov	r0, r8
 8015268:	4649      	mov	r1, r9
 801526a:	f7eb f82f 	bl	80002cc <__adddf3>
 801526e:	4604      	mov	r4, r0
 8015270:	460d      	mov	r5, r1
 8015272:	4602      	mov	r2, r0
 8015274:	460b      	mov	r3, r1
 8015276:	e9dd 0100 	ldrd	r0, r1, [sp]
 801527a:	f7eb f827 	bl	80002cc <__adddf3>
 801527e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015282:	4680      	mov	r8, r0
 8015284:	4689      	mov	r9, r1
 8015286:	f7eb f81f 	bl	80002c8 <__aeabi_dsub>
 801528a:	4602      	mov	r2, r0
 801528c:	460b      	mov	r3, r1
 801528e:	4620      	mov	r0, r4
 8015290:	4629      	mov	r1, r5
 8015292:	f7eb f819 	bl	80002c8 <__aeabi_dsub>
 8015296:	4642      	mov	r2, r8
 8015298:	4606      	mov	r6, r0
 801529a:	460f      	mov	r7, r1
 801529c:	464b      	mov	r3, r9
 801529e:	4640      	mov	r0, r8
 80152a0:	4649      	mov	r1, r9
 80152a2:	f7eb f9c9 	bl	8000638 <__aeabi_dmul>
 80152a6:	a360      	add	r3, pc, #384	@ (adr r3, 8015428 <__ieee754_pow+0xa40>)
 80152a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ac:	4604      	mov	r4, r0
 80152ae:	460d      	mov	r5, r1
 80152b0:	f7eb f9c2 	bl	8000638 <__aeabi_dmul>
 80152b4:	a35e      	add	r3, pc, #376	@ (adr r3, 8015430 <__ieee754_pow+0xa48>)
 80152b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ba:	f7eb f805 	bl	80002c8 <__aeabi_dsub>
 80152be:	4622      	mov	r2, r4
 80152c0:	462b      	mov	r3, r5
 80152c2:	f7eb f9b9 	bl	8000638 <__aeabi_dmul>
 80152c6:	a35c      	add	r3, pc, #368	@ (adr r3, 8015438 <__ieee754_pow+0xa50>)
 80152c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152cc:	f7ea fffe 	bl	80002cc <__adddf3>
 80152d0:	4622      	mov	r2, r4
 80152d2:	462b      	mov	r3, r5
 80152d4:	f7eb f9b0 	bl	8000638 <__aeabi_dmul>
 80152d8:	a359      	add	r3, pc, #356	@ (adr r3, 8015440 <__ieee754_pow+0xa58>)
 80152da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152de:	f7ea fff3 	bl	80002c8 <__aeabi_dsub>
 80152e2:	4622      	mov	r2, r4
 80152e4:	462b      	mov	r3, r5
 80152e6:	f7eb f9a7 	bl	8000638 <__aeabi_dmul>
 80152ea:	a357      	add	r3, pc, #348	@ (adr r3, 8015448 <__ieee754_pow+0xa60>)
 80152ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152f0:	f7ea ffec 	bl	80002cc <__adddf3>
 80152f4:	4622      	mov	r2, r4
 80152f6:	462b      	mov	r3, r5
 80152f8:	f7eb f99e 	bl	8000638 <__aeabi_dmul>
 80152fc:	4602      	mov	r2, r0
 80152fe:	460b      	mov	r3, r1
 8015300:	4640      	mov	r0, r8
 8015302:	4649      	mov	r1, r9
 8015304:	f7ea ffe0 	bl	80002c8 <__aeabi_dsub>
 8015308:	4604      	mov	r4, r0
 801530a:	460d      	mov	r5, r1
 801530c:	4602      	mov	r2, r0
 801530e:	460b      	mov	r3, r1
 8015310:	4640      	mov	r0, r8
 8015312:	4649      	mov	r1, r9
 8015314:	f7eb f990 	bl	8000638 <__aeabi_dmul>
 8015318:	2200      	movs	r2, #0
 801531a:	e9cd 0100 	strd	r0, r1, [sp]
 801531e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015322:	4620      	mov	r0, r4
 8015324:	4629      	mov	r1, r5
 8015326:	f7ea ffcf 	bl	80002c8 <__aeabi_dsub>
 801532a:	4602      	mov	r2, r0
 801532c:	460b      	mov	r3, r1
 801532e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015332:	f7eb faab 	bl	800088c <__aeabi_ddiv>
 8015336:	4632      	mov	r2, r6
 8015338:	4604      	mov	r4, r0
 801533a:	460d      	mov	r5, r1
 801533c:	463b      	mov	r3, r7
 801533e:	4640      	mov	r0, r8
 8015340:	4649      	mov	r1, r9
 8015342:	f7eb f979 	bl	8000638 <__aeabi_dmul>
 8015346:	4632      	mov	r2, r6
 8015348:	463b      	mov	r3, r7
 801534a:	f7ea ffbf 	bl	80002cc <__adddf3>
 801534e:	4602      	mov	r2, r0
 8015350:	460b      	mov	r3, r1
 8015352:	4620      	mov	r0, r4
 8015354:	4629      	mov	r1, r5
 8015356:	f7ea ffb7 	bl	80002c8 <__aeabi_dsub>
 801535a:	4642      	mov	r2, r8
 801535c:	464b      	mov	r3, r9
 801535e:	f7ea ffb3 	bl	80002c8 <__aeabi_dsub>
 8015362:	460b      	mov	r3, r1
 8015364:	4602      	mov	r2, r0
 8015366:	493b      	ldr	r1, [pc, #236]	@ (8015454 <__ieee754_pow+0xa6c>)
 8015368:	2000      	movs	r0, #0
 801536a:	f7ea ffad 	bl	80002c8 <__aeabi_dsub>
 801536e:	ec41 0b10 	vmov	d0, r0, r1
 8015372:	ee10 3a90 	vmov	r3, s1
 8015376:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801537a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801537e:	da30      	bge.n	80153e2 <__ieee754_pow+0x9fa>
 8015380:	4650      	mov	r0, sl
 8015382:	f000 fb71 	bl	8015a68 <scalbn>
 8015386:	ec51 0b10 	vmov	r0, r1, d0
 801538a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801538e:	f7ff bbd2 	b.w	8014b36 <__ieee754_pow+0x14e>
 8015392:	4c31      	ldr	r4, [pc, #196]	@ (8015458 <__ieee754_pow+0xa70>)
 8015394:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015398:	42a3      	cmp	r3, r4
 801539a:	d91a      	bls.n	80153d2 <__ieee754_pow+0x9ea>
 801539c:	4b2f      	ldr	r3, [pc, #188]	@ (801545c <__ieee754_pow+0xa74>)
 801539e:	440b      	add	r3, r1
 80153a0:	4303      	orrs	r3, r0
 80153a2:	d009      	beq.n	80153b8 <__ieee754_pow+0x9d0>
 80153a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80153a8:	2200      	movs	r2, #0
 80153aa:	2300      	movs	r3, #0
 80153ac:	f7eb fbb6 	bl	8000b1c <__aeabi_dcmplt>
 80153b0:	3800      	subs	r0, #0
 80153b2:	bf18      	it	ne
 80153b4:	2001      	movne	r0, #1
 80153b6:	e42b      	b.n	8014c10 <__ieee754_pow+0x228>
 80153b8:	4642      	mov	r2, r8
 80153ba:	464b      	mov	r3, r9
 80153bc:	f7ea ff84 	bl	80002c8 <__aeabi_dsub>
 80153c0:	4632      	mov	r2, r6
 80153c2:	463b      	mov	r3, r7
 80153c4:	f7eb fbbe 	bl	8000b44 <__aeabi_dcmpge>
 80153c8:	2800      	cmp	r0, #0
 80153ca:	d1eb      	bne.n	80153a4 <__ieee754_pow+0x9bc>
 80153cc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801546c <__ieee754_pow+0xa84>
 80153d0:	e6f7      	b.n	80151c2 <__ieee754_pow+0x7da>
 80153d2:	469a      	mov	sl, r3
 80153d4:	4b22      	ldr	r3, [pc, #136]	@ (8015460 <__ieee754_pow+0xa78>)
 80153d6:	459a      	cmp	sl, r3
 80153d8:	f63f aef3 	bhi.w	80151c2 <__ieee754_pow+0x7da>
 80153dc:	f8dd a010 	ldr.w	sl, [sp, #16]
 80153e0:	e715      	b.n	801520e <__ieee754_pow+0x826>
 80153e2:	ec51 0b10 	vmov	r0, r1, d0
 80153e6:	4619      	mov	r1, r3
 80153e8:	e7cf      	b.n	801538a <__ieee754_pow+0x9a2>
 80153ea:	491a      	ldr	r1, [pc, #104]	@ (8015454 <__ieee754_pow+0xa6c>)
 80153ec:	2000      	movs	r0, #0
 80153ee:	f7ff bb18 	b.w	8014a22 <__ieee754_pow+0x3a>
 80153f2:	2000      	movs	r0, #0
 80153f4:	2100      	movs	r1, #0
 80153f6:	f7ff bb14 	b.w	8014a22 <__ieee754_pow+0x3a>
 80153fa:	4630      	mov	r0, r6
 80153fc:	4639      	mov	r1, r7
 80153fe:	f7ff bb10 	b.w	8014a22 <__ieee754_pow+0x3a>
 8015402:	460c      	mov	r4, r1
 8015404:	f7ff bb5e 	b.w	8014ac4 <__ieee754_pow+0xdc>
 8015408:	2400      	movs	r4, #0
 801540a:	f7ff bb49 	b.w	8014aa0 <__ieee754_pow+0xb8>
 801540e:	bf00      	nop
 8015410:	00000000 	.word	0x00000000
 8015414:	3fe62e43 	.word	0x3fe62e43
 8015418:	fefa39ef 	.word	0xfefa39ef
 801541c:	3fe62e42 	.word	0x3fe62e42
 8015420:	0ca86c39 	.word	0x0ca86c39
 8015424:	be205c61 	.word	0xbe205c61
 8015428:	72bea4d0 	.word	0x72bea4d0
 801542c:	3e663769 	.word	0x3e663769
 8015430:	c5d26bf1 	.word	0xc5d26bf1
 8015434:	3ebbbd41 	.word	0x3ebbbd41
 8015438:	af25de2c 	.word	0xaf25de2c
 801543c:	3f11566a 	.word	0x3f11566a
 8015440:	16bebd93 	.word	0x16bebd93
 8015444:	3f66c16c 	.word	0x3f66c16c
 8015448:	5555553e 	.word	0x5555553e
 801544c:	3fc55555 	.word	0x3fc55555
 8015450:	fff00000 	.word	0xfff00000
 8015454:	3ff00000 	.word	0x3ff00000
 8015458:	4090cbff 	.word	0x4090cbff
 801545c:	3f6f3400 	.word	0x3f6f3400
 8015460:	3fe00000 	.word	0x3fe00000
 8015464:	652b82fe 	.word	0x652b82fe
 8015468:	3c971547 	.word	0x3c971547
 801546c:	4090cc00 	.word	0x4090cc00

08015470 <__ieee754_rem_pio2>:
 8015470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015474:	ec57 6b10 	vmov	r6, r7, d0
 8015478:	4bc5      	ldr	r3, [pc, #788]	@ (8015790 <__ieee754_rem_pio2+0x320>)
 801547a:	b08d      	sub	sp, #52	@ 0x34
 801547c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015480:	4598      	cmp	r8, r3
 8015482:	4604      	mov	r4, r0
 8015484:	9704      	str	r7, [sp, #16]
 8015486:	d807      	bhi.n	8015498 <__ieee754_rem_pio2+0x28>
 8015488:	2200      	movs	r2, #0
 801548a:	2300      	movs	r3, #0
 801548c:	ed80 0b00 	vstr	d0, [r0]
 8015490:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8015494:	2500      	movs	r5, #0
 8015496:	e028      	b.n	80154ea <__ieee754_rem_pio2+0x7a>
 8015498:	4bbe      	ldr	r3, [pc, #760]	@ (8015794 <__ieee754_rem_pio2+0x324>)
 801549a:	4598      	cmp	r8, r3
 801549c:	d878      	bhi.n	8015590 <__ieee754_rem_pio2+0x120>
 801549e:	9b04      	ldr	r3, [sp, #16]
 80154a0:	4dbd      	ldr	r5, [pc, #756]	@ (8015798 <__ieee754_rem_pio2+0x328>)
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	4630      	mov	r0, r6
 80154a6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8015758 <__ieee754_rem_pio2+0x2e8>)
 80154a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ac:	4639      	mov	r1, r7
 80154ae:	dd38      	ble.n	8015522 <__ieee754_rem_pio2+0xb2>
 80154b0:	f7ea ff0a 	bl	80002c8 <__aeabi_dsub>
 80154b4:	45a8      	cmp	r8, r5
 80154b6:	4606      	mov	r6, r0
 80154b8:	460f      	mov	r7, r1
 80154ba:	d01a      	beq.n	80154f2 <__ieee754_rem_pio2+0x82>
 80154bc:	a3a8      	add	r3, pc, #672	@ (adr r3, 8015760 <__ieee754_rem_pio2+0x2f0>)
 80154be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c2:	f7ea ff01 	bl	80002c8 <__aeabi_dsub>
 80154c6:	4602      	mov	r2, r0
 80154c8:	460b      	mov	r3, r1
 80154ca:	4680      	mov	r8, r0
 80154cc:	4689      	mov	r9, r1
 80154ce:	4630      	mov	r0, r6
 80154d0:	4639      	mov	r1, r7
 80154d2:	f7ea fef9 	bl	80002c8 <__aeabi_dsub>
 80154d6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8015760 <__ieee754_rem_pio2+0x2f0>)
 80154d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154dc:	f7ea fef4 	bl	80002c8 <__aeabi_dsub>
 80154e0:	e9c4 8900 	strd	r8, r9, [r4]
 80154e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80154e8:	2501      	movs	r5, #1
 80154ea:	4628      	mov	r0, r5
 80154ec:	b00d      	add	sp, #52	@ 0x34
 80154ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154f2:	a39d      	add	r3, pc, #628	@ (adr r3, 8015768 <__ieee754_rem_pio2+0x2f8>)
 80154f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f8:	f7ea fee6 	bl	80002c8 <__aeabi_dsub>
 80154fc:	a39c      	add	r3, pc, #624	@ (adr r3, 8015770 <__ieee754_rem_pio2+0x300>)
 80154fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015502:	4606      	mov	r6, r0
 8015504:	460f      	mov	r7, r1
 8015506:	f7ea fedf 	bl	80002c8 <__aeabi_dsub>
 801550a:	4602      	mov	r2, r0
 801550c:	460b      	mov	r3, r1
 801550e:	4680      	mov	r8, r0
 8015510:	4689      	mov	r9, r1
 8015512:	4630      	mov	r0, r6
 8015514:	4639      	mov	r1, r7
 8015516:	f7ea fed7 	bl	80002c8 <__aeabi_dsub>
 801551a:	a395      	add	r3, pc, #596	@ (adr r3, 8015770 <__ieee754_rem_pio2+0x300>)
 801551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015520:	e7dc      	b.n	80154dc <__ieee754_rem_pio2+0x6c>
 8015522:	f7ea fed3 	bl	80002cc <__adddf3>
 8015526:	45a8      	cmp	r8, r5
 8015528:	4606      	mov	r6, r0
 801552a:	460f      	mov	r7, r1
 801552c:	d018      	beq.n	8015560 <__ieee754_rem_pio2+0xf0>
 801552e:	a38c      	add	r3, pc, #560	@ (adr r3, 8015760 <__ieee754_rem_pio2+0x2f0>)
 8015530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015534:	f7ea feca 	bl	80002cc <__adddf3>
 8015538:	4602      	mov	r2, r0
 801553a:	460b      	mov	r3, r1
 801553c:	4680      	mov	r8, r0
 801553e:	4689      	mov	r9, r1
 8015540:	4630      	mov	r0, r6
 8015542:	4639      	mov	r1, r7
 8015544:	f7ea fec0 	bl	80002c8 <__aeabi_dsub>
 8015548:	a385      	add	r3, pc, #532	@ (adr r3, 8015760 <__ieee754_rem_pio2+0x2f0>)
 801554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801554e:	f7ea febd 	bl	80002cc <__adddf3>
 8015552:	f04f 35ff 	mov.w	r5, #4294967295
 8015556:	e9c4 8900 	strd	r8, r9, [r4]
 801555a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801555e:	e7c4      	b.n	80154ea <__ieee754_rem_pio2+0x7a>
 8015560:	a381      	add	r3, pc, #516	@ (adr r3, 8015768 <__ieee754_rem_pio2+0x2f8>)
 8015562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015566:	f7ea feb1 	bl	80002cc <__adddf3>
 801556a:	a381      	add	r3, pc, #516	@ (adr r3, 8015770 <__ieee754_rem_pio2+0x300>)
 801556c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015570:	4606      	mov	r6, r0
 8015572:	460f      	mov	r7, r1
 8015574:	f7ea feaa 	bl	80002cc <__adddf3>
 8015578:	4602      	mov	r2, r0
 801557a:	460b      	mov	r3, r1
 801557c:	4680      	mov	r8, r0
 801557e:	4689      	mov	r9, r1
 8015580:	4630      	mov	r0, r6
 8015582:	4639      	mov	r1, r7
 8015584:	f7ea fea0 	bl	80002c8 <__aeabi_dsub>
 8015588:	a379      	add	r3, pc, #484	@ (adr r3, 8015770 <__ieee754_rem_pio2+0x300>)
 801558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801558e:	e7de      	b.n	801554e <__ieee754_rem_pio2+0xde>
 8015590:	4b82      	ldr	r3, [pc, #520]	@ (801579c <__ieee754_rem_pio2+0x32c>)
 8015592:	4598      	cmp	r8, r3
 8015594:	f200 80d1 	bhi.w	801573a <__ieee754_rem_pio2+0x2ca>
 8015598:	f000 f966 	bl	8015868 <fabs>
 801559c:	ec57 6b10 	vmov	r6, r7, d0
 80155a0:	a375      	add	r3, pc, #468	@ (adr r3, 8015778 <__ieee754_rem_pio2+0x308>)
 80155a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a6:	4630      	mov	r0, r6
 80155a8:	4639      	mov	r1, r7
 80155aa:	f7eb f845 	bl	8000638 <__aeabi_dmul>
 80155ae:	4b7c      	ldr	r3, [pc, #496]	@ (80157a0 <__ieee754_rem_pio2+0x330>)
 80155b0:	2200      	movs	r2, #0
 80155b2:	f7ea fe8b 	bl	80002cc <__adddf3>
 80155b6:	f7eb faef 	bl	8000b98 <__aeabi_d2iz>
 80155ba:	4605      	mov	r5, r0
 80155bc:	f7ea ffd2 	bl	8000564 <__aeabi_i2d>
 80155c0:	4602      	mov	r2, r0
 80155c2:	460b      	mov	r3, r1
 80155c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80155c8:	a363      	add	r3, pc, #396	@ (adr r3, 8015758 <__ieee754_rem_pio2+0x2e8>)
 80155ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155ce:	f7eb f833 	bl	8000638 <__aeabi_dmul>
 80155d2:	4602      	mov	r2, r0
 80155d4:	460b      	mov	r3, r1
 80155d6:	4630      	mov	r0, r6
 80155d8:	4639      	mov	r1, r7
 80155da:	f7ea fe75 	bl	80002c8 <__aeabi_dsub>
 80155de:	a360      	add	r3, pc, #384	@ (adr r3, 8015760 <__ieee754_rem_pio2+0x2f0>)
 80155e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e4:	4682      	mov	sl, r0
 80155e6:	468b      	mov	fp, r1
 80155e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155ec:	f7eb f824 	bl	8000638 <__aeabi_dmul>
 80155f0:	2d1f      	cmp	r5, #31
 80155f2:	4606      	mov	r6, r0
 80155f4:	460f      	mov	r7, r1
 80155f6:	dc0c      	bgt.n	8015612 <__ieee754_rem_pio2+0x1a2>
 80155f8:	4b6a      	ldr	r3, [pc, #424]	@ (80157a4 <__ieee754_rem_pio2+0x334>)
 80155fa:	1e6a      	subs	r2, r5, #1
 80155fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015600:	4543      	cmp	r3, r8
 8015602:	d006      	beq.n	8015612 <__ieee754_rem_pio2+0x1a2>
 8015604:	4632      	mov	r2, r6
 8015606:	463b      	mov	r3, r7
 8015608:	4650      	mov	r0, sl
 801560a:	4659      	mov	r1, fp
 801560c:	f7ea fe5c 	bl	80002c8 <__aeabi_dsub>
 8015610:	e00e      	b.n	8015630 <__ieee754_rem_pio2+0x1c0>
 8015612:	463b      	mov	r3, r7
 8015614:	4632      	mov	r2, r6
 8015616:	4650      	mov	r0, sl
 8015618:	4659      	mov	r1, fp
 801561a:	f7ea fe55 	bl	80002c8 <__aeabi_dsub>
 801561e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015622:	9305      	str	r3, [sp, #20]
 8015624:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015628:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801562c:	2b10      	cmp	r3, #16
 801562e:	dc02      	bgt.n	8015636 <__ieee754_rem_pio2+0x1c6>
 8015630:	e9c4 0100 	strd	r0, r1, [r4]
 8015634:	e039      	b.n	80156aa <__ieee754_rem_pio2+0x23a>
 8015636:	a34c      	add	r3, pc, #304	@ (adr r3, 8015768 <__ieee754_rem_pio2+0x2f8>)
 8015638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801563c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015640:	f7ea fffa 	bl	8000638 <__aeabi_dmul>
 8015644:	4606      	mov	r6, r0
 8015646:	460f      	mov	r7, r1
 8015648:	4602      	mov	r2, r0
 801564a:	460b      	mov	r3, r1
 801564c:	4650      	mov	r0, sl
 801564e:	4659      	mov	r1, fp
 8015650:	f7ea fe3a 	bl	80002c8 <__aeabi_dsub>
 8015654:	4602      	mov	r2, r0
 8015656:	460b      	mov	r3, r1
 8015658:	4680      	mov	r8, r0
 801565a:	4689      	mov	r9, r1
 801565c:	4650      	mov	r0, sl
 801565e:	4659      	mov	r1, fp
 8015660:	f7ea fe32 	bl	80002c8 <__aeabi_dsub>
 8015664:	4632      	mov	r2, r6
 8015666:	463b      	mov	r3, r7
 8015668:	f7ea fe2e 	bl	80002c8 <__aeabi_dsub>
 801566c:	a340      	add	r3, pc, #256	@ (adr r3, 8015770 <__ieee754_rem_pio2+0x300>)
 801566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015672:	4606      	mov	r6, r0
 8015674:	460f      	mov	r7, r1
 8015676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801567a:	f7ea ffdd 	bl	8000638 <__aeabi_dmul>
 801567e:	4632      	mov	r2, r6
 8015680:	463b      	mov	r3, r7
 8015682:	f7ea fe21 	bl	80002c8 <__aeabi_dsub>
 8015686:	4602      	mov	r2, r0
 8015688:	460b      	mov	r3, r1
 801568a:	4606      	mov	r6, r0
 801568c:	460f      	mov	r7, r1
 801568e:	4640      	mov	r0, r8
 8015690:	4649      	mov	r1, r9
 8015692:	f7ea fe19 	bl	80002c8 <__aeabi_dsub>
 8015696:	9a05      	ldr	r2, [sp, #20]
 8015698:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801569c:	1ad3      	subs	r3, r2, r3
 801569e:	2b31      	cmp	r3, #49	@ 0x31
 80156a0:	dc20      	bgt.n	80156e4 <__ieee754_rem_pio2+0x274>
 80156a2:	e9c4 0100 	strd	r0, r1, [r4]
 80156a6:	46c2      	mov	sl, r8
 80156a8:	46cb      	mov	fp, r9
 80156aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80156ae:	4650      	mov	r0, sl
 80156b0:	4642      	mov	r2, r8
 80156b2:	464b      	mov	r3, r9
 80156b4:	4659      	mov	r1, fp
 80156b6:	f7ea fe07 	bl	80002c8 <__aeabi_dsub>
 80156ba:	463b      	mov	r3, r7
 80156bc:	4632      	mov	r2, r6
 80156be:	f7ea fe03 	bl	80002c8 <__aeabi_dsub>
 80156c2:	9b04      	ldr	r3, [sp, #16]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80156ca:	f6bf af0e 	bge.w	80154ea <__ieee754_rem_pio2+0x7a>
 80156ce:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80156d2:	6063      	str	r3, [r4, #4]
 80156d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80156d8:	f8c4 8000 	str.w	r8, [r4]
 80156dc:	60a0      	str	r0, [r4, #8]
 80156de:	60e3      	str	r3, [r4, #12]
 80156e0:	426d      	negs	r5, r5
 80156e2:	e702      	b.n	80154ea <__ieee754_rem_pio2+0x7a>
 80156e4:	a326      	add	r3, pc, #152	@ (adr r3, 8015780 <__ieee754_rem_pio2+0x310>)
 80156e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80156ee:	f7ea ffa3 	bl	8000638 <__aeabi_dmul>
 80156f2:	4606      	mov	r6, r0
 80156f4:	460f      	mov	r7, r1
 80156f6:	4602      	mov	r2, r0
 80156f8:	460b      	mov	r3, r1
 80156fa:	4640      	mov	r0, r8
 80156fc:	4649      	mov	r1, r9
 80156fe:	f7ea fde3 	bl	80002c8 <__aeabi_dsub>
 8015702:	4602      	mov	r2, r0
 8015704:	460b      	mov	r3, r1
 8015706:	4682      	mov	sl, r0
 8015708:	468b      	mov	fp, r1
 801570a:	4640      	mov	r0, r8
 801570c:	4649      	mov	r1, r9
 801570e:	f7ea fddb 	bl	80002c8 <__aeabi_dsub>
 8015712:	4632      	mov	r2, r6
 8015714:	463b      	mov	r3, r7
 8015716:	f7ea fdd7 	bl	80002c8 <__aeabi_dsub>
 801571a:	a31b      	add	r3, pc, #108	@ (adr r3, 8015788 <__ieee754_rem_pio2+0x318>)
 801571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015720:	4606      	mov	r6, r0
 8015722:	460f      	mov	r7, r1
 8015724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015728:	f7ea ff86 	bl	8000638 <__aeabi_dmul>
 801572c:	4632      	mov	r2, r6
 801572e:	463b      	mov	r3, r7
 8015730:	f7ea fdca 	bl	80002c8 <__aeabi_dsub>
 8015734:	4606      	mov	r6, r0
 8015736:	460f      	mov	r7, r1
 8015738:	e764      	b.n	8015604 <__ieee754_rem_pio2+0x194>
 801573a:	4b1b      	ldr	r3, [pc, #108]	@ (80157a8 <__ieee754_rem_pio2+0x338>)
 801573c:	4598      	cmp	r8, r3
 801573e:	d935      	bls.n	80157ac <__ieee754_rem_pio2+0x33c>
 8015740:	4632      	mov	r2, r6
 8015742:	463b      	mov	r3, r7
 8015744:	4630      	mov	r0, r6
 8015746:	4639      	mov	r1, r7
 8015748:	f7ea fdbe 	bl	80002c8 <__aeabi_dsub>
 801574c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015750:	e9c4 0100 	strd	r0, r1, [r4]
 8015754:	e69e      	b.n	8015494 <__ieee754_rem_pio2+0x24>
 8015756:	bf00      	nop
 8015758:	54400000 	.word	0x54400000
 801575c:	3ff921fb 	.word	0x3ff921fb
 8015760:	1a626331 	.word	0x1a626331
 8015764:	3dd0b461 	.word	0x3dd0b461
 8015768:	1a600000 	.word	0x1a600000
 801576c:	3dd0b461 	.word	0x3dd0b461
 8015770:	2e037073 	.word	0x2e037073
 8015774:	3ba3198a 	.word	0x3ba3198a
 8015778:	6dc9c883 	.word	0x6dc9c883
 801577c:	3fe45f30 	.word	0x3fe45f30
 8015780:	2e000000 	.word	0x2e000000
 8015784:	3ba3198a 	.word	0x3ba3198a
 8015788:	252049c1 	.word	0x252049c1
 801578c:	397b839a 	.word	0x397b839a
 8015790:	3fe921fb 	.word	0x3fe921fb
 8015794:	4002d97b 	.word	0x4002d97b
 8015798:	3ff921fb 	.word	0x3ff921fb
 801579c:	413921fb 	.word	0x413921fb
 80157a0:	3fe00000 	.word	0x3fe00000
 80157a4:	08016a20 	.word	0x08016a20
 80157a8:	7fefffff 	.word	0x7fefffff
 80157ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80157b0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80157b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80157b8:	4630      	mov	r0, r6
 80157ba:	460f      	mov	r7, r1
 80157bc:	f7eb f9ec 	bl	8000b98 <__aeabi_d2iz>
 80157c0:	f7ea fed0 	bl	8000564 <__aeabi_i2d>
 80157c4:	4602      	mov	r2, r0
 80157c6:	460b      	mov	r3, r1
 80157c8:	4630      	mov	r0, r6
 80157ca:	4639      	mov	r1, r7
 80157cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80157d0:	f7ea fd7a 	bl	80002c8 <__aeabi_dsub>
 80157d4:	4b22      	ldr	r3, [pc, #136]	@ (8015860 <__ieee754_rem_pio2+0x3f0>)
 80157d6:	2200      	movs	r2, #0
 80157d8:	f7ea ff2e 	bl	8000638 <__aeabi_dmul>
 80157dc:	460f      	mov	r7, r1
 80157de:	4606      	mov	r6, r0
 80157e0:	f7eb f9da 	bl	8000b98 <__aeabi_d2iz>
 80157e4:	f7ea febe 	bl	8000564 <__aeabi_i2d>
 80157e8:	4602      	mov	r2, r0
 80157ea:	460b      	mov	r3, r1
 80157ec:	4630      	mov	r0, r6
 80157ee:	4639      	mov	r1, r7
 80157f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80157f4:	f7ea fd68 	bl	80002c8 <__aeabi_dsub>
 80157f8:	4b19      	ldr	r3, [pc, #100]	@ (8015860 <__ieee754_rem_pio2+0x3f0>)
 80157fa:	2200      	movs	r2, #0
 80157fc:	f7ea ff1c 	bl	8000638 <__aeabi_dmul>
 8015800:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8015804:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8015808:	f04f 0803 	mov.w	r8, #3
 801580c:	2600      	movs	r6, #0
 801580e:	2700      	movs	r7, #0
 8015810:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8015814:	4632      	mov	r2, r6
 8015816:	463b      	mov	r3, r7
 8015818:	46c2      	mov	sl, r8
 801581a:	f108 38ff 	add.w	r8, r8, #4294967295
 801581e:	f7eb f973 	bl	8000b08 <__aeabi_dcmpeq>
 8015822:	2800      	cmp	r0, #0
 8015824:	d1f4      	bne.n	8015810 <__ieee754_rem_pio2+0x3a0>
 8015826:	4b0f      	ldr	r3, [pc, #60]	@ (8015864 <__ieee754_rem_pio2+0x3f4>)
 8015828:	9301      	str	r3, [sp, #4]
 801582a:	2302      	movs	r3, #2
 801582c:	9300      	str	r3, [sp, #0]
 801582e:	462a      	mov	r2, r5
 8015830:	4653      	mov	r3, sl
 8015832:	4621      	mov	r1, r4
 8015834:	a806      	add	r0, sp, #24
 8015836:	f000 f9d3 	bl	8015be0 <__kernel_rem_pio2>
 801583a:	9b04      	ldr	r3, [sp, #16]
 801583c:	2b00      	cmp	r3, #0
 801583e:	4605      	mov	r5, r0
 8015840:	f6bf ae53 	bge.w	80154ea <__ieee754_rem_pio2+0x7a>
 8015844:	e9d4 2100 	ldrd	r2, r1, [r4]
 8015848:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801584c:	e9c4 2300 	strd	r2, r3, [r4]
 8015850:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8015854:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015858:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801585c:	e740      	b.n	80156e0 <__ieee754_rem_pio2+0x270>
 801585e:	bf00      	nop
 8015860:	41700000 	.word	0x41700000
 8015864:	08016aa0 	.word	0x08016aa0

08015868 <fabs>:
 8015868:	ec51 0b10 	vmov	r0, r1, d0
 801586c:	4602      	mov	r2, r0
 801586e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8015872:	ec43 2b10 	vmov	d0, r2, r3
 8015876:	4770      	bx	lr

08015878 <__ieee754_acosf>:
 8015878:	b508      	push	{r3, lr}
 801587a:	ee10 3a10 	vmov	r3, s0
 801587e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8015882:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8015886:	ed2d 8b0c 	vpush	{d8-d13}
 801588a:	d10a      	bne.n	80158a2 <__ieee754_acosf+0x2a>
 801588c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8015a24 <__ieee754_acosf+0x1ac>
 8015890:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8015a28 <__ieee754_acosf+0x1b0>
 8015894:	2b00      	cmp	r3, #0
 8015896:	bfc8      	it	gt
 8015898:	eeb0 0a67 	vmovgt.f32	s0, s15
 801589c:	ecbd 8b0c 	vpop	{d8-d13}
 80158a0:	bd08      	pop	{r3, pc}
 80158a2:	d904      	bls.n	80158ae <__ieee754_acosf+0x36>
 80158a4:	ee30 8a40 	vsub.f32	s16, s0, s0
 80158a8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80158ac:	e7f6      	b.n	801589c <__ieee754_acosf+0x24>
 80158ae:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80158b2:	d23c      	bcs.n	801592e <__ieee754_acosf+0xb6>
 80158b4:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80158b8:	f240 80b1 	bls.w	8015a1e <__ieee754_acosf+0x1a6>
 80158bc:	ee60 7a00 	vmul.f32	s15, s0, s0
 80158c0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8015a2c <__ieee754_acosf+0x1b4>
 80158c4:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8015a30 <__ieee754_acosf+0x1b8>
 80158c8:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8015a34 <__ieee754_acosf+0x1bc>
 80158cc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80158d0:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8015a38 <__ieee754_acosf+0x1c0>
 80158d4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80158d8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8015a3c <__ieee754_acosf+0x1c4>
 80158dc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80158e0:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8015a40 <__ieee754_acosf+0x1c8>
 80158e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80158e8:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8015a44 <__ieee754_acosf+0x1cc>
 80158ec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80158f0:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8015a48 <__ieee754_acosf+0x1d0>
 80158f4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80158f8:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8015a4c <__ieee754_acosf+0x1d4>
 80158fc:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015900:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8015a50 <__ieee754_acosf+0x1d8>
 8015904:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8015908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801590c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015914:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8015a54 <__ieee754_acosf+0x1dc>
 8015918:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801591c:	eee0 7a46 	vfms.f32	s15, s0, s12
 8015920:	ee70 7a67 	vsub.f32	s15, s0, s15
 8015924:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8015a58 <__ieee754_acosf+0x1e0>
 8015928:	ee30 0a67 	vsub.f32	s0, s0, s15
 801592c:	e7b6      	b.n	801589c <__ieee754_acosf+0x24>
 801592e:	2b00      	cmp	r3, #0
 8015930:	eddf da3e 	vldr	s27, [pc, #248]	@ 8015a2c <__ieee754_acosf+0x1b4>
 8015934:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8015a30 <__ieee754_acosf+0x1b8>
 8015938:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8015a38 <__ieee754_acosf+0x1c0>
 801593c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8015a3c <__ieee754_acosf+0x1c4>
 8015940:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8015a40 <__ieee754_acosf+0x1c8>
 8015944:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8015a44 <__ieee754_acosf+0x1cc>
 8015948:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8015a48 <__ieee754_acosf+0x1d0>
 801594c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8015a34 <__ieee754_acosf+0x1bc>
 8015950:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8015a4c <__ieee754_acosf+0x1d4>
 8015954:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8015a50 <__ieee754_acosf+0x1d8>
 8015958:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801595c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8015960:	da28      	bge.n	80159b4 <__ieee754_acosf+0x13c>
 8015962:	ee30 8a09 	vadd.f32	s16, s0, s18
 8015966:	ee28 0a27 	vmul.f32	s0, s16, s15
 801596a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801596e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8015972:	eeac ca80 	vfma.f32	s24, s25, s0
 8015976:	eeaa aa80 	vfma.f32	s20, s21, s0
 801597a:	eeec ba00 	vfma.f32	s23, s24, s0
 801597e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8015982:	eeab ba80 	vfma.f32	s22, s23, s0
 8015986:	eea9 9a80 	vfma.f32	s18, s19, s0
 801598a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801598e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8015992:	f7fe fe25 	bl	80145e0 <__ieee754_sqrtf>
 8015996:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801599a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8015a5c <__ieee754_acosf+0x1e4>
 801599e:	eee0 7a07 	vfma.f32	s15, s0, s14
 80159a2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80159a6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80159aa:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8015a60 <__ieee754_acosf+0x1e8>
 80159ae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80159b2:	e773      	b.n	801589c <__ieee754_acosf+0x24>
 80159b4:	ee39 8a40 	vsub.f32	s16, s18, s0
 80159b8:	ee28 8a27 	vmul.f32	s16, s16, s15
 80159bc:	eeb0 0a48 	vmov.f32	s0, s16
 80159c0:	f7fe fe0e 	bl	80145e0 <__ieee754_sqrtf>
 80159c4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80159c8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80159cc:	eeac ca88 	vfma.f32	s24, s25, s16
 80159d0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80159d4:	eeec ba08 	vfma.f32	s23, s24, s16
 80159d8:	ee10 3a10 	vmov	r3, s0
 80159dc:	eeab ba88 	vfma.f32	s22, s23, s16
 80159e0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80159e4:	f023 030f 	bic.w	r3, r3, #15
 80159e8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80159ec:	ee07 3a90 	vmov	s15, r3
 80159f0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80159f4:	eeb0 6a48 	vmov.f32	s12, s16
 80159f8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80159fc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8015a00:	ee70 6a27 	vadd.f32	s13, s0, s15
 8015a04:	ee68 8a88 	vmul.f32	s17, s17, s16
 8015a08:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015a0c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8015a10:	eea0 7a26 	vfma.f32	s14, s0, s13
 8015a14:	ee37 0a87 	vadd.f32	s0, s15, s14
 8015a18:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015a1c:	e73e      	b.n	801589c <__ieee754_acosf+0x24>
 8015a1e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8015a64 <__ieee754_acosf+0x1ec>
 8015a22:	e73b      	b.n	801589c <__ieee754_acosf+0x24>
 8015a24:	40490fdb 	.word	0x40490fdb
 8015a28:	00000000 	.word	0x00000000
 8015a2c:	3811ef08 	.word	0x3811ef08
 8015a30:	3a4f7f04 	.word	0x3a4f7f04
 8015a34:	bf303361 	.word	0xbf303361
 8015a38:	bd241146 	.word	0xbd241146
 8015a3c:	3e4e0aa8 	.word	0x3e4e0aa8
 8015a40:	bea6b090 	.word	0xbea6b090
 8015a44:	3e2aaaab 	.word	0x3e2aaaab
 8015a48:	3d9dc62e 	.word	0x3d9dc62e
 8015a4c:	4001572d 	.word	0x4001572d
 8015a50:	c019d139 	.word	0xc019d139
 8015a54:	33a22168 	.word	0x33a22168
 8015a58:	3fc90fda 	.word	0x3fc90fda
 8015a5c:	b3a22168 	.word	0xb3a22168
 8015a60:	40490fda 	.word	0x40490fda
 8015a64:	3fc90fdb 	.word	0x3fc90fdb

08015a68 <scalbn>:
 8015a68:	b570      	push	{r4, r5, r6, lr}
 8015a6a:	ec55 4b10 	vmov	r4, r5, d0
 8015a6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015a72:	4606      	mov	r6, r0
 8015a74:	462b      	mov	r3, r5
 8015a76:	b991      	cbnz	r1, 8015a9e <scalbn+0x36>
 8015a78:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8015a7c:	4323      	orrs	r3, r4
 8015a7e:	d03d      	beq.n	8015afc <scalbn+0x94>
 8015a80:	4b35      	ldr	r3, [pc, #212]	@ (8015b58 <scalbn+0xf0>)
 8015a82:	4620      	mov	r0, r4
 8015a84:	4629      	mov	r1, r5
 8015a86:	2200      	movs	r2, #0
 8015a88:	f7ea fdd6 	bl	8000638 <__aeabi_dmul>
 8015a8c:	4b33      	ldr	r3, [pc, #204]	@ (8015b5c <scalbn+0xf4>)
 8015a8e:	429e      	cmp	r6, r3
 8015a90:	4604      	mov	r4, r0
 8015a92:	460d      	mov	r5, r1
 8015a94:	da0f      	bge.n	8015ab6 <scalbn+0x4e>
 8015a96:	a328      	add	r3, pc, #160	@ (adr r3, 8015b38 <scalbn+0xd0>)
 8015a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9c:	e01e      	b.n	8015adc <scalbn+0x74>
 8015a9e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8015aa2:	4291      	cmp	r1, r2
 8015aa4:	d10b      	bne.n	8015abe <scalbn+0x56>
 8015aa6:	4622      	mov	r2, r4
 8015aa8:	4620      	mov	r0, r4
 8015aaa:	4629      	mov	r1, r5
 8015aac:	f7ea fc0e 	bl	80002cc <__adddf3>
 8015ab0:	4604      	mov	r4, r0
 8015ab2:	460d      	mov	r5, r1
 8015ab4:	e022      	b.n	8015afc <scalbn+0x94>
 8015ab6:	460b      	mov	r3, r1
 8015ab8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015abc:	3936      	subs	r1, #54	@ 0x36
 8015abe:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8015ac2:	4296      	cmp	r6, r2
 8015ac4:	dd0d      	ble.n	8015ae2 <scalbn+0x7a>
 8015ac6:	2d00      	cmp	r5, #0
 8015ac8:	a11d      	add	r1, pc, #116	@ (adr r1, 8015b40 <scalbn+0xd8>)
 8015aca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ace:	da02      	bge.n	8015ad6 <scalbn+0x6e>
 8015ad0:	a11d      	add	r1, pc, #116	@ (adr r1, 8015b48 <scalbn+0xe0>)
 8015ad2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015ad6:	a31a      	add	r3, pc, #104	@ (adr r3, 8015b40 <scalbn+0xd8>)
 8015ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015adc:	f7ea fdac 	bl	8000638 <__aeabi_dmul>
 8015ae0:	e7e6      	b.n	8015ab0 <scalbn+0x48>
 8015ae2:	1872      	adds	r2, r6, r1
 8015ae4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8015ae8:	428a      	cmp	r2, r1
 8015aea:	dcec      	bgt.n	8015ac6 <scalbn+0x5e>
 8015aec:	2a00      	cmp	r2, #0
 8015aee:	dd08      	ble.n	8015b02 <scalbn+0x9a>
 8015af0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015af4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015af8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015afc:	ec45 4b10 	vmov	d0, r4, r5
 8015b00:	bd70      	pop	{r4, r5, r6, pc}
 8015b02:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8015b06:	da08      	bge.n	8015b1a <scalbn+0xb2>
 8015b08:	2d00      	cmp	r5, #0
 8015b0a:	a10b      	add	r1, pc, #44	@ (adr r1, 8015b38 <scalbn+0xd0>)
 8015b0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b10:	dac1      	bge.n	8015a96 <scalbn+0x2e>
 8015b12:	a10f      	add	r1, pc, #60	@ (adr r1, 8015b50 <scalbn+0xe8>)
 8015b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b18:	e7bd      	b.n	8015a96 <scalbn+0x2e>
 8015b1a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8015b1e:	3236      	adds	r2, #54	@ 0x36
 8015b20:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8015b24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015b28:	4620      	mov	r0, r4
 8015b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8015b60 <scalbn+0xf8>)
 8015b2c:	4629      	mov	r1, r5
 8015b2e:	2200      	movs	r2, #0
 8015b30:	e7d4      	b.n	8015adc <scalbn+0x74>
 8015b32:	bf00      	nop
 8015b34:	f3af 8000 	nop.w
 8015b38:	c2f8f359 	.word	0xc2f8f359
 8015b3c:	01a56e1f 	.word	0x01a56e1f
 8015b40:	8800759c 	.word	0x8800759c
 8015b44:	7e37e43c 	.word	0x7e37e43c
 8015b48:	8800759c 	.word	0x8800759c
 8015b4c:	fe37e43c 	.word	0xfe37e43c
 8015b50:	c2f8f359 	.word	0xc2f8f359
 8015b54:	81a56e1f 	.word	0x81a56e1f
 8015b58:	43500000 	.word	0x43500000
 8015b5c:	ffff3cb0 	.word	0xffff3cb0
 8015b60:	3c900000 	.word	0x3c900000

08015b64 <with_errno>:
 8015b64:	b510      	push	{r4, lr}
 8015b66:	ed2d 8b02 	vpush	{d8}
 8015b6a:	eeb0 8a40 	vmov.f32	s16, s0
 8015b6e:	eef0 8a60 	vmov.f32	s17, s1
 8015b72:	4604      	mov	r4, r0
 8015b74:	f7fa fc06 	bl	8010384 <__errno>
 8015b78:	eeb0 0a48 	vmov.f32	s0, s16
 8015b7c:	eef0 0a68 	vmov.f32	s1, s17
 8015b80:	ecbd 8b02 	vpop	{d8}
 8015b84:	6004      	str	r4, [r0, #0]
 8015b86:	bd10      	pop	{r4, pc}

08015b88 <xflow>:
 8015b88:	4603      	mov	r3, r0
 8015b8a:	b507      	push	{r0, r1, r2, lr}
 8015b8c:	ec51 0b10 	vmov	r0, r1, d0
 8015b90:	b183      	cbz	r3, 8015bb4 <xflow+0x2c>
 8015b92:	4602      	mov	r2, r0
 8015b94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015b98:	e9cd 2300 	strd	r2, r3, [sp]
 8015b9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ba0:	f7ea fd4a 	bl	8000638 <__aeabi_dmul>
 8015ba4:	ec41 0b10 	vmov	d0, r0, r1
 8015ba8:	2022      	movs	r0, #34	@ 0x22
 8015baa:	b003      	add	sp, #12
 8015bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8015bb0:	f7ff bfd8 	b.w	8015b64 <with_errno>
 8015bb4:	4602      	mov	r2, r0
 8015bb6:	460b      	mov	r3, r1
 8015bb8:	e7ee      	b.n	8015b98 <xflow+0x10>
 8015bba:	0000      	movs	r0, r0
 8015bbc:	0000      	movs	r0, r0
	...

08015bc0 <__math_uflow>:
 8015bc0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015bc8 <__math_uflow+0x8>
 8015bc4:	f7ff bfe0 	b.w	8015b88 <xflow>
 8015bc8:	00000000 	.word	0x00000000
 8015bcc:	10000000 	.word	0x10000000

08015bd0 <__math_oflow>:
 8015bd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015bd8 <__math_oflow+0x8>
 8015bd4:	f7ff bfd8 	b.w	8015b88 <xflow>
 8015bd8:	00000000 	.word	0x00000000
 8015bdc:	70000000 	.word	0x70000000

08015be0 <__kernel_rem_pio2>:
 8015be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015be4:	ed2d 8b02 	vpush	{d8}
 8015be8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8015bec:	f112 0f14 	cmn.w	r2, #20
 8015bf0:	9306      	str	r3, [sp, #24]
 8015bf2:	9104      	str	r1, [sp, #16]
 8015bf4:	4bbe      	ldr	r3, [pc, #760]	@ (8015ef0 <__kernel_rem_pio2+0x310>)
 8015bf6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8015bf8:	9008      	str	r0, [sp, #32]
 8015bfa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015bfe:	9300      	str	r3, [sp, #0]
 8015c00:	9b06      	ldr	r3, [sp, #24]
 8015c02:	f103 33ff 	add.w	r3, r3, #4294967295
 8015c06:	bfa8      	it	ge
 8015c08:	1ed4      	subge	r4, r2, #3
 8015c0a:	9305      	str	r3, [sp, #20]
 8015c0c:	bfb2      	itee	lt
 8015c0e:	2400      	movlt	r4, #0
 8015c10:	2318      	movge	r3, #24
 8015c12:	fb94 f4f3 	sdivge	r4, r4, r3
 8015c16:	f06f 0317 	mvn.w	r3, #23
 8015c1a:	fb04 3303 	mla	r3, r4, r3, r3
 8015c1e:	eb03 0b02 	add.w	fp, r3, r2
 8015c22:	9b00      	ldr	r3, [sp, #0]
 8015c24:	9a05      	ldr	r2, [sp, #20]
 8015c26:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8015ee0 <__kernel_rem_pio2+0x300>
 8015c2a:	eb03 0802 	add.w	r8, r3, r2
 8015c2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8015c30:	1aa7      	subs	r7, r4, r2
 8015c32:	ae20      	add	r6, sp, #128	@ 0x80
 8015c34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8015c38:	2500      	movs	r5, #0
 8015c3a:	4545      	cmp	r5, r8
 8015c3c:	dd13      	ble.n	8015c66 <__kernel_rem_pio2+0x86>
 8015c3e:	9b06      	ldr	r3, [sp, #24]
 8015c40:	aa20      	add	r2, sp, #128	@ 0x80
 8015c42:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8015c46:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8015c4a:	f04f 0800 	mov.w	r8, #0
 8015c4e:	9b00      	ldr	r3, [sp, #0]
 8015c50:	4598      	cmp	r8, r3
 8015c52:	dc31      	bgt.n	8015cb8 <__kernel_rem_pio2+0xd8>
 8015c54:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8015ee0 <__kernel_rem_pio2+0x300>
 8015c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015c5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015c60:	462f      	mov	r7, r5
 8015c62:	2600      	movs	r6, #0
 8015c64:	e01b      	b.n	8015c9e <__kernel_rem_pio2+0xbe>
 8015c66:	42ef      	cmn	r7, r5
 8015c68:	d407      	bmi.n	8015c7a <__kernel_rem_pio2+0x9a>
 8015c6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8015c6e:	f7ea fc79 	bl	8000564 <__aeabi_i2d>
 8015c72:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015c76:	3501      	adds	r5, #1
 8015c78:	e7df      	b.n	8015c3a <__kernel_rem_pio2+0x5a>
 8015c7a:	ec51 0b18 	vmov	r0, r1, d8
 8015c7e:	e7f8      	b.n	8015c72 <__kernel_rem_pio2+0x92>
 8015c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015c84:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015c88:	f7ea fcd6 	bl	8000638 <__aeabi_dmul>
 8015c8c:	4602      	mov	r2, r0
 8015c8e:	460b      	mov	r3, r1
 8015c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c94:	f7ea fb1a 	bl	80002cc <__adddf3>
 8015c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015c9c:	3601      	adds	r6, #1
 8015c9e:	9b05      	ldr	r3, [sp, #20]
 8015ca0:	429e      	cmp	r6, r3
 8015ca2:	f1a7 0708 	sub.w	r7, r7, #8
 8015ca6:	ddeb      	ble.n	8015c80 <__kernel_rem_pio2+0xa0>
 8015ca8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015cac:	f108 0801 	add.w	r8, r8, #1
 8015cb0:	ecaa 7b02 	vstmia	sl!, {d7}
 8015cb4:	3508      	adds	r5, #8
 8015cb6:	e7ca      	b.n	8015c4e <__kernel_rem_pio2+0x6e>
 8015cb8:	9b00      	ldr	r3, [sp, #0]
 8015cba:	f8dd 8000 	ldr.w	r8, [sp]
 8015cbe:	aa0c      	add	r2, sp, #48	@ 0x30
 8015cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015cc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8015cc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8015cc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8015cce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8015cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015cd4:	ab98      	add	r3, sp, #608	@ 0x260
 8015cd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015cda:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8015cde:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015ce2:	ac0c      	add	r4, sp, #48	@ 0x30
 8015ce4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8015ce6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8015cea:	46a1      	mov	r9, r4
 8015cec:	46c2      	mov	sl, r8
 8015cee:	f1ba 0f00 	cmp.w	sl, #0
 8015cf2:	f1a5 0508 	sub.w	r5, r5, #8
 8015cf6:	dc77      	bgt.n	8015de8 <__kernel_rem_pio2+0x208>
 8015cf8:	4658      	mov	r0, fp
 8015cfa:	ed9d 0b02 	vldr	d0, [sp, #8]
 8015cfe:	f7ff feb3 	bl	8015a68 <scalbn>
 8015d02:	ec57 6b10 	vmov	r6, r7, d0
 8015d06:	2200      	movs	r2, #0
 8015d08:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8015d0c:	4630      	mov	r0, r6
 8015d0e:	4639      	mov	r1, r7
 8015d10:	f7ea fc92 	bl	8000638 <__aeabi_dmul>
 8015d14:	ec41 0b10 	vmov	d0, r0, r1
 8015d18:	f7fe fc66 	bl	80145e8 <floor>
 8015d1c:	4b75      	ldr	r3, [pc, #468]	@ (8015ef4 <__kernel_rem_pio2+0x314>)
 8015d1e:	ec51 0b10 	vmov	r0, r1, d0
 8015d22:	2200      	movs	r2, #0
 8015d24:	f7ea fc88 	bl	8000638 <__aeabi_dmul>
 8015d28:	4602      	mov	r2, r0
 8015d2a:	460b      	mov	r3, r1
 8015d2c:	4630      	mov	r0, r6
 8015d2e:	4639      	mov	r1, r7
 8015d30:	f7ea faca 	bl	80002c8 <__aeabi_dsub>
 8015d34:	460f      	mov	r7, r1
 8015d36:	4606      	mov	r6, r0
 8015d38:	f7ea ff2e 	bl	8000b98 <__aeabi_d2iz>
 8015d3c:	9002      	str	r0, [sp, #8]
 8015d3e:	f7ea fc11 	bl	8000564 <__aeabi_i2d>
 8015d42:	4602      	mov	r2, r0
 8015d44:	460b      	mov	r3, r1
 8015d46:	4630      	mov	r0, r6
 8015d48:	4639      	mov	r1, r7
 8015d4a:	f7ea fabd 	bl	80002c8 <__aeabi_dsub>
 8015d4e:	f1bb 0f00 	cmp.w	fp, #0
 8015d52:	4606      	mov	r6, r0
 8015d54:	460f      	mov	r7, r1
 8015d56:	dd6c      	ble.n	8015e32 <__kernel_rem_pio2+0x252>
 8015d58:	f108 31ff 	add.w	r1, r8, #4294967295
 8015d5c:	ab0c      	add	r3, sp, #48	@ 0x30
 8015d5e:	9d02      	ldr	r5, [sp, #8]
 8015d60:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015d64:	f1cb 0018 	rsb	r0, fp, #24
 8015d68:	fa43 f200 	asr.w	r2, r3, r0
 8015d6c:	4415      	add	r5, r2
 8015d6e:	4082      	lsls	r2, r0
 8015d70:	1a9b      	subs	r3, r3, r2
 8015d72:	aa0c      	add	r2, sp, #48	@ 0x30
 8015d74:	9502      	str	r5, [sp, #8]
 8015d76:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8015d7a:	f1cb 0217 	rsb	r2, fp, #23
 8015d7e:	fa43 f902 	asr.w	r9, r3, r2
 8015d82:	f1b9 0f00 	cmp.w	r9, #0
 8015d86:	dd64      	ble.n	8015e52 <__kernel_rem_pio2+0x272>
 8015d88:	9b02      	ldr	r3, [sp, #8]
 8015d8a:	2200      	movs	r2, #0
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	9302      	str	r3, [sp, #8]
 8015d90:	4615      	mov	r5, r2
 8015d92:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8015d96:	4590      	cmp	r8, r2
 8015d98:	f300 80b8 	bgt.w	8015f0c <__kernel_rem_pio2+0x32c>
 8015d9c:	f1bb 0f00 	cmp.w	fp, #0
 8015da0:	dd07      	ble.n	8015db2 <__kernel_rem_pio2+0x1d2>
 8015da2:	f1bb 0f01 	cmp.w	fp, #1
 8015da6:	f000 80bf 	beq.w	8015f28 <__kernel_rem_pio2+0x348>
 8015daa:	f1bb 0f02 	cmp.w	fp, #2
 8015dae:	f000 80c6 	beq.w	8015f3e <__kernel_rem_pio2+0x35e>
 8015db2:	f1b9 0f02 	cmp.w	r9, #2
 8015db6:	d14c      	bne.n	8015e52 <__kernel_rem_pio2+0x272>
 8015db8:	4632      	mov	r2, r6
 8015dba:	463b      	mov	r3, r7
 8015dbc:	494e      	ldr	r1, [pc, #312]	@ (8015ef8 <__kernel_rem_pio2+0x318>)
 8015dbe:	2000      	movs	r0, #0
 8015dc0:	f7ea fa82 	bl	80002c8 <__aeabi_dsub>
 8015dc4:	4606      	mov	r6, r0
 8015dc6:	460f      	mov	r7, r1
 8015dc8:	2d00      	cmp	r5, #0
 8015dca:	d042      	beq.n	8015e52 <__kernel_rem_pio2+0x272>
 8015dcc:	4658      	mov	r0, fp
 8015dce:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8015ee8 <__kernel_rem_pio2+0x308>
 8015dd2:	f7ff fe49 	bl	8015a68 <scalbn>
 8015dd6:	4630      	mov	r0, r6
 8015dd8:	4639      	mov	r1, r7
 8015dda:	ec53 2b10 	vmov	r2, r3, d0
 8015dde:	f7ea fa73 	bl	80002c8 <__aeabi_dsub>
 8015de2:	4606      	mov	r6, r0
 8015de4:	460f      	mov	r7, r1
 8015de6:	e034      	b.n	8015e52 <__kernel_rem_pio2+0x272>
 8015de8:	4b44      	ldr	r3, [pc, #272]	@ (8015efc <__kernel_rem_pio2+0x31c>)
 8015dea:	2200      	movs	r2, #0
 8015dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015df0:	f7ea fc22 	bl	8000638 <__aeabi_dmul>
 8015df4:	f7ea fed0 	bl	8000b98 <__aeabi_d2iz>
 8015df8:	f7ea fbb4 	bl	8000564 <__aeabi_i2d>
 8015dfc:	4b40      	ldr	r3, [pc, #256]	@ (8015f00 <__kernel_rem_pio2+0x320>)
 8015dfe:	2200      	movs	r2, #0
 8015e00:	4606      	mov	r6, r0
 8015e02:	460f      	mov	r7, r1
 8015e04:	f7ea fc18 	bl	8000638 <__aeabi_dmul>
 8015e08:	4602      	mov	r2, r0
 8015e0a:	460b      	mov	r3, r1
 8015e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015e10:	f7ea fa5a 	bl	80002c8 <__aeabi_dsub>
 8015e14:	f7ea fec0 	bl	8000b98 <__aeabi_d2iz>
 8015e18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015e1c:	f849 0b04 	str.w	r0, [r9], #4
 8015e20:	4639      	mov	r1, r7
 8015e22:	4630      	mov	r0, r6
 8015e24:	f7ea fa52 	bl	80002cc <__adddf3>
 8015e28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015e30:	e75d      	b.n	8015cee <__kernel_rem_pio2+0x10e>
 8015e32:	d107      	bne.n	8015e44 <__kernel_rem_pio2+0x264>
 8015e34:	f108 33ff 	add.w	r3, r8, #4294967295
 8015e38:	aa0c      	add	r2, sp, #48	@ 0x30
 8015e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e3e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8015e42:	e79e      	b.n	8015d82 <__kernel_rem_pio2+0x1a2>
 8015e44:	4b2f      	ldr	r3, [pc, #188]	@ (8015f04 <__kernel_rem_pio2+0x324>)
 8015e46:	2200      	movs	r2, #0
 8015e48:	f7ea fe7c 	bl	8000b44 <__aeabi_dcmpge>
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	d143      	bne.n	8015ed8 <__kernel_rem_pio2+0x2f8>
 8015e50:	4681      	mov	r9, r0
 8015e52:	2200      	movs	r2, #0
 8015e54:	2300      	movs	r3, #0
 8015e56:	4630      	mov	r0, r6
 8015e58:	4639      	mov	r1, r7
 8015e5a:	f7ea fe55 	bl	8000b08 <__aeabi_dcmpeq>
 8015e5e:	2800      	cmp	r0, #0
 8015e60:	f000 80bf 	beq.w	8015fe2 <__kernel_rem_pio2+0x402>
 8015e64:	f108 33ff 	add.w	r3, r8, #4294967295
 8015e68:	2200      	movs	r2, #0
 8015e6a:	9900      	ldr	r1, [sp, #0]
 8015e6c:	428b      	cmp	r3, r1
 8015e6e:	da6e      	bge.n	8015f4e <__kernel_rem_pio2+0x36e>
 8015e70:	2a00      	cmp	r2, #0
 8015e72:	f000 8089 	beq.w	8015f88 <__kernel_rem_pio2+0x3a8>
 8015e76:	f108 38ff 	add.w	r8, r8, #4294967295
 8015e7a:	ab0c      	add	r3, sp, #48	@ 0x30
 8015e7c:	f1ab 0b18 	sub.w	fp, fp, #24
 8015e80:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d0f6      	beq.n	8015e76 <__kernel_rem_pio2+0x296>
 8015e88:	4658      	mov	r0, fp
 8015e8a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015ee8 <__kernel_rem_pio2+0x308>
 8015e8e:	f7ff fdeb 	bl	8015a68 <scalbn>
 8015e92:	f108 0301 	add.w	r3, r8, #1
 8015e96:	00da      	lsls	r2, r3, #3
 8015e98:	9205      	str	r2, [sp, #20]
 8015e9a:	ec55 4b10 	vmov	r4, r5, d0
 8015e9e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8015ea0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8015efc <__kernel_rem_pio2+0x31c>
 8015ea4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8015ea8:	4646      	mov	r6, r8
 8015eaa:	f04f 0a00 	mov.w	sl, #0
 8015eae:	2e00      	cmp	r6, #0
 8015eb0:	f280 80cf 	bge.w	8016052 <__kernel_rem_pio2+0x472>
 8015eb4:	4644      	mov	r4, r8
 8015eb6:	2c00      	cmp	r4, #0
 8015eb8:	f2c0 80fd 	blt.w	80160b6 <__kernel_rem_pio2+0x4d6>
 8015ebc:	4b12      	ldr	r3, [pc, #72]	@ (8015f08 <__kernel_rem_pio2+0x328>)
 8015ebe:	461f      	mov	r7, r3
 8015ec0:	ab70      	add	r3, sp, #448	@ 0x1c0
 8015ec2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8015ec6:	9306      	str	r3, [sp, #24]
 8015ec8:	f04f 0a00 	mov.w	sl, #0
 8015ecc:	f04f 0b00 	mov.w	fp, #0
 8015ed0:	2600      	movs	r6, #0
 8015ed2:	eba8 0504 	sub.w	r5, r8, r4
 8015ed6:	e0e2      	b.n	801609e <__kernel_rem_pio2+0x4be>
 8015ed8:	f04f 0902 	mov.w	r9, #2
 8015edc:	e754      	b.n	8015d88 <__kernel_rem_pio2+0x1a8>
 8015ede:	bf00      	nop
	...
 8015eec:	3ff00000 	.word	0x3ff00000
 8015ef0:	08016be8 	.word	0x08016be8
 8015ef4:	40200000 	.word	0x40200000
 8015ef8:	3ff00000 	.word	0x3ff00000
 8015efc:	3e700000 	.word	0x3e700000
 8015f00:	41700000 	.word	0x41700000
 8015f04:	3fe00000 	.word	0x3fe00000
 8015f08:	08016ba8 	.word	0x08016ba8
 8015f0c:	f854 3b04 	ldr.w	r3, [r4], #4
 8015f10:	b945      	cbnz	r5, 8015f24 <__kernel_rem_pio2+0x344>
 8015f12:	b123      	cbz	r3, 8015f1e <__kernel_rem_pio2+0x33e>
 8015f14:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8015f18:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	3201      	adds	r2, #1
 8015f20:	461d      	mov	r5, r3
 8015f22:	e738      	b.n	8015d96 <__kernel_rem_pio2+0x1b6>
 8015f24:	1acb      	subs	r3, r1, r3
 8015f26:	e7f7      	b.n	8015f18 <__kernel_rem_pio2+0x338>
 8015f28:	f108 32ff 	add.w	r2, r8, #4294967295
 8015f2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8015f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f32:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015f36:	a90c      	add	r1, sp, #48	@ 0x30
 8015f38:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015f3c:	e739      	b.n	8015db2 <__kernel_rem_pio2+0x1d2>
 8015f3e:	f108 32ff 	add.w	r2, r8, #4294967295
 8015f42:	ab0c      	add	r3, sp, #48	@ 0x30
 8015f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015f4c:	e7f3      	b.n	8015f36 <__kernel_rem_pio2+0x356>
 8015f4e:	a90c      	add	r1, sp, #48	@ 0x30
 8015f50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015f54:	3b01      	subs	r3, #1
 8015f56:	430a      	orrs	r2, r1
 8015f58:	e787      	b.n	8015e6a <__kernel_rem_pio2+0x28a>
 8015f5a:	3401      	adds	r4, #1
 8015f5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015f60:	2a00      	cmp	r2, #0
 8015f62:	d0fa      	beq.n	8015f5a <__kernel_rem_pio2+0x37a>
 8015f64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015f66:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015f6a:	eb0d 0503 	add.w	r5, sp, r3
 8015f6e:	9b06      	ldr	r3, [sp, #24]
 8015f70:	aa20      	add	r2, sp, #128	@ 0x80
 8015f72:	4443      	add	r3, r8
 8015f74:	f108 0701 	add.w	r7, r8, #1
 8015f78:	3d98      	subs	r5, #152	@ 0x98
 8015f7a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8015f7e:	4444      	add	r4, r8
 8015f80:	42bc      	cmp	r4, r7
 8015f82:	da04      	bge.n	8015f8e <__kernel_rem_pio2+0x3ae>
 8015f84:	46a0      	mov	r8, r4
 8015f86:	e6a2      	b.n	8015cce <__kernel_rem_pio2+0xee>
 8015f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015f8a:	2401      	movs	r4, #1
 8015f8c:	e7e6      	b.n	8015f5c <__kernel_rem_pio2+0x37c>
 8015f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015f90:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8015f94:	f7ea fae6 	bl	8000564 <__aeabi_i2d>
 8015f98:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8016260 <__kernel_rem_pio2+0x680>
 8015f9c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8015fa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015fa8:	46b2      	mov	sl, r6
 8015faa:	f04f 0800 	mov.w	r8, #0
 8015fae:	9b05      	ldr	r3, [sp, #20]
 8015fb0:	4598      	cmp	r8, r3
 8015fb2:	dd05      	ble.n	8015fc0 <__kernel_rem_pio2+0x3e0>
 8015fb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015fb8:	3701      	adds	r7, #1
 8015fba:	eca5 7b02 	vstmia	r5!, {d7}
 8015fbe:	e7df      	b.n	8015f80 <__kernel_rem_pio2+0x3a0>
 8015fc0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8015fc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8015fc8:	f7ea fb36 	bl	8000638 <__aeabi_dmul>
 8015fcc:	4602      	mov	r2, r0
 8015fce:	460b      	mov	r3, r1
 8015fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015fd4:	f7ea f97a 	bl	80002cc <__adddf3>
 8015fd8:	f108 0801 	add.w	r8, r8, #1
 8015fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015fe0:	e7e5      	b.n	8015fae <__kernel_rem_pio2+0x3ce>
 8015fe2:	f1cb 0000 	rsb	r0, fp, #0
 8015fe6:	ec47 6b10 	vmov	d0, r6, r7
 8015fea:	f7ff fd3d 	bl	8015a68 <scalbn>
 8015fee:	ec55 4b10 	vmov	r4, r5, d0
 8015ff2:	4b9d      	ldr	r3, [pc, #628]	@ (8016268 <__kernel_rem_pio2+0x688>)
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	4620      	mov	r0, r4
 8015ff8:	4629      	mov	r1, r5
 8015ffa:	f7ea fda3 	bl	8000b44 <__aeabi_dcmpge>
 8015ffe:	b300      	cbz	r0, 8016042 <__kernel_rem_pio2+0x462>
 8016000:	4b9a      	ldr	r3, [pc, #616]	@ (801626c <__kernel_rem_pio2+0x68c>)
 8016002:	2200      	movs	r2, #0
 8016004:	4620      	mov	r0, r4
 8016006:	4629      	mov	r1, r5
 8016008:	f7ea fb16 	bl	8000638 <__aeabi_dmul>
 801600c:	f7ea fdc4 	bl	8000b98 <__aeabi_d2iz>
 8016010:	4606      	mov	r6, r0
 8016012:	f7ea faa7 	bl	8000564 <__aeabi_i2d>
 8016016:	4b94      	ldr	r3, [pc, #592]	@ (8016268 <__kernel_rem_pio2+0x688>)
 8016018:	2200      	movs	r2, #0
 801601a:	f7ea fb0d 	bl	8000638 <__aeabi_dmul>
 801601e:	460b      	mov	r3, r1
 8016020:	4602      	mov	r2, r0
 8016022:	4629      	mov	r1, r5
 8016024:	4620      	mov	r0, r4
 8016026:	f7ea f94f 	bl	80002c8 <__aeabi_dsub>
 801602a:	f7ea fdb5 	bl	8000b98 <__aeabi_d2iz>
 801602e:	ab0c      	add	r3, sp, #48	@ 0x30
 8016030:	f10b 0b18 	add.w	fp, fp, #24
 8016034:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8016038:	f108 0801 	add.w	r8, r8, #1
 801603c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8016040:	e722      	b.n	8015e88 <__kernel_rem_pio2+0x2a8>
 8016042:	4620      	mov	r0, r4
 8016044:	4629      	mov	r1, r5
 8016046:	f7ea fda7 	bl	8000b98 <__aeabi_d2iz>
 801604a:	ab0c      	add	r3, sp, #48	@ 0x30
 801604c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8016050:	e71a      	b.n	8015e88 <__kernel_rem_pio2+0x2a8>
 8016052:	ab0c      	add	r3, sp, #48	@ 0x30
 8016054:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016058:	f7ea fa84 	bl	8000564 <__aeabi_i2d>
 801605c:	4622      	mov	r2, r4
 801605e:	462b      	mov	r3, r5
 8016060:	f7ea faea 	bl	8000638 <__aeabi_dmul>
 8016064:	4652      	mov	r2, sl
 8016066:	e967 0102 	strd	r0, r1, [r7, #-8]!
 801606a:	465b      	mov	r3, fp
 801606c:	4620      	mov	r0, r4
 801606e:	4629      	mov	r1, r5
 8016070:	f7ea fae2 	bl	8000638 <__aeabi_dmul>
 8016074:	3e01      	subs	r6, #1
 8016076:	4604      	mov	r4, r0
 8016078:	460d      	mov	r5, r1
 801607a:	e718      	b.n	8015eae <__kernel_rem_pio2+0x2ce>
 801607c:	9906      	ldr	r1, [sp, #24]
 801607e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8016082:	9106      	str	r1, [sp, #24]
 8016084:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8016088:	f7ea fad6 	bl	8000638 <__aeabi_dmul>
 801608c:	4602      	mov	r2, r0
 801608e:	460b      	mov	r3, r1
 8016090:	4650      	mov	r0, sl
 8016092:	4659      	mov	r1, fp
 8016094:	f7ea f91a 	bl	80002cc <__adddf3>
 8016098:	3601      	adds	r6, #1
 801609a:	4682      	mov	sl, r0
 801609c:	468b      	mov	fp, r1
 801609e:	9b00      	ldr	r3, [sp, #0]
 80160a0:	429e      	cmp	r6, r3
 80160a2:	dc01      	bgt.n	80160a8 <__kernel_rem_pio2+0x4c8>
 80160a4:	42b5      	cmp	r5, r6
 80160a6:	dae9      	bge.n	801607c <__kernel_rem_pio2+0x49c>
 80160a8:	ab48      	add	r3, sp, #288	@ 0x120
 80160aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80160ae:	e9c5 ab00 	strd	sl, fp, [r5]
 80160b2:	3c01      	subs	r4, #1
 80160b4:	e6ff      	b.n	8015eb6 <__kernel_rem_pio2+0x2d6>
 80160b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80160b8:	2b02      	cmp	r3, #2
 80160ba:	dc0b      	bgt.n	80160d4 <__kernel_rem_pio2+0x4f4>
 80160bc:	2b00      	cmp	r3, #0
 80160be:	dc39      	bgt.n	8016134 <__kernel_rem_pio2+0x554>
 80160c0:	d05d      	beq.n	801617e <__kernel_rem_pio2+0x59e>
 80160c2:	9b02      	ldr	r3, [sp, #8]
 80160c4:	f003 0007 	and.w	r0, r3, #7
 80160c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80160cc:	ecbd 8b02 	vpop	{d8}
 80160d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80160d6:	2b03      	cmp	r3, #3
 80160d8:	d1f3      	bne.n	80160c2 <__kernel_rem_pio2+0x4e2>
 80160da:	9b05      	ldr	r3, [sp, #20]
 80160dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80160e0:	eb0d 0403 	add.w	r4, sp, r3
 80160e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80160e8:	4625      	mov	r5, r4
 80160ea:	46c2      	mov	sl, r8
 80160ec:	f1ba 0f00 	cmp.w	sl, #0
 80160f0:	f1a5 0508 	sub.w	r5, r5, #8
 80160f4:	dc6b      	bgt.n	80161ce <__kernel_rem_pio2+0x5ee>
 80160f6:	4645      	mov	r5, r8
 80160f8:	2d01      	cmp	r5, #1
 80160fa:	f1a4 0408 	sub.w	r4, r4, #8
 80160fe:	f300 8087 	bgt.w	8016210 <__kernel_rem_pio2+0x630>
 8016102:	9c05      	ldr	r4, [sp, #20]
 8016104:	ab48      	add	r3, sp, #288	@ 0x120
 8016106:	441c      	add	r4, r3
 8016108:	2000      	movs	r0, #0
 801610a:	2100      	movs	r1, #0
 801610c:	f1b8 0f01 	cmp.w	r8, #1
 8016110:	f300 809c 	bgt.w	801624c <__kernel_rem_pio2+0x66c>
 8016114:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8016118:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801611c:	f1b9 0f00 	cmp.w	r9, #0
 8016120:	f040 80a6 	bne.w	8016270 <__kernel_rem_pio2+0x690>
 8016124:	9b04      	ldr	r3, [sp, #16]
 8016126:	e9c3 7800 	strd	r7, r8, [r3]
 801612a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801612e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8016132:	e7c6      	b.n	80160c2 <__kernel_rem_pio2+0x4e2>
 8016134:	9d05      	ldr	r5, [sp, #20]
 8016136:	ab48      	add	r3, sp, #288	@ 0x120
 8016138:	441d      	add	r5, r3
 801613a:	4644      	mov	r4, r8
 801613c:	2000      	movs	r0, #0
 801613e:	2100      	movs	r1, #0
 8016140:	2c00      	cmp	r4, #0
 8016142:	da35      	bge.n	80161b0 <__kernel_rem_pio2+0x5d0>
 8016144:	f1b9 0f00 	cmp.w	r9, #0
 8016148:	d038      	beq.n	80161bc <__kernel_rem_pio2+0x5dc>
 801614a:	4602      	mov	r2, r0
 801614c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016150:	9c04      	ldr	r4, [sp, #16]
 8016152:	e9c4 2300 	strd	r2, r3, [r4]
 8016156:	4602      	mov	r2, r0
 8016158:	460b      	mov	r3, r1
 801615a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801615e:	f7ea f8b3 	bl	80002c8 <__aeabi_dsub>
 8016162:	ad4a      	add	r5, sp, #296	@ 0x128
 8016164:	2401      	movs	r4, #1
 8016166:	45a0      	cmp	r8, r4
 8016168:	da2b      	bge.n	80161c2 <__kernel_rem_pio2+0x5e2>
 801616a:	f1b9 0f00 	cmp.w	r9, #0
 801616e:	d002      	beq.n	8016176 <__kernel_rem_pio2+0x596>
 8016170:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016174:	4619      	mov	r1, r3
 8016176:	9b04      	ldr	r3, [sp, #16]
 8016178:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801617c:	e7a1      	b.n	80160c2 <__kernel_rem_pio2+0x4e2>
 801617e:	9c05      	ldr	r4, [sp, #20]
 8016180:	ab48      	add	r3, sp, #288	@ 0x120
 8016182:	441c      	add	r4, r3
 8016184:	2000      	movs	r0, #0
 8016186:	2100      	movs	r1, #0
 8016188:	f1b8 0f00 	cmp.w	r8, #0
 801618c:	da09      	bge.n	80161a2 <__kernel_rem_pio2+0x5c2>
 801618e:	f1b9 0f00 	cmp.w	r9, #0
 8016192:	d002      	beq.n	801619a <__kernel_rem_pio2+0x5ba>
 8016194:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016198:	4619      	mov	r1, r3
 801619a:	9b04      	ldr	r3, [sp, #16]
 801619c:	e9c3 0100 	strd	r0, r1, [r3]
 80161a0:	e78f      	b.n	80160c2 <__kernel_rem_pio2+0x4e2>
 80161a2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80161a6:	f7ea f891 	bl	80002cc <__adddf3>
 80161aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80161ae:	e7eb      	b.n	8016188 <__kernel_rem_pio2+0x5a8>
 80161b0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80161b4:	f7ea f88a 	bl	80002cc <__adddf3>
 80161b8:	3c01      	subs	r4, #1
 80161ba:	e7c1      	b.n	8016140 <__kernel_rem_pio2+0x560>
 80161bc:	4602      	mov	r2, r0
 80161be:	460b      	mov	r3, r1
 80161c0:	e7c6      	b.n	8016150 <__kernel_rem_pio2+0x570>
 80161c2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80161c6:	f7ea f881 	bl	80002cc <__adddf3>
 80161ca:	3401      	adds	r4, #1
 80161cc:	e7cb      	b.n	8016166 <__kernel_rem_pio2+0x586>
 80161ce:	ed95 7b00 	vldr	d7, [r5]
 80161d2:	ed8d 7b00 	vstr	d7, [sp]
 80161d6:	ed95 7b02 	vldr	d7, [r5, #8]
 80161da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80161de:	ec53 2b17 	vmov	r2, r3, d7
 80161e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80161e6:	f7ea f871 	bl	80002cc <__adddf3>
 80161ea:	4602      	mov	r2, r0
 80161ec:	460b      	mov	r3, r1
 80161ee:	4606      	mov	r6, r0
 80161f0:	460f      	mov	r7, r1
 80161f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80161f6:	f7ea f867 	bl	80002c8 <__aeabi_dsub>
 80161fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80161fe:	f7ea f865 	bl	80002cc <__adddf3>
 8016202:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016206:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801620a:	e9c5 6700 	strd	r6, r7, [r5]
 801620e:	e76d      	b.n	80160ec <__kernel_rem_pio2+0x50c>
 8016210:	ed94 7b00 	vldr	d7, [r4]
 8016214:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8016218:	ec51 0b17 	vmov	r0, r1, d7
 801621c:	4652      	mov	r2, sl
 801621e:	465b      	mov	r3, fp
 8016220:	ed8d 7b00 	vstr	d7, [sp]
 8016224:	f7ea f852 	bl	80002cc <__adddf3>
 8016228:	4602      	mov	r2, r0
 801622a:	460b      	mov	r3, r1
 801622c:	4606      	mov	r6, r0
 801622e:	460f      	mov	r7, r1
 8016230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016234:	f7ea f848 	bl	80002c8 <__aeabi_dsub>
 8016238:	4652      	mov	r2, sl
 801623a:	465b      	mov	r3, fp
 801623c:	f7ea f846 	bl	80002cc <__adddf3>
 8016240:	3d01      	subs	r5, #1
 8016242:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8016246:	e9c4 6700 	strd	r6, r7, [r4]
 801624a:	e755      	b.n	80160f8 <__kernel_rem_pio2+0x518>
 801624c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016250:	f7ea f83c 	bl	80002cc <__adddf3>
 8016254:	f108 38ff 	add.w	r8, r8, #4294967295
 8016258:	e758      	b.n	801610c <__kernel_rem_pio2+0x52c>
 801625a:	bf00      	nop
 801625c:	f3af 8000 	nop.w
	...
 8016268:	41700000 	.word	0x41700000
 801626c:	3e700000 	.word	0x3e700000
 8016270:	9b04      	ldr	r3, [sp, #16]
 8016272:	9a04      	ldr	r2, [sp, #16]
 8016274:	601f      	str	r7, [r3, #0]
 8016276:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 801627a:	605c      	str	r4, [r3, #4]
 801627c:	609d      	str	r5, [r3, #8]
 801627e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8016282:	60d3      	str	r3, [r2, #12]
 8016284:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016288:	6110      	str	r0, [r2, #16]
 801628a:	6153      	str	r3, [r2, #20]
 801628c:	e719      	b.n	80160c2 <__kernel_rem_pio2+0x4e2>
 801628e:	bf00      	nop

08016290 <_init>:
 8016290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016292:	bf00      	nop
 8016294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016296:	bc08      	pop	{r3}
 8016298:	469e      	mov	lr, r3
 801629a:	4770      	bx	lr

0801629c <_fini>:
 801629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801629e:	bf00      	nop
 80162a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80162a2:	bc08      	pop	{r3}
 80162a4:	469e      	mov	lr, r3
 80162a6:	4770      	bx	lr
