
PayLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000199f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009c8  08019bc0  08019bc0  0001abc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a588  0801a588  0001c238  2**0
                  CONTENTS
  4 .ARM          00000008  0801a588  0801a588  0001b588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a590  0801a590  0001c238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a590  0801a590  0001b590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801a594  0801a594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000238  20000000  0801a598  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  20000238  0801a7d0  0001c238  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  0801a7d0  0001cde0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001c238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021882  00000000  00000000  0001c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a66  00000000  00000000  0003daea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab0  00000000  00000000  00042550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014dc  00000000  00000000  00044000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029600  00000000  00000000  000454dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027165  00000000  00000000  0006eadc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9068  00000000  00000000  00095c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017eca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008dd0  00000000  00000000  0017ecec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00187abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000238 	.word	0x20000238
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019ba8 	.word	0x08019ba8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000023c 	.word	0x2000023c
 800020c:	08019ba8 	.word	0x08019ba8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint32_t last_freq_check_time = 0;
static float execution_frequency = 0.0f;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f008 fc6d 	bl	8009bdc <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f008 fc49 	bl	8009bdc <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f012 fc10 	bl	8013b86 <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
                HAL_UART_Transmit(&huart2, (uint8_t*)freq_msg, strlen(freq_msg), 100);
            }

*/

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000254 	.word	0x20000254
 80013dc:	20000258 	.word	0x20000258
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f016 faf3 	bl	8017a00 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000258 	.word	0x20000258
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <bme280_config>:

void bme280_config()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <bme280_config+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800149c:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <bme280_config+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f008 fa5d 	bl	8009960 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014a6:	2005      	movs	r0, #5
 80014a8:	f006 fc6a 	bl	8007d80 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014ac:	4b93      	ldr	r3, [pc, #588]	@ (80016fc <bme280_config+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f008 f911 	bl	80096d8 <HAL_I2C_Init>
    HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f006 fc62 	bl	8007d80 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <bme280_config+0x270>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	23c8      	movs	r3, #200	@ 0xc8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2319      	movs	r3, #25
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2288      	movs	r2, #136	@ 0x88
 80014d0:	21ec      	movs	r1, #236	@ 0xec
 80014d2:	f008 fb83 	bl	8009bdc <HAL_I2C_Mem_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <bme280_config+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <bme280_config+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	b212      	sxth	r2, r2
 8001504:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b219      	sxth	r1, r3
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <bme280_config+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800151c:	7abb      	ldrb	r3, [r7, #10]
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <bme280_config+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b219      	sxth	r1, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <bme280_config+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	b219      	sxth	r1, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <bme280_config+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	b212      	sxth	r2, r2
 800155e:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	b219      	sxth	r1, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <bme280_config+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	b212      	sxth	r2, r2
 8001574:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b219      	sxth	r1, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <bme280_config+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	b219      	sxth	r1, r3
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <bme280_config+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <bme280_config+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b212      	sxth	r2, r2
 80015b6:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b219      	sxth	r1, r3
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <bme280_config+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015ce:	7ebb      	ldrb	r3, [r7, #26]
 80015d0:	b219      	sxth	r1, r3
 80015d2:	7efb      	ldrb	r3, [r7, #27]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <bme280_config+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b212      	sxth	r2, r2
 80015e2:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <bme280_config+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	7f3a      	ldrb	r2, [r7, #28]
 80015ec:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <bme280_config+0x270>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2332      	movs	r3, #50	@ 0x32
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2307      	movs	r3, #7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e1      	movs	r2, #225	@ 0xe1
 8001602:	21ec      	movs	r1, #236	@ 0xec
 8001604:	f008 faea 	bl	8009bdc <HAL_I2C_Mem_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800160c:	793b      	ldrb	r3, [r7, #4]
 800160e:	b219      	sxth	r1, r3
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <bme280_config+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	b212      	sxth	r2, r2
 8001620:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <bme280_config+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21b      	sxth	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b219      	sxth	r1, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <bme280_config+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <bme280_config+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	b212      	sxth	r2, r2
 8001660:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001662:	7aba      	ldrb	r2, [r7, #10]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <bme280_config+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b252      	sxtb	r2, r2
 800166c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <bme280_config+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <bme280_config+0x270>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f2      	movs	r2, #242	@ 0xf2
 8001690:	21ec      	movs	r1, #236	@ 0xec
 8001692:	f008 f9a9 	bl	80099e8 <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <bme280_config+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <bme280_config+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <bme280_config+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <bme280_config+0x270>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2332      	movs	r3, #50	@ 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f4      	movs	r2, #244	@ 0xf4
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	f008 f984 	bl	80099e8 <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <bme280_config+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	79db      	ldrb	r3, [r3, #7]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <bme280_config+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e003      	b.n	8001700 <bme280_config+0x274>
 80016f8:	20000258 	.word	0x20000258
 80016fc:	20000254 	.word	0x20000254
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <bme280_config+0x2fc>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	22f5      	movs	r2, #245	@ 0xf5
 8001722:	21ec      	movs	r1, #236	@ 0xec
 8001724:	f008 f960 	bl	80099e8 <HAL_I2C_Mem_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f006 fb24 	bl	8007d80 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e011      	b.n	8001762 <bme280_config+0x2d6>
        bme280_update();
 800173e:	f000 f861 	bl	8001804 <bme280_update>
        base += BME->altitude;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <bme280_config+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f006 fb12 	bl	8007d80 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	ddea      	ble.n	800173e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <bme280_config+0x300>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001770:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001790 <bme280_config+0x304>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 800177c:	f000 f842 	bl	8001804 <bme280_update>

    UNUSED(retVal);
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000254 	.word	0x20000254
 800178c:	20000258 	.word	0x20000258
 8001790:	42480000 	.word	0x42480000

08001794 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <bme280_init+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <bme280_init+0x60>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <bme280_init+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <bme280_init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <bme280_init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
*/


    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <bme280_init+0x60>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22d0      	movs	r2, #208	@ 0xd0
 80017ce:	21ec      	movs	r1, #236	@ 0xec
 80017d0:	f008 fa04 	bl	8009bdc <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b60      	cmp	r3, #96	@ 0x60
 80017d8:	d103      	bne.n	80017e2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <bme280_init+0x6c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80017e0:	e002      	b.n	80017e8 <bme280_init+0x54>
        is_BME_ok = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <bme280_init+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000258 	.word	0x20000258
 80017f4:	20000254 	.word	0x20000254
 80017f8:	20001ad4 	.word	0x20001ad4
 80017fc:	2000025c 	.word	0x2000025c
 8001800:	20001b64 	.word	0x20001b64

08001804 <bme280_update>:

void bme280_update() {
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b0d2      	sub	sp, #328	@ 0x148
 800180a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800180c:	f7ff fd68 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <bme280_update+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 840d 	bne.w	8002038 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <bme280_update+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <bme280_update+0x8c>)
 8001828:	2301      	movs	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800182c:	f006 fa9c 	bl	8007d68 <HAL_GetTick>
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <bme280_update+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <bme280_update+0x88>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	e041      	b.n	80018d0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800184c:	f006 fa8c 	bl	8007d68 <HAL_GetTick>
 8001850:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001854:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <bme280_update+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd12      	ble.n	8001898 <bme280_update+0x94>
 8001872:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <bme280_update+0x88>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	e007      	b.n	800189c <bme280_update+0x98>
 800188c:	20000258 	.word	0x20000258
 8001890:	2000025c 	.word	0x2000025c
 8001894:	00000000 	.word	0x00000000
 8001898:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001894 <bme280_update+0x90>
 800189c:	4bda      	ldr	r3, [pc, #872]	@ (8001c08 <bme280_update+0x404>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80018a4:	4bd8      	ldr	r3, [pc, #864]	@ (8001c08 <bme280_update+0x404>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018ac:	4bd6      	ldr	r3, [pc, #856]	@ (8001c08 <bme280_update+0x404>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c0c <bme280_update+0x408>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80018bc:	4bd2      	ldr	r3, [pc, #840]	@ (8001c08 <bme280_update+0x404>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80018c4:	ee07 2a90 	vmov	s15, r2
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80018d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001c08 <bme280_update+0x404>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80018da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c08 <bme280_update+0x404>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4bc6      	ldr	r3, [pc, #792]	@ (8001c08 <bme280_update+0x404>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	12db      	asrs	r3, r3, #11
 80018fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001904:	111a      	asrs	r2, r3, #4
 8001906:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <bme280_update+0x404>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001914:	111a      	asrs	r2, r3, #4
 8001916:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <bme280_update+0x404>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	131a      	asrs	r2, r3, #12
 8001926:	4bb8      	ldr	r3, [pc, #736]	@ (8001c08 <bme280_update+0x404>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	139b      	asrs	r3, r3, #14
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800193a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800193e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001948:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3380      	adds	r3, #128	@ 0x80
 8001954:	121b      	asrs	r3, r3, #8
 8001956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800195a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <bme280_update+0x404>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c10 <bme280_update+0x40c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001976:	4ba4      	ldr	r3, [pc, #656]	@ (8001c08 <bme280_update+0x404>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001980:	657a      	str	r2, [r7, #84]	@ 0x54
 8001982:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001986:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800199c:	460b      	mov	r3, r1
 800199e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	4613      	mov	r3, r2
 80019a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 80019b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019bc:	fb03 f102 	mul.w	r1, r3, r2
 80019c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d2:	fba3 4503 	umull	r4, r5, r3, r3
 80019d6:	1953      	adds	r3, r2, r5
 80019d8:	461d      	mov	r5, r3
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <bme280_update+0x404>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019f4:	4603      	mov	r3, r0
 80019f6:	fb03 f205 	mul.w	r2, r3, r5
 80019fa:	460b      	mov	r3, r1
 80019fc:	fb04 f303 	mul.w	r3, r4, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4602      	mov	r2, r0
 8001a04:	fba4 1202 	umull	r1, r2, r4, r2
 8001a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a24:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <bme280_update+0x404>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a46:	462a      	mov	r2, r5
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	441a      	add	r2, r3
 8001a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a62:	eb02 030b 	add.w	r3, r2, fp
 8001a66:	469b      	mov	fp, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a74:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a78:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a80:	1814      	adds	r4, r2, r0
 8001a82:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a84:	414b      	adcs	r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a8c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a90:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <bme280_update+0x404>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001aba:	1814      	adds	r4, r2, r0
 8001abc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001abe:	414b      	adcs	r3, r1
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ac6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	fb03 f102 	mul.w	r1, r3, r2
 8001ad6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	18ca      	adds	r2, r1, r3
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae8:	fba3 8903 	umull	r8, r9, r3, r3
 8001aec:	eb02 0309 	add.w	r3, r2, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <bme280_update+0x404>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	fb03 f209 	mul.w	r2, r3, r9
 8001b12:	460b      	mov	r3, r1
 8001b14:	fb08 f303 	mul.w	r3, r8, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	fba8 1202 	umull	r1, r2, r8, r2
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	460a      	mov	r2, r1
 8001b26:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b40:	4623      	mov	r3, r4
 8001b42:	0a18      	lsrs	r0, r3, #8
 8001b44:	462b      	mov	r3, r5
 8001b46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1219      	asrs	r1, r3, #8
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b68:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b76:	4644      	mov	r4, r8
 8001b78:	fb04 f303 	mul.w	r3, r4, r3
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b82:	4644      	mov	r4, r8
 8001b84:	fba3 4304 	umull	r4, r3, r3, r4
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001ba8:	464c      	mov	r4, r9
 8001baa:	0323      	lsls	r3, r4, #12
 8001bac:	4644      	mov	r4, r8
 8001bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bb2:	4644      	mov	r4, r8
 8001bb4:	0322      	lsls	r2, r4, #12
 8001bb6:	1884      	adds	r4, r0, r2
 8001bb8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001bba:	eb41 0303 	adc.w	r3, r1, r3
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001bc8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bcc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001bd0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001bd4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <bme280_update+0x404>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	88db      	ldrh	r3, [r3, #6]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001be8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	e005      	b.n	8001c14 <bme280_update+0x410>
 8001c08:	20000258 	.word	0x20000258
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c20:	460a      	mov	r2, r1
 8001c22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	104a      	asrs	r2, r1, #1
 8001c40:	4629      	mov	r1, r5
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001c48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <bme280_update+0x45a>
        {
            P = 0;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c5c:	e14b      	b.n	8001ef6 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c62:	2100      	movs	r1, #0
 8001c64:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c68:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c78:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8a:	07d0      	lsls	r0, r2, #31
 8001c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c96:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	1891      	adds	r1, r2, r2
 8001ca8:	6239      	str	r1, [r7, #32]
 8001caa:	415b      	adcs	r3, r3
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1851      	adds	r1, r2, r1
 8001cb6:	61b9      	str	r1, [r7, #24]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	414b      	adcs	r3, r1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001cca:	4649      	mov	r1, r9
 8001ccc:	018b      	lsls	r3, r1, #6
 8001cce:	4641      	mov	r1, r8
 8001cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	018a      	lsls	r2, r1, #6
 8001cd8:	4641      	mov	r1, r8
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	462a      	mov	r2, r5
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d22:	4649      	mov	r1, r9
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	4641      	mov	r1, r8
 8001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	008a      	lsls	r2, r1, #2
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	4622      	mov	r2, r4
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3e:	462b      	mov	r3, r5
 8001d40:	460a      	mov	r2, r1
 8001d42:	eb42 0303 	adc.w	r3, r2, r3
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d52:	f7ff f8c7 	bl	8000ee4 <__aeabi_ldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002044 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0b50      	lsrs	r0, r2, #13
 8001d7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d82:	1359      	asrs	r1, r3, #13
 8001d84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d88:	462b      	mov	r3, r5
 8001d8a:	fb00 f203 	mul.w	r2, r0, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	fb03 f301 	mul.w	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4622      	mov	r2, r4
 8001d98:	fba2 1200 	umull	r1, r2, r2, r0
 8001d9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001da0:	460a      	mov	r2, r1
 8001da2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001db0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0b50      	lsrs	r0, r2, #13
 8001dbe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc2:	1359      	asrs	r1, r3, #13
 8001dc4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dc8:	462b      	mov	r3, r5
 8001dca:	fb00 f203 	mul.w	r2, r0, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	fb03 f301 	mul.w	r3, r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	fba2 1200 	umull	r1, r2, r2, r0
 8001ddc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001de0:	460a      	mov	r2, r1
 8001de2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dea:	4413      	add	r3, r2
 8001dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	0e4a      	lsrs	r2, r1, #25
 8001e00:	4629      	mov	r1, r5
 8001e02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e06:	4629      	mov	r1, r5
 8001e08:	164b      	asrs	r3, r1, #25
 8001e0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002044 <bme280_update+0x840>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e24:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba2 1201 	umull	r1, r2, r2, r1
 8001e44:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e48:	460a      	mov	r2, r1
 8001e4a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e52:	4413      	add	r3, r2
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e64:	4621      	mov	r1, r4
 8001e66:	0cca      	lsrs	r2, r1, #19
 8001e68:	4629      	mov	r1, r5
 8001e6a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e6e:	4629      	mov	r1, r5
 8001e70:	14cb      	asrs	r3, r1, #19
 8001e72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e76:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	1884      	adds	r4, r0, r2
 8001e80:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e82:	eb41 0303 	adc.w	r3, r1, r3
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e8c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e90:	4621      	mov	r1, r4
 8001e92:	1889      	adds	r1, r1, r2
 8001e94:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e96:	4629      	mov	r1, r5
 8001e98:	eb43 0101 	adc.w	r1, r3, r1
 8001e9c:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eaa:	4623      	mov	r3, r4
 8001eac:	0a18      	lsrs	r0, r3, #8
 8001eae:	462b      	mov	r3, r5
 8001eb0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1219      	asrs	r1, r3, #8
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <bme280_update+0x840>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	17da      	asrs	r2, r3, #31
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001ed6:	464c      	mov	r4, r9
 8001ed8:	0123      	lsls	r3, r4, #4
 8001eda:	4644      	mov	r4, r8
 8001edc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	0122      	lsls	r2, r4, #4
 8001ee4:	1884      	adds	r4, r0, r2
 8001ee6:	603c      	str	r4, [r7, #0]
 8001ee8:	eb41 0303 	adc.w	r3, r1, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001ef6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001efa:	f7fe ffb5 	bl	8000e68 <__aeabi_l2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <bme280_update+0x844>)
 8001f0c:	f7fe fcbe 	bl	800088c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <bme280_update+0x848>)
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4947      	ldr	r1, [pc, #284]	@ (8002044 <bme280_update+0x840>)
 8001f28:	680c      	ldr	r4, [r1, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe7b 	bl	8000c28 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <bme280_update+0x840>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f44:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001f48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f50:	039a      	lsls	r2, r3, #14
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <bme280_update+0x840>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <bme280_update+0x840>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <bme280_update+0x840>)
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f86:	4611      	mov	r1, r2
 8001f88:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8c:	fb01 f202 	mul.w	r2, r1, r2
 8001f90:	0a92      	lsrs	r2, r2, #10
 8001f92:	492c      	ldr	r1, [pc, #176]	@ (8002044 <bme280_update+0x840>)
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	7f09      	ldrb	r1, [r1, #28]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001fa0:	fb00 f101 	mul.w	r1, r0, r1
 8001fa4:	0ac9      	lsrs	r1, r1, #11
 8001fa6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	0a92      	lsrs	r2, r2, #10
 8001fb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <bme280_update+0x840>)
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	6809      	ldr	r1, [r1, #0]
 8001fba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001fc6:	0b92      	lsrs	r2, r2, #14
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fda:	0bd2      	lsrs	r2, r2, #15
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <bme280_update+0x840>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	7e12      	ldrb	r2, [r2, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ffe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002002:	bf28      	it	cs
 8002004:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	0b1b      	lsrs	r3, r3, #12
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <bme280_update+0x840>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002050 <bme280_update+0x84c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800202a:	f7ff f9dd 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <bme280_update+0x840>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002038:	bf00      	nop
 800203a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002044:	20000258 	.word	0x20000258
 8002048:	40700000 	.word	0x40700000
 800204c:	40590000 	.word	0x40590000
 8002050:	44800000 	.word	0x44800000

08002054 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
	BMI->flags.isAccelDmaComplete = 0;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	709a      	strb	r2, [r3, #2]
	BMI->flags.isGyroDmaComplete = 0;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	711a      	strb	r2, [r3, #4]
	is_time_updated = 0;
 800207e:	4b24      	ldr	r3, [pc, #144]	@ (8002110 <bmi088_init+0xbc>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <bmi088_init+0xc0>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d107      	bne.n	80020a6 <bmi088_init+0x52>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002096:	2101      	movs	r1, #1
 8002098:	2018      	movs	r0, #24
 800209a:	f010 fced 	bl	8012a78 <calloc>
 800209e:	4603      	mov	r3, r0
 80020a0:	461a      	mov	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	619a      	str	r2, [r3, #24]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6918      	ldr	r0, [r3, #16]
 80020aa:	2332      	movs	r3, #50	@ 0x32
 80020ac:	9302      	str	r3, [sp, #8]
 80020ae:	2301      	movs	r3, #1
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2301      	movs	r3, #1
 80020ba:	2200      	movs	r2, #0
 80020bc:	2130      	movs	r1, #48	@ 0x30
 80020be:	f007 fd8d 	bl	8009bdc <HAL_I2C_Mem_Read>
 80020c2:	4603      	mov	r3, r0
 80020c4:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6918      	ldr	r0, [r3, #16]
 80020ca:	2332      	movs	r3, #50	@ 0x32
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	2301      	movs	r3, #1
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	3301      	adds	r3, #1
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2301      	movs	r3, #1
 80020dc:	2200      	movs	r2, #0
 80020de:	21d0      	movs	r1, #208	@ 0xd0
 80020e0:	f007 fd7c 	bl	8009bdc <HAL_I2C_Mem_Read>
 80020e4:	4603      	mov	r3, r0
 80020e6:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80020e8:	7b3b      	ldrb	r3, [r7, #12]
 80020ea:	2b1e      	cmp	r3, #30
 80020ec:	d003      	beq.n	80020f6 <bmi088_init+0xa2>
	{
		ret_val = ret_val | 0x01;
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d003      	beq.n	8002104 <bmi088_init+0xb0>
	{
		ret_val = ret_val | 0x02;
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	f043 0302 	orr.w	r3, r3, #2
 8002102:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 8002104:	7bfb      	ldrb	r3, [r7, #15]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000025d 	.word	0x2000025d
 8002114:	2000025e 	.word	0x2000025e

08002118 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af04      	add	r7, sp, #16
 800211e:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8002126:	4618      	mov	r0, r3
 8002128:	f006 fb87 	bl	800883a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002132:	4618      	mov	r0, r3
 8002134:	f006 fb81 	bl	800883a <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 800213c:	2301      	movs	r3, #1
 800213e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6918      	ldr	r0, [r3, #16]
 8002144:	2364      	movs	r3, #100	@ 0x64
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	2301      	movs	r3, #1
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f107 030c 	add.w	r3, r7, #12
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	227c      	movs	r2, #124	@ 0x7c
 8002156:	2130      	movs	r1, #48	@ 0x30
 8002158:	f007 fc46 	bl	80099e8 <HAL_I2C_Mem_Write>
 800215c:	4603      	mov	r3, r0
 800215e:	461a      	mov	r2, r3
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	4313      	orrs	r3, r2
 8002164:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6918      	ldr	r0, [r3, #16]
 800216e:	2364      	movs	r3, #100	@ 0x64
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2301      	movs	r3, #1
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	f107 030c 	add.w	r3, r7, #12
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2301      	movs	r3, #1
 800217e:	227d      	movs	r2, #125	@ 0x7d
 8002180:	2130      	movs	r1, #48	@ 0x30
 8002182:	f007 fc31 	bl	80099e8 <HAL_I2C_Mem_Write>
 8002186:	4603      	mov	r3, r0
 8002188:	461a      	mov	r2, r3
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	4313      	orrs	r3, r2
 800218e:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 8002190:	2014      	movs	r0, #20
 8002192:	f005 fdf5 	bl	8007d80 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002196:	23b6      	movs	r3, #182	@ 0xb6
 8002198:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6918      	ldr	r0, [r3, #16]
 800219e:	2364      	movs	r3, #100	@ 0x64
 80021a0:	9302      	str	r3, [sp, #8]
 80021a2:	2301      	movs	r3, #1
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	227e      	movs	r2, #126	@ 0x7e
 80021b0:	2130      	movs	r1, #48	@ 0x30
 80021b2:	f007 fc19 	bl	80099e8 <HAL_I2C_Mem_Write>
 80021b6:	4603      	mov	r3, r0
 80021b8:	461a      	mov	r2, r3
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	4313      	orrs	r3, r2
 80021be:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d002      	beq.n	80021cc <bmi088_config+0xb4>
 80021c6:	4bb4      	ldr	r3, [pc, #720]	@ (8002498 <bmi088_config+0x380>)
 80021c8:	22a4      	movs	r2, #164	@ 0xa4
 80021ca:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021cc:	200a      	movs	r0, #10
 80021ce:	f005 fdd7 	bl	8007d80 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80021d2:	23b0      	movs	r3, #176	@ 0xb0
 80021d4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6918      	ldr	r0, [r3, #16]
 80021da:	2364      	movs	r3, #100	@ 0x64
 80021dc:	9302      	str	r3, [sp, #8]
 80021de:	2301      	movs	r3, #1
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	f107 030c 	add.w	r3, r7, #12
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	227e      	movs	r2, #126	@ 0x7e
 80021ec:	2130      	movs	r1, #48	@ 0x30
 80021ee:	f007 fbfb 	bl	80099e8 <HAL_I2C_Mem_Write>
 80021f2:	4603      	mov	r3, r0
 80021f4:	461a      	mov	r2, r3
 80021f6:	7bfb      	ldrb	r3, [r7, #15]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <bmi088_config+0xf0>
 8002202:	4ba5      	ldr	r3, [pc, #660]	@ (8002498 <bmi088_config+0x380>)
 8002204:	22a9      	movs	r2, #169	@ 0xa9
 8002206:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002208:	200a      	movs	r0, #10
 800220a:	f005 fdb9 	bl	8007d80 <HAL_Delay>

	buf[0] = GYRO_RESET;
 800220e:	23b6      	movs	r3, #182	@ 0xb6
 8002210:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6918      	ldr	r0, [r3, #16]
 8002216:	2364      	movs	r3, #100	@ 0x64
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	2301      	movs	r3, #1
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2301      	movs	r3, #1
 8002226:	2214      	movs	r2, #20
 8002228:	21d0      	movs	r1, #208	@ 0xd0
 800222a:	f007 fbdd 	bl	80099e8 <HAL_I2C_Mem_Write>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	4313      	orrs	r3, r2
 8002236:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002238:	7bfb      	ldrb	r3, [r7, #15]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <bmi088_config+0x12c>
 800223e:	4b96      	ldr	r3, [pc, #600]	@ (8002498 <bmi088_config+0x380>)
 8002240:	22ae      	movs	r2, #174	@ 0xae
 8002242:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002244:	200a      	movs	r0, #10
 8002246:	f005 fd9b 	bl	8007d80 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7b9b      	ldrb	r3, [r3, #14]
 800224e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6918      	ldr	r0, [r3, #16]
 8002254:	2364      	movs	r3, #100	@ 0x64
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	2301      	movs	r3, #1
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	f107 030c 	add.w	r3, r7, #12
 8002260:	9300      	str	r3, [sp, #0]
 8002262:	2301      	movs	r3, #1
 8002264:	220f      	movs	r2, #15
 8002266:	21d0      	movs	r1, #208	@ 0xd0
 8002268:	f007 fbbe 	bl	80099e8 <HAL_I2C_Mem_Write>
 800226c:	4603      	mov	r3, r0
 800226e:	461a      	mov	r2, r3
 8002270:	7bfb      	ldrb	r3, [r7, #15]
 8002272:	4313      	orrs	r3, r2
 8002274:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <bmi088_config+0x16a>
 800227c:	4b86      	ldr	r3, [pc, #536]	@ (8002498 <bmi088_config+0x380>)
 800227e:	22b4      	movs	r2, #180	@ 0xb4
 8002280:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7b5b      	ldrb	r3, [r3, #13]
 8002286:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6918      	ldr	r0, [r3, #16]
 800228c:	2314      	movs	r3, #20
 800228e:	9302      	str	r3, [sp, #8]
 8002290:	2301      	movs	r3, #1
 8002292:	9301      	str	r3, [sp, #4]
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	2301      	movs	r3, #1
 800229c:	2210      	movs	r2, #16
 800229e:	21d0      	movs	r1, #208	@ 0xd0
 80022a0:	f007 fba2 	bl	80099e8 <HAL_I2C_Mem_Write>
 80022a4:	4603      	mov	r3, r0
 80022a6:	461a      	mov	r2, r3
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <bmi088_config+0x1a2>
 80022b4:	4b78      	ldr	r3, [pc, #480]	@ (8002498 <bmi088_config+0x380>)
 80022b6:	22b8      	movs	r2, #184	@ 0xb8
 80022b8:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7b1b      	ldrb	r3, [r3, #12]
 80022be:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6918      	ldr	r0, [r3, #16]
 80022c4:	2314      	movs	r3, #20
 80022c6:	9302      	str	r3, [sp, #8]
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2301      	movs	r3, #1
 80022d4:	2211      	movs	r2, #17
 80022d6:	21d0      	movs	r1, #208	@ 0xd0
 80022d8:	f007 fb86 	bl	80099e8 <HAL_I2C_Mem_Write>
 80022dc:	4603      	mov	r3, r0
 80022de:	461a      	mov	r2, r3
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <bmi088_config+0x1da>
 80022ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002498 <bmi088_config+0x380>)
 80022ee:	22bc      	movs	r2, #188	@ 0xbc
 80022f0:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80022f2:	2014      	movs	r0, #20
 80022f4:	f005 fd44 	bl	8007d80 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6918      	ldr	r0, [r3, #16]
 8002300:	2314      	movs	r3, #20
 8002302:	9302      	str	r3, [sp, #8]
 8002304:	2301      	movs	r3, #1
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	f107 030c 	add.w	r3, r7, #12
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2301      	movs	r3, #1
 8002310:	2215      	movs	r2, #21
 8002312:	21d0      	movs	r1, #208	@ 0xd0
 8002314:	f007 fb68 	bl	80099e8 <HAL_I2C_Mem_Write>
 8002318:	4603      	mov	r3, r0
 800231a:	461a      	mov	r2, r3
 800231c:	7bfb      	ldrb	r3, [r7, #15]
 800231e:	4313      	orrs	r3, r2
 8002320:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <bmi088_config+0x216>
 8002328:	4b5b      	ldr	r3, [pc, #364]	@ (8002498 <bmi088_config+0x380>)
 800232a:	22c2      	movs	r2, #194	@ 0xc2
 800232c:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800232e:	2305      	movs	r3, #5
 8002330:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6918      	ldr	r0, [r3, #16]
 8002336:	2314      	movs	r3, #20
 8002338:	9302      	str	r3, [sp, #8]
 800233a:	2301      	movs	r3, #1
 800233c:	9301      	str	r3, [sp, #4]
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	2216      	movs	r2, #22
 8002348:	21d0      	movs	r1, #208	@ 0xd0
 800234a:	f007 fb4d 	bl	80099e8 <HAL_I2C_Mem_Write>
 800234e:	4603      	mov	r3, r0
 8002350:	461a      	mov	r2, r3
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	4313      	orrs	r3, r2
 8002356:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <bmi088_config+0x24c>
 800235e:	4b4e      	ldr	r3, [pc, #312]	@ (8002498 <bmi088_config+0x380>)
 8002360:	22c6      	movs	r2, #198	@ 0xc6
 8002362:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002364:	2381      	movs	r3, #129	@ 0x81
 8002366:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6918      	ldr	r0, [r3, #16]
 800236c:	2314      	movs	r3, #20
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	2301      	movs	r3, #1
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	f107 030c 	add.w	r3, r7, #12
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	2301      	movs	r3, #1
 800237c:	2218      	movs	r2, #24
 800237e:	21d0      	movs	r1, #208	@ 0xd0
 8002380:	f007 fb32 	bl	80099e8 <HAL_I2C_Mem_Write>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	4313      	orrs	r3, r2
 800238c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d002      	beq.n	800239a <bmi088_config+0x282>
 8002394:	4b40      	ldr	r3, [pc, #256]	@ (8002498 <bmi088_config+0x380>)
 8002396:	22ca      	movs	r2, #202	@ 0xca
 8002398:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 800239a:	2304      	movs	r3, #4
 800239c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6918      	ldr	r0, [r3, #16]
 80023a2:	2314      	movs	r3, #20
 80023a4:	9302      	str	r3, [sp, #8]
 80023a6:	2301      	movs	r3, #1
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2301      	movs	r3, #1
 80023b2:	227d      	movs	r2, #125	@ 0x7d
 80023b4:	2130      	movs	r1, #48	@ 0x30
 80023b6:	f007 fb17 	bl	80099e8 <HAL_I2C_Mem_Write>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <bmi088_config+0x2b8>
 80023ca:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <bmi088_config+0x380>)
 80023cc:	22cf      	movs	r2, #207	@ 0xcf
 80023ce:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023d0:	2008      	movs	r0, #8
 80023d2:	f005 fcd5 	bl	8007d80 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7a1b      	ldrb	r3, [r3, #8]
 80023da:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6918      	ldr	r0, [r3, #16]
 80023e0:	2314      	movs	r3, #20
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2301      	movs	r3, #1
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	f107 030c 	add.w	r3, r7, #12
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	2301      	movs	r3, #1
 80023f0:	227c      	movs	r2, #124	@ 0x7c
 80023f2:	2130      	movs	r1, #48	@ 0x30
 80023f4:	f007 faf8 	bl	80099e8 <HAL_I2C_Mem_Write>
 80023f8:	4603      	mov	r3, r0
 80023fa:	461a      	mov	r2, r3
 80023fc:	7bfb      	ldrb	r3, [r7, #15]
 80023fe:	4313      	orrs	r3, r2
 8002400:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d002      	beq.n	800240e <bmi088_config+0x2f6>
 8002408:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <bmi088_config+0x380>)
 800240a:	22d4      	movs	r2, #212	@ 0xd4
 800240c:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 800240e:	2008      	movs	r0, #8
 8002410:	f005 fcb6 	bl	8007d80 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7a9b      	ldrb	r3, [r3, #10]
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	b25a      	sxtb	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7adb      	ldrb	r3, [r3, #11]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	4313      	orrs	r3, r2
 8002424:	b25b      	sxtb	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6918      	ldr	r0, [r3, #16]
 800242e:	2314      	movs	r3, #20
 8002430:	9302      	str	r3, [sp, #8]
 8002432:	2301      	movs	r3, #1
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2301      	movs	r3, #1
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	2130      	movs	r1, #48	@ 0x30
 8002442:	f007 fad1 	bl	80099e8 <HAL_I2C_Mem_Write>
 8002446:	4603      	mov	r3, r0
 8002448:	461a      	mov	r2, r3
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	4313      	orrs	r3, r2
 800244e:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <bmi088_config+0x344>
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <bmi088_config+0x380>)
 8002458:	22d9      	movs	r2, #217	@ 0xd9
 800245a:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7a5b      	ldrb	r3, [r3, #9]
 8002460:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6918      	ldr	r0, [r3, #16]
 8002466:	2314      	movs	r3, #20
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	2301      	movs	r3, #1
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	f107 030c 	add.w	r3, r7, #12
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	2301      	movs	r3, #1
 8002476:	2241      	movs	r2, #65	@ 0x41
 8002478:	2130      	movs	r1, #48	@ 0x30
 800247a:	f007 fab5 	bl	80099e8 <HAL_I2C_Mem_Write>
 800247e:	4603      	mov	r3, r0
 8002480:	461a      	mov	r2, r3
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	4313      	orrs	r3, r2
 8002486:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <bmi088_config+0x384>
 800248e:	4b02      	ldr	r3, [pc, #8]	@ (8002498 <bmi088_config+0x380>)
 8002490:	22dd      	movs	r2, #221	@ 0xdd
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e002      	b.n	800249c <bmi088_config+0x384>
 8002496:	bf00      	nop
 8002498:	20000260 	.word	0x20000260

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 800249c:	230a      	movs	r3, #10
 800249e:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6918      	ldr	r0, [r3, #16]
 80024a4:	2314      	movs	r3, #20
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	2301      	movs	r3, #1
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	f107 030c 	add.w	r3, r7, #12
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	2253      	movs	r2, #83	@ 0x53
 80024b6:	2130      	movs	r1, #48	@ 0x30
 80024b8:	f007 fa96 	bl	80099e8 <HAL_I2C_Mem_Write>
 80024bc:	4603      	mov	r3, r0
 80024be:	461a      	mov	r2, r3
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80024c6:	2304      	movs	r3, #4
 80024c8:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6918      	ldr	r0, [r3, #16]
 80024ce:	2314      	movs	r3, #20
 80024d0:	9302      	str	r3, [sp, #8]
 80024d2:	2301      	movs	r3, #1
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2301      	movs	r3, #1
 80024de:	2258      	movs	r2, #88	@ 0x58
 80024e0:	2130      	movs	r1, #48	@ 0x30
 80024e2:	f007 fa81 	bl	80099e8 <HAL_I2C_Mem_Write>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f006 f991 	bl	800881e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8002502:	4618      	mov	r0, r3
 8002504:	f006 f98b 	bl	800881e <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 8002508:	2046      	movs	r0, #70	@ 0x46
 800250a:	f005 fc39 	bl	8007d80 <HAL_Delay>
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop

08002518 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b08a      	sub	sp, #40	@ 0x28
 800251c:	af02      	add	r7, sp, #8
 800251e:	6078      	str	r0, [r7, #4]
	if(BMI->flags.isAccelUpdated && !BMI->flags.isDmaTransferActive)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	785b      	ldrb	r3, [r3, #1]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d01d      	beq.n	8002564 <bmi088_update+0x4c>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	791b      	ldrb	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d119      	bne.n	8002564 <bmi088_update+0x4c>
	{
		// Start DMA transfer for accelerometer data (X,Y,Z + sensor time)
		BMI->flags.isDmaTransferActive = 1;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	711a      	strb	r2, [r3, #4]
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_accel_data, 9);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6918      	ldr	r0, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3384      	adds	r3, #132	@ 0x84
 800253e:	2209      	movs	r2, #9
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	2301      	movs	r3, #1
 8002546:	2212      	movs	r2, #18
 8002548:	2130      	movs	r1, #48	@ 0x30
 800254a:	f007 fd79 	bl	800a040 <HAL_I2C_Mem_Read_DMA>
 800254e:	4603      	mov	r3, r0
 8002550:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 8002552:	7ffb      	ldrb	r3, [r7, #31]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d005      	beq.n	8002564 <bmi088_update+0x4c>
		{
			BMI->flags.isDmaTransferActive = 0;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	711a      	strb	r2, [r3, #4]
			BMI->flags.isAccelUpdated = 0;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	705a      	strb	r2, [r3, #1]
		}
	}

	if(BMI->flags.isGyroUpdated && !BMI->flags.isDmaTransferActive && is_time_updated)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d030      	beq.n	80025ce <bmi088_update+0xb6>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d12c      	bne.n	80025ce <bmi088_update+0xb6>
 8002574:	4b12      	ldr	r3, [pc, #72]	@ (80025c0 <bmi088_update+0xa8>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d027      	beq.n	80025ce <bmi088_update+0xb6>
	{
		if(is_starded){
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <bmi088_update+0xac>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01f      	beq.n	80025c8 <bmi088_update+0xb0>
			// Start DMA transfer for gyroscope data
			BMI->flags.isDmaTransferActive = 1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	711a      	strb	r2, [r3, #4]
			HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, BMI->datas.raw_gyro_data, 6);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6918      	ldr	r0, [r3, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	338d      	adds	r3, #141	@ 0x8d
 8002596:	2206      	movs	r2, #6
 8002598:	9201      	str	r2, [sp, #4]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2301      	movs	r3, #1
 800259e:	2202      	movs	r2, #2
 80025a0:	21d0      	movs	r1, #208	@ 0xd0
 80025a2:	f007 fd4d 	bl	800a040 <HAL_I2C_Mem_Read_DMA>
 80025a6:	4603      	mov	r3, r0
 80025a8:	77bb      	strb	r3, [r7, #30]
			if(ret != HAL_OK)
 80025aa:	7fbb      	ldrb	r3, [r7, #30]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00e      	beq.n	80025ce <bmi088_update+0xb6>
			{
				BMI->flags.isDmaTransferActive = 0;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	711a      	strb	r2, [r3, #4]
				BMI->flags.isGyroUpdated = 0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e007      	b.n	80025ce <bmi088_update+0xb6>
 80025be:	bf00      	nop
 80025c0:	2000025d 	.word	0x2000025d
 80025c4:	2000025e 	.word	0x2000025e
			}
		}
		else
		{
			BMI->flags.isGyroUpdated = 0;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
		}
	}

	// Process accelerometer data if DMA transfer is complete
	if(BMI->flags.isAccelDmaComplete)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	789b      	ldrb	r3, [r3, #2]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 81c3 	beq.w	800295e <bmi088_update+0x446>
	{
		uint32_t sensorTime = (BMI->datas.raw_accel_data[8] << 16) | (BMI->datas.raw_accel_data[7] << 8) | BMI->datas.raw_accel_data[6];
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 80025de:	041a      	lsls	r2, r3, #16
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 308b 	ldrb.w	r3, [r3, #139]	@ 0x8b
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	4313      	orrs	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	f892 208a 	ldrb.w	r2, [r2, #138]	@ 0x8a
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
		BMI->datas.current_time = (float)sensorTime * 39.0625 / 1000000.0;
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	ee07 3a90 	vmov	s15, r3
 80025fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025fe:	ee17 0a90 	vmov	r0, s15
 8002602:	f7fd ffc1 	bl	8000588 <__aeabi_f2d>
 8002606:	a3cb      	add	r3, pc, #812	@ (adr r3, 8002934 <bmi088_update+0x41c>)
 8002608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260c:	f7fe f814 	bl	8000638 <__aeabi_dmul>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	a3c8      	add	r3, pc, #800	@ (adr r3, 800293c <bmi088_update+0x424>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fe f935 	bl	800088c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4610      	mov	r0, r2
 8002628:	4619      	mov	r1, r3
 800262a:	f7fe fafd 	bl	8000c28 <__aeabi_d2f>
 800262e:	4602      	mov	r2, r0
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	66da      	str	r2, [r3, #108]	@ 0x6c

		int16_t acc_x_16 = (BMI->datas.raw_accel_data[1] << 8) | BMI->datas.raw_accel_data[0];
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3085 	ldrb.w	r3, [r3, #133]	@ 0x85
 800263a:	021b      	lsls	r3, r3, #8
 800263c:	b21a      	sxth	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002644:	b21b      	sxth	r3, r3
 8002646:	4313      	orrs	r3, r2
 8002648:	82fb      	strh	r3, [r7, #22]
		int16_t acc_y_16 = (BMI->datas.raw_accel_data[3] << 8) | BMI->datas.raw_accel_data[2];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 3087 	ldrb.w	r3, [r3, #135]	@ 0x87
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b21a      	sxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 3086 	ldrb.w	r3, [r3, #134]	@ 0x86
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	82bb      	strh	r3, [r7, #20]
		int16_t acc_z_16 = (BMI->datas.raw_accel_data[5] << 8) | BMI->datas.raw_accel_data[4];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8002666:	021b      	lsls	r3, r3, #8
 8002668:	b21a      	sxth	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8002670:	b21b      	sxth	r3, r3
 8002672:	4313      	orrs	r3, r2
 8002674:	827b      	strh	r3, [r7, #18]

		BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 8002676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002682:	ee17 0a90 	vmov	r0, s15
 8002686:	f7fd ff7f 	bl	8000588 <__aeabi_f2d>
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4ba2      	ldr	r3, [pc, #648]	@ (8002918 <bmi088_update+0x400>)
 8002690:	f7fe f8fc 	bl	800088c <__aeabi_ddiv>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	4b9e      	ldr	r3, [pc, #632]	@ (800291c <bmi088_update+0x404>)
 80026a2:	f7fd ffc9 	bl	8000638 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4b9b      	ldr	r3, [pc, #620]	@ (8002920 <bmi088_update+0x408>)
 80026b4:	f7fd ffc0 	bl	8000638 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	461d      	mov	r5, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7a5b      	ldrb	r3, [r3, #9]
 80026c4:	3301      	adds	r3, #1
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ce:	ee17 0a90 	vmov	r0, s15
 80026d2:	f7fd ff59 	bl	8000588 <__aeabi_f2d>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	ec43 2b11 	vmov	d1, r2, r3
 80026de:	ed9f 0b8a 	vldr	d0, [pc, #552]	@ 8002908 <bmi088_update+0x3f0>
 80026e2:	f015 f98d 	bl	8017a00 <pow>
 80026e6:	ec53 2b10 	vmov	r2, r3, d0
 80026ea:	4620      	mov	r0, r4
 80026ec:	4629      	mov	r1, r5
 80026ee:	f7fd ffa3 	bl	8000638 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b89      	ldr	r3, [pc, #548]	@ (8002924 <bmi088_update+0x40c>)
 8002700:	f7fd fde4 	bl	80002cc <__adddf3>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	a380      	add	r3, pc, #512	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 800270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002712:	f7fd ff91 	bl	8000638 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4610      	mov	r0, r2
 800271c:	4619      	mov	r1, r3
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	4b7e      	ldr	r3, [pc, #504]	@ (800291c <bmi088_update+0x404>)
 8002724:	f7fe f8b2 	bl	800088c <__aeabi_ddiv>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	f7fe fa7a 	bl	8000c28 <__aeabi_d2f>
 8002734:	4602      	mov	r2, r0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	65da      	str	r2, [r3, #92]	@ 0x5c
		BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 800273a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002746:	ee17 0a90 	vmov	r0, s15
 800274a:	f7fd ff1d 	bl	8000588 <__aeabi_f2d>
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b71      	ldr	r3, [pc, #452]	@ (8002918 <bmi088_update+0x400>)
 8002754:	f7fe f89a 	bl	800088c <__aeabi_ddiv>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	4b6d      	ldr	r3, [pc, #436]	@ (800291c <bmi088_update+0x404>)
 8002766:	f7fd ff67 	bl	8000638 <__aeabi_dmul>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4610      	mov	r0, r2
 8002770:	4619      	mov	r1, r3
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	4b6a      	ldr	r3, [pc, #424]	@ (8002920 <bmi088_update+0x408>)
 8002778:	f7fd ff5e 	bl	8000638 <__aeabi_dmul>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7a5b      	ldrb	r3, [r3, #9]
 8002788:	3301      	adds	r3, #1
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002792:	ee17 0a90 	vmov	r0, s15
 8002796:	f7fd fef7 	bl	8000588 <__aeabi_f2d>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	ec43 2b11 	vmov	d1, r2, r3
 80027a2:	ed9f 0b59 	vldr	d0, [pc, #356]	@ 8002908 <bmi088_update+0x3f0>
 80027a6:	f015 f92b 	bl	8017a00 <pow>
 80027aa:	ec53 2b10 	vmov	r2, r3, d0
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b59      	ldr	r3, [pc, #356]	@ (8002928 <bmi088_update+0x410>)
 80027c4:	f7fd fd82 	bl	80002cc <__adddf3>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff2f 	bl	8000638 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4610      	mov	r0, r2
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b4d      	ldr	r3, [pc, #308]	@ (800291c <bmi088_update+0x404>)
 80027e8:	f7fe f850 	bl	800088c <__aeabi_ddiv>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe fa18 	bl	8000c28 <__aeabi_d2f>
 80027f8:	4602      	mov	r2, r0
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	661a      	str	r2, [r3, #96]	@ 0x60
		BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 80027fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800280a:	ee17 0a90 	vmov	r0, s15
 800280e:	f7fd febb 	bl	8000588 <__aeabi_f2d>
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b40      	ldr	r3, [pc, #256]	@ (8002918 <bmi088_update+0x400>)
 8002818:	f7fe f838 	bl	800088c <__aeabi_ddiv>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	4b3c      	ldr	r3, [pc, #240]	@ (800291c <bmi088_update+0x404>)
 800282a:	f7fd ff05 	bl	8000638 <__aeabi_dmul>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	4b39      	ldr	r3, [pc, #228]	@ (8002920 <bmi088_update+0x408>)
 800283c:	f7fd fefc 	bl	8000638 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4614      	mov	r4, r2
 8002846:	461d      	mov	r5, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	7a5b      	ldrb	r3, [r3, #9]
 800284c:	3301      	adds	r3, #1
 800284e:	ee07 3a90 	vmov	s15, r3
 8002852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002856:	ee17 0a90 	vmov	r0, s15
 800285a:	f7fd fe95 	bl	8000588 <__aeabi_f2d>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	ec43 2b11 	vmov	d1, r2, r3
 8002866:	ed9f 0b28 	vldr	d0, [pc, #160]	@ 8002908 <bmi088_update+0x3f0>
 800286a:	f015 f8c9 	bl	8017a00 <pow>
 800286e:	ec53 2b10 	vmov	r2, r3, d0
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <bmi088_update+0x40c>)
 8002888:	f7fd fd1e 	bl	80002c8 <__aeabi_dsub>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	a31e      	add	r3, pc, #120	@ (adr r3, 8002910 <bmi088_update+0x3f8>)
 8002896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289a:	f7fd fecd 	bl	8000638 <__aeabi_dmul>
 800289e:	4602      	mov	r2, r0
 80028a0:	460b      	mov	r3, r1
 80028a2:	4610      	mov	r0, r2
 80028a4:	4619      	mov	r1, r3
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <bmi088_update+0x404>)
 80028ac:	f7fd ffee 	bl	800088c <__aeabi_ddiv>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f9b6 	bl	8000c28 <__aeabi_d2f>
 80028bc:	4602      	mov	r2, r0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	665a      	str	r2, [r3, #100]	@ 0x64

		if(is_starded)
 80028c2:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <bmi088_update+0x414>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03b      	beq.n	8002944 <bmi088_update+0x42c>
		{
			BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80028d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	d502      	bpl.n	80028ec <bmi088_update+0x3d4>
 80028e6:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8002930 <bmi088_update+0x418>
 80028ea:	e007      	b.n	80028fc <bmi088_update+0x3e4>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	edd3 7a1c 	vldr	s15, [r3, #112]	@ 0x70
 80028f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	edc3 7a1d 	vstr	s15, [r3, #116]	@ 0x74
 8002902:	e022      	b.n	800294a <bmi088_update+0x432>
 8002904:	f3af 8000 	nop.w
 8002908:	00000000 	.word	0x00000000
 800290c:	40000000 	.word	0x40000000
 8002910:	51eb851f 	.word	0x51eb851f
 8002914:	40239eb8 	.word	0x40239eb8
 8002918:	40e00000 	.word	0x40e00000
 800291c:	408f4000 	.word	0x408f4000
 8002920:	3ff80000 	.word	0x3ff80000
 8002924:	40100000 	.word	0x40100000
 8002928:	402e0000 	.word	0x402e0000
 800292c:	2000025e 	.word	0x2000025e
	...
 8002938:	40438800 	.word	0x40438800
 800293c:	00000000 	.word	0x00000000
 8002940:	412e8480 	.word	0x412e8480
		}
		else
		{
			is_starded = 1;
 8002944:	4bac      	ldr	r3, [pc, #688]	@ (8002bf8 <bmi088_update+0x6e0>)
 8002946:	2201      	movs	r2, #1
 8002948:	701a      	strb	r2, [r3, #0]
		}

		BMI->datas.last_time = BMI->datas.current_time;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	671a      	str	r2, [r3, #112]	@ 0x70
		BMI->flags.isAccelDmaComplete = 0;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	709a      	strb	r2, [r3, #2]
		is_time_updated = 1;
 8002958:	4ba8      	ldr	r3, [pc, #672]	@ (8002bfc <bmi088_update+0x6e4>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]

		// Sıcaklık okuma kaldırıldı - sadece ivme ve gyro verisi kullanılacak
	}

	// Process gyroscope data if DMA transfer is complete
	if(BMI->flags.isGyroDmaComplete && is_time_updated)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	78db      	ldrb	r3, [r3, #3]
 8002962:	2b00      	cmp	r3, #0
 8002964:	f000 813b 	beq.w	8002bde <bmi088_update+0x6c6>
 8002968:	4ba4      	ldr	r3, [pc, #656]	@ (8002bfc <bmi088_update+0x6e4>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8135 	beq.w	8002bde <bmi088_update+0x6c6>
	{
		int16_t gyro_x_16 = (BMI->datas.raw_gyro_data[1] << 8) | BMI->datas.raw_gyro_data[0];
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 308e 	ldrb.w	r3, [r3, #142]	@ 0x8e
 800297a:	021b      	lsls	r3, r3, #8
 800297c:	b21a      	sxth	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8002984:	b21b      	sxth	r3, r3
 8002986:	4313      	orrs	r3, r2
 8002988:	823b      	strh	r3, [r7, #16]
		int16_t gyro_y_16 = (BMI->datas.raw_gyro_data[3] << 8) | BMI->datas.raw_gyro_data[2];
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	b21a      	sxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 308f 	ldrb.w	r3, [r3, #143]	@ 0x8f
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	81fb      	strh	r3, [r7, #14]
		int16_t gyro_z_16 = (BMI->datas.raw_gyro_data[5] << 8) | BMI->datas.raw_gyro_data[4];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3092 	ldrb.w	r3, [r3, #146]	@ 0x92
 80029a6:	021b      	lsls	r3, r3, #8
 80029a8:	b21a      	sxth	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80029b0:	b21b      	sxth	r3, r3
 80029b2:	4313      	orrs	r3, r2
 80029b4:	81bb      	strh	r3, [r7, #12]

		BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80029b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029c2:	ee17 0a90 	vmov	r0, s15
 80029c6:	f7fd fddf 	bl	8000588 <__aeabi_f2d>
 80029ca:	a387      	add	r3, pc, #540	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 80029cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d0:	f7fd ff5c 	bl	800088c <__aeabi_ddiv>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7b9b      	ldrb	r3, [r3, #14]
 80029e0:	461a      	mov	r2, r3
 80029e2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029e6:	4113      	asrs	r3, r2
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fdc8 	bl	8000588 <__aeabi_f2d>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4620      	mov	r0, r4
 80029fe:	4629      	mov	r1, r5
 8002a00:	f7fd fe1a 	bl	8000638 <__aeabi_dmul>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4614      	mov	r4, r2
 8002a0a:	461d      	mov	r5, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fdb8 	bl	8000588 <__aeabi_f2d>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fc52 	bl	80002c8 <__aeabi_dsub>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	a370      	add	r3, pc, #448	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a32:	f7fd fe01 	bl	8000638 <__aeabi_dmul>
 8002a36:	4602      	mov	r2, r0
 8002a38:	460b      	mov	r3, r1
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	f7fe f8f3 	bl	8000c28 <__aeabi_d2f>
 8002a42:	4602      	mov	r2, r0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	61da      	str	r2, [r3, #28]
		BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002a4c:	ee07 3a90 	vmov	s15, r3
 8002a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a54:	ee17 0a90 	vmov	r0, s15
 8002a58:	f7fd fd96 	bl	8000588 <__aeabi_f2d>
 8002a5c:	a362      	add	r3, pc, #392	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd ff13 	bl	800088c <__aeabi_ddiv>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	461d      	mov	r5, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	7b9b      	ldrb	r3, [r3, #14]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a78:	4113      	asrs	r3, r2
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a82:	ee17 0a90 	vmov	r0, s15
 8002a86:	f7fd fd7f 	bl	8000588 <__aeabi_f2d>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4620      	mov	r0, r4
 8002a90:	4629      	mov	r1, r5
 8002a92:	f7fd fdd1 	bl	8000638 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4614      	mov	r4, r2
 8002a9c:	461d      	mov	r5, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd6f 	bl	8000588 <__aeabi_f2d>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	460b      	mov	r3, r1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f7fd fc09 	bl	80002c8 <__aeabi_dsub>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	a34c      	add	r3, pc, #304	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac4:	f7fd fdb8 	bl	8000638 <__aeabi_dmul>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	f7fe f8aa 	bl	8000c28 <__aeabi_d2f>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	621a      	str	r2, [r3, #32]
		BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002ade:	ee07 3a90 	vmov	s15, r3
 8002ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae6:	ee17 0a90 	vmov	r0, s15
 8002aea:	f7fd fd4d 	bl	8000588 <__aeabi_f2d>
 8002aee:	a33e      	add	r3, pc, #248	@ (adr r3, 8002be8 <bmi088_update+0x6d0>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd feca 	bl	800088c <__aeabi_ddiv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4614      	mov	r4, r2
 8002afe:	461d      	mov	r5, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	7b9b      	ldrb	r3, [r3, #14]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b0a:	4113      	asrs	r3, r2
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	ee17 0a90 	vmov	r0, s15
 8002b18:	f7fd fd36 	bl	8000588 <__aeabi_f2d>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4620      	mov	r0, r4
 8002b22:	4629      	mov	r1, r5
 8002b24:	f7fd fd88 	bl	8000638 <__aeabi_dmul>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4614      	mov	r4, r2
 8002b2e:	461d      	mov	r5, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd26 	bl	8000588 <__aeabi_f2d>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4620      	mov	r0, r4
 8002b42:	4629      	mov	r1, r5
 8002b44:	f7fd fbc0 	bl	80002c8 <__aeabi_dsub>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	a327      	add	r3, pc, #156	@ (adr r3, 8002bf0 <bmi088_update+0x6d8>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fd6f 	bl	8000638 <__aeabi_dmul>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fe f861 	bl	8000c28 <__aeabi_d2f>
 8002b66:	4602      	mov	r2, r0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

		Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z, BMI->datas.acc_y, -BMI->datas.acc_x, BMI->datas.acc_z, BMI->datas.delta_time);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	edd3 7a07 	vldr	s15, [r3, #28]
 8002b78:	eef1 6a67 	vneg.f32	s13, s15
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	edd3 5a18 	vldr	s11, [r3, #96]	@ 0x60
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8002b8e:	eef1 7a67 	vneg.f32	s15, s15
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	ed93 5a19 	vldr	s10, [r3, #100]	@ 0x64
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	edd3 4a1d 	vldr	s9, [r3, #116]	@ 0x74
 8002b9e:	eeb0 3a64 	vmov.f32	s6, s9
 8002ba2:	eef0 2a45 	vmov.f32	s5, s10
 8002ba6:	eeb0 2a67 	vmov.f32	s4, s15
 8002baa:	eef0 1a65 	vmov.f32	s3, s11
 8002bae:	eeb0 1a46 	vmov.f32	s2, s12
 8002bb2:	eef0 0a66 	vmov.f32	s1, s13
 8002bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8002bba:	f003 fa2f 	bl	800601c <Orientation_Update>
		BMI->datas.theta = quaternionToThetaZ();
 8002bbe:	f003 fea1 	bl	8006904 <quaternionToThetaZ>
 8002bc2:	eef0 7a40 	vmov.f32	s15, s0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		is_gyro_renewed = 1;
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c00 <bmi088_update+0x6e8>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]

		BMI->flags.isGyroDmaComplete = 0;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	70da      	strb	r2, [r3, #3]
		is_time_updated = 0;
 8002bd8:	4b08      	ldr	r3, [pc, #32]	@ (8002bfc <bmi088_update+0x6e4>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	701a      	strb	r2, [r3, #0]
	}
}
 8002bde:	bf00      	nop
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bdb0      	pop	{r4, r5, r7, pc}
 8002be6:	bf00      	nop
 8002be8:	00000000 	.word	0x00000000
 8002bec:	40dfffc0 	.word	0x40dfffc0
 8002bf0:	a0000000 	.word	0xa0000000
 8002bf4:	3f91df46 	.word	0x3f91df46
 8002bf8:	2000025e 	.word	0x2000025e
 8002bfc:	2000025d 	.word	0x2000025d
 8002c00:	2000025f 	.word	0x2000025f

08002c04 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	705a      	strb	r2, [r3, #1]
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <get_offset>:
	HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &data, 1, 50);
	return data;
}

void get_offset(bmi088_struct_t* BMI)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	int offsetCounter = 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
	uint32_t timeout_start = HAL_GetTick();
 8002c44:	f005 f890 	bl	8007d68 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]
	const uint32_t TIMEOUT_MS = 10000; // 10 saniye timeout
 8002c4a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002c4e:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		// Timeout kontrolü
		if(HAL_GetTick() - timeout_start > TIMEOUT_MS)
 8002c50:	f005 f88a 	bl	8007d68 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d35e      	bcc.n	8002d1e <get_offset+0xe6>
		{

			return;
		}
		
		bmi088_update(BMI);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff fc59 	bl	8002518 <bmi088_update>
		if(is_gyro_renewed == 1)
 8002c66:	4b30      	ldr	r3, [pc, #192]	@ (8002d28 <get_offset+0xf0>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d1ef      	bne.n	8002c50 <get_offset+0x18>
		{
			if(offsetCounter < 1000)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c76:	da2d      	bge.n	8002cd4 <get_offset+0x9c>
			{
				BMI->device_config.offsets->gyro_offset[0] += BMI->datas.gyro_x;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	edd3 7a07 	vldr	s15, [r3, #28]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8e:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] += BMI->datas.gyro_y;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca8:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] += BMI->datas.gyro_z;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc2:	edc3 7a02 	vstr	s15, [r3, #8]
				offsetCounter++;
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	617b      	str	r3, [r7, #20]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
				//quaternionSet_zero();
				break;
				//Error_Handler();
			}
			is_gyro_renewed = 0;
 8002ccc:	4b16      	ldr	r3, [pc, #88]	@ (8002d28 <get_offset+0xf0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e7bd      	b.n	8002c50 <get_offset+0x18>
				BMI->device_config.offsets->gyro_offset[0] /= 1000.0;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	ed93 7a00 	vldr	s14, [r3]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002d2c <get_offset+0xf4>
 8002ce4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce8:	edc3 7a00 	vstr	s15, [r3]
				BMI->device_config.offsets->gyro_offset[1] /= 1000.0;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002d2c <get_offset+0xf4>
 8002cfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d00:	edc3 7a01 	vstr	s15, [r3, #4]
				BMI->device_config.offsets->gyro_offset[2] /= 1000.0;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8002d2c <get_offset+0xf4>
 8002d14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d18:	edc3 7a02 	vstr	s15, [r3, #8]
				break;
 8002d1c:	e000      	b.n	8002d20 <get_offset+0xe8>
			return;
 8002d1e:	bf00      	nop
		}

	}
}
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	2000025f 	.word	0x2000025f
 8002d2c:	447a0000 	.word	0x447a0000

08002d30 <bmi088_accel_dma_complete_callback>:
/**
 * @brief Accelerometer DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_accel_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelDmaComplete = 1;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	709a      	strb	r2, [r3, #2]
	BMI->flags.isDmaTransferActive = 0;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	711a      	strb	r2, [r3, #4]
	BMI->flags.isAccelUpdated = 0;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	705a      	strb	r2, [r3, #1]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <bmi088_gyro_dma_complete_callback>:
/**
 * @brief Gyroscope DMA complete callback
 * @param BMI Pointer to BMI088 structure
 */
void bmi088_gyro_dma_complete_callback(bmi088_struct_t* BMI)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroDmaComplete = 1;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	70da      	strb	r2, [r3, #3]
	BMI->flags.isDmaTransferActive = 0;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	711a      	strb	r2, [r3, #4]
	BMI->flags.isGyroUpdated = 0;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <log_normal_packet_data>:
	f_write(&fil, (uint8_t*) p_data, strlen((char*)p_data), &file_res);
	f_close(&fil);
}

void log_normal_packet_data(unsigned char* packet_data)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
	// Paketi buffer'a kopyala
	memcpy(&packet_buffer[buffer_index], packet_data, PACKET_SIZE);
 8002d84:	4b0d      	ldr	r3, [pc, #52]	@ (8002dbc <log_normal_packet_data+0x40>)
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <log_normal_packet_data+0x44>)
 8002d8c:	4413      	add	r3, r2
 8002d8e:	2232      	movs	r2, #50	@ 0x32
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f010 ffad 	bl	8013cf2 <memcpy>
	buffer_index += PACKET_SIZE;
 8002d98:	4b08      	ldr	r3, [pc, #32]	@ (8002dbc <log_normal_packet_data+0x40>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	3332      	adds	r3, #50	@ 0x32
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <log_normal_packet_data+0x40>)
 8002da2:	801a      	strh	r2, [r3, #0]
	
	// Buffer doldu mu kontrol et
	if (buffer_index >= BUFFER_SIZE) {
 8002da4:	4b05      	ldr	r3, [pc, #20]	@ (8002dbc <log_normal_packet_data+0x40>)
 8002da6:	881b      	ldrh	r3, [r3, #0]
 8002da8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002dac:	d301      	bcc.n	8002db2 <log_normal_packet_data+0x36>
		// Buffer'ı SD karta yaz
		flush_packet_buffer();
 8002dae:	f000 f809 	bl	8002dc4 <flush_packet_buffer>
	}
}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000458 	.word	0x20000458
 8002dc0:	20000264 	.word	0x20000264

08002dc4 <flush_packet_buffer>:

void flush_packet_buffer(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
	if (buffer_index > 0) {
 8002dca:	4b15      	ldr	r3, [pc, #84]	@ (8002e20 <flush_packet_buffer+0x5c>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d022      	beq.n	8002e18 <flush_packet_buffer+0x54>
		fres = f_open(&fil, "packet_data.bin", FA_WRITE | FA_OPEN_ALWAYS);
 8002dd2:	2212      	movs	r2, #18
 8002dd4:	4913      	ldr	r1, [pc, #76]	@ (8002e24 <flush_packet_buffer+0x60>)
 8002dd6:	4814      	ldr	r0, [pc, #80]	@ (8002e28 <flush_packet_buffer+0x64>)
 8002dd8:	f00f f811 	bl	8011dfe <f_open>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <flush_packet_buffer+0x68>)
 8002de2:	701a      	strb	r2, [r3, #0]
		if (fres == FR_OK) {
 8002de4:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <flush_packet_buffer+0x68>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d115      	bne.n	8002e18 <flush_packet_buffer+0x54>
			f_lseek(&fil, f_size(&fil));
 8002dec:	4b0e      	ldr	r3, [pc, #56]	@ (8002e28 <flush_packet_buffer+0x64>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4619      	mov	r1, r3
 8002df2:	480d      	ldr	r0, [pc, #52]	@ (8002e28 <flush_packet_buffer+0x64>)
 8002df4:	f00f fbda 	bl	80125ac <f_lseek>
			unsigned int file_res = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	607b      	str	r3, [r7, #4]
			
			// Buffer'daki tüm veriyi yaz
			f_write(&fil, packet_buffer, buffer_index, &file_res);
 8002dfc:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <flush_packet_buffer+0x5c>)
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	490a      	ldr	r1, [pc, #40]	@ (8002e30 <flush_packet_buffer+0x6c>)
 8002e06:	4808      	ldr	r0, [pc, #32]	@ (8002e28 <flush_packet_buffer+0x64>)
 8002e08:	f00f f9b3 	bl	8012172 <f_write>
			f_close(&fil);
 8002e0c:	4806      	ldr	r0, [pc, #24]	@ (8002e28 <flush_packet_buffer+0x64>)
 8002e0e:	f00f fba3 	bl	8012558 <f_close>
			
			// Buffer'ı sıfırla
			buffer_index = 0;
 8002e12:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <flush_packet_buffer+0x5c>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8002e18:	bf00      	nop
 8002e1a:	3708      	adds	r7, #8
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000458 	.word	0x20000458
 8002e24:	08019c44 	.word	0x08019c44
 8002e28:	2000045c 	.word	0x2000045c
 8002e2c:	2000068c 	.word	0x2000068c
 8002e30:	20000264 	.word	0x20000264

08002e34 <e22_init>:
  * @param  lora_conf_struct: pointer to the lora configuration struct.
  * @param  huart: pointer to the uart handler typedef.
  * @retval None
  */
void e22_init(e22_conf_struct_t *lora_conf_struct, UART_HandleTypeDef* huart)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	data_packet[0] = 0xC0;	//Set register command.
 8002e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f68 <e22_init+0x134>)
 8002e40:	22c0      	movs	r2, #192	@ 0xc0
 8002e42:	701a      	strb	r2, [r3, #0]
	data_packet[1] = 0x03;	//Starting from byte 0x03
 8002e44:	4b48      	ldr	r3, [pc, #288]	@ (8002f68 <e22_init+0x134>)
 8002e46:	2203      	movs	r2, #3
 8002e48:	705a      	strb	r2, [r3, #1]
	data_packet[2] = 0x04;	//6 bytes will be configured.
 8002e4a:	4b47      	ldr	r3, [pc, #284]	@ (8002f68 <e22_init+0x134>)
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	709a      	strb	r2, [r3, #2]
	data_packet[3] = lora_conf_struct->air_rate | (lora_conf_struct->parity_bit << 3) | (lora_conf_struct->baud_rate << 5);																									//Wireless air data rate（bps）, Serial parity bit, UART Serial port rate（bps).
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7c5b      	ldrb	r3, [r3, #17]
 8002e54:	b25a      	sxtb	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	7c1b      	ldrb	r3, [r3, #16]
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	b25b      	sxtb	r3, r3
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	b25a      	sxtb	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	7bdb      	ldrb	r3, [r3, #15]
 8002e66:	015b      	lsls	r3, r3, #5
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	4b3d      	ldr	r3, [pc, #244]	@ (8002f68 <e22_init+0x134>)
 8002e72:	70da      	strb	r2, [r3, #3]
	data_packet[4] = lora_conf_struct->power | (lora_conf_struct->rssi_noise << 5) | (lora_conf_struct->packet_size << 6);																									//Transmitting power, RSSI anbient noise enable, Sub packet settings.
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7d1b      	ldrb	r3, [r3, #20]
 8002e78:	b25a      	sxtb	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7cdb      	ldrb	r3, [r3, #19]
 8002e7e:	015b      	lsls	r3, r3, #5
 8002e80:	b25b      	sxtb	r3, r3
 8002e82:	4313      	orrs	r3, r2
 8002e84:	b25a      	sxtb	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7c9b      	ldrb	r3, [r3, #18]
 8002e8a:	019b      	lsls	r3, r3, #6
 8002e8c:	b25b      	sxtb	r3, r3
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	b25b      	sxtb	r3, r3
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	4b34      	ldr	r3, [pc, #208]	@ (8002f68 <e22_init+0x134>)
 8002e96:	711a      	strb	r2, [r3, #4]
	data_packet[5] = lora_conf_struct->channel;																																											//channel 0-83 (410.125 + CH *1M)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7d5a      	ldrb	r2, [r3, #21]
 8002e9c:	4b32      	ldr	r3, [pc, #200]	@ (8002f68 <e22_init+0x134>)
 8002e9e:	715a      	strb	r2, [r3, #5]
	data_packet[6] = lora_conf_struct->wor_cycle | (lora_conf_struct->wor << 3) | (lora_conf_struct->lbt << 4) | (lora_conf_struct->repeater_func << 5) | (lora_conf_struct->mode << 6) | (lora_conf_struct->rssi_enable << 7);	//WOR cycle time, WOR transceiver control, LBT enable, Repeater function, Transmission mode, Enable RSSI.
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7edb      	ldrb	r3, [r3, #27]
 8002ea4:	b25a      	sxtb	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	7e9b      	ldrb	r3, [r3, #26]
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	b25a      	sxtb	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7e5b      	ldrb	r3, [r3, #25]
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	b25b      	sxtb	r3, r3
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	b25a      	sxtb	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	7e1b      	ldrb	r3, [r3, #24]
 8002ec2:	015b      	lsls	r3, r3, #5
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b25a      	sxtb	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7ddb      	ldrb	r3, [r3, #23]
 8002ece:	019b      	lsls	r3, r3, #6
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	b25a      	sxtb	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7d9b      	ldrb	r3, [r3, #22]
 8002eda:	01db      	lsls	r3, r3, #7
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	b25b      	sxtb	r3, r3
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <e22_init+0x134>)
 8002ee6:	719a      	strb	r2, [r3, #6]
	data_packet[7] = (uint8_t)(lora_conf_struct->key >> 8);																																								//high byte of key
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	8b9b      	ldrh	r3, [r3, #28]
 8002eec:	0a1b      	lsrs	r3, r3, #8
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <e22_init+0x134>)
 8002ef4:	71da      	strb	r2, [r3, #7]
	data_packet[8] = (uint8_t)(lora_conf_struct->key);																																									//low byte of key
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	8b9b      	ldrh	r3, [r3, #28]
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f68 <e22_init+0x134>)
 8002efe:	721a      	strb	r2, [r3, #8]


	//UART transmits the configuration datas.
	uint8_t response[7] = {0};
 8002f00:	2300      	movs	r3, #0
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	f107 0310 	add.w	r3, r7, #16
 8002f08:	2100      	movs	r1, #0
 8002f0a:	460a      	mov	r2, r1
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	460a      	mov	r2, r1
 8002f10:	709a      	strb	r2, [r3, #2]
	for(int i = 0; i < 10; i++)
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
 8002f16:	e01d      	b.n	8002f54 <e22_init+0x120>
	{
		HAL_UART_Transmit(huart, data_packet, 7, 50);
 8002f18:	2332      	movs	r3, #50	@ 0x32
 8002f1a:	2207      	movs	r2, #7
 8002f1c:	4912      	ldr	r1, [pc, #72]	@ (8002f68 <e22_init+0x134>)
 8002f1e:	6838      	ldr	r0, [r7, #0]
 8002f20:	f00b f9ce 	bl	800e2c0 <HAL_UART_Transmit>
		HAL_UART_Receive(huart, response, 7, 50);
 8002f24:	f107 010c 	add.w	r1, r7, #12
 8002f28:	2332      	movs	r3, #50	@ 0x32
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	6838      	ldr	r0, [r7, #0]
 8002f2e:	f00b fa52 	bl	800e3d6 <HAL_UART_Receive>
		if(memcmp(&response[1], &data_packet[1], 6) == 0)
 8002f32:	f107 030c 	add.w	r3, r7, #12
 8002f36:	3301      	adds	r3, #1
 8002f38:	2206      	movs	r2, #6
 8002f3a:	490c      	ldr	r1, [pc, #48]	@ (8002f6c <e22_init+0x138>)
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f010 fe22 	bl	8013b86 <memcmp>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <e22_init+0x128>
			break;
		HAL_Delay(10);
 8002f48:	200a      	movs	r0, #10
 8002f4a:	f004 ff19 	bl	8007d80 <HAL_Delay>
	for(int i = 0; i < 10; i++)
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	3301      	adds	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b09      	cmp	r3, #9
 8002f58:	ddde      	ble.n	8002f18 <e22_init+0xe4>
	  }
	}
	*/


}
 8002f5a:	e000      	b.n	8002f5e <e22_init+0x12a>
			break;
 8002f5c:	bf00      	nop
}
 8002f5e:	bf00      	nop
 8002f60:	3718      	adds	r7, #24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000690 	.word	0x20000690
 8002f6c:	20000691 	.word	0x20000691

08002f70 <e22_config_mode>:
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_SET);
}


void e22_config_mode(e22_conf_struct_t *lora_conf_struct)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	//For config mode M0 -> 0    M1 -> 1
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_RESET);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	4805      	ldr	r0, [pc, #20]	@ (8002f94 <e22_config_mode+0x24>)
 8002f7e:	f006 fb79 	bl	8009674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_SET);
 8002f82:	2201      	movs	r2, #1
 8002f84:	2108      	movs	r1, #8
 8002f86:	4803      	ldr	r0, [pc, #12]	@ (8002f94 <e22_config_mode+0x24>)
 8002f88:	f006 fb74 	bl	8009674 <HAL_GPIO_WritePin>
}
 8002f8c:	bf00      	nop
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40020800 	.word	0x40020800

08002f98 <e22_transmit_mode>:

void e22_transmit_mode(e22_conf_struct_t *lora_conf_struct)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	//For transmission mode M0 -> 0    M1 -> 0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, GPIO_PIN_RESET);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2104      	movs	r1, #4
 8002fa4:	4805      	ldr	r0, [pc, #20]	@ (8002fbc <e22_transmit_mode+0x24>)
 8002fa6:	f006 fb65 	bl	8009674 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, GPIO_PIN_RESET);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2108      	movs	r1, #8
 8002fae:	4803      	ldr	r0, [pc, #12]	@ (8002fbc <e22_transmit_mode+0x24>)
 8002fb0:	f006 fb60 	bl	8009674 <HAL_GPIO_WritePin>
}
 8002fb4:	bf00      	nop
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40020800 	.word	0x40020800

08002fc0 <flight_algorithm_update>:

/**
 * @brief Update flight algorithm with sensor data
 */
void flight_algorithm_update(BME_280_t* bme, bmi088_struct_t* bmi, sensor_fusion_t* sensor_fusion)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
    // Calculate key metrics
    float total_acceleration = calculate_total_acceleration(bmi);
 8002fcc:	68b8      	ldr	r0, [r7, #8]
 8002fce:	f000 f977 	bl	80032c0 <calculate_total_acceleration>
 8002fd2:	ed87 0a05 	vstr	s0, [r7, #20]

    // Status bits are cumulative - once set they remain set
    // Each phase builds on the previous phase's status bits

    // State machine for flight phases
    switch (current_phase) {
 8002fd6:	4ba2      	ldr	r3, [pc, #648]	@ (8003260 <flight_algorithm_update+0x2a0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	f200 8165 	bhi.w	80032aa <flight_algorithm_update+0x2ea>
 8002fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <flight_algorithm_update+0x28>)
 8002fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe6:	bf00      	nop
 8002fe8:	08002ffd 	.word	0x08002ffd
 8002fec:	0800307f 	.word	0x0800307f
 8002ff0:	080030ff 	.word	0x080030ff
 8002ff4:	080032ab 	.word	0x080032ab
 8002ff8:	080032ab 	.word	0x080032ab
        case PHASE_IDLE:
            // Detect launch using acceleration threshold
            if (total_acceleration > launch_accel_threshold) {
 8002ffc:	4b99      	ldr	r3, [pc, #612]	@ (8003264 <flight_algorithm_update+0x2a4>)
 8002ffe:	edd3 7a00 	vldr	s15, [r3]
 8003002:	ed97 7a05 	vldr	s14, [r7, #20]
 8003006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300e:	dd15      	ble.n	800303c <flight_algorithm_update+0x7c>
                current_phase = PHASE_BOOST;
 8003010:	4b93      	ldr	r3, [pc, #588]	@ (8003260 <flight_algorithm_update+0x2a0>)
 8003012:	2201      	movs	r2, #1
 8003014:	701a      	strb	r2, [r3, #0]
                is_rising = 1;
 8003016:	4b94      	ldr	r3, [pc, #592]	@ (8003268 <flight_algorithm_update+0x2a8>)
 8003018:	2201      	movs	r2, #1
 800301a:	701a      	strb	r2, [r3, #0]
                flight_start_time = HAL_GetTick();
 800301c:	f004 fea4 	bl	8007d68 <HAL_GetTick>
 8003020:	4603      	mov	r3, r0
 8003022:	4a92      	ldr	r2, [pc, #584]	@ (800326c <flight_algorithm_update+0x2ac>)
 8003024:	6013      	str	r3, [r2, #0]
                status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8003026:	4b92      	ldr	r3, [pc, #584]	@ (8003270 <flight_algorithm_update+0x2b0>)
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	4b8f      	ldr	r3, [pc, #572]	@ (8003270 <flight_algorithm_update+0x2b0>)
 8003032:	801a      	strh	r2, [r3, #0]
                durum_verisi = 2;
 8003034:	4b8f      	ldr	r3, [pc, #572]	@ (8003274 <flight_algorithm_update+0x2b4>)
 8003036:	2202      	movs	r2, #2
 8003038:	701a      	strb	r2, [r3, #0]
				is_rising = 1;
				flight_start_time = HAL_GetTick();
				status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
				durum_verisi = 2;
            }
            break;
 800303a:	e136      	b.n	80032aa <flight_algorithm_update+0x2ea>
            else if(sensor_fusion->velocity > RISING_VELOCITY_TRESHOLD){
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003042:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8003046:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304e:	dc00      	bgt.n	8003052 <flight_algorithm_update+0x92>
            break;
 8003050:	e12b      	b.n	80032aa <flight_algorithm_update+0x2ea>
            	current_phase = PHASE_BOOST;
 8003052:	4b83      	ldr	r3, [pc, #524]	@ (8003260 <flight_algorithm_update+0x2a0>)
 8003054:	2201      	movs	r2, #1
 8003056:	701a      	strb	r2, [r3, #0]
				is_rising = 1;
 8003058:	4b83      	ldr	r3, [pc, #524]	@ (8003268 <flight_algorithm_update+0x2a8>)
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
				flight_start_time = HAL_GetTick();
 800305e:	f004 fe83 	bl	8007d68 <HAL_GetTick>
 8003062:	4603      	mov	r3, r0
 8003064:	4a81      	ldr	r2, [pc, #516]	@ (800326c <flight_algorithm_update+0x2ac>)
 8003066:	6013      	str	r3, [r2, #0]
				status_bits |= 0x0001; // Set Bit 0: Rocket launch detected
 8003068:	4b81      	ldr	r3, [pc, #516]	@ (8003270 <flight_algorithm_update+0x2b0>)
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	4b7f      	ldr	r3, [pc, #508]	@ (8003270 <flight_algorithm_update+0x2b0>)
 8003074:	801a      	strh	r2, [r3, #0]
				durum_verisi = 2;
 8003076:	4b7f      	ldr	r3, [pc, #508]	@ (8003274 <flight_algorithm_update+0x2b4>)
 8003078:	2202      	movs	r2, #2
 800307a:	701a      	strb	r2, [r3, #0]
            break;
 800307c:	e115      	b.n	80032aa <flight_algorithm_update+0x2ea>

        case PHASE_BOOST:
            // After boost phase (typically 7-9 seconds)
            if (HAL_GetTick() - flight_start_time > 8000) {
 800307e:	f004 fe73 	bl	8007d68 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	4b79      	ldr	r3, [pc, #484]	@ (800326c <flight_algorithm_update+0x2ac>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 800308e:	d90f      	bls.n	80030b0 <flight_algorithm_update+0xf0>
                current_phase = PHASE_COAST;
 8003090:	4b73      	ldr	r3, [pc, #460]	@ (8003260 <flight_algorithm_update+0x2a0>)
 8003092:	2202      	movs	r2, #2
 8003094:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 8003096:	4b78      	ldr	r3, [pc, #480]	@ (8003278 <flight_algorithm_update+0x2b8>)
 8003098:	2201      	movs	r2, #1
 800309a:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 800309c:	4b74      	ldr	r3, [pc, #464]	@ (8003270 <flight_algorithm_update+0x2b0>)
 800309e:	881b      	ldrh	r3, [r3, #0]
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	4b72      	ldr	r3, [pc, #456]	@ (8003270 <flight_algorithm_update+0x2b0>)
 80030a8:	801a      	strh	r2, [r3, #0]
                durum_verisi = 3;
 80030aa:	4b72      	ldr	r3, [pc, #456]	@ (8003274 <flight_algorithm_update+0x2b4>)
 80030ac:	2203      	movs	r2, #3
 80030ae:	701a      	strb	r2, [r3, #0]
            }
            if(bmi->datas.acc_x < 0.0 && burnout_counter < 10){
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80030b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d508      	bpl.n	80030d2 <flight_algorithm_update+0x112>
 80030c0:	4b6e      	ldr	r3, [pc, #440]	@ (800327c <flight_algorithm_update+0x2bc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	dc04      	bgt.n	80030d2 <flight_algorithm_update+0x112>
            	burnout_counter++;
 80030c8:	4b6c      	ldr	r3, [pc, #432]	@ (800327c <flight_algorithm_update+0x2bc>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	4a6b      	ldr	r2, [pc, #428]	@ (800327c <flight_algorithm_update+0x2bc>)
 80030d0:	6013      	str	r3, [r2, #0]
            }
            if(burnout_counter == 10){
 80030d2:	4b6a      	ldr	r3, [pc, #424]	@ (800327c <flight_algorithm_update+0x2bc>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b0a      	cmp	r3, #10
 80030d8:	f040 80c0 	bne.w	800325c <flight_algorithm_update+0x29c>
                current_phase = PHASE_COAST;
 80030dc:	4b60      	ldr	r3, [pc, #384]	@ (8003260 <flight_algorithm_update+0x2a0>)
 80030de:	2202      	movs	r2, #2
 80030e0:	701a      	strb	r2, [r3, #0]
                is_stabilized = 1;
 80030e2:	4b65      	ldr	r3, [pc, #404]	@ (8003278 <flight_algorithm_update+0x2b8>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0002; // Set Bit 1: Motor burn prevention period ended
 80030e8:	4b61      	ldr	r3, [pc, #388]	@ (8003270 <flight_algorithm_update+0x2b0>)
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	f043 0302 	orr.w	r3, r3, #2
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003270 <flight_algorithm_update+0x2b0>)
 80030f4:	801a      	strh	r2, [r3, #0]
                durum_verisi = 3;
 80030f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003274 <flight_algorithm_update+0x2b4>)
 80030f8:	2203      	movs	r2, #3
 80030fa:	701a      	strb	r2, [r3, #0]
            }
            break;
 80030fc:	e0ae      	b.n	800325c <flight_algorithm_update+0x29c>

        case PHASE_COAST:
            // Check minimum arming altitude
            if (bme->altitude > min_arming_altitude && !is_armed) {
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	ed93 7a08 	vldr	s14, [r3, #32]
 8003104:	4b5e      	ldr	r3, [pc, #376]	@ (8003280 <flight_algorithm_update+0x2c0>)
 8003106:	edd3 7a00 	vldr	s15, [r3]
 800310a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800310e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003112:	dd10      	ble.n	8003136 <flight_algorithm_update+0x176>
 8003114:	4b5b      	ldr	r3, [pc, #364]	@ (8003284 <flight_algorithm_update+0x2c4>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10c      	bne.n	8003136 <flight_algorithm_update+0x176>
                is_armed = 1;
 800311c:	4b59      	ldr	r3, [pc, #356]	@ (8003284 <flight_algorithm_update+0x2c4>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0004; // Set Bit 2: Minimum altitude threshold exceeded
 8003122:	4b53      	ldr	r3, [pc, #332]	@ (8003270 <flight_algorithm_update+0x2b0>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	f043 0304 	orr.w	r3, r3, #4
 800312a:	b29a      	uxth	r2, r3
 800312c:	4b50      	ldr	r3, [pc, #320]	@ (8003270 <flight_algorithm_update+0x2b0>)
 800312e:	801a      	strh	r2, [r3, #0]
                durum_verisi = 4;
 8003130:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <flight_algorithm_update+0x2b4>)
 8003132:	2204      	movs	r2, #4
 8003134:	701a      	strb	r2, [r3, #0]
            }

            // Check if angle exceeds threshold
            if (is_armed && (fabs(bmi->datas.theta) > max_angle_threshold) && deployed_angle) {
 8003136:	4b53      	ldr	r3, [pc, #332]	@ (8003284 <flight_algorithm_update+0x2c4>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d020      	beq.n	8003180 <flight_algorithm_update+0x1c0>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003144:	eeb0 7ae7 	vabs.f32	s14, s15
 8003148:	4b4f      	ldr	r3, [pc, #316]	@ (8003288 <flight_algorithm_update+0x2c8>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	dd13      	ble.n	8003180 <flight_algorithm_update+0x1c0>
 8003158:	4b4c      	ldr	r3, [pc, #304]	@ (800328c <flight_algorithm_update+0x2cc>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00f      	beq.n	8003180 <flight_algorithm_update+0x1c0>
                drogue_deployed = 1;
 8003160:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <flight_algorithm_update+0x2d0>)
 8003162:	2201      	movs	r2, #1
 8003164:	701a      	strb	r2, [r3, #0]
                deployed_angle = 0;
 8003166:	4b49      	ldr	r3, [pc, #292]	@ (800328c <flight_algorithm_update+0x2cc>)
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0008; // Set Bit 3: Rocket body angle exceeds threshold
 800316c:	4b40      	ldr	r3, [pc, #256]	@ (8003270 <flight_algorithm_update+0x2b0>)
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	f043 0308 	orr.w	r3, r3, #8
 8003174:	b29a      	uxth	r2, r3
 8003176:	4b3e      	ldr	r3, [pc, #248]	@ (8003270 <flight_algorithm_update+0x2b0>)
 8003178:	801a      	strh	r2, [r3, #0]
                durum_verisi = 5;
 800317a:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <flight_algorithm_update+0x2b4>)
 800317c:	2205      	movs	r2, #5
 800317e:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 1;
                deployed_velocity = 0;
                // deploy_drogue_parachute(); // Actual deployment command
            }*/

            if (is_armed && sensor_fusion->velocity < 0.0f && sensor_fusion->velocity < prev_velocity && deployed_velocity) {
 8003180:	4b40      	ldr	r3, [pc, #256]	@ (8003284 <flight_algorithm_update+0x2c4>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d037      	beq.n	80031f8 <flight_algorithm_update+0x238>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	edd3 7a01 	vldr	s15, [r3, #4]
 800318e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	d52f      	bpl.n	80031f8 <flight_algorithm_update+0x238>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	ed93 7a01 	vldr	s14, [r3, #4]
 800319e:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <flight_algorithm_update+0x2d4>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ac:	d524      	bpl.n	80031f8 <flight_algorithm_update+0x238>
 80031ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003298 <flight_algorithm_update+0x2d8>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d020      	beq.n	80031f8 <flight_algorithm_update+0x238>
                apogee_counter++;
 80031b6:	4b39      	ldr	r3, [pc, #228]	@ (800329c <flight_algorithm_update+0x2dc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3301      	adds	r3, #1
 80031bc:	4a37      	ldr	r2, [pc, #220]	@ (800329c <flight_algorithm_update+0x2dc>)
 80031be:	6013      	str	r3, [r2, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 80031c0:	4b36      	ldr	r3, [pc, #216]	@ (800329c <flight_algorithm_update+0x2dc>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	dd1a      	ble.n	80031fe <flight_algorithm_update+0x23e>
                    status_bits |= 0x0010; // Set Bit 4: Rocket altitude started decreasing
 80031c8:	4b29      	ldr	r3, [pc, #164]	@ (8003270 <flight_algorithm_update+0x2b0>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f043 0310 	orr.w	r3, r3, #16
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	4b27      	ldr	r3, [pc, #156]	@ (8003270 <flight_algorithm_update+0x2b0>)
 80031d4:	801a      	strh	r2, [r3, #0]
                    status_bits |= 0x0020; // Set Bit 5: Drag parachute deployment command generated
 80031d6:	4b26      	ldr	r3, [pc, #152]	@ (8003270 <flight_algorithm_update+0x2b0>)
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	f043 0320 	orr.w	r3, r3, #32
 80031de:	b29a      	uxth	r2, r3
 80031e0:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <flight_algorithm_update+0x2b0>)
 80031e2:	801a      	strh	r2, [r3, #0]
                    drogue_deployed = 1;
 80031e4:	4b2a      	ldr	r3, [pc, #168]	@ (8003290 <flight_algorithm_update+0x2d0>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
                    deployed_velocity = 0;
 80031ea:	4b2b      	ldr	r3, [pc, #172]	@ (8003298 <flight_algorithm_update+0x2d8>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
                    durum_verisi = 6;
 80031f0:	4b20      	ldr	r3, [pc, #128]	@ (8003274 <flight_algorithm_update+0x2b4>)
 80031f2:	2206      	movs	r2, #6
 80031f4:	701a      	strb	r2, [r3, #0]
                if (apogee_counter >= 9) {  // Confirm apogee after 5 consecutive samples
 80031f6:	e002      	b.n	80031fe <flight_algorithm_update+0x23e>
                }
            } else {
                apogee_counter = 0;
 80031f8:	4b28      	ldr	r3, [pc, #160]	@ (800329c <flight_algorithm_update+0x2dc>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
            }
            prev_velocity = sensor_fusion->velocity;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a24      	ldr	r2, [pc, #144]	@ (8003294 <flight_algorithm_update+0x2d4>)
 8003204:	6013      	str	r3, [r2, #0]

            // Deploy main parachute at designated altitude
            if (drogue_deployed && bme->altitude < main_chute_altitude) {
 8003206:	4b22      	ldr	r3, [pc, #136]	@ (8003290 <flight_algorithm_update+0x2d0>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04c      	beq.n	80032a8 <flight_algorithm_update+0x2e8>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	ed93 7a08 	vldr	s14, [r3, #32]
 8003214:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <flight_algorithm_update+0x2e0>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800321e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003222:	d400      	bmi.n	8003226 <flight_algorithm_update+0x266>
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
                main_deployed = 1;
                drogue_deployed = 0;
                durum_verisi = 7;
            }
            break;
 8003224:	e040      	b.n	80032a8 <flight_algorithm_update+0x2e8>
                current_phase = PHASE_MAIN_DESCENT;
 8003226:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <flight_algorithm_update+0x2a0>)
 8003228:	2203      	movs	r2, #3
 800322a:	701a      	strb	r2, [r3, #0]
                status_bits |= 0x0040; // Set Bit 6: Rocket altitude below specified altitude
 800322c:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <flight_algorithm_update+0x2b0>)
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003234:	b29a      	uxth	r2, r3
 8003236:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <flight_algorithm_update+0x2b0>)
 8003238:	801a      	strh	r2, [r3, #0]
                status_bits |= 0x0080; // Set Bit 7: Main parachute deployment command generated
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <flight_algorithm_update+0x2b0>)
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003242:	b29a      	uxth	r2, r3
 8003244:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <flight_algorithm_update+0x2b0>)
 8003246:	801a      	strh	r2, [r3, #0]
                main_deployed = 1;
 8003248:	4b16      	ldr	r3, [pc, #88]	@ (80032a4 <flight_algorithm_update+0x2e4>)
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]
                drogue_deployed = 0;
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <flight_algorithm_update+0x2d0>)
 8003250:	2200      	movs	r2, #0
 8003252:	701a      	strb	r2, [r3, #0]
                durum_verisi = 7;
 8003254:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <flight_algorithm_update+0x2b4>)
 8003256:	2207      	movs	r2, #7
 8003258:	701a      	strb	r2, [r3, #0]
            break;
 800325a:	e025      	b.n	80032a8 <flight_algorithm_update+0x2e8>
            break;
 800325c:	bf00      	nop
 800325e:	e024      	b.n	80032aa <flight_algorithm_update+0x2ea>
 8003260:	20000699 	.word	0x20000699
 8003264:	20000004 	.word	0x20000004
 8003268:	2000069a 	.word	0x2000069a
 800326c:	200006a8 	.word	0x200006a8
 8003270:	200006b0 	.word	0x200006b0
 8003274:	2000001c 	.word	0x2000001c
 8003278:	20000014 	.word	0x20000014
 800327c:	20000018 	.word	0x20000018
 8003280:	20000008 	.word	0x20000008
 8003284:	2000069b 	.word	0x2000069b
 8003288:	20000010 	.word	0x20000010
 800328c:	20000015 	.word	0x20000015
 8003290:	2000069c 	.word	0x2000069c
 8003294:	200006a4 	.word	0x200006a4
 8003298:	20000016 	.word	0x20000016
 800329c:	200006a0 	.word	0x200006a0
 80032a0:	2000000c 	.word	0x2000000c
 80032a4:	2000069d 	.word	0x2000069d
            break;
 80032a8:	bf00      	nop

        case PHASE_LANDED:
            // No additional status bits to set after landing
            break;
    }
    prev_altitude = bme->altitude;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	4a03      	ldr	r2, [pc, #12]	@ (80032bc <flight_algorithm_update+0x2fc>)
 80032b0:	6013      	str	r3, [r2, #0]
}
 80032b2:	bf00      	nop
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	200006ac 	.word	0x200006ac

080032c0 <calculate_total_acceleration>:

/**
 * @brief Calculate total acceleration magnitude
 */
static float calculate_total_acceleration(bmi088_struct_t* bmi)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	ed93 7a17 	vldr	s14, [r3, #92]	@ 0x5c
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80032d4:	ee27 7a27 	vmul.f32	s14, s14, s15
                 (bmi->datas.acc_y * bmi->datas.acc_y) +
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80032e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80032e8:	ee37 7a27 	vadd.f32	s14, s14, s15
                 (bmi->datas.acc_z * bmi->datas.acc_z));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	edd3 6a19 	vldr	s13, [r3, #100]	@ 0x64
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80032f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    return sqrtf((bmi->datas.acc_x * bmi->datas.acc_x) +
 80032fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003300:	eeb0 0a67 	vmov.f32	s0, s15
 8003304:	f014 fc98 	bl	8017c38 <sqrtf>
 8003308:	eef0 7a40 	vmov.f32	s15, s0
}
 800330c:	eeb0 0a67 	vmov.f32	s0, s15
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
	...

08003318 <flight_algorithm_get_durum_verisi>:
{
    return status_bits;
}

uint8_t flight_algorithm_get_durum_verisi(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
    return durum_verisi;
 800331c:	4b03      	ldr	r3, [pc, #12]	@ (800332c <flight_algorithm_get_durum_verisi+0x14>)
 800331e:	781b      	ldrb	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	2000001c 	.word	0x2000001c

08003330 <flight_algorithm_get_start_time>:
    main_chute_altitude = main_chute_altitude_param;
    max_angle_threshold = max_angle_threshold_param;
}

uint32_t flight_algorithm_get_start_time(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
    return flight_start_time;
 8003334:	4b03      	ldr	r3, [pc, #12]	@ (8003344 <flight_algorithm_get_start_time+0x14>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	200006a8 	.word	0x200006a8

08003348 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8003368:	2300      	movs	r3, #0
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e01f      	b.n	80033ae <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 800336e:	2300      	movs	r3, #0
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	e016      	b.n	80033a2 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	429a      	cmp	r2, r3
 800337a:	d101      	bne.n	8003380 <KalmanFilter_Init+0x38>
 800337c:	491b      	ldr	r1, [pc, #108]	@ (80033ec <KalmanFilter_Init+0xa4>)
 800337e:	e001      	b.n	8003384 <KalmanFilter_Init+0x3c>
 8003380:	f04f 0100 	mov.w	r1, #0
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4613      	mov	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	4413      	add	r3, r2
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4413      	add	r3, r2
 8003392:	3302      	adds	r3, #2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4403      	add	r3, r0
 8003398:	3304      	adds	r3, #4
 800339a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	3301      	adds	r3, #1
 80033a0:	60bb      	str	r3, [r7, #8]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	dde5      	ble.n	8003374 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	dddc      	ble.n	800336e <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0e      	ldr	r2, [pc, #56]	@ (80033f0 <KalmanFilter_Init+0xa8>)
 80033b8:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a0d      	ldr	r2, [pc, #52]	@ (80033f4 <KalmanFilter_Init+0xac>)
 80033be:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a0d      	ldr	r2, [pc, #52]	@ (80033f8 <KalmanFilter_Init+0xb0>)
 80033c4:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	42c80000 	.word	0x42c80000
 80033f0:	3c23d70a 	.word	0x3c23d70a
 80033f4:	3ba3d70a 	.word	0x3ba3d70a
 80033f8:	40a00000 	.word	0x40a00000

080033fc <KalmanFilter_Update>:
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 * @param dt Time step (seconds)
 * @return Filtered altitude
 */
float KalmanFilter_Update(KalmanFilter_t *kf, float altitude, float accel, float dt) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	ed87 0a02 	vstr	s0, [r7, #8]
 8003408:	edc7 0a01 	vstr	s1, [r7, #4]
 800340c:	ed87 1a00 	vstr	s2, [r7]
    // Check for Mach transition region (approximately 300-350 m/s)
    // Skip barometer readings in this region due to pressure anomalies
    if (fabsf(kf->x[1]) > 300.0f && fabsf(kf->x[1]) < 350.0f) {
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	edd3 7a01 	vldr	s15, [r3, #4]
 8003416:	eef0 7ae7 	vabs.f32	s15, s15
 800341a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8003480 <KalmanFilter_Update+0x84>
 800341e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003426:	dd0f      	ble.n	8003448 <KalmanFilter_Update+0x4c>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	edd3 7a01 	vldr	s15, [r3, #4]
 800342e:	eef0 7ae7 	vabs.f32	s15, s15
 8003432:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003484 <KalmanFilter_Update+0x88>
 8003436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	d503      	bpl.n	8003448 <KalmanFilter_Update+0x4c>
        kf->in_mach_transition = 1;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	649a      	str	r2, [r3, #72]	@ 0x48
 8003446:	e002      	b.n	800344e <KalmanFilter_Update+0x52>
    } else {
        kf->in_mach_transition = 0;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	649a      	str	r2, [r3, #72]	@ 0x48
    }

    // Time update (prediction)
    KalmanFilter_TimeUpdate(kf, dt);
 800344e:	ed97 0a00 	vldr	s0, [r7]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f818 	bl	8003488 <KalmanFilter_TimeUpdate>

    // Measurement update (correction)
    KalmanFilter_MeasurementUpdate(kf, altitude, accel);
 8003458:	edd7 0a01 	vldr	s1, [r7, #4]
 800345c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fa1d 	bl	80038a0 <KalmanFilter_MeasurementUpdate>

    // Check for apogee
    KalmanFilter_DetectApogee(kf);
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f001 f96a 	bl	8004740 <KalmanFilter_DetectApogee>

    // Return filtered altitude
    return kf->x[0];
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	ee07 3a90 	vmov	s15, r3
}
 8003474:	eeb0 0a67 	vmov.f32	s0, s15
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	43960000 	.word	0x43960000
 8003484:	43af0000 	.word	0x43af0000

08003488 <KalmanFilter_TimeUpdate>:
/**
 * @brief Time update step of Kalman filter (prediction)
 * @param kf Pointer to Kalman filter structure
 * @param dt Time step (seconds)
 */
static void KalmanFilter_TimeUpdate(KalmanFilter_t *kf, float dt) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b0b6      	sub	sp, #216	@ 0xd8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	ed87 0a00 	vstr	s0, [r7]
    float dt2 = dt * dt;
 8003494:	edd7 7a00 	vldr	s15, [r7]
 8003498:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800349c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
    float dt3 = dt2 * dt;
 80034a0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80034a4:	edd7 7a00 	vldr	s15, [r7]
 80034a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ac:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
    float dt4 = dt2 * dt2;
 80034b0:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80034b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80034b8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac

    // State transition matrix F = [1 dt dt²/2; 0 1 dt; 0 0 1]
    // State prediction: x = F*x
    float x0_new = kf->x[0] + kf->x[1] * dt + kf->x[2] * dt2 / 2.0f;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	ed93 7a00 	vldr	s14, [r3]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	edd3 6a01 	vldr	s13, [r3, #4]
 80034c8:	edd7 7a00 	vldr	s15, [r7]
 80034cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	edd3 6a02 	vldr	s13, [r3, #8]
 80034da:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80034de:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80034e2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80034e6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ee:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
    float x1_new = kf->x[1] + kf->x[2] * dt;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80034fe:	edd7 7a00 	vldr	s15, [r7]
 8003502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800350a:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
    float x2_new = kf->x[2];  // Acceleration assumed constant
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    kf->x[0] = x0_new;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800351c:	601a      	str	r2, [r3, #0]
    kf->x[1] = x1_new;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8003524:	605a      	str	r2, [r3, #4]
    kf->x[2] = x2_new;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800352c:	609a      	str	r2, [r3, #8]

    // Process noise covariance Q
    float q = kf->process_noise;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003532:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    float Q[3][3] = {
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003536:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800353a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800353e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003542:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003546:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800354a:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 800354e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003552:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003556:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800355a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800355e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003562:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
        {dt4/4.0f * q, dt3/2.0f * q, dt2/2.0f * q},
 8003566:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800356a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800356e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003572:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003576:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 800357a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
        {dt3/2.0f * q, dt2 * q, dt * q},
 800357e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003582:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003586:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800358a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800358e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 8003592:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
        {dt3/2.0f * q, dt2 * q, dt * q},
 8003596:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800359a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800359e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80035a2:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
        {dt3/2.0f * q, dt2 * q, dt * q},
 80035a6:	ed97 7a00 	vldr	s14, [r7]
 80035aa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80035ae:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80035b2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
        {dt2/2.0f * q, dt * q, q}
 80035b6:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 80035ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80035be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035c2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80035ca:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
        {dt2/2.0f * q, dt * q, q}
 80035ce:	ed97 7a00 	vldr	s14, [r7]
 80035d2:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80035d6:	ee67 7a27 	vmul.f32	s15, s14, s15
    float Q[3][3] = {
 80035da:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
 80035de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80035e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    };

    // State transition matrix F
    float F[3][3] = {
 80035e6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80035ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	65bb      	str	r3, [r7, #88]	@ 0x58
        {1.0f, dt, dt2/2.0f},
 80035f0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80035f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80035f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
    float F[3][3] = {
 80035fc:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	663b      	str	r3, [r7, #96]	@ 0x60
 8003606:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800360a:	667b      	str	r3, [r7, #100]	@ 0x64
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	673b      	str	r3, [r7, #112]	@ 0x70
 800361c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003620:	677b      	str	r3, [r7, #116]	@ 0x74
        {0.0f, 1.0f, dt},
        {0.0f, 0.0f, 1.0f}
    };

    // Temporary matrices for calculation
    float FP[3][3] = {0};
 8003622:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003626:	2224      	movs	r2, #36	@ 0x24
 8003628:	2100      	movs	r1, #0
 800362a:	4618      	mov	r0, r3
 800362c:	f010 fabb 	bl	8013ba6 <memset>
    float FPFT[3][3] = {0};
 8003630:	f107 030c 	add.w	r3, r7, #12
 8003634:	2224      	movs	r2, #36	@ 0x24
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f010 fab4 	bl	8013ba6 <memset>

    // P = F*P*F' + Q
    // Step 1: FP = F*P
    for (int i = 0; i < 3; i++) {
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003644:	e06a      	b.n	800371c <KalmanFilter_TimeUpdate+0x294>
        for (int j = 0; j < 3; j++) {
 8003646:	2300      	movs	r3, #0
 8003648:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800364c:	e05d      	b.n	800370a <KalmanFilter_TimeUpdate+0x282>
            FP[i][j] = 0.0f;
 800364e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003652:	4613      	mov	r3, r2
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4413      	add	r3, r2
 8003658:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	33d8      	adds	r3, #216	@ 0xd8
 8003662:	443b      	add	r3, r7
 8003664:	3ba8      	subs	r3, #168	@ 0xa8
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003672:	e041      	b.n	80036f8 <KalmanFilter_TimeUpdate+0x270>
                FP[i][j] += F[i][k] * kf->P[k][j];
 8003674:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	33d8      	adds	r3, #216	@ 0xd8
 8003688:	443b      	add	r3, r7
 800368a:	3ba8      	subs	r3, #168	@ 0xa8
 800368c:	ed93 7a00 	vldr	s14, [r3]
 8003690:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	33d8      	adds	r3, #216	@ 0xd8
 80036a4:	443b      	add	r3, r7
 80036a6:	3b84      	subs	r3, #132	@ 0x84
 80036a8:	edd3 6a00 	vldr	s13, [r3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036bc:	4413      	add	r3, r2
 80036be:	3302      	adds	r3, #2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	3304      	adds	r3, #4
 80036c6:	edd3 7a00 	vldr	s15, [r3]
 80036ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80036d6:	4613      	mov	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4413      	add	r3, r2
 80036dc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	33d8      	adds	r3, #216	@ 0xd8
 80036e6:	443b      	add	r3, r7
 80036e8:	3ba8      	subs	r3, #168	@ 0xa8
 80036ea:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80036ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036f2:	3301      	adds	r3, #1
 80036f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80036f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	ddb9      	ble.n	8003674 <KalmanFilter_TimeUpdate+0x1ec>
        for (int j = 0; j < 3; j++) {
 8003700:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003704:	3301      	adds	r3, #1
 8003706:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800370a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800370e:	2b02      	cmp	r3, #2
 8003710:	dd9d      	ble.n	800364e <KalmanFilter_TimeUpdate+0x1c6>
    for (int i = 0; i < 3; i++) {
 8003712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003716:	3301      	adds	r3, #1
 8003718:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800371c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003720:	2b02      	cmp	r3, #2
 8003722:	dd90      	ble.n	8003646 <KalmanFilter_TimeUpdate+0x1be>
            }
        }
    }

    // Step 2: FPFT = FP*F'
    for (int i = 0; i < 3; i++) {
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800372a:	e069      	b.n	8003800 <KalmanFilter_TimeUpdate+0x378>
        for (int j = 0; j < 3; j++) {
 800372c:	2300      	movs	r3, #0
 800372e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003732:	e05c      	b.n	80037ee <KalmanFilter_TimeUpdate+0x366>
            FPFT[i][j] = 0.0f;
 8003734:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	33d8      	adds	r3, #216	@ 0xd8
 8003748:	443b      	add	r3, r7
 800374a:	3bcc      	subs	r3, #204	@ 0xcc
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8003752:	2300      	movs	r3, #0
 8003754:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003758:	e040      	b.n	80037dc <KalmanFilter_TimeUpdate+0x354>
                FPFT[i][j] += FP[i][k] * F[j][k];  // F'[k][j] = F[j][k]
 800375a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800375e:	4613      	mov	r3, r2
 8003760:	005b      	lsls	r3, r3, #1
 8003762:	4413      	add	r3, r2
 8003764:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	33d8      	adds	r3, #216	@ 0xd8
 800376e:	443b      	add	r3, r7
 8003770:	3bcc      	subs	r3, #204	@ 0xcc
 8003772:	ed93 7a00 	vldr	s14, [r3]
 8003776:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800377a:	4613      	mov	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	4413      	add	r3, r2
 8003780:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003784:	4413      	add	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	33d8      	adds	r3, #216	@ 0xd8
 800378a:	443b      	add	r3, r7
 800378c:	3ba8      	subs	r3, #168	@ 0xa8
 800378e:	edd3 6a00 	vldr	s13, [r3]
 8003792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003796:	4613      	mov	r3, r2
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	4413      	add	r3, r2
 800379c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037a0:	4413      	add	r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	33d8      	adds	r3, #216	@ 0xd8
 80037a6:	443b      	add	r3, r7
 80037a8:	3b84      	subs	r3, #132	@ 0x84
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80037ba:	4613      	mov	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	4413      	add	r3, r2
 80037c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	33d8      	adds	r3, #216	@ 0xd8
 80037ca:	443b      	add	r3, r7
 80037cc:	3bcc      	subs	r3, #204	@ 0xcc
 80037ce:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 80037d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037d6:	3301      	adds	r3, #1
 80037d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	ddba      	ble.n	800375a <KalmanFilter_TimeUpdate+0x2d2>
        for (int j = 0; j < 3; j++) {
 80037e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037e8:	3301      	adds	r3, #1
 80037ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	dd9e      	ble.n	8003734 <KalmanFilter_TimeUpdate+0x2ac>
    for (int i = 0; i < 3; i++) {
 80037f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80037fa:	3301      	adds	r3, #1
 80037fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003800:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003804:	2b02      	cmp	r3, #2
 8003806:	dd91      	ble.n	800372c <KalmanFilter_TimeUpdate+0x2a4>
            }
        }
    }

    // Step 3: P = FPFT + Q
    for (int i = 0; i < 3; i++) {
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800380e:	e03e      	b.n	800388e <KalmanFilter_TimeUpdate+0x406>
        for (int j = 0; j < 3; j++) {
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003816:	e031      	b.n	800387c <KalmanFilter_TimeUpdate+0x3f4>
            kf->P[i][j] = FPFT[i][j] + Q[i][j];
 8003818:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800381c:	4613      	mov	r3, r2
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	4413      	add	r3, r2
 8003822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	33d8      	adds	r3, #216	@ 0xd8
 800382c:	443b      	add	r3, r7
 800382e:	3bcc      	subs	r3, #204	@ 0xcc
 8003830:	ed93 7a00 	vldr	s14, [r3]
 8003834:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8003838:	4613      	mov	r3, r2
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4413      	add	r3, r2
 800383e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	33d8      	adds	r3, #216	@ 0xd8
 8003848:	443b      	add	r3, r7
 800384a:	3b60      	subs	r3, #96	@ 0x60
 800384c:	edd3 7a00 	vldr	s15, [r3]
 8003850:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003864:	4413      	add	r3, r2
 8003866:	3302      	adds	r3, #2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	3304      	adds	r3, #4
 800386e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8003872:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003876:	3301      	adds	r3, #1
 8003878:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800387c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003880:	2b02      	cmp	r3, #2
 8003882:	ddc9      	ble.n	8003818 <KalmanFilter_TimeUpdate+0x390>
    for (int i = 0; i < 3; i++) {
 8003884:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003888:	3301      	adds	r3, #1
 800388a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800388e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003892:	2b02      	cmp	r3, #2
 8003894:	ddbc      	ble.n	8003810 <KalmanFilter_TimeUpdate+0x388>
        }
    }
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	37d8      	adds	r7, #216	@ 0xd8
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <KalmanFilter_MeasurementUpdate>:
 * @brief Measurement update step of Kalman filter (correction)
 * @param kf Pointer to Kalman filter structure
 * @param altitude Measured altitude (meters)
 * @param accel Measured (corrected) acceleration (m/s^2)
 */
static void KalmanFilter_MeasurementUpdate(KalmanFilter_t *kf, float altitude, float accel) {
 80038a0:	b5b0      	push	{r4, r5, r7, lr}
 80038a2:	b0f6      	sub	sp, #472	@ 0x1d8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038aa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038ae:	6018      	str	r0, [r3, #0]
 80038b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038b4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80038b8:	ed83 0a00 	vstr	s0, [r3]
 80038bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038c0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038c4:	edc3 0a00 	vstr	s1, [r3]
    // In Mach transition region, only use acceleration measurement
    if (kf->in_mach_transition) {
 80038c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038cc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 826b 	beq.w	8003db0 <KalmanFilter_MeasurementUpdate+0x510>
        // Only use acceleration measurement
        // H = [0 0 1]
        float H[1][3] = {{0.0f, 0.0f, 1.0f}};
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80038ea:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038ee:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
        float z = accel;
 80038f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80038f6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
        float y = z - kf->x[2];  // Innovation
 8003900:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003904:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	edd3 7a02 	vldr	s15, [r3, #8]
 800390e:	ed97 7a54 	vldr	s14, [r7, #336]	@ 0x150
 8003912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003916:	edc7 7a53 	vstr	s15, [r7, #332]	@ 0x14c

        // S = H*P*H' + R
        float HP[1][3] = {0};
 800391a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	609a      	str	r2, [r3, #8]
        float S = 0.0f;
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148

        for (int i = 0; i < 3; i++) {
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8003934:	e044      	b.n	80039c0 <KalmanFilter_MeasurementUpdate+0x120>
            HP[0][i] = H[0][0]*kf->P[0][i] + H[0][1]*kf->P[1][i] + H[0][2]*kf->P[2][i];
 8003936:	ed97 7a4e 	vldr	s14, [r7, #312]	@ 0x138
 800393a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800393e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003948:	3302      	adds	r3, #2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	3304      	adds	r3, #4
 8003950:	edd3 7a00 	vldr	s15, [r3]
 8003954:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003958:	edd7 6a4f 	vldr	s13, [r7, #316]	@ 0x13c
 800395c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003960:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800396a:	3305      	adds	r3, #5
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	3304      	adds	r3, #4
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800397a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800397e:	edd7 6a50 	vldr	s13, [r7, #320]	@ 0x140
 8003982:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003986:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003990:	3308      	adds	r3, #8
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039a4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80039ae:	443b      	add	r3, r7
 80039b0:	3bac      	subs	r3, #172	@ 0xac
 80039b2:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 80039b6:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80039ba:	3301      	adds	r3, #1
 80039bc:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80039c0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	ddb6      	ble.n	8003936 <KalmanFilter_MeasurementUpdate+0x96>
        }

        S = HP[0][0]*H[0][0] + HP[0][1]*H[0][1] + HP[0][2]*H[0][2] + kf->measurement_noise_acc;
 80039c8:	ed97 7a4b 	vldr	s14, [r7, #300]	@ 0x12c
 80039cc:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 80039d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039d4:	edd7 6a4c 	vldr	s13, [r7, #304]	@ 0x130
 80039d8:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 80039dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039e4:	edd7 6a4d 	vldr	s13, [r7, #308]	@ 0x134
 80039e8:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 80039ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039f4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80039f8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003a02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a06:	edc7 7a52 	vstr	s15, [r7, #328]	@ 0x148

        // K = P*H'*S^-1
        float K[3] = {0};
 8003a0a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8003a0e:	2200      	movs	r2, #0
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
 8003a14:	609a      	str	r2, [r3, #8]
        float S_inv = 1.0f / S;
 8003a16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a1a:	ed97 7a52 	vldr	s14, [r7, #328]	@ 0x148
 8003a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a22:	edc7 7a51 	vstr	s15, [r7, #324]	@ 0x144

        for (int i = 0; i < 3; i++) {
 8003a26:	2300      	movs	r3, #0
 8003a28:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003a2c:	e04f      	b.n	8003ace <KalmanFilter_MeasurementUpdate+0x22e>
            K[i] = (kf->P[i][0]*H[0][0] + kf->P[i][1]*H[0][1] + kf->P[i][2]*H[0][2]) * S_inv;
 8003a2e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a32:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a36:	6819      	ldr	r1, [r3, #0]
 8003a38:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	330c      	adds	r3, #12
 8003a48:	ed93 7a00 	vldr	s14, [r3]
 8003a4c:	edd7 7a4e 	vldr	s15, [r7, #312]	@ 0x138
 8003a50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a54:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a58:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	4613      	mov	r3, r2
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3304      	adds	r3, #4
 8003a70:	edd3 6a00 	vldr	s13, [r3]
 8003a74:	edd7 7a4f 	vldr	s15, [r7, #316]	@ 0x13c
 8003a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a80:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003a84:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003a88:	6819      	ldr	r1, [r3, #0]
 8003a8a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8003a8e:	4613      	mov	r3, r2
 8003a90:	005b      	lsls	r3, r3, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3314      	adds	r3, #20
 8003a9a:	edd3 6a00 	vldr	s13, [r3]
 8003a9e:	edd7 7a50 	vldr	s15, [r7, #320]	@ 0x140
 8003aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aaa:	edd7 7a51 	vldr	s15, [r7, #324]	@ 0x144
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003abc:	443b      	add	r3, r7
 8003abe:	3bb8      	subs	r3, #184	@ 0xb8
 8003ac0:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003ac4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003ac8:	3301      	adds	r3, #1
 8003aca:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8003ace:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	ddab      	ble.n	8003a2e <KalmanFilter_MeasurementUpdate+0x18e>
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003adc:	e029      	b.n	8003b32 <KalmanFilter_MeasurementUpdate+0x292>
            kf->x[i] += K[i] * y;
 8003ade:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ae2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	ed93 7a00 	vldr	s14, [r3]
 8003af4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003afe:	443b      	add	r3, r7
 8003b00:	3bb8      	subs	r3, #184	@ 0xb8
 8003b02:	edd3 6a00 	vldr	s13, [r3]
 8003b06:	edd7 7a53 	vldr	s15, [r7, #332]	@ 0x14c
 8003b0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b12:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b16:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	edc3 7a00 	vstr	s15, [r3]
        for (int i = 0; i < 3; i++) {
 8003b28:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8003b32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	ddd1      	ble.n	8003ade <KalmanFilter_MeasurementUpdate+0x23e>
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8003b3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b3e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b42:	4618      	mov	r0, r3
 8003b44:	2324      	movs	r3, #36	@ 0x24
 8003b46:	461a      	mov	r2, r3
 8003b48:	2100      	movs	r1, #0
 8003b4a:	f010 f82c 	bl	8013ba6 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8003b4e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b52:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8003b56:	4618      	mov	r0, r3
 8003b58:	2324      	movs	r3, #36	@ 0x24
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	f010 f822 	bl	8013ba6 <memset>

        for (int i = 0; i < 3; i++) {
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003b68:	e062      	b.n	8003c30 <KalmanFilter_MeasurementUpdate+0x390>
            for (int j = 0; j < 3; j++) {
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003b70:	e055      	b.n	8003c1e <KalmanFilter_MeasurementUpdate+0x37e>
                KH[i][j] = K[i] * H[0][j];
 8003b72:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b7c:	443b      	add	r3, r7
 8003b7e:	3bb8      	subs	r3, #184	@ 0xb8
 8003b80:	ed93 7a00 	vldr	s14, [r3]
 8003b84:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003b8e:	443b      	add	r3, r7
 8003b90:	3ba0      	subs	r3, #160	@ 0xa0
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b9a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003b9e:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003ba2:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	edc3 7a00 	vstr	s15, [r3]
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 8003bba:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003bbe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d102      	bne.n	8003bcc <KalmanFilter_MeasurementUpdate+0x32c>
 8003bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bca:	e001      	b.n	8003bd0 <KalmanFilter_MeasurementUpdate+0x330>
 8003bcc:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 8003ebc <KalmanFilter_MeasurementUpdate+0x61c>
 8003bd0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bd4:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8003bd8:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003bdc:	4613      	mov	r3, r2
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4413      	add	r3, r2
 8003be2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	edd3 7a00 	vldr	s15, [r3]
 8003bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bf4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003bf8:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003bfc:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8003c00:	4613      	mov	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8003c0a:	4413      	add	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8003c14:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003c1e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	dda5      	ble.n	8003b72 <KalmanFilter_MeasurementUpdate+0x2d2>
        for (int i = 0; i < 3; i++) {
 8003c26:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003c30:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	dd98      	ble.n	8003b6a <KalmanFilter_MeasurementUpdate+0x2ca>
            }
        }

        for (int i = 0; i < 3; i++) {
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003c3e:	e076      	b.n	8003d2e <KalmanFilter_MeasurementUpdate+0x48e>
            for (int j = 0; j < 3; j++) {
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003c46:	e069      	b.n	8003d1c <KalmanFilter_MeasurementUpdate+0x47c>
                Pnew[i][j] = 0.0f;
 8003c48:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c4c:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003c50:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c54:	4613      	mov	r3, r2
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	4413      	add	r3, r2
 8003c5a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	440b      	add	r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003c70:	e04b      	b.n	8003d0a <KalmanFilter_MeasurementUpdate+0x46a>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 8003c72:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c76:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003c7a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c7e:	4613      	mov	r3, r2
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	4413      	add	r3, r2
 8003c84:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	ed93 7a00 	vldr	s14, [r3]
 8003c92:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003c96:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003c9a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	440b      	add	r3, r1
 8003cae:	edd3 6a00 	vldr	s13, [r3]
 8003cb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003cb6:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003cba:	6819      	ldr	r1, [r3, #0]
 8003cbc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	4413      	add	r3, r2
 8003cc6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003cca:	4413      	add	r3, r2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ce0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003ce4:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003ce8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	@ 0x1c0
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003cf6:	4413      	add	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003d00:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003d04:	3301      	adds	r3, #1
 8003d06:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8003d0a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	ddaf      	ble.n	8003c72 <KalmanFilter_MeasurementUpdate+0x3d2>
            for (int j = 0; j < 3; j++) {
 8003d12:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003d16:	3301      	adds	r3, #1
 8003d18:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003d1c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	dd91      	ble.n	8003c48 <KalmanFilter_MeasurementUpdate+0x3a8>
        for (int i = 0; i < 3; i++) {
 8003d24:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003d28:	3301      	adds	r3, #1
 8003d2a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003d2e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	dd84      	ble.n	8003c40 <KalmanFilter_MeasurementUpdate+0x3a0>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 8003d36:	2300      	movs	r3, #0
 8003d38:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003d3c:	e032      	b.n	8003da4 <KalmanFilter_MeasurementUpdate+0x504>
            for (int j = 0; j < 3; j++) {
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003d44:	e025      	b.n	8003d92 <KalmanFilter_MeasurementUpdate+0x4f2>
                kf->P[i][j] = Pnew[i][j];
 8003d46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d4a:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8003d4e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	6819      	ldr	r1, [r3, #0]
 8003d64:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003d68:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3302      	adds	r3, #2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4403      	add	r3, r0
 8003d84:	3304      	adds	r3, #4
 8003d86:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 8003d88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8003d92:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	ddd5      	ble.n	8003d46 <KalmanFilter_MeasurementUpdate+0x4a6>
        for (int i = 0; i < 3; i++) {
 8003d9a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8003da4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	ddc8      	ble.n	8003d3e <KalmanFilter_MeasurementUpdate+0x49e>
 8003dac:	f000 bcc2 	b.w	8004734 <KalmanFilter_MeasurementUpdate+0xe94>
            }
        }
    } else {
        // Use both altitude and acceleration measurements
        // H = [1 0 0; 0 0 1]
        float H[2][3] = {
 8003db0:	4b43      	ldr	r3, [pc, #268]	@ (8003ec0 <KalmanFilter_MeasurementUpdate+0x620>)
 8003db2:	f507 7484 	add.w	r4, r7, #264	@ 0x108
 8003db6:	461d      	mov	r5, r3
 8003db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003dc0:	e884 0003 	stmia.w	r4, {r0, r1}
            {1.0f, 0.0f, 0.0f},
            {0.0f, 0.0f, 1.0f}
        };

        float z[2] = {altitude, accel};
 8003dc4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dc8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003dd2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003dd6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        float y[2] = {z[0] - kf->x[0], z[1] - kf->x[2]};  // Innovation
 8003de0:	ed97 7a40 	vldr	s14, [r7, #256]	@ 0x100
 8003de4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003de8:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	edd3 7a00 	vldr	s15, [r3]
 8003df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df6:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8
 8003dfa:	ed97 7a41 	vldr	s14, [r7, #260]	@ 0x104
 8003dfe:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e02:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e10:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

        // S = H*P*H' + R
        float HP[2][3] = {0};
 8003e14:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	605a      	str	r2, [r3, #4]
 8003e1e:	609a      	str	r2, [r3, #8]
 8003e20:	60da      	str	r2, [r3, #12]
 8003e22:	611a      	str	r2, [r3, #16]
 8003e24:	615a      	str	r2, [r3, #20]
        float S[2][2] = {0};
 8003e26:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003e2e:	461a      	mov	r2, r3
 8003e30:	2300      	movs	r3, #0
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	6053      	str	r3, [r2, #4]
 8003e36:	6093      	str	r3, [r2, #8]
 8003e38:	60d3      	str	r3, [r2, #12]
        float R[2][2] = {
            {kf->measurement_noise_alt, 0.0f},
 8003e3a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e3e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
        float R[2][2] = {
 8003e46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e4a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e54:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e62:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
            {0.0f, kf->measurement_noise_acc}
 8003e6c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e70:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
        float R[2][2] = {
 8003e78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003e7c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003e80:	60da      	str	r2, [r3, #12]
        };

        for (int i = 0; i < 2; i++) {
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003e88:	e079      	b.n	8003f7e <KalmanFilter_MeasurementUpdate+0x6de>
            for (int j = 0; j < 3; j++) {
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003e90:	e06c      	b.n	8003f6c <KalmanFilter_MeasurementUpdate+0x6cc>
                HP[i][j] = 0.0f;
 8003e92:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ea8:	443b      	add	r3, r7
 8003eaa:	3bf8      	subs	r3, #248	@ 0xf8
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003eb8:	e04f      	b.n	8003f5a <KalmanFilter_MeasurementUpdate+0x6ba>
 8003eba:	bf00      	nop
 8003ebc:	00000000 	.word	0x00000000
 8003ec0:	08019c54 	.word	0x08019c54
 8003ec4:	358637bd 	.word	0x358637bd
                    HP[i][j] += H[i][k] * kf->P[k][j];
 8003ec8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003ecc:	4613      	mov	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003ede:	443b      	add	r3, r7
 8003ee0:	3bf8      	subs	r3, #248	@ 0xf8
 8003ee2:	ed93 7a00 	vldr	s14, [r3]
 8003ee6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003eea:	4613      	mov	r3, r2
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4413      	add	r3, r2
 8003ef0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003efc:	443b      	add	r3, r7
 8003efe:	3bd0      	subs	r3, #208	@ 0xd0
 8003f00:	edd3 6a00 	vldr	s13, [r3]
 8003f04:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f08:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8003f0c:	6819      	ldr	r1, [r3, #0]
 8003f0e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003f12:	4613      	mov	r3, r2
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3302      	adds	r3, #2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3304      	adds	r3, #4
 8003f26:	edd3 7a00 	vldr	s15, [r3]
 8003f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f32:	f8d7 21ac 	ldr.w	r2, [r7, #428]	@ 0x1ac
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f8d7 21a8 	ldr.w	r2, [r7, #424]	@ 0x1a8
 8003f40:	4413      	add	r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003f48:	443b      	add	r3, r7
 8003f4a:	3bf8      	subs	r3, #248	@ 0xf8
 8003f4c:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8003f50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003f54:	3301      	adds	r3, #1
 8003f56:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003f5a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	ddb2      	ble.n	8003ec8 <KalmanFilter_MeasurementUpdate+0x628>
            for (int j = 0; j < 3; j++) {
 8003f62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f66:	3301      	adds	r3, #1
 8003f68:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003f6c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	dd8e      	ble.n	8003e92 <KalmanFilter_MeasurementUpdate+0x5f2>
        for (int i = 0; i < 2; i++) {
 8003f74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8003f7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	dd81      	ble.n	8003e8a <KalmanFilter_MeasurementUpdate+0x5ea>
                }
            }
        }

        for (int i = 0; i < 2; i++) {
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003f8c:	e098      	b.n	80040c0 <KalmanFilter_MeasurementUpdate+0x820>
            for (int j = 0; j < 2; j++) {
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003f94:	e08a      	b.n	80040ac <KalmanFilter_MeasurementUpdate+0x80c>
                S[i][j] = 0.0f;
 8003f96:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003f9a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003f9e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fa2:	0059      	lsls	r1, r3, #1
 8003fa4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003fa8:	440b      	add	r3, r1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8003fba:	e042      	b.n	8004042 <KalmanFilter_MeasurementUpdate+0x7a2>
                    S[i][j] += HP[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8003fbc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8003fc0:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8003fc4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003fc8:	0059      	lsls	r1, r3, #1
 8003fca:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8003fce:	440b      	add	r3, r1
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	ed93 7a00 	vldr	s14, [r3]
 8003fd8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8003fdc:	4613      	mov	r3, r2
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8003fee:	443b      	add	r3, r7
 8003ff0:	3bf8      	subs	r3, #248	@ 0xf8
 8003ff2:	edd3 6a00 	vldr	s13, [r3]
 8003ff6:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004004:	4413      	add	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 800400c:	443b      	add	r3, r7
 800400e:	3bd0      	subs	r3, #208	@ 0xd0
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800401c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004020:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8004024:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004028:	0059      	lsls	r1, r3, #1
 800402a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800402e:	440b      	add	r3, r1
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004038:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 800403c:	3301      	adds	r3, #1
 800403e:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004042:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004046:	2b02      	cmp	r3, #2
 8004048:	ddb8      	ble.n	8003fbc <KalmanFilter_MeasurementUpdate+0x71c>
                }
                S[i][j] += R[i][j];
 800404a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800404e:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8004052:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004056:	0059      	lsls	r1, r3, #1
 8004058:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800405c:	440b      	add	r3, r1
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	ed93 7a00 	vldr	s14, [r3]
 8004066:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800406a:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800406e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004072:	0059      	lsls	r1, r3, #1
 8004074:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004078:	440b      	add	r3, r1
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	edd3 7a00 	vldr	s15, [r3]
 8004082:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004086:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800408a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800408e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004092:	0059      	lsls	r1, r3, #1
 8004094:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004098:	440b      	add	r3, r1
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 80040a2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80040a6:	3301      	adds	r3, #1
 80040a8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80040ac:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f77f af70 	ble.w	8003f96 <KalmanFilter_MeasurementUpdate+0x6f6>
        for (int i = 0; i < 2; i++) {
 80040b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80040ba:	3301      	adds	r3, #1
 80040bc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80040c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f77f af62 	ble.w	8003f8e <KalmanFilter_MeasurementUpdate+0x6ee>
            }
        }

        // Calculate S^-1 (inverse of 2x2 matrix)
        float det = S[0][0] * S[1][1] - S[0][1] * S[1][0];
 80040ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040d2:	ed93 7a00 	vldr	s14, [r3]
 80040d6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040de:	edd3 7a03 	vldr	s15, [r3, #12]
 80040e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040ee:	edd3 6a01 	vldr	s13, [r3, #4]
 80040f2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80040f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80040fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80040fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004106:	edc7 7a55 	vstr	s15, [r7, #340]	@ 0x154
        if (fabsf(det) < 1e-6f) {
 800410a:	edd7 7a55 	vldr	s15, [r7, #340]	@ 0x154
 800410e:	eef0 7ae7 	vabs.f32	s15, s15
 8004112:	ed1f 7a94 	vldr	s14, [pc, #-592]	@ 8003ec4 <KalmanFilter_MeasurementUpdate+0x624>
 8004116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	f100 8308 	bmi.w	8004732 <KalmanFilter_MeasurementUpdate+0xe92>
            // Matrix is singular, skip update
            return;
        }

        float S_inv[2][2] = {
            {S[1][1] / det, -S[0][1] / det},
 8004122:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800412a:	edd3 6a03 	vldr	s13, [r3, #12]
 800412e:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004132:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 8004136:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800413a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800413e:	edc3 7a00 	vstr	s15, [r3]
            {S[1][1] / det, -S[0][1] / det},
 8004142:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800414a:	edd3 7a01 	vldr	s15, [r3, #4]
 800414e:	eef1 6a67 	vneg.f32	s13, s15
 8004152:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 8004156:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800415a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800415e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004162:	edc3 7a01 	vstr	s15, [r3, #4]
            {-S[1][0] / det, S[0][0] / det}
 8004166:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800416a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800416e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004172:	eef1 6a67 	vneg.f32	s13, s15
 8004176:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800417a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800417e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004182:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004186:	edc3 7a02 	vstr	s15, [r3, #8]
            {-S[1][0] / det, S[0][0] / det}
 800418a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800418e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004192:	edd3 6a00 	vldr	s13, [r3]
 8004196:	ed97 7a55 	vldr	s14, [r7, #340]	@ 0x154
 800419a:	eec6 7a87 	vdiv.f32	s15, s13, s14
        float S_inv[2][2] = {
 800419e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80041a6:	edc3 7a03 	vstr	s15, [r3, #12]
        };

        // K = P*H'*S^-1
        float PHt[3][2] = {0};
 80041aa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041ae:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80041b2:	461a      	mov	r2, r3
 80041b4:	2300      	movs	r3, #0
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	6053      	str	r3, [r2, #4]
 80041ba:	6093      	str	r3, [r2, #8]
 80041bc:	60d3      	str	r3, [r2, #12]
 80041be:	6113      	str	r3, [r2, #16]
 80041c0:	6153      	str	r3, [r2, #20]
        float K[3][2] = {0};
 80041c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041c6:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80041ca:	461a      	mov	r2, r3
 80041cc:	2300      	movs	r3, #0
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	6053      	str	r3, [r2, #4]
 80041d2:	6093      	str	r3, [r2, #8]
 80041d4:	60d3      	str	r3, [r2, #12]
 80041d6:	6113      	str	r3, [r2, #16]
 80041d8:	6153      	str	r3, [r2, #20]

        for (int i = 0; i < 3; i++) {
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80041e0:	e06f      	b.n	80042c2 <KalmanFilter_MeasurementUpdate+0xa22>
            for (int j = 0; j < 2; j++) {
 80041e2:	2300      	movs	r3, #0
 80041e4:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80041e8:	e062      	b.n	80042b0 <KalmanFilter_MeasurementUpdate+0xa10>
                PHt[i][j] = 0.0f;
 80041ea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80041ee:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 80041f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80041f6:	0059      	lsls	r1, r3, #1
 80041f8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80041fc:	440b      	add	r3, r1
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 8004208:	2300      	movs	r3, #0
 800420a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800420e:	e046      	b.n	800429e <KalmanFilter_MeasurementUpdate+0x9fe>
                    PHt[i][j] += kf->P[i][k] * H[j][k];  // H'[k][j] = H[j][k]
 8004210:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004214:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004218:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800421c:	0059      	lsls	r1, r3, #1
 800421e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004222:	440b      	add	r3, r1
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	ed93 7a00 	vldr	s14, [r3]
 800422c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004230:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004234:	6819      	ldr	r1, [r3, #0]
 8004236:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800423a:	4613      	mov	r3, r2
 800423c:	005b      	lsls	r3, r3, #1
 800423e:	4413      	add	r3, r2
 8004240:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004244:	4413      	add	r3, r2
 8004246:	3302      	adds	r3, #2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	3304      	adds	r3, #4
 800424e:	edd3 6a00 	vldr	s13, [r3]
 8004252:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8004256:	4613      	mov	r3, r2
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	4413      	add	r3, r2
 800425c:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 8004268:	443b      	add	r3, r7
 800426a:	3bd0      	subs	r3, #208	@ 0xd0
 800426c:	edd3 7a00 	vldr	s15, [r3]
 8004270:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004278:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800427c:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004280:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004284:	0059      	lsls	r1, r3, #1
 8004286:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800428a:	440b      	add	r3, r1
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004294:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004298:	3301      	adds	r3, #1
 800429a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800429e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	ddb4      	ble.n	8004210 <KalmanFilter_MeasurementUpdate+0x970>
            for (int j = 0; j < 2; j++) {
 80042a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80042aa:	3301      	adds	r3, #1
 80042ac:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 80042b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	dd98      	ble.n	80041ea <KalmanFilter_MeasurementUpdate+0x94a>
        for (int i = 0; i < 3; i++) {
 80042b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80042bc:	3301      	adds	r3, #1
 80042be:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80042c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	dd8b      	ble.n	80041e2 <KalmanFilter_MeasurementUpdate+0x942>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80042d0:	e069      	b.n	80043a6 <KalmanFilter_MeasurementUpdate+0xb06>
            for (int j = 0; j < 2; j++) {
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80042d8:	e05c      	b.n	8004394 <KalmanFilter_MeasurementUpdate+0xaf4>
                K[i][j] = 0.0f;
 80042da:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80042de:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80042e2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80042e6:	0059      	lsls	r1, r3, #1
 80042e8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80042ec:	440b      	add	r3, r1
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80042fe:	e040      	b.n	8004382 <KalmanFilter_MeasurementUpdate+0xae2>
                    K[i][j] += PHt[i][k] * S_inv[k][j];
 8004300:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004304:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004308:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800430c:	0059      	lsls	r1, r3, #1
 800430e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004312:	440b      	add	r3, r1
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	ed93 7a00 	vldr	s14, [r3]
 800431c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004320:	f5a3 72a0 	sub.w	r2, r3, #320	@ 0x140
 8004324:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004328:	0059      	lsls	r1, r3, #1
 800432a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800432e:	440b      	add	r3, r1
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	edd3 6a00 	vldr	s13, [r3]
 8004338:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800433c:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8004340:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004344:	0059      	lsls	r1, r3, #1
 8004346:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800434a:	440b      	add	r3, r1
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	edd3 7a00 	vldr	s15, [r3]
 8004354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800435c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004360:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 8004364:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004368:	0059      	lsls	r1, r3, #1
 800436a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800436e:	440b      	add	r3, r1
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004378:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800437c:	3301      	adds	r3, #1
 800437e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004382:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004386:	2b01      	cmp	r3, #1
 8004388:	ddba      	ble.n	8004300 <KalmanFilter_MeasurementUpdate+0xa60>
            for (int j = 0; j < 2; j++) {
 800438a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800438e:	3301      	adds	r3, #1
 8004390:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004394:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004398:	2b01      	cmp	r3, #1
 800439a:	dd9e      	ble.n	80042da <KalmanFilter_MeasurementUpdate+0xa3a>
        for (int i = 0; i < 3; i++) {
 800439c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80043a0:	3301      	adds	r3, #1
 80043a2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80043a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	dd91      	ble.n	80042d2 <KalmanFilter_MeasurementUpdate+0xa32>
                }
            }
        }

        // State update: x = x + K*y
        for (int i = 0; i < 3; i++) {
 80043ae:	2300      	movs	r3, #0
 80043b0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80043b4:	e042      	b.n	800443c <KalmanFilter_MeasurementUpdate+0xb9c>
            for (int j = 0; j < 2; j++) {
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80043bc:	e035      	b.n	800442a <KalmanFilter_MeasurementUpdate+0xb8a>
                kf->x[i] += K[i][j] * y[j];
 80043be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043c2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	ed93 7a00 	vldr	s14, [r3]
 80043d4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80043d8:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80043dc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80043e0:	0059      	lsls	r1, r3, #1
 80043e2:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80043e6:	440b      	add	r3, r1
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	edd3 6a00 	vldr	s13, [r3]
 80043f0:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80043fa:	443b      	add	r3, r7
 80043fc:	3be0      	subs	r3, #224	@ 0xe0
 80043fe:	edd3 7a00 	vldr	s15, [r3]
 8004402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800440a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800440e:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 2; j++) {
 8004420:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8004424:	3301      	adds	r3, #1
 8004426:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800442a:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800442e:	2b01      	cmp	r3, #1
 8004430:	ddc5      	ble.n	80043be <KalmanFilter_MeasurementUpdate+0xb1e>
        for (int i = 0; i < 3; i++) {
 8004432:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004436:	3301      	adds	r3, #1
 8004438:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800443c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004440:	2b02      	cmp	r3, #2
 8004442:	ddb8      	ble.n	80043b6 <KalmanFilter_MeasurementUpdate+0xb16>
            }
        }

        // Covariance update: P = (I - K*H)*P
        float KH[3][3] = {0};
 8004444:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004448:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800444c:	4618      	mov	r0, r3
 800444e:	2324      	movs	r3, #36	@ 0x24
 8004450:	461a      	mov	r2, r3
 8004452:	2100      	movs	r1, #0
 8004454:	f00f fba7 	bl	8013ba6 <memset>
        float IKH[3][3];
        float Pnew[3][3] = {0};
 8004458:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800445c:	f5a3 73be 	sub.w	r3, r3, #380	@ 0x17c
 8004460:	4618      	mov	r0, r3
 8004462:	2324      	movs	r3, #36	@ 0x24
 8004464:	461a      	mov	r2, r3
 8004466:	2100      	movs	r1, #0
 8004468:	f00f fb9d 	bl	8013ba6 <memset>

        for (int i = 0; i < 3; i++) {
 800446c:	2300      	movs	r3, #0
 800446e:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8004472:	e09e      	b.n	80045b2 <KalmanFilter_MeasurementUpdate+0xd12>
            for (int j = 0; j < 3; j++) {
 8004474:	2300      	movs	r3, #0
 8004476:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800447a:	e090      	b.n	800459e <KalmanFilter_MeasurementUpdate+0xcfe>
                KH[i][j] = 0.0f;
 800447c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004480:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004484:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004488:	4613      	mov	r3, r2
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	4413      	add	r3, r2
 800448e:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 2; k++) {
 800449e:	2300      	movs	r3, #0
 80044a0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80044a4:	e045      	b.n	8004532 <KalmanFilter_MeasurementUpdate+0xc92>
                    KH[i][j] += K[i][k] * H[k][j];
 80044a6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044aa:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 80044ae:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	ed93 7a00 	vldr	s14, [r3]
 80044c6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80044ca:	f5a3 72ac 	sub.w	r2, r3, #344	@ 0x158
 80044ce:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80044d2:	0059      	lsls	r1, r3, #1
 80044d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80044d8:	440b      	add	r3, r1
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	edd3 6a00 	vldr	s13, [r3]
 80044e2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80044e6:	4613      	mov	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	4413      	add	r3, r2
 80044ec:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 80044f0:	4413      	add	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	f503 73ec 	add.w	r3, r3, #472	@ 0x1d8
 80044f8:	443b      	add	r3, r7
 80044fa:	3bd0      	subs	r3, #208	@ 0xd0
 80044fc:	edd3 7a00 	vldr	s15, [r3]
 8004500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004508:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800450c:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004510:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004514:	4613      	mov	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	4413      	add	r3, r2
 800451a:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 2; k++) {
 8004528:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800452c:	3301      	adds	r3, #1
 800452e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8004532:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8004536:	2b01      	cmp	r3, #1
 8004538:	ddb5      	ble.n	80044a6 <KalmanFilter_MeasurementUpdate+0xc06>
                }
                IKH[i][j] = (i == j ? 1.0f : 0.0f) - KH[i][j];
 800453a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800453e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004542:	429a      	cmp	r2, r3
 8004544:	d102      	bne.n	800454c <KalmanFilter_MeasurementUpdate+0xcac>
 8004546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800454a:	e001      	b.n	8004550 <KalmanFilter_MeasurementUpdate+0xcb0>
 800454c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 800473c <KalmanFilter_MeasurementUpdate+0xe9c>
 8004550:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004554:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8004558:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800455c:	4613      	mov	r3, r2
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	4413      	add	r3, r2
 8004562:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 8004566:	4413      	add	r3, r2
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	440b      	add	r3, r1
 800456c:	edd3 7a00 	vldr	s15, [r3]
 8004570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004574:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004578:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800457c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004580:	4613      	mov	r3, r2
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	4413      	add	r3, r2
 8004586:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800458a:	4413      	add	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	440b      	add	r3, r1
 8004590:	edc3 7a00 	vstr	s15, [r3]
            for (int j = 0; j < 3; j++) {
 8004594:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8004598:	3301      	adds	r3, #1
 800459a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800459e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	f77f af6a 	ble.w	800447c <KalmanFilter_MeasurementUpdate+0xbdc>
        for (int i = 0; i < 3; i++) {
 80045a8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80045ac:	3301      	adds	r3, #1
 80045ae:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80045b2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	f77f af5c 	ble.w	8004474 <KalmanFilter_MeasurementUpdate+0xbd4>
            }
        }

        for (int i = 0; i < 3; i++) {
 80045bc:	2300      	movs	r3, #0
 80045be:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80045c2:	e076      	b.n	80046b2 <KalmanFilter_MeasurementUpdate+0xe12>
            for (int j = 0; j < 3; j++) {
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80045ca:	e069      	b.n	80046a0 <KalmanFilter_MeasurementUpdate+0xe00>
                Pnew[i][j] = 0.0f;
 80045cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045d0:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80045d4:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 80045d8:	4613      	mov	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	4413      	add	r3, r2
 80045de:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 80045e2:	4413      	add	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]
                for (int k = 0; k < 3; k++) {
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80045f4:	e04b      	b.n	800468e <KalmanFilter_MeasurementUpdate+0xdee>
                    Pnew[i][j] += IKH[i][k] * kf->P[k][j];
 80045f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80045fa:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80045fe:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	440b      	add	r3, r1
 8004612:	ed93 7a00 	vldr	s14, [r3]
 8004616:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800461a:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 800461e:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004622:	4613      	mov	r3, r2
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	4413      	add	r3, r2
 8004628:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	edd3 6a00 	vldr	s13, [r3]
 8004636:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800463a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004644:	4613      	mov	r3, r2
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4413      	add	r3, r2
 800464a:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800464e:	4413      	add	r3, r2
 8004650:	3302      	adds	r3, #2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	3304      	adds	r3, #4
 8004658:	edd3 7a00 	vldr	s15, [r3]
 800465c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004664:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8004668:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 800466c:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8004670:	4613      	mov	r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	4413      	add	r3, r2
 8004676:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 800467a:	4413      	add	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	edc3 7a00 	vstr	s15, [r3]
                for (int k = 0; k < 3; k++) {
 8004684:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004688:	3301      	adds	r3, #1
 800468a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800468e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004692:	2b02      	cmp	r3, #2
 8004694:	ddaf      	ble.n	80045f6 <KalmanFilter_MeasurementUpdate+0xd56>
            for (int j = 0; j < 3; j++) {
 8004696:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800469a:	3301      	adds	r3, #1
 800469c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80046a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	dd91      	ble.n	80045cc <KalmanFilter_MeasurementUpdate+0xd2c>
        for (int i = 0; i < 3; i++) {
 80046a8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80046ac:	3301      	adds	r3, #1
 80046ae:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80046b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	dd84      	ble.n	80045c4 <KalmanFilter_MeasurementUpdate+0xd24>
                }
            }
        }

        for (int i = 0; i < 3; i++) {
 80046ba:	2300      	movs	r3, #0
 80046bc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80046c0:	e032      	b.n	8004728 <KalmanFilter_MeasurementUpdate+0xe88>
            for (int j = 0; j < 3; j++) {
 80046c2:	2300      	movs	r3, #0
 80046c4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80046c8:	e025      	b.n	8004716 <KalmanFilter_MeasurementUpdate+0xe76>
                kf->P[i][j] = Pnew[i][j];
 80046ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80046ce:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 80046d2:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80046d6:	4613      	mov	r3, r2
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	4413      	add	r3, r2
 80046dc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80046ec:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 80046f6:	4613      	mov	r3, r2
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	4413      	add	r3, r2
 80046fc:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004700:	4413      	add	r3, r2
 8004702:	3302      	adds	r3, #2
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4403      	add	r3, r0
 8004708:	3304      	adds	r3, #4
 800470a:	6019      	str	r1, [r3, #0]
            for (int j = 0; j < 3; j++) {
 800470c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004710:	3301      	adds	r3, #1
 8004712:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004716:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800471a:	2b02      	cmp	r3, #2
 800471c:	ddd5      	ble.n	80046ca <KalmanFilter_MeasurementUpdate+0xe2a>
        for (int i = 0; i < 3; i++) {
 800471e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004722:	3301      	adds	r3, #1
 8004724:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8004728:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800472c:	2b02      	cmp	r3, #2
 800472e:	ddc8      	ble.n	80046c2 <KalmanFilter_MeasurementUpdate+0xe22>
 8004730:	e000      	b.n	8004734 <KalmanFilter_MeasurementUpdate+0xe94>
            return;
 8004732:	bf00      	nop
            }
        }
    }
}
 8004734:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8004738:	46bd      	mov	sp, r7
 800473a:	bdb0      	pop	{r4, r5, r7, pc}
 800473c:	00000000 	.word	0x00000000

08004740 <KalmanFilter_DetectApogee>:
/**
 * @brief Detect apogee based on velocity trend
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
static int KalmanFilter_DetectApogee(KalmanFilter_t *kf) {
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
    // Velocity is negative and magnitude is increasing
	if(kf->x[2] > 30.0){


	}
    if (kf->x[1] < 0.0f && kf->x[1] < kf->prev_velocity) {
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	edd3 7a01 	vldr	s15, [r3, #4]
 800474e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004756:	d517      	bpl.n	8004788 <KalmanFilter_DetectApogee+0x48>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	ed93 7a01 	vldr	s14, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004764:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	d50c      	bpl.n	8004788 <KalmanFilter_DetectApogee+0x48>
        kf->apogee_counter++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	641a      	str	r2, [r3, #64]	@ 0x40
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	2b04      	cmp	r3, #4
 800477e:	dd06      	ble.n	800478e <KalmanFilter_DetectApogee+0x4e>
            kf->apogee_detected = 1;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	63da      	str	r2, [r3, #60]	@ 0x3c
        if (kf->apogee_counter >= 5) {  // Confirm apogee after 5 consecutive samples
 8004786:	e002      	b.n	800478e <KalmanFilter_DetectApogee+0x4e>
        }
    } else {
        kf->apogee_counter = 0;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    kf->prev_velocity = kf->x[1];
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	645a      	str	r2, [r3, #68]	@ 0x44
    return kf->apogee_detected;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <Kalman_Get_Velocity>:
float Kalman_Get_Velocity(KalmanFilter_t *kf){
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
	return kf->x[1];
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	ee07 3a90 	vmov	s15, r3
}
 80047b6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <KalmanFilter_IsApogeeDetected>:
/**
 * @brief Check if apogee has been detected
 * @param kf Pointer to Kalman filter structure
 * @return 1 if apogee is detected, 0 otherwise
 */
int KalmanFilter_IsApogeeDetected(KalmanFilter_t *kf) {
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
    return kf->apogee_detected;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	huart_gnss = huart_gnss_;
 80047e4:	4a07      	ldr	r2, [pc, #28]	@ (8004804 <L86_GNSS_Init+0x28>)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <L86_GNSS_Init+0x28>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 80047f2:	4905      	ldr	r1, [pc, #20]	@ (8004808 <L86_GNSS_Init+0x2c>)
 80047f4:	4618      	mov	r0, r3
 80047f6:	f009 ff01 	bl	800e5fc <HAL_UART_Receive_DMA>
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200006b4 	.word	0x200006b4
 8004808:	200006b8 	.word	0x200006b8

0800480c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8004814:	4b06      	ldr	r3, [pc, #24]	@ (8004830 <HAL_UART_RxHalfCpltCallback+0x24>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	429a      	cmp	r2, r3
 800481c:	d104      	bne.n	8004828 <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 800481e:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8004822:	4804      	ldr	r0, [pc, #16]	@ (8004834 <HAL_UART_RxHalfCpltCallback+0x28>)
 8004824:	f000 f830 	bl	8004888 <process_data>
	}
}
 8004828:	bf00      	nop
 800482a:	3708      	adds	r7, #8
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	200006b4 	.word	0x200006b4
 8004834:	200006b8 	.word	0x200006b8

08004838 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8004840:	4b06      	ldr	r3, [pc, #24]	@ (800485c <HAL_UART_RxCpltCallback+0x24>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	429a      	cmp	r2, r3
 8004848:	d104      	bne.n	8004854 <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 800484a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 800484e:	4804      	ldr	r0, [pc, #16]	@ (8004860 <HAL_UART_RxCpltCallback+0x28>)
 8004850:	f000 f81a 	bl	8004888 <process_data>
	}
}
 8004854:	bf00      	nop
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	200006b4 	.word	0x200006b4
 8004860:	20000b68 	.word	0x20000b68

08004864 <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f81d 	bl	80048ac <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f89e 	bl	80049b4 <get_GPGGA_data>
	format_data(gps_data_);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f90d 	bl	8004a98 <format_data>
}
 800487e:	bf00      	nop
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <process_data>:

	HAL_UART_Transmit(huart_Seri_Port, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 8004894:	887b      	ldrh	r3, [r7, #2]
 8004896:	461a      	mov	r2, r3
 8004898:	6879      	ldr	r1, [r7, #4]
 800489a:	4803      	ldr	r0, [pc, #12]	@ (80048a8 <process_data+0x20>)
 800489c:	f00f fa29 	bl	8013cf2 <memcpy>
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	20001018 	.word	0x20001018

080048ac <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 80048ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ae:	b08d      	sub	sp, #52	@ 0x34
 80048b0:	af08      	add	r7, sp, #32
 80048b2:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 80048b4:	4937      	ldr	r1, [pc, #220]	@ (8004994 <get_GNRMC_data+0xe8>)
 80048b6:	4838      	ldr	r0, [pc, #224]	@ (8004998 <get_GNRMC_data+0xec>)
 80048b8:	f00f f97d 	bl	8013bb6 <strstr>
 80048bc:	4603      	mov	r3, r0
 80048be:	4a37      	ldr	r2, [pc, #220]	@ (800499c <get_GNRMC_data+0xf0>)
 80048c0:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == VALID)
 80048c2:	4b36      	ldr	r3, [pc, #216]	@ (800499c <get_GNRMC_data+0xf0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <get_GNRMC_data+0x32>
 80048ca:	4b34      	ldr	r3, [pc, #208]	@ (800499c <get_GNRMC_data+0xf0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	3311      	adds	r3, #17
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b41      	cmp	r3, #65	@ 0x41
 80048d4:	d103      	bne.n	80048de <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 80048d6:	4b32      	ldr	r3, [pc, #200]	@ (80049a0 <get_GNRMC_data+0xf4>)
 80048d8:	2201      	movs	r2, #1
 80048da:	701a      	strb	r2, [r3, #0]
 80048dc:	e005      	b.n	80048ea <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 80048de:	4b30      	ldr	r3, [pc, #192]	@ (80049a0 <get_GNRMC_data+0xf4>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2256      	movs	r2, #86	@ 0x56
 80048e8:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 80048ea:	4b2d      	ldr	r3, [pc, #180]	@ (80049a0 <get_GNRMC_data+0xf4>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d148      	bne.n	8004984 <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 80048f2:	2278      	movs	r2, #120	@ 0x78
 80048f4:	2100      	movs	r1, #0
 80048f6:	482b      	ldr	r0, [pc, #172]	@ (80049a4 <get_GNRMC_data+0xf8>)
 80048f8:	f00f f955 	bl	8013ba6 <memset>
		counter = 0;
 80048fc:	4b2a      	ldr	r3, [pc, #168]	@ (80049a8 <get_GNRMC_data+0xfc>)
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 8004902:	4b26      	ldr	r3, [pc, #152]	@ (800499c <get_GNRMC_data+0xf0>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a29      	ldr	r2, [pc, #164]	@ (80049ac <get_GNRMC_data+0x100>)
 8004908:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 800490a:	e011      	b.n	8004930 <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 800490c:	4b27      	ldr	r3, [pc, #156]	@ (80049ac <get_GNRMC_data+0x100>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a25      	ldr	r2, [pc, #148]	@ (80049a8 <get_GNRMC_data+0xfc>)
 8004912:	7812      	ldrb	r2, [r2, #0]
 8004914:	7819      	ldrb	r1, [r3, #0]
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <get_GNRMC_data+0xf8>)
 8004918:	5499      	strb	r1, [r3, r2]
			counter++;
 800491a:	4b23      	ldr	r3, [pc, #140]	@ (80049a8 <get_GNRMC_data+0xfc>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	3301      	adds	r3, #1
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4b21      	ldr	r3, [pc, #132]	@ (80049a8 <get_GNRMC_data+0xfc>)
 8004924:	701a      	strb	r2, [r3, #0]
			current_char++;
 8004926:	4b21      	ldr	r3, [pc, #132]	@ (80049ac <get_GNRMC_data+0x100>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	3301      	adds	r3, #1
 800492c:	4a1f      	ldr	r2, [pc, #124]	@ (80049ac <get_GNRMC_data+0x100>)
 800492e:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8004930:	4b1e      	ldr	r3, [pc, #120]	@ (80049ac <get_GNRMC_data+0x100>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b2a      	cmp	r3, #42	@ 0x2a
 8004938:	d1e8      	bne.n	800490c <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	60bb      	str	r3, [r7, #8]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f103 0c04 	add.w	ip, r3, #4
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3308      	adds	r3, #8
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	320c      	adds	r2, #12
 800494c:	68f9      	ldr	r1, [r7, #12]
 800494e:	3110      	adds	r1, #16
 8004950:	6079      	str	r1, [r7, #4]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	3014      	adds	r0, #20
 8004956:	68fc      	ldr	r4, [r7, #12]
 8004958:	3418      	adds	r4, #24
 800495a:	68fd      	ldr	r5, [r7, #12]
 800495c:	351c      	adds	r5, #28
 800495e:	68fe      	ldr	r6, [r7, #12]
 8004960:	3620      	adds	r6, #32
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	3124      	adds	r1, #36	@ 0x24
 8004966:	9107      	str	r1, [sp, #28]
 8004968:	9606      	str	r6, [sp, #24]
 800496a:	9505      	str	r5, [sp, #20]
 800496c:	9404      	str	r4, [sp, #16]
 800496e:	9003      	str	r0, [sp, #12]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	9102      	str	r1, [sp, #8]
 8004974:	9201      	str	r2, [sp, #4]
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	4663      	mov	r3, ip
 800497a:	68ba      	ldr	r2, [r7, #8]
 800497c:	490c      	ldr	r1, [pc, #48]	@ (80049b0 <get_GNRMC_data+0x104>)
 800497e:	4809      	ldr	r0, [pc, #36]	@ (80049a4 <get_GNRMC_data+0xf8>)
 8004980:	f00f f892 	bl	8013aa8 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 8004984:	4b05      	ldr	r3, [pc, #20]	@ (800499c <get_GNRMC_data+0xf0>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004992:	bf00      	nop
 8004994:	08019d30 	.word	0x08019d30
 8004998:	20001018 	.word	0x20001018
 800499c:	200014c8 	.word	0x200014c8
 80049a0:	200014d0 	.word	0x200014d0
 80049a4:	200014d8 	.word	0x200014d8
 80049a8:	20001550 	.word	0x20001550
 80049ac:	200014d4 	.word	0x200014d4
 80049b0:	08019d38 	.word	0x08019d38

080049b4 <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 80049b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049b6:	b08d      	sub	sp, #52	@ 0x34
 80049b8:	af08      	add	r7, sp, #32
 80049ba:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 80049bc:	492f      	ldr	r1, [pc, #188]	@ (8004a7c <get_GPGGA_data+0xc8>)
 80049be:	4830      	ldr	r0, [pc, #192]	@ (8004a80 <get_GPGGA_data+0xcc>)
 80049c0:	f00f f8f9 	bl	8013bb6 <strstr>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a84 <get_GPGGA_data+0xd0>)
 80049c8:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 80049ca:	4b2e      	ldr	r3, [pc, #184]	@ (8004a84 <get_GPGGA_data+0xd0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d04f      	beq.n	8004a72 <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == VALID)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	791b      	ldrb	r3, [r3, #4]
 80049d6:	2b41      	cmp	r3, #65	@ 0x41
 80049d8:	d148      	bne.n	8004a6c <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 80049da:	2278      	movs	r2, #120	@ 0x78
 80049dc:	2100      	movs	r1, #0
 80049de:	482a      	ldr	r0, [pc, #168]	@ (8004a88 <get_GPGGA_data+0xd4>)
 80049e0:	f00f f8e1 	bl	8013ba6 <memset>
			counter = 0;
 80049e4:	4b29      	ldr	r3, [pc, #164]	@ (8004a8c <get_GPGGA_data+0xd8>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 80049ea:	4b26      	ldr	r3, [pc, #152]	@ (8004a84 <get_GPGGA_data+0xd0>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a28      	ldr	r2, [pc, #160]	@ (8004a90 <get_GPGGA_data+0xdc>)
 80049f0:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 80049f2:	e011      	b.n	8004a18 <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 80049f4:	4b26      	ldr	r3, [pc, #152]	@ (8004a90 <get_GPGGA_data+0xdc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a24      	ldr	r2, [pc, #144]	@ (8004a8c <get_GPGGA_data+0xd8>)
 80049fa:	7812      	ldrb	r2, [r2, #0]
 80049fc:	7819      	ldrb	r1, [r3, #0]
 80049fe:	4b22      	ldr	r3, [pc, #136]	@ (8004a88 <get_GPGGA_data+0xd4>)
 8004a00:	5499      	strb	r1, [r3, r2]
				counter++;
 8004a02:	4b22      	ldr	r3, [pc, #136]	@ (8004a8c <get_GPGGA_data+0xd8>)
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	3301      	adds	r3, #1
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b20      	ldr	r3, [pc, #128]	@ (8004a8c <get_GPGGA_data+0xd8>)
 8004a0c:	701a      	strb	r2, [r3, #0]
				current_char++;
 8004a0e:	4b20      	ldr	r3, [pc, #128]	@ (8004a90 <get_GPGGA_data+0xdc>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3301      	adds	r3, #1
 8004a14:	4a1e      	ldr	r2, [pc, #120]	@ (8004a90 <get_GPGGA_data+0xdc>)
 8004a16:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8004a18:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <get_GPGGA_data+0xdc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a20:	d1e8      	bne.n	80049f4 <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f103 0c08 	add.w	ip, r3, #8
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	330c      	adds	r3, #12
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	3210      	adds	r2, #16
 8004a34:	68f9      	ldr	r1, [r7, #12]
 8004a36:	3114      	adds	r1, #20
 8004a38:	6079      	str	r1, [r7, #4]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	3025      	adds	r0, #37	@ 0x25
 8004a3e:	68fc      	ldr	r4, [r7, #12]
 8004a40:	3426      	adds	r4, #38	@ 0x26
 8004a42:	68fd      	ldr	r5, [r7, #12]
 8004a44:	3528      	adds	r5, #40	@ 0x28
 8004a46:	68fe      	ldr	r6, [r7, #12]
 8004a48:	362c      	adds	r6, #44	@ 0x2c
 8004a4a:	68f9      	ldr	r1, [r7, #12]
 8004a4c:	3130      	adds	r1, #48	@ 0x30
 8004a4e:	9107      	str	r1, [sp, #28]
 8004a50:	9606      	str	r6, [sp, #24]
 8004a52:	9505      	str	r5, [sp, #20]
 8004a54:	9404      	str	r4, [sp, #16]
 8004a56:	9003      	str	r0, [sp, #12]
 8004a58:	6879      	ldr	r1, [r7, #4]
 8004a5a:	9102      	str	r1, [sp, #8]
 8004a5c:	9201      	str	r2, [sp, #4]
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	4663      	mov	r3, ip
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	490b      	ldr	r1, [pc, #44]	@ (8004a94 <get_GPGGA_data+0xe0>)
 8004a66:	4808      	ldr	r0, [pc, #32]	@ (8004a88 <get_GPGGA_data+0xd4>)
 8004a68:	f00f f81e 	bl	8013aa8 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 8004a6c:	4b05      	ldr	r3, [pc, #20]	@ (8004a84 <get_GPGGA_data+0xd0>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]
	}
}
 8004a72:	bf00      	nop
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	08019d60 	.word	0x08019d60
 8004a80:	20001018 	.word	0x20001018
 8004a84:	200014cc 	.word	0x200014cc
 8004a88:	200014d8 	.word	0x200014d8
 8004a8c:	20001550 	.word	0x20001550
 8004a90:	200014d4 	.word	0x200014d4
 8004a94:	08019d68 	.word	0x08019d68

08004a98 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	791b      	ldrb	r3, [r3, #4]
 8004aa4:	2b41      	cmp	r3, #65	@ 0x41
 8004aa6:	f040 8154 	bne.w	8004d52 <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4aab      	ldr	r2, [pc, #684]	@ (8004d5c <format_data+0x2c4>)
 8004ab0:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 8004ab2:	4baa      	ldr	r3, [pc, #680]	@ (8004d5c <format_data+0x2c4>)
 8004ab4:	edd3 7a00 	vldr	s15, [r3]
 8004ab8:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 8004d60 <format_data+0x2c8>
 8004abc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ac0:	ee16 0a90 	vmov	r0, s13
 8004ac4:	f7fb fd60 	bl	8000588 <__aeabi_f2d>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	ec43 2b10 	vmov	d0, r2, r3
 8004ad0:	f013 fa16 	bl	8017f00 <floor>
 8004ad4:	ec53 2b10 	vmov	r2, r3, d0
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	f7fc f8a4 	bl	8000c28 <__aeabi_d2f>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 8004ae6:	4b9d      	ldr	r3, [pc, #628]	@ (8004d5c <format_data+0x2c4>)
 8004ae8:	ed93 7a00 	vldr	s14, [r3]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8004af2:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 8004d60 <format_data+0x2c8>
 8004af6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004afe:	4b97      	ldr	r3, [pc, #604]	@ (8004d5c <format_data+0x2c4>)
 8004b00:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8004b04:	4b95      	ldr	r3, [pc, #596]	@ (8004d5c <format_data+0x2c4>)
 8004b06:	ed93 7a00 	vldr	s14, [r3]
 8004b0a:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8004d64 <format_data+0x2cc>
 8004b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b12:	4b92      	ldr	r3, [pc, #584]	@ (8004d5c <format_data+0x2c4>)
 8004b14:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8004b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8004d5c <format_data+0x2c4>)
 8004b20:	edd3 7a00 	vldr	s15, [r3]
 8004b24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	4a8d      	ldr	r2, [pc, #564]	@ (8004d68 <format_data+0x2d0>)
 8004b34:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8004b36:	4b8c      	ldr	r3, [pc, #560]	@ (8004d68 <format_data+0x2d0>)
 8004b38:	edd3 7a00 	vldr	s15, [r3]
 8004b3c:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004d60 <format_data+0x2c8>
 8004b40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004b44:	ee16 0a90 	vmov	r0, s13
 8004b48:	f7fb fd1e 	bl	8000588 <__aeabi_f2d>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	ec43 2b10 	vmov	d0, r2, r3
 8004b54:	f013 f9d4 	bl	8017f00 <floor>
 8004b58:	ec53 2b10 	vmov	r2, r3, d0
 8004b5c:	4610      	mov	r0, r2
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f7fc f862 	bl	8000c28 <__aeabi_d2f>
 8004b64:	4602      	mov	r2, r0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 8004b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8004d68 <format_data+0x2d0>)
 8004b6c:	ed93 7a00 	vldr	s14, [r3]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8004b76:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8004d60 <format_data+0x2c8>
 8004b7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b82:	4b79      	ldr	r3, [pc, #484]	@ (8004d68 <format_data+0x2d0>)
 8004b84:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8004b88:	4b77      	ldr	r3, [pc, #476]	@ (8004d68 <format_data+0x2d0>)
 8004b8a:	ed93 7a00 	vldr	s14, [r3]
 8004b8e:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8004d64 <format_data+0x2cc>
 8004b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b96:	4b74      	ldr	r3, [pc, #464]	@ (8004d68 <format_data+0x2d0>)
 8004b98:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8004ba2:	4b71      	ldr	r3, [pc, #452]	@ (8004d68 <format_data+0x2d0>)
 8004ba4:	edd3 7a00 	vldr	s15, [r3]
 8004ba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a6d      	ldr	r2, [pc, #436]	@ (8004d6c <format_data+0x2d4>)
 8004bb8:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 8004bba:	4b6c      	ldr	r3, [pc, #432]	@ (8004d6c <format_data+0x2d4>)
 8004bbc:	edd3 7a00 	vldr	s15, [r3]
 8004bc0:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8004d70 <format_data+0x2d8>
 8004bc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004bc8:	ee16 0a90 	vmov	r0, s13
 8004bcc:	f7fb fcdc 	bl	8000588 <__aeabi_f2d>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	ec43 2b10 	vmov	d0, r2, r3
 8004bd8:	f013 f992 	bl	8017f00 <floor>
 8004bdc:	ec53 2b10 	vmov	r2, r3, d0
 8004be0:	4610      	mov	r0, r2
 8004be2:	4619      	mov	r1, r3
 8004be4:	f7fc f800 	bl	8000be8 <__aeabi_d2uiz>
 8004be8:	4603      	mov	r3, r0
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 8004bf2:	4b5e      	ldr	r3, [pc, #376]	@ (8004d6c <format_data+0x2d4>)
 8004bf4:	ed93 7a00 	vldr	s14, [r3]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bfe:	461a      	mov	r2, r3
 8004c00:	f242 7310 	movw	r3, #10000	@ 0x2710
 8004c04:	fb02 f303 	mul.w	r3, r2, r3
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c14:	4b55      	ldr	r3, [pc, #340]	@ (8004d6c <format_data+0x2d4>)
 8004c16:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c20:	3303      	adds	r3, #3
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c30:	2b17      	cmp	r3, #23
 8004c32:	d907      	bls.n	8004c44 <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c3a:	3b18      	subs	r3, #24
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 8004c44:	4b49      	ldr	r3, [pc, #292]	@ (8004d6c <format_data+0x2d4>)
 8004c46:	edd3 7a00 	vldr	s15, [r3]
 8004c4a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8004d60 <format_data+0x2c8>
 8004c4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004c52:	ee16 0a90 	vmov	r0, s13
 8004c56:	f7fb fc97 	bl	8000588 <__aeabi_f2d>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	ec43 2b10 	vmov	d0, r2, r3
 8004c62:	f013 f94d 	bl	8017f00 <floor>
 8004c66:	ec53 2b10 	vmov	r2, r3, d0
 8004c6a:	4610      	mov	r0, r2
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	f7fb ffbb 	bl	8000be8 <__aeabi_d2uiz>
 8004c72:	4603      	mov	r3, r0
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d6c <format_data+0x2d4>)
 8004c7e:	ed93 7a00 	vldr	s14, [r3]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2364      	movs	r3, #100	@ 0x64
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c9c:	4b33      	ldr	r3, [pc, #204]	@ (8004d6c <format_data+0x2d4>)
 8004c9e:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 8004ca2:	4b32      	ldr	r3, [pc, #200]	@ (8004d6c <format_data+0x2d4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb fc6e 	bl	8000588 <__aeabi_f2d>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	ec43 2b10 	vmov	d0, r2, r3
 8004cb4:	f013 f924 	bl	8017f00 <floor>
 8004cb8:	ec53 2b10 	vmov	r2, r3, d0
 8004cbc:	4610      	mov	r0, r2
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	f7fb ff92 	bl	8000be8 <__aeabi_d2uiz>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	4a28      	ldr	r2, [pc, #160]	@ (8004d74 <format_data+0x2dc>)
 8004cd4:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 8004cd6:	4b27      	ldr	r3, [pc, #156]	@ (8004d74 <format_data+0x2dc>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a27      	ldr	r2, [pc, #156]	@ (8004d78 <format_data+0x2e0>)
 8004cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce0:	0b5b      	lsrs	r3, r3, #13
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 8004cea:	4b22      	ldr	r3, [pc, #136]	@ (8004d74 <format_data+0x2dc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8004cf4:	4611      	mov	r1, r2
 8004cf6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004cfa:	fb01 f202 	mul.w	r2, r1, r2
 8004cfe:	1a9b      	subs	r3, r3, r2
 8004d00:	4a1c      	ldr	r2, [pc, #112]	@ (8004d74 <format_data+0x2dc>)
 8004d02:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8004d04:	4b1b      	ldr	r3, [pc, #108]	@ (8004d74 <format_data+0x2dc>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a1c      	ldr	r2, [pc, #112]	@ (8004d7c <format_data+0x2e4>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8004d18:	4b16      	ldr	r3, [pc, #88]	@ (8004d74 <format_data+0x2dc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8004d22:	4611      	mov	r1, r2
 8004d24:	2264      	movs	r2, #100	@ 0x64
 8004d26:	fb01 f202 	mul.w	r2, r1, r2
 8004d2a:	1a9b      	subs	r3, r3, r2
 8004d2c:	4a11      	ldr	r2, [pc, #68]	@ (8004d74 <format_data+0x2dc>)
 8004d2e:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 8004d30:	4b10      	ldr	r3, [pc, #64]	@ (8004d74 <format_data+0x2dc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20001554 	.word	0x20001554
 8004d60:	42c80000 	.word	0x42c80000
 8004d64:	42700000 	.word	0x42700000
 8004d68:	20001558 	.word	0x20001558
 8004d6c:	2000155c 	.word	0x2000155c
 8004d70:	461c4000 	.word	0x461c4000
 8004d74:	20001560 	.word	0x20001560
 8004d78:	d1b71759 	.word	0xd1b71759
 8004d7c:	51eb851f 	.word	0x51eb851f

08004d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004d84:	f002 ff8a 	bl	8007c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d88:	f000 f8d2 	bl	8004f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d8c:	f000 fbd6 	bl	800553c <MX_GPIO_Init>
  MX_DMA_Init();
 8004d90:	f000 fb8e 	bl	80054b0 <MX_DMA_Init>
  MX_I2C1_Init();
 8004d94:	f000 fa2e 	bl	80051f4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8004d98:	f000 fa5a 	bl	8005250 <MX_I2C3_Init>
  MX_TIM2_Init();
 8004d9c:	f000 fabc 	bl	8005318 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8004da0:	f000 fb32 	bl	8005408 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004da4:	f000 f930 	bl	8005008 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8004da8:	f000 fb58 	bl	800545c <MX_USART6_UART_Init>
  MX_UART4_Init();
 8004dac:	f000 fb02 	bl	80053b4 <MX_UART4_Init>
  MX_ADC2_Init();
 8004db0:	f000 f97c 	bl	80050ac <MX_ADC2_Init>
  MX_ADC3_Init();
 8004db4:	f000 f9cc 	bl	8005150 <MX_ADC3_Init>
  MX_SPI1_Init();
 8004db8:	f000 fa78 	bl	80052ac <MX_SPI1_Init>
  MX_FATFS_Init();
 8004dbc:	f00a fd9c 	bl	800f8f8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 8004dc0:	f000 faaa 	bl	8005318 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8004dc4:	484b      	ldr	r0, [pc, #300]	@ (8004ef4 <main+0x174>)
 8004dc6:	f008 fdd9 	bl	800d97c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2101      	movs	r1, #1
 8004dce:	201c      	movs	r0, #28
 8004dd0:	f003 fd09 	bl	80087e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004dd4:	201c      	movs	r0, #28
 8004dd6:	f003 fd22 	bl	800881e <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8004dda:	2201      	movs	r2, #1
 8004ddc:	2100      	movs	r1, #0
 8004dde:	2009      	movs	r0, #9
 8004de0:	f003 fd01 	bl	80087e6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8004de4:	2201      	movs	r2, #1
 8004de6:	2100      	movs	r1, #0
 8004de8:	200a      	movs	r0, #10
 8004dea:	f003 fcfc 	bl	80087e6 <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004dee:	200a      	movs	r0, #10
 8004df0:	f003 fd15 	bl	800881e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004df4:	2009      	movs	r0, #9
 8004df6:	f003 fd12 	bl	800881e <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 8004dfa:	f000 fc8b 	bl	8005714 <bme280_begin>
	HAL_Delay(1000);
 8004dfe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004e02:	f002 ffbd 	bl	8007d80 <HAL_Delay>
	bme280_config();
 8004e06:	f7fc fb41 	bl	800148c <bme280_config>
	bme280_update();
 8004e0a:	f7fc fcfb 	bl	8001804 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 8004e0e:	f000 fc99 	bl	8005744 <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 8004e12:	4839      	ldr	r0, [pc, #228]	@ (8004ef8 <main+0x178>)
 8004e14:	f7fd f980 	bl	8002118 <bmi088_config>
	get_offset(&BMI_sensor);
 8004e18:	4837      	ldr	r0, [pc, #220]	@ (8004ef8 <main+0x178>)
 8004e1a:	f7fd ff0d 	bl	8002c38 <get_offset>

	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 8004e1e:	f001 fe01 	bl	8006a24 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 8004e22:	4836      	ldr	r0, [pc, #216]	@ (8004efc <main+0x17c>)
 8004e24:	f002 f87e 	bl	8006f24 <sensor_fusion_init>
	/*==================== DWT PROFILER INITIALIZATION ====================*/
	// Initialize DWT profiler for performance monitoring
	//dwt_profiler_init();

	/* ==== LORA COMMUNICATION SETUP ==== */
    e22_config_mode(&lora_1);
 8004e28:	4835      	ldr	r0, [pc, #212]	@ (8004f00 <main+0x180>)
 8004e2a:	f7fe f8a1 	bl	8002f70 <e22_config_mode>
    HAL_Delay(20);
 8004e2e:	2014      	movs	r0, #20
 8004e30:	f002 ffa6 	bl	8007d80 <HAL_Delay>
	lora_init();
 8004e34:	f000 fc2a 	bl	800568c <lora_init>
    HAL_Delay(20);
 8004e38:	2014      	movs	r0, #20
 8004e3a:	f002 ffa1 	bl	8007d80 <HAL_Delay>
	e22_transmit_mode(&lora_1);
 8004e3e:	4830      	ldr	r0, [pc, #192]	@ (8004f00 <main+0x180>)
 8004e40:	f7fe f8aa 	bl	8002f98 <e22_transmit_mode>

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize L86 GPS/GNSS module
	HAL_UART_Transmit(&huart6, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);
 8004e44:	2364      	movs	r3, #100	@ 0x64
 8004e46:	2213      	movs	r2, #19
 8004e48:	492e      	ldr	r1, [pc, #184]	@ (8004f04 <main+0x184>)
 8004e4a:	482f      	ldr	r0, [pc, #188]	@ (8004f08 <main+0x188>)
 8004e4c:	f009 fa38 	bl	800e2c0 <HAL_UART_Transmit>
    HAL_UART_DeInit(&huart6);
 8004e50:	482d      	ldr	r0, [pc, #180]	@ (8004f08 <main+0x188>)
 8004e52:	f009 fa03 	bl	800e25c <HAL_UART_DeInit>
    huart6.Init.BaudRate = 57600;
 8004e56:	4b2c      	ldr	r3, [pc, #176]	@ (8004f08 <main+0x188>)
 8004e58:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8004e5c:	605a      	str	r2, [r3, #4]
    HAL_UART_Init(&huart6);
 8004e5e:	482a      	ldr	r0, [pc, #168]	@ (8004f08 <main+0x188>)
 8004e60:	f009 f9ac 	bl	800e1bc <HAL_UART_Init>
	HAL_DMA_Init(&hdma_usart6_rx);
 8004e64:	4829      	ldr	r0, [pc, #164]	@ (8004f0c <main+0x18c>)
 8004e66:	f003 fd03 	bl	8008870 <HAL_DMA_Init>
	L86_GNSS_Init(&huart6);
 8004e6a:	4827      	ldr	r0, [pc, #156]	@ (8004f08 <main+0x188>)
 8004e6c:	f7ff fcb6 	bl	80047dc <L86_GNSS_Init>
    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/

		//PROFILE_START(PROF_BMI088_UPDATE);
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 8004e70:	4821      	ldr	r0, [pc, #132]	@ (8004ef8 <main+0x178>)
 8004e72:	f7fd fb51 	bl	8002518 <bmi088_update>
		//PROFILE_END(PROF_BMI088_UPDATE);
		
		//PROFILE_START(PROF_BME280_UPDATE);
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 8004e76:	f7fc fcc5 	bl	8001804 <bme280_update>
		//PROFILE_END(PROF_BME280_UPDATE);


		/*PERIODIC OPERATIONS (100ms)*/
		if (tx_timer_flag_100ms >= 1) {
 8004e7a:	4b25      	ldr	r3, [pc, #148]	@ (8004f10 <main+0x190>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02d      	beq.n	8004ee0 <main+0x160>
		  tx_timer_flag_100ms = 0;
 8004e84:	4b22      	ldr	r3, [pc, #136]	@ (8004f10 <main+0x190>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	701a      	strb	r2, [r3, #0]

		  // Read magnetometer ADC values
		  //PROFILE_START(PROF_ADC_READ);
		  read_ADC();
 8004e8a:	f000 fc89 	bl	80057a0 <read_ADC>
		  //PROFILE_END(PROF_ADC_READ);

		  // Sensor fusion and flight algorithm processing
		  //PROFILE_START(PROF_SENSOR_FUSION);
		  sensor_fusion_update_kalman(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004e8e:	4a21      	ldr	r2, [pc, #132]	@ (8004f14 <main+0x194>)
 8004e90:	4919      	ldr	r1, [pc, #100]	@ (8004ef8 <main+0x178>)
 8004e92:	481a      	ldr	r0, [pc, #104]	@ (8004efc <main+0x17c>)
 8004e94:	f002 f89c 	bl	8006fd0 <sensor_fusion_update_kalman>
		  //PROFILE_END(PROF_SENSOR_FUSION);
		  
		  //PROFILE_START(PROF_FLIGHT_ALGORITHM);
		  flight_algorithm_update(&BME280_sensor, &BMI_sensor, &sensor_output);
 8004e98:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <main+0x194>)
 8004e9a:	4917      	ldr	r1, [pc, #92]	@ (8004ef8 <main+0x178>)
 8004e9c:	4817      	ldr	r0, [pc, #92]	@ (8004efc <main+0x17c>)
 8004e9e:	f7fe f88f 	bl	8002fc0 <flight_algorithm_update>
		  //PROFILE_END(PROF_FLIGHT_ALGORITHM);
		  
		  // Update GPS/GNSS data
		  //PROFILE_START(PROF_GNSS_UPDATE);
		  L86_GNSS_Update(&gnss_data);
 8004ea2:	481d      	ldr	r0, [pc, #116]	@ (8004f18 <main+0x198>)
 8004ea4:	f7ff fcde 	bl	8004864 <L86_GNSS_Update>
		  //PROFILE_END(PROF_GNSS_UPDATE);

		  // Packet compose
		  //PROFILE_START(PROF_PACKET_COMPOSE);
		  addDataPacketNormal(&BME280_sensor, &BMI_sensor, &sensor_output, &gnss_data, hmc1021_gauss, voltage_V, current_mA);
 8004ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f1c <main+0x19c>)
 8004eaa:	edd3 7a00 	vldr	s15, [r3]
 8004eae:	4b1c      	ldr	r3, [pc, #112]	@ (8004f20 <main+0x1a0>)
 8004eb0:	ed93 7a00 	vldr	s14, [r3]
 8004eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f24 <main+0x1a4>)
 8004eb6:	edd3 6a00 	vldr	s13, [r3]
 8004eba:	eeb0 1a66 	vmov.f32	s2, s13
 8004ebe:	eef0 0a47 	vmov.f32	s1, s14
 8004ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ec6:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <main+0x198>)
 8004ec8:	4a12      	ldr	r2, [pc, #72]	@ (8004f14 <main+0x194>)
 8004eca:	490b      	ldr	r1, [pc, #44]	@ (8004ef8 <main+0x178>)
 8004ecc:	480b      	ldr	r0, [pc, #44]	@ (8004efc <main+0x17c>)
 8004ece:	f000 fdc5 	bl	8005a5c <addDataPacketNormal>
		  //PROFILE_END(PROF_PACKET_COMPOSE);
		  
		  // Send telemetry packet via DMA (non-blocking)
		  //PROFILE_START(PROF_UART2_SEND);
		  uart2_send_packet_dma((uint8_t*)normal_paket, 50);
 8004ed2:	2132      	movs	r1, #50	@ 0x32
 8004ed4:	4814      	ldr	r0, [pc, #80]	@ (8004f28 <main+0x1a8>)
 8004ed6:	f000 fd77 	bl	80059c8 <uart2_send_packet_dma>
		  //PROFILE_END(PROF_UART2_SEND);
		  
		  log_normal_packet_data(normal_paket);
 8004eda:	4813      	ldr	r0, [pc, #76]	@ (8004f28 <main+0x1a8>)
 8004edc:	f7fd ff4e 	bl	8002d7c <log_normal_packet_data>

		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 10) {
 8004ee0:	4b12      	ldr	r3, [pc, #72]	@ (8004f2c <main+0x1ac>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	d9c2      	bls.n	8004e70 <main+0xf0>
		  tx_timer_flag_1s = 0;
 8004eea:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <main+0x1ac>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	701a      	strb	r2, [r3, #0]
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 8004ef0:	e7be      	b.n	8004e70 <main+0xf0>
 8004ef2:	bf00      	nop
 8004ef4:	2000179c 	.word	0x2000179c
 8004ef8:	20001a20 	.word	0x20001a20
 8004efc:	200019dc 	.word	0x200019dc
 8004f00:	20001b40 	.word	0x20001b40
 8004f04:	08019d94 	.word	0x08019d94
 8004f08:	20001874 	.word	0x20001874
 8004f0c:	2000197c 	.word	0x2000197c
 8004f10:	20001b62 	.word	0x20001b62
 8004f14:	20001ab8 	.word	0x20001ab8
 8004f18:	20001af8 	.word	0x20001af8
 8004f1c:	20001b74 	.word	0x20001b74
 8004f20:	20001b6c 	.word	0x20001b6c
 8004f24:	20001b68 	.word	0x20001b68
 8004f28:	20001b80 	.word	0x20001b80
 8004f2c:	20001b63 	.word	0x20001b63

08004f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b094      	sub	sp, #80	@ 0x50
 8004f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004f36:	f107 031c 	add.w	r3, r7, #28
 8004f3a:	2234      	movs	r2, #52	@ 0x34
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f00e fe31 	bl	8013ba6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004f44:	f107 0308 	add.w	r3, r7, #8
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f54:	2300      	movs	r3, #0
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <SystemClock_Config+0xd0>)
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	4a28      	ldr	r2, [pc, #160]	@ (8005000 <SystemClock_Config+0xd0>)
 8004f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f64:	4b26      	ldr	r3, [pc, #152]	@ (8005000 <SystemClock_Config+0xd0>)
 8004f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f70:	2300      	movs	r3, #0
 8004f72:	603b      	str	r3, [r7, #0]
 8004f74:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <SystemClock_Config+0xd4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a22      	ldr	r2, [pc, #136]	@ (8005004 <SystemClock_Config+0xd4>)
 8004f7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <SystemClock_Config+0xd4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004f94:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f96:	2302      	movs	r3, #2
 8004f98:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004fa0:	2308      	movs	r3, #8
 8004fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004fa4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8004fa8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004faa:	2302      	movs	r3, #2
 8004fac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004fb6:	f107 031c 	add.w	r3, r7, #28
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f007 fd9e 	bl	800cafc <HAL_RCC_OscConfig>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8004fc6:	f000 fd1b 	bl	8005a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004fca:	230f      	movs	r3, #15
 8004fcc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004fce:	2302      	movs	r3, #2
 8004fd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004fd6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004fda:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004fe0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004fe2:	f107 0308 	add.w	r3, r7, #8
 8004fe6:	2105      	movs	r1, #5
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f007 fa3d 	bl	800c468 <HAL_RCC_ClockConfig>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004ff4:	f000 fd04 	bl	8005a00 <Error_Handler>
  }
}
 8004ff8:	bf00      	nop
 8004ffa:	3750      	adds	r7, #80	@ 0x50
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40023800 	.word	0x40023800
 8005004:	40007000 	.word	0x40007000

08005008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800500e:	463b      	mov	r3, r7
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	609a      	str	r2, [r3, #8]
 8005018:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800501a:	4b21      	ldr	r3, [pc, #132]	@ (80050a0 <MX_ADC1_Init+0x98>)
 800501c:	4a21      	ldr	r2, [pc, #132]	@ (80050a4 <MX_ADC1_Init+0x9c>)
 800501e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005020:	4b1f      	ldr	r3, [pc, #124]	@ (80050a0 <MX_ADC1_Init+0x98>)
 8005022:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005026:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005028:	4b1d      	ldr	r3, [pc, #116]	@ (80050a0 <MX_ADC1_Init+0x98>)
 800502a:	2200      	movs	r2, #0
 800502c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800502e:	4b1c      	ldr	r3, [pc, #112]	@ (80050a0 <MX_ADC1_Init+0x98>)
 8005030:	2200      	movs	r2, #0
 8005032:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005034:	4b1a      	ldr	r3, [pc, #104]	@ (80050a0 <MX_ADC1_Init+0x98>)
 8005036:	2200      	movs	r2, #0
 8005038:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800503a:	4b19      	ldr	r3, [pc, #100]	@ (80050a0 <MX_ADC1_Init+0x98>)
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005042:	4b17      	ldr	r3, [pc, #92]	@ (80050a0 <MX_ADC1_Init+0x98>)
 8005044:	2200      	movs	r2, #0
 8005046:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005048:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <MX_ADC1_Init+0x98>)
 800504a:	4a17      	ldr	r2, [pc, #92]	@ (80050a8 <MX_ADC1_Init+0xa0>)
 800504c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800504e:	4b14      	ldr	r3, [pc, #80]	@ (80050a0 <MX_ADC1_Init+0x98>)
 8005050:	2200      	movs	r2, #0
 8005052:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005054:	4b12      	ldr	r3, [pc, #72]	@ (80050a0 <MX_ADC1_Init+0x98>)
 8005056:	2201      	movs	r2, #1
 8005058:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800505a:	4b11      	ldr	r3, [pc, #68]	@ (80050a0 <MX_ADC1_Init+0x98>)
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005062:	4b0f      	ldr	r3, [pc, #60]	@ (80050a0 <MX_ADC1_Init+0x98>)
 8005064:	2201      	movs	r2, #1
 8005066:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005068:	480d      	ldr	r0, [pc, #52]	@ (80050a0 <MX_ADC1_Init+0x98>)
 800506a:	f002 fead 	bl	8007dc8 <HAL_ADC_Init>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005074:	f000 fcc4 	bl	8005a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005078:	2309      	movs	r3, #9
 800507a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800507c:	2301      	movs	r3, #1
 800507e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8005080:	2301      	movs	r3, #1
 8005082:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005084:	463b      	mov	r3, r7
 8005086:	4619      	mov	r1, r3
 8005088:	4805      	ldr	r0, [pc, #20]	@ (80050a0 <MX_ADC1_Init+0x98>)
 800508a:	f003 f87f 	bl	800818c <HAL_ADC_ConfigChannel>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005094:	f000 fcb4 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005098:	bf00      	nop
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	20001564 	.word	0x20001564
 80050a4:	40012000 	.word	0x40012000
 80050a8:	0f000001 	.word	0x0f000001

080050ac <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80050b2:	463b      	mov	r3, r7
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80050be:	4b21      	ldr	r3, [pc, #132]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050c0:	4a21      	ldr	r2, [pc, #132]	@ (8005148 <MX_ADC2_Init+0x9c>)
 80050c2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80050c4:	4b1f      	ldr	r3, [pc, #124]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80050ca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80050cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80050d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80050d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050da:	2200      	movs	r2, #0
 80050dc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80050de:	4b19      	ldr	r3, [pc, #100]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80050e6:	4b17      	ldr	r3, [pc, #92]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80050ec:	4b15      	ldr	r3, [pc, #84]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050ee:	4a17      	ldr	r2, [pc, #92]	@ (800514c <MX_ADC2_Init+0xa0>)
 80050f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80050f2:	4b14      	ldr	r3, [pc, #80]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80050f8:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <MX_ADC2_Init+0x98>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80050fe:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <MX_ADC2_Init+0x98>)
 8005100:	2200      	movs	r2, #0
 8005102:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005106:	4b0f      	ldr	r3, [pc, #60]	@ (8005144 <MX_ADC2_Init+0x98>)
 8005108:	2201      	movs	r2, #1
 800510a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800510c:	480d      	ldr	r0, [pc, #52]	@ (8005144 <MX_ADC2_Init+0x98>)
 800510e:	f002 fe5b 	bl	8007dc8 <HAL_ADC_Init>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d001      	beq.n	800511c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005118:	f000 fc72 	bl	8005a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800511c:	230a      	movs	r3, #10
 800511e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005120:	2301      	movs	r3, #1
 8005122:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8005124:	2301      	movs	r3, #1
 8005126:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005128:	463b      	mov	r3, r7
 800512a:	4619      	mov	r1, r3
 800512c:	4805      	ldr	r0, [pc, #20]	@ (8005144 <MX_ADC2_Init+0x98>)
 800512e:	f003 f82d 	bl	800818c <HAL_ADC_ConfigChannel>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005138:	f000 fc62 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	200015ac 	.word	0x200015ac
 8005148:	40012100 	.word	0x40012100
 800514c:	0f000001 	.word	0x0f000001

08005150 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005156:	463b      	mov	r3, r7
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	605a      	str	r2, [r3, #4]
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8005162:	4b21      	ldr	r3, [pc, #132]	@ (80051e8 <MX_ADC3_Init+0x98>)
 8005164:	4a21      	ldr	r2, [pc, #132]	@ (80051ec <MX_ADC3_Init+0x9c>)
 8005166:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005168:	4b1f      	ldr	r3, [pc, #124]	@ (80051e8 <MX_ADC3_Init+0x98>)
 800516a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800516e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8005170:	4b1d      	ldr	r3, [pc, #116]	@ (80051e8 <MX_ADC3_Init+0x98>)
 8005172:	2200      	movs	r2, #0
 8005174:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8005176:	4b1c      	ldr	r3, [pc, #112]	@ (80051e8 <MX_ADC3_Init+0x98>)
 8005178:	2200      	movs	r2, #0
 800517a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800517c:	4b1a      	ldr	r3, [pc, #104]	@ (80051e8 <MX_ADC3_Init+0x98>)
 800517e:	2200      	movs	r2, #0
 8005180:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8005182:	4b19      	ldr	r3, [pc, #100]	@ (80051e8 <MX_ADC3_Init+0x98>)
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800518a:	4b17      	ldr	r3, [pc, #92]	@ (80051e8 <MX_ADC3_Init+0x98>)
 800518c:	2200      	movs	r2, #0
 800518e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005190:	4b15      	ldr	r3, [pc, #84]	@ (80051e8 <MX_ADC3_Init+0x98>)
 8005192:	4a17      	ldr	r2, [pc, #92]	@ (80051f0 <MX_ADC3_Init+0xa0>)
 8005194:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005196:	4b14      	ldr	r3, [pc, #80]	@ (80051e8 <MX_ADC3_Init+0x98>)
 8005198:	2200      	movs	r2, #0
 800519a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800519c:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <MX_ADC3_Init+0x98>)
 800519e:	2201      	movs	r2, #1
 80051a0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80051a2:	4b11      	ldr	r3, [pc, #68]	@ (80051e8 <MX_ADC3_Init+0x98>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80051aa:	4b0f      	ldr	r3, [pc, #60]	@ (80051e8 <MX_ADC3_Init+0x98>)
 80051ac:	2201      	movs	r2, #1
 80051ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80051b0:	480d      	ldr	r0, [pc, #52]	@ (80051e8 <MX_ADC3_Init+0x98>)
 80051b2:	f002 fe09 	bl	8007dc8 <HAL_ADC_Init>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80051bc:	f000 fc20 	bl	8005a00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80051c0:	230b      	movs	r3, #11
 80051c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80051c4:	2301      	movs	r3, #1
 80051c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80051c8:	2301      	movs	r3, #1
 80051ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80051cc:	463b      	mov	r3, r7
 80051ce:	4619      	mov	r1, r3
 80051d0:	4805      	ldr	r0, [pc, #20]	@ (80051e8 <MX_ADC3_Init+0x98>)
 80051d2:	f002 ffdb 	bl	800818c <HAL_ADC_ConfigChannel>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80051dc:	f000 fc10 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	200015f4 	.word	0x200015f4
 80051ec:	40012200 	.word	0x40012200
 80051f0:	0f000001 	.word	0x0f000001

080051f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80051f8:	4b12      	ldr	r3, [pc, #72]	@ (8005244 <MX_I2C1_Init+0x50>)
 80051fa:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <MX_I2C1_Init+0x54>)
 80051fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80051fe:	4b11      	ldr	r3, [pc, #68]	@ (8005244 <MX_I2C1_Init+0x50>)
 8005200:	4a12      	ldr	r2, [pc, #72]	@ (800524c <MX_I2C1_Init+0x58>)
 8005202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005204:	4b0f      	ldr	r3, [pc, #60]	@ (8005244 <MX_I2C1_Init+0x50>)
 8005206:	2200      	movs	r2, #0
 8005208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800520a:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <MX_I2C1_Init+0x50>)
 800520c:	2200      	movs	r2, #0
 800520e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005210:	4b0c      	ldr	r3, [pc, #48]	@ (8005244 <MX_I2C1_Init+0x50>)
 8005212:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005216:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005218:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <MX_I2C1_Init+0x50>)
 800521a:	2200      	movs	r2, #0
 800521c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800521e:	4b09      	ldr	r3, [pc, #36]	@ (8005244 <MX_I2C1_Init+0x50>)
 8005220:	2200      	movs	r2, #0
 8005222:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005224:	4b07      	ldr	r3, [pc, #28]	@ (8005244 <MX_I2C1_Init+0x50>)
 8005226:	2200      	movs	r2, #0
 8005228:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800522a:	4b06      	ldr	r3, [pc, #24]	@ (8005244 <MX_I2C1_Init+0x50>)
 800522c:	2200      	movs	r2, #0
 800522e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005230:	4804      	ldr	r0, [pc, #16]	@ (8005244 <MX_I2C1_Init+0x50>)
 8005232:	f004 fa51 	bl	80096d8 <HAL_I2C_Init>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800523c:	f000 fbe0 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005240:	bf00      	nop
 8005242:	bd80      	pop	{r7, pc}
 8005244:	2000163c 	.word	0x2000163c
 8005248:	40005400 	.word	0x40005400
 800524c:	000186a0 	.word	0x000186a0

08005250 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005254:	4b12      	ldr	r3, [pc, #72]	@ (80052a0 <MX_I2C3_Init+0x50>)
 8005256:	4a13      	ldr	r2, [pc, #76]	@ (80052a4 <MX_I2C3_Init+0x54>)
 8005258:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800525a:	4b11      	ldr	r3, [pc, #68]	@ (80052a0 <MX_I2C3_Init+0x50>)
 800525c:	4a12      	ldr	r2, [pc, #72]	@ (80052a8 <MX_I2C3_Init+0x58>)
 800525e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005260:	4b0f      	ldr	r3, [pc, #60]	@ (80052a0 <MX_I2C3_Init+0x50>)
 8005262:	2200      	movs	r2, #0
 8005264:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005266:	4b0e      	ldr	r3, [pc, #56]	@ (80052a0 <MX_I2C3_Init+0x50>)
 8005268:	2200      	movs	r2, #0
 800526a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800526c:	4b0c      	ldr	r3, [pc, #48]	@ (80052a0 <MX_I2C3_Init+0x50>)
 800526e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005272:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005274:	4b0a      	ldr	r3, [pc, #40]	@ (80052a0 <MX_I2C3_Init+0x50>)
 8005276:	2200      	movs	r2, #0
 8005278:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800527a:	4b09      	ldr	r3, [pc, #36]	@ (80052a0 <MX_I2C3_Init+0x50>)
 800527c:	2200      	movs	r2, #0
 800527e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005280:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <MX_I2C3_Init+0x50>)
 8005282:	2200      	movs	r2, #0
 8005284:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005286:	4b06      	ldr	r3, [pc, #24]	@ (80052a0 <MX_I2C3_Init+0x50>)
 8005288:	2200      	movs	r2, #0
 800528a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800528c:	4804      	ldr	r0, [pc, #16]	@ (80052a0 <MX_I2C3_Init+0x50>)
 800528e:	f004 fa23 	bl	80096d8 <HAL_I2C_Init>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8005298:	f000 fbb2 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800529c:	bf00      	nop
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20001690 	.word	0x20001690
 80052a4:	40005c00 	.word	0x40005c00
 80052a8:	000186a0 	.word	0x000186a0

080052ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80052b0:	4b17      	ldr	r3, [pc, #92]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052b2:	4a18      	ldr	r2, [pc, #96]	@ (8005314 <MX_SPI1_Init+0x68>)
 80052b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80052b6:	4b16      	ldr	r3, [pc, #88]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80052bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80052be:	4b14      	ldr	r3, [pc, #80]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80052c4:	4b12      	ldr	r3, [pc, #72]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80052ca:	4b11      	ldr	r3, [pc, #68]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80052d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80052d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052de:	4b0c      	ldr	r3, [pc, #48]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80052ea:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052f0:	4b07      	ldr	r3, [pc, #28]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80052f6:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052f8:	220a      	movs	r2, #10
 80052fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80052fc:	4804      	ldr	r0, [pc, #16]	@ (8005310 <MX_SPI1_Init+0x64>)
 80052fe:	f007 fe9b 	bl	800d038 <HAL_SPI_Init>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005308:	f000 fb7a 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800530c:	bf00      	nop
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20001744 	.word	0x20001744
 8005314:	40013000 	.word	0x40013000

08005318 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800531e:	f107 0308 	add.w	r3, r7, #8
 8005322:	2200      	movs	r2, #0
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	605a      	str	r2, [r3, #4]
 8005328:	609a      	str	r2, [r3, #8]
 800532a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800532c:	463b      	mov	r3, r7
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005334:	4b1e      	ldr	r3, [pc, #120]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005336:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800533a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800533c:	4b1c      	ldr	r3, [pc, #112]	@ (80053b0 <MX_TIM2_Init+0x98>)
 800533e:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8005342:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005344:	4b1a      	ldr	r3, [pc, #104]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005346:	2200      	movs	r2, #0
 8005348:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800534a:	4b19      	ldr	r3, [pc, #100]	@ (80053b0 <MX_TIM2_Init+0x98>)
 800534c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005350:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005352:	4b17      	ldr	r3, [pc, #92]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005354:	2200      	movs	r2, #0
 8005356:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005358:	4b15      	ldr	r3, [pc, #84]	@ (80053b0 <MX_TIM2_Init+0x98>)
 800535a:	2200      	movs	r2, #0
 800535c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800535e:	4814      	ldr	r0, [pc, #80]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005360:	f008 fabc 	bl	800d8dc <HAL_TIM_Base_Init>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800536a:	f000 fb49 	bl	8005a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800536e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005372:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005374:	f107 0308 	add.w	r3, r7, #8
 8005378:	4619      	mov	r1, r3
 800537a:	480d      	ldr	r0, [pc, #52]	@ (80053b0 <MX_TIM2_Init+0x98>)
 800537c:	f008 fc5e 	bl	800dc3c <HAL_TIM_ConfigClockSource>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005386:	f000 fb3b 	bl	8005a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800538a:	2300      	movs	r3, #0
 800538c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005392:	463b      	mov	r3, r7
 8005394:	4619      	mov	r1, r3
 8005396:	4806      	ldr	r0, [pc, #24]	@ (80053b0 <MX_TIM2_Init+0x98>)
 8005398:	f008 fe80 	bl	800e09c <HAL_TIMEx_MasterConfigSynchronization>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80053a2:	f000 fb2d 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80053a6:	bf00      	nop
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	2000179c 	.word	0x2000179c

080053b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80053b8:	4b11      	ldr	r3, [pc, #68]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053ba:	4a12      	ldr	r2, [pc, #72]	@ (8005404 <MX_UART4_Init+0x50>)
 80053bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80053be:	4b10      	ldr	r3, [pc, #64]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80053c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80053c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80053cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80053d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053da:	220c      	movs	r2, #12
 80053dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80053de:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80053e4:	4b06      	ldr	r3, [pc, #24]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80053ea:	4805      	ldr	r0, [pc, #20]	@ (8005400 <MX_UART4_Init+0x4c>)
 80053ec:	f008 fee6 	bl	800e1bc <HAL_UART_Init>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80053f6:	f000 fb03 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80053fa:	bf00      	nop
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	200017e4 	.word	0x200017e4
 8005404:	40004c00 	.word	0x40004c00

08005408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800540c:	4b11      	ldr	r3, [pc, #68]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 800540e:	4a12      	ldr	r2, [pc, #72]	@ (8005458 <MX_USART2_UART_Init+0x50>)
 8005410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005412:	4b10      	ldr	r3, [pc, #64]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 8005414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800541a:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005420:	4b0c      	ldr	r3, [pc, #48]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 8005422:	2200      	movs	r2, #0
 8005424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005426:	4b0b      	ldr	r3, [pc, #44]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 8005428:	2200      	movs	r2, #0
 800542a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800542c:	4b09      	ldr	r3, [pc, #36]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 800542e:	220c      	movs	r2, #12
 8005430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005432:	4b08      	ldr	r3, [pc, #32]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 8005434:	2200      	movs	r2, #0
 8005436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005438:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 800543a:	2200      	movs	r2, #0
 800543c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800543e:	4805      	ldr	r0, [pc, #20]	@ (8005454 <MX_USART2_UART_Init+0x4c>)
 8005440:	f008 febc 	bl	800e1bc <HAL_UART_Init>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800544a:	f000 fad9 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800544e:	bf00      	nop
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	2000182c 	.word	0x2000182c
 8005458:	40004400 	.word	0x40004400

0800545c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005460:	4b11      	ldr	r3, [pc, #68]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 8005462:	4a12      	ldr	r2, [pc, #72]	@ (80054ac <MX_USART6_UART_Init+0x50>)
 8005464:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8005466:	4b10      	ldr	r3, [pc, #64]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 8005468:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800546c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800546e:	4b0e      	ldr	r3, [pc, #56]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 8005470:	2200      	movs	r2, #0
 8005472:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005474:	4b0c      	ldr	r3, [pc, #48]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 8005476:	2200      	movs	r2, #0
 8005478:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800547a:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 800547c:	2200      	movs	r2, #0
 800547e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005480:	4b09      	ldr	r3, [pc, #36]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 8005482:	220c      	movs	r2, #12
 8005484:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005486:	4b08      	ldr	r3, [pc, #32]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 8005488:	2200      	movs	r2, #0
 800548a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800548c:	4b06      	ldr	r3, [pc, #24]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 800548e:	2200      	movs	r2, #0
 8005490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005492:	4805      	ldr	r0, [pc, #20]	@ (80054a8 <MX_USART6_UART_Init+0x4c>)
 8005494:	f008 fe92 	bl	800e1bc <HAL_UART_Init>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800549e:	f000 faaf 	bl	8005a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80054a2:	bf00      	nop
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20001874 	.word	0x20001874
 80054ac:	40011400 	.word	0x40011400

080054b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005538 <MX_DMA_Init+0x88>)
 80054bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054be:	4a1e      	ldr	r2, [pc, #120]	@ (8005538 <MX_DMA_Init+0x88>)
 80054c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80054c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80054c6:	4b1c      	ldr	r3, [pc, #112]	@ (8005538 <MX_DMA_Init+0x88>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ce:	607b      	str	r3, [r7, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	4b18      	ldr	r3, [pc, #96]	@ (8005538 <MX_DMA_Init+0x88>)
 80054d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054da:	4a17      	ldr	r2, [pc, #92]	@ (8005538 <MX_DMA_Init+0x88>)
 80054dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80054e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80054e2:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <MX_DMA_Init+0x88>)
 80054e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80054ee:	2200      	movs	r2, #0
 80054f0:	2100      	movs	r1, #0
 80054f2:	200b      	movs	r0, #11
 80054f4:	f003 f977 	bl	80087e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80054f8:	200b      	movs	r0, #11
 80054fa:	f003 f990 	bl	800881e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80054fe:	2200      	movs	r2, #0
 8005500:	2100      	movs	r1, #0
 8005502:	200f      	movs	r0, #15
 8005504:	f003 f96f 	bl	80087e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8005508:	200f      	movs	r0, #15
 800550a:	f003 f988 	bl	800881e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800550e:	2200      	movs	r2, #0
 8005510:	2100      	movs	r1, #0
 8005512:	2011      	movs	r0, #17
 8005514:	f003 f967 	bl	80087e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005518:	2011      	movs	r0, #17
 800551a:	f003 f980 	bl	800881e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800551e:	2200      	movs	r2, #0
 8005520:	2100      	movs	r1, #0
 8005522:	203a      	movs	r0, #58	@ 0x3a
 8005524:	f003 f95f 	bl	80087e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005528:	203a      	movs	r0, #58	@ 0x3a
 800552a:	f003 f978 	bl	800881e <HAL_NVIC_EnableIRQ>

}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023800 	.word	0x40023800

0800553c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	609a      	str	r2, [r3, #8]
 800554e:	60da      	str	r2, [r3, #12]
 8005550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	4b49      	ldr	r3, [pc, #292]	@ (800567c <MX_GPIO_Init+0x140>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800555a:	4a48      	ldr	r2, [pc, #288]	@ (800567c <MX_GPIO_Init+0x140>)
 800555c:	f043 0304 	orr.w	r3, r3, #4
 8005560:	6313      	str	r3, [r2, #48]	@ 0x30
 8005562:	4b46      	ldr	r3, [pc, #280]	@ (800567c <MX_GPIO_Init+0x140>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
 8005572:	4b42      	ldr	r3, [pc, #264]	@ (800567c <MX_GPIO_Init+0x140>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	4a41      	ldr	r2, [pc, #260]	@ (800567c <MX_GPIO_Init+0x140>)
 8005578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800557c:	6313      	str	r3, [r2, #48]	@ 0x30
 800557e:	4b3f      	ldr	r3, [pc, #252]	@ (800567c <MX_GPIO_Init+0x140>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800558a:	2300      	movs	r3, #0
 800558c:	60bb      	str	r3, [r7, #8]
 800558e:	4b3b      	ldr	r3, [pc, #236]	@ (800567c <MX_GPIO_Init+0x140>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005592:	4a3a      	ldr	r2, [pc, #232]	@ (800567c <MX_GPIO_Init+0x140>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6313      	str	r3, [r2, #48]	@ 0x30
 800559a:	4b38      	ldr	r3, [pc, #224]	@ (800567c <MX_GPIO_Init+0x140>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	60bb      	str	r3, [r7, #8]
 80055a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	4b34      	ldr	r3, [pc, #208]	@ (800567c <MX_GPIO_Init+0x140>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	4a33      	ldr	r2, [pc, #204]	@ (800567c <MX_GPIO_Init+0x140>)
 80055b0:	f043 0302 	orr.w	r3, r3, #2
 80055b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80055b6:	4b31      	ldr	r3, [pc, #196]	@ (800567c <MX_GPIO_Init+0x140>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	607b      	str	r3, [r7, #4]
 80055c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 80055c2:	2200      	movs	r2, #0
 80055c4:	210c      	movs	r1, #12
 80055c6:	482e      	ldr	r0, [pc, #184]	@ (8005680 <MX_GPIO_Init+0x144>)
 80055c8:	f004 f854 	bl	8009674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80055cc:	2200      	movs	r2, #0
 80055ce:	2110      	movs	r1, #16
 80055d0:	482c      	ldr	r0, [pc, #176]	@ (8005684 <MX_GPIO_Init+0x148>)
 80055d2:	f004 f84f 	bl	8009674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80055d6:	2200      	movs	r2, #0
 80055d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80055dc:	482a      	ldr	r0, [pc, #168]	@ (8005688 <MX_GPIO_Init+0x14c>)
 80055de:	f004 f849 	bl	8009674 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 80055e2:	230c      	movs	r3, #12
 80055e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e6:	2301      	movs	r3, #1
 80055e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ee:	2300      	movs	r3, #0
 80055f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055f2:	f107 0314 	add.w	r3, r7, #20
 80055f6:	4619      	mov	r1, r3
 80055f8:	4821      	ldr	r0, [pc, #132]	@ (8005680 <MX_GPIO_Init+0x144>)
 80055fa:	f003 fdb3 	bl	8009164 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80055fe:	2310      	movs	r3, #16
 8005600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005602:	2301      	movs	r3, #1
 8005604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800560a:	2300      	movs	r3, #0
 800560c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800560e:	f107 0314 	add.w	r3, r7, #20
 8005612:	4619      	mov	r1, r3
 8005614:	481b      	ldr	r0, [pc, #108]	@ (8005684 <MX_GPIO_Init+0x148>)
 8005616:	f003 fda5 	bl	8009164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800561a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800561e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005620:	2301      	movs	r3, #1
 8005622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005628:	2303      	movs	r3, #3
 800562a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800562c:	f107 0314 	add.w	r3, r7, #20
 8005630:	4619      	mov	r1, r3
 8005632:	4815      	ldr	r0, [pc, #84]	@ (8005688 <MX_GPIO_Init+0x14c>)
 8005634:	f003 fd96 	bl	8009164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005638:	2318      	movs	r3, #24
 800563a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800563c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	4619      	mov	r1, r3
 800564c:	480e      	ldr	r0, [pc, #56]	@ (8005688 <MX_GPIO_Init+0x14c>)
 800564e:	f003 fd89 	bl	8009164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8005652:	2200      	movs	r2, #0
 8005654:	2100      	movs	r1, #0
 8005656:	2009      	movs	r0, #9
 8005658:	f003 f8c5 	bl	80087e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800565c:	2009      	movs	r0, #9
 800565e:	f003 f8de 	bl	800881e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005662:	2200      	movs	r2, #0
 8005664:	2100      	movs	r1, #0
 8005666:	200a      	movs	r0, #10
 8005668:	f003 f8bd 	bl	80087e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800566c:	200a      	movs	r0, #10
 800566e:	f003 f8d6 	bl	800881e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005672:	bf00      	nop
 8005674:	3728      	adds	r7, #40	@ 0x28
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40023800 	.word	0x40023800
 8005680:	40020800 	.word	0x40020800
 8005684:	40020000 	.word	0x40020000
 8005688:	40020400 	.word	0x40020400

0800568c <lora_init>:
/**
 * @brief Initialize LoRa E22 module
 * @note Configures LoRa module for telemetry transmission
 */
void lora_init(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
	lora_1.baud_rate 		= 	E22_BAUD_RATE_115200;
 8005690:	4b1e      	ldr	r3, [pc, #120]	@ (800570c <lora_init+0x80>)
 8005692:	2207      	movs	r2, #7
 8005694:	73da      	strb	r2, [r3, #15]
	lora_1.parity_bit		=	E22_PARITY_8N1;
 8005696:	4b1d      	ldr	r3, [pc, #116]	@ (800570c <lora_init+0x80>)
 8005698:	2200      	movs	r2, #0
 800569a:	741a      	strb	r2, [r3, #16]
	lora_1.air_rate			=	E22_AIR_DATA_RATE_38400;
 800569c:	4b1b      	ldr	r3, [pc, #108]	@ (800570c <lora_init+0x80>)
 800569e:	2206      	movs	r2, #6
 80056a0:	745a      	strb	r2, [r3, #17]
	lora_1.packet_size		=	E22_PACKET_SIZE_64;
 80056a2:	4b1a      	ldr	r3, [pc, #104]	@ (800570c <lora_init+0x80>)
 80056a4:	2202      	movs	r2, #2
 80056a6:	749a      	strb	r2, [r3, #18]
	lora_1.rssi_noise		=	E22_RSSI_NOISE_DISABLE;
 80056a8:	4b18      	ldr	r3, [pc, #96]	@ (800570c <lora_init+0x80>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	74da      	strb	r2, [r3, #19]
	lora_1.power			=	E22_TRANSMITTING_POWER_22;
 80056ae:	4b17      	ldr	r3, [pc, #92]	@ (800570c <lora_init+0x80>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	751a      	strb	r2, [r3, #20]
	lora_1.rssi_enable		=	E22_ENABLE_RSSI_DISABLE;
 80056b4:	4b15      	ldr	r3, [pc, #84]	@ (800570c <lora_init+0x80>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	759a      	strb	r2, [r3, #22]
	lora_1.mode				= 	E22_TRANSMISSION_MODE_TRANSPARENT;
 80056ba:	4b14      	ldr	r3, [pc, #80]	@ (800570c <lora_init+0x80>)
 80056bc:	2200      	movs	r2, #0
 80056be:	75da      	strb	r2, [r3, #23]
	lora_1.repeater_func	=	E22_REPEATER_FUNC_DISABLE;
 80056c0:	4b12      	ldr	r3, [pc, #72]	@ (800570c <lora_init+0x80>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	761a      	strb	r2, [r3, #24]
	lora_1.lbt				=	E22_LBT_DISABLE;
 80056c6:	4b11      	ldr	r3, [pc, #68]	@ (800570c <lora_init+0x80>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	765a      	strb	r2, [r3, #25]
	lora_1.wor				=	E22_WOR_RECEIVER;
 80056cc:	4b0f      	ldr	r3, [pc, #60]	@ (800570c <lora_init+0x80>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	769a      	strb	r2, [r3, #26]
	lora_1.wor_cycle		=	E22_WOR_CYCLE_1000;
 80056d2:	4b0e      	ldr	r3, [pc, #56]	@ (800570c <lora_init+0x80>)
 80056d4:	2201      	movs	r2, #1
 80056d6:	76da      	strb	r2, [r3, #27]
	lora_1.channel			=	25;
 80056d8:	4b0c      	ldr	r3, [pc, #48]	@ (800570c <lora_init+0x80>)
 80056da:	2219      	movs	r2, #25
 80056dc:	755a      	strb	r2, [r3, #21]

	e22_init(&lora_1, &huart4);
 80056de:	490c      	ldr	r1, [pc, #48]	@ (8005710 <lora_init+0x84>)
 80056e0:	480a      	ldr	r0, [pc, #40]	@ (800570c <lora_init+0x80>)
 80056e2:	f7fd fba7 	bl	8002e34 <e22_init>

	HAL_UART_DeInit(&huart4);
 80056e6:	480a      	ldr	r0, [pc, #40]	@ (8005710 <lora_init+0x84>)
 80056e8:	f008 fdb8 	bl	800e25c <HAL_UART_DeInit>
	HAL_Delay(20);
 80056ec:	2014      	movs	r0, #20
 80056ee:	f002 fb47 	bl	8007d80 <HAL_Delay>
	huart4.Init.BaudRate = 115200;
 80056f2:	4b07      	ldr	r3, [pc, #28]	@ (8005710 <lora_init+0x84>)
 80056f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056f8:	605a      	str	r2, [r3, #4]
	HAL_Delay(20);
 80056fa:	2014      	movs	r0, #20
 80056fc:	f002 fb40 	bl	8007d80 <HAL_Delay>
	HAL_UART_Init(&huart4);
 8005700:	4803      	ldr	r0, [pc, #12]	@ (8005710 <lora_init+0x84>)
 8005702:	f008 fd5b 	bl	800e1bc <HAL_UART_Init>

}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20001b40 	.word	0x20001b40
 8005710:	200017e4 	.word	0x200017e4

08005714 <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_2;
 8005718:	4b08      	ldr	r3, [pc, #32]	@ (800573c <bme280_begin+0x28>)
 800571a:	2201      	movs	r2, #1
 800571c:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 800571e:	4b07      	ldr	r3, [pc, #28]	@ (800573c <bme280_begin+0x28>)
 8005720:	2203      	movs	r2, #3
 8005722:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_4;
 8005724:	4b05      	ldr	r3, [pc, #20]	@ (800573c <bme280_begin+0x28>)
 8005726:	2203      	movs	r2, #3
 8005728:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_125;
 800572a:	4b04      	ldr	r3, [pc, #16]	@ (800573c <bme280_begin+0x28>)
 800572c:	2202      	movs	r2, #2
 800572e:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 8005730:	4903      	ldr	r1, [pc, #12]	@ (8005740 <bme280_begin+0x2c>)
 8005732:	4802      	ldr	r0, [pc, #8]	@ (800573c <bme280_begin+0x28>)
 8005734:	f7fc f82e 	bl	8001794 <bme280_init>
}
 8005738:	bf00      	nop
 800573a:	bd80      	pop	{r7, pc}
 800573c:	200019dc 	.word	0x200019dc
 8005740:	20001690 	.word	0x20001690

08005744 <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8005748:	4b13      	ldr	r3, [pc, #76]	@ (8005798 <bmi_imu_init+0x54>)
 800574a:	2208      	movs	r2, #8
 800574c:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 800574e:	4b12      	ldr	r3, [pc, #72]	@ (8005798 <bmi_imu_init+0x54>)
 8005750:	2209      	movs	r2, #9
 8005752:	72da      	strb	r2, [r3, #11]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8005754:	4b10      	ldr	r3, [pc, #64]	@ (8005798 <bmi_imu_init+0x54>)
 8005756:	2200      	movs	r2, #0
 8005758:	721a      	strb	r2, [r3, #8]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 800575a:	4b0f      	ldr	r3, [pc, #60]	@ (8005798 <bmi_imu_init+0x54>)
 800575c:	2203      	movs	r2, #3
 800575e:	725a      	strb	r2, [r3, #9]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8005760:	4b0d      	ldr	r3, [pc, #52]	@ (8005798 <bmi_imu_init+0x54>)
 8005762:	2202      	movs	r2, #2
 8005764:	735a      	strb	r2, [r3, #13]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8005766:	4b0c      	ldr	r3, [pc, #48]	@ (8005798 <bmi_imu_init+0x54>)
 8005768:	2200      	movs	r2, #0
 800576a:	739a      	strb	r2, [r3, #14]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 800576c:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <bmi_imu_init+0x54>)
 800576e:	2200      	movs	r2, #0
 8005770:	731a      	strb	r2, [r3, #12]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 8005772:	4b09      	ldr	r3, [pc, #36]	@ (8005798 <bmi_imu_init+0x54>)
 8005774:	2209      	movs	r2, #9
 8005776:	751a      	strb	r2, [r3, #20]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 8005778:	4b07      	ldr	r3, [pc, #28]	@ (8005798 <bmi_imu_init+0x54>)
 800577a:	220a      	movs	r2, #10
 800577c:	755a      	strb	r2, [r3, #21]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 800577e:	4b06      	ldr	r3, [pc, #24]	@ (8005798 <bmi_imu_init+0x54>)
 8005780:	4a06      	ldr	r2, [pc, #24]	@ (800579c <bmi_imu_init+0x58>)
 8005782:	611a      	str	r2, [r3, #16]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 8005784:	4b04      	ldr	r3, [pc, #16]	@ (8005798 <bmi_imu_init+0x54>)
 8005786:	2200      	movs	r2, #0
 8005788:	619a      	str	r2, [r3, #24]

  return bmi088_init(&BMI_sensor);
 800578a:	4803      	ldr	r0, [pc, #12]	@ (8005798 <bmi_imu_init+0x54>)
 800578c:	f7fc fc62 	bl	8002054 <bmi088_init>
 8005790:	4603      	mov	r3, r0
}
 8005792:	4618      	mov	r0, r3
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20001a20 	.word	0x20001a20
 800579c:	2000163c 	.word	0x2000163c

080057a0 <read_ADC>:
/**
 * @brief Read HMC1021 magnetometer ADC values
 * @note Converts ADC readings to magnetic field strength and transmits data
 */
void read_ADC()
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	af00      	add	r7, sp, #0
    static uint16_t adc1_raw = 0;  // ADC1 değeri (Channel 9)
    static uint16_t adc2_raw = 0;  // ADC2 değeri (Channel 10)
    static uint16_t adc3_raw = 0;  // ADC3 değeri (Channel 11)

    // ADC1 okuma
    HAL_ADC_Start(&hadc1);
 80057a4:	483d      	ldr	r0, [pc, #244]	@ (800589c <read_ADC+0xfc>)
 80057a6:	f002 fb53 	bl	8007e50 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK) {
 80057aa:	2105      	movs	r1, #5
 80057ac:	483b      	ldr	r0, [pc, #236]	@ (800589c <read_ADC+0xfc>)
 80057ae:	f002 fc54 	bl	800805a <HAL_ADC_PollForConversion>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <read_ADC+0x26>
        adc1_raw = HAL_ADC_GetValue(&hadc1);
 80057b8:	4838      	ldr	r0, [pc, #224]	@ (800589c <read_ADC+0xfc>)
 80057ba:	f002 fcd9 	bl	8008170 <HAL_ADC_GetValue>
 80057be:	4603      	mov	r3, r0
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	4b37      	ldr	r3, [pc, #220]	@ (80058a0 <read_ADC+0x100>)
 80057c4:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc1);
 80057c6:	4835      	ldr	r0, [pc, #212]	@ (800589c <read_ADC+0xfc>)
 80057c8:	f002 fc14 	bl	8007ff4 <HAL_ADC_Stop>


    // ADC2 okuma
    HAL_ADC_Start(&hadc2);
 80057cc:	4835      	ldr	r0, [pc, #212]	@ (80058a4 <read_ADC+0x104>)
 80057ce:	f002 fb3f 	bl	8007e50 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc2, 5) == HAL_OK) {
 80057d2:	2105      	movs	r1, #5
 80057d4:	4833      	ldr	r0, [pc, #204]	@ (80058a4 <read_ADC+0x104>)
 80057d6:	f002 fc40 	bl	800805a <HAL_ADC_PollForConversion>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <read_ADC+0x4e>
        adc2_raw = HAL_ADC_GetValue(&hadc2);
 80057e0:	4830      	ldr	r0, [pc, #192]	@ (80058a4 <read_ADC+0x104>)
 80057e2:	f002 fcc5 	bl	8008170 <HAL_ADC_GetValue>
 80057e6:	4603      	mov	r3, r0
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	4b2f      	ldr	r3, [pc, #188]	@ (80058a8 <read_ADC+0x108>)
 80057ec:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc2);
 80057ee:	482d      	ldr	r0, [pc, #180]	@ (80058a4 <read_ADC+0x104>)
 80057f0:	f002 fc00 	bl	8007ff4 <HAL_ADC_Stop>


    // ADC3 okuma
    HAL_ADC_Start(&hadc3);
 80057f4:	482d      	ldr	r0, [pc, #180]	@ (80058ac <read_ADC+0x10c>)
 80057f6:	f002 fb2b 	bl	8007e50 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc3, 5) == HAL_OK) {
 80057fa:	2105      	movs	r1, #5
 80057fc:	482b      	ldr	r0, [pc, #172]	@ (80058ac <read_ADC+0x10c>)
 80057fe:	f002 fc2c 	bl	800805a <HAL_ADC_PollForConversion>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d106      	bne.n	8005816 <read_ADC+0x76>
        adc3_raw = HAL_ADC_GetValue(&hadc3);
 8005808:	4828      	ldr	r0, [pc, #160]	@ (80058ac <read_ADC+0x10c>)
 800580a:	f002 fcb1 	bl	8008170 <HAL_ADC_GetValue>
 800580e:	4603      	mov	r3, r0
 8005810:	b29a      	uxth	r2, r3
 8005812:	4b27      	ldr	r3, [pc, #156]	@ (80058b0 <read_ADC+0x110>)
 8005814:	801a      	strh	r2, [r3, #0]
    }
    HAL_ADC_Stop(&hadc3);
 8005816:	4825      	ldr	r0, [pc, #148]	@ (80058ac <read_ADC+0x10c>)
 8005818:	f002 fbec 	bl	8007ff4 <HAL_ADC_Stop>


    // Kalibrasyonlu değerleri hesapla
    hmc1021_voltage = (adc1_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 800581c:	4b20      	ldr	r3, [pc, #128]	@ (80058a0 <read_ADC+0x100>)
 800581e:	881b      	ldrh	r3, [r3, #0]
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005828:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80058b4 <read_ADC+0x114>
 800582c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005830:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80058b8 <read_ADC+0x118>
 8005834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005838:	4b20      	ldr	r3, [pc, #128]	@ (80058bc <read_ADC+0x11c>)
 800583a:	edc3 7a00 	vstr	s15, [r3]
    voltage_V = (adc2_raw * 3.3f) / 4096.0f;  // 3.3V referans, 12-bit ADC
 800583e:	4b1a      	ldr	r3, [pc, #104]	@ (80058a8 <read_ADC+0x108>)
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	ee07 3a90 	vmov	s15, r3
 8005846:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800584a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80058b4 <read_ADC+0x114>
 800584e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005852:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80058b8 <read_ADC+0x118>
 8005856:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800585a:	4b19      	ldr	r3, [pc, #100]	@ (80058c0 <read_ADC+0x120>)
 800585c:	edc3 7a00 	vstr	s15, [r3]
    current_mA = (adc3_raw * 3.3f) / 4096.0f; // Gerekirse akım sensörüne göre kalibre edin
 8005860:	4b13      	ldr	r3, [pc, #76]	@ (80058b0 <read_ADC+0x110>)
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	ee07 3a90 	vmov	s15, r3
 8005868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800586c:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80058b4 <read_ADC+0x114>
 8005870:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005874:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80058b8 <read_ADC+0x118>
 8005878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800587c:	4b11      	ldr	r3, [pc, #68]	@ (80058c4 <read_ADC+0x124>)
 800587e:	edc3 7a00 	vstr	s15, [r3]
    hmc1021_gauss = (hmc1021_voltage - 1.65f) / 1.0f;  // 1V/Gauss sensitivity
 8005882:	4b0e      	ldr	r3, [pc, #56]	@ (80058bc <read_ADC+0x11c>)
 8005884:	edd3 7a00 	vldr	s15, [r3]
 8005888:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80058c8 <read_ADC+0x128>
 800588c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005890:	4b0e      	ldr	r3, [pc, #56]	@ (80058cc <read_ADC+0x12c>)
 8005892:	edc3 7a00 	vstr	s15, [r3]

}
 8005896:	bf00      	nop
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20001564 	.word	0x20001564
 80058a0:	20001b78 	.word	0x20001b78
 80058a4:	200015ac 	.word	0x200015ac
 80058a8:	20001b7a 	.word	0x20001b7a
 80058ac:	200015f4 	.word	0x200015f4
 80058b0:	20001b7c 	.word	0x20001b7c
 80058b4:	40533333 	.word	0x40533333
 80058b8:	45800000 	.word	0x45800000
 80058bc:	20001b70 	.word	0x20001b70
 80058c0:	20001b6c 	.word	0x20001b6c
 80058c4:	20001b68 	.word	0x20001b68
 80058c8:	3fd33333 	.word	0x3fd33333
 80058cc:	20001b74 	.word	0x20001b74

080058d0 <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	4603      	mov	r3, r0
 80058d8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_3)
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d102      	bne.n	80058e6 <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 80058e0:	4806      	ldr	r0, [pc, #24]	@ (80058fc <HAL_GPIO_EXTI_Callback+0x2c>)
 80058e2:	f7fd f98f 	bl	8002c04 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_4)
 80058e6:	88fb      	ldrh	r3, [r7, #6]
 80058e8:	2b10      	cmp	r3, #16
 80058ea:	d102      	bne.n	80058f2 <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 80058ec:	4803      	ldr	r0, [pc, #12]	@ (80058fc <HAL_GPIO_EXTI_Callback+0x2c>)
 80058ee:	f7fd f996 	bl	8002c1e <bmi088_set_gyro_INT>
  }
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20001a20 	.word	0x20001a20

08005900 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005910:	d10d      	bne.n	800592e <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 8005912:	4b0a      	ldr	r3, [pc, #40]	@ (800593c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	3301      	adds	r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	4b07      	ldr	r3, [pc, #28]	@ (800593c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800591e:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 8005920:	4b07      	ldr	r3, [pc, #28]	@ (8005940 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	3301      	adds	r3, #1
 8005928:	b2da      	uxtb	r2, r3
 800592a:	4b05      	ldr	r3, [pc, #20]	@ (8005940 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800592c:	701a      	strb	r2, [r3, #0]
  }
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	20001b62 	.word	0x20001b62
 8005940:	20001b63 	.word	0x20001b63

08005944 <HAL_UART_TxCpltCallback>:
 * @brief UART transmission complete callback
 * @param huart UART handle
 * @note Clears transmission busy flag
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == UART4) {
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a09      	ldr	r2, [pc, #36]	@ (8005978 <HAL_UART_TxCpltCallback+0x34>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d102      	bne.n	800595c <HAL_UART_TxCpltCallback+0x18>
		usart4_tx_busy = 0;
 8005956:	4b09      	ldr	r3, [pc, #36]	@ (800597c <HAL_UART_TxCpltCallback+0x38>)
 8005958:	2200      	movs	r2, #0
 800595a:	701a      	strb	r2, [r3, #0]
	}
	if (huart->Instance == USART2) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a07      	ldr	r2, [pc, #28]	@ (8005980 <HAL_UART_TxCpltCallback+0x3c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d102      	bne.n	800596c <HAL_UART_TxCpltCallback+0x28>
		usart2_tx_busy = 0;
 8005966:	4b07      	ldr	r3, [pc, #28]	@ (8005984 <HAL_UART_TxCpltCallback+0x40>)
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
	}
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40004c00 	.word	0x40004c00
 800597c:	20001b60 	.word	0x20001b60
 8005980:	40004400 	.word	0x40004400
 8005984:	20001b61 	.word	0x20001b61

08005988 <HAL_I2C_MemRxCpltCallback>:
 * @brief I2C Memory read complete callback (DMA)
 * @param hi2c I2C handle
 * @note Handles BMI088 sensor data DMA transfer completion
 */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a0a      	ldr	r2, [pc, #40]	@ (80059c0 <HAL_I2C_MemRxCpltCallback+0x38>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d10e      	bne.n	80059b8 <HAL_I2C_MemRxCpltCallback+0x30>
        if (hi2c->Devaddress == ACC_I2C_ADD) {
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599e:	2b30      	cmp	r3, #48	@ 0x30
 80059a0:	d103      	bne.n	80059aa <HAL_I2C_MemRxCpltCallback+0x22>
            // Accelerometer data received (9 bytes: XYZ + sensor time)
            bmi088_accel_dma_complete_callback(&BMI_sensor);
 80059a2:	4808      	ldr	r0, [pc, #32]	@ (80059c4 <HAL_I2C_MemRxCpltCallback+0x3c>)
 80059a4:	f7fd f9c4 	bl	8002d30 <bmi088_accel_dma_complete_callback>
        else if (hi2c->Devaddress == GYRO_I2C_ADD) {
            // Gyroscope data received (6 bytes: XYZ)
            bmi088_gyro_dma_complete_callback(&BMI_sensor);
        }
    }
}
 80059a8:	e006      	b.n	80059b8 <HAL_I2C_MemRxCpltCallback+0x30>
        else if (hi2c->Devaddress == GYRO_I2C_ADD) {
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ae:	2bd0      	cmp	r3, #208	@ 0xd0
 80059b0:	d102      	bne.n	80059b8 <HAL_I2C_MemRxCpltCallback+0x30>
            bmi088_gyro_dma_complete_callback(&BMI_sensor);
 80059b2:	4804      	ldr	r0, [pc, #16]	@ (80059c4 <HAL_I2C_MemRxCpltCallback+0x3c>)
 80059b4:	f7fd f9cf 	bl	8002d56 <bmi088_gyro_dma_complete_callback>
}
 80059b8:	bf00      	nop
 80059ba:	3708      	adds	r7, #8
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40005400 	.word	0x40005400
 80059c4:	20001a20 	.word	0x20001a20

080059c8 <uart2_send_packet_dma>:
 * @param data Pointer to data buffer
 * @param size Size of data to send
 * @note Non-blocking transmission using DMA
 */
void uart2_send_packet_dma(uint8_t *data, uint16_t size)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	807b      	strh	r3, [r7, #2]
	if (!usart2_tx_busy) {
 80059d4:	4b08      	ldr	r3, [pc, #32]	@ (80059f8 <uart2_send_packet_dma+0x30>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d108      	bne.n	80059f0 <uart2_send_packet_dma+0x28>
		usart2_tx_busy = 1;
 80059de:	4b06      	ldr	r3, [pc, #24]	@ (80059f8 <uart2_send_packet_dma+0x30>)
 80059e0:	2201      	movs	r2, #1
 80059e2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_DMA(&huart2, data, size);
 80059e4:	887b      	ldrh	r3, [r7, #2]
 80059e6:	461a      	mov	r2, r3
 80059e8:	6879      	ldr	r1, [r7, #4]
 80059ea:	4804      	ldr	r0, [pc, #16]	@ (80059fc <uart2_send_packet_dma+0x34>)
 80059ec:	f008 fd8a 	bl	800e504 <HAL_UART_Transmit_DMA>
	}
}
 80059f0:	bf00      	nop
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20001b61 	.word	0x20001b61
 80059fc:	2000182c 	.word	0x2000182c

08005a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a04:	b672      	cpsid	i
}
 8005a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <Error_Handler+0x8>

08005a0c <check_sum_hesapla_normal>:
#include "packet.h"
#include <math.h>

unsigned char normal_paket[50];

unsigned char check_sum_hesapla_normal(int a){
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	e00a      	b.n	8005a34 <check_sum_hesapla_normal+0x28>
        check_sum += normal_paket[i];
 8005a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005a58 <check_sum_hesapla_normal+0x4c>)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4413      	add	r3, r2
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i < a; i++){
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	3301      	adds	r3, #1
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	dbf0      	blt.n	8005a1e <check_sum_hesapla_normal+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	425a      	negs	r2, r3
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	b2d2      	uxtb	r2, r2
 8005a44:	bf58      	it	pl
 8005a46:	4253      	negpl	r3, r2
 8005a48:	b2db      	uxtb	r3, r3
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20001b80 	.word	0x20001b80

08005a5c <addDataPacketNormal>:

void addDataPacketNormal(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor, gps_data_t* GPS, float hmc1021_gauss, float voltage, float current){
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b094      	sub	sp, #80	@ 0x50
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	61f8      	str	r0, [r7, #28]
 8005a64:	61b9      	str	r1, [r7, #24]
 8005a66:	617a      	str	r2, [r7, #20]
 8005a68:	613b      	str	r3, [r7, #16]
 8005a6a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005a6e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005a72:	ed87 1a01 	vstr	s2, [r7, #4]
  normal_paket[0] = 0xFF; // Sabit
 8005a76:	4b82      	ldr	r3, [pc, #520]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005a78:	22ff      	movs	r2, #255	@ 0xff
 8005a7a:	701a      	strb	r2, [r3, #0]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = (BME->altitude); // Irtifa degerinin atamasini yapiyoruz.
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  normal_paket[1] = irtifa_float32_uint8_donusturucu.array[0];
 8005a82:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8005a86:	4b7e      	ldr	r3, [pc, #504]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005a88:	705a      	strb	r2, [r3, #1]
  normal_paket[2] = irtifa_float32_uint8_donusturucu.array[1];
 8005a8a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005a90:	709a      	strb	r2, [r3, #2]
  normal_paket[3] = irtifa_float32_uint8_donusturucu.array[2];
 8005a92:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8005a96:	4b7a      	ldr	r3, [pc, #488]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005a98:	70da      	strb	r2, [r3, #3]
  normal_paket[4] = irtifa_float32_uint8_donusturucu.array[3];
 8005a9a:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005a9e:	4b78      	ldr	r3, [pc, #480]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005aa0:	711a      	strb	r2, [r3, #4]

  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
  roket_gps_irtifa_float32_uint8_donusturucu.sayi = (GPS->altitude); // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
  normal_paket[5] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 8005aa8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8005aac:	4b74      	ldr	r3, [pc, #464]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005aae:	715a      	strb	r2, [r3, #5]
  normal_paket[6] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 8005ab0:	f897 2049 	ldrb.w	r2, [r7, #73]	@ 0x49
 8005ab4:	4b72      	ldr	r3, [pc, #456]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005ab6:	719a      	strb	r2, [r3, #6]
  normal_paket[7] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 8005ab8:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 8005abc:	4b70      	ldr	r3, [pc, #448]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005abe:	71da      	strb	r2, [r3, #7]
  normal_paket[8] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 8005ac0:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8005ac4:	4b6e      	ldr	r3, [pc, #440]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005ac6:	721a      	strb	r2, [r3, #8]

   // Roket Enlem
  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
  roket_enlem_float32_uint8_donusturucu.sayi = (GPS->latitude); // Roket enlem degerinin atamasini yapiyoruz.
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005acc:	647b      	str	r3, [r7, #68]	@ 0x44
  normal_paket[9] = roket_enlem_float32_uint8_donusturucu.array[0];
 8005ace:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 8005ad2:	4b6b      	ldr	r3, [pc, #428]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005ad4:	725a      	strb	r2, [r3, #9]
  normal_paket[10] = roket_enlem_float32_uint8_donusturucu.array[1];
 8005ad6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8005ada:	4b69      	ldr	r3, [pc, #420]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005adc:	729a      	strb	r2, [r3, #10]
  normal_paket[11] = roket_enlem_float32_uint8_donusturucu.array[2];
 8005ade:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8005ae2:	4b67      	ldr	r3, [pc, #412]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005ae4:	72da      	strb	r2, [r3, #11]
  normal_paket[12] = roket_enlem_float32_uint8_donusturucu.array[3];
 8005ae6:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8005aea:	4b65      	ldr	r3, [pc, #404]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005aec:	731a      	strb	r2, [r3, #12]

  // Roket Boylam
  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = (GPS->longitude); // Roket boylam degerinin atamasini yapiyoruz.
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005af2:	643b      	str	r3, [r7, #64]	@ 0x40
  normal_paket[13] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 8005af4:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8005af8:	4b61      	ldr	r3, [pc, #388]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005afa:	735a      	strb	r2, [r3, #13]
  normal_paket[14] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 8005afc:	f897 2041 	ldrb.w	r2, [r7, #65]	@ 0x41
 8005b00:	4b5f      	ldr	r3, [pc, #380]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b02:	739a      	strb	r2, [r3, #14]
  normal_paket[15] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 8005b04:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8005b08:	4b5d      	ldr	r3, [pc, #372]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b0a:	73da      	strb	r2, [r3, #15]
  normal_paket[16] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 8005b0c:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8005b10:	4b5b      	ldr	r3, [pc, #364]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b12:	741a      	strb	r2, [r3, #16]


  FLOAT32_UINT8_DONUSTURUCU aci_float32_uint8_donusturucu;
  aci_float32_uint8_donusturucu.sayi = (BMI->datas.theta); // Theta acisinin atamasini yapiyoruz.
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  normal_paket[17] = aci_float32_uint8_donusturucu.array[0];
 8005b1a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8005b1e:	4b58      	ldr	r3, [pc, #352]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b20:	745a      	strb	r2, [r3, #17]
  normal_paket[18] = aci_float32_uint8_donusturucu.array[1];
 8005b22:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 8005b26:	4b56      	ldr	r3, [pc, #344]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b28:	749a      	strb	r2, [r3, #18]
  normal_paket[19] = aci_float32_uint8_donusturucu.array[2];
 8005b2a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8005b2e:	4b54      	ldr	r3, [pc, #336]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b30:	74da      	strb	r2, [r3, #19]
  normal_paket[20] = aci_float32_uint8_donusturucu.array[3];
 8005b32:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8005b36:	4b52      	ldr	r3, [pc, #328]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b38:	751a      	strb	r2, [r3, #20]

  FLOAT32_UINT8_DONUSTURUCU volt_float32_uint8_donusturucu;
  volt_float32_uint8_donusturucu.sayi = (voltage); // Volt degerinin atamasini yapiyoruz.
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  normal_paket[21] = volt_float32_uint8_donusturucu.array[0];
 8005b3e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005b42:	4b4f      	ldr	r3, [pc, #316]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b44:	755a      	strb	r2, [r3, #21]
  normal_paket[22] = volt_float32_uint8_donusturucu.array[1];
 8005b46:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8005b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b4c:	759a      	strb	r2, [r3, #22]
  normal_paket[23] = volt_float32_uint8_donusturucu.array[2];
 8005b4e:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8005b52:	4b4b      	ldr	r3, [pc, #300]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b54:	75da      	strb	r2, [r3, #23]
  normal_paket[24] = volt_float32_uint8_donusturucu.array[3];
 8005b56:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8005b5a:	4b49      	ldr	r3, [pc, #292]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b5c:	761a      	strb	r2, [r3, #24]

  FLOAT32_UINT8_DONUSTURUCU akim_float32_uint8_donusturucu;
  akim_float32_uint8_donusturucu.sayi = (current); // Akim degerinin atamasini yapiyoruz.
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	637b      	str	r3, [r7, #52]	@ 0x34
  normal_paket[25] = akim_float32_uint8_donusturucu.array[0];
 8005b62:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8005b66:	4b46      	ldr	r3, [pc, #280]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b68:	765a      	strb	r2, [r3, #25]
  normal_paket[26] = akim_float32_uint8_donusturucu.array[1];
 8005b6a:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8005b6e:	4b44      	ldr	r3, [pc, #272]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b70:	769a      	strb	r2, [r3, #26]
  normal_paket[27] = akim_float32_uint8_donusturucu.array[2];
 8005b72:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8005b76:	4b42      	ldr	r3, [pc, #264]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b78:	76da      	strb	r2, [r3, #27]
  normal_paket[28] = akim_float32_uint8_donusturucu.array[3];
 8005b7a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8005b7e:	4b40      	ldr	r3, [pc, #256]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b80:	771a      	strb	r2, [r3, #28]

  FLOAT32_UINT8_DONUSTURUCU sicaklik_float32_uint8_donusturucu;
  sicaklik_float32_uint8_donusturucu.sayi = (BME->temperature); // Sicaklik degerinin atamasini yapiyoruz.
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	633b      	str	r3, [r7, #48]	@ 0x30
  normal_paket[29] = sicaklik_float32_uint8_donusturucu.array[0];
 8005b88:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005b8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b8e:	775a      	strb	r2, [r3, #29]
  normal_paket[30] = sicaklik_float32_uint8_donusturucu.array[1];
 8005b90:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8005b94:	4b3a      	ldr	r3, [pc, #232]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b96:	779a      	strb	r2, [r3, #30]
  normal_paket[31] = sicaklik_float32_uint8_donusturucu.array[2];
 8005b98:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8005b9c:	4b38      	ldr	r3, [pc, #224]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005b9e:	77da      	strb	r2, [r3, #31]
  normal_paket[32] = sicaklik_float32_uint8_donusturucu.array[3];
 8005ba0:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8005ba4:	4b36      	ldr	r3, [pc, #216]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005ba6:	f883 2020 	strb.w	r2, [r3, #32]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = (BME->pressure); // basinc degerinin atamasini yapiyoruz.
 8005baa:	69fb      	ldr	r3, [r7, #28]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  normal_paket[33] = basinc_float32_uint8_donusturucu.array[0];
 8005bb0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005bb4:	4b32      	ldr	r3, [pc, #200]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005bb6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  normal_paket[34] = basinc_float32_uint8_donusturucu.array[1];
 8005bba:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8005bbe:	4b30      	ldr	r3, [pc, #192]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005bc0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  normal_paket[35] = basinc_float32_uint8_donusturucu.array[2];
 8005bc4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8005bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005bca:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  normal_paket[36] = basinc_float32_uint8_donusturucu.array[3];
 8005bce:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005bd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  FLOAT32_UINT8_DONUSTURUCU manyetik_alan_float32_uint8_donusturucu;
  manyetik_alan_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Manyetik alan degerinin atamasini yapiyoruz.
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  normal_paket[37] = manyetik_alan_float32_uint8_donusturucu.array[0];
 8005bdc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005be0:	4b27      	ldr	r3, [pc, #156]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005be2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  normal_paket[38] = manyetik_alan_float32_uint8_donusturucu.array[1];
 8005be6:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005bea:	4b25      	ldr	r3, [pc, #148]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005bec:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  normal_paket[39] = manyetik_alan_float32_uint8_donusturucu.array[2];
 8005bf0:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8005bf4:	4b22      	ldr	r3, [pc, #136]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005bf6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  normal_paket[40] = manyetik_alan_float32_uint8_donusturucu.array[3];
 8005bfa:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005bfe:	4b20      	ldr	r3, [pc, #128]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  FLOAT32_UINT8_DONUSTURUCU hiz_float32_uint8_donusturucu;
  hiz_float32_uint8_donusturucu.sayi = (sensor->velocity); // hiz degerinin atamasini yapiyoruz.
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	627b      	str	r3, [r7, #36]	@ 0x24
  normal_paket[41] = hiz_float32_uint8_donusturucu.array[0];
 8005c0a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c10:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  normal_paket[42] = hiz_float32_uint8_donusturucu.array[1];
 8005c14:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8005c18:	4b19      	ldr	r3, [pc, #100]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c1a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  normal_paket[43] = hiz_float32_uint8_donusturucu.array[2];
 8005c1e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005c22:	4b17      	ldr	r3, [pc, #92]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c24:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  normal_paket[44] = hiz_float32_uint8_donusturucu.array[3];
 8005c28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005c2c:	4b14      	ldr	r3, [pc, #80]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c2e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  //NEM
  normal_paket[45] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	edd3 7a07 	vldr	s15, [r3, #28]
 8005c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c3c:	edc7 7a00 	vstr	s15, [r7]
 8005c40:	783b      	ldrb	r3, [r7, #0]
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	4b0e      	ldr	r3, [pc, #56]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c46:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  normal_paket[46] = flight_algorithm_get_durum_verisi();
 8005c4a:	f7fd fb65 	bl	8003318 <flight_algorithm_get_durum_verisi>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	461a      	mov	r2, r3
 8005c52:	4b0b      	ldr	r3, [pc, #44]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c54:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  normal_paket[47] = check_sum_hesapla_normal(47); // Check_sum = check_sum_hesapla();
 8005c58:	202f      	movs	r0, #47	@ 0x2f
 8005c5a:	f7ff fed7 	bl	8005a0c <check_sum_hesapla_normal>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	461a      	mov	r2, r3
 8005c62:	4b07      	ldr	r3, [pc, #28]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c64:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
  normal_paket[48] = 0x0D; // Sabit
 8005c68:	4b05      	ldr	r3, [pc, #20]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c6a:	220d      	movs	r2, #13
 8005c6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  normal_paket[49] = 0x0A;
 8005c70:	4b03      	ldr	r3, [pc, #12]	@ (8005c80 <addDataPacketNormal+0x224>)
 8005c72:	220a      	movs	r2, #10
 8005c74:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
}
 8005c78:	bf00      	nop
 8005c7a:	3750      	adds	r7, #80	@ 0x50
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20001b80 	.word	0x20001b80

08005c84 <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08c      	sub	sp, #48	@ 0x30
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005c8e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005c92:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8005c96:	4bd5      	ldr	r3, [pc, #852]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005c98:	ed93 7a00 	vldr	s14, [r3]
 8005c9c:	4bd3      	ldr	r3, [pc, #844]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005c9e:	edd3 7a00 	vldr	s15, [r3]
 8005ca2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ca6:	4bd1      	ldr	r3, [pc, #836]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005ca8:	edd3 6a01 	vldr	s13, [r3, #4]
 8005cac:	4bcf      	ldr	r3, [pc, #828]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005cae:	edd3 7a01 	vldr	s15, [r3, #4]
 8005cb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cba:	4bcc      	ldr	r3, [pc, #816]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005cbc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cc0:	4bca      	ldr	r3, [pc, #808]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005cc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cce:	4bc7      	ldr	r3, [pc, #796]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005cd0:	edd3 6a03 	vldr	s13, [r3, #12]
 8005cd4:	4bc5      	ldr	r3, [pc, #788]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005cd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8005ce6:	f011 ffa7 	bl	8017c38 <sqrtf>
 8005cea:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 8005cee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005cf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfa:	f000 8172 	beq.w	8005fe2 <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8005cfe:	4bbb      	ldr	r3, [pc, #748]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d00:	edd3 6a00 	vldr	s13, [r3]
 8005d04:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005d08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0c:	4bb7      	ldr	r3, [pc, #732]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d0e:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 8005d12:	4bb6      	ldr	r3, [pc, #728]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d14:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d18:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005d1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d20:	4bb2      	ldr	r3, [pc, #712]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d22:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 8005d26:	4bb1      	ldr	r3, [pc, #708]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d28:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d2c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d34:	4bad      	ldr	r3, [pc, #692]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d36:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 8005d3a:	4bac      	ldr	r3, [pc, #688]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d3c:	edd3 6a03 	vldr	s13, [r3, #12]
 8005d40:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8005d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d48:	4ba8      	ldr	r3, [pc, #672]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d4a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 8005d4e:	4ba7      	ldr	r3, [pc, #668]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d50:	ed93 7a01 	vldr	s14, [r3, #4]
 8005d54:	4ba5      	ldr	r3, [pc, #660]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d56:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d5e:	4ba3      	ldr	r3, [pc, #652]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d60:	edd3 6a00 	vldr	s13, [r3]
 8005d64:	4ba1      	ldr	r3, [pc, #644]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d72:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005d76:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 8005d7a:	4b9c      	ldr	r3, [pc, #624]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d7c:	ed93 7a00 	vldr	s14, [r3]
 8005d80:	4b9a      	ldr	r3, [pc, #616]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d82:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d8a:	4b98      	ldr	r3, [pc, #608]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d90:	4b96      	ldr	r3, [pc, #600]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005d92:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005da2:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 8005da6:	4b91      	ldr	r3, [pc, #580]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005da8:	ed93 7a00 	vldr	s14, [r3]
 8005dac:	4b8f      	ldr	r3, [pc, #572]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005dae:	edd3 7a00 	vldr	s15, [r3]
 8005db2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005db6:	4b8d      	ldr	r3, [pc, #564]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005db8:	edd3 6a01 	vldr	s13, [r3, #4]
 8005dbc:	4b8b      	ldr	r3, [pc, #556]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005dbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dca:	4b88      	ldr	r3, [pc, #544]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005dcc:	edd3 6a02 	vldr	s13, [r3, #8]
 8005dd0:	4b86      	ldr	r3, [pc, #536]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005dd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005dd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005dde:	4b83      	ldr	r3, [pc, #524]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005de0:	edd3 6a03 	vldr	s13, [r3, #12]
 8005de4:	4b81      	ldr	r3, [pc, #516]	@ (8005fec <UpdateMahonyGains+0x368>)
 8005de6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df2:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 8005df6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005dfa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005dfe:	edd7 7a08 	vldr	s15, [r7, #32]
 8005e02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005e06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e16:	eeb0 0a67 	vmov.f32	s0, s15
 8005e1a:	f000 ff3f 	bl	8006c9c <invSqrt>
 8005e1e:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 8005e22:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8005e26:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 8005e32:	ed97 7a08 	vldr	s14, [r7, #32]
 8005e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3e:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 8005e42:	ed97 7a07 	vldr	s14, [r7, #28]
 8005e46:	edd7 7a06 	vldr	s15, [r7, #24]
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 8005e52:	edd7 7a03 	vldr	s15, [r7, #12]
 8005e56:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005e5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005e5e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005e62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e66:	edd7 7a01 	vldr	s15, [r7, #4]
 8005e6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e72:	eeb0 0a67 	vmov.f32	s0, s15
 8005e76:	f000 ff11 	bl	8006c9c <invSqrt>
 8005e7a:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 8005e7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8a:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 8005e8e:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e92:	edd7 7a05 	vldr	s15, [r7, #20]
 8005e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9a:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 8005e9e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8005ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eaa:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8005eae:	ed97 7a03 	vldr	s14, [r7, #12]
 8005eb2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eba:	edd7 6a02 	vldr	s13, [r7, #8]
 8005ebe:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005eca:	edd7 6a01 	vldr	s13, [r7, #4]
 8005ece:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eda:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 8005ede:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005ee2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eee:	dd02      	ble.n	8005ef6 <UpdateMahonyGains+0x272>
 8005ef0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 8005ef6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005efa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005efe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f06:	d501      	bpl.n	8005f0c <UpdateMahonyGains+0x288>
 8005f08:	4b39      	ldr	r3, [pc, #228]	@ (8005ff0 <UpdateMahonyGains+0x36c>)
 8005f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8005f0c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8005f10:	f011 fe66 	bl	8017be0 <acosf>
 8005f14:	eef0 7a40 	vmov.f32	s15, s0
 8005f18:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005ff4 <UpdateMahonyGains+0x370>
 8005f1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f20:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 8005f24:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f28:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8005f2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f34:	dd0a      	ble.n	8005f4c <UpdateMahonyGains+0x2c8>
        Gain = 1;
 8005f36:	4b30      	ldr	r3, [pc, #192]	@ (8005ff8 <UpdateMahonyGains+0x374>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8005f3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005ffc <UpdateMahonyGains+0x378>)
 8005f3e:	4a30      	ldr	r2, [pc, #192]	@ (8006000 <UpdateMahonyGains+0x37c>)
 8005f40:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 8005f42:	4b30      	ldr	r3, [pc, #192]	@ (8006004 <UpdateMahonyGains+0x380>)
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	e01d      	b.n	8005f88 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 8005f4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f50:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f5c:	dd0a      	ble.n	8005f74 <UpdateMahonyGains+0x2f0>
        Gain = 2;
 8005f5e:	4b26      	ldr	r3, [pc, #152]	@ (8005ff8 <UpdateMahonyGains+0x374>)
 8005f60:	2202      	movs	r2, #2
 8005f62:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 8005f64:	4b25      	ldr	r3, [pc, #148]	@ (8005ffc <UpdateMahonyGains+0x378>)
 8005f66:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005f6a:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 8005f6c:	4b25      	ldr	r3, [pc, #148]	@ (8006004 <UpdateMahonyGains+0x380>)
 8005f6e:	4a26      	ldr	r2, [pc, #152]	@ (8006008 <UpdateMahonyGains+0x384>)
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e009      	b.n	8005f88 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 8005f74:	4b20      	ldr	r3, [pc, #128]	@ (8005ff8 <UpdateMahonyGains+0x374>)
 8005f76:	2203      	movs	r2, #3
 8005f78:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 8005f7a:	4b20      	ldr	r3, [pc, #128]	@ (8005ffc <UpdateMahonyGains+0x378>)
 8005f7c:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8005f80:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 8005f82:	4b20      	ldr	r3, [pc, #128]	@ (8006004 <UpdateMahonyGains+0x380>)
 8005f84:	4a21      	ldr	r2, [pc, #132]	@ (800600c <UpdateMahonyGains+0x388>)
 8005f86:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 8005f88:	4b1c      	ldr	r3, [pc, #112]	@ (8005ffc <UpdateMahonyGains+0x378>)
 8005f8a:	edd3 7a00 	vldr	s15, [r3]
 8005f8e:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 8005f92:	eeb0 0a67 	vmov.f32	s0, s15
 8005f96:	f011 fe9c 	bl	8017cd2 <fminf>
 8005f9a:	eef0 7a40 	vmov.f32	s15, s0
 8005f9e:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006010 <UpdateMahonyGains+0x38c>
 8005fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8005fa6:	f011 fe77 	bl	8017c98 <fmaxf>
 8005faa:	eef0 7a40 	vmov.f32	s15, s0
 8005fae:	4b13      	ldr	r3, [pc, #76]	@ (8005ffc <UpdateMahonyGains+0x378>)
 8005fb0:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 8005fb4:	4b13      	ldr	r3, [pc, #76]	@ (8006004 <UpdateMahonyGains+0x380>)
 8005fb6:	edd3 7a00 	vldr	s15, [r3]
 8005fba:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8006014 <UpdateMahonyGains+0x390>
 8005fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8005fc2:	f011 fe86 	bl	8017cd2 <fminf>
 8005fc6:	eef0 7a40 	vmov.f32	s15, s0
 8005fca:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8006018 <UpdateMahonyGains+0x394>
 8005fce:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd2:	f011 fe61 	bl	8017c98 <fmaxf>
 8005fd6:	eef0 7a40 	vmov.f32	s15, s0
 8005fda:	4b0a      	ldr	r3, [pc, #40]	@ (8006004 <UpdateMahonyGains+0x380>)
 8005fdc:	edc3 7a00 	vstr	s15, [r3]
 8005fe0:	e000      	b.n	8005fe4 <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 8005fe2:	bf00      	nop
}
 8005fe4:	3730      	adds	r7, #48	@ 0x30
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20000020 	.word	0x20000020
 8005ff0:	bf800000 	.word	0xbf800000
 8005ff4:	42652ee2 	.word	0x42652ee2
 8005ff8:	20001bc0 	.word	0x20001bc0
 8005ffc:	20000030 	.word	0x20000030
 8006000:	3e4ccccd 	.word	0x3e4ccccd
 8006004:	20000034 	.word	0x20000034
 8006008:	3c23d70a 	.word	0x3c23d70a
 800600c:	3d4ccccd 	.word	0x3d4ccccd
 8006010:	3dcccccd 	.word	0x3dcccccd
 8006014:	3d4ccccd 	.word	0x3d4ccccd
 8006018:	00000000 	.word	0x00000000

0800601c <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b08a      	sub	sp, #40	@ 0x28
 8006020:	af00      	add	r7, sp, #0
 8006022:	ed87 0a07 	vstr	s0, [r7, #28]
 8006026:	edc7 0a06 	vstr	s1, [r7, #24]
 800602a:	ed87 1a05 	vstr	s2, [r7, #20]
 800602e:	edc7 1a04 	vstr	s3, [r7, #16]
 8006032:	ed87 2a03 	vstr	s4, [r7, #12]
 8006036:	edc7 2a02 	vstr	s5, [r7, #8]
 800603a:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 800603e:	4b60      	ldr	r3, [pc, #384]	@ (80061c0 <Orientation_Update+0x1a4>)
 8006040:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 8006042:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006046:	edd7 7a04 	vldr	s15, [r7, #16]
 800604a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800604e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006052:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006056:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800605a:	4b5a      	ldr	r3, [pc, #360]	@ (80061c4 <Orientation_Update+0x1a8>)
 800605c:	edd3 7a00 	vldr	s15, [r3]
 8006060:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006068:	4b56      	ldr	r3, [pc, #344]	@ (80061c4 <Orientation_Update+0x1a8>)
 800606a:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 800606e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8006072:	edd7 7a03 	vldr	s15, [r7, #12]
 8006076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800607e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006082:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006086:	4b50      	ldr	r3, [pc, #320]	@ (80061c8 <Orientation_Update+0x1ac>)
 8006088:	edd3 7a00 	vldr	s15, [r3]
 800608c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006090:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006094:	4b4c      	ldr	r3, [pc, #304]	@ (80061c8 <Orientation_Update+0x1ac>)
 8006096:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 800609a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800609e:	edd7 7a02 	vldr	s15, [r7, #8]
 80060a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80060ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80060b2:	4b46      	ldr	r3, [pc, #280]	@ (80061cc <Orientation_Update+0x1b0>)
 80060b4:	edd3 7a00 	vldr	s15, [r3]
 80060b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060c0:	4b42      	ldr	r3, [pc, #264]	@ (80061cc <Orientation_Update+0x1b0>)
 80060c2:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 80060c6:	4b3f      	ldr	r3, [pc, #252]	@ (80061c4 <Orientation_Update+0x1a8>)
 80060c8:	edd3 7a00 	vldr	s15, [r3]
 80060cc:	4b3e      	ldr	r3, [pc, #248]	@ (80061c8 <Orientation_Update+0x1ac>)
 80060ce:	ed93 7a00 	vldr	s14, [r3]
 80060d2:	4b3e      	ldr	r3, [pc, #248]	@ (80061cc <Orientation_Update+0x1b0>)
 80060d4:	edd3 6a00 	vldr	s13, [r3]
 80060d8:	eeb0 1a66 	vmov.f32	s2, s13
 80060dc:	eef0 0a47 	vmov.f32	s1, s14
 80060e0:	eeb0 0a67 	vmov.f32	s0, s15
 80060e4:	f7ff fdce 	bl	8005c84 <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 80060e8:	4b36      	ldr	r3, [pc, #216]	@ (80061c4 <Orientation_Update+0x1a8>)
 80060ea:	ed93 7a00 	vldr	s14, [r3]
 80060ee:	4b35      	ldr	r3, [pc, #212]	@ (80061c4 <Orientation_Update+0x1a8>)
 80060f0:	edd3 7a00 	vldr	s15, [r3]
 80060f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060f8:	4b33      	ldr	r3, [pc, #204]	@ (80061c8 <Orientation_Update+0x1ac>)
 80060fa:	edd3 6a00 	vldr	s13, [r3]
 80060fe:	4b32      	ldr	r3, [pc, #200]	@ (80061c8 <Orientation_Update+0x1ac>)
 8006100:	edd3 7a00 	vldr	s15, [r3]
 8006104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006108:	ee37 7a27 	vadd.f32	s14, s14, s15
 800610c:	4b2f      	ldr	r3, [pc, #188]	@ (80061cc <Orientation_Update+0x1b0>)
 800610e:	edd3 6a00 	vldr	s13, [r3]
 8006112:	4b2e      	ldr	r3, [pc, #184]	@ (80061cc <Orientation_Update+0x1b0>)
 8006114:	edd3 7a00 	vldr	s15, [r3]
 8006118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800611c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006120:	eeb0 0a67 	vmov.f32	s0, s15
 8006124:	f011 fd88 	bl	8017c38 <sqrtf>
 8006128:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 800612c:	4b28      	ldr	r3, [pc, #160]	@ (80061d0 <Orientation_Update+0x1b4>)
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00c      	beq.n	800614e <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 8006134:	edd7 7a08 	vldr	s15, [r7, #32]
 8006138:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80061d4 <Orientation_Update+0x1b8>
 800613c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006144:	d50f      	bpl.n	8006166 <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 8006146:	4b22      	ldr	r3, [pc, #136]	@ (80061d0 <Orientation_Update+0x1b4>)
 8006148:	2200      	movs	r2, #0
 800614a:	701a      	strb	r2, [r3, #0]
 800614c:	e00b      	b.n	8006166 <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 800614e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006152:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80061d8 <Orientation_Update+0x1bc>
 8006156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800615a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800615e:	dd02      	ble.n	8006166 <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 8006160:	4b1b      	ldr	r3, [pc, #108]	@ (80061d0 <Orientation_Update+0x1b4>)
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 8006166:	4b1a      	ldr	r3, [pc, #104]	@ (80061d0 <Orientation_Update+0x1b4>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 800616e:	edd7 1a01 	vldr	s3, [r7, #4]
 8006172:	ed97 1a05 	vldr	s2, [r7, #20]
 8006176:	edd7 0a06 	vldr	s1, [r7, #24]
 800617a:	ed97 0a07 	vldr	s0, [r7, #28]
 800617e:	f000 f82d 	bl	80061dc <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 8006182:	e018      	b.n	80061b6 <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 8006184:	4b0f      	ldr	r3, [pc, #60]	@ (80061c4 <Orientation_Update+0x1a8>)
 8006186:	edd3 7a00 	vldr	s15, [r3]
 800618a:	4b0f      	ldr	r3, [pc, #60]	@ (80061c8 <Orientation_Update+0x1ac>)
 800618c:	ed93 7a00 	vldr	s14, [r3]
 8006190:	4b0e      	ldr	r3, [pc, #56]	@ (80061cc <Orientation_Update+0x1b0>)
 8006192:	edd3 6a00 	vldr	s13, [r3]
 8006196:	ed97 3a01 	vldr	s6, [r7, #4]
 800619a:	eef0 2a66 	vmov.f32	s5, s13
 800619e:	eeb0 2a47 	vmov.f32	s4, s14
 80061a2:	eef0 1a67 	vmov.f32	s3, s15
 80061a6:	ed97 1a05 	vldr	s2, [r7, #20]
 80061aa:	edd7 0a06 	vldr	s1, [r7, #24]
 80061ae:	ed97 0a07 	vldr	s0, [r7, #28]
 80061b2:	f000 f93b 	bl	800642c <MahonyAHRSupdateIMU>
}
 80061b6:	bf00      	nop
 80061b8:	3728      	adds	r7, #40	@ 0x28
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	3e99999a 	.word	0x3e99999a
 80061c4:	20001bc4 	.word	0x20001bc4
 80061c8:	20001bc8 	.word	0x20001bc8
 80061cc:	20001bcc 	.word	0x20001bcc
 80061d0:	20001bc1 	.word	0x20001bc1
 80061d4:	41d3d2db 	.word	0x41d3d2db
 80061d8:	420172a2 	.word	0x420172a2

080061dc <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	@ 0x28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80061e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80061ea:	ed87 1a01 	vstr	s2, [r7, #4]
 80061ee:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 80061f2:	4b8c      	ldr	r3, [pc, #560]	@ (8006424 <updateQuaternion+0x248>)
 80061f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80061f8:	eeb1 7a67 	vneg.f32	s14, s15
 80061fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006204:	4b87      	ldr	r3, [pc, #540]	@ (8006424 <updateQuaternion+0x248>)
 8006206:	edd3 6a02 	vldr	s13, [r3, #8]
 800620a:	edd7 7a02 	vldr	s15, [r7, #8]
 800620e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006212:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006216:	4b83      	ldr	r3, [pc, #524]	@ (8006424 <updateQuaternion+0x248>)
 8006218:	edd3 6a03 	vldr	s13, [r3, #12]
 800621c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006228:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800622c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006230:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8006234:	4b7b      	ldr	r3, [pc, #492]	@ (8006424 <updateQuaternion+0x248>)
 8006236:	ed93 7a00 	vldr	s14, [r3]
 800623a:	edd7 7a03 	vldr	s15, [r7, #12]
 800623e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006242:	4b78      	ldr	r3, [pc, #480]	@ (8006424 <updateQuaternion+0x248>)
 8006244:	edd3 6a02 	vldr	s13, [r3, #8]
 8006248:	edd7 7a01 	vldr	s15, [r7, #4]
 800624c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006254:	4b73      	ldr	r3, [pc, #460]	@ (8006424 <updateQuaternion+0x248>)
 8006256:	edd3 6a03 	vldr	s13, [r3, #12]
 800625a:	edd7 7a02 	vldr	s15, [r7, #8]
 800625e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006266:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800626a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800626e:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8006272:	4b6c      	ldr	r3, [pc, #432]	@ (8006424 <updateQuaternion+0x248>)
 8006274:	ed93 7a00 	vldr	s14, [r3]
 8006278:	edd7 7a02 	vldr	s15, [r7, #8]
 800627c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006280:	4b68      	ldr	r3, [pc, #416]	@ (8006424 <updateQuaternion+0x248>)
 8006282:	edd3 6a01 	vldr	s13, [r3, #4]
 8006286:	edd7 7a01 	vldr	s15, [r7, #4]
 800628a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800628e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006292:	4b64      	ldr	r3, [pc, #400]	@ (8006424 <updateQuaternion+0x248>)
 8006294:	edd3 6a03 	vldr	s13, [r3, #12]
 8006298:	edd7 7a03 	vldr	s15, [r7, #12]
 800629c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ac:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 80062b0:	4b5c      	ldr	r3, [pc, #368]	@ (8006424 <updateQuaternion+0x248>)
 80062b2:	ed93 7a00 	vldr	s14, [r3]
 80062b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80062ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062be:	4b59      	ldr	r3, [pc, #356]	@ (8006424 <updateQuaternion+0x248>)
 80062c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80062c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80062c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062d0:	4b54      	ldr	r3, [pc, #336]	@ (8006424 <updateQuaternion+0x248>)
 80062d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80062d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80062da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062e2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80062e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80062ea:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 80062ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006424 <updateQuaternion+0x248>)
 80062f0:	ed93 7a00 	vldr	s14, [r3]
 80062f4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80062f8:	edd7 7a00 	vldr	s15, [r7]
 80062fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006300:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006304:	4b47      	ldr	r3, [pc, #284]	@ (8006424 <updateQuaternion+0x248>)
 8006306:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 800630a:	4b46      	ldr	r3, [pc, #280]	@ (8006424 <updateQuaternion+0x248>)
 800630c:	ed93 7a01 	vldr	s14, [r3, #4]
 8006310:	edd7 6a08 	vldr	s13, [r7, #32]
 8006314:	edd7 7a00 	vldr	s15, [r7]
 8006318:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800631c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006320:	4b40      	ldr	r3, [pc, #256]	@ (8006424 <updateQuaternion+0x248>)
 8006322:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8006326:	4b3f      	ldr	r3, [pc, #252]	@ (8006424 <updateQuaternion+0x248>)
 8006328:	ed93 7a02 	vldr	s14, [r3, #8]
 800632c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006330:	edd7 7a00 	vldr	s15, [r7]
 8006334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800633c:	4b39      	ldr	r3, [pc, #228]	@ (8006424 <updateQuaternion+0x248>)
 800633e:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8006342:	4b38      	ldr	r3, [pc, #224]	@ (8006424 <updateQuaternion+0x248>)
 8006344:	ed93 7a03 	vldr	s14, [r3, #12]
 8006348:	edd7 6a06 	vldr	s13, [r7, #24]
 800634c:	edd7 7a00 	vldr	s15, [r7]
 8006350:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006358:	4b32      	ldr	r3, [pc, #200]	@ (8006424 <updateQuaternion+0x248>)
 800635a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 800635e:	4b31      	ldr	r3, [pc, #196]	@ (8006424 <updateQuaternion+0x248>)
 8006360:	ed93 7a00 	vldr	s14, [r3]
 8006364:	4b2f      	ldr	r3, [pc, #188]	@ (8006424 <updateQuaternion+0x248>)
 8006366:	edd3 7a00 	vldr	s15, [r3]
 800636a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800636e:	4b2d      	ldr	r3, [pc, #180]	@ (8006424 <updateQuaternion+0x248>)
 8006370:	edd3 6a01 	vldr	s13, [r3, #4]
 8006374:	4b2b      	ldr	r3, [pc, #172]	@ (8006424 <updateQuaternion+0x248>)
 8006376:	edd3 7a01 	vldr	s15, [r3, #4]
 800637a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800637e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006382:	4b28      	ldr	r3, [pc, #160]	@ (8006424 <updateQuaternion+0x248>)
 8006384:	edd3 6a02 	vldr	s13, [r3, #8]
 8006388:	4b26      	ldr	r3, [pc, #152]	@ (8006424 <updateQuaternion+0x248>)
 800638a:	edd3 7a02 	vldr	s15, [r3, #8]
 800638e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006396:	4b23      	ldr	r3, [pc, #140]	@ (8006424 <updateQuaternion+0x248>)
 8006398:	edd3 6a03 	vldr	s13, [r3, #12]
 800639c:	4b21      	ldr	r3, [pc, #132]	@ (8006424 <updateQuaternion+0x248>)
 800639e:	edd3 7a03 	vldr	s15, [r3, #12]
 80063a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063aa:	eeb0 0a67 	vmov.f32	s0, s15
 80063ae:	f011 fc43 	bl	8017c38 <sqrtf>
 80063b2:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 80063b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80063ba:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8006428 <updateQuaternion+0x24c>
 80063be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c6:	dc00      	bgt.n	80063ca <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 80063c8:	e027      	b.n	800641a <updateQuaternion+0x23e>
        q[0] /= norm;
 80063ca:	4b16      	ldr	r3, [pc, #88]	@ (8006424 <updateQuaternion+0x248>)
 80063cc:	edd3 6a00 	vldr	s13, [r3]
 80063d0:	ed97 7a05 	vldr	s14, [r7, #20]
 80063d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063d8:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <updateQuaternion+0x248>)
 80063da:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 80063de:	4b11      	ldr	r3, [pc, #68]	@ (8006424 <updateQuaternion+0x248>)
 80063e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80063e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80063e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006424 <updateQuaternion+0x248>)
 80063ee:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 80063f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <updateQuaternion+0x248>)
 80063f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80063f8:	ed97 7a05 	vldr	s14, [r7, #20]
 80063fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006400:	4b08      	ldr	r3, [pc, #32]	@ (8006424 <updateQuaternion+0x248>)
 8006402:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8006406:	4b07      	ldr	r3, [pc, #28]	@ (8006424 <updateQuaternion+0x248>)
 8006408:	edd3 6a03 	vldr	s13, [r3, #12]
 800640c:	ed97 7a05 	vldr	s14, [r7, #20]
 8006410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006414:	4b03      	ldr	r3, [pc, #12]	@ (8006424 <updateQuaternion+0x248>)
 8006416:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800641a:	bf00      	nop
 800641c:	3728      	adds	r7, #40	@ 0x28
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20000020 	.word	0x20000020
 8006428:	358637bd 	.word	0x358637bd

0800642c <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 800642c:	b580      	push	{r7, lr}
 800642e:	b092      	sub	sp, #72	@ 0x48
 8006430:	af00      	add	r7, sp, #0
 8006432:	ed87 0a07 	vstr	s0, [r7, #28]
 8006436:	edc7 0a06 	vstr	s1, [r7, #24]
 800643a:	ed87 1a05 	vstr	s2, [r7, #20]
 800643e:	edc7 1a04 	vstr	s3, [r7, #16]
 8006442:	ed87 2a03 	vstr	s4, [r7, #12]
 8006446:	edc7 2a02 	vstr	s5, [r7, #8]
 800644a:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 800644e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006452:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645a:	d10e      	bne.n	800647a <MahonyAHRSupdateIMU+0x4e>
 800645c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006460:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006468:	d107      	bne.n	800647a <MahonyAHRSupdateIMU+0x4e>
 800646a:	edd7 7a02 	vldr	s15, [r7, #8]
 800646e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006476:	f000 8138 	beq.w	80066ea <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 800647a:	edd7 7a04 	vldr	s15, [r7, #16]
 800647e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006482:	edd7 7a03 	vldr	s15, [r7, #12]
 8006486:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800648a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800648e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006492:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800649a:	eeb0 0a67 	vmov.f32	s0, s15
 800649e:	f000 fbfd 	bl	8006c9c <invSqrt>
 80064a2:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 80064a6:	ed97 7a04 	vldr	s14, [r7, #16]
 80064aa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80064ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064b2:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 80064b6:	ed97 7a03 	vldr	s14, [r7, #12]
 80064ba:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80064be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064c2:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 80064c6:	ed97 7a02 	vldr	s14, [r7, #8]
 80064ca:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80064ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064d2:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 80064d6:	4b66      	ldr	r3, [pc, #408]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 80064d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80064dc:	4b64      	ldr	r3, [pc, #400]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 80064de:	edd3 7a03 	vldr	s15, [r3, #12]
 80064e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064e6:	4b62      	ldr	r3, [pc, #392]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 80064e8:	edd3 6a00 	vldr	s13, [r3]
 80064ec:	4b60      	ldr	r3, [pc, #384]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 80064ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80064f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064fa:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 80064fe:	4b5c      	ldr	r3, [pc, #368]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 8006500:	ed93 7a00 	vldr	s14, [r3]
 8006504:	4b5a      	ldr	r3, [pc, #360]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 8006506:	edd3 7a01 	vldr	s15, [r3, #4]
 800650a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800650e:	4b58      	ldr	r3, [pc, #352]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 8006510:	edd3 6a02 	vldr	s13, [r3, #8]
 8006514:	4b56      	ldr	r3, [pc, #344]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 8006516:	edd3 7a03 	vldr	s15, [r3, #12]
 800651a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800651e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006522:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8006526:	4b52      	ldr	r3, [pc, #328]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 8006528:	ed93 7a00 	vldr	s14, [r3]
 800652c:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 800652e:	edd3 7a00 	vldr	s15, [r3]
 8006532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006536:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800653a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800653e:	4b4c      	ldr	r3, [pc, #304]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 8006540:	edd3 6a03 	vldr	s13, [r3, #12]
 8006544:	4b4a      	ldr	r3, [pc, #296]	@ (8006670 <MahonyAHRSupdateIMU+0x244>)
 8006546:	edd3 7a03 	vldr	s15, [r3, #12]
 800654a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800654e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006552:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8006556:	ed97 7a03 	vldr	s14, [r7, #12]
 800655a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800655e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006562:	edd7 6a02 	vldr	s13, [r7, #8]
 8006566:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800656a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800656e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006572:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8006576:	ed97 7a02 	vldr	s14, [r7, #8]
 800657a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800657e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006582:	edd7 6a04 	vldr	s13, [r7, #16]
 8006586:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800658a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800658e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006592:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8006596:	ed97 7a04 	vldr	s14, [r7, #16]
 800659a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800659e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065a2:	edd7 6a03 	vldr	s13, [r7, #12]
 80065a6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80065aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80065ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065b2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 80065b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006674 <MahonyAHRSupdateIMU+0x248>)
 80065b8:	edd3 7a00 	vldr	s15, [r3]
 80065bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80065c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c4:	dd5e      	ble.n	8006684 <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 80065c6:	4b2b      	ldr	r3, [pc, #172]	@ (8006674 <MahonyAHRSupdateIMU+0x248>)
 80065c8:	ed93 7a00 	vldr	s14, [r3]
 80065cc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80065d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80065d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065dc:	4b26      	ldr	r3, [pc, #152]	@ (8006678 <MahonyAHRSupdateIMU+0x24c>)
 80065de:	edd3 7a00 	vldr	s15, [r3]
 80065e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065e6:	4b24      	ldr	r3, [pc, #144]	@ (8006678 <MahonyAHRSupdateIMU+0x24c>)
 80065e8:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 80065ec:	4b21      	ldr	r3, [pc, #132]	@ (8006674 <MahonyAHRSupdateIMU+0x248>)
 80065ee:	ed93 7a00 	vldr	s14, [r3]
 80065f2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80065f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80065fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006602:	4b1e      	ldr	r3, [pc, #120]	@ (800667c <MahonyAHRSupdateIMU+0x250>)
 8006604:	edd3 7a00 	vldr	s15, [r3]
 8006608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800660c:	4b1b      	ldr	r3, [pc, #108]	@ (800667c <MahonyAHRSupdateIMU+0x250>)
 800660e:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8006612:	4b18      	ldr	r3, [pc, #96]	@ (8006674 <MahonyAHRSupdateIMU+0x248>)
 8006614:	ed93 7a00 	vldr	s14, [r3]
 8006618:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800661c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006620:	edd7 7a01 	vldr	s15, [r7, #4]
 8006624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006628:	4b15      	ldr	r3, [pc, #84]	@ (8006680 <MahonyAHRSupdateIMU+0x254>)
 800662a:	edd3 7a00 	vldr	s15, [r3]
 800662e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006632:	4b13      	ldr	r3, [pc, #76]	@ (8006680 <MahonyAHRSupdateIMU+0x254>)
 8006634:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8006638:	4b0f      	ldr	r3, [pc, #60]	@ (8006678 <MahonyAHRSupdateIMU+0x24c>)
 800663a:	edd3 7a00 	vldr	s15, [r3]
 800663e:	ed97 7a07 	vldr	s14, [r7, #28]
 8006642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006646:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 800664a:	4b0c      	ldr	r3, [pc, #48]	@ (800667c <MahonyAHRSupdateIMU+0x250>)
 800664c:	edd3 7a00 	vldr	s15, [r3]
 8006650:	ed97 7a06 	vldr	s14, [r7, #24]
 8006654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006658:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 800665c:	4b08      	ldr	r3, [pc, #32]	@ (8006680 <MahonyAHRSupdateIMU+0x254>)
 800665e:	edd3 7a00 	vldr	s15, [r3]
 8006662:	ed97 7a05 	vldr	s14, [r7, #20]
 8006666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800666a:	edc7 7a05 	vstr	s15, [r7, #20]
 800666e:	e015      	b.n	800669c <MahonyAHRSupdateIMU+0x270>
 8006670:	20000020 	.word	0x20000020
 8006674:	20000034 	.word	0x20000034
 8006678:	20001bb4 	.word	0x20001bb4
 800667c:	20001bb8 	.word	0x20001bb8
 8006680:	20001bbc 	.word	0x20001bbc
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8006684:	4b9a      	ldr	r3, [pc, #616]	@ (80068f0 <MahonyAHRSupdateIMU+0x4c4>)
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 800668c:	4b99      	ldr	r3, [pc, #612]	@ (80068f4 <MahonyAHRSupdateIMU+0x4c8>)
 800668e:	f04f 0200 	mov.w	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8006694:	4b98      	ldr	r3, [pc, #608]	@ (80068f8 <MahonyAHRSupdateIMU+0x4cc>)
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 800669c:	4b97      	ldr	r3, [pc, #604]	@ (80068fc <MahonyAHRSupdateIMU+0x4d0>)
 800669e:	ed93 7a00 	vldr	s14, [r3]
 80066a2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80066a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80066ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066b2:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 80066b6:	4b91      	ldr	r3, [pc, #580]	@ (80068fc <MahonyAHRSupdateIMU+0x4d0>)
 80066b8:	ed93 7a00 	vldr	s14, [r3]
 80066bc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80066c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80066c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066cc:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 80066d0:	4b8a      	ldr	r3, [pc, #552]	@ (80068fc <MahonyAHRSupdateIMU+0x4d0>)
 80066d2:	ed93 7a00 	vldr	s14, [r3]
 80066d6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80066da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066de:	ed97 7a05 	vldr	s14, [r7, #20]
 80066e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066e6:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 80066ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80066ee:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80066f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80066f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80066fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fe:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8006702:	edd7 7a01 	vldr	s15, [r7, #4]
 8006706:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800670a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800670e:	ed97 7a06 	vldr	s14, [r7, #24]
 8006712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006716:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 800671a:	edd7 7a01 	vldr	s15, [r7, #4]
 800671e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006726:	ed97 7a05 	vldr	s14, [r7, #20]
 800672a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800672e:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8006732:	4b73      	ldr	r3, [pc, #460]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8006738:	4b71      	ldr	r3, [pc, #452]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 800673e:	4b70      	ldr	r3, [pc, #448]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8006744:	4b6e      	ldr	r3, [pc, #440]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006746:	ed93 7a00 	vldr	s14, [r3]
 800674a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800674e:	eef1 6a67 	vneg.f32	s13, s15
 8006752:	edd7 7a07 	vldr	s15, [r7, #28]
 8006756:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800675a:	ed97 6a08 	vldr	s12, [r7, #32]
 800675e:	edd7 7a06 	vldr	s15, [r7, #24]
 8006762:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006766:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800676a:	4b65      	ldr	r3, [pc, #404]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 800676c:	ed93 6a03 	vldr	s12, [r3, #12]
 8006770:	edd7 7a05 	vldr	s15, [r7, #20]
 8006774:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006778:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800677c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006780:	4b5f      	ldr	r3, [pc, #380]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006782:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8006786:	4b5e      	ldr	r3, [pc, #376]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006788:	ed93 7a01 	vldr	s14, [r3, #4]
 800678c:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8006790:	edd7 7a07 	vldr	s15, [r7, #28]
 8006794:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006798:	ed97 6a08 	vldr	s12, [r7, #32]
 800679c:	edd7 7a05 	vldr	s15, [r7, #20]
 80067a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80067a4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80067a8:	4b55      	ldr	r3, [pc, #340]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80067aa:	ed93 6a03 	vldr	s12, [r3, #12]
 80067ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80067b2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80067b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80067ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067be:	4b50      	ldr	r3, [pc, #320]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80067c0:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 80067c4:	4b4e      	ldr	r3, [pc, #312]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80067c6:	ed93 7a02 	vldr	s14, [r3, #8]
 80067ca:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80067ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80067d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80067d6:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 80067da:	edd7 7a05 	vldr	s15, [r7, #20]
 80067de:	ee66 7a27 	vmul.f32	s15, s12, s15
 80067e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80067e6:	4b46      	ldr	r3, [pc, #280]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80067e8:	ed93 6a03 	vldr	s12, [r3, #12]
 80067ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80067f0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80067f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067fc:	4b40      	ldr	r3, [pc, #256]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80067fe:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 8006802:	4b3f      	ldr	r3, [pc, #252]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006804:	ed93 7a03 	vldr	s14, [r3, #12]
 8006808:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800680c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006810:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006814:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8006818:	edd7 7a06 	vldr	s15, [r7, #24]
 800681c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006820:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006824:	ed97 6a08 	vldr	s12, [r7, #32]
 8006828:	edd7 7a07 	vldr	s15, [r7, #28]
 800682c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006830:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006838:	4b31      	ldr	r3, [pc, #196]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 800683a:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 800683e:	4b30      	ldr	r3, [pc, #192]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006840:	ed93 7a00 	vldr	s14, [r3]
 8006844:	4b2e      	ldr	r3, [pc, #184]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006846:	edd3 7a00 	vldr	s15, [r3]
 800684a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800684e:	4b2c      	ldr	r3, [pc, #176]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006850:	edd3 6a01 	vldr	s13, [r3, #4]
 8006854:	4b2a      	ldr	r3, [pc, #168]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006856:	edd3 7a01 	vldr	s15, [r3, #4]
 800685a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800685e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006862:	4b27      	ldr	r3, [pc, #156]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006864:	edd3 6a02 	vldr	s13, [r3, #8]
 8006868:	4b25      	ldr	r3, [pc, #148]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 800686a:	edd3 7a02 	vldr	s15, [r3, #8]
 800686e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006876:	4b22      	ldr	r3, [pc, #136]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006878:	edd3 6a03 	vldr	s13, [r3, #12]
 800687c:	4b20      	ldr	r3, [pc, #128]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 800687e:	edd3 7a03 	vldr	s15, [r3, #12]
 8006882:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800688a:	eeb0 0a67 	vmov.f32	s0, s15
 800688e:	f000 fa05 	bl	8006c9c <invSqrt>
 8006892:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 8006896:	4b1a      	ldr	r3, [pc, #104]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 8006898:	ed93 7a00 	vldr	s14, [r3]
 800689c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80068a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068a4:	4b16      	ldr	r3, [pc, #88]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80068a6:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 80068aa:	4b15      	ldr	r3, [pc, #84]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80068ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80068b0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80068b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b8:	4b11      	ldr	r3, [pc, #68]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80068ba:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 80068be:	4b10      	ldr	r3, [pc, #64]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80068c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80068c4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80068c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80068ce:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 80068d2:	4b0b      	ldr	r3, [pc, #44]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80068d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80068d8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80068dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e0:	4b07      	ldr	r3, [pc, #28]	@ (8006900 <MahonyAHRSupdateIMU+0x4d4>)
 80068e2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80068e6:	bf00      	nop
 80068e8:	3748      	adds	r7, #72	@ 0x48
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20001bb4 	.word	0x20001bb4
 80068f4:	20001bb8 	.word	0x20001bb8
 80068f8:	20001bbc 	.word	0x20001bbc
 80068fc:	20000030 	.word	0x20000030
 8006900:	20000020 	.word	0x20000020

08006904 <quaternionToThetaZ>:


float quaternionToThetaZ() {
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 800690a:	4b44      	ldr	r3, [pc, #272]	@ (8006a1c <quaternionToThetaZ+0x118>)
 800690c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006910:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006914:	4b41      	ldr	r3, [pc, #260]	@ (8006a1c <quaternionToThetaZ+0x118>)
 8006916:	edd3 7a03 	vldr	s15, [r3, #12]
 800691a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800691e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a1c <quaternionToThetaZ+0x118>)
 8006920:	edd3 7a02 	vldr	s15, [r3, #8]
 8006924:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006928:	4b3c      	ldr	r3, [pc, #240]	@ (8006a1c <quaternionToThetaZ+0x118>)
 800692a:	edd3 7a00 	vldr	s15, [r3]
 800692e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006936:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 800693a:	4b38      	ldr	r3, [pc, #224]	@ (8006a1c <quaternionToThetaZ+0x118>)
 800693c:	edd3 7a02 	vldr	s15, [r3, #8]
 8006940:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006944:	4b35      	ldr	r3, [pc, #212]	@ (8006a1c <quaternionToThetaZ+0x118>)
 8006946:	edd3 7a03 	vldr	s15, [r3, #12]
 800694a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800694e:	4b33      	ldr	r3, [pc, #204]	@ (8006a1c <quaternionToThetaZ+0x118>)
 8006950:	edd3 7a01 	vldr	s15, [r3, #4]
 8006954:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006958:	4b30      	ldr	r3, [pc, #192]	@ (8006a1c <quaternionToThetaZ+0x118>)
 800695a:	edd3 7a00 	vldr	s15, [r3]
 800695e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006966:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 800696a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a1c <quaternionToThetaZ+0x118>)
 800696c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006970:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8006974:	4b29      	ldr	r3, [pc, #164]	@ (8006a1c <quaternionToThetaZ+0x118>)
 8006976:	edd3 7a01 	vldr	s15, [r3, #4]
 800697a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800697e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006982:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006986:	4b25      	ldr	r3, [pc, #148]	@ (8006a1c <quaternionToThetaZ+0x118>)
 8006988:	edd3 7a02 	vldr	s15, [r3, #8]
 800698c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8006990:	4b22      	ldr	r3, [pc, #136]	@ (8006a1c <quaternionToThetaZ+0x118>)
 8006992:	edd3 7a02 	vldr	s15, [r3, #8]
 8006996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800699a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800699e:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 80069a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80069aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80069ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80069b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80069b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80069ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80069be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80069c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069c6:	eeb0 0a67 	vmov.f32	s0, s15
 80069ca:	f011 f935 	bl	8017c38 <sqrtf>
 80069ce:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 80069d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80069d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80069da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80069de:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80069e2:	eeb0 0a66 	vmov.f32	s0, s13
 80069e6:	f011 f974 	bl	8017cd2 <fminf>
 80069ea:	eef0 7a40 	vmov.f32	s15, s0
 80069ee:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80069f2:	eeb0 0a67 	vmov.f32	s0, s15
 80069f6:	f011 f94f 	bl	8017c98 <fmaxf>
 80069fa:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 80069fe:	ed97 0a00 	vldr	s0, [r7]
 8006a02:	f011 f8ed 	bl	8017be0 <acosf>
 8006a06:	eef0 7a40 	vmov.f32	s15, s0
 8006a0a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006a20 <quaternionToThetaZ+0x11c>
 8006a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006a12:	eeb0 0a67 	vmov.f32	s0, s15
 8006a16:	3718      	adds	r7, #24
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	20000020 	.word	0x20000020
 8006a20:	42654ca3 	.word	0x42654ca3

08006a24 <getInitialQuaternion>:
float quaternionToRoll(){
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
return roll;
}

void getInitialQuaternion() {
 8006a24:	b5b0      	push	{r4, r5, r7, lr}
 8006a26:	b092      	sub	sp, #72	@ 0x48
 8006a28:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 8006a2a:	4b98      	ldr	r3, [pc, #608]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006a2c:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 8006a30:	4b96      	ldr	r3, [pc, #600]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006a32:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8006a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a3a:	4b94      	ldr	r3, [pc, #592]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006a3c:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 8006a40:	4b92      	ldr	r3, [pc, #584]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006a42:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8006a46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a4e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006a50:	edd3 6a18 	vldr	s13, [r3, #96]	@ 0x60
 8006a54:	4b8d      	ldr	r3, [pc, #564]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006a56:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8006a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a62:	ee17 0a90 	vmov	r0, s15
 8006a66:	f7f9 fd8f 	bl	8000588 <__aeabi_f2d>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	ec43 2b10 	vmov	d0, r2, r3
 8006a72:	f011 f835 	bl	8017ae0 <sqrt>
 8006a76:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 8006a7a:	4b84      	ldr	r3, [pc, #528]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7f9 fd82 	bl	8000588 <__aeabi_f2d>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 8006a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006a8e:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 8006a92:	eef1 7a67 	vneg.f32	s15, s15
 8006a96:	ee17 3a90 	vmov	r3, s15
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7f9 fd74 	bl	8000588 <__aeabi_f2d>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8006aa8:	4b78      	ldr	r3, [pc, #480]	@ (8006c8c <getInitialQuaternion+0x268>)
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7f9 fd6b 	bl	8000588 <__aeabi_f2d>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	460b      	mov	r3, r1
 8006ab6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 8006aba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006abe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ac2:	f7f9 fee3 	bl	800088c <__aeabi_ddiv>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 8006ace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ad6:	f7f9 fed9 	bl	800088c <__aeabi_ddiv>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 8006ae2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006ae6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006aea:	f7f9 fecf 	bl	800088c <__aeabi_ddiv>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8006af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006afa:	f04f 0000 	mov.w	r0, #0
 8006afe:	4964      	ldr	r1, [pc, #400]	@ (8006c90 <getInitialQuaternion+0x26c>)
 8006b00:	f7f9 fbe2 	bl	80002c8 <__aeabi_dsub>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	ec43 2b17 	vmov	d7, r2, r3
 8006b0c:	eeb0 0a47 	vmov.f32	s0, s14
 8006b10:	eef0 0a67 	vmov.f32	s1, s15
 8006b14:	f010 ffe4 	bl	8017ae0 <sqrt>
 8006b18:	ec51 0b10 	vmov	r0, r1, d0
 8006b1c:	f04f 0200 	mov.w	r2, #0
 8006b20:	4b5c      	ldr	r3, [pc, #368]	@ (8006c94 <getInitialQuaternion+0x270>)
 8006b22:	f7f9 fd89 	bl	8000638 <__aeabi_dmul>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 8006b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b32:	f04f 0000 	mov.w	r0, #0
 8006b36:	4957      	ldr	r1, [pc, #348]	@ (8006c94 <getInitialQuaternion+0x270>)
 8006b38:	f7f9 fea8 	bl	800088c <__aeabi_ddiv>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 8006b44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b4c:	f7f9 fd74 	bl	8000638 <__aeabi_dmul>
 8006b50:	4602      	mov	r2, r0
 8006b52:	460b      	mov	r3, r1
 8006b54:	4610      	mov	r0, r2
 8006b56:	4619      	mov	r1, r3
 8006b58:	f04f 0200 	mov.w	r2, #0
 8006b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8006c94 <getInitialQuaternion+0x270>)
 8006b5e:	f7f9 fd6b 	bl	8000638 <__aeabi_dmul>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 8006b6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006b6e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b72:	f7f9 fd61 	bl	8000638 <__aeabi_dmul>
 8006b76:	4602      	mov	r2, r0
 8006b78:	460b      	mov	r3, r1
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	f04f 0200 	mov.w	r2, #0
 8006b82:	4b44      	ldr	r3, [pc, #272]	@ (8006c94 <getInitialQuaternion+0x270>)
 8006b84:	f7f9 fd58 	bl	8000638 <__aeabi_dmul>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 8006b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba4:	f7f9 fd48 	bl	8000638 <__aeabi_dmul>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	4614      	mov	r4, r2
 8006bae:	461d      	mov	r5, r3
 8006bb0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bb8:	f7f9 fd3e 	bl	8000638 <__aeabi_dmul>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7f9 fb82 	bl	80002cc <__adddf3>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4614      	mov	r4, r2
 8006bce:	461d      	mov	r5, r3
 8006bd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006bd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006bd8:	f7f9 fd2e 	bl	8000638 <__aeabi_dmul>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	460b      	mov	r3, r1
 8006be0:	4620      	mov	r0, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	f7f9 fb72 	bl	80002cc <__adddf3>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4614      	mov	r4, r2
 8006bee:	461d      	mov	r5, r3
 8006bf0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006bf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bf8:	f7f9 fd1e 	bl	8000638 <__aeabi_dmul>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4620      	mov	r0, r4
 8006c02:	4629      	mov	r1, r5
 8006c04:	f7f9 fb62 	bl	80002cc <__adddf3>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	ec43 2b17 	vmov	d7, r2, r3
 8006c10:	eeb0 0a47 	vmov.f32	s0, s14
 8006c14:	eef0 0a67 	vmov.f32	s1, s15
 8006c18:	f010 ff62 	bl	8017ae0 <sqrt>
 8006c1c:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8006c20:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c24:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c28:	f7f9 fe30 	bl	800088c <__aeabi_ddiv>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4610      	mov	r0, r2
 8006c32:	4619      	mov	r1, r3
 8006c34:	f7f9 fff8 	bl	8000c28 <__aeabi_d2f>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	4a17      	ldr	r2, [pc, #92]	@ (8006c98 <getInitialQuaternion+0x274>)
 8006c3c:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 8006c3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c46:	f7f9 fe21 	bl	800088c <__aeabi_ddiv>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4619      	mov	r1, r3
 8006c52:	f7f9 ffe9 	bl	8000c28 <__aeabi_d2f>
 8006c56:	4603      	mov	r3, r0
 8006c58:	4a0f      	ldr	r2, [pc, #60]	@ (8006c98 <getInitialQuaternion+0x274>)
 8006c5a:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 8006c5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006c60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006c64:	f7f9 fe12 	bl	800088c <__aeabi_ddiv>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	4619      	mov	r1, r3
 8006c70:	f7f9 ffda 	bl	8000c28 <__aeabi_d2f>
 8006c74:	4603      	mov	r3, r0
 8006c76:	4a08      	ldr	r2, [pc, #32]	@ (8006c98 <getInitialQuaternion+0x274>)
 8006c78:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 8006c7a:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <getInitialQuaternion+0x274>)
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	60da      	str	r2, [r3, #12]
}
 8006c82:	bf00      	nop
 8006c84:	3748      	adds	r7, #72	@ 0x48
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bdb0      	pop	{r4, r5, r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	20001a20 	.word	0x20001a20
 8006c90:	3ff00000 	.word	0x3ff00000
 8006c94:	3fe00000 	.word	0x3fe00000
 8006c98:	20000020 	.word	0x20000020

08006c9c <invSqrt>:

float invSqrt(float x) {
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8006ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006caa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006cae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cb2:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8006cba:	f107 0310 	add.w	r3, r7, #16
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	105a      	asrs	r2, r3, #1
 8006cc6:	4b12      	ldr	r3, [pc, #72]	@ (8006d10 <invSqrt+0x74>)
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8006ccc:	f107 030c 	add.w	r3, r7, #12
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8006cd4:	ed97 7a04 	vldr	s14, [r7, #16]
 8006cd8:	edd7 7a05 	vldr	s15, [r7, #20]
 8006cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ce0:	edd7 7a04 	vldr	s15, [r7, #16]
 8006ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ce8:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8006cec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006cf0:	edd7 7a04 	vldr	s15, [r7, #16]
 8006cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf8:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	ee07 3a90 	vmov	s15, r3
}
 8006d02:	eeb0 0a67 	vmov.f32	s0, s15
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	5f3759df 	.word	0x5f3759df

08006d14 <calculate_accel_std_deviation>:
/**
 * @brief İvme değerlerinin standart sapmasını hesapla
 * @return Standart sapma değeri
 */
static float calculate_accel_std_deviation(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
    // Buffer dolmadıysa ve çok az veri varsa
    if (!accel_buffer_full && accel_buffer_index < 2) return 0.0f;
 8006d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8006e10 <calculate_accel_std_deviation+0xfc>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d106      	bne.n	8006d30 <calculate_accel_std_deviation+0x1c>
 8006d22:	4b3c      	ldr	r3, [pc, #240]	@ (8006e14 <calculate_accel_std_deviation+0x100>)
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d802      	bhi.n	8006d30 <calculate_accel_std_deviation+0x1c>
 8006d2a:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8006e18 <calculate_accel_std_deviation+0x104>
 8006d2e:	e069      	b.n	8006e04 <calculate_accel_std_deviation+0xf0>

    int count = accel_buffer_full ? ACCEL_BUFFER_SIZE : accel_buffer_index;
 8006d30:	4b37      	ldr	r3, [pc, #220]	@ (8006e10 <calculate_accel_std_deviation+0xfc>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <calculate_accel_std_deviation+0x2a>
 8006d38:	4b36      	ldr	r3, [pc, #216]	@ (8006e14 <calculate_accel_std_deviation+0x100>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	e000      	b.n	8006d40 <calculate_accel_std_deviation+0x2c>
 8006d3e:	2305      	movs	r3, #5
 8006d40:	607b      	str	r3, [r7, #4]
    float sum = 0.0f;
 8006d42:	f04f 0300 	mov.w	r3, #0
 8006d46:	617b      	str	r3, [r7, #20]
    float mean = 0.0f;
 8006d48:	f04f 0300 	mov.w	r3, #0
 8006d4c:	603b      	str	r3, [r7, #0]
    float variance = 0.0f;
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	613b      	str	r3, [r7, #16]

    // Ortalama hesapla
    for (int i = 0; i < count; i++) {
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	e00e      	b.n	8006d78 <calculate_accel_std_deviation+0x64>
        sum += accel_buffer[i];
 8006d5a:	4a30      	ldr	r2, [pc, #192]	@ (8006e1c <calculate_accel_std_deviation+0x108>)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	edd3 7a00 	vldr	s15, [r3]
 8006d66:	ed97 7a05 	vldr	s14, [r7, #20]
 8006d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d6e:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < count; i++) {
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	dbec      	blt.n	8006d5a <calculate_accel_std_deviation+0x46>
    }
    mean = sum / count;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	ee07 3a90 	vmov	s15, r3
 8006d86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d8a:	edd7 6a05 	vldr	s13, [r7, #20]
 8006d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d92:	edc7 7a00 	vstr	s15, [r7]

    // Varyans hesapla
    for (int i = 0; i < count; i++) {
 8006d96:	2300      	movs	r3, #0
 8006d98:	60bb      	str	r3, [r7, #8]
 8006d9a:	e01e      	b.n	8006dda <calculate_accel_std_deviation+0xc6>
        variance += (accel_buffer[i] - mean) * (accel_buffer[i] - mean);
 8006d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006e1c <calculate_accel_std_deviation+0x108>)
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	4413      	add	r3, r2
 8006da4:	ed93 7a00 	vldr	s14, [r3]
 8006da8:	edd7 7a00 	vldr	s15, [r7]
 8006dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006db0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e1c <calculate_accel_std_deviation+0x108>)
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	009b      	lsls	r3, r3, #2
 8006db6:	4413      	add	r3, r2
 8006db8:	edd3 6a00 	vldr	s13, [r3]
 8006dbc:	edd7 7a00 	vldr	s15, [r7]
 8006dc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8006dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd0:	edc7 7a04 	vstr	s15, [r7, #16]
    for (int i = 0; i < count; i++) {
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	dbdc      	blt.n	8006d9c <calculate_accel_std_deviation+0x88>
    }
    variance /= count;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	ee07 3a90 	vmov	s15, r3
 8006de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006dec:	edd7 6a04 	vldr	s13, [r7, #16]
 8006df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006df4:	edc7 7a04 	vstr	s15, [r7, #16]

    return sqrtf(variance);
 8006df8:	ed97 0a04 	vldr	s0, [r7, #16]
 8006dfc:	f010 ff1c 	bl	8017c38 <sqrtf>
 8006e00:	eef0 7a40 	vmov.f32	s15, s0
}
 8006e04:	eeb0 0a67 	vmov.f32	s0, s15
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20001c41 	.word	0x20001c41
 8006e14:	20001c40 	.word	0x20001c40
 8006e18:	00000000 	.word	0x00000000
 8006e1c:	20001c2c 	.word	0x20001c2c

08006e20 <detect_accel_failure>:
 * @brief İvme sensörünün arızalı olup olmadığını kontrol et
 * @param accel İvme değeri (m/s²)
 * @return 1: Arıza tespit edildi, 0: Arıza yok
 */
static uint8_t detect_accel_failure(float accel)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b088      	sub	sp, #32
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	ed87 0a01 	vstr	s0, [r7, #4]
    float accel_abs = fabsf(accel);
 8006e2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8006e32:	edc7 7a05 	vstr	s15, [r7, #20]
    float max_accel, max_std;

    // Buffer güncelleme
    accel_buffer[accel_buffer_index] = accel_abs;
 8006e36:	4b31      	ldr	r3, [pc, #196]	@ (8006efc <detect_accel_failure+0xdc>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	4a31      	ldr	r2, [pc, #196]	@ (8006f00 <detect_accel_failure+0xe0>)
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	601a      	str	r2, [r3, #0]
    accel_buffer_index = (accel_buffer_index + 1) % ACCEL_BUFFER_SIZE;
 8006e44:	4b2d      	ldr	r3, [pc, #180]	@ (8006efc <detect_accel_failure+0xdc>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	1c5a      	adds	r2, r3, #1
 8006e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8006f04 <detect_accel_failure+0xe4>)
 8006e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8006e50:	1059      	asrs	r1, r3, #1
 8006e52:	17d3      	asrs	r3, r2, #31
 8006e54:	1ac9      	subs	r1, r1, r3
 8006e56:	460b      	mov	r3, r1
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	440b      	add	r3, r1
 8006e5c:	1ad1      	subs	r1, r2, r3
 8006e5e:	b2ca      	uxtb	r2, r1
 8006e60:	4b26      	ldr	r3, [pc, #152]	@ (8006efc <detect_accel_failure+0xdc>)
 8006e62:	701a      	strb	r2, [r3, #0]
    if (accel_buffer_index == 0) {
 8006e64:	4b25      	ldr	r3, [pc, #148]	@ (8006efc <detect_accel_failure+0xdc>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <detect_accel_failure+0x52>
        accel_buffer_full = 1;
 8006e6c:	4b26      	ldr	r3, [pc, #152]	@ (8006f08 <detect_accel_failure+0xe8>)
 8006e6e:	2201      	movs	r2, #1
 8006e70:	701a      	strb	r2, [r3, #0]
    }

    // Standart sapma hesapla
    float std_dev = calculate_accel_std_deviation();
 8006e72:	f7ff ff4f 	bl	8006d14 <calculate_accel_std_deviation>
 8006e76:	ed87 0a04 	vstr	s0, [r7, #16]

    // Uçuş başlangıç zamanını flight_algorithm'dan al
	uint32_t algorithm_start_time = flight_algorithm_get_start_time();
 8006e7a:	f7fc fa59 	bl	8003330 <flight_algorithm_get_start_time>
 8006e7e:	60f8      	str	r0, [r7, #12]

	// Uçuş başlamışsa flight_algorithm'dan gelen zamanı kullan
	if (algorithm_start_time > 0) {
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <detect_accel_failure+0x6c>
		flight_start_time = algorithm_start_time;
 8006e86:	4a21      	ldr	r2, [pc, #132]	@ (8006f0c <detect_accel_failure+0xec>)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6013      	str	r3, [r2, #0]
	}

	// Uçuş fazına göre limit değerlerini belirle
	if (flight_start_time == 0) {
 8006e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8006f0c <detect_accel_failure+0xec>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d104      	bne.n	8006e9e <detect_accel_failure+0x7e>
		max_accel = 200.0f;  // Yer hazırlığında gerçekçi olmayan çok yüksek değer
 8006e94:	4b1e      	ldr	r3, [pc, #120]	@ (8006f10 <detect_accel_failure+0xf0>)
 8006e96:	61fb      	str	r3, [r7, #28]
		max_std = 100.0f;    // Yer hazırlığında çok yüksek standart sapma eşiği
 8006e98:	4b1e      	ldr	r3, [pc, #120]	@ (8006f14 <detect_accel_failure+0xf4>)
 8006e9a:	61bb      	str	r3, [r7, #24]
 8006e9c:	e014      	b.n	8006ec8 <detect_accel_failure+0xa8>
	}
	else {
		// *** UÇUŞ BAŞLADI - NORMAL ARIZA TESPİTİ ***
		uint32_t flight_elapsed_time = HAL_GetTick() - flight_start_time;
 8006e9e:	f000 ff63 	bl	8007d68 <HAL_GetTick>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	4b19      	ldr	r3, [pc, #100]	@ (8006f0c <detect_accel_failure+0xec>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	60bb      	str	r3, [r7, #8]

		if (flight_elapsed_time < THRUST_PHASE_DURATION_MS) {
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d804      	bhi.n	8006ec0 <detect_accel_failure+0xa0>
			// İtki fazı - Yüksek limitler
			max_accel = ACCEL_MAX_VALUE_THRUST;
 8006eb6:	4b18      	ldr	r3, [pc, #96]	@ (8006f18 <detect_accel_failure+0xf8>)
 8006eb8:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_THRUST;
 8006eba:	4b18      	ldr	r3, [pc, #96]	@ (8006f1c <detect_accel_failure+0xfc>)
 8006ebc:	61bb      	str	r3, [r7, #24]
 8006ebe:	e003      	b.n	8006ec8 <detect_accel_failure+0xa8>
		} else {
			// Seyir fazı - Düşük limitler
			max_accel = ACCEL_MAX_VALUE_CRUISE;
 8006ec0:	4b16      	ldr	r3, [pc, #88]	@ (8006f1c <detect_accel_failure+0xfc>)
 8006ec2:	61fb      	str	r3, [r7, #28]
			max_std = ACCEL_MAX_STD_CRUISE;
 8006ec4:	4b16      	ldr	r3, [pc, #88]	@ (8006f20 <detect_accel_failure+0x100>)
 8006ec6:	61bb      	str	r3, [r7, #24]
		}
	}

    // İvme değeri veya standart sapma limitler dışındaysa
    if (accel_abs > max_accel || std_dev > max_std) {
 8006ec8:	ed97 7a05 	vldr	s14, [r7, #20]
 8006ecc:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ed0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed8:	dc08      	bgt.n	8006eec <detect_accel_failure+0xcc>
 8006eda:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ede:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eea:	dd01      	ble.n	8006ef0 <detect_accel_failure+0xd0>
        return 1;  // Arıza tespit edildi
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <detect_accel_failure+0xd2>
    }

    return 0;  // Arıza yok
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3720      	adds	r7, #32
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20001c40 	.word	0x20001c40
 8006f00:	20001c2c 	.word	0x20001c2c
 8006f04:	66666667 	.word	0x66666667
 8006f08:	20001c41 	.word	0x20001c41
 8006f0c:	20001c28 	.word	0x20001c28
 8006f10:	43480000 	.word	0x43480000
 8006f14:	42c80000 	.word	0x42c80000
 8006f18:	43160000 	.word	0x43160000
 8006f1c:	42480000 	.word	0x42480000
 8006f20:	41700000 	.word	0x41700000

08006f24 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 8006f2c:	481b      	ldr	r0, [pc, #108]	@ (8006f9c <sensor_fusion_init+0x78>)
 8006f2e:	f7fc fa0b 	bl	8003348 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8006f32:	4b1a      	ldr	r3, [pc, #104]	@ (8006f9c <sensor_fusion_init+0x78>)
 8006f34:	4a1a      	ldr	r2, [pc, #104]	@ (8006fa0 <sensor_fusion_init+0x7c>)
 8006f36:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8006f38:	4b18      	ldr	r3, [pc, #96]	@ (8006f9c <sensor_fusion_init+0x78>)
 8006f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006fa4 <sensor_fusion_init+0x80>)
 8006f3c:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 8006f3e:	4b17      	ldr	r3, [pc, #92]	@ (8006f9c <sensor_fusion_init+0x78>)
 8006f40:	4a19      	ldr	r2, [pc, #100]	@ (8006fa8 <sensor_fusion_init+0x84>)
 8006f42:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e009      	b.n	8006f5e <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 8006f4a:	4a18      	ldr	r2, [pc, #96]	@ (8006fac <sensor_fusion_init+0x88>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b04      	cmp	r3, #4
 8006f62:	ddf2      	ble.n	8006f4a <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 8006f64:	4b12      	ldr	r3, [pc, #72]	@ (8006fb0 <sensor_fusion_init+0x8c>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 8006f6a:	4b12      	ldr	r3, [pc, #72]	@ (8006fb4 <sensor_fusion_init+0x90>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 8006f70:	4b11      	ldr	r3, [pc, #68]	@ (8006fb8 <sensor_fusion_init+0x94>)
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 8006f76:	4b11      	ldr	r3, [pc, #68]	@ (8006fbc <sensor_fusion_init+0x98>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f80:	4a0f      	ldr	r2, [pc, #60]	@ (8006fc0 <sensor_fusion_init+0x9c>)
 8006f82:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 8006f84:	f000 fef0 	bl	8007d68 <HAL_GetTick>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8006fc4 <sensor_fusion_init+0xa0>)
 8006f8c:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 8006f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc8 <sensor_fusion_init+0xa4>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	601a      	str	r2, [r3, #0]
}
 8006f94:	bf00      	nop
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	20001bd0 	.word	0x20001bd0
 8006fa0:	3dcccccd 	.word	0x3dcccccd
 8006fa4:	3ba3d70a 	.word	0x3ba3d70a
 8006fa8:	40a00000 	.word	0x40a00000
 8006fac:	20001c2c 	.word	0x20001c2c
 8006fb0:	20001c40 	.word	0x20001c40
 8006fb4:	20001c41 	.word	0x20001c41
 8006fb8:	20001c42 	.word	0x20001c42
 8006fbc:	20001c1c 	.word	0x20001c1c
 8006fc0:	20001c20 	.word	0x20001c20
 8006fc4:	20001c24 	.word	0x20001c24
 8006fc8:	20001c28 	.word	0x20001c28
 8006fcc:	00000000 	.word	0x00000000

08006fd0 <sensor_fusion_update_kalman>:

/**
 * @brief Update sensor fusion with new measurements (Kalman filter)
 */
void sensor_fusion_update_kalman(BME_280_t* BME, bmi088_struct_t* BMI, sensor_fusion_t* sensor)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	@ 0x28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
    // Get current time for automatic delta calculation
    uint32_t current_time = HAL_GetTick();
 8006fdc:	f000 fec4 	bl	8007d68 <HAL_GetTick>
 8006fe0:	6238      	str	r0, [r7, #32]

    // Calculate time difference in seconds
    float time_sec = (current_time - last_kalman_update_time) / 1000.0f;
 8006fe2:	4b4b      	ldr	r3, [pc, #300]	@ (8007110 <sensor_fusion_update_kalman+0x140>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6a3a      	ldr	r2, [r7, #32]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ff2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007114 <sensor_fusion_update_kalman+0x144>
 8006ff6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ffa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Update the last update time
    last_kalman_update_time = current_time;
 8006ffe:	4a44      	ldr	r2, [pc, #272]	@ (8007110 <sensor_fusion_update_kalman+0x140>)
 8007000:	6a3b      	ldr	r3, [r7, #32]
 8007002:	6013      	str	r3, [r2, #0]

    float altitude = BME->altitude;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a1b      	ldr	r3, [r3, #32]
 8007008:	61fb      	str	r3, [r7, #28]

    // Ensure time is valid (never zero or negative)
    if (time_sec <= 0.001f) {
 800700a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800700e:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8007118 <sensor_fusion_update_kalman+0x148>
 8007012:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701a:	d801      	bhi.n	8007020 <sensor_fusion_update_kalman+0x50>
        time_sec = 0.01f; // Use default time step if invalid
 800701c:	4b3f      	ldr	r3, [pc, #252]	@ (800711c <sensor_fusion_update_kalman+0x14c>)
 800701e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Calculate vertical acceleration by compensating for gravity using IMU orientation
    float angle_rad = BMI->datas.theta * (M_PI / 180.0f);  // dereceyse radyana çevir
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007024:	4618      	mov	r0, r3
 8007026:	f7f9 faaf 	bl	8000588 <__aeabi_f2d>
 800702a:	a335      	add	r3, pc, #212	@ (adr r3, 8007100 <sensor_fusion_update_kalman+0x130>)
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f7f9 fb02 	bl	8000638 <__aeabi_dmul>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4610      	mov	r0, r2
 800703a:	4619      	mov	r1, r3
 800703c:	f7f9 fdf4 	bl	8000c28 <__aeabi_d2f>
 8007040:	4603      	mov	r3, r0
 8007042:	61bb      	str	r3, [r7, #24]

    // Yerçekimi ivmesinin lokal z eksenindeki bileşeni
    float g_local_z = 9.81f * cos(angle_rad);
 8007044:	69b8      	ldr	r0, [r7, #24]
 8007046:	f7f9 fa9f 	bl	8000588 <__aeabi_f2d>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	ec43 2b10 	vmov	d0, r2, r3
 8007052:	f010 fd71 	bl	8017b38 <cos>
 8007056:	ec51 0b10 	vmov	r0, r1, d0
 800705a:	a32b      	add	r3, pc, #172	@ (adr r3, 8007108 <sensor_fusion_update_kalman+0x138>)
 800705c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007060:	f7f9 faea 	bl	8000638 <__aeabi_dmul>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4610      	mov	r0, r2
 800706a:	4619      	mov	r1, r3
 800706c:	f7f9 fddc 	bl	8000c28 <__aeabi_d2f>
 8007070:	4603      	mov	r3, r0
 8007072:	617b      	str	r3, [r7, #20]

    // Gerçek ivmeyi hesapla:
    float accel_z_corrected = BMI->datas.acc_z - g_local_z;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	ed93 7a19 	vldr	s14, [r3, #100]	@ 0x64
 800707a:	edd7 7a05 	vldr	s15, [r7, #20]
 800707e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007082:	edc7 7a04 	vstr	s15, [r7, #16]

    // İvme sensörü arıza tespiti
    accel_failure_detected = detect_accel_failure(accel_z_corrected);
 8007086:	ed97 0a04 	vldr	s0, [r7, #16]
 800708a:	f7ff fec9 	bl	8006e20 <detect_accel_failure>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	4b23      	ldr	r3, [pc, #140]	@ (8007120 <sensor_fusion_update_kalman+0x150>)
 8007094:	701a      	strb	r2, [r3, #0]

    // Arıza durumuna göre Kalman filtresi parametrelerini güncelle
    if (accel_failure_detected) {
 8007096:	4b22      	ldr	r3, [pc, #136]	@ (8007120 <sensor_fusion_update_kalman+0x150>)
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <sensor_fusion_update_kalman+0xd6>
        // Arıza tespit edildi - ivme sensörüne çok az güven
        kalman.measurement_noise_acc = 50.0f;
 800709e:	4b21      	ldr	r3, [pc, #132]	@ (8007124 <sensor_fusion_update_kalman+0x154>)
 80070a0:	4a21      	ldr	r2, [pc, #132]	@ (8007128 <sensor_fusion_update_kalman+0x158>)
 80070a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80070a4:	e002      	b.n	80070ac <sensor_fusion_update_kalman+0xdc>
    } else {
        // Normal durum - normal güven
        kalman.measurement_noise_acc = 0.3f;
 80070a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007124 <sensor_fusion_update_kalman+0x154>)
 80070a8:	4a20      	ldr	r2, [pc, #128]	@ (800712c <sensor_fusion_update_kalman+0x15c>)
 80070aa:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    // Only update if initialized
    if (initialized) {
 80070ac:	4b20      	ldr	r3, [pc, #128]	@ (8007130 <sensor_fusion_update_kalman+0x160>)
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d020      	beq.n	80070f6 <sensor_fusion_update_kalman+0x126>
        sensor->filtered_altitude = KalmanFilter_Update(&kalman, altitude, accel_z_corrected, time_sec);
 80070b4:	ed97 1a09 	vldr	s2, [r7, #36]	@ 0x24
 80070b8:	edd7 0a04 	vldr	s1, [r7, #16]
 80070bc:	ed97 0a07 	vldr	s0, [r7, #28]
 80070c0:	4818      	ldr	r0, [pc, #96]	@ (8007124 <sensor_fusion_update_kalman+0x154>)
 80070c2:	f7fc f99b 	bl	80033fc <KalmanFilter_Update>
 80070c6:	eef0 7a40 	vmov.f32	s15, s0
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	edc3 7a00 	vstr	s15, [r3]
        sensor->apogeeDetect = KalmanFilter_IsApogeeDetected(&kalman);
 80070d0:	4814      	ldr	r0, [pc, #80]	@ (8007124 <sensor_fusion_update_kalman+0x154>)
 80070d2:	f7fd fb77 	bl	80047c4 <KalmanFilter_IsApogeeDetected>
 80070d6:	4603      	mov	r3, r0
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	761a      	strb	r2, [r3, #24]
        sensor->velocity = Kalman_Get_Velocity(&kalman);
 80070de:	4811      	ldr	r0, [pc, #68]	@ (8007124 <sensor_fusion_update_kalman+0x154>)
 80070e0:	f7fd fb61 	bl	80047a6 <Kalman_Get_Velocity>
 80070e4:	eef0 7a40 	vmov.f32	s15, s0
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	edc3 7a01 	vstr	s15, [r3, #4]
            sensor->velocity = (sensor->filtered_altitude - prev_altitude) / time_sec;
        }
        prev_altitude = sensor->filtered_altitude;*/

        // Arıza durumunu sensor yapısına ekleyelim (telemetri için kullanılabilir)
        sensor->accel_failure = accel_failure_detected;
 80070ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007120 <sensor_fusion_update_kalman+0x150>)
 80070f0:	781a      	ldrb	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	765a      	strb	r2, [r3, #25]
    }
}
 80070f6:	bf00      	nop
 80070f8:	3728      	adds	r7, #40	@ 0x28
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	a2529d39 	.word	0xa2529d39
 8007104:	3f91df46 	.word	0x3f91df46
 8007108:	60000000 	.word	0x60000000
 800710c:	40239eb8 	.word	0x40239eb8
 8007110:	20001c24 	.word	0x20001c24
 8007114:	447a0000 	.word	0x447a0000
 8007118:	3a83126f 	.word	0x3a83126f
 800711c:	3c23d70a 	.word	0x3c23d70a
 8007120:	20001c42 	.word	0x20001c42
 8007124:	20001bd0 	.word	0x20001bd0
 8007128:	42480000 	.word	0x42480000
 800712c:	3e99999a 	.word	0x3e99999a
 8007130:	20001c1c 	.word	0x20001c1c

08007134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800713a:	2300      	movs	r3, #0
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	4b10      	ldr	r3, [pc, #64]	@ (8007180 <HAL_MspInit+0x4c>)
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	4a0f      	ldr	r2, [pc, #60]	@ (8007180 <HAL_MspInit+0x4c>)
 8007144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007148:	6453      	str	r3, [r2, #68]	@ 0x44
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <HAL_MspInit+0x4c>)
 800714c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800714e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007152:	607b      	str	r3, [r7, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007156:	2300      	movs	r3, #0
 8007158:	603b      	str	r3, [r7, #0]
 800715a:	4b09      	ldr	r3, [pc, #36]	@ (8007180 <HAL_MspInit+0x4c>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800715e:	4a08      	ldr	r2, [pc, #32]	@ (8007180 <HAL_MspInit+0x4c>)
 8007160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007164:	6413      	str	r3, [r2, #64]	@ 0x40
 8007166:	4b06      	ldr	r3, [pc, #24]	@ (8007180 <HAL_MspInit+0x4c>)
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800716e:	603b      	str	r3, [r7, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007172:	bf00      	nop
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40023800 	.word	0x40023800

08007184 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b08e      	sub	sp, #56	@ 0x38
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800718c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	605a      	str	r2, [r3, #4]
 8007196:	609a      	str	r2, [r3, #8]
 8007198:	60da      	str	r2, [r3, #12]
 800719a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a45      	ldr	r2, [pc, #276]	@ (80072b8 <HAL_ADC_MspInit+0x134>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d128      	bne.n	80071f8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80071a6:	2300      	movs	r3, #0
 80071a8:	623b      	str	r3, [r7, #32]
 80071aa:	4b44      	ldr	r3, [pc, #272]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 80071ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ae:	4a43      	ldr	r2, [pc, #268]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 80071b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80071b6:	4b41      	ldr	r3, [pc, #260]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 80071b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071be:	623b      	str	r3, [r7, #32]
 80071c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
 80071c6:	4b3d      	ldr	r3, [pc, #244]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 80071c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ca:	4a3c      	ldr	r2, [pc, #240]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 80071cc:	f043 0302 	orr.w	r3, r3, #2
 80071d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80071d2:	4b3a      	ldr	r3, [pc, #232]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 80071d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	61fb      	str	r3, [r7, #28]
 80071dc:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80071de:	2302      	movs	r3, #2
 80071e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80071e2:	2303      	movs	r3, #3
 80071e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e6:	2300      	movs	r3, #0
 80071e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80071ee:	4619      	mov	r1, r3
 80071f0:	4833      	ldr	r0, [pc, #204]	@ (80072c0 <HAL_ADC_MspInit+0x13c>)
 80071f2:	f001 ffb7 	bl	8009164 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80071f6:	e05a      	b.n	80072ae <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a31      	ldr	r2, [pc, #196]	@ (80072c4 <HAL_ADC_MspInit+0x140>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d128      	bne.n	8007254 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007202:	2300      	movs	r3, #0
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	4b2d      	ldr	r3, [pc, #180]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800720a:	4a2c      	ldr	r2, [pc, #176]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 800720c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007210:	6453      	str	r3, [r2, #68]	@ 0x44
 8007212:	4b2a      	ldr	r3, [pc, #168]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007216:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	4b26      	ldr	r3, [pc, #152]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007226:	4a25      	ldr	r2, [pc, #148]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007228:	f043 0304 	orr.w	r3, r3, #4
 800722c:	6313      	str	r3, [r2, #48]	@ 0x30
 800722e:	4b23      	ldr	r3, [pc, #140]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007232:	f003 0304 	and.w	r3, r3, #4
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800723a:	2301      	movs	r3, #1
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800723e:	2303      	movs	r3, #3
 8007240:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007242:	2300      	movs	r3, #0
 8007244:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007246:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800724a:	4619      	mov	r1, r3
 800724c:	481e      	ldr	r0, [pc, #120]	@ (80072c8 <HAL_ADC_MspInit+0x144>)
 800724e:	f001 ff89 	bl	8009164 <HAL_GPIO_Init>
}
 8007252:	e02c      	b.n	80072ae <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a1c      	ldr	r2, [pc, #112]	@ (80072cc <HAL_ADC_MspInit+0x148>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d127      	bne.n	80072ae <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800725e:	2300      	movs	r3, #0
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	4b16      	ldr	r3, [pc, #88]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007266:	4a15      	ldr	r2, [pc, #84]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007268:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800726c:	6453      	str	r3, [r2, #68]	@ 0x44
 800726e:	4b13      	ldr	r3, [pc, #76]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007276:	613b      	str	r3, [r7, #16]
 8007278:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800727a:	2300      	movs	r3, #0
 800727c:	60fb      	str	r3, [r7, #12]
 800727e:	4b0f      	ldr	r3, [pc, #60]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007282:	4a0e      	ldr	r2, [pc, #56]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 8007284:	f043 0304 	orr.w	r3, r3, #4
 8007288:	6313      	str	r3, [r2, #48]	@ 0x30
 800728a:	4b0c      	ldr	r3, [pc, #48]	@ (80072bc <HAL_ADC_MspInit+0x138>)
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	f003 0304 	and.w	r3, r3, #4
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007296:	2302      	movs	r3, #2
 8007298:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800729a:	2303      	movs	r3, #3
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80072a6:	4619      	mov	r1, r3
 80072a8:	4807      	ldr	r0, [pc, #28]	@ (80072c8 <HAL_ADC_MspInit+0x144>)
 80072aa:	f001 ff5b 	bl	8009164 <HAL_GPIO_Init>
}
 80072ae:	bf00      	nop
 80072b0:	3738      	adds	r7, #56	@ 0x38
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	40012000 	.word	0x40012000
 80072bc:	40023800 	.word	0x40023800
 80072c0:	40020400 	.word	0x40020400
 80072c4:	40012100 	.word	0x40012100
 80072c8:	40020800 	.word	0x40020800
 80072cc:	40012200 	.word	0x40012200

080072d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08c      	sub	sp, #48	@ 0x30
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d8:	f107 031c 	add.w	r3, r7, #28
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	609a      	str	r2, [r3, #8]
 80072e4:	60da      	str	r2, [r3, #12]
 80072e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a5d      	ldr	r2, [pc, #372]	@ (8007464 <HAL_I2C_MspInit+0x194>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d163      	bne.n	80073ba <HAL_I2C_MspInit+0xea>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072f2:	2300      	movs	r3, #0
 80072f4:	61bb      	str	r3, [r7, #24]
 80072f6:	4b5c      	ldr	r3, [pc, #368]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072fa:	4a5b      	ldr	r2, [pc, #364]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 80072fc:	f043 0302 	orr.w	r3, r3, #2
 8007300:	6313      	str	r3, [r2, #48]	@ 0x30
 8007302:	4b59      	ldr	r3, [pc, #356]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 8007304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007306:	f003 0302 	and.w	r3, r3, #2
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800730e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007314:	2312      	movs	r3, #18
 8007316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007318:	2300      	movs	r3, #0
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800731c:	2303      	movs	r3, #3
 800731e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007320:	2304      	movs	r3, #4
 8007322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007324:	f107 031c 	add.w	r3, r7, #28
 8007328:	4619      	mov	r1, r3
 800732a:	4850      	ldr	r0, [pc, #320]	@ (800746c <HAL_I2C_MspInit+0x19c>)
 800732c:	f001 ff1a 	bl	8009164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007330:	2300      	movs	r3, #0
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	4b4c      	ldr	r3, [pc, #304]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 8007336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007338:	4a4b      	ldr	r2, [pc, #300]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 800733a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800733e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007340:	4b49      	ldr	r3, [pc, #292]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 8007342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007344:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800734c:	4b48      	ldr	r3, [pc, #288]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 800734e:	4a49      	ldr	r2, [pc, #292]	@ (8007474 <HAL_I2C_MspInit+0x1a4>)
 8007350:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8007352:	4b47      	ldr	r3, [pc, #284]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 8007354:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8007358:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800735a:	4b45      	ldr	r3, [pc, #276]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 800735c:	2200      	movs	r2, #0
 800735e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007360:	4b43      	ldr	r3, [pc, #268]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 8007362:	2200      	movs	r2, #0
 8007364:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007366:	4b42      	ldr	r3, [pc, #264]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 8007368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800736c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800736e:	4b40      	ldr	r3, [pc, #256]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 8007370:	2200      	movs	r2, #0
 8007372:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007374:	4b3e      	ldr	r3, [pc, #248]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 8007376:	2200      	movs	r2, #0
 8007378:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800737a:	4b3d      	ldr	r3, [pc, #244]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 800737c:	2200      	movs	r2, #0
 800737e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007380:	4b3b      	ldr	r3, [pc, #236]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 8007382:	2200      	movs	r2, #0
 8007384:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007386:	4b3a      	ldr	r3, [pc, #232]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 8007388:	2200      	movs	r2, #0
 800738a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800738c:	4838      	ldr	r0, [pc, #224]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 800738e:	f001 fa6f 	bl	8008870 <HAL_DMA_Init>
 8007392:	4603      	mov	r3, r0
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8007398:	f7fe fb32 	bl	8005a00 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a34      	ldr	r2, [pc, #208]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 80073a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80073a2:	4a33      	ldr	r2, [pc, #204]	@ (8007470 <HAL_I2C_MspInit+0x1a0>)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80073a8:	2200      	movs	r2, #0
 80073aa:	2100      	movs	r1, #0
 80073ac:	201f      	movs	r0, #31
 80073ae:	f001 fa1a 	bl	80087e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80073b2:	201f      	movs	r0, #31
 80073b4:	f001 fa33 	bl	800881e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80073b8:	e050      	b.n	800745c <HAL_I2C_MspInit+0x18c>
  else if(hi2c->Instance==I2C3)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2e      	ldr	r2, [pc, #184]	@ (8007478 <HAL_I2C_MspInit+0x1a8>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d14b      	bne.n	800745c <HAL_I2C_MspInit+0x18c>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073c4:	2300      	movs	r3, #0
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	4b27      	ldr	r3, [pc, #156]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 80073ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073cc:	4a26      	ldr	r2, [pc, #152]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 80073ce:	f043 0304 	orr.w	r3, r3, #4
 80073d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80073d4:	4b24      	ldr	r3, [pc, #144]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 80073d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073e0:	2300      	movs	r3, #0
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	4b20      	ldr	r3, [pc, #128]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 80073e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073e8:	4a1f      	ldr	r2, [pc, #124]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 80073ea:	f043 0301 	orr.w	r3, r3, #1
 80073ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80073f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 80073f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007402:	2312      	movs	r3, #18
 8007404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007406:	2300      	movs	r3, #0
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800740a:	2303      	movs	r3, #3
 800740c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800740e:	2304      	movs	r3, #4
 8007410:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007412:	f107 031c 	add.w	r3, r7, #28
 8007416:	4619      	mov	r1, r3
 8007418:	4818      	ldr	r0, [pc, #96]	@ (800747c <HAL_I2C_MspInit+0x1ac>)
 800741a:	f001 fea3 	bl	8009164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800741e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007424:	2312      	movs	r3, #18
 8007426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007428:	2300      	movs	r3, #0
 800742a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800742c:	2303      	movs	r3, #3
 800742e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8007430:	2304      	movs	r3, #4
 8007432:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007434:	f107 031c 	add.w	r3, r7, #28
 8007438:	4619      	mov	r1, r3
 800743a:	4811      	ldr	r0, [pc, #68]	@ (8007480 <HAL_I2C_MspInit+0x1b0>)
 800743c:	f001 fe92 	bl	8009164 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8007440:	2300      	movs	r3, #0
 8007442:	60bb      	str	r3, [r7, #8]
 8007444:	4b08      	ldr	r3, [pc, #32]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 8007446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007448:	4a07      	ldr	r2, [pc, #28]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 800744a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800744e:	6413      	str	r3, [r2, #64]	@ 0x40
 8007450:	4b05      	ldr	r3, [pc, #20]	@ (8007468 <HAL_I2C_MspInit+0x198>)
 8007452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007454:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007458:	60bb      	str	r3, [r7, #8]
 800745a:	68bb      	ldr	r3, [r7, #8]
}
 800745c:	bf00      	nop
 800745e:	3730      	adds	r7, #48	@ 0x30
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	40005400 	.word	0x40005400
 8007468:	40023800 	.word	0x40023800
 800746c:	40020400 	.word	0x40020400
 8007470:	200016e4 	.word	0x200016e4
 8007474:	40026010 	.word	0x40026010
 8007478:	40005c00 	.word	0x40005c00
 800747c:	40020800 	.word	0x40020800
 8007480:	40020000 	.word	0x40020000

08007484 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a1a      	ldr	r2, [pc, #104]	@ (80074fc <HAL_I2C_MspDeInit+0x78>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d118      	bne.n	80074c8 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007496:	4b1a      	ldr	r3, [pc, #104]	@ (8007500 <HAL_I2C_MspDeInit+0x7c>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	4a19      	ldr	r2, [pc, #100]	@ (8007500 <HAL_I2C_MspDeInit+0x7c>)
 800749c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80074a0:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 80074a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80074a6:	4817      	ldr	r0, [pc, #92]	@ (8007504 <HAL_I2C_MspDeInit+0x80>)
 80074a8:	f001 fff0 	bl	800948c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 80074ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80074b0:	4814      	ldr	r0, [pc, #80]	@ (8007504 <HAL_I2C_MspDeInit+0x80>)
 80074b2:	f001 ffeb 	bl	800948c <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ba:	4618      	mov	r0, r3
 80074bc:	f001 fa86 	bl	80089cc <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80074c0:	201f      	movs	r0, #31
 80074c2:	f001 f9ba 	bl	800883a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80074c6:	e014      	b.n	80074f2 <HAL_I2C_MspDeInit+0x6e>
  else if(hi2c->Instance==I2C3)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a0e      	ldr	r2, [pc, #56]	@ (8007508 <HAL_I2C_MspDeInit+0x84>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d10f      	bne.n	80074f2 <HAL_I2C_MspDeInit+0x6e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80074d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <HAL_I2C_MspDeInit+0x7c>)
 80074d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d6:	4a0a      	ldr	r2, [pc, #40]	@ (8007500 <HAL_I2C_MspDeInit+0x7c>)
 80074d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80074dc:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 80074de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80074e2:	480a      	ldr	r0, [pc, #40]	@ (800750c <HAL_I2C_MspDeInit+0x88>)
 80074e4:	f001 ffd2 	bl	800948c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80074e8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80074ec:	4808      	ldr	r0, [pc, #32]	@ (8007510 <HAL_I2C_MspDeInit+0x8c>)
 80074ee:	f001 ffcd 	bl	800948c <HAL_GPIO_DeInit>
}
 80074f2:	bf00      	nop
 80074f4:	3708      	adds	r7, #8
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	40005400 	.word	0x40005400
 8007500:	40023800 	.word	0x40023800
 8007504:	40020400 	.word	0x40020400
 8007508:	40005c00 	.word	0x40005c00
 800750c:	40020800 	.word	0x40020800
 8007510:	40020000 	.word	0x40020000

08007514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	@ 0x28
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	2200      	movs	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	605a      	str	r2, [r3, #4]
 8007526:	609a      	str	r2, [r3, #8]
 8007528:	60da      	str	r2, [r3, #12]
 800752a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a19      	ldr	r2, [pc, #100]	@ (8007598 <HAL_SPI_MspInit+0x84>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d12b      	bne.n	800758e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007536:	2300      	movs	r3, #0
 8007538:	613b      	str	r3, [r7, #16]
 800753a:	4b18      	ldr	r3, [pc, #96]	@ (800759c <HAL_SPI_MspInit+0x88>)
 800753c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800753e:	4a17      	ldr	r2, [pc, #92]	@ (800759c <HAL_SPI_MspInit+0x88>)
 8007540:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007544:	6453      	str	r3, [r2, #68]	@ 0x44
 8007546:	4b15      	ldr	r3, [pc, #84]	@ (800759c <HAL_SPI_MspInit+0x88>)
 8007548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800754e:	613b      	str	r3, [r7, #16]
 8007550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
 8007556:	4b11      	ldr	r3, [pc, #68]	@ (800759c <HAL_SPI_MspInit+0x88>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755a:	4a10      	ldr	r2, [pc, #64]	@ (800759c <HAL_SPI_MspInit+0x88>)
 800755c:	f043 0301 	orr.w	r3, r3, #1
 8007560:	6313      	str	r3, [r2, #48]	@ 0x30
 8007562:	4b0e      	ldr	r3, [pc, #56]	@ (800759c <HAL_SPI_MspInit+0x88>)
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800756e:	23e0      	movs	r3, #224	@ 0xe0
 8007570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007572:	2302      	movs	r3, #2
 8007574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007576:	2300      	movs	r3, #0
 8007578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800757a:	2303      	movs	r3, #3
 800757c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800757e:	2305      	movs	r3, #5
 8007580:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007582:	f107 0314 	add.w	r3, r7, #20
 8007586:	4619      	mov	r1, r3
 8007588:	4805      	ldr	r0, [pc, #20]	@ (80075a0 <HAL_SPI_MspInit+0x8c>)
 800758a:	f001 fdeb 	bl	8009164 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800758e:	bf00      	nop
 8007590:	3728      	adds	r7, #40	@ 0x28
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	40013000 	.word	0x40013000
 800759c:	40023800 	.word	0x40023800
 80075a0:	40020000 	.word	0x40020000

080075a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b4:	d115      	bne.n	80075e2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	4b0c      	ldr	r3, [pc, #48]	@ (80075ec <HAL_TIM_Base_MspInit+0x48>)
 80075bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075be:	4a0b      	ldr	r2, [pc, #44]	@ (80075ec <HAL_TIM_Base_MspInit+0x48>)
 80075c0:	f043 0301 	orr.w	r3, r3, #1
 80075c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80075c6:	4b09      	ldr	r3, [pc, #36]	@ (80075ec <HAL_TIM_Base_MspInit+0x48>)
 80075c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80075d2:	2200      	movs	r2, #0
 80075d4:	2100      	movs	r1, #0
 80075d6:	201c      	movs	r0, #28
 80075d8:	f001 f905 	bl	80087e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80075dc:	201c      	movs	r0, #28
 80075de:	f001 f91e 	bl	800881e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80075e2:	bf00      	nop
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	40023800 	.word	0x40023800

080075f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08e      	sub	sp, #56	@ 0x38
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	605a      	str	r2, [r3, #4]
 8007602:	609a      	str	r2, [r3, #8]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a9c      	ldr	r2, [pc, #624]	@ (8007880 <HAL_UART_MspInit+0x290>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d162      	bne.n	80076d8 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8007612:	2300      	movs	r3, #0
 8007614:	623b      	str	r3, [r7, #32]
 8007616:	4b9b      	ldr	r3, [pc, #620]	@ (8007884 <HAL_UART_MspInit+0x294>)
 8007618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761a:	4a9a      	ldr	r2, [pc, #616]	@ (8007884 <HAL_UART_MspInit+0x294>)
 800761c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007620:	6413      	str	r3, [r2, #64]	@ 0x40
 8007622:	4b98      	ldr	r3, [pc, #608]	@ (8007884 <HAL_UART_MspInit+0x294>)
 8007624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007626:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800762a:	623b      	str	r3, [r7, #32]
 800762c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
 8007632:	4b94      	ldr	r3, [pc, #592]	@ (8007884 <HAL_UART_MspInit+0x294>)
 8007634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007636:	4a93      	ldr	r2, [pc, #588]	@ (8007884 <HAL_UART_MspInit+0x294>)
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	6313      	str	r3, [r2, #48]	@ 0x30
 800763e:	4b91      	ldr	r3, [pc, #580]	@ (8007884 <HAL_UART_MspInit+0x294>)
 8007640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007642:	f003 0301 	and.w	r3, r3, #1
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800764a:	2303      	movs	r3, #3
 800764c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800764e:	2302      	movs	r3, #2
 8007650:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007652:	2300      	movs	r3, #0
 8007654:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007656:	2303      	movs	r3, #3
 8007658:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800765a:	2308      	movs	r3, #8
 800765c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800765e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007662:	4619      	mov	r1, r3
 8007664:	4888      	ldr	r0, [pc, #544]	@ (8007888 <HAL_UART_MspInit+0x298>)
 8007666:	f001 fd7d 	bl	8009164 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800766a:	4b88      	ldr	r3, [pc, #544]	@ (800788c <HAL_UART_MspInit+0x29c>)
 800766c:	4a88      	ldr	r2, [pc, #544]	@ (8007890 <HAL_UART_MspInit+0x2a0>)
 800766e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8007670:	4b86      	ldr	r3, [pc, #536]	@ (800788c <HAL_UART_MspInit+0x29c>)
 8007672:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007676:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007678:	4b84      	ldr	r3, [pc, #528]	@ (800788c <HAL_UART_MspInit+0x29c>)
 800767a:	2240      	movs	r2, #64	@ 0x40
 800767c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800767e:	4b83      	ldr	r3, [pc, #524]	@ (800788c <HAL_UART_MspInit+0x29c>)
 8007680:	2200      	movs	r2, #0
 8007682:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007684:	4b81      	ldr	r3, [pc, #516]	@ (800788c <HAL_UART_MspInit+0x29c>)
 8007686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800768a:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800768c:	4b7f      	ldr	r3, [pc, #508]	@ (800788c <HAL_UART_MspInit+0x29c>)
 800768e:	2200      	movs	r2, #0
 8007690:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007692:	4b7e      	ldr	r3, [pc, #504]	@ (800788c <HAL_UART_MspInit+0x29c>)
 8007694:	2200      	movs	r2, #0
 8007696:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8007698:	4b7c      	ldr	r3, [pc, #496]	@ (800788c <HAL_UART_MspInit+0x29c>)
 800769a:	2200      	movs	r2, #0
 800769c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800769e:	4b7b      	ldr	r3, [pc, #492]	@ (800788c <HAL_UART_MspInit+0x29c>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80076a4:	4b79      	ldr	r3, [pc, #484]	@ (800788c <HAL_UART_MspInit+0x29c>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80076aa:	4878      	ldr	r0, [pc, #480]	@ (800788c <HAL_UART_MspInit+0x29c>)
 80076ac:	f001 f8e0 	bl	8008870 <HAL_DMA_Init>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80076b6:	f7fe f9a3 	bl	8005a00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a73      	ldr	r2, [pc, #460]	@ (800788c <HAL_UART_MspInit+0x29c>)
 80076be:	639a      	str	r2, [r3, #56]	@ 0x38
 80076c0:	4a72      	ldr	r2, [pc, #456]	@ (800788c <HAL_UART_MspInit+0x29c>)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80076c6:	2200      	movs	r2, #0
 80076c8:	2100      	movs	r1, #0
 80076ca:	2034      	movs	r0, #52	@ 0x34
 80076cc:	f001 f88b 	bl	80087e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80076d0:	2034      	movs	r0, #52	@ 0x34
 80076d2:	f001 f8a4 	bl	800881e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80076d6:	e0cf      	b.n	8007878 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART2)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a6d      	ldr	r2, [pc, #436]	@ (8007894 <HAL_UART_MspInit+0x2a4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d162      	bne.n	80077a8 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	4b67      	ldr	r3, [pc, #412]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80076e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ea:	4a66      	ldr	r2, [pc, #408]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80076ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80076f2:	4b64      	ldr	r3, [pc, #400]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076fa:	61bb      	str	r3, [r7, #24]
 80076fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076fe:	2300      	movs	r3, #0
 8007700:	617b      	str	r3, [r7, #20]
 8007702:	4b60      	ldr	r3, [pc, #384]	@ (8007884 <HAL_UART_MspInit+0x294>)
 8007704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007706:	4a5f      	ldr	r2, [pc, #380]	@ (8007884 <HAL_UART_MspInit+0x294>)
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	6313      	str	r3, [r2, #48]	@ 0x30
 800770e:	4b5d      	ldr	r3, [pc, #372]	@ (8007884 <HAL_UART_MspInit+0x294>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	617b      	str	r3, [r7, #20]
 8007718:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800771a:	230c      	movs	r3, #12
 800771c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800771e:	2302      	movs	r3, #2
 8007720:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007722:	2300      	movs	r3, #0
 8007724:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007726:	2303      	movs	r3, #3
 8007728:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800772a:	2307      	movs	r3, #7
 800772c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800772e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007732:	4619      	mov	r1, r3
 8007734:	4854      	ldr	r0, [pc, #336]	@ (8007888 <HAL_UART_MspInit+0x298>)
 8007736:	f001 fd15 	bl	8009164 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800773a:	4b57      	ldr	r3, [pc, #348]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 800773c:	4a57      	ldr	r2, [pc, #348]	@ (800789c <HAL_UART_MspInit+0x2ac>)
 800773e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007740:	4b55      	ldr	r3, [pc, #340]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 8007742:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007746:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007748:	4b53      	ldr	r3, [pc, #332]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 800774a:	2240      	movs	r2, #64	@ 0x40
 800774c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800774e:	4b52      	ldr	r3, [pc, #328]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 8007750:	2200      	movs	r2, #0
 8007752:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007754:	4b50      	ldr	r3, [pc, #320]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 8007756:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800775a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800775c:	4b4e      	ldr	r3, [pc, #312]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 800775e:	2200      	movs	r2, #0
 8007760:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007762:	4b4d      	ldr	r3, [pc, #308]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 8007764:	2200      	movs	r2, #0
 8007766:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007768:	4b4b      	ldr	r3, [pc, #300]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 800776a:	2200      	movs	r2, #0
 800776c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800776e:	4b4a      	ldr	r3, [pc, #296]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 8007770:	2200      	movs	r2, #0
 8007772:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007774:	4b48      	ldr	r3, [pc, #288]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 8007776:	2200      	movs	r2, #0
 8007778:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800777a:	4847      	ldr	r0, [pc, #284]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 800777c:	f001 f878 	bl	8008870 <HAL_DMA_Init>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8007786:	f7fe f93b 	bl	8005a00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a42      	ldr	r2, [pc, #264]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 800778e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007790:	4a41      	ldr	r2, [pc, #260]	@ (8007898 <HAL_UART_MspInit+0x2a8>)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8007796:	2200      	movs	r2, #0
 8007798:	2100      	movs	r1, #0
 800779a:	2026      	movs	r0, #38	@ 0x26
 800779c:	f001 f823 	bl	80087e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80077a0:	2026      	movs	r0, #38	@ 0x26
 80077a2:	f001 f83c 	bl	800881e <HAL_NVIC_EnableIRQ>
}
 80077a6:	e067      	b.n	8007878 <HAL_UART_MspInit+0x288>
  else if(huart->Instance==USART6)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a3c      	ldr	r2, [pc, #240]	@ (80078a0 <HAL_UART_MspInit+0x2b0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d162      	bne.n	8007878 <HAL_UART_MspInit+0x288>
    __HAL_RCC_USART6_CLK_ENABLE();
 80077b2:	2300      	movs	r3, #0
 80077b4:	613b      	str	r3, [r7, #16]
 80077b6:	4b33      	ldr	r3, [pc, #204]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80077b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ba:	4a32      	ldr	r2, [pc, #200]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80077bc:	f043 0320 	orr.w	r3, r3, #32
 80077c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80077c2:	4b30      	ldr	r3, [pc, #192]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80077c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c6:	f003 0320 	and.w	r3, r3, #32
 80077ca:	613b      	str	r3, [r7, #16]
 80077cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	4b2c      	ldr	r3, [pc, #176]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80077d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80077d8:	f043 0304 	orr.w	r3, r3, #4
 80077dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80077de:	4b29      	ldr	r3, [pc, #164]	@ (8007884 <HAL_UART_MspInit+0x294>)
 80077e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80077ea:	23c0      	movs	r3, #192	@ 0xc0
 80077ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077ee:	2302      	movs	r3, #2
 80077f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f6:	2303      	movs	r3, #3
 80077f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80077fa:	2308      	movs	r3, #8
 80077fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007802:	4619      	mov	r1, r3
 8007804:	4827      	ldr	r0, [pc, #156]	@ (80078a4 <HAL_UART_MspInit+0x2b4>)
 8007806:	f001 fcad 	bl	8009164 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 800780a:	4b27      	ldr	r3, [pc, #156]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 800780c:	4a27      	ldr	r2, [pc, #156]	@ (80078ac <HAL_UART_MspInit+0x2bc>)
 800780e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8007810:	4b25      	ldr	r3, [pc, #148]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 8007812:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8007816:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007818:	4b23      	ldr	r3, [pc, #140]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 800781a:	2200      	movs	r2, #0
 800781c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800781e:	4b22      	ldr	r3, [pc, #136]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 8007820:	2200      	movs	r2, #0
 8007822:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007824:	4b20      	ldr	r3, [pc, #128]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 8007826:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800782a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800782c:	4b1e      	ldr	r3, [pc, #120]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 800782e:	2200      	movs	r2, #0
 8007830:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007832:	4b1d      	ldr	r3, [pc, #116]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 8007834:	2200      	movs	r2, #0
 8007836:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8007838:	4b1b      	ldr	r3, [pc, #108]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 800783a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800783e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007840:	4b19      	ldr	r3, [pc, #100]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 8007842:	2200      	movs	r2, #0
 8007844:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007846:	4b18      	ldr	r3, [pc, #96]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 8007848:	2200      	movs	r2, #0
 800784a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800784c:	4816      	ldr	r0, [pc, #88]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 800784e:	f001 f80f 	bl	8008870 <HAL_DMA_Init>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8007858:	f7fe f8d2 	bl	8005a00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a12      	ldr	r2, [pc, #72]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 8007860:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007862:	4a11      	ldr	r2, [pc, #68]	@ (80078a8 <HAL_UART_MspInit+0x2b8>)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8007868:	2200      	movs	r2, #0
 800786a:	2100      	movs	r1, #0
 800786c:	2047      	movs	r0, #71	@ 0x47
 800786e:	f000 ffba 	bl	80087e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8007872:	2047      	movs	r0, #71	@ 0x47
 8007874:	f000 ffd3 	bl	800881e <HAL_NVIC_EnableIRQ>
}
 8007878:	bf00      	nop
 800787a:	3738      	adds	r7, #56	@ 0x38
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	40004c00 	.word	0x40004c00
 8007884:	40023800 	.word	0x40023800
 8007888:	40020000 	.word	0x40020000
 800788c:	200018bc 	.word	0x200018bc
 8007890:	40026070 	.word	0x40026070
 8007894:	40004400 	.word	0x40004400
 8007898:	2000191c 	.word	0x2000191c
 800789c:	400260a0 	.word	0x400260a0
 80078a0:	40011400 	.word	0x40011400
 80078a4:	40020800 	.word	0x40020800
 80078a8:	2000197c 	.word	0x2000197c
 80078ac:	40026440 	.word	0x40026440

080078b0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==UART4)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a24      	ldr	r2, [pc, #144]	@ (8007950 <HAL_UART_MspDeInit+0xa0>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d112      	bne.n	80078e8 <HAL_UART_MspDeInit+0x38>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80078c2:	4b24      	ldr	r3, [pc, #144]	@ (8007954 <HAL_UART_MspDeInit+0xa4>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c6:	4a23      	ldr	r2, [pc, #140]	@ (8007954 <HAL_UART_MspDeInit+0xa4>)
 80078c8:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80078cc:	6413      	str	r3, [r2, #64]	@ 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80078ce:	2103      	movs	r1, #3
 80078d0:	4821      	ldr	r0, [pc, #132]	@ (8007958 <HAL_UART_MspDeInit+0xa8>)
 80078d2:	f001 fddb 	bl	800948c <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 f876 	bl	80089cc <HAL_DMA_DeInit>

    /* UART4 interrupt DeInit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 80078e0:	2034      	movs	r0, #52	@ 0x34
 80078e2:	f000 ffaa 	bl	800883a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 80078e6:	e02e      	b.n	8007946 <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART2)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1b      	ldr	r2, [pc, #108]	@ (800795c <HAL_UART_MspDeInit+0xac>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d112      	bne.n	8007918 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 80078f2:	4b18      	ldr	r3, [pc, #96]	@ (8007954 <HAL_UART_MspDeInit+0xa4>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	4a17      	ldr	r2, [pc, #92]	@ (8007954 <HAL_UART_MspDeInit+0xa4>)
 80078f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80078fc:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80078fe:	210c      	movs	r1, #12
 8007900:	4815      	ldr	r0, [pc, #84]	@ (8007958 <HAL_UART_MspDeInit+0xa8>)
 8007902:	f001 fdc3 	bl	800948c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790a:	4618      	mov	r0, r3
 800790c:	f001 f85e 	bl	80089cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8007910:	2026      	movs	r0, #38	@ 0x26
 8007912:	f000 ff92 	bl	800883a <HAL_NVIC_DisableIRQ>
}
 8007916:	e016      	b.n	8007946 <HAL_UART_MspDeInit+0x96>
  else if(huart->Instance==USART6)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a10      	ldr	r2, [pc, #64]	@ (8007960 <HAL_UART_MspDeInit+0xb0>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d111      	bne.n	8007946 <HAL_UART_MspDeInit+0x96>
    __HAL_RCC_USART6_CLK_DISABLE();
 8007922:	4b0c      	ldr	r3, [pc, #48]	@ (8007954 <HAL_UART_MspDeInit+0xa4>)
 8007924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007926:	4a0b      	ldr	r2, [pc, #44]	@ (8007954 <HAL_UART_MspDeInit+0xa4>)
 8007928:	f023 0320 	bic.w	r3, r3, #32
 800792c:	6453      	str	r3, [r2, #68]	@ 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 800792e:	21c0      	movs	r1, #192	@ 0xc0
 8007930:	480c      	ldr	r0, [pc, #48]	@ (8007964 <HAL_UART_MspDeInit+0xb4>)
 8007932:	f001 fdab 	bl	800948c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800793a:	4618      	mov	r0, r3
 800793c:	f001 f846 	bl	80089cc <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8007940:	2047      	movs	r0, #71	@ 0x47
 8007942:	f000 ff7a 	bl	800883a <HAL_NVIC_DisableIRQ>
}
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40004c00 	.word	0x40004c00
 8007954:	40023800 	.word	0x40023800
 8007958:	40020000 	.word	0x40020000
 800795c:	40004400 	.word	0x40004400
 8007960:	40011400 	.word	0x40011400
 8007964:	40020800 	.word	0x40020800

08007968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007968:	b480      	push	{r7}
 800796a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800796c:	bf00      	nop
 800796e:	e7fd      	b.n	800796c <NMI_Handler+0x4>

08007970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007974:	bf00      	nop
 8007976:	e7fd      	b.n	8007974 <HardFault_Handler+0x4>

08007978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007978:	b480      	push	{r7}
 800797a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800797c:	bf00      	nop
 800797e:	e7fd      	b.n	800797c <MemManage_Handler+0x4>

08007980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007984:	bf00      	nop
 8007986:	e7fd      	b.n	8007984 <BusFault_Handler+0x4>

08007988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <UsageFault_Handler+0x4>

08007990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800799e:	b480      	push	{r7}
 80079a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079a2:	bf00      	nop
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80079b0:	bf00      	nop
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80079be:	f000 f9bf 	bl	8007d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80079c2:	bf00      	nop
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80079ca:	2008      	movs	r0, #8
 80079cc:	f001 fe6c 	bl	80096a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80079d0:	bf00      	nop
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80079d8:	2010      	movs	r0, #16
 80079da:	f001 fe65 	bl	80096a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80079de:	bf00      	nop
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80079e8:	4802      	ldr	r0, [pc, #8]	@ (80079f4 <DMA1_Stream0_IRQHandler+0x10>)
 80079ea:	f001 f937 	bl	8008c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80079ee:	bf00      	nop
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	200016e4 	.word	0x200016e4

080079f8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80079fc:	4802      	ldr	r0, [pc, #8]	@ (8007a08 <DMA1_Stream4_IRQHandler+0x10>)
 80079fe:	f001 f92d 	bl	8008c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	200018bc 	.word	0x200018bc

08007a0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007a10:	4802      	ldr	r0, [pc, #8]	@ (8007a1c <DMA1_Stream6_IRQHandler+0x10>)
 8007a12:	f001 f923 	bl	8008c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	2000191c 	.word	0x2000191c

08007a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007a24:	4802      	ldr	r0, [pc, #8]	@ (8007a30 <TIM2_IRQHandler+0x10>)
 8007a26:	f006 f819 	bl	800da5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	2000179c 	.word	0x2000179c

08007a34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8007a38:	4802      	ldr	r0, [pc, #8]	@ (8007a44 <I2C1_EV_IRQHandler+0x10>)
 8007a3a:	f002 fc91 	bl	800a360 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8007a3e:	bf00      	nop
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	2000163c 	.word	0x2000163c

08007a48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007a4c:	4802      	ldr	r0, [pc, #8]	@ (8007a58 <USART2_IRQHandler+0x10>)
 8007a4e:	f006 fdfb 	bl	800e648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8007a52:	bf00      	nop
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	2000182c 	.word	0x2000182c

08007a5c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007a60:	4802      	ldr	r0, [pc, #8]	@ (8007a6c <UART4_IRQHandler+0x10>)
 8007a62:	f006 fdf1 	bl	800e648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200017e4 	.word	0x200017e4

08007a70 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8007a74:	4802      	ldr	r0, [pc, #8]	@ (8007a80 <DMA2_Stream2_IRQHandler+0x10>)
 8007a76:	f001 f8f1 	bl	8008c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007a7a:	bf00      	nop
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	2000197c 	.word	0x2000197c

08007a84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8007a88:	4802      	ldr	r0, [pc, #8]	@ (8007a94 <USART6_IRQHandler+0x10>)
 8007a8a:	f006 fddd 	bl	800e648 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8007a8e:	bf00      	nop
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20001874 	.word	0x20001874

08007a98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	af00      	add	r7, sp, #0
  return 1;
 8007a9c:	2301      	movs	r3, #1
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <_kill>:

int _kill(int pid, int sig)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007ab2:	f00c f8f1 	bl	8013c98 <__errno>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2216      	movs	r2, #22
 8007aba:	601a      	str	r2, [r3, #0]
  return -1;
 8007abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3708      	adds	r7, #8
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <_exit>:

void _exit (int status)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f7ff ffe7 	bl	8007aa8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <_exit+0x12>

08007ade <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b086      	sub	sp, #24
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	60f8      	str	r0, [r7, #12]
 8007ae6:	60b9      	str	r1, [r7, #8]
 8007ae8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007aea:	2300      	movs	r3, #0
 8007aec:	617b      	str	r3, [r7, #20]
 8007aee:	e00a      	b.n	8007b06 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007af0:	f3af 8000 	nop.w
 8007af4:	4601      	mov	r1, r0
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	60ba      	str	r2, [r7, #8]
 8007afc:	b2ca      	uxtb	r2, r1
 8007afe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	3301      	adds	r3, #1
 8007b04:	617b      	str	r3, [r7, #20]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	dbf0      	blt.n	8007af0 <_read+0x12>
  }

  return len;
 8007b0e:	687b      	ldr	r3, [r7, #4]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3718      	adds	r7, #24
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
 8007b28:	e009      	b.n	8007b3e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	60ba      	str	r2, [r7, #8]
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	dbf1      	blt.n	8007b2a <_write+0x12>
  }
  return len;
 8007b46:	687b      	ldr	r3, [r7, #4]
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <_close>:

int _close(int file)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007b58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007b78:	605a      	str	r2, [r3, #4]
  return 0;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <_isatty>:

int _isatty(int file)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007b90:	2301      	movs	r3, #1
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	370c      	adds	r7, #12
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007bc0:	4a14      	ldr	r2, [pc, #80]	@ (8007c14 <_sbrk+0x5c>)
 8007bc2:	4b15      	ldr	r3, [pc, #84]	@ (8007c18 <_sbrk+0x60>)
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007bcc:	4b13      	ldr	r3, [pc, #76]	@ (8007c1c <_sbrk+0x64>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007bd4:	4b11      	ldr	r3, [pc, #68]	@ (8007c1c <_sbrk+0x64>)
 8007bd6:	4a12      	ldr	r2, [pc, #72]	@ (8007c20 <_sbrk+0x68>)
 8007bd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007bda:	4b10      	ldr	r3, [pc, #64]	@ (8007c1c <_sbrk+0x64>)
 8007bdc:	681a      	ldr	r2, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4413      	add	r3, r2
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d207      	bcs.n	8007bf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007be8:	f00c f856 	bl	8013c98 <__errno>
 8007bec:	4603      	mov	r3, r0
 8007bee:	220c      	movs	r2, #12
 8007bf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8007bf6:	e009      	b.n	8007c0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007bf8:	4b08      	ldr	r3, [pc, #32]	@ (8007c1c <_sbrk+0x64>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007bfe:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <_sbrk+0x64>)
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4413      	add	r3, r2
 8007c06:	4a05      	ldr	r2, [pc, #20]	@ (8007c1c <_sbrk+0x64>)
 8007c08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3718      	adds	r7, #24
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20020000 	.word	0x20020000
 8007c18:	00000400 	.word	0x00000400
 8007c1c:	20001c44 	.word	0x20001c44
 8007c20:	20001de0 	.word	0x20001de0

08007c24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007c24:	b480      	push	{r7}
 8007c26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007c28:	4b06      	ldr	r3, [pc, #24]	@ (8007c44 <SystemInit+0x20>)
 8007c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c2e:	4a05      	ldr	r2, [pc, #20]	@ (8007c44 <SystemInit+0x20>)
 8007c30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007c38:	bf00      	nop
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	e000ed00 	.word	0xe000ed00

08007c48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007c48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8007c80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007c4c:	f7ff ffea 	bl	8007c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007c50:	480c      	ldr	r0, [pc, #48]	@ (8007c84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007c52:	490d      	ldr	r1, [pc, #52]	@ (8007c88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007c54:	4a0d      	ldr	r2, [pc, #52]	@ (8007c8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007c58:	e002      	b.n	8007c60 <LoopCopyDataInit>

08007c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007c5e:	3304      	adds	r3, #4

08007c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007c64:	d3f9      	bcc.n	8007c5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007c66:	4a0a      	ldr	r2, [pc, #40]	@ (8007c90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007c68:	4c0a      	ldr	r4, [pc, #40]	@ (8007c94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007c6c:	e001      	b.n	8007c72 <LoopFillZerobss>

08007c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007c70:	3204      	adds	r2, #4

08007c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007c74:	d3fb      	bcc.n	8007c6e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8007c76:	f00c f815 	bl	8013ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007c7a:	f7fd f881 	bl	8004d80 <main>
  bx  lr    
 8007c7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007c80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007c88:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8007c8c:	0801a598 	.word	0x0801a598
  ldr r2, =_sbss
 8007c90:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8007c94:	20001de0 	.word	0x20001de0

08007c98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c98:	e7fe      	b.n	8007c98 <ADC_IRQHandler>
	...

08007c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8007cdc <HAL_Init+0x40>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8007cdc <HAL_Init+0x40>)
 8007ca6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007caa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007cac:	4b0b      	ldr	r3, [pc, #44]	@ (8007cdc <HAL_Init+0x40>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8007cdc <HAL_Init+0x40>)
 8007cb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007cb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007cb8:	4b08      	ldr	r3, [pc, #32]	@ (8007cdc <HAL_Init+0x40>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a07      	ldr	r2, [pc, #28]	@ (8007cdc <HAL_Init+0x40>)
 8007cbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cc4:	2003      	movs	r0, #3
 8007cc6:	f000 fd83 	bl	80087d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007cca:	200f      	movs	r0, #15
 8007ccc:	f000 f808 	bl	8007ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007cd0:	f7ff fa30 	bl	8007134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	40023c00 	.word	0x40023c00

08007ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007ce8:	4b12      	ldr	r3, [pc, #72]	@ (8007d34 <HAL_InitTick+0x54>)
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	4b12      	ldr	r3, [pc, #72]	@ (8007d38 <HAL_InitTick+0x58>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fda9 	bl	8008856 <HAL_SYSTICK_Config>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e00e      	b.n	8007d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b0f      	cmp	r3, #15
 8007d12:	d80a      	bhi.n	8007d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d14:	2200      	movs	r2, #0
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1c:	f000 fd63 	bl	80087e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d20:	4a06      	ldr	r2, [pc, #24]	@ (8007d3c <HAL_InitTick+0x5c>)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	e000      	b.n	8007d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20000038 	.word	0x20000038
 8007d38:	20000040 	.word	0x20000040
 8007d3c:	2000003c 	.word	0x2000003c

08007d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d44:	4b06      	ldr	r3, [pc, #24]	@ (8007d60 <HAL_IncTick+0x20>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	461a      	mov	r2, r3
 8007d4a:	4b06      	ldr	r3, [pc, #24]	@ (8007d64 <HAL_IncTick+0x24>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4413      	add	r3, r2
 8007d50:	4a04      	ldr	r2, [pc, #16]	@ (8007d64 <HAL_IncTick+0x24>)
 8007d52:	6013      	str	r3, [r2, #0]
}
 8007d54:	bf00      	nop
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	20000040 	.word	0x20000040
 8007d64:	20001c48 	.word	0x20001c48

08007d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8007d6c:	4b03      	ldr	r3, [pc, #12]	@ (8007d7c <HAL_GetTick+0x14>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d78:	4770      	bx	lr
 8007d7a:	bf00      	nop
 8007d7c:	20001c48 	.word	0x20001c48

08007d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d88:	f7ff ffee 	bl	8007d68 <HAL_GetTick>
 8007d8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d98:	d005      	beq.n	8007da6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc4 <HAL_Delay+0x44>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007da6:	bf00      	nop
 8007da8:	f7ff ffde 	bl	8007d68 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d8f7      	bhi.n	8007da8 <HAL_Delay+0x28>
  {
  }
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000040 	.word	0x20000040

08007dc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d101      	bne.n	8007dde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e033      	b.n	8007e46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d109      	bne.n	8007dfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff f9cc 	bl	8007184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d118      	bne.n	8007e38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007e0e:	f023 0302 	bic.w	r3, r3, #2
 8007e12:	f043 0202 	orr.w	r2, r3, #2
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 fae8 	bl	80083f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2a:	f023 0303 	bic.w	r3, r3, #3
 8007e2e:	f043 0201 	orr.w	r2, r3, #1
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	641a      	str	r2, [r3, #64]	@ 0x40
 8007e36:	e001      	b.n	8007e3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
	...

08007e50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d101      	bne.n	8007e6a <HAL_ADC_Start+0x1a>
 8007e66:	2302      	movs	r3, #2
 8007e68:	e0b2      	b.n	8007fd0 <HAL_ADC_Start+0x180>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d018      	beq.n	8007eb2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f042 0201 	orr.w	r2, r2, #1
 8007e8e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007e90:	4b52      	ldr	r3, [pc, #328]	@ (8007fdc <HAL_ADC_Start+0x18c>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a52      	ldr	r2, [pc, #328]	@ (8007fe0 <HAL_ADC_Start+0x190>)
 8007e96:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9a:	0c9a      	lsrs	r2, r3, #18
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	005b      	lsls	r3, r3, #1
 8007ea0:	4413      	add	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007ea4:	e002      	b.n	8007eac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1f9      	bne.n	8007ea6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0301 	and.w	r3, r3, #1
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d17a      	bne.n	8007fb6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8007ec8:	f023 0301 	bic.w	r3, r3, #1
 8007ecc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d007      	beq.n	8007ef2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8007eea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007efe:	d106      	bne.n	8007f0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f04:	f023 0206 	bic.w	r2, r3, #6
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8007f0c:	e002      	b.n	8007f14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f1c:	4b31      	ldr	r3, [pc, #196]	@ (8007fe4 <HAL_ADC_Start+0x194>)
 8007f1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8007f28:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	f003 031f 	and.w	r3, r3, #31
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d12a      	bne.n	8007f8c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a2b      	ldr	r2, [pc, #172]	@ (8007fe8 <HAL_ADC_Start+0x198>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d015      	beq.n	8007f6c <HAL_ADC_Start+0x11c>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a29      	ldr	r2, [pc, #164]	@ (8007fec <HAL_ADC_Start+0x19c>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d105      	bne.n	8007f56 <HAL_ADC_Start+0x106>
 8007f4a:	4b26      	ldr	r3, [pc, #152]	@ (8007fe4 <HAL_ADC_Start+0x194>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f003 031f 	and.w	r3, r3, #31
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a25      	ldr	r2, [pc, #148]	@ (8007ff0 <HAL_ADC_Start+0x1a0>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d136      	bne.n	8007fce <HAL_ADC_Start+0x17e>
 8007f60:	4b20      	ldr	r3, [pc, #128]	@ (8007fe4 <HAL_ADC_Start+0x194>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d130      	bne.n	8007fce <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d129      	bne.n	8007fce <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007f88:	609a      	str	r2, [r3, #8]
 8007f8a:	e020      	b.n	8007fce <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a15      	ldr	r2, [pc, #84]	@ (8007fe8 <HAL_ADC_Start+0x198>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d11b      	bne.n	8007fce <HAL_ADC_Start+0x17e>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d114      	bne.n	8007fce <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	689a      	ldr	r2, [r3, #8]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8007fb2:	609a      	str	r2, [r3, #8]
 8007fb4:	e00b      	b.n	8007fce <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fba:	f043 0210 	orr.w	r2, r3, #16
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc6:	f043 0201 	orr.w	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20000038 	.word	0x20000038
 8007fe0:	431bde83 	.word	0x431bde83
 8007fe4:	40012300 	.word	0x40012300
 8007fe8:	40012000 	.word	0x40012000
 8007fec:	40012100 	.word	0x40012100
 8007ff0:	40012200 	.word	0x40012200

08007ff4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008002:	2b01      	cmp	r3, #1
 8008004:	d101      	bne.n	800800a <HAL_ADC_Stop+0x16>
 8008006:	2302      	movs	r3, #2
 8008008:	e021      	b.n	800804e <HAL_ADC_Stop+0x5a>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0201 	bic.w	r2, r2, #1
 8008020:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f003 0301 	and.w	r3, r3, #1
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008034:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008038:	f023 0301 	bic.w	r3, r3, #1
 800803c:	f043 0201 	orr.w	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008076:	d113      	bne.n	80080a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008082:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008086:	d10b      	bne.n	80080a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800808c:	f043 0220 	orr.w	r2, r3, #32
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e063      	b.n	8008168 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80080a0:	f7ff fe62 	bl	8007d68 <HAL_GetTick>
 80080a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80080a6:	e021      	b.n	80080ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ae:	d01d      	beq.n	80080ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d007      	beq.n	80080c6 <HAL_ADC_PollForConversion+0x6c>
 80080b6:	f7ff fe57 	bl	8007d68 <HAL_GetTick>
 80080ba:	4602      	mov	r2, r0
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	1ad3      	subs	r3, r2, r3
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	429a      	cmp	r2, r3
 80080c4:	d212      	bcs.n	80080ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d00b      	beq.n	80080ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080d8:	f043 0204 	orr.w	r2, r3, #4
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80080e8:	2303      	movs	r3, #3
 80080ea:	e03d      	b.n	8008168 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0302 	and.w	r3, r3, #2
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d1d6      	bne.n	80080a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f06f 0212 	mvn.w	r2, #18
 8008102:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008108:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d123      	bne.n	8008166 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008122:	2b00      	cmp	r3, #0
 8008124:	d11f      	bne.n	8008166 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800812c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008130:	2b00      	cmp	r3, #0
 8008132:	d006      	beq.n	8008142 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	689b      	ldr	r3, [r3, #8]
 800813a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800813e:	2b00      	cmp	r3, #0
 8008140:	d111      	bne.n	8008166 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008146:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d105      	bne.n	8008166 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800815e:	f043 0201 	orr.w	r2, r3, #1
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800817e:	4618      	mov	r0, r3
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
	...

0800818c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_ADC_ConfigChannel+0x1c>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e113      	b.n	80083d0 <HAL_ADC_ConfigChannel+0x244>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b09      	cmp	r3, #9
 80081b6:	d925      	bls.n	8008204 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68d9      	ldr	r1, [r3, #12]
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	461a      	mov	r2, r3
 80081c6:	4613      	mov	r3, r2
 80081c8:	005b      	lsls	r3, r3, #1
 80081ca:	4413      	add	r3, r2
 80081cc:	3b1e      	subs	r3, #30
 80081ce:	2207      	movs	r2, #7
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	43da      	mvns	r2, r3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	400a      	ands	r2, r1
 80081dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	68d9      	ldr	r1, [r3, #12]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	689a      	ldr	r2, [r3, #8]
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	4618      	mov	r0, r3
 80081f0:	4603      	mov	r3, r0
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	4403      	add	r3, r0
 80081f6:	3b1e      	subs	r3, #30
 80081f8:	409a      	lsls	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	430a      	orrs	r2, r1
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	e022      	b.n	800824a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6919      	ldr	r1, [r3, #16]
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	b29b      	uxth	r3, r3
 8008210:	461a      	mov	r2, r3
 8008212:	4613      	mov	r3, r2
 8008214:	005b      	lsls	r3, r3, #1
 8008216:	4413      	add	r3, r2
 8008218:	2207      	movs	r2, #7
 800821a:	fa02 f303 	lsl.w	r3, r2, r3
 800821e:	43da      	mvns	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	400a      	ands	r2, r1
 8008226:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6919      	ldr	r1, [r3, #16]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	4618      	mov	r0, r3
 800823a:	4603      	mov	r3, r0
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4403      	add	r3, r0
 8008240:	409a      	lsls	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	430a      	orrs	r2, r1
 8008248:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2b06      	cmp	r3, #6
 8008250:	d824      	bhi.n	800829c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	4613      	mov	r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	4413      	add	r3, r2
 8008262:	3b05      	subs	r3, #5
 8008264:	221f      	movs	r2, #31
 8008266:	fa02 f303 	lsl.w	r3, r2, r3
 800826a:	43da      	mvns	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	400a      	ands	r2, r1
 8008272:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	b29b      	uxth	r3, r3
 8008280:	4618      	mov	r0, r3
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	4613      	mov	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	4413      	add	r3, r2
 800828c:	3b05      	subs	r3, #5
 800828e:	fa00 f203 	lsl.w	r2, r0, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	635a      	str	r2, [r3, #52]	@ 0x34
 800829a:	e04c      	b.n	8008336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	2b0c      	cmp	r3, #12
 80082a2:	d824      	bhi.n	80082ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	3b23      	subs	r3, #35	@ 0x23
 80082b6:	221f      	movs	r2, #31
 80082b8:	fa02 f303 	lsl.w	r3, r2, r3
 80082bc:	43da      	mvns	r2, r3
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	400a      	ands	r2, r1
 80082c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	4618      	mov	r0, r3
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	4613      	mov	r3, r2
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	3b23      	subs	r3, #35	@ 0x23
 80082e0:	fa00 f203 	lsl.w	r2, r0, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80082ec:	e023      	b.n	8008336 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	3b41      	subs	r3, #65	@ 0x41
 8008300:	221f      	movs	r2, #31
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	43da      	mvns	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	400a      	ands	r2, r1
 800830e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	b29b      	uxth	r3, r3
 800831c:	4618      	mov	r0, r3
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	3b41      	subs	r3, #65	@ 0x41
 800832a:	fa00 f203 	lsl.w	r2, r0, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	430a      	orrs	r2, r1
 8008334:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008336:	4b29      	ldr	r3, [pc, #164]	@ (80083dc <HAL_ADC_ConfigChannel+0x250>)
 8008338:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a28      	ldr	r2, [pc, #160]	@ (80083e0 <HAL_ADC_ConfigChannel+0x254>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d10f      	bne.n	8008364 <HAL_ADC_ConfigChannel+0x1d8>
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b12      	cmp	r3, #18
 800834a:	d10b      	bne.n	8008364 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a1d      	ldr	r2, [pc, #116]	@ (80083e0 <HAL_ADC_ConfigChannel+0x254>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d12b      	bne.n	80083c6 <HAL_ADC_ConfigChannel+0x23a>
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a1c      	ldr	r2, [pc, #112]	@ (80083e4 <HAL_ADC_ConfigChannel+0x258>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d003      	beq.n	8008380 <HAL_ADC_ConfigChannel+0x1f4>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b11      	cmp	r3, #17
 800837e:	d122      	bne.n	80083c6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a11      	ldr	r2, [pc, #68]	@ (80083e4 <HAL_ADC_ConfigChannel+0x258>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d111      	bne.n	80083c6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80083a2:	4b11      	ldr	r3, [pc, #68]	@ (80083e8 <HAL_ADC_ConfigChannel+0x25c>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a11      	ldr	r2, [pc, #68]	@ (80083ec <HAL_ADC_ConfigChannel+0x260>)
 80083a8:	fba2 2303 	umull	r2, r3, r2, r3
 80083ac:	0c9a      	lsrs	r2, r3, #18
 80083ae:	4613      	mov	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80083b8:	e002      	b.n	80083c0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	3b01      	subs	r3, #1
 80083be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d1f9      	bne.n	80083ba <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80083ce:	2300      	movs	r3, #0
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3714      	adds	r7, #20
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	40012300 	.word	0x40012300
 80083e0:	40012000 	.word	0x40012000
 80083e4:	10000012 	.word	0x10000012
 80083e8:	20000038 	.word	0x20000038
 80083ec:	431bde83 	.word	0x431bde83

080083f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80083f8:	4b79      	ldr	r3, [pc, #484]	@ (80085e0 <ADC_Init+0x1f0>)
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	431a      	orrs	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6859      	ldr	r1, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	691b      	ldr	r3, [r3, #16]
 8008430:	021a      	lsls	r2, r3, #8
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8008448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6859      	ldr	r1, [r3, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	689a      	ldr	r2, [r3, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689a      	ldr	r2, [r3, #8]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800846a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6899      	ldr	r1, [r3, #8]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	4a58      	ldr	r2, [pc, #352]	@ (80085e4 <ADC_Init+0x1f4>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d022      	beq.n	80084ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689a      	ldr	r2, [r3, #8]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6899      	ldr	r1, [r3, #8]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80084b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	6899      	ldr	r1, [r3, #8]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	609a      	str	r2, [r3, #8]
 80084cc:	e00f      	b.n	80084ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80084dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	689a      	ldr	r2, [r3, #8]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80084ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0202 	bic.w	r2, r2, #2
 80084fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	6899      	ldr	r1, [r3, #8]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	7e1b      	ldrb	r3, [r3, #24]
 8008508:	005a      	lsls	r2, r3, #1
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01b      	beq.n	8008554 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800852a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800853a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	6859      	ldr	r1, [r3, #4]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008546:	3b01      	subs	r3, #1
 8008548:	035a      	lsls	r2, r3, #13
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
 8008552:	e007      	b.n	8008564 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685a      	ldr	r2, [r3, #4]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008562:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8008572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	3b01      	subs	r3, #1
 8008580:	051a      	lsls	r2, r3, #20
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6899      	ldr	r1, [r3, #8]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80085a6:	025a      	lsls	r2, r3, #9
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	430a      	orrs	r2, r1
 80085ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	689a      	ldr	r2, [r3, #8]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6899      	ldr	r1, [r3, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	695b      	ldr	r3, [r3, #20]
 80085ca:	029a      	lsls	r2, r3, #10
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	609a      	str	r2, [r3, #8]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	40012300 	.word	0x40012300
 80085e4:	0f000001 	.word	0x0f000001

080085e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f003 0307 	and.w	r3, r3, #7
 80085f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085f8:	4b0c      	ldr	r3, [pc, #48]	@ (800862c <__NVIC_SetPriorityGrouping+0x44>)
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008604:	4013      	ands	r3, r2
 8008606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008610:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008614:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800861a:	4a04      	ldr	r2, [pc, #16]	@ (800862c <__NVIC_SetPriorityGrouping+0x44>)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	60d3      	str	r3, [r2, #12]
}
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	e000ed00 	.word	0xe000ed00

08008630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008634:	4b04      	ldr	r3, [pc, #16]	@ (8008648 <__NVIC_GetPriorityGrouping+0x18>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	0a1b      	lsrs	r3, r3, #8
 800863a:	f003 0307 	and.w	r3, r3, #7
}
 800863e:	4618      	mov	r0, r3
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	e000ed00 	.word	0xe000ed00

0800864c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800865a:	2b00      	cmp	r3, #0
 800865c:	db0b      	blt.n	8008676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	f003 021f 	and.w	r2, r3, #31
 8008664:	4907      	ldr	r1, [pc, #28]	@ (8008684 <__NVIC_EnableIRQ+0x38>)
 8008666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800866a:	095b      	lsrs	r3, r3, #5
 800866c:	2001      	movs	r0, #1
 800866e:	fa00 f202 	lsl.w	r2, r0, r2
 8008672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop
 8008684:	e000e100 	.word	0xe000e100

08008688 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	4603      	mov	r3, r0
 8008690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008696:	2b00      	cmp	r3, #0
 8008698:	db12      	blt.n	80086c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	f003 021f 	and.w	r2, r3, #31
 80086a0:	490a      	ldr	r1, [pc, #40]	@ (80086cc <__NVIC_DisableIRQ+0x44>)
 80086a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086a6:	095b      	lsrs	r3, r3, #5
 80086a8:	2001      	movs	r0, #1
 80086aa:	fa00 f202 	lsl.w	r2, r0, r2
 80086ae:	3320      	adds	r3, #32
 80086b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80086b4:	f3bf 8f4f 	dsb	sy
}
 80086b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80086ba:	f3bf 8f6f 	isb	sy
}
 80086be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr
 80086cc:	e000e100 	.word	0xe000e100

080086d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	6039      	str	r1, [r7, #0]
 80086da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	db0a      	blt.n	80086fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	b2da      	uxtb	r2, r3
 80086e8:	490c      	ldr	r1, [pc, #48]	@ (800871c <__NVIC_SetPriority+0x4c>)
 80086ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086ee:	0112      	lsls	r2, r2, #4
 80086f0:	b2d2      	uxtb	r2, r2
 80086f2:	440b      	add	r3, r1
 80086f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80086f8:	e00a      	b.n	8008710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	4908      	ldr	r1, [pc, #32]	@ (8008720 <__NVIC_SetPriority+0x50>)
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	f003 030f 	and.w	r3, r3, #15
 8008706:	3b04      	subs	r3, #4
 8008708:	0112      	lsls	r2, r2, #4
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	440b      	add	r3, r1
 800870e:	761a      	strb	r2, [r3, #24]
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	e000e100 	.word	0xe000e100
 8008720:	e000ed00 	.word	0xe000ed00

08008724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008724:	b480      	push	{r7}
 8008726:	b089      	sub	sp, #36	@ 0x24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f1c3 0307 	rsb	r3, r3, #7
 800873e:	2b04      	cmp	r3, #4
 8008740:	bf28      	it	cs
 8008742:	2304      	movcs	r3, #4
 8008744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	3304      	adds	r3, #4
 800874a:	2b06      	cmp	r3, #6
 800874c:	d902      	bls.n	8008754 <NVIC_EncodePriority+0x30>
 800874e:	69fb      	ldr	r3, [r7, #28]
 8008750:	3b03      	subs	r3, #3
 8008752:	e000      	b.n	8008756 <NVIC_EncodePriority+0x32>
 8008754:	2300      	movs	r3, #0
 8008756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008758:	f04f 32ff 	mov.w	r2, #4294967295
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	fa02 f303 	lsl.w	r3, r2, r3
 8008762:	43da      	mvns	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	401a      	ands	r2, r3
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800876c:	f04f 31ff 	mov.w	r1, #4294967295
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	fa01 f303 	lsl.w	r3, r1, r3
 8008776:	43d9      	mvns	r1, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800877c:	4313      	orrs	r3, r2
         );
}
 800877e:	4618      	mov	r0, r3
 8008780:	3724      	adds	r7, #36	@ 0x24
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
	...

0800878c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	3b01      	subs	r3, #1
 8008798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800879c:	d301      	bcc.n	80087a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800879e:	2301      	movs	r3, #1
 80087a0:	e00f      	b.n	80087c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80087a2:	4a0a      	ldr	r2, [pc, #40]	@ (80087cc <SysTick_Config+0x40>)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80087aa:	210f      	movs	r1, #15
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	f7ff ff8e 	bl	80086d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087b4:	4b05      	ldr	r3, [pc, #20]	@ (80087cc <SysTick_Config+0x40>)
 80087b6:	2200      	movs	r2, #0
 80087b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80087ba:	4b04      	ldr	r3, [pc, #16]	@ (80087cc <SysTick_Config+0x40>)
 80087bc:	2207      	movs	r2, #7
 80087be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	e000e010 	.word	0xe000e010

080087d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ff05 	bl	80085e8 <__NVIC_SetPriorityGrouping>
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b086      	sub	sp, #24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	4603      	mov	r3, r0
 80087ee:	60b9      	str	r1, [r7, #8]
 80087f0:	607a      	str	r2, [r7, #4]
 80087f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80087f8:	f7ff ff1a 	bl	8008630 <__NVIC_GetPriorityGrouping>
 80087fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	68b9      	ldr	r1, [r7, #8]
 8008802:	6978      	ldr	r0, [r7, #20]
 8008804:	f7ff ff8e 	bl	8008724 <NVIC_EncodePriority>
 8008808:	4602      	mov	r2, r0
 800880a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800880e:	4611      	mov	r1, r2
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff ff5d 	bl	80086d0 <__NVIC_SetPriority>
}
 8008816:	bf00      	nop
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}

0800881e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800881e:	b580      	push	{r7, lr}
 8008820:	b082      	sub	sp, #8
 8008822:	af00      	add	r7, sp, #0
 8008824:	4603      	mov	r3, r0
 8008826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800882c:	4618      	mov	r0, r3
 800882e:	f7ff ff0d 	bl	800864c <__NVIC_EnableIRQ>
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b082      	sub	sp, #8
 800883e:	af00      	add	r7, sp, #0
 8008840:	4603      	mov	r3, r0
 8008842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff ff1d 	bl	8008688 <__NVIC_DisableIRQ>
}
 800884e:	bf00      	nop
 8008850:	3708      	adds	r7, #8
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b082      	sub	sp, #8
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7ff ff94 	bl	800878c <SysTick_Config>
 8008864:	4603      	mov	r3, r0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800887c:	f7ff fa74 	bl	8007d68 <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e099      	b.n	80089c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2202      	movs	r2, #2
 8008890:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f022 0201 	bic.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088ac:	e00f      	b.n	80088ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80088ae:	f7ff fa5b 	bl	8007d68 <HAL_GetTick>
 80088b2:	4602      	mov	r2, r0
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	1ad3      	subs	r3, r2, r3
 80088b8:	2b05      	cmp	r3, #5
 80088ba:	d908      	bls.n	80088ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2220      	movs	r2, #32
 80088c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2203      	movs	r2, #3
 80088c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e078      	b.n	80089c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d1e8      	bne.n	80088ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80088e4:	697a      	ldr	r2, [r7, #20]
 80088e6:	4b38      	ldr	r3, [pc, #224]	@ (80089c8 <HAL_DMA_Init+0x158>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685a      	ldr	r2, [r3, #4]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80088fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a1b      	ldr	r3, [r3, #32]
 8008918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008924:	2b04      	cmp	r3, #4
 8008926:	d107      	bne.n	8008938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008930:	4313      	orrs	r3, r2
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	695b      	ldr	r3, [r3, #20]
 8008946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f023 0307 	bic.w	r3, r3, #7
 800894e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	4313      	orrs	r3, r2
 8008958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800895e:	2b04      	cmp	r3, #4
 8008960:	d117      	bne.n	8008992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	4313      	orrs	r3, r2
 800896a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00e      	beq.n	8008992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fb79 	bl	800906c <DMA_CheckFifoParam>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d008      	beq.n	8008992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2240      	movs	r2, #64	@ 0x40
 8008984:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2201      	movs	r2, #1
 800898a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800898e:	2301      	movs	r3, #1
 8008990:	e016      	b.n	80089c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fb30 	bl	8009000 <DMA_CalcBaseAndBitshift>
 80089a0:	4603      	mov	r3, r0
 80089a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089a8:	223f      	movs	r2, #63	@ 0x3f
 80089aa:	409a      	lsls	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2200      	movs	r2, #0
 80089b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	f010803f 	.word	0xf010803f

080089cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e050      	b.n	8008a80 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d101      	bne.n	80089ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80089ea:	2302      	movs	r3, #2
 80089ec:	e048      	b.n	8008a80 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0201 	bic.w	r2, r2, #1
 80089fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2200      	movs	r2, #0
 8008a14:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2221      	movs	r2, #33	@ 0x21
 8008a2c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fae6 	bl	8009000 <DMA_CalcBaseAndBitshift>
 8008a34:	4603      	mov	r3, r0
 8008a36:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2200      	movs	r2, #0
 8008a48:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a60:	223f      	movs	r2, #63	@ 0x3f
 8008a62:	409a      	lsls	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008a7e:	2300      	movs	r3, #0
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
 8008a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d101      	bne.n	8008aae <HAL_DMA_Start_IT+0x26>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	e040      	b.n	8008b30 <HAL_DMA_Start_IT+0xa8>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d12f      	bne.n	8008b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2202      	movs	r2, #2
 8008ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2200      	movs	r2, #0
 8008ace:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	68b9      	ldr	r1, [r7, #8]
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fa64 	bl	8008fa4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ae0:	223f      	movs	r2, #63	@ 0x3f
 8008ae2:	409a      	lsls	r2, r3
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0216 	orr.w	r2, r2, #22
 8008af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d007      	beq.n	8008b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0208 	orr.w	r2, r2, #8
 8008b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f042 0201 	orr.w	r2, r2, #1
 8008b1e:	601a      	str	r2, [r3, #0]
 8008b20:	e005      	b.n	8008b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008b46:	f7ff f90f 	bl	8007d68 <HAL_GetTick>
 8008b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	d008      	beq.n	8008b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2280      	movs	r2, #128	@ 0x80
 8008b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e052      	b.n	8008c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f022 0216 	bic.w	r2, r2, #22
 8008b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695a      	ldr	r2, [r3, #20]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d103      	bne.n	8008b9a <HAL_DMA_Abort+0x62>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0208 	bic.w	r2, r2, #8
 8008ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0201 	bic.w	r2, r2, #1
 8008bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008bba:	e013      	b.n	8008be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008bbc:	f7ff f8d4 	bl	8007d68 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b05      	cmp	r3, #5
 8008bc8:	d90c      	bls.n	8008be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e015      	b.n	8008c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0301 	and.w	r3, r3, #1
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d1e4      	bne.n	8008bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bf6:	223f      	movs	r2, #63	@ 0x3f
 8008bf8:	409a      	lsls	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2201      	movs	r2, #1
 8008c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d004      	beq.n	8008c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2280      	movs	r2, #128	@ 0x80
 8008c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e00c      	b.n	8008c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2205      	movs	r2, #5
 8008c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	681a      	ldr	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f022 0201 	bic.w	r2, r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c68:	4b8e      	ldr	r3, [pc, #568]	@ (8008ea4 <HAL_DMA_IRQHandler+0x248>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a8e      	ldr	r2, [pc, #568]	@ (8008ea8 <HAL_DMA_IRQHandler+0x24c>)
 8008c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c72:	0a9b      	lsrs	r3, r3, #10
 8008c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c86:	2208      	movs	r2, #8
 8008c88:	409a      	lsls	r2, r3
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	4013      	ands	r3, r2
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d01a      	beq.n	8008cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d013      	beq.n	8008cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f022 0204 	bic.w	r2, r2, #4
 8008cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cb4:	2208      	movs	r2, #8
 8008cb6:	409a      	lsls	r2, r3
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cc0:	f043 0201 	orr.w	r2, r3, #1
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ccc:	2201      	movs	r2, #1
 8008cce:	409a      	lsls	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d012      	beq.n	8008cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00b      	beq.n	8008cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cea:	2201      	movs	r2, #1
 8008cec:	409a      	lsls	r2, r3
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cf6:	f043 0202 	orr.w	r2, r3, #2
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d02:	2204      	movs	r2, #4
 8008d04:	409a      	lsls	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d012      	beq.n	8008d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0302 	and.w	r3, r3, #2
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d00b      	beq.n	8008d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d20:	2204      	movs	r2, #4
 8008d22:	409a      	lsls	r2, r3
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2c:	f043 0204 	orr.w	r2, r3, #4
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d38:	2210      	movs	r2, #16
 8008d3a:	409a      	lsls	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d043      	beq.n	8008dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d03c      	beq.n	8008dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d56:	2210      	movs	r2, #16
 8008d58:	409a      	lsls	r2, r3
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d018      	beq.n	8008d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d108      	bne.n	8008d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d024      	beq.n	8008dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	4798      	blx	r3
 8008d8a:	e01f      	b.n	8008dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d01b      	beq.n	8008dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	4798      	blx	r3
 8008d9c:	e016      	b.n	8008dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d107      	bne.n	8008dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0208 	bic.w	r2, r2, #8
 8008dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d003      	beq.n	8008dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008dd0:	2220      	movs	r2, #32
 8008dd2:	409a      	lsls	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 808f 	beq.w	8008efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0310 	and.w	r3, r3, #16
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8087 	beq.w	8008efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008df2:	2220      	movs	r2, #32
 8008df4:	409a      	lsls	r2, r3
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b05      	cmp	r3, #5
 8008e04:	d136      	bne.n	8008e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f022 0216 	bic.w	r2, r2, #22
 8008e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	695a      	ldr	r2, [r3, #20]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d103      	bne.n	8008e36 <HAL_DMA_IRQHandler+0x1da>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d007      	beq.n	8008e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	681a      	ldr	r2, [r3, #0]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f022 0208 	bic.w	r2, r2, #8
 8008e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e4a:	223f      	movs	r2, #63	@ 0x3f
 8008e4c:	409a      	lsls	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d07e      	beq.n	8008f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	4798      	blx	r3
        }
        return;
 8008e72:	e079      	b.n	8008f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d01d      	beq.n	8008ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10d      	bne.n	8008eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d031      	beq.n	8008efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	4798      	blx	r3
 8008ea0:	e02c      	b.n	8008efc <HAL_DMA_IRQHandler+0x2a0>
 8008ea2:	bf00      	nop
 8008ea4:	20000038 	.word	0x20000038
 8008ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d023      	beq.n	8008efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	4798      	blx	r3
 8008ebc:	e01e      	b.n	8008efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10f      	bne.n	8008eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0210 	bic.w	r2, r2, #16
 8008eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d032      	beq.n	8008f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d022      	beq.n	8008f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2205      	movs	r2, #5
 8008f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f022 0201 	bic.w	r2, r2, #1
 8008f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	60bb      	str	r3, [r7, #8]
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d307      	bcc.n	8008f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f2      	bne.n	8008f28 <HAL_DMA_IRQHandler+0x2cc>
 8008f42:	e000      	b.n	8008f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008f44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d005      	beq.n	8008f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
 8008f66:	e000      	b.n	8008f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008f68:	bf00      	nop
    }
  }
}
 8008f6a:	3718      	adds	r7, #24
 8008f6c:	46bd      	mov	sp, r7
 8008f6e:	bd80      	pop	{r7, pc}

08008f70 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008f7e:	b2db      	uxtb	r3, r3
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008fc0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	2b40      	cmp	r3, #64	@ 0x40
 8008fd0:	d108      	bne.n	8008fe4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008fe2:	e007      	b.n	8008ff4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	60da      	str	r2, [r3, #12]
}
 8008ff4:	bf00      	nop
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009000:	b480      	push	{r7}
 8009002:	b085      	sub	sp, #20
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	3b10      	subs	r3, #16
 8009010:	4a14      	ldr	r2, [pc, #80]	@ (8009064 <DMA_CalcBaseAndBitshift+0x64>)
 8009012:	fba2 2303 	umull	r2, r3, r2, r3
 8009016:	091b      	lsrs	r3, r3, #4
 8009018:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800901a:	4a13      	ldr	r2, [pc, #76]	@ (8009068 <DMA_CalcBaseAndBitshift+0x68>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b03      	cmp	r3, #3
 800902c:	d909      	bls.n	8009042 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009036:	f023 0303 	bic.w	r3, r3, #3
 800903a:	1d1a      	adds	r2, r3, #4
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	659a      	str	r2, [r3, #88]	@ 0x58
 8009040:	e007      	b.n	8009052 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800904a:	f023 0303 	bic.w	r3, r3, #3
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009056:	4618      	mov	r0, r3
 8009058:	3714      	adds	r7, #20
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr
 8009062:	bf00      	nop
 8009064:	aaaaaaab 	.word	0xaaaaaaab
 8009068:	08019ea8 	.word	0x08019ea8

0800906c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800907c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d11f      	bne.n	80090c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	2b03      	cmp	r3, #3
 800908a:	d856      	bhi.n	800913a <DMA_CheckFifoParam+0xce>
 800908c:	a201      	add	r2, pc, #4	@ (adr r2, 8009094 <DMA_CheckFifoParam+0x28>)
 800908e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009092:	bf00      	nop
 8009094:	080090a5 	.word	0x080090a5
 8009098:	080090b7 	.word	0x080090b7
 800909c:	080090a5 	.word	0x080090a5
 80090a0:	0800913b 	.word	0x0800913b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d046      	beq.n	800913e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090b4:	e043      	b.n	800913e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80090be:	d140      	bne.n	8009142 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090c4:	e03d      	b.n	8009142 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090ce:	d121      	bne.n	8009114 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	d837      	bhi.n	8009146 <DMA_CheckFifoParam+0xda>
 80090d6:	a201      	add	r2, pc, #4	@ (adr r2, 80090dc <DMA_CheckFifoParam+0x70>)
 80090d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090dc:	080090ed 	.word	0x080090ed
 80090e0:	080090f3 	.word	0x080090f3
 80090e4:	080090ed 	.word	0x080090ed
 80090e8:	08009105 	.word	0x08009105
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	73fb      	strb	r3, [r7, #15]
      break;
 80090f0:	e030      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d025      	beq.n	800914a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009102:	e022      	b.n	800914a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009108:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800910c:	d11f      	bne.n	800914e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009112:	e01c      	b.n	800914e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d903      	bls.n	8009122 <DMA_CheckFifoParam+0xb6>
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	2b03      	cmp	r3, #3
 800911e:	d003      	beq.n	8009128 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009120:	e018      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]
      break;
 8009126:	e015      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800912c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00e      	beq.n	8009152 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009134:	2301      	movs	r3, #1
 8009136:	73fb      	strb	r3, [r7, #15]
      break;
 8009138:	e00b      	b.n	8009152 <DMA_CheckFifoParam+0xe6>
      break;
 800913a:	bf00      	nop
 800913c:	e00a      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
      break;
 800913e:	bf00      	nop
 8009140:	e008      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
      break;
 8009142:	bf00      	nop
 8009144:	e006      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
      break;
 8009146:	bf00      	nop
 8009148:	e004      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
      break;
 800914a:	bf00      	nop
 800914c:	e002      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
      break;   
 800914e:	bf00      	nop
 8009150:	e000      	b.n	8009154 <DMA_CheckFifoParam+0xe8>
      break;
 8009152:	bf00      	nop
    }
  } 
  
  return status; 
 8009154:	7bfb      	ldrb	r3, [r7, #15]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop

08009164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009164:	b480      	push	{r7}
 8009166:	b089      	sub	sp, #36	@ 0x24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800916e:	2300      	movs	r3, #0
 8009170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009172:	2300      	movs	r3, #0
 8009174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009176:	2300      	movs	r3, #0
 8009178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]
 800917e:	e165      	b.n	800944c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009180:	2201      	movs	r2, #1
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	fa02 f303 	lsl.w	r3, r2, r3
 8009188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	4013      	ands	r3, r2
 8009192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	429a      	cmp	r2, r3
 800919a:	f040 8154 	bne.w	8009446 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d005      	beq.n	80091b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d130      	bne.n	8009218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	005b      	lsls	r3, r3, #1
 80091c0:	2203      	movs	r2, #3
 80091c2:	fa02 f303 	lsl.w	r3, r2, r3
 80091c6:	43db      	mvns	r3, r3
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	4013      	ands	r3, r2
 80091cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	4313      	orrs	r3, r2
 80091de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80091ec:	2201      	movs	r2, #1
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	fa02 f303 	lsl.w	r3, r2, r3
 80091f4:	43db      	mvns	r3, r3
 80091f6:	69ba      	ldr	r2, [r7, #24]
 80091f8:	4013      	ands	r3, r2
 80091fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	091b      	lsrs	r3, r3, #4
 8009202:	f003 0201 	and.w	r2, r3, #1
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	fa02 f303 	lsl.w	r3, r2, r3
 800920c:	69ba      	ldr	r2, [r7, #24]
 800920e:	4313      	orrs	r3, r2
 8009210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	69ba      	ldr	r2, [r7, #24]
 8009216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	f003 0303 	and.w	r3, r3, #3
 8009220:	2b03      	cmp	r3, #3
 8009222:	d017      	beq.n	8009254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	2203      	movs	r2, #3
 8009230:	fa02 f303 	lsl.w	r3, r2, r3
 8009234:	43db      	mvns	r3, r3
 8009236:	69ba      	ldr	r2, [r7, #24]
 8009238:	4013      	ands	r3, r2
 800923a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	69fb      	ldr	r3, [r7, #28]
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	fa02 f303 	lsl.w	r3, r2, r3
 8009248:	69ba      	ldr	r2, [r7, #24]
 800924a:	4313      	orrs	r3, r2
 800924c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	69ba      	ldr	r2, [r7, #24]
 8009252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	f003 0303 	and.w	r3, r3, #3
 800925c:	2b02      	cmp	r3, #2
 800925e:	d123      	bne.n	80092a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009260:	69fb      	ldr	r3, [r7, #28]
 8009262:	08da      	lsrs	r2, r3, #3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3208      	adds	r2, #8
 8009268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	220f      	movs	r2, #15
 8009278:	fa02 f303 	lsl.w	r3, r2, r3
 800927c:	43db      	mvns	r3, r3
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	4013      	ands	r3, r2
 8009282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	691a      	ldr	r2, [r3, #16]
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	f003 0307 	and.w	r3, r3, #7
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	fa02 f303 	lsl.w	r3, r2, r3
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	4313      	orrs	r3, r2
 8009298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	08da      	lsrs	r2, r3, #3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	3208      	adds	r2, #8
 80092a2:	69b9      	ldr	r1, [r7, #24]
 80092a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80092ae:	69fb      	ldr	r3, [r7, #28]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	2203      	movs	r2, #3
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	43db      	mvns	r3, r3
 80092ba:	69ba      	ldr	r2, [r7, #24]
 80092bc:	4013      	ands	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f003 0203 	and.w	r2, r3, #3
 80092c8:	69fb      	ldr	r3, [r7, #28]
 80092ca:	005b      	lsls	r3, r3, #1
 80092cc:	fa02 f303 	lsl.w	r3, r2, r3
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	69ba      	ldr	r2, [r7, #24]
 80092da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 80ae 	beq.w	8009446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	4b5d      	ldr	r3, [pc, #372]	@ (8009464 <HAL_GPIO_Init+0x300>)
 80092f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092f2:	4a5c      	ldr	r2, [pc, #368]	@ (8009464 <HAL_GPIO_Init+0x300>)
 80092f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80092f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80092fa:	4b5a      	ldr	r3, [pc, #360]	@ (8009464 <HAL_GPIO_Init+0x300>)
 80092fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009306:	4a58      	ldr	r2, [pc, #352]	@ (8009468 <HAL_GPIO_Init+0x304>)
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	089b      	lsrs	r3, r3, #2
 800930c:	3302      	adds	r3, #2
 800930e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009314:	69fb      	ldr	r3, [r7, #28]
 8009316:	f003 0303 	and.w	r3, r3, #3
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	220f      	movs	r2, #15
 800931e:	fa02 f303 	lsl.w	r3, r2, r3
 8009322:	43db      	mvns	r3, r3
 8009324:	69ba      	ldr	r2, [r7, #24]
 8009326:	4013      	ands	r3, r2
 8009328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a4f      	ldr	r2, [pc, #316]	@ (800946c <HAL_GPIO_Init+0x308>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d025      	beq.n	800937e <HAL_GPIO_Init+0x21a>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a4e      	ldr	r2, [pc, #312]	@ (8009470 <HAL_GPIO_Init+0x30c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d01f      	beq.n	800937a <HAL_GPIO_Init+0x216>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a4d      	ldr	r2, [pc, #308]	@ (8009474 <HAL_GPIO_Init+0x310>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d019      	beq.n	8009376 <HAL_GPIO_Init+0x212>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a4c      	ldr	r2, [pc, #304]	@ (8009478 <HAL_GPIO_Init+0x314>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d013      	beq.n	8009372 <HAL_GPIO_Init+0x20e>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a4b      	ldr	r2, [pc, #300]	@ (800947c <HAL_GPIO_Init+0x318>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00d      	beq.n	800936e <HAL_GPIO_Init+0x20a>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a4a      	ldr	r2, [pc, #296]	@ (8009480 <HAL_GPIO_Init+0x31c>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d007      	beq.n	800936a <HAL_GPIO_Init+0x206>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a49      	ldr	r2, [pc, #292]	@ (8009484 <HAL_GPIO_Init+0x320>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d101      	bne.n	8009366 <HAL_GPIO_Init+0x202>
 8009362:	2306      	movs	r3, #6
 8009364:	e00c      	b.n	8009380 <HAL_GPIO_Init+0x21c>
 8009366:	2307      	movs	r3, #7
 8009368:	e00a      	b.n	8009380 <HAL_GPIO_Init+0x21c>
 800936a:	2305      	movs	r3, #5
 800936c:	e008      	b.n	8009380 <HAL_GPIO_Init+0x21c>
 800936e:	2304      	movs	r3, #4
 8009370:	e006      	b.n	8009380 <HAL_GPIO_Init+0x21c>
 8009372:	2303      	movs	r3, #3
 8009374:	e004      	b.n	8009380 <HAL_GPIO_Init+0x21c>
 8009376:	2302      	movs	r3, #2
 8009378:	e002      	b.n	8009380 <HAL_GPIO_Init+0x21c>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <HAL_GPIO_Init+0x21c>
 800937e:	2300      	movs	r3, #0
 8009380:	69fa      	ldr	r2, [r7, #28]
 8009382:	f002 0203 	and.w	r2, r2, #3
 8009386:	0092      	lsls	r2, r2, #2
 8009388:	4093      	lsls	r3, r2
 800938a:	69ba      	ldr	r2, [r7, #24]
 800938c:	4313      	orrs	r3, r2
 800938e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009390:	4935      	ldr	r1, [pc, #212]	@ (8009468 <HAL_GPIO_Init+0x304>)
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	089b      	lsrs	r3, r3, #2
 8009396:	3302      	adds	r3, #2
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800939e:	4b3a      	ldr	r3, [pc, #232]	@ (8009488 <HAL_GPIO_Init+0x324>)
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	43db      	mvns	r3, r3
 80093a8:	69ba      	ldr	r2, [r7, #24]
 80093aa:	4013      	ands	r3, r2
 80093ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80093ba:	69ba      	ldr	r2, [r7, #24]
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80093c2:	4a31      	ldr	r2, [pc, #196]	@ (8009488 <HAL_GPIO_Init+0x324>)
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80093c8:	4b2f      	ldr	r3, [pc, #188]	@ (8009488 <HAL_GPIO_Init+0x324>)
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	43db      	mvns	r3, r3
 80093d2:	69ba      	ldr	r2, [r7, #24]
 80093d4:	4013      	ands	r3, r2
 80093d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80093e4:	69ba      	ldr	r2, [r7, #24]
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80093ec:	4a26      	ldr	r2, [pc, #152]	@ (8009488 <HAL_GPIO_Init+0x324>)
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80093f2:	4b25      	ldr	r3, [pc, #148]	@ (8009488 <HAL_GPIO_Init+0x324>)
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	43db      	mvns	r3, r3
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	4013      	ands	r3, r2
 8009400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d003      	beq.n	8009416 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800940e:	69ba      	ldr	r2, [r7, #24]
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	4313      	orrs	r3, r2
 8009414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009416:	4a1c      	ldr	r2, [pc, #112]	@ (8009488 <HAL_GPIO_Init+0x324>)
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800941c:	4b1a      	ldr	r3, [pc, #104]	@ (8009488 <HAL_GPIO_Init+0x324>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	43db      	mvns	r3, r3
 8009426:	69ba      	ldr	r2, [r7, #24]
 8009428:	4013      	ands	r3, r2
 800942a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009438:	69ba      	ldr	r2, [r7, #24]
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	4313      	orrs	r3, r2
 800943e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009440:	4a11      	ldr	r2, [pc, #68]	@ (8009488 <HAL_GPIO_Init+0x324>)
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	3301      	adds	r3, #1
 800944a:	61fb      	str	r3, [r7, #28]
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	2b0f      	cmp	r3, #15
 8009450:	f67f ae96 	bls.w	8009180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop
 8009458:	3724      	adds	r7, #36	@ 0x24
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	40023800 	.word	0x40023800
 8009468:	40013800 	.word	0x40013800
 800946c:	40020000 	.word	0x40020000
 8009470:	40020400 	.word	0x40020400
 8009474:	40020800 	.word	0x40020800
 8009478:	40020c00 	.word	0x40020c00
 800947c:	40021000 	.word	0x40021000
 8009480:	40021400 	.word	0x40021400
 8009484:	40021800 	.word	0x40021800
 8009488:	40013c00 	.word	0x40013c00

0800948c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800948c:	b480      	push	{r7}
 800948e:	b087      	sub	sp, #28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009496:	2300      	movs	r3, #0
 8009498:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800949e:	2300      	movs	r3, #0
 80094a0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]
 80094a6:	e0c7      	b.n	8009638 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80094a8:	2201      	movs	r2, #1
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	fa02 f303 	lsl.w	r3, r2, r3
 80094b0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	4013      	ands	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	429a      	cmp	r2, r3
 80094c0:	f040 80b7 	bne.w	8009632 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80094c4:	4a62      	ldr	r2, [pc, #392]	@ (8009650 <HAL_GPIO_DeInit+0x1c4>)
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	089b      	lsrs	r3, r3, #2
 80094ca:	3302      	adds	r3, #2
 80094cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094d0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f003 0303 	and.w	r3, r3, #3
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	220f      	movs	r2, #15
 80094dc:	fa02 f303 	lsl.w	r3, r2, r3
 80094e0:	68ba      	ldr	r2, [r7, #8]
 80094e2:	4013      	ands	r3, r2
 80094e4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a5a      	ldr	r2, [pc, #360]	@ (8009654 <HAL_GPIO_DeInit+0x1c8>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d025      	beq.n	800953a <HAL_GPIO_DeInit+0xae>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a59      	ldr	r2, [pc, #356]	@ (8009658 <HAL_GPIO_DeInit+0x1cc>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d01f      	beq.n	8009536 <HAL_GPIO_DeInit+0xaa>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a58      	ldr	r2, [pc, #352]	@ (800965c <HAL_GPIO_DeInit+0x1d0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d019      	beq.n	8009532 <HAL_GPIO_DeInit+0xa6>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a57      	ldr	r2, [pc, #348]	@ (8009660 <HAL_GPIO_DeInit+0x1d4>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d013      	beq.n	800952e <HAL_GPIO_DeInit+0xa2>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a56      	ldr	r2, [pc, #344]	@ (8009664 <HAL_GPIO_DeInit+0x1d8>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d00d      	beq.n	800952a <HAL_GPIO_DeInit+0x9e>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a55      	ldr	r2, [pc, #340]	@ (8009668 <HAL_GPIO_DeInit+0x1dc>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d007      	beq.n	8009526 <HAL_GPIO_DeInit+0x9a>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a54      	ldr	r2, [pc, #336]	@ (800966c <HAL_GPIO_DeInit+0x1e0>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d101      	bne.n	8009522 <HAL_GPIO_DeInit+0x96>
 800951e:	2306      	movs	r3, #6
 8009520:	e00c      	b.n	800953c <HAL_GPIO_DeInit+0xb0>
 8009522:	2307      	movs	r3, #7
 8009524:	e00a      	b.n	800953c <HAL_GPIO_DeInit+0xb0>
 8009526:	2305      	movs	r3, #5
 8009528:	e008      	b.n	800953c <HAL_GPIO_DeInit+0xb0>
 800952a:	2304      	movs	r3, #4
 800952c:	e006      	b.n	800953c <HAL_GPIO_DeInit+0xb0>
 800952e:	2303      	movs	r3, #3
 8009530:	e004      	b.n	800953c <HAL_GPIO_DeInit+0xb0>
 8009532:	2302      	movs	r3, #2
 8009534:	e002      	b.n	800953c <HAL_GPIO_DeInit+0xb0>
 8009536:	2301      	movs	r3, #1
 8009538:	e000      	b.n	800953c <HAL_GPIO_DeInit+0xb0>
 800953a:	2300      	movs	r3, #0
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	f002 0203 	and.w	r2, r2, #3
 8009542:	0092      	lsls	r2, r2, #2
 8009544:	4093      	lsls	r3, r2
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	429a      	cmp	r2, r3
 800954a:	d132      	bne.n	80095b2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800954c:	4b48      	ldr	r3, [pc, #288]	@ (8009670 <HAL_GPIO_DeInit+0x1e4>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	43db      	mvns	r3, r3
 8009554:	4946      	ldr	r1, [pc, #280]	@ (8009670 <HAL_GPIO_DeInit+0x1e4>)
 8009556:	4013      	ands	r3, r2
 8009558:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800955a:	4b45      	ldr	r3, [pc, #276]	@ (8009670 <HAL_GPIO_DeInit+0x1e4>)
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	43db      	mvns	r3, r3
 8009562:	4943      	ldr	r1, [pc, #268]	@ (8009670 <HAL_GPIO_DeInit+0x1e4>)
 8009564:	4013      	ands	r3, r2
 8009566:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009568:	4b41      	ldr	r3, [pc, #260]	@ (8009670 <HAL_GPIO_DeInit+0x1e4>)
 800956a:	68da      	ldr	r2, [r3, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	43db      	mvns	r3, r3
 8009570:	493f      	ldr	r1, [pc, #252]	@ (8009670 <HAL_GPIO_DeInit+0x1e4>)
 8009572:	4013      	ands	r3, r2
 8009574:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009576:	4b3e      	ldr	r3, [pc, #248]	@ (8009670 <HAL_GPIO_DeInit+0x1e4>)
 8009578:	689a      	ldr	r2, [r3, #8]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	43db      	mvns	r3, r3
 800957e:	493c      	ldr	r1, [pc, #240]	@ (8009670 <HAL_GPIO_DeInit+0x1e4>)
 8009580:	4013      	ands	r3, r2
 8009582:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	220f      	movs	r2, #15
 800958e:	fa02 f303 	lsl.w	r3, r2, r3
 8009592:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009594:	4a2e      	ldr	r2, [pc, #184]	@ (8009650 <HAL_GPIO_DeInit+0x1c4>)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	089b      	lsrs	r3, r3, #2
 800959a:	3302      	adds	r3, #2
 800959c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	43da      	mvns	r2, r3
 80095a4:	482a      	ldr	r0, [pc, #168]	@ (8009650 <HAL_GPIO_DeInit+0x1c4>)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	089b      	lsrs	r3, r3, #2
 80095aa:	400a      	ands	r2, r1
 80095ac:	3302      	adds	r3, #2
 80095ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	2103      	movs	r1, #3
 80095bc:	fa01 f303 	lsl.w	r3, r1, r3
 80095c0:	43db      	mvns	r3, r3
 80095c2:	401a      	ands	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	08da      	lsrs	r2, r3, #3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3208      	adds	r2, #8
 80095d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	220f      	movs	r2, #15
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	43db      	mvns	r3, r3
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	08d2      	lsrs	r2, r2, #3
 80095e8:	4019      	ands	r1, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3208      	adds	r2, #8
 80095ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	2103      	movs	r1, #3
 80095fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009600:	43db      	mvns	r3, r3
 8009602:	401a      	ands	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	2101      	movs	r1, #1
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	fa01 f303 	lsl.w	r3, r1, r3
 8009614:	43db      	mvns	r3, r3
 8009616:	401a      	ands	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	2103      	movs	r1, #3
 8009626:	fa01 f303 	lsl.w	r3, r1, r3
 800962a:	43db      	mvns	r3, r3
 800962c:	401a      	ands	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	3301      	adds	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2b0f      	cmp	r3, #15
 800963c:	f67f af34 	bls.w	80094a8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009640:	bf00      	nop
 8009642:	bf00      	nop
 8009644:	371c      	adds	r7, #28
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	40013800 	.word	0x40013800
 8009654:	40020000 	.word	0x40020000
 8009658:	40020400 	.word	0x40020400
 800965c:	40020800 	.word	0x40020800
 8009660:	40020c00 	.word	0x40020c00
 8009664:	40021000 	.word	0x40021000
 8009668:	40021400 	.word	0x40021400
 800966c:	40021800 	.word	0x40021800
 8009670:	40013c00 	.word	0x40013c00

08009674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	460b      	mov	r3, r1
 800967e:	807b      	strh	r3, [r7, #2]
 8009680:	4613      	mov	r3, r2
 8009682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009684:	787b      	ldrb	r3, [r7, #1]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d003      	beq.n	8009692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800968a:	887a      	ldrh	r2, [r7, #2]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009690:	e003      	b.n	800969a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009692:	887b      	ldrh	r3, [r7, #2]
 8009694:	041a      	lsls	r2, r3, #16
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	619a      	str	r2, [r3, #24]
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
	...

080096a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80096b2:	4b08      	ldr	r3, [pc, #32]	@ (80096d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80096b4:	695a      	ldr	r2, [r3, #20]
 80096b6:	88fb      	ldrh	r3, [r7, #6]
 80096b8:	4013      	ands	r3, r2
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d006      	beq.n	80096cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80096be:	4a05      	ldr	r2, [pc, #20]	@ (80096d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80096c0:	88fb      	ldrh	r3, [r7, #6]
 80096c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80096c4:	88fb      	ldrh	r3, [r7, #6]
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fc f902 	bl	80058d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80096cc:	bf00      	nop
 80096ce:	3708      	adds	r7, #8
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	40013c00 	.word	0x40013c00

080096d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e12b      	b.n	8009942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d106      	bne.n	8009704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7fd fde6 	bl	80072d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2224      	movs	r2, #36	@ 0x24
 8009708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0201 	bic.w	r2, r2, #1
 800971a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800972a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800973a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800973c:	f002 ff86 	bl	800c64c <HAL_RCC_GetPCLK1Freq>
 8009740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	4a81      	ldr	r2, [pc, #516]	@ (800994c <HAL_I2C_Init+0x274>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d807      	bhi.n	800975c <HAL_I2C_Init+0x84>
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4a80      	ldr	r2, [pc, #512]	@ (8009950 <HAL_I2C_Init+0x278>)
 8009750:	4293      	cmp	r3, r2
 8009752:	bf94      	ite	ls
 8009754:	2301      	movls	r3, #1
 8009756:	2300      	movhi	r3, #0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	e006      	b.n	800976a <HAL_I2C_Init+0x92>
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	4a7d      	ldr	r2, [pc, #500]	@ (8009954 <HAL_I2C_Init+0x27c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	bf94      	ite	ls
 8009764:	2301      	movls	r3, #1
 8009766:	2300      	movhi	r3, #0
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800976e:	2301      	movs	r3, #1
 8009770:	e0e7      	b.n	8009942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4a78      	ldr	r2, [pc, #480]	@ (8009958 <HAL_I2C_Init+0x280>)
 8009776:	fba2 2303 	umull	r2, r3, r2, r3
 800977a:	0c9b      	lsrs	r3, r3, #18
 800977c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	68ba      	ldr	r2, [r7, #8]
 800978e:	430a      	orrs	r2, r1
 8009790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6a1b      	ldr	r3, [r3, #32]
 8009798:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a6a      	ldr	r2, [pc, #424]	@ (800994c <HAL_I2C_Init+0x274>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d802      	bhi.n	80097ac <HAL_I2C_Init+0xd4>
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	3301      	adds	r3, #1
 80097aa:	e009      	b.n	80097c0 <HAL_I2C_Init+0xe8>
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80097b2:	fb02 f303 	mul.w	r3, r2, r3
 80097b6:	4a69      	ldr	r2, [pc, #420]	@ (800995c <HAL_I2C_Init+0x284>)
 80097b8:	fba2 2303 	umull	r2, r3, r2, r3
 80097bc:	099b      	lsrs	r3, r3, #6
 80097be:	3301      	adds	r3, #1
 80097c0:	687a      	ldr	r2, [r7, #4]
 80097c2:	6812      	ldr	r2, [r2, #0]
 80097c4:	430b      	orrs	r3, r1
 80097c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80097d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	495c      	ldr	r1, [pc, #368]	@ (800994c <HAL_I2C_Init+0x274>)
 80097dc:	428b      	cmp	r3, r1
 80097de:	d819      	bhi.n	8009814 <HAL_I2C_Init+0x13c>
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	1e59      	subs	r1, r3, #1
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	005b      	lsls	r3, r3, #1
 80097ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80097ee:	1c59      	adds	r1, r3, #1
 80097f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80097f4:	400b      	ands	r3, r1
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <HAL_I2C_Init+0x138>
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	1e59      	subs	r1, r3, #1
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	fbb1 f3f3 	udiv	r3, r1, r3
 8009808:	3301      	adds	r3, #1
 800980a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800980e:	e051      	b.n	80098b4 <HAL_I2C_Init+0x1dc>
 8009810:	2304      	movs	r3, #4
 8009812:	e04f      	b.n	80098b4 <HAL_I2C_Init+0x1dc>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d111      	bne.n	8009840 <HAL_I2C_Init+0x168>
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	1e58      	subs	r0, r3, #1
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6859      	ldr	r1, [r3, #4]
 8009824:	460b      	mov	r3, r1
 8009826:	005b      	lsls	r3, r3, #1
 8009828:	440b      	add	r3, r1
 800982a:	fbb0 f3f3 	udiv	r3, r0, r3
 800982e:	3301      	adds	r3, #1
 8009830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009834:	2b00      	cmp	r3, #0
 8009836:	bf0c      	ite	eq
 8009838:	2301      	moveq	r3, #1
 800983a:	2300      	movne	r3, #0
 800983c:	b2db      	uxtb	r3, r3
 800983e:	e012      	b.n	8009866 <HAL_I2C_Init+0x18e>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	1e58      	subs	r0, r3, #1
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6859      	ldr	r1, [r3, #4]
 8009848:	460b      	mov	r3, r1
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	440b      	add	r3, r1
 800984e:	0099      	lsls	r1, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	fbb0 f3f3 	udiv	r3, r0, r3
 8009856:	3301      	adds	r3, #1
 8009858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800985c:	2b00      	cmp	r3, #0
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <HAL_I2C_Init+0x196>
 800986a:	2301      	movs	r3, #1
 800986c:	e022      	b.n	80098b4 <HAL_I2C_Init+0x1dc>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10e      	bne.n	8009894 <HAL_I2C_Init+0x1bc>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	1e58      	subs	r0, r3, #1
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	6859      	ldr	r1, [r3, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	005b      	lsls	r3, r3, #1
 8009882:	440b      	add	r3, r1
 8009884:	fbb0 f3f3 	udiv	r3, r0, r3
 8009888:	3301      	adds	r3, #1
 800988a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800988e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009892:	e00f      	b.n	80098b4 <HAL_I2C_Init+0x1dc>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	1e58      	subs	r0, r3, #1
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6859      	ldr	r1, [r3, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	440b      	add	r3, r1
 80098a2:	0099      	lsls	r1, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80098aa:	3301      	adds	r3, #1
 80098ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	6809      	ldr	r1, [r1, #0]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	69da      	ldr	r2, [r3, #28]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	431a      	orrs	r2, r3
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	430a      	orrs	r2, r1
 80098d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80098e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	6911      	ldr	r1, [r2, #16]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	68d2      	ldr	r2, [r2, #12]
 80098ee:	4311      	orrs	r1, r2
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6812      	ldr	r2, [r2, #0]
 80098f4:	430b      	orrs	r3, r1
 80098f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	695a      	ldr	r2, [r3, #20]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	430a      	orrs	r2, r1
 8009912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0201 	orr.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	000186a0 	.word	0x000186a0
 8009950:	001e847f 	.word	0x001e847f
 8009954:	003d08ff 	.word	0x003d08ff
 8009958:	431bde83 	.word	0x431bde83
 800995c:	10624dd3 	.word	0x10624dd3

08009960 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d101      	bne.n	8009972 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e021      	b.n	80099b6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2224      	movs	r2, #36	@ 0x24
 8009976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681a      	ldr	r2, [r3, #0]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f022 0201 	bic.w	r2, r2, #1
 8009988:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f7fd fd7a 	bl	8007484 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2200      	movs	r2, #0
 80099a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d0:	2b80      	cmp	r3, #128	@ 0x80
 80099d2:	d103      	bne.n	80099dc <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2200      	movs	r2, #0
 80099da:	611a      	str	r2, [r3, #16]
  }
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b088      	sub	sp, #32
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	4608      	mov	r0, r1
 80099f2:	4611      	mov	r1, r2
 80099f4:	461a      	mov	r2, r3
 80099f6:	4603      	mov	r3, r0
 80099f8:	817b      	strh	r3, [r7, #10]
 80099fa:	460b      	mov	r3, r1
 80099fc:	813b      	strh	r3, [r7, #8]
 80099fe:	4613      	mov	r3, r2
 8009a00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009a02:	f7fe f9b1 	bl	8007d68 <HAL_GetTick>
 8009a06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	f040 80d9 	bne.w	8009bc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	2319      	movs	r3, #25
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	496d      	ldr	r1, [pc, #436]	@ (8009bd4 <HAL_I2C_Mem_Write+0x1ec>)
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f002 fa9d 	bl	800bf60 <I2C_WaitOnFlagUntilTimeout>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d001      	beq.n	8009a30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009a2c:	2302      	movs	r3, #2
 8009a2e:	e0cc      	b.n	8009bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d101      	bne.n	8009a3e <HAL_I2C_Mem_Write+0x56>
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e0c5      	b.n	8009bca <HAL_I2C_Mem_Write+0x1e2>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2201      	movs	r2, #1
 8009a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d007      	beq.n	8009a64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f042 0201 	orr.w	r2, r2, #1
 8009a62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2221      	movs	r2, #33	@ 0x21
 8009a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2240      	movs	r2, #64	@ 0x40
 8009a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6a3a      	ldr	r2, [r7, #32]
 8009a8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8009a94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8009bd8 <HAL_I2C_Mem_Write+0x1f0>)
 8009aa4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009aa6:	88f8      	ldrh	r0, [r7, #6]
 8009aa8:	893a      	ldrh	r2, [r7, #8]
 8009aaa:	8979      	ldrh	r1, [r7, #10]
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	9301      	str	r3, [sp, #4]
 8009ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab2:	9300      	str	r3, [sp, #0]
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f001 ff10 	bl	800b8dc <I2C_RequestMemoryWrite>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d052      	beq.n	8009b68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e081      	b.n	8009bca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f002 fb62 	bl	800c194 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00d      	beq.n	8009af2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ada:	2b04      	cmp	r3, #4
 8009adc:	d107      	bne.n	8009aee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009aec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e06b      	b.n	8009bca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b0c:	3b01      	subs	r3, #1
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	b29a      	uxth	r2, r3
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	695b      	ldr	r3, [r3, #20]
 8009b28:	f003 0304 	and.w	r3, r3, #4
 8009b2c:	2b04      	cmp	r3, #4
 8009b2e:	d11b      	bne.n	8009b68 <HAL_I2C_Mem_Write+0x180>
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d017      	beq.n	8009b68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b3c:	781a      	ldrb	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b48:	1c5a      	adds	r2, r3, #1
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b52:	3b01      	subs	r3, #1
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	3b01      	subs	r3, #1
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1aa      	bne.n	8009ac6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b70:	697a      	ldr	r2, [r7, #20]
 8009b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f002 fb55 	bl	800c224 <I2C_WaitOnBTFFlagUntilTimeout>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00d      	beq.n	8009b9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	d107      	bne.n	8009b98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009b96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e016      	b.n	8009bca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2220      	movs	r2, #32
 8009bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	e000      	b.n	8009bca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009bc8:	2302      	movs	r3, #2
  }
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	00100002 	.word	0x00100002
 8009bd8:	ffff0000 	.word	0xffff0000

08009bdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08c      	sub	sp, #48	@ 0x30
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	60f8      	str	r0, [r7, #12]
 8009be4:	4608      	mov	r0, r1
 8009be6:	4611      	mov	r1, r2
 8009be8:	461a      	mov	r2, r3
 8009bea:	4603      	mov	r3, r0
 8009bec:	817b      	strh	r3, [r7, #10]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	813b      	strh	r3, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009bf6:	f7fe f8b7 	bl	8007d68 <HAL_GetTick>
 8009bfa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c02:	b2db      	uxtb	r3, r3
 8009c04:	2b20      	cmp	r3, #32
 8009c06:	f040 8214 	bne.w	800a032 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	2319      	movs	r3, #25
 8009c10:	2201      	movs	r2, #1
 8009c12:	497b      	ldr	r1, [pc, #492]	@ (8009e00 <HAL_I2C_Mem_Read+0x224>)
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f002 f9a3 	bl	800bf60 <I2C_WaitOnFlagUntilTimeout>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d001      	beq.n	8009c24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009c20:	2302      	movs	r3, #2
 8009c22:	e207      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <HAL_I2C_Mem_Read+0x56>
 8009c2e:	2302      	movs	r3, #2
 8009c30:	e200      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f003 0301 	and.w	r3, r3, #1
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d007      	beq.n	8009c58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0201 	orr.w	r2, r2, #1
 8009c56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009c66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2222      	movs	r2, #34	@ 0x22
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2240      	movs	r2, #64	@ 0x40
 8009c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8009c88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	4a5b      	ldr	r2, [pc, #364]	@ (8009e04 <HAL_I2C_Mem_Read+0x228>)
 8009c98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c9a:	88f8      	ldrh	r0, [r7, #6]
 8009c9c:	893a      	ldrh	r2, [r7, #8]
 8009c9e:	8979      	ldrh	r1, [r7, #10]
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	4603      	mov	r3, r0
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f001 feac 	bl	800ba08 <I2C_RequestMemoryRead>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e1bc      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d113      	bne.n	8009cea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	623b      	str	r3, [r7, #32]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	695b      	ldr	r3, [r3, #20]
 8009ccc:	623b      	str	r3, [r7, #32]
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	699b      	ldr	r3, [r3, #24]
 8009cd4:	623b      	str	r3, [r7, #32]
 8009cd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681a      	ldr	r2, [r3, #0]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ce6:	601a      	str	r2, [r3, #0]
 8009ce8:	e190      	b.n	800a00c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d11b      	bne.n	8009d2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d02:	2300      	movs	r3, #0
 8009d04:	61fb      	str	r3, [r7, #28]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	695b      	ldr	r3, [r3, #20]
 8009d0c:	61fb      	str	r3, [r7, #28]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	61fb      	str	r3, [r7, #28]
 8009d16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009d26:	601a      	str	r2, [r3, #0]
 8009d28:	e170      	b.n	800a00c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d2e:	2b02      	cmp	r3, #2
 8009d30:	d11b      	bne.n	8009d6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009d40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d52:	2300      	movs	r3, #0
 8009d54:	61bb      	str	r3, [r7, #24]
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	61bb      	str	r3, [r7, #24]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	61bb      	str	r3, [r7, #24]
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	e150      	b.n	800a00c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	617b      	str	r3, [r7, #20]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	617b      	str	r3, [r7, #20]
 8009d7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009d80:	e144      	b.n	800a00c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d86:	2b03      	cmp	r3, #3
 8009d88:	f200 80f1 	bhi.w	8009f6e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d123      	bne.n	8009ddc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f002 fabd 	bl	800c318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e145      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	691a      	ldr	r2, [r3, #16]
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db2:	b2d2      	uxtb	r2, r2
 8009db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	b29a      	uxth	r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009dda:	e117      	b.n	800a00c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d14e      	bne.n	8009e82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dea:	2200      	movs	r2, #0
 8009dec:	4906      	ldr	r1, [pc, #24]	@ (8009e08 <HAL_I2C_Mem_Read+0x22c>)
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f002 f8b6 	bl	800bf60 <I2C_WaitOnFlagUntilTimeout>
 8009df4:	4603      	mov	r3, r0
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d008      	beq.n	8009e0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e11a      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
 8009dfe:	bf00      	nop
 8009e00:	00100002 	.word	0x00100002
 8009e04:	ffff0000 	.word	0xffff0000
 8009e08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009e1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	691a      	ldr	r2, [r3, #16]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e26:	b2d2      	uxtb	r2, r2
 8009e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e38:	3b01      	subs	r3, #1
 8009e3a:	b29a      	uxth	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	3b01      	subs	r3, #1
 8009e48:	b29a      	uxth	r2, r3
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	691a      	ldr	r2, [r3, #16]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e58:	b2d2      	uxtb	r2, r2
 8009e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e6a:	3b01      	subs	r3, #1
 8009e6c:	b29a      	uxth	r2, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	b29a      	uxth	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009e80:	e0c4      	b.n	800a00c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e84:	9300      	str	r3, [sp, #0]
 8009e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e88:	2200      	movs	r2, #0
 8009e8a:	496c      	ldr	r1, [pc, #432]	@ (800a03c <HAL_I2C_Mem_Read+0x460>)
 8009e8c:	68f8      	ldr	r0, [r7, #12]
 8009e8e:	f002 f867 	bl	800bf60 <I2C_WaitOnFlagUntilTimeout>
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	e0cb      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009eaa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	691a      	ldr	r2, [r3, #16]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb6:	b2d2      	uxtb	r2, r2
 8009eb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	b29a      	uxth	r2, r3
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	4955      	ldr	r1, [pc, #340]	@ (800a03c <HAL_I2C_Mem_Read+0x460>)
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f002 f839 	bl	800bf60 <I2C_WaitOnFlagUntilTimeout>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e09d      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	691a      	ldr	r2, [r3, #16]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f12:	b2d2      	uxtb	r2, r2
 8009f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f1a:	1c5a      	adds	r2, r3, #1
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f24:	3b01      	subs	r3, #1
 8009f26:	b29a      	uxth	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	3b01      	subs	r3, #1
 8009f34:	b29a      	uxth	r2, r3
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	691a      	ldr	r2, [r3, #16]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f4c:	1c5a      	adds	r2, r3, #1
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f56:	3b01      	subs	r3, #1
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	3b01      	subs	r3, #1
 8009f66:	b29a      	uxth	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009f6c:	e04e      	b.n	800a00c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f002 f9d0 	bl	800c318 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d001      	beq.n	8009f82 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e058      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	691a      	ldr	r2, [r3, #16]
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f8c:	b2d2      	uxtb	r2, r2
 8009f8e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009faa:	b29b      	uxth	r3, r3
 8009fac:	3b01      	subs	r3, #1
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	f003 0304 	and.w	r3, r3, #4
 8009fbe:	2b04      	cmp	r3, #4
 8009fc0:	d124      	bne.n	800a00c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d107      	bne.n	8009fda <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fd8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	691a      	ldr	r2, [r3, #16]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe4:	b2d2      	uxtb	r2, r2
 8009fe6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fec:	1c5a      	adds	r2, r3, #1
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a002:	b29b      	uxth	r3, r3
 800a004:	3b01      	subs	r3, #1
 800a006:	b29a      	uxth	r2, r3
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a010:	2b00      	cmp	r3, #0
 800a012:	f47f aeb6 	bne.w	8009d82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2220      	movs	r2, #32
 800a01a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	e000      	b.n	800a034 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a032:	2302      	movs	r3, #2
  }
}
 800a034:	4618      	mov	r0, r3
 800a036:	3728      	adds	r7, #40	@ 0x28
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	00010004 	.word	0x00010004

0800a040 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08c      	sub	sp, #48	@ 0x30
 800a044:	af02      	add	r7, sp, #8
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	4608      	mov	r0, r1
 800a04a:	4611      	mov	r1, r2
 800a04c:	461a      	mov	r2, r3
 800a04e:	4603      	mov	r3, r0
 800a050:	817b      	strh	r3, [r7, #10]
 800a052:	460b      	mov	r3, r1
 800a054:	813b      	strh	r3, [r7, #8]
 800a056:	4613      	mov	r3, r2
 800a058:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a05a:	f7fd fe85 	bl	8007d68 <HAL_GetTick>
 800a05e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b20      	cmp	r3, #32
 800a06e:	f040 8172 	bne.w	800a356 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800a072:	4b93      	ldr	r3, [pc, #588]	@ (800a2c0 <HAL_I2C_Mem_Read_DMA+0x280>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	08db      	lsrs	r3, r3, #3
 800a078:	4a92      	ldr	r2, [pc, #584]	@ (800a2c4 <HAL_I2C_Mem_Read_DMA+0x284>)
 800a07a:	fba2 2303 	umull	r2, r3, r2, r3
 800a07e:	0a1a      	lsrs	r2, r3, #8
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009a      	lsls	r2, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800a08c:	69fb      	ldr	r3, [r7, #28]
 800a08e:	3b01      	subs	r3, #1
 800a090:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800a092:	69fb      	ldr	r3, [r7, #28]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d112      	bne.n	800a0be <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	2200      	movs	r2, #0
 800a09c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b2:	f043 0220 	orr.w	r2, r3, #32
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	e14c      	b.n	800a358 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	699b      	ldr	r3, [r3, #24]
 800a0c4:	f003 0302 	and.w	r3, r3, #2
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d0df      	beq.n	800a08c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d101      	bne.n	800a0da <HAL_I2C_Mem_Read_DMA+0x9a>
 800a0d6:	2302      	movs	r3, #2
 800a0d8:	e13e      	b.n	800a358 <HAL_I2C_Mem_Read_DMA+0x318>
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0301 	and.w	r3, r3, #1
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d007      	beq.n	800a100 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 0201 	orr.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681a      	ldr	r2, [r3, #0]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a10e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2222      	movs	r2, #34	@ 0x22
 800a114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	2240      	movs	r2, #64	@ 0x40
 800a11c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a12a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a130:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a136:	b29a      	uxth	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	4a62      	ldr	r2, [pc, #392]	@ (800a2c8 <HAL_I2C_Mem_Read_DMA+0x288>)
 800a140:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800a142:	897a      	ldrh	r2, [r7, #10]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800a148:	893a      	ldrh	r2, [r7, #8]
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800a14e:	88fa      	ldrh	r2, [r7, #6]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a15e:	2b00      	cmp	r3, #0
 800a160:	f000 80cc 	beq.w	800a2fc <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d02d      	beq.n	800a1c8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a170:	4a56      	ldr	r2, [pc, #344]	@ (800a2cc <HAL_I2C_Mem_Read_DMA+0x28c>)
 800a172:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a178:	4a55      	ldr	r2, [pc, #340]	@ (800a2d0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800a17a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a180:	2200      	movs	r2, #0
 800a182:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a188:	2200      	movs	r2, #0
 800a18a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a190:	2200      	movs	r2, #0
 800a192:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a198:	2200      	movs	r2, #0
 800a19a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3310      	adds	r3, #16
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1b2:	f7fe fc69 	bl	8008a88 <HAL_DMA_Start_IT>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a1bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	f040 8087 	bne.w	800a2d4 <HAL_I2C_Mem_Read_DMA+0x294>
 800a1c6:	e013      	b.n	800a1f0 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2220      	movs	r2, #32
 800a1cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e0b3      	b.n	800a358 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a1f0:	88f8      	ldrh	r0, [r7, #6]
 800a1f2:	893a      	ldrh	r2, [r7, #8]
 800a1f4:	8979      	ldrh	r1, [r7, #10]
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	2323      	movs	r3, #35	@ 0x23
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	4603      	mov	r3, r0
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f001 fc01 	bl	800ba08 <I2C_RequestMemoryRead>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d023      	beq.n	800a254 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe fd01 	bl	8008c18 <HAL_DMA_Abort_IT>
 800a216:	4603      	mov	r3, r0
 800a218:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a220:	2200      	movs	r2, #0
 800a222:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a232:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f022 0201 	bic.w	r2, r2, #1
 800a24e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e081      	b.n	800a358 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d108      	bne.n	800a26e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	681a      	ldr	r2, [r3, #0]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	e007      	b.n	800a27e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	685a      	ldr	r2, [r3, #4]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a27c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a27e:	2300      	movs	r3, #0
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	61bb      	str	r3, [r7, #24]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	699b      	ldr	r3, [r3, #24]
 800a290:	61bb      	str	r3, [r7, #24]
 800a292:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	685a      	ldr	r2, [r3, #4]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a2aa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	685a      	ldr	r2, [r3, #4]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2ba:	605a      	str	r2, [r3, #4]
 800a2bc:	e049      	b.n	800a352 <HAL_I2C_Mem_Read_DMA+0x312>
 800a2be:	bf00      	nop
 800a2c0:	20000038 	.word	0x20000038
 800a2c4:	14f8b589 	.word	0x14f8b589
 800a2c8:	ffff0000 	.word	0xffff0000
 800a2cc:	0800bbd9 	.word	0x0800bbd9
 800a2d0:	0800bd97 	.word	0x0800bd97
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2220      	movs	r2, #32
 800a2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2e8:	f043 0210 	orr.w	r2, r3, #16
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e02d      	b.n	800a358 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a2fc:	88f8      	ldrh	r0, [r7, #6]
 800a2fe:	893a      	ldrh	r2, [r7, #8]
 800a300:	8979      	ldrh	r1, [r7, #10]
 800a302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a304:	9301      	str	r3, [sp, #4]
 800a306:	2323      	movs	r3, #35	@ 0x23
 800a308:	9300      	str	r3, [sp, #0]
 800a30a:	4603      	mov	r3, r0
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f001 fb7b 	bl	800ba08 <I2C_RequestMemoryRead>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e01d      	b.n	800a358 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a31c:	2300      	movs	r3, #0
 800a31e:	617b      	str	r3, [r7, #20]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	617b      	str	r3, [r7, #20]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a340:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2220      	movs	r2, #32
 800a346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	e000      	b.n	800a358 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800a356:	2302      	movs	r3, #2
  }
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3728      	adds	r7, #40	@ 0x28
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800a368:	2300      	movs	r3, #0
 800a36a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a378:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a380:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a388:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a38a:	7bfb      	ldrb	r3, [r7, #15]
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	d003      	beq.n	800a398 <HAL_I2C_EV_IRQHandler+0x38>
 800a390:	7bfb      	ldrb	r3, [r7, #15]
 800a392:	2b40      	cmp	r3, #64	@ 0x40
 800a394:	f040 80b1 	bne.w	800a4fa <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10d      	bne.n	800a3ce <HAL_I2C_EV_IRQHandler+0x6e>
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800a3b8:	d003      	beq.n	800a3c2 <HAL_I2C_EV_IRQHandler+0x62>
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800a3c0:	d101      	bne.n	800a3c6 <HAL_I2C_EV_IRQHandler+0x66>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <HAL_I2C_EV_IRQHandler+0x68>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	f000 8114 	beq.w	800a5f6 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00b      	beq.n	800a3f0 <HAL_I2C_EV_IRQHandler+0x90>
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d006      	beq.n	800a3f0 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f002 f824 	bl	800c430 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 fccd 	bl	800ad88 <I2C_Master_SB>
 800a3ee:	e083      	b.n	800a4f8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	f003 0308 	and.w	r3, r3, #8
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d008      	beq.n	800a40c <HAL_I2C_EV_IRQHandler+0xac>
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a400:	2b00      	cmp	r3, #0
 800a402:	d003      	beq.n	800a40c <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f000 fd45 	bl	800ae94 <I2C_Master_ADD10>
 800a40a:	e075      	b.n	800a4f8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	f003 0302 	and.w	r3, r3, #2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d008      	beq.n	800a428 <HAL_I2C_EV_IRQHandler+0xc8>
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d003      	beq.n	800a428 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 fd61 	bl	800aee8 <I2C_Master_ADDR>
 800a426:	e067      	b.n	800a4f8 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	f003 0304 	and.w	r3, r3, #4
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d036      	beq.n	800a4a0 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a43c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a440:	f000 80db 	beq.w	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00d      	beq.n	800a46a <HAL_I2C_EV_IRQHandler+0x10a>
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <HAL_I2C_EV_IRQHandler+0x10a>
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d103      	bne.n	800a46a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f92d 	bl	800a6c2 <I2C_MasterTransmit_TXE>
 800a468:	e046      	b.n	800a4f8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	f003 0304 	and.w	r3, r3, #4
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 80c2 	beq.w	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 80bc 	beq.w	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	2b21      	cmp	r3, #33	@ 0x21
 800a486:	d103      	bne.n	800a490 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f9b6 	bl	800a7fa <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a48e:	e0b4      	b.n	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800a490:	7bfb      	ldrb	r3, [r7, #15]
 800a492:	2b40      	cmp	r3, #64	@ 0x40
 800a494:	f040 80b1 	bne.w	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 fa24 	bl	800a8e6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a49e:	e0ac      	b.n	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a4aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a4ae:	f000 80a4 	beq.w	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00d      	beq.n	800a4d8 <HAL_I2C_EV_IRQHandler+0x178>
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d008      	beq.n	800a4d8 <HAL_I2C_EV_IRQHandler+0x178>
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d103      	bne.n	800a4d8 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 faa0 	bl	800aa16 <I2C_MasterReceive_RXNE>
 800a4d6:	e00f      	b.n	800a4f8 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a4d8:	69fb      	ldr	r3, [r7, #28]
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 808b 	beq.w	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 8085 	beq.w	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fb58 	bl	800aba6 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a4f6:	e080      	b.n	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
 800a4f8:	e07f      	b.n	800a5fa <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d004      	beq.n	800a50c <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	61fb      	str	r3, [r7, #28]
 800a50a:	e007      	b.n	800a51c <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	695b      	ldr	r3, [r3, #20]
 800a51a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	f003 0302 	and.w	r3, r3, #2
 800a522:	2b00      	cmp	r3, #0
 800a524:	d011      	beq.n	800a54a <HAL_I2C_EV_IRQHandler+0x1ea>
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00c      	beq.n	800a54a <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a540:	69b9      	ldr	r1, [r7, #24]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 ff1f 	bl	800b386 <I2C_Slave_ADDR>
 800a548:	e05a      	b.n	800a600 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	f003 0310 	and.w	r3, r3, #16
 800a550:	2b00      	cmp	r3, #0
 800a552:	d008      	beq.n	800a566 <HAL_I2C_EV_IRQHandler+0x206>
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d003      	beq.n	800a566 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a55e:	6878      	ldr	r0, [r7, #4]
 800a560:	f000 ff5a 	bl	800b418 <I2C_Slave_STOPF>
 800a564:	e04c      	b.n	800a600 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a566:	7bbb      	ldrb	r3, [r7, #14]
 800a568:	2b21      	cmp	r3, #33	@ 0x21
 800a56a:	d002      	beq.n	800a572 <HAL_I2C_EV_IRQHandler+0x212>
 800a56c:	7bbb      	ldrb	r3, [r7, #14]
 800a56e:	2b29      	cmp	r3, #41	@ 0x29
 800a570:	d120      	bne.n	800a5b4 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00d      	beq.n	800a598 <HAL_I2C_EV_IRQHandler+0x238>
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a582:	2b00      	cmp	r3, #0
 800a584:	d008      	beq.n	800a598 <HAL_I2C_EV_IRQHandler+0x238>
 800a586:	69fb      	ldr	r3, [r7, #28]
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d103      	bne.n	800a598 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fe3a 	bl	800b20a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a596:	e032      	b.n	800a5fe <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d02d      	beq.n	800a5fe <HAL_I2C_EV_IRQHandler+0x29e>
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d028      	beq.n	800a5fe <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fe69 	bl	800b284 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a5b2:	e024      	b.n	800a5fe <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00d      	beq.n	800a5da <HAL_I2C_EV_IRQHandler+0x27a>
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <HAL_I2C_EV_IRQHandler+0x27a>
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	f003 0304 	and.w	r3, r3, #4
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d103      	bne.n	800a5da <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 fe77 	bl	800b2c6 <I2C_SlaveReceive_RXNE>
 800a5d8:	e012      	b.n	800a600 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	f003 0304 	and.w	r3, r3, #4
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00d      	beq.n	800a600 <HAL_I2C_EV_IRQHandler+0x2a0>
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d008      	beq.n	800a600 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fea7 	bl	800b342 <I2C_SlaveReceive_BTF>
 800a5f4:	e004      	b.n	800a600 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a5f6:	bf00      	nop
 800a5f8:	e002      	b.n	800a600 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a5fa:	bf00      	nop
 800a5fc:	e000      	b.n	800a600 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a5fe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a600:	3720      	adds	r7, #32
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a606:	b480      	push	{r7}
 800a608:	b083      	sub	sp, #12
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a60e:	bf00      	nop
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a622:	bf00      	nop
 800a624:	370c      	adds	r7, #12
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a62e:	b480      	push	{r7}
 800a630:	b083      	sub	sp, #12
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a636:	bf00      	nop
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a64a:	bf00      	nop
 800a64c:	370c      	adds	r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a654:	4770      	bx	lr

0800a656 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a656:	b480      	push	{r7}
 800a658:	b083      	sub	sp, #12
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	460b      	mov	r3, r1
 800a660:	70fb      	strb	r3, [r7, #3]
 800a662:	4613      	mov	r3, r2
 800a664:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a67a:	bf00      	nop
 800a67c:	370c      	adds	r7, #12
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a686:	b480      	push	{r7}
 800a688:	b083      	sub	sp, #12
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a68e:	bf00      	nop
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr

0800a69a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b083      	sub	sp, #12
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a6a2:	bf00      	nop
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a6b6:	bf00      	nop
 800a6b8:	370c      	adds	r7, #12
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr

0800a6c2 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b084      	sub	sp, #16
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a6d8:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6de:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d150      	bne.n	800a78a <I2C_MasterTransmit_TXE+0xc8>
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ea:	2b21      	cmp	r3, #33	@ 0x21
 800a6ec:	d14d      	bne.n	800a78a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	2b08      	cmp	r3, #8
 800a6f2:	d01d      	beq.n	800a730 <I2C_MasterTransmit_TXE+0x6e>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	2b20      	cmp	r3, #32
 800a6f8:	d01a      	beq.n	800a730 <I2C_MasterTransmit_TXE+0x6e>
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a700:	d016      	beq.n	800a730 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a710:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2211      	movs	r2, #17
 800a716:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	f7ff ff6c 	bl	800a606 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a72e:	e060      	b.n	800a7f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a73e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a74e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2220      	movs	r2, #32
 800a75a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b40      	cmp	r3, #64	@ 0x40
 800a768:	d107      	bne.n	800a77a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	2200      	movs	r2, #0
 800a76e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f7ff ff87 	bl	800a686 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a778:	e03b      	b.n	800a7f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff ff3f 	bl	800a606 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a788:	e033      	b.n	800a7f2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a78a:	7bfb      	ldrb	r3, [r7, #15]
 800a78c:	2b21      	cmp	r3, #33	@ 0x21
 800a78e:	d005      	beq.n	800a79c <I2C_MasterTransmit_TXE+0xda>
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	2b40      	cmp	r3, #64	@ 0x40
 800a794:	d12d      	bne.n	800a7f2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a796:	7bfb      	ldrb	r3, [r7, #15]
 800a798:	2b22      	cmp	r3, #34	@ 0x22
 800a79a:	d12a      	bne.n	800a7f2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d108      	bne.n	800a7b8 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7b4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a7b6:	e01c      	b.n	800a7f2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a7be:	b2db      	uxtb	r3, r3
 800a7c0:	2b40      	cmp	r3, #64	@ 0x40
 800a7c2:	d103      	bne.n	800a7cc <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f88e 	bl	800a8e6 <I2C_MemoryTransmit_TXE_BTF>
}
 800a7ca:	e012      	b.n	800a7f2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d0:	781a      	ldrb	r2, [r3, #0]
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7dc:	1c5a      	adds	r2, r3, #1
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	3b01      	subs	r3, #1
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a7f0:	e7ff      	b.n	800a7f2 <I2C_MasterTransmit_TXE+0x130>
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}

0800a7fa <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a7fa:	b580      	push	{r7, lr}
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a806:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	2b21      	cmp	r3, #33	@ 0x21
 800a812:	d164      	bne.n	800a8de <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a818:	b29b      	uxth	r3, r3
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d012      	beq.n	800a844 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a822:	781a      	ldrb	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a838:	b29b      	uxth	r3, r3
 800a83a:	3b01      	subs	r3, #1
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a842:	e04c      	b.n	800a8de <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b08      	cmp	r3, #8
 800a848:	d01d      	beq.n	800a886 <I2C_MasterTransmit_BTF+0x8c>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	2b20      	cmp	r3, #32
 800a84e:	d01a      	beq.n	800a886 <I2C_MasterTransmit_BTF+0x8c>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800a856:	d016      	beq.n	800a886 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	685a      	ldr	r2, [r3, #4]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a866:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2211      	movs	r2, #17
 800a86c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2220      	movs	r2, #32
 800a87a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff fec1 	bl	800a606 <HAL_I2C_MasterTxCpltCallback>
}
 800a884:	e02b      	b.n	800a8de <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a894:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a8a4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2220      	movs	r2, #32
 800a8b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a8ba:	b2db      	uxtb	r3, r3
 800a8bc:	2b40      	cmp	r3, #64	@ 0x40
 800a8be:	d107      	bne.n	800a8d0 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f7ff fedc 	bl	800a686 <HAL_I2C_MemTxCpltCallback>
}
 800a8ce:	e006      	b.n	800a8de <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff fe94 	bl	800a606 <HAL_I2C_MasterTxCpltCallback>
}
 800a8de:	bf00      	nop
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a8f4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d11d      	bne.n	800a93a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a902:	2b01      	cmp	r3, #1
 800a904:	d10b      	bne.n	800a91e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a90a:	b2da      	uxtb	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a916:	1c9a      	adds	r2, r3, #2
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800a91c:	e077      	b.n	800aa0e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a922:	b29b      	uxth	r3, r3
 800a924:	121b      	asrs	r3, r3, #8
 800a926:	b2da      	uxtb	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a932:	1c5a      	adds	r2, r3, #1
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a938:	e069      	b.n	800aa0e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d10b      	bne.n	800a95a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a946:	b2da      	uxtb	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a952:	1c5a      	adds	r2, r3, #1
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a958:	e059      	b.n	800aa0e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d152      	bne.n	800aa08 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	2b22      	cmp	r3, #34	@ 0x22
 800a966:	d10d      	bne.n	800a984 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a976:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a97c:	1c5a      	adds	r2, r3, #1
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a982:	e044      	b.n	800aa0e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a988:	b29b      	uxth	r3, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d015      	beq.n	800a9ba <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	2b21      	cmp	r3, #33	@ 0x21
 800a992:	d112      	bne.n	800a9ba <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a998:	781a      	ldrb	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	b29a      	uxth	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800a9b8:	e029      	b.n	800aa0e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d124      	bne.n	800aa0e <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a9c4:	7bfb      	ldrb	r3, [r7, #15]
 800a9c6:	2b21      	cmp	r3, #33	@ 0x21
 800a9c8:	d121      	bne.n	800aa0e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a9d8:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	681a      	ldr	r2, [r3, #0]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a9e8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2220      	movs	r2, #32
 800a9f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f7ff fe40 	bl	800a686 <HAL_I2C_MemTxCpltCallback>
}
 800aa06:	e002      	b.n	800aa0e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7fe ffd8 	bl	80099be <I2C_Flush_DR>
}
 800aa0e:	bf00      	nop
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b084      	sub	sp, #16
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b22      	cmp	r3, #34	@ 0x22
 800aa28:	f040 80b9 	bne.w	800ab9e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa30:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b03      	cmp	r3, #3
 800aa3e:	d921      	bls.n	800aa84 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	691a      	ldr	r2, [r3, #16]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa4a:	b2d2      	uxtb	r2, r2
 800aa4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	f040 8096 	bne.w	800ab9e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685a      	ldr	r2, [r3, #4]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa80:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800aa82:	e08c      	b.n	800ab9e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d07f      	beq.n	800ab8c <I2C_MasterReceive_RXNE+0x176>
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d002      	beq.n	800aa98 <I2C_MasterReceive_RXNE+0x82>
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d179      	bne.n	800ab8c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f001 fc0b 	bl	800c2b4 <I2C_WaitOnSTOPRequestThroughIT>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d14c      	bne.n	800ab3e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aab2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	685a      	ldr	r2, [r3, #4]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800aac2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691a      	ldr	r2, [r3, #16]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aace:	b2d2      	uxtb	r2, r2
 800aad0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad6:	1c5a      	adds	r2, r3, #1
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aae0:	b29b      	uxth	r3, r3
 800aae2:	3b01      	subs	r3, #1
 800aae4:	b29a      	uxth	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2220      	movs	r2, #32
 800aaee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aaf8:	b2db      	uxtb	r3, r3
 800aafa:	2b40      	cmp	r3, #64	@ 0x40
 800aafc:	d10a      	bne.n	800ab14 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f7fa ff3b 	bl	8005988 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ab12:	e044      	b.n	800ab9e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2b08      	cmp	r3, #8
 800ab20:	d002      	beq.n	800ab28 <I2C_MasterReceive_RXNE+0x112>
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b20      	cmp	r3, #32
 800ab26:	d103      	bne.n	800ab30 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	631a      	str	r2, [r3, #48]	@ 0x30
 800ab2e:	e002      	b.n	800ab36 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2212      	movs	r2, #18
 800ab34:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7ff fd6f 	bl	800a61a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ab3c:	e02f      	b.n	800ab9e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	685a      	ldr	r2, [r3, #4]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800ab4c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	691a      	ldr	r2, [r3, #16]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab58:	b2d2      	uxtb	r2, r2
 800ab5a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	1c5a      	adds	r2, r3, #1
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2220      	movs	r2, #32
 800ab78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff fd88 	bl	800a69a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800ab8a:	e008      	b.n	800ab9e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685a      	ldr	r2, [r3, #4]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab9a:	605a      	str	r2, [r3, #4]
}
 800ab9c:	e7ff      	b.n	800ab9e <I2C_MasterReceive_RXNE+0x188>
 800ab9e:	bf00      	nop
 800aba0:	3710      	adds	r7, #16
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b084      	sub	sp, #16
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb2:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abb8:	b29b      	uxth	r3, r3
 800abba:	2b04      	cmp	r3, #4
 800abbc:	d11b      	bne.n	800abf6 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685a      	ldr	r2, [r3, #4]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abcc:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	691a      	ldr	r2, [r3, #16]
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abd8:	b2d2      	uxtb	r2, r2
 800abda:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe0:	1c5a      	adds	r2, r3, #1
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abea:	b29b      	uxth	r3, r3
 800abec:	3b01      	subs	r3, #1
 800abee:	b29a      	uxth	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800abf4:	e0c4      	b.n	800ad80 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	2b03      	cmp	r3, #3
 800abfe:	d129      	bne.n	800ac54 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	685a      	ldr	r2, [r3, #4]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac0e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d00a      	beq.n	800ac2c <I2C_MasterReceive_BTF+0x86>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2b02      	cmp	r3, #2
 800ac1a:	d007      	beq.n	800ac2c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac2a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	691a      	ldr	r2, [r3, #16]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac36:	b2d2      	uxtb	r2, r2
 800ac38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac3e:	1c5a      	adds	r2, r3, #1
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	3b01      	subs	r3, #1
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ac52:	e095      	b.n	800ad80 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	2b02      	cmp	r3, #2
 800ac5c:	d17d      	bne.n	800ad5a <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d002      	beq.n	800ac6a <I2C_MasterReceive_BTF+0xc4>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b10      	cmp	r3, #16
 800ac68:	d108      	bne.n	800ac7c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac78:	601a      	str	r2, [r3, #0]
 800ac7a:	e016      	b.n	800acaa <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2b04      	cmp	r3, #4
 800ac80:	d002      	beq.n	800ac88 <I2C_MasterReceive_BTF+0xe2>
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d108      	bne.n	800ac9a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	681a      	ldr	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ac96:	601a      	str	r2, [r3, #0]
 800ac98:	e007      	b.n	800acaa <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aca8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	691a      	ldr	r2, [r3, #16]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb4:	b2d2      	uxtb	r2, r2
 800acb6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acbc:	1c5a      	adds	r2, r3, #1
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	3b01      	subs	r3, #1
 800acca:	b29a      	uxth	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	b2d2      	uxtb	r2, r2
 800acdc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace2:	1c5a      	adds	r2, r3, #1
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acec:	b29b      	uxth	r3, r3
 800acee:	3b01      	subs	r3, #1
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	685a      	ldr	r2, [r3, #4]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800ad04:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2220      	movs	r2, #32
 800ad0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	2b40      	cmp	r3, #64	@ 0x40
 800ad18:	d10a      	bne.n	800ad30 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7fa fe2d 	bl	8005988 <HAL_I2C_MemRxCpltCallback>
}
 800ad2e:	e027      	b.n	800ad80 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b08      	cmp	r3, #8
 800ad3c:	d002      	beq.n	800ad44 <I2C_MasterReceive_BTF+0x19e>
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d103      	bne.n	800ad4c <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad4a:	e002      	b.n	800ad52 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2212      	movs	r2, #18
 800ad50:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff fc61 	bl	800a61a <HAL_I2C_MasterRxCpltCallback>
}
 800ad58:	e012      	b.n	800ad80 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	691a      	ldr	r2, [r3, #16]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad64:	b2d2      	uxtb	r2, r2
 800ad66:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad6c:	1c5a      	adds	r2, r3, #1
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	3b01      	subs	r3, #1
 800ad7a:	b29a      	uxth	r2, r3
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	2b40      	cmp	r3, #64	@ 0x40
 800ad9a:	d117      	bne.n	800adcc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d109      	bne.n	800adb8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	461a      	mov	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800adb4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800adb6:	e067      	b.n	800ae88 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	f043 0301 	orr.w	r3, r3, #1
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	611a      	str	r2, [r3, #16]
}
 800adca:	e05d      	b.n	800ae88 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	691b      	ldr	r3, [r3, #16]
 800add0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800add4:	d133      	bne.n	800ae3e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b21      	cmp	r3, #33	@ 0x21
 800ade0:	d109      	bne.n	800adf6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ade6:	b2db      	uxtb	r3, r3
 800ade8:	461a      	mov	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800adf2:	611a      	str	r2, [r3, #16]
 800adf4:	e008      	b.n	800ae08 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	f043 0301 	orr.w	r3, r3, #1
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d004      	beq.n	800ae1a <I2C_Master_SB+0x92>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d108      	bne.n	800ae2c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d032      	beq.n	800ae88 <I2C_Master_SB+0x100>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d02d      	beq.n	800ae88 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685a      	ldr	r2, [r3, #4]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae3a:	605a      	str	r2, [r3, #4]
}
 800ae3c:	e024      	b.n	800ae88 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10e      	bne.n	800ae64 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	11db      	asrs	r3, r3, #7
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	f003 0306 	and.w	r3, r3, #6
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	f063 030f 	orn	r3, r3, #15
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	611a      	str	r2, [r3, #16]
}
 800ae62:	e011      	b.n	800ae88 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d10d      	bne.n	800ae88 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	11db      	asrs	r3, r3, #7
 800ae74:	b2db      	uxtb	r3, r3
 800ae76:	f003 0306 	and.w	r3, r3, #6
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f063 030e 	orn	r3, r3, #14
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	611a      	str	r2, [r3, #16]
}
 800ae88:	bf00      	nop
 800ae8a:	370c      	adds	r7, #12
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr

0800ae94 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b083      	sub	sp, #12
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d004      	beq.n	800aeba <I2C_Master_ADD10+0x26>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d108      	bne.n	800aecc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d00c      	beq.n	800aedc <I2C_Master_ADD10+0x48>
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d007      	beq.n	800aedc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	685a      	ldr	r2, [r3, #4]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aeda:	605a      	str	r2, [r3, #4]
  }
}
 800aedc:	bf00      	nop
 800aede:	370c      	adds	r7, #12
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800aee8:	b480      	push	{r7}
 800aeea:	b091      	sub	sp, #68	@ 0x44
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aef6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefe:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af04:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	2b22      	cmp	r3, #34	@ 0x22
 800af10:	f040 8169 	bne.w	800b1e6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d10f      	bne.n	800af3c <I2C_Master_ADDR+0x54>
 800af1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800af20:	2b40      	cmp	r3, #64	@ 0x40
 800af22:	d10b      	bne.n	800af3c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af24:	2300      	movs	r3, #0
 800af26:	633b      	str	r3, [r7, #48]	@ 0x30
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	633b      	str	r3, [r7, #48]	@ 0x30
 800af38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3a:	e160      	b.n	800b1fe <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af40:	2b00      	cmp	r3, #0
 800af42:	d11d      	bne.n	800af80 <I2C_Master_ADDR+0x98>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800af4c:	d118      	bne.n	800af80 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af4e:	2300      	movs	r3, #0
 800af50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	695b      	ldr	r3, [r3, #20]
 800af58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af72:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	651a      	str	r2, [r3, #80]	@ 0x50
 800af7e:	e13e      	b.n	800b1fe <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af84:	b29b      	uxth	r3, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d113      	bne.n	800afb2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af8a:	2300      	movs	r3, #0
 800af8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	695b      	ldr	r3, [r3, #20]
 800af94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	699b      	ldr	r3, [r3, #24]
 800af9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	e115      	b.n	800b1de <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	f040 808a 	bne.w	800b0d2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800afbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800afc4:	d137      	bne.n	800b036 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afd4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	685b      	ldr	r3, [r3, #4]
 800afdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800afe4:	d113      	bne.n	800b00e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aff4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aff6:	2300      	movs	r3, #0
 800aff8:	627b      	str	r3, [r7, #36]	@ 0x24
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	627b      	str	r3, [r7, #36]	@ 0x24
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	627b      	str	r3, [r7, #36]	@ 0x24
 800b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00c:	e0e7      	b.n	800b1de <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b00e:	2300      	movs	r3, #0
 800b010:	623b      	str	r3, [r7, #32]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	695b      	ldr	r3, [r3, #20]
 800b018:	623b      	str	r3, [r7, #32]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	699b      	ldr	r3, [r3, #24]
 800b020:	623b      	str	r3, [r7, #32]
 800b022:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	681a      	ldr	r2, [r3, #0]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b032:	601a      	str	r2, [r3, #0]
 800b034:	e0d3      	b.n	800b1de <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800b036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b038:	2b08      	cmp	r3, #8
 800b03a:	d02e      	beq.n	800b09a <I2C_Master_ADDR+0x1b2>
 800b03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b03e:	2b20      	cmp	r3, #32
 800b040:	d02b      	beq.n	800b09a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800b042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b044:	2b12      	cmp	r3, #18
 800b046:	d102      	bne.n	800b04e <I2C_Master_ADDR+0x166>
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d125      	bne.n	800b09a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b050:	2b04      	cmp	r3, #4
 800b052:	d00e      	beq.n	800b072 <I2C_Master_ADDR+0x18a>
 800b054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b056:	2b02      	cmp	r3, #2
 800b058:	d00b      	beq.n	800b072 <I2C_Master_ADDR+0x18a>
 800b05a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05c:	2b10      	cmp	r3, #16
 800b05e:	d008      	beq.n	800b072 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	681a      	ldr	r2, [r3, #0]
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	e007      	b.n	800b082 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681a      	ldr	r2, [r3, #0]
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b080:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b082:	2300      	movs	r3, #0
 800b084:	61fb      	str	r3, [r7, #28]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	695b      	ldr	r3, [r3, #20]
 800b08c:	61fb      	str	r3, [r7, #28]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	61fb      	str	r3, [r7, #28]
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	e0a1      	b.n	800b1de <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	681a      	ldr	r2, [r3, #0]
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0a8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	61bb      	str	r3, [r7, #24]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	61bb      	str	r3, [r7, #24]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0ce:	601a      	str	r2, [r3, #0]
 800b0d0:	e085      	b.n	800b1de <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d14d      	bne.n	800b178 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	2b04      	cmp	r3, #4
 800b0e0:	d016      	beq.n	800b110 <I2C_Master_ADDR+0x228>
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e4:	2b02      	cmp	r3, #2
 800b0e6:	d013      	beq.n	800b110 <I2C_Master_ADDR+0x228>
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ea:	2b10      	cmp	r3, #16
 800b0ec:	d010      	beq.n	800b110 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0fc:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681a      	ldr	r2, [r3, #0]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	e007      	b.n	800b120 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b11e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b12a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b12e:	d117      	bne.n	800b160 <I2C_Master_ADDR+0x278>
 800b130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b132:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b136:	d00b      	beq.n	800b150 <I2C_Master_ADDR+0x268>
 800b138:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d008      	beq.n	800b150 <I2C_Master_ADDR+0x268>
 800b13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b140:	2b08      	cmp	r3, #8
 800b142:	d005      	beq.n	800b150 <I2C_Master_ADDR+0x268>
 800b144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b146:	2b10      	cmp	r3, #16
 800b148:	d002      	beq.n	800b150 <I2C_Master_ADDR+0x268>
 800b14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b14c:	2b20      	cmp	r3, #32
 800b14e:	d107      	bne.n	800b160 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b15e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	e032      	b.n	800b1de <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b186:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b196:	d117      	bne.n	800b1c8 <I2C_Master_ADDR+0x2e0>
 800b198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b19a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b19e:	d00b      	beq.n	800b1b8 <I2C_Master_ADDR+0x2d0>
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d008      	beq.n	800b1b8 <I2C_Master_ADDR+0x2d0>
 800b1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1a8:	2b08      	cmp	r3, #8
 800b1aa:	d005      	beq.n	800b1b8 <I2C_Master_ADDR+0x2d0>
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ae:	2b10      	cmp	r3, #16
 800b1b0:	d002      	beq.n	800b1b8 <I2C_Master_ADDR+0x2d0>
 800b1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1b4:	2b20      	cmp	r3, #32
 800b1b6:	d107      	bne.n	800b1c8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b1c6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	613b      	str	r3, [r7, #16]
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	613b      	str	r3, [r7, #16]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	613b      	str	r3, [r7, #16]
 800b1dc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800b1e4:	e00b      	b.n	800b1fe <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	60fb      	str	r3, [r7, #12]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	695b      	ldr	r3, [r3, #20]
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	60fb      	str	r3, [r7, #12]
 800b1fa:	68fb      	ldr	r3, [r7, #12]
}
 800b1fc:	e7ff      	b.n	800b1fe <I2C_Master_ADDR+0x316>
 800b1fe:	bf00      	nop
 800b200:	3744      	adds	r7, #68	@ 0x44
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr

0800b20a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b218:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d02b      	beq.n	800b27c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b228:	781a      	ldrb	r2, [r3, #0]
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b23e:	b29b      	uxth	r3, r3
 800b240:	3b01      	subs	r3, #1
 800b242:	b29a      	uxth	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d114      	bne.n	800b27c <I2C_SlaveTransmit_TXE+0x72>
 800b252:	7bfb      	ldrb	r3, [r7, #15]
 800b254:	2b29      	cmp	r3, #41	@ 0x29
 800b256:	d111      	bne.n	800b27c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	685a      	ldr	r2, [r3, #4]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b266:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2221      	movs	r2, #33	@ 0x21
 800b26c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2228      	movs	r2, #40	@ 0x28
 800b272:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff f9d9 	bl	800a62e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b290:	b29b      	uxth	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d011      	beq.n	800b2ba <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a6:	1c5a      	adds	r2, r3, #1
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2b0:	b29b      	uxth	r3, r3
 800b2b2:	3b01      	subs	r3, #1
 800b2b4:	b29a      	uxth	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b084      	sub	sp, #16
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2d4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d02c      	beq.n	800b33a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	691a      	ldr	r2, [r3, #16]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f2:	1c5a      	adds	r2, r3, #1
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	3b01      	subs	r3, #1
 800b300:	b29a      	uxth	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d114      	bne.n	800b33a <I2C_SlaveReceive_RXNE+0x74>
 800b310:	7bfb      	ldrb	r3, [r7, #15]
 800b312:	2b2a      	cmp	r3, #42	@ 0x2a
 800b314:	d111      	bne.n	800b33a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b324:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	2222      	movs	r2, #34	@ 0x22
 800b32a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2228      	movs	r2, #40	@ 0x28
 800b330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f7ff f984 	bl	800a642 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800b33a:	bf00      	nop
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}

0800b342 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800b342:	b480      	push	{r7}
 800b344:	b083      	sub	sp, #12
 800b346:	af00      	add	r7, sp, #0
 800b348:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b34e:	b29b      	uxth	r3, r3
 800b350:	2b00      	cmp	r3, #0
 800b352:	d012      	beq.n	800b37a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	691a      	ldr	r2, [r3, #16]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b35e:	b2d2      	uxtb	r2, r2
 800b360:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b366:	1c5a      	adds	r2, r3, #1
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b370:	b29b      	uxth	r3, r3
 800b372:	3b01      	subs	r3, #1
 800b374:	b29a      	uxth	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800b386:	b580      	push	{r7, lr}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
 800b38e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800b390:	2300      	movs	r3, #0
 800b392:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b3a0:	2b28      	cmp	r3, #40	@ 0x28
 800b3a2:	d125      	bne.n	800b3f0 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	685a      	ldr	r2, [r3, #4]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b3b2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d101      	bne.n	800b3c2 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d103      	bne.n	800b3d4 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	81bb      	strh	r3, [r7, #12]
 800b3d2:	e002      	b.n	800b3da <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	699b      	ldr	r3, [r3, #24]
 800b3d8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2200      	movs	r2, #0
 800b3de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b3e2:	89ba      	ldrh	r2, [r7, #12]
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff f934 	bl	800a656 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b3ee:	e00e      	b.n	800b40e <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	60bb      	str	r3, [r7, #8]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	695b      	ldr	r3, [r3, #20]
 800b3fa:	60bb      	str	r3, [r7, #8]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	60bb      	str	r3, [r7, #8]
 800b404:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800b40e:	bf00      	nop
 800b410:	3710      	adds	r7, #16
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}
	...

0800b418 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b426:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b436:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b438:	2300      	movs	r3, #0
 800b43a:	60bb      	str	r3, [r7, #8]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	60bb      	str	r3, [r7, #8]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f042 0201 	orr.w	r2, r2, #1
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	681a      	ldr	r2, [r3, #0]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b464:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	685b      	ldr	r3, [r3, #4]
 800b46c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b474:	d172      	bne.n	800b55c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b476:	7bfb      	ldrb	r3, [r7, #15]
 800b478:	2b22      	cmp	r3, #34	@ 0x22
 800b47a:	d002      	beq.n	800b482 <I2C_Slave_STOPF+0x6a>
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
 800b47e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b480:	d135      	bne.n	800b4ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	b29a      	uxth	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b494:	b29b      	uxth	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	d005      	beq.n	800b4a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b49e:	f043 0204 	orr.w	r2, r3, #4
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b4b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f7fd fd58 	bl	8008f70 <HAL_DMA_GetState>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d049      	beq.n	800b55a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4ca:	4a69      	ldr	r2, [pc, #420]	@ (800b670 <I2C_Slave_STOPF+0x258>)
 800b4cc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7fd fba0 	bl	8008c18 <HAL_DMA_Abort_IT>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d03d      	beq.n	800b55a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b4ec:	e035      	b.n	800b55a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b500:	b29b      	uxth	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d005      	beq.n	800b512 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b50a:	f043 0204 	orr.w	r2, r3, #4
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b520:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b526:	4618      	mov	r0, r3
 800b528:	f7fd fd22 	bl	8008f70 <HAL_DMA_GetState>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d014      	beq.n	800b55c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b536:	4a4e      	ldr	r2, [pc, #312]	@ (800b670 <I2C_Slave_STOPF+0x258>)
 800b538:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fd fb6a 	bl	8008c18 <HAL_DMA_Abort_IT>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d008      	beq.n	800b55c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b54e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b554:	4610      	mov	r0, r2
 800b556:	4798      	blx	r3
 800b558:	e000      	b.n	800b55c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b55a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b560:	b29b      	uxth	r3, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d03e      	beq.n	800b5e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	695b      	ldr	r3, [r3, #20]
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b04      	cmp	r3, #4
 800b572:	d112      	bne.n	800b59a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	691a      	ldr	r2, [r3, #16]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b57e:	b2d2      	uxtb	r2, r2
 800b580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b586:	1c5a      	adds	r2, r3, #1
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b590:	b29b      	uxth	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	b29a      	uxth	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5a4:	2b40      	cmp	r3, #64	@ 0x40
 800b5a6:	d112      	bne.n	800b5ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	691a      	ldr	r2, [r3, #16]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b2:	b2d2      	uxtb	r2, r2
 800b5b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	b29a      	uxth	r2, r3
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d005      	beq.n	800b5e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5dc:	f043 0204 	orr.w	r2, r3, #4
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d003      	beq.n	800b5f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f843 	bl	800b678 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b5f2:	e039      	b.n	800b668 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5f8:	d109      	bne.n	800b60e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2228      	movs	r2, #40	@ 0x28
 800b604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f7ff f81a 	bl	800a642 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b614:	b2db      	uxtb	r3, r3
 800b616:	2b28      	cmp	r3, #40	@ 0x28
 800b618:	d111      	bne.n	800b63e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a15      	ldr	r2, [pc, #84]	@ (800b674 <I2C_Slave_STOPF+0x25c>)
 800b61e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2220      	movs	r2, #32
 800b62a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f7ff f81b 	bl	800a672 <HAL_I2C_ListenCpltCallback>
}
 800b63c:	e014      	b.n	800b668 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b642:	2b22      	cmp	r3, #34	@ 0x22
 800b644:	d002      	beq.n	800b64c <I2C_Slave_STOPF+0x234>
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	2b22      	cmp	r3, #34	@ 0x22
 800b64a:	d10d      	bne.n	800b668 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2220      	movs	r2, #32
 800b656:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f7fe ffed 	bl	800a642 <HAL_I2C_SlaveRxCpltCallback>
}
 800b668:	bf00      	nop
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	0800be11 	.word	0x0800be11
 800b674:	ffff0000 	.word	0xffff0000

0800b678 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b084      	sub	sp, #16
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b686:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b68e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b690:	7bbb      	ldrb	r3, [r7, #14]
 800b692:	2b10      	cmp	r3, #16
 800b694:	d002      	beq.n	800b69c <I2C_ITError+0x24>
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	2b40      	cmp	r3, #64	@ 0x40
 800b69a:	d10a      	bne.n	800b6b2 <I2C_ITError+0x3a>
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
 800b69e:	2b22      	cmp	r3, #34	@ 0x22
 800b6a0:	d107      	bne.n	800b6b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b6b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
 800b6b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800b6b8:	2b28      	cmp	r3, #40	@ 0x28
 800b6ba:	d107      	bne.n	800b6cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2228      	movs	r2, #40	@ 0x28
 800b6c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800b6ca:	e015      	b.n	800b6f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	685b      	ldr	r3, [r3, #4]
 800b6d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6da:	d00a      	beq.n	800b6f2 <I2C_ITError+0x7a>
 800b6dc:	7bfb      	ldrb	r3, [r7, #15]
 800b6de:	2b60      	cmp	r3, #96	@ 0x60
 800b6e0:	d007      	beq.n	800b6f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2220      	movs	r2, #32
 800b6e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b706:	d162      	bne.n	800b7ce <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	685a      	ldr	r2, [r3, #4]
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b716:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b71c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b01      	cmp	r3, #1
 800b724:	d020      	beq.n	800b768 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b72a:	4a6a      	ldr	r2, [pc, #424]	@ (800b8d4 <I2C_ITError+0x25c>)
 800b72c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b732:	4618      	mov	r0, r3
 800b734:	f7fd fa70 	bl	8008c18 <HAL_DMA_Abort_IT>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 8089 	beq.w	800b852 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f022 0201 	bic.w	r2, r2, #1
 800b74e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2220      	movs	r2, #32
 800b754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b75c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b762:	4610      	mov	r0, r2
 800b764:	4798      	blx	r3
 800b766:	e074      	b.n	800b852 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b76c:	4a59      	ldr	r2, [pc, #356]	@ (800b8d4 <I2C_ITError+0x25c>)
 800b76e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b774:	4618      	mov	r0, r3
 800b776:	f7fd fa4f 	bl	8008c18 <HAL_DMA_Abort_IT>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d068      	beq.n	800b852 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	695b      	ldr	r3, [r3, #20]
 800b786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b78a:	2b40      	cmp	r3, #64	@ 0x40
 800b78c:	d10b      	bne.n	800b7a6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	691a      	ldr	r2, [r3, #16]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f022 0201 	bic.w	r2, r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2220      	movs	r2, #32
 800b7ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b7c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7c4:	687a      	ldr	r2, [r7, #4]
 800b7c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b7c8:	4610      	mov	r0, r2
 800b7ca:	4798      	blx	r3
 800b7cc:	e041      	b.n	800b852 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	2b60      	cmp	r3, #96	@ 0x60
 800b7d8:	d125      	bne.n	800b826 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2220      	movs	r2, #32
 800b7de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	695b      	ldr	r3, [r3, #20]
 800b7ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7f2:	2b40      	cmp	r3, #64	@ 0x40
 800b7f4:	d10b      	bne.n	800b80e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	691a      	ldr	r2, [r3, #16]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b800:	b2d2      	uxtb	r2, r2
 800b802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b808:	1c5a      	adds	r2, r3, #1
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f022 0201 	bic.w	r2, r2, #1
 800b81c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f7fe ff45 	bl	800a6ae <HAL_I2C_AbortCpltCallback>
 800b824:	e015      	b.n	800b852 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b830:	2b40      	cmp	r3, #64	@ 0x40
 800b832:	d10b      	bne.n	800b84c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	691a      	ldr	r2, [r3, #16]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b83e:	b2d2      	uxtb	r2, r2
 800b840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b846:	1c5a      	adds	r2, r3, #1
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f7fe ff24 	bl	800a69a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b856:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	f003 0301 	and.w	r3, r3, #1
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d10e      	bne.n	800b880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d109      	bne.n	800b880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b872:	2b00      	cmp	r3, #0
 800b874:	d104      	bne.n	800b880 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d007      	beq.n	800b890 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	685a      	ldr	r2, [r3, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b88e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b896:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b04      	cmp	r3, #4
 800b8a2:	d113      	bne.n	800b8cc <I2C_ITError+0x254>
 800b8a4:	7bfb      	ldrb	r3, [r7, #15]
 800b8a6:	2b28      	cmp	r3, #40	@ 0x28
 800b8a8:	d110      	bne.n	800b8cc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	4a0a      	ldr	r2, [pc, #40]	@ (800b8d8 <I2C_ITError+0x260>)
 800b8ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7fe fed3 	bl	800a672 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b8cc:	bf00      	nop
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	0800be11 	.word	0x0800be11
 800b8d8:	ffff0000 	.word	0xffff0000

0800b8dc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b088      	sub	sp, #32
 800b8e0:	af02      	add	r7, sp, #8
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	4611      	mov	r1, r2
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4603      	mov	r3, r0
 800b8ec:	817b      	strh	r3, [r7, #10]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	813b      	strh	r3, [r7, #8]
 800b8f2:	4613      	mov	r3, r2
 800b8f4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	6a3b      	ldr	r3, [r7, #32]
 800b90c:	2200      	movs	r2, #0
 800b90e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	f000 fb24 	bl	800bf60 <I2C_WaitOnFlagUntilTimeout>
 800b918:	4603      	mov	r3, r0
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00d      	beq.n	800b93a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b92c:	d103      	bne.n	800b936 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b934:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e05f      	b.n	800b9fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b93a:	897b      	ldrh	r3, [r7, #10]
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	461a      	mov	r2, r3
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b948:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94c:	6a3a      	ldr	r2, [r7, #32]
 800b94e:	492d      	ldr	r1, [pc, #180]	@ (800ba04 <I2C_RequestMemoryWrite+0x128>)
 800b950:	68f8      	ldr	r0, [r7, #12]
 800b952:	f000 fb7f 	bl	800c054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e04c      	b.n	800b9fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b960:	2300      	movs	r3, #0
 800b962:	617b      	str	r3, [r7, #20]
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	617b      	str	r3, [r7, #20]
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	699b      	ldr	r3, [r3, #24]
 800b972:	617b      	str	r3, [r7, #20]
 800b974:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b978:	6a39      	ldr	r1, [r7, #32]
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 fc0a 	bl	800c194 <I2C_WaitOnTXEFlagUntilTimeout>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00d      	beq.n	800b9a2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	d107      	bne.n	800b99e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b99c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e02b      	b.n	800b9fa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b9a2:	88fb      	ldrh	r3, [r7, #6]
 800b9a4:	2b01      	cmp	r3, #1
 800b9a6:	d105      	bne.n	800b9b4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b9a8:	893b      	ldrh	r3, [r7, #8]
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	611a      	str	r2, [r3, #16]
 800b9b2:	e021      	b.n	800b9f8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b9b4:	893b      	ldrh	r3, [r7, #8]
 800b9b6:	0a1b      	lsrs	r3, r3, #8
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9c4:	6a39      	ldr	r1, [r7, #32]
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f000 fbe4 	bl	800c194 <I2C_WaitOnTXEFlagUntilTimeout>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d00d      	beq.n	800b9ee <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d6:	2b04      	cmp	r3, #4
 800b9d8:	d107      	bne.n	800b9ea <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b9e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b9ea:	2301      	movs	r3, #1
 800b9ec:	e005      	b.n	800b9fa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b9ee:	893b      	ldrh	r3, [r7, #8]
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b9f8:	2300      	movs	r3, #0
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3718      	adds	r7, #24
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	bd80      	pop	{r7, pc}
 800ba02:	bf00      	nop
 800ba04:	00010002 	.word	0x00010002

0800ba08 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af02      	add	r7, sp, #8
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	4608      	mov	r0, r1
 800ba12:	4611      	mov	r1, r2
 800ba14:	461a      	mov	r2, r3
 800ba16:	4603      	mov	r3, r0
 800ba18:	817b      	strh	r3, [r7, #10]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	813b      	strh	r3, [r7, #8]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ba30:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ba42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	6a3b      	ldr	r3, [r7, #32]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ba4e:	68f8      	ldr	r0, [r7, #12]
 800ba50:	f000 fa86 	bl	800bf60 <I2C_WaitOnFlagUntilTimeout>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00d      	beq.n	800ba76 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba68:	d103      	bne.n	800ba72 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ba72:	2303      	movs	r3, #3
 800ba74:	e0aa      	b.n	800bbcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ba76:	897b      	ldrh	r3, [r7, #10]
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ba84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ba86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba88:	6a3a      	ldr	r2, [r7, #32]
 800ba8a:	4952      	ldr	r1, [pc, #328]	@ (800bbd4 <I2C_RequestMemoryRead+0x1cc>)
 800ba8c:	68f8      	ldr	r0, [r7, #12]
 800ba8e:	f000 fae1 	bl	800c054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ba92:	4603      	mov	r3, r0
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d001      	beq.n	800ba9c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e097      	b.n	800bbcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	617b      	str	r3, [r7, #20]
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	695b      	ldr	r3, [r3, #20]
 800baa6:	617b      	str	r3, [r7, #20]
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	617b      	str	r3, [r7, #20]
 800bab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bab4:	6a39      	ldr	r1, [r7, #32]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	f000 fb6c 	bl	800c194 <I2C_WaitOnTXEFlagUntilTimeout>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00d      	beq.n	800bade <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac6:	2b04      	cmp	r3, #4
 800bac8:	d107      	bne.n	800bada <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	e076      	b.n	800bbcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bade:	88fb      	ldrh	r3, [r7, #6]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d105      	bne.n	800baf0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bae4:	893b      	ldrh	r3, [r7, #8]
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	611a      	str	r2, [r3, #16]
 800baee:	e021      	b.n	800bb34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800baf0:	893b      	ldrh	r3, [r7, #8]
 800baf2:	0a1b      	lsrs	r3, r3, #8
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bafe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb00:	6a39      	ldr	r1, [r7, #32]
 800bb02:	68f8      	ldr	r0, [r7, #12]
 800bb04:	f000 fb46 	bl	800c194 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00d      	beq.n	800bb2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb12:	2b04      	cmp	r3, #4
 800bb14:	d107      	bne.n	800bb26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	e050      	b.n	800bbcc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bb2a:	893b      	ldrh	r3, [r7, #8]
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bb36:	6a39      	ldr	r1, [r7, #32]
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f000 fb2b 	bl	800c194 <I2C_WaitOnTXEFlagUntilTimeout>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00d      	beq.n	800bb60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	d107      	bne.n	800bb5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	e035      	b.n	800bbcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	6a3b      	ldr	r3, [r7, #32]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f000 f9ef 	bl	800bf60 <I2C_WaitOnFlagUntilTimeout>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d00d      	beq.n	800bba4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb96:	d103      	bne.n	800bba0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bb9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bba0:	2303      	movs	r3, #3
 800bba2:	e013      	b.n	800bbcc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bba4:	897b      	ldrh	r3, [r7, #10]
 800bba6:	b2db      	uxtb	r3, r3
 800bba8:	f043 0301 	orr.w	r3, r3, #1
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb6:	6a3a      	ldr	r2, [r7, #32]
 800bbb8:	4906      	ldr	r1, [pc, #24]	@ (800bbd4 <I2C_RequestMemoryRead+0x1cc>)
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 fa4a 	bl	800c054 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e000      	b.n	800bbcc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	00010002 	.word	0x00010002

0800bbd8 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbe4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbec:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bbf4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	685a      	ldr	r2, [r3, #4]
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800bc0a:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d003      	beq.n	800bc1c <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc18:	2200      	movs	r2, #0
 800bc1a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc28:	2200      	movs	r2, #0
 800bc2a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 800bc2c:	7cfb      	ldrb	r3, [r7, #19]
 800bc2e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800bc32:	2b21      	cmp	r3, #33	@ 0x21
 800bc34:	d007      	beq.n	800bc46 <I2C_DMAXferCplt+0x6e>
 800bc36:	7cfb      	ldrb	r3, [r7, #19]
 800bc38:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 800bc3c:	2b22      	cmp	r3, #34	@ 0x22
 800bc3e:	d131      	bne.n	800bca4 <I2C_DMAXferCplt+0xcc>
 800bc40:	7cbb      	ldrb	r3, [r7, #18]
 800bc42:	2b20      	cmp	r3, #32
 800bc44:	d12e      	bne.n	800bca4 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bc54:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800bc5c:	7cfb      	ldrb	r3, [r7, #19]
 800bc5e:	2b29      	cmp	r3, #41	@ 0x29
 800bc60:	d10a      	bne.n	800bc78 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	2221      	movs	r2, #33	@ 0x21
 800bc66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	2228      	movs	r2, #40	@ 0x28
 800bc6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bc70:	6978      	ldr	r0, [r7, #20]
 800bc72:	f7fe fcdc 	bl	800a62e <HAL_I2C_SlaveTxCpltCallback>
 800bc76:	e00c      	b.n	800bc92 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800bc78:	7cfb      	ldrb	r3, [r7, #19]
 800bc7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc7c:	d109      	bne.n	800bc92 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	2222      	movs	r2, #34	@ 0x22
 800bc82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	2228      	movs	r2, #40	@ 0x28
 800bc88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bc8c:	6978      	ldr	r0, [r7, #20]
 800bc8e:	f7fe fcd8 	bl	800a642 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	685a      	ldr	r2, [r3, #4]
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800bca0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800bca2:	e074      	b.n	800bd8e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d06e      	beq.n	800bd8e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d107      	bne.n	800bcca <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcc8:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800bcd8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bce0:	d009      	beq.n	800bcf6 <I2C_DMAXferCplt+0x11e>
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2b08      	cmp	r3, #8
 800bce6:	d006      	beq.n	800bcf6 <I2C_DMAXferCplt+0x11e>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800bcee:	d002      	beq.n	800bcf6 <I2C_DMAXferCplt+0x11e>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2b20      	cmp	r3, #32
 800bcf4:	d107      	bne.n	800bd06 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bd04:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	685a      	ldr	r2, [r3, #4]
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bd14:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	685a      	ldr	r2, [r3, #4]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800bd24:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d003      	beq.n	800bd3c <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800bd34:	6978      	ldr	r0, [r7, #20]
 800bd36:	f7fe fcb0 	bl	800a69a <HAL_I2C_ErrorCallback>
}
 800bd3a:	e028      	b.n	800bd8e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b40      	cmp	r3, #64	@ 0x40
 800bd4e:	d10a      	bne.n	800bd66 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800bd5e:	6978      	ldr	r0, [r7, #20]
 800bd60:	f7f9 fe12 	bl	8005988 <HAL_I2C_MemRxCpltCallback>
}
 800bd64:	e013      	b.n	800bd8e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b08      	cmp	r3, #8
 800bd72:	d002      	beq.n	800bd7a <I2C_DMAXferCplt+0x1a2>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b20      	cmp	r3, #32
 800bd78:	d103      	bne.n	800bd82 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	631a      	str	r2, [r3, #48]	@ 0x30
 800bd80:	e002      	b.n	800bd88 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	2212      	movs	r2, #18
 800bd86:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800bd88:	6978      	ldr	r0, [r7, #20]
 800bd8a:	f7fe fc46 	bl	800a61a <HAL_I2C_MasterRxCpltCallback>
}
 800bd8e:	bf00      	nop
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}

0800bd96 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd96:	b580      	push	{r7, lr}
 800bd98:	b084      	sub	sp, #16
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bda2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7fd f8e1 	bl	8008f8c <HAL_DMA_GetError>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d01b      	beq.n	800be08 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bdde:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2220      	movs	r2, #32
 800bdea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdfa:	f043 0210 	orr.w	r2, r3, #16
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800be02:	68f8      	ldr	r0, [r7, #12]
 800be04:	f7fe fc49 	bl	800a69a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800be08:	bf00      	nop
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b086      	sub	sp, #24
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800be18:	2300      	movs	r3, #0
 800be1a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be20:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be28:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800be2a:	4b4b      	ldr	r3, [pc, #300]	@ (800bf58 <I2C_DMAAbort+0x148>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	08db      	lsrs	r3, r3, #3
 800be30:	4a4a      	ldr	r2, [pc, #296]	@ (800bf5c <I2C_DMAAbort+0x14c>)
 800be32:	fba2 2303 	umull	r2, r3, r2, r3
 800be36:	0a1a      	lsrs	r2, r3, #8
 800be38:	4613      	mov	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	4413      	add	r3, r2
 800be3e:	00da      	lsls	r2, r3, #3
 800be40:	1ad3      	subs	r3, r2, r3
 800be42:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d106      	bne.n	800be58 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be4e:	f043 0220 	orr.w	r2, r3, #32
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800be56:	e00a      	b.n	800be6e <I2C_DMAAbort+0x5e>
    }
    count--;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800be68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800be6c:	d0ea      	beq.n	800be44 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be7a:	2200      	movs	r2, #0
 800be7c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be82:	2b00      	cmp	r3, #0
 800be84:	d003      	beq.n	800be8e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be8a:	2200      	movs	r2, #0
 800be8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681a      	ldr	r2, [r3, #0]
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be9c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	2200      	movs	r2, #0
 800bea2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d003      	beq.n	800beb4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beb0:	2200      	movs	r2, #0
 800beb2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d003      	beq.n	800bec4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bec0:	2200      	movs	r2, #0
 800bec2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f022 0201 	bic.w	r2, r2, #1
 800bed2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	2b60      	cmp	r3, #96	@ 0x60
 800bede:	d10e      	bne.n	800befe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	2220      	movs	r2, #32
 800bee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bee8:	697b      	ldr	r3, [r7, #20]
 800beea:	2200      	movs	r2, #0
 800beec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	2200      	movs	r2, #0
 800bef4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800bef6:	6978      	ldr	r0, [r7, #20]
 800bef8:	f7fe fbd9 	bl	800a6ae <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800befc:	e027      	b.n	800bf4e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800befe:	7cfb      	ldrb	r3, [r7, #19]
 800bf00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800bf04:	2b28      	cmp	r3, #40	@ 0x28
 800bf06:	d117      	bne.n	800bf38 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	697b      	ldr	r3, [r7, #20]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	f042 0201 	orr.w	r2, r2, #1
 800bf16:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	2228      	movs	r2, #40	@ 0x28
 800bf32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800bf36:	e007      	b.n	800bf48 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	2220      	movs	r2, #32
 800bf3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800bf48:	6978      	ldr	r0, [r7, #20]
 800bf4a:	f7fe fba6 	bl	800a69a <HAL_I2C_ErrorCallback>
}
 800bf4e:	bf00      	nop
 800bf50:	3718      	adds	r7, #24
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	20000038 	.word	0x20000038
 800bf5c:	14f8b589 	.word	0x14f8b589

0800bf60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	603b      	str	r3, [r7, #0]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf70:	e048      	b.n	800c004 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf78:	d044      	beq.n	800c004 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf7a:	f7fb fef5 	bl	8007d68 <HAL_GetTick>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	1ad3      	subs	r3, r2, r3
 800bf84:	683a      	ldr	r2, [r7, #0]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d302      	bcc.n	800bf90 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d139      	bne.n	800c004 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	0c1b      	lsrs	r3, r3, #16
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b01      	cmp	r3, #1
 800bf98:	d10d      	bne.n	800bfb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	695b      	ldr	r3, [r3, #20]
 800bfa0:	43da      	mvns	r2, r3
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	4013      	ands	r3, r2
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	bf0c      	ite	eq
 800bfac:	2301      	moveq	r3, #1
 800bfae:	2300      	movne	r3, #0
 800bfb0:	b2db      	uxtb	r3, r3
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	e00c      	b.n	800bfd0 <I2C_WaitOnFlagUntilTimeout+0x70>
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	43da      	mvns	r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	b29b      	uxth	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	bf0c      	ite	eq
 800bfc8:	2301      	moveq	r3, #1
 800bfca:	2300      	movne	r3, #0
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	461a      	mov	r2, r3
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d116      	bne.n	800c004 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bff0:	f043 0220 	orr.w	r2, r3, #32
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c000:	2301      	movs	r3, #1
 800c002:	e023      	b.n	800c04c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	0c1b      	lsrs	r3, r3, #16
 800c008:	b2db      	uxtb	r3, r3
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d10d      	bne.n	800c02a <I2C_WaitOnFlagUntilTimeout+0xca>
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	695b      	ldr	r3, [r3, #20]
 800c014:	43da      	mvns	r2, r3
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	4013      	ands	r3, r2
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	bf0c      	ite	eq
 800c020:	2301      	moveq	r3, #1
 800c022:	2300      	movne	r3, #0
 800c024:	b2db      	uxtb	r3, r3
 800c026:	461a      	mov	r2, r3
 800c028:	e00c      	b.n	800c044 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	699b      	ldr	r3, [r3, #24]
 800c030:	43da      	mvns	r2, r3
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	4013      	ands	r3, r2
 800c036:	b29b      	uxth	r3, r3
 800c038:	2b00      	cmp	r3, #0
 800c03a:	bf0c      	ite	eq
 800c03c:	2301      	moveq	r3, #1
 800c03e:	2300      	movne	r3, #0
 800c040:	b2db      	uxtb	r3, r3
 800c042:	461a      	mov	r2, r3
 800c044:	79fb      	ldrb	r3, [r7, #7]
 800c046:	429a      	cmp	r2, r3
 800c048:	d093      	beq.n	800bf72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3710      	adds	r7, #16
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}

0800c054 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	60f8      	str	r0, [r7, #12]
 800c05c:	60b9      	str	r1, [r7, #8]
 800c05e:	607a      	str	r2, [r7, #4]
 800c060:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c062:	e071      	b.n	800c148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	695b      	ldr	r3, [r3, #20]
 800c06a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c06e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c072:	d123      	bne.n	800c0bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c082:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c08c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2220      	movs	r2, #32
 800c098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0a8:	f043 0204 	orr.w	r2, r3, #4
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e067      	b.n	800c18c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c2:	d041      	beq.n	800c148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0c4:	f7fb fe50 	bl	8007d68 <HAL_GetTick>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	1ad3      	subs	r3, r2, r3
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d302      	bcc.n	800c0da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d136      	bne.n	800c148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	0c1b      	lsrs	r3, r3, #16
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d10c      	bne.n	800c0fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	695b      	ldr	r3, [r3, #20]
 800c0ea:	43da      	mvns	r2, r3
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	b29b      	uxth	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	bf14      	ite	ne
 800c0f6:	2301      	movne	r3, #1
 800c0f8:	2300      	moveq	r3, #0
 800c0fa:	b2db      	uxtb	r3, r3
 800c0fc:	e00b      	b.n	800c116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	43da      	mvns	r2, r3
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	4013      	ands	r3, r2
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	bf14      	ite	ne
 800c110:	2301      	movne	r3, #1
 800c112:	2300      	moveq	r3, #0
 800c114:	b2db      	uxtb	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d016      	beq.n	800c148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2200      	movs	r2, #0
 800c11e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	2220      	movs	r2, #32
 800c124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c134:	f043 0220 	orr.w	r2, r3, #32
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	e021      	b.n	800c18c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	0c1b      	lsrs	r3, r3, #16
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b01      	cmp	r3, #1
 800c150:	d10c      	bne.n	800c16c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	43da      	mvns	r2, r3
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	4013      	ands	r3, r2
 800c15e:	b29b      	uxth	r3, r3
 800c160:	2b00      	cmp	r3, #0
 800c162:	bf14      	ite	ne
 800c164:	2301      	movne	r3, #1
 800c166:	2300      	moveq	r3, #0
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	e00b      	b.n	800c184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	43da      	mvns	r2, r3
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	4013      	ands	r3, r2
 800c178:	b29b      	uxth	r3, r3
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	bf14      	ite	ne
 800c17e:	2301      	movne	r3, #1
 800c180:	2300      	moveq	r3, #0
 800c182:	b2db      	uxtb	r3, r3
 800c184:	2b00      	cmp	r3, #0
 800c186:	f47f af6d 	bne.w	800c064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c18a:	2300      	movs	r3, #0
}
 800c18c:	4618      	mov	r0, r3
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c1a0:	e034      	b.n	800c20c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c1a2:	68f8      	ldr	r0, [r7, #12]
 800c1a4:	f000 f915 	bl	800c3d2 <I2C_IsAcknowledgeFailed>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e034      	b.n	800c21c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1b8:	d028      	beq.n	800c20c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1ba:	f7fb fdd5 	bl	8007d68 <HAL_GetTick>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	1ad3      	subs	r3, r2, r3
 800c1c4:	68ba      	ldr	r2, [r7, #8]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d302      	bcc.n	800c1d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d11d      	bne.n	800c20c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1da:	2b80      	cmp	r3, #128	@ 0x80
 800c1dc:	d016      	beq.n	800c20c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2220      	movs	r2, #32
 800c1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f8:	f043 0220 	orr.w	r2, r3, #32
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e007      	b.n	800c21c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	695b      	ldr	r3, [r3, #20]
 800c212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c216:	2b80      	cmp	r3, #128	@ 0x80
 800c218:	d1c3      	bne.n	800c1a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c21a:	2300      	movs	r3, #0
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3710      	adds	r7, #16
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b084      	sub	sp, #16
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c230:	e034      	b.n	800c29c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	f000 f8cd 	bl	800c3d2 <I2C_IsAcknowledgeFailed>
 800c238:	4603      	mov	r3, r0
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d001      	beq.n	800c242 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c23e:	2301      	movs	r3, #1
 800c240:	e034      	b.n	800c2ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c248:	d028      	beq.n	800c29c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c24a:	f7fb fd8d 	bl	8007d68 <HAL_GetTick>
 800c24e:	4602      	mov	r2, r0
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	68ba      	ldr	r2, [r7, #8]
 800c256:	429a      	cmp	r2, r3
 800c258:	d302      	bcc.n	800c260 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d11d      	bne.n	800c29c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	695b      	ldr	r3, [r3, #20]
 800c266:	f003 0304 	and.w	r3, r3, #4
 800c26a:	2b04      	cmp	r3, #4
 800c26c:	d016      	beq.n	800c29c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2220      	movs	r2, #32
 800c278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c288:	f043 0220 	orr.w	r2, r3, #32
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e007      	b.n	800c2ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	f003 0304 	and.w	r3, r3, #4
 800c2a6:	2b04      	cmp	r3, #4
 800c2a8:	d1c3      	bne.n	800c232 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c2aa:	2300      	movs	r3, #0
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b085      	sub	sp, #20
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800c2c0:	4b13      	ldr	r3, [pc, #76]	@ (800c310 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	08db      	lsrs	r3, r3, #3
 800c2c6:	4a13      	ldr	r2, [pc, #76]	@ (800c314 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800c2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c2cc:	0a1a      	lsrs	r2, r3, #8
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d107      	bne.n	800c2f2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2e6:	f043 0220 	orr.w	r2, r3, #32
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e008      	b.n	800c304 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c2fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c300:	d0e9      	beq.n	800c2d6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	20000038 	.word	0x20000038
 800c314:	14f8b589 	.word	0x14f8b589

0800c318 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c324:	e049      	b.n	800c3ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	695b      	ldr	r3, [r3, #20]
 800c32c:	f003 0310 	and.w	r3, r3, #16
 800c330:	2b10      	cmp	r3, #16
 800c332:	d119      	bne.n	800c368 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f06f 0210 	mvn.w	r2, #16
 800c33c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2200      	movs	r2, #0
 800c342:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2220      	movs	r2, #32
 800c348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	e030      	b.n	800c3ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c368:	f7fb fcfe 	bl	8007d68 <HAL_GetTick>
 800c36c:	4602      	mov	r2, r0
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	429a      	cmp	r2, r3
 800c376:	d302      	bcc.n	800c37e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d11d      	bne.n	800c3ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	695b      	ldr	r3, [r3, #20]
 800c384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c388:	2b40      	cmp	r3, #64	@ 0x40
 800c38a:	d016      	beq.n	800c3ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2200      	movs	r2, #0
 800c390:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2220      	movs	r2, #32
 800c396:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3a6:	f043 0220 	orr.w	r2, r3, #32
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e007      	b.n	800c3ca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	695b      	ldr	r3, [r3, #20]
 800c3c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3c4:	2b40      	cmp	r3, #64	@ 0x40
 800c3c6:	d1ae      	bne.n	800c326 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b083      	sub	sp, #12
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c3e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c3e8:	d11b      	bne.n	800c422 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c3f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2220      	movs	r2, #32
 800c3fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2200      	movs	r2, #0
 800c406:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c40e:	f043 0204 	orr.w	r2, r3, #4
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	e000      	b.n	800c424 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800c430:	b480      	push	{r7}
 800c432:	b083      	sub	sp, #12
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c43c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800c440:	d103      	bne.n	800c44a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2201      	movs	r2, #1
 800c446:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800c448:	e007      	b.n	800c45a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800c452:	d102      	bne.n	800c45a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2208      	movs	r2, #8
 800c458:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800c45a:	bf00      	nop
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
	...

0800c468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b084      	sub	sp, #16
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d101      	bne.n	800c47c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	e0cc      	b.n	800c616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c47c:	4b68      	ldr	r3, [pc, #416]	@ (800c620 <HAL_RCC_ClockConfig+0x1b8>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f003 030f 	and.w	r3, r3, #15
 800c484:	683a      	ldr	r2, [r7, #0]
 800c486:	429a      	cmp	r2, r3
 800c488:	d90c      	bls.n	800c4a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c48a:	4b65      	ldr	r3, [pc, #404]	@ (800c620 <HAL_RCC_ClockConfig+0x1b8>)
 800c48c:	683a      	ldr	r2, [r7, #0]
 800c48e:	b2d2      	uxtb	r2, r2
 800c490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c492:	4b63      	ldr	r3, [pc, #396]	@ (800c620 <HAL_RCC_ClockConfig+0x1b8>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f003 030f 	and.w	r3, r3, #15
 800c49a:	683a      	ldr	r2, [r7, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d001      	beq.n	800c4a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c4a0:	2301      	movs	r3, #1
 800c4a2:	e0b8      	b.n	800c616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0302 	and.w	r3, r3, #2
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d020      	beq.n	800c4f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d005      	beq.n	800c4c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c4bc:	4b59      	ldr	r3, [pc, #356]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c4be:	689b      	ldr	r3, [r3, #8]
 800c4c0:	4a58      	ldr	r2, [pc, #352]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c4c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f003 0308 	and.w	r3, r3, #8
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d005      	beq.n	800c4e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c4d4:	4b53      	ldr	r3, [pc, #332]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c4d6:	689b      	ldr	r3, [r3, #8]
 800c4d8:	4a52      	ldr	r2, [pc, #328]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c4da:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c4de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c4e0:	4b50      	ldr	r3, [pc, #320]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	494d      	ldr	r1, [pc, #308]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ee:	4313      	orrs	r3, r2
 800c4f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d044      	beq.n	800c588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d107      	bne.n	800c516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c506:	4b47      	ldr	r3, [pc, #284]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d119      	bne.n	800c546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e07f      	b.n	800c616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d003      	beq.n	800c526 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c522:	2b03      	cmp	r3, #3
 800c524:	d107      	bne.n	800c536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c526:	4b3f      	ldr	r3, [pc, #252]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d109      	bne.n	800c546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	e06f      	b.n	800c616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c536:	4b3b      	ldr	r3, [pc, #236]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 0302 	and.w	r3, r3, #2
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d101      	bne.n	800c546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c542:	2301      	movs	r3, #1
 800c544:	e067      	b.n	800c616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c546:	4b37      	ldr	r3, [pc, #220]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c548:	689b      	ldr	r3, [r3, #8]
 800c54a:	f023 0203 	bic.w	r2, r3, #3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	4934      	ldr	r1, [pc, #208]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c554:	4313      	orrs	r3, r2
 800c556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c558:	f7fb fc06 	bl	8007d68 <HAL_GetTick>
 800c55c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c55e:	e00a      	b.n	800c576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c560:	f7fb fc02 	bl	8007d68 <HAL_GetTick>
 800c564:	4602      	mov	r2, r0
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	1ad3      	subs	r3, r2, r3
 800c56a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c56e:	4293      	cmp	r3, r2
 800c570:	d901      	bls.n	800c576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c572:	2303      	movs	r3, #3
 800c574:	e04f      	b.n	800c616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c576:	4b2b      	ldr	r3, [pc, #172]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c578:	689b      	ldr	r3, [r3, #8]
 800c57a:	f003 020c 	and.w	r2, r3, #12
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	429a      	cmp	r2, r3
 800c586:	d1eb      	bne.n	800c560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c588:	4b25      	ldr	r3, [pc, #148]	@ (800c620 <HAL_RCC_ClockConfig+0x1b8>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 030f 	and.w	r3, r3, #15
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	429a      	cmp	r2, r3
 800c594:	d20c      	bcs.n	800c5b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c596:	4b22      	ldr	r3, [pc, #136]	@ (800c620 <HAL_RCC_ClockConfig+0x1b8>)
 800c598:	683a      	ldr	r2, [r7, #0]
 800c59a:	b2d2      	uxtb	r2, r2
 800c59c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c59e:	4b20      	ldr	r3, [pc, #128]	@ (800c620 <HAL_RCC_ClockConfig+0x1b8>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f003 030f 	and.w	r3, r3, #15
 800c5a6:	683a      	ldr	r2, [r7, #0]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d001      	beq.n	800c5b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e032      	b.n	800c616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d008      	beq.n	800c5ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c5bc:	4b19      	ldr	r3, [pc, #100]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	4916      	ldr	r1, [pc, #88]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ca:	4313      	orrs	r3, r2
 800c5cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f003 0308 	and.w	r3, r3, #8
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d009      	beq.n	800c5ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c5da:	4b12      	ldr	r3, [pc, #72]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	00db      	lsls	r3, r3, #3
 800c5e8:	490e      	ldr	r1, [pc, #56]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c5ee:	f000 f855 	bl	800c69c <HAL_RCC_GetSysClockFreq>
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	4b0b      	ldr	r3, [pc, #44]	@ (800c624 <HAL_RCC_ClockConfig+0x1bc>)
 800c5f6:	689b      	ldr	r3, [r3, #8]
 800c5f8:	091b      	lsrs	r3, r3, #4
 800c5fa:	f003 030f 	and.w	r3, r3, #15
 800c5fe:	490a      	ldr	r1, [pc, #40]	@ (800c628 <HAL_RCC_ClockConfig+0x1c0>)
 800c600:	5ccb      	ldrb	r3, [r1, r3]
 800c602:	fa22 f303 	lsr.w	r3, r2, r3
 800c606:	4a09      	ldr	r2, [pc, #36]	@ (800c62c <HAL_RCC_ClockConfig+0x1c4>)
 800c608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c60a:	4b09      	ldr	r3, [pc, #36]	@ (800c630 <HAL_RCC_ClockConfig+0x1c8>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fb fb66 	bl	8007ce0 <HAL_InitTick>

  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	40023c00 	.word	0x40023c00
 800c624:	40023800 	.word	0x40023800
 800c628:	08019e90 	.word	0x08019e90
 800c62c:	20000038 	.word	0x20000038
 800c630:	2000003c 	.word	0x2000003c

0800c634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c634:	b480      	push	{r7}
 800c636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c638:	4b03      	ldr	r3, [pc, #12]	@ (800c648 <HAL_RCC_GetHCLKFreq+0x14>)
 800c63a:	681b      	ldr	r3, [r3, #0]
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	46bd      	mov	sp, r7
 800c640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c644:	4770      	bx	lr
 800c646:	bf00      	nop
 800c648:	20000038 	.word	0x20000038

0800c64c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c64c:	b580      	push	{r7, lr}
 800c64e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c650:	f7ff fff0 	bl	800c634 <HAL_RCC_GetHCLKFreq>
 800c654:	4602      	mov	r2, r0
 800c656:	4b05      	ldr	r3, [pc, #20]	@ (800c66c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	0a9b      	lsrs	r3, r3, #10
 800c65c:	f003 0307 	and.w	r3, r3, #7
 800c660:	4903      	ldr	r1, [pc, #12]	@ (800c670 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c662:	5ccb      	ldrb	r3, [r1, r3]
 800c664:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c668:	4618      	mov	r0, r3
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	40023800 	.word	0x40023800
 800c670:	08019ea0 	.word	0x08019ea0

0800c674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c678:	f7ff ffdc 	bl	800c634 <HAL_RCC_GetHCLKFreq>
 800c67c:	4602      	mov	r2, r0
 800c67e:	4b05      	ldr	r3, [pc, #20]	@ (800c694 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c680:	689b      	ldr	r3, [r3, #8]
 800c682:	0b5b      	lsrs	r3, r3, #13
 800c684:	f003 0307 	and.w	r3, r3, #7
 800c688:	4903      	ldr	r1, [pc, #12]	@ (800c698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c68a:	5ccb      	ldrb	r3, [r1, r3]
 800c68c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c690:	4618      	mov	r0, r3
 800c692:	bd80      	pop	{r7, pc}
 800c694:	40023800 	.word	0x40023800
 800c698:	08019ea0 	.word	0x08019ea0

0800c69c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c69c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6a0:	b0ae      	sub	sp, #184	@ 0xb8
 800c6a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c6c2:	4bcb      	ldr	r3, [pc, #812]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	f003 030c 	and.w	r3, r3, #12
 800c6ca:	2b0c      	cmp	r3, #12
 800c6cc:	f200 8206 	bhi.w	800cadc <HAL_RCC_GetSysClockFreq+0x440>
 800c6d0:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c6d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d6:	bf00      	nop
 800c6d8:	0800c70d 	.word	0x0800c70d
 800c6dc:	0800cadd 	.word	0x0800cadd
 800c6e0:	0800cadd 	.word	0x0800cadd
 800c6e4:	0800cadd 	.word	0x0800cadd
 800c6e8:	0800c715 	.word	0x0800c715
 800c6ec:	0800cadd 	.word	0x0800cadd
 800c6f0:	0800cadd 	.word	0x0800cadd
 800c6f4:	0800cadd 	.word	0x0800cadd
 800c6f8:	0800c71d 	.word	0x0800c71d
 800c6fc:	0800cadd 	.word	0x0800cadd
 800c700:	0800cadd 	.word	0x0800cadd
 800c704:	0800cadd 	.word	0x0800cadd
 800c708:	0800c90d 	.word	0x0800c90d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c70c:	4bb9      	ldr	r3, [pc, #740]	@ (800c9f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800c70e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c712:	e1e7      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c714:	4bb8      	ldr	r3, [pc, #736]	@ (800c9f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c716:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c71a:	e1e3      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c71c:	4bb4      	ldr	r3, [pc, #720]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c724:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c728:	4bb1      	ldr	r3, [pc, #708]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c730:	2b00      	cmp	r3, #0
 800c732:	d071      	beq.n	800c818 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c734:	4bae      	ldr	r3, [pc, #696]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	099b      	lsrs	r3, r3, #6
 800c73a:	2200      	movs	r2, #0
 800c73c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c740:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800c744:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c750:	2300      	movs	r3, #0
 800c752:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800c75a:	4622      	mov	r2, r4
 800c75c:	462b      	mov	r3, r5
 800c75e:	f04f 0000 	mov.w	r0, #0
 800c762:	f04f 0100 	mov.w	r1, #0
 800c766:	0159      	lsls	r1, r3, #5
 800c768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c76c:	0150      	lsls	r0, r2, #5
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	4621      	mov	r1, r4
 800c774:	1a51      	subs	r1, r2, r1
 800c776:	6439      	str	r1, [r7, #64]	@ 0x40
 800c778:	4629      	mov	r1, r5
 800c77a:	eb63 0301 	sbc.w	r3, r3, r1
 800c77e:	647b      	str	r3, [r7, #68]	@ 0x44
 800c780:	f04f 0200 	mov.w	r2, #0
 800c784:	f04f 0300 	mov.w	r3, #0
 800c788:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800c78c:	4649      	mov	r1, r9
 800c78e:	018b      	lsls	r3, r1, #6
 800c790:	4641      	mov	r1, r8
 800c792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c796:	4641      	mov	r1, r8
 800c798:	018a      	lsls	r2, r1, #6
 800c79a:	4641      	mov	r1, r8
 800c79c:	1a51      	subs	r1, r2, r1
 800c79e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800c7a0:	4649      	mov	r1, r9
 800c7a2:	eb63 0301 	sbc.w	r3, r3, r1
 800c7a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c7a8:	f04f 0200 	mov.w	r2, #0
 800c7ac:	f04f 0300 	mov.w	r3, #0
 800c7b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800c7b4:	4649      	mov	r1, r9
 800c7b6:	00cb      	lsls	r3, r1, #3
 800c7b8:	4641      	mov	r1, r8
 800c7ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7be:	4641      	mov	r1, r8
 800c7c0:	00ca      	lsls	r2, r1, #3
 800c7c2:	4610      	mov	r0, r2
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	189b      	adds	r3, r3, r2
 800c7cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7ce:	462b      	mov	r3, r5
 800c7d0:	460a      	mov	r2, r1
 800c7d2:	eb42 0303 	adc.w	r3, r2, r3
 800c7d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7d8:	f04f 0200 	mov.w	r2, #0
 800c7dc:	f04f 0300 	mov.w	r3, #0
 800c7e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c7e4:	4629      	mov	r1, r5
 800c7e6:	024b      	lsls	r3, r1, #9
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	024a      	lsls	r2, r1, #9
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c800:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c804:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800c808:	f7f4 fbbc 	bl	8000f84 <__aeabi_uldivmod>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	4613      	mov	r3, r2
 800c812:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c816:	e067      	b.n	800c8e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c818:	4b75      	ldr	r3, [pc, #468]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	099b      	lsrs	r3, r3, #6
 800c81e:	2200      	movs	r2, #0
 800c820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c824:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c828:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c82c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c830:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c832:	2300      	movs	r3, #0
 800c834:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c836:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800c83a:	4622      	mov	r2, r4
 800c83c:	462b      	mov	r3, r5
 800c83e:	f04f 0000 	mov.w	r0, #0
 800c842:	f04f 0100 	mov.w	r1, #0
 800c846:	0159      	lsls	r1, r3, #5
 800c848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c84c:	0150      	lsls	r0, r2, #5
 800c84e:	4602      	mov	r2, r0
 800c850:	460b      	mov	r3, r1
 800c852:	4621      	mov	r1, r4
 800c854:	1a51      	subs	r1, r2, r1
 800c856:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c858:	4629      	mov	r1, r5
 800c85a:	eb63 0301 	sbc.w	r3, r3, r1
 800c85e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c860:	f04f 0200 	mov.w	r2, #0
 800c864:	f04f 0300 	mov.w	r3, #0
 800c868:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800c86c:	4649      	mov	r1, r9
 800c86e:	018b      	lsls	r3, r1, #6
 800c870:	4641      	mov	r1, r8
 800c872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c876:	4641      	mov	r1, r8
 800c878:	018a      	lsls	r2, r1, #6
 800c87a:	4641      	mov	r1, r8
 800c87c:	ebb2 0a01 	subs.w	sl, r2, r1
 800c880:	4649      	mov	r1, r9
 800c882:	eb63 0b01 	sbc.w	fp, r3, r1
 800c886:	f04f 0200 	mov.w	r2, #0
 800c88a:	f04f 0300 	mov.w	r3, #0
 800c88e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c892:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c89a:	4692      	mov	sl, r2
 800c89c:	469b      	mov	fp, r3
 800c89e:	4623      	mov	r3, r4
 800c8a0:	eb1a 0303 	adds.w	r3, sl, r3
 800c8a4:	623b      	str	r3, [r7, #32]
 800c8a6:	462b      	mov	r3, r5
 800c8a8:	eb4b 0303 	adc.w	r3, fp, r3
 800c8ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8ae:	f04f 0200 	mov.w	r2, #0
 800c8b2:	f04f 0300 	mov.w	r3, #0
 800c8b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	028b      	lsls	r3, r1, #10
 800c8be:	4621      	mov	r1, r4
 800c8c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c8c4:	4621      	mov	r1, r4
 800c8c6:	028a      	lsls	r2, r1, #10
 800c8c8:	4610      	mov	r0, r2
 800c8ca:	4619      	mov	r1, r3
 800c8cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	673b      	str	r3, [r7, #112]	@ 0x70
 800c8d4:	677a      	str	r2, [r7, #116]	@ 0x74
 800c8d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800c8da:	f7f4 fb53 	bl	8000f84 <__aeabi_uldivmod>
 800c8de:	4602      	mov	r2, r0
 800c8e0:	460b      	mov	r3, r1
 800c8e2:	4613      	mov	r3, r2
 800c8e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c8e8:	4b41      	ldr	r3, [pc, #260]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	0c1b      	lsrs	r3, r3, #16
 800c8ee:	f003 0303 	and.w	r3, r3, #3
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800c8fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c902:	fbb2 f3f3 	udiv	r3, r2, r3
 800c906:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800c90a:	e0eb      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c90c:	4b38      	ldr	r3, [pc, #224]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c90e:	685b      	ldr	r3, [r3, #4]
 800c910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c914:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c918:	4b35      	ldr	r3, [pc, #212]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c91a:	685b      	ldr	r3, [r3, #4]
 800c91c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c920:	2b00      	cmp	r3, #0
 800c922:	d06b      	beq.n	800c9fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c924:	4b32      	ldr	r3, [pc, #200]	@ (800c9f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	099b      	lsrs	r3, r3, #6
 800c92a:	2200      	movs	r2, #0
 800c92c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c92e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c930:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c936:	663b      	str	r3, [r7, #96]	@ 0x60
 800c938:	2300      	movs	r3, #0
 800c93a:	667b      	str	r3, [r7, #100]	@ 0x64
 800c93c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c940:	4622      	mov	r2, r4
 800c942:	462b      	mov	r3, r5
 800c944:	f04f 0000 	mov.w	r0, #0
 800c948:	f04f 0100 	mov.w	r1, #0
 800c94c:	0159      	lsls	r1, r3, #5
 800c94e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c952:	0150      	lsls	r0, r2, #5
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	4621      	mov	r1, r4
 800c95a:	1a51      	subs	r1, r2, r1
 800c95c:	61b9      	str	r1, [r7, #24]
 800c95e:	4629      	mov	r1, r5
 800c960:	eb63 0301 	sbc.w	r3, r3, r1
 800c964:	61fb      	str	r3, [r7, #28]
 800c966:	f04f 0200 	mov.w	r2, #0
 800c96a:	f04f 0300 	mov.w	r3, #0
 800c96e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c972:	4659      	mov	r1, fp
 800c974:	018b      	lsls	r3, r1, #6
 800c976:	4651      	mov	r1, sl
 800c978:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c97c:	4651      	mov	r1, sl
 800c97e:	018a      	lsls	r2, r1, #6
 800c980:	4651      	mov	r1, sl
 800c982:	ebb2 0801 	subs.w	r8, r2, r1
 800c986:	4659      	mov	r1, fp
 800c988:	eb63 0901 	sbc.w	r9, r3, r1
 800c98c:	f04f 0200 	mov.w	r2, #0
 800c990:	f04f 0300 	mov.w	r3, #0
 800c994:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c998:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c99c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c9a0:	4690      	mov	r8, r2
 800c9a2:	4699      	mov	r9, r3
 800c9a4:	4623      	mov	r3, r4
 800c9a6:	eb18 0303 	adds.w	r3, r8, r3
 800c9aa:	613b      	str	r3, [r7, #16]
 800c9ac:	462b      	mov	r3, r5
 800c9ae:	eb49 0303 	adc.w	r3, r9, r3
 800c9b2:	617b      	str	r3, [r7, #20]
 800c9b4:	f04f 0200 	mov.w	r2, #0
 800c9b8:	f04f 0300 	mov.w	r3, #0
 800c9bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c9c0:	4629      	mov	r1, r5
 800c9c2:	024b      	lsls	r3, r1, #9
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	024a      	lsls	r2, r1, #9
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9da:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800c9dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800c9e0:	f7f4 fad0 	bl	8000f84 <__aeabi_uldivmod>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4613      	mov	r3, r2
 800c9ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c9ee:	e065      	b.n	800cabc <HAL_RCC_GetSysClockFreq+0x420>
 800c9f0:	40023800 	.word	0x40023800
 800c9f4:	00f42400 	.word	0x00f42400
 800c9f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c9fc:	4b3d      	ldr	r3, [pc, #244]	@ (800caf4 <HAL_RCC_GetSysClockFreq+0x458>)
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	099b      	lsrs	r3, r3, #6
 800ca02:	2200      	movs	r2, #0
 800ca04:	4618      	mov	r0, r3
 800ca06:	4611      	mov	r1, r2
 800ca08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800ca0c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca0e:	2300      	movs	r3, #0
 800ca10:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800ca16:	4642      	mov	r2, r8
 800ca18:	464b      	mov	r3, r9
 800ca1a:	f04f 0000 	mov.w	r0, #0
 800ca1e:	f04f 0100 	mov.w	r1, #0
 800ca22:	0159      	lsls	r1, r3, #5
 800ca24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca28:	0150      	lsls	r0, r2, #5
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	460b      	mov	r3, r1
 800ca2e:	4641      	mov	r1, r8
 800ca30:	1a51      	subs	r1, r2, r1
 800ca32:	60b9      	str	r1, [r7, #8]
 800ca34:	4649      	mov	r1, r9
 800ca36:	eb63 0301 	sbc.w	r3, r3, r1
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	f04f 0200 	mov.w	r2, #0
 800ca40:	f04f 0300 	mov.w	r3, #0
 800ca44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800ca48:	4659      	mov	r1, fp
 800ca4a:	018b      	lsls	r3, r1, #6
 800ca4c:	4651      	mov	r1, sl
 800ca4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800ca52:	4651      	mov	r1, sl
 800ca54:	018a      	lsls	r2, r1, #6
 800ca56:	4651      	mov	r1, sl
 800ca58:	1a54      	subs	r4, r2, r1
 800ca5a:	4659      	mov	r1, fp
 800ca5c:	eb63 0501 	sbc.w	r5, r3, r1
 800ca60:	f04f 0200 	mov.w	r2, #0
 800ca64:	f04f 0300 	mov.w	r3, #0
 800ca68:	00eb      	lsls	r3, r5, #3
 800ca6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca6e:	00e2      	lsls	r2, r4, #3
 800ca70:	4614      	mov	r4, r2
 800ca72:	461d      	mov	r5, r3
 800ca74:	4643      	mov	r3, r8
 800ca76:	18e3      	adds	r3, r4, r3
 800ca78:	603b      	str	r3, [r7, #0]
 800ca7a:	464b      	mov	r3, r9
 800ca7c:	eb45 0303 	adc.w	r3, r5, r3
 800ca80:	607b      	str	r3, [r7, #4]
 800ca82:	f04f 0200 	mov.w	r2, #0
 800ca86:	f04f 0300 	mov.w	r3, #0
 800ca8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ca8e:	4629      	mov	r1, r5
 800ca90:	028b      	lsls	r3, r1, #10
 800ca92:	4621      	mov	r1, r4
 800ca94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ca98:	4621      	mov	r1, r4
 800ca9a:	028a      	lsls	r2, r1, #10
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	4619      	mov	r1, r3
 800caa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caa4:	2200      	movs	r2, #0
 800caa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800caa8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800caaa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800caae:	f7f4 fa69 	bl	8000f84 <__aeabi_uldivmod>
 800cab2:	4602      	mov	r2, r0
 800cab4:	460b      	mov	r3, r1
 800cab6:	4613      	mov	r3, r2
 800cab8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800cabc:	4b0d      	ldr	r3, [pc, #52]	@ (800caf4 <HAL_RCC_GetSysClockFreq+0x458>)
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	0f1b      	lsrs	r3, r3, #28
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800caca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cad2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800cada:	e003      	b.n	800cae4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cadc:	4b06      	ldr	r3, [pc, #24]	@ (800caf8 <HAL_RCC_GetSysClockFreq+0x45c>)
 800cade:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800cae2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800cae8:	4618      	mov	r0, r3
 800caea:	37b8      	adds	r7, #184	@ 0xb8
 800caec:	46bd      	mov	sp, r7
 800caee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800caf2:	bf00      	nop
 800caf4:	40023800 	.word	0x40023800
 800caf8:	00f42400 	.word	0x00f42400

0800cafc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b086      	sub	sp, #24
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d101      	bne.n	800cb0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e28d      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 0301 	and.w	r3, r3, #1
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 8083 	beq.w	800cc22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cb1c:	4b94      	ldr	r3, [pc, #592]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	f003 030c 	and.w	r3, r3, #12
 800cb24:	2b04      	cmp	r3, #4
 800cb26:	d019      	beq.n	800cb5c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800cb28:	4b91      	ldr	r3, [pc, #580]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb2a:	689b      	ldr	r3, [r3, #8]
 800cb2c:	f003 030c 	and.w	r3, r3, #12
        || \
 800cb30:	2b08      	cmp	r3, #8
 800cb32:	d106      	bne.n	800cb42 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800cb34:	4b8e      	ldr	r3, [pc, #568]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb3c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb40:	d00c      	beq.n	800cb5c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb42:	4b8b      	ldr	r3, [pc, #556]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb44:	689b      	ldr	r3, [r3, #8]
 800cb46:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800cb4a:	2b0c      	cmp	r3, #12
 800cb4c:	d112      	bne.n	800cb74 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cb4e:	4b88      	ldr	r3, [pc, #544]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cb56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cb5a:	d10b      	bne.n	800cb74 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb5c:	4b84      	ldr	r3, [pc, #528]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d05b      	beq.n	800cc20 <HAL_RCC_OscConfig+0x124>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d157      	bne.n	800cc20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e25a      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb7c:	d106      	bne.n	800cb8c <HAL_RCC_OscConfig+0x90>
 800cb7e:	4b7c      	ldr	r3, [pc, #496]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a7b      	ldr	r2, [pc, #492]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cb88:	6013      	str	r3, [r2, #0]
 800cb8a:	e01d      	b.n	800cbc8 <HAL_RCC_OscConfig+0xcc>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cb94:	d10c      	bne.n	800cbb0 <HAL_RCC_OscConfig+0xb4>
 800cb96:	4b76      	ldr	r3, [pc, #472]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a75      	ldr	r2, [pc, #468]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cb9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cba0:	6013      	str	r3, [r2, #0]
 800cba2:	4b73      	ldr	r3, [pc, #460]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a72      	ldr	r2, [pc, #456]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	e00b      	b.n	800cbc8 <HAL_RCC_OscConfig+0xcc>
 800cbb0:	4b6f      	ldr	r3, [pc, #444]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a6e      	ldr	r2, [pc, #440]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cbb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cbba:	6013      	str	r3, [r2, #0]
 800cbbc:	4b6c      	ldr	r3, [pc, #432]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4a6b      	ldr	r2, [pc, #428]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cbc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cbc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	685b      	ldr	r3, [r3, #4]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d013      	beq.n	800cbf8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbd0:	f7fb f8ca 	bl	8007d68 <HAL_GetTick>
 800cbd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbd6:	e008      	b.n	800cbea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cbd8:	f7fb f8c6 	bl	8007d68 <HAL_GetTick>
 800cbdc:	4602      	mov	r2, r0
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	1ad3      	subs	r3, r2, r3
 800cbe2:	2b64      	cmp	r3, #100	@ 0x64
 800cbe4:	d901      	bls.n	800cbea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	e21f      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cbea:	4b61      	ldr	r3, [pc, #388]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d0f0      	beq.n	800cbd8 <HAL_RCC_OscConfig+0xdc>
 800cbf6:	e014      	b.n	800cc22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbf8:	f7fb f8b6 	bl	8007d68 <HAL_GetTick>
 800cbfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cbfe:	e008      	b.n	800cc12 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cc00:	f7fb f8b2 	bl	8007d68 <HAL_GetTick>
 800cc04:	4602      	mov	r2, r0
 800cc06:	693b      	ldr	r3, [r7, #16]
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	2b64      	cmp	r3, #100	@ 0x64
 800cc0c:	d901      	bls.n	800cc12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800cc0e:	2303      	movs	r3, #3
 800cc10:	e20b      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc12:	4b57      	ldr	r3, [pc, #348]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1f0      	bne.n	800cc00 <HAL_RCC_OscConfig+0x104>
 800cc1e:	e000      	b.n	800cc22 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cc20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f003 0302 	and.w	r3, r3, #2
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d06f      	beq.n	800cd0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cc2e:	4b50      	ldr	r3, [pc, #320]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc30:	689b      	ldr	r3, [r3, #8]
 800cc32:	f003 030c 	and.w	r3, r3, #12
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d017      	beq.n	800cc6a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800cc3a:	4b4d      	ldr	r3, [pc, #308]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc3c:	689b      	ldr	r3, [r3, #8]
 800cc3e:	f003 030c 	and.w	r3, r3, #12
        || \
 800cc42:	2b08      	cmp	r3, #8
 800cc44:	d105      	bne.n	800cc52 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800cc46:	4b4a      	ldr	r3, [pc, #296]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00b      	beq.n	800cc6a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc52:	4b47      	ldr	r3, [pc, #284]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800cc5a:	2b0c      	cmp	r3, #12
 800cc5c:	d11c      	bne.n	800cc98 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cc5e:	4b44      	ldr	r3, [pc, #272]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc60:	685b      	ldr	r3, [r3, #4]
 800cc62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d116      	bne.n	800cc98 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc6a:	4b41      	ldr	r3, [pc, #260]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f003 0302 	and.w	r3, r3, #2
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d005      	beq.n	800cc82 <HAL_RCC_OscConfig+0x186>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d001      	beq.n	800cc82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800cc7e:	2301      	movs	r3, #1
 800cc80:	e1d3      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cc82:	4b3b      	ldr	r3, [pc, #236]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	691b      	ldr	r3, [r3, #16]
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	4937      	ldr	r1, [pc, #220]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cc92:	4313      	orrs	r3, r2
 800cc94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cc96:	e03a      	b.n	800cd0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	68db      	ldr	r3, [r3, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d020      	beq.n	800cce2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cca0:	4b34      	ldr	r3, [pc, #208]	@ (800cd74 <HAL_RCC_OscConfig+0x278>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cca6:	f7fb f85f 	bl	8007d68 <HAL_GetTick>
 800ccaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ccac:	e008      	b.n	800ccc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccae:	f7fb f85b 	bl	8007d68 <HAL_GetTick>
 800ccb2:	4602      	mov	r2, r0
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	1ad3      	subs	r3, r2, r3
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d901      	bls.n	800ccc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e1b4      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ccc0:	4b2b      	ldr	r3, [pc, #172]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0302 	and.w	r3, r3, #2
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0f0      	beq.n	800ccae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cccc:	4b28      	ldr	r3, [pc, #160]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	691b      	ldr	r3, [r3, #16]
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	4925      	ldr	r1, [pc, #148]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800ccdc:	4313      	orrs	r3, r2
 800ccde:	600b      	str	r3, [r1, #0]
 800cce0:	e015      	b.n	800cd0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cce2:	4b24      	ldr	r3, [pc, #144]	@ (800cd74 <HAL_RCC_OscConfig+0x278>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cce8:	f7fb f83e 	bl	8007d68 <HAL_GetTick>
 800ccec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ccee:	e008      	b.n	800cd02 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ccf0:	f7fb f83a 	bl	8007d68 <HAL_GetTick>
 800ccf4:	4602      	mov	r2, r0
 800ccf6:	693b      	ldr	r3, [r7, #16]
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d901      	bls.n	800cd02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800ccfe:	2303      	movs	r3, #3
 800cd00:	e193      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd02:	4b1b      	ldr	r3, [pc, #108]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f003 0302 	and.w	r3, r3, #2
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1f0      	bne.n	800ccf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f003 0308 	and.w	r3, r3, #8
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d036      	beq.n	800cd88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	695b      	ldr	r3, [r3, #20]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d016      	beq.n	800cd50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd22:	4b15      	ldr	r3, [pc, #84]	@ (800cd78 <HAL_RCC_OscConfig+0x27c>)
 800cd24:	2201      	movs	r2, #1
 800cd26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd28:	f7fb f81e 	bl	8007d68 <HAL_GetTick>
 800cd2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd2e:	e008      	b.n	800cd42 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd30:	f7fb f81a 	bl	8007d68 <HAL_GetTick>
 800cd34:	4602      	mov	r2, r0
 800cd36:	693b      	ldr	r3, [r7, #16]
 800cd38:	1ad3      	subs	r3, r2, r3
 800cd3a:	2b02      	cmp	r3, #2
 800cd3c:	d901      	bls.n	800cd42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800cd3e:	2303      	movs	r3, #3
 800cd40:	e173      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cd42:	4b0b      	ldr	r3, [pc, #44]	@ (800cd70 <HAL_RCC_OscConfig+0x274>)
 800cd44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd46:	f003 0302 	and.w	r3, r3, #2
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d0f0      	beq.n	800cd30 <HAL_RCC_OscConfig+0x234>
 800cd4e:	e01b      	b.n	800cd88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cd50:	4b09      	ldr	r3, [pc, #36]	@ (800cd78 <HAL_RCC_OscConfig+0x27c>)
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd56:	f7fb f807 	bl	8007d68 <HAL_GetTick>
 800cd5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cd5c:	e00e      	b.n	800cd7c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cd5e:	f7fb f803 	bl	8007d68 <HAL_GetTick>
 800cd62:	4602      	mov	r2, r0
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d907      	bls.n	800cd7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e15c      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
 800cd70:	40023800 	.word	0x40023800
 800cd74:	42470000 	.word	0x42470000
 800cd78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cd7c:	4b8a      	ldr	r3, [pc, #552]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cd7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd80:	f003 0302 	and.w	r3, r3, #2
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d1ea      	bne.n	800cd5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f003 0304 	and.w	r3, r3, #4
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 8097 	beq.w	800cec4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd96:	2300      	movs	r3, #0
 800cd98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd9a:	4b83      	ldr	r3, [pc, #524]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cd9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d10f      	bne.n	800cdc6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cda6:	2300      	movs	r3, #0
 800cda8:	60bb      	str	r3, [r7, #8]
 800cdaa:	4b7f      	ldr	r3, [pc, #508]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cdac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdae:	4a7e      	ldr	r2, [pc, #504]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cdb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cdb4:	6413      	str	r3, [r2, #64]	@ 0x40
 800cdb6:	4b7c      	ldr	r3, [pc, #496]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cdb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cdbe:	60bb      	str	r3, [r7, #8]
 800cdc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cdc6:	4b79      	ldr	r3, [pc, #484]	@ (800cfac <HAL_RCC_OscConfig+0x4b0>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d118      	bne.n	800ce04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cdd2:	4b76      	ldr	r3, [pc, #472]	@ (800cfac <HAL_RCC_OscConfig+0x4b0>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a75      	ldr	r2, [pc, #468]	@ (800cfac <HAL_RCC_OscConfig+0x4b0>)
 800cdd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cdde:	f7fa ffc3 	bl	8007d68 <HAL_GetTick>
 800cde2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cde4:	e008      	b.n	800cdf8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cde6:	f7fa ffbf 	bl	8007d68 <HAL_GetTick>
 800cdea:	4602      	mov	r2, r0
 800cdec:	693b      	ldr	r3, [r7, #16]
 800cdee:	1ad3      	subs	r3, r2, r3
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	d901      	bls.n	800cdf8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	e118      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cdf8:	4b6c      	ldr	r3, [pc, #432]	@ (800cfac <HAL_RCC_OscConfig+0x4b0>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d0f0      	beq.n	800cde6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d106      	bne.n	800ce1a <HAL_RCC_OscConfig+0x31e>
 800ce0c:	4b66      	ldr	r3, [pc, #408]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce10:	4a65      	ldr	r2, [pc, #404]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce12:	f043 0301 	orr.w	r3, r3, #1
 800ce16:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce18:	e01c      	b.n	800ce54 <HAL_RCC_OscConfig+0x358>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	689b      	ldr	r3, [r3, #8]
 800ce1e:	2b05      	cmp	r3, #5
 800ce20:	d10c      	bne.n	800ce3c <HAL_RCC_OscConfig+0x340>
 800ce22:	4b61      	ldr	r3, [pc, #388]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce26:	4a60      	ldr	r2, [pc, #384]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce28:	f043 0304 	orr.w	r3, r3, #4
 800ce2c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce2e:	4b5e      	ldr	r3, [pc, #376]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce32:	4a5d      	ldr	r2, [pc, #372]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce34:	f043 0301 	orr.w	r3, r3, #1
 800ce38:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce3a:	e00b      	b.n	800ce54 <HAL_RCC_OscConfig+0x358>
 800ce3c:	4b5a      	ldr	r3, [pc, #360]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce40:	4a59      	ldr	r2, [pc, #356]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce42:	f023 0301 	bic.w	r3, r3, #1
 800ce46:	6713      	str	r3, [r2, #112]	@ 0x70
 800ce48:	4b57      	ldr	r3, [pc, #348]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce4c:	4a56      	ldr	r2, [pc, #344]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce4e:	f023 0304 	bic.w	r3, r3, #4
 800ce52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	689b      	ldr	r3, [r3, #8]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d015      	beq.n	800ce88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce5c:	f7fa ff84 	bl	8007d68 <HAL_GetTick>
 800ce60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce62:	e00a      	b.n	800ce7a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce64:	f7fa ff80 	bl	8007d68 <HAL_GetTick>
 800ce68:	4602      	mov	r2, r0
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	1ad3      	subs	r3, r2, r3
 800ce6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d901      	bls.n	800ce7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ce76:	2303      	movs	r3, #3
 800ce78:	e0d7      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ce7a:	4b4b      	ldr	r3, [pc, #300]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ce7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce7e:	f003 0302 	and.w	r3, r3, #2
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d0ee      	beq.n	800ce64 <HAL_RCC_OscConfig+0x368>
 800ce86:	e014      	b.n	800ceb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ce88:	f7fa ff6e 	bl	8007d68 <HAL_GetTick>
 800ce8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ce8e:	e00a      	b.n	800cea6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce90:	f7fa ff6a 	bl	8007d68 <HAL_GetTick>
 800ce94:	4602      	mov	r2, r0
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d901      	bls.n	800cea6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800cea2:	2303      	movs	r3, #3
 800cea4:	e0c1      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cea6:	4b40      	ldr	r3, [pc, #256]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ceaa:	f003 0302 	and.w	r3, r3, #2
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d1ee      	bne.n	800ce90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d105      	bne.n	800cec4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ceb8:	4b3b      	ldr	r3, [pc, #236]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ceba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cebc:	4a3a      	ldr	r2, [pc, #232]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cebe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cec2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 80ad 	beq.w	800d028 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cece:	4b36      	ldr	r3, [pc, #216]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800ced0:	689b      	ldr	r3, [r3, #8]
 800ced2:	f003 030c 	and.w	r3, r3, #12
 800ced6:	2b08      	cmp	r3, #8
 800ced8:	d060      	beq.n	800cf9c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	699b      	ldr	r3, [r3, #24]
 800cede:	2b02      	cmp	r3, #2
 800cee0:	d145      	bne.n	800cf6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cee2:	4b33      	ldr	r3, [pc, #204]	@ (800cfb0 <HAL_RCC_OscConfig+0x4b4>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cee8:	f7fa ff3e 	bl	8007d68 <HAL_GetTick>
 800ceec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ceee:	e008      	b.n	800cf02 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cef0:	f7fa ff3a 	bl	8007d68 <HAL_GetTick>
 800cef4:	4602      	mov	r2, r0
 800cef6:	693b      	ldr	r3, [r7, #16]
 800cef8:	1ad3      	subs	r3, r2, r3
 800cefa:	2b02      	cmp	r3, #2
 800cefc:	d901      	bls.n	800cf02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800cefe:	2303      	movs	r3, #3
 800cf00:	e093      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf02:	4b29      	ldr	r3, [pc, #164]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1f0      	bne.n	800cef0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	69da      	ldr	r2, [r3, #28]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a1b      	ldr	r3, [r3, #32]
 800cf16:	431a      	orrs	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf1c:	019b      	lsls	r3, r3, #6
 800cf1e:	431a      	orrs	r2, r3
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf24:	085b      	lsrs	r3, r3, #1
 800cf26:	3b01      	subs	r3, #1
 800cf28:	041b      	lsls	r3, r3, #16
 800cf2a:	431a      	orrs	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf30:	061b      	lsls	r3, r3, #24
 800cf32:	431a      	orrs	r2, r3
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf38:	071b      	lsls	r3, r3, #28
 800cf3a:	491b      	ldr	r1, [pc, #108]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cf3c:	4313      	orrs	r3, r2
 800cf3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cf40:	4b1b      	ldr	r3, [pc, #108]	@ (800cfb0 <HAL_RCC_OscConfig+0x4b4>)
 800cf42:	2201      	movs	r2, #1
 800cf44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf46:	f7fa ff0f 	bl	8007d68 <HAL_GetTick>
 800cf4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf4c:	e008      	b.n	800cf60 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf4e:	f7fa ff0b 	bl	8007d68 <HAL_GetTick>
 800cf52:	4602      	mov	r2, r0
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	2b02      	cmp	r3, #2
 800cf5a:	d901      	bls.n	800cf60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800cf5c:	2303      	movs	r3, #3
 800cf5e:	e064      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cf60:	4b11      	ldr	r3, [pc, #68]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d0f0      	beq.n	800cf4e <HAL_RCC_OscConfig+0x452>
 800cf6c:	e05c      	b.n	800d028 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf6e:	4b10      	ldr	r3, [pc, #64]	@ (800cfb0 <HAL_RCC_OscConfig+0x4b4>)
 800cf70:	2200      	movs	r2, #0
 800cf72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf74:	f7fa fef8 	bl	8007d68 <HAL_GetTick>
 800cf78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf7a:	e008      	b.n	800cf8e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cf7c:	f7fa fef4 	bl	8007d68 <HAL_GetTick>
 800cf80:	4602      	mov	r2, r0
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	1ad3      	subs	r3, r2, r3
 800cf86:	2b02      	cmp	r3, #2
 800cf88:	d901      	bls.n	800cf8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800cf8a:	2303      	movs	r3, #3
 800cf8c:	e04d      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf8e:	4b06      	ldr	r3, [pc, #24]	@ (800cfa8 <HAL_RCC_OscConfig+0x4ac>)
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1f0      	bne.n	800cf7c <HAL_RCC_OscConfig+0x480>
 800cf9a:	e045      	b.n	800d028 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	699b      	ldr	r3, [r3, #24]
 800cfa0:	2b01      	cmp	r3, #1
 800cfa2:	d107      	bne.n	800cfb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800cfa4:	2301      	movs	r3, #1
 800cfa6:	e040      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
 800cfa8:	40023800 	.word	0x40023800
 800cfac:	40007000 	.word	0x40007000
 800cfb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cfb4:	4b1f      	ldr	r3, [pc, #124]	@ (800d034 <HAL_RCC_OscConfig+0x538>)
 800cfb6:	685b      	ldr	r3, [r3, #4]
 800cfb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	699b      	ldr	r3, [r3, #24]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d030      	beq.n	800d024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d129      	bne.n	800d024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d122      	bne.n	800d024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cfde:	68fa      	ldr	r2, [r7, #12]
 800cfe0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cfea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d119      	bne.n	800d024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cffa:	085b      	lsrs	r3, r3, #1
 800cffc:	3b01      	subs	r3, #1
 800cffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d000:	429a      	cmp	r2, r3
 800d002:	d10f      	bne.n	800d024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d00e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d010:	429a      	cmp	r2, r3
 800d012:	d107      	bne.n	800d024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d01e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d020:	429a      	cmp	r2, r3
 800d022:	d001      	beq.n	800d028 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800d024:	2301      	movs	r3, #1
 800d026:	e000      	b.n	800d02a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3718      	adds	r7, #24
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	40023800 	.word	0x40023800

0800d038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b082      	sub	sp, #8
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d101      	bne.n	800d04a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d046:	2301      	movs	r3, #1
 800d048:	e07b      	b.n	800d142 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d108      	bne.n	800d064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	685b      	ldr	r3, [r3, #4]
 800d056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d05a:	d009      	beq.n	800d070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	61da      	str	r2, [r3, #28]
 800d062:	e005      	b.n	800d070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d106      	bne.n	800d090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7fa fa42 	bl	8007514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2202      	movs	r2, #2
 800d094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d0a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	685b      	ldr	r3, [r3, #4]
 800d0ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d0b8:	431a      	orrs	r2, r3
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d0c2:	431a      	orrs	r2, r3
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	691b      	ldr	r3, [r3, #16]
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	431a      	orrs	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	695b      	ldr	r3, [r3, #20]
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0e0:	431a      	orrs	r2, r3
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	69db      	ldr	r3, [r3, #28]
 800d0e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6a1b      	ldr	r3, [r3, #32]
 800d0f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d0f4:	ea42 0103 	orr.w	r1, r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	430a      	orrs	r2, r1
 800d106:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	699b      	ldr	r3, [r3, #24]
 800d10c:	0c1b      	lsrs	r3, r3, #16
 800d10e:	f003 0104 	and.w	r1, r3, #4
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d116:	f003 0210 	and.w	r2, r3, #16
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	430a      	orrs	r2, r1
 800d120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	69da      	ldr	r2, [r3, #28]
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2200      	movs	r2, #0
 800d136:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2201      	movs	r2, #1
 800d13c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3708      	adds	r7, #8
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b088      	sub	sp, #32
 800d14e:	af00      	add	r7, sp, #0
 800d150:	60f8      	str	r0, [r7, #12]
 800d152:	60b9      	str	r1, [r7, #8]
 800d154:	603b      	str	r3, [r7, #0]
 800d156:	4613      	mov	r3, r2
 800d158:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d15a:	f7fa fe05 	bl	8007d68 <HAL_GetTick>
 800d15e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d160:	88fb      	ldrh	r3, [r7, #6]
 800d162:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d16a:	b2db      	uxtb	r3, r3
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d001      	beq.n	800d174 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d170:	2302      	movs	r3, #2
 800d172:	e12a      	b.n	800d3ca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <HAL_SPI_Transmit+0x36>
 800d17a:	88fb      	ldrh	r3, [r7, #6]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d101      	bne.n	800d184 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d180:	2301      	movs	r3, #1
 800d182:	e122      	b.n	800d3ca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d18a:	2b01      	cmp	r3, #1
 800d18c:	d101      	bne.n	800d192 <HAL_SPI_Transmit+0x48>
 800d18e:	2302      	movs	r3, #2
 800d190:	e11b      	b.n	800d3ca <HAL_SPI_Transmit+0x280>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2201      	movs	r2, #1
 800d196:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2203      	movs	r2, #3
 800d19e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	88fa      	ldrh	r2, [r7, #6]
 800d1b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	88fa      	ldrh	r2, [r7, #6]
 800d1b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1e0:	d10f      	bne.n	800d202 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d1f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d200:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d20c:	2b40      	cmp	r3, #64	@ 0x40
 800d20e:	d007      	beq.n	800d220 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	681a      	ldr	r2, [r3, #0]
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d21e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	68db      	ldr	r3, [r3, #12]
 800d224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d228:	d152      	bne.n	800d2d0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	685b      	ldr	r3, [r3, #4]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d002      	beq.n	800d238 <HAL_SPI_Transmit+0xee>
 800d232:	8b7b      	ldrh	r3, [r7, #26]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d145      	bne.n	800d2c4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d23c:	881a      	ldrh	r2, [r3, #0]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d248:	1c9a      	adds	r2, r3, #2
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d252:	b29b      	uxth	r3, r3
 800d254:	3b01      	subs	r3, #1
 800d256:	b29a      	uxth	r2, r3
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d25c:	e032      	b.n	800d2c4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	689b      	ldr	r3, [r3, #8]
 800d264:	f003 0302 	and.w	r3, r3, #2
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d112      	bne.n	800d292 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d270:	881a      	ldrh	r2, [r3, #0]
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d27c:	1c9a      	adds	r2, r3, #2
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d286:	b29b      	uxth	r3, r3
 800d288:	3b01      	subs	r3, #1
 800d28a:	b29a      	uxth	r2, r3
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d290:	e018      	b.n	800d2c4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d292:	f7fa fd69 	bl	8007d68 <HAL_GetTick>
 800d296:	4602      	mov	r2, r0
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	1ad3      	subs	r3, r2, r3
 800d29c:	683a      	ldr	r2, [r7, #0]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d803      	bhi.n	800d2aa <HAL_SPI_Transmit+0x160>
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a8:	d102      	bne.n	800d2b0 <HAL_SPI_Transmit+0x166>
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d109      	bne.n	800d2c4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d2c0:	2303      	movs	r3, #3
 800d2c2:	e082      	b.n	800d3ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1c7      	bne.n	800d25e <HAL_SPI_Transmit+0x114>
 800d2ce:	e053      	b.n	800d378 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d002      	beq.n	800d2de <HAL_SPI_Transmit+0x194>
 800d2d8:	8b7b      	ldrh	r3, [r7, #26]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d147      	bne.n	800d36e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	330c      	adds	r3, #12
 800d2e8:	7812      	ldrb	r2, [r2, #0]
 800d2ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2f0:	1c5a      	adds	r2, r3, #1
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d304:	e033      	b.n	800d36e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	f003 0302 	and.w	r3, r3, #2
 800d310:	2b02      	cmp	r3, #2
 800d312:	d113      	bne.n	800d33c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	330c      	adds	r3, #12
 800d31e:	7812      	ldrb	r2, [r2, #0]
 800d320:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d326:	1c5a      	adds	r2, r3, #1
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d330:	b29b      	uxth	r3, r3
 800d332:	3b01      	subs	r3, #1
 800d334:	b29a      	uxth	r2, r3
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d33a:	e018      	b.n	800d36e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d33c:	f7fa fd14 	bl	8007d68 <HAL_GetTick>
 800d340:	4602      	mov	r2, r0
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	1ad3      	subs	r3, r2, r3
 800d346:	683a      	ldr	r2, [r7, #0]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d803      	bhi.n	800d354 <HAL_SPI_Transmit+0x20a>
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d352:	d102      	bne.n	800d35a <HAL_SPI_Transmit+0x210>
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d109      	bne.n	800d36e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	2201      	movs	r2, #1
 800d35e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d36a:	2303      	movs	r3, #3
 800d36c:	e02d      	b.n	800d3ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d372:	b29b      	uxth	r3, r3
 800d374:	2b00      	cmp	r3, #0
 800d376:	d1c6      	bne.n	800d306 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d378:	69fa      	ldr	r2, [r7, #28]
 800d37a:	6839      	ldr	r1, [r7, #0]
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f000 fa59 	bl	800d834 <SPI_EndRxTxTransaction>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d002      	beq.n	800d38e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	2220      	movs	r2, #32
 800d38c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	689b      	ldr	r3, [r3, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d10a      	bne.n	800d3ac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d396:	2300      	movs	r3, #0
 800d398:	617b      	str	r3, [r7, #20]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	617b      	str	r3, [r7, #20]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	617b      	str	r3, [r7, #20]
 800d3aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d001      	beq.n	800d3c8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	e000      	b.n	800d3ca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800d3c8:	2300      	movs	r3, #0
  }
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3720      	adds	r7, #32
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b08a      	sub	sp, #40	@ 0x28
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	60f8      	str	r0, [r7, #12]
 800d3da:	60b9      	str	r1, [r7, #8]
 800d3dc:	607a      	str	r2, [r7, #4]
 800d3de:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3e4:	f7fa fcc0 	bl	8007d68 <HAL_GetTick>
 800d3e8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d3f0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	685b      	ldr	r3, [r3, #4]
 800d3f6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d3f8:	887b      	ldrh	r3, [r7, #2]
 800d3fa:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d3fc:	7ffb      	ldrb	r3, [r7, #31]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d00c      	beq.n	800d41c <HAL_SPI_TransmitReceive+0x4a>
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d408:	d106      	bne.n	800d418 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	689b      	ldr	r3, [r3, #8]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d102      	bne.n	800d418 <HAL_SPI_TransmitReceive+0x46>
 800d412:	7ffb      	ldrb	r3, [r7, #31]
 800d414:	2b04      	cmp	r3, #4
 800d416:	d001      	beq.n	800d41c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800d418:	2302      	movs	r3, #2
 800d41a:	e17f      	b.n	800d71c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d005      	beq.n	800d42e <HAL_SPI_TransmitReceive+0x5c>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d002      	beq.n	800d42e <HAL_SPI_TransmitReceive+0x5c>
 800d428:	887b      	ldrh	r3, [r7, #2]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e174      	b.n	800d71c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d101      	bne.n	800d440 <HAL_SPI_TransmitReceive+0x6e>
 800d43c:	2302      	movs	r3, #2
 800d43e:	e16d      	b.n	800d71c <HAL_SPI_TransmitReceive+0x34a>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	2b04      	cmp	r3, #4
 800d452:	d003      	beq.n	800d45c <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2205      	movs	r2, #5
 800d458:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2200      	movs	r2, #0
 800d460:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	887a      	ldrh	r2, [r7, #2]
 800d46c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	887a      	ldrh	r2, [r7, #2]
 800d472:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	68ba      	ldr	r2, [r7, #8]
 800d478:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	887a      	ldrh	r2, [r7, #2]
 800d47e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	887a      	ldrh	r2, [r7, #2]
 800d484:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2200      	movs	r2, #0
 800d48a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2200      	movs	r2, #0
 800d490:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d49c:	2b40      	cmp	r3, #64	@ 0x40
 800d49e:	d007      	beq.n	800d4b0 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d4ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d4b8:	d17e      	bne.n	800d5b8 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d002      	beq.n	800d4c8 <HAL_SPI_TransmitReceive+0xf6>
 800d4c2:	8afb      	ldrh	r3, [r7, #22]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d16c      	bne.n	800d5a2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4cc:	881a      	ldrh	r2, [r3, #0]
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4d8:	1c9a      	adds	r2, r3, #2
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	3b01      	subs	r3, #1
 800d4e6:	b29a      	uxth	r2, r3
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d4ec:	e059      	b.n	800d5a2 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	689b      	ldr	r3, [r3, #8]
 800d4f4:	f003 0302 	and.w	r3, r3, #2
 800d4f8:	2b02      	cmp	r3, #2
 800d4fa:	d11b      	bne.n	800d534 <HAL_SPI_TransmitReceive+0x162>
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d500:	b29b      	uxth	r3, r3
 800d502:	2b00      	cmp	r3, #0
 800d504:	d016      	beq.n	800d534 <HAL_SPI_TransmitReceive+0x162>
 800d506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d508:	2b01      	cmp	r3, #1
 800d50a:	d113      	bne.n	800d534 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d510:	881a      	ldrh	r2, [r3, #0]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d51c:	1c9a      	adds	r2, r3, #2
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d526:	b29b      	uxth	r3, r3
 800d528:	3b01      	subs	r3, #1
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d530:	2300      	movs	r3, #0
 800d532:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	689b      	ldr	r3, [r3, #8]
 800d53a:	f003 0301 	and.w	r3, r3, #1
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d119      	bne.n	800d576 <HAL_SPI_TransmitReceive+0x1a4>
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d546:	b29b      	uxth	r3, r3
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d014      	beq.n	800d576 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	68da      	ldr	r2, [r3, #12]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d556:	b292      	uxth	r2, r2
 800d558:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d55e:	1c9a      	adds	r2, r3, #2
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d568:	b29b      	uxth	r3, r3
 800d56a:	3b01      	subs	r3, #1
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d572:	2301      	movs	r3, #1
 800d574:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d576:	f7fa fbf7 	bl	8007d68 <HAL_GetTick>
 800d57a:	4602      	mov	r2, r0
 800d57c:	6a3b      	ldr	r3, [r7, #32]
 800d57e:	1ad3      	subs	r3, r2, r3
 800d580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d582:	429a      	cmp	r2, r3
 800d584:	d80d      	bhi.n	800d5a2 <HAL_SPI_TransmitReceive+0x1d0>
 800d586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d58c:	d009      	beq.n	800d5a2 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2201      	movs	r2, #1
 800d592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2200      	movs	r2, #0
 800d59a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800d59e:	2303      	movs	r3, #3
 800d5a0:	e0bc      	b.n	800d71c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1a0      	bne.n	800d4ee <HAL_SPI_TransmitReceive+0x11c>
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d19b      	bne.n	800d4ee <HAL_SPI_TransmitReceive+0x11c>
 800d5b6:	e082      	b.n	800d6be <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	685b      	ldr	r3, [r3, #4]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d002      	beq.n	800d5c6 <HAL_SPI_TransmitReceive+0x1f4>
 800d5c0:	8afb      	ldrh	r3, [r7, #22]
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d171      	bne.n	800d6aa <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	330c      	adds	r3, #12
 800d5d0:	7812      	ldrb	r2, [r2, #0]
 800d5d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d5ec:	e05d      	b.n	800d6aa <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	689b      	ldr	r3, [r3, #8]
 800d5f4:	f003 0302 	and.w	r3, r3, #2
 800d5f8:	2b02      	cmp	r3, #2
 800d5fa:	d11c      	bne.n	800d636 <HAL_SPI_TransmitReceive+0x264>
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d600:	b29b      	uxth	r3, r3
 800d602:	2b00      	cmp	r3, #0
 800d604:	d017      	beq.n	800d636 <HAL_SPI_TransmitReceive+0x264>
 800d606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d114      	bne.n	800d636 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	330c      	adds	r3, #12
 800d616:	7812      	ldrb	r2, [r2, #0]
 800d618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d61e:	1c5a      	adds	r2, r3, #1
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d628:	b29b      	uxth	r3, r3
 800d62a:	3b01      	subs	r3, #1
 800d62c:	b29a      	uxth	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d632:	2300      	movs	r3, #0
 800d634:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	f003 0301 	and.w	r3, r3, #1
 800d640:	2b01      	cmp	r3, #1
 800d642:	d119      	bne.n	800d678 <HAL_SPI_TransmitReceive+0x2a6>
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d648:	b29b      	uxth	r3, r3
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d014      	beq.n	800d678 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68da      	ldr	r2, [r3, #12]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d658:	b2d2      	uxtb	r2, r2
 800d65a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d660:	1c5a      	adds	r2, r3, #1
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	3b01      	subs	r3, #1
 800d66e:	b29a      	uxth	r2, r3
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d674:	2301      	movs	r3, #1
 800d676:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d678:	f7fa fb76 	bl	8007d68 <HAL_GetTick>
 800d67c:	4602      	mov	r2, r0
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d684:	429a      	cmp	r2, r3
 800d686:	d803      	bhi.n	800d690 <HAL_SPI_TransmitReceive+0x2be>
 800d688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d68e:	d102      	bne.n	800d696 <HAL_SPI_TransmitReceive+0x2c4>
 800d690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d692:	2b00      	cmp	r3, #0
 800d694:	d109      	bne.n	800d6aa <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2201      	movs	r2, #1
 800d69a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e038      	b.n	800d71c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d19c      	bne.n	800d5ee <HAL_SPI_TransmitReceive+0x21c>
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d197      	bne.n	800d5ee <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d6be:	6a3a      	ldr	r2, [r7, #32]
 800d6c0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d6c2:	68f8      	ldr	r0, [r7, #12]
 800d6c4:	f000 f8b6 	bl	800d834 <SPI_EndRxTxTransaction>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d008      	beq.n	800d6e0 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2220      	movs	r2, #32
 800d6d2:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	e01d      	b.n	800d71c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	689b      	ldr	r3, [r3, #8]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d10a      	bne.n	800d6fe <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	613b      	str	r3, [r7, #16]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	613b      	str	r3, [r7, #16]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	689b      	ldr	r3, [r3, #8]
 800d6fa:	613b      	str	r3, [r7, #16]
 800d6fc:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	2201      	movs	r2, #1
 800d702:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2200      	movs	r2, #0
 800d70a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d712:	2b00      	cmp	r3, #0
 800d714:	d001      	beq.n	800d71a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800d716:	2301      	movs	r3, #1
 800d718:	e000      	b.n	800d71c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800d71a:	2300      	movs	r3, #0
  }
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3728      	adds	r7, #40	@ 0x28
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b088      	sub	sp, #32
 800d728:	af00      	add	r7, sp, #0
 800d72a:	60f8      	str	r0, [r7, #12]
 800d72c:	60b9      	str	r1, [r7, #8]
 800d72e:	603b      	str	r3, [r7, #0]
 800d730:	4613      	mov	r3, r2
 800d732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800d734:	f7fa fb18 	bl	8007d68 <HAL_GetTick>
 800d738:	4602      	mov	r2, r0
 800d73a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d73c:	1a9b      	subs	r3, r3, r2
 800d73e:	683a      	ldr	r2, [r7, #0]
 800d740:	4413      	add	r3, r2
 800d742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800d744:	f7fa fb10 	bl	8007d68 <HAL_GetTick>
 800d748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800d74a:	4b39      	ldr	r3, [pc, #228]	@ (800d830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	015b      	lsls	r3, r3, #5
 800d750:	0d1b      	lsrs	r3, r3, #20
 800d752:	69fa      	ldr	r2, [r7, #28]
 800d754:	fb02 f303 	mul.w	r3, r2, r3
 800d758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d75a:	e055      	b.n	800d808 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d762:	d051      	beq.n	800d808 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d764:	f7fa fb00 	bl	8007d68 <HAL_GetTick>
 800d768:	4602      	mov	r2, r0
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	1ad3      	subs	r3, r2, r3
 800d76e:	69fa      	ldr	r2, [r7, #28]
 800d770:	429a      	cmp	r2, r3
 800d772:	d902      	bls.n	800d77a <SPI_WaitFlagStateUntilTimeout+0x56>
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d13d      	bne.n	800d7f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	685a      	ldr	r2, [r3, #4]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d792:	d111      	bne.n	800d7b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d79c:	d004      	beq.n	800d7a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7a6:	d107      	bne.n	800d7b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d7b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d7c0:	d10f      	bne.n	800d7e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d7e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800d7f2:	2303      	movs	r3, #3
 800d7f4:	e018      	b.n	800d828 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d7f6:	697b      	ldr	r3, [r7, #20]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d102      	bne.n	800d802 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	61fb      	str	r3, [r7, #28]
 800d800:	e002      	b.n	800d808 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	3b01      	subs	r3, #1
 800d806:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	689a      	ldr	r2, [r3, #8]
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	4013      	ands	r3, r2
 800d812:	68ba      	ldr	r2, [r7, #8]
 800d814:	429a      	cmp	r2, r3
 800d816:	bf0c      	ite	eq
 800d818:	2301      	moveq	r3, #1
 800d81a:	2300      	movne	r3, #0
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	461a      	mov	r2, r3
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	429a      	cmp	r2, r3
 800d824:	d19a      	bne.n	800d75c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3720      	adds	r7, #32
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	20000038 	.word	0x20000038

0800d834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b088      	sub	sp, #32
 800d838:	af02      	add	r7, sp, #8
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	2201      	movs	r2, #1
 800d848:	2102      	movs	r1, #2
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	f7ff ff6a 	bl	800d724 <SPI_WaitFlagStateUntilTimeout>
 800d850:	4603      	mov	r3, r0
 800d852:	2b00      	cmp	r3, #0
 800d854:	d007      	beq.n	800d866 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d85a:	f043 0220 	orr.w	r2, r3, #32
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800d862:	2303      	movs	r3, #3
 800d864:	e032      	b.n	800d8cc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d866:	4b1b      	ldr	r3, [pc, #108]	@ (800d8d4 <SPI_EndRxTxTransaction+0xa0>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a1b      	ldr	r2, [pc, #108]	@ (800d8d8 <SPI_EndRxTxTransaction+0xa4>)
 800d86c:	fba2 2303 	umull	r2, r3, r2, r3
 800d870:	0d5b      	lsrs	r3, r3, #21
 800d872:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d876:	fb02 f303 	mul.w	r3, r2, r3
 800d87a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d884:	d112      	bne.n	800d8ac <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	2200      	movs	r2, #0
 800d88e:	2180      	movs	r1, #128	@ 0x80
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f7ff ff47 	bl	800d724 <SPI_WaitFlagStateUntilTimeout>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d016      	beq.n	800d8ca <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8a0:	f043 0220 	orr.w	r2, r3, #32
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800d8a8:	2303      	movs	r3, #3
 800d8aa:	e00f      	b.n	800d8cc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d8ac:	697b      	ldr	r3, [r7, #20]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00a      	beq.n	800d8c8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	3b01      	subs	r3, #1
 800d8b6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d8c2:	2b80      	cmp	r3, #128	@ 0x80
 800d8c4:	d0f2      	beq.n	800d8ac <SPI_EndRxTxTransaction+0x78>
 800d8c6:	e000      	b.n	800d8ca <SPI_EndRxTxTransaction+0x96>
        break;
 800d8c8:	bf00      	nop
  }

  return HAL_OK;
 800d8ca:	2300      	movs	r3, #0
}
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	3718      	adds	r7, #24
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	20000038 	.word	0x20000038
 800d8d8:	165e9f81 	.word	0x165e9f81

0800d8dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d101      	bne.n	800d8ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e041      	b.n	800d972 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d106      	bne.n	800d908 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f7f9 fe4e 	bl	80075a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2202      	movs	r2, #2
 800d90c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	3304      	adds	r3, #4
 800d918:	4619      	mov	r1, r3
 800d91a:	4610      	mov	r0, r2
 800d91c:	f000 fa7e 	bl	800de1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2201      	movs	r2, #1
 800d924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2201      	movs	r2, #1
 800d93c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2201      	movs	r2, #1
 800d944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2201      	movs	r2, #1
 800d94c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2201      	movs	r2, #1
 800d954:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2201      	movs	r2, #1
 800d964:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d970:	2300      	movs	r3, #0
}
 800d972:	4618      	mov	r0, r3
 800d974:	3708      	adds	r7, #8
 800d976:	46bd      	mov	sp, r7
 800d978:	bd80      	pop	{r7, pc}
	...

0800d97c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	2b01      	cmp	r3, #1
 800d98e:	d001      	beq.n	800d994 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d990:	2301      	movs	r3, #1
 800d992:	e04e      	b.n	800da32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2202      	movs	r2, #2
 800d998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	68da      	ldr	r2, [r3, #12]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	f042 0201 	orr.w	r2, r2, #1
 800d9aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a23      	ldr	r2, [pc, #140]	@ (800da40 <HAL_TIM_Base_Start_IT+0xc4>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d022      	beq.n	800d9fc <HAL_TIM_Base_Start_IT+0x80>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d9be:	d01d      	beq.n	800d9fc <HAL_TIM_Base_Start_IT+0x80>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4a1f      	ldr	r2, [pc, #124]	@ (800da44 <HAL_TIM_Base_Start_IT+0xc8>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d018      	beq.n	800d9fc <HAL_TIM_Base_Start_IT+0x80>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a1e      	ldr	r2, [pc, #120]	@ (800da48 <HAL_TIM_Base_Start_IT+0xcc>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d013      	beq.n	800d9fc <HAL_TIM_Base_Start_IT+0x80>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a1c      	ldr	r2, [pc, #112]	@ (800da4c <HAL_TIM_Base_Start_IT+0xd0>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d00e      	beq.n	800d9fc <HAL_TIM_Base_Start_IT+0x80>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a1b      	ldr	r2, [pc, #108]	@ (800da50 <HAL_TIM_Base_Start_IT+0xd4>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d009      	beq.n	800d9fc <HAL_TIM_Base_Start_IT+0x80>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a19      	ldr	r2, [pc, #100]	@ (800da54 <HAL_TIM_Base_Start_IT+0xd8>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d004      	beq.n	800d9fc <HAL_TIM_Base_Start_IT+0x80>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a18      	ldr	r2, [pc, #96]	@ (800da58 <HAL_TIM_Base_Start_IT+0xdc>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d111      	bne.n	800da20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	f003 0307 	and.w	r3, r3, #7
 800da06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	2b06      	cmp	r3, #6
 800da0c:	d010      	beq.n	800da30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f042 0201 	orr.w	r2, r2, #1
 800da1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800da1e:	e007      	b.n	800da30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	f042 0201 	orr.w	r2, r2, #1
 800da2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	40010000 	.word	0x40010000
 800da44:	40000400 	.word	0x40000400
 800da48:	40000800 	.word	0x40000800
 800da4c:	40000c00 	.word	0x40000c00
 800da50:	40010400 	.word	0x40010400
 800da54:	40014000 	.word	0x40014000
 800da58:	40001800 	.word	0x40001800

0800da5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b084      	sub	sp, #16
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	f003 0302 	and.w	r3, r3, #2
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d020      	beq.n	800dac0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	f003 0302 	and.w	r3, r3, #2
 800da84:	2b00      	cmp	r3, #0
 800da86:	d01b      	beq.n	800dac0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	f06f 0202 	mvn.w	r2, #2
 800da90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2201      	movs	r2, #1
 800da96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	699b      	ldr	r3, [r3, #24]
 800da9e:	f003 0303 	and.w	r3, r3, #3
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d003      	beq.n	800daae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 f999 	bl	800ddde <HAL_TIM_IC_CaptureCallback>
 800daac:	e005      	b.n	800daba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 f98b 	bl	800ddca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f99c 	bl	800ddf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	f003 0304 	and.w	r3, r3, #4
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d020      	beq.n	800db0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	f003 0304 	and.w	r3, r3, #4
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d01b      	beq.n	800db0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f06f 0204 	mvn.w	r2, #4
 800dadc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	2202      	movs	r2, #2
 800dae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d003      	beq.n	800dafa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 f973 	bl	800ddde <HAL_TIM_IC_CaptureCallback>
 800daf8:	e005      	b.n	800db06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f965 	bl	800ddca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f976 	bl	800ddf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	f003 0308 	and.w	r3, r3, #8
 800db12:	2b00      	cmp	r3, #0
 800db14:	d020      	beq.n	800db58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f003 0308 	and.w	r3, r3, #8
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d01b      	beq.n	800db58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f06f 0208 	mvn.w	r2, #8
 800db28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2204      	movs	r2, #4
 800db2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	69db      	ldr	r3, [r3, #28]
 800db36:	f003 0303 	and.w	r3, r3, #3
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d003      	beq.n	800db46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f94d 	bl	800ddde <HAL_TIM_IC_CaptureCallback>
 800db44:	e005      	b.n	800db52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db46:	6878      	ldr	r0, [r7, #4]
 800db48:	f000 f93f 	bl	800ddca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 f950 	bl	800ddf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	2200      	movs	r2, #0
 800db56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	f003 0310 	and.w	r3, r3, #16
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d020      	beq.n	800dba4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f003 0310 	and.w	r3, r3, #16
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d01b      	beq.n	800dba4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f06f 0210 	mvn.w	r2, #16
 800db74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2208      	movs	r2, #8
 800db7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	69db      	ldr	r3, [r3, #28]
 800db82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800db86:	2b00      	cmp	r3, #0
 800db88:	d003      	beq.n	800db92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db8a:	6878      	ldr	r0, [r7, #4]
 800db8c:	f000 f927 	bl	800ddde <HAL_TIM_IC_CaptureCallback>
 800db90:	e005      	b.n	800db9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f919 	bl	800ddca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db98:	6878      	ldr	r0, [r7, #4]
 800db9a:	f000 f92a 	bl	800ddf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	f003 0301 	and.w	r3, r3, #1
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00c      	beq.n	800dbc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f003 0301 	and.w	r3, r3, #1
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d007      	beq.n	800dbc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f06f 0201 	mvn.w	r2, #1
 800dbc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f7f7 fe9c 	bl	8005900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00c      	beq.n	800dbec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d007      	beq.n	800dbec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800dbe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 fade 	bl	800e1a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00c      	beq.n	800dc10 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d007      	beq.n	800dc10 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dc08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f8fb 	bl	800de06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	f003 0320 	and.w	r3, r3, #32
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d00c      	beq.n	800dc34 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	f003 0320 	and.w	r3, r3, #32
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d007      	beq.n	800dc34 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f06f 0220 	mvn.w	r2, #32
 800dc2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc2e:	6878      	ldr	r0, [r7, #4]
 800dc30:	f000 fab0 	bl	800e194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dc34:	bf00      	nop
 800dc36:	3710      	adds	r7, #16
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b084      	sub	sp, #16
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc46:	2300      	movs	r3, #0
 800dc48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d101      	bne.n	800dc58 <HAL_TIM_ConfigClockSource+0x1c>
 800dc54:	2302      	movs	r3, #2
 800dc56:	e0b4      	b.n	800ddc2 <HAL_TIM_ConfigClockSource+0x186>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2202      	movs	r2, #2
 800dc64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800dc76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800dc7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68ba      	ldr	r2, [r7, #8]
 800dc86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc90:	d03e      	beq.n	800dd10 <HAL_TIM_ConfigClockSource+0xd4>
 800dc92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc96:	f200 8087 	bhi.w	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
 800dc9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc9e:	f000 8086 	beq.w	800ddae <HAL_TIM_ConfigClockSource+0x172>
 800dca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dca6:	d87f      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
 800dca8:	2b70      	cmp	r3, #112	@ 0x70
 800dcaa:	d01a      	beq.n	800dce2 <HAL_TIM_ConfigClockSource+0xa6>
 800dcac:	2b70      	cmp	r3, #112	@ 0x70
 800dcae:	d87b      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
 800dcb0:	2b60      	cmp	r3, #96	@ 0x60
 800dcb2:	d050      	beq.n	800dd56 <HAL_TIM_ConfigClockSource+0x11a>
 800dcb4:	2b60      	cmp	r3, #96	@ 0x60
 800dcb6:	d877      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
 800dcb8:	2b50      	cmp	r3, #80	@ 0x50
 800dcba:	d03c      	beq.n	800dd36 <HAL_TIM_ConfigClockSource+0xfa>
 800dcbc:	2b50      	cmp	r3, #80	@ 0x50
 800dcbe:	d873      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
 800dcc0:	2b40      	cmp	r3, #64	@ 0x40
 800dcc2:	d058      	beq.n	800dd76 <HAL_TIM_ConfigClockSource+0x13a>
 800dcc4:	2b40      	cmp	r3, #64	@ 0x40
 800dcc6:	d86f      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
 800dcc8:	2b30      	cmp	r3, #48	@ 0x30
 800dcca:	d064      	beq.n	800dd96 <HAL_TIM_ConfigClockSource+0x15a>
 800dccc:	2b30      	cmp	r3, #48	@ 0x30
 800dcce:	d86b      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
 800dcd0:	2b20      	cmp	r3, #32
 800dcd2:	d060      	beq.n	800dd96 <HAL_TIM_ConfigClockSource+0x15a>
 800dcd4:	2b20      	cmp	r3, #32
 800dcd6:	d867      	bhi.n	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d05c      	beq.n	800dd96 <HAL_TIM_ConfigClockSource+0x15a>
 800dcdc:	2b10      	cmp	r3, #16
 800dcde:	d05a      	beq.n	800dd96 <HAL_TIM_ConfigClockSource+0x15a>
 800dce0:	e062      	b.n	800dda8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dcf2:	f000 f9b3 	bl	800e05c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800dd04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	68ba      	ldr	r2, [r7, #8]
 800dd0c:	609a      	str	r2, [r3, #8]
      break;
 800dd0e:	e04f      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dd20:	f000 f99c 	bl	800e05c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	689a      	ldr	r2, [r3, #8]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dd32:	609a      	str	r2, [r3, #8]
      break;
 800dd34:	e03c      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd42:	461a      	mov	r2, r3
 800dd44:	f000 f910 	bl	800df68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2150      	movs	r1, #80	@ 0x50
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 f969 	bl	800e026 <TIM_ITRx_SetConfig>
      break;
 800dd54:	e02c      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dd62:	461a      	mov	r2, r3
 800dd64:	f000 f92f 	bl	800dfc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2160      	movs	r1, #96	@ 0x60
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f000 f959 	bl	800e026 <TIM_ITRx_SetConfig>
      break;
 800dd74:	e01c      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd82:	461a      	mov	r2, r3
 800dd84:	f000 f8f0 	bl	800df68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2140      	movs	r1, #64	@ 0x40
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f000 f949 	bl	800e026 <TIM_ITRx_SetConfig>
      break;
 800dd94:	e00c      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4610      	mov	r0, r2
 800dda2:	f000 f940 	bl	800e026 <TIM_ITRx_SetConfig>
      break;
 800dda6:	e003      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800dda8:	2301      	movs	r3, #1
 800ddaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ddac:	e000      	b.n	800ddb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ddae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ddc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ddca:	b480      	push	{r7}
 800ddcc:	b083      	sub	sp, #12
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ddd2:	bf00      	nop
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ddde:	b480      	push	{r7}
 800dde0:	b083      	sub	sp, #12
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dde6:	bf00      	nop
 800dde8:	370c      	adds	r7, #12
 800ddea:	46bd      	mov	sp, r7
 800ddec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf0:	4770      	bx	lr

0800ddf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ddf2:	b480      	push	{r7}
 800ddf4:	b083      	sub	sp, #12
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ddfa:	bf00      	nop
 800ddfc:	370c      	adds	r7, #12
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr

0800de06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800de06:	b480      	push	{r7}
 800de08:	b083      	sub	sp, #12
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800de0e:	bf00      	nop
 800de10:	370c      	adds	r7, #12
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
	...

0800de1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b085      	sub	sp, #20
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4a43      	ldr	r2, [pc, #268]	@ (800df3c <TIM_Base_SetConfig+0x120>)
 800de30:	4293      	cmp	r3, r2
 800de32:	d013      	beq.n	800de5c <TIM_Base_SetConfig+0x40>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de3a:	d00f      	beq.n	800de5c <TIM_Base_SetConfig+0x40>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a40      	ldr	r2, [pc, #256]	@ (800df40 <TIM_Base_SetConfig+0x124>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d00b      	beq.n	800de5c <TIM_Base_SetConfig+0x40>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	4a3f      	ldr	r2, [pc, #252]	@ (800df44 <TIM_Base_SetConfig+0x128>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d007      	beq.n	800de5c <TIM_Base_SetConfig+0x40>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a3e      	ldr	r2, [pc, #248]	@ (800df48 <TIM_Base_SetConfig+0x12c>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d003      	beq.n	800de5c <TIM_Base_SetConfig+0x40>
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	4a3d      	ldr	r2, [pc, #244]	@ (800df4c <TIM_Base_SetConfig+0x130>)
 800de58:	4293      	cmp	r3, r2
 800de5a:	d108      	bne.n	800de6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	4313      	orrs	r3, r2
 800de6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a32      	ldr	r2, [pc, #200]	@ (800df3c <TIM_Base_SetConfig+0x120>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d02b      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de7c:	d027      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a2f      	ldr	r2, [pc, #188]	@ (800df40 <TIM_Base_SetConfig+0x124>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d023      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a2e      	ldr	r2, [pc, #184]	@ (800df44 <TIM_Base_SetConfig+0x128>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d01f      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4a2d      	ldr	r2, [pc, #180]	@ (800df48 <TIM_Base_SetConfig+0x12c>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d01b      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4a2c      	ldr	r2, [pc, #176]	@ (800df4c <TIM_Base_SetConfig+0x130>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d017      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4a2b      	ldr	r2, [pc, #172]	@ (800df50 <TIM_Base_SetConfig+0x134>)
 800dea2:	4293      	cmp	r3, r2
 800dea4:	d013      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	4a2a      	ldr	r2, [pc, #168]	@ (800df54 <TIM_Base_SetConfig+0x138>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d00f      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a29      	ldr	r2, [pc, #164]	@ (800df58 <TIM_Base_SetConfig+0x13c>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d00b      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	4a28      	ldr	r2, [pc, #160]	@ (800df5c <TIM_Base_SetConfig+0x140>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d007      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	4a27      	ldr	r2, [pc, #156]	@ (800df60 <TIM_Base_SetConfig+0x144>)
 800dec2:	4293      	cmp	r3, r2
 800dec4:	d003      	beq.n	800dece <TIM_Base_SetConfig+0xb2>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	4a26      	ldr	r2, [pc, #152]	@ (800df64 <TIM_Base_SetConfig+0x148>)
 800deca:	4293      	cmp	r3, r2
 800decc:	d108      	bne.n	800dee0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ded4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	68db      	ldr	r3, [r3, #12]
 800deda:	68fa      	ldr	r2, [r7, #12]
 800dedc:	4313      	orrs	r3, r2
 800dede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	4313      	orrs	r3, r2
 800deec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	689a      	ldr	r2, [r3, #8]
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	4a0e      	ldr	r2, [pc, #56]	@ (800df3c <TIM_Base_SetConfig+0x120>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d003      	beq.n	800df0e <TIM_Base_SetConfig+0xf2>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	4a10      	ldr	r2, [pc, #64]	@ (800df4c <TIM_Base_SetConfig+0x130>)
 800df0a:	4293      	cmp	r3, r2
 800df0c:	d103      	bne.n	800df16 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	691a      	ldr	r2, [r3, #16]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f043 0204 	orr.w	r2, r3, #4
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	2201      	movs	r2, #1
 800df26:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	601a      	str	r2, [r3, #0]
}
 800df2e:	bf00      	nop
 800df30:	3714      	adds	r7, #20
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop
 800df3c:	40010000 	.word	0x40010000
 800df40:	40000400 	.word	0x40000400
 800df44:	40000800 	.word	0x40000800
 800df48:	40000c00 	.word	0x40000c00
 800df4c:	40010400 	.word	0x40010400
 800df50:	40014000 	.word	0x40014000
 800df54:	40014400 	.word	0x40014400
 800df58:	40014800 	.word	0x40014800
 800df5c:	40001800 	.word	0x40001800
 800df60:	40001c00 	.word	0x40001c00
 800df64:	40002000 	.word	0x40002000

0800df68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800df68:	b480      	push	{r7}
 800df6a:	b087      	sub	sp, #28
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	60f8      	str	r0, [r7, #12]
 800df70:	60b9      	str	r1, [r7, #8]
 800df72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	6a1b      	ldr	r3, [r3, #32]
 800df78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	6a1b      	ldr	r3, [r3, #32]
 800df7e:	f023 0201 	bic.w	r2, r3, #1
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	699b      	ldr	r3, [r3, #24]
 800df8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800df92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	011b      	lsls	r3, r3, #4
 800df98:	693a      	ldr	r2, [r7, #16]
 800df9a:	4313      	orrs	r3, r2
 800df9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	f023 030a 	bic.w	r3, r3, #10
 800dfa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dfa6:	697a      	ldr	r2, [r7, #20]
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	4313      	orrs	r3, r2
 800dfac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	693a      	ldr	r2, [r7, #16]
 800dfb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	621a      	str	r2, [r3, #32]
}
 800dfba:	bf00      	nop
 800dfbc:	371c      	adds	r7, #28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr

0800dfc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dfc6:	b480      	push	{r7}
 800dfc8:	b087      	sub	sp, #28
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	60f8      	str	r0, [r7, #12]
 800dfce:	60b9      	str	r1, [r7, #8]
 800dfd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	6a1b      	ldr	r3, [r3, #32]
 800dfdc:	f023 0210 	bic.w	r2, r3, #16
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	699b      	ldr	r3, [r3, #24]
 800dfe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800dff0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	031b      	lsls	r3, r3, #12
 800dff6:	693a      	ldr	r2, [r7, #16]
 800dff8:	4313      	orrs	r3, r2
 800dffa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800e002:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	011b      	lsls	r3, r3, #4
 800e008:	697a      	ldr	r2, [r7, #20]
 800e00a:	4313      	orrs	r3, r2
 800e00c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	693a      	ldr	r2, [r7, #16]
 800e012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	697a      	ldr	r2, [r7, #20]
 800e018:	621a      	str	r2, [r3, #32]
}
 800e01a:	bf00      	nop
 800e01c:	371c      	adds	r7, #28
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e026:	b480      	push	{r7}
 800e028:	b085      	sub	sp, #20
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e03c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e03e:	683a      	ldr	r2, [r7, #0]
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	4313      	orrs	r3, r2
 800e044:	f043 0307 	orr.w	r3, r3, #7
 800e048:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	68fa      	ldr	r2, [r7, #12]
 800e04e:	609a      	str	r2, [r3, #8]
}
 800e050:	bf00      	nop
 800e052:	3714      	adds	r7, #20
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b087      	sub	sp, #28
 800e060:	af00      	add	r7, sp, #0
 800e062:	60f8      	str	r0, [r7, #12]
 800e064:	60b9      	str	r1, [r7, #8]
 800e066:	607a      	str	r2, [r7, #4]
 800e068:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e070:	697b      	ldr	r3, [r7, #20]
 800e072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e076:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	021a      	lsls	r2, r3, #8
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	431a      	orrs	r2, r3
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	4313      	orrs	r3, r2
 800e084:	697a      	ldr	r2, [r7, #20]
 800e086:	4313      	orrs	r3, r2
 800e088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	609a      	str	r2, [r3, #8]
}
 800e090:	bf00      	nop
 800e092:	371c      	adds	r7, #28
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d101      	bne.n	800e0b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e0b0:	2302      	movs	r3, #2
 800e0b2:	e05a      	b.n	800e16a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2202      	movs	r2, #2
 800e0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	689b      	ldr	r3, [r3, #8]
 800e0d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	68fa      	ldr	r2, [r7, #12]
 800e0ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4a21      	ldr	r2, [pc, #132]	@ (800e178 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	d022      	beq.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e100:	d01d      	beq.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	4a1d      	ldr	r2, [pc, #116]	@ (800e17c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d018      	beq.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4a1b      	ldr	r2, [pc, #108]	@ (800e180 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e112:	4293      	cmp	r3, r2
 800e114:	d013      	beq.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a1a      	ldr	r2, [pc, #104]	@ (800e184 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d00e      	beq.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a18      	ldr	r2, [pc, #96]	@ (800e188 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e126:	4293      	cmp	r3, r2
 800e128:	d009      	beq.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4a17      	ldr	r2, [pc, #92]	@ (800e18c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d004      	beq.n	800e13e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	4a15      	ldr	r2, [pc, #84]	@ (800e190 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d10c      	bne.n	800e158 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e13e:	68bb      	ldr	r3, [r7, #8]
 800e140:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e144:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	68ba      	ldr	r2, [r7, #8]
 800e14c:	4313      	orrs	r3, r2
 800e14e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3714      	adds	r7, #20
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
 800e176:	bf00      	nop
 800e178:	40010000 	.word	0x40010000
 800e17c:	40000400 	.word	0x40000400
 800e180:	40000800 	.word	0x40000800
 800e184:	40000c00 	.word	0x40000c00
 800e188:	40010400 	.word	0x40010400
 800e18c:	40014000 	.word	0x40014000
 800e190:	40001800 	.word	0x40001800

0800e194 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e194:	b480      	push	{r7}
 800e196:	b083      	sub	sp, #12
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e19c:	bf00      	nop
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e1b0:	bf00      	nop
 800e1b2:	370c      	adds	r7, #12
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ba:	4770      	bx	lr

0800e1bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d101      	bne.n	800e1ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	e042      	b.n	800e254 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d106      	bne.n	800e1e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7f9 fa04 	bl	80075f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	2224      	movs	r2, #36	@ 0x24
 800e1ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	68da      	ldr	r2, [r3, #12]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e1fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f001 f905 	bl	800f410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	691a      	ldr	r2, [r3, #16]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800e214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	695a      	ldr	r2, [r3, #20]
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800e224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	68da      	ldr	r2, [r3, #12]
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2220      	movs	r2, #32
 800e240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2220      	movs	r2, #32
 800e248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2200      	movs	r2, #0
 800e250:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d101      	bne.n	800e26e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800e26a:	2301      	movs	r3, #1
 800e26c:	e024      	b.n	800e2b8 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2224      	movs	r2, #36	@ 0x24
 800e272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	68da      	ldr	r2, [r3, #12]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e284:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7f9 fb12 	bl	80078b0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2200      	movs	r2, #0
 800e290:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2200      	movs	r2, #0
 800e296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2200      	movs	r2, #0
 800e29e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	3708      	adds	r7, #8
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b08a      	sub	sp, #40	@ 0x28
 800e2c4:	af02      	add	r7, sp, #8
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	603b      	str	r3, [r7, #0]
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b20      	cmp	r3, #32
 800e2de:	d175      	bne.n	800e3cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <HAL_UART_Transmit+0x2c>
 800e2e6:	88fb      	ldrh	r3, [r7, #6]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d101      	bne.n	800e2f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800e2ec:	2301      	movs	r3, #1
 800e2ee:	e06e      	b.n	800e3ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2221      	movs	r2, #33	@ 0x21
 800e2fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e2fe:	f7f9 fd33 	bl	8007d68 <HAL_GetTick>
 800e302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	88fa      	ldrh	r2, [r7, #6]
 800e308:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	88fa      	ldrh	r2, [r7, #6]
 800e30e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e318:	d108      	bne.n	800e32c <HAL_UART_Transmit+0x6c>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	691b      	ldr	r3, [r3, #16]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d104      	bne.n	800e32c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e322:	2300      	movs	r3, #0
 800e324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	61bb      	str	r3, [r7, #24]
 800e32a:	e003      	b.n	800e334 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e330:	2300      	movs	r3, #0
 800e332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e334:	e02e      	b.n	800e394 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	9300      	str	r3, [sp, #0]
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	2200      	movs	r2, #0
 800e33e:	2180      	movs	r1, #128	@ 0x80
 800e340:	68f8      	ldr	r0, [r7, #12]
 800e342:	f000 fda4 	bl	800ee8e <UART_WaitOnFlagUntilTimeout>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d005      	beq.n	800e358 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2220      	movs	r2, #32
 800e350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800e354:	2303      	movs	r3, #3
 800e356:	e03a      	b.n	800e3ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800e358:	69fb      	ldr	r3, [r7, #28]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d10b      	bne.n	800e376 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e35e:	69bb      	ldr	r3, [r7, #24]
 800e360:	881b      	ldrh	r3, [r3, #0]
 800e362:	461a      	mov	r2, r3
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e36c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	3302      	adds	r3, #2
 800e372:	61bb      	str	r3, [r7, #24]
 800e374:	e007      	b.n	800e386 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	781a      	ldrb	r2, [r3, #0]
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	3301      	adds	r3, #1
 800e384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	3b01      	subs	r3, #1
 800e38e:	b29a      	uxth	r2, r3
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800e398:	b29b      	uxth	r3, r3
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d1cb      	bne.n	800e336 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e39e:	683b      	ldr	r3, [r7, #0]
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	2140      	movs	r1, #64	@ 0x40
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f000 fd70 	bl	800ee8e <UART_WaitOnFlagUntilTimeout>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d005      	beq.n	800e3c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2220      	movs	r2, #32
 800e3b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800e3bc:	2303      	movs	r3, #3
 800e3be:	e006      	b.n	800e3ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	2220      	movs	r2, #32
 800e3c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	e000      	b.n	800e3ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800e3cc:	2302      	movs	r3, #2
  }
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3720      	adds	r7, #32
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b08a      	sub	sp, #40	@ 0x28
 800e3da:	af02      	add	r7, sp, #8
 800e3dc:	60f8      	str	r0, [r7, #12]
 800e3de:	60b9      	str	r1, [r7, #8]
 800e3e0:	603b      	str	r3, [r7, #0]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2b20      	cmp	r3, #32
 800e3f4:	f040 8081 	bne.w	800e4fa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d002      	beq.n	800e404 <HAL_UART_Receive+0x2e>
 800e3fe:	88fb      	ldrh	r3, [r7, #6]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d101      	bne.n	800e408 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800e404:	2301      	movs	r3, #1
 800e406:	e079      	b.n	800e4fc <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	2200      	movs	r2, #0
 800e40c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2222      	movs	r2, #34	@ 0x22
 800e412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2200      	movs	r2, #0
 800e41a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e41c:	f7f9 fca4 	bl	8007d68 <HAL_GetTick>
 800e420:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	88fa      	ldrh	r2, [r7, #6]
 800e426:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	88fa      	ldrh	r2, [r7, #6]
 800e42c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	689b      	ldr	r3, [r3, #8]
 800e432:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e436:	d108      	bne.n	800e44a <HAL_UART_Receive+0x74>
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d104      	bne.n	800e44a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800e440:	2300      	movs	r3, #0
 800e442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	61bb      	str	r3, [r7, #24]
 800e448:	e003      	b.n	800e452 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e44e:	2300      	movs	r3, #0
 800e450:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800e452:	e047      	b.n	800e4e4 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	2200      	movs	r2, #0
 800e45c:	2120      	movs	r1, #32
 800e45e:	68f8      	ldr	r0, [r7, #12]
 800e460:	f000 fd15 	bl	800ee8e <UART_WaitOnFlagUntilTimeout>
 800e464:	4603      	mov	r3, r0
 800e466:	2b00      	cmp	r3, #0
 800e468:	d005      	beq.n	800e476 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2220      	movs	r2, #32
 800e46e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800e472:	2303      	movs	r3, #3
 800e474:	e042      	b.n	800e4fc <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d10c      	bne.n	800e496 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	b29b      	uxth	r3, r3
 800e484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e488:	b29a      	uxth	r2, r3
 800e48a:	69bb      	ldr	r3, [r7, #24]
 800e48c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	3302      	adds	r3, #2
 800e492:	61bb      	str	r3, [r7, #24]
 800e494:	e01f      	b.n	800e4d6 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e49e:	d007      	beq.n	800e4b0 <HAL_UART_Receive+0xda>
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	689b      	ldr	r3, [r3, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d10a      	bne.n	800e4be <HAL_UART_Receive+0xe8>
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d106      	bne.n	800e4be <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	685b      	ldr	r3, [r3, #4]
 800e4b6:	b2da      	uxtb	r2, r3
 800e4b8:	69fb      	ldr	r3, [r7, #28]
 800e4ba:	701a      	strb	r2, [r3, #0]
 800e4bc:	e008      	b.n	800e4d0 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	685b      	ldr	r3, [r3, #4]
 800e4c4:	b2db      	uxtb	r3, r3
 800e4c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4ca:	b2da      	uxtb	r2, r3
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e4da:	b29b      	uxth	r3, r3
 800e4dc:	3b01      	subs	r3, #1
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800e4e8:	b29b      	uxth	r3, r3
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1b2      	bne.n	800e454 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	2220      	movs	r2, #32
 800e4f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	e000      	b.n	800e4fc <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800e4fa:	2302      	movs	r3, #2
  }
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3720      	adds	r7, #32
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08c      	sub	sp, #48	@ 0x30
 800e508:	af00      	add	r7, sp, #0
 800e50a:	60f8      	str	r0, [r7, #12]
 800e50c:	60b9      	str	r1, [r7, #8]
 800e50e:	4613      	mov	r3, r2
 800e510:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b20      	cmp	r3, #32
 800e51c:	d162      	bne.n	800e5e4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <HAL_UART_Transmit_DMA+0x26>
 800e524:	88fb      	ldrh	r3, [r7, #6]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d101      	bne.n	800e52e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800e52a:	2301      	movs	r3, #1
 800e52c:	e05b      	b.n	800e5e6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	88fa      	ldrh	r2, [r7, #6]
 800e538:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	88fa      	ldrh	r2, [r7, #6]
 800e53e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2221      	movs	r2, #33	@ 0x21
 800e54a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e552:	4a27      	ldr	r2, [pc, #156]	@ (800e5f0 <HAL_UART_Transmit_DMA+0xec>)
 800e554:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e55a:	4a26      	ldr	r2, [pc, #152]	@ (800e5f4 <HAL_UART_Transmit_DMA+0xf0>)
 800e55c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e562:	4a25      	ldr	r2, [pc, #148]	@ (800e5f8 <HAL_UART_Transmit_DMA+0xf4>)
 800e564:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e56a:	2200      	movs	r2, #0
 800e56c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800e56e:	f107 0308 	add.w	r3, r7, #8
 800e572:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800e578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e57a:	6819      	ldr	r1, [r3, #0]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	3304      	adds	r3, #4
 800e582:	461a      	mov	r2, r3
 800e584:	88fb      	ldrh	r3, [r7, #6]
 800e586:	f7fa fa7f 	bl	8008a88 <HAL_DMA_Start_IT>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d008      	beq.n	800e5a2 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2210      	movs	r2, #16
 800e594:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	2220      	movs	r2, #32
 800e59a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	e021      	b.n	800e5e6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e5aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	3314      	adds	r3, #20
 800e5b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	e853 3f00 	ldrex	r3, [r3]
 800e5ba:	617b      	str	r3, [r7, #20]
   return(result);
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e5c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3314      	adds	r3, #20
 800e5ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5cc:	627a      	str	r2, [r7, #36]	@ 0x24
 800e5ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d0:	6a39      	ldr	r1, [r7, #32]
 800e5d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5d4:	e841 2300 	strex	r3, r2, [r1]
 800e5d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d1e5      	bne.n	800e5ac <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	e000      	b.n	800e5e6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800e5e4:	2302      	movs	r3, #2
  }
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3730      	adds	r7, #48	@ 0x30
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bd80      	pop	{r7, pc}
 800e5ee:	bf00      	nop
 800e5f0:	0800ebdd 	.word	0x0800ebdd
 800e5f4:	0800ec77 	.word	0x0800ec77
 800e5f8:	0800edfb 	.word	0x0800edfb

0800e5fc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b084      	sub	sp, #16
 800e600:	af00      	add	r7, sp, #0
 800e602:	60f8      	str	r0, [r7, #12]
 800e604:	60b9      	str	r1, [r7, #8]
 800e606:	4613      	mov	r3, r2
 800e608:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b20      	cmp	r3, #32
 800e614:	d112      	bne.n	800e63c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <HAL_UART_Receive_DMA+0x26>
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800e622:	2301      	movs	r3, #1
 800e624:	e00b      	b.n	800e63e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	2200      	movs	r2, #0
 800e62a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e62c:	88fb      	ldrh	r3, [r7, #6]
 800e62e:	461a      	mov	r2, r3
 800e630:	68b9      	ldr	r1, [r7, #8]
 800e632:	68f8      	ldr	r0, [r7, #12]
 800e634:	f000 fc84 	bl	800ef40 <UART_Start_Receive_DMA>
 800e638:	4603      	mov	r3, r0
 800e63a:	e000      	b.n	800e63e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800e63c:	2302      	movs	r3, #2
  }
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3710      	adds	r7, #16
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
	...

0800e648 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b0ba      	sub	sp, #232	@ 0xe8
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	68db      	ldr	r3, [r3, #12]
 800e660:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	695b      	ldr	r3, [r3, #20]
 800e66a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800e66e:	2300      	movs	r3, #0
 800e670:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800e674:	2300      	movs	r3, #0
 800e676:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800e67a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e67e:	f003 030f 	and.w	r3, r3, #15
 800e682:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800e686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d10f      	bne.n	800e6ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e692:	f003 0320 	and.w	r3, r3, #32
 800e696:	2b00      	cmp	r3, #0
 800e698:	d009      	beq.n	800e6ae <HAL_UART_IRQHandler+0x66>
 800e69a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e69e:	f003 0320 	and.w	r3, r3, #32
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d003      	beq.n	800e6ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fdf4 	bl	800f294 <UART_Receive_IT>
      return;
 800e6ac:	e273      	b.n	800eb96 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800e6ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f000 80de 	beq.w	800e874 <HAL_UART_IRQHandler+0x22c>
 800e6b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6bc:	f003 0301 	and.w	r3, r3, #1
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d106      	bne.n	800e6d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800e6c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f000 80d1 	beq.w	800e874 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800e6d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6d6:	f003 0301 	and.w	r3, r3, #1
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00b      	beq.n	800e6f6 <HAL_UART_IRQHandler+0xae>
 800e6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e6e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d005      	beq.n	800e6f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e6ee:	f043 0201 	orr.w	r2, r3, #1
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e6f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e6fa:	f003 0304 	and.w	r3, r3, #4
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d00b      	beq.n	800e71a <HAL_UART_IRQHandler+0xd2>
 800e702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e706:	f003 0301 	and.w	r3, r3, #1
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d005      	beq.n	800e71a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e712:	f043 0202 	orr.w	r2, r3, #2
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800e71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e71e:	f003 0302 	and.w	r3, r3, #2
 800e722:	2b00      	cmp	r3, #0
 800e724:	d00b      	beq.n	800e73e <HAL_UART_IRQHandler+0xf6>
 800e726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e72a:	f003 0301 	and.w	r3, r3, #1
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d005      	beq.n	800e73e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e736:	f043 0204 	orr.w	r2, r3, #4
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800e73e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e742:	f003 0308 	and.w	r3, r3, #8
 800e746:	2b00      	cmp	r3, #0
 800e748:	d011      	beq.n	800e76e <HAL_UART_IRQHandler+0x126>
 800e74a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e74e:	f003 0320 	and.w	r3, r3, #32
 800e752:	2b00      	cmp	r3, #0
 800e754:	d105      	bne.n	800e762 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800e756:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e75a:	f003 0301 	and.w	r3, r3, #1
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d005      	beq.n	800e76e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e766:	f043 0208 	orr.w	r2, r3, #8
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e772:	2b00      	cmp	r3, #0
 800e774:	f000 820a 	beq.w	800eb8c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800e778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e77c:	f003 0320 	and.w	r3, r3, #32
 800e780:	2b00      	cmp	r3, #0
 800e782:	d008      	beq.n	800e796 <HAL_UART_IRQHandler+0x14e>
 800e784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e788:	f003 0320 	and.w	r3, r3, #32
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d002      	beq.n	800e796 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f000 fd7f 	bl	800f294 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	695b      	ldr	r3, [r3, #20]
 800e79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7a0:	2b40      	cmp	r3, #64	@ 0x40
 800e7a2:	bf0c      	ite	eq
 800e7a4:	2301      	moveq	r3, #1
 800e7a6:	2300      	movne	r3, #0
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7b2:	f003 0308 	and.w	r3, r3, #8
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d103      	bne.n	800e7c2 <HAL_UART_IRQHandler+0x17a>
 800e7ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d04f      	beq.n	800e862 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f000 fc8a 	bl	800f0dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	695b      	ldr	r3, [r3, #20]
 800e7ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7d2:	2b40      	cmp	r3, #64	@ 0x40
 800e7d4:	d141      	bne.n	800e85a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	3314      	adds	r3, #20
 800e7dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e7e4:	e853 3f00 	ldrex	r3, [r3]
 800e7e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800e7ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e7f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3314      	adds	r3, #20
 800e7fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800e802:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e80a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800e80e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e812:	e841 2300 	strex	r3, r2, [r1]
 800e816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800e81a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d1d9      	bne.n	800e7d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e826:	2b00      	cmp	r3, #0
 800e828:	d013      	beq.n	800e852 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e82e:	4a8a      	ldr	r2, [pc, #552]	@ (800ea58 <HAL_UART_IRQHandler+0x410>)
 800e830:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e836:	4618      	mov	r0, r3
 800e838:	f7fa f9ee 	bl	8008c18 <HAL_DMA_Abort_IT>
 800e83c:	4603      	mov	r3, r0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d016      	beq.n	800e870 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800e84c:	4610      	mov	r0, r2
 800e84e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e850:	e00e      	b.n	800e870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	f000 f9ac 	bl	800ebb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e858:	e00a      	b.n	800e870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 f9a8 	bl	800ebb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e860:	e006      	b.n	800e870 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f000 f9a4 	bl	800ebb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800e86e:	e18d      	b.n	800eb8c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e870:	bf00      	nop
    return;
 800e872:	e18b      	b.n	800eb8c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e878:	2b01      	cmp	r3, #1
 800e87a:	f040 8167 	bne.w	800eb4c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800e87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e882:	f003 0310 	and.w	r3, r3, #16
 800e886:	2b00      	cmp	r3, #0
 800e888:	f000 8160 	beq.w	800eb4c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800e88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e890:	f003 0310 	and.w	r3, r3, #16
 800e894:	2b00      	cmp	r3, #0
 800e896:	f000 8159 	beq.w	800eb4c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e89a:	2300      	movs	r3, #0
 800e89c:	60bb      	str	r3, [r7, #8]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	60bb      	str	r3, [r7, #8]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	60bb      	str	r3, [r7, #8]
 800e8ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	695b      	ldr	r3, [r3, #20]
 800e8b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8ba:	2b40      	cmp	r3, #64	@ 0x40
 800e8bc:	f040 80ce 	bne.w	800ea5c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	685b      	ldr	r3, [r3, #4]
 800e8c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e8cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	f000 80a9 	beq.w	800ea28 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800e8da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	f080 80a2 	bcs.w	800ea28 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800e8ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e8f0:	69db      	ldr	r3, [r3, #28]
 800e8f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8f6:	f000 8088 	beq.w	800ea0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	330c      	adds	r3, #12
 800e900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e904:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e908:	e853 3f00 	ldrex	r3, [r3]
 800e90c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800e910:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e918:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	330c      	adds	r3, #12
 800e922:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800e926:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800e92a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e92e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800e932:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e936:	e841 2300 	strex	r3, r2, [r1]
 800e93a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800e93e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e942:	2b00      	cmp	r3, #0
 800e944:	d1d9      	bne.n	800e8fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3314      	adds	r3, #20
 800e94c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e94e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e950:	e853 3f00 	ldrex	r3, [r3]
 800e954:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800e956:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e958:	f023 0301 	bic.w	r3, r3, #1
 800e95c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	3314      	adds	r3, #20
 800e966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e96a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e96e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e970:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800e972:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e976:	e841 2300 	strex	r3, r2, [r1]
 800e97a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800e97c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d1e1      	bne.n	800e946 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	3314      	adds	r3, #20
 800e988:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e98c:	e853 3f00 	ldrex	r3, [r3]
 800e990:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800e992:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	3314      	adds	r3, #20
 800e9a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e9a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e9a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800e9ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e9ae:	e841 2300 	strex	r3, r2, [r1]
 800e9b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800e9b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1e3      	bne.n	800e982 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2220      	movs	r2, #32
 800e9be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	330c      	adds	r3, #12
 800e9ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e9d2:	e853 3f00 	ldrex	r3, [r3]
 800e9d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800e9d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e9da:	f023 0310 	bic.w	r3, r3, #16
 800e9de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	330c      	adds	r3, #12
 800e9e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e9ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 800e9ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800e9f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e9f4:	e841 2300 	strex	r3, r2, [r1]
 800e9f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800e9fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1e3      	bne.n	800e9c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea04:	4618      	mov	r0, r3
 800ea06:	f7fa f897 	bl	8008b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	2202      	movs	r2, #2
 800ea0e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	b29b      	uxth	r3, r3
 800ea1e:	4619      	mov	r1, r3
 800ea20:	6878      	ldr	r0, [r7, #4]
 800ea22:	f000 f8cf 	bl	800ebc4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ea26:	e0b3      	b.n	800eb90 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ea2c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ea30:	429a      	cmp	r2, r3
 800ea32:	f040 80ad 	bne.w	800eb90 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea40:	f040 80a6 	bne.w	800eb90 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2202      	movs	r2, #2
 800ea48:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ea4e:	4619      	mov	r1, r3
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f000 f8b7 	bl	800ebc4 <HAL_UARTEx_RxEventCallback>
      return;
 800ea56:	e09b      	b.n	800eb90 <HAL_UART_IRQHandler+0x548>
 800ea58:	0800f1a3 	.word	0x0800f1a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ea64:	b29b      	uxth	r3, r3
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f000 808e 	beq.w	800eb94 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800ea78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	f000 8089 	beq.w	800eb94 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	330c      	adds	r3, #12
 800ea88:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea8c:	e853 3f00 	ldrex	r3, [r3]
 800ea90:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ea92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ea98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	330c      	adds	r3, #12
 800eaa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800eaa6:	647a      	str	r2, [r7, #68]	@ 0x44
 800eaa8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaaa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800eaac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800eaae:	e841 2300 	strex	r3, r2, [r1]
 800eab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800eab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1e3      	bne.n	800ea82 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	3314      	adds	r3, #20
 800eac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac4:	e853 3f00 	ldrex	r3, [r3]
 800eac8:	623b      	str	r3, [r7, #32]
   return(result);
 800eaca:	6a3b      	ldr	r3, [r7, #32]
 800eacc:	f023 0301 	bic.w	r3, r3, #1
 800ead0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	3314      	adds	r3, #20
 800eada:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800eade:	633a      	str	r2, [r7, #48]	@ 0x30
 800eae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800eae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eae6:	e841 2300 	strex	r3, r2, [r1]
 800eaea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800eaec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d1e3      	bne.n	800eaba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2220      	movs	r2, #32
 800eaf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2200      	movs	r2, #0
 800eafe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	330c      	adds	r3, #12
 800eb06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb08:	693b      	ldr	r3, [r7, #16]
 800eb0a:	e853 3f00 	ldrex	r3, [r3]
 800eb0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f023 0310 	bic.w	r3, r3, #16
 800eb16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	330c      	adds	r3, #12
 800eb20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800eb24:	61fa      	str	r2, [r7, #28]
 800eb26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb28:	69b9      	ldr	r1, [r7, #24]
 800eb2a:	69fa      	ldr	r2, [r7, #28]
 800eb2c:	e841 2300 	strex	r3, r2, [r1]
 800eb30:	617b      	str	r3, [r7, #20]
   return(result);
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d1e3      	bne.n	800eb00 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2202      	movs	r2, #2
 800eb3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eb3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800eb42:	4619      	mov	r1, r3
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 f83d 	bl	800ebc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800eb4a:	e023      	b.n	800eb94 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800eb4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d009      	beq.n	800eb6c <HAL_UART_IRQHandler+0x524>
 800eb58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d003      	beq.n	800eb6c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 fb2d 	bl	800f1c4 <UART_Transmit_IT>
    return;
 800eb6a:	e014      	b.n	800eb96 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800eb6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00e      	beq.n	800eb96 <HAL_UART_IRQHandler+0x54e>
 800eb78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800eb7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d008      	beq.n	800eb96 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 fb6d 	bl	800f264 <UART_EndTransmit_IT>
    return;
 800eb8a:	e004      	b.n	800eb96 <HAL_UART_IRQHandler+0x54e>
    return;
 800eb8c:	bf00      	nop
 800eb8e:	e002      	b.n	800eb96 <HAL_UART_IRQHandler+0x54e>
      return;
 800eb90:	bf00      	nop
 800eb92:	e000      	b.n	800eb96 <HAL_UART_IRQHandler+0x54e>
      return;
 800eb94:	bf00      	nop
  }
}
 800eb96:	37e8      	adds	r7, #232	@ 0xe8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b083      	sub	sp, #12
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	460b      	mov	r3, r1
 800ebce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b090      	sub	sp, #64	@ 0x40
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d137      	bne.n	800ec68 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ebf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ebfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	3314      	adds	r3, #20
 800ec04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec08:	e853 3f00 	ldrex	r3, [r3]
 800ec0c:	623b      	str	r3, [r7, #32]
   return(result);
 800ec0e:	6a3b      	ldr	r3, [r7, #32]
 800ec10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ec14:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ec16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	3314      	adds	r3, #20
 800ec1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ec1e:	633a      	str	r2, [r7, #48]	@ 0x30
 800ec20:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ec24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ec26:	e841 2300 	strex	r3, r2, [r1]
 800ec2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ec2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d1e5      	bne.n	800ebfe <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	330c      	adds	r3, #12
 800ec38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	e853 3f00 	ldrex	r3, [r3]
 800ec40:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec48:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	330c      	adds	r3, #12
 800ec50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec52:	61fa      	str	r2, [r7, #28]
 800ec54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec56:	69b9      	ldr	r1, [r7, #24]
 800ec58:	69fa      	ldr	r2, [r7, #28]
 800ec5a:	e841 2300 	strex	r3, r2, [r1]
 800ec5e:	617b      	str	r3, [r7, #20]
   return(result);
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1e5      	bne.n	800ec32 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ec66:	e002      	b.n	800ec6e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ec68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ec6a:	f7f6 fe6b 	bl	8005944 <HAL_UART_TxCpltCallback>
}
 800ec6e:	bf00      	nop
 800ec70:	3740      	adds	r7, #64	@ 0x40
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}

0800ec76 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b084      	sub	sp, #16
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec82:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f7ff ff89 	bl	800eb9c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec8a:	bf00      	nop
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b09c      	sub	sp, #112	@ 0x70
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec9e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d172      	bne.n	800ed94 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ecae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	330c      	adds	r3, #12
 800ecba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ecbe:	e853 3f00 	ldrex	r3, [r3]
 800ecc2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ecc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ecc6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ecca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	330c      	adds	r3, #12
 800ecd2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ecd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ecd6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ecda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ecdc:	e841 2300 	strex	r3, r2, [r1]
 800ece0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ece2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1e5      	bne.n	800ecb4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ece8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	3314      	adds	r3, #20
 800ecee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecf2:	e853 3f00 	ldrex	r3, [r3]
 800ecf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ecf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ecfa:	f023 0301 	bic.w	r3, r3, #1
 800ecfe:	667b      	str	r3, [r7, #100]	@ 0x64
 800ed00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	3314      	adds	r3, #20
 800ed06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ed08:	647a      	str	r2, [r7, #68]	@ 0x44
 800ed0a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed0c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ed0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ed10:	e841 2300 	strex	r3, r2, [r1]
 800ed14:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ed16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d1e5      	bne.n	800ece8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	3314      	adds	r3, #20
 800ed22:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed26:	e853 3f00 	ldrex	r3, [r3]
 800ed2a:	623b      	str	r3, [r7, #32]
   return(result);
 800ed2c:	6a3b      	ldr	r3, [r7, #32]
 800ed2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed32:	663b      	str	r3, [r7, #96]	@ 0x60
 800ed34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	3314      	adds	r3, #20
 800ed3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ed3c:	633a      	str	r2, [r7, #48]	@ 0x30
 800ed3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed44:	e841 2300 	strex	r3, r2, [r1]
 800ed48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ed4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d1e5      	bne.n	800ed1c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ed50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed52:	2220      	movs	r2, #32
 800ed54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed5c:	2b01      	cmp	r3, #1
 800ed5e:	d119      	bne.n	800ed94 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	330c      	adds	r3, #12
 800ed66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	e853 3f00 	ldrex	r3, [r3]
 800ed6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f023 0310 	bic.w	r3, r3, #16
 800ed76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ed78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	330c      	adds	r3, #12
 800ed7e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ed80:	61fa      	str	r2, [r7, #28]
 800ed82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed84:	69b9      	ldr	r1, [r7, #24]
 800ed86:	69fa      	ldr	r2, [r7, #28]
 800ed88:	e841 2300 	strex	r3, r2, [r1]
 800ed8c:	617b      	str	r3, [r7, #20]
   return(result);
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d1e5      	bne.n	800ed60 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ed94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed96:	2200      	movs	r2, #0
 800ed98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ed9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ed9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed9e:	2b01      	cmp	r3, #1
 800eda0:	d106      	bne.n	800edb0 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eda2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800eda4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800eda6:	4619      	mov	r1, r3
 800eda8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800edaa:	f7ff ff0b 	bl	800ebc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800edae:	e002      	b.n	800edb6 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800edb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800edb2:	f7f5 fd41 	bl	8004838 <HAL_UART_RxCpltCallback>
}
 800edb6:	bf00      	nop
 800edb8:	3770      	adds	r7, #112	@ 0x70
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b084      	sub	sp, #16
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edca:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2201      	movs	r2, #1
 800edd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d108      	bne.n	800edec <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800edde:	085b      	lsrs	r3, r3, #1
 800ede0:	b29b      	uxth	r3, r3
 800ede2:	4619      	mov	r1, r3
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f7ff feed 	bl	800ebc4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800edea:	e002      	b.n	800edf2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f7f5 fd0d 	bl	800480c <HAL_UART_RxHalfCpltCallback>
}
 800edf2:	bf00      	nop
 800edf4:	3710      	adds	r7, #16
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b084      	sub	sp, #16
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ee02:	2300      	movs	r3, #0
 800ee04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	695b      	ldr	r3, [r3, #20]
 800ee12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ee16:	2b80      	cmp	r3, #128	@ 0x80
 800ee18:	bf0c      	ite	eq
 800ee1a:	2301      	moveq	r3, #1
 800ee1c:	2300      	movne	r3, #0
 800ee1e:	b2db      	uxtb	r3, r3
 800ee20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee28:	b2db      	uxtb	r3, r3
 800ee2a:	2b21      	cmp	r3, #33	@ 0x21
 800ee2c:	d108      	bne.n	800ee40 <UART_DMAError+0x46>
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d005      	beq.n	800ee40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	2200      	movs	r2, #0
 800ee38:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ee3a:	68b8      	ldr	r0, [r7, #8]
 800ee3c:	f000 f926 	bl	800f08c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	695b      	ldr	r3, [r3, #20]
 800ee46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee4a:	2b40      	cmp	r3, #64	@ 0x40
 800ee4c:	bf0c      	ite	eq
 800ee4e:	2301      	moveq	r3, #1
 800ee50:	2300      	movne	r3, #0
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b22      	cmp	r3, #34	@ 0x22
 800ee60:	d108      	bne.n	800ee74 <UART_DMAError+0x7a>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d005      	beq.n	800ee74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800ee6e:	68b8      	ldr	r0, [r7, #8]
 800ee70:	f000 f934 	bl	800f0dc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ee78:	f043 0210 	orr.w	r2, r3, #16
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ee80:	68b8      	ldr	r0, [r7, #8]
 800ee82:	f7ff fe95 	bl	800ebb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ee86:	bf00      	nop
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b086      	sub	sp, #24
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	60f8      	str	r0, [r7, #12]
 800ee96:	60b9      	str	r1, [r7, #8]
 800ee98:	603b      	str	r3, [r7, #0]
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee9e:	e03b      	b.n	800ef18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eea0:	6a3b      	ldr	r3, [r7, #32]
 800eea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea6:	d037      	beq.n	800ef18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eea8:	f7f8 ff5e 	bl	8007d68 <HAL_GetTick>
 800eeac:	4602      	mov	r2, r0
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	1ad3      	subs	r3, r2, r3
 800eeb2:	6a3a      	ldr	r2, [r7, #32]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d302      	bcc.n	800eebe <UART_WaitOnFlagUntilTimeout+0x30>
 800eeb8:	6a3b      	ldr	r3, [r7, #32]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d101      	bne.n	800eec2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800eebe:	2303      	movs	r3, #3
 800eec0:	e03a      	b.n	800ef38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	f003 0304 	and.w	r3, r3, #4
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d023      	beq.n	800ef18 <UART_WaitOnFlagUntilTimeout+0x8a>
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	2b80      	cmp	r3, #128	@ 0x80
 800eed4:	d020      	beq.n	800ef18 <UART_WaitOnFlagUntilTimeout+0x8a>
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	2b40      	cmp	r3, #64	@ 0x40
 800eeda:	d01d      	beq.n	800ef18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f003 0308 	and.w	r3, r3, #8
 800eee6:	2b08      	cmp	r3, #8
 800eee8:	d116      	bne.n	800ef18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800eeea:	2300      	movs	r3, #0
 800eeec:	617b      	str	r3, [r7, #20]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	617b      	str	r3, [r7, #20]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	617b      	str	r3, [r7, #20]
 800eefe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ef00:	68f8      	ldr	r0, [r7, #12]
 800ef02:	f000 f8eb 	bl	800f0dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	2208      	movs	r2, #8
 800ef0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2200      	movs	r2, #0
 800ef10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ef14:	2301      	movs	r3, #1
 800ef16:	e00f      	b.n	800ef38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	4013      	ands	r3, r2
 800ef22:	68ba      	ldr	r2, [r7, #8]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	bf0c      	ite	eq
 800ef28:	2301      	moveq	r3, #1
 800ef2a:	2300      	movne	r3, #0
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	461a      	mov	r2, r3
 800ef30:	79fb      	ldrb	r3, [r7, #7]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d0b4      	beq.n	800eea0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b098      	sub	sp, #96	@ 0x60
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	4613      	mov	r3, r2
 800ef4c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	88fa      	ldrh	r2, [r7, #6]
 800ef58:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2222      	movs	r2, #34	@ 0x22
 800ef64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef6c:	4a44      	ldr	r2, [pc, #272]	@ (800f080 <UART_Start_Receive_DMA+0x140>)
 800ef6e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef74:	4a43      	ldr	r2, [pc, #268]	@ (800f084 <UART_Start_Receive_DMA+0x144>)
 800ef76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef7c:	4a42      	ldr	r2, [pc, #264]	@ (800f088 <UART_Start_Receive_DMA+0x148>)
 800ef7e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef84:	2200      	movs	r2, #0
 800ef86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800ef88:	f107 0308 	add.w	r3, r7, #8
 800ef8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	3304      	adds	r3, #4
 800ef98:	4619      	mov	r1, r3
 800ef9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ef9c:	681a      	ldr	r2, [r3, #0]
 800ef9e:	88fb      	ldrh	r3, [r7, #6]
 800efa0:	f7f9 fd72 	bl	8008a88 <HAL_DMA_Start_IT>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d008      	beq.n	800efbc <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2210      	movs	r2, #16
 800efae:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2220      	movs	r2, #32
 800efb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	e05d      	b.n	800f078 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800efbc:	2300      	movs	r3, #0
 800efbe:	613b      	str	r3, [r7, #16]
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	613b      	str	r3, [r7, #16]
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	613b      	str	r3, [r7, #16]
 800efd0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	691b      	ldr	r3, [r3, #16]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d019      	beq.n	800f00e <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	330c      	adds	r3, #12
 800efe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efe4:	e853 3f00 	ldrex	r3, [r3]
 800efe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800efea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800eff0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	330c      	adds	r3, #12
 800eff8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800effa:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800effc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800effe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800f000:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f002:	e841 2300 	strex	r3, r2, [r1]
 800f006:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800f008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d1e5      	bne.n	800efda <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	3314      	adds	r3, #20
 800f014:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f018:	e853 3f00 	ldrex	r3, [r3]
 800f01c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f020:	f043 0301 	orr.w	r3, r3, #1
 800f024:	657b      	str	r3, [r7, #84]	@ 0x54
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	3314      	adds	r3, #20
 800f02c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800f02e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800f030:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f032:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800f034:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f036:	e841 2300 	strex	r3, r2, [r1]
 800f03a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d1e5      	bne.n	800f00e <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	3314      	adds	r3, #20
 800f048:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	e853 3f00 	ldrex	r3, [r3]
 800f050:	617b      	str	r3, [r7, #20]
   return(result);
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f058:	653b      	str	r3, [r7, #80]	@ 0x50
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	3314      	adds	r3, #20
 800f060:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f062:	627a      	str	r2, [r7, #36]	@ 0x24
 800f064:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f066:	6a39      	ldr	r1, [r7, #32]
 800f068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f06a:	e841 2300 	strex	r3, r2, [r1]
 800f06e:	61fb      	str	r3, [r7, #28]
   return(result);
 800f070:	69fb      	ldr	r3, [r7, #28]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d1e5      	bne.n	800f042 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3760      	adds	r7, #96	@ 0x60
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	0800ec93 	.word	0x0800ec93
 800f084:	0800edbf 	.word	0x0800edbf
 800f088:	0800edfb 	.word	0x0800edfb

0800f08c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b089      	sub	sp, #36	@ 0x24
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	330c      	adds	r3, #12
 800f09a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	e853 3f00 	ldrex	r3, [r3]
 800f0a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f0aa:	61fb      	str	r3, [r7, #28]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	330c      	adds	r3, #12
 800f0b2:	69fa      	ldr	r2, [r7, #28]
 800f0b4:	61ba      	str	r2, [r7, #24]
 800f0b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0b8:	6979      	ldr	r1, [r7, #20]
 800f0ba:	69ba      	ldr	r2, [r7, #24]
 800f0bc:	e841 2300 	strex	r3, r2, [r1]
 800f0c0:	613b      	str	r3, [r7, #16]
   return(result);
 800f0c2:	693b      	ldr	r3, [r7, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d1e5      	bne.n	800f094 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2220      	movs	r2, #32
 800f0cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800f0d0:	bf00      	nop
 800f0d2:	3724      	adds	r7, #36	@ 0x24
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr

0800f0dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b095      	sub	sp, #84	@ 0x54
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	330c      	adds	r3, #12
 800f0ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f0ee:	e853 3f00 	ldrex	r3, [r3]
 800f0f2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0f6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f0fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	330c      	adds	r3, #12
 800f102:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f104:	643a      	str	r2, [r7, #64]	@ 0x40
 800f106:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f108:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800f10a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f10c:	e841 2300 	strex	r3, r2, [r1]
 800f110:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800f112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f114:	2b00      	cmp	r3, #0
 800f116:	d1e5      	bne.n	800f0e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	3314      	adds	r3, #20
 800f11e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f120:	6a3b      	ldr	r3, [r7, #32]
 800f122:	e853 3f00 	ldrex	r3, [r3]
 800f126:	61fb      	str	r3, [r7, #28]
   return(result);
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	f023 0301 	bic.w	r3, r3, #1
 800f12e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3314      	adds	r3, #20
 800f136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f138:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800f13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f13c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f13e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f140:	e841 2300 	strex	r3, r2, [r1]
 800f144:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800f146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1e5      	bne.n	800f118 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f150:	2b01      	cmp	r3, #1
 800f152:	d119      	bne.n	800f188 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	330c      	adds	r3, #12
 800f15a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	e853 3f00 	ldrex	r3, [r3]
 800f162:	60bb      	str	r3, [r7, #8]
   return(result);
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	f023 0310 	bic.w	r3, r3, #16
 800f16a:	647b      	str	r3, [r7, #68]	@ 0x44
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	330c      	adds	r3, #12
 800f172:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f174:	61ba      	str	r2, [r7, #24]
 800f176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f178:	6979      	ldr	r1, [r7, #20]
 800f17a:	69ba      	ldr	r2, [r7, #24]
 800f17c:	e841 2300 	strex	r3, r2, [r1]
 800f180:	613b      	str	r3, [r7, #16]
   return(result);
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d1e5      	bne.n	800f154 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2220      	movs	r2, #32
 800f18c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2200      	movs	r2, #0
 800f194:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800f196:	bf00      	nop
 800f198:	3754      	adds	r7, #84	@ 0x54
 800f19a:	46bd      	mov	sp, r7
 800f19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a0:	4770      	bx	lr

0800f1a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b084      	sub	sp, #16
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f1b6:	68f8      	ldr	r0, [r7, #12]
 800f1b8:	f7ff fcfa 	bl	800ebb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1bc:	bf00      	nop
 800f1be:	3710      	adds	r7, #16
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800f1c4:	b480      	push	{r7}
 800f1c6:	b085      	sub	sp, #20
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f1d2:	b2db      	uxtb	r3, r3
 800f1d4:	2b21      	cmp	r3, #33	@ 0x21
 800f1d6:	d13e      	bne.n	800f256 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1e0:	d114      	bne.n	800f20c <UART_Transmit_IT+0x48>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	691b      	ldr	r3, [r3, #16]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d110      	bne.n	800f20c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	6a1b      	ldr	r3, [r3, #32]
 800f1ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	881b      	ldrh	r3, [r3, #0]
 800f1f4:	461a      	mov	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f1fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	6a1b      	ldr	r3, [r3, #32]
 800f204:	1c9a      	adds	r2, r3, #2
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	621a      	str	r2, [r3, #32]
 800f20a:	e008      	b.n	800f21e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a1b      	ldr	r3, [r3, #32]
 800f210:	1c59      	adds	r1, r3, #1
 800f212:	687a      	ldr	r2, [r7, #4]
 800f214:	6211      	str	r1, [r2, #32]
 800f216:	781a      	ldrb	r2, [r3, #0]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800f222:	b29b      	uxth	r3, r3
 800f224:	3b01      	subs	r3, #1
 800f226:	b29b      	uxth	r3, r3
 800f228:	687a      	ldr	r2, [r7, #4]
 800f22a:	4619      	mov	r1, r3
 800f22c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d10f      	bne.n	800f252 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	68da      	ldr	r2, [r3, #12]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f240:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	68da      	ldr	r2, [r3, #12]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f250:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800f252:	2300      	movs	r3, #0
 800f254:	e000      	b.n	800f258 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800f256:	2302      	movs	r3, #2
  }
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3714      	adds	r7, #20
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b082      	sub	sp, #8
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	68da      	ldr	r2, [r3, #12]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f27a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2220      	movs	r2, #32
 800f280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f7f6 fb5d 	bl	8005944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3708      	adds	r7, #8
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b08c      	sub	sp, #48	@ 0x30
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800f29c:	2300      	movs	r3, #0
 800f29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	2b22      	cmp	r3, #34	@ 0x22
 800f2ae:	f040 80aa 	bne.w	800f406 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	689b      	ldr	r3, [r3, #8]
 800f2b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2ba:	d115      	bne.n	800f2e8 <UART_Receive_IT+0x54>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d111      	bne.n	800f2e8 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	b29b      	uxth	r3, r3
 800f2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2d6:	b29a      	uxth	r2, r3
 800f2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2e0:	1c9a      	adds	r2, r3, #2
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	629a      	str	r2, [r3, #40]	@ 0x28
 800f2e6:	e024      	b.n	800f332 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	689b      	ldr	r3, [r3, #8]
 800f2f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f2f6:	d007      	beq.n	800f308 <UART_Receive_IT+0x74>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d10a      	bne.n	800f316 <UART_Receive_IT+0x82>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	691b      	ldr	r3, [r3, #16]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d106      	bne.n	800f316 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	b2da      	uxtb	r2, r3
 800f310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f312:	701a      	strb	r2, [r3, #0]
 800f314:	e008      	b.n	800f328 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	685b      	ldr	r3, [r3, #4]
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f322:	b2da      	uxtb	r2, r3
 800f324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f326:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f32c:	1c5a      	adds	r2, r3, #1
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f336:	b29b      	uxth	r3, r3
 800f338:	3b01      	subs	r3, #1
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	4619      	mov	r1, r3
 800f340:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800f342:	2b00      	cmp	r3, #0
 800f344:	d15d      	bne.n	800f402 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	68da      	ldr	r2, [r3, #12]
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	f022 0220 	bic.w	r2, r2, #32
 800f354:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	68da      	ldr	r2, [r3, #12]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800f364:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	695a      	ldr	r2, [r3, #20]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f022 0201 	bic.w	r2, r2, #1
 800f374:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2220      	movs	r2, #32
 800f37a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2200      	movs	r2, #0
 800f382:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d135      	bne.n	800f3f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2200      	movs	r2, #0
 800f390:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	330c      	adds	r3, #12
 800f398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	e853 3f00 	ldrex	r3, [r3]
 800f3a0:	613b      	str	r3, [r7, #16]
   return(result);
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	f023 0310 	bic.w	r3, r3, #16
 800f3a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	330c      	adds	r3, #12
 800f3b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3b2:	623a      	str	r2, [r7, #32]
 800f3b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3b6:	69f9      	ldr	r1, [r7, #28]
 800f3b8:	6a3a      	ldr	r2, [r7, #32]
 800f3ba:	e841 2300 	strex	r3, r2, [r1]
 800f3be:	61bb      	str	r3, [r7, #24]
   return(result);
 800f3c0:	69bb      	ldr	r3, [r7, #24]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d1e5      	bne.n	800f392 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 0310 	and.w	r3, r3, #16
 800f3d0:	2b10      	cmp	r3, #16
 800f3d2:	d10a      	bne.n	800f3ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	60fb      	str	r3, [r7, #12]
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	60fb      	str	r3, [r7, #12]
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	685b      	ldr	r3, [r3, #4]
 800f3e6:	60fb      	str	r3, [r7, #12]
 800f3e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f7ff fbe7 	bl	800ebc4 <HAL_UARTEx_RxEventCallback>
 800f3f6:	e002      	b.n	800f3fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	f7f5 fa1d 	bl	8004838 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800f3fe:	2300      	movs	r3, #0
 800f400:	e002      	b.n	800f408 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800f402:	2300      	movs	r3, #0
 800f404:	e000      	b.n	800f408 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800f406:	2302      	movs	r3, #2
  }
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3730      	adds	r7, #48	@ 0x30
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f414:	b0c0      	sub	sp, #256	@ 0x100
 800f416:	af00      	add	r7, sp, #0
 800f418:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	691b      	ldr	r3, [r3, #16]
 800f424:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800f428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f42c:	68d9      	ldr	r1, [r3, #12]
 800f42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	ea40 0301 	orr.w	r3, r0, r1
 800f438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f43e:	689a      	ldr	r2, [r3, #8]
 800f440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	431a      	orrs	r2, r3
 800f448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f44c:	695b      	ldr	r3, [r3, #20]
 800f44e:	431a      	orrs	r2, r3
 800f450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f454:	69db      	ldr	r3, [r3, #28]
 800f456:	4313      	orrs	r3, r2
 800f458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800f45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800f468:	f021 010c 	bic.w	r1, r1, #12
 800f46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800f476:	430b      	orrs	r3, r1
 800f478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f47a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	695b      	ldr	r3, [r3, #20]
 800f482:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800f486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f48a:	6999      	ldr	r1, [r3, #24]
 800f48c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f490:	681a      	ldr	r2, [r3, #0]
 800f492:	ea40 0301 	orr.w	r3, r0, r1
 800f496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f49c:	681a      	ldr	r2, [r3, #0]
 800f49e:	4b8f      	ldr	r3, [pc, #572]	@ (800f6dc <UART_SetConfig+0x2cc>)
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	d005      	beq.n	800f4b0 <UART_SetConfig+0xa0>
 800f4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	4b8d      	ldr	r3, [pc, #564]	@ (800f6e0 <UART_SetConfig+0x2d0>)
 800f4ac:	429a      	cmp	r2, r3
 800f4ae:	d104      	bne.n	800f4ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f4b0:	f7fd f8e0 	bl	800c674 <HAL_RCC_GetPCLK2Freq>
 800f4b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800f4b8:	e003      	b.n	800f4c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f4ba:	f7fd f8c7 	bl	800c64c <HAL_RCC_GetPCLK1Freq>
 800f4be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f4c6:	69db      	ldr	r3, [r3, #28]
 800f4c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f4cc:	f040 810c 	bne.w	800f6e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f4d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f4da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800f4de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800f4e2:	4622      	mov	r2, r4
 800f4e4:	462b      	mov	r3, r5
 800f4e6:	1891      	adds	r1, r2, r2
 800f4e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 800f4ea:	415b      	adcs	r3, r3
 800f4ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f4ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800f4f2:	4621      	mov	r1, r4
 800f4f4:	eb12 0801 	adds.w	r8, r2, r1
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	eb43 0901 	adc.w	r9, r3, r1
 800f4fe:	f04f 0200 	mov.w	r2, #0
 800f502:	f04f 0300 	mov.w	r3, #0
 800f506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f50a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f50e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f512:	4690      	mov	r8, r2
 800f514:	4699      	mov	r9, r3
 800f516:	4623      	mov	r3, r4
 800f518:	eb18 0303 	adds.w	r3, r8, r3
 800f51c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f520:	462b      	mov	r3, r5
 800f522:	eb49 0303 	adc.w	r3, r9, r3
 800f526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f52e:	685b      	ldr	r3, [r3, #4]
 800f530:	2200      	movs	r2, #0
 800f532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f536:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800f53a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800f53e:	460b      	mov	r3, r1
 800f540:	18db      	adds	r3, r3, r3
 800f542:	653b      	str	r3, [r7, #80]	@ 0x50
 800f544:	4613      	mov	r3, r2
 800f546:	eb42 0303 	adc.w	r3, r2, r3
 800f54a:	657b      	str	r3, [r7, #84]	@ 0x54
 800f54c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800f550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800f554:	f7f1 fd16 	bl	8000f84 <__aeabi_uldivmod>
 800f558:	4602      	mov	r2, r0
 800f55a:	460b      	mov	r3, r1
 800f55c:	4b61      	ldr	r3, [pc, #388]	@ (800f6e4 <UART_SetConfig+0x2d4>)
 800f55e:	fba3 2302 	umull	r2, r3, r3, r2
 800f562:	095b      	lsrs	r3, r3, #5
 800f564:	011c      	lsls	r4, r3, #4
 800f566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f56a:	2200      	movs	r2, #0
 800f56c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f570:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800f574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800f578:	4642      	mov	r2, r8
 800f57a:	464b      	mov	r3, r9
 800f57c:	1891      	adds	r1, r2, r2
 800f57e:	64b9      	str	r1, [r7, #72]	@ 0x48
 800f580:	415b      	adcs	r3, r3
 800f582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800f588:	4641      	mov	r1, r8
 800f58a:	eb12 0a01 	adds.w	sl, r2, r1
 800f58e:	4649      	mov	r1, r9
 800f590:	eb43 0b01 	adc.w	fp, r3, r1
 800f594:	f04f 0200 	mov.w	r2, #0
 800f598:	f04f 0300 	mov.w	r3, #0
 800f59c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f5a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800f5a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f5a8:	4692      	mov	sl, r2
 800f5aa:	469b      	mov	fp, r3
 800f5ac:	4643      	mov	r3, r8
 800f5ae:	eb1a 0303 	adds.w	r3, sl, r3
 800f5b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f5b6:	464b      	mov	r3, r9
 800f5b8:	eb4b 0303 	adc.w	r3, fp, r3
 800f5bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f5cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800f5d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800f5d4:	460b      	mov	r3, r1
 800f5d6:	18db      	adds	r3, r3, r3
 800f5d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5da:	4613      	mov	r3, r2
 800f5dc:	eb42 0303 	adc.w	r3, r2, r3
 800f5e0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800f5e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800f5ea:	f7f1 fccb 	bl	8000f84 <__aeabi_uldivmod>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	4611      	mov	r1, r2
 800f5f4:	4b3b      	ldr	r3, [pc, #236]	@ (800f6e4 <UART_SetConfig+0x2d4>)
 800f5f6:	fba3 2301 	umull	r2, r3, r3, r1
 800f5fa:	095b      	lsrs	r3, r3, #5
 800f5fc:	2264      	movs	r2, #100	@ 0x64
 800f5fe:	fb02 f303 	mul.w	r3, r2, r3
 800f602:	1acb      	subs	r3, r1, r3
 800f604:	00db      	lsls	r3, r3, #3
 800f606:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800f60a:	4b36      	ldr	r3, [pc, #216]	@ (800f6e4 <UART_SetConfig+0x2d4>)
 800f60c:	fba3 2302 	umull	r2, r3, r3, r2
 800f610:	095b      	lsrs	r3, r3, #5
 800f612:	005b      	lsls	r3, r3, #1
 800f614:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800f618:	441c      	add	r4, r3
 800f61a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f61e:	2200      	movs	r2, #0
 800f620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f624:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800f628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800f62c:	4642      	mov	r2, r8
 800f62e:	464b      	mov	r3, r9
 800f630:	1891      	adds	r1, r2, r2
 800f632:	63b9      	str	r1, [r7, #56]	@ 0x38
 800f634:	415b      	adcs	r3, r3
 800f636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800f63c:	4641      	mov	r1, r8
 800f63e:	1851      	adds	r1, r2, r1
 800f640:	6339      	str	r1, [r7, #48]	@ 0x30
 800f642:	4649      	mov	r1, r9
 800f644:	414b      	adcs	r3, r1
 800f646:	637b      	str	r3, [r7, #52]	@ 0x34
 800f648:	f04f 0200 	mov.w	r2, #0
 800f64c:	f04f 0300 	mov.w	r3, #0
 800f650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800f654:	4659      	mov	r1, fp
 800f656:	00cb      	lsls	r3, r1, #3
 800f658:	4651      	mov	r1, sl
 800f65a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f65e:	4651      	mov	r1, sl
 800f660:	00ca      	lsls	r2, r1, #3
 800f662:	4610      	mov	r0, r2
 800f664:	4619      	mov	r1, r3
 800f666:	4603      	mov	r3, r0
 800f668:	4642      	mov	r2, r8
 800f66a:	189b      	adds	r3, r3, r2
 800f66c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f670:	464b      	mov	r3, r9
 800f672:	460a      	mov	r2, r1
 800f674:	eb42 0303 	adc.w	r3, r2, r3
 800f678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	2200      	movs	r2, #0
 800f684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f688:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800f68c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800f690:	460b      	mov	r3, r1
 800f692:	18db      	adds	r3, r3, r3
 800f694:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f696:	4613      	mov	r3, r2
 800f698:	eb42 0303 	adc.w	r3, r2, r3
 800f69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f69e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800f6a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800f6a6:	f7f1 fc6d 	bl	8000f84 <__aeabi_uldivmod>
 800f6aa:	4602      	mov	r2, r0
 800f6ac:	460b      	mov	r3, r1
 800f6ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f6e4 <UART_SetConfig+0x2d4>)
 800f6b0:	fba3 1302 	umull	r1, r3, r3, r2
 800f6b4:	095b      	lsrs	r3, r3, #5
 800f6b6:	2164      	movs	r1, #100	@ 0x64
 800f6b8:	fb01 f303 	mul.w	r3, r1, r3
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	00db      	lsls	r3, r3, #3
 800f6c0:	3332      	adds	r3, #50	@ 0x32
 800f6c2:	4a08      	ldr	r2, [pc, #32]	@ (800f6e4 <UART_SetConfig+0x2d4>)
 800f6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800f6c8:	095b      	lsrs	r3, r3, #5
 800f6ca:	f003 0207 	and.w	r2, r3, #7
 800f6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4422      	add	r2, r4
 800f6d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800f6d8:	e106      	b.n	800f8e8 <UART_SetConfig+0x4d8>
 800f6da:	bf00      	nop
 800f6dc:	40011000 	.word	0x40011000
 800f6e0:	40011400 	.word	0x40011400
 800f6e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f6e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f6f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800f6f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800f6fa:	4642      	mov	r2, r8
 800f6fc:	464b      	mov	r3, r9
 800f6fe:	1891      	adds	r1, r2, r2
 800f700:	6239      	str	r1, [r7, #32]
 800f702:	415b      	adcs	r3, r3
 800f704:	627b      	str	r3, [r7, #36]	@ 0x24
 800f706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800f70a:	4641      	mov	r1, r8
 800f70c:	1854      	adds	r4, r2, r1
 800f70e:	4649      	mov	r1, r9
 800f710:	eb43 0501 	adc.w	r5, r3, r1
 800f714:	f04f 0200 	mov.w	r2, #0
 800f718:	f04f 0300 	mov.w	r3, #0
 800f71c:	00eb      	lsls	r3, r5, #3
 800f71e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f722:	00e2      	lsls	r2, r4, #3
 800f724:	4614      	mov	r4, r2
 800f726:	461d      	mov	r5, r3
 800f728:	4643      	mov	r3, r8
 800f72a:	18e3      	adds	r3, r4, r3
 800f72c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f730:	464b      	mov	r3, r9
 800f732:	eb45 0303 	adc.w	r3, r5, r3
 800f736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f73e:	685b      	ldr	r3, [r3, #4]
 800f740:	2200      	movs	r2, #0
 800f742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800f746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f74a:	f04f 0200 	mov.w	r2, #0
 800f74e:	f04f 0300 	mov.w	r3, #0
 800f752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800f756:	4629      	mov	r1, r5
 800f758:	008b      	lsls	r3, r1, #2
 800f75a:	4621      	mov	r1, r4
 800f75c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f760:	4621      	mov	r1, r4
 800f762:	008a      	lsls	r2, r1, #2
 800f764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800f768:	f7f1 fc0c 	bl	8000f84 <__aeabi_uldivmod>
 800f76c:	4602      	mov	r2, r0
 800f76e:	460b      	mov	r3, r1
 800f770:	4b60      	ldr	r3, [pc, #384]	@ (800f8f4 <UART_SetConfig+0x4e4>)
 800f772:	fba3 2302 	umull	r2, r3, r3, r2
 800f776:	095b      	lsrs	r3, r3, #5
 800f778:	011c      	lsls	r4, r3, #4
 800f77a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f77e:	2200      	movs	r2, #0
 800f780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800f784:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800f788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800f78c:	4642      	mov	r2, r8
 800f78e:	464b      	mov	r3, r9
 800f790:	1891      	adds	r1, r2, r2
 800f792:	61b9      	str	r1, [r7, #24]
 800f794:	415b      	adcs	r3, r3
 800f796:	61fb      	str	r3, [r7, #28]
 800f798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f79c:	4641      	mov	r1, r8
 800f79e:	1851      	adds	r1, r2, r1
 800f7a0:	6139      	str	r1, [r7, #16]
 800f7a2:	4649      	mov	r1, r9
 800f7a4:	414b      	adcs	r3, r1
 800f7a6:	617b      	str	r3, [r7, #20]
 800f7a8:	f04f 0200 	mov.w	r2, #0
 800f7ac:	f04f 0300 	mov.w	r3, #0
 800f7b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800f7b4:	4659      	mov	r1, fp
 800f7b6:	00cb      	lsls	r3, r1, #3
 800f7b8:	4651      	mov	r1, sl
 800f7ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f7be:	4651      	mov	r1, sl
 800f7c0:	00ca      	lsls	r2, r1, #3
 800f7c2:	4610      	mov	r0, r2
 800f7c4:	4619      	mov	r1, r3
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	4642      	mov	r2, r8
 800f7ca:	189b      	adds	r3, r3, r2
 800f7cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f7d0:	464b      	mov	r3, r9
 800f7d2:	460a      	mov	r2, r1
 800f7d4:	eb42 0303 	adc.w	r3, r2, r3
 800f7d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800f7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f7e0:	685b      	ldr	r3, [r3, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800f7e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f7e8:	f04f 0200 	mov.w	r2, #0
 800f7ec:	f04f 0300 	mov.w	r3, #0
 800f7f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800f7f4:	4649      	mov	r1, r9
 800f7f6:	008b      	lsls	r3, r1, #2
 800f7f8:	4641      	mov	r1, r8
 800f7fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f7fe:	4641      	mov	r1, r8
 800f800:	008a      	lsls	r2, r1, #2
 800f802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800f806:	f7f1 fbbd 	bl	8000f84 <__aeabi_uldivmod>
 800f80a:	4602      	mov	r2, r0
 800f80c:	460b      	mov	r3, r1
 800f80e:	4611      	mov	r1, r2
 800f810:	4b38      	ldr	r3, [pc, #224]	@ (800f8f4 <UART_SetConfig+0x4e4>)
 800f812:	fba3 2301 	umull	r2, r3, r3, r1
 800f816:	095b      	lsrs	r3, r3, #5
 800f818:	2264      	movs	r2, #100	@ 0x64
 800f81a:	fb02 f303 	mul.w	r3, r2, r3
 800f81e:	1acb      	subs	r3, r1, r3
 800f820:	011b      	lsls	r3, r3, #4
 800f822:	3332      	adds	r3, #50	@ 0x32
 800f824:	4a33      	ldr	r2, [pc, #204]	@ (800f8f4 <UART_SetConfig+0x4e4>)
 800f826:	fba2 2303 	umull	r2, r3, r2, r3
 800f82a:	095b      	lsrs	r3, r3, #5
 800f82c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f830:	441c      	add	r4, r3
 800f832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800f836:	2200      	movs	r2, #0
 800f838:	673b      	str	r3, [r7, #112]	@ 0x70
 800f83a:	677a      	str	r2, [r7, #116]	@ 0x74
 800f83c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800f840:	4642      	mov	r2, r8
 800f842:	464b      	mov	r3, r9
 800f844:	1891      	adds	r1, r2, r2
 800f846:	60b9      	str	r1, [r7, #8]
 800f848:	415b      	adcs	r3, r3
 800f84a:	60fb      	str	r3, [r7, #12]
 800f84c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f850:	4641      	mov	r1, r8
 800f852:	1851      	adds	r1, r2, r1
 800f854:	6039      	str	r1, [r7, #0]
 800f856:	4649      	mov	r1, r9
 800f858:	414b      	adcs	r3, r1
 800f85a:	607b      	str	r3, [r7, #4]
 800f85c:	f04f 0200 	mov.w	r2, #0
 800f860:	f04f 0300 	mov.w	r3, #0
 800f864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800f868:	4659      	mov	r1, fp
 800f86a:	00cb      	lsls	r3, r1, #3
 800f86c:	4651      	mov	r1, sl
 800f86e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800f872:	4651      	mov	r1, sl
 800f874:	00ca      	lsls	r2, r1, #3
 800f876:	4610      	mov	r0, r2
 800f878:	4619      	mov	r1, r3
 800f87a:	4603      	mov	r3, r0
 800f87c:	4642      	mov	r2, r8
 800f87e:	189b      	adds	r3, r3, r2
 800f880:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f882:	464b      	mov	r3, r9
 800f884:	460a      	mov	r2, r1
 800f886:	eb42 0303 	adc.w	r3, r2, r3
 800f88a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f88c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	2200      	movs	r2, #0
 800f894:	663b      	str	r3, [r7, #96]	@ 0x60
 800f896:	667a      	str	r2, [r7, #100]	@ 0x64
 800f898:	f04f 0200 	mov.w	r2, #0
 800f89c:	f04f 0300 	mov.w	r3, #0
 800f8a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800f8a4:	4649      	mov	r1, r9
 800f8a6:	008b      	lsls	r3, r1, #2
 800f8a8:	4641      	mov	r1, r8
 800f8aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800f8ae:	4641      	mov	r1, r8
 800f8b0:	008a      	lsls	r2, r1, #2
 800f8b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800f8b6:	f7f1 fb65 	bl	8000f84 <__aeabi_uldivmod>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	460b      	mov	r3, r1
 800f8be:	4b0d      	ldr	r3, [pc, #52]	@ (800f8f4 <UART_SetConfig+0x4e4>)
 800f8c0:	fba3 1302 	umull	r1, r3, r3, r2
 800f8c4:	095b      	lsrs	r3, r3, #5
 800f8c6:	2164      	movs	r1, #100	@ 0x64
 800f8c8:	fb01 f303 	mul.w	r3, r1, r3
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	011b      	lsls	r3, r3, #4
 800f8d0:	3332      	adds	r3, #50	@ 0x32
 800f8d2:	4a08      	ldr	r2, [pc, #32]	@ (800f8f4 <UART_SetConfig+0x4e4>)
 800f8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f8d8:	095b      	lsrs	r3, r3, #5
 800f8da:	f003 020f 	and.w	r2, r3, #15
 800f8de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	4422      	add	r2, r4
 800f8e6:	609a      	str	r2, [r3, #8]
}
 800f8e8:	bf00      	nop
 800f8ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f8f4:	51eb851f 	.word	0x51eb851f

0800f8f8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f8fc:	4904      	ldr	r1, [pc, #16]	@ (800f910 <MX_FATFS_Init+0x18>)
 800f8fe:	4805      	ldr	r0, [pc, #20]	@ (800f914 <MX_FATFS_Init+0x1c>)
 800f900:	f003 f8aa 	bl	8012a58 <FATFS_LinkDriver>
 800f904:	4603      	mov	r3, r0
 800f906:	461a      	mov	r2, r3
 800f908:	4b03      	ldr	r3, [pc, #12]	@ (800f918 <MX_FATFS_Init+0x20>)
 800f90a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f90c:	bf00      	nop
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	20001c50 	.word	0x20001c50
 800f914:	20000044 	.word	0x20000044
 800f918:	20001c4c 	.word	0x20001c4c

0800f91c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f91c:	b480      	push	{r7}
 800f91e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f920:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f922:	4618      	mov	r0, r3
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	4603      	mov	r3, r0
 800f934:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800f936:	79fb      	ldrb	r3, [r7, #7]
 800f938:	4618      	mov	r0, r3
 800f93a:	f000 f9d3 	bl	800fce4 <USER_SPI_initialize>
 800f93e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f940:	4618      	mov	r0, r3
 800f942:	3708      	adds	r7, #8
 800f944:	46bd      	mov	sp, r7
 800f946:	bd80      	pop	{r7, pc}

0800f948 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	4603      	mov	r3, r0
 800f950:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	4618      	mov	r0, r3
 800f956:	f000 fab1 	bl	800febc <USER_SPI_status>
 800f95a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f95c:	4618      	mov	r0, r3
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60b9      	str	r1, [r7, #8]
 800f96c:	607a      	str	r2, [r7, #4]
 800f96e:	603b      	str	r3, [r7, #0]
 800f970:	4603      	mov	r3, r0
 800f972:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800f974:	7bf8      	ldrb	r0, [r7, #15]
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	68b9      	ldr	r1, [r7, #8]
 800f97c:	f000 fab4 	bl	800fee8 <USER_SPI_read>
 800f980:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f982:	4618      	mov	r0, r3
 800f984:	3710      	adds	r7, #16
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}

0800f98a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f98a:	b580      	push	{r7, lr}
 800f98c:	b084      	sub	sp, #16
 800f98e:	af00      	add	r7, sp, #0
 800f990:	60b9      	str	r1, [r7, #8]
 800f992:	607a      	str	r2, [r7, #4]
 800f994:	603b      	str	r3, [r7, #0]
 800f996:	4603      	mov	r3, r0
 800f998:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800f99a:	7bf8      	ldrb	r0, [r7, #15]
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	687a      	ldr	r2, [r7, #4]
 800f9a0:	68b9      	ldr	r1, [r7, #8]
 800f9a2:	f000 fb07 	bl	800ffb4 <USER_SPI_write>
 800f9a6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	603a      	str	r2, [r7, #0]
 800f9ba:	71fb      	strb	r3, [r7, #7]
 800f9bc:	460b      	mov	r3, r1
 800f9be:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800f9c0:	79b9      	ldrb	r1, [r7, #6]
 800f9c2:	79fb      	ldrb	r3, [r7, #7]
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 fb70 	bl	80100ac <USER_SPI_ioctl>
 800f9cc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
	...

0800f9d8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b082      	sub	sp, #8
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800f9e0:	f7f8 f9c2 	bl	8007d68 <HAL_GetTick>
 800f9e4:	4603      	mov	r3, r0
 800f9e6:	4a04      	ldr	r2, [pc, #16]	@ (800f9f8 <SPI_Timer_On+0x20>)
 800f9e8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800f9ea:	4a04      	ldr	r2, [pc, #16]	@ (800f9fc <SPI_Timer_On+0x24>)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6013      	str	r3, [r2, #0]
}
 800f9f0:	bf00      	nop
 800f9f2:	3708      	adds	r7, #8
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	20001c58 	.word	0x20001c58
 800f9fc:	20001c5c 	.word	0x20001c5c

0800fa00 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800fa00:	b580      	push	{r7, lr}
 800fa02:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800fa04:	f7f8 f9b0 	bl	8007d68 <HAL_GetTick>
 800fa08:	4602      	mov	r2, r0
 800fa0a:	4b06      	ldr	r3, [pc, #24]	@ (800fa24 <SPI_Timer_Status+0x24>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	1ad2      	subs	r2, r2, r3
 800fa10:	4b05      	ldr	r3, [pc, #20]	@ (800fa28 <SPI_Timer_Status+0x28>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	429a      	cmp	r2, r3
 800fa16:	bf34      	ite	cc
 800fa18:	2301      	movcc	r3, #1
 800fa1a:	2300      	movcs	r3, #0
 800fa1c:	b2db      	uxtb	r3, r3
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	bd80      	pop	{r7, pc}
 800fa22:	bf00      	nop
 800fa24:	20001c58 	.word	0x20001c58
 800fa28:	20001c5c 	.word	0x20001c5c

0800fa2c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b086      	sub	sp, #24
 800fa30:	af02      	add	r7, sp, #8
 800fa32:	4603      	mov	r3, r0
 800fa34:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800fa36:	f107 020f 	add.w	r2, r7, #15
 800fa3a:	1df9      	adds	r1, r7, #7
 800fa3c:	2332      	movs	r3, #50	@ 0x32
 800fa3e:	9300      	str	r3, [sp, #0]
 800fa40:	2301      	movs	r3, #1
 800fa42:	4804      	ldr	r0, [pc, #16]	@ (800fa54 <xchg_spi+0x28>)
 800fa44:	f7fd fcc5 	bl	800d3d2 <HAL_SPI_TransmitReceive>
    return rxDat;
 800fa48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	20001744 	.word	0x20001744

0800fa58 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800fa58:	b590      	push	{r4, r7, lr}
 800fa5a:	b085      	sub	sp, #20
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800fa62:	2300      	movs	r3, #0
 800fa64:	60fb      	str	r3, [r7, #12]
 800fa66:	e00a      	b.n	800fa7e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	18d4      	adds	r4, r2, r3
 800fa6e:	20ff      	movs	r0, #255	@ 0xff
 800fa70:	f7ff ffdc 	bl	800fa2c <xchg_spi>
 800fa74:	4603      	mov	r3, r0
 800fa76:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	3301      	adds	r3, #1
 800fa7c:	60fb      	str	r3, [r7, #12]
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	429a      	cmp	r2, r3
 800fa84:	d3f0      	bcc.n	800fa68 <rcvr_spi_multi+0x10>
	}
}
 800fa86:	bf00      	nop
 800fa88:	bf00      	nop
 800fa8a:	3714      	adds	r7, #20
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd90      	pop	{r4, r7, pc}

0800fa90 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b082      	sub	sp, #8
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	b29a      	uxth	r2, r3
 800fa9e:	f04f 33ff 	mov.w	r3, #4294967295
 800faa2:	6879      	ldr	r1, [r7, #4]
 800faa4:	4803      	ldr	r0, [pc, #12]	@ (800fab4 <xmit_spi_multi+0x24>)
 800faa6:	f7fd fb50 	bl	800d14a <HAL_SPI_Transmit>
}
 800faaa:	bf00      	nop
 800faac:	3708      	adds	r7, #8
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd80      	pop	{r7, pc}
 800fab2:	bf00      	nop
 800fab4:	20001744 	.word	0x20001744

0800fab8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b086      	sub	sp, #24
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800fac0:	f7f8 f952 	bl	8007d68 <HAL_GetTick>
 800fac4:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800faca:	20ff      	movs	r0, #255	@ 0xff
 800facc:	f7ff ffae 	bl	800fa2c <xchg_spi>
 800fad0:	4603      	mov	r3, r0
 800fad2:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800fad4:	7bfb      	ldrb	r3, [r7, #15]
 800fad6:	2bff      	cmp	r3, #255	@ 0xff
 800fad8:	d007      	beq.n	800faea <wait_ready+0x32>
 800fada:	f7f8 f945 	bl	8007d68 <HAL_GetTick>
 800fade:	4602      	mov	r2, r0
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	1ad3      	subs	r3, r2, r3
 800fae4:	693a      	ldr	r2, [r7, #16]
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d8ef      	bhi.n	800faca <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800faea:	7bfb      	ldrb	r3, [r7, #15]
 800faec:	2bff      	cmp	r3, #255	@ 0xff
 800faee:	bf0c      	ite	eq
 800faf0:	2301      	moveq	r3, #1
 800faf2:	2300      	movne	r3, #0
 800faf4:	b2db      	uxtb	r3, r3
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3718      	adds	r7, #24
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
	...

0800fb00 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800fb04:	2201      	movs	r2, #1
 800fb06:	2110      	movs	r1, #16
 800fb08:	4803      	ldr	r0, [pc, #12]	@ (800fb18 <despiselect+0x18>)
 800fb0a:	f7f9 fdb3 	bl	8009674 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800fb0e:	20ff      	movs	r0, #255	@ 0xff
 800fb10:	f7ff ff8c 	bl	800fa2c <xchg_spi>

}
 800fb14:	bf00      	nop
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	40020000 	.word	0x40020000

0800fb1c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800fb20:	2200      	movs	r2, #0
 800fb22:	2110      	movs	r1, #16
 800fb24:	4809      	ldr	r0, [pc, #36]	@ (800fb4c <spiselect+0x30>)
 800fb26:	f7f9 fda5 	bl	8009674 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800fb2a:	20ff      	movs	r0, #255	@ 0xff
 800fb2c:	f7ff ff7e 	bl	800fa2c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800fb30:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800fb34:	f7ff ffc0 	bl	800fab8 <wait_ready>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d001      	beq.n	800fb42 <spiselect+0x26>
 800fb3e:	2301      	movs	r3, #1
 800fb40:	e002      	b.n	800fb48 <spiselect+0x2c>

	despiselect();
 800fb42:	f7ff ffdd 	bl	800fb00 <despiselect>
	return 0;	/* Timeout */
 800fb46:	2300      	movs	r3, #0
}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	40020000 	.word	0x40020000

0800fb50 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b084      	sub	sp, #16
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
 800fb58:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800fb5a:	20c8      	movs	r0, #200	@ 0xc8
 800fb5c:	f7ff ff3c 	bl	800f9d8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800fb60:	20ff      	movs	r0, #255	@ 0xff
 800fb62:	f7ff ff63 	bl	800fa2c <xchg_spi>
 800fb66:	4603      	mov	r3, r0
 800fb68:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
 800fb6c:	2bff      	cmp	r3, #255	@ 0xff
 800fb6e:	d104      	bne.n	800fb7a <rcvr_datablock+0x2a>
 800fb70:	f7ff ff46 	bl	800fa00 <SPI_Timer_Status>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d1f2      	bne.n	800fb60 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800fb7a:	7bfb      	ldrb	r3, [r7, #15]
 800fb7c:	2bfe      	cmp	r3, #254	@ 0xfe
 800fb7e:	d001      	beq.n	800fb84 <rcvr_datablock+0x34>
 800fb80:	2300      	movs	r3, #0
 800fb82:	e00a      	b.n	800fb9a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff ff66 	bl	800fa58 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800fb8c:	20ff      	movs	r0, #255	@ 0xff
 800fb8e:	f7ff ff4d 	bl	800fa2c <xchg_spi>
 800fb92:	20ff      	movs	r0, #255	@ 0xff
 800fb94:	f7ff ff4a 	bl	800fa2c <xchg_spi>

	return 1;						/* Function succeeded */
 800fb98:	2301      	movs	r3, #1
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}

0800fba2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800fba2:	b580      	push	{r7, lr}
 800fba4:	b084      	sub	sp, #16
 800fba6:	af00      	add	r7, sp, #0
 800fba8:	6078      	str	r0, [r7, #4]
 800fbaa:	460b      	mov	r3, r1
 800fbac:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800fbae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800fbb2:	f7ff ff81 	bl	800fab8 <wait_ready>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d101      	bne.n	800fbc0 <xmit_datablock+0x1e>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	e01e      	b.n	800fbfe <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800fbc0:	78fb      	ldrb	r3, [r7, #3]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7ff ff32 	bl	800fa2c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800fbc8:	78fb      	ldrb	r3, [r7, #3]
 800fbca:	2bfd      	cmp	r3, #253	@ 0xfd
 800fbcc:	d016      	beq.n	800fbfc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800fbce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f7ff ff5c 	bl	800fa90 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800fbd8:	20ff      	movs	r0, #255	@ 0xff
 800fbda:	f7ff ff27 	bl	800fa2c <xchg_spi>
 800fbde:	20ff      	movs	r0, #255	@ 0xff
 800fbe0:	f7ff ff24 	bl	800fa2c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800fbe4:	20ff      	movs	r0, #255	@ 0xff
 800fbe6:	f7ff ff21 	bl	800fa2c <xchg_spi>
 800fbea:	4603      	mov	r3, r0
 800fbec:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800fbee:	7bfb      	ldrb	r3, [r7, #15]
 800fbf0:	f003 031f 	and.w	r3, r3, #31
 800fbf4:	2b05      	cmp	r3, #5
 800fbf6:	d001      	beq.n	800fbfc <xmit_datablock+0x5a>
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	e000      	b.n	800fbfe <xmit_datablock+0x5c>
	}
	return 1;
 800fbfc:	2301      	movs	r3, #1
}
 800fbfe:	4618      	mov	r0, r3
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}

0800fc06 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800fc06:	b580      	push	{r7, lr}
 800fc08:	b084      	sub	sp, #16
 800fc0a:	af00      	add	r7, sp, #0
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	6039      	str	r1, [r7, #0]
 800fc10:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800fc12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	da0e      	bge.n	800fc38 <send_cmd+0x32>
		cmd &= 0x7F;
 800fc1a:	79fb      	ldrb	r3, [r7, #7]
 800fc1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc20:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800fc22:	2100      	movs	r1, #0
 800fc24:	2037      	movs	r0, #55	@ 0x37
 800fc26:	f7ff ffee 	bl	800fc06 <send_cmd>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800fc2e:	7bbb      	ldrb	r3, [r7, #14]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d901      	bls.n	800fc38 <send_cmd+0x32>
 800fc34:	7bbb      	ldrb	r3, [r7, #14]
 800fc36:	e051      	b.n	800fcdc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800fc38:	79fb      	ldrb	r3, [r7, #7]
 800fc3a:	2b0c      	cmp	r3, #12
 800fc3c:	d008      	beq.n	800fc50 <send_cmd+0x4a>
		despiselect();
 800fc3e:	f7ff ff5f 	bl	800fb00 <despiselect>
		if (!spiselect()) return 0xFF;
 800fc42:	f7ff ff6b 	bl	800fb1c <spiselect>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d101      	bne.n	800fc50 <send_cmd+0x4a>
 800fc4c:	23ff      	movs	r3, #255	@ 0xff
 800fc4e:	e045      	b.n	800fcdc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800fc50:	79fb      	ldrb	r3, [r7, #7]
 800fc52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff fee7 	bl	800fa2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	0e1b      	lsrs	r3, r3, #24
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7ff fee1 	bl	800fa2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	0c1b      	lsrs	r3, r3, #16
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	4618      	mov	r0, r3
 800fc72:	f7ff fedb 	bl	800fa2c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	0a1b      	lsrs	r3, r3, #8
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7ff fed5 	bl	800fa2c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	b2db      	uxtb	r3, r3
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7ff fed0 	bl	800fa2c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800fc90:	79fb      	ldrb	r3, [r7, #7]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d101      	bne.n	800fc9a <send_cmd+0x94>
 800fc96:	2395      	movs	r3, #149	@ 0x95
 800fc98:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	2b08      	cmp	r3, #8
 800fc9e:	d101      	bne.n	800fca4 <send_cmd+0x9e>
 800fca0:	2387      	movs	r3, #135	@ 0x87
 800fca2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800fca4:	7bfb      	ldrb	r3, [r7, #15]
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7ff fec0 	bl	800fa2c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800fcac:	79fb      	ldrb	r3, [r7, #7]
 800fcae:	2b0c      	cmp	r3, #12
 800fcb0:	d102      	bne.n	800fcb8 <send_cmd+0xb2>
 800fcb2:	20ff      	movs	r0, #255	@ 0xff
 800fcb4:	f7ff feba 	bl	800fa2c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800fcb8:	230a      	movs	r3, #10
 800fcba:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800fcbc:	20ff      	movs	r0, #255	@ 0xff
 800fcbe:	f7ff feb5 	bl	800fa2c <xchg_spi>
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800fcc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	da05      	bge.n	800fcda <send_cmd+0xd4>
 800fcce:	7bfb      	ldrb	r3, [r7, #15]
 800fcd0:	3b01      	subs	r3, #1
 800fcd2:	73fb      	strb	r3, [r7, #15]
 800fcd4:	7bfb      	ldrb	r3, [r7, #15]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1f0      	bne.n	800fcbc <send_cmd+0xb6>

	return res;							/* Return received response */
 800fcda:	7bbb      	ldrb	r3, [r7, #14]
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3710      	adds	r7, #16
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800fce4:	b590      	push	{r4, r7, lr}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	4603      	mov	r3, r0
 800fcec:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800fcee:	79fb      	ldrb	r3, [r7, #7]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <USER_SPI_initialize+0x14>
 800fcf4:	2301      	movs	r3, #1
 800fcf6:	e0d6      	b.n	800fea6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800fcf8:	4b6d      	ldr	r3, [pc, #436]	@ (800feb0 <USER_SPI_initialize+0x1cc>)
 800fcfa:	781b      	ldrb	r3, [r3, #0]
 800fcfc:	b2db      	uxtb	r3, r3
 800fcfe:	f003 0302 	and.w	r3, r3, #2
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d003      	beq.n	800fd0e <USER_SPI_initialize+0x2a>
 800fd06:	4b6a      	ldr	r3, [pc, #424]	@ (800feb0 <USER_SPI_initialize+0x1cc>)
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	e0cb      	b.n	800fea6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800fd0e:	4b69      	ldr	r3, [pc, #420]	@ (800feb4 <USER_SPI_initialize+0x1d0>)
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800fd18:	4b66      	ldr	r3, [pc, #408]	@ (800feb4 <USER_SPI_initialize+0x1d0>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800fd20:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800fd22:	230a      	movs	r3, #10
 800fd24:	73fb      	strb	r3, [r7, #15]
 800fd26:	e005      	b.n	800fd34 <USER_SPI_initialize+0x50>
 800fd28:	20ff      	movs	r0, #255	@ 0xff
 800fd2a:	f7ff fe7f 	bl	800fa2c <xchg_spi>
 800fd2e:	7bfb      	ldrb	r3, [r7, #15]
 800fd30:	3b01      	subs	r3, #1
 800fd32:	73fb      	strb	r3, [r7, #15]
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d1f6      	bne.n	800fd28 <USER_SPI_initialize+0x44>

	ty = 0;
 800fd3a:	2300      	movs	r3, #0
 800fd3c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800fd3e:	2100      	movs	r1, #0
 800fd40:	2000      	movs	r0, #0
 800fd42:	f7ff ff60 	bl	800fc06 <send_cmd>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	f040 808b 	bne.w	800fe64 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800fd4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800fd52:	f7ff fe41 	bl	800f9d8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800fd56:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800fd5a:	2008      	movs	r0, #8
 800fd5c:	f7ff ff53 	bl	800fc06 <send_cmd>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b01      	cmp	r3, #1
 800fd64:	d151      	bne.n	800fe0a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800fd66:	2300      	movs	r3, #0
 800fd68:	73fb      	strb	r3, [r7, #15]
 800fd6a:	e00d      	b.n	800fd88 <USER_SPI_initialize+0xa4>
 800fd6c:	7bfc      	ldrb	r4, [r7, #15]
 800fd6e:	20ff      	movs	r0, #255	@ 0xff
 800fd70:	f7ff fe5c 	bl	800fa2c <xchg_spi>
 800fd74:	4603      	mov	r3, r0
 800fd76:	461a      	mov	r2, r3
 800fd78:	f104 0310 	add.w	r3, r4, #16
 800fd7c:	443b      	add	r3, r7
 800fd7e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800fd82:	7bfb      	ldrb	r3, [r7, #15]
 800fd84:	3301      	adds	r3, #1
 800fd86:	73fb      	strb	r3, [r7, #15]
 800fd88:	7bfb      	ldrb	r3, [r7, #15]
 800fd8a:	2b03      	cmp	r3, #3
 800fd8c:	d9ee      	bls.n	800fd6c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800fd8e:	7abb      	ldrb	r3, [r7, #10]
 800fd90:	2b01      	cmp	r3, #1
 800fd92:	d167      	bne.n	800fe64 <USER_SPI_initialize+0x180>
 800fd94:	7afb      	ldrb	r3, [r7, #11]
 800fd96:	2baa      	cmp	r3, #170	@ 0xaa
 800fd98:	d164      	bne.n	800fe64 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800fd9a:	bf00      	nop
 800fd9c:	f7ff fe30 	bl	800fa00 <SPI_Timer_Status>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d007      	beq.n	800fdb6 <USER_SPI_initialize+0xd2>
 800fda6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800fdaa:	20a9      	movs	r0, #169	@ 0xa9
 800fdac:	f7ff ff2b 	bl	800fc06 <send_cmd>
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1f2      	bne.n	800fd9c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800fdb6:	f7ff fe23 	bl	800fa00 <SPI_Timer_Status>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d051      	beq.n	800fe64 <USER_SPI_initialize+0x180>
 800fdc0:	2100      	movs	r1, #0
 800fdc2:	203a      	movs	r0, #58	@ 0x3a
 800fdc4:	f7ff ff1f 	bl	800fc06 <send_cmd>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d14a      	bne.n	800fe64 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800fdce:	2300      	movs	r3, #0
 800fdd0:	73fb      	strb	r3, [r7, #15]
 800fdd2:	e00d      	b.n	800fdf0 <USER_SPI_initialize+0x10c>
 800fdd4:	7bfc      	ldrb	r4, [r7, #15]
 800fdd6:	20ff      	movs	r0, #255	@ 0xff
 800fdd8:	f7ff fe28 	bl	800fa2c <xchg_spi>
 800fddc:	4603      	mov	r3, r0
 800fdde:	461a      	mov	r2, r3
 800fde0:	f104 0310 	add.w	r3, r4, #16
 800fde4:	443b      	add	r3, r7
 800fde6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800fdea:	7bfb      	ldrb	r3, [r7, #15]
 800fdec:	3301      	adds	r3, #1
 800fdee:	73fb      	strb	r3, [r7, #15]
 800fdf0:	7bfb      	ldrb	r3, [r7, #15]
 800fdf2:	2b03      	cmp	r3, #3
 800fdf4:	d9ee      	bls.n	800fdd4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800fdf6:	7a3b      	ldrb	r3, [r7, #8]
 800fdf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d001      	beq.n	800fe04 <USER_SPI_initialize+0x120>
 800fe00:	230c      	movs	r3, #12
 800fe02:	e000      	b.n	800fe06 <USER_SPI_initialize+0x122>
 800fe04:	2304      	movs	r3, #4
 800fe06:	737b      	strb	r3, [r7, #13]
 800fe08:	e02c      	b.n	800fe64 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800fe0a:	2100      	movs	r1, #0
 800fe0c:	20a9      	movs	r0, #169	@ 0xa9
 800fe0e:	f7ff fefa 	bl	800fc06 <send_cmd>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d804      	bhi.n	800fe22 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800fe18:	2302      	movs	r3, #2
 800fe1a:	737b      	strb	r3, [r7, #13]
 800fe1c:	23a9      	movs	r3, #169	@ 0xa9
 800fe1e:	73bb      	strb	r3, [r7, #14]
 800fe20:	e003      	b.n	800fe2a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800fe22:	2301      	movs	r3, #1
 800fe24:	737b      	strb	r3, [r7, #13]
 800fe26:	2301      	movs	r3, #1
 800fe28:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800fe2a:	bf00      	nop
 800fe2c:	f7ff fde8 	bl	800fa00 <SPI_Timer_Status>
 800fe30:	4603      	mov	r3, r0
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d007      	beq.n	800fe46 <USER_SPI_initialize+0x162>
 800fe36:	7bbb      	ldrb	r3, [r7, #14]
 800fe38:	2100      	movs	r1, #0
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7ff fee3 	bl	800fc06 <send_cmd>
 800fe40:	4603      	mov	r3, r0
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1f2      	bne.n	800fe2c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800fe46:	f7ff fddb 	bl	800fa00 <SPI_Timer_Status>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d007      	beq.n	800fe60 <USER_SPI_initialize+0x17c>
 800fe50:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800fe54:	2010      	movs	r0, #16
 800fe56:	f7ff fed6 	bl	800fc06 <send_cmd>
 800fe5a:	4603      	mov	r3, r0
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <USER_SPI_initialize+0x180>
				ty = 0;
 800fe60:	2300      	movs	r3, #0
 800fe62:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800fe64:	4a14      	ldr	r2, [pc, #80]	@ (800feb8 <USER_SPI_initialize+0x1d4>)
 800fe66:	7b7b      	ldrb	r3, [r7, #13]
 800fe68:	7013      	strb	r3, [r2, #0]
	despiselect();
 800fe6a:	f7ff fe49 	bl	800fb00 <despiselect>

	if (ty) {			/* OK */
 800fe6e:	7b7b      	ldrb	r3, [r7, #13]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d012      	beq.n	800fe9a <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800fe74:	4b0f      	ldr	r3, [pc, #60]	@ (800feb4 <USER_SPI_initialize+0x1d0>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	@ (800feb4 <USER_SPI_initialize+0x1d0>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f042 0210 	orr.w	r2, r2, #16
 800fe86:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800fe88:	4b09      	ldr	r3, [pc, #36]	@ (800feb0 <USER_SPI_initialize+0x1cc>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	b2db      	uxtb	r3, r3
 800fe8e:	f023 0301 	bic.w	r3, r3, #1
 800fe92:	b2da      	uxtb	r2, r3
 800fe94:	4b06      	ldr	r3, [pc, #24]	@ (800feb0 <USER_SPI_initialize+0x1cc>)
 800fe96:	701a      	strb	r2, [r3, #0]
 800fe98:	e002      	b.n	800fea0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800fe9a:	4b05      	ldr	r3, [pc, #20]	@ (800feb0 <USER_SPI_initialize+0x1cc>)
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800fea0:	4b03      	ldr	r3, [pc, #12]	@ (800feb0 <USER_SPI_initialize+0x1cc>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	b2db      	uxtb	r3, r3
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3714      	adds	r7, #20
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd90      	pop	{r4, r7, pc}
 800feae:	bf00      	nop
 800feb0:	20000058 	.word	0x20000058
 800feb4:	20001744 	.word	0x20001744
 800feb8:	20001c54 	.word	0x20001c54

0800febc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800febc:	b480      	push	{r7}
 800febe:	b083      	sub	sp, #12
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	4603      	mov	r3, r0
 800fec4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800fec6:	79fb      	ldrb	r3, [r7, #7]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d001      	beq.n	800fed0 <USER_SPI_status+0x14>
 800fecc:	2301      	movs	r3, #1
 800fece:	e002      	b.n	800fed6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800fed0:	4b04      	ldr	r3, [pc, #16]	@ (800fee4 <USER_SPI_status+0x28>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	b2db      	uxtb	r3, r3
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	370c      	adds	r7, #12
 800feda:	46bd      	mov	sp, r7
 800fedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee0:	4770      	bx	lr
 800fee2:	bf00      	nop
 800fee4:	20000058 	.word	0x20000058

0800fee8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	60b9      	str	r1, [r7, #8]
 800fef0:	607a      	str	r2, [r7, #4]
 800fef2:	603b      	str	r3, [r7, #0]
 800fef4:	4603      	mov	r3, r0
 800fef6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800fef8:	7bfb      	ldrb	r3, [r7, #15]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d102      	bne.n	800ff04 <USER_SPI_read+0x1c>
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d101      	bne.n	800ff08 <USER_SPI_read+0x20>
 800ff04:	2304      	movs	r3, #4
 800ff06:	e04d      	b.n	800ffa4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800ff08:	4b28      	ldr	r3, [pc, #160]	@ (800ffac <USER_SPI_read+0xc4>)
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	b2db      	uxtb	r3, r3
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d001      	beq.n	800ff1a <USER_SPI_read+0x32>
 800ff16:	2303      	movs	r3, #3
 800ff18:	e044      	b.n	800ffa4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800ff1a:	4b25      	ldr	r3, [pc, #148]	@ (800ffb0 <USER_SPI_read+0xc8>)
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	f003 0308 	and.w	r3, r3, #8
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d102      	bne.n	800ff2c <USER_SPI_read+0x44>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	025b      	lsls	r3, r3, #9
 800ff2a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d111      	bne.n	800ff56 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800ff32:	6879      	ldr	r1, [r7, #4]
 800ff34:	2011      	movs	r0, #17
 800ff36:	f7ff fe66 	bl	800fc06 <send_cmd>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d129      	bne.n	800ff94 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800ff40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ff44:	68b8      	ldr	r0, [r7, #8]
 800ff46:	f7ff fe03 	bl	800fb50 <rcvr_datablock>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d021      	beq.n	800ff94 <USER_SPI_read+0xac>
			count = 0;
 800ff50:	2300      	movs	r3, #0
 800ff52:	603b      	str	r3, [r7, #0]
 800ff54:	e01e      	b.n	800ff94 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800ff56:	6879      	ldr	r1, [r7, #4]
 800ff58:	2012      	movs	r0, #18
 800ff5a:	f7ff fe54 	bl	800fc06 <send_cmd>
 800ff5e:	4603      	mov	r3, r0
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d117      	bne.n	800ff94 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800ff64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ff68:	68b8      	ldr	r0, [r7, #8]
 800ff6a:	f7ff fdf1 	bl	800fb50 <rcvr_datablock>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00a      	beq.n	800ff8a <USER_SPI_read+0xa2>
				buff += 512;
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800ff7a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800ff7c:	683b      	ldr	r3, [r7, #0]
 800ff7e:	3b01      	subs	r3, #1
 800ff80:	603b      	str	r3, [r7, #0]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d1ed      	bne.n	800ff64 <USER_SPI_read+0x7c>
 800ff88:	e000      	b.n	800ff8c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800ff8a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800ff8c:	2100      	movs	r1, #0
 800ff8e:	200c      	movs	r0, #12
 800ff90:	f7ff fe39 	bl	800fc06 <send_cmd>
		}
	}
	despiselect();
 800ff94:	f7ff fdb4 	bl	800fb00 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	bf14      	ite	ne
 800ff9e:	2301      	movne	r3, #1
 800ffa0:	2300      	moveq	r3, #0
 800ffa2:	b2db      	uxtb	r3, r3
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	20000058 	.word	0x20000058
 800ffb0:	20001c54 	.word	0x20001c54

0800ffb4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800ffb4:	b580      	push	{r7, lr}
 800ffb6:	b084      	sub	sp, #16
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60b9      	str	r1, [r7, #8]
 800ffbc:	607a      	str	r2, [r7, #4]
 800ffbe:	603b      	str	r3, [r7, #0]
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800ffc4:	7bfb      	ldrb	r3, [r7, #15]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d102      	bne.n	800ffd0 <USER_SPI_write+0x1c>
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d101      	bne.n	800ffd4 <USER_SPI_write+0x20>
 800ffd0:	2304      	movs	r3, #4
 800ffd2:	e063      	b.n	801009c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800ffd4:	4b33      	ldr	r3, [pc, #204]	@ (80100a4 <USER_SPI_write+0xf0>)
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	f003 0301 	and.w	r3, r3, #1
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <USER_SPI_write+0x32>
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e05a      	b.n	801009c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800ffe6:	4b2f      	ldr	r3, [pc, #188]	@ (80100a4 <USER_SPI_write+0xf0>)
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	b2db      	uxtb	r3, r3
 800ffec:	f003 0304 	and.w	r3, r3, #4
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d001      	beq.n	800fff8 <USER_SPI_write+0x44>
 800fff4:	2302      	movs	r3, #2
 800fff6:	e051      	b.n	801009c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800fff8:	4b2b      	ldr	r3, [pc, #172]	@ (80100a8 <USER_SPI_write+0xf4>)
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	f003 0308 	and.w	r3, r3, #8
 8010000:	2b00      	cmp	r3, #0
 8010002:	d102      	bne.n	801000a <USER_SPI_write+0x56>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	025b      	lsls	r3, r3, #9
 8010008:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d110      	bne.n	8010032 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8010010:	6879      	ldr	r1, [r7, #4]
 8010012:	2018      	movs	r0, #24
 8010014:	f7ff fdf7 	bl	800fc06 <send_cmd>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d136      	bne.n	801008c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 801001e:	21fe      	movs	r1, #254	@ 0xfe
 8010020:	68b8      	ldr	r0, [r7, #8]
 8010022:	f7ff fdbe 	bl	800fba2 <xmit_datablock>
 8010026:	4603      	mov	r3, r0
 8010028:	2b00      	cmp	r3, #0
 801002a:	d02f      	beq.n	801008c <USER_SPI_write+0xd8>
			count = 0;
 801002c:	2300      	movs	r3, #0
 801002e:	603b      	str	r3, [r7, #0]
 8010030:	e02c      	b.n	801008c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8010032:	4b1d      	ldr	r3, [pc, #116]	@ (80100a8 <USER_SPI_write+0xf4>)
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	f003 0306 	and.w	r3, r3, #6
 801003a:	2b00      	cmp	r3, #0
 801003c:	d003      	beq.n	8010046 <USER_SPI_write+0x92>
 801003e:	6839      	ldr	r1, [r7, #0]
 8010040:	2097      	movs	r0, #151	@ 0x97
 8010042:	f7ff fde0 	bl	800fc06 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8010046:	6879      	ldr	r1, [r7, #4]
 8010048:	2019      	movs	r0, #25
 801004a:	f7ff fddc 	bl	800fc06 <send_cmd>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d11b      	bne.n	801008c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8010054:	21fc      	movs	r1, #252	@ 0xfc
 8010056:	68b8      	ldr	r0, [r7, #8]
 8010058:	f7ff fda3 	bl	800fba2 <xmit_datablock>
 801005c:	4603      	mov	r3, r0
 801005e:	2b00      	cmp	r3, #0
 8010060:	d00a      	beq.n	8010078 <USER_SPI_write+0xc4>
				buff += 512;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8010068:	60bb      	str	r3, [r7, #8]
			} while (--count);
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	3b01      	subs	r3, #1
 801006e:	603b      	str	r3, [r7, #0]
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d1ee      	bne.n	8010054 <USER_SPI_write+0xa0>
 8010076:	e000      	b.n	801007a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8010078:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 801007a:	21fd      	movs	r1, #253	@ 0xfd
 801007c:	2000      	movs	r0, #0
 801007e:	f7ff fd90 	bl	800fba2 <xmit_datablock>
 8010082:	4603      	mov	r3, r0
 8010084:	2b00      	cmp	r3, #0
 8010086:	d101      	bne.n	801008c <USER_SPI_write+0xd8>
 8010088:	2301      	movs	r3, #1
 801008a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 801008c:	f7ff fd38 	bl	800fb00 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	2b00      	cmp	r3, #0
 8010094:	bf14      	ite	ne
 8010096:	2301      	movne	r3, #1
 8010098:	2300      	moveq	r3, #0
 801009a:	b2db      	uxtb	r3, r3
}
 801009c:	4618      	mov	r0, r3
 801009e:	3710      	adds	r7, #16
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	20000058 	.word	0x20000058
 80100a8:	20001c54 	.word	0x20001c54

080100ac <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80100ac:	b580      	push	{r7, lr}
 80100ae:	b08c      	sub	sp, #48	@ 0x30
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	4603      	mov	r3, r0
 80100b4:	603a      	str	r2, [r7, #0]
 80100b6:	71fb      	strb	r3, [r7, #7]
 80100b8:	460b      	mov	r3, r1
 80100ba:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80100bc:	79fb      	ldrb	r3, [r7, #7]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d001      	beq.n	80100c6 <USER_SPI_ioctl+0x1a>
 80100c2:	2304      	movs	r3, #4
 80100c4:	e15a      	b.n	801037c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80100c6:	4baf      	ldr	r3, [pc, #700]	@ (8010384 <USER_SPI_ioctl+0x2d8>)
 80100c8:	781b      	ldrb	r3, [r3, #0]
 80100ca:	b2db      	uxtb	r3, r3
 80100cc:	f003 0301 	and.w	r3, r3, #1
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d001      	beq.n	80100d8 <USER_SPI_ioctl+0x2c>
 80100d4:	2303      	movs	r3, #3
 80100d6:	e151      	b.n	801037c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80100d8:	2301      	movs	r3, #1
 80100da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 80100de:	79bb      	ldrb	r3, [r7, #6]
 80100e0:	2b04      	cmp	r3, #4
 80100e2:	f200 8136 	bhi.w	8010352 <USER_SPI_ioctl+0x2a6>
 80100e6:	a201      	add	r2, pc, #4	@ (adr r2, 80100ec <USER_SPI_ioctl+0x40>)
 80100e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ec:	08010101 	.word	0x08010101
 80100f0:	08010115 	.word	0x08010115
 80100f4:	08010353 	.word	0x08010353
 80100f8:	080101c1 	.word	0x080101c1
 80100fc:	080102b7 	.word	0x080102b7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8010100:	f7ff fd0c 	bl	800fb1c <spiselect>
 8010104:	4603      	mov	r3, r0
 8010106:	2b00      	cmp	r3, #0
 8010108:	f000 8127 	beq.w	801035a <USER_SPI_ioctl+0x2ae>
 801010c:	2300      	movs	r3, #0
 801010e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8010112:	e122      	b.n	801035a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8010114:	2100      	movs	r1, #0
 8010116:	2009      	movs	r0, #9
 8010118:	f7ff fd75 	bl	800fc06 <send_cmd>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	f040 811d 	bne.w	801035e <USER_SPI_ioctl+0x2b2>
 8010124:	f107 030c 	add.w	r3, r7, #12
 8010128:	2110      	movs	r1, #16
 801012a:	4618      	mov	r0, r3
 801012c:	f7ff fd10 	bl	800fb50 <rcvr_datablock>
 8010130:	4603      	mov	r3, r0
 8010132:	2b00      	cmp	r3, #0
 8010134:	f000 8113 	beq.w	801035e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8010138:	7b3b      	ldrb	r3, [r7, #12]
 801013a:	099b      	lsrs	r3, r3, #6
 801013c:	b2db      	uxtb	r3, r3
 801013e:	2b01      	cmp	r3, #1
 8010140:	d111      	bne.n	8010166 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8010142:	7d7b      	ldrb	r3, [r7, #21]
 8010144:	461a      	mov	r2, r3
 8010146:	7d3b      	ldrb	r3, [r7, #20]
 8010148:	021b      	lsls	r3, r3, #8
 801014a:	4413      	add	r3, r2
 801014c:	461a      	mov	r2, r3
 801014e:	7cfb      	ldrb	r3, [r7, #19]
 8010150:	041b      	lsls	r3, r3, #16
 8010152:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8010156:	4413      	add	r3, r2
 8010158:	3301      	adds	r3, #1
 801015a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 801015c:	69fb      	ldr	r3, [r7, #28]
 801015e:	029a      	lsls	r2, r3, #10
 8010160:	683b      	ldr	r3, [r7, #0]
 8010162:	601a      	str	r2, [r3, #0]
 8010164:	e028      	b.n	80101b8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8010166:	7c7b      	ldrb	r3, [r7, #17]
 8010168:	f003 030f 	and.w	r3, r3, #15
 801016c:	b2da      	uxtb	r2, r3
 801016e:	7dbb      	ldrb	r3, [r7, #22]
 8010170:	09db      	lsrs	r3, r3, #7
 8010172:	b2db      	uxtb	r3, r3
 8010174:	4413      	add	r3, r2
 8010176:	b2da      	uxtb	r2, r3
 8010178:	7d7b      	ldrb	r3, [r7, #21]
 801017a:	005b      	lsls	r3, r3, #1
 801017c:	b2db      	uxtb	r3, r3
 801017e:	f003 0306 	and.w	r3, r3, #6
 8010182:	b2db      	uxtb	r3, r3
 8010184:	4413      	add	r3, r2
 8010186:	b2db      	uxtb	r3, r3
 8010188:	3302      	adds	r3, #2
 801018a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 801018e:	7d3b      	ldrb	r3, [r7, #20]
 8010190:	099b      	lsrs	r3, r3, #6
 8010192:	b2db      	uxtb	r3, r3
 8010194:	461a      	mov	r2, r3
 8010196:	7cfb      	ldrb	r3, [r7, #19]
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	441a      	add	r2, r3
 801019c:	7cbb      	ldrb	r3, [r7, #18]
 801019e:	029b      	lsls	r3, r3, #10
 80101a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80101a4:	4413      	add	r3, r2
 80101a6:	3301      	adds	r3, #1
 80101a8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80101aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80101ae:	3b09      	subs	r3, #9
 80101b0:	69fa      	ldr	r2, [r7, #28]
 80101b2:	409a      	lsls	r2, r3
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80101b8:	2300      	movs	r3, #0
 80101ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 80101be:	e0ce      	b.n	801035e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80101c0:	4b71      	ldr	r3, [pc, #452]	@ (8010388 <USER_SPI_ioctl+0x2dc>)
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	f003 0304 	and.w	r3, r3, #4
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d031      	beq.n	8010230 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80101cc:	2100      	movs	r1, #0
 80101ce:	208d      	movs	r0, #141	@ 0x8d
 80101d0:	f7ff fd19 	bl	800fc06 <send_cmd>
 80101d4:	4603      	mov	r3, r0
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	f040 80c3 	bne.w	8010362 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80101dc:	20ff      	movs	r0, #255	@ 0xff
 80101de:	f7ff fc25 	bl	800fa2c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80101e2:	f107 030c 	add.w	r3, r7, #12
 80101e6:	2110      	movs	r1, #16
 80101e8:	4618      	mov	r0, r3
 80101ea:	f7ff fcb1 	bl	800fb50 <rcvr_datablock>
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f000 80b6 	beq.w	8010362 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80101f6:	2330      	movs	r3, #48	@ 0x30
 80101f8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80101fc:	e007      	b.n	801020e <USER_SPI_ioctl+0x162>
 80101fe:	20ff      	movs	r0, #255	@ 0xff
 8010200:	f7ff fc14 	bl	800fa2c <xchg_spi>
 8010204:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010208:	3b01      	subs	r3, #1
 801020a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 801020e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010212:	2b00      	cmp	r3, #0
 8010214:	d1f3      	bne.n	80101fe <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8010216:	7dbb      	ldrb	r3, [r7, #22]
 8010218:	091b      	lsrs	r3, r3, #4
 801021a:	b2db      	uxtb	r3, r3
 801021c:	461a      	mov	r2, r3
 801021e:	2310      	movs	r3, #16
 8010220:	fa03 f202 	lsl.w	r2, r3, r2
 8010224:	683b      	ldr	r3, [r7, #0]
 8010226:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8010228:	2300      	movs	r3, #0
 801022a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 801022e:	e098      	b.n	8010362 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8010230:	2100      	movs	r1, #0
 8010232:	2009      	movs	r0, #9
 8010234:	f7ff fce7 	bl	800fc06 <send_cmd>
 8010238:	4603      	mov	r3, r0
 801023a:	2b00      	cmp	r3, #0
 801023c:	f040 8091 	bne.w	8010362 <USER_SPI_ioctl+0x2b6>
 8010240:	f107 030c 	add.w	r3, r7, #12
 8010244:	2110      	movs	r1, #16
 8010246:	4618      	mov	r0, r3
 8010248:	f7ff fc82 	bl	800fb50 <rcvr_datablock>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 8087 	beq.w	8010362 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8010254:	4b4c      	ldr	r3, [pc, #304]	@ (8010388 <USER_SPI_ioctl+0x2dc>)
 8010256:	781b      	ldrb	r3, [r3, #0]
 8010258:	f003 0302 	and.w	r3, r3, #2
 801025c:	2b00      	cmp	r3, #0
 801025e:	d012      	beq.n	8010286 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8010260:	7dbb      	ldrb	r3, [r7, #22]
 8010262:	005b      	lsls	r3, r3, #1
 8010264:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8010268:	7dfa      	ldrb	r2, [r7, #23]
 801026a:	09d2      	lsrs	r2, r2, #7
 801026c:	b2d2      	uxtb	r2, r2
 801026e:	4413      	add	r3, r2
 8010270:	1c5a      	adds	r2, r3, #1
 8010272:	7e7b      	ldrb	r3, [r7, #25]
 8010274:	099b      	lsrs	r3, r3, #6
 8010276:	b2db      	uxtb	r3, r3
 8010278:	3b01      	subs	r3, #1
 801027a:	fa02 f303 	lsl.w	r3, r2, r3
 801027e:	461a      	mov	r2, r3
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	601a      	str	r2, [r3, #0]
 8010284:	e013      	b.n	80102ae <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8010286:	7dbb      	ldrb	r3, [r7, #22]
 8010288:	109b      	asrs	r3, r3, #2
 801028a:	b29b      	uxth	r3, r3
 801028c:	f003 031f 	and.w	r3, r3, #31
 8010290:	3301      	adds	r3, #1
 8010292:	7dfa      	ldrb	r2, [r7, #23]
 8010294:	00d2      	lsls	r2, r2, #3
 8010296:	f002 0218 	and.w	r2, r2, #24
 801029a:	7df9      	ldrb	r1, [r7, #23]
 801029c:	0949      	lsrs	r1, r1, #5
 801029e:	b2c9      	uxtb	r1, r1
 80102a0:	440a      	add	r2, r1
 80102a2:	3201      	adds	r2, #1
 80102a4:	fb02 f303 	mul.w	r3, r2, r3
 80102a8:	461a      	mov	r2, r3
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80102ae:	2300      	movs	r3, #0
 80102b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80102b4:	e055      	b.n	8010362 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80102b6:	4b34      	ldr	r3, [pc, #208]	@ (8010388 <USER_SPI_ioctl+0x2dc>)
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	f003 0306 	and.w	r3, r3, #6
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d051      	beq.n	8010366 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80102c2:	f107 020c 	add.w	r2, r7, #12
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	210b      	movs	r1, #11
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff feee 	bl	80100ac <USER_SPI_ioctl>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d149      	bne.n	801036a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80102d6:	7b3b      	ldrb	r3, [r7, #12]
 80102d8:	099b      	lsrs	r3, r3, #6
 80102da:	b2db      	uxtb	r3, r3
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d104      	bne.n	80102ea <USER_SPI_ioctl+0x23e>
 80102e0:	7dbb      	ldrb	r3, [r7, #22]
 80102e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d041      	beq.n	801036e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	623b      	str	r3, [r7, #32]
 80102ee:	6a3b      	ldr	r3, [r7, #32]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80102f4:	6a3b      	ldr	r3, [r7, #32]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 80102fa:	4b23      	ldr	r3, [pc, #140]	@ (8010388 <USER_SPI_ioctl+0x2dc>)
 80102fc:	781b      	ldrb	r3, [r3, #0]
 80102fe:	f003 0308 	and.w	r3, r3, #8
 8010302:	2b00      	cmp	r3, #0
 8010304:	d105      	bne.n	8010312 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8010306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010308:	025b      	lsls	r3, r3, #9
 801030a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801030c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801030e:	025b      	lsls	r3, r3, #9
 8010310:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8010312:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010314:	2020      	movs	r0, #32
 8010316:	f7ff fc76 	bl	800fc06 <send_cmd>
 801031a:	4603      	mov	r3, r0
 801031c:	2b00      	cmp	r3, #0
 801031e:	d128      	bne.n	8010372 <USER_SPI_ioctl+0x2c6>
 8010320:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010322:	2021      	movs	r0, #33	@ 0x21
 8010324:	f7ff fc6f 	bl	800fc06 <send_cmd>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	d121      	bne.n	8010372 <USER_SPI_ioctl+0x2c6>
 801032e:	2100      	movs	r1, #0
 8010330:	2026      	movs	r0, #38	@ 0x26
 8010332:	f7ff fc68 	bl	800fc06 <send_cmd>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d11a      	bne.n	8010372 <USER_SPI_ioctl+0x2c6>
 801033c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8010340:	f7ff fbba 	bl	800fab8 <wait_ready>
 8010344:	4603      	mov	r3, r0
 8010346:	2b00      	cmp	r3, #0
 8010348:	d013      	beq.n	8010372 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 801034a:	2300      	movs	r3, #0
 801034c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8010350:	e00f      	b.n	8010372 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8010352:	2304      	movs	r3, #4
 8010354:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8010358:	e00c      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		break;
 801035a:	bf00      	nop
 801035c:	e00a      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		break;
 801035e:	bf00      	nop
 8010360:	e008      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		break;
 8010362:	bf00      	nop
 8010364:	e006      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8010366:	bf00      	nop
 8010368:	e004      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 801036a:	bf00      	nop
 801036c:	e002      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 801036e:	bf00      	nop
 8010370:	e000      	b.n	8010374 <USER_SPI_ioctl+0x2c8>
		break;
 8010372:	bf00      	nop
	}

	despiselect();
 8010374:	f7ff fbc4 	bl	800fb00 <despiselect>

	return res;
 8010378:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801037c:	4618      	mov	r0, r3
 801037e:	3730      	adds	r7, #48	@ 0x30
 8010380:	46bd      	mov	sp, r7
 8010382:	bd80      	pop	{r7, pc}
 8010384:	20000058 	.word	0x20000058
 8010388:	20001c54 	.word	0x20001c54

0801038c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	4603      	mov	r3, r0
 8010394:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010396:	79fb      	ldrb	r3, [r7, #7]
 8010398:	4a08      	ldr	r2, [pc, #32]	@ (80103bc <disk_status+0x30>)
 801039a:	009b      	lsls	r3, r3, #2
 801039c:	4413      	add	r3, r2
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	79fa      	ldrb	r2, [r7, #7]
 80103a4:	4905      	ldr	r1, [pc, #20]	@ (80103bc <disk_status+0x30>)
 80103a6:	440a      	add	r2, r1
 80103a8:	7a12      	ldrb	r2, [r2, #8]
 80103aa:	4610      	mov	r0, r2
 80103ac:	4798      	blx	r3
 80103ae:	4603      	mov	r3, r0
 80103b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80103b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3710      	adds	r7, #16
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bd80      	pop	{r7, pc}
 80103bc:	20001c88 	.word	0x20001c88

080103c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	4603      	mov	r3, r0
 80103c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80103ca:	2300      	movs	r3, #0
 80103cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80103ce:	79fb      	ldrb	r3, [r7, #7]
 80103d0:	4a0d      	ldr	r2, [pc, #52]	@ (8010408 <disk_initialize+0x48>)
 80103d2:	5cd3      	ldrb	r3, [r2, r3]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d111      	bne.n	80103fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80103d8:	79fb      	ldrb	r3, [r7, #7]
 80103da:	4a0b      	ldr	r2, [pc, #44]	@ (8010408 <disk_initialize+0x48>)
 80103dc:	2101      	movs	r1, #1
 80103de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80103e0:	79fb      	ldrb	r3, [r7, #7]
 80103e2:	4a09      	ldr	r2, [pc, #36]	@ (8010408 <disk_initialize+0x48>)
 80103e4:	009b      	lsls	r3, r3, #2
 80103e6:	4413      	add	r3, r2
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	79fa      	ldrb	r2, [r7, #7]
 80103ee:	4906      	ldr	r1, [pc, #24]	@ (8010408 <disk_initialize+0x48>)
 80103f0:	440a      	add	r2, r1
 80103f2:	7a12      	ldrb	r2, [r2, #8]
 80103f4:	4610      	mov	r0, r2
 80103f6:	4798      	blx	r3
 80103f8:	4603      	mov	r3, r0
 80103fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80103fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	20001c88 	.word	0x20001c88

0801040c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801040c:	b590      	push	{r4, r7, lr}
 801040e:	b087      	sub	sp, #28
 8010410:	af00      	add	r7, sp, #0
 8010412:	60b9      	str	r1, [r7, #8]
 8010414:	607a      	str	r2, [r7, #4]
 8010416:	603b      	str	r3, [r7, #0]
 8010418:	4603      	mov	r3, r0
 801041a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801041c:	7bfb      	ldrb	r3, [r7, #15]
 801041e:	4a0a      	ldr	r2, [pc, #40]	@ (8010448 <disk_read+0x3c>)
 8010420:	009b      	lsls	r3, r3, #2
 8010422:	4413      	add	r3, r2
 8010424:	685b      	ldr	r3, [r3, #4]
 8010426:	689c      	ldr	r4, [r3, #8]
 8010428:	7bfb      	ldrb	r3, [r7, #15]
 801042a:	4a07      	ldr	r2, [pc, #28]	@ (8010448 <disk_read+0x3c>)
 801042c:	4413      	add	r3, r2
 801042e:	7a18      	ldrb	r0, [r3, #8]
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	68b9      	ldr	r1, [r7, #8]
 8010436:	47a0      	blx	r4
 8010438:	4603      	mov	r3, r0
 801043a:	75fb      	strb	r3, [r7, #23]
  return res;
 801043c:	7dfb      	ldrb	r3, [r7, #23]
}
 801043e:	4618      	mov	r0, r3
 8010440:	371c      	adds	r7, #28
 8010442:	46bd      	mov	sp, r7
 8010444:	bd90      	pop	{r4, r7, pc}
 8010446:	bf00      	nop
 8010448:	20001c88 	.word	0x20001c88

0801044c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801044c:	b590      	push	{r4, r7, lr}
 801044e:	b087      	sub	sp, #28
 8010450:	af00      	add	r7, sp, #0
 8010452:	60b9      	str	r1, [r7, #8]
 8010454:	607a      	str	r2, [r7, #4]
 8010456:	603b      	str	r3, [r7, #0]
 8010458:	4603      	mov	r3, r0
 801045a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801045c:	7bfb      	ldrb	r3, [r7, #15]
 801045e:	4a0a      	ldr	r2, [pc, #40]	@ (8010488 <disk_write+0x3c>)
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	4413      	add	r3, r2
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	68dc      	ldr	r4, [r3, #12]
 8010468:	7bfb      	ldrb	r3, [r7, #15]
 801046a:	4a07      	ldr	r2, [pc, #28]	@ (8010488 <disk_write+0x3c>)
 801046c:	4413      	add	r3, r2
 801046e:	7a18      	ldrb	r0, [r3, #8]
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	687a      	ldr	r2, [r7, #4]
 8010474:	68b9      	ldr	r1, [r7, #8]
 8010476:	47a0      	blx	r4
 8010478:	4603      	mov	r3, r0
 801047a:	75fb      	strb	r3, [r7, #23]
  return res;
 801047c:	7dfb      	ldrb	r3, [r7, #23]
}
 801047e:	4618      	mov	r0, r3
 8010480:	371c      	adds	r7, #28
 8010482:	46bd      	mov	sp, r7
 8010484:	bd90      	pop	{r4, r7, pc}
 8010486:	bf00      	nop
 8010488:	20001c88 	.word	0x20001c88

0801048c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	4603      	mov	r3, r0
 8010494:	603a      	str	r2, [r7, #0]
 8010496:	71fb      	strb	r3, [r7, #7]
 8010498:	460b      	mov	r3, r1
 801049a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801049c:	79fb      	ldrb	r3, [r7, #7]
 801049e:	4a09      	ldr	r2, [pc, #36]	@ (80104c4 <disk_ioctl+0x38>)
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	4413      	add	r3, r2
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	691b      	ldr	r3, [r3, #16]
 80104a8:	79fa      	ldrb	r2, [r7, #7]
 80104aa:	4906      	ldr	r1, [pc, #24]	@ (80104c4 <disk_ioctl+0x38>)
 80104ac:	440a      	add	r2, r1
 80104ae:	7a10      	ldrb	r0, [r2, #8]
 80104b0:	79b9      	ldrb	r1, [r7, #6]
 80104b2:	683a      	ldr	r2, [r7, #0]
 80104b4:	4798      	blx	r3
 80104b6:	4603      	mov	r3, r0
 80104b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80104ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}
 80104c4:	20001c88 	.word	0x20001c88

080104c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	3301      	adds	r3, #1
 80104d4:	781b      	ldrb	r3, [r3, #0]
 80104d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80104d8:	89fb      	ldrh	r3, [r7, #14]
 80104da:	021b      	lsls	r3, r3, #8
 80104dc:	b21a      	sxth	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	781b      	ldrb	r3, [r3, #0]
 80104e2:	b21b      	sxth	r3, r3
 80104e4:	4313      	orrs	r3, r2
 80104e6:	b21b      	sxth	r3, r3
 80104e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80104ea:	89fb      	ldrh	r3, [r7, #14]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3714      	adds	r7, #20
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80104f8:	b480      	push	{r7}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	3303      	adds	r3, #3
 8010504:	781b      	ldrb	r3, [r3, #0]
 8010506:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	021b      	lsls	r3, r3, #8
 801050c:	687a      	ldr	r2, [r7, #4]
 801050e:	3202      	adds	r2, #2
 8010510:	7812      	ldrb	r2, [r2, #0]
 8010512:	4313      	orrs	r3, r2
 8010514:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	021b      	lsls	r3, r3, #8
 801051a:	687a      	ldr	r2, [r7, #4]
 801051c:	3201      	adds	r2, #1
 801051e:	7812      	ldrb	r2, [r2, #0]
 8010520:	4313      	orrs	r3, r2
 8010522:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010524:	68fb      	ldr	r3, [r7, #12]
 8010526:	021b      	lsls	r3, r3, #8
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	7812      	ldrb	r2, [r2, #0]
 801052c:	4313      	orrs	r3, r2
 801052e:	60fb      	str	r3, [r7, #12]
	return rv;
 8010530:	68fb      	ldr	r3, [r7, #12]
}
 8010532:	4618      	mov	r0, r3
 8010534:	3714      	adds	r7, #20
 8010536:	46bd      	mov	sp, r7
 8010538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801053c:	4770      	bx	lr

0801053e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801053e:	b480      	push	{r7}
 8010540:	b083      	sub	sp, #12
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
 8010546:	460b      	mov	r3, r1
 8010548:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	1c5a      	adds	r2, r3, #1
 801054e:	607a      	str	r2, [r7, #4]
 8010550:	887a      	ldrh	r2, [r7, #2]
 8010552:	b2d2      	uxtb	r2, r2
 8010554:	701a      	strb	r2, [r3, #0]
 8010556:	887b      	ldrh	r3, [r7, #2]
 8010558:	0a1b      	lsrs	r3, r3, #8
 801055a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	1c5a      	adds	r2, r3, #1
 8010560:	607a      	str	r2, [r7, #4]
 8010562:	887a      	ldrh	r2, [r7, #2]
 8010564:	b2d2      	uxtb	r2, r2
 8010566:	701a      	strb	r2, [r3, #0]
}
 8010568:	bf00      	nop
 801056a:	370c      	adds	r7, #12
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr

08010574 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010574:	b480      	push	{r7}
 8010576:	b083      	sub	sp, #12
 8010578:	af00      	add	r7, sp, #0
 801057a:	6078      	str	r0, [r7, #4]
 801057c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	1c5a      	adds	r2, r3, #1
 8010582:	607a      	str	r2, [r7, #4]
 8010584:	683a      	ldr	r2, [r7, #0]
 8010586:	b2d2      	uxtb	r2, r2
 8010588:	701a      	strb	r2, [r3, #0]
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	0a1b      	lsrs	r3, r3, #8
 801058e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	1c5a      	adds	r2, r3, #1
 8010594:	607a      	str	r2, [r7, #4]
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	b2d2      	uxtb	r2, r2
 801059a:	701a      	strb	r2, [r3, #0]
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	0a1b      	lsrs	r3, r3, #8
 80105a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	1c5a      	adds	r2, r3, #1
 80105a6:	607a      	str	r2, [r7, #4]
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	b2d2      	uxtb	r2, r2
 80105ac:	701a      	strb	r2, [r3, #0]
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	0a1b      	lsrs	r3, r3, #8
 80105b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	1c5a      	adds	r2, r3, #1
 80105b8:	607a      	str	r2, [r7, #4]
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	b2d2      	uxtb	r2, r2
 80105be:	701a      	strb	r2, [r3, #0]
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80105cc:	b480      	push	{r7}
 80105ce:	b087      	sub	sp, #28
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	60f8      	str	r0, [r7, #12]
 80105d4:	60b9      	str	r1, [r7, #8]
 80105d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d00d      	beq.n	8010602 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80105e6:	693a      	ldr	r2, [r7, #16]
 80105e8:	1c53      	adds	r3, r2, #1
 80105ea:	613b      	str	r3, [r7, #16]
 80105ec:	697b      	ldr	r3, [r7, #20]
 80105ee:	1c59      	adds	r1, r3, #1
 80105f0:	6179      	str	r1, [r7, #20]
 80105f2:	7812      	ldrb	r2, [r2, #0]
 80105f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	3b01      	subs	r3, #1
 80105fa:	607b      	str	r3, [r7, #4]
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d1f1      	bne.n	80105e6 <mem_cpy+0x1a>
	}
}
 8010602:	bf00      	nop
 8010604:	371c      	adds	r7, #28
 8010606:	46bd      	mov	sp, r7
 8010608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060c:	4770      	bx	lr

0801060e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801060e:	b480      	push	{r7}
 8010610:	b087      	sub	sp, #28
 8010612:	af00      	add	r7, sp, #0
 8010614:	60f8      	str	r0, [r7, #12]
 8010616:	60b9      	str	r1, [r7, #8]
 8010618:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	1c5a      	adds	r2, r3, #1
 8010622:	617a      	str	r2, [r7, #20]
 8010624:	68ba      	ldr	r2, [r7, #8]
 8010626:	b2d2      	uxtb	r2, r2
 8010628:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	3b01      	subs	r3, #1
 801062e:	607b      	str	r3, [r7, #4]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d1f3      	bne.n	801061e <mem_set+0x10>
}
 8010636:	bf00      	nop
 8010638:	bf00      	nop
 801063a:	371c      	adds	r7, #28
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010644:	b480      	push	{r7}
 8010646:	b089      	sub	sp, #36	@ 0x24
 8010648:	af00      	add	r7, sp, #0
 801064a:	60f8      	str	r0, [r7, #12]
 801064c:	60b9      	str	r1, [r7, #8]
 801064e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	61fb      	str	r3, [r7, #28]
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010658:	2300      	movs	r3, #0
 801065a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801065c:	69fb      	ldr	r3, [r7, #28]
 801065e:	1c5a      	adds	r2, r3, #1
 8010660:	61fa      	str	r2, [r7, #28]
 8010662:	781b      	ldrb	r3, [r3, #0]
 8010664:	4619      	mov	r1, r3
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	1c5a      	adds	r2, r3, #1
 801066a:	61ba      	str	r2, [r7, #24]
 801066c:	781b      	ldrb	r3, [r3, #0]
 801066e:	1acb      	subs	r3, r1, r3
 8010670:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	3b01      	subs	r3, #1
 8010676:	607b      	str	r3, [r7, #4]
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d002      	beq.n	8010684 <mem_cmp+0x40>
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d0eb      	beq.n	801065c <mem_cmp+0x18>

	return r;
 8010684:	697b      	ldr	r3, [r7, #20]
}
 8010686:	4618      	mov	r0, r3
 8010688:	3724      	adds	r7, #36	@ 0x24
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr

08010692 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010692:	b480      	push	{r7}
 8010694:	b083      	sub	sp, #12
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
 801069a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801069c:	e002      	b.n	80106a4 <chk_chr+0x12>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	3301      	adds	r3, #1
 80106a2:	607b      	str	r3, [r7, #4]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d005      	beq.n	80106b8 <chk_chr+0x26>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	781b      	ldrb	r3, [r3, #0]
 80106b0:	461a      	mov	r2, r3
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d1f2      	bne.n	801069e <chk_chr+0xc>
	return *str;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	781b      	ldrb	r3, [r3, #0]
}
 80106bc:	4618      	mov	r0, r3
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80106d2:	2300      	movs	r3, #0
 80106d4:	60bb      	str	r3, [r7, #8]
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	60fb      	str	r3, [r7, #12]
 80106da:	e029      	b.n	8010730 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80106dc:	4a27      	ldr	r2, [pc, #156]	@ (801077c <chk_lock+0xb4>)
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	011b      	lsls	r3, r3, #4
 80106e2:	4413      	add	r3, r2
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d01d      	beq.n	8010726 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80106ea:	4a24      	ldr	r2, [pc, #144]	@ (801077c <chk_lock+0xb4>)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	011b      	lsls	r3, r3, #4
 80106f0:	4413      	add	r3, r2
 80106f2:	681a      	ldr	r2, [r3, #0]
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d116      	bne.n	801072a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80106fc:	4a1f      	ldr	r2, [pc, #124]	@ (801077c <chk_lock+0xb4>)
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	011b      	lsls	r3, r3, #4
 8010702:	4413      	add	r3, r2
 8010704:	3304      	adds	r3, #4
 8010706:	681a      	ldr	r2, [r3, #0]
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801070c:	429a      	cmp	r2, r3
 801070e:	d10c      	bne.n	801072a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010710:	4a1a      	ldr	r2, [pc, #104]	@ (801077c <chk_lock+0xb4>)
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	011b      	lsls	r3, r3, #4
 8010716:	4413      	add	r3, r2
 8010718:	3308      	adds	r3, #8
 801071a:	681a      	ldr	r2, [r3, #0]
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010720:	429a      	cmp	r2, r3
 8010722:	d102      	bne.n	801072a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010724:	e007      	b.n	8010736 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010726:	2301      	movs	r3, #1
 8010728:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	3301      	adds	r3, #1
 801072e:	60fb      	str	r3, [r7, #12]
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2b01      	cmp	r3, #1
 8010734:	d9d2      	bls.n	80106dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	2b02      	cmp	r3, #2
 801073a:	d109      	bne.n	8010750 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	2b00      	cmp	r3, #0
 8010740:	d102      	bne.n	8010748 <chk_lock+0x80>
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	2b02      	cmp	r3, #2
 8010746:	d101      	bne.n	801074c <chk_lock+0x84>
 8010748:	2300      	movs	r3, #0
 801074a:	e010      	b.n	801076e <chk_lock+0xa6>
 801074c:	2312      	movs	r3, #18
 801074e:	e00e      	b.n	801076e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010750:	683b      	ldr	r3, [r7, #0]
 8010752:	2b00      	cmp	r3, #0
 8010754:	d108      	bne.n	8010768 <chk_lock+0xa0>
 8010756:	4a09      	ldr	r2, [pc, #36]	@ (801077c <chk_lock+0xb4>)
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	011b      	lsls	r3, r3, #4
 801075c:	4413      	add	r3, r2
 801075e:	330c      	adds	r3, #12
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010766:	d101      	bne.n	801076c <chk_lock+0xa4>
 8010768:	2310      	movs	r3, #16
 801076a:	e000      	b.n	801076e <chk_lock+0xa6>
 801076c:	2300      	movs	r3, #0
}
 801076e:	4618      	mov	r0, r3
 8010770:	3714      	adds	r7, #20
 8010772:	46bd      	mov	sp, r7
 8010774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010778:	4770      	bx	lr
 801077a:	bf00      	nop
 801077c:	20001c68 	.word	0x20001c68

08010780 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010780:	b480      	push	{r7}
 8010782:	b083      	sub	sp, #12
 8010784:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010786:	2300      	movs	r3, #0
 8010788:	607b      	str	r3, [r7, #4]
 801078a:	e002      	b.n	8010792 <enq_lock+0x12>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	3301      	adds	r3, #1
 8010790:	607b      	str	r3, [r7, #4]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d806      	bhi.n	80107a6 <enq_lock+0x26>
 8010798:	4a09      	ldr	r2, [pc, #36]	@ (80107c0 <enq_lock+0x40>)
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	011b      	lsls	r3, r3, #4
 801079e:	4413      	add	r3, r2
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d1f2      	bne.n	801078c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2b02      	cmp	r3, #2
 80107aa:	bf14      	ite	ne
 80107ac:	2301      	movne	r3, #1
 80107ae:	2300      	moveq	r3, #0
 80107b0:	b2db      	uxtb	r3, r3
}
 80107b2:	4618      	mov	r0, r3
 80107b4:	370c      	adds	r7, #12
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	20001c68 	.word	0x20001c68

080107c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b085      	sub	sp, #20
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
 80107cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80107ce:	2300      	movs	r3, #0
 80107d0:	60fb      	str	r3, [r7, #12]
 80107d2:	e01f      	b.n	8010814 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80107d4:	4a41      	ldr	r2, [pc, #260]	@ (80108dc <inc_lock+0x118>)
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	011b      	lsls	r3, r3, #4
 80107da:	4413      	add	r3, r2
 80107dc:	681a      	ldr	r2, [r3, #0]
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d113      	bne.n	801080e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80107e6:	4a3d      	ldr	r2, [pc, #244]	@ (80108dc <inc_lock+0x118>)
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	011b      	lsls	r3, r3, #4
 80107ec:	4413      	add	r3, r2
 80107ee:	3304      	adds	r3, #4
 80107f0:	681a      	ldr	r2, [r3, #0]
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d109      	bne.n	801080e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80107fa:	4a38      	ldr	r2, [pc, #224]	@ (80108dc <inc_lock+0x118>)
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	011b      	lsls	r3, r3, #4
 8010800:	4413      	add	r3, r2
 8010802:	3308      	adds	r3, #8
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801080a:	429a      	cmp	r2, r3
 801080c:	d006      	beq.n	801081c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	3301      	adds	r3, #1
 8010812:	60fb      	str	r3, [r7, #12]
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2b01      	cmp	r3, #1
 8010818:	d9dc      	bls.n	80107d4 <inc_lock+0x10>
 801081a:	e000      	b.n	801081e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801081c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2b02      	cmp	r3, #2
 8010822:	d132      	bne.n	801088a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010824:	2300      	movs	r3, #0
 8010826:	60fb      	str	r3, [r7, #12]
 8010828:	e002      	b.n	8010830 <inc_lock+0x6c>
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	3301      	adds	r3, #1
 801082e:	60fb      	str	r3, [r7, #12]
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	2b01      	cmp	r3, #1
 8010834:	d806      	bhi.n	8010844 <inc_lock+0x80>
 8010836:	4a29      	ldr	r2, [pc, #164]	@ (80108dc <inc_lock+0x118>)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	011b      	lsls	r3, r3, #4
 801083c:	4413      	add	r3, r2
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1f2      	bne.n	801082a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2b02      	cmp	r3, #2
 8010848:	d101      	bne.n	801084e <inc_lock+0x8a>
 801084a:	2300      	movs	r3, #0
 801084c:	e040      	b.n	80108d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681a      	ldr	r2, [r3, #0]
 8010852:	4922      	ldr	r1, [pc, #136]	@ (80108dc <inc_lock+0x118>)
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	011b      	lsls	r3, r3, #4
 8010858:	440b      	add	r3, r1
 801085a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	689a      	ldr	r2, [r3, #8]
 8010860:	491e      	ldr	r1, [pc, #120]	@ (80108dc <inc_lock+0x118>)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	011b      	lsls	r3, r3, #4
 8010866:	440b      	add	r3, r1
 8010868:	3304      	adds	r3, #4
 801086a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	695a      	ldr	r2, [r3, #20]
 8010870:	491a      	ldr	r1, [pc, #104]	@ (80108dc <inc_lock+0x118>)
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	011b      	lsls	r3, r3, #4
 8010876:	440b      	add	r3, r1
 8010878:	3308      	adds	r3, #8
 801087a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801087c:	4a17      	ldr	r2, [pc, #92]	@ (80108dc <inc_lock+0x118>)
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	011b      	lsls	r3, r3, #4
 8010882:	4413      	add	r3, r2
 8010884:	330c      	adds	r3, #12
 8010886:	2200      	movs	r2, #0
 8010888:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d009      	beq.n	80108a4 <inc_lock+0xe0>
 8010890:	4a12      	ldr	r2, [pc, #72]	@ (80108dc <inc_lock+0x118>)
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	011b      	lsls	r3, r3, #4
 8010896:	4413      	add	r3, r2
 8010898:	330c      	adds	r3, #12
 801089a:	881b      	ldrh	r3, [r3, #0]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <inc_lock+0xe0>
 80108a0:	2300      	movs	r3, #0
 80108a2:	e015      	b.n	80108d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d108      	bne.n	80108bc <inc_lock+0xf8>
 80108aa:	4a0c      	ldr	r2, [pc, #48]	@ (80108dc <inc_lock+0x118>)
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	011b      	lsls	r3, r3, #4
 80108b0:	4413      	add	r3, r2
 80108b2:	330c      	adds	r3, #12
 80108b4:	881b      	ldrh	r3, [r3, #0]
 80108b6:	3301      	adds	r3, #1
 80108b8:	b29a      	uxth	r2, r3
 80108ba:	e001      	b.n	80108c0 <inc_lock+0xfc>
 80108bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80108c0:	4906      	ldr	r1, [pc, #24]	@ (80108dc <inc_lock+0x118>)
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	011b      	lsls	r3, r3, #4
 80108c6:	440b      	add	r3, r1
 80108c8:	330c      	adds	r3, #12
 80108ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	3301      	adds	r3, #1
}
 80108d0:	4618      	mov	r0, r3
 80108d2:	3714      	adds	r7, #20
 80108d4:	46bd      	mov	sp, r7
 80108d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108da:	4770      	bx	lr
 80108dc:	20001c68 	.word	0x20001c68

080108e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80108e0:	b480      	push	{r7}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	3b01      	subs	r3, #1
 80108ec:	607b      	str	r3, [r7, #4]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2b01      	cmp	r3, #1
 80108f2:	d825      	bhi.n	8010940 <dec_lock+0x60>
		n = Files[i].ctr;
 80108f4:	4a17      	ldr	r2, [pc, #92]	@ (8010954 <dec_lock+0x74>)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	011b      	lsls	r3, r3, #4
 80108fa:	4413      	add	r3, r2
 80108fc:	330c      	adds	r3, #12
 80108fe:	881b      	ldrh	r3, [r3, #0]
 8010900:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010902:	89fb      	ldrh	r3, [r7, #14]
 8010904:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010908:	d101      	bne.n	801090e <dec_lock+0x2e>
 801090a:	2300      	movs	r3, #0
 801090c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801090e:	89fb      	ldrh	r3, [r7, #14]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d002      	beq.n	801091a <dec_lock+0x3a>
 8010914:	89fb      	ldrh	r3, [r7, #14]
 8010916:	3b01      	subs	r3, #1
 8010918:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801091a:	4a0e      	ldr	r2, [pc, #56]	@ (8010954 <dec_lock+0x74>)
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	011b      	lsls	r3, r3, #4
 8010920:	4413      	add	r3, r2
 8010922:	330c      	adds	r3, #12
 8010924:	89fa      	ldrh	r2, [r7, #14]
 8010926:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010928:	89fb      	ldrh	r3, [r7, #14]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d105      	bne.n	801093a <dec_lock+0x5a>
 801092e:	4a09      	ldr	r2, [pc, #36]	@ (8010954 <dec_lock+0x74>)
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	011b      	lsls	r3, r3, #4
 8010934:	4413      	add	r3, r2
 8010936:	2200      	movs	r2, #0
 8010938:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801093a:	2300      	movs	r3, #0
 801093c:	737b      	strb	r3, [r7, #13]
 801093e:	e001      	b.n	8010944 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010940:	2302      	movs	r3, #2
 8010942:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010944:	7b7b      	ldrb	r3, [r7, #13]
}
 8010946:	4618      	mov	r0, r3
 8010948:	3714      	adds	r7, #20
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	20001c68 	.word	0x20001c68

08010958 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010958:	b480      	push	{r7}
 801095a:	b085      	sub	sp, #20
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010960:	2300      	movs	r3, #0
 8010962:	60fb      	str	r3, [r7, #12]
 8010964:	e010      	b.n	8010988 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010966:	4a0d      	ldr	r2, [pc, #52]	@ (801099c <clear_lock+0x44>)
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	011b      	lsls	r3, r3, #4
 801096c:	4413      	add	r3, r2
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	687a      	ldr	r2, [r7, #4]
 8010972:	429a      	cmp	r2, r3
 8010974:	d105      	bne.n	8010982 <clear_lock+0x2a>
 8010976:	4a09      	ldr	r2, [pc, #36]	@ (801099c <clear_lock+0x44>)
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	011b      	lsls	r3, r3, #4
 801097c:	4413      	add	r3, r2
 801097e:	2200      	movs	r2, #0
 8010980:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	3301      	adds	r3, #1
 8010986:	60fb      	str	r3, [r7, #12]
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2b01      	cmp	r3, #1
 801098c:	d9eb      	bls.n	8010966 <clear_lock+0xe>
	}
}
 801098e:	bf00      	nop
 8010990:	bf00      	nop
 8010992:	3714      	adds	r7, #20
 8010994:	46bd      	mov	sp, r7
 8010996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099a:	4770      	bx	lr
 801099c:	20001c68 	.word	0x20001c68

080109a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b086      	sub	sp, #24
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80109a8:	2300      	movs	r3, #0
 80109aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	78db      	ldrb	r3, [r3, #3]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d034      	beq.n	8010a1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	7858      	ldrb	r0, [r3, #1]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80109c4:	2301      	movs	r3, #1
 80109c6:	697a      	ldr	r2, [r7, #20]
 80109c8:	f7ff fd40 	bl	801044c <disk_write>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d002      	beq.n	80109d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80109d2:	2301      	movs	r3, #1
 80109d4:	73fb      	strb	r3, [r7, #15]
 80109d6:	e022      	b.n	8010a1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2200      	movs	r2, #0
 80109dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	6a1b      	ldr	r3, [r3, #32]
 80109e2:	697a      	ldr	r2, [r7, #20]
 80109e4:	1ad2      	subs	r2, r2, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	699b      	ldr	r3, [r3, #24]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d217      	bcs.n	8010a1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	789b      	ldrb	r3, [r3, #2]
 80109f2:	613b      	str	r3, [r7, #16]
 80109f4:	e010      	b.n	8010a18 <sync_window+0x78>
					wsect += fs->fsize;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	699b      	ldr	r3, [r3, #24]
 80109fa:	697a      	ldr	r2, [r7, #20]
 80109fc:	4413      	add	r3, r2
 80109fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	7858      	ldrb	r0, [r3, #1]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	697a      	ldr	r2, [r7, #20]
 8010a0e:	f7ff fd1d 	bl	801044c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	3b01      	subs	r3, #1
 8010a16:	613b      	str	r3, [r7, #16]
 8010a18:	693b      	ldr	r3, [r7, #16]
 8010a1a:	2b01      	cmp	r3, #1
 8010a1c:	d8eb      	bhi.n	80109f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3718      	adds	r7, #24
 8010a24:	46bd      	mov	sp, r7
 8010a26:	bd80      	pop	{r7, pc}

08010a28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b084      	sub	sp, #16
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010a32:	2300      	movs	r3, #0
 8010a34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a3a:	683a      	ldr	r2, [r7, #0]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d01b      	beq.n	8010a78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f7ff ffad 	bl	80109a0 <sync_window>
 8010a46:	4603      	mov	r3, r0
 8010a48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010a4a:	7bfb      	ldrb	r3, [r7, #15]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d113      	bne.n	8010a78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	7858      	ldrb	r0, [r3, #1]
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	683a      	ldr	r2, [r7, #0]
 8010a5e:	f7ff fcd5 	bl	801040c <disk_read>
 8010a62:	4603      	mov	r3, r0
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d004      	beq.n	8010a72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010a68:	f04f 33ff 	mov.w	r3, #4294967295
 8010a6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	683a      	ldr	r2, [r7, #0]
 8010a76:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8010a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
	...

08010a84 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b084      	sub	sp, #16
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f7ff ff87 	bl	80109a0 <sync_window>
 8010a92:	4603      	mov	r3, r0
 8010a94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010a96:	7bfb      	ldrb	r3, [r7, #15]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d158      	bne.n	8010b4e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	781b      	ldrb	r3, [r3, #0]
 8010aa0:	2b03      	cmp	r3, #3
 8010aa2:	d148      	bne.n	8010b36 <sync_fs+0xb2>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	791b      	ldrb	r3, [r3, #4]
 8010aa8:	2b01      	cmp	r3, #1
 8010aaa:	d144      	bne.n	8010b36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	3330      	adds	r3, #48	@ 0x30
 8010ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7ff fda9 	bl	801060e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3330      	adds	r3, #48	@ 0x30
 8010ac0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8010ac4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7ff fd38 	bl	801053e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	3330      	adds	r3, #48	@ 0x30
 8010ad2:	4921      	ldr	r1, [pc, #132]	@ (8010b58 <sync_fs+0xd4>)
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	f7ff fd4d 	bl	8010574 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	3330      	adds	r3, #48	@ 0x30
 8010ade:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8010ae2:	491e      	ldr	r1, [pc, #120]	@ (8010b5c <sync_fs+0xd8>)
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7ff fd45 	bl	8010574 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	3330      	adds	r3, #48	@ 0x30
 8010aee:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	691b      	ldr	r3, [r3, #16]
 8010af6:	4619      	mov	r1, r3
 8010af8:	4610      	mov	r0, r2
 8010afa:	f7ff fd3b 	bl	8010574 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	3330      	adds	r3, #48	@ 0x30
 8010b02:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	68db      	ldr	r3, [r3, #12]
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	4610      	mov	r0, r2
 8010b0e:	f7ff fd31 	bl	8010574 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	69db      	ldr	r3, [r3, #28]
 8010b16:	1c5a      	adds	r2, r3, #1
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	7858      	ldrb	r0, [r3, #1]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b2a:	2301      	movs	r3, #1
 8010b2c:	f7ff fc8e 	bl	801044c <disk_write>
			fs->fsi_flag = 0;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2200      	movs	r2, #0
 8010b34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	785b      	ldrb	r3, [r3, #1]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	2100      	movs	r1, #0
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f7ff fca4 	bl	801048c <disk_ioctl>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <sync_fs+0xca>
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3710      	adds	r7, #16
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}
 8010b58:	41615252 	.word	0x41615252
 8010b5c:	61417272 	.word	0x61417272

08010b60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b083      	sub	sp, #12
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	3b02      	subs	r3, #2
 8010b6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	695b      	ldr	r3, [r3, #20]
 8010b74:	3b02      	subs	r3, #2
 8010b76:	683a      	ldr	r2, [r7, #0]
 8010b78:	429a      	cmp	r2, r3
 8010b7a:	d301      	bcc.n	8010b80 <clust2sect+0x20>
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	e008      	b.n	8010b92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	895b      	ldrh	r3, [r3, #10]
 8010b84:	461a      	mov	r2, r3
 8010b86:	683b      	ldr	r3, [r7, #0]
 8010b88:	fb03 f202 	mul.w	r2, r3, r2
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b90:	4413      	add	r3, r2
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr

08010b9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b086      	sub	sp, #24
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
 8010ba6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010bae:	683b      	ldr	r3, [r7, #0]
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d904      	bls.n	8010bbe <get_fat+0x20>
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	695b      	ldr	r3, [r3, #20]
 8010bb8:	683a      	ldr	r2, [r7, #0]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d302      	bcc.n	8010bc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	617b      	str	r3, [r7, #20]
 8010bc2:	e08e      	b.n	8010ce2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	781b      	ldrb	r3, [r3, #0]
 8010bce:	2b03      	cmp	r3, #3
 8010bd0:	d061      	beq.n	8010c96 <get_fat+0xf8>
 8010bd2:	2b03      	cmp	r3, #3
 8010bd4:	dc7b      	bgt.n	8010cce <get_fat+0x130>
 8010bd6:	2b01      	cmp	r3, #1
 8010bd8:	d002      	beq.n	8010be0 <get_fat+0x42>
 8010bda:	2b02      	cmp	r3, #2
 8010bdc:	d041      	beq.n	8010c62 <get_fat+0xc4>
 8010bde:	e076      	b.n	8010cce <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	60fb      	str	r3, [r7, #12]
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	085b      	lsrs	r3, r3, #1
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	4413      	add	r3, r2
 8010bec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	6a1a      	ldr	r2, [r3, #32]
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	0a5b      	lsrs	r3, r3, #9
 8010bf6:	4413      	add	r3, r2
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	6938      	ldr	r0, [r7, #16]
 8010bfc:	f7ff ff14 	bl	8010a28 <move_window>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d166      	bne.n	8010cd4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	1c5a      	adds	r2, r3, #1
 8010c0a:	60fa      	str	r2, [r7, #12]
 8010c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c10:	693a      	ldr	r2, [r7, #16]
 8010c12:	4413      	add	r3, r2
 8010c14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010c1a:	693b      	ldr	r3, [r7, #16]
 8010c1c:	6a1a      	ldr	r2, [r3, #32]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	0a5b      	lsrs	r3, r3, #9
 8010c22:	4413      	add	r3, r2
 8010c24:	4619      	mov	r1, r3
 8010c26:	6938      	ldr	r0, [r7, #16]
 8010c28:	f7ff fefe 	bl	8010a28 <move_window>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d152      	bne.n	8010cd8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c38:	693a      	ldr	r2, [r7, #16]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8010c40:	021b      	lsls	r3, r3, #8
 8010c42:	68ba      	ldr	r2, [r7, #8]
 8010c44:	4313      	orrs	r3, r2
 8010c46:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	f003 0301 	and.w	r3, r3, #1
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d002      	beq.n	8010c58 <get_fat+0xba>
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	091b      	lsrs	r3, r3, #4
 8010c56:	e002      	b.n	8010c5e <get_fat+0xc0>
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010c5e:	617b      	str	r3, [r7, #20]
			break;
 8010c60:	e03f      	b.n	8010ce2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	6a1a      	ldr	r2, [r3, #32]
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	0a1b      	lsrs	r3, r3, #8
 8010c6a:	4413      	add	r3, r2
 8010c6c:	4619      	mov	r1, r3
 8010c6e:	6938      	ldr	r0, [r7, #16]
 8010c70:	f7ff feda 	bl	8010a28 <move_window>
 8010c74:	4603      	mov	r3, r0
 8010c76:	2b00      	cmp	r3, #0
 8010c78:	d130      	bne.n	8010cdc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010c80:	683b      	ldr	r3, [r7, #0]
 8010c82:	005b      	lsls	r3, r3, #1
 8010c84:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010c88:	4413      	add	r3, r2
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7ff fc1c 	bl	80104c8 <ld_word>
 8010c90:	4603      	mov	r3, r0
 8010c92:	617b      	str	r3, [r7, #20]
			break;
 8010c94:	e025      	b.n	8010ce2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	6a1a      	ldr	r2, [r3, #32]
 8010c9a:	683b      	ldr	r3, [r7, #0]
 8010c9c:	09db      	lsrs	r3, r3, #7
 8010c9e:	4413      	add	r3, r2
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	6938      	ldr	r0, [r7, #16]
 8010ca4:	f7ff fec0 	bl	8010a28 <move_window>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d118      	bne.n	8010ce0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	009b      	lsls	r3, r3, #2
 8010cb8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010cbc:	4413      	add	r3, r2
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f7ff fc1a 	bl	80104f8 <ld_dword>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8010cca:	617b      	str	r3, [r7, #20]
			break;
 8010ccc:	e009      	b.n	8010ce2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010cce:	2301      	movs	r3, #1
 8010cd0:	617b      	str	r3, [r7, #20]
 8010cd2:	e006      	b.n	8010ce2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cd4:	bf00      	nop
 8010cd6:	e004      	b.n	8010ce2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010cd8:	bf00      	nop
 8010cda:	e002      	b.n	8010ce2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010cdc:	bf00      	nop
 8010cde:	e000      	b.n	8010ce2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ce0:	bf00      	nop
		}
	}

	return val;
 8010ce2:	697b      	ldr	r3, [r7, #20]
}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	3718      	adds	r7, #24
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}

08010cec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8010cec:	b590      	push	{r4, r7, lr}
 8010cee:	b089      	sub	sp, #36	@ 0x24
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8010cf8:	2302      	movs	r3, #2
 8010cfa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8010cfc:	68bb      	ldr	r3, [r7, #8]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	f240 80d9 	bls.w	8010eb6 <put_fat+0x1ca>
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	695b      	ldr	r3, [r3, #20]
 8010d08:	68ba      	ldr	r2, [r7, #8]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	f080 80d3 	bcs.w	8010eb6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	2b03      	cmp	r3, #3
 8010d16:	f000 8096 	beq.w	8010e46 <put_fat+0x15a>
 8010d1a:	2b03      	cmp	r3, #3
 8010d1c:	f300 80cb 	bgt.w	8010eb6 <put_fat+0x1ca>
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d002      	beq.n	8010d2a <put_fat+0x3e>
 8010d24:	2b02      	cmp	r3, #2
 8010d26:	d06e      	beq.n	8010e06 <put_fat+0x11a>
 8010d28:	e0c5      	b.n	8010eb6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	61bb      	str	r3, [r7, #24]
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	085b      	lsrs	r3, r3, #1
 8010d32:	69ba      	ldr	r2, [r7, #24]
 8010d34:	4413      	add	r3, r2
 8010d36:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	6a1a      	ldr	r2, [r3, #32]
 8010d3c:	69bb      	ldr	r3, [r7, #24]
 8010d3e:	0a5b      	lsrs	r3, r3, #9
 8010d40:	4413      	add	r3, r2
 8010d42:	4619      	mov	r1, r3
 8010d44:	68f8      	ldr	r0, [r7, #12]
 8010d46:	f7ff fe6f 	bl	8010a28 <move_window>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010d4e:	7ffb      	ldrb	r3, [r7, #31]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	f040 80a9 	bne.w	8010ea8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010d5c:	69bb      	ldr	r3, [r7, #24]
 8010d5e:	1c59      	adds	r1, r3, #1
 8010d60:	61b9      	str	r1, [r7, #24]
 8010d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d66:	4413      	add	r3, r2
 8010d68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010d6a:	68bb      	ldr	r3, [r7, #8]
 8010d6c:	f003 0301 	and.w	r3, r3, #1
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00d      	beq.n	8010d90 <put_fat+0xa4>
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	b25b      	sxtb	r3, r3
 8010d7a:	f003 030f 	and.w	r3, r3, #15
 8010d7e:	b25a      	sxtb	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	011b      	lsls	r3, r3, #4
 8010d86:	b25b      	sxtb	r3, r3
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	b25b      	sxtb	r3, r3
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	e001      	b.n	8010d94 <put_fat+0xa8>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	b2db      	uxtb	r3, r3
 8010d94:	697a      	ldr	r2, [r7, #20]
 8010d96:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	6a1a      	ldr	r2, [r3, #32]
 8010da2:	69bb      	ldr	r3, [r7, #24]
 8010da4:	0a5b      	lsrs	r3, r3, #9
 8010da6:	4413      	add	r3, r2
 8010da8:	4619      	mov	r1, r3
 8010daa:	68f8      	ldr	r0, [r7, #12]
 8010dac:	f7ff fe3c 	bl	8010a28 <move_window>
 8010db0:	4603      	mov	r3, r0
 8010db2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010db4:	7ffb      	ldrb	r3, [r7, #31]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d178      	bne.n	8010eac <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010dc0:	69bb      	ldr	r3, [r7, #24]
 8010dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dc6:	4413      	add	r3, r2
 8010dc8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	f003 0301 	and.w	r3, r3, #1
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d003      	beq.n	8010ddc <put_fat+0xf0>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	091b      	lsrs	r3, r3, #4
 8010dd8:	b2db      	uxtb	r3, r3
 8010dda:	e00e      	b.n	8010dfa <put_fat+0x10e>
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	b25b      	sxtb	r3, r3
 8010de2:	f023 030f 	bic.w	r3, r3, #15
 8010de6:	b25a      	sxtb	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	0a1b      	lsrs	r3, r3, #8
 8010dec:	b25b      	sxtb	r3, r3
 8010dee:	f003 030f 	and.w	r3, r3, #15
 8010df2:	b25b      	sxtb	r3, r3
 8010df4:	4313      	orrs	r3, r2
 8010df6:	b25b      	sxtb	r3, r3
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	697a      	ldr	r2, [r7, #20]
 8010dfc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2201      	movs	r2, #1
 8010e02:	70da      	strb	r2, [r3, #3]
			break;
 8010e04:	e057      	b.n	8010eb6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	6a1a      	ldr	r2, [r3, #32]
 8010e0a:	68bb      	ldr	r3, [r7, #8]
 8010e0c:	0a1b      	lsrs	r3, r3, #8
 8010e0e:	4413      	add	r3, r2
 8010e10:	4619      	mov	r1, r3
 8010e12:	68f8      	ldr	r0, [r7, #12]
 8010e14:	f7ff fe08 	bl	8010a28 <move_window>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e1c:	7ffb      	ldrb	r3, [r7, #31]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d146      	bne.n	8010eb0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	005b      	lsls	r3, r3, #1
 8010e2c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8010e30:	4413      	add	r3, r2
 8010e32:	687a      	ldr	r2, [r7, #4]
 8010e34:	b292      	uxth	r2, r2
 8010e36:	4611      	mov	r1, r2
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7ff fb80 	bl	801053e <st_word>
			fs->wflag = 1;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	2201      	movs	r2, #1
 8010e42:	70da      	strb	r2, [r3, #3]
			break;
 8010e44:	e037      	b.n	8010eb6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	6a1a      	ldr	r2, [r3, #32]
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	09db      	lsrs	r3, r3, #7
 8010e4e:	4413      	add	r3, r2
 8010e50:	4619      	mov	r1, r3
 8010e52:	68f8      	ldr	r0, [r7, #12]
 8010e54:	f7ff fde8 	bl	8010a28 <move_window>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010e5c:	7ffb      	ldrb	r3, [r7, #31]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d128      	bne.n	8010eb4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	009b      	lsls	r3, r3, #2
 8010e72:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010e76:	4413      	add	r3, r2
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f7ff fb3d 	bl	80104f8 <ld_dword>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8010e84:	4323      	orrs	r3, r4
 8010e86:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8010e96:	4413      	add	r3, r2
 8010e98:	6879      	ldr	r1, [r7, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff fb6a 	bl	8010574 <st_dword>
			fs->wflag = 1;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	70da      	strb	r2, [r3, #3]
			break;
 8010ea6:	e006      	b.n	8010eb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010ea8:	bf00      	nop
 8010eaa:	e004      	b.n	8010eb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010eac:	bf00      	nop
 8010eae:	e002      	b.n	8010eb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010eb0:	bf00      	nop
 8010eb2:	e000      	b.n	8010eb6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010eb4:	bf00      	nop
		}
	}
	return res;
 8010eb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8010eb8:	4618      	mov	r0, r3
 8010eba:	3724      	adds	r7, #36	@ 0x24
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd90      	pop	{r4, r7, pc}

08010ec0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b088      	sub	sp, #32
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	60f8      	str	r0, [r7, #12]
 8010ec8:	60b9      	str	r1, [r7, #8]
 8010eca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010ed6:	68bb      	ldr	r3, [r7, #8]
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d904      	bls.n	8010ee6 <remove_chain+0x26>
 8010edc:	69bb      	ldr	r3, [r7, #24]
 8010ede:	695b      	ldr	r3, [r3, #20]
 8010ee0:	68ba      	ldr	r2, [r7, #8]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d301      	bcc.n	8010eea <remove_chain+0x2a>
 8010ee6:	2302      	movs	r3, #2
 8010ee8:	e04b      	b.n	8010f82 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d00c      	beq.n	8010f0a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ef4:	6879      	ldr	r1, [r7, #4]
 8010ef6:	69b8      	ldr	r0, [r7, #24]
 8010ef8:	f7ff fef8 	bl	8010cec <put_fat>
 8010efc:	4603      	mov	r3, r0
 8010efe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010f00:	7ffb      	ldrb	r3, [r7, #31]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d001      	beq.n	8010f0a <remove_chain+0x4a>
 8010f06:	7ffb      	ldrb	r3, [r7, #31]
 8010f08:	e03b      	b.n	8010f82 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010f0a:	68b9      	ldr	r1, [r7, #8]
 8010f0c:	68f8      	ldr	r0, [r7, #12]
 8010f0e:	f7ff fe46 	bl	8010b9e <get_fat>
 8010f12:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d031      	beq.n	8010f7e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d101      	bne.n	8010f24 <remove_chain+0x64>
 8010f20:	2302      	movs	r3, #2
 8010f22:	e02e      	b.n	8010f82 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2a:	d101      	bne.n	8010f30 <remove_chain+0x70>
 8010f2c:	2301      	movs	r3, #1
 8010f2e:	e028      	b.n	8010f82 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010f30:	2200      	movs	r2, #0
 8010f32:	68b9      	ldr	r1, [r7, #8]
 8010f34:	69b8      	ldr	r0, [r7, #24]
 8010f36:	f7ff fed9 	bl	8010cec <put_fat>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010f3e:	7ffb      	ldrb	r3, [r7, #31]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d001      	beq.n	8010f48 <remove_chain+0x88>
 8010f44:	7ffb      	ldrb	r3, [r7, #31]
 8010f46:	e01c      	b.n	8010f82 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	691a      	ldr	r2, [r3, #16]
 8010f4c:	69bb      	ldr	r3, [r7, #24]
 8010f4e:	695b      	ldr	r3, [r3, #20]
 8010f50:	3b02      	subs	r3, #2
 8010f52:	429a      	cmp	r2, r3
 8010f54:	d20b      	bcs.n	8010f6e <remove_chain+0xae>
			fs->free_clst++;
 8010f56:	69bb      	ldr	r3, [r7, #24]
 8010f58:	691b      	ldr	r3, [r3, #16]
 8010f5a:	1c5a      	adds	r2, r3, #1
 8010f5c:	69bb      	ldr	r3, [r7, #24]
 8010f5e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8010f60:	69bb      	ldr	r3, [r7, #24]
 8010f62:	791b      	ldrb	r3, [r3, #4]
 8010f64:	f043 0301 	orr.w	r3, r3, #1
 8010f68:	b2da      	uxtb	r2, r3
 8010f6a:	69bb      	ldr	r3, [r7, #24]
 8010f6c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010f6e:	697b      	ldr	r3, [r7, #20]
 8010f70:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	695b      	ldr	r3, [r3, #20]
 8010f76:	68ba      	ldr	r2, [r7, #8]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d3c6      	bcc.n	8010f0a <remove_chain+0x4a>
 8010f7c:	e000      	b.n	8010f80 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010f7e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8010f80:	2300      	movs	r3, #0
}
 8010f82:	4618      	mov	r0, r3
 8010f84:	3720      	adds	r7, #32
 8010f86:	46bd      	mov	sp, r7
 8010f88:	bd80      	pop	{r7, pc}

08010f8a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010f8a:	b580      	push	{r7, lr}
 8010f8c:	b088      	sub	sp, #32
 8010f8e:	af00      	add	r7, sp, #0
 8010f90:	6078      	str	r0, [r7, #4]
 8010f92:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d10d      	bne.n	8010fbc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8010fa0:	693b      	ldr	r3, [r7, #16]
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d004      	beq.n	8010fb6 <create_chain+0x2c>
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	695b      	ldr	r3, [r3, #20]
 8010fb0:	69ba      	ldr	r2, [r7, #24]
 8010fb2:	429a      	cmp	r2, r3
 8010fb4:	d31b      	bcc.n	8010fee <create_chain+0x64>
 8010fb6:	2301      	movs	r3, #1
 8010fb8:	61bb      	str	r3, [r7, #24]
 8010fba:	e018      	b.n	8010fee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010fbc:	6839      	ldr	r1, [r7, #0]
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f7ff fded 	bl	8010b9e <get_fat>
 8010fc4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	2b01      	cmp	r3, #1
 8010fca:	d801      	bhi.n	8010fd0 <create_chain+0x46>
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e070      	b.n	80110b2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd6:	d101      	bne.n	8010fdc <create_chain+0x52>
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	e06a      	b.n	80110b2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010fdc:	693b      	ldr	r3, [r7, #16]
 8010fde:	695b      	ldr	r3, [r3, #20]
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d201      	bcs.n	8010fea <create_chain+0x60>
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	e063      	b.n	80110b2 <create_chain+0x128>
		scl = clst;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010fee:	69bb      	ldr	r3, [r7, #24]
 8010ff0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010ff2:	69fb      	ldr	r3, [r7, #28]
 8010ff4:	3301      	adds	r3, #1
 8010ff6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	695b      	ldr	r3, [r3, #20]
 8010ffc:	69fa      	ldr	r2, [r7, #28]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d307      	bcc.n	8011012 <create_chain+0x88>
				ncl = 2;
 8011002:	2302      	movs	r3, #2
 8011004:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011006:	69fa      	ldr	r2, [r7, #28]
 8011008:	69bb      	ldr	r3, [r7, #24]
 801100a:	429a      	cmp	r2, r3
 801100c:	d901      	bls.n	8011012 <create_chain+0x88>
 801100e:	2300      	movs	r3, #0
 8011010:	e04f      	b.n	80110b2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011012:	69f9      	ldr	r1, [r7, #28]
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7ff fdc2 	bl	8010b9e <get_fat>
 801101a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d00e      	beq.n	8011040 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011022:	68fb      	ldr	r3, [r7, #12]
 8011024:	2b01      	cmp	r3, #1
 8011026:	d003      	beq.n	8011030 <create_chain+0xa6>
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801102e:	d101      	bne.n	8011034 <create_chain+0xaa>
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	e03e      	b.n	80110b2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011034:	69fa      	ldr	r2, [r7, #28]
 8011036:	69bb      	ldr	r3, [r7, #24]
 8011038:	429a      	cmp	r2, r3
 801103a:	d1da      	bne.n	8010ff2 <create_chain+0x68>
 801103c:	2300      	movs	r3, #0
 801103e:	e038      	b.n	80110b2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011040:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011042:	f04f 32ff 	mov.w	r2, #4294967295
 8011046:	69f9      	ldr	r1, [r7, #28]
 8011048:	6938      	ldr	r0, [r7, #16]
 801104a:	f7ff fe4f 	bl	8010cec <put_fat>
 801104e:	4603      	mov	r3, r0
 8011050:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011052:	7dfb      	ldrb	r3, [r7, #23]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d109      	bne.n	801106c <create_chain+0xe2>
 8011058:	683b      	ldr	r3, [r7, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d006      	beq.n	801106c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801105e:	69fa      	ldr	r2, [r7, #28]
 8011060:	6839      	ldr	r1, [r7, #0]
 8011062:	6938      	ldr	r0, [r7, #16]
 8011064:	f7ff fe42 	bl	8010cec <put_fat>
 8011068:	4603      	mov	r3, r0
 801106a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801106c:	7dfb      	ldrb	r3, [r7, #23]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d116      	bne.n	80110a0 <create_chain+0x116>
		fs->last_clst = ncl;
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	69fa      	ldr	r2, [r7, #28]
 8011076:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011078:	693b      	ldr	r3, [r7, #16]
 801107a:	691a      	ldr	r2, [r3, #16]
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	695b      	ldr	r3, [r3, #20]
 8011080:	3b02      	subs	r3, #2
 8011082:	429a      	cmp	r2, r3
 8011084:	d804      	bhi.n	8011090 <create_chain+0x106>
 8011086:	693b      	ldr	r3, [r7, #16]
 8011088:	691b      	ldr	r3, [r3, #16]
 801108a:	1e5a      	subs	r2, r3, #1
 801108c:	693b      	ldr	r3, [r7, #16]
 801108e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8011090:	693b      	ldr	r3, [r7, #16]
 8011092:	791b      	ldrb	r3, [r3, #4]
 8011094:	f043 0301 	orr.w	r3, r3, #1
 8011098:	b2da      	uxtb	r2, r3
 801109a:	693b      	ldr	r3, [r7, #16]
 801109c:	711a      	strb	r2, [r3, #4]
 801109e:	e007      	b.n	80110b0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80110a0:	7dfb      	ldrb	r3, [r7, #23]
 80110a2:	2b01      	cmp	r3, #1
 80110a4:	d102      	bne.n	80110ac <create_chain+0x122>
 80110a6:	f04f 33ff 	mov.w	r3, #4294967295
 80110aa:	e000      	b.n	80110ae <create_chain+0x124>
 80110ac:	2301      	movs	r3, #1
 80110ae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80110b0:	69fb      	ldr	r3, [r7, #28]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3720      	adds	r7, #32
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}

080110ba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80110ba:	b480      	push	{r7}
 80110bc:	b087      	sub	sp, #28
 80110be:	af00      	add	r7, sp, #0
 80110c0:	6078      	str	r0, [r7, #4]
 80110c2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80110ce:	3304      	adds	r3, #4
 80110d0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	0a5b      	lsrs	r3, r3, #9
 80110d6:	68fa      	ldr	r2, [r7, #12]
 80110d8:	8952      	ldrh	r2, [r2, #10]
 80110da:	fbb3 f3f2 	udiv	r3, r3, r2
 80110de:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80110e0:	693b      	ldr	r3, [r7, #16]
 80110e2:	1d1a      	adds	r2, r3, #4
 80110e4:	613a      	str	r2, [r7, #16]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d101      	bne.n	80110f4 <clmt_clust+0x3a>
 80110f0:	2300      	movs	r3, #0
 80110f2:	e010      	b.n	8011116 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80110f4:	697a      	ldr	r2, [r7, #20]
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d307      	bcc.n	801110c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80110fc:	697a      	ldr	r2, [r7, #20]
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	1ad3      	subs	r3, r2, r3
 8011102:	617b      	str	r3, [r7, #20]
 8011104:	693b      	ldr	r3, [r7, #16]
 8011106:	3304      	adds	r3, #4
 8011108:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801110a:	e7e9      	b.n	80110e0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801110c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	681a      	ldr	r2, [r3, #0]
 8011112:	697b      	ldr	r3, [r7, #20]
 8011114:	4413      	add	r3, r2
}
 8011116:	4618      	mov	r0, r3
 8011118:	371c      	adds	r7, #28
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr

08011122 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011122:	b580      	push	{r7, lr}
 8011124:	b086      	sub	sp, #24
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
 801112a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011138:	d204      	bcs.n	8011144 <dir_sdi+0x22>
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	f003 031f 	and.w	r3, r3, #31
 8011140:	2b00      	cmp	r3, #0
 8011142:	d001      	beq.n	8011148 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011144:	2302      	movs	r3, #2
 8011146:	e063      	b.n	8011210 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	683a      	ldr	r2, [r7, #0]
 801114c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	689b      	ldr	r3, [r3, #8]
 8011152:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011154:	697b      	ldr	r3, [r7, #20]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d106      	bne.n	8011168 <dir_sdi+0x46>
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	2b02      	cmp	r3, #2
 8011160:	d902      	bls.n	8011168 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011162:	693b      	ldr	r3, [r7, #16]
 8011164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011166:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011168:	697b      	ldr	r3, [r7, #20]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10c      	bne.n	8011188 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	095b      	lsrs	r3, r3, #5
 8011172:	693a      	ldr	r2, [r7, #16]
 8011174:	8912      	ldrh	r2, [r2, #8]
 8011176:	4293      	cmp	r3, r2
 8011178:	d301      	bcc.n	801117e <dir_sdi+0x5c>
 801117a:	2302      	movs	r3, #2
 801117c:	e048      	b.n	8011210 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801117e:	693b      	ldr	r3, [r7, #16]
 8011180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	61da      	str	r2, [r3, #28]
 8011186:	e029      	b.n	80111dc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011188:	693b      	ldr	r3, [r7, #16]
 801118a:	895b      	ldrh	r3, [r3, #10]
 801118c:	025b      	lsls	r3, r3, #9
 801118e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011190:	e019      	b.n	80111c6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	6979      	ldr	r1, [r7, #20]
 8011196:	4618      	mov	r0, r3
 8011198:	f7ff fd01 	bl	8010b9e <get_fat>
 801119c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111a4:	d101      	bne.n	80111aa <dir_sdi+0x88>
 80111a6:	2301      	movs	r3, #1
 80111a8:	e032      	b.n	8011210 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	d904      	bls.n	80111ba <dir_sdi+0x98>
 80111b0:	693b      	ldr	r3, [r7, #16]
 80111b2:	695b      	ldr	r3, [r3, #20]
 80111b4:	697a      	ldr	r2, [r7, #20]
 80111b6:	429a      	cmp	r2, r3
 80111b8:	d301      	bcc.n	80111be <dir_sdi+0x9c>
 80111ba:	2302      	movs	r3, #2
 80111bc:	e028      	b.n	8011210 <dir_sdi+0xee>
			ofs -= csz;
 80111be:	683a      	ldr	r2, [r7, #0]
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	1ad3      	subs	r3, r2, r3
 80111c4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80111c6:	683a      	ldr	r2, [r7, #0]
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d2e1      	bcs.n	8011192 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80111ce:	6979      	ldr	r1, [r7, #20]
 80111d0:	6938      	ldr	r0, [r7, #16]
 80111d2:	f7ff fcc5 	bl	8010b60 <clust2sect>
 80111d6:	4602      	mov	r2, r0
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	697a      	ldr	r2, [r7, #20]
 80111e0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	69db      	ldr	r3, [r3, #28]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d101      	bne.n	80111ee <dir_sdi+0xcc>
 80111ea:	2302      	movs	r3, #2
 80111ec:	e010      	b.n	8011210 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	69da      	ldr	r2, [r3, #28]
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	0a5b      	lsrs	r3, r3, #9
 80111f6:	441a      	add	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80111fc:	693b      	ldr	r3, [r7, #16]
 80111fe:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011208:	441a      	add	r2, r3
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801120e:	2300      	movs	r3, #0
}
 8011210:	4618      	mov	r0, r3
 8011212:	3718      	adds	r7, #24
 8011214:	46bd      	mov	sp, r7
 8011216:	bd80      	pop	{r7, pc}

08011218 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b086      	sub	sp, #24
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
 8011220:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	695b      	ldr	r3, [r3, #20]
 801122c:	3320      	adds	r3, #32
 801122e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	69db      	ldr	r3, [r3, #28]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d003      	beq.n	8011240 <dir_next+0x28>
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801123e:	d301      	bcc.n	8011244 <dir_next+0x2c>
 8011240:	2304      	movs	r3, #4
 8011242:	e0aa      	b.n	801139a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801124a:	2b00      	cmp	r3, #0
 801124c:	f040 8098 	bne.w	8011380 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	69db      	ldr	r3, [r3, #28]
 8011254:	1c5a      	adds	r2, r3, #1
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	699b      	ldr	r3, [r3, #24]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d10b      	bne.n	801127a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	095b      	lsrs	r3, r3, #5
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	8912      	ldrh	r2, [r2, #8]
 801126a:	4293      	cmp	r3, r2
 801126c:	f0c0 8088 	bcc.w	8011380 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	2200      	movs	r2, #0
 8011274:	61da      	str	r2, [r3, #28]
 8011276:	2304      	movs	r3, #4
 8011278:	e08f      	b.n	801139a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	0a5b      	lsrs	r3, r3, #9
 801127e:	68fa      	ldr	r2, [r7, #12]
 8011280:	8952      	ldrh	r2, [r2, #10]
 8011282:	3a01      	subs	r2, #1
 8011284:	4013      	ands	r3, r2
 8011286:	2b00      	cmp	r3, #0
 8011288:	d17a      	bne.n	8011380 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	699b      	ldr	r3, [r3, #24]
 8011290:	4619      	mov	r1, r3
 8011292:	4610      	mov	r0, r2
 8011294:	f7ff fc83 	bl	8010b9e <get_fat>
 8011298:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d801      	bhi.n	80112a4 <dir_next+0x8c>
 80112a0:	2302      	movs	r3, #2
 80112a2:	e07a      	b.n	801139a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80112a4:	697b      	ldr	r3, [r7, #20]
 80112a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112aa:	d101      	bne.n	80112b0 <dir_next+0x98>
 80112ac:	2301      	movs	r3, #1
 80112ae:	e074      	b.n	801139a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	697a      	ldr	r2, [r7, #20]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d358      	bcc.n	801136c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80112ba:	683b      	ldr	r3, [r7, #0]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d104      	bne.n	80112ca <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	2200      	movs	r2, #0
 80112c4:	61da      	str	r2, [r3, #28]
 80112c6:	2304      	movs	r3, #4
 80112c8:	e067      	b.n	801139a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80112ca:	687a      	ldr	r2, [r7, #4]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	699b      	ldr	r3, [r3, #24]
 80112d0:	4619      	mov	r1, r3
 80112d2:	4610      	mov	r0, r2
 80112d4:	f7ff fe59 	bl	8010f8a <create_chain>
 80112d8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d101      	bne.n	80112e4 <dir_next+0xcc>
 80112e0:	2307      	movs	r3, #7
 80112e2:	e05a      	b.n	801139a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	2b01      	cmp	r3, #1
 80112e8:	d101      	bne.n	80112ee <dir_next+0xd6>
 80112ea:	2302      	movs	r3, #2
 80112ec:	e055      	b.n	801139a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80112ee:	697b      	ldr	r3, [r7, #20]
 80112f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112f4:	d101      	bne.n	80112fa <dir_next+0xe2>
 80112f6:	2301      	movs	r3, #1
 80112f8:	e04f      	b.n	801139a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f7ff fb50 	bl	80109a0 <sync_window>
 8011300:	4603      	mov	r3, r0
 8011302:	2b00      	cmp	r3, #0
 8011304:	d001      	beq.n	801130a <dir_next+0xf2>
 8011306:	2301      	movs	r3, #1
 8011308:	e047      	b.n	801139a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	3330      	adds	r3, #48	@ 0x30
 801130e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011312:	2100      	movs	r1, #0
 8011314:	4618      	mov	r0, r3
 8011316:	f7ff f97a 	bl	801060e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801131a:	2300      	movs	r3, #0
 801131c:	613b      	str	r3, [r7, #16]
 801131e:	6979      	ldr	r1, [r7, #20]
 8011320:	68f8      	ldr	r0, [r7, #12]
 8011322:	f7ff fc1d 	bl	8010b60 <clust2sect>
 8011326:	4602      	mov	r2, r0
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801132c:	e012      	b.n	8011354 <dir_next+0x13c>
						fs->wflag = 1;
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	2201      	movs	r2, #1
 8011332:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011334:	68f8      	ldr	r0, [r7, #12]
 8011336:	f7ff fb33 	bl	80109a0 <sync_window>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	d001      	beq.n	8011344 <dir_next+0x12c>
 8011340:	2301      	movs	r3, #1
 8011342:	e02a      	b.n	801139a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	3301      	adds	r3, #1
 8011348:	613b      	str	r3, [r7, #16]
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801134e:	1c5a      	adds	r2, r3, #1
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	62da      	str	r2, [r3, #44]	@ 0x2c
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	895b      	ldrh	r3, [r3, #10]
 8011358:	461a      	mov	r2, r3
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	4293      	cmp	r3, r2
 801135e:	d3e6      	bcc.n	801132e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011364:	693b      	ldr	r3, [r7, #16]
 8011366:	1ad2      	subs	r2, r2, r3
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	697a      	ldr	r2, [r7, #20]
 8011370:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011372:	6979      	ldr	r1, [r7, #20]
 8011374:	68f8      	ldr	r0, [r7, #12]
 8011376:	f7ff fbf3 	bl	8010b60 <clust2sect>
 801137a:	4602      	mov	r2, r0
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011392:	441a      	add	r2, r3
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011398:	2300      	movs	r3, #0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3718      	adds	r7, #24
 801139e:	46bd      	mov	sp, r7
 80113a0:	bd80      	pop	{r7, pc}

080113a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80113a2:	b580      	push	{r7, lr}
 80113a4:	b086      	sub	sp, #24
 80113a6:	af00      	add	r7, sp, #0
 80113a8:	6078      	str	r0, [r7, #4]
 80113aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80113b2:	2100      	movs	r1, #0
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f7ff feb4 	bl	8011122 <dir_sdi>
 80113ba:	4603      	mov	r3, r0
 80113bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80113be:	7dfb      	ldrb	r3, [r7, #23]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d12b      	bne.n	801141c <dir_alloc+0x7a>
		n = 0;
 80113c4:	2300      	movs	r3, #0
 80113c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	69db      	ldr	r3, [r3, #28]
 80113cc:	4619      	mov	r1, r3
 80113ce:	68f8      	ldr	r0, [r7, #12]
 80113d0:	f7ff fb2a 	bl	8010a28 <move_window>
 80113d4:	4603      	mov	r3, r0
 80113d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80113d8:	7dfb      	ldrb	r3, [r7, #23]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d11d      	bne.n	801141a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	6a1b      	ldr	r3, [r3, #32]
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	2be5      	cmp	r3, #229	@ 0xe5
 80113e6:	d004      	beq.n	80113f2 <dir_alloc+0x50>
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	6a1b      	ldr	r3, [r3, #32]
 80113ec:	781b      	ldrb	r3, [r3, #0]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d107      	bne.n	8011402 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	3301      	adds	r3, #1
 80113f6:	613b      	str	r3, [r7, #16]
 80113f8:	693a      	ldr	r2, [r7, #16]
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d102      	bne.n	8011406 <dir_alloc+0x64>
 8011400:	e00c      	b.n	801141c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011402:	2300      	movs	r3, #0
 8011404:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011406:	2101      	movs	r1, #1
 8011408:	6878      	ldr	r0, [r7, #4]
 801140a:	f7ff ff05 	bl	8011218 <dir_next>
 801140e:	4603      	mov	r3, r0
 8011410:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011412:	7dfb      	ldrb	r3, [r7, #23]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d0d7      	beq.n	80113c8 <dir_alloc+0x26>
 8011418:	e000      	b.n	801141c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801141a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801141c:	7dfb      	ldrb	r3, [r7, #23]
 801141e:	2b04      	cmp	r3, #4
 8011420:	d101      	bne.n	8011426 <dir_alloc+0x84>
 8011422:	2307      	movs	r3, #7
 8011424:	75fb      	strb	r3, [r7, #23]
	return res;
 8011426:	7dfb      	ldrb	r3, [r7, #23]
}
 8011428:	4618      	mov	r0, r3
 801142a:	3718      	adds	r7, #24
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b084      	sub	sp, #16
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	331a      	adds	r3, #26
 801143e:	4618      	mov	r0, r3
 8011440:	f7ff f842 	bl	80104c8 <ld_word>
 8011444:	4603      	mov	r3, r0
 8011446:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	781b      	ldrb	r3, [r3, #0]
 801144c:	2b03      	cmp	r3, #3
 801144e:	d109      	bne.n	8011464 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011450:	683b      	ldr	r3, [r7, #0]
 8011452:	3314      	adds	r3, #20
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff f837 	bl	80104c8 <ld_word>
 801145a:	4603      	mov	r3, r0
 801145c:	041b      	lsls	r3, r3, #16
 801145e:	68fa      	ldr	r2, [r7, #12]
 8011460:	4313      	orrs	r3, r2
 8011462:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011464:	68fb      	ldr	r3, [r7, #12]
}
 8011466:	4618      	mov	r0, r3
 8011468:	3710      	adds	r7, #16
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}

0801146e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801146e:	b580      	push	{r7, lr}
 8011470:	b084      	sub	sp, #16
 8011472:	af00      	add	r7, sp, #0
 8011474:	60f8      	str	r0, [r7, #12]
 8011476:	60b9      	str	r1, [r7, #8]
 8011478:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	331a      	adds	r3, #26
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	b292      	uxth	r2, r2
 8011482:	4611      	mov	r1, r2
 8011484:	4618      	mov	r0, r3
 8011486:	f7ff f85a 	bl	801053e <st_word>
	if (fs->fs_type == FS_FAT32) {
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	2b03      	cmp	r3, #3
 8011490:	d109      	bne.n	80114a6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011492:	68bb      	ldr	r3, [r7, #8]
 8011494:	f103 0214 	add.w	r2, r3, #20
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	0c1b      	lsrs	r3, r3, #16
 801149c:	b29b      	uxth	r3, r3
 801149e:	4619      	mov	r1, r3
 80114a0:	4610      	mov	r0, r2
 80114a2:	f7ff f84c 	bl	801053e <st_word>
	}
}
 80114a6:	bf00      	nop
 80114a8:	3710      	adds	r7, #16
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b086      	sub	sp, #24
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80114bc:	2100      	movs	r1, #0
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f7ff fe2f 	bl	8011122 <dir_sdi>
 80114c4:	4603      	mov	r3, r0
 80114c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80114c8:	7dfb      	ldrb	r3, [r7, #23]
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d001      	beq.n	80114d2 <dir_find+0x24>
 80114ce:	7dfb      	ldrb	r3, [r7, #23]
 80114d0:	e03e      	b.n	8011550 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	69db      	ldr	r3, [r3, #28]
 80114d6:	4619      	mov	r1, r3
 80114d8:	6938      	ldr	r0, [r7, #16]
 80114da:	f7ff faa5 	bl	8010a28 <move_window>
 80114de:	4603      	mov	r3, r0
 80114e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80114e2:	7dfb      	ldrb	r3, [r7, #23]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d12f      	bne.n	8011548 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6a1b      	ldr	r3, [r3, #32]
 80114ec:	781b      	ldrb	r3, [r3, #0]
 80114ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80114f0:	7bfb      	ldrb	r3, [r7, #15]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d102      	bne.n	80114fc <dir_find+0x4e>
 80114f6:	2304      	movs	r3, #4
 80114f8:	75fb      	strb	r3, [r7, #23]
 80114fa:	e028      	b.n	801154e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	6a1b      	ldr	r3, [r3, #32]
 8011500:	330b      	adds	r3, #11
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011508:	b2da      	uxtb	r2, r3
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6a1b      	ldr	r3, [r3, #32]
 8011512:	330b      	adds	r3, #11
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	f003 0308 	and.w	r3, r3, #8
 801151a:	2b00      	cmp	r3, #0
 801151c:	d10a      	bne.n	8011534 <dir_find+0x86>
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	6a18      	ldr	r0, [r3, #32]
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	3324      	adds	r3, #36	@ 0x24
 8011526:	220b      	movs	r2, #11
 8011528:	4619      	mov	r1, r3
 801152a:	f7ff f88b 	bl	8010644 <mem_cmp>
 801152e:	4603      	mov	r3, r0
 8011530:	2b00      	cmp	r3, #0
 8011532:	d00b      	beq.n	801154c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011534:	2100      	movs	r1, #0
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f7ff fe6e 	bl	8011218 <dir_next>
 801153c:	4603      	mov	r3, r0
 801153e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011540:	7dfb      	ldrb	r3, [r7, #23]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d0c5      	beq.n	80114d2 <dir_find+0x24>
 8011546:	e002      	b.n	801154e <dir_find+0xa0>
		if (res != FR_OK) break;
 8011548:	bf00      	nop
 801154a:	e000      	b.n	801154e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801154c:	bf00      	nop

	return res;
 801154e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011550:	4618      	mov	r0, r3
 8011552:	3718      	adds	r7, #24
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011566:	2101      	movs	r1, #1
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f7ff ff1a 	bl	80113a2 <dir_alloc>
 801156e:	4603      	mov	r3, r0
 8011570:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011572:	7bfb      	ldrb	r3, [r7, #15]
 8011574:	2b00      	cmp	r3, #0
 8011576:	d11c      	bne.n	80115b2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	69db      	ldr	r3, [r3, #28]
 801157c:	4619      	mov	r1, r3
 801157e:	68b8      	ldr	r0, [r7, #8]
 8011580:	f7ff fa52 	bl	8010a28 <move_window>
 8011584:	4603      	mov	r3, r0
 8011586:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011588:	7bfb      	ldrb	r3, [r7, #15]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d111      	bne.n	80115b2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a1b      	ldr	r3, [r3, #32]
 8011592:	2220      	movs	r2, #32
 8011594:	2100      	movs	r1, #0
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff f839 	bl	801060e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	6a18      	ldr	r0, [r3, #32]
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	3324      	adds	r3, #36	@ 0x24
 80115a4:	220b      	movs	r2, #11
 80115a6:	4619      	mov	r1, r3
 80115a8:	f7ff f810 	bl	80105cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	2201      	movs	r2, #1
 80115b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3710      	adds	r7, #16
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b088      	sub	sp, #32
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	60fb      	str	r3, [r7, #12]
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	3324      	adds	r3, #36	@ 0x24
 80115d0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80115d2:	220b      	movs	r2, #11
 80115d4:	2120      	movs	r1, #32
 80115d6:	68b8      	ldr	r0, [r7, #8]
 80115d8:	f7ff f819 	bl	801060e <mem_set>
	si = i = 0; ni = 8;
 80115dc:	2300      	movs	r3, #0
 80115de:	613b      	str	r3, [r7, #16]
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	61fb      	str	r3, [r7, #28]
 80115e4:	2308      	movs	r3, #8
 80115e6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	1c5a      	adds	r2, r3, #1
 80115ec:	61fa      	str	r2, [r7, #28]
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	4413      	add	r3, r2
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80115f6:	7efb      	ldrb	r3, [r7, #27]
 80115f8:	2b20      	cmp	r3, #32
 80115fa:	d94e      	bls.n	801169a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80115fc:	7efb      	ldrb	r3, [r7, #27]
 80115fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8011600:	d006      	beq.n	8011610 <create_name+0x54>
 8011602:	7efb      	ldrb	r3, [r7, #27]
 8011604:	2b5c      	cmp	r3, #92	@ 0x5c
 8011606:	d110      	bne.n	801162a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011608:	e002      	b.n	8011610 <create_name+0x54>
 801160a:	69fb      	ldr	r3, [r7, #28]
 801160c:	3301      	adds	r3, #1
 801160e:	61fb      	str	r3, [r7, #28]
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	69fb      	ldr	r3, [r7, #28]
 8011614:	4413      	add	r3, r2
 8011616:	781b      	ldrb	r3, [r3, #0]
 8011618:	2b2f      	cmp	r3, #47	@ 0x2f
 801161a:	d0f6      	beq.n	801160a <create_name+0x4e>
 801161c:	68fa      	ldr	r2, [r7, #12]
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	4413      	add	r3, r2
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	2b5c      	cmp	r3, #92	@ 0x5c
 8011626:	d0f0      	beq.n	801160a <create_name+0x4e>
			break;
 8011628:	e038      	b.n	801169c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801162a:	7efb      	ldrb	r3, [r7, #27]
 801162c:	2b2e      	cmp	r3, #46	@ 0x2e
 801162e:	d003      	beq.n	8011638 <create_name+0x7c>
 8011630:	693a      	ldr	r2, [r7, #16]
 8011632:	697b      	ldr	r3, [r7, #20]
 8011634:	429a      	cmp	r2, r3
 8011636:	d30c      	bcc.n	8011652 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	2b0b      	cmp	r3, #11
 801163c:	d002      	beq.n	8011644 <create_name+0x88>
 801163e:	7efb      	ldrb	r3, [r7, #27]
 8011640:	2b2e      	cmp	r3, #46	@ 0x2e
 8011642:	d001      	beq.n	8011648 <create_name+0x8c>
 8011644:	2306      	movs	r3, #6
 8011646:	e044      	b.n	80116d2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011648:	2308      	movs	r3, #8
 801164a:	613b      	str	r3, [r7, #16]
 801164c:	230b      	movs	r3, #11
 801164e:	617b      	str	r3, [r7, #20]
			continue;
 8011650:	e022      	b.n	8011698 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011652:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011656:	2b00      	cmp	r3, #0
 8011658:	da04      	bge.n	8011664 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801165a:	7efb      	ldrb	r3, [r7, #27]
 801165c:	3b80      	subs	r3, #128	@ 0x80
 801165e:	4a1f      	ldr	r2, [pc, #124]	@ (80116dc <create_name+0x120>)
 8011660:	5cd3      	ldrb	r3, [r2, r3]
 8011662:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011664:	7efb      	ldrb	r3, [r7, #27]
 8011666:	4619      	mov	r1, r3
 8011668:	481d      	ldr	r0, [pc, #116]	@ (80116e0 <create_name+0x124>)
 801166a:	f7ff f812 	bl	8010692 <chk_chr>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d001      	beq.n	8011678 <create_name+0xbc>
 8011674:	2306      	movs	r3, #6
 8011676:	e02c      	b.n	80116d2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011678:	7efb      	ldrb	r3, [r7, #27]
 801167a:	2b60      	cmp	r3, #96	@ 0x60
 801167c:	d905      	bls.n	801168a <create_name+0xce>
 801167e:	7efb      	ldrb	r3, [r7, #27]
 8011680:	2b7a      	cmp	r3, #122	@ 0x7a
 8011682:	d802      	bhi.n	801168a <create_name+0xce>
 8011684:	7efb      	ldrb	r3, [r7, #27]
 8011686:	3b20      	subs	r3, #32
 8011688:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	1c5a      	adds	r2, r3, #1
 801168e:	613a      	str	r2, [r7, #16]
 8011690:	68ba      	ldr	r2, [r7, #8]
 8011692:	4413      	add	r3, r2
 8011694:	7efa      	ldrb	r2, [r7, #27]
 8011696:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011698:	e7a6      	b.n	80115e8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801169a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801169c:	68fa      	ldr	r2, [r7, #12]
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	441a      	add	r2, r3
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80116a6:	693b      	ldr	r3, [r7, #16]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d101      	bne.n	80116b0 <create_name+0xf4>
 80116ac:	2306      	movs	r3, #6
 80116ae:	e010      	b.n	80116d2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	781b      	ldrb	r3, [r3, #0]
 80116b4:	2be5      	cmp	r3, #229	@ 0xe5
 80116b6:	d102      	bne.n	80116be <create_name+0x102>
 80116b8:	68bb      	ldr	r3, [r7, #8]
 80116ba:	2205      	movs	r2, #5
 80116bc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80116be:	7efb      	ldrb	r3, [r7, #27]
 80116c0:	2b20      	cmp	r3, #32
 80116c2:	d801      	bhi.n	80116c8 <create_name+0x10c>
 80116c4:	2204      	movs	r2, #4
 80116c6:	e000      	b.n	80116ca <create_name+0x10e>
 80116c8:	2200      	movs	r2, #0
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	330b      	adds	r3, #11
 80116ce:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80116d0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3720      	adds	r7, #32
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	08019eb0 	.word	0x08019eb0
 80116e0:	08019e40 	.word	0x08019e40

080116e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b086      	sub	sp, #24
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80116f2:	693b      	ldr	r3, [r7, #16]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80116f8:	e002      	b.n	8011700 <follow_path+0x1c>
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	3301      	adds	r3, #1
 80116fe:	603b      	str	r3, [r7, #0]
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	781b      	ldrb	r3, [r3, #0]
 8011704:	2b2f      	cmp	r3, #47	@ 0x2f
 8011706:	d0f8      	beq.n	80116fa <follow_path+0x16>
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	2b5c      	cmp	r3, #92	@ 0x5c
 801170e:	d0f4      	beq.n	80116fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011710:	693b      	ldr	r3, [r7, #16]
 8011712:	2200      	movs	r2, #0
 8011714:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	781b      	ldrb	r3, [r3, #0]
 801171a:	2b1f      	cmp	r3, #31
 801171c:	d80a      	bhi.n	8011734 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2280      	movs	r2, #128	@ 0x80
 8011722:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8011726:	2100      	movs	r1, #0
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f7ff fcfa 	bl	8011122 <dir_sdi>
 801172e:	4603      	mov	r3, r0
 8011730:	75fb      	strb	r3, [r7, #23]
 8011732:	e043      	b.n	80117bc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011734:	463b      	mov	r3, r7
 8011736:	4619      	mov	r1, r3
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f7ff ff3f 	bl	80115bc <create_name>
 801173e:	4603      	mov	r3, r0
 8011740:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011742:	7dfb      	ldrb	r3, [r7, #23]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d134      	bne.n	80117b2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7ff feb0 	bl	80114ae <dir_find>
 801174e:	4603      	mov	r3, r0
 8011750:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8011758:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801175a:	7dfb      	ldrb	r3, [r7, #23]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d00a      	beq.n	8011776 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011760:	7dfb      	ldrb	r3, [r7, #23]
 8011762:	2b04      	cmp	r3, #4
 8011764:	d127      	bne.n	80117b6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011766:	7afb      	ldrb	r3, [r7, #11]
 8011768:	f003 0304 	and.w	r3, r3, #4
 801176c:	2b00      	cmp	r3, #0
 801176e:	d122      	bne.n	80117b6 <follow_path+0xd2>
 8011770:	2305      	movs	r3, #5
 8011772:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011774:	e01f      	b.n	80117b6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011776:	7afb      	ldrb	r3, [r7, #11]
 8011778:	f003 0304 	and.w	r3, r3, #4
 801177c:	2b00      	cmp	r3, #0
 801177e:	d11c      	bne.n	80117ba <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	799b      	ldrb	r3, [r3, #6]
 8011784:	f003 0310 	and.w	r3, r3, #16
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801178c:	2305      	movs	r3, #5
 801178e:	75fb      	strb	r3, [r7, #23]
 8011790:	e014      	b.n	80117bc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	695b      	ldr	r3, [r3, #20]
 801179c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80117a0:	4413      	add	r3, r2
 80117a2:	4619      	mov	r1, r3
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f7ff fe43 	bl	8011430 <ld_clust>
 80117aa:	4602      	mov	r2, r0
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80117b0:	e7c0      	b.n	8011734 <follow_path+0x50>
			if (res != FR_OK) break;
 80117b2:	bf00      	nop
 80117b4:	e002      	b.n	80117bc <follow_path+0xd8>
				break;
 80117b6:	bf00      	nop
 80117b8:	e000      	b.n	80117bc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80117ba:	bf00      	nop
			}
		}
	}

	return res;
 80117bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3718      	adds	r7, #24
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80117c6:	b480      	push	{r7}
 80117c8:	b087      	sub	sp, #28
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80117ce:	f04f 33ff 	mov.w	r3, #4294967295
 80117d2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d031      	beq.n	8011840 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	617b      	str	r3, [r7, #20]
 80117e2:	e002      	b.n	80117ea <get_ldnumber+0x24>
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	3301      	adds	r3, #1
 80117e8:	617b      	str	r3, [r7, #20]
 80117ea:	697b      	ldr	r3, [r7, #20]
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	2b20      	cmp	r3, #32
 80117f0:	d903      	bls.n	80117fa <get_ldnumber+0x34>
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	781b      	ldrb	r3, [r3, #0]
 80117f6:	2b3a      	cmp	r3, #58	@ 0x3a
 80117f8:	d1f4      	bne.n	80117e4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	2b3a      	cmp	r3, #58	@ 0x3a
 8011800:	d11c      	bne.n	801183c <get_ldnumber+0x76>
			tp = *path;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	1c5a      	adds	r2, r3, #1
 801180c:	60fa      	str	r2, [r7, #12]
 801180e:	781b      	ldrb	r3, [r3, #0]
 8011810:	3b30      	subs	r3, #48	@ 0x30
 8011812:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011814:	68bb      	ldr	r3, [r7, #8]
 8011816:	2b09      	cmp	r3, #9
 8011818:	d80e      	bhi.n	8011838 <get_ldnumber+0x72>
 801181a:	68fa      	ldr	r2, [r7, #12]
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	429a      	cmp	r2, r3
 8011820:	d10a      	bne.n	8011838 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d107      	bne.n	8011838 <get_ldnumber+0x72>
					vol = (int)i;
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801182c:	697b      	ldr	r3, [r7, #20]
 801182e:	3301      	adds	r3, #1
 8011830:	617b      	str	r3, [r7, #20]
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	697a      	ldr	r2, [r7, #20]
 8011836:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	e002      	b.n	8011842 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801183c:	2300      	movs	r3, #0
 801183e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011840:	693b      	ldr	r3, [r7, #16]
}
 8011842:	4618      	mov	r0, r3
 8011844:	371c      	adds	r7, #28
 8011846:	46bd      	mov	sp, r7
 8011848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801184c:	4770      	bx	lr
	...

08011850 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b082      	sub	sp, #8
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	70da      	strb	r2, [r3, #3]
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f04f 32ff 	mov.w	r2, #4294967295
 8011866:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011868:	6839      	ldr	r1, [r7, #0]
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f7ff f8dc 	bl	8010a28 <move_window>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d001      	beq.n	801187a <check_fs+0x2a>
 8011876:	2304      	movs	r3, #4
 8011878:	e038      	b.n	80118ec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	3330      	adds	r3, #48	@ 0x30
 801187e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011882:	4618      	mov	r0, r3
 8011884:	f7fe fe20 	bl	80104c8 <ld_word>
 8011888:	4603      	mov	r3, r0
 801188a:	461a      	mov	r2, r3
 801188c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011890:	429a      	cmp	r2, r3
 8011892:	d001      	beq.n	8011898 <check_fs+0x48>
 8011894:	2303      	movs	r3, #3
 8011896:	e029      	b.n	80118ec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801189e:	2be9      	cmp	r3, #233	@ 0xe9
 80118a0:	d009      	beq.n	80118b6 <check_fs+0x66>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80118a8:	2beb      	cmp	r3, #235	@ 0xeb
 80118aa:	d11e      	bne.n	80118ea <check_fs+0x9a>
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80118b2:	2b90      	cmp	r3, #144	@ 0x90
 80118b4:	d119      	bne.n	80118ea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	3330      	adds	r3, #48	@ 0x30
 80118ba:	3336      	adds	r3, #54	@ 0x36
 80118bc:	4618      	mov	r0, r3
 80118be:	f7fe fe1b 	bl	80104f8 <ld_dword>
 80118c2:	4603      	mov	r3, r0
 80118c4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80118c8:	4a0a      	ldr	r2, [pc, #40]	@ (80118f4 <check_fs+0xa4>)
 80118ca:	4293      	cmp	r3, r2
 80118cc:	d101      	bne.n	80118d2 <check_fs+0x82>
 80118ce:	2300      	movs	r3, #0
 80118d0:	e00c      	b.n	80118ec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	3330      	adds	r3, #48	@ 0x30
 80118d6:	3352      	adds	r3, #82	@ 0x52
 80118d8:	4618      	mov	r0, r3
 80118da:	f7fe fe0d 	bl	80104f8 <ld_dword>
 80118de:	4603      	mov	r3, r0
 80118e0:	4a05      	ldr	r2, [pc, #20]	@ (80118f8 <check_fs+0xa8>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d101      	bne.n	80118ea <check_fs+0x9a>
 80118e6:	2300      	movs	r3, #0
 80118e8:	e000      	b.n	80118ec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80118ea:	2302      	movs	r3, #2
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	00544146 	.word	0x00544146
 80118f8:	33544146 	.word	0x33544146

080118fc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b096      	sub	sp, #88	@ 0x58
 8011900:	af00      	add	r7, sp, #0
 8011902:	60f8      	str	r0, [r7, #12]
 8011904:	60b9      	str	r1, [r7, #8]
 8011906:	4613      	mov	r3, r2
 8011908:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	2200      	movs	r2, #0
 801190e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f7ff ff58 	bl	80117c6 <get_ldnumber>
 8011916:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801191a:	2b00      	cmp	r3, #0
 801191c:	da01      	bge.n	8011922 <find_volume+0x26>
 801191e:	230b      	movs	r3, #11
 8011920:	e22d      	b.n	8011d7e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011922:	4aa1      	ldr	r2, [pc, #644]	@ (8011ba8 <find_volume+0x2ac>)
 8011924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801192a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801192c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801192e:	2b00      	cmp	r3, #0
 8011930:	d101      	bne.n	8011936 <find_volume+0x3a>
 8011932:	230c      	movs	r3, #12
 8011934:	e223      	b.n	8011d7e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801193a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801193c:	79fb      	ldrb	r3, [r7, #7]
 801193e:	f023 0301 	bic.w	r3, r3, #1
 8011942:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011946:	781b      	ldrb	r3, [r3, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d01a      	beq.n	8011982 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801194c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801194e:	785b      	ldrb	r3, [r3, #1]
 8011950:	4618      	mov	r0, r3
 8011952:	f7fe fd1b 	bl	801038c <disk_status>
 8011956:	4603      	mov	r3, r0
 8011958:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801195c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011960:	f003 0301 	and.w	r3, r3, #1
 8011964:	2b00      	cmp	r3, #0
 8011966:	d10c      	bne.n	8011982 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011968:	79fb      	ldrb	r3, [r7, #7]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d007      	beq.n	801197e <find_volume+0x82>
 801196e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011972:	f003 0304 	and.w	r3, r3, #4
 8011976:	2b00      	cmp	r3, #0
 8011978:	d001      	beq.n	801197e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801197a:	230a      	movs	r3, #10
 801197c:	e1ff      	b.n	8011d7e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 801197e:	2300      	movs	r3, #0
 8011980:	e1fd      	b.n	8011d7e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011984:	2200      	movs	r2, #0
 8011986:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801198a:	b2da      	uxtb	r2, r3
 801198c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801198e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011992:	785b      	ldrb	r3, [r3, #1]
 8011994:	4618      	mov	r0, r3
 8011996:	f7fe fd13 	bl	80103c0 <disk_initialize>
 801199a:	4603      	mov	r3, r0
 801199c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80119a0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119a4:	f003 0301 	and.w	r3, r3, #1
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d001      	beq.n	80119b0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80119ac:	2303      	movs	r3, #3
 80119ae:	e1e6      	b.n	8011d7e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80119b0:	79fb      	ldrb	r3, [r7, #7]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d007      	beq.n	80119c6 <find_volume+0xca>
 80119b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80119ba:	f003 0304 	and.w	r3, r3, #4
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d001      	beq.n	80119c6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80119c2:	230a      	movs	r3, #10
 80119c4:	e1db      	b.n	8011d7e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80119ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80119cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80119ce:	f7ff ff3f 	bl	8011850 <check_fs>
 80119d2:	4603      	mov	r3, r0
 80119d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80119d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80119dc:	2b02      	cmp	r3, #2
 80119de:	d149      	bne.n	8011a74 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80119e0:	2300      	movs	r3, #0
 80119e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80119e4:	e01e      	b.n	8011a24 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80119e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119e8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80119ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119ee:	011b      	lsls	r3, r3, #4
 80119f0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80119f4:	4413      	add	r3, r2
 80119f6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80119f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119fa:	3304      	adds	r3, #4
 80119fc:	781b      	ldrb	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d006      	beq.n	8011a10 <find_volume+0x114>
 8011a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a04:	3308      	adds	r3, #8
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7fe fd76 	bl	80104f8 <ld_dword>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	e000      	b.n	8011a12 <find_volume+0x116>
 8011a10:	2200      	movs	r2, #0
 8011a12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	3358      	adds	r3, #88	@ 0x58
 8011a18:	443b      	add	r3, r7
 8011a1a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a20:	3301      	adds	r3, #1
 8011a22:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a26:	2b03      	cmp	r3, #3
 8011a28:	d9dd      	bls.n	80119e6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8011a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d002      	beq.n	8011a3a <find_volume+0x13e>
 8011a34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a36:	3b01      	subs	r3, #1
 8011a38:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011a3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a3c:	009b      	lsls	r3, r3, #2
 8011a3e:	3358      	adds	r3, #88	@ 0x58
 8011a40:	443b      	add	r3, r7
 8011a42:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011a46:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d005      	beq.n	8011a5a <find_volume+0x15e>
 8011a4e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011a50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011a52:	f7ff fefd 	bl	8011850 <check_fs>
 8011a56:	4603      	mov	r3, r0
 8011a58:	e000      	b.n	8011a5c <find_volume+0x160>
 8011a5a:	2303      	movs	r3, #3
 8011a5c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011a60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a64:	2b01      	cmp	r3, #1
 8011a66:	d905      	bls.n	8011a74 <find_volume+0x178>
 8011a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a70:	2b03      	cmp	r3, #3
 8011a72:	d9e2      	bls.n	8011a3a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011a74:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a78:	2b04      	cmp	r3, #4
 8011a7a:	d101      	bne.n	8011a80 <find_volume+0x184>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	e17e      	b.n	8011d7e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011a80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d901      	bls.n	8011a8c <find_volume+0x190>
 8011a88:	230d      	movs	r3, #13
 8011a8a:	e178      	b.n	8011d7e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a8e:	3330      	adds	r3, #48	@ 0x30
 8011a90:	330b      	adds	r3, #11
 8011a92:	4618      	mov	r0, r3
 8011a94:	f7fe fd18 	bl	80104c8 <ld_word>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011a9e:	d001      	beq.n	8011aa4 <find_volume+0x1a8>
 8011aa0:	230d      	movs	r3, #13
 8011aa2:	e16c      	b.n	8011d7e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aa6:	3330      	adds	r3, #48	@ 0x30
 8011aa8:	3316      	adds	r3, #22
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f7fe fd0c 	bl	80104c8 <ld_word>
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011ab4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d106      	bne.n	8011ac8 <find_volume+0x1cc>
 8011aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011abc:	3330      	adds	r3, #48	@ 0x30
 8011abe:	3324      	adds	r3, #36	@ 0x24
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fe fd19 	bl	80104f8 <ld_dword>
 8011ac6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8011ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aca:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011acc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8011ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ad6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ada:	789b      	ldrb	r3, [r3, #2]
 8011adc:	2b01      	cmp	r3, #1
 8011ade:	d005      	beq.n	8011aec <find_volume+0x1f0>
 8011ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae2:	789b      	ldrb	r3, [r3, #2]
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	d001      	beq.n	8011aec <find_volume+0x1f0>
 8011ae8:	230d      	movs	r3, #13
 8011aea:	e148      	b.n	8011d7e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011aee:	789b      	ldrb	r3, [r3, #2]
 8011af0:	461a      	mov	r2, r3
 8011af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011af4:	fb02 f303 	mul.w	r3, r2, r3
 8011af8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8011b00:	461a      	mov	r2, r3
 8011b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b04:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b08:	895b      	ldrh	r3, [r3, #10]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d008      	beq.n	8011b20 <find_volume+0x224>
 8011b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b10:	895b      	ldrh	r3, [r3, #10]
 8011b12:	461a      	mov	r2, r3
 8011b14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b16:	895b      	ldrh	r3, [r3, #10]
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	4013      	ands	r3, r2
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d001      	beq.n	8011b24 <find_volume+0x228>
 8011b20:	230d      	movs	r3, #13
 8011b22:	e12c      	b.n	8011d7e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b26:	3330      	adds	r3, #48	@ 0x30
 8011b28:	3311      	adds	r3, #17
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fe fccc 	bl	80104c8 <ld_word>
 8011b30:	4603      	mov	r3, r0
 8011b32:	461a      	mov	r2, r3
 8011b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b36:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011b38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b3a:	891b      	ldrh	r3, [r3, #8]
 8011b3c:	f003 030f 	and.w	r3, r3, #15
 8011b40:	b29b      	uxth	r3, r3
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d001      	beq.n	8011b4a <find_volume+0x24e>
 8011b46:	230d      	movs	r3, #13
 8011b48:	e119      	b.n	8011d7e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011b4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b4c:	3330      	adds	r3, #48	@ 0x30
 8011b4e:	3313      	adds	r3, #19
 8011b50:	4618      	mov	r0, r3
 8011b52:	f7fe fcb9 	bl	80104c8 <ld_word>
 8011b56:	4603      	mov	r3, r0
 8011b58:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011b5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d106      	bne.n	8011b6e <find_volume+0x272>
 8011b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b62:	3330      	adds	r3, #48	@ 0x30
 8011b64:	3320      	adds	r3, #32
 8011b66:	4618      	mov	r0, r3
 8011b68:	f7fe fcc6 	bl	80104f8 <ld_dword>
 8011b6c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b70:	3330      	adds	r3, #48	@ 0x30
 8011b72:	330e      	adds	r3, #14
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7fe fca7 	bl	80104c8 <ld_word>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011b7e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d101      	bne.n	8011b88 <find_volume+0x28c>
 8011b84:	230d      	movs	r3, #13
 8011b86:	e0fa      	b.n	8011d7e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011b88:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b8c:	4413      	add	r3, r2
 8011b8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011b90:	8912      	ldrh	r2, [r2, #8]
 8011b92:	0912      	lsrs	r2, r2, #4
 8011b94:	b292      	uxth	r2, r2
 8011b96:	4413      	add	r3, r2
 8011b98:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d204      	bcs.n	8011bac <find_volume+0x2b0>
 8011ba2:	230d      	movs	r3, #13
 8011ba4:	e0eb      	b.n	8011d7e <find_volume+0x482>
 8011ba6:	bf00      	nop
 8011ba8:	20001c60 	.word	0x20001c60
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011bac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011bb4:	8952      	ldrh	r2, [r2, #10]
 8011bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bba:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d101      	bne.n	8011bc6 <find_volume+0x2ca>
 8011bc2:	230d      	movs	r3, #13
 8011bc4:	e0db      	b.n	8011d7e <find_volume+0x482>
		fmt = FS_FAT32;
 8011bc6:	2303      	movs	r3, #3
 8011bc8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bce:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d802      	bhi.n	8011bdc <find_volume+0x2e0>
 8011bd6:	2302      	movs	r3, #2
 8011bd8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bde:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8011be2:	4293      	cmp	r3, r2
 8011be4:	d802      	bhi.n	8011bec <find_volume+0x2f0>
 8011be6:	2301      	movs	r3, #1
 8011be8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bee:	1c9a      	adds	r2, r3, #2
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011bf8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011bfa:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bfe:	441a      	add	r2, r3
 8011c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c02:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8011c04:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011c08:	441a      	add	r2, r3
 8011c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c0c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8011c0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011c12:	2b03      	cmp	r3, #3
 8011c14:	d11e      	bne.n	8011c54 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c18:	3330      	adds	r3, #48	@ 0x30
 8011c1a:	332a      	adds	r3, #42	@ 0x2a
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f7fe fc53 	bl	80104c8 <ld_word>
 8011c22:	4603      	mov	r3, r0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d001      	beq.n	8011c2c <find_volume+0x330>
 8011c28:	230d      	movs	r3, #13
 8011c2a:	e0a8      	b.n	8011d7e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c2e:	891b      	ldrh	r3, [r3, #8]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d001      	beq.n	8011c38 <find_volume+0x33c>
 8011c34:	230d      	movs	r3, #13
 8011c36:	e0a2      	b.n	8011d7e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c3a:	3330      	adds	r3, #48	@ 0x30
 8011c3c:	332c      	adds	r3, #44	@ 0x2c
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7fe fc5a 	bl	80104f8 <ld_dword>
 8011c44:	4602      	mov	r2, r0
 8011c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c48:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c4c:	695b      	ldr	r3, [r3, #20]
 8011c4e:	009b      	lsls	r3, r3, #2
 8011c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c52:	e01f      	b.n	8011c94 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c56:	891b      	ldrh	r3, [r3, #8]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d101      	bne.n	8011c60 <find_volume+0x364>
 8011c5c:	230d      	movs	r3, #13
 8011c5e:	e08e      	b.n	8011d7e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c62:	6a1a      	ldr	r2, [r3, #32]
 8011c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c66:	441a      	add	r2, r3
 8011c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c6a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d103      	bne.n	8011c7c <find_volume+0x380>
 8011c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c76:	695b      	ldr	r3, [r3, #20]
 8011c78:	005b      	lsls	r3, r3, #1
 8011c7a:	e00a      	b.n	8011c92 <find_volume+0x396>
 8011c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c7e:	695a      	ldr	r2, [r3, #20]
 8011c80:	4613      	mov	r3, r2
 8011c82:	005b      	lsls	r3, r3, #1
 8011c84:	4413      	add	r3, r2
 8011c86:	085a      	lsrs	r2, r3, #1
 8011c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c8a:	695b      	ldr	r3, [r3, #20]
 8011c8c:	f003 0301 	and.w	r3, r3, #1
 8011c90:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011c92:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c96:	699a      	ldr	r2, [r3, #24]
 8011c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c9a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8011c9e:	0a5b      	lsrs	r3, r3, #9
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d201      	bcs.n	8011ca8 <find_volume+0x3ac>
 8011ca4:	230d      	movs	r3, #13
 8011ca6:	e06a      	b.n	8011d7e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011caa:	f04f 32ff 	mov.w	r2, #4294967295
 8011cae:	611a      	str	r2, [r3, #16]
 8011cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb2:	691a      	ldr	r2, [r3, #16]
 8011cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cba:	2280      	movs	r2, #128	@ 0x80
 8011cbc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8011cc2:	2b03      	cmp	r3, #3
 8011cc4:	d149      	bne.n	8011d5a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cc8:	3330      	adds	r3, #48	@ 0x30
 8011cca:	3330      	adds	r3, #48	@ 0x30
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fe fbfb 	bl	80104c8 <ld_word>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d140      	bne.n	8011d5a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cda:	3301      	adds	r3, #1
 8011cdc:	4619      	mov	r1, r3
 8011cde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011ce0:	f7fe fea2 	bl	8010a28 <move_window>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d137      	bne.n	8011d5a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8011cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cec:	2200      	movs	r2, #0
 8011cee:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011cf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cf2:	3330      	adds	r3, #48	@ 0x30
 8011cf4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f7fe fbe5 	bl	80104c8 <ld_word>
 8011cfe:	4603      	mov	r3, r0
 8011d00:	461a      	mov	r2, r3
 8011d02:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d127      	bne.n	8011d5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d0c:	3330      	adds	r3, #48	@ 0x30
 8011d0e:	4618      	mov	r0, r3
 8011d10:	f7fe fbf2 	bl	80104f8 <ld_dword>
 8011d14:	4603      	mov	r3, r0
 8011d16:	4a1c      	ldr	r2, [pc, #112]	@ (8011d88 <find_volume+0x48c>)
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d11e      	bne.n	8011d5a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d1e:	3330      	adds	r3, #48	@ 0x30
 8011d20:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011d24:	4618      	mov	r0, r3
 8011d26:	f7fe fbe7 	bl	80104f8 <ld_dword>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	4a17      	ldr	r2, [pc, #92]	@ (8011d8c <find_volume+0x490>)
 8011d2e:	4293      	cmp	r3, r2
 8011d30:	d113      	bne.n	8011d5a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d34:	3330      	adds	r3, #48	@ 0x30
 8011d36:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fe fbdc 	bl	80104f8 <ld_dword>
 8011d40:	4602      	mov	r2, r0
 8011d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d44:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d48:	3330      	adds	r3, #48	@ 0x30
 8011d4a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f7fe fbd2 	bl	80104f8 <ld_dword>
 8011d54:	4602      	mov	r2, r0
 8011d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d58:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d5c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8011d60:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011d62:	4b0b      	ldr	r3, [pc, #44]	@ (8011d90 <find_volume+0x494>)
 8011d64:	881b      	ldrh	r3, [r3, #0]
 8011d66:	3301      	adds	r3, #1
 8011d68:	b29a      	uxth	r2, r3
 8011d6a:	4b09      	ldr	r3, [pc, #36]	@ (8011d90 <find_volume+0x494>)
 8011d6c:	801a      	strh	r2, [r3, #0]
 8011d6e:	4b08      	ldr	r3, [pc, #32]	@ (8011d90 <find_volume+0x494>)
 8011d70:	881a      	ldrh	r2, [r3, #0]
 8011d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d74:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011d76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011d78:	f7fe fdee 	bl	8010958 <clear_lock>
#endif
	return FR_OK;
 8011d7c:	2300      	movs	r3, #0
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3758      	adds	r7, #88	@ 0x58
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	41615252 	.word	0x41615252
 8011d8c:	61417272 	.word	0x61417272
 8011d90:	20001c64 	.word	0x20001c64

08011d94 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b084      	sub	sp, #16
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011d9e:	2309      	movs	r3, #9
 8011da0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d01c      	beq.n	8011de2 <validate+0x4e>
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d018      	beq.n	8011de2 <validate+0x4e>
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	781b      	ldrb	r3, [r3, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d013      	beq.n	8011de2 <validate+0x4e>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	889a      	ldrh	r2, [r3, #4]
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	88db      	ldrh	r3, [r3, #6]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d10c      	bne.n	8011de2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	785b      	ldrb	r3, [r3, #1]
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fe fadc 	bl	801038c <disk_status>
 8011dd4:	4603      	mov	r3, r0
 8011dd6:	f003 0301 	and.w	r3, r3, #1
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d101      	bne.n	8011de2 <validate+0x4e>
			res = FR_OK;
 8011dde:	2300      	movs	r3, #0
 8011de0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011de2:	7bfb      	ldrb	r3, [r7, #15]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d102      	bne.n	8011dee <validate+0x5a>
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	e000      	b.n	8011df0 <validate+0x5c>
 8011dee:	2300      	movs	r3, #0
 8011df0:	683a      	ldr	r2, [r7, #0]
 8011df2:	6013      	str	r3, [r2, #0]
	return res;
 8011df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}

08011dfe <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011dfe:	b580      	push	{r7, lr}
 8011e00:	b098      	sub	sp, #96	@ 0x60
 8011e02:	af00      	add	r7, sp, #0
 8011e04:	60f8      	str	r0, [r7, #12]
 8011e06:	60b9      	str	r1, [r7, #8]
 8011e08:	4613      	mov	r3, r2
 8011e0a:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d101      	bne.n	8011e16 <f_open+0x18>
 8011e12:	2309      	movs	r3, #9
 8011e14:	e1a9      	b.n	801216a <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011e16:	79fb      	ldrb	r3, [r7, #7]
 8011e18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011e1c:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011e1e:	79fa      	ldrb	r2, [r7, #7]
 8011e20:	f107 0110 	add.w	r1, r7, #16
 8011e24:	f107 0308 	add.w	r3, r7, #8
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7ff fd67 	bl	80118fc <find_volume>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8011e34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f040 818d 	bne.w	8012158 <f_open+0x35a>
		dj.obj.fs = fs;
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011e42:	68ba      	ldr	r2, [r7, #8]
 8011e44:	f107 0314 	add.w	r3, r7, #20
 8011e48:	4611      	mov	r1, r2
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7ff fc4a 	bl	80116e4 <follow_path>
 8011e50:	4603      	mov	r3, r0
 8011e52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011e56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d118      	bne.n	8011e90 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011e5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011e62:	b25b      	sxtb	r3, r3
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	da03      	bge.n	8011e70 <f_open+0x72>
				res = FR_INVALID_NAME;
 8011e68:	2306      	movs	r3, #6
 8011e6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011e6e:	e00f      	b.n	8011e90 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011e70:	79fb      	ldrb	r3, [r7, #7]
 8011e72:	2b01      	cmp	r3, #1
 8011e74:	bf8c      	ite	hi
 8011e76:	2301      	movhi	r3, #1
 8011e78:	2300      	movls	r3, #0
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	461a      	mov	r2, r3
 8011e7e:	f107 0314 	add.w	r3, r7, #20
 8011e82:	4611      	mov	r1, r2
 8011e84:	4618      	mov	r0, r3
 8011e86:	f7fe fc1f 	bl	80106c8 <chk_lock>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011e90:	79fb      	ldrb	r3, [r7, #7]
 8011e92:	f003 031c 	and.w	r3, r3, #28
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d07f      	beq.n	8011f9a <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8011e9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d017      	beq.n	8011ed2 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011ea2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011ea6:	2b04      	cmp	r3, #4
 8011ea8:	d10e      	bne.n	8011ec8 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011eaa:	f7fe fc69 	bl	8010780 <enq_lock>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d006      	beq.n	8011ec2 <f_open+0xc4>
 8011eb4:	f107 0314 	add.w	r3, r7, #20
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7ff fb4d 	bl	8011558 <dir_register>
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	e000      	b.n	8011ec4 <f_open+0xc6>
 8011ec2:	2312      	movs	r3, #18
 8011ec4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011ec8:	79fb      	ldrb	r3, [r7, #7]
 8011eca:	f043 0308 	orr.w	r3, r3, #8
 8011ece:	71fb      	strb	r3, [r7, #7]
 8011ed0:	e010      	b.n	8011ef4 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011ed2:	7ebb      	ldrb	r3, [r7, #26]
 8011ed4:	f003 0311 	and.w	r3, r3, #17
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d003      	beq.n	8011ee4 <f_open+0xe6>
					res = FR_DENIED;
 8011edc:	2307      	movs	r3, #7
 8011ede:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011ee2:	e007      	b.n	8011ef4 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011ee4:	79fb      	ldrb	r3, [r7, #7]
 8011ee6:	f003 0304 	and.w	r3, r3, #4
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d002      	beq.n	8011ef4 <f_open+0xf6>
 8011eee:	2308      	movs	r3, #8
 8011ef0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d168      	bne.n	8011fce <f_open+0x1d0>
 8011efc:	79fb      	ldrb	r3, [r7, #7]
 8011efe:	f003 0308 	and.w	r3, r3, #8
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d063      	beq.n	8011fce <f_open+0x1d0>
				dw = GET_FATTIME();
 8011f06:	f7fd fd09 	bl	800f91c <get_fattime>
 8011f0a:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f0e:	330e      	adds	r3, #14
 8011f10:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fe fb2e 	bl	8010574 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011f18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f1a:	3316      	adds	r3, #22
 8011f1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fe fb28 	bl	8010574 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f26:	330b      	adds	r3, #11
 8011f28:	2220      	movs	r2, #32
 8011f2a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f30:	4611      	mov	r1, r2
 8011f32:	4618      	mov	r0, r3
 8011f34:	f7ff fa7c 	bl	8011430 <ld_clust>
 8011f38:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8011f3e:	2200      	movs	r2, #0
 8011f40:	4618      	mov	r0, r3
 8011f42:	f7ff fa94 	bl	801146e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f48:	331c      	adds	r3, #28
 8011f4a:	2100      	movs	r1, #0
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7fe fb11 	bl	8010574 <st_dword>
					fs->wflag = 1;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	2201      	movs	r2, #1
 8011f56:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011f58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d037      	beq.n	8011fce <f_open+0x1d0>
						dw = fs->winsect;
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f62:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011f64:	f107 0314 	add.w	r3, r7, #20
 8011f68:	2200      	movs	r2, #0
 8011f6a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7fe ffa7 	bl	8010ec0 <remove_chain>
 8011f72:	4603      	mov	r3, r0
 8011f74:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8011f78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d126      	bne.n	8011fce <f_open+0x1d0>
							res = move_window(fs, dw);
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011f84:	4618      	mov	r0, r3
 8011f86:	f7fe fd4f 	bl	8010a28 <move_window>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011f94:	3a01      	subs	r2, #1
 8011f96:	60da      	str	r2, [r3, #12]
 8011f98:	e019      	b.n	8011fce <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011f9a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d115      	bne.n	8011fce <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011fa2:	7ebb      	ldrb	r3, [r7, #26]
 8011fa4:	f003 0310 	and.w	r3, r3, #16
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d003      	beq.n	8011fb4 <f_open+0x1b6>
					res = FR_NO_FILE;
 8011fac:	2304      	movs	r3, #4
 8011fae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8011fb2:	e00c      	b.n	8011fce <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011fb4:	79fb      	ldrb	r3, [r7, #7]
 8011fb6:	f003 0302 	and.w	r3, r3, #2
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d007      	beq.n	8011fce <f_open+0x1d0>
 8011fbe:	7ebb      	ldrb	r3, [r7, #26]
 8011fc0:	f003 0301 	and.w	r3, r3, #1
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d002      	beq.n	8011fce <f_open+0x1d0>
						res = FR_DENIED;
 8011fc8:	2307      	movs	r3, #7
 8011fca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011fce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d126      	bne.n	8012024 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011fd6:	79fb      	ldrb	r3, [r7, #7]
 8011fd8:	f003 0308 	and.w	r3, r3, #8
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d003      	beq.n	8011fe8 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8011fe0:	79fb      	ldrb	r3, [r7, #7]
 8011fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011fe6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8011ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ff2:	68fb      	ldr	r3, [r7, #12]
 8011ff4:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011ff6:	79fb      	ldrb	r3, [r7, #7]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	bf8c      	ite	hi
 8011ffc:	2301      	movhi	r3, #1
 8011ffe:	2300      	movls	r3, #0
 8012000:	b2db      	uxtb	r3, r3
 8012002:	461a      	mov	r2, r3
 8012004:	f107 0314 	add.w	r3, r7, #20
 8012008:	4611      	mov	r1, r2
 801200a:	4618      	mov	r0, r3
 801200c:	f7fe fbda 	bl	80107c4 <inc_lock>
 8012010:	4602      	mov	r2, r0
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	691b      	ldr	r3, [r3, #16]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d102      	bne.n	8012024 <f_open+0x226>
 801201e:	2302      	movs	r3, #2
 8012020:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012024:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012028:	2b00      	cmp	r3, #0
 801202a:	f040 8095 	bne.w	8012158 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012032:	4611      	mov	r1, r2
 8012034:	4618      	mov	r0, r3
 8012036:	f7ff f9fb 	bl	8011430 <ld_clust>
 801203a:	4602      	mov	r2, r0
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012042:	331c      	adds	r3, #28
 8012044:	4618      	mov	r0, r3
 8012046:	f7fe fa57 	bl	80104f8 <ld_dword>
 801204a:	4602      	mov	r2, r0
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	2200      	movs	r2, #0
 8012054:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012056:	693a      	ldr	r2, [r7, #16]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	88da      	ldrh	r2, [r3, #6]
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	79fa      	ldrb	r2, [r7, #7]
 8012068:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2200      	movs	r2, #0
 801206e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2200      	movs	r2, #0
 8012074:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	2200      	movs	r2, #0
 801207a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	3330      	adds	r3, #48	@ 0x30
 8012080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012084:	2100      	movs	r1, #0
 8012086:	4618      	mov	r0, r3
 8012088:	f7fe fac1 	bl	801060e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801208c:	79fb      	ldrb	r3, [r7, #7]
 801208e:	f003 0320 	and.w	r3, r3, #32
 8012092:	2b00      	cmp	r3, #0
 8012094:	d060      	beq.n	8012158 <f_open+0x35a>
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	68db      	ldr	r3, [r3, #12]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d05c      	beq.n	8012158 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	68da      	ldr	r2, [r3, #12]
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	895b      	ldrh	r3, [r3, #10]
 80120aa:	025b      	lsls	r3, r3, #9
 80120ac:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	689b      	ldr	r3, [r3, #8]
 80120b2:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80120ba:	e016      	b.n	80120ea <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fe fd6c 	bl	8010b9e <get_fat>
 80120c6:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80120c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80120ca:	2b01      	cmp	r3, #1
 80120cc:	d802      	bhi.n	80120d4 <f_open+0x2d6>
 80120ce:	2302      	movs	r3, #2
 80120d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80120d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80120d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120da:	d102      	bne.n	80120e2 <f_open+0x2e4>
 80120dc:	2301      	movs	r3, #1
 80120de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80120e2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80120e6:	1ad3      	subs	r3, r2, r3
 80120e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80120ea:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d103      	bne.n	80120fa <f_open+0x2fc>
 80120f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d8e0      	bhi.n	80120bc <f_open+0x2be>
				}
				fp->clust = clst;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80120fe:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012100:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8012104:	2b00      	cmp	r3, #0
 8012106:	d127      	bne.n	8012158 <f_open+0x35a>
 8012108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801210a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801210e:	2b00      	cmp	r3, #0
 8012110:	d022      	beq.n	8012158 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8012116:	4618      	mov	r0, r3
 8012118:	f7fe fd22 	bl	8010b60 <clust2sect>
 801211c:	6478      	str	r0, [r7, #68]	@ 0x44
 801211e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012120:	2b00      	cmp	r3, #0
 8012122:	d103      	bne.n	801212c <f_open+0x32e>
						res = FR_INT_ERR;
 8012124:	2302      	movs	r3, #2
 8012126:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 801212a:	e015      	b.n	8012158 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801212c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801212e:	0a5a      	lsrs	r2, r3, #9
 8012130:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012132:	441a      	add	r2, r3
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	7858      	ldrb	r0, [r3, #1]
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	6a1a      	ldr	r2, [r3, #32]
 8012146:	2301      	movs	r3, #1
 8012148:	f7fe f960 	bl	801040c <disk_read>
 801214c:	4603      	mov	r3, r0
 801214e:	2b00      	cmp	r3, #0
 8012150:	d002      	beq.n	8012158 <f_open+0x35a>
 8012152:	2301      	movs	r3, #1
 8012154:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012158:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801215c:	2b00      	cmp	r3, #0
 801215e:	d002      	beq.n	8012166 <f_open+0x368>
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2200      	movs	r2, #0
 8012164:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012166:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 801216a:	4618      	mov	r0, r3
 801216c:	3760      	adds	r7, #96	@ 0x60
 801216e:	46bd      	mov	sp, r7
 8012170:	bd80      	pop	{r7, pc}

08012172 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012172:	b580      	push	{r7, lr}
 8012174:	b08c      	sub	sp, #48	@ 0x30
 8012176:	af00      	add	r7, sp, #0
 8012178:	60f8      	str	r0, [r7, #12]
 801217a:	60b9      	str	r1, [r7, #8]
 801217c:	607a      	str	r2, [r7, #4]
 801217e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012184:	683b      	ldr	r3, [r7, #0]
 8012186:	2200      	movs	r2, #0
 8012188:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	f107 0210 	add.w	r2, r7, #16
 8012190:	4611      	mov	r1, r2
 8012192:	4618      	mov	r0, r3
 8012194:	f7ff fdfe 	bl	8011d94 <validate>
 8012198:	4603      	mov	r3, r0
 801219a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801219e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d107      	bne.n	80121b6 <f_write+0x44>
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	7d5b      	ldrb	r3, [r3, #21]
 80121aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80121ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d002      	beq.n	80121bc <f_write+0x4a>
 80121b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80121ba:	e14b      	b.n	8012454 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	7d1b      	ldrb	r3, [r3, #20]
 80121c0:	f003 0302 	and.w	r3, r3, #2
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d101      	bne.n	80121cc <f_write+0x5a>
 80121c8:	2307      	movs	r3, #7
 80121ca:	e143      	b.n	8012454 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	699a      	ldr	r2, [r3, #24]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	441a      	add	r2, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	699b      	ldr	r3, [r3, #24]
 80121d8:	429a      	cmp	r2, r3
 80121da:	f080 812d 	bcs.w	8012438 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	699b      	ldr	r3, [r3, #24]
 80121e2:	43db      	mvns	r3, r3
 80121e4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80121e6:	e127      	b.n	8012438 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	699b      	ldr	r3, [r3, #24]
 80121ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f040 80e3 	bne.w	80123bc <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	699b      	ldr	r3, [r3, #24]
 80121fa:	0a5b      	lsrs	r3, r3, #9
 80121fc:	693a      	ldr	r2, [r7, #16]
 80121fe:	8952      	ldrh	r2, [r2, #10]
 8012200:	3a01      	subs	r2, #1
 8012202:	4013      	ands	r3, r2
 8012204:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d143      	bne.n	8012294 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	699b      	ldr	r3, [r3, #24]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10c      	bne.n	801222e <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	689b      	ldr	r3, [r3, #8]
 8012218:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801221c:	2b00      	cmp	r3, #0
 801221e:	d11a      	bne.n	8012256 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	2100      	movs	r1, #0
 8012224:	4618      	mov	r0, r3
 8012226:	f7fe feb0 	bl	8010f8a <create_chain>
 801222a:	62b8      	str	r0, [r7, #40]	@ 0x28
 801222c:	e013      	b.n	8012256 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012232:	2b00      	cmp	r3, #0
 8012234:	d007      	beq.n	8012246 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	699b      	ldr	r3, [r3, #24]
 801223a:	4619      	mov	r1, r3
 801223c:	68f8      	ldr	r0, [r7, #12]
 801223e:	f7fe ff3c 	bl	80110ba <clmt_clust>
 8012242:	62b8      	str	r0, [r7, #40]	@ 0x28
 8012244:	e007      	b.n	8012256 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012246:	68fa      	ldr	r2, [r7, #12]
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	69db      	ldr	r3, [r3, #28]
 801224c:	4619      	mov	r1, r3
 801224e:	4610      	mov	r0, r2
 8012250:	f7fe fe9b 	bl	8010f8a <create_chain>
 8012254:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012258:	2b00      	cmp	r3, #0
 801225a:	f000 80f2 	beq.w	8012442 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801225e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012260:	2b01      	cmp	r3, #1
 8012262:	d104      	bne.n	801226e <f_write+0xfc>
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2202      	movs	r2, #2
 8012268:	755a      	strb	r2, [r3, #21]
 801226a:	2302      	movs	r3, #2
 801226c:	e0f2      	b.n	8012454 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801226e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012274:	d104      	bne.n	8012280 <f_write+0x10e>
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	2201      	movs	r2, #1
 801227a:	755a      	strb	r2, [r3, #21]
 801227c:	2301      	movs	r3, #1
 801227e:	e0e9      	b.n	8012454 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012284:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	689b      	ldr	r3, [r3, #8]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d102      	bne.n	8012294 <f_write+0x122>
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012292:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	7d1b      	ldrb	r3, [r3, #20]
 8012298:	b25b      	sxtb	r3, r3
 801229a:	2b00      	cmp	r3, #0
 801229c:	da18      	bge.n	80122d0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	7858      	ldrb	r0, [r3, #1]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	6a1a      	ldr	r2, [r3, #32]
 80122ac:	2301      	movs	r3, #1
 80122ae:	f7fe f8cd 	bl	801044c <disk_write>
 80122b2:	4603      	mov	r3, r0
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d004      	beq.n	80122c2 <f_write+0x150>
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2201      	movs	r2, #1
 80122bc:	755a      	strb	r2, [r3, #21]
 80122be:	2301      	movs	r3, #1
 80122c0:	e0c8      	b.n	8012454 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	7d1b      	ldrb	r3, [r3, #20]
 80122c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80122d0:	693a      	ldr	r2, [r7, #16]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	69db      	ldr	r3, [r3, #28]
 80122d6:	4619      	mov	r1, r3
 80122d8:	4610      	mov	r0, r2
 80122da:	f7fe fc41 	bl	8010b60 <clust2sect>
 80122de:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d104      	bne.n	80122f0 <f_write+0x17e>
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2202      	movs	r2, #2
 80122ea:	755a      	strb	r2, [r3, #21]
 80122ec:	2302      	movs	r3, #2
 80122ee:	e0b1      	b.n	8012454 <f_write+0x2e2>
			sect += csect;
 80122f0:	697a      	ldr	r2, [r7, #20]
 80122f2:	69bb      	ldr	r3, [r7, #24]
 80122f4:	4413      	add	r3, r2
 80122f6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	0a5b      	lsrs	r3, r3, #9
 80122fc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80122fe:	6a3b      	ldr	r3, [r7, #32]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d03c      	beq.n	801237e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012304:	69ba      	ldr	r2, [r7, #24]
 8012306:	6a3b      	ldr	r3, [r7, #32]
 8012308:	4413      	add	r3, r2
 801230a:	693a      	ldr	r2, [r7, #16]
 801230c:	8952      	ldrh	r2, [r2, #10]
 801230e:	4293      	cmp	r3, r2
 8012310:	d905      	bls.n	801231e <f_write+0x1ac>
					cc = fs->csize - csect;
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	895b      	ldrh	r3, [r3, #10]
 8012316:	461a      	mov	r2, r3
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	1ad3      	subs	r3, r2, r3
 801231c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	7858      	ldrb	r0, [r3, #1]
 8012322:	6a3b      	ldr	r3, [r7, #32]
 8012324:	697a      	ldr	r2, [r7, #20]
 8012326:	69f9      	ldr	r1, [r7, #28]
 8012328:	f7fe f890 	bl	801044c <disk_write>
 801232c:	4603      	mov	r3, r0
 801232e:	2b00      	cmp	r3, #0
 8012330:	d004      	beq.n	801233c <f_write+0x1ca>
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2201      	movs	r2, #1
 8012336:	755a      	strb	r2, [r3, #21]
 8012338:	2301      	movs	r3, #1
 801233a:	e08b      	b.n	8012454 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	6a1a      	ldr	r2, [r3, #32]
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	1ad3      	subs	r3, r2, r3
 8012344:	6a3a      	ldr	r2, [r7, #32]
 8012346:	429a      	cmp	r2, r3
 8012348:	d915      	bls.n	8012376 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	6a1a      	ldr	r2, [r3, #32]
 8012354:	697b      	ldr	r3, [r7, #20]
 8012356:	1ad3      	subs	r3, r2, r3
 8012358:	025b      	lsls	r3, r3, #9
 801235a:	69fa      	ldr	r2, [r7, #28]
 801235c:	4413      	add	r3, r2
 801235e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012362:	4619      	mov	r1, r3
 8012364:	f7fe f932 	bl	80105cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	7d1b      	ldrb	r3, [r3, #20]
 801236c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012370:	b2da      	uxtb	r2, r3
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012376:	6a3b      	ldr	r3, [r7, #32]
 8012378:	025b      	lsls	r3, r3, #9
 801237a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801237c:	e03f      	b.n	80123fe <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	6a1b      	ldr	r3, [r3, #32]
 8012382:	697a      	ldr	r2, [r7, #20]
 8012384:	429a      	cmp	r2, r3
 8012386:	d016      	beq.n	80123b6 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	699a      	ldr	r2, [r3, #24]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012390:	429a      	cmp	r2, r3
 8012392:	d210      	bcs.n	80123b6 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8012394:	693b      	ldr	r3, [r7, #16]
 8012396:	7858      	ldrb	r0, [r3, #1]
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801239e:	2301      	movs	r3, #1
 80123a0:	697a      	ldr	r2, [r7, #20]
 80123a2:	f7fe f833 	bl	801040c <disk_read>
 80123a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d004      	beq.n	80123b6 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	2201      	movs	r2, #1
 80123b0:	755a      	strb	r2, [r3, #21]
 80123b2:	2301      	movs	r3, #1
 80123b4:	e04e      	b.n	8012454 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	697a      	ldr	r2, [r7, #20]
 80123ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	699b      	ldr	r3, [r3, #24]
 80123c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123c4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80123c8:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80123ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d901      	bls.n	80123d6 <f_write+0x264>
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	699b      	ldr	r3, [r3, #24]
 80123e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123e4:	4413      	add	r3, r2
 80123e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80123e8:	69f9      	ldr	r1, [r7, #28]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fe f8ee 	bl	80105cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	7d1b      	ldrb	r3, [r3, #20]
 80123f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80123f8:	b2da      	uxtb	r2, r3
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80123fe:	69fa      	ldr	r2, [r7, #28]
 8012400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012402:	4413      	add	r3, r2
 8012404:	61fb      	str	r3, [r7, #28]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	699a      	ldr	r2, [r3, #24]
 801240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801240c:	441a      	add	r2, r3
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	619a      	str	r2, [r3, #24]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	68da      	ldr	r2, [r3, #12]
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	699b      	ldr	r3, [r3, #24]
 801241a:	429a      	cmp	r2, r3
 801241c:	bf38      	it	cc
 801241e:	461a      	movcc	r2, r3
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	60da      	str	r2, [r3, #12]
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	681a      	ldr	r2, [r3, #0]
 8012428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801242a:	441a      	add	r2, r3
 801242c:	683b      	ldr	r3, [r7, #0]
 801242e:	601a      	str	r2, [r3, #0]
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012434:	1ad3      	subs	r3, r2, r3
 8012436:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	f47f aed4 	bne.w	80121e8 <f_write+0x76>
 8012440:	e000      	b.n	8012444 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012442:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	7d1b      	ldrb	r3, [r3, #20]
 8012448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801244c:	b2da      	uxtb	r2, r3
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012452:	2300      	movs	r3, #0
}
 8012454:	4618      	mov	r0, r3
 8012456:	3730      	adds	r7, #48	@ 0x30
 8012458:	46bd      	mov	sp, r7
 801245a:	bd80      	pop	{r7, pc}

0801245c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	b086      	sub	sp, #24
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f107 0208 	add.w	r2, r7, #8
 801246a:	4611      	mov	r1, r2
 801246c:	4618      	mov	r0, r3
 801246e:	f7ff fc91 	bl	8011d94 <validate>
 8012472:	4603      	mov	r3, r0
 8012474:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d168      	bne.n	801254e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	7d1b      	ldrb	r3, [r3, #20]
 8012480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012484:	2b00      	cmp	r3, #0
 8012486:	d062      	beq.n	801254e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	7d1b      	ldrb	r3, [r3, #20]
 801248c:	b25b      	sxtb	r3, r3
 801248e:	2b00      	cmp	r3, #0
 8012490:	da15      	bge.n	80124be <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	7858      	ldrb	r0, [r3, #1]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	6a1a      	ldr	r2, [r3, #32]
 80124a0:	2301      	movs	r3, #1
 80124a2:	f7fd ffd3 	bl	801044c <disk_write>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d001      	beq.n	80124b0 <f_sync+0x54>
 80124ac:	2301      	movs	r3, #1
 80124ae:	e04f      	b.n	8012550 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	7d1b      	ldrb	r3, [r3, #20]
 80124b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80124b8:	b2da      	uxtb	r2, r3
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80124be:	f7fd fa2d 	bl	800f91c <get_fattime>
 80124c2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80124c4:	68ba      	ldr	r2, [r7, #8]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124ca:	4619      	mov	r1, r3
 80124cc:	4610      	mov	r0, r2
 80124ce:	f7fe faab 	bl	8010a28 <move_window>
 80124d2:	4603      	mov	r3, r0
 80124d4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80124d6:	7dfb      	ldrb	r3, [r7, #23]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d138      	bne.n	801254e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80124e0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	330b      	adds	r3, #11
 80124e6:	781a      	ldrb	r2, [r3, #0]
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	330b      	adds	r3, #11
 80124ec:	f042 0220 	orr.w	r2, r2, #32
 80124f0:	b2d2      	uxtb	r2, r2
 80124f2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6818      	ldr	r0, [r3, #0]
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	461a      	mov	r2, r3
 80124fe:	68f9      	ldr	r1, [r7, #12]
 8012500:	f7fe ffb5 	bl	801146e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f103 021c 	add.w	r2, r3, #28
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	4619      	mov	r1, r3
 8012510:	4610      	mov	r0, r2
 8012512:	f7fe f82f 	bl	8010574 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	3316      	adds	r3, #22
 801251a:	6939      	ldr	r1, [r7, #16]
 801251c:	4618      	mov	r0, r3
 801251e:	f7fe f829 	bl	8010574 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	3312      	adds	r3, #18
 8012526:	2100      	movs	r1, #0
 8012528:	4618      	mov	r0, r3
 801252a:	f7fe f808 	bl	801053e <st_word>
					fs->wflag = 1;
 801252e:	68bb      	ldr	r3, [r7, #8]
 8012530:	2201      	movs	r2, #1
 8012532:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	4618      	mov	r0, r3
 8012538:	f7fe faa4 	bl	8010a84 <sync_fs>
 801253c:	4603      	mov	r3, r0
 801253e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	7d1b      	ldrb	r3, [r3, #20]
 8012544:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012548:	b2da      	uxtb	r2, r3
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801254e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012550:	4618      	mov	r0, r3
 8012552:	3718      	adds	r7, #24
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b084      	sub	sp, #16
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f7ff ff7b 	bl	801245c <f_sync>
 8012566:	4603      	mov	r3, r0
 8012568:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801256a:	7bfb      	ldrb	r3, [r7, #15]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d118      	bne.n	80125a2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	f107 0208 	add.w	r2, r7, #8
 8012576:	4611      	mov	r1, r2
 8012578:	4618      	mov	r0, r3
 801257a:	f7ff fc0b 	bl	8011d94 <validate>
 801257e:	4603      	mov	r3, r0
 8012580:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012582:	7bfb      	ldrb	r3, [r7, #15]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d10c      	bne.n	80125a2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	691b      	ldr	r3, [r3, #16]
 801258c:	4618      	mov	r0, r3
 801258e:	f7fe f9a7 	bl	80108e0 <dec_lock>
 8012592:	4603      	mov	r3, r0
 8012594:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012596:	7bfb      	ldrb	r3, [r7, #15]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d102      	bne.n	80125a2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80125a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80125a4:	4618      	mov	r0, r3
 80125a6:	3710      	adds	r7, #16
 80125a8:	46bd      	mov	sp, r7
 80125aa:	bd80      	pop	{r7, pc}

080125ac <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b090      	sub	sp, #64	@ 0x40
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
 80125b4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	f107 0208 	add.w	r2, r7, #8
 80125bc:	4611      	mov	r1, r2
 80125be:	4618      	mov	r0, r3
 80125c0:	f7ff fbe8 	bl	8011d94 <validate>
 80125c4:	4603      	mov	r3, r0
 80125c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80125ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d103      	bne.n	80125da <f_lseek+0x2e>
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	7d5b      	ldrb	r3, [r3, #21]
 80125d6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80125da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d002      	beq.n	80125e8 <f_lseek+0x3c>
 80125e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80125e6:	e1e6      	b.n	80129b6 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	f000 80d1 	beq.w	8012794 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125f8:	d15a      	bne.n	80126b0 <f_lseek+0x104>
			tbl = fp->cltbl;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125fe:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8012600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012602:	1d1a      	adds	r2, r3, #4
 8012604:	627a      	str	r2, [r7, #36]	@ 0x24
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	617b      	str	r3, [r7, #20]
 801260a:	2302      	movs	r3, #2
 801260c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	689b      	ldr	r3, [r3, #8]
 8012612:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8012614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012616:	2b00      	cmp	r3, #0
 8012618:	d03a      	beq.n	8012690 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801261a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801261c:	613b      	str	r3, [r7, #16]
 801261e:	2300      	movs	r3, #0
 8012620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012624:	3302      	adds	r3, #2
 8012626:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8012628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801262a:	60fb      	str	r3, [r7, #12]
 801262c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801262e:	3301      	adds	r3, #1
 8012630:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012636:	4618      	mov	r0, r3
 8012638:	f7fe fab1 	bl	8010b9e <get_fat>
 801263c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801263e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012640:	2b01      	cmp	r3, #1
 8012642:	d804      	bhi.n	801264e <f_lseek+0xa2>
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2202      	movs	r2, #2
 8012648:	755a      	strb	r2, [r3, #21]
 801264a:	2302      	movs	r3, #2
 801264c:	e1b3      	b.n	80129b6 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801264e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012654:	d104      	bne.n	8012660 <f_lseek+0xb4>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	2201      	movs	r2, #1
 801265a:	755a      	strb	r2, [r3, #21]
 801265c:	2301      	movs	r3, #1
 801265e:	e1aa      	b.n	80129b6 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	3301      	adds	r3, #1
 8012664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012666:	429a      	cmp	r2, r3
 8012668:	d0de      	beq.n	8012628 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801266a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	429a      	cmp	r2, r3
 8012670:	d809      	bhi.n	8012686 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8012672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012674:	1d1a      	adds	r2, r3, #4
 8012676:	627a      	str	r2, [r7, #36]	@ 0x24
 8012678:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801267a:	601a      	str	r2, [r3, #0]
 801267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801267e:	1d1a      	adds	r2, r3, #4
 8012680:	627a      	str	r2, [r7, #36]	@ 0x24
 8012682:	693a      	ldr	r2, [r7, #16]
 8012684:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	695b      	ldr	r3, [r3, #20]
 801268a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801268c:	429a      	cmp	r2, r3
 801268e:	d3c4      	bcc.n	801261a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012694:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012696:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	429a      	cmp	r2, r3
 801269e:	d803      	bhi.n	80126a8 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80126a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126a2:	2200      	movs	r2, #0
 80126a4:	601a      	str	r2, [r3, #0]
 80126a6:	e184      	b.n	80129b2 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80126a8:	2311      	movs	r3, #17
 80126aa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80126ae:	e180      	b.n	80129b2 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	683a      	ldr	r2, [r7, #0]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	d902      	bls.n	80126c0 <f_lseek+0x114>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	68db      	ldr	r3, [r3, #12]
 80126be:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	683a      	ldr	r2, [r7, #0]
 80126c4:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	f000 8172 	beq.w	80129b2 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	3b01      	subs	r3, #1
 80126d2:	4619      	mov	r1, r3
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f7fe fcf0 	bl	80110ba <clmt_clust>
 80126da:	4602      	mov	r2, r0
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80126e0:	68ba      	ldr	r2, [r7, #8]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	69db      	ldr	r3, [r3, #28]
 80126e6:	4619      	mov	r1, r3
 80126e8:	4610      	mov	r0, r2
 80126ea:	f7fe fa39 	bl	8010b60 <clust2sect>
 80126ee:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80126f0:	69bb      	ldr	r3, [r7, #24]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d104      	bne.n	8012700 <f_lseek+0x154>
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	2202      	movs	r2, #2
 80126fa:	755a      	strb	r2, [r3, #21]
 80126fc:	2302      	movs	r3, #2
 80126fe:	e15a      	b.n	80129b6 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	3b01      	subs	r3, #1
 8012704:	0a5b      	lsrs	r3, r3, #9
 8012706:	68ba      	ldr	r2, [r7, #8]
 8012708:	8952      	ldrh	r2, [r2, #10]
 801270a:	3a01      	subs	r2, #1
 801270c:	4013      	ands	r3, r2
 801270e:	69ba      	ldr	r2, [r7, #24]
 8012710:	4413      	add	r3, r2
 8012712:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	699b      	ldr	r3, [r3, #24]
 8012718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801271c:	2b00      	cmp	r3, #0
 801271e:	f000 8148 	beq.w	80129b2 <f_lseek+0x406>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	6a1b      	ldr	r3, [r3, #32]
 8012726:	69ba      	ldr	r2, [r7, #24]
 8012728:	429a      	cmp	r2, r3
 801272a:	f000 8142 	beq.w	80129b2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	7d1b      	ldrb	r3, [r3, #20]
 8012732:	b25b      	sxtb	r3, r3
 8012734:	2b00      	cmp	r3, #0
 8012736:	da18      	bge.n	801276a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	7858      	ldrb	r0, [r3, #1]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	6a1a      	ldr	r2, [r3, #32]
 8012746:	2301      	movs	r3, #1
 8012748:	f7fd fe80 	bl	801044c <disk_write>
 801274c:	4603      	mov	r3, r0
 801274e:	2b00      	cmp	r3, #0
 8012750:	d004      	beq.n	801275c <f_lseek+0x1b0>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2201      	movs	r2, #1
 8012756:	755a      	strb	r2, [r3, #21]
 8012758:	2301      	movs	r3, #1
 801275a:	e12c      	b.n	80129b6 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	7d1b      	ldrb	r3, [r3, #20]
 8012760:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012764:	b2da      	uxtb	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	7858      	ldrb	r0, [r3, #1]
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012774:	2301      	movs	r3, #1
 8012776:	69ba      	ldr	r2, [r7, #24]
 8012778:	f7fd fe48 	bl	801040c <disk_read>
 801277c:	4603      	mov	r3, r0
 801277e:	2b00      	cmp	r3, #0
 8012780:	d004      	beq.n	801278c <f_lseek+0x1e0>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2201      	movs	r2, #1
 8012786:	755a      	strb	r2, [r3, #21]
 8012788:	2301      	movs	r3, #1
 801278a:	e114      	b.n	80129b6 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	69ba      	ldr	r2, [r7, #24]
 8012790:	621a      	str	r2, [r3, #32]
 8012792:	e10e      	b.n	80129b2 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	68db      	ldr	r3, [r3, #12]
 8012798:	683a      	ldr	r2, [r7, #0]
 801279a:	429a      	cmp	r2, r3
 801279c:	d908      	bls.n	80127b0 <f_lseek+0x204>
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	7d1b      	ldrb	r3, [r3, #20]
 80127a2:	f003 0302 	and.w	r3, r3, #2
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d102      	bne.n	80127b0 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	68db      	ldr	r3, [r3, #12]
 80127ae:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	699b      	ldr	r3, [r3, #24]
 80127b4:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80127b6:	2300      	movs	r3, #0
 80127b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80127be:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	f000 80a7 	beq.w	8012916 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80127c8:	68bb      	ldr	r3, [r7, #8]
 80127ca:	895b      	ldrh	r3, [r3, #10]
 80127cc:	025b      	lsls	r3, r3, #9
 80127ce:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d01b      	beq.n	801280e <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	1e5a      	subs	r2, r3, #1
 80127da:	69fb      	ldr	r3, [r7, #28]
 80127dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80127e0:	6a3b      	ldr	r3, [r7, #32]
 80127e2:	1e59      	subs	r1, r3, #1
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d30f      	bcc.n	801280e <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80127ee:	6a3b      	ldr	r3, [r7, #32]
 80127f0:	1e5a      	subs	r2, r3, #1
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	425b      	negs	r3, r3
 80127f6:	401a      	ands	r2, r3
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	699b      	ldr	r3, [r3, #24]
 8012800:	683a      	ldr	r2, [r7, #0]
 8012802:	1ad3      	subs	r3, r2, r3
 8012804:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	69db      	ldr	r3, [r3, #28]
 801280a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801280c:	e022      	b.n	8012854 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	689b      	ldr	r3, [r3, #8]
 8012812:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8012814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012816:	2b00      	cmp	r3, #0
 8012818:	d119      	bne.n	801284e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2100      	movs	r1, #0
 801281e:	4618      	mov	r0, r3
 8012820:	f7fe fbb3 	bl	8010f8a <create_chain>
 8012824:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012828:	2b01      	cmp	r3, #1
 801282a:	d104      	bne.n	8012836 <f_lseek+0x28a>
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2202      	movs	r2, #2
 8012830:	755a      	strb	r2, [r3, #21]
 8012832:	2302      	movs	r3, #2
 8012834:	e0bf      	b.n	80129b6 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801283c:	d104      	bne.n	8012848 <f_lseek+0x29c>
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	2201      	movs	r2, #1
 8012842:	755a      	strb	r2, [r3, #21]
 8012844:	2301      	movs	r3, #1
 8012846:	e0b6      	b.n	80129b6 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801284c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012852:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8012854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012856:	2b00      	cmp	r3, #0
 8012858:	d05d      	beq.n	8012916 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 801285a:	e03a      	b.n	80128d2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 801285c:	683a      	ldr	r2, [r7, #0]
 801285e:	69fb      	ldr	r3, [r7, #28]
 8012860:	1ad3      	subs	r3, r2, r3
 8012862:	603b      	str	r3, [r7, #0]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	699a      	ldr	r2, [r3, #24]
 8012868:	69fb      	ldr	r3, [r7, #28]
 801286a:	441a      	add	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	7d1b      	ldrb	r3, [r3, #20]
 8012874:	f003 0302 	and.w	r3, r3, #2
 8012878:	2b00      	cmp	r3, #0
 801287a:	d00b      	beq.n	8012894 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012880:	4618      	mov	r0, r3
 8012882:	f7fe fb82 	bl	8010f8a <create_chain>
 8012886:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8012888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801288a:	2b00      	cmp	r3, #0
 801288c:	d108      	bne.n	80128a0 <f_lseek+0x2f4>
							ofs = 0; break;
 801288e:	2300      	movs	r3, #0
 8012890:	603b      	str	r3, [r7, #0]
 8012892:	e022      	b.n	80128da <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8012898:	4618      	mov	r0, r3
 801289a:	f7fe f980 	bl	8010b9e <get_fat>
 801289e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80128a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a6:	d104      	bne.n	80128b2 <f_lseek+0x306>
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2201      	movs	r2, #1
 80128ac:	755a      	strb	r2, [r3, #21]
 80128ae:	2301      	movs	r3, #1
 80128b0:	e081      	b.n	80129b6 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80128b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d904      	bls.n	80128c2 <f_lseek+0x316>
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	695b      	ldr	r3, [r3, #20]
 80128bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128be:	429a      	cmp	r2, r3
 80128c0:	d304      	bcc.n	80128cc <f_lseek+0x320>
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	2202      	movs	r2, #2
 80128c6:	755a      	strb	r2, [r3, #21]
 80128c8:	2302      	movs	r3, #2
 80128ca:	e074      	b.n	80129b6 <f_lseek+0x40a>
					fp->clust = clst;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80128d0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80128d2:	683a      	ldr	r2, [r7, #0]
 80128d4:	69fb      	ldr	r3, [r7, #28]
 80128d6:	429a      	cmp	r2, r3
 80128d8:	d8c0      	bhi.n	801285c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	699a      	ldr	r2, [r3, #24]
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	441a      	add	r2, r3
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d012      	beq.n	8012916 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80128f0:	68bb      	ldr	r3, [r7, #8]
 80128f2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7fe f933 	bl	8010b60 <clust2sect>
 80128fa:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80128fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d104      	bne.n	801290c <f_lseek+0x360>
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2202      	movs	r2, #2
 8012906:	755a      	strb	r2, [r3, #21]
 8012908:	2302      	movs	r3, #2
 801290a:	e054      	b.n	80129b6 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	0a5b      	lsrs	r3, r3, #9
 8012910:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012912:	4413      	add	r3, r2
 8012914:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	699a      	ldr	r2, [r3, #24]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	68db      	ldr	r3, [r3, #12]
 801291e:	429a      	cmp	r2, r3
 8012920:	d90a      	bls.n	8012938 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	699a      	ldr	r2, [r3, #24]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	7d1b      	ldrb	r3, [r3, #20]
 801292e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012932:	b2da      	uxtb	r2, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	699b      	ldr	r3, [r3, #24]
 801293c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012940:	2b00      	cmp	r3, #0
 8012942:	d036      	beq.n	80129b2 <f_lseek+0x406>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	6a1b      	ldr	r3, [r3, #32]
 8012948:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801294a:	429a      	cmp	r2, r3
 801294c:	d031      	beq.n	80129b2 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	7d1b      	ldrb	r3, [r3, #20]
 8012952:	b25b      	sxtb	r3, r3
 8012954:	2b00      	cmp	r3, #0
 8012956:	da18      	bge.n	801298a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	7858      	ldrb	r0, [r3, #1]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6a1a      	ldr	r2, [r3, #32]
 8012966:	2301      	movs	r3, #1
 8012968:	f7fd fd70 	bl	801044c <disk_write>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d004      	beq.n	801297c <f_lseek+0x3d0>
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2201      	movs	r2, #1
 8012976:	755a      	strb	r2, [r3, #21]
 8012978:	2301      	movs	r3, #1
 801297a:	e01c      	b.n	80129b6 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	7d1b      	ldrb	r3, [r3, #20]
 8012980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012984:	b2da      	uxtb	r2, r3
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	7858      	ldrb	r0, [r3, #1]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012994:	2301      	movs	r3, #1
 8012996:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012998:	f7fd fd38 	bl	801040c <disk_read>
 801299c:	4603      	mov	r3, r0
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d004      	beq.n	80129ac <f_lseek+0x400>
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2201      	movs	r2, #1
 80129a6:	755a      	strb	r2, [r3, #21]
 80129a8:	2301      	movs	r3, #1
 80129aa:	e004      	b.n	80129b6 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80129b0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80129b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3740      	adds	r7, #64	@ 0x40
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
	...

080129c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b087      	sub	sp, #28
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	60f8      	str	r0, [r7, #12]
 80129c8:	60b9      	str	r1, [r7, #8]
 80129ca:	4613      	mov	r3, r2
 80129cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80129ce:	2301      	movs	r3, #1
 80129d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80129d2:	2300      	movs	r3, #0
 80129d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80129d6:	4b1f      	ldr	r3, [pc, #124]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 80129d8:	7a5b      	ldrb	r3, [r3, #9]
 80129da:	b2db      	uxtb	r3, r3
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d131      	bne.n	8012a44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80129e0:	4b1c      	ldr	r3, [pc, #112]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 80129e2:	7a5b      	ldrb	r3, [r3, #9]
 80129e4:	b2db      	uxtb	r3, r3
 80129e6:	461a      	mov	r2, r3
 80129e8:	4b1a      	ldr	r3, [pc, #104]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 80129ea:	2100      	movs	r1, #0
 80129ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80129ee:	4b19      	ldr	r3, [pc, #100]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 80129f0:	7a5b      	ldrb	r3, [r3, #9]
 80129f2:	b2db      	uxtb	r3, r3
 80129f4:	4a17      	ldr	r2, [pc, #92]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 80129f6:	009b      	lsls	r3, r3, #2
 80129f8:	4413      	add	r3, r2
 80129fa:	68fa      	ldr	r2, [r7, #12]
 80129fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80129fe:	4b15      	ldr	r3, [pc, #84]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 8012a00:	7a5b      	ldrb	r3, [r3, #9]
 8012a02:	b2db      	uxtb	r3, r3
 8012a04:	461a      	mov	r2, r3
 8012a06:	4b13      	ldr	r3, [pc, #76]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 8012a08:	4413      	add	r3, r2
 8012a0a:	79fa      	ldrb	r2, [r7, #7]
 8012a0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012a0e:	4b11      	ldr	r3, [pc, #68]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 8012a10:	7a5b      	ldrb	r3, [r3, #9]
 8012a12:	b2db      	uxtb	r3, r3
 8012a14:	1c5a      	adds	r2, r3, #1
 8012a16:	b2d1      	uxtb	r1, r2
 8012a18:	4a0e      	ldr	r2, [pc, #56]	@ (8012a54 <FATFS_LinkDriverEx+0x94>)
 8012a1a:	7251      	strb	r1, [r2, #9]
 8012a1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012a1e:	7dbb      	ldrb	r3, [r7, #22]
 8012a20:	3330      	adds	r3, #48	@ 0x30
 8012a22:	b2da      	uxtb	r2, r3
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	3301      	adds	r3, #1
 8012a2c:	223a      	movs	r2, #58	@ 0x3a
 8012a2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012a30:	68bb      	ldr	r3, [r7, #8]
 8012a32:	3302      	adds	r3, #2
 8012a34:	222f      	movs	r2, #47	@ 0x2f
 8012a36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012a38:	68bb      	ldr	r3, [r7, #8]
 8012a3a:	3303      	adds	r3, #3
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012a40:	2300      	movs	r3, #0
 8012a42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012a44:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a46:	4618      	mov	r0, r3
 8012a48:	371c      	adds	r7, #28
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a50:	4770      	bx	lr
 8012a52:	bf00      	nop
 8012a54:	20001c88 	.word	0x20001c88

08012a58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b082      	sub	sp, #8
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012a62:	2200      	movs	r2, #0
 8012a64:	6839      	ldr	r1, [r7, #0]
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ff ffaa 	bl	80129c0 <FATFS_LinkDriverEx>
 8012a6c:	4603      	mov	r3, r0
}
 8012a6e:	4618      	mov	r0, r3
 8012a70:	3708      	adds	r7, #8
 8012a72:	46bd      	mov	sp, r7
 8012a74:	bd80      	pop	{r7, pc}
	...

08012a78 <calloc>:
 8012a78:	4b02      	ldr	r3, [pc, #8]	@ (8012a84 <calloc+0xc>)
 8012a7a:	460a      	mov	r2, r1
 8012a7c:	4601      	mov	r1, r0
 8012a7e:	6818      	ldr	r0, [r3, #0]
 8012a80:	f000 b802 	b.w	8012a88 <_calloc_r>
 8012a84:	20000068 	.word	0x20000068

08012a88 <_calloc_r>:
 8012a88:	b570      	push	{r4, r5, r6, lr}
 8012a8a:	fba1 5402 	umull	r5, r4, r1, r2
 8012a8e:	b93c      	cbnz	r4, 8012aa0 <_calloc_r+0x18>
 8012a90:	4629      	mov	r1, r5
 8012a92:	f000 f82f 	bl	8012af4 <_malloc_r>
 8012a96:	4606      	mov	r6, r0
 8012a98:	b928      	cbnz	r0, 8012aa6 <_calloc_r+0x1e>
 8012a9a:	2600      	movs	r6, #0
 8012a9c:	4630      	mov	r0, r6
 8012a9e:	bd70      	pop	{r4, r5, r6, pc}
 8012aa0:	220c      	movs	r2, #12
 8012aa2:	6002      	str	r2, [r0, #0]
 8012aa4:	e7f9      	b.n	8012a9a <_calloc_r+0x12>
 8012aa6:	462a      	mov	r2, r5
 8012aa8:	4621      	mov	r1, r4
 8012aaa:	f001 f87c 	bl	8013ba6 <memset>
 8012aae:	e7f5      	b.n	8012a9c <_calloc_r+0x14>

08012ab0 <sbrk_aligned>:
 8012ab0:	b570      	push	{r4, r5, r6, lr}
 8012ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8012af0 <sbrk_aligned+0x40>)
 8012ab4:	460c      	mov	r4, r1
 8012ab6:	6831      	ldr	r1, [r6, #0]
 8012ab8:	4605      	mov	r5, r0
 8012aba:	b911      	cbnz	r1, 8012ac2 <sbrk_aligned+0x12>
 8012abc:	f001 f8ca 	bl	8013c54 <_sbrk_r>
 8012ac0:	6030      	str	r0, [r6, #0]
 8012ac2:	4621      	mov	r1, r4
 8012ac4:	4628      	mov	r0, r5
 8012ac6:	f001 f8c5 	bl	8013c54 <_sbrk_r>
 8012aca:	1c43      	adds	r3, r0, #1
 8012acc:	d103      	bne.n	8012ad6 <sbrk_aligned+0x26>
 8012ace:	f04f 34ff 	mov.w	r4, #4294967295
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	bd70      	pop	{r4, r5, r6, pc}
 8012ad6:	1cc4      	adds	r4, r0, #3
 8012ad8:	f024 0403 	bic.w	r4, r4, #3
 8012adc:	42a0      	cmp	r0, r4
 8012ade:	d0f8      	beq.n	8012ad2 <sbrk_aligned+0x22>
 8012ae0:	1a21      	subs	r1, r4, r0
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	f001 f8b6 	bl	8013c54 <_sbrk_r>
 8012ae8:	3001      	adds	r0, #1
 8012aea:	d1f2      	bne.n	8012ad2 <sbrk_aligned+0x22>
 8012aec:	e7ef      	b.n	8012ace <sbrk_aligned+0x1e>
 8012aee:	bf00      	nop
 8012af0:	20001c94 	.word	0x20001c94

08012af4 <_malloc_r>:
 8012af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012af8:	1ccd      	adds	r5, r1, #3
 8012afa:	f025 0503 	bic.w	r5, r5, #3
 8012afe:	3508      	adds	r5, #8
 8012b00:	2d0c      	cmp	r5, #12
 8012b02:	bf38      	it	cc
 8012b04:	250c      	movcc	r5, #12
 8012b06:	2d00      	cmp	r5, #0
 8012b08:	4606      	mov	r6, r0
 8012b0a:	db01      	blt.n	8012b10 <_malloc_r+0x1c>
 8012b0c:	42a9      	cmp	r1, r5
 8012b0e:	d904      	bls.n	8012b1a <_malloc_r+0x26>
 8012b10:	230c      	movs	r3, #12
 8012b12:	6033      	str	r3, [r6, #0]
 8012b14:	2000      	movs	r0, #0
 8012b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012bf0 <_malloc_r+0xfc>
 8012b1e:	f000 f869 	bl	8012bf4 <__malloc_lock>
 8012b22:	f8d8 3000 	ldr.w	r3, [r8]
 8012b26:	461c      	mov	r4, r3
 8012b28:	bb44      	cbnz	r4, 8012b7c <_malloc_r+0x88>
 8012b2a:	4629      	mov	r1, r5
 8012b2c:	4630      	mov	r0, r6
 8012b2e:	f7ff ffbf 	bl	8012ab0 <sbrk_aligned>
 8012b32:	1c43      	adds	r3, r0, #1
 8012b34:	4604      	mov	r4, r0
 8012b36:	d158      	bne.n	8012bea <_malloc_r+0xf6>
 8012b38:	f8d8 4000 	ldr.w	r4, [r8]
 8012b3c:	4627      	mov	r7, r4
 8012b3e:	2f00      	cmp	r7, #0
 8012b40:	d143      	bne.n	8012bca <_malloc_r+0xd6>
 8012b42:	2c00      	cmp	r4, #0
 8012b44:	d04b      	beq.n	8012bde <_malloc_r+0xea>
 8012b46:	6823      	ldr	r3, [r4, #0]
 8012b48:	4639      	mov	r1, r7
 8012b4a:	4630      	mov	r0, r6
 8012b4c:	eb04 0903 	add.w	r9, r4, r3
 8012b50:	f001 f880 	bl	8013c54 <_sbrk_r>
 8012b54:	4581      	cmp	r9, r0
 8012b56:	d142      	bne.n	8012bde <_malloc_r+0xea>
 8012b58:	6821      	ldr	r1, [r4, #0]
 8012b5a:	1a6d      	subs	r5, r5, r1
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	4630      	mov	r0, r6
 8012b60:	f7ff ffa6 	bl	8012ab0 <sbrk_aligned>
 8012b64:	3001      	adds	r0, #1
 8012b66:	d03a      	beq.n	8012bde <_malloc_r+0xea>
 8012b68:	6823      	ldr	r3, [r4, #0]
 8012b6a:	442b      	add	r3, r5
 8012b6c:	6023      	str	r3, [r4, #0]
 8012b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8012b72:	685a      	ldr	r2, [r3, #4]
 8012b74:	bb62      	cbnz	r2, 8012bd0 <_malloc_r+0xdc>
 8012b76:	f8c8 7000 	str.w	r7, [r8]
 8012b7a:	e00f      	b.n	8012b9c <_malloc_r+0xa8>
 8012b7c:	6822      	ldr	r2, [r4, #0]
 8012b7e:	1b52      	subs	r2, r2, r5
 8012b80:	d420      	bmi.n	8012bc4 <_malloc_r+0xd0>
 8012b82:	2a0b      	cmp	r2, #11
 8012b84:	d917      	bls.n	8012bb6 <_malloc_r+0xc2>
 8012b86:	1961      	adds	r1, r4, r5
 8012b88:	42a3      	cmp	r3, r4
 8012b8a:	6025      	str	r5, [r4, #0]
 8012b8c:	bf18      	it	ne
 8012b8e:	6059      	strne	r1, [r3, #4]
 8012b90:	6863      	ldr	r3, [r4, #4]
 8012b92:	bf08      	it	eq
 8012b94:	f8c8 1000 	streq.w	r1, [r8]
 8012b98:	5162      	str	r2, [r4, r5]
 8012b9a:	604b      	str	r3, [r1, #4]
 8012b9c:	4630      	mov	r0, r6
 8012b9e:	f000 f82f 	bl	8012c00 <__malloc_unlock>
 8012ba2:	f104 000b 	add.w	r0, r4, #11
 8012ba6:	1d23      	adds	r3, r4, #4
 8012ba8:	f020 0007 	bic.w	r0, r0, #7
 8012bac:	1ac2      	subs	r2, r0, r3
 8012bae:	bf1c      	itt	ne
 8012bb0:	1a1b      	subne	r3, r3, r0
 8012bb2:	50a3      	strne	r3, [r4, r2]
 8012bb4:	e7af      	b.n	8012b16 <_malloc_r+0x22>
 8012bb6:	6862      	ldr	r2, [r4, #4]
 8012bb8:	42a3      	cmp	r3, r4
 8012bba:	bf0c      	ite	eq
 8012bbc:	f8c8 2000 	streq.w	r2, [r8]
 8012bc0:	605a      	strne	r2, [r3, #4]
 8012bc2:	e7eb      	b.n	8012b9c <_malloc_r+0xa8>
 8012bc4:	4623      	mov	r3, r4
 8012bc6:	6864      	ldr	r4, [r4, #4]
 8012bc8:	e7ae      	b.n	8012b28 <_malloc_r+0x34>
 8012bca:	463c      	mov	r4, r7
 8012bcc:	687f      	ldr	r7, [r7, #4]
 8012bce:	e7b6      	b.n	8012b3e <_malloc_r+0x4a>
 8012bd0:	461a      	mov	r2, r3
 8012bd2:	685b      	ldr	r3, [r3, #4]
 8012bd4:	42a3      	cmp	r3, r4
 8012bd6:	d1fb      	bne.n	8012bd0 <_malloc_r+0xdc>
 8012bd8:	2300      	movs	r3, #0
 8012bda:	6053      	str	r3, [r2, #4]
 8012bdc:	e7de      	b.n	8012b9c <_malloc_r+0xa8>
 8012bde:	230c      	movs	r3, #12
 8012be0:	6033      	str	r3, [r6, #0]
 8012be2:	4630      	mov	r0, r6
 8012be4:	f000 f80c 	bl	8012c00 <__malloc_unlock>
 8012be8:	e794      	b.n	8012b14 <_malloc_r+0x20>
 8012bea:	6005      	str	r5, [r0, #0]
 8012bec:	e7d6      	b.n	8012b9c <_malloc_r+0xa8>
 8012bee:	bf00      	nop
 8012bf0:	20001c98 	.word	0x20001c98

08012bf4 <__malloc_lock>:
 8012bf4:	4801      	ldr	r0, [pc, #4]	@ (8012bfc <__malloc_lock+0x8>)
 8012bf6:	f001 b87a 	b.w	8013cee <__retarget_lock_acquire_recursive>
 8012bfa:	bf00      	nop
 8012bfc:	20001ddc 	.word	0x20001ddc

08012c00 <__malloc_unlock>:
 8012c00:	4801      	ldr	r0, [pc, #4]	@ (8012c08 <__malloc_unlock+0x8>)
 8012c02:	f001 b875 	b.w	8013cf0 <__retarget_lock_release_recursive>
 8012c06:	bf00      	nop
 8012c08:	20001ddc 	.word	0x20001ddc

08012c0c <__cvt>:
 8012c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012c10:	ec57 6b10 	vmov	r6, r7, d0
 8012c14:	2f00      	cmp	r7, #0
 8012c16:	460c      	mov	r4, r1
 8012c18:	4619      	mov	r1, r3
 8012c1a:	463b      	mov	r3, r7
 8012c1c:	bfbb      	ittet	lt
 8012c1e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8012c22:	461f      	movlt	r7, r3
 8012c24:	2300      	movge	r3, #0
 8012c26:	232d      	movlt	r3, #45	@ 0x2d
 8012c28:	700b      	strb	r3, [r1, #0]
 8012c2a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012c2c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8012c30:	4691      	mov	r9, r2
 8012c32:	f023 0820 	bic.w	r8, r3, #32
 8012c36:	bfbc      	itt	lt
 8012c38:	4632      	movlt	r2, r6
 8012c3a:	4616      	movlt	r6, r2
 8012c3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012c40:	d005      	beq.n	8012c4e <__cvt+0x42>
 8012c42:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8012c46:	d100      	bne.n	8012c4a <__cvt+0x3e>
 8012c48:	3401      	adds	r4, #1
 8012c4a:	2102      	movs	r1, #2
 8012c4c:	e000      	b.n	8012c50 <__cvt+0x44>
 8012c4e:	2103      	movs	r1, #3
 8012c50:	ab03      	add	r3, sp, #12
 8012c52:	9301      	str	r3, [sp, #4]
 8012c54:	ab02      	add	r3, sp, #8
 8012c56:	9300      	str	r3, [sp, #0]
 8012c58:	ec47 6b10 	vmov	d0, r6, r7
 8012c5c:	4653      	mov	r3, sl
 8012c5e:	4622      	mov	r2, r4
 8012c60:	f001 f8e6 	bl	8013e30 <_dtoa_r>
 8012c64:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8012c68:	4605      	mov	r5, r0
 8012c6a:	d119      	bne.n	8012ca0 <__cvt+0x94>
 8012c6c:	f019 0f01 	tst.w	r9, #1
 8012c70:	d00e      	beq.n	8012c90 <__cvt+0x84>
 8012c72:	eb00 0904 	add.w	r9, r0, r4
 8012c76:	2200      	movs	r2, #0
 8012c78:	2300      	movs	r3, #0
 8012c7a:	4630      	mov	r0, r6
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	f7ed ff43 	bl	8000b08 <__aeabi_dcmpeq>
 8012c82:	b108      	cbz	r0, 8012c88 <__cvt+0x7c>
 8012c84:	f8cd 900c 	str.w	r9, [sp, #12]
 8012c88:	2230      	movs	r2, #48	@ 0x30
 8012c8a:	9b03      	ldr	r3, [sp, #12]
 8012c8c:	454b      	cmp	r3, r9
 8012c8e:	d31e      	bcc.n	8012cce <__cvt+0xc2>
 8012c90:	9b03      	ldr	r3, [sp, #12]
 8012c92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012c94:	1b5b      	subs	r3, r3, r5
 8012c96:	4628      	mov	r0, r5
 8012c98:	6013      	str	r3, [r2, #0]
 8012c9a:	b004      	add	sp, #16
 8012c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ca0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012ca4:	eb00 0904 	add.w	r9, r0, r4
 8012ca8:	d1e5      	bne.n	8012c76 <__cvt+0x6a>
 8012caa:	7803      	ldrb	r3, [r0, #0]
 8012cac:	2b30      	cmp	r3, #48	@ 0x30
 8012cae:	d10a      	bne.n	8012cc6 <__cvt+0xba>
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	4639      	mov	r1, r7
 8012cb8:	f7ed ff26 	bl	8000b08 <__aeabi_dcmpeq>
 8012cbc:	b918      	cbnz	r0, 8012cc6 <__cvt+0xba>
 8012cbe:	f1c4 0401 	rsb	r4, r4, #1
 8012cc2:	f8ca 4000 	str.w	r4, [sl]
 8012cc6:	f8da 3000 	ldr.w	r3, [sl]
 8012cca:	4499      	add	r9, r3
 8012ccc:	e7d3      	b.n	8012c76 <__cvt+0x6a>
 8012cce:	1c59      	adds	r1, r3, #1
 8012cd0:	9103      	str	r1, [sp, #12]
 8012cd2:	701a      	strb	r2, [r3, #0]
 8012cd4:	e7d9      	b.n	8012c8a <__cvt+0x7e>

08012cd6 <__exponent>:
 8012cd6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012cd8:	2900      	cmp	r1, #0
 8012cda:	bfba      	itte	lt
 8012cdc:	4249      	neglt	r1, r1
 8012cde:	232d      	movlt	r3, #45	@ 0x2d
 8012ce0:	232b      	movge	r3, #43	@ 0x2b
 8012ce2:	2909      	cmp	r1, #9
 8012ce4:	7002      	strb	r2, [r0, #0]
 8012ce6:	7043      	strb	r3, [r0, #1]
 8012ce8:	dd29      	ble.n	8012d3e <__exponent+0x68>
 8012cea:	f10d 0307 	add.w	r3, sp, #7
 8012cee:	461d      	mov	r5, r3
 8012cf0:	270a      	movs	r7, #10
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	fbb1 f6f7 	udiv	r6, r1, r7
 8012cf8:	fb07 1416 	mls	r4, r7, r6, r1
 8012cfc:	3430      	adds	r4, #48	@ 0x30
 8012cfe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012d02:	460c      	mov	r4, r1
 8012d04:	2c63      	cmp	r4, #99	@ 0x63
 8012d06:	f103 33ff 	add.w	r3, r3, #4294967295
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	dcf1      	bgt.n	8012cf2 <__exponent+0x1c>
 8012d0e:	3130      	adds	r1, #48	@ 0x30
 8012d10:	1e94      	subs	r4, r2, #2
 8012d12:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012d16:	1c41      	adds	r1, r0, #1
 8012d18:	4623      	mov	r3, r4
 8012d1a:	42ab      	cmp	r3, r5
 8012d1c:	d30a      	bcc.n	8012d34 <__exponent+0x5e>
 8012d1e:	f10d 0309 	add.w	r3, sp, #9
 8012d22:	1a9b      	subs	r3, r3, r2
 8012d24:	42ac      	cmp	r4, r5
 8012d26:	bf88      	it	hi
 8012d28:	2300      	movhi	r3, #0
 8012d2a:	3302      	adds	r3, #2
 8012d2c:	4403      	add	r3, r0
 8012d2e:	1a18      	subs	r0, r3, r0
 8012d30:	b003      	add	sp, #12
 8012d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d34:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012d38:	f801 6f01 	strb.w	r6, [r1, #1]!
 8012d3c:	e7ed      	b.n	8012d1a <__exponent+0x44>
 8012d3e:	2330      	movs	r3, #48	@ 0x30
 8012d40:	3130      	adds	r1, #48	@ 0x30
 8012d42:	7083      	strb	r3, [r0, #2]
 8012d44:	70c1      	strb	r1, [r0, #3]
 8012d46:	1d03      	adds	r3, r0, #4
 8012d48:	e7f1      	b.n	8012d2e <__exponent+0x58>
	...

08012d4c <_printf_float>:
 8012d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d50:	b08d      	sub	sp, #52	@ 0x34
 8012d52:	460c      	mov	r4, r1
 8012d54:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8012d58:	4616      	mov	r6, r2
 8012d5a:	461f      	mov	r7, r3
 8012d5c:	4605      	mov	r5, r0
 8012d5e:	f000 ff41 	bl	8013be4 <_localeconv_r>
 8012d62:	6803      	ldr	r3, [r0, #0]
 8012d64:	9304      	str	r3, [sp, #16]
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7ed faa2 	bl	80002b0 <strlen>
 8012d6c:	2300      	movs	r3, #0
 8012d6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012d70:	f8d8 3000 	ldr.w	r3, [r8]
 8012d74:	9005      	str	r0, [sp, #20]
 8012d76:	3307      	adds	r3, #7
 8012d78:	f023 0307 	bic.w	r3, r3, #7
 8012d7c:	f103 0208 	add.w	r2, r3, #8
 8012d80:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012d84:	f8d4 b000 	ldr.w	fp, [r4]
 8012d88:	f8c8 2000 	str.w	r2, [r8]
 8012d8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012d90:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8012d94:	9307      	str	r3, [sp, #28]
 8012d96:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d9a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8012d9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012da2:	4b9c      	ldr	r3, [pc, #624]	@ (8013014 <_printf_float+0x2c8>)
 8012da4:	f04f 32ff 	mov.w	r2, #4294967295
 8012da8:	f7ed fee0 	bl	8000b6c <__aeabi_dcmpun>
 8012dac:	bb70      	cbnz	r0, 8012e0c <_printf_float+0xc0>
 8012dae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012db2:	4b98      	ldr	r3, [pc, #608]	@ (8013014 <_printf_float+0x2c8>)
 8012db4:	f04f 32ff 	mov.w	r2, #4294967295
 8012db8:	f7ed feba 	bl	8000b30 <__aeabi_dcmple>
 8012dbc:	bb30      	cbnz	r0, 8012e0c <_printf_float+0xc0>
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	4640      	mov	r0, r8
 8012dc4:	4649      	mov	r1, r9
 8012dc6:	f7ed fea9 	bl	8000b1c <__aeabi_dcmplt>
 8012dca:	b110      	cbz	r0, 8012dd2 <_printf_float+0x86>
 8012dcc:	232d      	movs	r3, #45	@ 0x2d
 8012dce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012dd2:	4a91      	ldr	r2, [pc, #580]	@ (8013018 <_printf_float+0x2cc>)
 8012dd4:	4b91      	ldr	r3, [pc, #580]	@ (801301c <_printf_float+0x2d0>)
 8012dd6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012dda:	bf94      	ite	ls
 8012ddc:	4690      	movls	r8, r2
 8012dde:	4698      	movhi	r8, r3
 8012de0:	2303      	movs	r3, #3
 8012de2:	6123      	str	r3, [r4, #16]
 8012de4:	f02b 0304 	bic.w	r3, fp, #4
 8012de8:	6023      	str	r3, [r4, #0]
 8012dea:	f04f 0900 	mov.w	r9, #0
 8012dee:	9700      	str	r7, [sp, #0]
 8012df0:	4633      	mov	r3, r6
 8012df2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012df4:	4621      	mov	r1, r4
 8012df6:	4628      	mov	r0, r5
 8012df8:	f000 f9d2 	bl	80131a0 <_printf_common>
 8012dfc:	3001      	adds	r0, #1
 8012dfe:	f040 808d 	bne.w	8012f1c <_printf_float+0x1d0>
 8012e02:	f04f 30ff 	mov.w	r0, #4294967295
 8012e06:	b00d      	add	sp, #52	@ 0x34
 8012e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0c:	4642      	mov	r2, r8
 8012e0e:	464b      	mov	r3, r9
 8012e10:	4640      	mov	r0, r8
 8012e12:	4649      	mov	r1, r9
 8012e14:	f7ed feaa 	bl	8000b6c <__aeabi_dcmpun>
 8012e18:	b140      	cbz	r0, 8012e2c <_printf_float+0xe0>
 8012e1a:	464b      	mov	r3, r9
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	bfbc      	itt	lt
 8012e20:	232d      	movlt	r3, #45	@ 0x2d
 8012e22:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012e26:	4a7e      	ldr	r2, [pc, #504]	@ (8013020 <_printf_float+0x2d4>)
 8012e28:	4b7e      	ldr	r3, [pc, #504]	@ (8013024 <_printf_float+0x2d8>)
 8012e2a:	e7d4      	b.n	8012dd6 <_printf_float+0x8a>
 8012e2c:	6863      	ldr	r3, [r4, #4]
 8012e2e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012e32:	9206      	str	r2, [sp, #24]
 8012e34:	1c5a      	adds	r2, r3, #1
 8012e36:	d13b      	bne.n	8012eb0 <_printf_float+0x164>
 8012e38:	2306      	movs	r3, #6
 8012e3a:	6063      	str	r3, [r4, #4]
 8012e3c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8012e40:	2300      	movs	r3, #0
 8012e42:	6022      	str	r2, [r4, #0]
 8012e44:	9303      	str	r3, [sp, #12]
 8012e46:	ab0a      	add	r3, sp, #40	@ 0x28
 8012e48:	e9cd a301 	strd	sl, r3, [sp, #4]
 8012e4c:	ab09      	add	r3, sp, #36	@ 0x24
 8012e4e:	9300      	str	r3, [sp, #0]
 8012e50:	6861      	ldr	r1, [r4, #4]
 8012e52:	ec49 8b10 	vmov	d0, r8, r9
 8012e56:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012e5a:	4628      	mov	r0, r5
 8012e5c:	f7ff fed6 	bl	8012c0c <__cvt>
 8012e60:	9b06      	ldr	r3, [sp, #24]
 8012e62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012e64:	2b47      	cmp	r3, #71	@ 0x47
 8012e66:	4680      	mov	r8, r0
 8012e68:	d129      	bne.n	8012ebe <_printf_float+0x172>
 8012e6a:	1cc8      	adds	r0, r1, #3
 8012e6c:	db02      	blt.n	8012e74 <_printf_float+0x128>
 8012e6e:	6863      	ldr	r3, [r4, #4]
 8012e70:	4299      	cmp	r1, r3
 8012e72:	dd41      	ble.n	8012ef8 <_printf_float+0x1ac>
 8012e74:	f1aa 0a02 	sub.w	sl, sl, #2
 8012e78:	fa5f fa8a 	uxtb.w	sl, sl
 8012e7c:	3901      	subs	r1, #1
 8012e7e:	4652      	mov	r2, sl
 8012e80:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012e84:	9109      	str	r1, [sp, #36]	@ 0x24
 8012e86:	f7ff ff26 	bl	8012cd6 <__exponent>
 8012e8a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012e8c:	1813      	adds	r3, r2, r0
 8012e8e:	2a01      	cmp	r2, #1
 8012e90:	4681      	mov	r9, r0
 8012e92:	6123      	str	r3, [r4, #16]
 8012e94:	dc02      	bgt.n	8012e9c <_printf_float+0x150>
 8012e96:	6822      	ldr	r2, [r4, #0]
 8012e98:	07d2      	lsls	r2, r2, #31
 8012e9a:	d501      	bpl.n	8012ea0 <_printf_float+0x154>
 8012e9c:	3301      	adds	r3, #1
 8012e9e:	6123      	str	r3, [r4, #16]
 8012ea0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d0a2      	beq.n	8012dee <_printf_float+0xa2>
 8012ea8:	232d      	movs	r3, #45	@ 0x2d
 8012eaa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012eae:	e79e      	b.n	8012dee <_printf_float+0xa2>
 8012eb0:	9a06      	ldr	r2, [sp, #24]
 8012eb2:	2a47      	cmp	r2, #71	@ 0x47
 8012eb4:	d1c2      	bne.n	8012e3c <_printf_float+0xf0>
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d1c0      	bne.n	8012e3c <_printf_float+0xf0>
 8012eba:	2301      	movs	r3, #1
 8012ebc:	e7bd      	b.n	8012e3a <_printf_float+0xee>
 8012ebe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012ec2:	d9db      	bls.n	8012e7c <_printf_float+0x130>
 8012ec4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012ec8:	d118      	bne.n	8012efc <_printf_float+0x1b0>
 8012eca:	2900      	cmp	r1, #0
 8012ecc:	6863      	ldr	r3, [r4, #4]
 8012ece:	dd0b      	ble.n	8012ee8 <_printf_float+0x19c>
 8012ed0:	6121      	str	r1, [r4, #16]
 8012ed2:	b913      	cbnz	r3, 8012eda <_printf_float+0x18e>
 8012ed4:	6822      	ldr	r2, [r4, #0]
 8012ed6:	07d0      	lsls	r0, r2, #31
 8012ed8:	d502      	bpl.n	8012ee0 <_printf_float+0x194>
 8012eda:	3301      	adds	r3, #1
 8012edc:	440b      	add	r3, r1
 8012ede:	6123      	str	r3, [r4, #16]
 8012ee0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012ee2:	f04f 0900 	mov.w	r9, #0
 8012ee6:	e7db      	b.n	8012ea0 <_printf_float+0x154>
 8012ee8:	b913      	cbnz	r3, 8012ef0 <_printf_float+0x1a4>
 8012eea:	6822      	ldr	r2, [r4, #0]
 8012eec:	07d2      	lsls	r2, r2, #31
 8012eee:	d501      	bpl.n	8012ef4 <_printf_float+0x1a8>
 8012ef0:	3302      	adds	r3, #2
 8012ef2:	e7f4      	b.n	8012ede <_printf_float+0x192>
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	e7f2      	b.n	8012ede <_printf_float+0x192>
 8012ef8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8012efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012efe:	4299      	cmp	r1, r3
 8012f00:	db05      	blt.n	8012f0e <_printf_float+0x1c2>
 8012f02:	6823      	ldr	r3, [r4, #0]
 8012f04:	6121      	str	r1, [r4, #16]
 8012f06:	07d8      	lsls	r0, r3, #31
 8012f08:	d5ea      	bpl.n	8012ee0 <_printf_float+0x194>
 8012f0a:	1c4b      	adds	r3, r1, #1
 8012f0c:	e7e7      	b.n	8012ede <_printf_float+0x192>
 8012f0e:	2900      	cmp	r1, #0
 8012f10:	bfd4      	ite	le
 8012f12:	f1c1 0202 	rsble	r2, r1, #2
 8012f16:	2201      	movgt	r2, #1
 8012f18:	4413      	add	r3, r2
 8012f1a:	e7e0      	b.n	8012ede <_printf_float+0x192>
 8012f1c:	6823      	ldr	r3, [r4, #0]
 8012f1e:	055a      	lsls	r2, r3, #21
 8012f20:	d407      	bmi.n	8012f32 <_printf_float+0x1e6>
 8012f22:	6923      	ldr	r3, [r4, #16]
 8012f24:	4642      	mov	r2, r8
 8012f26:	4631      	mov	r1, r6
 8012f28:	4628      	mov	r0, r5
 8012f2a:	47b8      	blx	r7
 8012f2c:	3001      	adds	r0, #1
 8012f2e:	d12b      	bne.n	8012f88 <_printf_float+0x23c>
 8012f30:	e767      	b.n	8012e02 <_printf_float+0xb6>
 8012f32:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012f36:	f240 80dd 	bls.w	80130f4 <_printf_float+0x3a8>
 8012f3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012f3e:	2200      	movs	r2, #0
 8012f40:	2300      	movs	r3, #0
 8012f42:	f7ed fde1 	bl	8000b08 <__aeabi_dcmpeq>
 8012f46:	2800      	cmp	r0, #0
 8012f48:	d033      	beq.n	8012fb2 <_printf_float+0x266>
 8012f4a:	4a37      	ldr	r2, [pc, #220]	@ (8013028 <_printf_float+0x2dc>)
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	4631      	mov	r1, r6
 8012f50:	4628      	mov	r0, r5
 8012f52:	47b8      	blx	r7
 8012f54:	3001      	adds	r0, #1
 8012f56:	f43f af54 	beq.w	8012e02 <_printf_float+0xb6>
 8012f5a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012f5e:	4543      	cmp	r3, r8
 8012f60:	db02      	blt.n	8012f68 <_printf_float+0x21c>
 8012f62:	6823      	ldr	r3, [r4, #0]
 8012f64:	07d8      	lsls	r0, r3, #31
 8012f66:	d50f      	bpl.n	8012f88 <_printf_float+0x23c>
 8012f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f6c:	4631      	mov	r1, r6
 8012f6e:	4628      	mov	r0, r5
 8012f70:	47b8      	blx	r7
 8012f72:	3001      	adds	r0, #1
 8012f74:	f43f af45 	beq.w	8012e02 <_printf_float+0xb6>
 8012f78:	f04f 0900 	mov.w	r9, #0
 8012f7c:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f80:	f104 0a1a 	add.w	sl, r4, #26
 8012f84:	45c8      	cmp	r8, r9
 8012f86:	dc09      	bgt.n	8012f9c <_printf_float+0x250>
 8012f88:	6823      	ldr	r3, [r4, #0]
 8012f8a:	079b      	lsls	r3, r3, #30
 8012f8c:	f100 8103 	bmi.w	8013196 <_printf_float+0x44a>
 8012f90:	68e0      	ldr	r0, [r4, #12]
 8012f92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f94:	4298      	cmp	r0, r3
 8012f96:	bfb8      	it	lt
 8012f98:	4618      	movlt	r0, r3
 8012f9a:	e734      	b.n	8012e06 <_printf_float+0xba>
 8012f9c:	2301      	movs	r3, #1
 8012f9e:	4652      	mov	r2, sl
 8012fa0:	4631      	mov	r1, r6
 8012fa2:	4628      	mov	r0, r5
 8012fa4:	47b8      	blx	r7
 8012fa6:	3001      	adds	r0, #1
 8012fa8:	f43f af2b 	beq.w	8012e02 <_printf_float+0xb6>
 8012fac:	f109 0901 	add.w	r9, r9, #1
 8012fb0:	e7e8      	b.n	8012f84 <_printf_float+0x238>
 8012fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	dc39      	bgt.n	801302c <_printf_float+0x2e0>
 8012fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8013028 <_printf_float+0x2dc>)
 8012fba:	2301      	movs	r3, #1
 8012fbc:	4631      	mov	r1, r6
 8012fbe:	4628      	mov	r0, r5
 8012fc0:	47b8      	blx	r7
 8012fc2:	3001      	adds	r0, #1
 8012fc4:	f43f af1d 	beq.w	8012e02 <_printf_float+0xb6>
 8012fc8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012fcc:	ea59 0303 	orrs.w	r3, r9, r3
 8012fd0:	d102      	bne.n	8012fd8 <_printf_float+0x28c>
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	07d9      	lsls	r1, r3, #31
 8012fd6:	d5d7      	bpl.n	8012f88 <_printf_float+0x23c>
 8012fd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fdc:	4631      	mov	r1, r6
 8012fde:	4628      	mov	r0, r5
 8012fe0:	47b8      	blx	r7
 8012fe2:	3001      	adds	r0, #1
 8012fe4:	f43f af0d 	beq.w	8012e02 <_printf_float+0xb6>
 8012fe8:	f04f 0a00 	mov.w	sl, #0
 8012fec:	f104 0b1a 	add.w	fp, r4, #26
 8012ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ff2:	425b      	negs	r3, r3
 8012ff4:	4553      	cmp	r3, sl
 8012ff6:	dc01      	bgt.n	8012ffc <_printf_float+0x2b0>
 8012ff8:	464b      	mov	r3, r9
 8012ffa:	e793      	b.n	8012f24 <_printf_float+0x1d8>
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	465a      	mov	r2, fp
 8013000:	4631      	mov	r1, r6
 8013002:	4628      	mov	r0, r5
 8013004:	47b8      	blx	r7
 8013006:	3001      	adds	r0, #1
 8013008:	f43f aefb 	beq.w	8012e02 <_printf_float+0xb6>
 801300c:	f10a 0a01 	add.w	sl, sl, #1
 8013010:	e7ee      	b.n	8012ff0 <_printf_float+0x2a4>
 8013012:	bf00      	nop
 8013014:	7fefffff 	.word	0x7fefffff
 8013018:	08019f30 	.word	0x08019f30
 801301c:	08019f34 	.word	0x08019f34
 8013020:	08019f38 	.word	0x08019f38
 8013024:	08019f3c 	.word	0x08019f3c
 8013028:	0801a2d0 	.word	0x0801a2d0
 801302c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801302e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8013032:	4553      	cmp	r3, sl
 8013034:	bfa8      	it	ge
 8013036:	4653      	movge	r3, sl
 8013038:	2b00      	cmp	r3, #0
 801303a:	4699      	mov	r9, r3
 801303c:	dc36      	bgt.n	80130ac <_printf_float+0x360>
 801303e:	f04f 0b00 	mov.w	fp, #0
 8013042:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013046:	f104 021a 	add.w	r2, r4, #26
 801304a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801304c:	9306      	str	r3, [sp, #24]
 801304e:	eba3 0309 	sub.w	r3, r3, r9
 8013052:	455b      	cmp	r3, fp
 8013054:	dc31      	bgt.n	80130ba <_printf_float+0x36e>
 8013056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013058:	459a      	cmp	sl, r3
 801305a:	dc3a      	bgt.n	80130d2 <_printf_float+0x386>
 801305c:	6823      	ldr	r3, [r4, #0]
 801305e:	07da      	lsls	r2, r3, #31
 8013060:	d437      	bmi.n	80130d2 <_printf_float+0x386>
 8013062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013064:	ebaa 0903 	sub.w	r9, sl, r3
 8013068:	9b06      	ldr	r3, [sp, #24]
 801306a:	ebaa 0303 	sub.w	r3, sl, r3
 801306e:	4599      	cmp	r9, r3
 8013070:	bfa8      	it	ge
 8013072:	4699      	movge	r9, r3
 8013074:	f1b9 0f00 	cmp.w	r9, #0
 8013078:	dc33      	bgt.n	80130e2 <_printf_float+0x396>
 801307a:	f04f 0800 	mov.w	r8, #0
 801307e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013082:	f104 0b1a 	add.w	fp, r4, #26
 8013086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013088:	ebaa 0303 	sub.w	r3, sl, r3
 801308c:	eba3 0309 	sub.w	r3, r3, r9
 8013090:	4543      	cmp	r3, r8
 8013092:	f77f af79 	ble.w	8012f88 <_printf_float+0x23c>
 8013096:	2301      	movs	r3, #1
 8013098:	465a      	mov	r2, fp
 801309a:	4631      	mov	r1, r6
 801309c:	4628      	mov	r0, r5
 801309e:	47b8      	blx	r7
 80130a0:	3001      	adds	r0, #1
 80130a2:	f43f aeae 	beq.w	8012e02 <_printf_float+0xb6>
 80130a6:	f108 0801 	add.w	r8, r8, #1
 80130aa:	e7ec      	b.n	8013086 <_printf_float+0x33a>
 80130ac:	4642      	mov	r2, r8
 80130ae:	4631      	mov	r1, r6
 80130b0:	4628      	mov	r0, r5
 80130b2:	47b8      	blx	r7
 80130b4:	3001      	adds	r0, #1
 80130b6:	d1c2      	bne.n	801303e <_printf_float+0x2f2>
 80130b8:	e6a3      	b.n	8012e02 <_printf_float+0xb6>
 80130ba:	2301      	movs	r3, #1
 80130bc:	4631      	mov	r1, r6
 80130be:	4628      	mov	r0, r5
 80130c0:	9206      	str	r2, [sp, #24]
 80130c2:	47b8      	blx	r7
 80130c4:	3001      	adds	r0, #1
 80130c6:	f43f ae9c 	beq.w	8012e02 <_printf_float+0xb6>
 80130ca:	9a06      	ldr	r2, [sp, #24]
 80130cc:	f10b 0b01 	add.w	fp, fp, #1
 80130d0:	e7bb      	b.n	801304a <_printf_float+0x2fe>
 80130d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80130d6:	4631      	mov	r1, r6
 80130d8:	4628      	mov	r0, r5
 80130da:	47b8      	blx	r7
 80130dc:	3001      	adds	r0, #1
 80130de:	d1c0      	bne.n	8013062 <_printf_float+0x316>
 80130e0:	e68f      	b.n	8012e02 <_printf_float+0xb6>
 80130e2:	9a06      	ldr	r2, [sp, #24]
 80130e4:	464b      	mov	r3, r9
 80130e6:	4442      	add	r2, r8
 80130e8:	4631      	mov	r1, r6
 80130ea:	4628      	mov	r0, r5
 80130ec:	47b8      	blx	r7
 80130ee:	3001      	adds	r0, #1
 80130f0:	d1c3      	bne.n	801307a <_printf_float+0x32e>
 80130f2:	e686      	b.n	8012e02 <_printf_float+0xb6>
 80130f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80130f8:	f1ba 0f01 	cmp.w	sl, #1
 80130fc:	dc01      	bgt.n	8013102 <_printf_float+0x3b6>
 80130fe:	07db      	lsls	r3, r3, #31
 8013100:	d536      	bpl.n	8013170 <_printf_float+0x424>
 8013102:	2301      	movs	r3, #1
 8013104:	4642      	mov	r2, r8
 8013106:	4631      	mov	r1, r6
 8013108:	4628      	mov	r0, r5
 801310a:	47b8      	blx	r7
 801310c:	3001      	adds	r0, #1
 801310e:	f43f ae78 	beq.w	8012e02 <_printf_float+0xb6>
 8013112:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013116:	4631      	mov	r1, r6
 8013118:	4628      	mov	r0, r5
 801311a:	47b8      	blx	r7
 801311c:	3001      	adds	r0, #1
 801311e:	f43f ae70 	beq.w	8012e02 <_printf_float+0xb6>
 8013122:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8013126:	2200      	movs	r2, #0
 8013128:	2300      	movs	r3, #0
 801312a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801312e:	f7ed fceb 	bl	8000b08 <__aeabi_dcmpeq>
 8013132:	b9c0      	cbnz	r0, 8013166 <_printf_float+0x41a>
 8013134:	4653      	mov	r3, sl
 8013136:	f108 0201 	add.w	r2, r8, #1
 801313a:	4631      	mov	r1, r6
 801313c:	4628      	mov	r0, r5
 801313e:	47b8      	blx	r7
 8013140:	3001      	adds	r0, #1
 8013142:	d10c      	bne.n	801315e <_printf_float+0x412>
 8013144:	e65d      	b.n	8012e02 <_printf_float+0xb6>
 8013146:	2301      	movs	r3, #1
 8013148:	465a      	mov	r2, fp
 801314a:	4631      	mov	r1, r6
 801314c:	4628      	mov	r0, r5
 801314e:	47b8      	blx	r7
 8013150:	3001      	adds	r0, #1
 8013152:	f43f ae56 	beq.w	8012e02 <_printf_float+0xb6>
 8013156:	f108 0801 	add.w	r8, r8, #1
 801315a:	45d0      	cmp	r8, sl
 801315c:	dbf3      	blt.n	8013146 <_printf_float+0x3fa>
 801315e:	464b      	mov	r3, r9
 8013160:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8013164:	e6df      	b.n	8012f26 <_printf_float+0x1da>
 8013166:	f04f 0800 	mov.w	r8, #0
 801316a:	f104 0b1a 	add.w	fp, r4, #26
 801316e:	e7f4      	b.n	801315a <_printf_float+0x40e>
 8013170:	2301      	movs	r3, #1
 8013172:	4642      	mov	r2, r8
 8013174:	e7e1      	b.n	801313a <_printf_float+0x3ee>
 8013176:	2301      	movs	r3, #1
 8013178:	464a      	mov	r2, r9
 801317a:	4631      	mov	r1, r6
 801317c:	4628      	mov	r0, r5
 801317e:	47b8      	blx	r7
 8013180:	3001      	adds	r0, #1
 8013182:	f43f ae3e 	beq.w	8012e02 <_printf_float+0xb6>
 8013186:	f108 0801 	add.w	r8, r8, #1
 801318a:	68e3      	ldr	r3, [r4, #12]
 801318c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801318e:	1a5b      	subs	r3, r3, r1
 8013190:	4543      	cmp	r3, r8
 8013192:	dcf0      	bgt.n	8013176 <_printf_float+0x42a>
 8013194:	e6fc      	b.n	8012f90 <_printf_float+0x244>
 8013196:	f04f 0800 	mov.w	r8, #0
 801319a:	f104 0919 	add.w	r9, r4, #25
 801319e:	e7f4      	b.n	801318a <_printf_float+0x43e>

080131a0 <_printf_common>:
 80131a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131a4:	4616      	mov	r6, r2
 80131a6:	4698      	mov	r8, r3
 80131a8:	688a      	ldr	r2, [r1, #8]
 80131aa:	690b      	ldr	r3, [r1, #16]
 80131ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80131b0:	4293      	cmp	r3, r2
 80131b2:	bfb8      	it	lt
 80131b4:	4613      	movlt	r3, r2
 80131b6:	6033      	str	r3, [r6, #0]
 80131b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80131bc:	4607      	mov	r7, r0
 80131be:	460c      	mov	r4, r1
 80131c0:	b10a      	cbz	r2, 80131c6 <_printf_common+0x26>
 80131c2:	3301      	adds	r3, #1
 80131c4:	6033      	str	r3, [r6, #0]
 80131c6:	6823      	ldr	r3, [r4, #0]
 80131c8:	0699      	lsls	r1, r3, #26
 80131ca:	bf42      	ittt	mi
 80131cc:	6833      	ldrmi	r3, [r6, #0]
 80131ce:	3302      	addmi	r3, #2
 80131d0:	6033      	strmi	r3, [r6, #0]
 80131d2:	6825      	ldr	r5, [r4, #0]
 80131d4:	f015 0506 	ands.w	r5, r5, #6
 80131d8:	d106      	bne.n	80131e8 <_printf_common+0x48>
 80131da:	f104 0a19 	add.w	sl, r4, #25
 80131de:	68e3      	ldr	r3, [r4, #12]
 80131e0:	6832      	ldr	r2, [r6, #0]
 80131e2:	1a9b      	subs	r3, r3, r2
 80131e4:	42ab      	cmp	r3, r5
 80131e6:	dc26      	bgt.n	8013236 <_printf_common+0x96>
 80131e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80131ec:	6822      	ldr	r2, [r4, #0]
 80131ee:	3b00      	subs	r3, #0
 80131f0:	bf18      	it	ne
 80131f2:	2301      	movne	r3, #1
 80131f4:	0692      	lsls	r2, r2, #26
 80131f6:	d42b      	bmi.n	8013250 <_printf_common+0xb0>
 80131f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80131fc:	4641      	mov	r1, r8
 80131fe:	4638      	mov	r0, r7
 8013200:	47c8      	blx	r9
 8013202:	3001      	adds	r0, #1
 8013204:	d01e      	beq.n	8013244 <_printf_common+0xa4>
 8013206:	6823      	ldr	r3, [r4, #0]
 8013208:	6922      	ldr	r2, [r4, #16]
 801320a:	f003 0306 	and.w	r3, r3, #6
 801320e:	2b04      	cmp	r3, #4
 8013210:	bf02      	ittt	eq
 8013212:	68e5      	ldreq	r5, [r4, #12]
 8013214:	6833      	ldreq	r3, [r6, #0]
 8013216:	1aed      	subeq	r5, r5, r3
 8013218:	68a3      	ldr	r3, [r4, #8]
 801321a:	bf0c      	ite	eq
 801321c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013220:	2500      	movne	r5, #0
 8013222:	4293      	cmp	r3, r2
 8013224:	bfc4      	itt	gt
 8013226:	1a9b      	subgt	r3, r3, r2
 8013228:	18ed      	addgt	r5, r5, r3
 801322a:	2600      	movs	r6, #0
 801322c:	341a      	adds	r4, #26
 801322e:	42b5      	cmp	r5, r6
 8013230:	d11a      	bne.n	8013268 <_printf_common+0xc8>
 8013232:	2000      	movs	r0, #0
 8013234:	e008      	b.n	8013248 <_printf_common+0xa8>
 8013236:	2301      	movs	r3, #1
 8013238:	4652      	mov	r2, sl
 801323a:	4641      	mov	r1, r8
 801323c:	4638      	mov	r0, r7
 801323e:	47c8      	blx	r9
 8013240:	3001      	adds	r0, #1
 8013242:	d103      	bne.n	801324c <_printf_common+0xac>
 8013244:	f04f 30ff 	mov.w	r0, #4294967295
 8013248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801324c:	3501      	adds	r5, #1
 801324e:	e7c6      	b.n	80131de <_printf_common+0x3e>
 8013250:	18e1      	adds	r1, r4, r3
 8013252:	1c5a      	adds	r2, r3, #1
 8013254:	2030      	movs	r0, #48	@ 0x30
 8013256:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801325a:	4422      	add	r2, r4
 801325c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013260:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013264:	3302      	adds	r3, #2
 8013266:	e7c7      	b.n	80131f8 <_printf_common+0x58>
 8013268:	2301      	movs	r3, #1
 801326a:	4622      	mov	r2, r4
 801326c:	4641      	mov	r1, r8
 801326e:	4638      	mov	r0, r7
 8013270:	47c8      	blx	r9
 8013272:	3001      	adds	r0, #1
 8013274:	d0e6      	beq.n	8013244 <_printf_common+0xa4>
 8013276:	3601      	adds	r6, #1
 8013278:	e7d9      	b.n	801322e <_printf_common+0x8e>
	...

0801327c <_printf_i>:
 801327c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013280:	7e0f      	ldrb	r7, [r1, #24]
 8013282:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013284:	2f78      	cmp	r7, #120	@ 0x78
 8013286:	4691      	mov	r9, r2
 8013288:	4680      	mov	r8, r0
 801328a:	460c      	mov	r4, r1
 801328c:	469a      	mov	sl, r3
 801328e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013292:	d807      	bhi.n	80132a4 <_printf_i+0x28>
 8013294:	2f62      	cmp	r7, #98	@ 0x62
 8013296:	d80a      	bhi.n	80132ae <_printf_i+0x32>
 8013298:	2f00      	cmp	r7, #0
 801329a:	f000 80d2 	beq.w	8013442 <_printf_i+0x1c6>
 801329e:	2f58      	cmp	r7, #88	@ 0x58
 80132a0:	f000 80b9 	beq.w	8013416 <_printf_i+0x19a>
 80132a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80132a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80132ac:	e03a      	b.n	8013324 <_printf_i+0xa8>
 80132ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80132b2:	2b15      	cmp	r3, #21
 80132b4:	d8f6      	bhi.n	80132a4 <_printf_i+0x28>
 80132b6:	a101      	add	r1, pc, #4	@ (adr r1, 80132bc <_printf_i+0x40>)
 80132b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80132bc:	08013315 	.word	0x08013315
 80132c0:	08013329 	.word	0x08013329
 80132c4:	080132a5 	.word	0x080132a5
 80132c8:	080132a5 	.word	0x080132a5
 80132cc:	080132a5 	.word	0x080132a5
 80132d0:	080132a5 	.word	0x080132a5
 80132d4:	08013329 	.word	0x08013329
 80132d8:	080132a5 	.word	0x080132a5
 80132dc:	080132a5 	.word	0x080132a5
 80132e0:	080132a5 	.word	0x080132a5
 80132e4:	080132a5 	.word	0x080132a5
 80132e8:	08013429 	.word	0x08013429
 80132ec:	08013353 	.word	0x08013353
 80132f0:	080133e3 	.word	0x080133e3
 80132f4:	080132a5 	.word	0x080132a5
 80132f8:	080132a5 	.word	0x080132a5
 80132fc:	0801344b 	.word	0x0801344b
 8013300:	080132a5 	.word	0x080132a5
 8013304:	08013353 	.word	0x08013353
 8013308:	080132a5 	.word	0x080132a5
 801330c:	080132a5 	.word	0x080132a5
 8013310:	080133eb 	.word	0x080133eb
 8013314:	6833      	ldr	r3, [r6, #0]
 8013316:	1d1a      	adds	r2, r3, #4
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	6032      	str	r2, [r6, #0]
 801331c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013320:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013324:	2301      	movs	r3, #1
 8013326:	e09d      	b.n	8013464 <_printf_i+0x1e8>
 8013328:	6833      	ldr	r3, [r6, #0]
 801332a:	6820      	ldr	r0, [r4, #0]
 801332c:	1d19      	adds	r1, r3, #4
 801332e:	6031      	str	r1, [r6, #0]
 8013330:	0606      	lsls	r6, r0, #24
 8013332:	d501      	bpl.n	8013338 <_printf_i+0xbc>
 8013334:	681d      	ldr	r5, [r3, #0]
 8013336:	e003      	b.n	8013340 <_printf_i+0xc4>
 8013338:	0645      	lsls	r5, r0, #25
 801333a:	d5fb      	bpl.n	8013334 <_printf_i+0xb8>
 801333c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013340:	2d00      	cmp	r5, #0
 8013342:	da03      	bge.n	801334c <_printf_i+0xd0>
 8013344:	232d      	movs	r3, #45	@ 0x2d
 8013346:	426d      	negs	r5, r5
 8013348:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801334c:	4859      	ldr	r0, [pc, #356]	@ (80134b4 <_printf_i+0x238>)
 801334e:	230a      	movs	r3, #10
 8013350:	e011      	b.n	8013376 <_printf_i+0xfa>
 8013352:	6821      	ldr	r1, [r4, #0]
 8013354:	6833      	ldr	r3, [r6, #0]
 8013356:	0608      	lsls	r0, r1, #24
 8013358:	f853 5b04 	ldr.w	r5, [r3], #4
 801335c:	d402      	bmi.n	8013364 <_printf_i+0xe8>
 801335e:	0649      	lsls	r1, r1, #25
 8013360:	bf48      	it	mi
 8013362:	b2ad      	uxthmi	r5, r5
 8013364:	2f6f      	cmp	r7, #111	@ 0x6f
 8013366:	4853      	ldr	r0, [pc, #332]	@ (80134b4 <_printf_i+0x238>)
 8013368:	6033      	str	r3, [r6, #0]
 801336a:	bf14      	ite	ne
 801336c:	230a      	movne	r3, #10
 801336e:	2308      	moveq	r3, #8
 8013370:	2100      	movs	r1, #0
 8013372:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013376:	6866      	ldr	r6, [r4, #4]
 8013378:	60a6      	str	r6, [r4, #8]
 801337a:	2e00      	cmp	r6, #0
 801337c:	bfa2      	ittt	ge
 801337e:	6821      	ldrge	r1, [r4, #0]
 8013380:	f021 0104 	bicge.w	r1, r1, #4
 8013384:	6021      	strge	r1, [r4, #0]
 8013386:	b90d      	cbnz	r5, 801338c <_printf_i+0x110>
 8013388:	2e00      	cmp	r6, #0
 801338a:	d04b      	beq.n	8013424 <_printf_i+0x1a8>
 801338c:	4616      	mov	r6, r2
 801338e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013392:	fb03 5711 	mls	r7, r3, r1, r5
 8013396:	5dc7      	ldrb	r7, [r0, r7]
 8013398:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801339c:	462f      	mov	r7, r5
 801339e:	42bb      	cmp	r3, r7
 80133a0:	460d      	mov	r5, r1
 80133a2:	d9f4      	bls.n	801338e <_printf_i+0x112>
 80133a4:	2b08      	cmp	r3, #8
 80133a6:	d10b      	bne.n	80133c0 <_printf_i+0x144>
 80133a8:	6823      	ldr	r3, [r4, #0]
 80133aa:	07df      	lsls	r7, r3, #31
 80133ac:	d508      	bpl.n	80133c0 <_printf_i+0x144>
 80133ae:	6923      	ldr	r3, [r4, #16]
 80133b0:	6861      	ldr	r1, [r4, #4]
 80133b2:	4299      	cmp	r1, r3
 80133b4:	bfde      	ittt	le
 80133b6:	2330      	movle	r3, #48	@ 0x30
 80133b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80133bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80133c0:	1b92      	subs	r2, r2, r6
 80133c2:	6122      	str	r2, [r4, #16]
 80133c4:	f8cd a000 	str.w	sl, [sp]
 80133c8:	464b      	mov	r3, r9
 80133ca:	aa03      	add	r2, sp, #12
 80133cc:	4621      	mov	r1, r4
 80133ce:	4640      	mov	r0, r8
 80133d0:	f7ff fee6 	bl	80131a0 <_printf_common>
 80133d4:	3001      	adds	r0, #1
 80133d6:	d14a      	bne.n	801346e <_printf_i+0x1f2>
 80133d8:	f04f 30ff 	mov.w	r0, #4294967295
 80133dc:	b004      	add	sp, #16
 80133de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133e2:	6823      	ldr	r3, [r4, #0]
 80133e4:	f043 0320 	orr.w	r3, r3, #32
 80133e8:	6023      	str	r3, [r4, #0]
 80133ea:	4833      	ldr	r0, [pc, #204]	@ (80134b8 <_printf_i+0x23c>)
 80133ec:	2778      	movs	r7, #120	@ 0x78
 80133ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80133f2:	6823      	ldr	r3, [r4, #0]
 80133f4:	6831      	ldr	r1, [r6, #0]
 80133f6:	061f      	lsls	r7, r3, #24
 80133f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80133fc:	d402      	bmi.n	8013404 <_printf_i+0x188>
 80133fe:	065f      	lsls	r7, r3, #25
 8013400:	bf48      	it	mi
 8013402:	b2ad      	uxthmi	r5, r5
 8013404:	6031      	str	r1, [r6, #0]
 8013406:	07d9      	lsls	r1, r3, #31
 8013408:	bf44      	itt	mi
 801340a:	f043 0320 	orrmi.w	r3, r3, #32
 801340e:	6023      	strmi	r3, [r4, #0]
 8013410:	b11d      	cbz	r5, 801341a <_printf_i+0x19e>
 8013412:	2310      	movs	r3, #16
 8013414:	e7ac      	b.n	8013370 <_printf_i+0xf4>
 8013416:	4827      	ldr	r0, [pc, #156]	@ (80134b4 <_printf_i+0x238>)
 8013418:	e7e9      	b.n	80133ee <_printf_i+0x172>
 801341a:	6823      	ldr	r3, [r4, #0]
 801341c:	f023 0320 	bic.w	r3, r3, #32
 8013420:	6023      	str	r3, [r4, #0]
 8013422:	e7f6      	b.n	8013412 <_printf_i+0x196>
 8013424:	4616      	mov	r6, r2
 8013426:	e7bd      	b.n	80133a4 <_printf_i+0x128>
 8013428:	6833      	ldr	r3, [r6, #0]
 801342a:	6825      	ldr	r5, [r4, #0]
 801342c:	6961      	ldr	r1, [r4, #20]
 801342e:	1d18      	adds	r0, r3, #4
 8013430:	6030      	str	r0, [r6, #0]
 8013432:	062e      	lsls	r6, r5, #24
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	d501      	bpl.n	801343c <_printf_i+0x1c0>
 8013438:	6019      	str	r1, [r3, #0]
 801343a:	e002      	b.n	8013442 <_printf_i+0x1c6>
 801343c:	0668      	lsls	r0, r5, #25
 801343e:	d5fb      	bpl.n	8013438 <_printf_i+0x1bc>
 8013440:	8019      	strh	r1, [r3, #0]
 8013442:	2300      	movs	r3, #0
 8013444:	6123      	str	r3, [r4, #16]
 8013446:	4616      	mov	r6, r2
 8013448:	e7bc      	b.n	80133c4 <_printf_i+0x148>
 801344a:	6833      	ldr	r3, [r6, #0]
 801344c:	1d1a      	adds	r2, r3, #4
 801344e:	6032      	str	r2, [r6, #0]
 8013450:	681e      	ldr	r6, [r3, #0]
 8013452:	6862      	ldr	r2, [r4, #4]
 8013454:	2100      	movs	r1, #0
 8013456:	4630      	mov	r0, r6
 8013458:	f7ec feda 	bl	8000210 <memchr>
 801345c:	b108      	cbz	r0, 8013462 <_printf_i+0x1e6>
 801345e:	1b80      	subs	r0, r0, r6
 8013460:	6060      	str	r0, [r4, #4]
 8013462:	6863      	ldr	r3, [r4, #4]
 8013464:	6123      	str	r3, [r4, #16]
 8013466:	2300      	movs	r3, #0
 8013468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801346c:	e7aa      	b.n	80133c4 <_printf_i+0x148>
 801346e:	6923      	ldr	r3, [r4, #16]
 8013470:	4632      	mov	r2, r6
 8013472:	4649      	mov	r1, r9
 8013474:	4640      	mov	r0, r8
 8013476:	47d0      	blx	sl
 8013478:	3001      	adds	r0, #1
 801347a:	d0ad      	beq.n	80133d8 <_printf_i+0x15c>
 801347c:	6823      	ldr	r3, [r4, #0]
 801347e:	079b      	lsls	r3, r3, #30
 8013480:	d413      	bmi.n	80134aa <_printf_i+0x22e>
 8013482:	68e0      	ldr	r0, [r4, #12]
 8013484:	9b03      	ldr	r3, [sp, #12]
 8013486:	4298      	cmp	r0, r3
 8013488:	bfb8      	it	lt
 801348a:	4618      	movlt	r0, r3
 801348c:	e7a6      	b.n	80133dc <_printf_i+0x160>
 801348e:	2301      	movs	r3, #1
 8013490:	4632      	mov	r2, r6
 8013492:	4649      	mov	r1, r9
 8013494:	4640      	mov	r0, r8
 8013496:	47d0      	blx	sl
 8013498:	3001      	adds	r0, #1
 801349a:	d09d      	beq.n	80133d8 <_printf_i+0x15c>
 801349c:	3501      	adds	r5, #1
 801349e:	68e3      	ldr	r3, [r4, #12]
 80134a0:	9903      	ldr	r1, [sp, #12]
 80134a2:	1a5b      	subs	r3, r3, r1
 80134a4:	42ab      	cmp	r3, r5
 80134a6:	dcf2      	bgt.n	801348e <_printf_i+0x212>
 80134a8:	e7eb      	b.n	8013482 <_printf_i+0x206>
 80134aa:	2500      	movs	r5, #0
 80134ac:	f104 0619 	add.w	r6, r4, #25
 80134b0:	e7f5      	b.n	801349e <_printf_i+0x222>
 80134b2:	bf00      	nop
 80134b4:	08019f40 	.word	0x08019f40
 80134b8:	08019f51 	.word	0x08019f51

080134bc <_scanf_float>:
 80134bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c0:	b087      	sub	sp, #28
 80134c2:	4617      	mov	r7, r2
 80134c4:	9303      	str	r3, [sp, #12]
 80134c6:	688b      	ldr	r3, [r1, #8]
 80134c8:	1e5a      	subs	r2, r3, #1
 80134ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80134ce:	bf81      	itttt	hi
 80134d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80134d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80134d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80134dc:	608b      	strhi	r3, [r1, #8]
 80134de:	680b      	ldr	r3, [r1, #0]
 80134e0:	460a      	mov	r2, r1
 80134e2:	f04f 0500 	mov.w	r5, #0
 80134e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80134ea:	f842 3b1c 	str.w	r3, [r2], #28
 80134ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80134f2:	4680      	mov	r8, r0
 80134f4:	460c      	mov	r4, r1
 80134f6:	bf98      	it	ls
 80134f8:	f04f 0b00 	movls.w	fp, #0
 80134fc:	9201      	str	r2, [sp, #4]
 80134fe:	4616      	mov	r6, r2
 8013500:	46aa      	mov	sl, r5
 8013502:	46a9      	mov	r9, r5
 8013504:	9502      	str	r5, [sp, #8]
 8013506:	68a2      	ldr	r2, [r4, #8]
 8013508:	b152      	cbz	r2, 8013520 <_scanf_float+0x64>
 801350a:	683b      	ldr	r3, [r7, #0]
 801350c:	781b      	ldrb	r3, [r3, #0]
 801350e:	2b4e      	cmp	r3, #78	@ 0x4e
 8013510:	d864      	bhi.n	80135dc <_scanf_float+0x120>
 8013512:	2b40      	cmp	r3, #64	@ 0x40
 8013514:	d83c      	bhi.n	8013590 <_scanf_float+0xd4>
 8013516:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801351a:	b2c8      	uxtb	r0, r1
 801351c:	280e      	cmp	r0, #14
 801351e:	d93a      	bls.n	8013596 <_scanf_float+0xda>
 8013520:	f1b9 0f00 	cmp.w	r9, #0
 8013524:	d003      	beq.n	801352e <_scanf_float+0x72>
 8013526:	6823      	ldr	r3, [r4, #0]
 8013528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801352c:	6023      	str	r3, [r4, #0]
 801352e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013532:	f1ba 0f01 	cmp.w	sl, #1
 8013536:	f200 8117 	bhi.w	8013768 <_scanf_float+0x2ac>
 801353a:	9b01      	ldr	r3, [sp, #4]
 801353c:	429e      	cmp	r6, r3
 801353e:	f200 8108 	bhi.w	8013752 <_scanf_float+0x296>
 8013542:	2001      	movs	r0, #1
 8013544:	b007      	add	sp, #28
 8013546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801354a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801354e:	2a0d      	cmp	r2, #13
 8013550:	d8e6      	bhi.n	8013520 <_scanf_float+0x64>
 8013552:	a101      	add	r1, pc, #4	@ (adr r1, 8013558 <_scanf_float+0x9c>)
 8013554:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013558:	0801369f 	.word	0x0801369f
 801355c:	08013521 	.word	0x08013521
 8013560:	08013521 	.word	0x08013521
 8013564:	08013521 	.word	0x08013521
 8013568:	080136ff 	.word	0x080136ff
 801356c:	080136d7 	.word	0x080136d7
 8013570:	08013521 	.word	0x08013521
 8013574:	08013521 	.word	0x08013521
 8013578:	080136ad 	.word	0x080136ad
 801357c:	08013521 	.word	0x08013521
 8013580:	08013521 	.word	0x08013521
 8013584:	08013521 	.word	0x08013521
 8013588:	08013521 	.word	0x08013521
 801358c:	08013665 	.word	0x08013665
 8013590:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8013594:	e7db      	b.n	801354e <_scanf_float+0x92>
 8013596:	290e      	cmp	r1, #14
 8013598:	d8c2      	bhi.n	8013520 <_scanf_float+0x64>
 801359a:	a001      	add	r0, pc, #4	@ (adr r0, 80135a0 <_scanf_float+0xe4>)
 801359c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80135a0:	08013655 	.word	0x08013655
 80135a4:	08013521 	.word	0x08013521
 80135a8:	08013655 	.word	0x08013655
 80135ac:	080136eb 	.word	0x080136eb
 80135b0:	08013521 	.word	0x08013521
 80135b4:	080135fd 	.word	0x080135fd
 80135b8:	0801363b 	.word	0x0801363b
 80135bc:	0801363b 	.word	0x0801363b
 80135c0:	0801363b 	.word	0x0801363b
 80135c4:	0801363b 	.word	0x0801363b
 80135c8:	0801363b 	.word	0x0801363b
 80135cc:	0801363b 	.word	0x0801363b
 80135d0:	0801363b 	.word	0x0801363b
 80135d4:	0801363b 	.word	0x0801363b
 80135d8:	0801363b 	.word	0x0801363b
 80135dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80135de:	d809      	bhi.n	80135f4 <_scanf_float+0x138>
 80135e0:	2b60      	cmp	r3, #96	@ 0x60
 80135e2:	d8b2      	bhi.n	801354a <_scanf_float+0x8e>
 80135e4:	2b54      	cmp	r3, #84	@ 0x54
 80135e6:	d07b      	beq.n	80136e0 <_scanf_float+0x224>
 80135e8:	2b59      	cmp	r3, #89	@ 0x59
 80135ea:	d199      	bne.n	8013520 <_scanf_float+0x64>
 80135ec:	2d07      	cmp	r5, #7
 80135ee:	d197      	bne.n	8013520 <_scanf_float+0x64>
 80135f0:	2508      	movs	r5, #8
 80135f2:	e02c      	b.n	801364e <_scanf_float+0x192>
 80135f4:	2b74      	cmp	r3, #116	@ 0x74
 80135f6:	d073      	beq.n	80136e0 <_scanf_float+0x224>
 80135f8:	2b79      	cmp	r3, #121	@ 0x79
 80135fa:	e7f6      	b.n	80135ea <_scanf_float+0x12e>
 80135fc:	6821      	ldr	r1, [r4, #0]
 80135fe:	05c8      	lsls	r0, r1, #23
 8013600:	d51b      	bpl.n	801363a <_scanf_float+0x17e>
 8013602:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8013606:	6021      	str	r1, [r4, #0]
 8013608:	f109 0901 	add.w	r9, r9, #1
 801360c:	f1bb 0f00 	cmp.w	fp, #0
 8013610:	d003      	beq.n	801361a <_scanf_float+0x15e>
 8013612:	3201      	adds	r2, #1
 8013614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013618:	60a2      	str	r2, [r4, #8]
 801361a:	68a3      	ldr	r3, [r4, #8]
 801361c:	3b01      	subs	r3, #1
 801361e:	60a3      	str	r3, [r4, #8]
 8013620:	6923      	ldr	r3, [r4, #16]
 8013622:	3301      	adds	r3, #1
 8013624:	6123      	str	r3, [r4, #16]
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	3b01      	subs	r3, #1
 801362a:	2b00      	cmp	r3, #0
 801362c:	607b      	str	r3, [r7, #4]
 801362e:	f340 8087 	ble.w	8013740 <_scanf_float+0x284>
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	3301      	adds	r3, #1
 8013636:	603b      	str	r3, [r7, #0]
 8013638:	e765      	b.n	8013506 <_scanf_float+0x4a>
 801363a:	eb1a 0105 	adds.w	r1, sl, r5
 801363e:	f47f af6f 	bne.w	8013520 <_scanf_float+0x64>
 8013642:	6822      	ldr	r2, [r4, #0]
 8013644:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8013648:	6022      	str	r2, [r4, #0]
 801364a:	460d      	mov	r5, r1
 801364c:	468a      	mov	sl, r1
 801364e:	f806 3b01 	strb.w	r3, [r6], #1
 8013652:	e7e2      	b.n	801361a <_scanf_float+0x15e>
 8013654:	6822      	ldr	r2, [r4, #0]
 8013656:	0610      	lsls	r0, r2, #24
 8013658:	f57f af62 	bpl.w	8013520 <_scanf_float+0x64>
 801365c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013660:	6022      	str	r2, [r4, #0]
 8013662:	e7f4      	b.n	801364e <_scanf_float+0x192>
 8013664:	f1ba 0f00 	cmp.w	sl, #0
 8013668:	d10e      	bne.n	8013688 <_scanf_float+0x1cc>
 801366a:	f1b9 0f00 	cmp.w	r9, #0
 801366e:	d10e      	bne.n	801368e <_scanf_float+0x1d2>
 8013670:	6822      	ldr	r2, [r4, #0]
 8013672:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8013676:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801367a:	d108      	bne.n	801368e <_scanf_float+0x1d2>
 801367c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013680:	6022      	str	r2, [r4, #0]
 8013682:	f04f 0a01 	mov.w	sl, #1
 8013686:	e7e2      	b.n	801364e <_scanf_float+0x192>
 8013688:	f1ba 0f02 	cmp.w	sl, #2
 801368c:	d055      	beq.n	801373a <_scanf_float+0x27e>
 801368e:	2d01      	cmp	r5, #1
 8013690:	d002      	beq.n	8013698 <_scanf_float+0x1dc>
 8013692:	2d04      	cmp	r5, #4
 8013694:	f47f af44 	bne.w	8013520 <_scanf_float+0x64>
 8013698:	3501      	adds	r5, #1
 801369a:	b2ed      	uxtb	r5, r5
 801369c:	e7d7      	b.n	801364e <_scanf_float+0x192>
 801369e:	f1ba 0f01 	cmp.w	sl, #1
 80136a2:	f47f af3d 	bne.w	8013520 <_scanf_float+0x64>
 80136a6:	f04f 0a02 	mov.w	sl, #2
 80136aa:	e7d0      	b.n	801364e <_scanf_float+0x192>
 80136ac:	b97d      	cbnz	r5, 80136ce <_scanf_float+0x212>
 80136ae:	f1b9 0f00 	cmp.w	r9, #0
 80136b2:	f47f af38 	bne.w	8013526 <_scanf_float+0x6a>
 80136b6:	6822      	ldr	r2, [r4, #0]
 80136b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80136bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80136c0:	f040 8108 	bne.w	80138d4 <_scanf_float+0x418>
 80136c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80136c8:	6022      	str	r2, [r4, #0]
 80136ca:	2501      	movs	r5, #1
 80136cc:	e7bf      	b.n	801364e <_scanf_float+0x192>
 80136ce:	2d03      	cmp	r5, #3
 80136d0:	d0e2      	beq.n	8013698 <_scanf_float+0x1dc>
 80136d2:	2d05      	cmp	r5, #5
 80136d4:	e7de      	b.n	8013694 <_scanf_float+0x1d8>
 80136d6:	2d02      	cmp	r5, #2
 80136d8:	f47f af22 	bne.w	8013520 <_scanf_float+0x64>
 80136dc:	2503      	movs	r5, #3
 80136de:	e7b6      	b.n	801364e <_scanf_float+0x192>
 80136e0:	2d06      	cmp	r5, #6
 80136e2:	f47f af1d 	bne.w	8013520 <_scanf_float+0x64>
 80136e6:	2507      	movs	r5, #7
 80136e8:	e7b1      	b.n	801364e <_scanf_float+0x192>
 80136ea:	6822      	ldr	r2, [r4, #0]
 80136ec:	0591      	lsls	r1, r2, #22
 80136ee:	f57f af17 	bpl.w	8013520 <_scanf_float+0x64>
 80136f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80136f6:	6022      	str	r2, [r4, #0]
 80136f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80136fc:	e7a7      	b.n	801364e <_scanf_float+0x192>
 80136fe:	6822      	ldr	r2, [r4, #0]
 8013700:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8013704:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8013708:	d006      	beq.n	8013718 <_scanf_float+0x25c>
 801370a:	0550      	lsls	r0, r2, #21
 801370c:	f57f af08 	bpl.w	8013520 <_scanf_float+0x64>
 8013710:	f1b9 0f00 	cmp.w	r9, #0
 8013714:	f000 80de 	beq.w	80138d4 <_scanf_float+0x418>
 8013718:	0591      	lsls	r1, r2, #22
 801371a:	bf58      	it	pl
 801371c:	9902      	ldrpl	r1, [sp, #8]
 801371e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8013722:	bf58      	it	pl
 8013724:	eba9 0101 	subpl.w	r1, r9, r1
 8013728:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801372c:	bf58      	it	pl
 801372e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013732:	6022      	str	r2, [r4, #0]
 8013734:	f04f 0900 	mov.w	r9, #0
 8013738:	e789      	b.n	801364e <_scanf_float+0x192>
 801373a:	f04f 0a03 	mov.w	sl, #3
 801373e:	e786      	b.n	801364e <_scanf_float+0x192>
 8013740:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8013744:	4639      	mov	r1, r7
 8013746:	4640      	mov	r0, r8
 8013748:	4798      	blx	r3
 801374a:	2800      	cmp	r0, #0
 801374c:	f43f aedb 	beq.w	8013506 <_scanf_float+0x4a>
 8013750:	e6e6      	b.n	8013520 <_scanf_float+0x64>
 8013752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801375a:	463a      	mov	r2, r7
 801375c:	4640      	mov	r0, r8
 801375e:	4798      	blx	r3
 8013760:	6923      	ldr	r3, [r4, #16]
 8013762:	3b01      	subs	r3, #1
 8013764:	6123      	str	r3, [r4, #16]
 8013766:	e6e8      	b.n	801353a <_scanf_float+0x7e>
 8013768:	1e6b      	subs	r3, r5, #1
 801376a:	2b06      	cmp	r3, #6
 801376c:	d824      	bhi.n	80137b8 <_scanf_float+0x2fc>
 801376e:	2d02      	cmp	r5, #2
 8013770:	d836      	bhi.n	80137e0 <_scanf_float+0x324>
 8013772:	9b01      	ldr	r3, [sp, #4]
 8013774:	429e      	cmp	r6, r3
 8013776:	f67f aee4 	bls.w	8013542 <_scanf_float+0x86>
 801377a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801377e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013782:	463a      	mov	r2, r7
 8013784:	4640      	mov	r0, r8
 8013786:	4798      	blx	r3
 8013788:	6923      	ldr	r3, [r4, #16]
 801378a:	3b01      	subs	r3, #1
 801378c:	6123      	str	r3, [r4, #16]
 801378e:	e7f0      	b.n	8013772 <_scanf_float+0x2b6>
 8013790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013794:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8013798:	463a      	mov	r2, r7
 801379a:	4640      	mov	r0, r8
 801379c:	4798      	blx	r3
 801379e:	6923      	ldr	r3, [r4, #16]
 80137a0:	3b01      	subs	r3, #1
 80137a2:	6123      	str	r3, [r4, #16]
 80137a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80137a8:	fa5f fa8a 	uxtb.w	sl, sl
 80137ac:	f1ba 0f02 	cmp.w	sl, #2
 80137b0:	d1ee      	bne.n	8013790 <_scanf_float+0x2d4>
 80137b2:	3d03      	subs	r5, #3
 80137b4:	b2ed      	uxtb	r5, r5
 80137b6:	1b76      	subs	r6, r6, r5
 80137b8:	6823      	ldr	r3, [r4, #0]
 80137ba:	05da      	lsls	r2, r3, #23
 80137bc:	d530      	bpl.n	8013820 <_scanf_float+0x364>
 80137be:	055b      	lsls	r3, r3, #21
 80137c0:	d511      	bpl.n	80137e6 <_scanf_float+0x32a>
 80137c2:	9b01      	ldr	r3, [sp, #4]
 80137c4:	429e      	cmp	r6, r3
 80137c6:	f67f aebc 	bls.w	8013542 <_scanf_float+0x86>
 80137ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80137ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80137d2:	463a      	mov	r2, r7
 80137d4:	4640      	mov	r0, r8
 80137d6:	4798      	blx	r3
 80137d8:	6923      	ldr	r3, [r4, #16]
 80137da:	3b01      	subs	r3, #1
 80137dc:	6123      	str	r3, [r4, #16]
 80137de:	e7f0      	b.n	80137c2 <_scanf_float+0x306>
 80137e0:	46aa      	mov	sl, r5
 80137e2:	46b3      	mov	fp, r6
 80137e4:	e7de      	b.n	80137a4 <_scanf_float+0x2e8>
 80137e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80137ea:	6923      	ldr	r3, [r4, #16]
 80137ec:	2965      	cmp	r1, #101	@ 0x65
 80137ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80137f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80137f6:	6123      	str	r3, [r4, #16]
 80137f8:	d00c      	beq.n	8013814 <_scanf_float+0x358>
 80137fa:	2945      	cmp	r1, #69	@ 0x45
 80137fc:	d00a      	beq.n	8013814 <_scanf_float+0x358>
 80137fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013802:	463a      	mov	r2, r7
 8013804:	4640      	mov	r0, r8
 8013806:	4798      	blx	r3
 8013808:	6923      	ldr	r3, [r4, #16]
 801380a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801380e:	3b01      	subs	r3, #1
 8013810:	1eb5      	subs	r5, r6, #2
 8013812:	6123      	str	r3, [r4, #16]
 8013814:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8013818:	463a      	mov	r2, r7
 801381a:	4640      	mov	r0, r8
 801381c:	4798      	blx	r3
 801381e:	462e      	mov	r6, r5
 8013820:	6822      	ldr	r2, [r4, #0]
 8013822:	f012 0210 	ands.w	r2, r2, #16
 8013826:	d001      	beq.n	801382c <_scanf_float+0x370>
 8013828:	2000      	movs	r0, #0
 801382a:	e68b      	b.n	8013544 <_scanf_float+0x88>
 801382c:	7032      	strb	r2, [r6, #0]
 801382e:	6823      	ldr	r3, [r4, #0]
 8013830:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013838:	d11c      	bne.n	8013874 <_scanf_float+0x3b8>
 801383a:	9b02      	ldr	r3, [sp, #8]
 801383c:	454b      	cmp	r3, r9
 801383e:	eba3 0209 	sub.w	r2, r3, r9
 8013842:	d123      	bne.n	801388c <_scanf_float+0x3d0>
 8013844:	9901      	ldr	r1, [sp, #4]
 8013846:	2200      	movs	r2, #0
 8013848:	4640      	mov	r0, r8
 801384a:	f002 fbbd 	bl	8015fc8 <_strtod_r>
 801384e:	9b03      	ldr	r3, [sp, #12]
 8013850:	6821      	ldr	r1, [r4, #0]
 8013852:	681b      	ldr	r3, [r3, #0]
 8013854:	f011 0f02 	tst.w	r1, #2
 8013858:	ec57 6b10 	vmov	r6, r7, d0
 801385c:	f103 0204 	add.w	r2, r3, #4
 8013860:	d01f      	beq.n	80138a2 <_scanf_float+0x3e6>
 8013862:	9903      	ldr	r1, [sp, #12]
 8013864:	600a      	str	r2, [r1, #0]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	e9c3 6700 	strd	r6, r7, [r3]
 801386c:	68e3      	ldr	r3, [r4, #12]
 801386e:	3301      	adds	r3, #1
 8013870:	60e3      	str	r3, [r4, #12]
 8013872:	e7d9      	b.n	8013828 <_scanf_float+0x36c>
 8013874:	9b04      	ldr	r3, [sp, #16]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d0e4      	beq.n	8013844 <_scanf_float+0x388>
 801387a:	9905      	ldr	r1, [sp, #20]
 801387c:	230a      	movs	r3, #10
 801387e:	3101      	adds	r1, #1
 8013880:	4640      	mov	r0, r8
 8013882:	f002 fc21 	bl	80160c8 <_strtol_r>
 8013886:	9b04      	ldr	r3, [sp, #16]
 8013888:	9e05      	ldr	r6, [sp, #20]
 801388a:	1ac2      	subs	r2, r0, r3
 801388c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8013890:	429e      	cmp	r6, r3
 8013892:	bf28      	it	cs
 8013894:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8013898:	4910      	ldr	r1, [pc, #64]	@ (80138dc <_scanf_float+0x420>)
 801389a:	4630      	mov	r0, r6
 801389c:	f000 f8e4 	bl	8013a68 <siprintf>
 80138a0:	e7d0      	b.n	8013844 <_scanf_float+0x388>
 80138a2:	f011 0f04 	tst.w	r1, #4
 80138a6:	9903      	ldr	r1, [sp, #12]
 80138a8:	600a      	str	r2, [r1, #0]
 80138aa:	d1dc      	bne.n	8013866 <_scanf_float+0x3aa>
 80138ac:	681d      	ldr	r5, [r3, #0]
 80138ae:	4632      	mov	r2, r6
 80138b0:	463b      	mov	r3, r7
 80138b2:	4630      	mov	r0, r6
 80138b4:	4639      	mov	r1, r7
 80138b6:	f7ed f959 	bl	8000b6c <__aeabi_dcmpun>
 80138ba:	b128      	cbz	r0, 80138c8 <_scanf_float+0x40c>
 80138bc:	4808      	ldr	r0, [pc, #32]	@ (80138e0 <_scanf_float+0x424>)
 80138be:	f000 fa27 	bl	8013d10 <nanf>
 80138c2:	ed85 0a00 	vstr	s0, [r5]
 80138c6:	e7d1      	b.n	801386c <_scanf_float+0x3b0>
 80138c8:	4630      	mov	r0, r6
 80138ca:	4639      	mov	r1, r7
 80138cc:	f7ed f9ac 	bl	8000c28 <__aeabi_d2f>
 80138d0:	6028      	str	r0, [r5, #0]
 80138d2:	e7cb      	b.n	801386c <_scanf_float+0x3b0>
 80138d4:	f04f 0900 	mov.w	r9, #0
 80138d8:	e629      	b.n	801352e <_scanf_float+0x72>
 80138da:	bf00      	nop
 80138dc:	08019f62 	.word	0x08019f62
 80138e0:	0801a318 	.word	0x0801a318

080138e4 <std>:
 80138e4:	2300      	movs	r3, #0
 80138e6:	b510      	push	{r4, lr}
 80138e8:	4604      	mov	r4, r0
 80138ea:	e9c0 3300 	strd	r3, r3, [r0]
 80138ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80138f2:	6083      	str	r3, [r0, #8]
 80138f4:	8181      	strh	r1, [r0, #12]
 80138f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80138f8:	81c2      	strh	r2, [r0, #14]
 80138fa:	6183      	str	r3, [r0, #24]
 80138fc:	4619      	mov	r1, r3
 80138fe:	2208      	movs	r2, #8
 8013900:	305c      	adds	r0, #92	@ 0x5c
 8013902:	f000 f950 	bl	8013ba6 <memset>
 8013906:	4b0d      	ldr	r3, [pc, #52]	@ (801393c <std+0x58>)
 8013908:	6263      	str	r3, [r4, #36]	@ 0x24
 801390a:	4b0d      	ldr	r3, [pc, #52]	@ (8013940 <std+0x5c>)
 801390c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801390e:	4b0d      	ldr	r3, [pc, #52]	@ (8013944 <std+0x60>)
 8013910:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013912:	4b0d      	ldr	r3, [pc, #52]	@ (8013948 <std+0x64>)
 8013914:	6323      	str	r3, [r4, #48]	@ 0x30
 8013916:	4b0d      	ldr	r3, [pc, #52]	@ (801394c <std+0x68>)
 8013918:	6224      	str	r4, [r4, #32]
 801391a:	429c      	cmp	r4, r3
 801391c:	d006      	beq.n	801392c <std+0x48>
 801391e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013922:	4294      	cmp	r4, r2
 8013924:	d002      	beq.n	801392c <std+0x48>
 8013926:	33d0      	adds	r3, #208	@ 0xd0
 8013928:	429c      	cmp	r4, r3
 801392a:	d105      	bne.n	8013938 <std+0x54>
 801392c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013934:	f000 b9da 	b.w	8013cec <__retarget_lock_init_recursive>
 8013938:	bd10      	pop	{r4, pc}
 801393a:	bf00      	nop
 801393c:	08013afd 	.word	0x08013afd
 8013940:	08013b23 	.word	0x08013b23
 8013944:	08013b5b 	.word	0x08013b5b
 8013948:	08013b7f 	.word	0x08013b7f
 801394c:	20001c9c 	.word	0x20001c9c

08013950 <stdio_exit_handler>:
 8013950:	4a02      	ldr	r2, [pc, #8]	@ (801395c <stdio_exit_handler+0xc>)
 8013952:	4903      	ldr	r1, [pc, #12]	@ (8013960 <stdio_exit_handler+0x10>)
 8013954:	4803      	ldr	r0, [pc, #12]	@ (8013964 <stdio_exit_handler+0x14>)
 8013956:	f000 b869 	b.w	8013a2c <_fwalk_sglue>
 801395a:	bf00      	nop
 801395c:	2000005c 	.word	0x2000005c
 8013960:	08016ab9 	.word	0x08016ab9
 8013964:	2000006c 	.word	0x2000006c

08013968 <cleanup_stdio>:
 8013968:	6841      	ldr	r1, [r0, #4]
 801396a:	4b0c      	ldr	r3, [pc, #48]	@ (801399c <cleanup_stdio+0x34>)
 801396c:	4299      	cmp	r1, r3
 801396e:	b510      	push	{r4, lr}
 8013970:	4604      	mov	r4, r0
 8013972:	d001      	beq.n	8013978 <cleanup_stdio+0x10>
 8013974:	f003 f8a0 	bl	8016ab8 <_fflush_r>
 8013978:	68a1      	ldr	r1, [r4, #8]
 801397a:	4b09      	ldr	r3, [pc, #36]	@ (80139a0 <cleanup_stdio+0x38>)
 801397c:	4299      	cmp	r1, r3
 801397e:	d002      	beq.n	8013986 <cleanup_stdio+0x1e>
 8013980:	4620      	mov	r0, r4
 8013982:	f003 f899 	bl	8016ab8 <_fflush_r>
 8013986:	68e1      	ldr	r1, [r4, #12]
 8013988:	4b06      	ldr	r3, [pc, #24]	@ (80139a4 <cleanup_stdio+0x3c>)
 801398a:	4299      	cmp	r1, r3
 801398c:	d004      	beq.n	8013998 <cleanup_stdio+0x30>
 801398e:	4620      	mov	r0, r4
 8013990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013994:	f003 b890 	b.w	8016ab8 <_fflush_r>
 8013998:	bd10      	pop	{r4, pc}
 801399a:	bf00      	nop
 801399c:	20001c9c 	.word	0x20001c9c
 80139a0:	20001d04 	.word	0x20001d04
 80139a4:	20001d6c 	.word	0x20001d6c

080139a8 <global_stdio_init.part.0>:
 80139a8:	b510      	push	{r4, lr}
 80139aa:	4b0b      	ldr	r3, [pc, #44]	@ (80139d8 <global_stdio_init.part.0+0x30>)
 80139ac:	4c0b      	ldr	r4, [pc, #44]	@ (80139dc <global_stdio_init.part.0+0x34>)
 80139ae:	4a0c      	ldr	r2, [pc, #48]	@ (80139e0 <global_stdio_init.part.0+0x38>)
 80139b0:	601a      	str	r2, [r3, #0]
 80139b2:	4620      	mov	r0, r4
 80139b4:	2200      	movs	r2, #0
 80139b6:	2104      	movs	r1, #4
 80139b8:	f7ff ff94 	bl	80138e4 <std>
 80139bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80139c0:	2201      	movs	r2, #1
 80139c2:	2109      	movs	r1, #9
 80139c4:	f7ff ff8e 	bl	80138e4 <std>
 80139c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80139cc:	2202      	movs	r2, #2
 80139ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139d2:	2112      	movs	r1, #18
 80139d4:	f7ff bf86 	b.w	80138e4 <std>
 80139d8:	20001dd4 	.word	0x20001dd4
 80139dc:	20001c9c 	.word	0x20001c9c
 80139e0:	08013951 	.word	0x08013951

080139e4 <__sfp_lock_acquire>:
 80139e4:	4801      	ldr	r0, [pc, #4]	@ (80139ec <__sfp_lock_acquire+0x8>)
 80139e6:	f000 b982 	b.w	8013cee <__retarget_lock_acquire_recursive>
 80139ea:	bf00      	nop
 80139ec:	20001ddd 	.word	0x20001ddd

080139f0 <__sfp_lock_release>:
 80139f0:	4801      	ldr	r0, [pc, #4]	@ (80139f8 <__sfp_lock_release+0x8>)
 80139f2:	f000 b97d 	b.w	8013cf0 <__retarget_lock_release_recursive>
 80139f6:	bf00      	nop
 80139f8:	20001ddd 	.word	0x20001ddd

080139fc <__sinit>:
 80139fc:	b510      	push	{r4, lr}
 80139fe:	4604      	mov	r4, r0
 8013a00:	f7ff fff0 	bl	80139e4 <__sfp_lock_acquire>
 8013a04:	6a23      	ldr	r3, [r4, #32]
 8013a06:	b11b      	cbz	r3, 8013a10 <__sinit+0x14>
 8013a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a0c:	f7ff bff0 	b.w	80139f0 <__sfp_lock_release>
 8013a10:	4b04      	ldr	r3, [pc, #16]	@ (8013a24 <__sinit+0x28>)
 8013a12:	6223      	str	r3, [r4, #32]
 8013a14:	4b04      	ldr	r3, [pc, #16]	@ (8013a28 <__sinit+0x2c>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d1f5      	bne.n	8013a08 <__sinit+0xc>
 8013a1c:	f7ff ffc4 	bl	80139a8 <global_stdio_init.part.0>
 8013a20:	e7f2      	b.n	8013a08 <__sinit+0xc>
 8013a22:	bf00      	nop
 8013a24:	08013969 	.word	0x08013969
 8013a28:	20001dd4 	.word	0x20001dd4

08013a2c <_fwalk_sglue>:
 8013a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a30:	4607      	mov	r7, r0
 8013a32:	4688      	mov	r8, r1
 8013a34:	4614      	mov	r4, r2
 8013a36:	2600      	movs	r6, #0
 8013a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8013a40:	d505      	bpl.n	8013a4e <_fwalk_sglue+0x22>
 8013a42:	6824      	ldr	r4, [r4, #0]
 8013a44:	2c00      	cmp	r4, #0
 8013a46:	d1f7      	bne.n	8013a38 <_fwalk_sglue+0xc>
 8013a48:	4630      	mov	r0, r6
 8013a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a4e:	89ab      	ldrh	r3, [r5, #12]
 8013a50:	2b01      	cmp	r3, #1
 8013a52:	d907      	bls.n	8013a64 <_fwalk_sglue+0x38>
 8013a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a58:	3301      	adds	r3, #1
 8013a5a:	d003      	beq.n	8013a64 <_fwalk_sglue+0x38>
 8013a5c:	4629      	mov	r1, r5
 8013a5e:	4638      	mov	r0, r7
 8013a60:	47c0      	blx	r8
 8013a62:	4306      	orrs	r6, r0
 8013a64:	3568      	adds	r5, #104	@ 0x68
 8013a66:	e7e9      	b.n	8013a3c <_fwalk_sglue+0x10>

08013a68 <siprintf>:
 8013a68:	b40e      	push	{r1, r2, r3}
 8013a6a:	b500      	push	{lr}
 8013a6c:	b09c      	sub	sp, #112	@ 0x70
 8013a6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8013a70:	9002      	str	r0, [sp, #8]
 8013a72:	9006      	str	r0, [sp, #24]
 8013a74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013a78:	4809      	ldr	r0, [pc, #36]	@ (8013aa0 <siprintf+0x38>)
 8013a7a:	9107      	str	r1, [sp, #28]
 8013a7c:	9104      	str	r1, [sp, #16]
 8013a7e:	4909      	ldr	r1, [pc, #36]	@ (8013aa4 <siprintf+0x3c>)
 8013a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a84:	9105      	str	r1, [sp, #20]
 8013a86:	6800      	ldr	r0, [r0, #0]
 8013a88:	9301      	str	r3, [sp, #4]
 8013a8a:	a902      	add	r1, sp, #8
 8013a8c:	f002 fb7a 	bl	8016184 <_svfiprintf_r>
 8013a90:	9b02      	ldr	r3, [sp, #8]
 8013a92:	2200      	movs	r2, #0
 8013a94:	701a      	strb	r2, [r3, #0]
 8013a96:	b01c      	add	sp, #112	@ 0x70
 8013a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a9c:	b003      	add	sp, #12
 8013a9e:	4770      	bx	lr
 8013aa0:	20000068 	.word	0x20000068
 8013aa4:	ffff0208 	.word	0xffff0208

08013aa8 <siscanf>:
 8013aa8:	b40e      	push	{r1, r2, r3}
 8013aaa:	b530      	push	{r4, r5, lr}
 8013aac:	b09c      	sub	sp, #112	@ 0x70
 8013aae:	ac1f      	add	r4, sp, #124	@ 0x7c
 8013ab0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8013ab4:	f854 5b04 	ldr.w	r5, [r4], #4
 8013ab8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013abc:	9002      	str	r0, [sp, #8]
 8013abe:	9006      	str	r0, [sp, #24]
 8013ac0:	f7ec fbf6 	bl	80002b0 <strlen>
 8013ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8013af4 <siscanf+0x4c>)
 8013ac6:	9003      	str	r0, [sp, #12]
 8013ac8:	9007      	str	r0, [sp, #28]
 8013aca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013acc:	480a      	ldr	r0, [pc, #40]	@ (8013af8 <siscanf+0x50>)
 8013ace:	9401      	str	r4, [sp, #4]
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013ad4:	9314      	str	r3, [sp, #80]	@ 0x50
 8013ad6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013ada:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ade:	462a      	mov	r2, r5
 8013ae0:	4623      	mov	r3, r4
 8013ae2:	a902      	add	r1, sp, #8
 8013ae4:	6800      	ldr	r0, [r0, #0]
 8013ae6:	f002 fca1 	bl	801642c <__ssvfiscanf_r>
 8013aea:	b01c      	add	sp, #112	@ 0x70
 8013aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013af0:	b003      	add	sp, #12
 8013af2:	4770      	bx	lr
 8013af4:	08013b1f 	.word	0x08013b1f
 8013af8:	20000068 	.word	0x20000068

08013afc <__sread>:
 8013afc:	b510      	push	{r4, lr}
 8013afe:	460c      	mov	r4, r1
 8013b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b04:	f000 f894 	bl	8013c30 <_read_r>
 8013b08:	2800      	cmp	r0, #0
 8013b0a:	bfab      	itete	ge
 8013b0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8013b10:	181b      	addge	r3, r3, r0
 8013b12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013b16:	bfac      	ite	ge
 8013b18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013b1a:	81a3      	strhlt	r3, [r4, #12]
 8013b1c:	bd10      	pop	{r4, pc}

08013b1e <__seofread>:
 8013b1e:	2000      	movs	r0, #0
 8013b20:	4770      	bx	lr

08013b22 <__swrite>:
 8013b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b26:	461f      	mov	r7, r3
 8013b28:	898b      	ldrh	r3, [r1, #12]
 8013b2a:	05db      	lsls	r3, r3, #23
 8013b2c:	4605      	mov	r5, r0
 8013b2e:	460c      	mov	r4, r1
 8013b30:	4616      	mov	r6, r2
 8013b32:	d505      	bpl.n	8013b40 <__swrite+0x1e>
 8013b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b38:	2302      	movs	r3, #2
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	f000 f866 	bl	8013c0c <_lseek_r>
 8013b40:	89a3      	ldrh	r3, [r4, #12]
 8013b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013b4a:	81a3      	strh	r3, [r4, #12]
 8013b4c:	4632      	mov	r2, r6
 8013b4e:	463b      	mov	r3, r7
 8013b50:	4628      	mov	r0, r5
 8013b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b56:	f000 b88d 	b.w	8013c74 <_write_r>

08013b5a <__sseek>:
 8013b5a:	b510      	push	{r4, lr}
 8013b5c:	460c      	mov	r4, r1
 8013b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b62:	f000 f853 	bl	8013c0c <_lseek_r>
 8013b66:	1c43      	adds	r3, r0, #1
 8013b68:	89a3      	ldrh	r3, [r4, #12]
 8013b6a:	bf15      	itete	ne
 8013b6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013b6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013b72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013b76:	81a3      	strheq	r3, [r4, #12]
 8013b78:	bf18      	it	ne
 8013b7a:	81a3      	strhne	r3, [r4, #12]
 8013b7c:	bd10      	pop	{r4, pc}

08013b7e <__sclose>:
 8013b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b82:	f000 b833 	b.w	8013bec <_close_r>

08013b86 <memcmp>:
 8013b86:	b510      	push	{r4, lr}
 8013b88:	3901      	subs	r1, #1
 8013b8a:	4402      	add	r2, r0
 8013b8c:	4290      	cmp	r0, r2
 8013b8e:	d101      	bne.n	8013b94 <memcmp+0xe>
 8013b90:	2000      	movs	r0, #0
 8013b92:	e005      	b.n	8013ba0 <memcmp+0x1a>
 8013b94:	7803      	ldrb	r3, [r0, #0]
 8013b96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013b9a:	42a3      	cmp	r3, r4
 8013b9c:	d001      	beq.n	8013ba2 <memcmp+0x1c>
 8013b9e:	1b18      	subs	r0, r3, r4
 8013ba0:	bd10      	pop	{r4, pc}
 8013ba2:	3001      	adds	r0, #1
 8013ba4:	e7f2      	b.n	8013b8c <memcmp+0x6>

08013ba6 <memset>:
 8013ba6:	4402      	add	r2, r0
 8013ba8:	4603      	mov	r3, r0
 8013baa:	4293      	cmp	r3, r2
 8013bac:	d100      	bne.n	8013bb0 <memset+0xa>
 8013bae:	4770      	bx	lr
 8013bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8013bb4:	e7f9      	b.n	8013baa <memset+0x4>

08013bb6 <strstr>:
 8013bb6:	780a      	ldrb	r2, [r1, #0]
 8013bb8:	b570      	push	{r4, r5, r6, lr}
 8013bba:	b96a      	cbnz	r2, 8013bd8 <strstr+0x22>
 8013bbc:	bd70      	pop	{r4, r5, r6, pc}
 8013bbe:	429a      	cmp	r2, r3
 8013bc0:	d109      	bne.n	8013bd6 <strstr+0x20>
 8013bc2:	460c      	mov	r4, r1
 8013bc4:	4605      	mov	r5, r0
 8013bc6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d0f6      	beq.n	8013bbc <strstr+0x6>
 8013bce:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013bd2:	429e      	cmp	r6, r3
 8013bd4:	d0f7      	beq.n	8013bc6 <strstr+0x10>
 8013bd6:	3001      	adds	r0, #1
 8013bd8:	7803      	ldrb	r3, [r0, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d1ef      	bne.n	8013bbe <strstr+0x8>
 8013bde:	4618      	mov	r0, r3
 8013be0:	e7ec      	b.n	8013bbc <strstr+0x6>
	...

08013be4 <_localeconv_r>:
 8013be4:	4800      	ldr	r0, [pc, #0]	@ (8013be8 <_localeconv_r+0x4>)
 8013be6:	4770      	bx	lr
 8013be8:	200001a8 	.word	0x200001a8

08013bec <_close_r>:
 8013bec:	b538      	push	{r3, r4, r5, lr}
 8013bee:	4d06      	ldr	r5, [pc, #24]	@ (8013c08 <_close_r+0x1c>)
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	4604      	mov	r4, r0
 8013bf4:	4608      	mov	r0, r1
 8013bf6:	602b      	str	r3, [r5, #0]
 8013bf8:	f7f3 ffaa 	bl	8007b50 <_close>
 8013bfc:	1c43      	adds	r3, r0, #1
 8013bfe:	d102      	bne.n	8013c06 <_close_r+0x1a>
 8013c00:	682b      	ldr	r3, [r5, #0]
 8013c02:	b103      	cbz	r3, 8013c06 <_close_r+0x1a>
 8013c04:	6023      	str	r3, [r4, #0]
 8013c06:	bd38      	pop	{r3, r4, r5, pc}
 8013c08:	20001dd8 	.word	0x20001dd8

08013c0c <_lseek_r>:
 8013c0c:	b538      	push	{r3, r4, r5, lr}
 8013c0e:	4d07      	ldr	r5, [pc, #28]	@ (8013c2c <_lseek_r+0x20>)
 8013c10:	4604      	mov	r4, r0
 8013c12:	4608      	mov	r0, r1
 8013c14:	4611      	mov	r1, r2
 8013c16:	2200      	movs	r2, #0
 8013c18:	602a      	str	r2, [r5, #0]
 8013c1a:	461a      	mov	r2, r3
 8013c1c:	f7f3 ffbf 	bl	8007b9e <_lseek>
 8013c20:	1c43      	adds	r3, r0, #1
 8013c22:	d102      	bne.n	8013c2a <_lseek_r+0x1e>
 8013c24:	682b      	ldr	r3, [r5, #0]
 8013c26:	b103      	cbz	r3, 8013c2a <_lseek_r+0x1e>
 8013c28:	6023      	str	r3, [r4, #0]
 8013c2a:	bd38      	pop	{r3, r4, r5, pc}
 8013c2c:	20001dd8 	.word	0x20001dd8

08013c30 <_read_r>:
 8013c30:	b538      	push	{r3, r4, r5, lr}
 8013c32:	4d07      	ldr	r5, [pc, #28]	@ (8013c50 <_read_r+0x20>)
 8013c34:	4604      	mov	r4, r0
 8013c36:	4608      	mov	r0, r1
 8013c38:	4611      	mov	r1, r2
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	602a      	str	r2, [r5, #0]
 8013c3e:	461a      	mov	r2, r3
 8013c40:	f7f3 ff4d 	bl	8007ade <_read>
 8013c44:	1c43      	adds	r3, r0, #1
 8013c46:	d102      	bne.n	8013c4e <_read_r+0x1e>
 8013c48:	682b      	ldr	r3, [r5, #0]
 8013c4a:	b103      	cbz	r3, 8013c4e <_read_r+0x1e>
 8013c4c:	6023      	str	r3, [r4, #0]
 8013c4e:	bd38      	pop	{r3, r4, r5, pc}
 8013c50:	20001dd8 	.word	0x20001dd8

08013c54 <_sbrk_r>:
 8013c54:	b538      	push	{r3, r4, r5, lr}
 8013c56:	4d06      	ldr	r5, [pc, #24]	@ (8013c70 <_sbrk_r+0x1c>)
 8013c58:	2300      	movs	r3, #0
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	4608      	mov	r0, r1
 8013c5e:	602b      	str	r3, [r5, #0]
 8013c60:	f7f3 ffaa 	bl	8007bb8 <_sbrk>
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	d102      	bne.n	8013c6e <_sbrk_r+0x1a>
 8013c68:	682b      	ldr	r3, [r5, #0]
 8013c6a:	b103      	cbz	r3, 8013c6e <_sbrk_r+0x1a>
 8013c6c:	6023      	str	r3, [r4, #0]
 8013c6e:	bd38      	pop	{r3, r4, r5, pc}
 8013c70:	20001dd8 	.word	0x20001dd8

08013c74 <_write_r>:
 8013c74:	b538      	push	{r3, r4, r5, lr}
 8013c76:	4d07      	ldr	r5, [pc, #28]	@ (8013c94 <_write_r+0x20>)
 8013c78:	4604      	mov	r4, r0
 8013c7a:	4608      	mov	r0, r1
 8013c7c:	4611      	mov	r1, r2
 8013c7e:	2200      	movs	r2, #0
 8013c80:	602a      	str	r2, [r5, #0]
 8013c82:	461a      	mov	r2, r3
 8013c84:	f7f3 ff48 	bl	8007b18 <_write>
 8013c88:	1c43      	adds	r3, r0, #1
 8013c8a:	d102      	bne.n	8013c92 <_write_r+0x1e>
 8013c8c:	682b      	ldr	r3, [r5, #0]
 8013c8e:	b103      	cbz	r3, 8013c92 <_write_r+0x1e>
 8013c90:	6023      	str	r3, [r4, #0]
 8013c92:	bd38      	pop	{r3, r4, r5, pc}
 8013c94:	20001dd8 	.word	0x20001dd8

08013c98 <__errno>:
 8013c98:	4b01      	ldr	r3, [pc, #4]	@ (8013ca0 <__errno+0x8>)
 8013c9a:	6818      	ldr	r0, [r3, #0]
 8013c9c:	4770      	bx	lr
 8013c9e:	bf00      	nop
 8013ca0:	20000068 	.word	0x20000068

08013ca4 <__libc_init_array>:
 8013ca4:	b570      	push	{r4, r5, r6, lr}
 8013ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8013cdc <__libc_init_array+0x38>)
 8013ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8013ce0 <__libc_init_array+0x3c>)
 8013caa:	1b64      	subs	r4, r4, r5
 8013cac:	10a4      	asrs	r4, r4, #2
 8013cae:	2600      	movs	r6, #0
 8013cb0:	42a6      	cmp	r6, r4
 8013cb2:	d109      	bne.n	8013cc8 <__libc_init_array+0x24>
 8013cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8013ce4 <__libc_init_array+0x40>)
 8013cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8013ce8 <__libc_init_array+0x44>)
 8013cb8:	f005 ff76 	bl	8019ba8 <_init>
 8013cbc:	1b64      	subs	r4, r4, r5
 8013cbe:	10a4      	asrs	r4, r4, #2
 8013cc0:	2600      	movs	r6, #0
 8013cc2:	42a6      	cmp	r6, r4
 8013cc4:	d105      	bne.n	8013cd2 <__libc_init_array+0x2e>
 8013cc6:	bd70      	pop	{r4, r5, r6, pc}
 8013cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ccc:	4798      	blx	r3
 8013cce:	3601      	adds	r6, #1
 8013cd0:	e7ee      	b.n	8013cb0 <__libc_init_array+0xc>
 8013cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013cd6:	4798      	blx	r3
 8013cd8:	3601      	adds	r6, #1
 8013cda:	e7f2      	b.n	8013cc2 <__libc_init_array+0x1e>
 8013cdc:	0801a590 	.word	0x0801a590
 8013ce0:	0801a590 	.word	0x0801a590
 8013ce4:	0801a590 	.word	0x0801a590
 8013ce8:	0801a594 	.word	0x0801a594

08013cec <__retarget_lock_init_recursive>:
 8013cec:	4770      	bx	lr

08013cee <__retarget_lock_acquire_recursive>:
 8013cee:	4770      	bx	lr

08013cf0 <__retarget_lock_release_recursive>:
 8013cf0:	4770      	bx	lr

08013cf2 <memcpy>:
 8013cf2:	440a      	add	r2, r1
 8013cf4:	4291      	cmp	r1, r2
 8013cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8013cfa:	d100      	bne.n	8013cfe <memcpy+0xc>
 8013cfc:	4770      	bx	lr
 8013cfe:	b510      	push	{r4, lr}
 8013d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d08:	4291      	cmp	r1, r2
 8013d0a:	d1f9      	bne.n	8013d00 <memcpy+0xe>
 8013d0c:	bd10      	pop	{r4, pc}
	...

08013d10 <nanf>:
 8013d10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8013d18 <nanf+0x8>
 8013d14:	4770      	bx	lr
 8013d16:	bf00      	nop
 8013d18:	7fc00000 	.word	0x7fc00000

08013d1c <quorem>:
 8013d1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d20:	6903      	ldr	r3, [r0, #16]
 8013d22:	690c      	ldr	r4, [r1, #16]
 8013d24:	42a3      	cmp	r3, r4
 8013d26:	4607      	mov	r7, r0
 8013d28:	db7e      	blt.n	8013e28 <quorem+0x10c>
 8013d2a:	3c01      	subs	r4, #1
 8013d2c:	f101 0814 	add.w	r8, r1, #20
 8013d30:	00a3      	lsls	r3, r4, #2
 8013d32:	f100 0514 	add.w	r5, r0, #20
 8013d36:	9300      	str	r3, [sp, #0]
 8013d38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013d3c:	9301      	str	r3, [sp, #4]
 8013d3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013d42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013d46:	3301      	adds	r3, #1
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013d4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8013d52:	d32e      	bcc.n	8013db2 <quorem+0x96>
 8013d54:	f04f 0a00 	mov.w	sl, #0
 8013d58:	46c4      	mov	ip, r8
 8013d5a:	46ae      	mov	lr, r5
 8013d5c:	46d3      	mov	fp, sl
 8013d5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013d62:	b298      	uxth	r0, r3
 8013d64:	fb06 a000 	mla	r0, r6, r0, sl
 8013d68:	0c02      	lsrs	r2, r0, #16
 8013d6a:	0c1b      	lsrs	r3, r3, #16
 8013d6c:	fb06 2303 	mla	r3, r6, r3, r2
 8013d70:	f8de 2000 	ldr.w	r2, [lr]
 8013d74:	b280      	uxth	r0, r0
 8013d76:	b292      	uxth	r2, r2
 8013d78:	1a12      	subs	r2, r2, r0
 8013d7a:	445a      	add	r2, fp
 8013d7c:	f8de 0000 	ldr.w	r0, [lr]
 8013d80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8013d8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013d8e:	b292      	uxth	r2, r2
 8013d90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013d94:	45e1      	cmp	r9, ip
 8013d96:	f84e 2b04 	str.w	r2, [lr], #4
 8013d9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013d9e:	d2de      	bcs.n	8013d5e <quorem+0x42>
 8013da0:	9b00      	ldr	r3, [sp, #0]
 8013da2:	58eb      	ldr	r3, [r5, r3]
 8013da4:	b92b      	cbnz	r3, 8013db2 <quorem+0x96>
 8013da6:	9b01      	ldr	r3, [sp, #4]
 8013da8:	3b04      	subs	r3, #4
 8013daa:	429d      	cmp	r5, r3
 8013dac:	461a      	mov	r2, r3
 8013dae:	d32f      	bcc.n	8013e10 <quorem+0xf4>
 8013db0:	613c      	str	r4, [r7, #16]
 8013db2:	4638      	mov	r0, r7
 8013db4:	f001 f916 	bl	8014fe4 <__mcmp>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	db25      	blt.n	8013e08 <quorem+0xec>
 8013dbc:	4629      	mov	r1, r5
 8013dbe:	2000      	movs	r0, #0
 8013dc0:	f858 2b04 	ldr.w	r2, [r8], #4
 8013dc4:	f8d1 c000 	ldr.w	ip, [r1]
 8013dc8:	fa1f fe82 	uxth.w	lr, r2
 8013dcc:	fa1f f38c 	uxth.w	r3, ip
 8013dd0:	eba3 030e 	sub.w	r3, r3, lr
 8013dd4:	4403      	add	r3, r0
 8013dd6:	0c12      	lsrs	r2, r2, #16
 8013dd8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013ddc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013de6:	45c1      	cmp	r9, r8
 8013de8:	f841 3b04 	str.w	r3, [r1], #4
 8013dec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013df0:	d2e6      	bcs.n	8013dc0 <quorem+0xa4>
 8013df2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013df6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013dfa:	b922      	cbnz	r2, 8013e06 <quorem+0xea>
 8013dfc:	3b04      	subs	r3, #4
 8013dfe:	429d      	cmp	r5, r3
 8013e00:	461a      	mov	r2, r3
 8013e02:	d30b      	bcc.n	8013e1c <quorem+0x100>
 8013e04:	613c      	str	r4, [r7, #16]
 8013e06:	3601      	adds	r6, #1
 8013e08:	4630      	mov	r0, r6
 8013e0a:	b003      	add	sp, #12
 8013e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e10:	6812      	ldr	r2, [r2, #0]
 8013e12:	3b04      	subs	r3, #4
 8013e14:	2a00      	cmp	r2, #0
 8013e16:	d1cb      	bne.n	8013db0 <quorem+0x94>
 8013e18:	3c01      	subs	r4, #1
 8013e1a:	e7c6      	b.n	8013daa <quorem+0x8e>
 8013e1c:	6812      	ldr	r2, [r2, #0]
 8013e1e:	3b04      	subs	r3, #4
 8013e20:	2a00      	cmp	r2, #0
 8013e22:	d1ef      	bne.n	8013e04 <quorem+0xe8>
 8013e24:	3c01      	subs	r4, #1
 8013e26:	e7ea      	b.n	8013dfe <quorem+0xe2>
 8013e28:	2000      	movs	r0, #0
 8013e2a:	e7ee      	b.n	8013e0a <quorem+0xee>
 8013e2c:	0000      	movs	r0, r0
	...

08013e30 <_dtoa_r>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	69c7      	ldr	r7, [r0, #28]
 8013e36:	b099      	sub	sp, #100	@ 0x64
 8013e38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013e3c:	ec55 4b10 	vmov	r4, r5, d0
 8013e40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8013e42:	9109      	str	r1, [sp, #36]	@ 0x24
 8013e44:	4683      	mov	fp, r0
 8013e46:	920e      	str	r2, [sp, #56]	@ 0x38
 8013e48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013e4a:	b97f      	cbnz	r7, 8013e6c <_dtoa_r+0x3c>
 8013e4c:	2010      	movs	r0, #16
 8013e4e:	f000 fdfd 	bl	8014a4c <malloc>
 8013e52:	4602      	mov	r2, r0
 8013e54:	f8cb 001c 	str.w	r0, [fp, #28]
 8013e58:	b920      	cbnz	r0, 8013e64 <_dtoa_r+0x34>
 8013e5a:	4ba7      	ldr	r3, [pc, #668]	@ (80140f8 <_dtoa_r+0x2c8>)
 8013e5c:	21ef      	movs	r1, #239	@ 0xef
 8013e5e:	48a7      	ldr	r0, [pc, #668]	@ (80140fc <_dtoa_r+0x2cc>)
 8013e60:	f002 fefa 	bl	8016c58 <__assert_func>
 8013e64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8013e68:	6007      	str	r7, [r0, #0]
 8013e6a:	60c7      	str	r7, [r0, #12]
 8013e6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013e70:	6819      	ldr	r1, [r3, #0]
 8013e72:	b159      	cbz	r1, 8013e8c <_dtoa_r+0x5c>
 8013e74:	685a      	ldr	r2, [r3, #4]
 8013e76:	604a      	str	r2, [r1, #4]
 8013e78:	2301      	movs	r3, #1
 8013e7a:	4093      	lsls	r3, r2
 8013e7c:	608b      	str	r3, [r1, #8]
 8013e7e:	4658      	mov	r0, fp
 8013e80:	f000 fe2c 	bl	8014adc <_Bfree>
 8013e84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	601a      	str	r2, [r3, #0]
 8013e8c:	1e2b      	subs	r3, r5, #0
 8013e8e:	bfb9      	ittee	lt
 8013e90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013e94:	9303      	strlt	r3, [sp, #12]
 8013e96:	2300      	movge	r3, #0
 8013e98:	6033      	strge	r3, [r6, #0]
 8013e9a:	9f03      	ldr	r7, [sp, #12]
 8013e9c:	4b98      	ldr	r3, [pc, #608]	@ (8014100 <_dtoa_r+0x2d0>)
 8013e9e:	bfbc      	itt	lt
 8013ea0:	2201      	movlt	r2, #1
 8013ea2:	6032      	strlt	r2, [r6, #0]
 8013ea4:	43bb      	bics	r3, r7
 8013ea6:	d112      	bne.n	8013ece <_dtoa_r+0x9e>
 8013ea8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013eaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013eae:	6013      	str	r3, [r2, #0]
 8013eb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013eb4:	4323      	orrs	r3, r4
 8013eb6:	f000 854d 	beq.w	8014954 <_dtoa_r+0xb24>
 8013eba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013ebc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8014114 <_dtoa_r+0x2e4>
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	f000 854f 	beq.w	8014964 <_dtoa_r+0xb34>
 8013ec6:	f10a 0303 	add.w	r3, sl, #3
 8013eca:	f000 bd49 	b.w	8014960 <_dtoa_r+0xb30>
 8013ece:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ed2:	2200      	movs	r2, #0
 8013ed4:	ec51 0b17 	vmov	r0, r1, d7
 8013ed8:	2300      	movs	r3, #0
 8013eda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8013ede:	f7ec fe13 	bl	8000b08 <__aeabi_dcmpeq>
 8013ee2:	4680      	mov	r8, r0
 8013ee4:	b158      	cbz	r0, 8013efe <_dtoa_r+0xce>
 8013ee6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8013ee8:	2301      	movs	r3, #1
 8013eea:	6013      	str	r3, [r2, #0]
 8013eec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8013eee:	b113      	cbz	r3, 8013ef6 <_dtoa_r+0xc6>
 8013ef0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8013ef2:	4b84      	ldr	r3, [pc, #528]	@ (8014104 <_dtoa_r+0x2d4>)
 8013ef4:	6013      	str	r3, [r2, #0]
 8013ef6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8014118 <_dtoa_r+0x2e8>
 8013efa:	f000 bd33 	b.w	8014964 <_dtoa_r+0xb34>
 8013efe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013f02:	aa16      	add	r2, sp, #88	@ 0x58
 8013f04:	a917      	add	r1, sp, #92	@ 0x5c
 8013f06:	4658      	mov	r0, fp
 8013f08:	f001 f98c 	bl	8015224 <__d2b>
 8013f0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8013f10:	4681      	mov	r9, r0
 8013f12:	2e00      	cmp	r6, #0
 8013f14:	d077      	beq.n	8014006 <_dtoa_r+0x1d6>
 8013f16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013f18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8013f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013f20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8013f28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8013f2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8013f30:	4619      	mov	r1, r3
 8013f32:	2200      	movs	r2, #0
 8013f34:	4b74      	ldr	r3, [pc, #464]	@ (8014108 <_dtoa_r+0x2d8>)
 8013f36:	f7ec f9c7 	bl	80002c8 <__aeabi_dsub>
 8013f3a:	a369      	add	r3, pc, #420	@ (adr r3, 80140e0 <_dtoa_r+0x2b0>)
 8013f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f40:	f7ec fb7a 	bl	8000638 <__aeabi_dmul>
 8013f44:	a368      	add	r3, pc, #416	@ (adr r3, 80140e8 <_dtoa_r+0x2b8>)
 8013f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4a:	f7ec f9bf 	bl	80002cc <__adddf3>
 8013f4e:	4604      	mov	r4, r0
 8013f50:	4630      	mov	r0, r6
 8013f52:	460d      	mov	r5, r1
 8013f54:	f7ec fb06 	bl	8000564 <__aeabi_i2d>
 8013f58:	a365      	add	r3, pc, #404	@ (adr r3, 80140f0 <_dtoa_r+0x2c0>)
 8013f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f5e:	f7ec fb6b 	bl	8000638 <__aeabi_dmul>
 8013f62:	4602      	mov	r2, r0
 8013f64:	460b      	mov	r3, r1
 8013f66:	4620      	mov	r0, r4
 8013f68:	4629      	mov	r1, r5
 8013f6a:	f7ec f9af 	bl	80002cc <__adddf3>
 8013f6e:	4604      	mov	r4, r0
 8013f70:	460d      	mov	r5, r1
 8013f72:	f7ec fe11 	bl	8000b98 <__aeabi_d2iz>
 8013f76:	2200      	movs	r2, #0
 8013f78:	4607      	mov	r7, r0
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	4620      	mov	r0, r4
 8013f7e:	4629      	mov	r1, r5
 8013f80:	f7ec fdcc 	bl	8000b1c <__aeabi_dcmplt>
 8013f84:	b140      	cbz	r0, 8013f98 <_dtoa_r+0x168>
 8013f86:	4638      	mov	r0, r7
 8013f88:	f7ec faec 	bl	8000564 <__aeabi_i2d>
 8013f8c:	4622      	mov	r2, r4
 8013f8e:	462b      	mov	r3, r5
 8013f90:	f7ec fdba 	bl	8000b08 <__aeabi_dcmpeq>
 8013f94:	b900      	cbnz	r0, 8013f98 <_dtoa_r+0x168>
 8013f96:	3f01      	subs	r7, #1
 8013f98:	2f16      	cmp	r7, #22
 8013f9a:	d851      	bhi.n	8014040 <_dtoa_r+0x210>
 8013f9c:	4b5b      	ldr	r3, [pc, #364]	@ (801410c <_dtoa_r+0x2dc>)
 8013f9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8013fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013faa:	f7ec fdb7 	bl	8000b1c <__aeabi_dcmplt>
 8013fae:	2800      	cmp	r0, #0
 8013fb0:	d048      	beq.n	8014044 <_dtoa_r+0x214>
 8013fb2:	3f01      	subs	r7, #1
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8013fb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8013fba:	1b9b      	subs	r3, r3, r6
 8013fbc:	1e5a      	subs	r2, r3, #1
 8013fbe:	bf44      	itt	mi
 8013fc0:	f1c3 0801 	rsbmi	r8, r3, #1
 8013fc4:	2300      	movmi	r3, #0
 8013fc6:	9208      	str	r2, [sp, #32]
 8013fc8:	bf54      	ite	pl
 8013fca:	f04f 0800 	movpl.w	r8, #0
 8013fce:	9308      	strmi	r3, [sp, #32]
 8013fd0:	2f00      	cmp	r7, #0
 8013fd2:	db39      	blt.n	8014048 <_dtoa_r+0x218>
 8013fd4:	9b08      	ldr	r3, [sp, #32]
 8013fd6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8013fd8:	443b      	add	r3, r7
 8013fda:	9308      	str	r3, [sp, #32]
 8013fdc:	2300      	movs	r3, #0
 8013fde:	930a      	str	r3, [sp, #40]	@ 0x28
 8013fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013fe2:	2b09      	cmp	r3, #9
 8013fe4:	d864      	bhi.n	80140b0 <_dtoa_r+0x280>
 8013fe6:	2b05      	cmp	r3, #5
 8013fe8:	bfc4      	itt	gt
 8013fea:	3b04      	subgt	r3, #4
 8013fec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8013fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ff0:	f1a3 0302 	sub.w	r3, r3, #2
 8013ff4:	bfcc      	ite	gt
 8013ff6:	2400      	movgt	r4, #0
 8013ff8:	2401      	movle	r4, #1
 8013ffa:	2b03      	cmp	r3, #3
 8013ffc:	d863      	bhi.n	80140c6 <_dtoa_r+0x296>
 8013ffe:	e8df f003 	tbb	[pc, r3]
 8014002:	372a      	.short	0x372a
 8014004:	5535      	.short	0x5535
 8014006:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801400a:	441e      	add	r6, r3
 801400c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8014010:	2b20      	cmp	r3, #32
 8014012:	bfc1      	itttt	gt
 8014014:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8014018:	409f      	lslgt	r7, r3
 801401a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801401e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8014022:	bfd6      	itet	le
 8014024:	f1c3 0320 	rsble	r3, r3, #32
 8014028:	ea47 0003 	orrgt.w	r0, r7, r3
 801402c:	fa04 f003 	lslle.w	r0, r4, r3
 8014030:	f7ec fa88 	bl	8000544 <__aeabi_ui2d>
 8014034:	2201      	movs	r2, #1
 8014036:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801403a:	3e01      	subs	r6, #1
 801403c:	9214      	str	r2, [sp, #80]	@ 0x50
 801403e:	e777      	b.n	8013f30 <_dtoa_r+0x100>
 8014040:	2301      	movs	r3, #1
 8014042:	e7b8      	b.n	8013fb6 <_dtoa_r+0x186>
 8014044:	9012      	str	r0, [sp, #72]	@ 0x48
 8014046:	e7b7      	b.n	8013fb8 <_dtoa_r+0x188>
 8014048:	427b      	negs	r3, r7
 801404a:	930a      	str	r3, [sp, #40]	@ 0x28
 801404c:	2300      	movs	r3, #0
 801404e:	eba8 0807 	sub.w	r8, r8, r7
 8014052:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014054:	e7c4      	b.n	8013fe0 <_dtoa_r+0x1b0>
 8014056:	2300      	movs	r3, #0
 8014058:	930b      	str	r3, [sp, #44]	@ 0x2c
 801405a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801405c:	2b00      	cmp	r3, #0
 801405e:	dc35      	bgt.n	80140cc <_dtoa_r+0x29c>
 8014060:	2301      	movs	r3, #1
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	9307      	str	r3, [sp, #28]
 8014066:	461a      	mov	r2, r3
 8014068:	920e      	str	r2, [sp, #56]	@ 0x38
 801406a:	e00b      	b.n	8014084 <_dtoa_r+0x254>
 801406c:	2301      	movs	r3, #1
 801406e:	e7f3      	b.n	8014058 <_dtoa_r+0x228>
 8014070:	2300      	movs	r3, #0
 8014072:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014074:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014076:	18fb      	adds	r3, r7, r3
 8014078:	9300      	str	r3, [sp, #0]
 801407a:	3301      	adds	r3, #1
 801407c:	2b01      	cmp	r3, #1
 801407e:	9307      	str	r3, [sp, #28]
 8014080:	bfb8      	it	lt
 8014082:	2301      	movlt	r3, #1
 8014084:	f8db 001c 	ldr.w	r0, [fp, #28]
 8014088:	2100      	movs	r1, #0
 801408a:	2204      	movs	r2, #4
 801408c:	f102 0514 	add.w	r5, r2, #20
 8014090:	429d      	cmp	r5, r3
 8014092:	d91f      	bls.n	80140d4 <_dtoa_r+0x2a4>
 8014094:	6041      	str	r1, [r0, #4]
 8014096:	4658      	mov	r0, fp
 8014098:	f000 fce0 	bl	8014a5c <_Balloc>
 801409c:	4682      	mov	sl, r0
 801409e:	2800      	cmp	r0, #0
 80140a0:	d13c      	bne.n	801411c <_dtoa_r+0x2ec>
 80140a2:	4b1b      	ldr	r3, [pc, #108]	@ (8014110 <_dtoa_r+0x2e0>)
 80140a4:	4602      	mov	r2, r0
 80140a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80140aa:	e6d8      	b.n	8013e5e <_dtoa_r+0x2e>
 80140ac:	2301      	movs	r3, #1
 80140ae:	e7e0      	b.n	8014072 <_dtoa_r+0x242>
 80140b0:	2401      	movs	r4, #1
 80140b2:	2300      	movs	r3, #0
 80140b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80140b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80140b8:	f04f 33ff 	mov.w	r3, #4294967295
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	9307      	str	r3, [sp, #28]
 80140c0:	2200      	movs	r2, #0
 80140c2:	2312      	movs	r3, #18
 80140c4:	e7d0      	b.n	8014068 <_dtoa_r+0x238>
 80140c6:	2301      	movs	r3, #1
 80140c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80140ca:	e7f5      	b.n	80140b8 <_dtoa_r+0x288>
 80140cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80140ce:	9300      	str	r3, [sp, #0]
 80140d0:	9307      	str	r3, [sp, #28]
 80140d2:	e7d7      	b.n	8014084 <_dtoa_r+0x254>
 80140d4:	3101      	adds	r1, #1
 80140d6:	0052      	lsls	r2, r2, #1
 80140d8:	e7d8      	b.n	801408c <_dtoa_r+0x25c>
 80140da:	bf00      	nop
 80140dc:	f3af 8000 	nop.w
 80140e0:	636f4361 	.word	0x636f4361
 80140e4:	3fd287a7 	.word	0x3fd287a7
 80140e8:	8b60c8b3 	.word	0x8b60c8b3
 80140ec:	3fc68a28 	.word	0x3fc68a28
 80140f0:	509f79fb 	.word	0x509f79fb
 80140f4:	3fd34413 	.word	0x3fd34413
 80140f8:	08019f74 	.word	0x08019f74
 80140fc:	08019f8b 	.word	0x08019f8b
 8014100:	7ff00000 	.word	0x7ff00000
 8014104:	0801a2d1 	.word	0x0801a2d1
 8014108:	3ff80000 	.word	0x3ff80000
 801410c:	0801a088 	.word	0x0801a088
 8014110:	08019fe3 	.word	0x08019fe3
 8014114:	08019f70 	.word	0x08019f70
 8014118:	0801a2d0 	.word	0x0801a2d0
 801411c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8014120:	6018      	str	r0, [r3, #0]
 8014122:	9b07      	ldr	r3, [sp, #28]
 8014124:	2b0e      	cmp	r3, #14
 8014126:	f200 80a4 	bhi.w	8014272 <_dtoa_r+0x442>
 801412a:	2c00      	cmp	r4, #0
 801412c:	f000 80a1 	beq.w	8014272 <_dtoa_r+0x442>
 8014130:	2f00      	cmp	r7, #0
 8014132:	dd33      	ble.n	801419c <_dtoa_r+0x36c>
 8014134:	4bad      	ldr	r3, [pc, #692]	@ (80143ec <_dtoa_r+0x5bc>)
 8014136:	f007 020f 	and.w	r2, r7, #15
 801413a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801413e:	ed93 7b00 	vldr	d7, [r3]
 8014142:	05f8      	lsls	r0, r7, #23
 8014144:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014148:	ea4f 1427 	mov.w	r4, r7, asr #4
 801414c:	d516      	bpl.n	801417c <_dtoa_r+0x34c>
 801414e:	4ba8      	ldr	r3, [pc, #672]	@ (80143f0 <_dtoa_r+0x5c0>)
 8014150:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014154:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014158:	f7ec fb98 	bl	800088c <__aeabi_ddiv>
 801415c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014160:	f004 040f 	and.w	r4, r4, #15
 8014164:	2603      	movs	r6, #3
 8014166:	4da2      	ldr	r5, [pc, #648]	@ (80143f0 <_dtoa_r+0x5c0>)
 8014168:	b954      	cbnz	r4, 8014180 <_dtoa_r+0x350>
 801416a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801416e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014172:	f7ec fb8b 	bl	800088c <__aeabi_ddiv>
 8014176:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801417a:	e028      	b.n	80141ce <_dtoa_r+0x39e>
 801417c:	2602      	movs	r6, #2
 801417e:	e7f2      	b.n	8014166 <_dtoa_r+0x336>
 8014180:	07e1      	lsls	r1, r4, #31
 8014182:	d508      	bpl.n	8014196 <_dtoa_r+0x366>
 8014184:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014188:	e9d5 2300 	ldrd	r2, r3, [r5]
 801418c:	f7ec fa54 	bl	8000638 <__aeabi_dmul>
 8014190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014194:	3601      	adds	r6, #1
 8014196:	1064      	asrs	r4, r4, #1
 8014198:	3508      	adds	r5, #8
 801419a:	e7e5      	b.n	8014168 <_dtoa_r+0x338>
 801419c:	f000 80d2 	beq.w	8014344 <_dtoa_r+0x514>
 80141a0:	427c      	negs	r4, r7
 80141a2:	4b92      	ldr	r3, [pc, #584]	@ (80143ec <_dtoa_r+0x5bc>)
 80141a4:	4d92      	ldr	r5, [pc, #584]	@ (80143f0 <_dtoa_r+0x5c0>)
 80141a6:	f004 020f 	and.w	r2, r4, #15
 80141aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80141ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80141b6:	f7ec fa3f 	bl	8000638 <__aeabi_dmul>
 80141ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80141be:	1124      	asrs	r4, r4, #4
 80141c0:	2300      	movs	r3, #0
 80141c2:	2602      	movs	r6, #2
 80141c4:	2c00      	cmp	r4, #0
 80141c6:	f040 80b2 	bne.w	801432e <_dtoa_r+0x4fe>
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d1d3      	bne.n	8014176 <_dtoa_r+0x346>
 80141ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80141d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	f000 80b7 	beq.w	8014348 <_dtoa_r+0x518>
 80141da:	4b86      	ldr	r3, [pc, #536]	@ (80143f4 <_dtoa_r+0x5c4>)
 80141dc:	2200      	movs	r2, #0
 80141de:	4620      	mov	r0, r4
 80141e0:	4629      	mov	r1, r5
 80141e2:	f7ec fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	f000 80ae 	beq.w	8014348 <_dtoa_r+0x518>
 80141ec:	9b07      	ldr	r3, [sp, #28]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	f000 80aa 	beq.w	8014348 <_dtoa_r+0x518>
 80141f4:	9b00      	ldr	r3, [sp, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	dd37      	ble.n	801426a <_dtoa_r+0x43a>
 80141fa:	1e7b      	subs	r3, r7, #1
 80141fc:	9304      	str	r3, [sp, #16]
 80141fe:	4620      	mov	r0, r4
 8014200:	4b7d      	ldr	r3, [pc, #500]	@ (80143f8 <_dtoa_r+0x5c8>)
 8014202:	2200      	movs	r2, #0
 8014204:	4629      	mov	r1, r5
 8014206:	f7ec fa17 	bl	8000638 <__aeabi_dmul>
 801420a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801420e:	9c00      	ldr	r4, [sp, #0]
 8014210:	3601      	adds	r6, #1
 8014212:	4630      	mov	r0, r6
 8014214:	f7ec f9a6 	bl	8000564 <__aeabi_i2d>
 8014218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801421c:	f7ec fa0c 	bl	8000638 <__aeabi_dmul>
 8014220:	4b76      	ldr	r3, [pc, #472]	@ (80143fc <_dtoa_r+0x5cc>)
 8014222:	2200      	movs	r2, #0
 8014224:	f7ec f852 	bl	80002cc <__adddf3>
 8014228:	4605      	mov	r5, r0
 801422a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801422e:	2c00      	cmp	r4, #0
 8014230:	f040 808d 	bne.w	801434e <_dtoa_r+0x51e>
 8014234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014238:	4b71      	ldr	r3, [pc, #452]	@ (8014400 <_dtoa_r+0x5d0>)
 801423a:	2200      	movs	r2, #0
 801423c:	f7ec f844 	bl	80002c8 <__aeabi_dsub>
 8014240:	4602      	mov	r2, r0
 8014242:	460b      	mov	r3, r1
 8014244:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014248:	462a      	mov	r2, r5
 801424a:	4633      	mov	r3, r6
 801424c:	f7ec fc84 	bl	8000b58 <__aeabi_dcmpgt>
 8014250:	2800      	cmp	r0, #0
 8014252:	f040 828b 	bne.w	801476c <_dtoa_r+0x93c>
 8014256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801425a:	462a      	mov	r2, r5
 801425c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8014260:	f7ec fc5c 	bl	8000b1c <__aeabi_dcmplt>
 8014264:	2800      	cmp	r0, #0
 8014266:	f040 8128 	bne.w	80144ba <_dtoa_r+0x68a>
 801426a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801426e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014272:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8014274:	2b00      	cmp	r3, #0
 8014276:	f2c0 815a 	blt.w	801452e <_dtoa_r+0x6fe>
 801427a:	2f0e      	cmp	r7, #14
 801427c:	f300 8157 	bgt.w	801452e <_dtoa_r+0x6fe>
 8014280:	4b5a      	ldr	r3, [pc, #360]	@ (80143ec <_dtoa_r+0x5bc>)
 8014282:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014286:	ed93 7b00 	vldr	d7, [r3]
 801428a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801428c:	2b00      	cmp	r3, #0
 801428e:	ed8d 7b00 	vstr	d7, [sp]
 8014292:	da03      	bge.n	801429c <_dtoa_r+0x46c>
 8014294:	9b07      	ldr	r3, [sp, #28]
 8014296:	2b00      	cmp	r3, #0
 8014298:	f340 8101 	ble.w	801449e <_dtoa_r+0x66e>
 801429c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80142a0:	4656      	mov	r6, sl
 80142a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142a6:	4620      	mov	r0, r4
 80142a8:	4629      	mov	r1, r5
 80142aa:	f7ec faef 	bl	800088c <__aeabi_ddiv>
 80142ae:	f7ec fc73 	bl	8000b98 <__aeabi_d2iz>
 80142b2:	4680      	mov	r8, r0
 80142b4:	f7ec f956 	bl	8000564 <__aeabi_i2d>
 80142b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142bc:	f7ec f9bc 	bl	8000638 <__aeabi_dmul>
 80142c0:	4602      	mov	r2, r0
 80142c2:	460b      	mov	r3, r1
 80142c4:	4620      	mov	r0, r4
 80142c6:	4629      	mov	r1, r5
 80142c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80142cc:	f7eb fffc 	bl	80002c8 <__aeabi_dsub>
 80142d0:	f806 4b01 	strb.w	r4, [r6], #1
 80142d4:	9d07      	ldr	r5, [sp, #28]
 80142d6:	eba6 040a 	sub.w	r4, r6, sl
 80142da:	42a5      	cmp	r5, r4
 80142dc:	4602      	mov	r2, r0
 80142de:	460b      	mov	r3, r1
 80142e0:	f040 8117 	bne.w	8014512 <_dtoa_r+0x6e2>
 80142e4:	f7eb fff2 	bl	80002cc <__adddf3>
 80142e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142ec:	4604      	mov	r4, r0
 80142ee:	460d      	mov	r5, r1
 80142f0:	f7ec fc32 	bl	8000b58 <__aeabi_dcmpgt>
 80142f4:	2800      	cmp	r0, #0
 80142f6:	f040 80f9 	bne.w	80144ec <_dtoa_r+0x6bc>
 80142fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142fe:	4620      	mov	r0, r4
 8014300:	4629      	mov	r1, r5
 8014302:	f7ec fc01 	bl	8000b08 <__aeabi_dcmpeq>
 8014306:	b118      	cbz	r0, 8014310 <_dtoa_r+0x4e0>
 8014308:	f018 0f01 	tst.w	r8, #1
 801430c:	f040 80ee 	bne.w	80144ec <_dtoa_r+0x6bc>
 8014310:	4649      	mov	r1, r9
 8014312:	4658      	mov	r0, fp
 8014314:	f000 fbe2 	bl	8014adc <_Bfree>
 8014318:	2300      	movs	r3, #0
 801431a:	7033      	strb	r3, [r6, #0]
 801431c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801431e:	3701      	adds	r7, #1
 8014320:	601f      	str	r7, [r3, #0]
 8014322:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014324:	2b00      	cmp	r3, #0
 8014326:	f000 831d 	beq.w	8014964 <_dtoa_r+0xb34>
 801432a:	601e      	str	r6, [r3, #0]
 801432c:	e31a      	b.n	8014964 <_dtoa_r+0xb34>
 801432e:	07e2      	lsls	r2, r4, #31
 8014330:	d505      	bpl.n	801433e <_dtoa_r+0x50e>
 8014332:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014336:	f7ec f97f 	bl	8000638 <__aeabi_dmul>
 801433a:	3601      	adds	r6, #1
 801433c:	2301      	movs	r3, #1
 801433e:	1064      	asrs	r4, r4, #1
 8014340:	3508      	adds	r5, #8
 8014342:	e73f      	b.n	80141c4 <_dtoa_r+0x394>
 8014344:	2602      	movs	r6, #2
 8014346:	e742      	b.n	80141ce <_dtoa_r+0x39e>
 8014348:	9c07      	ldr	r4, [sp, #28]
 801434a:	9704      	str	r7, [sp, #16]
 801434c:	e761      	b.n	8014212 <_dtoa_r+0x3e2>
 801434e:	4b27      	ldr	r3, [pc, #156]	@ (80143ec <_dtoa_r+0x5bc>)
 8014350:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014352:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014356:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801435a:	4454      	add	r4, sl
 801435c:	2900      	cmp	r1, #0
 801435e:	d053      	beq.n	8014408 <_dtoa_r+0x5d8>
 8014360:	4928      	ldr	r1, [pc, #160]	@ (8014404 <_dtoa_r+0x5d4>)
 8014362:	2000      	movs	r0, #0
 8014364:	f7ec fa92 	bl	800088c <__aeabi_ddiv>
 8014368:	4633      	mov	r3, r6
 801436a:	462a      	mov	r2, r5
 801436c:	f7eb ffac 	bl	80002c8 <__aeabi_dsub>
 8014370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014374:	4656      	mov	r6, sl
 8014376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801437a:	f7ec fc0d 	bl	8000b98 <__aeabi_d2iz>
 801437e:	4605      	mov	r5, r0
 8014380:	f7ec f8f0 	bl	8000564 <__aeabi_i2d>
 8014384:	4602      	mov	r2, r0
 8014386:	460b      	mov	r3, r1
 8014388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801438c:	f7eb ff9c 	bl	80002c8 <__aeabi_dsub>
 8014390:	3530      	adds	r5, #48	@ 0x30
 8014392:	4602      	mov	r2, r0
 8014394:	460b      	mov	r3, r1
 8014396:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801439a:	f806 5b01 	strb.w	r5, [r6], #1
 801439e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80143a2:	f7ec fbbb 	bl	8000b1c <__aeabi_dcmplt>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	d171      	bne.n	801448e <_dtoa_r+0x65e>
 80143aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80143ae:	4911      	ldr	r1, [pc, #68]	@ (80143f4 <_dtoa_r+0x5c4>)
 80143b0:	2000      	movs	r0, #0
 80143b2:	f7eb ff89 	bl	80002c8 <__aeabi_dsub>
 80143b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80143ba:	f7ec fbaf 	bl	8000b1c <__aeabi_dcmplt>
 80143be:	2800      	cmp	r0, #0
 80143c0:	f040 8095 	bne.w	80144ee <_dtoa_r+0x6be>
 80143c4:	42a6      	cmp	r6, r4
 80143c6:	f43f af50 	beq.w	801426a <_dtoa_r+0x43a>
 80143ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80143ce:	4b0a      	ldr	r3, [pc, #40]	@ (80143f8 <_dtoa_r+0x5c8>)
 80143d0:	2200      	movs	r2, #0
 80143d2:	f7ec f931 	bl	8000638 <__aeabi_dmul>
 80143d6:	4b08      	ldr	r3, [pc, #32]	@ (80143f8 <_dtoa_r+0x5c8>)
 80143d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80143dc:	2200      	movs	r2, #0
 80143de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143e2:	f7ec f929 	bl	8000638 <__aeabi_dmul>
 80143e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143ea:	e7c4      	b.n	8014376 <_dtoa_r+0x546>
 80143ec:	0801a088 	.word	0x0801a088
 80143f0:	0801a060 	.word	0x0801a060
 80143f4:	3ff00000 	.word	0x3ff00000
 80143f8:	40240000 	.word	0x40240000
 80143fc:	401c0000 	.word	0x401c0000
 8014400:	40140000 	.word	0x40140000
 8014404:	3fe00000 	.word	0x3fe00000
 8014408:	4631      	mov	r1, r6
 801440a:	4628      	mov	r0, r5
 801440c:	f7ec f914 	bl	8000638 <__aeabi_dmul>
 8014410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8014414:	9415      	str	r4, [sp, #84]	@ 0x54
 8014416:	4656      	mov	r6, sl
 8014418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801441c:	f7ec fbbc 	bl	8000b98 <__aeabi_d2iz>
 8014420:	4605      	mov	r5, r0
 8014422:	f7ec f89f 	bl	8000564 <__aeabi_i2d>
 8014426:	4602      	mov	r2, r0
 8014428:	460b      	mov	r3, r1
 801442a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801442e:	f7eb ff4b 	bl	80002c8 <__aeabi_dsub>
 8014432:	3530      	adds	r5, #48	@ 0x30
 8014434:	f806 5b01 	strb.w	r5, [r6], #1
 8014438:	4602      	mov	r2, r0
 801443a:	460b      	mov	r3, r1
 801443c:	42a6      	cmp	r6, r4
 801443e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014442:	f04f 0200 	mov.w	r2, #0
 8014446:	d124      	bne.n	8014492 <_dtoa_r+0x662>
 8014448:	4bac      	ldr	r3, [pc, #688]	@ (80146fc <_dtoa_r+0x8cc>)
 801444a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801444e:	f7eb ff3d 	bl	80002cc <__adddf3>
 8014452:	4602      	mov	r2, r0
 8014454:	460b      	mov	r3, r1
 8014456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801445a:	f7ec fb7d 	bl	8000b58 <__aeabi_dcmpgt>
 801445e:	2800      	cmp	r0, #0
 8014460:	d145      	bne.n	80144ee <_dtoa_r+0x6be>
 8014462:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8014466:	49a5      	ldr	r1, [pc, #660]	@ (80146fc <_dtoa_r+0x8cc>)
 8014468:	2000      	movs	r0, #0
 801446a:	f7eb ff2d 	bl	80002c8 <__aeabi_dsub>
 801446e:	4602      	mov	r2, r0
 8014470:	460b      	mov	r3, r1
 8014472:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014476:	f7ec fb51 	bl	8000b1c <__aeabi_dcmplt>
 801447a:	2800      	cmp	r0, #0
 801447c:	f43f aef5 	beq.w	801426a <_dtoa_r+0x43a>
 8014480:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8014482:	1e73      	subs	r3, r6, #1
 8014484:	9315      	str	r3, [sp, #84]	@ 0x54
 8014486:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801448a:	2b30      	cmp	r3, #48	@ 0x30
 801448c:	d0f8      	beq.n	8014480 <_dtoa_r+0x650>
 801448e:	9f04      	ldr	r7, [sp, #16]
 8014490:	e73e      	b.n	8014310 <_dtoa_r+0x4e0>
 8014492:	4b9b      	ldr	r3, [pc, #620]	@ (8014700 <_dtoa_r+0x8d0>)
 8014494:	f7ec f8d0 	bl	8000638 <__aeabi_dmul>
 8014498:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801449c:	e7bc      	b.n	8014418 <_dtoa_r+0x5e8>
 801449e:	d10c      	bne.n	80144ba <_dtoa_r+0x68a>
 80144a0:	4b98      	ldr	r3, [pc, #608]	@ (8014704 <_dtoa_r+0x8d4>)
 80144a2:	2200      	movs	r2, #0
 80144a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80144a8:	f7ec f8c6 	bl	8000638 <__aeabi_dmul>
 80144ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144b0:	f7ec fb48 	bl	8000b44 <__aeabi_dcmpge>
 80144b4:	2800      	cmp	r0, #0
 80144b6:	f000 8157 	beq.w	8014768 <_dtoa_r+0x938>
 80144ba:	2400      	movs	r4, #0
 80144bc:	4625      	mov	r5, r4
 80144be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80144c0:	43db      	mvns	r3, r3
 80144c2:	9304      	str	r3, [sp, #16]
 80144c4:	4656      	mov	r6, sl
 80144c6:	2700      	movs	r7, #0
 80144c8:	4621      	mov	r1, r4
 80144ca:	4658      	mov	r0, fp
 80144cc:	f000 fb06 	bl	8014adc <_Bfree>
 80144d0:	2d00      	cmp	r5, #0
 80144d2:	d0dc      	beq.n	801448e <_dtoa_r+0x65e>
 80144d4:	b12f      	cbz	r7, 80144e2 <_dtoa_r+0x6b2>
 80144d6:	42af      	cmp	r7, r5
 80144d8:	d003      	beq.n	80144e2 <_dtoa_r+0x6b2>
 80144da:	4639      	mov	r1, r7
 80144dc:	4658      	mov	r0, fp
 80144de:	f000 fafd 	bl	8014adc <_Bfree>
 80144e2:	4629      	mov	r1, r5
 80144e4:	4658      	mov	r0, fp
 80144e6:	f000 faf9 	bl	8014adc <_Bfree>
 80144ea:	e7d0      	b.n	801448e <_dtoa_r+0x65e>
 80144ec:	9704      	str	r7, [sp, #16]
 80144ee:	4633      	mov	r3, r6
 80144f0:	461e      	mov	r6, r3
 80144f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80144f6:	2a39      	cmp	r2, #57	@ 0x39
 80144f8:	d107      	bne.n	801450a <_dtoa_r+0x6da>
 80144fa:	459a      	cmp	sl, r3
 80144fc:	d1f8      	bne.n	80144f0 <_dtoa_r+0x6c0>
 80144fe:	9a04      	ldr	r2, [sp, #16]
 8014500:	3201      	adds	r2, #1
 8014502:	9204      	str	r2, [sp, #16]
 8014504:	2230      	movs	r2, #48	@ 0x30
 8014506:	f88a 2000 	strb.w	r2, [sl]
 801450a:	781a      	ldrb	r2, [r3, #0]
 801450c:	3201      	adds	r2, #1
 801450e:	701a      	strb	r2, [r3, #0]
 8014510:	e7bd      	b.n	801448e <_dtoa_r+0x65e>
 8014512:	4b7b      	ldr	r3, [pc, #492]	@ (8014700 <_dtoa_r+0x8d0>)
 8014514:	2200      	movs	r2, #0
 8014516:	f7ec f88f 	bl	8000638 <__aeabi_dmul>
 801451a:	2200      	movs	r2, #0
 801451c:	2300      	movs	r3, #0
 801451e:	4604      	mov	r4, r0
 8014520:	460d      	mov	r5, r1
 8014522:	f7ec faf1 	bl	8000b08 <__aeabi_dcmpeq>
 8014526:	2800      	cmp	r0, #0
 8014528:	f43f aebb 	beq.w	80142a2 <_dtoa_r+0x472>
 801452c:	e6f0      	b.n	8014310 <_dtoa_r+0x4e0>
 801452e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8014530:	2a00      	cmp	r2, #0
 8014532:	f000 80db 	beq.w	80146ec <_dtoa_r+0x8bc>
 8014536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014538:	2a01      	cmp	r2, #1
 801453a:	f300 80bf 	bgt.w	80146bc <_dtoa_r+0x88c>
 801453e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8014540:	2a00      	cmp	r2, #0
 8014542:	f000 80b7 	beq.w	80146b4 <_dtoa_r+0x884>
 8014546:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801454a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801454c:	4646      	mov	r6, r8
 801454e:	9a08      	ldr	r2, [sp, #32]
 8014550:	2101      	movs	r1, #1
 8014552:	441a      	add	r2, r3
 8014554:	4658      	mov	r0, fp
 8014556:	4498      	add	r8, r3
 8014558:	9208      	str	r2, [sp, #32]
 801455a:	f000 fbbd 	bl	8014cd8 <__i2b>
 801455e:	4605      	mov	r5, r0
 8014560:	b15e      	cbz	r6, 801457a <_dtoa_r+0x74a>
 8014562:	9b08      	ldr	r3, [sp, #32]
 8014564:	2b00      	cmp	r3, #0
 8014566:	dd08      	ble.n	801457a <_dtoa_r+0x74a>
 8014568:	42b3      	cmp	r3, r6
 801456a:	9a08      	ldr	r2, [sp, #32]
 801456c:	bfa8      	it	ge
 801456e:	4633      	movge	r3, r6
 8014570:	eba8 0803 	sub.w	r8, r8, r3
 8014574:	1af6      	subs	r6, r6, r3
 8014576:	1ad3      	subs	r3, r2, r3
 8014578:	9308      	str	r3, [sp, #32]
 801457a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801457c:	b1f3      	cbz	r3, 80145bc <_dtoa_r+0x78c>
 801457e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014580:	2b00      	cmp	r3, #0
 8014582:	f000 80b7 	beq.w	80146f4 <_dtoa_r+0x8c4>
 8014586:	b18c      	cbz	r4, 80145ac <_dtoa_r+0x77c>
 8014588:	4629      	mov	r1, r5
 801458a:	4622      	mov	r2, r4
 801458c:	4658      	mov	r0, fp
 801458e:	f000 fc63 	bl	8014e58 <__pow5mult>
 8014592:	464a      	mov	r2, r9
 8014594:	4601      	mov	r1, r0
 8014596:	4605      	mov	r5, r0
 8014598:	4658      	mov	r0, fp
 801459a:	f000 fbb3 	bl	8014d04 <__multiply>
 801459e:	4649      	mov	r1, r9
 80145a0:	9004      	str	r0, [sp, #16]
 80145a2:	4658      	mov	r0, fp
 80145a4:	f000 fa9a 	bl	8014adc <_Bfree>
 80145a8:	9b04      	ldr	r3, [sp, #16]
 80145aa:	4699      	mov	r9, r3
 80145ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80145ae:	1b1a      	subs	r2, r3, r4
 80145b0:	d004      	beq.n	80145bc <_dtoa_r+0x78c>
 80145b2:	4649      	mov	r1, r9
 80145b4:	4658      	mov	r0, fp
 80145b6:	f000 fc4f 	bl	8014e58 <__pow5mult>
 80145ba:	4681      	mov	r9, r0
 80145bc:	2101      	movs	r1, #1
 80145be:	4658      	mov	r0, fp
 80145c0:	f000 fb8a 	bl	8014cd8 <__i2b>
 80145c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80145c6:	4604      	mov	r4, r0
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	f000 81cf 	beq.w	801496c <_dtoa_r+0xb3c>
 80145ce:	461a      	mov	r2, r3
 80145d0:	4601      	mov	r1, r0
 80145d2:	4658      	mov	r0, fp
 80145d4:	f000 fc40 	bl	8014e58 <__pow5mult>
 80145d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145da:	2b01      	cmp	r3, #1
 80145dc:	4604      	mov	r4, r0
 80145de:	f300 8095 	bgt.w	801470c <_dtoa_r+0x8dc>
 80145e2:	9b02      	ldr	r3, [sp, #8]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f040 8087 	bne.w	80146f8 <_dtoa_r+0x8c8>
 80145ea:	9b03      	ldr	r3, [sp, #12]
 80145ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f040 8089 	bne.w	8014708 <_dtoa_r+0x8d8>
 80145f6:	9b03      	ldr	r3, [sp, #12]
 80145f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80145fc:	0d1b      	lsrs	r3, r3, #20
 80145fe:	051b      	lsls	r3, r3, #20
 8014600:	b12b      	cbz	r3, 801460e <_dtoa_r+0x7de>
 8014602:	9b08      	ldr	r3, [sp, #32]
 8014604:	3301      	adds	r3, #1
 8014606:	9308      	str	r3, [sp, #32]
 8014608:	f108 0801 	add.w	r8, r8, #1
 801460c:	2301      	movs	r3, #1
 801460e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014610:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014612:	2b00      	cmp	r3, #0
 8014614:	f000 81b0 	beq.w	8014978 <_dtoa_r+0xb48>
 8014618:	6923      	ldr	r3, [r4, #16]
 801461a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801461e:	6918      	ldr	r0, [r3, #16]
 8014620:	f000 fb0e 	bl	8014c40 <__hi0bits>
 8014624:	f1c0 0020 	rsb	r0, r0, #32
 8014628:	9b08      	ldr	r3, [sp, #32]
 801462a:	4418      	add	r0, r3
 801462c:	f010 001f 	ands.w	r0, r0, #31
 8014630:	d077      	beq.n	8014722 <_dtoa_r+0x8f2>
 8014632:	f1c0 0320 	rsb	r3, r0, #32
 8014636:	2b04      	cmp	r3, #4
 8014638:	dd6b      	ble.n	8014712 <_dtoa_r+0x8e2>
 801463a:	9b08      	ldr	r3, [sp, #32]
 801463c:	f1c0 001c 	rsb	r0, r0, #28
 8014640:	4403      	add	r3, r0
 8014642:	4480      	add	r8, r0
 8014644:	4406      	add	r6, r0
 8014646:	9308      	str	r3, [sp, #32]
 8014648:	f1b8 0f00 	cmp.w	r8, #0
 801464c:	dd05      	ble.n	801465a <_dtoa_r+0x82a>
 801464e:	4649      	mov	r1, r9
 8014650:	4642      	mov	r2, r8
 8014652:	4658      	mov	r0, fp
 8014654:	f000 fc5a 	bl	8014f0c <__lshift>
 8014658:	4681      	mov	r9, r0
 801465a:	9b08      	ldr	r3, [sp, #32]
 801465c:	2b00      	cmp	r3, #0
 801465e:	dd05      	ble.n	801466c <_dtoa_r+0x83c>
 8014660:	4621      	mov	r1, r4
 8014662:	461a      	mov	r2, r3
 8014664:	4658      	mov	r0, fp
 8014666:	f000 fc51 	bl	8014f0c <__lshift>
 801466a:	4604      	mov	r4, r0
 801466c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801466e:	2b00      	cmp	r3, #0
 8014670:	d059      	beq.n	8014726 <_dtoa_r+0x8f6>
 8014672:	4621      	mov	r1, r4
 8014674:	4648      	mov	r0, r9
 8014676:	f000 fcb5 	bl	8014fe4 <__mcmp>
 801467a:	2800      	cmp	r0, #0
 801467c:	da53      	bge.n	8014726 <_dtoa_r+0x8f6>
 801467e:	1e7b      	subs	r3, r7, #1
 8014680:	9304      	str	r3, [sp, #16]
 8014682:	4649      	mov	r1, r9
 8014684:	2300      	movs	r3, #0
 8014686:	220a      	movs	r2, #10
 8014688:	4658      	mov	r0, fp
 801468a:	f000 fa49 	bl	8014b20 <__multadd>
 801468e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014690:	4681      	mov	r9, r0
 8014692:	2b00      	cmp	r3, #0
 8014694:	f000 8172 	beq.w	801497c <_dtoa_r+0xb4c>
 8014698:	2300      	movs	r3, #0
 801469a:	4629      	mov	r1, r5
 801469c:	220a      	movs	r2, #10
 801469e:	4658      	mov	r0, fp
 80146a0:	f000 fa3e 	bl	8014b20 <__multadd>
 80146a4:	9b00      	ldr	r3, [sp, #0]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	4605      	mov	r5, r0
 80146aa:	dc67      	bgt.n	801477c <_dtoa_r+0x94c>
 80146ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ae:	2b02      	cmp	r3, #2
 80146b0:	dc41      	bgt.n	8014736 <_dtoa_r+0x906>
 80146b2:	e063      	b.n	801477c <_dtoa_r+0x94c>
 80146b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80146b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80146ba:	e746      	b.n	801454a <_dtoa_r+0x71a>
 80146bc:	9b07      	ldr	r3, [sp, #28]
 80146be:	1e5c      	subs	r4, r3, #1
 80146c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80146c2:	42a3      	cmp	r3, r4
 80146c4:	bfbf      	itttt	lt
 80146c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80146c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80146ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80146cc:	1ae3      	sublt	r3, r4, r3
 80146ce:	bfb4      	ite	lt
 80146d0:	18d2      	addlt	r2, r2, r3
 80146d2:	1b1c      	subge	r4, r3, r4
 80146d4:	9b07      	ldr	r3, [sp, #28]
 80146d6:	bfbc      	itt	lt
 80146d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80146da:	2400      	movlt	r4, #0
 80146dc:	2b00      	cmp	r3, #0
 80146de:	bfb5      	itete	lt
 80146e0:	eba8 0603 	sublt.w	r6, r8, r3
 80146e4:	9b07      	ldrge	r3, [sp, #28]
 80146e6:	2300      	movlt	r3, #0
 80146e8:	4646      	movge	r6, r8
 80146ea:	e730      	b.n	801454e <_dtoa_r+0x71e>
 80146ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80146ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80146f0:	4646      	mov	r6, r8
 80146f2:	e735      	b.n	8014560 <_dtoa_r+0x730>
 80146f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80146f6:	e75c      	b.n	80145b2 <_dtoa_r+0x782>
 80146f8:	2300      	movs	r3, #0
 80146fa:	e788      	b.n	801460e <_dtoa_r+0x7de>
 80146fc:	3fe00000 	.word	0x3fe00000
 8014700:	40240000 	.word	0x40240000
 8014704:	40140000 	.word	0x40140000
 8014708:	9b02      	ldr	r3, [sp, #8]
 801470a:	e780      	b.n	801460e <_dtoa_r+0x7de>
 801470c:	2300      	movs	r3, #0
 801470e:	930a      	str	r3, [sp, #40]	@ 0x28
 8014710:	e782      	b.n	8014618 <_dtoa_r+0x7e8>
 8014712:	d099      	beq.n	8014648 <_dtoa_r+0x818>
 8014714:	9a08      	ldr	r2, [sp, #32]
 8014716:	331c      	adds	r3, #28
 8014718:	441a      	add	r2, r3
 801471a:	4498      	add	r8, r3
 801471c:	441e      	add	r6, r3
 801471e:	9208      	str	r2, [sp, #32]
 8014720:	e792      	b.n	8014648 <_dtoa_r+0x818>
 8014722:	4603      	mov	r3, r0
 8014724:	e7f6      	b.n	8014714 <_dtoa_r+0x8e4>
 8014726:	9b07      	ldr	r3, [sp, #28]
 8014728:	9704      	str	r7, [sp, #16]
 801472a:	2b00      	cmp	r3, #0
 801472c:	dc20      	bgt.n	8014770 <_dtoa_r+0x940>
 801472e:	9300      	str	r3, [sp, #0]
 8014730:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014732:	2b02      	cmp	r3, #2
 8014734:	dd1e      	ble.n	8014774 <_dtoa_r+0x944>
 8014736:	9b00      	ldr	r3, [sp, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	f47f aec0 	bne.w	80144be <_dtoa_r+0x68e>
 801473e:	4621      	mov	r1, r4
 8014740:	2205      	movs	r2, #5
 8014742:	4658      	mov	r0, fp
 8014744:	f000 f9ec 	bl	8014b20 <__multadd>
 8014748:	4601      	mov	r1, r0
 801474a:	4604      	mov	r4, r0
 801474c:	4648      	mov	r0, r9
 801474e:	f000 fc49 	bl	8014fe4 <__mcmp>
 8014752:	2800      	cmp	r0, #0
 8014754:	f77f aeb3 	ble.w	80144be <_dtoa_r+0x68e>
 8014758:	4656      	mov	r6, sl
 801475a:	2331      	movs	r3, #49	@ 0x31
 801475c:	f806 3b01 	strb.w	r3, [r6], #1
 8014760:	9b04      	ldr	r3, [sp, #16]
 8014762:	3301      	adds	r3, #1
 8014764:	9304      	str	r3, [sp, #16]
 8014766:	e6ae      	b.n	80144c6 <_dtoa_r+0x696>
 8014768:	9c07      	ldr	r4, [sp, #28]
 801476a:	9704      	str	r7, [sp, #16]
 801476c:	4625      	mov	r5, r4
 801476e:	e7f3      	b.n	8014758 <_dtoa_r+0x928>
 8014770:	9b07      	ldr	r3, [sp, #28]
 8014772:	9300      	str	r3, [sp, #0]
 8014774:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014776:	2b00      	cmp	r3, #0
 8014778:	f000 8104 	beq.w	8014984 <_dtoa_r+0xb54>
 801477c:	2e00      	cmp	r6, #0
 801477e:	dd05      	ble.n	801478c <_dtoa_r+0x95c>
 8014780:	4629      	mov	r1, r5
 8014782:	4632      	mov	r2, r6
 8014784:	4658      	mov	r0, fp
 8014786:	f000 fbc1 	bl	8014f0c <__lshift>
 801478a:	4605      	mov	r5, r0
 801478c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801478e:	2b00      	cmp	r3, #0
 8014790:	d05a      	beq.n	8014848 <_dtoa_r+0xa18>
 8014792:	6869      	ldr	r1, [r5, #4]
 8014794:	4658      	mov	r0, fp
 8014796:	f000 f961 	bl	8014a5c <_Balloc>
 801479a:	4606      	mov	r6, r0
 801479c:	b928      	cbnz	r0, 80147aa <_dtoa_r+0x97a>
 801479e:	4b84      	ldr	r3, [pc, #528]	@ (80149b0 <_dtoa_r+0xb80>)
 80147a0:	4602      	mov	r2, r0
 80147a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80147a6:	f7ff bb5a 	b.w	8013e5e <_dtoa_r+0x2e>
 80147aa:	692a      	ldr	r2, [r5, #16]
 80147ac:	3202      	adds	r2, #2
 80147ae:	0092      	lsls	r2, r2, #2
 80147b0:	f105 010c 	add.w	r1, r5, #12
 80147b4:	300c      	adds	r0, #12
 80147b6:	f7ff fa9c 	bl	8013cf2 <memcpy>
 80147ba:	2201      	movs	r2, #1
 80147bc:	4631      	mov	r1, r6
 80147be:	4658      	mov	r0, fp
 80147c0:	f000 fba4 	bl	8014f0c <__lshift>
 80147c4:	f10a 0301 	add.w	r3, sl, #1
 80147c8:	9307      	str	r3, [sp, #28]
 80147ca:	9b00      	ldr	r3, [sp, #0]
 80147cc:	4453      	add	r3, sl
 80147ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80147d0:	9b02      	ldr	r3, [sp, #8]
 80147d2:	f003 0301 	and.w	r3, r3, #1
 80147d6:	462f      	mov	r7, r5
 80147d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80147da:	4605      	mov	r5, r0
 80147dc:	9b07      	ldr	r3, [sp, #28]
 80147de:	4621      	mov	r1, r4
 80147e0:	3b01      	subs	r3, #1
 80147e2:	4648      	mov	r0, r9
 80147e4:	9300      	str	r3, [sp, #0]
 80147e6:	f7ff fa99 	bl	8013d1c <quorem>
 80147ea:	4639      	mov	r1, r7
 80147ec:	9002      	str	r0, [sp, #8]
 80147ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80147f2:	4648      	mov	r0, r9
 80147f4:	f000 fbf6 	bl	8014fe4 <__mcmp>
 80147f8:	462a      	mov	r2, r5
 80147fa:	9008      	str	r0, [sp, #32]
 80147fc:	4621      	mov	r1, r4
 80147fe:	4658      	mov	r0, fp
 8014800:	f000 fc0c 	bl	801501c <__mdiff>
 8014804:	68c2      	ldr	r2, [r0, #12]
 8014806:	4606      	mov	r6, r0
 8014808:	bb02      	cbnz	r2, 801484c <_dtoa_r+0xa1c>
 801480a:	4601      	mov	r1, r0
 801480c:	4648      	mov	r0, r9
 801480e:	f000 fbe9 	bl	8014fe4 <__mcmp>
 8014812:	4602      	mov	r2, r0
 8014814:	4631      	mov	r1, r6
 8014816:	4658      	mov	r0, fp
 8014818:	920e      	str	r2, [sp, #56]	@ 0x38
 801481a:	f000 f95f 	bl	8014adc <_Bfree>
 801481e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014820:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014822:	9e07      	ldr	r6, [sp, #28]
 8014824:	ea43 0102 	orr.w	r1, r3, r2
 8014828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801482a:	4319      	orrs	r1, r3
 801482c:	d110      	bne.n	8014850 <_dtoa_r+0xa20>
 801482e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014832:	d029      	beq.n	8014888 <_dtoa_r+0xa58>
 8014834:	9b08      	ldr	r3, [sp, #32]
 8014836:	2b00      	cmp	r3, #0
 8014838:	dd02      	ble.n	8014840 <_dtoa_r+0xa10>
 801483a:	9b02      	ldr	r3, [sp, #8]
 801483c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8014840:	9b00      	ldr	r3, [sp, #0]
 8014842:	f883 8000 	strb.w	r8, [r3]
 8014846:	e63f      	b.n	80144c8 <_dtoa_r+0x698>
 8014848:	4628      	mov	r0, r5
 801484a:	e7bb      	b.n	80147c4 <_dtoa_r+0x994>
 801484c:	2201      	movs	r2, #1
 801484e:	e7e1      	b.n	8014814 <_dtoa_r+0x9e4>
 8014850:	9b08      	ldr	r3, [sp, #32]
 8014852:	2b00      	cmp	r3, #0
 8014854:	db04      	blt.n	8014860 <_dtoa_r+0xa30>
 8014856:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8014858:	430b      	orrs	r3, r1
 801485a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801485c:	430b      	orrs	r3, r1
 801485e:	d120      	bne.n	80148a2 <_dtoa_r+0xa72>
 8014860:	2a00      	cmp	r2, #0
 8014862:	dded      	ble.n	8014840 <_dtoa_r+0xa10>
 8014864:	4649      	mov	r1, r9
 8014866:	2201      	movs	r2, #1
 8014868:	4658      	mov	r0, fp
 801486a:	f000 fb4f 	bl	8014f0c <__lshift>
 801486e:	4621      	mov	r1, r4
 8014870:	4681      	mov	r9, r0
 8014872:	f000 fbb7 	bl	8014fe4 <__mcmp>
 8014876:	2800      	cmp	r0, #0
 8014878:	dc03      	bgt.n	8014882 <_dtoa_r+0xa52>
 801487a:	d1e1      	bne.n	8014840 <_dtoa_r+0xa10>
 801487c:	f018 0f01 	tst.w	r8, #1
 8014880:	d0de      	beq.n	8014840 <_dtoa_r+0xa10>
 8014882:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8014886:	d1d8      	bne.n	801483a <_dtoa_r+0xa0a>
 8014888:	9a00      	ldr	r2, [sp, #0]
 801488a:	2339      	movs	r3, #57	@ 0x39
 801488c:	7013      	strb	r3, [r2, #0]
 801488e:	4633      	mov	r3, r6
 8014890:	461e      	mov	r6, r3
 8014892:	3b01      	subs	r3, #1
 8014894:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8014898:	2a39      	cmp	r2, #57	@ 0x39
 801489a:	d052      	beq.n	8014942 <_dtoa_r+0xb12>
 801489c:	3201      	adds	r2, #1
 801489e:	701a      	strb	r2, [r3, #0]
 80148a0:	e612      	b.n	80144c8 <_dtoa_r+0x698>
 80148a2:	2a00      	cmp	r2, #0
 80148a4:	dd07      	ble.n	80148b6 <_dtoa_r+0xa86>
 80148a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80148aa:	d0ed      	beq.n	8014888 <_dtoa_r+0xa58>
 80148ac:	9a00      	ldr	r2, [sp, #0]
 80148ae:	f108 0301 	add.w	r3, r8, #1
 80148b2:	7013      	strb	r3, [r2, #0]
 80148b4:	e608      	b.n	80144c8 <_dtoa_r+0x698>
 80148b6:	9b07      	ldr	r3, [sp, #28]
 80148b8:	9a07      	ldr	r2, [sp, #28]
 80148ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80148be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80148c0:	4293      	cmp	r3, r2
 80148c2:	d028      	beq.n	8014916 <_dtoa_r+0xae6>
 80148c4:	4649      	mov	r1, r9
 80148c6:	2300      	movs	r3, #0
 80148c8:	220a      	movs	r2, #10
 80148ca:	4658      	mov	r0, fp
 80148cc:	f000 f928 	bl	8014b20 <__multadd>
 80148d0:	42af      	cmp	r7, r5
 80148d2:	4681      	mov	r9, r0
 80148d4:	f04f 0300 	mov.w	r3, #0
 80148d8:	f04f 020a 	mov.w	r2, #10
 80148dc:	4639      	mov	r1, r7
 80148de:	4658      	mov	r0, fp
 80148e0:	d107      	bne.n	80148f2 <_dtoa_r+0xac2>
 80148e2:	f000 f91d 	bl	8014b20 <__multadd>
 80148e6:	4607      	mov	r7, r0
 80148e8:	4605      	mov	r5, r0
 80148ea:	9b07      	ldr	r3, [sp, #28]
 80148ec:	3301      	adds	r3, #1
 80148ee:	9307      	str	r3, [sp, #28]
 80148f0:	e774      	b.n	80147dc <_dtoa_r+0x9ac>
 80148f2:	f000 f915 	bl	8014b20 <__multadd>
 80148f6:	4629      	mov	r1, r5
 80148f8:	4607      	mov	r7, r0
 80148fa:	2300      	movs	r3, #0
 80148fc:	220a      	movs	r2, #10
 80148fe:	4658      	mov	r0, fp
 8014900:	f000 f90e 	bl	8014b20 <__multadd>
 8014904:	4605      	mov	r5, r0
 8014906:	e7f0      	b.n	80148ea <_dtoa_r+0xaba>
 8014908:	9b00      	ldr	r3, [sp, #0]
 801490a:	2b00      	cmp	r3, #0
 801490c:	bfcc      	ite	gt
 801490e:	461e      	movgt	r6, r3
 8014910:	2601      	movle	r6, #1
 8014912:	4456      	add	r6, sl
 8014914:	2700      	movs	r7, #0
 8014916:	4649      	mov	r1, r9
 8014918:	2201      	movs	r2, #1
 801491a:	4658      	mov	r0, fp
 801491c:	f000 faf6 	bl	8014f0c <__lshift>
 8014920:	4621      	mov	r1, r4
 8014922:	4681      	mov	r9, r0
 8014924:	f000 fb5e 	bl	8014fe4 <__mcmp>
 8014928:	2800      	cmp	r0, #0
 801492a:	dcb0      	bgt.n	801488e <_dtoa_r+0xa5e>
 801492c:	d102      	bne.n	8014934 <_dtoa_r+0xb04>
 801492e:	f018 0f01 	tst.w	r8, #1
 8014932:	d1ac      	bne.n	801488e <_dtoa_r+0xa5e>
 8014934:	4633      	mov	r3, r6
 8014936:	461e      	mov	r6, r3
 8014938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801493c:	2a30      	cmp	r2, #48	@ 0x30
 801493e:	d0fa      	beq.n	8014936 <_dtoa_r+0xb06>
 8014940:	e5c2      	b.n	80144c8 <_dtoa_r+0x698>
 8014942:	459a      	cmp	sl, r3
 8014944:	d1a4      	bne.n	8014890 <_dtoa_r+0xa60>
 8014946:	9b04      	ldr	r3, [sp, #16]
 8014948:	3301      	adds	r3, #1
 801494a:	9304      	str	r3, [sp, #16]
 801494c:	2331      	movs	r3, #49	@ 0x31
 801494e:	f88a 3000 	strb.w	r3, [sl]
 8014952:	e5b9      	b.n	80144c8 <_dtoa_r+0x698>
 8014954:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014956:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80149b4 <_dtoa_r+0xb84>
 801495a:	b11b      	cbz	r3, 8014964 <_dtoa_r+0xb34>
 801495c:	f10a 0308 	add.w	r3, sl, #8
 8014960:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8014962:	6013      	str	r3, [r2, #0]
 8014964:	4650      	mov	r0, sl
 8014966:	b019      	add	sp, #100	@ 0x64
 8014968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801496c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801496e:	2b01      	cmp	r3, #1
 8014970:	f77f ae37 	ble.w	80145e2 <_dtoa_r+0x7b2>
 8014974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014976:	930a      	str	r3, [sp, #40]	@ 0x28
 8014978:	2001      	movs	r0, #1
 801497a:	e655      	b.n	8014628 <_dtoa_r+0x7f8>
 801497c:	9b00      	ldr	r3, [sp, #0]
 801497e:	2b00      	cmp	r3, #0
 8014980:	f77f aed6 	ble.w	8014730 <_dtoa_r+0x900>
 8014984:	4656      	mov	r6, sl
 8014986:	4621      	mov	r1, r4
 8014988:	4648      	mov	r0, r9
 801498a:	f7ff f9c7 	bl	8013d1c <quorem>
 801498e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8014992:	f806 8b01 	strb.w	r8, [r6], #1
 8014996:	9b00      	ldr	r3, [sp, #0]
 8014998:	eba6 020a 	sub.w	r2, r6, sl
 801499c:	4293      	cmp	r3, r2
 801499e:	ddb3      	ble.n	8014908 <_dtoa_r+0xad8>
 80149a0:	4649      	mov	r1, r9
 80149a2:	2300      	movs	r3, #0
 80149a4:	220a      	movs	r2, #10
 80149a6:	4658      	mov	r0, fp
 80149a8:	f000 f8ba 	bl	8014b20 <__multadd>
 80149ac:	4681      	mov	r9, r0
 80149ae:	e7ea      	b.n	8014986 <_dtoa_r+0xb56>
 80149b0:	08019fe3 	.word	0x08019fe3
 80149b4:	08019f67 	.word	0x08019f67

080149b8 <_free_r>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	4605      	mov	r5, r0
 80149bc:	2900      	cmp	r1, #0
 80149be:	d041      	beq.n	8014a44 <_free_r+0x8c>
 80149c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149c4:	1f0c      	subs	r4, r1, #4
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	bfb8      	it	lt
 80149ca:	18e4      	addlt	r4, r4, r3
 80149cc:	f7fe f912 	bl	8012bf4 <__malloc_lock>
 80149d0:	4a1d      	ldr	r2, [pc, #116]	@ (8014a48 <_free_r+0x90>)
 80149d2:	6813      	ldr	r3, [r2, #0]
 80149d4:	b933      	cbnz	r3, 80149e4 <_free_r+0x2c>
 80149d6:	6063      	str	r3, [r4, #4]
 80149d8:	6014      	str	r4, [r2, #0]
 80149da:	4628      	mov	r0, r5
 80149dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80149e0:	f7fe b90e 	b.w	8012c00 <__malloc_unlock>
 80149e4:	42a3      	cmp	r3, r4
 80149e6:	d908      	bls.n	80149fa <_free_r+0x42>
 80149e8:	6820      	ldr	r0, [r4, #0]
 80149ea:	1821      	adds	r1, r4, r0
 80149ec:	428b      	cmp	r3, r1
 80149ee:	bf01      	itttt	eq
 80149f0:	6819      	ldreq	r1, [r3, #0]
 80149f2:	685b      	ldreq	r3, [r3, #4]
 80149f4:	1809      	addeq	r1, r1, r0
 80149f6:	6021      	streq	r1, [r4, #0]
 80149f8:	e7ed      	b.n	80149d6 <_free_r+0x1e>
 80149fa:	461a      	mov	r2, r3
 80149fc:	685b      	ldr	r3, [r3, #4]
 80149fe:	b10b      	cbz	r3, 8014a04 <_free_r+0x4c>
 8014a00:	42a3      	cmp	r3, r4
 8014a02:	d9fa      	bls.n	80149fa <_free_r+0x42>
 8014a04:	6811      	ldr	r1, [r2, #0]
 8014a06:	1850      	adds	r0, r2, r1
 8014a08:	42a0      	cmp	r0, r4
 8014a0a:	d10b      	bne.n	8014a24 <_free_r+0x6c>
 8014a0c:	6820      	ldr	r0, [r4, #0]
 8014a0e:	4401      	add	r1, r0
 8014a10:	1850      	adds	r0, r2, r1
 8014a12:	4283      	cmp	r3, r0
 8014a14:	6011      	str	r1, [r2, #0]
 8014a16:	d1e0      	bne.n	80149da <_free_r+0x22>
 8014a18:	6818      	ldr	r0, [r3, #0]
 8014a1a:	685b      	ldr	r3, [r3, #4]
 8014a1c:	6053      	str	r3, [r2, #4]
 8014a1e:	4408      	add	r0, r1
 8014a20:	6010      	str	r0, [r2, #0]
 8014a22:	e7da      	b.n	80149da <_free_r+0x22>
 8014a24:	d902      	bls.n	8014a2c <_free_r+0x74>
 8014a26:	230c      	movs	r3, #12
 8014a28:	602b      	str	r3, [r5, #0]
 8014a2a:	e7d6      	b.n	80149da <_free_r+0x22>
 8014a2c:	6820      	ldr	r0, [r4, #0]
 8014a2e:	1821      	adds	r1, r4, r0
 8014a30:	428b      	cmp	r3, r1
 8014a32:	bf04      	itt	eq
 8014a34:	6819      	ldreq	r1, [r3, #0]
 8014a36:	685b      	ldreq	r3, [r3, #4]
 8014a38:	6063      	str	r3, [r4, #4]
 8014a3a:	bf04      	itt	eq
 8014a3c:	1809      	addeq	r1, r1, r0
 8014a3e:	6021      	streq	r1, [r4, #0]
 8014a40:	6054      	str	r4, [r2, #4]
 8014a42:	e7ca      	b.n	80149da <_free_r+0x22>
 8014a44:	bd38      	pop	{r3, r4, r5, pc}
 8014a46:	bf00      	nop
 8014a48:	20001c98 	.word	0x20001c98

08014a4c <malloc>:
 8014a4c:	4b02      	ldr	r3, [pc, #8]	@ (8014a58 <malloc+0xc>)
 8014a4e:	4601      	mov	r1, r0
 8014a50:	6818      	ldr	r0, [r3, #0]
 8014a52:	f7fe b84f 	b.w	8012af4 <_malloc_r>
 8014a56:	bf00      	nop
 8014a58:	20000068 	.word	0x20000068

08014a5c <_Balloc>:
 8014a5c:	b570      	push	{r4, r5, r6, lr}
 8014a5e:	69c6      	ldr	r6, [r0, #28]
 8014a60:	4604      	mov	r4, r0
 8014a62:	460d      	mov	r5, r1
 8014a64:	b976      	cbnz	r6, 8014a84 <_Balloc+0x28>
 8014a66:	2010      	movs	r0, #16
 8014a68:	f7ff fff0 	bl	8014a4c <malloc>
 8014a6c:	4602      	mov	r2, r0
 8014a6e:	61e0      	str	r0, [r4, #28]
 8014a70:	b920      	cbnz	r0, 8014a7c <_Balloc+0x20>
 8014a72:	4b18      	ldr	r3, [pc, #96]	@ (8014ad4 <_Balloc+0x78>)
 8014a74:	4818      	ldr	r0, [pc, #96]	@ (8014ad8 <_Balloc+0x7c>)
 8014a76:	216b      	movs	r1, #107	@ 0x6b
 8014a78:	f002 f8ee 	bl	8016c58 <__assert_func>
 8014a7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014a80:	6006      	str	r6, [r0, #0]
 8014a82:	60c6      	str	r6, [r0, #12]
 8014a84:	69e6      	ldr	r6, [r4, #28]
 8014a86:	68f3      	ldr	r3, [r6, #12]
 8014a88:	b183      	cbz	r3, 8014aac <_Balloc+0x50>
 8014a8a:	69e3      	ldr	r3, [r4, #28]
 8014a8c:	68db      	ldr	r3, [r3, #12]
 8014a8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014a92:	b9b8      	cbnz	r0, 8014ac4 <_Balloc+0x68>
 8014a94:	2101      	movs	r1, #1
 8014a96:	fa01 f605 	lsl.w	r6, r1, r5
 8014a9a:	1d72      	adds	r2, r6, #5
 8014a9c:	0092      	lsls	r2, r2, #2
 8014a9e:	4620      	mov	r0, r4
 8014aa0:	f7fd fff2 	bl	8012a88 <_calloc_r>
 8014aa4:	b160      	cbz	r0, 8014ac0 <_Balloc+0x64>
 8014aa6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014aaa:	e00e      	b.n	8014aca <_Balloc+0x6e>
 8014aac:	2221      	movs	r2, #33	@ 0x21
 8014aae:	2104      	movs	r1, #4
 8014ab0:	4620      	mov	r0, r4
 8014ab2:	f7fd ffe9 	bl	8012a88 <_calloc_r>
 8014ab6:	69e3      	ldr	r3, [r4, #28]
 8014ab8:	60f0      	str	r0, [r6, #12]
 8014aba:	68db      	ldr	r3, [r3, #12]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d1e4      	bne.n	8014a8a <_Balloc+0x2e>
 8014ac0:	2000      	movs	r0, #0
 8014ac2:	bd70      	pop	{r4, r5, r6, pc}
 8014ac4:	6802      	ldr	r2, [r0, #0]
 8014ac6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014aca:	2300      	movs	r3, #0
 8014acc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014ad0:	e7f7      	b.n	8014ac2 <_Balloc+0x66>
 8014ad2:	bf00      	nop
 8014ad4:	08019f74 	.word	0x08019f74
 8014ad8:	08019ff4 	.word	0x08019ff4

08014adc <_Bfree>:
 8014adc:	b570      	push	{r4, r5, r6, lr}
 8014ade:	69c6      	ldr	r6, [r0, #28]
 8014ae0:	4605      	mov	r5, r0
 8014ae2:	460c      	mov	r4, r1
 8014ae4:	b976      	cbnz	r6, 8014b04 <_Bfree+0x28>
 8014ae6:	2010      	movs	r0, #16
 8014ae8:	f7ff ffb0 	bl	8014a4c <malloc>
 8014aec:	4602      	mov	r2, r0
 8014aee:	61e8      	str	r0, [r5, #28]
 8014af0:	b920      	cbnz	r0, 8014afc <_Bfree+0x20>
 8014af2:	4b09      	ldr	r3, [pc, #36]	@ (8014b18 <_Bfree+0x3c>)
 8014af4:	4809      	ldr	r0, [pc, #36]	@ (8014b1c <_Bfree+0x40>)
 8014af6:	218f      	movs	r1, #143	@ 0x8f
 8014af8:	f002 f8ae 	bl	8016c58 <__assert_func>
 8014afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b00:	6006      	str	r6, [r0, #0]
 8014b02:	60c6      	str	r6, [r0, #12]
 8014b04:	b13c      	cbz	r4, 8014b16 <_Bfree+0x3a>
 8014b06:	69eb      	ldr	r3, [r5, #28]
 8014b08:	6862      	ldr	r2, [r4, #4]
 8014b0a:	68db      	ldr	r3, [r3, #12]
 8014b0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014b10:	6021      	str	r1, [r4, #0]
 8014b12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014b16:	bd70      	pop	{r4, r5, r6, pc}
 8014b18:	08019f74 	.word	0x08019f74
 8014b1c:	08019ff4 	.word	0x08019ff4

08014b20 <__multadd>:
 8014b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b24:	690d      	ldr	r5, [r1, #16]
 8014b26:	4607      	mov	r7, r0
 8014b28:	460c      	mov	r4, r1
 8014b2a:	461e      	mov	r6, r3
 8014b2c:	f101 0c14 	add.w	ip, r1, #20
 8014b30:	2000      	movs	r0, #0
 8014b32:	f8dc 3000 	ldr.w	r3, [ip]
 8014b36:	b299      	uxth	r1, r3
 8014b38:	fb02 6101 	mla	r1, r2, r1, r6
 8014b3c:	0c1e      	lsrs	r6, r3, #16
 8014b3e:	0c0b      	lsrs	r3, r1, #16
 8014b40:	fb02 3306 	mla	r3, r2, r6, r3
 8014b44:	b289      	uxth	r1, r1
 8014b46:	3001      	adds	r0, #1
 8014b48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014b4c:	4285      	cmp	r5, r0
 8014b4e:	f84c 1b04 	str.w	r1, [ip], #4
 8014b52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014b56:	dcec      	bgt.n	8014b32 <__multadd+0x12>
 8014b58:	b30e      	cbz	r6, 8014b9e <__multadd+0x7e>
 8014b5a:	68a3      	ldr	r3, [r4, #8]
 8014b5c:	42ab      	cmp	r3, r5
 8014b5e:	dc19      	bgt.n	8014b94 <__multadd+0x74>
 8014b60:	6861      	ldr	r1, [r4, #4]
 8014b62:	4638      	mov	r0, r7
 8014b64:	3101      	adds	r1, #1
 8014b66:	f7ff ff79 	bl	8014a5c <_Balloc>
 8014b6a:	4680      	mov	r8, r0
 8014b6c:	b928      	cbnz	r0, 8014b7a <__multadd+0x5a>
 8014b6e:	4602      	mov	r2, r0
 8014b70:	4b0c      	ldr	r3, [pc, #48]	@ (8014ba4 <__multadd+0x84>)
 8014b72:	480d      	ldr	r0, [pc, #52]	@ (8014ba8 <__multadd+0x88>)
 8014b74:	21ba      	movs	r1, #186	@ 0xba
 8014b76:	f002 f86f 	bl	8016c58 <__assert_func>
 8014b7a:	6922      	ldr	r2, [r4, #16]
 8014b7c:	3202      	adds	r2, #2
 8014b7e:	f104 010c 	add.w	r1, r4, #12
 8014b82:	0092      	lsls	r2, r2, #2
 8014b84:	300c      	adds	r0, #12
 8014b86:	f7ff f8b4 	bl	8013cf2 <memcpy>
 8014b8a:	4621      	mov	r1, r4
 8014b8c:	4638      	mov	r0, r7
 8014b8e:	f7ff ffa5 	bl	8014adc <_Bfree>
 8014b92:	4644      	mov	r4, r8
 8014b94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014b98:	3501      	adds	r5, #1
 8014b9a:	615e      	str	r6, [r3, #20]
 8014b9c:	6125      	str	r5, [r4, #16]
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ba4:	08019fe3 	.word	0x08019fe3
 8014ba8:	08019ff4 	.word	0x08019ff4

08014bac <__s2b>:
 8014bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bb0:	460c      	mov	r4, r1
 8014bb2:	4615      	mov	r5, r2
 8014bb4:	461f      	mov	r7, r3
 8014bb6:	2209      	movs	r2, #9
 8014bb8:	3308      	adds	r3, #8
 8014bba:	4606      	mov	r6, r0
 8014bbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8014bc0:	2100      	movs	r1, #0
 8014bc2:	2201      	movs	r2, #1
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	db09      	blt.n	8014bdc <__s2b+0x30>
 8014bc8:	4630      	mov	r0, r6
 8014bca:	f7ff ff47 	bl	8014a5c <_Balloc>
 8014bce:	b940      	cbnz	r0, 8014be2 <__s2b+0x36>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	4b19      	ldr	r3, [pc, #100]	@ (8014c38 <__s2b+0x8c>)
 8014bd4:	4819      	ldr	r0, [pc, #100]	@ (8014c3c <__s2b+0x90>)
 8014bd6:	21d3      	movs	r1, #211	@ 0xd3
 8014bd8:	f002 f83e 	bl	8016c58 <__assert_func>
 8014bdc:	0052      	lsls	r2, r2, #1
 8014bde:	3101      	adds	r1, #1
 8014be0:	e7f0      	b.n	8014bc4 <__s2b+0x18>
 8014be2:	9b08      	ldr	r3, [sp, #32]
 8014be4:	6143      	str	r3, [r0, #20]
 8014be6:	2d09      	cmp	r5, #9
 8014be8:	f04f 0301 	mov.w	r3, #1
 8014bec:	6103      	str	r3, [r0, #16]
 8014bee:	dd16      	ble.n	8014c1e <__s2b+0x72>
 8014bf0:	f104 0909 	add.w	r9, r4, #9
 8014bf4:	46c8      	mov	r8, r9
 8014bf6:	442c      	add	r4, r5
 8014bf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014bfc:	4601      	mov	r1, r0
 8014bfe:	3b30      	subs	r3, #48	@ 0x30
 8014c00:	220a      	movs	r2, #10
 8014c02:	4630      	mov	r0, r6
 8014c04:	f7ff ff8c 	bl	8014b20 <__multadd>
 8014c08:	45a0      	cmp	r8, r4
 8014c0a:	d1f5      	bne.n	8014bf8 <__s2b+0x4c>
 8014c0c:	f1a5 0408 	sub.w	r4, r5, #8
 8014c10:	444c      	add	r4, r9
 8014c12:	1b2d      	subs	r5, r5, r4
 8014c14:	1963      	adds	r3, r4, r5
 8014c16:	42bb      	cmp	r3, r7
 8014c18:	db04      	blt.n	8014c24 <__s2b+0x78>
 8014c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c1e:	340a      	adds	r4, #10
 8014c20:	2509      	movs	r5, #9
 8014c22:	e7f6      	b.n	8014c12 <__s2b+0x66>
 8014c24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014c28:	4601      	mov	r1, r0
 8014c2a:	3b30      	subs	r3, #48	@ 0x30
 8014c2c:	220a      	movs	r2, #10
 8014c2e:	4630      	mov	r0, r6
 8014c30:	f7ff ff76 	bl	8014b20 <__multadd>
 8014c34:	e7ee      	b.n	8014c14 <__s2b+0x68>
 8014c36:	bf00      	nop
 8014c38:	08019fe3 	.word	0x08019fe3
 8014c3c:	08019ff4 	.word	0x08019ff4

08014c40 <__hi0bits>:
 8014c40:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8014c44:	4603      	mov	r3, r0
 8014c46:	bf36      	itet	cc
 8014c48:	0403      	lslcc	r3, r0, #16
 8014c4a:	2000      	movcs	r0, #0
 8014c4c:	2010      	movcc	r0, #16
 8014c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8014c52:	bf3c      	itt	cc
 8014c54:	021b      	lslcc	r3, r3, #8
 8014c56:	3008      	addcc	r0, #8
 8014c58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8014c5c:	bf3c      	itt	cc
 8014c5e:	011b      	lslcc	r3, r3, #4
 8014c60:	3004      	addcc	r0, #4
 8014c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014c66:	bf3c      	itt	cc
 8014c68:	009b      	lslcc	r3, r3, #2
 8014c6a:	3002      	addcc	r0, #2
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	db05      	blt.n	8014c7c <__hi0bits+0x3c>
 8014c70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8014c74:	f100 0001 	add.w	r0, r0, #1
 8014c78:	bf08      	it	eq
 8014c7a:	2020      	moveq	r0, #32
 8014c7c:	4770      	bx	lr

08014c7e <__lo0bits>:
 8014c7e:	6803      	ldr	r3, [r0, #0]
 8014c80:	4602      	mov	r2, r0
 8014c82:	f013 0007 	ands.w	r0, r3, #7
 8014c86:	d00b      	beq.n	8014ca0 <__lo0bits+0x22>
 8014c88:	07d9      	lsls	r1, r3, #31
 8014c8a:	d421      	bmi.n	8014cd0 <__lo0bits+0x52>
 8014c8c:	0798      	lsls	r0, r3, #30
 8014c8e:	bf49      	itett	mi
 8014c90:	085b      	lsrmi	r3, r3, #1
 8014c92:	089b      	lsrpl	r3, r3, #2
 8014c94:	2001      	movmi	r0, #1
 8014c96:	6013      	strmi	r3, [r2, #0]
 8014c98:	bf5c      	itt	pl
 8014c9a:	6013      	strpl	r3, [r2, #0]
 8014c9c:	2002      	movpl	r0, #2
 8014c9e:	4770      	bx	lr
 8014ca0:	b299      	uxth	r1, r3
 8014ca2:	b909      	cbnz	r1, 8014ca8 <__lo0bits+0x2a>
 8014ca4:	0c1b      	lsrs	r3, r3, #16
 8014ca6:	2010      	movs	r0, #16
 8014ca8:	b2d9      	uxtb	r1, r3
 8014caa:	b909      	cbnz	r1, 8014cb0 <__lo0bits+0x32>
 8014cac:	3008      	adds	r0, #8
 8014cae:	0a1b      	lsrs	r3, r3, #8
 8014cb0:	0719      	lsls	r1, r3, #28
 8014cb2:	bf04      	itt	eq
 8014cb4:	091b      	lsreq	r3, r3, #4
 8014cb6:	3004      	addeq	r0, #4
 8014cb8:	0799      	lsls	r1, r3, #30
 8014cba:	bf04      	itt	eq
 8014cbc:	089b      	lsreq	r3, r3, #2
 8014cbe:	3002      	addeq	r0, #2
 8014cc0:	07d9      	lsls	r1, r3, #31
 8014cc2:	d403      	bmi.n	8014ccc <__lo0bits+0x4e>
 8014cc4:	085b      	lsrs	r3, r3, #1
 8014cc6:	f100 0001 	add.w	r0, r0, #1
 8014cca:	d003      	beq.n	8014cd4 <__lo0bits+0x56>
 8014ccc:	6013      	str	r3, [r2, #0]
 8014cce:	4770      	bx	lr
 8014cd0:	2000      	movs	r0, #0
 8014cd2:	4770      	bx	lr
 8014cd4:	2020      	movs	r0, #32
 8014cd6:	4770      	bx	lr

08014cd8 <__i2b>:
 8014cd8:	b510      	push	{r4, lr}
 8014cda:	460c      	mov	r4, r1
 8014cdc:	2101      	movs	r1, #1
 8014cde:	f7ff febd 	bl	8014a5c <_Balloc>
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	b928      	cbnz	r0, 8014cf2 <__i2b+0x1a>
 8014ce6:	4b05      	ldr	r3, [pc, #20]	@ (8014cfc <__i2b+0x24>)
 8014ce8:	4805      	ldr	r0, [pc, #20]	@ (8014d00 <__i2b+0x28>)
 8014cea:	f240 1145 	movw	r1, #325	@ 0x145
 8014cee:	f001 ffb3 	bl	8016c58 <__assert_func>
 8014cf2:	2301      	movs	r3, #1
 8014cf4:	6144      	str	r4, [r0, #20]
 8014cf6:	6103      	str	r3, [r0, #16]
 8014cf8:	bd10      	pop	{r4, pc}
 8014cfa:	bf00      	nop
 8014cfc:	08019fe3 	.word	0x08019fe3
 8014d00:	08019ff4 	.word	0x08019ff4

08014d04 <__multiply>:
 8014d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d08:	4614      	mov	r4, r2
 8014d0a:	690a      	ldr	r2, [r1, #16]
 8014d0c:	6923      	ldr	r3, [r4, #16]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	bfa8      	it	ge
 8014d12:	4623      	movge	r3, r4
 8014d14:	460f      	mov	r7, r1
 8014d16:	bfa4      	itt	ge
 8014d18:	460c      	movge	r4, r1
 8014d1a:	461f      	movge	r7, r3
 8014d1c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8014d20:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8014d24:	68a3      	ldr	r3, [r4, #8]
 8014d26:	6861      	ldr	r1, [r4, #4]
 8014d28:	eb0a 0609 	add.w	r6, sl, r9
 8014d2c:	42b3      	cmp	r3, r6
 8014d2e:	b085      	sub	sp, #20
 8014d30:	bfb8      	it	lt
 8014d32:	3101      	addlt	r1, #1
 8014d34:	f7ff fe92 	bl	8014a5c <_Balloc>
 8014d38:	b930      	cbnz	r0, 8014d48 <__multiply+0x44>
 8014d3a:	4602      	mov	r2, r0
 8014d3c:	4b44      	ldr	r3, [pc, #272]	@ (8014e50 <__multiply+0x14c>)
 8014d3e:	4845      	ldr	r0, [pc, #276]	@ (8014e54 <__multiply+0x150>)
 8014d40:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8014d44:	f001 ff88 	bl	8016c58 <__assert_func>
 8014d48:	f100 0514 	add.w	r5, r0, #20
 8014d4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014d50:	462b      	mov	r3, r5
 8014d52:	2200      	movs	r2, #0
 8014d54:	4543      	cmp	r3, r8
 8014d56:	d321      	bcc.n	8014d9c <__multiply+0x98>
 8014d58:	f107 0114 	add.w	r1, r7, #20
 8014d5c:	f104 0214 	add.w	r2, r4, #20
 8014d60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8014d64:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8014d68:	9302      	str	r3, [sp, #8]
 8014d6a:	1b13      	subs	r3, r2, r4
 8014d6c:	3b15      	subs	r3, #21
 8014d6e:	f023 0303 	bic.w	r3, r3, #3
 8014d72:	3304      	adds	r3, #4
 8014d74:	f104 0715 	add.w	r7, r4, #21
 8014d78:	42ba      	cmp	r2, r7
 8014d7a:	bf38      	it	cc
 8014d7c:	2304      	movcc	r3, #4
 8014d7e:	9301      	str	r3, [sp, #4]
 8014d80:	9b02      	ldr	r3, [sp, #8]
 8014d82:	9103      	str	r1, [sp, #12]
 8014d84:	428b      	cmp	r3, r1
 8014d86:	d80c      	bhi.n	8014da2 <__multiply+0x9e>
 8014d88:	2e00      	cmp	r6, #0
 8014d8a:	dd03      	ble.n	8014d94 <__multiply+0x90>
 8014d8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d05b      	beq.n	8014e4c <__multiply+0x148>
 8014d94:	6106      	str	r6, [r0, #16]
 8014d96:	b005      	add	sp, #20
 8014d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d9c:	f843 2b04 	str.w	r2, [r3], #4
 8014da0:	e7d8      	b.n	8014d54 <__multiply+0x50>
 8014da2:	f8b1 a000 	ldrh.w	sl, [r1]
 8014da6:	f1ba 0f00 	cmp.w	sl, #0
 8014daa:	d024      	beq.n	8014df6 <__multiply+0xf2>
 8014dac:	f104 0e14 	add.w	lr, r4, #20
 8014db0:	46a9      	mov	r9, r5
 8014db2:	f04f 0c00 	mov.w	ip, #0
 8014db6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014dba:	f8d9 3000 	ldr.w	r3, [r9]
 8014dbe:	fa1f fb87 	uxth.w	fp, r7
 8014dc2:	b29b      	uxth	r3, r3
 8014dc4:	fb0a 330b 	mla	r3, sl, fp, r3
 8014dc8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8014dcc:	f8d9 7000 	ldr.w	r7, [r9]
 8014dd0:	4463      	add	r3, ip
 8014dd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014dd6:	fb0a c70b 	mla	r7, sl, fp, ip
 8014dda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8014dde:	b29b      	uxth	r3, r3
 8014de0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014de4:	4572      	cmp	r2, lr
 8014de6:	f849 3b04 	str.w	r3, [r9], #4
 8014dea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8014dee:	d8e2      	bhi.n	8014db6 <__multiply+0xb2>
 8014df0:	9b01      	ldr	r3, [sp, #4]
 8014df2:	f845 c003 	str.w	ip, [r5, r3]
 8014df6:	9b03      	ldr	r3, [sp, #12]
 8014df8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8014dfc:	3104      	adds	r1, #4
 8014dfe:	f1b9 0f00 	cmp.w	r9, #0
 8014e02:	d021      	beq.n	8014e48 <__multiply+0x144>
 8014e04:	682b      	ldr	r3, [r5, #0]
 8014e06:	f104 0c14 	add.w	ip, r4, #20
 8014e0a:	46ae      	mov	lr, r5
 8014e0c:	f04f 0a00 	mov.w	sl, #0
 8014e10:	f8bc b000 	ldrh.w	fp, [ip]
 8014e14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8014e18:	fb09 770b 	mla	r7, r9, fp, r7
 8014e1c:	4457      	add	r7, sl
 8014e1e:	b29b      	uxth	r3, r3
 8014e20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014e24:	f84e 3b04 	str.w	r3, [lr], #4
 8014e28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8014e2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e30:	f8be 3000 	ldrh.w	r3, [lr]
 8014e34:	fb09 330a 	mla	r3, r9, sl, r3
 8014e38:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8014e3c:	4562      	cmp	r2, ip
 8014e3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014e42:	d8e5      	bhi.n	8014e10 <__multiply+0x10c>
 8014e44:	9f01      	ldr	r7, [sp, #4]
 8014e46:	51eb      	str	r3, [r5, r7]
 8014e48:	3504      	adds	r5, #4
 8014e4a:	e799      	b.n	8014d80 <__multiply+0x7c>
 8014e4c:	3e01      	subs	r6, #1
 8014e4e:	e79b      	b.n	8014d88 <__multiply+0x84>
 8014e50:	08019fe3 	.word	0x08019fe3
 8014e54:	08019ff4 	.word	0x08019ff4

08014e58 <__pow5mult>:
 8014e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e5c:	4615      	mov	r5, r2
 8014e5e:	f012 0203 	ands.w	r2, r2, #3
 8014e62:	4607      	mov	r7, r0
 8014e64:	460e      	mov	r6, r1
 8014e66:	d007      	beq.n	8014e78 <__pow5mult+0x20>
 8014e68:	4c25      	ldr	r4, [pc, #148]	@ (8014f00 <__pow5mult+0xa8>)
 8014e6a:	3a01      	subs	r2, #1
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014e72:	f7ff fe55 	bl	8014b20 <__multadd>
 8014e76:	4606      	mov	r6, r0
 8014e78:	10ad      	asrs	r5, r5, #2
 8014e7a:	d03d      	beq.n	8014ef8 <__pow5mult+0xa0>
 8014e7c:	69fc      	ldr	r4, [r7, #28]
 8014e7e:	b97c      	cbnz	r4, 8014ea0 <__pow5mult+0x48>
 8014e80:	2010      	movs	r0, #16
 8014e82:	f7ff fde3 	bl	8014a4c <malloc>
 8014e86:	4602      	mov	r2, r0
 8014e88:	61f8      	str	r0, [r7, #28]
 8014e8a:	b928      	cbnz	r0, 8014e98 <__pow5mult+0x40>
 8014e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8014f04 <__pow5mult+0xac>)
 8014e8e:	481e      	ldr	r0, [pc, #120]	@ (8014f08 <__pow5mult+0xb0>)
 8014e90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8014e94:	f001 fee0 	bl	8016c58 <__assert_func>
 8014e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014e9c:	6004      	str	r4, [r0, #0]
 8014e9e:	60c4      	str	r4, [r0, #12]
 8014ea0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014ea8:	b94c      	cbnz	r4, 8014ebe <__pow5mult+0x66>
 8014eaa:	f240 2171 	movw	r1, #625	@ 0x271
 8014eae:	4638      	mov	r0, r7
 8014eb0:	f7ff ff12 	bl	8014cd8 <__i2b>
 8014eb4:	2300      	movs	r3, #0
 8014eb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8014eba:	4604      	mov	r4, r0
 8014ebc:	6003      	str	r3, [r0, #0]
 8014ebe:	f04f 0900 	mov.w	r9, #0
 8014ec2:	07eb      	lsls	r3, r5, #31
 8014ec4:	d50a      	bpl.n	8014edc <__pow5mult+0x84>
 8014ec6:	4631      	mov	r1, r6
 8014ec8:	4622      	mov	r2, r4
 8014eca:	4638      	mov	r0, r7
 8014ecc:	f7ff ff1a 	bl	8014d04 <__multiply>
 8014ed0:	4631      	mov	r1, r6
 8014ed2:	4680      	mov	r8, r0
 8014ed4:	4638      	mov	r0, r7
 8014ed6:	f7ff fe01 	bl	8014adc <_Bfree>
 8014eda:	4646      	mov	r6, r8
 8014edc:	106d      	asrs	r5, r5, #1
 8014ede:	d00b      	beq.n	8014ef8 <__pow5mult+0xa0>
 8014ee0:	6820      	ldr	r0, [r4, #0]
 8014ee2:	b938      	cbnz	r0, 8014ef4 <__pow5mult+0x9c>
 8014ee4:	4622      	mov	r2, r4
 8014ee6:	4621      	mov	r1, r4
 8014ee8:	4638      	mov	r0, r7
 8014eea:	f7ff ff0b 	bl	8014d04 <__multiply>
 8014eee:	6020      	str	r0, [r4, #0]
 8014ef0:	f8c0 9000 	str.w	r9, [r0]
 8014ef4:	4604      	mov	r4, r0
 8014ef6:	e7e4      	b.n	8014ec2 <__pow5mult+0x6a>
 8014ef8:	4630      	mov	r0, r6
 8014efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014efe:	bf00      	nop
 8014f00:	0801a050 	.word	0x0801a050
 8014f04:	08019f74 	.word	0x08019f74
 8014f08:	08019ff4 	.word	0x08019ff4

08014f0c <__lshift>:
 8014f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f10:	460c      	mov	r4, r1
 8014f12:	6849      	ldr	r1, [r1, #4]
 8014f14:	6923      	ldr	r3, [r4, #16]
 8014f16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014f1a:	68a3      	ldr	r3, [r4, #8]
 8014f1c:	4607      	mov	r7, r0
 8014f1e:	4691      	mov	r9, r2
 8014f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014f24:	f108 0601 	add.w	r6, r8, #1
 8014f28:	42b3      	cmp	r3, r6
 8014f2a:	db0b      	blt.n	8014f44 <__lshift+0x38>
 8014f2c:	4638      	mov	r0, r7
 8014f2e:	f7ff fd95 	bl	8014a5c <_Balloc>
 8014f32:	4605      	mov	r5, r0
 8014f34:	b948      	cbnz	r0, 8014f4a <__lshift+0x3e>
 8014f36:	4602      	mov	r2, r0
 8014f38:	4b28      	ldr	r3, [pc, #160]	@ (8014fdc <__lshift+0xd0>)
 8014f3a:	4829      	ldr	r0, [pc, #164]	@ (8014fe0 <__lshift+0xd4>)
 8014f3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8014f40:	f001 fe8a 	bl	8016c58 <__assert_func>
 8014f44:	3101      	adds	r1, #1
 8014f46:	005b      	lsls	r3, r3, #1
 8014f48:	e7ee      	b.n	8014f28 <__lshift+0x1c>
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	f100 0114 	add.w	r1, r0, #20
 8014f50:	f100 0210 	add.w	r2, r0, #16
 8014f54:	4618      	mov	r0, r3
 8014f56:	4553      	cmp	r3, sl
 8014f58:	db33      	blt.n	8014fc2 <__lshift+0xb6>
 8014f5a:	6920      	ldr	r0, [r4, #16]
 8014f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014f60:	f104 0314 	add.w	r3, r4, #20
 8014f64:	f019 091f 	ands.w	r9, r9, #31
 8014f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014f70:	d02b      	beq.n	8014fca <__lshift+0xbe>
 8014f72:	f1c9 0e20 	rsb	lr, r9, #32
 8014f76:	468a      	mov	sl, r1
 8014f78:	2200      	movs	r2, #0
 8014f7a:	6818      	ldr	r0, [r3, #0]
 8014f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8014f80:	4310      	orrs	r0, r2
 8014f82:	f84a 0b04 	str.w	r0, [sl], #4
 8014f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f8a:	459c      	cmp	ip, r3
 8014f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014f90:	d8f3      	bhi.n	8014f7a <__lshift+0x6e>
 8014f92:	ebac 0304 	sub.w	r3, ip, r4
 8014f96:	3b15      	subs	r3, #21
 8014f98:	f023 0303 	bic.w	r3, r3, #3
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	f104 0015 	add.w	r0, r4, #21
 8014fa2:	4584      	cmp	ip, r0
 8014fa4:	bf38      	it	cc
 8014fa6:	2304      	movcc	r3, #4
 8014fa8:	50ca      	str	r2, [r1, r3]
 8014faa:	b10a      	cbz	r2, 8014fb0 <__lshift+0xa4>
 8014fac:	f108 0602 	add.w	r6, r8, #2
 8014fb0:	3e01      	subs	r6, #1
 8014fb2:	4638      	mov	r0, r7
 8014fb4:	612e      	str	r6, [r5, #16]
 8014fb6:	4621      	mov	r1, r4
 8014fb8:	f7ff fd90 	bl	8014adc <_Bfree>
 8014fbc:	4628      	mov	r0, r5
 8014fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	e7c5      	b.n	8014f56 <__lshift+0x4a>
 8014fca:	3904      	subs	r1, #4
 8014fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8014fd4:	459c      	cmp	ip, r3
 8014fd6:	d8f9      	bhi.n	8014fcc <__lshift+0xc0>
 8014fd8:	e7ea      	b.n	8014fb0 <__lshift+0xa4>
 8014fda:	bf00      	nop
 8014fdc:	08019fe3 	.word	0x08019fe3
 8014fe0:	08019ff4 	.word	0x08019ff4

08014fe4 <__mcmp>:
 8014fe4:	690a      	ldr	r2, [r1, #16]
 8014fe6:	4603      	mov	r3, r0
 8014fe8:	6900      	ldr	r0, [r0, #16]
 8014fea:	1a80      	subs	r0, r0, r2
 8014fec:	b530      	push	{r4, r5, lr}
 8014fee:	d10e      	bne.n	801500e <__mcmp+0x2a>
 8014ff0:	3314      	adds	r3, #20
 8014ff2:	3114      	adds	r1, #20
 8014ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015004:	4295      	cmp	r5, r2
 8015006:	d003      	beq.n	8015010 <__mcmp+0x2c>
 8015008:	d205      	bcs.n	8015016 <__mcmp+0x32>
 801500a:	f04f 30ff 	mov.w	r0, #4294967295
 801500e:	bd30      	pop	{r4, r5, pc}
 8015010:	42a3      	cmp	r3, r4
 8015012:	d3f3      	bcc.n	8014ffc <__mcmp+0x18>
 8015014:	e7fb      	b.n	801500e <__mcmp+0x2a>
 8015016:	2001      	movs	r0, #1
 8015018:	e7f9      	b.n	801500e <__mcmp+0x2a>
	...

0801501c <__mdiff>:
 801501c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015020:	4689      	mov	r9, r1
 8015022:	4606      	mov	r6, r0
 8015024:	4611      	mov	r1, r2
 8015026:	4648      	mov	r0, r9
 8015028:	4614      	mov	r4, r2
 801502a:	f7ff ffdb 	bl	8014fe4 <__mcmp>
 801502e:	1e05      	subs	r5, r0, #0
 8015030:	d112      	bne.n	8015058 <__mdiff+0x3c>
 8015032:	4629      	mov	r1, r5
 8015034:	4630      	mov	r0, r6
 8015036:	f7ff fd11 	bl	8014a5c <_Balloc>
 801503a:	4602      	mov	r2, r0
 801503c:	b928      	cbnz	r0, 801504a <__mdiff+0x2e>
 801503e:	4b3f      	ldr	r3, [pc, #252]	@ (801513c <__mdiff+0x120>)
 8015040:	f240 2137 	movw	r1, #567	@ 0x237
 8015044:	483e      	ldr	r0, [pc, #248]	@ (8015140 <__mdiff+0x124>)
 8015046:	f001 fe07 	bl	8016c58 <__assert_func>
 801504a:	2301      	movs	r3, #1
 801504c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015050:	4610      	mov	r0, r2
 8015052:	b003      	add	sp, #12
 8015054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015058:	bfbc      	itt	lt
 801505a:	464b      	movlt	r3, r9
 801505c:	46a1      	movlt	r9, r4
 801505e:	4630      	mov	r0, r6
 8015060:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8015064:	bfba      	itte	lt
 8015066:	461c      	movlt	r4, r3
 8015068:	2501      	movlt	r5, #1
 801506a:	2500      	movge	r5, #0
 801506c:	f7ff fcf6 	bl	8014a5c <_Balloc>
 8015070:	4602      	mov	r2, r0
 8015072:	b918      	cbnz	r0, 801507c <__mdiff+0x60>
 8015074:	4b31      	ldr	r3, [pc, #196]	@ (801513c <__mdiff+0x120>)
 8015076:	f240 2145 	movw	r1, #581	@ 0x245
 801507a:	e7e3      	b.n	8015044 <__mdiff+0x28>
 801507c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8015080:	6926      	ldr	r6, [r4, #16]
 8015082:	60c5      	str	r5, [r0, #12]
 8015084:	f109 0310 	add.w	r3, r9, #16
 8015088:	f109 0514 	add.w	r5, r9, #20
 801508c:	f104 0e14 	add.w	lr, r4, #20
 8015090:	f100 0b14 	add.w	fp, r0, #20
 8015094:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8015098:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801509c:	9301      	str	r3, [sp, #4]
 801509e:	46d9      	mov	r9, fp
 80150a0:	f04f 0c00 	mov.w	ip, #0
 80150a4:	9b01      	ldr	r3, [sp, #4]
 80150a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80150aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80150ae:	9301      	str	r3, [sp, #4]
 80150b0:	fa1f f38a 	uxth.w	r3, sl
 80150b4:	4619      	mov	r1, r3
 80150b6:	b283      	uxth	r3, r0
 80150b8:	1acb      	subs	r3, r1, r3
 80150ba:	0c00      	lsrs	r0, r0, #16
 80150bc:	4463      	add	r3, ip
 80150be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80150c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80150c6:	b29b      	uxth	r3, r3
 80150c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80150cc:	4576      	cmp	r6, lr
 80150ce:	f849 3b04 	str.w	r3, [r9], #4
 80150d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80150d6:	d8e5      	bhi.n	80150a4 <__mdiff+0x88>
 80150d8:	1b33      	subs	r3, r6, r4
 80150da:	3b15      	subs	r3, #21
 80150dc:	f023 0303 	bic.w	r3, r3, #3
 80150e0:	3415      	adds	r4, #21
 80150e2:	3304      	adds	r3, #4
 80150e4:	42a6      	cmp	r6, r4
 80150e6:	bf38      	it	cc
 80150e8:	2304      	movcc	r3, #4
 80150ea:	441d      	add	r5, r3
 80150ec:	445b      	add	r3, fp
 80150ee:	461e      	mov	r6, r3
 80150f0:	462c      	mov	r4, r5
 80150f2:	4544      	cmp	r4, r8
 80150f4:	d30e      	bcc.n	8015114 <__mdiff+0xf8>
 80150f6:	f108 0103 	add.w	r1, r8, #3
 80150fa:	1b49      	subs	r1, r1, r5
 80150fc:	f021 0103 	bic.w	r1, r1, #3
 8015100:	3d03      	subs	r5, #3
 8015102:	45a8      	cmp	r8, r5
 8015104:	bf38      	it	cc
 8015106:	2100      	movcc	r1, #0
 8015108:	440b      	add	r3, r1
 801510a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801510e:	b191      	cbz	r1, 8015136 <__mdiff+0x11a>
 8015110:	6117      	str	r7, [r2, #16]
 8015112:	e79d      	b.n	8015050 <__mdiff+0x34>
 8015114:	f854 1b04 	ldr.w	r1, [r4], #4
 8015118:	46e6      	mov	lr, ip
 801511a:	0c08      	lsrs	r0, r1, #16
 801511c:	fa1c fc81 	uxtah	ip, ip, r1
 8015120:	4471      	add	r1, lr
 8015122:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8015126:	b289      	uxth	r1, r1
 8015128:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801512c:	f846 1b04 	str.w	r1, [r6], #4
 8015130:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8015134:	e7dd      	b.n	80150f2 <__mdiff+0xd6>
 8015136:	3f01      	subs	r7, #1
 8015138:	e7e7      	b.n	801510a <__mdiff+0xee>
 801513a:	bf00      	nop
 801513c:	08019fe3 	.word	0x08019fe3
 8015140:	08019ff4 	.word	0x08019ff4

08015144 <__ulp>:
 8015144:	b082      	sub	sp, #8
 8015146:	ed8d 0b00 	vstr	d0, [sp]
 801514a:	9a01      	ldr	r2, [sp, #4]
 801514c:	4b0f      	ldr	r3, [pc, #60]	@ (801518c <__ulp+0x48>)
 801514e:	4013      	ands	r3, r2
 8015150:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8015154:	2b00      	cmp	r3, #0
 8015156:	dc08      	bgt.n	801516a <__ulp+0x26>
 8015158:	425b      	negs	r3, r3
 801515a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801515e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015162:	da04      	bge.n	801516e <__ulp+0x2a>
 8015164:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8015168:	4113      	asrs	r3, r2
 801516a:	2200      	movs	r2, #0
 801516c:	e008      	b.n	8015180 <__ulp+0x3c>
 801516e:	f1a2 0314 	sub.w	r3, r2, #20
 8015172:	2b1e      	cmp	r3, #30
 8015174:	bfda      	itte	le
 8015176:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801517a:	40da      	lsrle	r2, r3
 801517c:	2201      	movgt	r2, #1
 801517e:	2300      	movs	r3, #0
 8015180:	4619      	mov	r1, r3
 8015182:	4610      	mov	r0, r2
 8015184:	ec41 0b10 	vmov	d0, r0, r1
 8015188:	b002      	add	sp, #8
 801518a:	4770      	bx	lr
 801518c:	7ff00000 	.word	0x7ff00000

08015190 <__b2d>:
 8015190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015194:	6906      	ldr	r6, [r0, #16]
 8015196:	f100 0814 	add.w	r8, r0, #20
 801519a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801519e:	1f37      	subs	r7, r6, #4
 80151a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80151a4:	4610      	mov	r0, r2
 80151a6:	f7ff fd4b 	bl	8014c40 <__hi0bits>
 80151aa:	f1c0 0320 	rsb	r3, r0, #32
 80151ae:	280a      	cmp	r0, #10
 80151b0:	600b      	str	r3, [r1, #0]
 80151b2:	491b      	ldr	r1, [pc, #108]	@ (8015220 <__b2d+0x90>)
 80151b4:	dc15      	bgt.n	80151e2 <__b2d+0x52>
 80151b6:	f1c0 0c0b 	rsb	ip, r0, #11
 80151ba:	fa22 f30c 	lsr.w	r3, r2, ip
 80151be:	45b8      	cmp	r8, r7
 80151c0:	ea43 0501 	orr.w	r5, r3, r1
 80151c4:	bf34      	ite	cc
 80151c6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80151ca:	2300      	movcs	r3, #0
 80151cc:	3015      	adds	r0, #21
 80151ce:	fa02 f000 	lsl.w	r0, r2, r0
 80151d2:	fa23 f30c 	lsr.w	r3, r3, ip
 80151d6:	4303      	orrs	r3, r0
 80151d8:	461c      	mov	r4, r3
 80151da:	ec45 4b10 	vmov	d0, r4, r5
 80151de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151e2:	45b8      	cmp	r8, r7
 80151e4:	bf3a      	itte	cc
 80151e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80151ea:	f1a6 0708 	subcc.w	r7, r6, #8
 80151ee:	2300      	movcs	r3, #0
 80151f0:	380b      	subs	r0, #11
 80151f2:	d012      	beq.n	801521a <__b2d+0x8a>
 80151f4:	f1c0 0120 	rsb	r1, r0, #32
 80151f8:	fa23 f401 	lsr.w	r4, r3, r1
 80151fc:	4082      	lsls	r2, r0
 80151fe:	4322      	orrs	r2, r4
 8015200:	4547      	cmp	r7, r8
 8015202:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8015206:	bf8c      	ite	hi
 8015208:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801520c:	2200      	movls	r2, #0
 801520e:	4083      	lsls	r3, r0
 8015210:	40ca      	lsrs	r2, r1
 8015212:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8015216:	4313      	orrs	r3, r2
 8015218:	e7de      	b.n	80151d8 <__b2d+0x48>
 801521a:	ea42 0501 	orr.w	r5, r2, r1
 801521e:	e7db      	b.n	80151d8 <__b2d+0x48>
 8015220:	3ff00000 	.word	0x3ff00000

08015224 <__d2b>:
 8015224:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015228:	460f      	mov	r7, r1
 801522a:	2101      	movs	r1, #1
 801522c:	ec59 8b10 	vmov	r8, r9, d0
 8015230:	4616      	mov	r6, r2
 8015232:	f7ff fc13 	bl	8014a5c <_Balloc>
 8015236:	4604      	mov	r4, r0
 8015238:	b930      	cbnz	r0, 8015248 <__d2b+0x24>
 801523a:	4602      	mov	r2, r0
 801523c:	4b23      	ldr	r3, [pc, #140]	@ (80152cc <__d2b+0xa8>)
 801523e:	4824      	ldr	r0, [pc, #144]	@ (80152d0 <__d2b+0xac>)
 8015240:	f240 310f 	movw	r1, #783	@ 0x30f
 8015244:	f001 fd08 	bl	8016c58 <__assert_func>
 8015248:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801524c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015250:	b10d      	cbz	r5, 8015256 <__d2b+0x32>
 8015252:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015256:	9301      	str	r3, [sp, #4]
 8015258:	f1b8 0300 	subs.w	r3, r8, #0
 801525c:	d023      	beq.n	80152a6 <__d2b+0x82>
 801525e:	4668      	mov	r0, sp
 8015260:	9300      	str	r3, [sp, #0]
 8015262:	f7ff fd0c 	bl	8014c7e <__lo0bits>
 8015266:	e9dd 1200 	ldrd	r1, r2, [sp]
 801526a:	b1d0      	cbz	r0, 80152a2 <__d2b+0x7e>
 801526c:	f1c0 0320 	rsb	r3, r0, #32
 8015270:	fa02 f303 	lsl.w	r3, r2, r3
 8015274:	430b      	orrs	r3, r1
 8015276:	40c2      	lsrs	r2, r0
 8015278:	6163      	str	r3, [r4, #20]
 801527a:	9201      	str	r2, [sp, #4]
 801527c:	9b01      	ldr	r3, [sp, #4]
 801527e:	61a3      	str	r3, [r4, #24]
 8015280:	2b00      	cmp	r3, #0
 8015282:	bf0c      	ite	eq
 8015284:	2201      	moveq	r2, #1
 8015286:	2202      	movne	r2, #2
 8015288:	6122      	str	r2, [r4, #16]
 801528a:	b1a5      	cbz	r5, 80152b6 <__d2b+0x92>
 801528c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8015290:	4405      	add	r5, r0
 8015292:	603d      	str	r5, [r7, #0]
 8015294:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8015298:	6030      	str	r0, [r6, #0]
 801529a:	4620      	mov	r0, r4
 801529c:	b003      	add	sp, #12
 801529e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152a2:	6161      	str	r1, [r4, #20]
 80152a4:	e7ea      	b.n	801527c <__d2b+0x58>
 80152a6:	a801      	add	r0, sp, #4
 80152a8:	f7ff fce9 	bl	8014c7e <__lo0bits>
 80152ac:	9b01      	ldr	r3, [sp, #4]
 80152ae:	6163      	str	r3, [r4, #20]
 80152b0:	3020      	adds	r0, #32
 80152b2:	2201      	movs	r2, #1
 80152b4:	e7e8      	b.n	8015288 <__d2b+0x64>
 80152b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80152ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80152be:	6038      	str	r0, [r7, #0]
 80152c0:	6918      	ldr	r0, [r3, #16]
 80152c2:	f7ff fcbd 	bl	8014c40 <__hi0bits>
 80152c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80152ca:	e7e5      	b.n	8015298 <__d2b+0x74>
 80152cc:	08019fe3 	.word	0x08019fe3
 80152d0:	08019ff4 	.word	0x08019ff4

080152d4 <__ratio>:
 80152d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152d8:	b085      	sub	sp, #20
 80152da:	e9cd 1000 	strd	r1, r0, [sp]
 80152de:	a902      	add	r1, sp, #8
 80152e0:	f7ff ff56 	bl	8015190 <__b2d>
 80152e4:	9800      	ldr	r0, [sp, #0]
 80152e6:	a903      	add	r1, sp, #12
 80152e8:	ec55 4b10 	vmov	r4, r5, d0
 80152ec:	f7ff ff50 	bl	8015190 <__b2d>
 80152f0:	9b01      	ldr	r3, [sp, #4]
 80152f2:	6919      	ldr	r1, [r3, #16]
 80152f4:	9b00      	ldr	r3, [sp, #0]
 80152f6:	691b      	ldr	r3, [r3, #16]
 80152f8:	1ac9      	subs	r1, r1, r3
 80152fa:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80152fe:	1a9b      	subs	r3, r3, r2
 8015300:	ec5b ab10 	vmov	sl, fp, d0
 8015304:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8015308:	2b00      	cmp	r3, #0
 801530a:	bfce      	itee	gt
 801530c:	462a      	movgt	r2, r5
 801530e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015312:	465a      	movle	r2, fp
 8015314:	462f      	mov	r7, r5
 8015316:	46d9      	mov	r9, fp
 8015318:	bfcc      	ite	gt
 801531a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801531e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8015322:	464b      	mov	r3, r9
 8015324:	4652      	mov	r2, sl
 8015326:	4620      	mov	r0, r4
 8015328:	4639      	mov	r1, r7
 801532a:	f7eb faaf 	bl	800088c <__aeabi_ddiv>
 801532e:	ec41 0b10 	vmov	d0, r0, r1
 8015332:	b005      	add	sp, #20
 8015334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015338 <__copybits>:
 8015338:	3901      	subs	r1, #1
 801533a:	b570      	push	{r4, r5, r6, lr}
 801533c:	1149      	asrs	r1, r1, #5
 801533e:	6914      	ldr	r4, [r2, #16]
 8015340:	3101      	adds	r1, #1
 8015342:	f102 0314 	add.w	r3, r2, #20
 8015346:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801534a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801534e:	1f05      	subs	r5, r0, #4
 8015350:	42a3      	cmp	r3, r4
 8015352:	d30c      	bcc.n	801536e <__copybits+0x36>
 8015354:	1aa3      	subs	r3, r4, r2
 8015356:	3b11      	subs	r3, #17
 8015358:	f023 0303 	bic.w	r3, r3, #3
 801535c:	3211      	adds	r2, #17
 801535e:	42a2      	cmp	r2, r4
 8015360:	bf88      	it	hi
 8015362:	2300      	movhi	r3, #0
 8015364:	4418      	add	r0, r3
 8015366:	2300      	movs	r3, #0
 8015368:	4288      	cmp	r0, r1
 801536a:	d305      	bcc.n	8015378 <__copybits+0x40>
 801536c:	bd70      	pop	{r4, r5, r6, pc}
 801536e:	f853 6b04 	ldr.w	r6, [r3], #4
 8015372:	f845 6f04 	str.w	r6, [r5, #4]!
 8015376:	e7eb      	b.n	8015350 <__copybits+0x18>
 8015378:	f840 3b04 	str.w	r3, [r0], #4
 801537c:	e7f4      	b.n	8015368 <__copybits+0x30>

0801537e <__any_on>:
 801537e:	f100 0214 	add.w	r2, r0, #20
 8015382:	6900      	ldr	r0, [r0, #16]
 8015384:	114b      	asrs	r3, r1, #5
 8015386:	4298      	cmp	r0, r3
 8015388:	b510      	push	{r4, lr}
 801538a:	db11      	blt.n	80153b0 <__any_on+0x32>
 801538c:	dd0a      	ble.n	80153a4 <__any_on+0x26>
 801538e:	f011 011f 	ands.w	r1, r1, #31
 8015392:	d007      	beq.n	80153a4 <__any_on+0x26>
 8015394:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015398:	fa24 f001 	lsr.w	r0, r4, r1
 801539c:	fa00 f101 	lsl.w	r1, r0, r1
 80153a0:	428c      	cmp	r4, r1
 80153a2:	d10b      	bne.n	80153bc <__any_on+0x3e>
 80153a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80153a8:	4293      	cmp	r3, r2
 80153aa:	d803      	bhi.n	80153b4 <__any_on+0x36>
 80153ac:	2000      	movs	r0, #0
 80153ae:	bd10      	pop	{r4, pc}
 80153b0:	4603      	mov	r3, r0
 80153b2:	e7f7      	b.n	80153a4 <__any_on+0x26>
 80153b4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80153b8:	2900      	cmp	r1, #0
 80153ba:	d0f5      	beq.n	80153a8 <__any_on+0x2a>
 80153bc:	2001      	movs	r0, #1
 80153be:	e7f6      	b.n	80153ae <__any_on+0x30>

080153c0 <sulp>:
 80153c0:	b570      	push	{r4, r5, r6, lr}
 80153c2:	4604      	mov	r4, r0
 80153c4:	460d      	mov	r5, r1
 80153c6:	ec45 4b10 	vmov	d0, r4, r5
 80153ca:	4616      	mov	r6, r2
 80153cc:	f7ff feba 	bl	8015144 <__ulp>
 80153d0:	ec51 0b10 	vmov	r0, r1, d0
 80153d4:	b17e      	cbz	r6, 80153f6 <sulp+0x36>
 80153d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80153da:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80153de:	2b00      	cmp	r3, #0
 80153e0:	dd09      	ble.n	80153f6 <sulp+0x36>
 80153e2:	051b      	lsls	r3, r3, #20
 80153e4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80153e8:	2400      	movs	r4, #0
 80153ea:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80153ee:	4622      	mov	r2, r4
 80153f0:	462b      	mov	r3, r5
 80153f2:	f7eb f921 	bl	8000638 <__aeabi_dmul>
 80153f6:	ec41 0b10 	vmov	d0, r0, r1
 80153fa:	bd70      	pop	{r4, r5, r6, pc}
 80153fc:	0000      	movs	r0, r0
	...

08015400 <_strtod_l>:
 8015400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015404:	b09f      	sub	sp, #124	@ 0x7c
 8015406:	460c      	mov	r4, r1
 8015408:	9217      	str	r2, [sp, #92]	@ 0x5c
 801540a:	2200      	movs	r2, #0
 801540c:	921a      	str	r2, [sp, #104]	@ 0x68
 801540e:	9005      	str	r0, [sp, #20]
 8015410:	f04f 0a00 	mov.w	sl, #0
 8015414:	f04f 0b00 	mov.w	fp, #0
 8015418:	460a      	mov	r2, r1
 801541a:	9219      	str	r2, [sp, #100]	@ 0x64
 801541c:	7811      	ldrb	r1, [r2, #0]
 801541e:	292b      	cmp	r1, #43	@ 0x2b
 8015420:	d04a      	beq.n	80154b8 <_strtod_l+0xb8>
 8015422:	d838      	bhi.n	8015496 <_strtod_l+0x96>
 8015424:	290d      	cmp	r1, #13
 8015426:	d832      	bhi.n	801548e <_strtod_l+0x8e>
 8015428:	2908      	cmp	r1, #8
 801542a:	d832      	bhi.n	8015492 <_strtod_l+0x92>
 801542c:	2900      	cmp	r1, #0
 801542e:	d03b      	beq.n	80154a8 <_strtod_l+0xa8>
 8015430:	2200      	movs	r2, #0
 8015432:	920b      	str	r2, [sp, #44]	@ 0x2c
 8015434:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8015436:	782a      	ldrb	r2, [r5, #0]
 8015438:	2a30      	cmp	r2, #48	@ 0x30
 801543a:	f040 80b3 	bne.w	80155a4 <_strtod_l+0x1a4>
 801543e:	786a      	ldrb	r2, [r5, #1]
 8015440:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8015444:	2a58      	cmp	r2, #88	@ 0x58
 8015446:	d16e      	bne.n	8015526 <_strtod_l+0x126>
 8015448:	9302      	str	r3, [sp, #8]
 801544a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801544c:	9301      	str	r3, [sp, #4]
 801544e:	ab1a      	add	r3, sp, #104	@ 0x68
 8015450:	9300      	str	r3, [sp, #0]
 8015452:	4a8e      	ldr	r2, [pc, #568]	@ (801568c <_strtod_l+0x28c>)
 8015454:	9805      	ldr	r0, [sp, #20]
 8015456:	ab1b      	add	r3, sp, #108	@ 0x6c
 8015458:	a919      	add	r1, sp, #100	@ 0x64
 801545a:	f001 fc83 	bl	8016d64 <__gethex>
 801545e:	f010 060f 	ands.w	r6, r0, #15
 8015462:	4604      	mov	r4, r0
 8015464:	d005      	beq.n	8015472 <_strtod_l+0x72>
 8015466:	2e06      	cmp	r6, #6
 8015468:	d128      	bne.n	80154bc <_strtod_l+0xbc>
 801546a:	3501      	adds	r5, #1
 801546c:	2300      	movs	r3, #0
 801546e:	9519      	str	r5, [sp, #100]	@ 0x64
 8015470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015472:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015474:	2b00      	cmp	r3, #0
 8015476:	f040 858e 	bne.w	8015f96 <_strtod_l+0xb96>
 801547a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801547c:	b1cb      	cbz	r3, 80154b2 <_strtod_l+0xb2>
 801547e:	4652      	mov	r2, sl
 8015480:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8015484:	ec43 2b10 	vmov	d0, r2, r3
 8015488:	b01f      	add	sp, #124	@ 0x7c
 801548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801548e:	2920      	cmp	r1, #32
 8015490:	d1ce      	bne.n	8015430 <_strtod_l+0x30>
 8015492:	3201      	adds	r2, #1
 8015494:	e7c1      	b.n	801541a <_strtod_l+0x1a>
 8015496:	292d      	cmp	r1, #45	@ 0x2d
 8015498:	d1ca      	bne.n	8015430 <_strtod_l+0x30>
 801549a:	2101      	movs	r1, #1
 801549c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801549e:	1c51      	adds	r1, r2, #1
 80154a0:	9119      	str	r1, [sp, #100]	@ 0x64
 80154a2:	7852      	ldrb	r2, [r2, #1]
 80154a4:	2a00      	cmp	r2, #0
 80154a6:	d1c5      	bne.n	8015434 <_strtod_l+0x34>
 80154a8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80154aa:	9419      	str	r4, [sp, #100]	@ 0x64
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	f040 8570 	bne.w	8015f92 <_strtod_l+0xb92>
 80154b2:	4652      	mov	r2, sl
 80154b4:	465b      	mov	r3, fp
 80154b6:	e7e5      	b.n	8015484 <_strtod_l+0x84>
 80154b8:	2100      	movs	r1, #0
 80154ba:	e7ef      	b.n	801549c <_strtod_l+0x9c>
 80154bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80154be:	b13a      	cbz	r2, 80154d0 <_strtod_l+0xd0>
 80154c0:	2135      	movs	r1, #53	@ 0x35
 80154c2:	a81c      	add	r0, sp, #112	@ 0x70
 80154c4:	f7ff ff38 	bl	8015338 <__copybits>
 80154c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80154ca:	9805      	ldr	r0, [sp, #20]
 80154cc:	f7ff fb06 	bl	8014adc <_Bfree>
 80154d0:	3e01      	subs	r6, #1
 80154d2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80154d4:	2e04      	cmp	r6, #4
 80154d6:	d806      	bhi.n	80154e6 <_strtod_l+0xe6>
 80154d8:	e8df f006 	tbb	[pc, r6]
 80154dc:	201d0314 	.word	0x201d0314
 80154e0:	14          	.byte	0x14
 80154e1:	00          	.byte	0x00
 80154e2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80154e6:	05e1      	lsls	r1, r4, #23
 80154e8:	bf48      	it	mi
 80154ea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80154ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80154f2:	0d1b      	lsrs	r3, r3, #20
 80154f4:	051b      	lsls	r3, r3, #20
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d1bb      	bne.n	8015472 <_strtod_l+0x72>
 80154fa:	f7fe fbcd 	bl	8013c98 <__errno>
 80154fe:	2322      	movs	r3, #34	@ 0x22
 8015500:	6003      	str	r3, [r0, #0]
 8015502:	e7b6      	b.n	8015472 <_strtod_l+0x72>
 8015504:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8015508:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801550c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8015510:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015514:	e7e7      	b.n	80154e6 <_strtod_l+0xe6>
 8015516:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8015694 <_strtod_l+0x294>
 801551a:	e7e4      	b.n	80154e6 <_strtod_l+0xe6>
 801551c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8015520:	f04f 3aff 	mov.w	sl, #4294967295
 8015524:	e7df      	b.n	80154e6 <_strtod_l+0xe6>
 8015526:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015528:	1c5a      	adds	r2, r3, #1
 801552a:	9219      	str	r2, [sp, #100]	@ 0x64
 801552c:	785b      	ldrb	r3, [r3, #1]
 801552e:	2b30      	cmp	r3, #48	@ 0x30
 8015530:	d0f9      	beq.n	8015526 <_strtod_l+0x126>
 8015532:	2b00      	cmp	r3, #0
 8015534:	d09d      	beq.n	8015472 <_strtod_l+0x72>
 8015536:	2301      	movs	r3, #1
 8015538:	9309      	str	r3, [sp, #36]	@ 0x24
 801553a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801553c:	930c      	str	r3, [sp, #48]	@ 0x30
 801553e:	2300      	movs	r3, #0
 8015540:	9308      	str	r3, [sp, #32]
 8015542:	930a      	str	r3, [sp, #40]	@ 0x28
 8015544:	461f      	mov	r7, r3
 8015546:	220a      	movs	r2, #10
 8015548:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801554a:	7805      	ldrb	r5, [r0, #0]
 801554c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8015550:	b2d9      	uxtb	r1, r3
 8015552:	2909      	cmp	r1, #9
 8015554:	d928      	bls.n	80155a8 <_strtod_l+0x1a8>
 8015556:	494e      	ldr	r1, [pc, #312]	@ (8015690 <_strtod_l+0x290>)
 8015558:	2201      	movs	r2, #1
 801555a:	f001 fb62 	bl	8016c22 <strncmp>
 801555e:	2800      	cmp	r0, #0
 8015560:	d032      	beq.n	80155c8 <_strtod_l+0x1c8>
 8015562:	2000      	movs	r0, #0
 8015564:	462a      	mov	r2, r5
 8015566:	4681      	mov	r9, r0
 8015568:	463d      	mov	r5, r7
 801556a:	4603      	mov	r3, r0
 801556c:	2a65      	cmp	r2, #101	@ 0x65
 801556e:	d001      	beq.n	8015574 <_strtod_l+0x174>
 8015570:	2a45      	cmp	r2, #69	@ 0x45
 8015572:	d114      	bne.n	801559e <_strtod_l+0x19e>
 8015574:	b91d      	cbnz	r5, 801557e <_strtod_l+0x17e>
 8015576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015578:	4302      	orrs	r2, r0
 801557a:	d095      	beq.n	80154a8 <_strtod_l+0xa8>
 801557c:	2500      	movs	r5, #0
 801557e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8015580:	1c62      	adds	r2, r4, #1
 8015582:	9219      	str	r2, [sp, #100]	@ 0x64
 8015584:	7862      	ldrb	r2, [r4, #1]
 8015586:	2a2b      	cmp	r2, #43	@ 0x2b
 8015588:	d077      	beq.n	801567a <_strtod_l+0x27a>
 801558a:	2a2d      	cmp	r2, #45	@ 0x2d
 801558c:	d07b      	beq.n	8015686 <_strtod_l+0x286>
 801558e:	f04f 0c00 	mov.w	ip, #0
 8015592:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8015596:	2909      	cmp	r1, #9
 8015598:	f240 8082 	bls.w	80156a0 <_strtod_l+0x2a0>
 801559c:	9419      	str	r4, [sp, #100]	@ 0x64
 801559e:	f04f 0800 	mov.w	r8, #0
 80155a2:	e0a2      	b.n	80156ea <_strtod_l+0x2ea>
 80155a4:	2300      	movs	r3, #0
 80155a6:	e7c7      	b.n	8015538 <_strtod_l+0x138>
 80155a8:	2f08      	cmp	r7, #8
 80155aa:	bfd5      	itete	le
 80155ac:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80155ae:	9908      	ldrgt	r1, [sp, #32]
 80155b0:	fb02 3301 	mlale	r3, r2, r1, r3
 80155b4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80155b8:	f100 0001 	add.w	r0, r0, #1
 80155bc:	bfd4      	ite	le
 80155be:	930a      	strle	r3, [sp, #40]	@ 0x28
 80155c0:	9308      	strgt	r3, [sp, #32]
 80155c2:	3701      	adds	r7, #1
 80155c4:	9019      	str	r0, [sp, #100]	@ 0x64
 80155c6:	e7bf      	b.n	8015548 <_strtod_l+0x148>
 80155c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80155ca:	1c5a      	adds	r2, r3, #1
 80155cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80155ce:	785a      	ldrb	r2, [r3, #1]
 80155d0:	b37f      	cbz	r7, 8015632 <_strtod_l+0x232>
 80155d2:	4681      	mov	r9, r0
 80155d4:	463d      	mov	r5, r7
 80155d6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80155da:	2b09      	cmp	r3, #9
 80155dc:	d912      	bls.n	8015604 <_strtod_l+0x204>
 80155de:	2301      	movs	r3, #1
 80155e0:	e7c4      	b.n	801556c <_strtod_l+0x16c>
 80155e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80155e4:	1c5a      	adds	r2, r3, #1
 80155e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80155e8:	785a      	ldrb	r2, [r3, #1]
 80155ea:	3001      	adds	r0, #1
 80155ec:	2a30      	cmp	r2, #48	@ 0x30
 80155ee:	d0f8      	beq.n	80155e2 <_strtod_l+0x1e2>
 80155f0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80155f4:	2b08      	cmp	r3, #8
 80155f6:	f200 84d3 	bhi.w	8015fa0 <_strtod_l+0xba0>
 80155fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80155fc:	930c      	str	r3, [sp, #48]	@ 0x30
 80155fe:	4681      	mov	r9, r0
 8015600:	2000      	movs	r0, #0
 8015602:	4605      	mov	r5, r0
 8015604:	3a30      	subs	r2, #48	@ 0x30
 8015606:	f100 0301 	add.w	r3, r0, #1
 801560a:	d02a      	beq.n	8015662 <_strtod_l+0x262>
 801560c:	4499      	add	r9, r3
 801560e:	eb00 0c05 	add.w	ip, r0, r5
 8015612:	462b      	mov	r3, r5
 8015614:	210a      	movs	r1, #10
 8015616:	4563      	cmp	r3, ip
 8015618:	d10d      	bne.n	8015636 <_strtod_l+0x236>
 801561a:	1c69      	adds	r1, r5, #1
 801561c:	4401      	add	r1, r0
 801561e:	4428      	add	r0, r5
 8015620:	2808      	cmp	r0, #8
 8015622:	dc16      	bgt.n	8015652 <_strtod_l+0x252>
 8015624:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015626:	230a      	movs	r3, #10
 8015628:	fb03 2300 	mla	r3, r3, r0, r2
 801562c:	930a      	str	r3, [sp, #40]	@ 0x28
 801562e:	2300      	movs	r3, #0
 8015630:	e018      	b.n	8015664 <_strtod_l+0x264>
 8015632:	4638      	mov	r0, r7
 8015634:	e7da      	b.n	80155ec <_strtod_l+0x1ec>
 8015636:	2b08      	cmp	r3, #8
 8015638:	f103 0301 	add.w	r3, r3, #1
 801563c:	dc03      	bgt.n	8015646 <_strtod_l+0x246>
 801563e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8015640:	434e      	muls	r6, r1
 8015642:	960a      	str	r6, [sp, #40]	@ 0x28
 8015644:	e7e7      	b.n	8015616 <_strtod_l+0x216>
 8015646:	2b10      	cmp	r3, #16
 8015648:	bfde      	ittt	le
 801564a:	9e08      	ldrle	r6, [sp, #32]
 801564c:	434e      	mulle	r6, r1
 801564e:	9608      	strle	r6, [sp, #32]
 8015650:	e7e1      	b.n	8015616 <_strtod_l+0x216>
 8015652:	280f      	cmp	r0, #15
 8015654:	dceb      	bgt.n	801562e <_strtod_l+0x22e>
 8015656:	9808      	ldr	r0, [sp, #32]
 8015658:	230a      	movs	r3, #10
 801565a:	fb03 2300 	mla	r3, r3, r0, r2
 801565e:	9308      	str	r3, [sp, #32]
 8015660:	e7e5      	b.n	801562e <_strtod_l+0x22e>
 8015662:	4629      	mov	r1, r5
 8015664:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8015666:	1c50      	adds	r0, r2, #1
 8015668:	9019      	str	r0, [sp, #100]	@ 0x64
 801566a:	7852      	ldrb	r2, [r2, #1]
 801566c:	4618      	mov	r0, r3
 801566e:	460d      	mov	r5, r1
 8015670:	e7b1      	b.n	80155d6 <_strtod_l+0x1d6>
 8015672:	f04f 0900 	mov.w	r9, #0
 8015676:	2301      	movs	r3, #1
 8015678:	e77d      	b.n	8015576 <_strtod_l+0x176>
 801567a:	f04f 0c00 	mov.w	ip, #0
 801567e:	1ca2      	adds	r2, r4, #2
 8015680:	9219      	str	r2, [sp, #100]	@ 0x64
 8015682:	78a2      	ldrb	r2, [r4, #2]
 8015684:	e785      	b.n	8015592 <_strtod_l+0x192>
 8015686:	f04f 0c01 	mov.w	ip, #1
 801568a:	e7f8      	b.n	801567e <_strtod_l+0x27e>
 801568c:	0801a168 	.word	0x0801a168
 8015690:	0801a150 	.word	0x0801a150
 8015694:	7ff00000 	.word	0x7ff00000
 8015698:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801569a:	1c51      	adds	r1, r2, #1
 801569c:	9119      	str	r1, [sp, #100]	@ 0x64
 801569e:	7852      	ldrb	r2, [r2, #1]
 80156a0:	2a30      	cmp	r2, #48	@ 0x30
 80156a2:	d0f9      	beq.n	8015698 <_strtod_l+0x298>
 80156a4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80156a8:	2908      	cmp	r1, #8
 80156aa:	f63f af78 	bhi.w	801559e <_strtod_l+0x19e>
 80156ae:	3a30      	subs	r2, #48	@ 0x30
 80156b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80156b2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80156b4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80156b6:	f04f 080a 	mov.w	r8, #10
 80156ba:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80156bc:	1c56      	adds	r6, r2, #1
 80156be:	9619      	str	r6, [sp, #100]	@ 0x64
 80156c0:	7852      	ldrb	r2, [r2, #1]
 80156c2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80156c6:	f1be 0f09 	cmp.w	lr, #9
 80156ca:	d939      	bls.n	8015740 <_strtod_l+0x340>
 80156cc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80156ce:	1a76      	subs	r6, r6, r1
 80156d0:	2e08      	cmp	r6, #8
 80156d2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80156d6:	dc03      	bgt.n	80156e0 <_strtod_l+0x2e0>
 80156d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80156da:	4588      	cmp	r8, r1
 80156dc:	bfa8      	it	ge
 80156de:	4688      	movge	r8, r1
 80156e0:	f1bc 0f00 	cmp.w	ip, #0
 80156e4:	d001      	beq.n	80156ea <_strtod_l+0x2ea>
 80156e6:	f1c8 0800 	rsb	r8, r8, #0
 80156ea:	2d00      	cmp	r5, #0
 80156ec:	d14e      	bne.n	801578c <_strtod_l+0x38c>
 80156ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80156f0:	4308      	orrs	r0, r1
 80156f2:	f47f aebe 	bne.w	8015472 <_strtod_l+0x72>
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	f47f aed6 	bne.w	80154a8 <_strtod_l+0xa8>
 80156fc:	2a69      	cmp	r2, #105	@ 0x69
 80156fe:	d028      	beq.n	8015752 <_strtod_l+0x352>
 8015700:	dc25      	bgt.n	801574e <_strtod_l+0x34e>
 8015702:	2a49      	cmp	r2, #73	@ 0x49
 8015704:	d025      	beq.n	8015752 <_strtod_l+0x352>
 8015706:	2a4e      	cmp	r2, #78	@ 0x4e
 8015708:	f47f aece 	bne.w	80154a8 <_strtod_l+0xa8>
 801570c:	499b      	ldr	r1, [pc, #620]	@ (801597c <_strtod_l+0x57c>)
 801570e:	a819      	add	r0, sp, #100	@ 0x64
 8015710:	f001 fd4a 	bl	80171a8 <__match>
 8015714:	2800      	cmp	r0, #0
 8015716:	f43f aec7 	beq.w	80154a8 <_strtod_l+0xa8>
 801571a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801571c:	781b      	ldrb	r3, [r3, #0]
 801571e:	2b28      	cmp	r3, #40	@ 0x28
 8015720:	d12e      	bne.n	8015780 <_strtod_l+0x380>
 8015722:	4997      	ldr	r1, [pc, #604]	@ (8015980 <_strtod_l+0x580>)
 8015724:	aa1c      	add	r2, sp, #112	@ 0x70
 8015726:	a819      	add	r0, sp, #100	@ 0x64
 8015728:	f001 fd52 	bl	80171d0 <__hexnan>
 801572c:	2805      	cmp	r0, #5
 801572e:	d127      	bne.n	8015780 <_strtod_l+0x380>
 8015730:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8015732:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8015736:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801573a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801573e:	e698      	b.n	8015472 <_strtod_l+0x72>
 8015740:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8015742:	fb08 2101 	mla	r1, r8, r1, r2
 8015746:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801574a:	920e      	str	r2, [sp, #56]	@ 0x38
 801574c:	e7b5      	b.n	80156ba <_strtod_l+0x2ba>
 801574e:	2a6e      	cmp	r2, #110	@ 0x6e
 8015750:	e7da      	b.n	8015708 <_strtod_l+0x308>
 8015752:	498c      	ldr	r1, [pc, #560]	@ (8015984 <_strtod_l+0x584>)
 8015754:	a819      	add	r0, sp, #100	@ 0x64
 8015756:	f001 fd27 	bl	80171a8 <__match>
 801575a:	2800      	cmp	r0, #0
 801575c:	f43f aea4 	beq.w	80154a8 <_strtod_l+0xa8>
 8015760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015762:	4989      	ldr	r1, [pc, #548]	@ (8015988 <_strtod_l+0x588>)
 8015764:	3b01      	subs	r3, #1
 8015766:	a819      	add	r0, sp, #100	@ 0x64
 8015768:	9319      	str	r3, [sp, #100]	@ 0x64
 801576a:	f001 fd1d 	bl	80171a8 <__match>
 801576e:	b910      	cbnz	r0, 8015776 <_strtod_l+0x376>
 8015770:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015772:	3301      	adds	r3, #1
 8015774:	9319      	str	r3, [sp, #100]	@ 0x64
 8015776:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8015998 <_strtod_l+0x598>
 801577a:	f04f 0a00 	mov.w	sl, #0
 801577e:	e678      	b.n	8015472 <_strtod_l+0x72>
 8015780:	4882      	ldr	r0, [pc, #520]	@ (801598c <_strtod_l+0x58c>)
 8015782:	f001 fa61 	bl	8016c48 <nan>
 8015786:	ec5b ab10 	vmov	sl, fp, d0
 801578a:	e672      	b.n	8015472 <_strtod_l+0x72>
 801578c:	eba8 0309 	sub.w	r3, r8, r9
 8015790:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8015792:	9309      	str	r3, [sp, #36]	@ 0x24
 8015794:	2f00      	cmp	r7, #0
 8015796:	bf08      	it	eq
 8015798:	462f      	moveq	r7, r5
 801579a:	2d10      	cmp	r5, #16
 801579c:	462c      	mov	r4, r5
 801579e:	bfa8      	it	ge
 80157a0:	2410      	movge	r4, #16
 80157a2:	f7ea fecf 	bl	8000544 <__aeabi_ui2d>
 80157a6:	2d09      	cmp	r5, #9
 80157a8:	4682      	mov	sl, r0
 80157aa:	468b      	mov	fp, r1
 80157ac:	dc13      	bgt.n	80157d6 <_strtod_l+0x3d6>
 80157ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	f43f ae5e 	beq.w	8015472 <_strtod_l+0x72>
 80157b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80157b8:	dd78      	ble.n	80158ac <_strtod_l+0x4ac>
 80157ba:	2b16      	cmp	r3, #22
 80157bc:	dc5f      	bgt.n	801587e <_strtod_l+0x47e>
 80157be:	4974      	ldr	r1, [pc, #464]	@ (8015990 <_strtod_l+0x590>)
 80157c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80157c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80157c8:	4652      	mov	r2, sl
 80157ca:	465b      	mov	r3, fp
 80157cc:	f7ea ff34 	bl	8000638 <__aeabi_dmul>
 80157d0:	4682      	mov	sl, r0
 80157d2:	468b      	mov	fp, r1
 80157d4:	e64d      	b.n	8015472 <_strtod_l+0x72>
 80157d6:	4b6e      	ldr	r3, [pc, #440]	@ (8015990 <_strtod_l+0x590>)
 80157d8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80157dc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80157e0:	f7ea ff2a 	bl	8000638 <__aeabi_dmul>
 80157e4:	4682      	mov	sl, r0
 80157e6:	9808      	ldr	r0, [sp, #32]
 80157e8:	468b      	mov	fp, r1
 80157ea:	f7ea feab 	bl	8000544 <__aeabi_ui2d>
 80157ee:	4602      	mov	r2, r0
 80157f0:	460b      	mov	r3, r1
 80157f2:	4650      	mov	r0, sl
 80157f4:	4659      	mov	r1, fp
 80157f6:	f7ea fd69 	bl	80002cc <__adddf3>
 80157fa:	2d0f      	cmp	r5, #15
 80157fc:	4682      	mov	sl, r0
 80157fe:	468b      	mov	fp, r1
 8015800:	ddd5      	ble.n	80157ae <_strtod_l+0x3ae>
 8015802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015804:	1b2c      	subs	r4, r5, r4
 8015806:	441c      	add	r4, r3
 8015808:	2c00      	cmp	r4, #0
 801580a:	f340 8096 	ble.w	801593a <_strtod_l+0x53a>
 801580e:	f014 030f 	ands.w	r3, r4, #15
 8015812:	d00a      	beq.n	801582a <_strtod_l+0x42a>
 8015814:	495e      	ldr	r1, [pc, #376]	@ (8015990 <_strtod_l+0x590>)
 8015816:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801581a:	4652      	mov	r2, sl
 801581c:	465b      	mov	r3, fp
 801581e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015822:	f7ea ff09 	bl	8000638 <__aeabi_dmul>
 8015826:	4682      	mov	sl, r0
 8015828:	468b      	mov	fp, r1
 801582a:	f034 040f 	bics.w	r4, r4, #15
 801582e:	d073      	beq.n	8015918 <_strtod_l+0x518>
 8015830:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8015834:	dd48      	ble.n	80158c8 <_strtod_l+0x4c8>
 8015836:	2400      	movs	r4, #0
 8015838:	46a0      	mov	r8, r4
 801583a:	940a      	str	r4, [sp, #40]	@ 0x28
 801583c:	46a1      	mov	r9, r4
 801583e:	9a05      	ldr	r2, [sp, #20]
 8015840:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8015998 <_strtod_l+0x598>
 8015844:	2322      	movs	r3, #34	@ 0x22
 8015846:	6013      	str	r3, [r2, #0]
 8015848:	f04f 0a00 	mov.w	sl, #0
 801584c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801584e:	2b00      	cmp	r3, #0
 8015850:	f43f ae0f 	beq.w	8015472 <_strtod_l+0x72>
 8015854:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015856:	9805      	ldr	r0, [sp, #20]
 8015858:	f7ff f940 	bl	8014adc <_Bfree>
 801585c:	9805      	ldr	r0, [sp, #20]
 801585e:	4649      	mov	r1, r9
 8015860:	f7ff f93c 	bl	8014adc <_Bfree>
 8015864:	9805      	ldr	r0, [sp, #20]
 8015866:	4641      	mov	r1, r8
 8015868:	f7ff f938 	bl	8014adc <_Bfree>
 801586c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801586e:	9805      	ldr	r0, [sp, #20]
 8015870:	f7ff f934 	bl	8014adc <_Bfree>
 8015874:	9805      	ldr	r0, [sp, #20]
 8015876:	4621      	mov	r1, r4
 8015878:	f7ff f930 	bl	8014adc <_Bfree>
 801587c:	e5f9      	b.n	8015472 <_strtod_l+0x72>
 801587e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015880:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8015884:	4293      	cmp	r3, r2
 8015886:	dbbc      	blt.n	8015802 <_strtod_l+0x402>
 8015888:	4c41      	ldr	r4, [pc, #260]	@ (8015990 <_strtod_l+0x590>)
 801588a:	f1c5 050f 	rsb	r5, r5, #15
 801588e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8015892:	4652      	mov	r2, sl
 8015894:	465b      	mov	r3, fp
 8015896:	e9d1 0100 	ldrd	r0, r1, [r1]
 801589a:	f7ea fecd 	bl	8000638 <__aeabi_dmul>
 801589e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80158a0:	1b5d      	subs	r5, r3, r5
 80158a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80158a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80158aa:	e78f      	b.n	80157cc <_strtod_l+0x3cc>
 80158ac:	3316      	adds	r3, #22
 80158ae:	dba8      	blt.n	8015802 <_strtod_l+0x402>
 80158b0:	4b37      	ldr	r3, [pc, #220]	@ (8015990 <_strtod_l+0x590>)
 80158b2:	eba9 0808 	sub.w	r8, r9, r8
 80158b6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80158ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80158be:	4650      	mov	r0, sl
 80158c0:	4659      	mov	r1, fp
 80158c2:	f7ea ffe3 	bl	800088c <__aeabi_ddiv>
 80158c6:	e783      	b.n	80157d0 <_strtod_l+0x3d0>
 80158c8:	4b32      	ldr	r3, [pc, #200]	@ (8015994 <_strtod_l+0x594>)
 80158ca:	9308      	str	r3, [sp, #32]
 80158cc:	2300      	movs	r3, #0
 80158ce:	1124      	asrs	r4, r4, #4
 80158d0:	4650      	mov	r0, sl
 80158d2:	4659      	mov	r1, fp
 80158d4:	461e      	mov	r6, r3
 80158d6:	2c01      	cmp	r4, #1
 80158d8:	dc21      	bgt.n	801591e <_strtod_l+0x51e>
 80158da:	b10b      	cbz	r3, 80158e0 <_strtod_l+0x4e0>
 80158dc:	4682      	mov	sl, r0
 80158de:	468b      	mov	fp, r1
 80158e0:	492c      	ldr	r1, [pc, #176]	@ (8015994 <_strtod_l+0x594>)
 80158e2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80158e6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80158ea:	4652      	mov	r2, sl
 80158ec:	465b      	mov	r3, fp
 80158ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80158f2:	f7ea fea1 	bl	8000638 <__aeabi_dmul>
 80158f6:	4b28      	ldr	r3, [pc, #160]	@ (8015998 <_strtod_l+0x598>)
 80158f8:	460a      	mov	r2, r1
 80158fa:	400b      	ands	r3, r1
 80158fc:	4927      	ldr	r1, [pc, #156]	@ (801599c <_strtod_l+0x59c>)
 80158fe:	428b      	cmp	r3, r1
 8015900:	4682      	mov	sl, r0
 8015902:	d898      	bhi.n	8015836 <_strtod_l+0x436>
 8015904:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8015908:	428b      	cmp	r3, r1
 801590a:	bf86      	itte	hi
 801590c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80159a0 <_strtod_l+0x5a0>
 8015910:	f04f 3aff 	movhi.w	sl, #4294967295
 8015914:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8015918:	2300      	movs	r3, #0
 801591a:	9308      	str	r3, [sp, #32]
 801591c:	e07a      	b.n	8015a14 <_strtod_l+0x614>
 801591e:	07e2      	lsls	r2, r4, #31
 8015920:	d505      	bpl.n	801592e <_strtod_l+0x52e>
 8015922:	9b08      	ldr	r3, [sp, #32]
 8015924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015928:	f7ea fe86 	bl	8000638 <__aeabi_dmul>
 801592c:	2301      	movs	r3, #1
 801592e:	9a08      	ldr	r2, [sp, #32]
 8015930:	3208      	adds	r2, #8
 8015932:	3601      	adds	r6, #1
 8015934:	1064      	asrs	r4, r4, #1
 8015936:	9208      	str	r2, [sp, #32]
 8015938:	e7cd      	b.n	80158d6 <_strtod_l+0x4d6>
 801593a:	d0ed      	beq.n	8015918 <_strtod_l+0x518>
 801593c:	4264      	negs	r4, r4
 801593e:	f014 020f 	ands.w	r2, r4, #15
 8015942:	d00a      	beq.n	801595a <_strtod_l+0x55a>
 8015944:	4b12      	ldr	r3, [pc, #72]	@ (8015990 <_strtod_l+0x590>)
 8015946:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801594a:	4650      	mov	r0, sl
 801594c:	4659      	mov	r1, fp
 801594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015952:	f7ea ff9b 	bl	800088c <__aeabi_ddiv>
 8015956:	4682      	mov	sl, r0
 8015958:	468b      	mov	fp, r1
 801595a:	1124      	asrs	r4, r4, #4
 801595c:	d0dc      	beq.n	8015918 <_strtod_l+0x518>
 801595e:	2c1f      	cmp	r4, #31
 8015960:	dd20      	ble.n	80159a4 <_strtod_l+0x5a4>
 8015962:	2400      	movs	r4, #0
 8015964:	46a0      	mov	r8, r4
 8015966:	940a      	str	r4, [sp, #40]	@ 0x28
 8015968:	46a1      	mov	r9, r4
 801596a:	9a05      	ldr	r2, [sp, #20]
 801596c:	2322      	movs	r3, #34	@ 0x22
 801596e:	f04f 0a00 	mov.w	sl, #0
 8015972:	f04f 0b00 	mov.w	fp, #0
 8015976:	6013      	str	r3, [r2, #0]
 8015978:	e768      	b.n	801584c <_strtod_l+0x44c>
 801597a:	bf00      	nop
 801597c:	08019f3d 	.word	0x08019f3d
 8015980:	0801a154 	.word	0x0801a154
 8015984:	08019f35 	.word	0x08019f35
 8015988:	08019f6a 	.word	0x08019f6a
 801598c:	0801a318 	.word	0x0801a318
 8015990:	0801a088 	.word	0x0801a088
 8015994:	0801a060 	.word	0x0801a060
 8015998:	7ff00000 	.word	0x7ff00000
 801599c:	7ca00000 	.word	0x7ca00000
 80159a0:	7fefffff 	.word	0x7fefffff
 80159a4:	f014 0310 	ands.w	r3, r4, #16
 80159a8:	bf18      	it	ne
 80159aa:	236a      	movne	r3, #106	@ 0x6a
 80159ac:	4ea9      	ldr	r6, [pc, #676]	@ (8015c54 <_strtod_l+0x854>)
 80159ae:	9308      	str	r3, [sp, #32]
 80159b0:	4650      	mov	r0, sl
 80159b2:	4659      	mov	r1, fp
 80159b4:	2300      	movs	r3, #0
 80159b6:	07e2      	lsls	r2, r4, #31
 80159b8:	d504      	bpl.n	80159c4 <_strtod_l+0x5c4>
 80159ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80159be:	f7ea fe3b 	bl	8000638 <__aeabi_dmul>
 80159c2:	2301      	movs	r3, #1
 80159c4:	1064      	asrs	r4, r4, #1
 80159c6:	f106 0608 	add.w	r6, r6, #8
 80159ca:	d1f4      	bne.n	80159b6 <_strtod_l+0x5b6>
 80159cc:	b10b      	cbz	r3, 80159d2 <_strtod_l+0x5d2>
 80159ce:	4682      	mov	sl, r0
 80159d0:	468b      	mov	fp, r1
 80159d2:	9b08      	ldr	r3, [sp, #32]
 80159d4:	b1b3      	cbz	r3, 8015a04 <_strtod_l+0x604>
 80159d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80159da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80159de:	2b00      	cmp	r3, #0
 80159e0:	4659      	mov	r1, fp
 80159e2:	dd0f      	ble.n	8015a04 <_strtod_l+0x604>
 80159e4:	2b1f      	cmp	r3, #31
 80159e6:	dd55      	ble.n	8015a94 <_strtod_l+0x694>
 80159e8:	2b34      	cmp	r3, #52	@ 0x34
 80159ea:	bfde      	ittt	le
 80159ec:	f04f 33ff 	movle.w	r3, #4294967295
 80159f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80159f4:	4093      	lslle	r3, r2
 80159f6:	f04f 0a00 	mov.w	sl, #0
 80159fa:	bfcc      	ite	gt
 80159fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8015a00:	ea03 0b01 	andle.w	fp, r3, r1
 8015a04:	2200      	movs	r2, #0
 8015a06:	2300      	movs	r3, #0
 8015a08:	4650      	mov	r0, sl
 8015a0a:	4659      	mov	r1, fp
 8015a0c:	f7eb f87c 	bl	8000b08 <__aeabi_dcmpeq>
 8015a10:	2800      	cmp	r0, #0
 8015a12:	d1a6      	bne.n	8015962 <_strtod_l+0x562>
 8015a14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a16:	9300      	str	r3, [sp, #0]
 8015a18:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015a1a:	9805      	ldr	r0, [sp, #20]
 8015a1c:	462b      	mov	r3, r5
 8015a1e:	463a      	mov	r2, r7
 8015a20:	f7ff f8c4 	bl	8014bac <__s2b>
 8015a24:	900a      	str	r0, [sp, #40]	@ 0x28
 8015a26:	2800      	cmp	r0, #0
 8015a28:	f43f af05 	beq.w	8015836 <_strtod_l+0x436>
 8015a2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015a2e:	2a00      	cmp	r2, #0
 8015a30:	eba9 0308 	sub.w	r3, r9, r8
 8015a34:	bfa8      	it	ge
 8015a36:	2300      	movge	r3, #0
 8015a38:	9312      	str	r3, [sp, #72]	@ 0x48
 8015a3a:	2400      	movs	r4, #0
 8015a3c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8015a40:	9316      	str	r3, [sp, #88]	@ 0x58
 8015a42:	46a0      	mov	r8, r4
 8015a44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a46:	9805      	ldr	r0, [sp, #20]
 8015a48:	6859      	ldr	r1, [r3, #4]
 8015a4a:	f7ff f807 	bl	8014a5c <_Balloc>
 8015a4e:	4681      	mov	r9, r0
 8015a50:	2800      	cmp	r0, #0
 8015a52:	f43f aef4 	beq.w	801583e <_strtod_l+0x43e>
 8015a56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a58:	691a      	ldr	r2, [r3, #16]
 8015a5a:	3202      	adds	r2, #2
 8015a5c:	f103 010c 	add.w	r1, r3, #12
 8015a60:	0092      	lsls	r2, r2, #2
 8015a62:	300c      	adds	r0, #12
 8015a64:	f7fe f945 	bl	8013cf2 <memcpy>
 8015a68:	ec4b ab10 	vmov	d0, sl, fp
 8015a6c:	9805      	ldr	r0, [sp, #20]
 8015a6e:	aa1c      	add	r2, sp, #112	@ 0x70
 8015a70:	a91b      	add	r1, sp, #108	@ 0x6c
 8015a72:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8015a76:	f7ff fbd5 	bl	8015224 <__d2b>
 8015a7a:	901a      	str	r0, [sp, #104]	@ 0x68
 8015a7c:	2800      	cmp	r0, #0
 8015a7e:	f43f aede 	beq.w	801583e <_strtod_l+0x43e>
 8015a82:	9805      	ldr	r0, [sp, #20]
 8015a84:	2101      	movs	r1, #1
 8015a86:	f7ff f927 	bl	8014cd8 <__i2b>
 8015a8a:	4680      	mov	r8, r0
 8015a8c:	b948      	cbnz	r0, 8015aa2 <_strtod_l+0x6a2>
 8015a8e:	f04f 0800 	mov.w	r8, #0
 8015a92:	e6d4      	b.n	801583e <_strtod_l+0x43e>
 8015a94:	f04f 32ff 	mov.w	r2, #4294967295
 8015a98:	fa02 f303 	lsl.w	r3, r2, r3
 8015a9c:	ea03 0a0a 	and.w	sl, r3, sl
 8015aa0:	e7b0      	b.n	8015a04 <_strtod_l+0x604>
 8015aa2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8015aa4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015aa6:	2d00      	cmp	r5, #0
 8015aa8:	bfab      	itete	ge
 8015aaa:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8015aac:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8015aae:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8015ab0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8015ab2:	bfac      	ite	ge
 8015ab4:	18ef      	addge	r7, r5, r3
 8015ab6:	1b5e      	sublt	r6, r3, r5
 8015ab8:	9b08      	ldr	r3, [sp, #32]
 8015aba:	1aed      	subs	r5, r5, r3
 8015abc:	4415      	add	r5, r2
 8015abe:	4b66      	ldr	r3, [pc, #408]	@ (8015c58 <_strtod_l+0x858>)
 8015ac0:	3d01      	subs	r5, #1
 8015ac2:	429d      	cmp	r5, r3
 8015ac4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8015ac8:	da50      	bge.n	8015b6c <_strtod_l+0x76c>
 8015aca:	1b5b      	subs	r3, r3, r5
 8015acc:	2b1f      	cmp	r3, #31
 8015ace:	eba2 0203 	sub.w	r2, r2, r3
 8015ad2:	f04f 0101 	mov.w	r1, #1
 8015ad6:	dc3d      	bgt.n	8015b54 <_strtod_l+0x754>
 8015ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8015adc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015ade:	2300      	movs	r3, #0
 8015ae0:	9310      	str	r3, [sp, #64]	@ 0x40
 8015ae2:	18bd      	adds	r5, r7, r2
 8015ae4:	9b08      	ldr	r3, [sp, #32]
 8015ae6:	42af      	cmp	r7, r5
 8015ae8:	4416      	add	r6, r2
 8015aea:	441e      	add	r6, r3
 8015aec:	463b      	mov	r3, r7
 8015aee:	bfa8      	it	ge
 8015af0:	462b      	movge	r3, r5
 8015af2:	42b3      	cmp	r3, r6
 8015af4:	bfa8      	it	ge
 8015af6:	4633      	movge	r3, r6
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	bfc2      	ittt	gt
 8015afc:	1aed      	subgt	r5, r5, r3
 8015afe:	1af6      	subgt	r6, r6, r3
 8015b00:	1aff      	subgt	r7, r7, r3
 8015b02:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	dd16      	ble.n	8015b36 <_strtod_l+0x736>
 8015b08:	4641      	mov	r1, r8
 8015b0a:	9805      	ldr	r0, [sp, #20]
 8015b0c:	461a      	mov	r2, r3
 8015b0e:	f7ff f9a3 	bl	8014e58 <__pow5mult>
 8015b12:	4680      	mov	r8, r0
 8015b14:	2800      	cmp	r0, #0
 8015b16:	d0ba      	beq.n	8015a8e <_strtod_l+0x68e>
 8015b18:	4601      	mov	r1, r0
 8015b1a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8015b1c:	9805      	ldr	r0, [sp, #20]
 8015b1e:	f7ff f8f1 	bl	8014d04 <__multiply>
 8015b22:	900e      	str	r0, [sp, #56]	@ 0x38
 8015b24:	2800      	cmp	r0, #0
 8015b26:	f43f ae8a 	beq.w	801583e <_strtod_l+0x43e>
 8015b2a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015b2c:	9805      	ldr	r0, [sp, #20]
 8015b2e:	f7fe ffd5 	bl	8014adc <_Bfree>
 8015b32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b34:	931a      	str	r3, [sp, #104]	@ 0x68
 8015b36:	2d00      	cmp	r5, #0
 8015b38:	dc1d      	bgt.n	8015b76 <_strtod_l+0x776>
 8015b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	dd23      	ble.n	8015b88 <_strtod_l+0x788>
 8015b40:	4649      	mov	r1, r9
 8015b42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8015b44:	9805      	ldr	r0, [sp, #20]
 8015b46:	f7ff f987 	bl	8014e58 <__pow5mult>
 8015b4a:	4681      	mov	r9, r0
 8015b4c:	b9e0      	cbnz	r0, 8015b88 <_strtod_l+0x788>
 8015b4e:	f04f 0900 	mov.w	r9, #0
 8015b52:	e674      	b.n	801583e <_strtod_l+0x43e>
 8015b54:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8015b58:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8015b5c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8015b60:	35e2      	adds	r5, #226	@ 0xe2
 8015b62:	fa01 f305 	lsl.w	r3, r1, r5
 8015b66:	9310      	str	r3, [sp, #64]	@ 0x40
 8015b68:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015b6a:	e7ba      	b.n	8015ae2 <_strtod_l+0x6e2>
 8015b6c:	2300      	movs	r3, #0
 8015b6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8015b70:	2301      	movs	r3, #1
 8015b72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015b74:	e7b5      	b.n	8015ae2 <_strtod_l+0x6e2>
 8015b76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015b78:	9805      	ldr	r0, [sp, #20]
 8015b7a:	462a      	mov	r2, r5
 8015b7c:	f7ff f9c6 	bl	8014f0c <__lshift>
 8015b80:	901a      	str	r0, [sp, #104]	@ 0x68
 8015b82:	2800      	cmp	r0, #0
 8015b84:	d1d9      	bne.n	8015b3a <_strtod_l+0x73a>
 8015b86:	e65a      	b.n	801583e <_strtod_l+0x43e>
 8015b88:	2e00      	cmp	r6, #0
 8015b8a:	dd07      	ble.n	8015b9c <_strtod_l+0x79c>
 8015b8c:	4649      	mov	r1, r9
 8015b8e:	9805      	ldr	r0, [sp, #20]
 8015b90:	4632      	mov	r2, r6
 8015b92:	f7ff f9bb 	bl	8014f0c <__lshift>
 8015b96:	4681      	mov	r9, r0
 8015b98:	2800      	cmp	r0, #0
 8015b9a:	d0d8      	beq.n	8015b4e <_strtod_l+0x74e>
 8015b9c:	2f00      	cmp	r7, #0
 8015b9e:	dd08      	ble.n	8015bb2 <_strtod_l+0x7b2>
 8015ba0:	4641      	mov	r1, r8
 8015ba2:	9805      	ldr	r0, [sp, #20]
 8015ba4:	463a      	mov	r2, r7
 8015ba6:	f7ff f9b1 	bl	8014f0c <__lshift>
 8015baa:	4680      	mov	r8, r0
 8015bac:	2800      	cmp	r0, #0
 8015bae:	f43f ae46 	beq.w	801583e <_strtod_l+0x43e>
 8015bb2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015bb4:	9805      	ldr	r0, [sp, #20]
 8015bb6:	464a      	mov	r2, r9
 8015bb8:	f7ff fa30 	bl	801501c <__mdiff>
 8015bbc:	4604      	mov	r4, r0
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	f43f ae3d 	beq.w	801583e <_strtod_l+0x43e>
 8015bc4:	68c3      	ldr	r3, [r0, #12]
 8015bc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015bc8:	2300      	movs	r3, #0
 8015bca:	60c3      	str	r3, [r0, #12]
 8015bcc:	4641      	mov	r1, r8
 8015bce:	f7ff fa09 	bl	8014fe4 <__mcmp>
 8015bd2:	2800      	cmp	r0, #0
 8015bd4:	da46      	bge.n	8015c64 <_strtod_l+0x864>
 8015bd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015bd8:	ea53 030a 	orrs.w	r3, r3, sl
 8015bdc:	d16c      	bne.n	8015cb8 <_strtod_l+0x8b8>
 8015bde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d168      	bne.n	8015cb8 <_strtod_l+0x8b8>
 8015be6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015bea:	0d1b      	lsrs	r3, r3, #20
 8015bec:	051b      	lsls	r3, r3, #20
 8015bee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015bf2:	d961      	bls.n	8015cb8 <_strtod_l+0x8b8>
 8015bf4:	6963      	ldr	r3, [r4, #20]
 8015bf6:	b913      	cbnz	r3, 8015bfe <_strtod_l+0x7fe>
 8015bf8:	6923      	ldr	r3, [r4, #16]
 8015bfa:	2b01      	cmp	r3, #1
 8015bfc:	dd5c      	ble.n	8015cb8 <_strtod_l+0x8b8>
 8015bfe:	4621      	mov	r1, r4
 8015c00:	2201      	movs	r2, #1
 8015c02:	9805      	ldr	r0, [sp, #20]
 8015c04:	f7ff f982 	bl	8014f0c <__lshift>
 8015c08:	4641      	mov	r1, r8
 8015c0a:	4604      	mov	r4, r0
 8015c0c:	f7ff f9ea 	bl	8014fe4 <__mcmp>
 8015c10:	2800      	cmp	r0, #0
 8015c12:	dd51      	ble.n	8015cb8 <_strtod_l+0x8b8>
 8015c14:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015c18:	9a08      	ldr	r2, [sp, #32]
 8015c1a:	0d1b      	lsrs	r3, r3, #20
 8015c1c:	051b      	lsls	r3, r3, #20
 8015c1e:	2a00      	cmp	r2, #0
 8015c20:	d06b      	beq.n	8015cfa <_strtod_l+0x8fa>
 8015c22:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8015c26:	d868      	bhi.n	8015cfa <_strtod_l+0x8fa>
 8015c28:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8015c2c:	f67f ae9d 	bls.w	801596a <_strtod_l+0x56a>
 8015c30:	4b0a      	ldr	r3, [pc, #40]	@ (8015c5c <_strtod_l+0x85c>)
 8015c32:	4650      	mov	r0, sl
 8015c34:	4659      	mov	r1, fp
 8015c36:	2200      	movs	r2, #0
 8015c38:	f7ea fcfe 	bl	8000638 <__aeabi_dmul>
 8015c3c:	4b08      	ldr	r3, [pc, #32]	@ (8015c60 <_strtod_l+0x860>)
 8015c3e:	400b      	ands	r3, r1
 8015c40:	4682      	mov	sl, r0
 8015c42:	468b      	mov	fp, r1
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	f47f ae05 	bne.w	8015854 <_strtod_l+0x454>
 8015c4a:	9a05      	ldr	r2, [sp, #20]
 8015c4c:	2322      	movs	r3, #34	@ 0x22
 8015c4e:	6013      	str	r3, [r2, #0]
 8015c50:	e600      	b.n	8015854 <_strtod_l+0x454>
 8015c52:	bf00      	nop
 8015c54:	0801a180 	.word	0x0801a180
 8015c58:	fffffc02 	.word	0xfffffc02
 8015c5c:	39500000 	.word	0x39500000
 8015c60:	7ff00000 	.word	0x7ff00000
 8015c64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015c68:	d165      	bne.n	8015d36 <_strtod_l+0x936>
 8015c6a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015c6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015c70:	b35a      	cbz	r2, 8015cca <_strtod_l+0x8ca>
 8015c72:	4a9f      	ldr	r2, [pc, #636]	@ (8015ef0 <_strtod_l+0xaf0>)
 8015c74:	4293      	cmp	r3, r2
 8015c76:	d12b      	bne.n	8015cd0 <_strtod_l+0x8d0>
 8015c78:	9b08      	ldr	r3, [sp, #32]
 8015c7a:	4651      	mov	r1, sl
 8015c7c:	b303      	cbz	r3, 8015cc0 <_strtod_l+0x8c0>
 8015c7e:	4b9d      	ldr	r3, [pc, #628]	@ (8015ef4 <_strtod_l+0xaf4>)
 8015c80:	465a      	mov	r2, fp
 8015c82:	4013      	ands	r3, r2
 8015c84:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8015c88:	f04f 32ff 	mov.w	r2, #4294967295
 8015c8c:	d81b      	bhi.n	8015cc6 <_strtod_l+0x8c6>
 8015c8e:	0d1b      	lsrs	r3, r3, #20
 8015c90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8015c94:	fa02 f303 	lsl.w	r3, r2, r3
 8015c98:	4299      	cmp	r1, r3
 8015c9a:	d119      	bne.n	8015cd0 <_strtod_l+0x8d0>
 8015c9c:	4b96      	ldr	r3, [pc, #600]	@ (8015ef8 <_strtod_l+0xaf8>)
 8015c9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d102      	bne.n	8015caa <_strtod_l+0x8aa>
 8015ca4:	3101      	adds	r1, #1
 8015ca6:	f43f adca 	beq.w	801583e <_strtod_l+0x43e>
 8015caa:	4b92      	ldr	r3, [pc, #584]	@ (8015ef4 <_strtod_l+0xaf4>)
 8015cac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015cae:	401a      	ands	r2, r3
 8015cb0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8015cb4:	f04f 0a00 	mov.w	sl, #0
 8015cb8:	9b08      	ldr	r3, [sp, #32]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d1b8      	bne.n	8015c30 <_strtod_l+0x830>
 8015cbe:	e5c9      	b.n	8015854 <_strtod_l+0x454>
 8015cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8015cc4:	e7e8      	b.n	8015c98 <_strtod_l+0x898>
 8015cc6:	4613      	mov	r3, r2
 8015cc8:	e7e6      	b.n	8015c98 <_strtod_l+0x898>
 8015cca:	ea53 030a 	orrs.w	r3, r3, sl
 8015cce:	d0a1      	beq.n	8015c14 <_strtod_l+0x814>
 8015cd0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015cd2:	b1db      	cbz	r3, 8015d0c <_strtod_l+0x90c>
 8015cd4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015cd6:	4213      	tst	r3, r2
 8015cd8:	d0ee      	beq.n	8015cb8 <_strtod_l+0x8b8>
 8015cda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015cdc:	9a08      	ldr	r2, [sp, #32]
 8015cde:	4650      	mov	r0, sl
 8015ce0:	4659      	mov	r1, fp
 8015ce2:	b1bb      	cbz	r3, 8015d14 <_strtod_l+0x914>
 8015ce4:	f7ff fb6c 	bl	80153c0 <sulp>
 8015ce8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015cec:	ec53 2b10 	vmov	r2, r3, d0
 8015cf0:	f7ea faec 	bl	80002cc <__adddf3>
 8015cf4:	4682      	mov	sl, r0
 8015cf6:	468b      	mov	fp, r1
 8015cf8:	e7de      	b.n	8015cb8 <_strtod_l+0x8b8>
 8015cfa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8015cfe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015d02:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015d06:	f04f 3aff 	mov.w	sl, #4294967295
 8015d0a:	e7d5      	b.n	8015cb8 <_strtod_l+0x8b8>
 8015d0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8015d0e:	ea13 0f0a 	tst.w	r3, sl
 8015d12:	e7e1      	b.n	8015cd8 <_strtod_l+0x8d8>
 8015d14:	f7ff fb54 	bl	80153c0 <sulp>
 8015d18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015d1c:	ec53 2b10 	vmov	r2, r3, d0
 8015d20:	f7ea fad2 	bl	80002c8 <__aeabi_dsub>
 8015d24:	2200      	movs	r2, #0
 8015d26:	2300      	movs	r3, #0
 8015d28:	4682      	mov	sl, r0
 8015d2a:	468b      	mov	fp, r1
 8015d2c:	f7ea feec 	bl	8000b08 <__aeabi_dcmpeq>
 8015d30:	2800      	cmp	r0, #0
 8015d32:	d0c1      	beq.n	8015cb8 <_strtod_l+0x8b8>
 8015d34:	e619      	b.n	801596a <_strtod_l+0x56a>
 8015d36:	4641      	mov	r1, r8
 8015d38:	4620      	mov	r0, r4
 8015d3a:	f7ff facb 	bl	80152d4 <__ratio>
 8015d3e:	ec57 6b10 	vmov	r6, r7, d0
 8015d42:	2200      	movs	r2, #0
 8015d44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8015d48:	4630      	mov	r0, r6
 8015d4a:	4639      	mov	r1, r7
 8015d4c:	f7ea fef0 	bl	8000b30 <__aeabi_dcmple>
 8015d50:	2800      	cmp	r0, #0
 8015d52:	d06f      	beq.n	8015e34 <_strtod_l+0xa34>
 8015d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d17a      	bne.n	8015e50 <_strtod_l+0xa50>
 8015d5a:	f1ba 0f00 	cmp.w	sl, #0
 8015d5e:	d158      	bne.n	8015e12 <_strtod_l+0xa12>
 8015d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d15a      	bne.n	8015e20 <_strtod_l+0xa20>
 8015d6a:	4b64      	ldr	r3, [pc, #400]	@ (8015efc <_strtod_l+0xafc>)
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	4630      	mov	r0, r6
 8015d70:	4639      	mov	r1, r7
 8015d72:	f7ea fed3 	bl	8000b1c <__aeabi_dcmplt>
 8015d76:	2800      	cmp	r0, #0
 8015d78:	d159      	bne.n	8015e2e <_strtod_l+0xa2e>
 8015d7a:	4630      	mov	r0, r6
 8015d7c:	4639      	mov	r1, r7
 8015d7e:	4b60      	ldr	r3, [pc, #384]	@ (8015f00 <_strtod_l+0xb00>)
 8015d80:	2200      	movs	r2, #0
 8015d82:	f7ea fc59 	bl	8000638 <__aeabi_dmul>
 8015d86:	4606      	mov	r6, r0
 8015d88:	460f      	mov	r7, r1
 8015d8a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8015d8e:	9606      	str	r6, [sp, #24]
 8015d90:	9307      	str	r3, [sp, #28]
 8015d92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015d96:	4d57      	ldr	r5, [pc, #348]	@ (8015ef4 <_strtod_l+0xaf4>)
 8015d98:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015d9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d9e:	401d      	ands	r5, r3
 8015da0:	4b58      	ldr	r3, [pc, #352]	@ (8015f04 <_strtod_l+0xb04>)
 8015da2:	429d      	cmp	r5, r3
 8015da4:	f040 80b2 	bne.w	8015f0c <_strtod_l+0xb0c>
 8015da8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015daa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8015dae:	ec4b ab10 	vmov	d0, sl, fp
 8015db2:	f7ff f9c7 	bl	8015144 <__ulp>
 8015db6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015dba:	ec51 0b10 	vmov	r0, r1, d0
 8015dbe:	f7ea fc3b 	bl	8000638 <__aeabi_dmul>
 8015dc2:	4652      	mov	r2, sl
 8015dc4:	465b      	mov	r3, fp
 8015dc6:	f7ea fa81 	bl	80002cc <__adddf3>
 8015dca:	460b      	mov	r3, r1
 8015dcc:	4949      	ldr	r1, [pc, #292]	@ (8015ef4 <_strtod_l+0xaf4>)
 8015dce:	4a4e      	ldr	r2, [pc, #312]	@ (8015f08 <_strtod_l+0xb08>)
 8015dd0:	4019      	ands	r1, r3
 8015dd2:	4291      	cmp	r1, r2
 8015dd4:	4682      	mov	sl, r0
 8015dd6:	d942      	bls.n	8015e5e <_strtod_l+0xa5e>
 8015dd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015dda:	4b47      	ldr	r3, [pc, #284]	@ (8015ef8 <_strtod_l+0xaf8>)
 8015ddc:	429a      	cmp	r2, r3
 8015dde:	d103      	bne.n	8015de8 <_strtod_l+0x9e8>
 8015de0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015de2:	3301      	adds	r3, #1
 8015de4:	f43f ad2b 	beq.w	801583e <_strtod_l+0x43e>
 8015de8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8015ef8 <_strtod_l+0xaf8>
 8015dec:	f04f 3aff 	mov.w	sl, #4294967295
 8015df0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8015df2:	9805      	ldr	r0, [sp, #20]
 8015df4:	f7fe fe72 	bl	8014adc <_Bfree>
 8015df8:	9805      	ldr	r0, [sp, #20]
 8015dfa:	4649      	mov	r1, r9
 8015dfc:	f7fe fe6e 	bl	8014adc <_Bfree>
 8015e00:	9805      	ldr	r0, [sp, #20]
 8015e02:	4641      	mov	r1, r8
 8015e04:	f7fe fe6a 	bl	8014adc <_Bfree>
 8015e08:	9805      	ldr	r0, [sp, #20]
 8015e0a:	4621      	mov	r1, r4
 8015e0c:	f7fe fe66 	bl	8014adc <_Bfree>
 8015e10:	e618      	b.n	8015a44 <_strtod_l+0x644>
 8015e12:	f1ba 0f01 	cmp.w	sl, #1
 8015e16:	d103      	bne.n	8015e20 <_strtod_l+0xa20>
 8015e18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	f43f ada5 	beq.w	801596a <_strtod_l+0x56a>
 8015e20:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8015ed0 <_strtod_l+0xad0>
 8015e24:	4f35      	ldr	r7, [pc, #212]	@ (8015efc <_strtod_l+0xafc>)
 8015e26:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015e2a:	2600      	movs	r6, #0
 8015e2c:	e7b1      	b.n	8015d92 <_strtod_l+0x992>
 8015e2e:	4f34      	ldr	r7, [pc, #208]	@ (8015f00 <_strtod_l+0xb00>)
 8015e30:	2600      	movs	r6, #0
 8015e32:	e7aa      	b.n	8015d8a <_strtod_l+0x98a>
 8015e34:	4b32      	ldr	r3, [pc, #200]	@ (8015f00 <_strtod_l+0xb00>)
 8015e36:	4630      	mov	r0, r6
 8015e38:	4639      	mov	r1, r7
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f7ea fbfc 	bl	8000638 <__aeabi_dmul>
 8015e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e42:	4606      	mov	r6, r0
 8015e44:	460f      	mov	r7, r1
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d09f      	beq.n	8015d8a <_strtod_l+0x98a>
 8015e4a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8015e4e:	e7a0      	b.n	8015d92 <_strtod_l+0x992>
 8015e50:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8015ed8 <_strtod_l+0xad8>
 8015e54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015e58:	ec57 6b17 	vmov	r6, r7, d7
 8015e5c:	e799      	b.n	8015d92 <_strtod_l+0x992>
 8015e5e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8015e62:	9b08      	ldr	r3, [sp, #32]
 8015e64:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d1c1      	bne.n	8015df0 <_strtod_l+0x9f0>
 8015e6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8015e70:	0d1b      	lsrs	r3, r3, #20
 8015e72:	051b      	lsls	r3, r3, #20
 8015e74:	429d      	cmp	r5, r3
 8015e76:	d1bb      	bne.n	8015df0 <_strtod_l+0x9f0>
 8015e78:	4630      	mov	r0, r6
 8015e7a:	4639      	mov	r1, r7
 8015e7c:	f7eb f89a 	bl	8000fb4 <__aeabi_d2lz>
 8015e80:	f7ea fbac 	bl	80005dc <__aeabi_l2d>
 8015e84:	4602      	mov	r2, r0
 8015e86:	460b      	mov	r3, r1
 8015e88:	4630      	mov	r0, r6
 8015e8a:	4639      	mov	r1, r7
 8015e8c:	f7ea fa1c 	bl	80002c8 <__aeabi_dsub>
 8015e90:	460b      	mov	r3, r1
 8015e92:	4602      	mov	r2, r0
 8015e94:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8015e98:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8015e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015e9e:	ea46 060a 	orr.w	r6, r6, sl
 8015ea2:	431e      	orrs	r6, r3
 8015ea4:	d06f      	beq.n	8015f86 <_strtod_l+0xb86>
 8015ea6:	a30e      	add	r3, pc, #56	@ (adr r3, 8015ee0 <_strtod_l+0xae0>)
 8015ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015eac:	f7ea fe36 	bl	8000b1c <__aeabi_dcmplt>
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	f47f accf 	bne.w	8015854 <_strtod_l+0x454>
 8015eb6:	a30c      	add	r3, pc, #48	@ (adr r3, 8015ee8 <_strtod_l+0xae8>)
 8015eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ebc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8015ec0:	f7ea fe4a 	bl	8000b58 <__aeabi_dcmpgt>
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	d093      	beq.n	8015df0 <_strtod_l+0x9f0>
 8015ec8:	e4c4      	b.n	8015854 <_strtod_l+0x454>
 8015eca:	bf00      	nop
 8015ecc:	f3af 8000 	nop.w
 8015ed0:	00000000 	.word	0x00000000
 8015ed4:	bff00000 	.word	0xbff00000
 8015ed8:	00000000 	.word	0x00000000
 8015edc:	3ff00000 	.word	0x3ff00000
 8015ee0:	94a03595 	.word	0x94a03595
 8015ee4:	3fdfffff 	.word	0x3fdfffff
 8015ee8:	35afe535 	.word	0x35afe535
 8015eec:	3fe00000 	.word	0x3fe00000
 8015ef0:	000fffff 	.word	0x000fffff
 8015ef4:	7ff00000 	.word	0x7ff00000
 8015ef8:	7fefffff 	.word	0x7fefffff
 8015efc:	3ff00000 	.word	0x3ff00000
 8015f00:	3fe00000 	.word	0x3fe00000
 8015f04:	7fe00000 	.word	0x7fe00000
 8015f08:	7c9fffff 	.word	0x7c9fffff
 8015f0c:	9b08      	ldr	r3, [sp, #32]
 8015f0e:	b323      	cbz	r3, 8015f5a <_strtod_l+0xb5a>
 8015f10:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8015f14:	d821      	bhi.n	8015f5a <_strtod_l+0xb5a>
 8015f16:	a328      	add	r3, pc, #160	@ (adr r3, 8015fb8 <_strtod_l+0xbb8>)
 8015f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f1c:	4630      	mov	r0, r6
 8015f1e:	4639      	mov	r1, r7
 8015f20:	f7ea fe06 	bl	8000b30 <__aeabi_dcmple>
 8015f24:	b1a0      	cbz	r0, 8015f50 <_strtod_l+0xb50>
 8015f26:	4639      	mov	r1, r7
 8015f28:	4630      	mov	r0, r6
 8015f2a:	f7ea fe5d 	bl	8000be8 <__aeabi_d2uiz>
 8015f2e:	2801      	cmp	r0, #1
 8015f30:	bf38      	it	cc
 8015f32:	2001      	movcc	r0, #1
 8015f34:	f7ea fb06 	bl	8000544 <__aeabi_ui2d>
 8015f38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015f3a:	4606      	mov	r6, r0
 8015f3c:	460f      	mov	r7, r1
 8015f3e:	b9fb      	cbnz	r3, 8015f80 <_strtod_l+0xb80>
 8015f40:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015f44:	9014      	str	r0, [sp, #80]	@ 0x50
 8015f46:	9315      	str	r3, [sp, #84]	@ 0x54
 8015f48:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8015f4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8015f50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015f52:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8015f56:	1b5b      	subs	r3, r3, r5
 8015f58:	9311      	str	r3, [sp, #68]	@ 0x44
 8015f5a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8015f5e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8015f62:	f7ff f8ef 	bl	8015144 <__ulp>
 8015f66:	4650      	mov	r0, sl
 8015f68:	ec53 2b10 	vmov	r2, r3, d0
 8015f6c:	4659      	mov	r1, fp
 8015f6e:	f7ea fb63 	bl	8000638 <__aeabi_dmul>
 8015f72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8015f76:	f7ea f9a9 	bl	80002cc <__adddf3>
 8015f7a:	4682      	mov	sl, r0
 8015f7c:	468b      	mov	fp, r1
 8015f7e:	e770      	b.n	8015e62 <_strtod_l+0xa62>
 8015f80:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8015f84:	e7e0      	b.n	8015f48 <_strtod_l+0xb48>
 8015f86:	a30e      	add	r3, pc, #56	@ (adr r3, 8015fc0 <_strtod_l+0xbc0>)
 8015f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f8c:	f7ea fdc6 	bl	8000b1c <__aeabi_dcmplt>
 8015f90:	e798      	b.n	8015ec4 <_strtod_l+0xac4>
 8015f92:	2300      	movs	r3, #0
 8015f94:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015f96:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8015f98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015f9a:	6013      	str	r3, [r2, #0]
 8015f9c:	f7ff ba6d 	b.w	801547a <_strtod_l+0x7a>
 8015fa0:	2a65      	cmp	r2, #101	@ 0x65
 8015fa2:	f43f ab66 	beq.w	8015672 <_strtod_l+0x272>
 8015fa6:	2a45      	cmp	r2, #69	@ 0x45
 8015fa8:	f43f ab63 	beq.w	8015672 <_strtod_l+0x272>
 8015fac:	2301      	movs	r3, #1
 8015fae:	f7ff bb9e 	b.w	80156ee <_strtod_l+0x2ee>
 8015fb2:	bf00      	nop
 8015fb4:	f3af 8000 	nop.w
 8015fb8:	ffc00000 	.word	0xffc00000
 8015fbc:	41dfffff 	.word	0x41dfffff
 8015fc0:	94a03595 	.word	0x94a03595
 8015fc4:	3fcfffff 	.word	0x3fcfffff

08015fc8 <_strtod_r>:
 8015fc8:	4b01      	ldr	r3, [pc, #4]	@ (8015fd0 <_strtod_r+0x8>)
 8015fca:	f7ff ba19 	b.w	8015400 <_strtod_l>
 8015fce:	bf00      	nop
 8015fd0:	200000b8 	.word	0x200000b8

08015fd4 <_strtol_l.constprop.0>:
 8015fd4:	2b24      	cmp	r3, #36	@ 0x24
 8015fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015fda:	4686      	mov	lr, r0
 8015fdc:	4690      	mov	r8, r2
 8015fde:	d801      	bhi.n	8015fe4 <_strtol_l.constprop.0+0x10>
 8015fe0:	2b01      	cmp	r3, #1
 8015fe2:	d106      	bne.n	8015ff2 <_strtol_l.constprop.0+0x1e>
 8015fe4:	f7fd fe58 	bl	8013c98 <__errno>
 8015fe8:	2316      	movs	r3, #22
 8015fea:	6003      	str	r3, [r0, #0]
 8015fec:	2000      	movs	r0, #0
 8015fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ff2:	4834      	ldr	r0, [pc, #208]	@ (80160c4 <_strtol_l.constprop.0+0xf0>)
 8015ff4:	460d      	mov	r5, r1
 8015ff6:	462a      	mov	r2, r5
 8015ff8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015ffc:	5d06      	ldrb	r6, [r0, r4]
 8015ffe:	f016 0608 	ands.w	r6, r6, #8
 8016002:	d1f8      	bne.n	8015ff6 <_strtol_l.constprop.0+0x22>
 8016004:	2c2d      	cmp	r4, #45	@ 0x2d
 8016006:	d12d      	bne.n	8016064 <_strtol_l.constprop.0+0x90>
 8016008:	782c      	ldrb	r4, [r5, #0]
 801600a:	2601      	movs	r6, #1
 801600c:	1c95      	adds	r5, r2, #2
 801600e:	f033 0210 	bics.w	r2, r3, #16
 8016012:	d109      	bne.n	8016028 <_strtol_l.constprop.0+0x54>
 8016014:	2c30      	cmp	r4, #48	@ 0x30
 8016016:	d12a      	bne.n	801606e <_strtol_l.constprop.0+0x9a>
 8016018:	782a      	ldrb	r2, [r5, #0]
 801601a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801601e:	2a58      	cmp	r2, #88	@ 0x58
 8016020:	d125      	bne.n	801606e <_strtol_l.constprop.0+0x9a>
 8016022:	786c      	ldrb	r4, [r5, #1]
 8016024:	2310      	movs	r3, #16
 8016026:	3502      	adds	r5, #2
 8016028:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801602c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016030:	2200      	movs	r2, #0
 8016032:	fbbc f9f3 	udiv	r9, ip, r3
 8016036:	4610      	mov	r0, r2
 8016038:	fb03 ca19 	mls	sl, r3, r9, ip
 801603c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8016040:	2f09      	cmp	r7, #9
 8016042:	d81b      	bhi.n	801607c <_strtol_l.constprop.0+0xa8>
 8016044:	463c      	mov	r4, r7
 8016046:	42a3      	cmp	r3, r4
 8016048:	dd27      	ble.n	801609a <_strtol_l.constprop.0+0xc6>
 801604a:	1c57      	adds	r7, r2, #1
 801604c:	d007      	beq.n	801605e <_strtol_l.constprop.0+0x8a>
 801604e:	4581      	cmp	r9, r0
 8016050:	d320      	bcc.n	8016094 <_strtol_l.constprop.0+0xc0>
 8016052:	d101      	bne.n	8016058 <_strtol_l.constprop.0+0x84>
 8016054:	45a2      	cmp	sl, r4
 8016056:	db1d      	blt.n	8016094 <_strtol_l.constprop.0+0xc0>
 8016058:	fb00 4003 	mla	r0, r0, r3, r4
 801605c:	2201      	movs	r2, #1
 801605e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016062:	e7eb      	b.n	801603c <_strtol_l.constprop.0+0x68>
 8016064:	2c2b      	cmp	r4, #43	@ 0x2b
 8016066:	bf04      	itt	eq
 8016068:	782c      	ldrbeq	r4, [r5, #0]
 801606a:	1c95      	addeq	r5, r2, #2
 801606c:	e7cf      	b.n	801600e <_strtol_l.constprop.0+0x3a>
 801606e:	2b00      	cmp	r3, #0
 8016070:	d1da      	bne.n	8016028 <_strtol_l.constprop.0+0x54>
 8016072:	2c30      	cmp	r4, #48	@ 0x30
 8016074:	bf0c      	ite	eq
 8016076:	2308      	moveq	r3, #8
 8016078:	230a      	movne	r3, #10
 801607a:	e7d5      	b.n	8016028 <_strtol_l.constprop.0+0x54>
 801607c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8016080:	2f19      	cmp	r7, #25
 8016082:	d801      	bhi.n	8016088 <_strtol_l.constprop.0+0xb4>
 8016084:	3c37      	subs	r4, #55	@ 0x37
 8016086:	e7de      	b.n	8016046 <_strtol_l.constprop.0+0x72>
 8016088:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801608c:	2f19      	cmp	r7, #25
 801608e:	d804      	bhi.n	801609a <_strtol_l.constprop.0+0xc6>
 8016090:	3c57      	subs	r4, #87	@ 0x57
 8016092:	e7d8      	b.n	8016046 <_strtol_l.constprop.0+0x72>
 8016094:	f04f 32ff 	mov.w	r2, #4294967295
 8016098:	e7e1      	b.n	801605e <_strtol_l.constprop.0+0x8a>
 801609a:	1c53      	adds	r3, r2, #1
 801609c:	d108      	bne.n	80160b0 <_strtol_l.constprop.0+0xdc>
 801609e:	2322      	movs	r3, #34	@ 0x22
 80160a0:	f8ce 3000 	str.w	r3, [lr]
 80160a4:	4660      	mov	r0, ip
 80160a6:	f1b8 0f00 	cmp.w	r8, #0
 80160aa:	d0a0      	beq.n	8015fee <_strtol_l.constprop.0+0x1a>
 80160ac:	1e69      	subs	r1, r5, #1
 80160ae:	e006      	b.n	80160be <_strtol_l.constprop.0+0xea>
 80160b0:	b106      	cbz	r6, 80160b4 <_strtol_l.constprop.0+0xe0>
 80160b2:	4240      	negs	r0, r0
 80160b4:	f1b8 0f00 	cmp.w	r8, #0
 80160b8:	d099      	beq.n	8015fee <_strtol_l.constprop.0+0x1a>
 80160ba:	2a00      	cmp	r2, #0
 80160bc:	d1f6      	bne.n	80160ac <_strtol_l.constprop.0+0xd8>
 80160be:	f8c8 1000 	str.w	r1, [r8]
 80160c2:	e794      	b.n	8015fee <_strtol_l.constprop.0+0x1a>
 80160c4:	0801a1a9 	.word	0x0801a1a9

080160c8 <_strtol_r>:
 80160c8:	f7ff bf84 	b.w	8015fd4 <_strtol_l.constprop.0>

080160cc <__ssputs_r>:
 80160cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160d0:	688e      	ldr	r6, [r1, #8]
 80160d2:	461f      	mov	r7, r3
 80160d4:	42be      	cmp	r6, r7
 80160d6:	680b      	ldr	r3, [r1, #0]
 80160d8:	4682      	mov	sl, r0
 80160da:	460c      	mov	r4, r1
 80160dc:	4690      	mov	r8, r2
 80160de:	d82d      	bhi.n	801613c <__ssputs_r+0x70>
 80160e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80160e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80160e8:	d026      	beq.n	8016138 <__ssputs_r+0x6c>
 80160ea:	6965      	ldr	r5, [r4, #20]
 80160ec:	6909      	ldr	r1, [r1, #16]
 80160ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80160f2:	eba3 0901 	sub.w	r9, r3, r1
 80160f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80160fa:	1c7b      	adds	r3, r7, #1
 80160fc:	444b      	add	r3, r9
 80160fe:	106d      	asrs	r5, r5, #1
 8016100:	429d      	cmp	r5, r3
 8016102:	bf38      	it	cc
 8016104:	461d      	movcc	r5, r3
 8016106:	0553      	lsls	r3, r2, #21
 8016108:	d527      	bpl.n	801615a <__ssputs_r+0x8e>
 801610a:	4629      	mov	r1, r5
 801610c:	f7fc fcf2 	bl	8012af4 <_malloc_r>
 8016110:	4606      	mov	r6, r0
 8016112:	b360      	cbz	r0, 801616e <__ssputs_r+0xa2>
 8016114:	6921      	ldr	r1, [r4, #16]
 8016116:	464a      	mov	r2, r9
 8016118:	f7fd fdeb 	bl	8013cf2 <memcpy>
 801611c:	89a3      	ldrh	r3, [r4, #12]
 801611e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016126:	81a3      	strh	r3, [r4, #12]
 8016128:	6126      	str	r6, [r4, #16]
 801612a:	6165      	str	r5, [r4, #20]
 801612c:	444e      	add	r6, r9
 801612e:	eba5 0509 	sub.w	r5, r5, r9
 8016132:	6026      	str	r6, [r4, #0]
 8016134:	60a5      	str	r5, [r4, #8]
 8016136:	463e      	mov	r6, r7
 8016138:	42be      	cmp	r6, r7
 801613a:	d900      	bls.n	801613e <__ssputs_r+0x72>
 801613c:	463e      	mov	r6, r7
 801613e:	6820      	ldr	r0, [r4, #0]
 8016140:	4632      	mov	r2, r6
 8016142:	4641      	mov	r1, r8
 8016144:	f000 fd53 	bl	8016bee <memmove>
 8016148:	68a3      	ldr	r3, [r4, #8]
 801614a:	1b9b      	subs	r3, r3, r6
 801614c:	60a3      	str	r3, [r4, #8]
 801614e:	6823      	ldr	r3, [r4, #0]
 8016150:	4433      	add	r3, r6
 8016152:	6023      	str	r3, [r4, #0]
 8016154:	2000      	movs	r0, #0
 8016156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801615a:	462a      	mov	r2, r5
 801615c:	f001 f8e5 	bl	801732a <_realloc_r>
 8016160:	4606      	mov	r6, r0
 8016162:	2800      	cmp	r0, #0
 8016164:	d1e0      	bne.n	8016128 <__ssputs_r+0x5c>
 8016166:	6921      	ldr	r1, [r4, #16]
 8016168:	4650      	mov	r0, sl
 801616a:	f7fe fc25 	bl	80149b8 <_free_r>
 801616e:	230c      	movs	r3, #12
 8016170:	f8ca 3000 	str.w	r3, [sl]
 8016174:	89a3      	ldrh	r3, [r4, #12]
 8016176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801617a:	81a3      	strh	r3, [r4, #12]
 801617c:	f04f 30ff 	mov.w	r0, #4294967295
 8016180:	e7e9      	b.n	8016156 <__ssputs_r+0x8a>
	...

08016184 <_svfiprintf_r>:
 8016184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016188:	4698      	mov	r8, r3
 801618a:	898b      	ldrh	r3, [r1, #12]
 801618c:	061b      	lsls	r3, r3, #24
 801618e:	b09d      	sub	sp, #116	@ 0x74
 8016190:	4607      	mov	r7, r0
 8016192:	460d      	mov	r5, r1
 8016194:	4614      	mov	r4, r2
 8016196:	d510      	bpl.n	80161ba <_svfiprintf_r+0x36>
 8016198:	690b      	ldr	r3, [r1, #16]
 801619a:	b973      	cbnz	r3, 80161ba <_svfiprintf_r+0x36>
 801619c:	2140      	movs	r1, #64	@ 0x40
 801619e:	f7fc fca9 	bl	8012af4 <_malloc_r>
 80161a2:	6028      	str	r0, [r5, #0]
 80161a4:	6128      	str	r0, [r5, #16]
 80161a6:	b930      	cbnz	r0, 80161b6 <_svfiprintf_r+0x32>
 80161a8:	230c      	movs	r3, #12
 80161aa:	603b      	str	r3, [r7, #0]
 80161ac:	f04f 30ff 	mov.w	r0, #4294967295
 80161b0:	b01d      	add	sp, #116	@ 0x74
 80161b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b6:	2340      	movs	r3, #64	@ 0x40
 80161b8:	616b      	str	r3, [r5, #20]
 80161ba:	2300      	movs	r3, #0
 80161bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80161be:	2320      	movs	r3, #32
 80161c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80161c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80161c8:	2330      	movs	r3, #48	@ 0x30
 80161ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016368 <_svfiprintf_r+0x1e4>
 80161ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80161d2:	f04f 0901 	mov.w	r9, #1
 80161d6:	4623      	mov	r3, r4
 80161d8:	469a      	mov	sl, r3
 80161da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80161de:	b10a      	cbz	r2, 80161e4 <_svfiprintf_r+0x60>
 80161e0:	2a25      	cmp	r2, #37	@ 0x25
 80161e2:	d1f9      	bne.n	80161d8 <_svfiprintf_r+0x54>
 80161e4:	ebba 0b04 	subs.w	fp, sl, r4
 80161e8:	d00b      	beq.n	8016202 <_svfiprintf_r+0x7e>
 80161ea:	465b      	mov	r3, fp
 80161ec:	4622      	mov	r2, r4
 80161ee:	4629      	mov	r1, r5
 80161f0:	4638      	mov	r0, r7
 80161f2:	f7ff ff6b 	bl	80160cc <__ssputs_r>
 80161f6:	3001      	adds	r0, #1
 80161f8:	f000 80a7 	beq.w	801634a <_svfiprintf_r+0x1c6>
 80161fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80161fe:	445a      	add	r2, fp
 8016200:	9209      	str	r2, [sp, #36]	@ 0x24
 8016202:	f89a 3000 	ldrb.w	r3, [sl]
 8016206:	2b00      	cmp	r3, #0
 8016208:	f000 809f 	beq.w	801634a <_svfiprintf_r+0x1c6>
 801620c:	2300      	movs	r3, #0
 801620e:	f04f 32ff 	mov.w	r2, #4294967295
 8016212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016216:	f10a 0a01 	add.w	sl, sl, #1
 801621a:	9304      	str	r3, [sp, #16]
 801621c:	9307      	str	r3, [sp, #28]
 801621e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016222:	931a      	str	r3, [sp, #104]	@ 0x68
 8016224:	4654      	mov	r4, sl
 8016226:	2205      	movs	r2, #5
 8016228:	f814 1b01 	ldrb.w	r1, [r4], #1
 801622c:	484e      	ldr	r0, [pc, #312]	@ (8016368 <_svfiprintf_r+0x1e4>)
 801622e:	f7e9 ffef 	bl	8000210 <memchr>
 8016232:	9a04      	ldr	r2, [sp, #16]
 8016234:	b9d8      	cbnz	r0, 801626e <_svfiprintf_r+0xea>
 8016236:	06d0      	lsls	r0, r2, #27
 8016238:	bf44      	itt	mi
 801623a:	2320      	movmi	r3, #32
 801623c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016240:	0711      	lsls	r1, r2, #28
 8016242:	bf44      	itt	mi
 8016244:	232b      	movmi	r3, #43	@ 0x2b
 8016246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801624a:	f89a 3000 	ldrb.w	r3, [sl]
 801624e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016250:	d015      	beq.n	801627e <_svfiprintf_r+0xfa>
 8016252:	9a07      	ldr	r2, [sp, #28]
 8016254:	4654      	mov	r4, sl
 8016256:	2000      	movs	r0, #0
 8016258:	f04f 0c0a 	mov.w	ip, #10
 801625c:	4621      	mov	r1, r4
 801625e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016262:	3b30      	subs	r3, #48	@ 0x30
 8016264:	2b09      	cmp	r3, #9
 8016266:	d94b      	bls.n	8016300 <_svfiprintf_r+0x17c>
 8016268:	b1b0      	cbz	r0, 8016298 <_svfiprintf_r+0x114>
 801626a:	9207      	str	r2, [sp, #28]
 801626c:	e014      	b.n	8016298 <_svfiprintf_r+0x114>
 801626e:	eba0 0308 	sub.w	r3, r0, r8
 8016272:	fa09 f303 	lsl.w	r3, r9, r3
 8016276:	4313      	orrs	r3, r2
 8016278:	9304      	str	r3, [sp, #16]
 801627a:	46a2      	mov	sl, r4
 801627c:	e7d2      	b.n	8016224 <_svfiprintf_r+0xa0>
 801627e:	9b03      	ldr	r3, [sp, #12]
 8016280:	1d19      	adds	r1, r3, #4
 8016282:	681b      	ldr	r3, [r3, #0]
 8016284:	9103      	str	r1, [sp, #12]
 8016286:	2b00      	cmp	r3, #0
 8016288:	bfbb      	ittet	lt
 801628a:	425b      	neglt	r3, r3
 801628c:	f042 0202 	orrlt.w	r2, r2, #2
 8016290:	9307      	strge	r3, [sp, #28]
 8016292:	9307      	strlt	r3, [sp, #28]
 8016294:	bfb8      	it	lt
 8016296:	9204      	strlt	r2, [sp, #16]
 8016298:	7823      	ldrb	r3, [r4, #0]
 801629a:	2b2e      	cmp	r3, #46	@ 0x2e
 801629c:	d10a      	bne.n	80162b4 <_svfiprintf_r+0x130>
 801629e:	7863      	ldrb	r3, [r4, #1]
 80162a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80162a2:	d132      	bne.n	801630a <_svfiprintf_r+0x186>
 80162a4:	9b03      	ldr	r3, [sp, #12]
 80162a6:	1d1a      	adds	r2, r3, #4
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	9203      	str	r2, [sp, #12]
 80162ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80162b0:	3402      	adds	r4, #2
 80162b2:	9305      	str	r3, [sp, #20]
 80162b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016378 <_svfiprintf_r+0x1f4>
 80162b8:	7821      	ldrb	r1, [r4, #0]
 80162ba:	2203      	movs	r2, #3
 80162bc:	4650      	mov	r0, sl
 80162be:	f7e9 ffa7 	bl	8000210 <memchr>
 80162c2:	b138      	cbz	r0, 80162d4 <_svfiprintf_r+0x150>
 80162c4:	9b04      	ldr	r3, [sp, #16]
 80162c6:	eba0 000a 	sub.w	r0, r0, sl
 80162ca:	2240      	movs	r2, #64	@ 0x40
 80162cc:	4082      	lsls	r2, r0
 80162ce:	4313      	orrs	r3, r2
 80162d0:	3401      	adds	r4, #1
 80162d2:	9304      	str	r3, [sp, #16]
 80162d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162d8:	4824      	ldr	r0, [pc, #144]	@ (801636c <_svfiprintf_r+0x1e8>)
 80162da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80162de:	2206      	movs	r2, #6
 80162e0:	f7e9 ff96 	bl	8000210 <memchr>
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d036      	beq.n	8016356 <_svfiprintf_r+0x1d2>
 80162e8:	4b21      	ldr	r3, [pc, #132]	@ (8016370 <_svfiprintf_r+0x1ec>)
 80162ea:	bb1b      	cbnz	r3, 8016334 <_svfiprintf_r+0x1b0>
 80162ec:	9b03      	ldr	r3, [sp, #12]
 80162ee:	3307      	adds	r3, #7
 80162f0:	f023 0307 	bic.w	r3, r3, #7
 80162f4:	3308      	adds	r3, #8
 80162f6:	9303      	str	r3, [sp, #12]
 80162f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80162fa:	4433      	add	r3, r6
 80162fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80162fe:	e76a      	b.n	80161d6 <_svfiprintf_r+0x52>
 8016300:	fb0c 3202 	mla	r2, ip, r2, r3
 8016304:	460c      	mov	r4, r1
 8016306:	2001      	movs	r0, #1
 8016308:	e7a8      	b.n	801625c <_svfiprintf_r+0xd8>
 801630a:	2300      	movs	r3, #0
 801630c:	3401      	adds	r4, #1
 801630e:	9305      	str	r3, [sp, #20]
 8016310:	4619      	mov	r1, r3
 8016312:	f04f 0c0a 	mov.w	ip, #10
 8016316:	4620      	mov	r0, r4
 8016318:	f810 2b01 	ldrb.w	r2, [r0], #1
 801631c:	3a30      	subs	r2, #48	@ 0x30
 801631e:	2a09      	cmp	r2, #9
 8016320:	d903      	bls.n	801632a <_svfiprintf_r+0x1a6>
 8016322:	2b00      	cmp	r3, #0
 8016324:	d0c6      	beq.n	80162b4 <_svfiprintf_r+0x130>
 8016326:	9105      	str	r1, [sp, #20]
 8016328:	e7c4      	b.n	80162b4 <_svfiprintf_r+0x130>
 801632a:	fb0c 2101 	mla	r1, ip, r1, r2
 801632e:	4604      	mov	r4, r0
 8016330:	2301      	movs	r3, #1
 8016332:	e7f0      	b.n	8016316 <_svfiprintf_r+0x192>
 8016334:	ab03      	add	r3, sp, #12
 8016336:	9300      	str	r3, [sp, #0]
 8016338:	462a      	mov	r2, r5
 801633a:	4b0e      	ldr	r3, [pc, #56]	@ (8016374 <_svfiprintf_r+0x1f0>)
 801633c:	a904      	add	r1, sp, #16
 801633e:	4638      	mov	r0, r7
 8016340:	f7fc fd04 	bl	8012d4c <_printf_float>
 8016344:	1c42      	adds	r2, r0, #1
 8016346:	4606      	mov	r6, r0
 8016348:	d1d6      	bne.n	80162f8 <_svfiprintf_r+0x174>
 801634a:	89ab      	ldrh	r3, [r5, #12]
 801634c:	065b      	lsls	r3, r3, #25
 801634e:	f53f af2d 	bmi.w	80161ac <_svfiprintf_r+0x28>
 8016352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016354:	e72c      	b.n	80161b0 <_svfiprintf_r+0x2c>
 8016356:	ab03      	add	r3, sp, #12
 8016358:	9300      	str	r3, [sp, #0]
 801635a:	462a      	mov	r2, r5
 801635c:	4b05      	ldr	r3, [pc, #20]	@ (8016374 <_svfiprintf_r+0x1f0>)
 801635e:	a904      	add	r1, sp, #16
 8016360:	4638      	mov	r0, r7
 8016362:	f7fc ff8b 	bl	801327c <_printf_i>
 8016366:	e7ed      	b.n	8016344 <_svfiprintf_r+0x1c0>
 8016368:	0801a2a9 	.word	0x0801a2a9
 801636c:	0801a2b3 	.word	0x0801a2b3
 8016370:	08012d4d 	.word	0x08012d4d
 8016374:	080160cd 	.word	0x080160cd
 8016378:	0801a2af 	.word	0x0801a2af

0801637c <_sungetc_r>:
 801637c:	b538      	push	{r3, r4, r5, lr}
 801637e:	1c4b      	adds	r3, r1, #1
 8016380:	4614      	mov	r4, r2
 8016382:	d103      	bne.n	801638c <_sungetc_r+0x10>
 8016384:	f04f 35ff 	mov.w	r5, #4294967295
 8016388:	4628      	mov	r0, r5
 801638a:	bd38      	pop	{r3, r4, r5, pc}
 801638c:	8993      	ldrh	r3, [r2, #12]
 801638e:	f023 0320 	bic.w	r3, r3, #32
 8016392:	8193      	strh	r3, [r2, #12]
 8016394:	6853      	ldr	r3, [r2, #4]
 8016396:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8016398:	b2cd      	uxtb	r5, r1
 801639a:	b18a      	cbz	r2, 80163c0 <_sungetc_r+0x44>
 801639c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801639e:	429a      	cmp	r2, r3
 80163a0:	dd08      	ble.n	80163b4 <_sungetc_r+0x38>
 80163a2:	6823      	ldr	r3, [r4, #0]
 80163a4:	1e5a      	subs	r2, r3, #1
 80163a6:	6022      	str	r2, [r4, #0]
 80163a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80163ac:	6863      	ldr	r3, [r4, #4]
 80163ae:	3301      	adds	r3, #1
 80163b0:	6063      	str	r3, [r4, #4]
 80163b2:	e7e9      	b.n	8016388 <_sungetc_r+0xc>
 80163b4:	4621      	mov	r1, r4
 80163b6:	f000 fbe0 	bl	8016b7a <__submore>
 80163ba:	2800      	cmp	r0, #0
 80163bc:	d0f1      	beq.n	80163a2 <_sungetc_r+0x26>
 80163be:	e7e1      	b.n	8016384 <_sungetc_r+0x8>
 80163c0:	6921      	ldr	r1, [r4, #16]
 80163c2:	6822      	ldr	r2, [r4, #0]
 80163c4:	b141      	cbz	r1, 80163d8 <_sungetc_r+0x5c>
 80163c6:	4291      	cmp	r1, r2
 80163c8:	d206      	bcs.n	80163d8 <_sungetc_r+0x5c>
 80163ca:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80163ce:	42a9      	cmp	r1, r5
 80163d0:	d102      	bne.n	80163d8 <_sungetc_r+0x5c>
 80163d2:	3a01      	subs	r2, #1
 80163d4:	6022      	str	r2, [r4, #0]
 80163d6:	e7ea      	b.n	80163ae <_sungetc_r+0x32>
 80163d8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80163dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80163e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80163e2:	2303      	movs	r3, #3
 80163e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80163e6:	4623      	mov	r3, r4
 80163e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80163ec:	6023      	str	r3, [r4, #0]
 80163ee:	2301      	movs	r3, #1
 80163f0:	e7de      	b.n	80163b0 <_sungetc_r+0x34>

080163f2 <__ssrefill_r>:
 80163f2:	b510      	push	{r4, lr}
 80163f4:	460c      	mov	r4, r1
 80163f6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80163f8:	b169      	cbz	r1, 8016416 <__ssrefill_r+0x24>
 80163fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80163fe:	4299      	cmp	r1, r3
 8016400:	d001      	beq.n	8016406 <__ssrefill_r+0x14>
 8016402:	f7fe fad9 	bl	80149b8 <_free_r>
 8016406:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016408:	6063      	str	r3, [r4, #4]
 801640a:	2000      	movs	r0, #0
 801640c:	6360      	str	r0, [r4, #52]	@ 0x34
 801640e:	b113      	cbz	r3, 8016416 <__ssrefill_r+0x24>
 8016410:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8016412:	6023      	str	r3, [r4, #0]
 8016414:	bd10      	pop	{r4, pc}
 8016416:	6923      	ldr	r3, [r4, #16]
 8016418:	6023      	str	r3, [r4, #0]
 801641a:	2300      	movs	r3, #0
 801641c:	6063      	str	r3, [r4, #4]
 801641e:	89a3      	ldrh	r3, [r4, #12]
 8016420:	f043 0320 	orr.w	r3, r3, #32
 8016424:	81a3      	strh	r3, [r4, #12]
 8016426:	f04f 30ff 	mov.w	r0, #4294967295
 801642a:	e7f3      	b.n	8016414 <__ssrefill_r+0x22>

0801642c <__ssvfiscanf_r>:
 801642c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016430:	460c      	mov	r4, r1
 8016432:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8016436:	2100      	movs	r1, #0
 8016438:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801643c:	49a5      	ldr	r1, [pc, #660]	@ (80166d4 <__ssvfiscanf_r+0x2a8>)
 801643e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8016440:	f10d 0804 	add.w	r8, sp, #4
 8016444:	49a4      	ldr	r1, [pc, #656]	@ (80166d8 <__ssvfiscanf_r+0x2ac>)
 8016446:	4fa5      	ldr	r7, [pc, #660]	@ (80166dc <__ssvfiscanf_r+0x2b0>)
 8016448:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801644c:	4606      	mov	r6, r0
 801644e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8016450:	9300      	str	r3, [sp, #0]
 8016452:	7813      	ldrb	r3, [r2, #0]
 8016454:	2b00      	cmp	r3, #0
 8016456:	f000 8158 	beq.w	801670a <__ssvfiscanf_r+0x2de>
 801645a:	5cf9      	ldrb	r1, [r7, r3]
 801645c:	f011 0108 	ands.w	r1, r1, #8
 8016460:	f102 0501 	add.w	r5, r2, #1
 8016464:	d019      	beq.n	801649a <__ssvfiscanf_r+0x6e>
 8016466:	6863      	ldr	r3, [r4, #4]
 8016468:	2b00      	cmp	r3, #0
 801646a:	dd0f      	ble.n	801648c <__ssvfiscanf_r+0x60>
 801646c:	6823      	ldr	r3, [r4, #0]
 801646e:	781a      	ldrb	r2, [r3, #0]
 8016470:	5cba      	ldrb	r2, [r7, r2]
 8016472:	0712      	lsls	r2, r2, #28
 8016474:	d401      	bmi.n	801647a <__ssvfiscanf_r+0x4e>
 8016476:	462a      	mov	r2, r5
 8016478:	e7eb      	b.n	8016452 <__ssvfiscanf_r+0x26>
 801647a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801647c:	3201      	adds	r2, #1
 801647e:	9245      	str	r2, [sp, #276]	@ 0x114
 8016480:	6862      	ldr	r2, [r4, #4]
 8016482:	3301      	adds	r3, #1
 8016484:	3a01      	subs	r2, #1
 8016486:	6062      	str	r2, [r4, #4]
 8016488:	6023      	str	r3, [r4, #0]
 801648a:	e7ec      	b.n	8016466 <__ssvfiscanf_r+0x3a>
 801648c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801648e:	4621      	mov	r1, r4
 8016490:	4630      	mov	r0, r6
 8016492:	4798      	blx	r3
 8016494:	2800      	cmp	r0, #0
 8016496:	d0e9      	beq.n	801646c <__ssvfiscanf_r+0x40>
 8016498:	e7ed      	b.n	8016476 <__ssvfiscanf_r+0x4a>
 801649a:	2b25      	cmp	r3, #37	@ 0x25
 801649c:	d012      	beq.n	80164c4 <__ssvfiscanf_r+0x98>
 801649e:	4699      	mov	r9, r3
 80164a0:	6863      	ldr	r3, [r4, #4]
 80164a2:	2b00      	cmp	r3, #0
 80164a4:	f340 8093 	ble.w	80165ce <__ssvfiscanf_r+0x1a2>
 80164a8:	6822      	ldr	r2, [r4, #0]
 80164aa:	7813      	ldrb	r3, [r2, #0]
 80164ac:	454b      	cmp	r3, r9
 80164ae:	f040 812c 	bne.w	801670a <__ssvfiscanf_r+0x2de>
 80164b2:	6863      	ldr	r3, [r4, #4]
 80164b4:	3b01      	subs	r3, #1
 80164b6:	6063      	str	r3, [r4, #4]
 80164b8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80164ba:	3201      	adds	r2, #1
 80164bc:	3301      	adds	r3, #1
 80164be:	6022      	str	r2, [r4, #0]
 80164c0:	9345      	str	r3, [sp, #276]	@ 0x114
 80164c2:	e7d8      	b.n	8016476 <__ssvfiscanf_r+0x4a>
 80164c4:	9141      	str	r1, [sp, #260]	@ 0x104
 80164c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80164c8:	7853      	ldrb	r3, [r2, #1]
 80164ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80164cc:	bf02      	ittt	eq
 80164ce:	2310      	moveq	r3, #16
 80164d0:	1c95      	addeq	r5, r2, #2
 80164d2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80164d4:	220a      	movs	r2, #10
 80164d6:	46a9      	mov	r9, r5
 80164d8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80164dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80164e0:	2b09      	cmp	r3, #9
 80164e2:	d91e      	bls.n	8016522 <__ssvfiscanf_r+0xf6>
 80164e4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80166e0 <__ssvfiscanf_r+0x2b4>
 80164e8:	2203      	movs	r2, #3
 80164ea:	4650      	mov	r0, sl
 80164ec:	f7e9 fe90 	bl	8000210 <memchr>
 80164f0:	b138      	cbz	r0, 8016502 <__ssvfiscanf_r+0xd6>
 80164f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80164f4:	eba0 000a 	sub.w	r0, r0, sl
 80164f8:	2301      	movs	r3, #1
 80164fa:	4083      	lsls	r3, r0
 80164fc:	4313      	orrs	r3, r2
 80164fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8016500:	464d      	mov	r5, r9
 8016502:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016506:	2b78      	cmp	r3, #120	@ 0x78
 8016508:	d806      	bhi.n	8016518 <__ssvfiscanf_r+0xec>
 801650a:	2b57      	cmp	r3, #87	@ 0x57
 801650c:	d810      	bhi.n	8016530 <__ssvfiscanf_r+0x104>
 801650e:	2b25      	cmp	r3, #37	@ 0x25
 8016510:	d0c5      	beq.n	801649e <__ssvfiscanf_r+0x72>
 8016512:	d857      	bhi.n	80165c4 <__ssvfiscanf_r+0x198>
 8016514:	2b00      	cmp	r3, #0
 8016516:	d065      	beq.n	80165e4 <__ssvfiscanf_r+0x1b8>
 8016518:	2303      	movs	r3, #3
 801651a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801651c:	230a      	movs	r3, #10
 801651e:	9342      	str	r3, [sp, #264]	@ 0x108
 8016520:	e078      	b.n	8016614 <__ssvfiscanf_r+0x1e8>
 8016522:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8016524:	fb02 1103 	mla	r1, r2, r3, r1
 8016528:	3930      	subs	r1, #48	@ 0x30
 801652a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801652c:	464d      	mov	r5, r9
 801652e:	e7d2      	b.n	80164d6 <__ssvfiscanf_r+0xaa>
 8016530:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8016534:	2a20      	cmp	r2, #32
 8016536:	d8ef      	bhi.n	8016518 <__ssvfiscanf_r+0xec>
 8016538:	a101      	add	r1, pc, #4	@ (adr r1, 8016540 <__ssvfiscanf_r+0x114>)
 801653a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801653e:	bf00      	nop
 8016540:	080165f3 	.word	0x080165f3
 8016544:	08016519 	.word	0x08016519
 8016548:	08016519 	.word	0x08016519
 801654c:	0801664d 	.word	0x0801664d
 8016550:	08016519 	.word	0x08016519
 8016554:	08016519 	.word	0x08016519
 8016558:	08016519 	.word	0x08016519
 801655c:	08016519 	.word	0x08016519
 8016560:	08016519 	.word	0x08016519
 8016564:	08016519 	.word	0x08016519
 8016568:	08016519 	.word	0x08016519
 801656c:	08016663 	.word	0x08016663
 8016570:	08016649 	.word	0x08016649
 8016574:	080165cb 	.word	0x080165cb
 8016578:	080165cb 	.word	0x080165cb
 801657c:	080165cb 	.word	0x080165cb
 8016580:	08016519 	.word	0x08016519
 8016584:	08016605 	.word	0x08016605
 8016588:	08016519 	.word	0x08016519
 801658c:	08016519 	.word	0x08016519
 8016590:	08016519 	.word	0x08016519
 8016594:	08016519 	.word	0x08016519
 8016598:	08016673 	.word	0x08016673
 801659c:	0801660d 	.word	0x0801660d
 80165a0:	080165eb 	.word	0x080165eb
 80165a4:	08016519 	.word	0x08016519
 80165a8:	08016519 	.word	0x08016519
 80165ac:	0801666f 	.word	0x0801666f
 80165b0:	08016519 	.word	0x08016519
 80165b4:	08016649 	.word	0x08016649
 80165b8:	08016519 	.word	0x08016519
 80165bc:	08016519 	.word	0x08016519
 80165c0:	080165f3 	.word	0x080165f3
 80165c4:	3b45      	subs	r3, #69	@ 0x45
 80165c6:	2b02      	cmp	r3, #2
 80165c8:	d8a6      	bhi.n	8016518 <__ssvfiscanf_r+0xec>
 80165ca:	2305      	movs	r3, #5
 80165cc:	e021      	b.n	8016612 <__ssvfiscanf_r+0x1e6>
 80165ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80165d0:	4621      	mov	r1, r4
 80165d2:	4630      	mov	r0, r6
 80165d4:	4798      	blx	r3
 80165d6:	2800      	cmp	r0, #0
 80165d8:	f43f af66 	beq.w	80164a8 <__ssvfiscanf_r+0x7c>
 80165dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80165de:	2800      	cmp	r0, #0
 80165e0:	f040 808b 	bne.w	80166fa <__ssvfiscanf_r+0x2ce>
 80165e4:	f04f 30ff 	mov.w	r0, #4294967295
 80165e8:	e08b      	b.n	8016702 <__ssvfiscanf_r+0x2d6>
 80165ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80165ec:	f042 0220 	orr.w	r2, r2, #32
 80165f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80165f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80165f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80165f8:	9241      	str	r2, [sp, #260]	@ 0x104
 80165fa:	2210      	movs	r2, #16
 80165fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80165fe:	9242      	str	r2, [sp, #264]	@ 0x108
 8016600:	d902      	bls.n	8016608 <__ssvfiscanf_r+0x1dc>
 8016602:	e005      	b.n	8016610 <__ssvfiscanf_r+0x1e4>
 8016604:	2300      	movs	r3, #0
 8016606:	9342      	str	r3, [sp, #264]	@ 0x108
 8016608:	2303      	movs	r3, #3
 801660a:	e002      	b.n	8016612 <__ssvfiscanf_r+0x1e6>
 801660c:	2308      	movs	r3, #8
 801660e:	9342      	str	r3, [sp, #264]	@ 0x108
 8016610:	2304      	movs	r3, #4
 8016612:	9347      	str	r3, [sp, #284]	@ 0x11c
 8016614:	6863      	ldr	r3, [r4, #4]
 8016616:	2b00      	cmp	r3, #0
 8016618:	dd39      	ble.n	801668e <__ssvfiscanf_r+0x262>
 801661a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801661c:	0659      	lsls	r1, r3, #25
 801661e:	d404      	bmi.n	801662a <__ssvfiscanf_r+0x1fe>
 8016620:	6823      	ldr	r3, [r4, #0]
 8016622:	781a      	ldrb	r2, [r3, #0]
 8016624:	5cba      	ldrb	r2, [r7, r2]
 8016626:	0712      	lsls	r2, r2, #28
 8016628:	d438      	bmi.n	801669c <__ssvfiscanf_r+0x270>
 801662a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801662c:	2b02      	cmp	r3, #2
 801662e:	dc47      	bgt.n	80166c0 <__ssvfiscanf_r+0x294>
 8016630:	466b      	mov	r3, sp
 8016632:	4622      	mov	r2, r4
 8016634:	a941      	add	r1, sp, #260	@ 0x104
 8016636:	4630      	mov	r0, r6
 8016638:	f000 f86c 	bl	8016714 <_scanf_chars>
 801663c:	2801      	cmp	r0, #1
 801663e:	d064      	beq.n	801670a <__ssvfiscanf_r+0x2de>
 8016640:	2802      	cmp	r0, #2
 8016642:	f47f af18 	bne.w	8016476 <__ssvfiscanf_r+0x4a>
 8016646:	e7c9      	b.n	80165dc <__ssvfiscanf_r+0x1b0>
 8016648:	220a      	movs	r2, #10
 801664a:	e7d7      	b.n	80165fc <__ssvfiscanf_r+0x1d0>
 801664c:	4629      	mov	r1, r5
 801664e:	4640      	mov	r0, r8
 8016650:	f000 fa5a 	bl	8016b08 <__sccl>
 8016654:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016656:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801665a:	9341      	str	r3, [sp, #260]	@ 0x104
 801665c:	4605      	mov	r5, r0
 801665e:	2301      	movs	r3, #1
 8016660:	e7d7      	b.n	8016612 <__ssvfiscanf_r+0x1e6>
 8016662:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8016664:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016668:	9341      	str	r3, [sp, #260]	@ 0x104
 801666a:	2300      	movs	r3, #0
 801666c:	e7d1      	b.n	8016612 <__ssvfiscanf_r+0x1e6>
 801666e:	2302      	movs	r3, #2
 8016670:	e7cf      	b.n	8016612 <__ssvfiscanf_r+0x1e6>
 8016672:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8016674:	06c3      	lsls	r3, r0, #27
 8016676:	f53f aefe 	bmi.w	8016476 <__ssvfiscanf_r+0x4a>
 801667a:	9b00      	ldr	r3, [sp, #0]
 801667c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801667e:	1d19      	adds	r1, r3, #4
 8016680:	9100      	str	r1, [sp, #0]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	07c0      	lsls	r0, r0, #31
 8016686:	bf4c      	ite	mi
 8016688:	801a      	strhmi	r2, [r3, #0]
 801668a:	601a      	strpl	r2, [r3, #0]
 801668c:	e6f3      	b.n	8016476 <__ssvfiscanf_r+0x4a>
 801668e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8016690:	4621      	mov	r1, r4
 8016692:	4630      	mov	r0, r6
 8016694:	4798      	blx	r3
 8016696:	2800      	cmp	r0, #0
 8016698:	d0bf      	beq.n	801661a <__ssvfiscanf_r+0x1ee>
 801669a:	e79f      	b.n	80165dc <__ssvfiscanf_r+0x1b0>
 801669c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801669e:	3201      	adds	r2, #1
 80166a0:	9245      	str	r2, [sp, #276]	@ 0x114
 80166a2:	6862      	ldr	r2, [r4, #4]
 80166a4:	3a01      	subs	r2, #1
 80166a6:	2a00      	cmp	r2, #0
 80166a8:	6062      	str	r2, [r4, #4]
 80166aa:	dd02      	ble.n	80166b2 <__ssvfiscanf_r+0x286>
 80166ac:	3301      	adds	r3, #1
 80166ae:	6023      	str	r3, [r4, #0]
 80166b0:	e7b6      	b.n	8016620 <__ssvfiscanf_r+0x1f4>
 80166b2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80166b4:	4621      	mov	r1, r4
 80166b6:	4630      	mov	r0, r6
 80166b8:	4798      	blx	r3
 80166ba:	2800      	cmp	r0, #0
 80166bc:	d0b0      	beq.n	8016620 <__ssvfiscanf_r+0x1f4>
 80166be:	e78d      	b.n	80165dc <__ssvfiscanf_r+0x1b0>
 80166c0:	2b04      	cmp	r3, #4
 80166c2:	dc0f      	bgt.n	80166e4 <__ssvfiscanf_r+0x2b8>
 80166c4:	466b      	mov	r3, sp
 80166c6:	4622      	mov	r2, r4
 80166c8:	a941      	add	r1, sp, #260	@ 0x104
 80166ca:	4630      	mov	r0, r6
 80166cc:	f000 f87c 	bl	80167c8 <_scanf_i>
 80166d0:	e7b4      	b.n	801663c <__ssvfiscanf_r+0x210>
 80166d2:	bf00      	nop
 80166d4:	0801637d 	.word	0x0801637d
 80166d8:	080163f3 	.word	0x080163f3
 80166dc:	0801a1a9 	.word	0x0801a1a9
 80166e0:	0801a2af 	.word	0x0801a2af
 80166e4:	4b0a      	ldr	r3, [pc, #40]	@ (8016710 <__ssvfiscanf_r+0x2e4>)
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	f43f aec5 	beq.w	8016476 <__ssvfiscanf_r+0x4a>
 80166ec:	466b      	mov	r3, sp
 80166ee:	4622      	mov	r2, r4
 80166f0:	a941      	add	r1, sp, #260	@ 0x104
 80166f2:	4630      	mov	r0, r6
 80166f4:	f7fc fee2 	bl	80134bc <_scanf_float>
 80166f8:	e7a0      	b.n	801663c <__ssvfiscanf_r+0x210>
 80166fa:	89a3      	ldrh	r3, [r4, #12]
 80166fc:	065b      	lsls	r3, r3, #25
 80166fe:	f53f af71 	bmi.w	80165e4 <__ssvfiscanf_r+0x1b8>
 8016702:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8016706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801670a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801670c:	e7f9      	b.n	8016702 <__ssvfiscanf_r+0x2d6>
 801670e:	bf00      	nop
 8016710:	080134bd 	.word	0x080134bd

08016714 <_scanf_chars>:
 8016714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016718:	4615      	mov	r5, r2
 801671a:	688a      	ldr	r2, [r1, #8]
 801671c:	4680      	mov	r8, r0
 801671e:	460c      	mov	r4, r1
 8016720:	b932      	cbnz	r2, 8016730 <_scanf_chars+0x1c>
 8016722:	698a      	ldr	r2, [r1, #24]
 8016724:	2a00      	cmp	r2, #0
 8016726:	bf14      	ite	ne
 8016728:	f04f 32ff 	movne.w	r2, #4294967295
 801672c:	2201      	moveq	r2, #1
 801672e:	608a      	str	r2, [r1, #8]
 8016730:	6822      	ldr	r2, [r4, #0]
 8016732:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80167c4 <_scanf_chars+0xb0>
 8016736:	06d1      	lsls	r1, r2, #27
 8016738:	bf5f      	itttt	pl
 801673a:	681a      	ldrpl	r2, [r3, #0]
 801673c:	1d11      	addpl	r1, r2, #4
 801673e:	6019      	strpl	r1, [r3, #0]
 8016740:	6816      	ldrpl	r6, [r2, #0]
 8016742:	2700      	movs	r7, #0
 8016744:	69a0      	ldr	r0, [r4, #24]
 8016746:	b188      	cbz	r0, 801676c <_scanf_chars+0x58>
 8016748:	2801      	cmp	r0, #1
 801674a:	d107      	bne.n	801675c <_scanf_chars+0x48>
 801674c:	682b      	ldr	r3, [r5, #0]
 801674e:	781a      	ldrb	r2, [r3, #0]
 8016750:	6963      	ldr	r3, [r4, #20]
 8016752:	5c9b      	ldrb	r3, [r3, r2]
 8016754:	b953      	cbnz	r3, 801676c <_scanf_chars+0x58>
 8016756:	2f00      	cmp	r7, #0
 8016758:	d031      	beq.n	80167be <_scanf_chars+0xaa>
 801675a:	e022      	b.n	80167a2 <_scanf_chars+0x8e>
 801675c:	2802      	cmp	r0, #2
 801675e:	d120      	bne.n	80167a2 <_scanf_chars+0x8e>
 8016760:	682b      	ldr	r3, [r5, #0]
 8016762:	781b      	ldrb	r3, [r3, #0]
 8016764:	f819 3003 	ldrb.w	r3, [r9, r3]
 8016768:	071b      	lsls	r3, r3, #28
 801676a:	d41a      	bmi.n	80167a2 <_scanf_chars+0x8e>
 801676c:	6823      	ldr	r3, [r4, #0]
 801676e:	06da      	lsls	r2, r3, #27
 8016770:	bf5e      	ittt	pl
 8016772:	682b      	ldrpl	r3, [r5, #0]
 8016774:	781b      	ldrbpl	r3, [r3, #0]
 8016776:	f806 3b01 	strbpl.w	r3, [r6], #1
 801677a:	682a      	ldr	r2, [r5, #0]
 801677c:	686b      	ldr	r3, [r5, #4]
 801677e:	3201      	adds	r2, #1
 8016780:	602a      	str	r2, [r5, #0]
 8016782:	68a2      	ldr	r2, [r4, #8]
 8016784:	3b01      	subs	r3, #1
 8016786:	3a01      	subs	r2, #1
 8016788:	606b      	str	r3, [r5, #4]
 801678a:	3701      	adds	r7, #1
 801678c:	60a2      	str	r2, [r4, #8]
 801678e:	b142      	cbz	r2, 80167a2 <_scanf_chars+0x8e>
 8016790:	2b00      	cmp	r3, #0
 8016792:	dcd7      	bgt.n	8016744 <_scanf_chars+0x30>
 8016794:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8016798:	4629      	mov	r1, r5
 801679a:	4640      	mov	r0, r8
 801679c:	4798      	blx	r3
 801679e:	2800      	cmp	r0, #0
 80167a0:	d0d0      	beq.n	8016744 <_scanf_chars+0x30>
 80167a2:	6823      	ldr	r3, [r4, #0]
 80167a4:	f013 0310 	ands.w	r3, r3, #16
 80167a8:	d105      	bne.n	80167b6 <_scanf_chars+0xa2>
 80167aa:	68e2      	ldr	r2, [r4, #12]
 80167ac:	3201      	adds	r2, #1
 80167ae:	60e2      	str	r2, [r4, #12]
 80167b0:	69a2      	ldr	r2, [r4, #24]
 80167b2:	b102      	cbz	r2, 80167b6 <_scanf_chars+0xa2>
 80167b4:	7033      	strb	r3, [r6, #0]
 80167b6:	6923      	ldr	r3, [r4, #16]
 80167b8:	443b      	add	r3, r7
 80167ba:	6123      	str	r3, [r4, #16]
 80167bc:	2000      	movs	r0, #0
 80167be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167c2:	bf00      	nop
 80167c4:	0801a1a9 	.word	0x0801a1a9

080167c8 <_scanf_i>:
 80167c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167cc:	4698      	mov	r8, r3
 80167ce:	4b74      	ldr	r3, [pc, #464]	@ (80169a0 <_scanf_i+0x1d8>)
 80167d0:	460c      	mov	r4, r1
 80167d2:	4682      	mov	sl, r0
 80167d4:	4616      	mov	r6, r2
 80167d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80167da:	b087      	sub	sp, #28
 80167dc:	ab03      	add	r3, sp, #12
 80167de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80167e2:	4b70      	ldr	r3, [pc, #448]	@ (80169a4 <_scanf_i+0x1dc>)
 80167e4:	69a1      	ldr	r1, [r4, #24]
 80167e6:	4a70      	ldr	r2, [pc, #448]	@ (80169a8 <_scanf_i+0x1e0>)
 80167e8:	2903      	cmp	r1, #3
 80167ea:	bf08      	it	eq
 80167ec:	461a      	moveq	r2, r3
 80167ee:	68a3      	ldr	r3, [r4, #8]
 80167f0:	9201      	str	r2, [sp, #4]
 80167f2:	1e5a      	subs	r2, r3, #1
 80167f4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80167f8:	bf88      	it	hi
 80167fa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80167fe:	4627      	mov	r7, r4
 8016800:	bf82      	ittt	hi
 8016802:	eb03 0905 	addhi.w	r9, r3, r5
 8016806:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801680a:	60a3      	strhi	r3, [r4, #8]
 801680c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8016810:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8016814:	bf98      	it	ls
 8016816:	f04f 0900 	movls.w	r9, #0
 801681a:	6023      	str	r3, [r4, #0]
 801681c:	463d      	mov	r5, r7
 801681e:	f04f 0b00 	mov.w	fp, #0
 8016822:	6831      	ldr	r1, [r6, #0]
 8016824:	ab03      	add	r3, sp, #12
 8016826:	7809      	ldrb	r1, [r1, #0]
 8016828:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801682c:	2202      	movs	r2, #2
 801682e:	f7e9 fcef 	bl	8000210 <memchr>
 8016832:	b328      	cbz	r0, 8016880 <_scanf_i+0xb8>
 8016834:	f1bb 0f01 	cmp.w	fp, #1
 8016838:	d159      	bne.n	80168ee <_scanf_i+0x126>
 801683a:	6862      	ldr	r2, [r4, #4]
 801683c:	b92a      	cbnz	r2, 801684a <_scanf_i+0x82>
 801683e:	6822      	ldr	r2, [r4, #0]
 8016840:	2108      	movs	r1, #8
 8016842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016846:	6061      	str	r1, [r4, #4]
 8016848:	6022      	str	r2, [r4, #0]
 801684a:	6822      	ldr	r2, [r4, #0]
 801684c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8016850:	6022      	str	r2, [r4, #0]
 8016852:	68a2      	ldr	r2, [r4, #8]
 8016854:	1e51      	subs	r1, r2, #1
 8016856:	60a1      	str	r1, [r4, #8]
 8016858:	b192      	cbz	r2, 8016880 <_scanf_i+0xb8>
 801685a:	6832      	ldr	r2, [r6, #0]
 801685c:	1c51      	adds	r1, r2, #1
 801685e:	6031      	str	r1, [r6, #0]
 8016860:	7812      	ldrb	r2, [r2, #0]
 8016862:	f805 2b01 	strb.w	r2, [r5], #1
 8016866:	6872      	ldr	r2, [r6, #4]
 8016868:	3a01      	subs	r2, #1
 801686a:	2a00      	cmp	r2, #0
 801686c:	6072      	str	r2, [r6, #4]
 801686e:	dc07      	bgt.n	8016880 <_scanf_i+0xb8>
 8016870:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8016874:	4631      	mov	r1, r6
 8016876:	4650      	mov	r0, sl
 8016878:	4790      	blx	r2
 801687a:	2800      	cmp	r0, #0
 801687c:	f040 8085 	bne.w	801698a <_scanf_i+0x1c2>
 8016880:	f10b 0b01 	add.w	fp, fp, #1
 8016884:	f1bb 0f03 	cmp.w	fp, #3
 8016888:	d1cb      	bne.n	8016822 <_scanf_i+0x5a>
 801688a:	6863      	ldr	r3, [r4, #4]
 801688c:	b90b      	cbnz	r3, 8016892 <_scanf_i+0xca>
 801688e:	230a      	movs	r3, #10
 8016890:	6063      	str	r3, [r4, #4]
 8016892:	6863      	ldr	r3, [r4, #4]
 8016894:	4945      	ldr	r1, [pc, #276]	@ (80169ac <_scanf_i+0x1e4>)
 8016896:	6960      	ldr	r0, [r4, #20]
 8016898:	1ac9      	subs	r1, r1, r3
 801689a:	f000 f935 	bl	8016b08 <__sccl>
 801689e:	f04f 0b00 	mov.w	fp, #0
 80168a2:	68a3      	ldr	r3, [r4, #8]
 80168a4:	6822      	ldr	r2, [r4, #0]
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d03d      	beq.n	8016926 <_scanf_i+0x15e>
 80168aa:	6831      	ldr	r1, [r6, #0]
 80168ac:	6960      	ldr	r0, [r4, #20]
 80168ae:	f891 c000 	ldrb.w	ip, [r1]
 80168b2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80168b6:	2800      	cmp	r0, #0
 80168b8:	d035      	beq.n	8016926 <_scanf_i+0x15e>
 80168ba:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80168be:	d124      	bne.n	801690a <_scanf_i+0x142>
 80168c0:	0510      	lsls	r0, r2, #20
 80168c2:	d522      	bpl.n	801690a <_scanf_i+0x142>
 80168c4:	f10b 0b01 	add.w	fp, fp, #1
 80168c8:	f1b9 0f00 	cmp.w	r9, #0
 80168cc:	d003      	beq.n	80168d6 <_scanf_i+0x10e>
 80168ce:	3301      	adds	r3, #1
 80168d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80168d4:	60a3      	str	r3, [r4, #8]
 80168d6:	6873      	ldr	r3, [r6, #4]
 80168d8:	3b01      	subs	r3, #1
 80168da:	2b00      	cmp	r3, #0
 80168dc:	6073      	str	r3, [r6, #4]
 80168de:	dd1b      	ble.n	8016918 <_scanf_i+0x150>
 80168e0:	6833      	ldr	r3, [r6, #0]
 80168e2:	3301      	adds	r3, #1
 80168e4:	6033      	str	r3, [r6, #0]
 80168e6:	68a3      	ldr	r3, [r4, #8]
 80168e8:	3b01      	subs	r3, #1
 80168ea:	60a3      	str	r3, [r4, #8]
 80168ec:	e7d9      	b.n	80168a2 <_scanf_i+0xda>
 80168ee:	f1bb 0f02 	cmp.w	fp, #2
 80168f2:	d1ae      	bne.n	8016852 <_scanf_i+0x8a>
 80168f4:	6822      	ldr	r2, [r4, #0]
 80168f6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80168fa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80168fe:	d1bf      	bne.n	8016880 <_scanf_i+0xb8>
 8016900:	2110      	movs	r1, #16
 8016902:	6061      	str	r1, [r4, #4]
 8016904:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8016908:	e7a2      	b.n	8016850 <_scanf_i+0x88>
 801690a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801690e:	6022      	str	r2, [r4, #0]
 8016910:	780b      	ldrb	r3, [r1, #0]
 8016912:	f805 3b01 	strb.w	r3, [r5], #1
 8016916:	e7de      	b.n	80168d6 <_scanf_i+0x10e>
 8016918:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801691c:	4631      	mov	r1, r6
 801691e:	4650      	mov	r0, sl
 8016920:	4798      	blx	r3
 8016922:	2800      	cmp	r0, #0
 8016924:	d0df      	beq.n	80168e6 <_scanf_i+0x11e>
 8016926:	6823      	ldr	r3, [r4, #0]
 8016928:	05d9      	lsls	r1, r3, #23
 801692a:	d50d      	bpl.n	8016948 <_scanf_i+0x180>
 801692c:	42bd      	cmp	r5, r7
 801692e:	d909      	bls.n	8016944 <_scanf_i+0x17c>
 8016930:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016934:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8016938:	4632      	mov	r2, r6
 801693a:	4650      	mov	r0, sl
 801693c:	4798      	blx	r3
 801693e:	f105 39ff 	add.w	r9, r5, #4294967295
 8016942:	464d      	mov	r5, r9
 8016944:	42bd      	cmp	r5, r7
 8016946:	d028      	beq.n	801699a <_scanf_i+0x1d2>
 8016948:	6822      	ldr	r2, [r4, #0]
 801694a:	f012 0210 	ands.w	r2, r2, #16
 801694e:	d113      	bne.n	8016978 <_scanf_i+0x1b0>
 8016950:	702a      	strb	r2, [r5, #0]
 8016952:	6863      	ldr	r3, [r4, #4]
 8016954:	9e01      	ldr	r6, [sp, #4]
 8016956:	4639      	mov	r1, r7
 8016958:	4650      	mov	r0, sl
 801695a:	47b0      	blx	r6
 801695c:	f8d8 3000 	ldr.w	r3, [r8]
 8016960:	6821      	ldr	r1, [r4, #0]
 8016962:	1d1a      	adds	r2, r3, #4
 8016964:	f8c8 2000 	str.w	r2, [r8]
 8016968:	f011 0f20 	tst.w	r1, #32
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	d00f      	beq.n	8016990 <_scanf_i+0x1c8>
 8016970:	6018      	str	r0, [r3, #0]
 8016972:	68e3      	ldr	r3, [r4, #12]
 8016974:	3301      	adds	r3, #1
 8016976:	60e3      	str	r3, [r4, #12]
 8016978:	6923      	ldr	r3, [r4, #16]
 801697a:	1bed      	subs	r5, r5, r7
 801697c:	445d      	add	r5, fp
 801697e:	442b      	add	r3, r5
 8016980:	6123      	str	r3, [r4, #16]
 8016982:	2000      	movs	r0, #0
 8016984:	b007      	add	sp, #28
 8016986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801698a:	f04f 0b00 	mov.w	fp, #0
 801698e:	e7ca      	b.n	8016926 <_scanf_i+0x15e>
 8016990:	07ca      	lsls	r2, r1, #31
 8016992:	bf4c      	ite	mi
 8016994:	8018      	strhmi	r0, [r3, #0]
 8016996:	6018      	strpl	r0, [r3, #0]
 8016998:	e7eb      	b.n	8016972 <_scanf_i+0x1aa>
 801699a:	2001      	movs	r0, #1
 801699c:	e7f2      	b.n	8016984 <_scanf_i+0x1bc>
 801699e:	bf00      	nop
 80169a0:	08019e84 	.word	0x08019e84
 80169a4:	080160c9 	.word	0x080160c9
 80169a8:	08017465 	.word	0x08017465
 80169ac:	0801a2ca 	.word	0x0801a2ca

080169b0 <__sflush_r>:
 80169b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80169b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169b8:	0716      	lsls	r6, r2, #28
 80169ba:	4605      	mov	r5, r0
 80169bc:	460c      	mov	r4, r1
 80169be:	d454      	bmi.n	8016a6a <__sflush_r+0xba>
 80169c0:	684b      	ldr	r3, [r1, #4]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	dc02      	bgt.n	80169cc <__sflush_r+0x1c>
 80169c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	dd48      	ble.n	8016a5e <__sflush_r+0xae>
 80169cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80169ce:	2e00      	cmp	r6, #0
 80169d0:	d045      	beq.n	8016a5e <__sflush_r+0xae>
 80169d2:	2300      	movs	r3, #0
 80169d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80169d8:	682f      	ldr	r7, [r5, #0]
 80169da:	6a21      	ldr	r1, [r4, #32]
 80169dc:	602b      	str	r3, [r5, #0]
 80169de:	d030      	beq.n	8016a42 <__sflush_r+0x92>
 80169e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80169e2:	89a3      	ldrh	r3, [r4, #12]
 80169e4:	0759      	lsls	r1, r3, #29
 80169e6:	d505      	bpl.n	80169f4 <__sflush_r+0x44>
 80169e8:	6863      	ldr	r3, [r4, #4]
 80169ea:	1ad2      	subs	r2, r2, r3
 80169ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80169ee:	b10b      	cbz	r3, 80169f4 <__sflush_r+0x44>
 80169f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80169f2:	1ad2      	subs	r2, r2, r3
 80169f4:	2300      	movs	r3, #0
 80169f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80169f8:	6a21      	ldr	r1, [r4, #32]
 80169fa:	4628      	mov	r0, r5
 80169fc:	47b0      	blx	r6
 80169fe:	1c43      	adds	r3, r0, #1
 8016a00:	89a3      	ldrh	r3, [r4, #12]
 8016a02:	d106      	bne.n	8016a12 <__sflush_r+0x62>
 8016a04:	6829      	ldr	r1, [r5, #0]
 8016a06:	291d      	cmp	r1, #29
 8016a08:	d82b      	bhi.n	8016a62 <__sflush_r+0xb2>
 8016a0a:	4a2a      	ldr	r2, [pc, #168]	@ (8016ab4 <__sflush_r+0x104>)
 8016a0c:	410a      	asrs	r2, r1
 8016a0e:	07d6      	lsls	r6, r2, #31
 8016a10:	d427      	bmi.n	8016a62 <__sflush_r+0xb2>
 8016a12:	2200      	movs	r2, #0
 8016a14:	6062      	str	r2, [r4, #4]
 8016a16:	04d9      	lsls	r1, r3, #19
 8016a18:	6922      	ldr	r2, [r4, #16]
 8016a1a:	6022      	str	r2, [r4, #0]
 8016a1c:	d504      	bpl.n	8016a28 <__sflush_r+0x78>
 8016a1e:	1c42      	adds	r2, r0, #1
 8016a20:	d101      	bne.n	8016a26 <__sflush_r+0x76>
 8016a22:	682b      	ldr	r3, [r5, #0]
 8016a24:	b903      	cbnz	r3, 8016a28 <__sflush_r+0x78>
 8016a26:	6560      	str	r0, [r4, #84]	@ 0x54
 8016a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a2a:	602f      	str	r7, [r5, #0]
 8016a2c:	b1b9      	cbz	r1, 8016a5e <__sflush_r+0xae>
 8016a2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a32:	4299      	cmp	r1, r3
 8016a34:	d002      	beq.n	8016a3c <__sflush_r+0x8c>
 8016a36:	4628      	mov	r0, r5
 8016a38:	f7fd ffbe 	bl	80149b8 <_free_r>
 8016a3c:	2300      	movs	r3, #0
 8016a3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8016a40:	e00d      	b.n	8016a5e <__sflush_r+0xae>
 8016a42:	2301      	movs	r3, #1
 8016a44:	4628      	mov	r0, r5
 8016a46:	47b0      	blx	r6
 8016a48:	4602      	mov	r2, r0
 8016a4a:	1c50      	adds	r0, r2, #1
 8016a4c:	d1c9      	bne.n	80169e2 <__sflush_r+0x32>
 8016a4e:	682b      	ldr	r3, [r5, #0]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d0c6      	beq.n	80169e2 <__sflush_r+0x32>
 8016a54:	2b1d      	cmp	r3, #29
 8016a56:	d001      	beq.n	8016a5c <__sflush_r+0xac>
 8016a58:	2b16      	cmp	r3, #22
 8016a5a:	d11e      	bne.n	8016a9a <__sflush_r+0xea>
 8016a5c:	602f      	str	r7, [r5, #0]
 8016a5e:	2000      	movs	r0, #0
 8016a60:	e022      	b.n	8016aa8 <__sflush_r+0xf8>
 8016a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a66:	b21b      	sxth	r3, r3
 8016a68:	e01b      	b.n	8016aa2 <__sflush_r+0xf2>
 8016a6a:	690f      	ldr	r7, [r1, #16]
 8016a6c:	2f00      	cmp	r7, #0
 8016a6e:	d0f6      	beq.n	8016a5e <__sflush_r+0xae>
 8016a70:	0793      	lsls	r3, r2, #30
 8016a72:	680e      	ldr	r6, [r1, #0]
 8016a74:	bf08      	it	eq
 8016a76:	694b      	ldreq	r3, [r1, #20]
 8016a78:	600f      	str	r7, [r1, #0]
 8016a7a:	bf18      	it	ne
 8016a7c:	2300      	movne	r3, #0
 8016a7e:	eba6 0807 	sub.w	r8, r6, r7
 8016a82:	608b      	str	r3, [r1, #8]
 8016a84:	f1b8 0f00 	cmp.w	r8, #0
 8016a88:	dde9      	ble.n	8016a5e <__sflush_r+0xae>
 8016a8a:	6a21      	ldr	r1, [r4, #32]
 8016a8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016a8e:	4643      	mov	r3, r8
 8016a90:	463a      	mov	r2, r7
 8016a92:	4628      	mov	r0, r5
 8016a94:	47b0      	blx	r6
 8016a96:	2800      	cmp	r0, #0
 8016a98:	dc08      	bgt.n	8016aac <__sflush_r+0xfc>
 8016a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016aa2:	81a3      	strh	r3, [r4, #12]
 8016aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8016aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aac:	4407      	add	r7, r0
 8016aae:	eba8 0800 	sub.w	r8, r8, r0
 8016ab2:	e7e7      	b.n	8016a84 <__sflush_r+0xd4>
 8016ab4:	dfbffffe 	.word	0xdfbffffe

08016ab8 <_fflush_r>:
 8016ab8:	b538      	push	{r3, r4, r5, lr}
 8016aba:	690b      	ldr	r3, [r1, #16]
 8016abc:	4605      	mov	r5, r0
 8016abe:	460c      	mov	r4, r1
 8016ac0:	b913      	cbnz	r3, 8016ac8 <_fflush_r+0x10>
 8016ac2:	2500      	movs	r5, #0
 8016ac4:	4628      	mov	r0, r5
 8016ac6:	bd38      	pop	{r3, r4, r5, pc}
 8016ac8:	b118      	cbz	r0, 8016ad2 <_fflush_r+0x1a>
 8016aca:	6a03      	ldr	r3, [r0, #32]
 8016acc:	b90b      	cbnz	r3, 8016ad2 <_fflush_r+0x1a>
 8016ace:	f7fc ff95 	bl	80139fc <__sinit>
 8016ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d0f3      	beq.n	8016ac2 <_fflush_r+0xa>
 8016ada:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016adc:	07d0      	lsls	r0, r2, #31
 8016ade:	d404      	bmi.n	8016aea <_fflush_r+0x32>
 8016ae0:	0599      	lsls	r1, r3, #22
 8016ae2:	d402      	bmi.n	8016aea <_fflush_r+0x32>
 8016ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ae6:	f7fd f902 	bl	8013cee <__retarget_lock_acquire_recursive>
 8016aea:	4628      	mov	r0, r5
 8016aec:	4621      	mov	r1, r4
 8016aee:	f7ff ff5f 	bl	80169b0 <__sflush_r>
 8016af2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016af4:	07da      	lsls	r2, r3, #31
 8016af6:	4605      	mov	r5, r0
 8016af8:	d4e4      	bmi.n	8016ac4 <_fflush_r+0xc>
 8016afa:	89a3      	ldrh	r3, [r4, #12]
 8016afc:	059b      	lsls	r3, r3, #22
 8016afe:	d4e1      	bmi.n	8016ac4 <_fflush_r+0xc>
 8016b00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b02:	f7fd f8f5 	bl	8013cf0 <__retarget_lock_release_recursive>
 8016b06:	e7dd      	b.n	8016ac4 <_fflush_r+0xc>

08016b08 <__sccl>:
 8016b08:	b570      	push	{r4, r5, r6, lr}
 8016b0a:	780b      	ldrb	r3, [r1, #0]
 8016b0c:	4604      	mov	r4, r0
 8016b0e:	2b5e      	cmp	r3, #94	@ 0x5e
 8016b10:	bf0b      	itete	eq
 8016b12:	784b      	ldrbeq	r3, [r1, #1]
 8016b14:	1c4a      	addne	r2, r1, #1
 8016b16:	1c8a      	addeq	r2, r1, #2
 8016b18:	2100      	movne	r1, #0
 8016b1a:	bf08      	it	eq
 8016b1c:	2101      	moveq	r1, #1
 8016b1e:	3801      	subs	r0, #1
 8016b20:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8016b24:	f800 1f01 	strb.w	r1, [r0, #1]!
 8016b28:	42a8      	cmp	r0, r5
 8016b2a:	d1fb      	bne.n	8016b24 <__sccl+0x1c>
 8016b2c:	b90b      	cbnz	r3, 8016b32 <__sccl+0x2a>
 8016b2e:	1e50      	subs	r0, r2, #1
 8016b30:	bd70      	pop	{r4, r5, r6, pc}
 8016b32:	f081 0101 	eor.w	r1, r1, #1
 8016b36:	54e1      	strb	r1, [r4, r3]
 8016b38:	4610      	mov	r0, r2
 8016b3a:	4602      	mov	r2, r0
 8016b3c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016b40:	2d2d      	cmp	r5, #45	@ 0x2d
 8016b42:	d005      	beq.n	8016b50 <__sccl+0x48>
 8016b44:	2d5d      	cmp	r5, #93	@ 0x5d
 8016b46:	d016      	beq.n	8016b76 <__sccl+0x6e>
 8016b48:	2d00      	cmp	r5, #0
 8016b4a:	d0f1      	beq.n	8016b30 <__sccl+0x28>
 8016b4c:	462b      	mov	r3, r5
 8016b4e:	e7f2      	b.n	8016b36 <__sccl+0x2e>
 8016b50:	7846      	ldrb	r6, [r0, #1]
 8016b52:	2e5d      	cmp	r6, #93	@ 0x5d
 8016b54:	d0fa      	beq.n	8016b4c <__sccl+0x44>
 8016b56:	42b3      	cmp	r3, r6
 8016b58:	dcf8      	bgt.n	8016b4c <__sccl+0x44>
 8016b5a:	3002      	adds	r0, #2
 8016b5c:	461a      	mov	r2, r3
 8016b5e:	3201      	adds	r2, #1
 8016b60:	4296      	cmp	r6, r2
 8016b62:	54a1      	strb	r1, [r4, r2]
 8016b64:	dcfb      	bgt.n	8016b5e <__sccl+0x56>
 8016b66:	1af2      	subs	r2, r6, r3
 8016b68:	3a01      	subs	r2, #1
 8016b6a:	1c5d      	adds	r5, r3, #1
 8016b6c:	42b3      	cmp	r3, r6
 8016b6e:	bfa8      	it	ge
 8016b70:	2200      	movge	r2, #0
 8016b72:	18ab      	adds	r3, r5, r2
 8016b74:	e7e1      	b.n	8016b3a <__sccl+0x32>
 8016b76:	4610      	mov	r0, r2
 8016b78:	e7da      	b.n	8016b30 <__sccl+0x28>

08016b7a <__submore>:
 8016b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b7e:	460c      	mov	r4, r1
 8016b80:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8016b82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016b86:	4299      	cmp	r1, r3
 8016b88:	d11d      	bne.n	8016bc6 <__submore+0x4c>
 8016b8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8016b8e:	f7fb ffb1 	bl	8012af4 <_malloc_r>
 8016b92:	b918      	cbnz	r0, 8016b9c <__submore+0x22>
 8016b94:	f04f 30ff 	mov.w	r0, #4294967295
 8016b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016ba0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8016ba2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8016ba6:	6360      	str	r0, [r4, #52]	@ 0x34
 8016ba8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8016bac:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8016bb0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8016bb4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8016bb8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8016bbc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8016bc0:	6020      	str	r0, [r4, #0]
 8016bc2:	2000      	movs	r0, #0
 8016bc4:	e7e8      	b.n	8016b98 <__submore+0x1e>
 8016bc6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8016bc8:	0077      	lsls	r7, r6, #1
 8016bca:	463a      	mov	r2, r7
 8016bcc:	f000 fbad 	bl	801732a <_realloc_r>
 8016bd0:	4605      	mov	r5, r0
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	d0de      	beq.n	8016b94 <__submore+0x1a>
 8016bd6:	eb00 0806 	add.w	r8, r0, r6
 8016bda:	4601      	mov	r1, r0
 8016bdc:	4632      	mov	r2, r6
 8016bde:	4640      	mov	r0, r8
 8016be0:	f7fd f887 	bl	8013cf2 <memcpy>
 8016be4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8016be8:	f8c4 8000 	str.w	r8, [r4]
 8016bec:	e7e9      	b.n	8016bc2 <__submore+0x48>

08016bee <memmove>:
 8016bee:	4288      	cmp	r0, r1
 8016bf0:	b510      	push	{r4, lr}
 8016bf2:	eb01 0402 	add.w	r4, r1, r2
 8016bf6:	d902      	bls.n	8016bfe <memmove+0x10>
 8016bf8:	4284      	cmp	r4, r0
 8016bfa:	4623      	mov	r3, r4
 8016bfc:	d807      	bhi.n	8016c0e <memmove+0x20>
 8016bfe:	1e43      	subs	r3, r0, #1
 8016c00:	42a1      	cmp	r1, r4
 8016c02:	d008      	beq.n	8016c16 <memmove+0x28>
 8016c04:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c08:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016c0c:	e7f8      	b.n	8016c00 <memmove+0x12>
 8016c0e:	4402      	add	r2, r0
 8016c10:	4601      	mov	r1, r0
 8016c12:	428a      	cmp	r2, r1
 8016c14:	d100      	bne.n	8016c18 <memmove+0x2a>
 8016c16:	bd10      	pop	{r4, pc}
 8016c18:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016c1c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016c20:	e7f7      	b.n	8016c12 <memmove+0x24>

08016c22 <strncmp>:
 8016c22:	b510      	push	{r4, lr}
 8016c24:	b16a      	cbz	r2, 8016c42 <strncmp+0x20>
 8016c26:	3901      	subs	r1, #1
 8016c28:	1884      	adds	r4, r0, r2
 8016c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016c2e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d103      	bne.n	8016c3e <strncmp+0x1c>
 8016c36:	42a0      	cmp	r0, r4
 8016c38:	d001      	beq.n	8016c3e <strncmp+0x1c>
 8016c3a:	2a00      	cmp	r2, #0
 8016c3c:	d1f5      	bne.n	8016c2a <strncmp+0x8>
 8016c3e:	1ad0      	subs	r0, r2, r3
 8016c40:	bd10      	pop	{r4, pc}
 8016c42:	4610      	mov	r0, r2
 8016c44:	e7fc      	b.n	8016c40 <strncmp+0x1e>
	...

08016c48 <nan>:
 8016c48:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016c50 <nan+0x8>
 8016c4c:	4770      	bx	lr
 8016c4e:	bf00      	nop
 8016c50:	00000000 	.word	0x00000000
 8016c54:	7ff80000 	.word	0x7ff80000

08016c58 <__assert_func>:
 8016c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016c5a:	4614      	mov	r4, r2
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	4b09      	ldr	r3, [pc, #36]	@ (8016c84 <__assert_func+0x2c>)
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	4605      	mov	r5, r0
 8016c64:	68d8      	ldr	r0, [r3, #12]
 8016c66:	b954      	cbnz	r4, 8016c7e <__assert_func+0x26>
 8016c68:	4b07      	ldr	r3, [pc, #28]	@ (8016c88 <__assert_func+0x30>)
 8016c6a:	461c      	mov	r4, r3
 8016c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016c70:	9100      	str	r1, [sp, #0]
 8016c72:	462b      	mov	r3, r5
 8016c74:	4905      	ldr	r1, [pc, #20]	@ (8016c8c <__assert_func+0x34>)
 8016c76:	f000 fc05 	bl	8017484 <fiprintf>
 8016c7a:	f000 fc15 	bl	80174a8 <abort>
 8016c7e:	4b04      	ldr	r3, [pc, #16]	@ (8016c90 <__assert_func+0x38>)
 8016c80:	e7f4      	b.n	8016c6c <__assert_func+0x14>
 8016c82:	bf00      	nop
 8016c84:	20000068 	.word	0x20000068
 8016c88:	0801a318 	.word	0x0801a318
 8016c8c:	0801a2ea 	.word	0x0801a2ea
 8016c90:	0801a2dd 	.word	0x0801a2dd

08016c94 <rshift>:
 8016c94:	6903      	ldr	r3, [r0, #16]
 8016c96:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016c9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016c9e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016ca2:	f100 0414 	add.w	r4, r0, #20
 8016ca6:	dd45      	ble.n	8016d34 <rshift+0xa0>
 8016ca8:	f011 011f 	ands.w	r1, r1, #31
 8016cac:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016cb0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016cb4:	d10c      	bne.n	8016cd0 <rshift+0x3c>
 8016cb6:	f100 0710 	add.w	r7, r0, #16
 8016cba:	4629      	mov	r1, r5
 8016cbc:	42b1      	cmp	r1, r6
 8016cbe:	d334      	bcc.n	8016d2a <rshift+0x96>
 8016cc0:	1a9b      	subs	r3, r3, r2
 8016cc2:	009b      	lsls	r3, r3, #2
 8016cc4:	1eea      	subs	r2, r5, #3
 8016cc6:	4296      	cmp	r6, r2
 8016cc8:	bf38      	it	cc
 8016cca:	2300      	movcc	r3, #0
 8016ccc:	4423      	add	r3, r4
 8016cce:	e015      	b.n	8016cfc <rshift+0x68>
 8016cd0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016cd4:	f1c1 0820 	rsb	r8, r1, #32
 8016cd8:	40cf      	lsrs	r7, r1
 8016cda:	f105 0e04 	add.w	lr, r5, #4
 8016cde:	46a1      	mov	r9, r4
 8016ce0:	4576      	cmp	r6, lr
 8016ce2:	46f4      	mov	ip, lr
 8016ce4:	d815      	bhi.n	8016d12 <rshift+0x7e>
 8016ce6:	1a9a      	subs	r2, r3, r2
 8016ce8:	0092      	lsls	r2, r2, #2
 8016cea:	3a04      	subs	r2, #4
 8016cec:	3501      	adds	r5, #1
 8016cee:	42ae      	cmp	r6, r5
 8016cf0:	bf38      	it	cc
 8016cf2:	2200      	movcc	r2, #0
 8016cf4:	18a3      	adds	r3, r4, r2
 8016cf6:	50a7      	str	r7, [r4, r2]
 8016cf8:	b107      	cbz	r7, 8016cfc <rshift+0x68>
 8016cfa:	3304      	adds	r3, #4
 8016cfc:	1b1a      	subs	r2, r3, r4
 8016cfe:	42a3      	cmp	r3, r4
 8016d00:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016d04:	bf08      	it	eq
 8016d06:	2300      	moveq	r3, #0
 8016d08:	6102      	str	r2, [r0, #16]
 8016d0a:	bf08      	it	eq
 8016d0c:	6143      	streq	r3, [r0, #20]
 8016d0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016d12:	f8dc c000 	ldr.w	ip, [ip]
 8016d16:	fa0c fc08 	lsl.w	ip, ip, r8
 8016d1a:	ea4c 0707 	orr.w	r7, ip, r7
 8016d1e:	f849 7b04 	str.w	r7, [r9], #4
 8016d22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016d26:	40cf      	lsrs	r7, r1
 8016d28:	e7da      	b.n	8016ce0 <rshift+0x4c>
 8016d2a:	f851 cb04 	ldr.w	ip, [r1], #4
 8016d2e:	f847 cf04 	str.w	ip, [r7, #4]!
 8016d32:	e7c3      	b.n	8016cbc <rshift+0x28>
 8016d34:	4623      	mov	r3, r4
 8016d36:	e7e1      	b.n	8016cfc <rshift+0x68>

08016d38 <__hexdig_fun>:
 8016d38:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8016d3c:	2b09      	cmp	r3, #9
 8016d3e:	d802      	bhi.n	8016d46 <__hexdig_fun+0xe>
 8016d40:	3820      	subs	r0, #32
 8016d42:	b2c0      	uxtb	r0, r0
 8016d44:	4770      	bx	lr
 8016d46:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8016d4a:	2b05      	cmp	r3, #5
 8016d4c:	d801      	bhi.n	8016d52 <__hexdig_fun+0x1a>
 8016d4e:	3847      	subs	r0, #71	@ 0x47
 8016d50:	e7f7      	b.n	8016d42 <__hexdig_fun+0xa>
 8016d52:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8016d56:	2b05      	cmp	r3, #5
 8016d58:	d801      	bhi.n	8016d5e <__hexdig_fun+0x26>
 8016d5a:	3827      	subs	r0, #39	@ 0x27
 8016d5c:	e7f1      	b.n	8016d42 <__hexdig_fun+0xa>
 8016d5e:	2000      	movs	r0, #0
 8016d60:	4770      	bx	lr
	...

08016d64 <__gethex>:
 8016d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d68:	b085      	sub	sp, #20
 8016d6a:	468a      	mov	sl, r1
 8016d6c:	9302      	str	r3, [sp, #8]
 8016d6e:	680b      	ldr	r3, [r1, #0]
 8016d70:	9001      	str	r0, [sp, #4]
 8016d72:	4690      	mov	r8, r2
 8016d74:	1c9c      	adds	r4, r3, #2
 8016d76:	46a1      	mov	r9, r4
 8016d78:	f814 0b01 	ldrb.w	r0, [r4], #1
 8016d7c:	2830      	cmp	r0, #48	@ 0x30
 8016d7e:	d0fa      	beq.n	8016d76 <__gethex+0x12>
 8016d80:	eba9 0303 	sub.w	r3, r9, r3
 8016d84:	f1a3 0b02 	sub.w	fp, r3, #2
 8016d88:	f7ff ffd6 	bl	8016d38 <__hexdig_fun>
 8016d8c:	4605      	mov	r5, r0
 8016d8e:	2800      	cmp	r0, #0
 8016d90:	d168      	bne.n	8016e64 <__gethex+0x100>
 8016d92:	49a0      	ldr	r1, [pc, #640]	@ (8017014 <__gethex+0x2b0>)
 8016d94:	2201      	movs	r2, #1
 8016d96:	4648      	mov	r0, r9
 8016d98:	f7ff ff43 	bl	8016c22 <strncmp>
 8016d9c:	4607      	mov	r7, r0
 8016d9e:	2800      	cmp	r0, #0
 8016da0:	d167      	bne.n	8016e72 <__gethex+0x10e>
 8016da2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8016da6:	4626      	mov	r6, r4
 8016da8:	f7ff ffc6 	bl	8016d38 <__hexdig_fun>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	d062      	beq.n	8016e76 <__gethex+0x112>
 8016db0:	4623      	mov	r3, r4
 8016db2:	7818      	ldrb	r0, [r3, #0]
 8016db4:	2830      	cmp	r0, #48	@ 0x30
 8016db6:	4699      	mov	r9, r3
 8016db8:	f103 0301 	add.w	r3, r3, #1
 8016dbc:	d0f9      	beq.n	8016db2 <__gethex+0x4e>
 8016dbe:	f7ff ffbb 	bl	8016d38 <__hexdig_fun>
 8016dc2:	fab0 f580 	clz	r5, r0
 8016dc6:	096d      	lsrs	r5, r5, #5
 8016dc8:	f04f 0b01 	mov.w	fp, #1
 8016dcc:	464a      	mov	r2, r9
 8016dce:	4616      	mov	r6, r2
 8016dd0:	3201      	adds	r2, #1
 8016dd2:	7830      	ldrb	r0, [r6, #0]
 8016dd4:	f7ff ffb0 	bl	8016d38 <__hexdig_fun>
 8016dd8:	2800      	cmp	r0, #0
 8016dda:	d1f8      	bne.n	8016dce <__gethex+0x6a>
 8016ddc:	498d      	ldr	r1, [pc, #564]	@ (8017014 <__gethex+0x2b0>)
 8016dde:	2201      	movs	r2, #1
 8016de0:	4630      	mov	r0, r6
 8016de2:	f7ff ff1e 	bl	8016c22 <strncmp>
 8016de6:	2800      	cmp	r0, #0
 8016de8:	d13f      	bne.n	8016e6a <__gethex+0x106>
 8016dea:	b944      	cbnz	r4, 8016dfe <__gethex+0x9a>
 8016dec:	1c74      	adds	r4, r6, #1
 8016dee:	4622      	mov	r2, r4
 8016df0:	4616      	mov	r6, r2
 8016df2:	3201      	adds	r2, #1
 8016df4:	7830      	ldrb	r0, [r6, #0]
 8016df6:	f7ff ff9f 	bl	8016d38 <__hexdig_fun>
 8016dfa:	2800      	cmp	r0, #0
 8016dfc:	d1f8      	bne.n	8016df0 <__gethex+0x8c>
 8016dfe:	1ba4      	subs	r4, r4, r6
 8016e00:	00a7      	lsls	r7, r4, #2
 8016e02:	7833      	ldrb	r3, [r6, #0]
 8016e04:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8016e08:	2b50      	cmp	r3, #80	@ 0x50
 8016e0a:	d13e      	bne.n	8016e8a <__gethex+0x126>
 8016e0c:	7873      	ldrb	r3, [r6, #1]
 8016e0e:	2b2b      	cmp	r3, #43	@ 0x2b
 8016e10:	d033      	beq.n	8016e7a <__gethex+0x116>
 8016e12:	2b2d      	cmp	r3, #45	@ 0x2d
 8016e14:	d034      	beq.n	8016e80 <__gethex+0x11c>
 8016e16:	1c71      	adds	r1, r6, #1
 8016e18:	2400      	movs	r4, #0
 8016e1a:	7808      	ldrb	r0, [r1, #0]
 8016e1c:	f7ff ff8c 	bl	8016d38 <__hexdig_fun>
 8016e20:	1e43      	subs	r3, r0, #1
 8016e22:	b2db      	uxtb	r3, r3
 8016e24:	2b18      	cmp	r3, #24
 8016e26:	d830      	bhi.n	8016e8a <__gethex+0x126>
 8016e28:	f1a0 0210 	sub.w	r2, r0, #16
 8016e2c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8016e30:	f7ff ff82 	bl	8016d38 <__hexdig_fun>
 8016e34:	f100 3cff 	add.w	ip, r0, #4294967295
 8016e38:	fa5f fc8c 	uxtb.w	ip, ip
 8016e3c:	f1bc 0f18 	cmp.w	ip, #24
 8016e40:	f04f 030a 	mov.w	r3, #10
 8016e44:	d91e      	bls.n	8016e84 <__gethex+0x120>
 8016e46:	b104      	cbz	r4, 8016e4a <__gethex+0xe6>
 8016e48:	4252      	negs	r2, r2
 8016e4a:	4417      	add	r7, r2
 8016e4c:	f8ca 1000 	str.w	r1, [sl]
 8016e50:	b1ed      	cbz	r5, 8016e8e <__gethex+0x12a>
 8016e52:	f1bb 0f00 	cmp.w	fp, #0
 8016e56:	bf0c      	ite	eq
 8016e58:	2506      	moveq	r5, #6
 8016e5a:	2500      	movne	r5, #0
 8016e5c:	4628      	mov	r0, r5
 8016e5e:	b005      	add	sp, #20
 8016e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e64:	2500      	movs	r5, #0
 8016e66:	462c      	mov	r4, r5
 8016e68:	e7b0      	b.n	8016dcc <__gethex+0x68>
 8016e6a:	2c00      	cmp	r4, #0
 8016e6c:	d1c7      	bne.n	8016dfe <__gethex+0x9a>
 8016e6e:	4627      	mov	r7, r4
 8016e70:	e7c7      	b.n	8016e02 <__gethex+0x9e>
 8016e72:	464e      	mov	r6, r9
 8016e74:	462f      	mov	r7, r5
 8016e76:	2501      	movs	r5, #1
 8016e78:	e7c3      	b.n	8016e02 <__gethex+0x9e>
 8016e7a:	2400      	movs	r4, #0
 8016e7c:	1cb1      	adds	r1, r6, #2
 8016e7e:	e7cc      	b.n	8016e1a <__gethex+0xb6>
 8016e80:	2401      	movs	r4, #1
 8016e82:	e7fb      	b.n	8016e7c <__gethex+0x118>
 8016e84:	fb03 0002 	mla	r0, r3, r2, r0
 8016e88:	e7ce      	b.n	8016e28 <__gethex+0xc4>
 8016e8a:	4631      	mov	r1, r6
 8016e8c:	e7de      	b.n	8016e4c <__gethex+0xe8>
 8016e8e:	eba6 0309 	sub.w	r3, r6, r9
 8016e92:	3b01      	subs	r3, #1
 8016e94:	4629      	mov	r1, r5
 8016e96:	2b07      	cmp	r3, #7
 8016e98:	dc0a      	bgt.n	8016eb0 <__gethex+0x14c>
 8016e9a:	9801      	ldr	r0, [sp, #4]
 8016e9c:	f7fd fdde 	bl	8014a5c <_Balloc>
 8016ea0:	4604      	mov	r4, r0
 8016ea2:	b940      	cbnz	r0, 8016eb6 <__gethex+0x152>
 8016ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8017018 <__gethex+0x2b4>)
 8016ea6:	4602      	mov	r2, r0
 8016ea8:	21e4      	movs	r1, #228	@ 0xe4
 8016eaa:	485c      	ldr	r0, [pc, #368]	@ (801701c <__gethex+0x2b8>)
 8016eac:	f7ff fed4 	bl	8016c58 <__assert_func>
 8016eb0:	3101      	adds	r1, #1
 8016eb2:	105b      	asrs	r3, r3, #1
 8016eb4:	e7ef      	b.n	8016e96 <__gethex+0x132>
 8016eb6:	f100 0a14 	add.w	sl, r0, #20
 8016eba:	2300      	movs	r3, #0
 8016ebc:	4655      	mov	r5, sl
 8016ebe:	469b      	mov	fp, r3
 8016ec0:	45b1      	cmp	r9, r6
 8016ec2:	d337      	bcc.n	8016f34 <__gethex+0x1d0>
 8016ec4:	f845 bb04 	str.w	fp, [r5], #4
 8016ec8:	eba5 050a 	sub.w	r5, r5, sl
 8016ecc:	10ad      	asrs	r5, r5, #2
 8016ece:	6125      	str	r5, [r4, #16]
 8016ed0:	4658      	mov	r0, fp
 8016ed2:	f7fd feb5 	bl	8014c40 <__hi0bits>
 8016ed6:	016d      	lsls	r5, r5, #5
 8016ed8:	f8d8 6000 	ldr.w	r6, [r8]
 8016edc:	1a2d      	subs	r5, r5, r0
 8016ede:	42b5      	cmp	r5, r6
 8016ee0:	dd54      	ble.n	8016f8c <__gethex+0x228>
 8016ee2:	1bad      	subs	r5, r5, r6
 8016ee4:	4629      	mov	r1, r5
 8016ee6:	4620      	mov	r0, r4
 8016ee8:	f7fe fa49 	bl	801537e <__any_on>
 8016eec:	4681      	mov	r9, r0
 8016eee:	b178      	cbz	r0, 8016f10 <__gethex+0x1ac>
 8016ef0:	1e6b      	subs	r3, r5, #1
 8016ef2:	1159      	asrs	r1, r3, #5
 8016ef4:	f003 021f 	and.w	r2, r3, #31
 8016ef8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8016efc:	f04f 0901 	mov.w	r9, #1
 8016f00:	fa09 f202 	lsl.w	r2, r9, r2
 8016f04:	420a      	tst	r2, r1
 8016f06:	d003      	beq.n	8016f10 <__gethex+0x1ac>
 8016f08:	454b      	cmp	r3, r9
 8016f0a:	dc36      	bgt.n	8016f7a <__gethex+0x216>
 8016f0c:	f04f 0902 	mov.w	r9, #2
 8016f10:	4629      	mov	r1, r5
 8016f12:	4620      	mov	r0, r4
 8016f14:	f7ff febe 	bl	8016c94 <rshift>
 8016f18:	442f      	add	r7, r5
 8016f1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016f1e:	42bb      	cmp	r3, r7
 8016f20:	da42      	bge.n	8016fa8 <__gethex+0x244>
 8016f22:	9801      	ldr	r0, [sp, #4]
 8016f24:	4621      	mov	r1, r4
 8016f26:	f7fd fdd9 	bl	8014adc <_Bfree>
 8016f2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	6013      	str	r3, [r2, #0]
 8016f30:	25a3      	movs	r5, #163	@ 0xa3
 8016f32:	e793      	b.n	8016e5c <__gethex+0xf8>
 8016f34:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8016f38:	2a2e      	cmp	r2, #46	@ 0x2e
 8016f3a:	d012      	beq.n	8016f62 <__gethex+0x1fe>
 8016f3c:	2b20      	cmp	r3, #32
 8016f3e:	d104      	bne.n	8016f4a <__gethex+0x1e6>
 8016f40:	f845 bb04 	str.w	fp, [r5], #4
 8016f44:	f04f 0b00 	mov.w	fp, #0
 8016f48:	465b      	mov	r3, fp
 8016f4a:	7830      	ldrb	r0, [r6, #0]
 8016f4c:	9303      	str	r3, [sp, #12]
 8016f4e:	f7ff fef3 	bl	8016d38 <__hexdig_fun>
 8016f52:	9b03      	ldr	r3, [sp, #12]
 8016f54:	f000 000f 	and.w	r0, r0, #15
 8016f58:	4098      	lsls	r0, r3
 8016f5a:	ea4b 0b00 	orr.w	fp, fp, r0
 8016f5e:	3304      	adds	r3, #4
 8016f60:	e7ae      	b.n	8016ec0 <__gethex+0x15c>
 8016f62:	45b1      	cmp	r9, r6
 8016f64:	d8ea      	bhi.n	8016f3c <__gethex+0x1d8>
 8016f66:	492b      	ldr	r1, [pc, #172]	@ (8017014 <__gethex+0x2b0>)
 8016f68:	9303      	str	r3, [sp, #12]
 8016f6a:	2201      	movs	r2, #1
 8016f6c:	4630      	mov	r0, r6
 8016f6e:	f7ff fe58 	bl	8016c22 <strncmp>
 8016f72:	9b03      	ldr	r3, [sp, #12]
 8016f74:	2800      	cmp	r0, #0
 8016f76:	d1e1      	bne.n	8016f3c <__gethex+0x1d8>
 8016f78:	e7a2      	b.n	8016ec0 <__gethex+0x15c>
 8016f7a:	1ea9      	subs	r1, r5, #2
 8016f7c:	4620      	mov	r0, r4
 8016f7e:	f7fe f9fe 	bl	801537e <__any_on>
 8016f82:	2800      	cmp	r0, #0
 8016f84:	d0c2      	beq.n	8016f0c <__gethex+0x1a8>
 8016f86:	f04f 0903 	mov.w	r9, #3
 8016f8a:	e7c1      	b.n	8016f10 <__gethex+0x1ac>
 8016f8c:	da09      	bge.n	8016fa2 <__gethex+0x23e>
 8016f8e:	1b75      	subs	r5, r6, r5
 8016f90:	4621      	mov	r1, r4
 8016f92:	9801      	ldr	r0, [sp, #4]
 8016f94:	462a      	mov	r2, r5
 8016f96:	f7fd ffb9 	bl	8014f0c <__lshift>
 8016f9a:	1b7f      	subs	r7, r7, r5
 8016f9c:	4604      	mov	r4, r0
 8016f9e:	f100 0a14 	add.w	sl, r0, #20
 8016fa2:	f04f 0900 	mov.w	r9, #0
 8016fa6:	e7b8      	b.n	8016f1a <__gethex+0x1b6>
 8016fa8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8016fac:	42bd      	cmp	r5, r7
 8016fae:	dd6f      	ble.n	8017090 <__gethex+0x32c>
 8016fb0:	1bed      	subs	r5, r5, r7
 8016fb2:	42ae      	cmp	r6, r5
 8016fb4:	dc34      	bgt.n	8017020 <__gethex+0x2bc>
 8016fb6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016fba:	2b02      	cmp	r3, #2
 8016fbc:	d022      	beq.n	8017004 <__gethex+0x2a0>
 8016fbe:	2b03      	cmp	r3, #3
 8016fc0:	d024      	beq.n	801700c <__gethex+0x2a8>
 8016fc2:	2b01      	cmp	r3, #1
 8016fc4:	d115      	bne.n	8016ff2 <__gethex+0x28e>
 8016fc6:	42ae      	cmp	r6, r5
 8016fc8:	d113      	bne.n	8016ff2 <__gethex+0x28e>
 8016fca:	2e01      	cmp	r6, #1
 8016fcc:	d10b      	bne.n	8016fe6 <__gethex+0x282>
 8016fce:	9a02      	ldr	r2, [sp, #8]
 8016fd0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016fd4:	6013      	str	r3, [r2, #0]
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	6123      	str	r3, [r4, #16]
 8016fda:	f8ca 3000 	str.w	r3, [sl]
 8016fde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016fe0:	2562      	movs	r5, #98	@ 0x62
 8016fe2:	601c      	str	r4, [r3, #0]
 8016fe4:	e73a      	b.n	8016e5c <__gethex+0xf8>
 8016fe6:	1e71      	subs	r1, r6, #1
 8016fe8:	4620      	mov	r0, r4
 8016fea:	f7fe f9c8 	bl	801537e <__any_on>
 8016fee:	2800      	cmp	r0, #0
 8016ff0:	d1ed      	bne.n	8016fce <__gethex+0x26a>
 8016ff2:	9801      	ldr	r0, [sp, #4]
 8016ff4:	4621      	mov	r1, r4
 8016ff6:	f7fd fd71 	bl	8014adc <_Bfree>
 8016ffa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	6013      	str	r3, [r2, #0]
 8017000:	2550      	movs	r5, #80	@ 0x50
 8017002:	e72b      	b.n	8016e5c <__gethex+0xf8>
 8017004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017006:	2b00      	cmp	r3, #0
 8017008:	d1f3      	bne.n	8016ff2 <__gethex+0x28e>
 801700a:	e7e0      	b.n	8016fce <__gethex+0x26a>
 801700c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801700e:	2b00      	cmp	r3, #0
 8017010:	d1dd      	bne.n	8016fce <__gethex+0x26a>
 8017012:	e7ee      	b.n	8016ff2 <__gethex+0x28e>
 8017014:	0801a150 	.word	0x0801a150
 8017018:	08019fe3 	.word	0x08019fe3
 801701c:	0801a319 	.word	0x0801a319
 8017020:	1e6f      	subs	r7, r5, #1
 8017022:	f1b9 0f00 	cmp.w	r9, #0
 8017026:	d130      	bne.n	801708a <__gethex+0x326>
 8017028:	b127      	cbz	r7, 8017034 <__gethex+0x2d0>
 801702a:	4639      	mov	r1, r7
 801702c:	4620      	mov	r0, r4
 801702e:	f7fe f9a6 	bl	801537e <__any_on>
 8017032:	4681      	mov	r9, r0
 8017034:	117a      	asrs	r2, r7, #5
 8017036:	2301      	movs	r3, #1
 8017038:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801703c:	f007 071f 	and.w	r7, r7, #31
 8017040:	40bb      	lsls	r3, r7
 8017042:	4213      	tst	r3, r2
 8017044:	4629      	mov	r1, r5
 8017046:	4620      	mov	r0, r4
 8017048:	bf18      	it	ne
 801704a:	f049 0902 	orrne.w	r9, r9, #2
 801704e:	f7ff fe21 	bl	8016c94 <rshift>
 8017052:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8017056:	1b76      	subs	r6, r6, r5
 8017058:	2502      	movs	r5, #2
 801705a:	f1b9 0f00 	cmp.w	r9, #0
 801705e:	d047      	beq.n	80170f0 <__gethex+0x38c>
 8017060:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017064:	2b02      	cmp	r3, #2
 8017066:	d015      	beq.n	8017094 <__gethex+0x330>
 8017068:	2b03      	cmp	r3, #3
 801706a:	d017      	beq.n	801709c <__gethex+0x338>
 801706c:	2b01      	cmp	r3, #1
 801706e:	d109      	bne.n	8017084 <__gethex+0x320>
 8017070:	f019 0f02 	tst.w	r9, #2
 8017074:	d006      	beq.n	8017084 <__gethex+0x320>
 8017076:	f8da 3000 	ldr.w	r3, [sl]
 801707a:	ea49 0903 	orr.w	r9, r9, r3
 801707e:	f019 0f01 	tst.w	r9, #1
 8017082:	d10e      	bne.n	80170a2 <__gethex+0x33e>
 8017084:	f045 0510 	orr.w	r5, r5, #16
 8017088:	e032      	b.n	80170f0 <__gethex+0x38c>
 801708a:	f04f 0901 	mov.w	r9, #1
 801708e:	e7d1      	b.n	8017034 <__gethex+0x2d0>
 8017090:	2501      	movs	r5, #1
 8017092:	e7e2      	b.n	801705a <__gethex+0x2f6>
 8017094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017096:	f1c3 0301 	rsb	r3, r3, #1
 801709a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801709c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d0f0      	beq.n	8017084 <__gethex+0x320>
 80170a2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80170a6:	f104 0314 	add.w	r3, r4, #20
 80170aa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80170ae:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80170b2:	f04f 0c00 	mov.w	ip, #0
 80170b6:	4618      	mov	r0, r3
 80170b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80170bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80170c0:	d01b      	beq.n	80170fa <__gethex+0x396>
 80170c2:	3201      	adds	r2, #1
 80170c4:	6002      	str	r2, [r0, #0]
 80170c6:	2d02      	cmp	r5, #2
 80170c8:	f104 0314 	add.w	r3, r4, #20
 80170cc:	d13c      	bne.n	8017148 <__gethex+0x3e4>
 80170ce:	f8d8 2000 	ldr.w	r2, [r8]
 80170d2:	3a01      	subs	r2, #1
 80170d4:	42b2      	cmp	r2, r6
 80170d6:	d109      	bne.n	80170ec <__gethex+0x388>
 80170d8:	1171      	asrs	r1, r6, #5
 80170da:	2201      	movs	r2, #1
 80170dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80170e0:	f006 061f 	and.w	r6, r6, #31
 80170e4:	fa02 f606 	lsl.w	r6, r2, r6
 80170e8:	421e      	tst	r6, r3
 80170ea:	d13a      	bne.n	8017162 <__gethex+0x3fe>
 80170ec:	f045 0520 	orr.w	r5, r5, #32
 80170f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170f2:	601c      	str	r4, [r3, #0]
 80170f4:	9b02      	ldr	r3, [sp, #8]
 80170f6:	601f      	str	r7, [r3, #0]
 80170f8:	e6b0      	b.n	8016e5c <__gethex+0xf8>
 80170fa:	4299      	cmp	r1, r3
 80170fc:	f843 cc04 	str.w	ip, [r3, #-4]
 8017100:	d8d9      	bhi.n	80170b6 <__gethex+0x352>
 8017102:	68a3      	ldr	r3, [r4, #8]
 8017104:	459b      	cmp	fp, r3
 8017106:	db17      	blt.n	8017138 <__gethex+0x3d4>
 8017108:	6861      	ldr	r1, [r4, #4]
 801710a:	9801      	ldr	r0, [sp, #4]
 801710c:	3101      	adds	r1, #1
 801710e:	f7fd fca5 	bl	8014a5c <_Balloc>
 8017112:	4681      	mov	r9, r0
 8017114:	b918      	cbnz	r0, 801711e <__gethex+0x3ba>
 8017116:	4b1a      	ldr	r3, [pc, #104]	@ (8017180 <__gethex+0x41c>)
 8017118:	4602      	mov	r2, r0
 801711a:	2184      	movs	r1, #132	@ 0x84
 801711c:	e6c5      	b.n	8016eaa <__gethex+0x146>
 801711e:	6922      	ldr	r2, [r4, #16]
 8017120:	3202      	adds	r2, #2
 8017122:	f104 010c 	add.w	r1, r4, #12
 8017126:	0092      	lsls	r2, r2, #2
 8017128:	300c      	adds	r0, #12
 801712a:	f7fc fde2 	bl	8013cf2 <memcpy>
 801712e:	4621      	mov	r1, r4
 8017130:	9801      	ldr	r0, [sp, #4]
 8017132:	f7fd fcd3 	bl	8014adc <_Bfree>
 8017136:	464c      	mov	r4, r9
 8017138:	6923      	ldr	r3, [r4, #16]
 801713a:	1c5a      	adds	r2, r3, #1
 801713c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017140:	6122      	str	r2, [r4, #16]
 8017142:	2201      	movs	r2, #1
 8017144:	615a      	str	r2, [r3, #20]
 8017146:	e7be      	b.n	80170c6 <__gethex+0x362>
 8017148:	6922      	ldr	r2, [r4, #16]
 801714a:	455a      	cmp	r2, fp
 801714c:	dd0b      	ble.n	8017166 <__gethex+0x402>
 801714e:	2101      	movs	r1, #1
 8017150:	4620      	mov	r0, r4
 8017152:	f7ff fd9f 	bl	8016c94 <rshift>
 8017156:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801715a:	3701      	adds	r7, #1
 801715c:	42bb      	cmp	r3, r7
 801715e:	f6ff aee0 	blt.w	8016f22 <__gethex+0x1be>
 8017162:	2501      	movs	r5, #1
 8017164:	e7c2      	b.n	80170ec <__gethex+0x388>
 8017166:	f016 061f 	ands.w	r6, r6, #31
 801716a:	d0fa      	beq.n	8017162 <__gethex+0x3fe>
 801716c:	4453      	add	r3, sl
 801716e:	f1c6 0620 	rsb	r6, r6, #32
 8017172:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8017176:	f7fd fd63 	bl	8014c40 <__hi0bits>
 801717a:	42b0      	cmp	r0, r6
 801717c:	dbe7      	blt.n	801714e <__gethex+0x3ea>
 801717e:	e7f0      	b.n	8017162 <__gethex+0x3fe>
 8017180:	08019fe3 	.word	0x08019fe3

08017184 <L_shift>:
 8017184:	f1c2 0208 	rsb	r2, r2, #8
 8017188:	0092      	lsls	r2, r2, #2
 801718a:	b570      	push	{r4, r5, r6, lr}
 801718c:	f1c2 0620 	rsb	r6, r2, #32
 8017190:	6843      	ldr	r3, [r0, #4]
 8017192:	6804      	ldr	r4, [r0, #0]
 8017194:	fa03 f506 	lsl.w	r5, r3, r6
 8017198:	432c      	orrs	r4, r5
 801719a:	40d3      	lsrs	r3, r2
 801719c:	6004      	str	r4, [r0, #0]
 801719e:	f840 3f04 	str.w	r3, [r0, #4]!
 80171a2:	4288      	cmp	r0, r1
 80171a4:	d3f4      	bcc.n	8017190 <L_shift+0xc>
 80171a6:	bd70      	pop	{r4, r5, r6, pc}

080171a8 <__match>:
 80171a8:	b530      	push	{r4, r5, lr}
 80171aa:	6803      	ldr	r3, [r0, #0]
 80171ac:	3301      	adds	r3, #1
 80171ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80171b2:	b914      	cbnz	r4, 80171ba <__match+0x12>
 80171b4:	6003      	str	r3, [r0, #0]
 80171b6:	2001      	movs	r0, #1
 80171b8:	bd30      	pop	{r4, r5, pc}
 80171ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80171be:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80171c2:	2d19      	cmp	r5, #25
 80171c4:	bf98      	it	ls
 80171c6:	3220      	addls	r2, #32
 80171c8:	42a2      	cmp	r2, r4
 80171ca:	d0f0      	beq.n	80171ae <__match+0x6>
 80171cc:	2000      	movs	r0, #0
 80171ce:	e7f3      	b.n	80171b8 <__match+0x10>

080171d0 <__hexnan>:
 80171d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d4:	680b      	ldr	r3, [r1, #0]
 80171d6:	6801      	ldr	r1, [r0, #0]
 80171d8:	115e      	asrs	r6, r3, #5
 80171da:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80171de:	f013 031f 	ands.w	r3, r3, #31
 80171e2:	b087      	sub	sp, #28
 80171e4:	bf18      	it	ne
 80171e6:	3604      	addne	r6, #4
 80171e8:	2500      	movs	r5, #0
 80171ea:	1f37      	subs	r7, r6, #4
 80171ec:	4682      	mov	sl, r0
 80171ee:	4690      	mov	r8, r2
 80171f0:	9301      	str	r3, [sp, #4]
 80171f2:	f846 5c04 	str.w	r5, [r6, #-4]
 80171f6:	46b9      	mov	r9, r7
 80171f8:	463c      	mov	r4, r7
 80171fa:	9502      	str	r5, [sp, #8]
 80171fc:	46ab      	mov	fp, r5
 80171fe:	784a      	ldrb	r2, [r1, #1]
 8017200:	1c4b      	adds	r3, r1, #1
 8017202:	9303      	str	r3, [sp, #12]
 8017204:	b342      	cbz	r2, 8017258 <__hexnan+0x88>
 8017206:	4610      	mov	r0, r2
 8017208:	9105      	str	r1, [sp, #20]
 801720a:	9204      	str	r2, [sp, #16]
 801720c:	f7ff fd94 	bl	8016d38 <__hexdig_fun>
 8017210:	2800      	cmp	r0, #0
 8017212:	d151      	bne.n	80172b8 <__hexnan+0xe8>
 8017214:	9a04      	ldr	r2, [sp, #16]
 8017216:	9905      	ldr	r1, [sp, #20]
 8017218:	2a20      	cmp	r2, #32
 801721a:	d818      	bhi.n	801724e <__hexnan+0x7e>
 801721c:	9b02      	ldr	r3, [sp, #8]
 801721e:	459b      	cmp	fp, r3
 8017220:	dd13      	ble.n	801724a <__hexnan+0x7a>
 8017222:	454c      	cmp	r4, r9
 8017224:	d206      	bcs.n	8017234 <__hexnan+0x64>
 8017226:	2d07      	cmp	r5, #7
 8017228:	dc04      	bgt.n	8017234 <__hexnan+0x64>
 801722a:	462a      	mov	r2, r5
 801722c:	4649      	mov	r1, r9
 801722e:	4620      	mov	r0, r4
 8017230:	f7ff ffa8 	bl	8017184 <L_shift>
 8017234:	4544      	cmp	r4, r8
 8017236:	d952      	bls.n	80172de <__hexnan+0x10e>
 8017238:	2300      	movs	r3, #0
 801723a:	f1a4 0904 	sub.w	r9, r4, #4
 801723e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017242:	f8cd b008 	str.w	fp, [sp, #8]
 8017246:	464c      	mov	r4, r9
 8017248:	461d      	mov	r5, r3
 801724a:	9903      	ldr	r1, [sp, #12]
 801724c:	e7d7      	b.n	80171fe <__hexnan+0x2e>
 801724e:	2a29      	cmp	r2, #41	@ 0x29
 8017250:	d157      	bne.n	8017302 <__hexnan+0x132>
 8017252:	3102      	adds	r1, #2
 8017254:	f8ca 1000 	str.w	r1, [sl]
 8017258:	f1bb 0f00 	cmp.w	fp, #0
 801725c:	d051      	beq.n	8017302 <__hexnan+0x132>
 801725e:	454c      	cmp	r4, r9
 8017260:	d206      	bcs.n	8017270 <__hexnan+0xa0>
 8017262:	2d07      	cmp	r5, #7
 8017264:	dc04      	bgt.n	8017270 <__hexnan+0xa0>
 8017266:	462a      	mov	r2, r5
 8017268:	4649      	mov	r1, r9
 801726a:	4620      	mov	r0, r4
 801726c:	f7ff ff8a 	bl	8017184 <L_shift>
 8017270:	4544      	cmp	r4, r8
 8017272:	d936      	bls.n	80172e2 <__hexnan+0x112>
 8017274:	f1a8 0204 	sub.w	r2, r8, #4
 8017278:	4623      	mov	r3, r4
 801727a:	f853 1b04 	ldr.w	r1, [r3], #4
 801727e:	f842 1f04 	str.w	r1, [r2, #4]!
 8017282:	429f      	cmp	r7, r3
 8017284:	d2f9      	bcs.n	801727a <__hexnan+0xaa>
 8017286:	1b3b      	subs	r3, r7, r4
 8017288:	f023 0303 	bic.w	r3, r3, #3
 801728c:	3304      	adds	r3, #4
 801728e:	3401      	adds	r4, #1
 8017290:	3e03      	subs	r6, #3
 8017292:	42b4      	cmp	r4, r6
 8017294:	bf88      	it	hi
 8017296:	2304      	movhi	r3, #4
 8017298:	4443      	add	r3, r8
 801729a:	2200      	movs	r2, #0
 801729c:	f843 2b04 	str.w	r2, [r3], #4
 80172a0:	429f      	cmp	r7, r3
 80172a2:	d2fb      	bcs.n	801729c <__hexnan+0xcc>
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	b91b      	cbnz	r3, 80172b0 <__hexnan+0xe0>
 80172a8:	4547      	cmp	r7, r8
 80172aa:	d128      	bne.n	80172fe <__hexnan+0x12e>
 80172ac:	2301      	movs	r3, #1
 80172ae:	603b      	str	r3, [r7, #0]
 80172b0:	2005      	movs	r0, #5
 80172b2:	b007      	add	sp, #28
 80172b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b8:	3501      	adds	r5, #1
 80172ba:	2d08      	cmp	r5, #8
 80172bc:	f10b 0b01 	add.w	fp, fp, #1
 80172c0:	dd06      	ble.n	80172d0 <__hexnan+0x100>
 80172c2:	4544      	cmp	r4, r8
 80172c4:	d9c1      	bls.n	801724a <__hexnan+0x7a>
 80172c6:	2300      	movs	r3, #0
 80172c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80172cc:	2501      	movs	r5, #1
 80172ce:	3c04      	subs	r4, #4
 80172d0:	6822      	ldr	r2, [r4, #0]
 80172d2:	f000 000f 	and.w	r0, r0, #15
 80172d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80172da:	6020      	str	r0, [r4, #0]
 80172dc:	e7b5      	b.n	801724a <__hexnan+0x7a>
 80172de:	2508      	movs	r5, #8
 80172e0:	e7b3      	b.n	801724a <__hexnan+0x7a>
 80172e2:	9b01      	ldr	r3, [sp, #4]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d0dd      	beq.n	80172a4 <__hexnan+0xd4>
 80172e8:	f1c3 0320 	rsb	r3, r3, #32
 80172ec:	f04f 32ff 	mov.w	r2, #4294967295
 80172f0:	40da      	lsrs	r2, r3
 80172f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80172f6:	4013      	ands	r3, r2
 80172f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80172fc:	e7d2      	b.n	80172a4 <__hexnan+0xd4>
 80172fe:	3f04      	subs	r7, #4
 8017300:	e7d0      	b.n	80172a4 <__hexnan+0xd4>
 8017302:	2004      	movs	r0, #4
 8017304:	e7d5      	b.n	80172b2 <__hexnan+0xe2>

08017306 <__ascii_mbtowc>:
 8017306:	b082      	sub	sp, #8
 8017308:	b901      	cbnz	r1, 801730c <__ascii_mbtowc+0x6>
 801730a:	a901      	add	r1, sp, #4
 801730c:	b142      	cbz	r2, 8017320 <__ascii_mbtowc+0x1a>
 801730e:	b14b      	cbz	r3, 8017324 <__ascii_mbtowc+0x1e>
 8017310:	7813      	ldrb	r3, [r2, #0]
 8017312:	600b      	str	r3, [r1, #0]
 8017314:	7812      	ldrb	r2, [r2, #0]
 8017316:	1e10      	subs	r0, r2, #0
 8017318:	bf18      	it	ne
 801731a:	2001      	movne	r0, #1
 801731c:	b002      	add	sp, #8
 801731e:	4770      	bx	lr
 8017320:	4610      	mov	r0, r2
 8017322:	e7fb      	b.n	801731c <__ascii_mbtowc+0x16>
 8017324:	f06f 0001 	mvn.w	r0, #1
 8017328:	e7f8      	b.n	801731c <__ascii_mbtowc+0x16>

0801732a <_realloc_r>:
 801732a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801732e:	4680      	mov	r8, r0
 8017330:	4615      	mov	r5, r2
 8017332:	460c      	mov	r4, r1
 8017334:	b921      	cbnz	r1, 8017340 <_realloc_r+0x16>
 8017336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801733a:	4611      	mov	r1, r2
 801733c:	f7fb bbda 	b.w	8012af4 <_malloc_r>
 8017340:	b92a      	cbnz	r2, 801734e <_realloc_r+0x24>
 8017342:	f7fd fb39 	bl	80149b8 <_free_r>
 8017346:	2400      	movs	r4, #0
 8017348:	4620      	mov	r0, r4
 801734a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801734e:	f000 f8b2 	bl	80174b6 <_malloc_usable_size_r>
 8017352:	4285      	cmp	r5, r0
 8017354:	4606      	mov	r6, r0
 8017356:	d802      	bhi.n	801735e <_realloc_r+0x34>
 8017358:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801735c:	d8f4      	bhi.n	8017348 <_realloc_r+0x1e>
 801735e:	4629      	mov	r1, r5
 8017360:	4640      	mov	r0, r8
 8017362:	f7fb fbc7 	bl	8012af4 <_malloc_r>
 8017366:	4607      	mov	r7, r0
 8017368:	2800      	cmp	r0, #0
 801736a:	d0ec      	beq.n	8017346 <_realloc_r+0x1c>
 801736c:	42b5      	cmp	r5, r6
 801736e:	462a      	mov	r2, r5
 8017370:	4621      	mov	r1, r4
 8017372:	bf28      	it	cs
 8017374:	4632      	movcs	r2, r6
 8017376:	f7fc fcbc 	bl	8013cf2 <memcpy>
 801737a:	4621      	mov	r1, r4
 801737c:	4640      	mov	r0, r8
 801737e:	f7fd fb1b 	bl	80149b8 <_free_r>
 8017382:	463c      	mov	r4, r7
 8017384:	e7e0      	b.n	8017348 <_realloc_r+0x1e>
	...

08017388 <_strtoul_l.constprop.0>:
 8017388:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801738c:	4e34      	ldr	r6, [pc, #208]	@ (8017460 <_strtoul_l.constprop.0+0xd8>)
 801738e:	4686      	mov	lr, r0
 8017390:	460d      	mov	r5, r1
 8017392:	4628      	mov	r0, r5
 8017394:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017398:	5d37      	ldrb	r7, [r6, r4]
 801739a:	f017 0708 	ands.w	r7, r7, #8
 801739e:	d1f8      	bne.n	8017392 <_strtoul_l.constprop.0+0xa>
 80173a0:	2c2d      	cmp	r4, #45	@ 0x2d
 80173a2:	d12f      	bne.n	8017404 <_strtoul_l.constprop.0+0x7c>
 80173a4:	782c      	ldrb	r4, [r5, #0]
 80173a6:	2701      	movs	r7, #1
 80173a8:	1c85      	adds	r5, r0, #2
 80173aa:	f033 0010 	bics.w	r0, r3, #16
 80173ae:	d109      	bne.n	80173c4 <_strtoul_l.constprop.0+0x3c>
 80173b0:	2c30      	cmp	r4, #48	@ 0x30
 80173b2:	d12c      	bne.n	801740e <_strtoul_l.constprop.0+0x86>
 80173b4:	7828      	ldrb	r0, [r5, #0]
 80173b6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80173ba:	2858      	cmp	r0, #88	@ 0x58
 80173bc:	d127      	bne.n	801740e <_strtoul_l.constprop.0+0x86>
 80173be:	786c      	ldrb	r4, [r5, #1]
 80173c0:	2310      	movs	r3, #16
 80173c2:	3502      	adds	r5, #2
 80173c4:	f04f 38ff 	mov.w	r8, #4294967295
 80173c8:	2600      	movs	r6, #0
 80173ca:	fbb8 f8f3 	udiv	r8, r8, r3
 80173ce:	fb03 f908 	mul.w	r9, r3, r8
 80173d2:	ea6f 0909 	mvn.w	r9, r9
 80173d6:	4630      	mov	r0, r6
 80173d8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80173dc:	f1bc 0f09 	cmp.w	ip, #9
 80173e0:	d81c      	bhi.n	801741c <_strtoul_l.constprop.0+0x94>
 80173e2:	4664      	mov	r4, ip
 80173e4:	42a3      	cmp	r3, r4
 80173e6:	dd2a      	ble.n	801743e <_strtoul_l.constprop.0+0xb6>
 80173e8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80173ec:	d007      	beq.n	80173fe <_strtoul_l.constprop.0+0x76>
 80173ee:	4580      	cmp	r8, r0
 80173f0:	d322      	bcc.n	8017438 <_strtoul_l.constprop.0+0xb0>
 80173f2:	d101      	bne.n	80173f8 <_strtoul_l.constprop.0+0x70>
 80173f4:	45a1      	cmp	r9, r4
 80173f6:	db1f      	blt.n	8017438 <_strtoul_l.constprop.0+0xb0>
 80173f8:	fb00 4003 	mla	r0, r0, r3, r4
 80173fc:	2601      	movs	r6, #1
 80173fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017402:	e7e9      	b.n	80173d8 <_strtoul_l.constprop.0+0x50>
 8017404:	2c2b      	cmp	r4, #43	@ 0x2b
 8017406:	bf04      	itt	eq
 8017408:	782c      	ldrbeq	r4, [r5, #0]
 801740a:	1c85      	addeq	r5, r0, #2
 801740c:	e7cd      	b.n	80173aa <_strtoul_l.constprop.0+0x22>
 801740e:	2b00      	cmp	r3, #0
 8017410:	d1d8      	bne.n	80173c4 <_strtoul_l.constprop.0+0x3c>
 8017412:	2c30      	cmp	r4, #48	@ 0x30
 8017414:	bf0c      	ite	eq
 8017416:	2308      	moveq	r3, #8
 8017418:	230a      	movne	r3, #10
 801741a:	e7d3      	b.n	80173c4 <_strtoul_l.constprop.0+0x3c>
 801741c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8017420:	f1bc 0f19 	cmp.w	ip, #25
 8017424:	d801      	bhi.n	801742a <_strtoul_l.constprop.0+0xa2>
 8017426:	3c37      	subs	r4, #55	@ 0x37
 8017428:	e7dc      	b.n	80173e4 <_strtoul_l.constprop.0+0x5c>
 801742a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801742e:	f1bc 0f19 	cmp.w	ip, #25
 8017432:	d804      	bhi.n	801743e <_strtoul_l.constprop.0+0xb6>
 8017434:	3c57      	subs	r4, #87	@ 0x57
 8017436:	e7d5      	b.n	80173e4 <_strtoul_l.constprop.0+0x5c>
 8017438:	f04f 36ff 	mov.w	r6, #4294967295
 801743c:	e7df      	b.n	80173fe <_strtoul_l.constprop.0+0x76>
 801743e:	1c73      	adds	r3, r6, #1
 8017440:	d106      	bne.n	8017450 <_strtoul_l.constprop.0+0xc8>
 8017442:	2322      	movs	r3, #34	@ 0x22
 8017444:	f8ce 3000 	str.w	r3, [lr]
 8017448:	4630      	mov	r0, r6
 801744a:	b932      	cbnz	r2, 801745a <_strtoul_l.constprop.0+0xd2>
 801744c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017450:	b107      	cbz	r7, 8017454 <_strtoul_l.constprop.0+0xcc>
 8017452:	4240      	negs	r0, r0
 8017454:	2a00      	cmp	r2, #0
 8017456:	d0f9      	beq.n	801744c <_strtoul_l.constprop.0+0xc4>
 8017458:	b106      	cbz	r6, 801745c <_strtoul_l.constprop.0+0xd4>
 801745a:	1e69      	subs	r1, r5, #1
 801745c:	6011      	str	r1, [r2, #0]
 801745e:	e7f5      	b.n	801744c <_strtoul_l.constprop.0+0xc4>
 8017460:	0801a1a9 	.word	0x0801a1a9

08017464 <_strtoul_r>:
 8017464:	f7ff bf90 	b.w	8017388 <_strtoul_l.constprop.0>

08017468 <__ascii_wctomb>:
 8017468:	4603      	mov	r3, r0
 801746a:	4608      	mov	r0, r1
 801746c:	b141      	cbz	r1, 8017480 <__ascii_wctomb+0x18>
 801746e:	2aff      	cmp	r2, #255	@ 0xff
 8017470:	d904      	bls.n	801747c <__ascii_wctomb+0x14>
 8017472:	228a      	movs	r2, #138	@ 0x8a
 8017474:	601a      	str	r2, [r3, #0]
 8017476:	f04f 30ff 	mov.w	r0, #4294967295
 801747a:	4770      	bx	lr
 801747c:	700a      	strb	r2, [r1, #0]
 801747e:	2001      	movs	r0, #1
 8017480:	4770      	bx	lr
	...

08017484 <fiprintf>:
 8017484:	b40e      	push	{r1, r2, r3}
 8017486:	b503      	push	{r0, r1, lr}
 8017488:	4601      	mov	r1, r0
 801748a:	ab03      	add	r3, sp, #12
 801748c:	4805      	ldr	r0, [pc, #20]	@ (80174a4 <fiprintf+0x20>)
 801748e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017492:	6800      	ldr	r0, [r0, #0]
 8017494:	9301      	str	r3, [sp, #4]
 8017496:	f000 f83f 	bl	8017518 <_vfiprintf_r>
 801749a:	b002      	add	sp, #8
 801749c:	f85d eb04 	ldr.w	lr, [sp], #4
 80174a0:	b003      	add	sp, #12
 80174a2:	4770      	bx	lr
 80174a4:	20000068 	.word	0x20000068

080174a8 <abort>:
 80174a8:	b508      	push	{r3, lr}
 80174aa:	2006      	movs	r0, #6
 80174ac:	f000 fa08 	bl	80178c0 <raise>
 80174b0:	2001      	movs	r0, #1
 80174b2:	f7f0 fb09 	bl	8007ac8 <_exit>

080174b6 <_malloc_usable_size_r>:
 80174b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174ba:	1f18      	subs	r0, r3, #4
 80174bc:	2b00      	cmp	r3, #0
 80174be:	bfbc      	itt	lt
 80174c0:	580b      	ldrlt	r3, [r1, r0]
 80174c2:	18c0      	addlt	r0, r0, r3
 80174c4:	4770      	bx	lr

080174c6 <__sfputc_r>:
 80174c6:	6893      	ldr	r3, [r2, #8]
 80174c8:	3b01      	subs	r3, #1
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	b410      	push	{r4}
 80174ce:	6093      	str	r3, [r2, #8]
 80174d0:	da08      	bge.n	80174e4 <__sfputc_r+0x1e>
 80174d2:	6994      	ldr	r4, [r2, #24]
 80174d4:	42a3      	cmp	r3, r4
 80174d6:	db01      	blt.n	80174dc <__sfputc_r+0x16>
 80174d8:	290a      	cmp	r1, #10
 80174da:	d103      	bne.n	80174e4 <__sfputc_r+0x1e>
 80174dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174e0:	f000 b932 	b.w	8017748 <__swbuf_r>
 80174e4:	6813      	ldr	r3, [r2, #0]
 80174e6:	1c58      	adds	r0, r3, #1
 80174e8:	6010      	str	r0, [r2, #0]
 80174ea:	7019      	strb	r1, [r3, #0]
 80174ec:	4608      	mov	r0, r1
 80174ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80174f2:	4770      	bx	lr

080174f4 <__sfputs_r>:
 80174f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174f6:	4606      	mov	r6, r0
 80174f8:	460f      	mov	r7, r1
 80174fa:	4614      	mov	r4, r2
 80174fc:	18d5      	adds	r5, r2, r3
 80174fe:	42ac      	cmp	r4, r5
 8017500:	d101      	bne.n	8017506 <__sfputs_r+0x12>
 8017502:	2000      	movs	r0, #0
 8017504:	e007      	b.n	8017516 <__sfputs_r+0x22>
 8017506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801750a:	463a      	mov	r2, r7
 801750c:	4630      	mov	r0, r6
 801750e:	f7ff ffda 	bl	80174c6 <__sfputc_r>
 8017512:	1c43      	adds	r3, r0, #1
 8017514:	d1f3      	bne.n	80174fe <__sfputs_r+0xa>
 8017516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017518 <_vfiprintf_r>:
 8017518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801751c:	460d      	mov	r5, r1
 801751e:	b09d      	sub	sp, #116	@ 0x74
 8017520:	4614      	mov	r4, r2
 8017522:	4698      	mov	r8, r3
 8017524:	4606      	mov	r6, r0
 8017526:	b118      	cbz	r0, 8017530 <_vfiprintf_r+0x18>
 8017528:	6a03      	ldr	r3, [r0, #32]
 801752a:	b90b      	cbnz	r3, 8017530 <_vfiprintf_r+0x18>
 801752c:	f7fc fa66 	bl	80139fc <__sinit>
 8017530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017532:	07d9      	lsls	r1, r3, #31
 8017534:	d405      	bmi.n	8017542 <_vfiprintf_r+0x2a>
 8017536:	89ab      	ldrh	r3, [r5, #12]
 8017538:	059a      	lsls	r2, r3, #22
 801753a:	d402      	bmi.n	8017542 <_vfiprintf_r+0x2a>
 801753c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801753e:	f7fc fbd6 	bl	8013cee <__retarget_lock_acquire_recursive>
 8017542:	89ab      	ldrh	r3, [r5, #12]
 8017544:	071b      	lsls	r3, r3, #28
 8017546:	d501      	bpl.n	801754c <_vfiprintf_r+0x34>
 8017548:	692b      	ldr	r3, [r5, #16]
 801754a:	b99b      	cbnz	r3, 8017574 <_vfiprintf_r+0x5c>
 801754c:	4629      	mov	r1, r5
 801754e:	4630      	mov	r0, r6
 8017550:	f000 f938 	bl	80177c4 <__swsetup_r>
 8017554:	b170      	cbz	r0, 8017574 <_vfiprintf_r+0x5c>
 8017556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017558:	07dc      	lsls	r4, r3, #31
 801755a:	d504      	bpl.n	8017566 <_vfiprintf_r+0x4e>
 801755c:	f04f 30ff 	mov.w	r0, #4294967295
 8017560:	b01d      	add	sp, #116	@ 0x74
 8017562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017566:	89ab      	ldrh	r3, [r5, #12]
 8017568:	0598      	lsls	r0, r3, #22
 801756a:	d4f7      	bmi.n	801755c <_vfiprintf_r+0x44>
 801756c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801756e:	f7fc fbbf 	bl	8013cf0 <__retarget_lock_release_recursive>
 8017572:	e7f3      	b.n	801755c <_vfiprintf_r+0x44>
 8017574:	2300      	movs	r3, #0
 8017576:	9309      	str	r3, [sp, #36]	@ 0x24
 8017578:	2320      	movs	r3, #32
 801757a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801757e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017582:	2330      	movs	r3, #48	@ 0x30
 8017584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017734 <_vfiprintf_r+0x21c>
 8017588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801758c:	f04f 0901 	mov.w	r9, #1
 8017590:	4623      	mov	r3, r4
 8017592:	469a      	mov	sl, r3
 8017594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017598:	b10a      	cbz	r2, 801759e <_vfiprintf_r+0x86>
 801759a:	2a25      	cmp	r2, #37	@ 0x25
 801759c:	d1f9      	bne.n	8017592 <_vfiprintf_r+0x7a>
 801759e:	ebba 0b04 	subs.w	fp, sl, r4
 80175a2:	d00b      	beq.n	80175bc <_vfiprintf_r+0xa4>
 80175a4:	465b      	mov	r3, fp
 80175a6:	4622      	mov	r2, r4
 80175a8:	4629      	mov	r1, r5
 80175aa:	4630      	mov	r0, r6
 80175ac:	f7ff ffa2 	bl	80174f4 <__sfputs_r>
 80175b0:	3001      	adds	r0, #1
 80175b2:	f000 80a7 	beq.w	8017704 <_vfiprintf_r+0x1ec>
 80175b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80175b8:	445a      	add	r2, fp
 80175ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80175bc:	f89a 3000 	ldrb.w	r3, [sl]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	f000 809f 	beq.w	8017704 <_vfiprintf_r+0x1ec>
 80175c6:	2300      	movs	r3, #0
 80175c8:	f04f 32ff 	mov.w	r2, #4294967295
 80175cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175d0:	f10a 0a01 	add.w	sl, sl, #1
 80175d4:	9304      	str	r3, [sp, #16]
 80175d6:	9307      	str	r3, [sp, #28]
 80175d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80175dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80175de:	4654      	mov	r4, sl
 80175e0:	2205      	movs	r2, #5
 80175e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175e6:	4853      	ldr	r0, [pc, #332]	@ (8017734 <_vfiprintf_r+0x21c>)
 80175e8:	f7e8 fe12 	bl	8000210 <memchr>
 80175ec:	9a04      	ldr	r2, [sp, #16]
 80175ee:	b9d8      	cbnz	r0, 8017628 <_vfiprintf_r+0x110>
 80175f0:	06d1      	lsls	r1, r2, #27
 80175f2:	bf44      	itt	mi
 80175f4:	2320      	movmi	r3, #32
 80175f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80175fa:	0713      	lsls	r3, r2, #28
 80175fc:	bf44      	itt	mi
 80175fe:	232b      	movmi	r3, #43	@ 0x2b
 8017600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017604:	f89a 3000 	ldrb.w	r3, [sl]
 8017608:	2b2a      	cmp	r3, #42	@ 0x2a
 801760a:	d015      	beq.n	8017638 <_vfiprintf_r+0x120>
 801760c:	9a07      	ldr	r2, [sp, #28]
 801760e:	4654      	mov	r4, sl
 8017610:	2000      	movs	r0, #0
 8017612:	f04f 0c0a 	mov.w	ip, #10
 8017616:	4621      	mov	r1, r4
 8017618:	f811 3b01 	ldrb.w	r3, [r1], #1
 801761c:	3b30      	subs	r3, #48	@ 0x30
 801761e:	2b09      	cmp	r3, #9
 8017620:	d94b      	bls.n	80176ba <_vfiprintf_r+0x1a2>
 8017622:	b1b0      	cbz	r0, 8017652 <_vfiprintf_r+0x13a>
 8017624:	9207      	str	r2, [sp, #28]
 8017626:	e014      	b.n	8017652 <_vfiprintf_r+0x13a>
 8017628:	eba0 0308 	sub.w	r3, r0, r8
 801762c:	fa09 f303 	lsl.w	r3, r9, r3
 8017630:	4313      	orrs	r3, r2
 8017632:	9304      	str	r3, [sp, #16]
 8017634:	46a2      	mov	sl, r4
 8017636:	e7d2      	b.n	80175de <_vfiprintf_r+0xc6>
 8017638:	9b03      	ldr	r3, [sp, #12]
 801763a:	1d19      	adds	r1, r3, #4
 801763c:	681b      	ldr	r3, [r3, #0]
 801763e:	9103      	str	r1, [sp, #12]
 8017640:	2b00      	cmp	r3, #0
 8017642:	bfbb      	ittet	lt
 8017644:	425b      	neglt	r3, r3
 8017646:	f042 0202 	orrlt.w	r2, r2, #2
 801764a:	9307      	strge	r3, [sp, #28]
 801764c:	9307      	strlt	r3, [sp, #28]
 801764e:	bfb8      	it	lt
 8017650:	9204      	strlt	r2, [sp, #16]
 8017652:	7823      	ldrb	r3, [r4, #0]
 8017654:	2b2e      	cmp	r3, #46	@ 0x2e
 8017656:	d10a      	bne.n	801766e <_vfiprintf_r+0x156>
 8017658:	7863      	ldrb	r3, [r4, #1]
 801765a:	2b2a      	cmp	r3, #42	@ 0x2a
 801765c:	d132      	bne.n	80176c4 <_vfiprintf_r+0x1ac>
 801765e:	9b03      	ldr	r3, [sp, #12]
 8017660:	1d1a      	adds	r2, r3, #4
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	9203      	str	r2, [sp, #12]
 8017666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801766a:	3402      	adds	r4, #2
 801766c:	9305      	str	r3, [sp, #20]
 801766e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017744 <_vfiprintf_r+0x22c>
 8017672:	7821      	ldrb	r1, [r4, #0]
 8017674:	2203      	movs	r2, #3
 8017676:	4650      	mov	r0, sl
 8017678:	f7e8 fdca 	bl	8000210 <memchr>
 801767c:	b138      	cbz	r0, 801768e <_vfiprintf_r+0x176>
 801767e:	9b04      	ldr	r3, [sp, #16]
 8017680:	eba0 000a 	sub.w	r0, r0, sl
 8017684:	2240      	movs	r2, #64	@ 0x40
 8017686:	4082      	lsls	r2, r0
 8017688:	4313      	orrs	r3, r2
 801768a:	3401      	adds	r4, #1
 801768c:	9304      	str	r3, [sp, #16]
 801768e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017692:	4829      	ldr	r0, [pc, #164]	@ (8017738 <_vfiprintf_r+0x220>)
 8017694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017698:	2206      	movs	r2, #6
 801769a:	f7e8 fdb9 	bl	8000210 <memchr>
 801769e:	2800      	cmp	r0, #0
 80176a0:	d03f      	beq.n	8017722 <_vfiprintf_r+0x20a>
 80176a2:	4b26      	ldr	r3, [pc, #152]	@ (801773c <_vfiprintf_r+0x224>)
 80176a4:	bb1b      	cbnz	r3, 80176ee <_vfiprintf_r+0x1d6>
 80176a6:	9b03      	ldr	r3, [sp, #12]
 80176a8:	3307      	adds	r3, #7
 80176aa:	f023 0307 	bic.w	r3, r3, #7
 80176ae:	3308      	adds	r3, #8
 80176b0:	9303      	str	r3, [sp, #12]
 80176b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176b4:	443b      	add	r3, r7
 80176b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80176b8:	e76a      	b.n	8017590 <_vfiprintf_r+0x78>
 80176ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80176be:	460c      	mov	r4, r1
 80176c0:	2001      	movs	r0, #1
 80176c2:	e7a8      	b.n	8017616 <_vfiprintf_r+0xfe>
 80176c4:	2300      	movs	r3, #0
 80176c6:	3401      	adds	r4, #1
 80176c8:	9305      	str	r3, [sp, #20]
 80176ca:	4619      	mov	r1, r3
 80176cc:	f04f 0c0a 	mov.w	ip, #10
 80176d0:	4620      	mov	r0, r4
 80176d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80176d6:	3a30      	subs	r2, #48	@ 0x30
 80176d8:	2a09      	cmp	r2, #9
 80176da:	d903      	bls.n	80176e4 <_vfiprintf_r+0x1cc>
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d0c6      	beq.n	801766e <_vfiprintf_r+0x156>
 80176e0:	9105      	str	r1, [sp, #20]
 80176e2:	e7c4      	b.n	801766e <_vfiprintf_r+0x156>
 80176e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80176e8:	4604      	mov	r4, r0
 80176ea:	2301      	movs	r3, #1
 80176ec:	e7f0      	b.n	80176d0 <_vfiprintf_r+0x1b8>
 80176ee:	ab03      	add	r3, sp, #12
 80176f0:	9300      	str	r3, [sp, #0]
 80176f2:	462a      	mov	r2, r5
 80176f4:	4b12      	ldr	r3, [pc, #72]	@ (8017740 <_vfiprintf_r+0x228>)
 80176f6:	a904      	add	r1, sp, #16
 80176f8:	4630      	mov	r0, r6
 80176fa:	f7fb fb27 	bl	8012d4c <_printf_float>
 80176fe:	4607      	mov	r7, r0
 8017700:	1c78      	adds	r0, r7, #1
 8017702:	d1d6      	bne.n	80176b2 <_vfiprintf_r+0x19a>
 8017704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017706:	07d9      	lsls	r1, r3, #31
 8017708:	d405      	bmi.n	8017716 <_vfiprintf_r+0x1fe>
 801770a:	89ab      	ldrh	r3, [r5, #12]
 801770c:	059a      	lsls	r2, r3, #22
 801770e:	d402      	bmi.n	8017716 <_vfiprintf_r+0x1fe>
 8017710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017712:	f7fc faed 	bl	8013cf0 <__retarget_lock_release_recursive>
 8017716:	89ab      	ldrh	r3, [r5, #12]
 8017718:	065b      	lsls	r3, r3, #25
 801771a:	f53f af1f 	bmi.w	801755c <_vfiprintf_r+0x44>
 801771e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017720:	e71e      	b.n	8017560 <_vfiprintf_r+0x48>
 8017722:	ab03      	add	r3, sp, #12
 8017724:	9300      	str	r3, [sp, #0]
 8017726:	462a      	mov	r2, r5
 8017728:	4b05      	ldr	r3, [pc, #20]	@ (8017740 <_vfiprintf_r+0x228>)
 801772a:	a904      	add	r1, sp, #16
 801772c:	4630      	mov	r0, r6
 801772e:	f7fb fda5 	bl	801327c <_printf_i>
 8017732:	e7e4      	b.n	80176fe <_vfiprintf_r+0x1e6>
 8017734:	0801a2a9 	.word	0x0801a2a9
 8017738:	0801a2b3 	.word	0x0801a2b3
 801773c:	08012d4d 	.word	0x08012d4d
 8017740:	080174f5 	.word	0x080174f5
 8017744:	0801a2af 	.word	0x0801a2af

08017748 <__swbuf_r>:
 8017748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801774a:	460e      	mov	r6, r1
 801774c:	4614      	mov	r4, r2
 801774e:	4605      	mov	r5, r0
 8017750:	b118      	cbz	r0, 801775a <__swbuf_r+0x12>
 8017752:	6a03      	ldr	r3, [r0, #32]
 8017754:	b90b      	cbnz	r3, 801775a <__swbuf_r+0x12>
 8017756:	f7fc f951 	bl	80139fc <__sinit>
 801775a:	69a3      	ldr	r3, [r4, #24]
 801775c:	60a3      	str	r3, [r4, #8]
 801775e:	89a3      	ldrh	r3, [r4, #12]
 8017760:	071a      	lsls	r2, r3, #28
 8017762:	d501      	bpl.n	8017768 <__swbuf_r+0x20>
 8017764:	6923      	ldr	r3, [r4, #16]
 8017766:	b943      	cbnz	r3, 801777a <__swbuf_r+0x32>
 8017768:	4621      	mov	r1, r4
 801776a:	4628      	mov	r0, r5
 801776c:	f000 f82a 	bl	80177c4 <__swsetup_r>
 8017770:	b118      	cbz	r0, 801777a <__swbuf_r+0x32>
 8017772:	f04f 37ff 	mov.w	r7, #4294967295
 8017776:	4638      	mov	r0, r7
 8017778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801777a:	6823      	ldr	r3, [r4, #0]
 801777c:	6922      	ldr	r2, [r4, #16]
 801777e:	1a98      	subs	r0, r3, r2
 8017780:	6963      	ldr	r3, [r4, #20]
 8017782:	b2f6      	uxtb	r6, r6
 8017784:	4283      	cmp	r3, r0
 8017786:	4637      	mov	r7, r6
 8017788:	dc05      	bgt.n	8017796 <__swbuf_r+0x4e>
 801778a:	4621      	mov	r1, r4
 801778c:	4628      	mov	r0, r5
 801778e:	f7ff f993 	bl	8016ab8 <_fflush_r>
 8017792:	2800      	cmp	r0, #0
 8017794:	d1ed      	bne.n	8017772 <__swbuf_r+0x2a>
 8017796:	68a3      	ldr	r3, [r4, #8]
 8017798:	3b01      	subs	r3, #1
 801779a:	60a3      	str	r3, [r4, #8]
 801779c:	6823      	ldr	r3, [r4, #0]
 801779e:	1c5a      	adds	r2, r3, #1
 80177a0:	6022      	str	r2, [r4, #0]
 80177a2:	701e      	strb	r6, [r3, #0]
 80177a4:	6962      	ldr	r2, [r4, #20]
 80177a6:	1c43      	adds	r3, r0, #1
 80177a8:	429a      	cmp	r2, r3
 80177aa:	d004      	beq.n	80177b6 <__swbuf_r+0x6e>
 80177ac:	89a3      	ldrh	r3, [r4, #12]
 80177ae:	07db      	lsls	r3, r3, #31
 80177b0:	d5e1      	bpl.n	8017776 <__swbuf_r+0x2e>
 80177b2:	2e0a      	cmp	r6, #10
 80177b4:	d1df      	bne.n	8017776 <__swbuf_r+0x2e>
 80177b6:	4621      	mov	r1, r4
 80177b8:	4628      	mov	r0, r5
 80177ba:	f7ff f97d 	bl	8016ab8 <_fflush_r>
 80177be:	2800      	cmp	r0, #0
 80177c0:	d0d9      	beq.n	8017776 <__swbuf_r+0x2e>
 80177c2:	e7d6      	b.n	8017772 <__swbuf_r+0x2a>

080177c4 <__swsetup_r>:
 80177c4:	b538      	push	{r3, r4, r5, lr}
 80177c6:	4b29      	ldr	r3, [pc, #164]	@ (801786c <__swsetup_r+0xa8>)
 80177c8:	4605      	mov	r5, r0
 80177ca:	6818      	ldr	r0, [r3, #0]
 80177cc:	460c      	mov	r4, r1
 80177ce:	b118      	cbz	r0, 80177d8 <__swsetup_r+0x14>
 80177d0:	6a03      	ldr	r3, [r0, #32]
 80177d2:	b90b      	cbnz	r3, 80177d8 <__swsetup_r+0x14>
 80177d4:	f7fc f912 	bl	80139fc <__sinit>
 80177d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80177dc:	0719      	lsls	r1, r3, #28
 80177de:	d422      	bmi.n	8017826 <__swsetup_r+0x62>
 80177e0:	06da      	lsls	r2, r3, #27
 80177e2:	d407      	bmi.n	80177f4 <__swsetup_r+0x30>
 80177e4:	2209      	movs	r2, #9
 80177e6:	602a      	str	r2, [r5, #0]
 80177e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80177ec:	81a3      	strh	r3, [r4, #12]
 80177ee:	f04f 30ff 	mov.w	r0, #4294967295
 80177f2:	e033      	b.n	801785c <__swsetup_r+0x98>
 80177f4:	0758      	lsls	r0, r3, #29
 80177f6:	d512      	bpl.n	801781e <__swsetup_r+0x5a>
 80177f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80177fa:	b141      	cbz	r1, 801780e <__swsetup_r+0x4a>
 80177fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017800:	4299      	cmp	r1, r3
 8017802:	d002      	beq.n	801780a <__swsetup_r+0x46>
 8017804:	4628      	mov	r0, r5
 8017806:	f7fd f8d7 	bl	80149b8 <_free_r>
 801780a:	2300      	movs	r3, #0
 801780c:	6363      	str	r3, [r4, #52]	@ 0x34
 801780e:	89a3      	ldrh	r3, [r4, #12]
 8017810:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017814:	81a3      	strh	r3, [r4, #12]
 8017816:	2300      	movs	r3, #0
 8017818:	6063      	str	r3, [r4, #4]
 801781a:	6923      	ldr	r3, [r4, #16]
 801781c:	6023      	str	r3, [r4, #0]
 801781e:	89a3      	ldrh	r3, [r4, #12]
 8017820:	f043 0308 	orr.w	r3, r3, #8
 8017824:	81a3      	strh	r3, [r4, #12]
 8017826:	6923      	ldr	r3, [r4, #16]
 8017828:	b94b      	cbnz	r3, 801783e <__swsetup_r+0x7a>
 801782a:	89a3      	ldrh	r3, [r4, #12]
 801782c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017834:	d003      	beq.n	801783e <__swsetup_r+0x7a>
 8017836:	4621      	mov	r1, r4
 8017838:	4628      	mov	r0, r5
 801783a:	f000 f883 	bl	8017944 <__smakebuf_r>
 801783e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017842:	f013 0201 	ands.w	r2, r3, #1
 8017846:	d00a      	beq.n	801785e <__swsetup_r+0x9a>
 8017848:	2200      	movs	r2, #0
 801784a:	60a2      	str	r2, [r4, #8]
 801784c:	6962      	ldr	r2, [r4, #20]
 801784e:	4252      	negs	r2, r2
 8017850:	61a2      	str	r2, [r4, #24]
 8017852:	6922      	ldr	r2, [r4, #16]
 8017854:	b942      	cbnz	r2, 8017868 <__swsetup_r+0xa4>
 8017856:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801785a:	d1c5      	bne.n	80177e8 <__swsetup_r+0x24>
 801785c:	bd38      	pop	{r3, r4, r5, pc}
 801785e:	0799      	lsls	r1, r3, #30
 8017860:	bf58      	it	pl
 8017862:	6962      	ldrpl	r2, [r4, #20]
 8017864:	60a2      	str	r2, [r4, #8]
 8017866:	e7f4      	b.n	8017852 <__swsetup_r+0x8e>
 8017868:	2000      	movs	r0, #0
 801786a:	e7f7      	b.n	801785c <__swsetup_r+0x98>
 801786c:	20000068 	.word	0x20000068

08017870 <_raise_r>:
 8017870:	291f      	cmp	r1, #31
 8017872:	b538      	push	{r3, r4, r5, lr}
 8017874:	4605      	mov	r5, r0
 8017876:	460c      	mov	r4, r1
 8017878:	d904      	bls.n	8017884 <_raise_r+0x14>
 801787a:	2316      	movs	r3, #22
 801787c:	6003      	str	r3, [r0, #0]
 801787e:	f04f 30ff 	mov.w	r0, #4294967295
 8017882:	bd38      	pop	{r3, r4, r5, pc}
 8017884:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017886:	b112      	cbz	r2, 801788e <_raise_r+0x1e>
 8017888:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801788c:	b94b      	cbnz	r3, 80178a2 <_raise_r+0x32>
 801788e:	4628      	mov	r0, r5
 8017890:	f000 f830 	bl	80178f4 <_getpid_r>
 8017894:	4622      	mov	r2, r4
 8017896:	4601      	mov	r1, r0
 8017898:	4628      	mov	r0, r5
 801789a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801789e:	f000 b817 	b.w	80178d0 <_kill_r>
 80178a2:	2b01      	cmp	r3, #1
 80178a4:	d00a      	beq.n	80178bc <_raise_r+0x4c>
 80178a6:	1c59      	adds	r1, r3, #1
 80178a8:	d103      	bne.n	80178b2 <_raise_r+0x42>
 80178aa:	2316      	movs	r3, #22
 80178ac:	6003      	str	r3, [r0, #0]
 80178ae:	2001      	movs	r0, #1
 80178b0:	e7e7      	b.n	8017882 <_raise_r+0x12>
 80178b2:	2100      	movs	r1, #0
 80178b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80178b8:	4620      	mov	r0, r4
 80178ba:	4798      	blx	r3
 80178bc:	2000      	movs	r0, #0
 80178be:	e7e0      	b.n	8017882 <_raise_r+0x12>

080178c0 <raise>:
 80178c0:	4b02      	ldr	r3, [pc, #8]	@ (80178cc <raise+0xc>)
 80178c2:	4601      	mov	r1, r0
 80178c4:	6818      	ldr	r0, [r3, #0]
 80178c6:	f7ff bfd3 	b.w	8017870 <_raise_r>
 80178ca:	bf00      	nop
 80178cc:	20000068 	.word	0x20000068

080178d0 <_kill_r>:
 80178d0:	b538      	push	{r3, r4, r5, lr}
 80178d2:	4d07      	ldr	r5, [pc, #28]	@ (80178f0 <_kill_r+0x20>)
 80178d4:	2300      	movs	r3, #0
 80178d6:	4604      	mov	r4, r0
 80178d8:	4608      	mov	r0, r1
 80178da:	4611      	mov	r1, r2
 80178dc:	602b      	str	r3, [r5, #0]
 80178de:	f7f0 f8e3 	bl	8007aa8 <_kill>
 80178e2:	1c43      	adds	r3, r0, #1
 80178e4:	d102      	bne.n	80178ec <_kill_r+0x1c>
 80178e6:	682b      	ldr	r3, [r5, #0]
 80178e8:	b103      	cbz	r3, 80178ec <_kill_r+0x1c>
 80178ea:	6023      	str	r3, [r4, #0]
 80178ec:	bd38      	pop	{r3, r4, r5, pc}
 80178ee:	bf00      	nop
 80178f0:	20001dd8 	.word	0x20001dd8

080178f4 <_getpid_r>:
 80178f4:	f7f0 b8d0 	b.w	8007a98 <_getpid>

080178f8 <__swhatbuf_r>:
 80178f8:	b570      	push	{r4, r5, r6, lr}
 80178fa:	460c      	mov	r4, r1
 80178fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017900:	2900      	cmp	r1, #0
 8017902:	b096      	sub	sp, #88	@ 0x58
 8017904:	4615      	mov	r5, r2
 8017906:	461e      	mov	r6, r3
 8017908:	da0d      	bge.n	8017926 <__swhatbuf_r+0x2e>
 801790a:	89a3      	ldrh	r3, [r4, #12]
 801790c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017910:	f04f 0100 	mov.w	r1, #0
 8017914:	bf14      	ite	ne
 8017916:	2340      	movne	r3, #64	@ 0x40
 8017918:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801791c:	2000      	movs	r0, #0
 801791e:	6031      	str	r1, [r6, #0]
 8017920:	602b      	str	r3, [r5, #0]
 8017922:	b016      	add	sp, #88	@ 0x58
 8017924:	bd70      	pop	{r4, r5, r6, pc}
 8017926:	466a      	mov	r2, sp
 8017928:	f000 f848 	bl	80179bc <_fstat_r>
 801792c:	2800      	cmp	r0, #0
 801792e:	dbec      	blt.n	801790a <__swhatbuf_r+0x12>
 8017930:	9901      	ldr	r1, [sp, #4]
 8017932:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017936:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801793a:	4259      	negs	r1, r3
 801793c:	4159      	adcs	r1, r3
 801793e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017942:	e7eb      	b.n	801791c <__swhatbuf_r+0x24>

08017944 <__smakebuf_r>:
 8017944:	898b      	ldrh	r3, [r1, #12]
 8017946:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017948:	079d      	lsls	r5, r3, #30
 801794a:	4606      	mov	r6, r0
 801794c:	460c      	mov	r4, r1
 801794e:	d507      	bpl.n	8017960 <__smakebuf_r+0x1c>
 8017950:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017954:	6023      	str	r3, [r4, #0]
 8017956:	6123      	str	r3, [r4, #16]
 8017958:	2301      	movs	r3, #1
 801795a:	6163      	str	r3, [r4, #20]
 801795c:	b003      	add	sp, #12
 801795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017960:	ab01      	add	r3, sp, #4
 8017962:	466a      	mov	r2, sp
 8017964:	f7ff ffc8 	bl	80178f8 <__swhatbuf_r>
 8017968:	9f00      	ldr	r7, [sp, #0]
 801796a:	4605      	mov	r5, r0
 801796c:	4639      	mov	r1, r7
 801796e:	4630      	mov	r0, r6
 8017970:	f7fb f8c0 	bl	8012af4 <_malloc_r>
 8017974:	b948      	cbnz	r0, 801798a <__smakebuf_r+0x46>
 8017976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801797a:	059a      	lsls	r2, r3, #22
 801797c:	d4ee      	bmi.n	801795c <__smakebuf_r+0x18>
 801797e:	f023 0303 	bic.w	r3, r3, #3
 8017982:	f043 0302 	orr.w	r3, r3, #2
 8017986:	81a3      	strh	r3, [r4, #12]
 8017988:	e7e2      	b.n	8017950 <__smakebuf_r+0xc>
 801798a:	89a3      	ldrh	r3, [r4, #12]
 801798c:	6020      	str	r0, [r4, #0]
 801798e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017992:	81a3      	strh	r3, [r4, #12]
 8017994:	9b01      	ldr	r3, [sp, #4]
 8017996:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801799a:	b15b      	cbz	r3, 80179b4 <__smakebuf_r+0x70>
 801799c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80179a0:	4630      	mov	r0, r6
 80179a2:	f000 f81d 	bl	80179e0 <_isatty_r>
 80179a6:	b128      	cbz	r0, 80179b4 <__smakebuf_r+0x70>
 80179a8:	89a3      	ldrh	r3, [r4, #12]
 80179aa:	f023 0303 	bic.w	r3, r3, #3
 80179ae:	f043 0301 	orr.w	r3, r3, #1
 80179b2:	81a3      	strh	r3, [r4, #12]
 80179b4:	89a3      	ldrh	r3, [r4, #12]
 80179b6:	431d      	orrs	r5, r3
 80179b8:	81a5      	strh	r5, [r4, #12]
 80179ba:	e7cf      	b.n	801795c <__smakebuf_r+0x18>

080179bc <_fstat_r>:
 80179bc:	b538      	push	{r3, r4, r5, lr}
 80179be:	4d07      	ldr	r5, [pc, #28]	@ (80179dc <_fstat_r+0x20>)
 80179c0:	2300      	movs	r3, #0
 80179c2:	4604      	mov	r4, r0
 80179c4:	4608      	mov	r0, r1
 80179c6:	4611      	mov	r1, r2
 80179c8:	602b      	str	r3, [r5, #0]
 80179ca:	f7f0 f8cd 	bl	8007b68 <_fstat>
 80179ce:	1c43      	adds	r3, r0, #1
 80179d0:	d102      	bne.n	80179d8 <_fstat_r+0x1c>
 80179d2:	682b      	ldr	r3, [r5, #0]
 80179d4:	b103      	cbz	r3, 80179d8 <_fstat_r+0x1c>
 80179d6:	6023      	str	r3, [r4, #0]
 80179d8:	bd38      	pop	{r3, r4, r5, pc}
 80179da:	bf00      	nop
 80179dc:	20001dd8 	.word	0x20001dd8

080179e0 <_isatty_r>:
 80179e0:	b538      	push	{r3, r4, r5, lr}
 80179e2:	4d06      	ldr	r5, [pc, #24]	@ (80179fc <_isatty_r+0x1c>)
 80179e4:	2300      	movs	r3, #0
 80179e6:	4604      	mov	r4, r0
 80179e8:	4608      	mov	r0, r1
 80179ea:	602b      	str	r3, [r5, #0]
 80179ec:	f7f0 f8cc 	bl	8007b88 <_isatty>
 80179f0:	1c43      	adds	r3, r0, #1
 80179f2:	d102      	bne.n	80179fa <_isatty_r+0x1a>
 80179f4:	682b      	ldr	r3, [r5, #0]
 80179f6:	b103      	cbz	r3, 80179fa <_isatty_r+0x1a>
 80179f8:	6023      	str	r3, [r4, #0]
 80179fa:	bd38      	pop	{r3, r4, r5, pc}
 80179fc:	20001dd8 	.word	0x20001dd8

08017a00 <pow>:
 8017a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a02:	ed2d 8b02 	vpush	{d8}
 8017a06:	eeb0 8a40 	vmov.f32	s16, s0
 8017a0a:	eef0 8a60 	vmov.f32	s17, s1
 8017a0e:	ec55 4b11 	vmov	r4, r5, d1
 8017a12:	f000 fc75 	bl	8018300 <__ieee754_pow>
 8017a16:	4622      	mov	r2, r4
 8017a18:	462b      	mov	r3, r5
 8017a1a:	4620      	mov	r0, r4
 8017a1c:	4629      	mov	r1, r5
 8017a1e:	ec57 6b10 	vmov	r6, r7, d0
 8017a22:	f7e9 f8a3 	bl	8000b6c <__aeabi_dcmpun>
 8017a26:	2800      	cmp	r0, #0
 8017a28:	d13b      	bne.n	8017aa2 <pow+0xa2>
 8017a2a:	ec51 0b18 	vmov	r0, r1, d8
 8017a2e:	2200      	movs	r2, #0
 8017a30:	2300      	movs	r3, #0
 8017a32:	f7e9 f869 	bl	8000b08 <__aeabi_dcmpeq>
 8017a36:	b1b8      	cbz	r0, 8017a68 <pow+0x68>
 8017a38:	2200      	movs	r2, #0
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	4629      	mov	r1, r5
 8017a40:	f7e9 f862 	bl	8000b08 <__aeabi_dcmpeq>
 8017a44:	2800      	cmp	r0, #0
 8017a46:	d146      	bne.n	8017ad6 <pow+0xd6>
 8017a48:	ec45 4b10 	vmov	d0, r4, r5
 8017a4c:	f000 f919 	bl	8017c82 <finite>
 8017a50:	b338      	cbz	r0, 8017aa2 <pow+0xa2>
 8017a52:	2200      	movs	r2, #0
 8017a54:	2300      	movs	r3, #0
 8017a56:	4620      	mov	r0, r4
 8017a58:	4629      	mov	r1, r5
 8017a5a:	f7e9 f85f 	bl	8000b1c <__aeabi_dcmplt>
 8017a5e:	b300      	cbz	r0, 8017aa2 <pow+0xa2>
 8017a60:	f7fc f91a 	bl	8013c98 <__errno>
 8017a64:	2322      	movs	r3, #34	@ 0x22
 8017a66:	e01b      	b.n	8017aa0 <pow+0xa0>
 8017a68:	ec47 6b10 	vmov	d0, r6, r7
 8017a6c:	f000 f909 	bl	8017c82 <finite>
 8017a70:	b9e0      	cbnz	r0, 8017aac <pow+0xac>
 8017a72:	eeb0 0a48 	vmov.f32	s0, s16
 8017a76:	eef0 0a68 	vmov.f32	s1, s17
 8017a7a:	f000 f902 	bl	8017c82 <finite>
 8017a7e:	b1a8      	cbz	r0, 8017aac <pow+0xac>
 8017a80:	ec45 4b10 	vmov	d0, r4, r5
 8017a84:	f000 f8fd 	bl	8017c82 <finite>
 8017a88:	b180      	cbz	r0, 8017aac <pow+0xac>
 8017a8a:	4632      	mov	r2, r6
 8017a8c:	463b      	mov	r3, r7
 8017a8e:	4630      	mov	r0, r6
 8017a90:	4639      	mov	r1, r7
 8017a92:	f7e9 f86b 	bl	8000b6c <__aeabi_dcmpun>
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d0e2      	beq.n	8017a60 <pow+0x60>
 8017a9a:	f7fc f8fd 	bl	8013c98 <__errno>
 8017a9e:	2321      	movs	r3, #33	@ 0x21
 8017aa0:	6003      	str	r3, [r0, #0]
 8017aa2:	ecbd 8b02 	vpop	{d8}
 8017aa6:	ec47 6b10 	vmov	d0, r6, r7
 8017aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017aac:	2200      	movs	r2, #0
 8017aae:	2300      	movs	r3, #0
 8017ab0:	4630      	mov	r0, r6
 8017ab2:	4639      	mov	r1, r7
 8017ab4:	f7e9 f828 	bl	8000b08 <__aeabi_dcmpeq>
 8017ab8:	2800      	cmp	r0, #0
 8017aba:	d0f2      	beq.n	8017aa2 <pow+0xa2>
 8017abc:	eeb0 0a48 	vmov.f32	s0, s16
 8017ac0:	eef0 0a68 	vmov.f32	s1, s17
 8017ac4:	f000 f8dd 	bl	8017c82 <finite>
 8017ac8:	2800      	cmp	r0, #0
 8017aca:	d0ea      	beq.n	8017aa2 <pow+0xa2>
 8017acc:	ec45 4b10 	vmov	d0, r4, r5
 8017ad0:	f000 f8d7 	bl	8017c82 <finite>
 8017ad4:	e7c3      	b.n	8017a5e <pow+0x5e>
 8017ad6:	4f01      	ldr	r7, [pc, #4]	@ (8017adc <pow+0xdc>)
 8017ad8:	2600      	movs	r6, #0
 8017ada:	e7e2      	b.n	8017aa2 <pow+0xa2>
 8017adc:	3ff00000 	.word	0x3ff00000

08017ae0 <sqrt>:
 8017ae0:	b538      	push	{r3, r4, r5, lr}
 8017ae2:	ed2d 8b02 	vpush	{d8}
 8017ae6:	ec55 4b10 	vmov	r4, r5, d0
 8017aea:	f000 f92b 	bl	8017d44 <__ieee754_sqrt>
 8017aee:	4622      	mov	r2, r4
 8017af0:	462b      	mov	r3, r5
 8017af2:	4620      	mov	r0, r4
 8017af4:	4629      	mov	r1, r5
 8017af6:	eeb0 8a40 	vmov.f32	s16, s0
 8017afa:	eef0 8a60 	vmov.f32	s17, s1
 8017afe:	f7e9 f835 	bl	8000b6c <__aeabi_dcmpun>
 8017b02:	b990      	cbnz	r0, 8017b2a <sqrt+0x4a>
 8017b04:	2200      	movs	r2, #0
 8017b06:	2300      	movs	r3, #0
 8017b08:	4620      	mov	r0, r4
 8017b0a:	4629      	mov	r1, r5
 8017b0c:	f7e9 f806 	bl	8000b1c <__aeabi_dcmplt>
 8017b10:	b158      	cbz	r0, 8017b2a <sqrt+0x4a>
 8017b12:	f7fc f8c1 	bl	8013c98 <__errno>
 8017b16:	2321      	movs	r3, #33	@ 0x21
 8017b18:	6003      	str	r3, [r0, #0]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	4610      	mov	r0, r2
 8017b20:	4619      	mov	r1, r3
 8017b22:	f7e8 feb3 	bl	800088c <__aeabi_ddiv>
 8017b26:	ec41 0b18 	vmov	d8, r0, r1
 8017b2a:	eeb0 0a48 	vmov.f32	s0, s16
 8017b2e:	eef0 0a68 	vmov.f32	s1, s17
 8017b32:	ecbd 8b02 	vpop	{d8}
 8017b36:	bd38      	pop	{r3, r4, r5, pc}

08017b38 <cos>:
 8017b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b3a:	ec53 2b10 	vmov	r2, r3, d0
 8017b3e:	4826      	ldr	r0, [pc, #152]	@ (8017bd8 <cos+0xa0>)
 8017b40:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8017b44:	4281      	cmp	r1, r0
 8017b46:	d806      	bhi.n	8017b56 <cos+0x1e>
 8017b48:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8017bd0 <cos+0x98>
 8017b4c:	b005      	add	sp, #20
 8017b4e:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b52:	f000 ba51 	b.w	8017ff8 <__kernel_cos>
 8017b56:	4821      	ldr	r0, [pc, #132]	@ (8017bdc <cos+0xa4>)
 8017b58:	4281      	cmp	r1, r0
 8017b5a:	d908      	bls.n	8017b6e <cos+0x36>
 8017b5c:	4610      	mov	r0, r2
 8017b5e:	4619      	mov	r1, r3
 8017b60:	f7e8 fbb2 	bl	80002c8 <__aeabi_dsub>
 8017b64:	ec41 0b10 	vmov	d0, r0, r1
 8017b68:	b005      	add	sp, #20
 8017b6a:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b6e:	4668      	mov	r0, sp
 8017b70:	f001 f90a 	bl	8018d88 <__ieee754_rem_pio2>
 8017b74:	f000 0003 	and.w	r0, r0, #3
 8017b78:	2801      	cmp	r0, #1
 8017b7a:	d00b      	beq.n	8017b94 <cos+0x5c>
 8017b7c:	2802      	cmp	r0, #2
 8017b7e:	d015      	beq.n	8017bac <cos+0x74>
 8017b80:	b9d8      	cbnz	r0, 8017bba <cos+0x82>
 8017b82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017b86:	ed9d 0b00 	vldr	d0, [sp]
 8017b8a:	f000 fa35 	bl	8017ff8 <__kernel_cos>
 8017b8e:	ec51 0b10 	vmov	r0, r1, d0
 8017b92:	e7e7      	b.n	8017b64 <cos+0x2c>
 8017b94:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017b98:	ed9d 0b00 	vldr	d0, [sp]
 8017b9c:	f000 faf4 	bl	8018188 <__kernel_sin>
 8017ba0:	ec53 2b10 	vmov	r2, r3, d0
 8017ba4:	4610      	mov	r0, r2
 8017ba6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8017baa:	e7db      	b.n	8017b64 <cos+0x2c>
 8017bac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017bb0:	ed9d 0b00 	vldr	d0, [sp]
 8017bb4:	f000 fa20 	bl	8017ff8 <__kernel_cos>
 8017bb8:	e7f2      	b.n	8017ba0 <cos+0x68>
 8017bba:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017bbe:	ed9d 0b00 	vldr	d0, [sp]
 8017bc2:	2001      	movs	r0, #1
 8017bc4:	f000 fae0 	bl	8018188 <__kernel_sin>
 8017bc8:	e7e1      	b.n	8017b8e <cos+0x56>
 8017bca:	bf00      	nop
 8017bcc:	f3af 8000 	nop.w
	...
 8017bd8:	3fe921fb 	.word	0x3fe921fb
 8017bdc:	7fefffff 	.word	0x7fefffff

08017be0 <acosf>:
 8017be0:	b508      	push	{r3, lr}
 8017be2:	ed2d 8b02 	vpush	{d8}
 8017be6:	eeb0 8a40 	vmov.f32	s16, s0
 8017bea:	f001 fad1 	bl	8019190 <__ieee754_acosf>
 8017bee:	eeb4 8a48 	vcmp.f32	s16, s16
 8017bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bf6:	eef0 8a40 	vmov.f32	s17, s0
 8017bfa:	d615      	bvs.n	8017c28 <acosf+0x48>
 8017bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8017c00:	f000 f838 	bl	8017c74 <fabsf>
 8017c04:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017c08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c10:	dd0a      	ble.n	8017c28 <acosf+0x48>
 8017c12:	f7fc f841 	bl	8013c98 <__errno>
 8017c16:	ecbd 8b02 	vpop	{d8}
 8017c1a:	2321      	movs	r3, #33	@ 0x21
 8017c1c:	6003      	str	r3, [r0, #0]
 8017c1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017c22:	4804      	ldr	r0, [pc, #16]	@ (8017c34 <acosf+0x54>)
 8017c24:	f7fc b874 	b.w	8013d10 <nanf>
 8017c28:	eeb0 0a68 	vmov.f32	s0, s17
 8017c2c:	ecbd 8b02 	vpop	{d8}
 8017c30:	bd08      	pop	{r3, pc}
 8017c32:	bf00      	nop
 8017c34:	0801a318 	.word	0x0801a318

08017c38 <sqrtf>:
 8017c38:	b508      	push	{r3, lr}
 8017c3a:	ed2d 8b02 	vpush	{d8}
 8017c3e:	eeb0 8a40 	vmov.f32	s16, s0
 8017c42:	f000 f959 	bl	8017ef8 <__ieee754_sqrtf>
 8017c46:	eeb4 8a48 	vcmp.f32	s16, s16
 8017c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c4e:	d60c      	bvs.n	8017c6a <sqrtf+0x32>
 8017c50:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8017c70 <sqrtf+0x38>
 8017c54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c5c:	d505      	bpl.n	8017c6a <sqrtf+0x32>
 8017c5e:	f7fc f81b 	bl	8013c98 <__errno>
 8017c62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017c66:	2321      	movs	r3, #33	@ 0x21
 8017c68:	6003      	str	r3, [r0, #0]
 8017c6a:	ecbd 8b02 	vpop	{d8}
 8017c6e:	bd08      	pop	{r3, pc}
 8017c70:	00000000 	.word	0x00000000

08017c74 <fabsf>:
 8017c74:	ee10 3a10 	vmov	r3, s0
 8017c78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017c7c:	ee00 3a10 	vmov	s0, r3
 8017c80:	4770      	bx	lr

08017c82 <finite>:
 8017c82:	b082      	sub	sp, #8
 8017c84:	ed8d 0b00 	vstr	d0, [sp]
 8017c88:	9801      	ldr	r0, [sp, #4]
 8017c8a:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8017c8e:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8017c92:	0fc0      	lsrs	r0, r0, #31
 8017c94:	b002      	add	sp, #8
 8017c96:	4770      	bx	lr

08017c98 <fmaxf>:
 8017c98:	b508      	push	{r3, lr}
 8017c9a:	ed2d 8b02 	vpush	{d8}
 8017c9e:	eeb0 8a40 	vmov.f32	s16, s0
 8017ca2:	eef0 8a60 	vmov.f32	s17, s1
 8017ca6:	f000 f831 	bl	8017d0c <__fpclassifyf>
 8017caa:	b930      	cbnz	r0, 8017cba <fmaxf+0x22>
 8017cac:	eeb0 8a68 	vmov.f32	s16, s17
 8017cb0:	eeb0 0a48 	vmov.f32	s0, s16
 8017cb4:	ecbd 8b02 	vpop	{d8}
 8017cb8:	bd08      	pop	{r3, pc}
 8017cba:	eeb0 0a68 	vmov.f32	s0, s17
 8017cbe:	f000 f825 	bl	8017d0c <__fpclassifyf>
 8017cc2:	2800      	cmp	r0, #0
 8017cc4:	d0f4      	beq.n	8017cb0 <fmaxf+0x18>
 8017cc6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cce:	dded      	ble.n	8017cac <fmaxf+0x14>
 8017cd0:	e7ee      	b.n	8017cb0 <fmaxf+0x18>

08017cd2 <fminf>:
 8017cd2:	b508      	push	{r3, lr}
 8017cd4:	ed2d 8b02 	vpush	{d8}
 8017cd8:	eeb0 8a40 	vmov.f32	s16, s0
 8017cdc:	eef0 8a60 	vmov.f32	s17, s1
 8017ce0:	f000 f814 	bl	8017d0c <__fpclassifyf>
 8017ce4:	b930      	cbnz	r0, 8017cf4 <fminf+0x22>
 8017ce6:	eeb0 8a68 	vmov.f32	s16, s17
 8017cea:	eeb0 0a48 	vmov.f32	s0, s16
 8017cee:	ecbd 8b02 	vpop	{d8}
 8017cf2:	bd08      	pop	{r3, pc}
 8017cf4:	eeb0 0a68 	vmov.f32	s0, s17
 8017cf8:	f000 f808 	bl	8017d0c <__fpclassifyf>
 8017cfc:	2800      	cmp	r0, #0
 8017cfe:	d0f4      	beq.n	8017cea <fminf+0x18>
 8017d00:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d08:	d5ed      	bpl.n	8017ce6 <fminf+0x14>
 8017d0a:	e7ee      	b.n	8017cea <fminf+0x18>

08017d0c <__fpclassifyf>:
 8017d0c:	ee10 3a10 	vmov	r3, s0
 8017d10:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8017d14:	d00d      	beq.n	8017d32 <__fpclassifyf+0x26>
 8017d16:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8017d1a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8017d1e:	d30a      	bcc.n	8017d36 <__fpclassifyf+0x2a>
 8017d20:	4b07      	ldr	r3, [pc, #28]	@ (8017d40 <__fpclassifyf+0x34>)
 8017d22:	1e42      	subs	r2, r0, #1
 8017d24:	429a      	cmp	r2, r3
 8017d26:	d908      	bls.n	8017d3a <__fpclassifyf+0x2e>
 8017d28:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8017d2c:	4258      	negs	r0, r3
 8017d2e:	4158      	adcs	r0, r3
 8017d30:	4770      	bx	lr
 8017d32:	2002      	movs	r0, #2
 8017d34:	4770      	bx	lr
 8017d36:	2004      	movs	r0, #4
 8017d38:	4770      	bx	lr
 8017d3a:	2003      	movs	r0, #3
 8017d3c:	4770      	bx	lr
 8017d3e:	bf00      	nop
 8017d40:	007ffffe 	.word	0x007ffffe

08017d44 <__ieee754_sqrt>:
 8017d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d48:	4a68      	ldr	r2, [pc, #416]	@ (8017eec <__ieee754_sqrt+0x1a8>)
 8017d4a:	ec55 4b10 	vmov	r4, r5, d0
 8017d4e:	43aa      	bics	r2, r5
 8017d50:	462b      	mov	r3, r5
 8017d52:	4621      	mov	r1, r4
 8017d54:	d110      	bne.n	8017d78 <__ieee754_sqrt+0x34>
 8017d56:	4622      	mov	r2, r4
 8017d58:	4620      	mov	r0, r4
 8017d5a:	4629      	mov	r1, r5
 8017d5c:	f7e8 fc6c 	bl	8000638 <__aeabi_dmul>
 8017d60:	4602      	mov	r2, r0
 8017d62:	460b      	mov	r3, r1
 8017d64:	4620      	mov	r0, r4
 8017d66:	4629      	mov	r1, r5
 8017d68:	f7e8 fab0 	bl	80002cc <__adddf3>
 8017d6c:	4604      	mov	r4, r0
 8017d6e:	460d      	mov	r5, r1
 8017d70:	ec45 4b10 	vmov	d0, r4, r5
 8017d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d78:	2d00      	cmp	r5, #0
 8017d7a:	dc0e      	bgt.n	8017d9a <__ieee754_sqrt+0x56>
 8017d7c:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8017d80:	4322      	orrs	r2, r4
 8017d82:	d0f5      	beq.n	8017d70 <__ieee754_sqrt+0x2c>
 8017d84:	b19d      	cbz	r5, 8017dae <__ieee754_sqrt+0x6a>
 8017d86:	4622      	mov	r2, r4
 8017d88:	4620      	mov	r0, r4
 8017d8a:	4629      	mov	r1, r5
 8017d8c:	f7e8 fa9c 	bl	80002c8 <__aeabi_dsub>
 8017d90:	4602      	mov	r2, r0
 8017d92:	460b      	mov	r3, r1
 8017d94:	f7e8 fd7a 	bl	800088c <__aeabi_ddiv>
 8017d98:	e7e8      	b.n	8017d6c <__ieee754_sqrt+0x28>
 8017d9a:	152a      	asrs	r2, r5, #20
 8017d9c:	d115      	bne.n	8017dca <__ieee754_sqrt+0x86>
 8017d9e:	2000      	movs	r0, #0
 8017da0:	e009      	b.n	8017db6 <__ieee754_sqrt+0x72>
 8017da2:	0acb      	lsrs	r3, r1, #11
 8017da4:	3a15      	subs	r2, #21
 8017da6:	0549      	lsls	r1, r1, #21
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d0fa      	beq.n	8017da2 <__ieee754_sqrt+0x5e>
 8017dac:	e7f7      	b.n	8017d9e <__ieee754_sqrt+0x5a>
 8017dae:	462a      	mov	r2, r5
 8017db0:	e7fa      	b.n	8017da8 <__ieee754_sqrt+0x64>
 8017db2:	005b      	lsls	r3, r3, #1
 8017db4:	3001      	adds	r0, #1
 8017db6:	02dc      	lsls	r4, r3, #11
 8017db8:	d5fb      	bpl.n	8017db2 <__ieee754_sqrt+0x6e>
 8017dba:	1e44      	subs	r4, r0, #1
 8017dbc:	1b12      	subs	r2, r2, r4
 8017dbe:	f1c0 0420 	rsb	r4, r0, #32
 8017dc2:	fa21 f404 	lsr.w	r4, r1, r4
 8017dc6:	4323      	orrs	r3, r4
 8017dc8:	4081      	lsls	r1, r0
 8017dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017dce:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8017dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017dd6:	07d2      	lsls	r2, r2, #31
 8017dd8:	bf5c      	itt	pl
 8017dda:	005b      	lslpl	r3, r3, #1
 8017ddc:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8017de0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8017de4:	bf58      	it	pl
 8017de6:	0049      	lslpl	r1, r1, #1
 8017de8:	2600      	movs	r6, #0
 8017dea:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8017dee:	106d      	asrs	r5, r5, #1
 8017df0:	0049      	lsls	r1, r1, #1
 8017df2:	2016      	movs	r0, #22
 8017df4:	4632      	mov	r2, r6
 8017df6:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8017dfa:	1917      	adds	r7, r2, r4
 8017dfc:	429f      	cmp	r7, r3
 8017dfe:	bfde      	ittt	le
 8017e00:	193a      	addle	r2, r7, r4
 8017e02:	1bdb      	suble	r3, r3, r7
 8017e04:	1936      	addle	r6, r6, r4
 8017e06:	0fcf      	lsrs	r7, r1, #31
 8017e08:	3801      	subs	r0, #1
 8017e0a:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8017e0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017e12:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8017e16:	d1f0      	bne.n	8017dfa <__ieee754_sqrt+0xb6>
 8017e18:	4604      	mov	r4, r0
 8017e1a:	2720      	movs	r7, #32
 8017e1c:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8017e20:	429a      	cmp	r2, r3
 8017e22:	eb00 0e0c 	add.w	lr, r0, ip
 8017e26:	db02      	blt.n	8017e2e <__ieee754_sqrt+0xea>
 8017e28:	d113      	bne.n	8017e52 <__ieee754_sqrt+0x10e>
 8017e2a:	458e      	cmp	lr, r1
 8017e2c:	d811      	bhi.n	8017e52 <__ieee754_sqrt+0x10e>
 8017e2e:	f1be 0f00 	cmp.w	lr, #0
 8017e32:	eb0e 000c 	add.w	r0, lr, ip
 8017e36:	da42      	bge.n	8017ebe <__ieee754_sqrt+0x17a>
 8017e38:	2800      	cmp	r0, #0
 8017e3a:	db40      	blt.n	8017ebe <__ieee754_sqrt+0x17a>
 8017e3c:	f102 0801 	add.w	r8, r2, #1
 8017e40:	1a9b      	subs	r3, r3, r2
 8017e42:	458e      	cmp	lr, r1
 8017e44:	bf88      	it	hi
 8017e46:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8017e4a:	eba1 010e 	sub.w	r1, r1, lr
 8017e4e:	4464      	add	r4, ip
 8017e50:	4642      	mov	r2, r8
 8017e52:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8017e56:	3f01      	subs	r7, #1
 8017e58:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8017e5c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017e60:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8017e64:	d1dc      	bne.n	8017e20 <__ieee754_sqrt+0xdc>
 8017e66:	4319      	orrs	r1, r3
 8017e68:	d01b      	beq.n	8017ea2 <__ieee754_sqrt+0x15e>
 8017e6a:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8017ef0 <__ieee754_sqrt+0x1ac>
 8017e6e:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8017ef4 <__ieee754_sqrt+0x1b0>
 8017e72:	e9da 0100 	ldrd	r0, r1, [sl]
 8017e76:	e9db 2300 	ldrd	r2, r3, [fp]
 8017e7a:	f7e8 fa25 	bl	80002c8 <__aeabi_dsub>
 8017e7e:	e9da 8900 	ldrd	r8, r9, [sl]
 8017e82:	4602      	mov	r2, r0
 8017e84:	460b      	mov	r3, r1
 8017e86:	4640      	mov	r0, r8
 8017e88:	4649      	mov	r1, r9
 8017e8a:	f7e8 fe51 	bl	8000b30 <__aeabi_dcmple>
 8017e8e:	b140      	cbz	r0, 8017ea2 <__ieee754_sqrt+0x15e>
 8017e90:	f1b4 3fff 	cmp.w	r4, #4294967295
 8017e94:	e9da 0100 	ldrd	r0, r1, [sl]
 8017e98:	e9db 2300 	ldrd	r2, r3, [fp]
 8017e9c:	d111      	bne.n	8017ec2 <__ieee754_sqrt+0x17e>
 8017e9e:	3601      	adds	r6, #1
 8017ea0:	463c      	mov	r4, r7
 8017ea2:	1072      	asrs	r2, r6, #1
 8017ea4:	0863      	lsrs	r3, r4, #1
 8017ea6:	07f1      	lsls	r1, r6, #31
 8017ea8:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8017eac:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8017eb0:	bf48      	it	mi
 8017eb2:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8017eb6:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8017eba:	4618      	mov	r0, r3
 8017ebc:	e756      	b.n	8017d6c <__ieee754_sqrt+0x28>
 8017ebe:	4690      	mov	r8, r2
 8017ec0:	e7be      	b.n	8017e40 <__ieee754_sqrt+0xfc>
 8017ec2:	f7e8 fa03 	bl	80002cc <__adddf3>
 8017ec6:	e9da 8900 	ldrd	r8, r9, [sl]
 8017eca:	4602      	mov	r2, r0
 8017ecc:	460b      	mov	r3, r1
 8017ece:	4640      	mov	r0, r8
 8017ed0:	4649      	mov	r1, r9
 8017ed2:	f7e8 fe23 	bl	8000b1c <__aeabi_dcmplt>
 8017ed6:	b120      	cbz	r0, 8017ee2 <__ieee754_sqrt+0x19e>
 8017ed8:	1ca0      	adds	r0, r4, #2
 8017eda:	bf08      	it	eq
 8017edc:	3601      	addeq	r6, #1
 8017ede:	3402      	adds	r4, #2
 8017ee0:	e7df      	b.n	8017ea2 <__ieee754_sqrt+0x15e>
 8017ee2:	1c63      	adds	r3, r4, #1
 8017ee4:	f023 0401 	bic.w	r4, r3, #1
 8017ee8:	e7db      	b.n	8017ea2 <__ieee754_sqrt+0x15e>
 8017eea:	bf00      	nop
 8017eec:	7ff00000 	.word	0x7ff00000
 8017ef0:	20000230 	.word	0x20000230
 8017ef4:	20000228 	.word	0x20000228

08017ef8 <__ieee754_sqrtf>:
 8017ef8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017efc:	4770      	bx	lr
	...

08017f00 <floor>:
 8017f00:	ec51 0b10 	vmov	r0, r1, d0
 8017f04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f0c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8017f10:	2e13      	cmp	r6, #19
 8017f12:	460c      	mov	r4, r1
 8017f14:	4605      	mov	r5, r0
 8017f16:	4680      	mov	r8, r0
 8017f18:	dc34      	bgt.n	8017f84 <floor+0x84>
 8017f1a:	2e00      	cmp	r6, #0
 8017f1c:	da17      	bge.n	8017f4e <floor+0x4e>
 8017f1e:	a332      	add	r3, pc, #200	@ (adr r3, 8017fe8 <floor+0xe8>)
 8017f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f24:	f7e8 f9d2 	bl	80002cc <__adddf3>
 8017f28:	2200      	movs	r2, #0
 8017f2a:	2300      	movs	r3, #0
 8017f2c:	f7e8 fe14 	bl	8000b58 <__aeabi_dcmpgt>
 8017f30:	b150      	cbz	r0, 8017f48 <floor+0x48>
 8017f32:	2c00      	cmp	r4, #0
 8017f34:	da55      	bge.n	8017fe2 <floor+0xe2>
 8017f36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8017f3a:	432c      	orrs	r4, r5
 8017f3c:	2500      	movs	r5, #0
 8017f3e:	42ac      	cmp	r4, r5
 8017f40:	4c2b      	ldr	r4, [pc, #172]	@ (8017ff0 <floor+0xf0>)
 8017f42:	bf08      	it	eq
 8017f44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8017f48:	4621      	mov	r1, r4
 8017f4a:	4628      	mov	r0, r5
 8017f4c:	e023      	b.n	8017f96 <floor+0x96>
 8017f4e:	4f29      	ldr	r7, [pc, #164]	@ (8017ff4 <floor+0xf4>)
 8017f50:	4137      	asrs	r7, r6
 8017f52:	ea01 0307 	and.w	r3, r1, r7
 8017f56:	4303      	orrs	r3, r0
 8017f58:	d01d      	beq.n	8017f96 <floor+0x96>
 8017f5a:	a323      	add	r3, pc, #140	@ (adr r3, 8017fe8 <floor+0xe8>)
 8017f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f60:	f7e8 f9b4 	bl	80002cc <__adddf3>
 8017f64:	2200      	movs	r2, #0
 8017f66:	2300      	movs	r3, #0
 8017f68:	f7e8 fdf6 	bl	8000b58 <__aeabi_dcmpgt>
 8017f6c:	2800      	cmp	r0, #0
 8017f6e:	d0eb      	beq.n	8017f48 <floor+0x48>
 8017f70:	2c00      	cmp	r4, #0
 8017f72:	bfbe      	ittt	lt
 8017f74:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8017f78:	4133      	asrlt	r3, r6
 8017f7a:	18e4      	addlt	r4, r4, r3
 8017f7c:	ea24 0407 	bic.w	r4, r4, r7
 8017f80:	2500      	movs	r5, #0
 8017f82:	e7e1      	b.n	8017f48 <floor+0x48>
 8017f84:	2e33      	cmp	r6, #51	@ 0x33
 8017f86:	dd0a      	ble.n	8017f9e <floor+0x9e>
 8017f88:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8017f8c:	d103      	bne.n	8017f96 <floor+0x96>
 8017f8e:	4602      	mov	r2, r0
 8017f90:	460b      	mov	r3, r1
 8017f92:	f7e8 f99b 	bl	80002cc <__adddf3>
 8017f96:	ec41 0b10 	vmov	d0, r0, r1
 8017f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f9e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8017fa2:	f04f 37ff 	mov.w	r7, #4294967295
 8017fa6:	40df      	lsrs	r7, r3
 8017fa8:	4207      	tst	r7, r0
 8017faa:	d0f4      	beq.n	8017f96 <floor+0x96>
 8017fac:	a30e      	add	r3, pc, #56	@ (adr r3, 8017fe8 <floor+0xe8>)
 8017fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fb2:	f7e8 f98b 	bl	80002cc <__adddf3>
 8017fb6:	2200      	movs	r2, #0
 8017fb8:	2300      	movs	r3, #0
 8017fba:	f7e8 fdcd 	bl	8000b58 <__aeabi_dcmpgt>
 8017fbe:	2800      	cmp	r0, #0
 8017fc0:	d0c2      	beq.n	8017f48 <floor+0x48>
 8017fc2:	2c00      	cmp	r4, #0
 8017fc4:	da0a      	bge.n	8017fdc <floor+0xdc>
 8017fc6:	2e14      	cmp	r6, #20
 8017fc8:	d101      	bne.n	8017fce <floor+0xce>
 8017fca:	3401      	adds	r4, #1
 8017fcc:	e006      	b.n	8017fdc <floor+0xdc>
 8017fce:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8017fd2:	2301      	movs	r3, #1
 8017fd4:	40b3      	lsls	r3, r6
 8017fd6:	441d      	add	r5, r3
 8017fd8:	4545      	cmp	r5, r8
 8017fda:	d3f6      	bcc.n	8017fca <floor+0xca>
 8017fdc:	ea25 0507 	bic.w	r5, r5, r7
 8017fe0:	e7b2      	b.n	8017f48 <floor+0x48>
 8017fe2:	2500      	movs	r5, #0
 8017fe4:	462c      	mov	r4, r5
 8017fe6:	e7af      	b.n	8017f48 <floor+0x48>
 8017fe8:	8800759c 	.word	0x8800759c
 8017fec:	7e37e43c 	.word	0x7e37e43c
 8017ff0:	bff00000 	.word	0xbff00000
 8017ff4:	000fffff 	.word	0x000fffff

08017ff8 <__kernel_cos>:
 8017ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ffc:	ec57 6b10 	vmov	r6, r7, d0
 8018000:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8018004:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8018008:	ed8d 1b00 	vstr	d1, [sp]
 801800c:	d206      	bcs.n	801801c <__kernel_cos+0x24>
 801800e:	4630      	mov	r0, r6
 8018010:	4639      	mov	r1, r7
 8018012:	f7e8 fdc1 	bl	8000b98 <__aeabi_d2iz>
 8018016:	2800      	cmp	r0, #0
 8018018:	f000 8088 	beq.w	801812c <__kernel_cos+0x134>
 801801c:	4632      	mov	r2, r6
 801801e:	463b      	mov	r3, r7
 8018020:	4630      	mov	r0, r6
 8018022:	4639      	mov	r1, r7
 8018024:	f7e8 fb08 	bl	8000638 <__aeabi_dmul>
 8018028:	4b51      	ldr	r3, [pc, #324]	@ (8018170 <__kernel_cos+0x178>)
 801802a:	2200      	movs	r2, #0
 801802c:	4604      	mov	r4, r0
 801802e:	460d      	mov	r5, r1
 8018030:	f7e8 fb02 	bl	8000638 <__aeabi_dmul>
 8018034:	a340      	add	r3, pc, #256	@ (adr r3, 8018138 <__kernel_cos+0x140>)
 8018036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801803a:	4682      	mov	sl, r0
 801803c:	468b      	mov	fp, r1
 801803e:	4620      	mov	r0, r4
 8018040:	4629      	mov	r1, r5
 8018042:	f7e8 faf9 	bl	8000638 <__aeabi_dmul>
 8018046:	a33e      	add	r3, pc, #248	@ (adr r3, 8018140 <__kernel_cos+0x148>)
 8018048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801804c:	f7e8 f93e 	bl	80002cc <__adddf3>
 8018050:	4622      	mov	r2, r4
 8018052:	462b      	mov	r3, r5
 8018054:	f7e8 faf0 	bl	8000638 <__aeabi_dmul>
 8018058:	a33b      	add	r3, pc, #236	@ (adr r3, 8018148 <__kernel_cos+0x150>)
 801805a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801805e:	f7e8 f933 	bl	80002c8 <__aeabi_dsub>
 8018062:	4622      	mov	r2, r4
 8018064:	462b      	mov	r3, r5
 8018066:	f7e8 fae7 	bl	8000638 <__aeabi_dmul>
 801806a:	a339      	add	r3, pc, #228	@ (adr r3, 8018150 <__kernel_cos+0x158>)
 801806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018070:	f7e8 f92c 	bl	80002cc <__adddf3>
 8018074:	4622      	mov	r2, r4
 8018076:	462b      	mov	r3, r5
 8018078:	f7e8 fade 	bl	8000638 <__aeabi_dmul>
 801807c:	a336      	add	r3, pc, #216	@ (adr r3, 8018158 <__kernel_cos+0x160>)
 801807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018082:	f7e8 f921 	bl	80002c8 <__aeabi_dsub>
 8018086:	4622      	mov	r2, r4
 8018088:	462b      	mov	r3, r5
 801808a:	f7e8 fad5 	bl	8000638 <__aeabi_dmul>
 801808e:	a334      	add	r3, pc, #208	@ (adr r3, 8018160 <__kernel_cos+0x168>)
 8018090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018094:	f7e8 f91a 	bl	80002cc <__adddf3>
 8018098:	4622      	mov	r2, r4
 801809a:	462b      	mov	r3, r5
 801809c:	f7e8 facc 	bl	8000638 <__aeabi_dmul>
 80180a0:	4622      	mov	r2, r4
 80180a2:	462b      	mov	r3, r5
 80180a4:	f7e8 fac8 	bl	8000638 <__aeabi_dmul>
 80180a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80180ac:	4604      	mov	r4, r0
 80180ae:	460d      	mov	r5, r1
 80180b0:	4630      	mov	r0, r6
 80180b2:	4639      	mov	r1, r7
 80180b4:	f7e8 fac0 	bl	8000638 <__aeabi_dmul>
 80180b8:	460b      	mov	r3, r1
 80180ba:	4602      	mov	r2, r0
 80180bc:	4629      	mov	r1, r5
 80180be:	4620      	mov	r0, r4
 80180c0:	f7e8 f902 	bl	80002c8 <__aeabi_dsub>
 80180c4:	4b2b      	ldr	r3, [pc, #172]	@ (8018174 <__kernel_cos+0x17c>)
 80180c6:	4598      	cmp	r8, r3
 80180c8:	4606      	mov	r6, r0
 80180ca:	460f      	mov	r7, r1
 80180cc:	d810      	bhi.n	80180f0 <__kernel_cos+0xf8>
 80180ce:	4602      	mov	r2, r0
 80180d0:	460b      	mov	r3, r1
 80180d2:	4650      	mov	r0, sl
 80180d4:	4659      	mov	r1, fp
 80180d6:	f7e8 f8f7 	bl	80002c8 <__aeabi_dsub>
 80180da:	460b      	mov	r3, r1
 80180dc:	4926      	ldr	r1, [pc, #152]	@ (8018178 <__kernel_cos+0x180>)
 80180de:	4602      	mov	r2, r0
 80180e0:	2000      	movs	r0, #0
 80180e2:	f7e8 f8f1 	bl	80002c8 <__aeabi_dsub>
 80180e6:	ec41 0b10 	vmov	d0, r0, r1
 80180ea:	b003      	add	sp, #12
 80180ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180f0:	4b22      	ldr	r3, [pc, #136]	@ (801817c <__kernel_cos+0x184>)
 80180f2:	4921      	ldr	r1, [pc, #132]	@ (8018178 <__kernel_cos+0x180>)
 80180f4:	4598      	cmp	r8, r3
 80180f6:	bf8c      	ite	hi
 80180f8:	4d21      	ldrhi	r5, [pc, #132]	@ (8018180 <__kernel_cos+0x188>)
 80180fa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80180fe:	2400      	movs	r4, #0
 8018100:	4622      	mov	r2, r4
 8018102:	462b      	mov	r3, r5
 8018104:	2000      	movs	r0, #0
 8018106:	f7e8 f8df 	bl	80002c8 <__aeabi_dsub>
 801810a:	4622      	mov	r2, r4
 801810c:	4680      	mov	r8, r0
 801810e:	4689      	mov	r9, r1
 8018110:	462b      	mov	r3, r5
 8018112:	4650      	mov	r0, sl
 8018114:	4659      	mov	r1, fp
 8018116:	f7e8 f8d7 	bl	80002c8 <__aeabi_dsub>
 801811a:	4632      	mov	r2, r6
 801811c:	463b      	mov	r3, r7
 801811e:	f7e8 f8d3 	bl	80002c8 <__aeabi_dsub>
 8018122:	4602      	mov	r2, r0
 8018124:	460b      	mov	r3, r1
 8018126:	4640      	mov	r0, r8
 8018128:	4649      	mov	r1, r9
 801812a:	e7da      	b.n	80180e2 <__kernel_cos+0xea>
 801812c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8018168 <__kernel_cos+0x170>
 8018130:	e7db      	b.n	80180ea <__kernel_cos+0xf2>
 8018132:	bf00      	nop
 8018134:	f3af 8000 	nop.w
 8018138:	be8838d4 	.word	0xbe8838d4
 801813c:	bda8fae9 	.word	0xbda8fae9
 8018140:	bdb4b1c4 	.word	0xbdb4b1c4
 8018144:	3e21ee9e 	.word	0x3e21ee9e
 8018148:	809c52ad 	.word	0x809c52ad
 801814c:	3e927e4f 	.word	0x3e927e4f
 8018150:	19cb1590 	.word	0x19cb1590
 8018154:	3efa01a0 	.word	0x3efa01a0
 8018158:	16c15177 	.word	0x16c15177
 801815c:	3f56c16c 	.word	0x3f56c16c
 8018160:	5555554c 	.word	0x5555554c
 8018164:	3fa55555 	.word	0x3fa55555
 8018168:	00000000 	.word	0x00000000
 801816c:	3ff00000 	.word	0x3ff00000
 8018170:	3fe00000 	.word	0x3fe00000
 8018174:	3fd33332 	.word	0x3fd33332
 8018178:	3ff00000 	.word	0x3ff00000
 801817c:	3fe90000 	.word	0x3fe90000
 8018180:	3fd20000 	.word	0x3fd20000
 8018184:	00000000 	.word	0x00000000

08018188 <__kernel_sin>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	ec55 4b10 	vmov	r4, r5, d0
 8018190:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8018194:	b085      	sub	sp, #20
 8018196:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801819a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801819e:	4680      	mov	r8, r0
 80181a0:	d205      	bcs.n	80181ae <__kernel_sin+0x26>
 80181a2:	4620      	mov	r0, r4
 80181a4:	4629      	mov	r1, r5
 80181a6:	f7e8 fcf7 	bl	8000b98 <__aeabi_d2iz>
 80181aa:	2800      	cmp	r0, #0
 80181ac:	d052      	beq.n	8018254 <__kernel_sin+0xcc>
 80181ae:	4622      	mov	r2, r4
 80181b0:	462b      	mov	r3, r5
 80181b2:	4620      	mov	r0, r4
 80181b4:	4629      	mov	r1, r5
 80181b6:	f7e8 fa3f 	bl	8000638 <__aeabi_dmul>
 80181ba:	4682      	mov	sl, r0
 80181bc:	468b      	mov	fp, r1
 80181be:	4602      	mov	r2, r0
 80181c0:	460b      	mov	r3, r1
 80181c2:	4620      	mov	r0, r4
 80181c4:	4629      	mov	r1, r5
 80181c6:	f7e8 fa37 	bl	8000638 <__aeabi_dmul>
 80181ca:	a342      	add	r3, pc, #264	@ (adr r3, 80182d4 <__kernel_sin+0x14c>)
 80181cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181d0:	e9cd 0100 	strd	r0, r1, [sp]
 80181d4:	4650      	mov	r0, sl
 80181d6:	4659      	mov	r1, fp
 80181d8:	f7e8 fa2e 	bl	8000638 <__aeabi_dmul>
 80181dc:	a33f      	add	r3, pc, #252	@ (adr r3, 80182dc <__kernel_sin+0x154>)
 80181de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e2:	f7e8 f871 	bl	80002c8 <__aeabi_dsub>
 80181e6:	4652      	mov	r2, sl
 80181e8:	465b      	mov	r3, fp
 80181ea:	f7e8 fa25 	bl	8000638 <__aeabi_dmul>
 80181ee:	a33d      	add	r3, pc, #244	@ (adr r3, 80182e4 <__kernel_sin+0x15c>)
 80181f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181f4:	f7e8 f86a 	bl	80002cc <__adddf3>
 80181f8:	4652      	mov	r2, sl
 80181fa:	465b      	mov	r3, fp
 80181fc:	f7e8 fa1c 	bl	8000638 <__aeabi_dmul>
 8018200:	a33a      	add	r3, pc, #232	@ (adr r3, 80182ec <__kernel_sin+0x164>)
 8018202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018206:	f7e8 f85f 	bl	80002c8 <__aeabi_dsub>
 801820a:	4652      	mov	r2, sl
 801820c:	465b      	mov	r3, fp
 801820e:	f7e8 fa13 	bl	8000638 <__aeabi_dmul>
 8018212:	a338      	add	r3, pc, #224	@ (adr r3, 80182f4 <__kernel_sin+0x16c>)
 8018214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018218:	f7e8 f858 	bl	80002cc <__adddf3>
 801821c:	4606      	mov	r6, r0
 801821e:	460f      	mov	r7, r1
 8018220:	f1b8 0f00 	cmp.w	r8, #0
 8018224:	d11b      	bne.n	801825e <__kernel_sin+0xd6>
 8018226:	4602      	mov	r2, r0
 8018228:	460b      	mov	r3, r1
 801822a:	4650      	mov	r0, sl
 801822c:	4659      	mov	r1, fp
 801822e:	f7e8 fa03 	bl	8000638 <__aeabi_dmul>
 8018232:	a325      	add	r3, pc, #148	@ (adr r3, 80182c8 <__kernel_sin+0x140>)
 8018234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018238:	f7e8 f846 	bl	80002c8 <__aeabi_dsub>
 801823c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018240:	f7e8 f9fa 	bl	8000638 <__aeabi_dmul>
 8018244:	4602      	mov	r2, r0
 8018246:	460b      	mov	r3, r1
 8018248:	4620      	mov	r0, r4
 801824a:	4629      	mov	r1, r5
 801824c:	f7e8 f83e 	bl	80002cc <__adddf3>
 8018250:	4604      	mov	r4, r0
 8018252:	460d      	mov	r5, r1
 8018254:	ec45 4b10 	vmov	d0, r4, r5
 8018258:	b005      	add	sp, #20
 801825a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801825e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018262:	4b1b      	ldr	r3, [pc, #108]	@ (80182d0 <__kernel_sin+0x148>)
 8018264:	2200      	movs	r2, #0
 8018266:	f7e8 f9e7 	bl	8000638 <__aeabi_dmul>
 801826a:	4632      	mov	r2, r6
 801826c:	4680      	mov	r8, r0
 801826e:	4689      	mov	r9, r1
 8018270:	463b      	mov	r3, r7
 8018272:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018276:	f7e8 f9df 	bl	8000638 <__aeabi_dmul>
 801827a:	4602      	mov	r2, r0
 801827c:	460b      	mov	r3, r1
 801827e:	4640      	mov	r0, r8
 8018280:	4649      	mov	r1, r9
 8018282:	f7e8 f821 	bl	80002c8 <__aeabi_dsub>
 8018286:	4652      	mov	r2, sl
 8018288:	465b      	mov	r3, fp
 801828a:	f7e8 f9d5 	bl	8000638 <__aeabi_dmul>
 801828e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018292:	f7e8 f819 	bl	80002c8 <__aeabi_dsub>
 8018296:	a30c      	add	r3, pc, #48	@ (adr r3, 80182c8 <__kernel_sin+0x140>)
 8018298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801829c:	4606      	mov	r6, r0
 801829e:	460f      	mov	r7, r1
 80182a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80182a4:	f7e8 f9c8 	bl	8000638 <__aeabi_dmul>
 80182a8:	4602      	mov	r2, r0
 80182aa:	460b      	mov	r3, r1
 80182ac:	4630      	mov	r0, r6
 80182ae:	4639      	mov	r1, r7
 80182b0:	f7e8 f80c 	bl	80002cc <__adddf3>
 80182b4:	4602      	mov	r2, r0
 80182b6:	460b      	mov	r3, r1
 80182b8:	4620      	mov	r0, r4
 80182ba:	4629      	mov	r1, r5
 80182bc:	f7e8 f804 	bl	80002c8 <__aeabi_dsub>
 80182c0:	e7c6      	b.n	8018250 <__kernel_sin+0xc8>
 80182c2:	bf00      	nop
 80182c4:	f3af 8000 	nop.w
 80182c8:	55555549 	.word	0x55555549
 80182cc:	3fc55555 	.word	0x3fc55555
 80182d0:	3fe00000 	.word	0x3fe00000
 80182d4:	5acfd57c 	.word	0x5acfd57c
 80182d8:	3de5d93a 	.word	0x3de5d93a
 80182dc:	8a2b9ceb 	.word	0x8a2b9ceb
 80182e0:	3e5ae5e6 	.word	0x3e5ae5e6
 80182e4:	57b1fe7d 	.word	0x57b1fe7d
 80182e8:	3ec71de3 	.word	0x3ec71de3
 80182ec:	19c161d5 	.word	0x19c161d5
 80182f0:	3f2a01a0 	.word	0x3f2a01a0
 80182f4:	1110f8a6 	.word	0x1110f8a6
 80182f8:	3f811111 	.word	0x3f811111
 80182fc:	00000000 	.word	0x00000000

08018300 <__ieee754_pow>:
 8018300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018304:	b091      	sub	sp, #68	@ 0x44
 8018306:	ed8d 1b00 	vstr	d1, [sp]
 801830a:	e9dd 1900 	ldrd	r1, r9, [sp]
 801830e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8018312:	ea5a 0001 	orrs.w	r0, sl, r1
 8018316:	ec57 6b10 	vmov	r6, r7, d0
 801831a:	d113      	bne.n	8018344 <__ieee754_pow+0x44>
 801831c:	19b3      	adds	r3, r6, r6
 801831e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8018322:	4152      	adcs	r2, r2
 8018324:	4298      	cmp	r0, r3
 8018326:	4b98      	ldr	r3, [pc, #608]	@ (8018588 <__ieee754_pow+0x288>)
 8018328:	4193      	sbcs	r3, r2
 801832a:	f080 84ea 	bcs.w	8018d02 <__ieee754_pow+0xa02>
 801832e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018332:	4630      	mov	r0, r6
 8018334:	4639      	mov	r1, r7
 8018336:	f7e7 ffc9 	bl	80002cc <__adddf3>
 801833a:	ec41 0b10 	vmov	d0, r0, r1
 801833e:	b011      	add	sp, #68	@ 0x44
 8018340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018344:	4a91      	ldr	r2, [pc, #580]	@ (801858c <__ieee754_pow+0x28c>)
 8018346:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 801834a:	4590      	cmp	r8, r2
 801834c:	463d      	mov	r5, r7
 801834e:	4633      	mov	r3, r6
 8018350:	d806      	bhi.n	8018360 <__ieee754_pow+0x60>
 8018352:	d101      	bne.n	8018358 <__ieee754_pow+0x58>
 8018354:	2e00      	cmp	r6, #0
 8018356:	d1ea      	bne.n	801832e <__ieee754_pow+0x2e>
 8018358:	4592      	cmp	sl, r2
 801835a:	d801      	bhi.n	8018360 <__ieee754_pow+0x60>
 801835c:	d10e      	bne.n	801837c <__ieee754_pow+0x7c>
 801835e:	b169      	cbz	r1, 801837c <__ieee754_pow+0x7c>
 8018360:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8018364:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8018368:	431d      	orrs	r5, r3
 801836a:	d1e0      	bne.n	801832e <__ieee754_pow+0x2e>
 801836c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018370:	18db      	adds	r3, r3, r3
 8018372:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8018376:	4152      	adcs	r2, r2
 8018378:	429d      	cmp	r5, r3
 801837a:	e7d4      	b.n	8018326 <__ieee754_pow+0x26>
 801837c:	2d00      	cmp	r5, #0
 801837e:	46c3      	mov	fp, r8
 8018380:	da3a      	bge.n	80183f8 <__ieee754_pow+0xf8>
 8018382:	4a83      	ldr	r2, [pc, #524]	@ (8018590 <__ieee754_pow+0x290>)
 8018384:	4592      	cmp	sl, r2
 8018386:	d84d      	bhi.n	8018424 <__ieee754_pow+0x124>
 8018388:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 801838c:	4592      	cmp	sl, r2
 801838e:	f240 84c7 	bls.w	8018d20 <__ieee754_pow+0xa20>
 8018392:	ea4f 522a 	mov.w	r2, sl, asr #20
 8018396:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 801839a:	2a14      	cmp	r2, #20
 801839c:	dd0f      	ble.n	80183be <__ieee754_pow+0xbe>
 801839e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80183a2:	fa21 f402 	lsr.w	r4, r1, r2
 80183a6:	fa04 f202 	lsl.w	r2, r4, r2
 80183aa:	428a      	cmp	r2, r1
 80183ac:	f040 84b8 	bne.w	8018d20 <__ieee754_pow+0xa20>
 80183b0:	f004 0401 	and.w	r4, r4, #1
 80183b4:	f1c4 0402 	rsb	r4, r4, #2
 80183b8:	2900      	cmp	r1, #0
 80183ba:	d158      	bne.n	801846e <__ieee754_pow+0x16e>
 80183bc:	e00e      	b.n	80183dc <__ieee754_pow+0xdc>
 80183be:	2900      	cmp	r1, #0
 80183c0:	d154      	bne.n	801846c <__ieee754_pow+0x16c>
 80183c2:	f1c2 0214 	rsb	r2, r2, #20
 80183c6:	fa4a f402 	asr.w	r4, sl, r2
 80183ca:	fa04 f202 	lsl.w	r2, r4, r2
 80183ce:	4552      	cmp	r2, sl
 80183d0:	f040 84a3 	bne.w	8018d1a <__ieee754_pow+0xa1a>
 80183d4:	f004 0401 	and.w	r4, r4, #1
 80183d8:	f1c4 0402 	rsb	r4, r4, #2
 80183dc:	4a6d      	ldr	r2, [pc, #436]	@ (8018594 <__ieee754_pow+0x294>)
 80183de:	4592      	cmp	sl, r2
 80183e0:	d12e      	bne.n	8018440 <__ieee754_pow+0x140>
 80183e2:	f1b9 0f00 	cmp.w	r9, #0
 80183e6:	f280 8494 	bge.w	8018d12 <__ieee754_pow+0xa12>
 80183ea:	496a      	ldr	r1, [pc, #424]	@ (8018594 <__ieee754_pow+0x294>)
 80183ec:	4632      	mov	r2, r6
 80183ee:	463b      	mov	r3, r7
 80183f0:	2000      	movs	r0, #0
 80183f2:	f7e8 fa4b 	bl	800088c <__aeabi_ddiv>
 80183f6:	e7a0      	b.n	801833a <__ieee754_pow+0x3a>
 80183f8:	2400      	movs	r4, #0
 80183fa:	bbc1      	cbnz	r1, 801846e <__ieee754_pow+0x16e>
 80183fc:	4a63      	ldr	r2, [pc, #396]	@ (801858c <__ieee754_pow+0x28c>)
 80183fe:	4592      	cmp	sl, r2
 8018400:	d1ec      	bne.n	80183dc <__ieee754_pow+0xdc>
 8018402:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8018406:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801840a:	431a      	orrs	r2, r3
 801840c:	f000 8479 	beq.w	8018d02 <__ieee754_pow+0xa02>
 8018410:	4b61      	ldr	r3, [pc, #388]	@ (8018598 <__ieee754_pow+0x298>)
 8018412:	4598      	cmp	r8, r3
 8018414:	d908      	bls.n	8018428 <__ieee754_pow+0x128>
 8018416:	f1b9 0f00 	cmp.w	r9, #0
 801841a:	f2c0 8476 	blt.w	8018d0a <__ieee754_pow+0xa0a>
 801841e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018422:	e78a      	b.n	801833a <__ieee754_pow+0x3a>
 8018424:	2402      	movs	r4, #2
 8018426:	e7e8      	b.n	80183fa <__ieee754_pow+0xfa>
 8018428:	f1b9 0f00 	cmp.w	r9, #0
 801842c:	f04f 0000 	mov.w	r0, #0
 8018430:	f04f 0100 	mov.w	r1, #0
 8018434:	da81      	bge.n	801833a <__ieee754_pow+0x3a>
 8018436:	e9dd 0300 	ldrd	r0, r3, [sp]
 801843a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801843e:	e77c      	b.n	801833a <__ieee754_pow+0x3a>
 8018440:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8018444:	d106      	bne.n	8018454 <__ieee754_pow+0x154>
 8018446:	4632      	mov	r2, r6
 8018448:	463b      	mov	r3, r7
 801844a:	4630      	mov	r0, r6
 801844c:	4639      	mov	r1, r7
 801844e:	f7e8 f8f3 	bl	8000638 <__aeabi_dmul>
 8018452:	e772      	b.n	801833a <__ieee754_pow+0x3a>
 8018454:	4a51      	ldr	r2, [pc, #324]	@ (801859c <__ieee754_pow+0x29c>)
 8018456:	4591      	cmp	r9, r2
 8018458:	d109      	bne.n	801846e <__ieee754_pow+0x16e>
 801845a:	2d00      	cmp	r5, #0
 801845c:	db07      	blt.n	801846e <__ieee754_pow+0x16e>
 801845e:	ec47 6b10 	vmov	d0, r6, r7
 8018462:	b011      	add	sp, #68	@ 0x44
 8018464:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018468:	f7ff bc6c 	b.w	8017d44 <__ieee754_sqrt>
 801846c:	2400      	movs	r4, #0
 801846e:	ec47 6b10 	vmov	d0, r6, r7
 8018472:	9302      	str	r3, [sp, #8]
 8018474:	f000 fe84 	bl	8019180 <fabs>
 8018478:	9b02      	ldr	r3, [sp, #8]
 801847a:	ec51 0b10 	vmov	r0, r1, d0
 801847e:	bb53      	cbnz	r3, 80184d6 <__ieee754_pow+0x1d6>
 8018480:	4b44      	ldr	r3, [pc, #272]	@ (8018594 <__ieee754_pow+0x294>)
 8018482:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8018486:	429a      	cmp	r2, r3
 8018488:	d002      	beq.n	8018490 <__ieee754_pow+0x190>
 801848a:	f1b8 0f00 	cmp.w	r8, #0
 801848e:	d122      	bne.n	80184d6 <__ieee754_pow+0x1d6>
 8018490:	f1b9 0f00 	cmp.w	r9, #0
 8018494:	da05      	bge.n	80184a2 <__ieee754_pow+0x1a2>
 8018496:	4602      	mov	r2, r0
 8018498:	460b      	mov	r3, r1
 801849a:	2000      	movs	r0, #0
 801849c:	493d      	ldr	r1, [pc, #244]	@ (8018594 <__ieee754_pow+0x294>)
 801849e:	f7e8 f9f5 	bl	800088c <__aeabi_ddiv>
 80184a2:	2d00      	cmp	r5, #0
 80184a4:	f6bf af49 	bge.w	801833a <__ieee754_pow+0x3a>
 80184a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80184ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80184b0:	ea58 0804 	orrs.w	r8, r8, r4
 80184b4:	d108      	bne.n	80184c8 <__ieee754_pow+0x1c8>
 80184b6:	4602      	mov	r2, r0
 80184b8:	460b      	mov	r3, r1
 80184ba:	4610      	mov	r0, r2
 80184bc:	4619      	mov	r1, r3
 80184be:	f7e7 ff03 	bl	80002c8 <__aeabi_dsub>
 80184c2:	4602      	mov	r2, r0
 80184c4:	460b      	mov	r3, r1
 80184c6:	e794      	b.n	80183f2 <__ieee754_pow+0xf2>
 80184c8:	2c01      	cmp	r4, #1
 80184ca:	f47f af36 	bne.w	801833a <__ieee754_pow+0x3a>
 80184ce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80184d2:	4619      	mov	r1, r3
 80184d4:	e731      	b.n	801833a <__ieee754_pow+0x3a>
 80184d6:	0feb      	lsrs	r3, r5, #31
 80184d8:	3b01      	subs	r3, #1
 80184da:	ea53 0204 	orrs.w	r2, r3, r4
 80184de:	d102      	bne.n	80184e6 <__ieee754_pow+0x1e6>
 80184e0:	4632      	mov	r2, r6
 80184e2:	463b      	mov	r3, r7
 80184e4:	e7e9      	b.n	80184ba <__ieee754_pow+0x1ba>
 80184e6:	3c01      	subs	r4, #1
 80184e8:	431c      	orrs	r4, r3
 80184ea:	d016      	beq.n	801851a <__ieee754_pow+0x21a>
 80184ec:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8018578 <__ieee754_pow+0x278>
 80184f0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80184f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80184f8:	f240 8112 	bls.w	8018720 <__ieee754_pow+0x420>
 80184fc:	4b28      	ldr	r3, [pc, #160]	@ (80185a0 <__ieee754_pow+0x2a0>)
 80184fe:	459a      	cmp	sl, r3
 8018500:	4b25      	ldr	r3, [pc, #148]	@ (8018598 <__ieee754_pow+0x298>)
 8018502:	d916      	bls.n	8018532 <__ieee754_pow+0x232>
 8018504:	4598      	cmp	r8, r3
 8018506:	d80b      	bhi.n	8018520 <__ieee754_pow+0x220>
 8018508:	f1b9 0f00 	cmp.w	r9, #0
 801850c:	da0b      	bge.n	8018526 <__ieee754_pow+0x226>
 801850e:	2000      	movs	r0, #0
 8018510:	b011      	add	sp, #68	@ 0x44
 8018512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018516:	f000 bfe7 	b.w	80194e8 <__math_oflow>
 801851a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8018580 <__ieee754_pow+0x280>
 801851e:	e7e7      	b.n	80184f0 <__ieee754_pow+0x1f0>
 8018520:	f1b9 0f00 	cmp.w	r9, #0
 8018524:	dcf3      	bgt.n	801850e <__ieee754_pow+0x20e>
 8018526:	2000      	movs	r0, #0
 8018528:	b011      	add	sp, #68	@ 0x44
 801852a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801852e:	f000 bfd3 	b.w	80194d8 <__math_uflow>
 8018532:	4598      	cmp	r8, r3
 8018534:	d20c      	bcs.n	8018550 <__ieee754_pow+0x250>
 8018536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801853a:	2200      	movs	r2, #0
 801853c:	2300      	movs	r3, #0
 801853e:	f7e8 faed 	bl	8000b1c <__aeabi_dcmplt>
 8018542:	3800      	subs	r0, #0
 8018544:	bf18      	it	ne
 8018546:	2001      	movne	r0, #1
 8018548:	f1b9 0f00 	cmp.w	r9, #0
 801854c:	daec      	bge.n	8018528 <__ieee754_pow+0x228>
 801854e:	e7df      	b.n	8018510 <__ieee754_pow+0x210>
 8018550:	4b10      	ldr	r3, [pc, #64]	@ (8018594 <__ieee754_pow+0x294>)
 8018552:	4598      	cmp	r8, r3
 8018554:	f04f 0200 	mov.w	r2, #0
 8018558:	d924      	bls.n	80185a4 <__ieee754_pow+0x2a4>
 801855a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801855e:	2300      	movs	r3, #0
 8018560:	f7e8 fadc 	bl	8000b1c <__aeabi_dcmplt>
 8018564:	3800      	subs	r0, #0
 8018566:	bf18      	it	ne
 8018568:	2001      	movne	r0, #1
 801856a:	f1b9 0f00 	cmp.w	r9, #0
 801856e:	dccf      	bgt.n	8018510 <__ieee754_pow+0x210>
 8018570:	e7da      	b.n	8018528 <__ieee754_pow+0x228>
 8018572:	bf00      	nop
 8018574:	f3af 8000 	nop.w
 8018578:	00000000 	.word	0x00000000
 801857c:	3ff00000 	.word	0x3ff00000
 8018580:	00000000 	.word	0x00000000
 8018584:	bff00000 	.word	0xbff00000
 8018588:	fff00000 	.word	0xfff00000
 801858c:	7ff00000 	.word	0x7ff00000
 8018590:	433fffff 	.word	0x433fffff
 8018594:	3ff00000 	.word	0x3ff00000
 8018598:	3fefffff 	.word	0x3fefffff
 801859c:	3fe00000 	.word	0x3fe00000
 80185a0:	43f00000 	.word	0x43f00000
 80185a4:	4b5a      	ldr	r3, [pc, #360]	@ (8018710 <__ieee754_pow+0x410>)
 80185a6:	f7e7 fe8f 	bl	80002c8 <__aeabi_dsub>
 80185aa:	a351      	add	r3, pc, #324	@ (adr r3, 80186f0 <__ieee754_pow+0x3f0>)
 80185ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185b0:	4604      	mov	r4, r0
 80185b2:	460d      	mov	r5, r1
 80185b4:	f7e8 f840 	bl	8000638 <__aeabi_dmul>
 80185b8:	a34f      	add	r3, pc, #316	@ (adr r3, 80186f8 <__ieee754_pow+0x3f8>)
 80185ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185be:	4606      	mov	r6, r0
 80185c0:	460f      	mov	r7, r1
 80185c2:	4620      	mov	r0, r4
 80185c4:	4629      	mov	r1, r5
 80185c6:	f7e8 f837 	bl	8000638 <__aeabi_dmul>
 80185ca:	4b52      	ldr	r3, [pc, #328]	@ (8018714 <__ieee754_pow+0x414>)
 80185cc:	4682      	mov	sl, r0
 80185ce:	468b      	mov	fp, r1
 80185d0:	2200      	movs	r2, #0
 80185d2:	4620      	mov	r0, r4
 80185d4:	4629      	mov	r1, r5
 80185d6:	f7e8 f82f 	bl	8000638 <__aeabi_dmul>
 80185da:	4602      	mov	r2, r0
 80185dc:	460b      	mov	r3, r1
 80185de:	a148      	add	r1, pc, #288	@ (adr r1, 8018700 <__ieee754_pow+0x400>)
 80185e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80185e4:	f7e7 fe70 	bl	80002c8 <__aeabi_dsub>
 80185e8:	4622      	mov	r2, r4
 80185ea:	462b      	mov	r3, r5
 80185ec:	f7e8 f824 	bl	8000638 <__aeabi_dmul>
 80185f0:	4602      	mov	r2, r0
 80185f2:	460b      	mov	r3, r1
 80185f4:	2000      	movs	r0, #0
 80185f6:	4948      	ldr	r1, [pc, #288]	@ (8018718 <__ieee754_pow+0x418>)
 80185f8:	f7e7 fe66 	bl	80002c8 <__aeabi_dsub>
 80185fc:	4622      	mov	r2, r4
 80185fe:	4680      	mov	r8, r0
 8018600:	4689      	mov	r9, r1
 8018602:	462b      	mov	r3, r5
 8018604:	4620      	mov	r0, r4
 8018606:	4629      	mov	r1, r5
 8018608:	f7e8 f816 	bl	8000638 <__aeabi_dmul>
 801860c:	4602      	mov	r2, r0
 801860e:	460b      	mov	r3, r1
 8018610:	4640      	mov	r0, r8
 8018612:	4649      	mov	r1, r9
 8018614:	f7e8 f810 	bl	8000638 <__aeabi_dmul>
 8018618:	a33b      	add	r3, pc, #236	@ (adr r3, 8018708 <__ieee754_pow+0x408>)
 801861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801861e:	f7e8 f80b 	bl	8000638 <__aeabi_dmul>
 8018622:	4602      	mov	r2, r0
 8018624:	460b      	mov	r3, r1
 8018626:	4650      	mov	r0, sl
 8018628:	4659      	mov	r1, fp
 801862a:	f7e7 fe4d 	bl	80002c8 <__aeabi_dsub>
 801862e:	4602      	mov	r2, r0
 8018630:	460b      	mov	r3, r1
 8018632:	4680      	mov	r8, r0
 8018634:	4689      	mov	r9, r1
 8018636:	4630      	mov	r0, r6
 8018638:	4639      	mov	r1, r7
 801863a:	f7e7 fe47 	bl	80002cc <__adddf3>
 801863e:	2400      	movs	r4, #0
 8018640:	4632      	mov	r2, r6
 8018642:	463b      	mov	r3, r7
 8018644:	4620      	mov	r0, r4
 8018646:	460d      	mov	r5, r1
 8018648:	f7e7 fe3e 	bl	80002c8 <__aeabi_dsub>
 801864c:	4602      	mov	r2, r0
 801864e:	460b      	mov	r3, r1
 8018650:	4640      	mov	r0, r8
 8018652:	4649      	mov	r1, r9
 8018654:	f7e7 fe38 	bl	80002c8 <__aeabi_dsub>
 8018658:	e9dd 2300 	ldrd	r2, r3, [sp]
 801865c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018660:	2300      	movs	r3, #0
 8018662:	9304      	str	r3, [sp, #16]
 8018664:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8018668:	4606      	mov	r6, r0
 801866a:	460f      	mov	r7, r1
 801866c:	4652      	mov	r2, sl
 801866e:	465b      	mov	r3, fp
 8018670:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018674:	f7e7 fe28 	bl	80002c8 <__aeabi_dsub>
 8018678:	4622      	mov	r2, r4
 801867a:	462b      	mov	r3, r5
 801867c:	f7e7 ffdc 	bl	8000638 <__aeabi_dmul>
 8018680:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018684:	4680      	mov	r8, r0
 8018686:	4689      	mov	r9, r1
 8018688:	4630      	mov	r0, r6
 801868a:	4639      	mov	r1, r7
 801868c:	f7e7 ffd4 	bl	8000638 <__aeabi_dmul>
 8018690:	4602      	mov	r2, r0
 8018692:	460b      	mov	r3, r1
 8018694:	4640      	mov	r0, r8
 8018696:	4649      	mov	r1, r9
 8018698:	f7e7 fe18 	bl	80002cc <__adddf3>
 801869c:	4652      	mov	r2, sl
 801869e:	465b      	mov	r3, fp
 80186a0:	4606      	mov	r6, r0
 80186a2:	460f      	mov	r7, r1
 80186a4:	4620      	mov	r0, r4
 80186a6:	4629      	mov	r1, r5
 80186a8:	f7e7 ffc6 	bl	8000638 <__aeabi_dmul>
 80186ac:	460b      	mov	r3, r1
 80186ae:	4602      	mov	r2, r0
 80186b0:	4680      	mov	r8, r0
 80186b2:	4689      	mov	r9, r1
 80186b4:	4630      	mov	r0, r6
 80186b6:	4639      	mov	r1, r7
 80186b8:	f7e7 fe08 	bl	80002cc <__adddf3>
 80186bc:	4b17      	ldr	r3, [pc, #92]	@ (801871c <__ieee754_pow+0x41c>)
 80186be:	4299      	cmp	r1, r3
 80186c0:	4604      	mov	r4, r0
 80186c2:	460d      	mov	r5, r1
 80186c4:	468a      	mov	sl, r1
 80186c6:	468b      	mov	fp, r1
 80186c8:	f340 82ef 	ble.w	8018caa <__ieee754_pow+0x9aa>
 80186cc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80186d0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80186d4:	4303      	orrs	r3, r0
 80186d6:	f000 81e8 	beq.w	8018aaa <__ieee754_pow+0x7aa>
 80186da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80186de:	2200      	movs	r2, #0
 80186e0:	2300      	movs	r3, #0
 80186e2:	f7e8 fa1b 	bl	8000b1c <__aeabi_dcmplt>
 80186e6:	3800      	subs	r0, #0
 80186e8:	bf18      	it	ne
 80186ea:	2001      	movne	r0, #1
 80186ec:	e710      	b.n	8018510 <__ieee754_pow+0x210>
 80186ee:	bf00      	nop
 80186f0:	60000000 	.word	0x60000000
 80186f4:	3ff71547 	.word	0x3ff71547
 80186f8:	f85ddf44 	.word	0xf85ddf44
 80186fc:	3e54ae0b 	.word	0x3e54ae0b
 8018700:	55555555 	.word	0x55555555
 8018704:	3fd55555 	.word	0x3fd55555
 8018708:	652b82fe 	.word	0x652b82fe
 801870c:	3ff71547 	.word	0x3ff71547
 8018710:	3ff00000 	.word	0x3ff00000
 8018714:	3fd00000 	.word	0x3fd00000
 8018718:	3fe00000 	.word	0x3fe00000
 801871c:	408fffff 	.word	0x408fffff
 8018720:	4bd5      	ldr	r3, [pc, #852]	@ (8018a78 <__ieee754_pow+0x778>)
 8018722:	402b      	ands	r3, r5
 8018724:	2200      	movs	r2, #0
 8018726:	b92b      	cbnz	r3, 8018734 <__ieee754_pow+0x434>
 8018728:	4bd4      	ldr	r3, [pc, #848]	@ (8018a7c <__ieee754_pow+0x77c>)
 801872a:	f7e7 ff85 	bl	8000638 <__aeabi_dmul>
 801872e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8018732:	468b      	mov	fp, r1
 8018734:	ea4f 532b 	mov.w	r3, fp, asr #20
 8018738:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801873c:	4413      	add	r3, r2
 801873e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018740:	4bcf      	ldr	r3, [pc, #828]	@ (8018a80 <__ieee754_pow+0x780>)
 8018742:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8018746:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801874a:	459b      	cmp	fp, r3
 801874c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8018750:	dd08      	ble.n	8018764 <__ieee754_pow+0x464>
 8018752:	4bcc      	ldr	r3, [pc, #816]	@ (8018a84 <__ieee754_pow+0x784>)
 8018754:	459b      	cmp	fp, r3
 8018756:	f340 81a5 	ble.w	8018aa4 <__ieee754_pow+0x7a4>
 801875a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801875c:	3301      	adds	r3, #1
 801875e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018760:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8018764:	f04f 0a00 	mov.w	sl, #0
 8018768:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801876c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801876e:	4bc6      	ldr	r3, [pc, #792]	@ (8018a88 <__ieee754_pow+0x788>)
 8018770:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018774:	ed93 7b00 	vldr	d7, [r3]
 8018778:	4629      	mov	r1, r5
 801877a:	ec53 2b17 	vmov	r2, r3, d7
 801877e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8018782:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018786:	f7e7 fd9f 	bl	80002c8 <__aeabi_dsub>
 801878a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801878e:	4606      	mov	r6, r0
 8018790:	460f      	mov	r7, r1
 8018792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018796:	f7e7 fd99 	bl	80002cc <__adddf3>
 801879a:	4602      	mov	r2, r0
 801879c:	460b      	mov	r3, r1
 801879e:	2000      	movs	r0, #0
 80187a0:	49ba      	ldr	r1, [pc, #744]	@ (8018a8c <__ieee754_pow+0x78c>)
 80187a2:	f7e8 f873 	bl	800088c <__aeabi_ddiv>
 80187a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80187aa:	4602      	mov	r2, r0
 80187ac:	460b      	mov	r3, r1
 80187ae:	4630      	mov	r0, r6
 80187b0:	4639      	mov	r1, r7
 80187b2:	f7e7 ff41 	bl	8000638 <__aeabi_dmul>
 80187b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80187ba:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80187be:	106d      	asrs	r5, r5, #1
 80187c0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80187c4:	f04f 0b00 	mov.w	fp, #0
 80187c8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80187cc:	4661      	mov	r1, ip
 80187ce:	2200      	movs	r2, #0
 80187d0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80187d4:	4658      	mov	r0, fp
 80187d6:	46e1      	mov	r9, ip
 80187d8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80187dc:	4614      	mov	r4, r2
 80187de:	461d      	mov	r5, r3
 80187e0:	f7e7 ff2a 	bl	8000638 <__aeabi_dmul>
 80187e4:	4602      	mov	r2, r0
 80187e6:	460b      	mov	r3, r1
 80187e8:	4630      	mov	r0, r6
 80187ea:	4639      	mov	r1, r7
 80187ec:	f7e7 fd6c 	bl	80002c8 <__aeabi_dsub>
 80187f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80187f4:	4606      	mov	r6, r0
 80187f6:	460f      	mov	r7, r1
 80187f8:	4620      	mov	r0, r4
 80187fa:	4629      	mov	r1, r5
 80187fc:	f7e7 fd64 	bl	80002c8 <__aeabi_dsub>
 8018800:	4602      	mov	r2, r0
 8018802:	460b      	mov	r3, r1
 8018804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018808:	f7e7 fd5e 	bl	80002c8 <__aeabi_dsub>
 801880c:	465a      	mov	r2, fp
 801880e:	464b      	mov	r3, r9
 8018810:	f7e7 ff12 	bl	8000638 <__aeabi_dmul>
 8018814:	4602      	mov	r2, r0
 8018816:	460b      	mov	r3, r1
 8018818:	4630      	mov	r0, r6
 801881a:	4639      	mov	r1, r7
 801881c:	f7e7 fd54 	bl	80002c8 <__aeabi_dsub>
 8018820:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8018824:	f7e7 ff08 	bl	8000638 <__aeabi_dmul>
 8018828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801882c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018830:	4610      	mov	r0, r2
 8018832:	4619      	mov	r1, r3
 8018834:	f7e7 ff00 	bl	8000638 <__aeabi_dmul>
 8018838:	a37d      	add	r3, pc, #500	@ (adr r3, 8018a30 <__ieee754_pow+0x730>)
 801883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801883e:	4604      	mov	r4, r0
 8018840:	460d      	mov	r5, r1
 8018842:	f7e7 fef9 	bl	8000638 <__aeabi_dmul>
 8018846:	a37c      	add	r3, pc, #496	@ (adr r3, 8018a38 <__ieee754_pow+0x738>)
 8018848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801884c:	f7e7 fd3e 	bl	80002cc <__adddf3>
 8018850:	4622      	mov	r2, r4
 8018852:	462b      	mov	r3, r5
 8018854:	f7e7 fef0 	bl	8000638 <__aeabi_dmul>
 8018858:	a379      	add	r3, pc, #484	@ (adr r3, 8018a40 <__ieee754_pow+0x740>)
 801885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801885e:	f7e7 fd35 	bl	80002cc <__adddf3>
 8018862:	4622      	mov	r2, r4
 8018864:	462b      	mov	r3, r5
 8018866:	f7e7 fee7 	bl	8000638 <__aeabi_dmul>
 801886a:	a377      	add	r3, pc, #476	@ (adr r3, 8018a48 <__ieee754_pow+0x748>)
 801886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018870:	f7e7 fd2c 	bl	80002cc <__adddf3>
 8018874:	4622      	mov	r2, r4
 8018876:	462b      	mov	r3, r5
 8018878:	f7e7 fede 	bl	8000638 <__aeabi_dmul>
 801887c:	a374      	add	r3, pc, #464	@ (adr r3, 8018a50 <__ieee754_pow+0x750>)
 801887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018882:	f7e7 fd23 	bl	80002cc <__adddf3>
 8018886:	4622      	mov	r2, r4
 8018888:	462b      	mov	r3, r5
 801888a:	f7e7 fed5 	bl	8000638 <__aeabi_dmul>
 801888e:	a372      	add	r3, pc, #456	@ (adr r3, 8018a58 <__ieee754_pow+0x758>)
 8018890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018894:	f7e7 fd1a 	bl	80002cc <__adddf3>
 8018898:	4622      	mov	r2, r4
 801889a:	4606      	mov	r6, r0
 801889c:	460f      	mov	r7, r1
 801889e:	462b      	mov	r3, r5
 80188a0:	4620      	mov	r0, r4
 80188a2:	4629      	mov	r1, r5
 80188a4:	f7e7 fec8 	bl	8000638 <__aeabi_dmul>
 80188a8:	4602      	mov	r2, r0
 80188aa:	460b      	mov	r3, r1
 80188ac:	4630      	mov	r0, r6
 80188ae:	4639      	mov	r1, r7
 80188b0:	f7e7 fec2 	bl	8000638 <__aeabi_dmul>
 80188b4:	465a      	mov	r2, fp
 80188b6:	4604      	mov	r4, r0
 80188b8:	460d      	mov	r5, r1
 80188ba:	464b      	mov	r3, r9
 80188bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80188c0:	f7e7 fd04 	bl	80002cc <__adddf3>
 80188c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80188c8:	f7e7 feb6 	bl	8000638 <__aeabi_dmul>
 80188cc:	4622      	mov	r2, r4
 80188ce:	462b      	mov	r3, r5
 80188d0:	f7e7 fcfc 	bl	80002cc <__adddf3>
 80188d4:	465a      	mov	r2, fp
 80188d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80188da:	464b      	mov	r3, r9
 80188dc:	4658      	mov	r0, fp
 80188de:	4649      	mov	r1, r9
 80188e0:	f7e7 feaa 	bl	8000638 <__aeabi_dmul>
 80188e4:	4b6a      	ldr	r3, [pc, #424]	@ (8018a90 <__ieee754_pow+0x790>)
 80188e6:	2200      	movs	r2, #0
 80188e8:	4606      	mov	r6, r0
 80188ea:	460f      	mov	r7, r1
 80188ec:	f7e7 fcee 	bl	80002cc <__adddf3>
 80188f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80188f4:	f7e7 fcea 	bl	80002cc <__adddf3>
 80188f8:	46d8      	mov	r8, fp
 80188fa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80188fe:	460d      	mov	r5, r1
 8018900:	465a      	mov	r2, fp
 8018902:	460b      	mov	r3, r1
 8018904:	4640      	mov	r0, r8
 8018906:	4649      	mov	r1, r9
 8018908:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801890c:	f7e7 fe94 	bl	8000638 <__aeabi_dmul>
 8018910:	465c      	mov	r4, fp
 8018912:	4680      	mov	r8, r0
 8018914:	4689      	mov	r9, r1
 8018916:	4b5e      	ldr	r3, [pc, #376]	@ (8018a90 <__ieee754_pow+0x790>)
 8018918:	2200      	movs	r2, #0
 801891a:	4620      	mov	r0, r4
 801891c:	4629      	mov	r1, r5
 801891e:	f7e7 fcd3 	bl	80002c8 <__aeabi_dsub>
 8018922:	4632      	mov	r2, r6
 8018924:	463b      	mov	r3, r7
 8018926:	f7e7 fccf 	bl	80002c8 <__aeabi_dsub>
 801892a:	4602      	mov	r2, r0
 801892c:	460b      	mov	r3, r1
 801892e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8018932:	f7e7 fcc9 	bl	80002c8 <__aeabi_dsub>
 8018936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801893a:	f7e7 fe7d 	bl	8000638 <__aeabi_dmul>
 801893e:	4622      	mov	r2, r4
 8018940:	4606      	mov	r6, r0
 8018942:	460f      	mov	r7, r1
 8018944:	462b      	mov	r3, r5
 8018946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801894a:	f7e7 fe75 	bl	8000638 <__aeabi_dmul>
 801894e:	4602      	mov	r2, r0
 8018950:	460b      	mov	r3, r1
 8018952:	4630      	mov	r0, r6
 8018954:	4639      	mov	r1, r7
 8018956:	f7e7 fcb9 	bl	80002cc <__adddf3>
 801895a:	4606      	mov	r6, r0
 801895c:	460f      	mov	r7, r1
 801895e:	4602      	mov	r2, r0
 8018960:	460b      	mov	r3, r1
 8018962:	4640      	mov	r0, r8
 8018964:	4649      	mov	r1, r9
 8018966:	f7e7 fcb1 	bl	80002cc <__adddf3>
 801896a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801896e:	a33c      	add	r3, pc, #240	@ (adr r3, 8018a60 <__ieee754_pow+0x760>)
 8018970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018974:	4658      	mov	r0, fp
 8018976:	e9cd bc08 	strd	fp, ip, [sp, #32]
 801897a:	460d      	mov	r5, r1
 801897c:	f7e7 fe5c 	bl	8000638 <__aeabi_dmul>
 8018980:	465c      	mov	r4, fp
 8018982:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018986:	4642      	mov	r2, r8
 8018988:	464b      	mov	r3, r9
 801898a:	4620      	mov	r0, r4
 801898c:	4629      	mov	r1, r5
 801898e:	f7e7 fc9b 	bl	80002c8 <__aeabi_dsub>
 8018992:	4602      	mov	r2, r0
 8018994:	460b      	mov	r3, r1
 8018996:	4630      	mov	r0, r6
 8018998:	4639      	mov	r1, r7
 801899a:	f7e7 fc95 	bl	80002c8 <__aeabi_dsub>
 801899e:	a332      	add	r3, pc, #200	@ (adr r3, 8018a68 <__ieee754_pow+0x768>)
 80189a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189a4:	f7e7 fe48 	bl	8000638 <__aeabi_dmul>
 80189a8:	a331      	add	r3, pc, #196	@ (adr r3, 8018a70 <__ieee754_pow+0x770>)
 80189aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189ae:	4606      	mov	r6, r0
 80189b0:	460f      	mov	r7, r1
 80189b2:	4620      	mov	r0, r4
 80189b4:	4629      	mov	r1, r5
 80189b6:	f7e7 fe3f 	bl	8000638 <__aeabi_dmul>
 80189ba:	4602      	mov	r2, r0
 80189bc:	460b      	mov	r3, r1
 80189be:	4630      	mov	r0, r6
 80189c0:	4639      	mov	r1, r7
 80189c2:	f7e7 fc83 	bl	80002cc <__adddf3>
 80189c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80189c8:	4b32      	ldr	r3, [pc, #200]	@ (8018a94 <__ieee754_pow+0x794>)
 80189ca:	4413      	add	r3, r2
 80189cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80189d0:	f7e7 fc7c 	bl	80002cc <__adddf3>
 80189d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80189d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80189da:	f7e7 fdc3 	bl	8000564 <__aeabi_i2d>
 80189de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80189e0:	4b2d      	ldr	r3, [pc, #180]	@ (8018a98 <__ieee754_pow+0x798>)
 80189e2:	4413      	add	r3, r2
 80189e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80189e8:	4606      	mov	r6, r0
 80189ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80189ee:	460f      	mov	r7, r1
 80189f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80189f4:	f7e7 fc6a 	bl	80002cc <__adddf3>
 80189f8:	4642      	mov	r2, r8
 80189fa:	464b      	mov	r3, r9
 80189fc:	f7e7 fc66 	bl	80002cc <__adddf3>
 8018a00:	4632      	mov	r2, r6
 8018a02:	463b      	mov	r3, r7
 8018a04:	f7e7 fc62 	bl	80002cc <__adddf3>
 8018a08:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8018a0c:	4632      	mov	r2, r6
 8018a0e:	463b      	mov	r3, r7
 8018a10:	4658      	mov	r0, fp
 8018a12:	460d      	mov	r5, r1
 8018a14:	f7e7 fc58 	bl	80002c8 <__aeabi_dsub>
 8018a18:	4642      	mov	r2, r8
 8018a1a:	464b      	mov	r3, r9
 8018a1c:	f7e7 fc54 	bl	80002c8 <__aeabi_dsub>
 8018a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018a24:	f7e7 fc50 	bl	80002c8 <__aeabi_dsub>
 8018a28:	465c      	mov	r4, fp
 8018a2a:	4602      	mov	r2, r0
 8018a2c:	e036      	b.n	8018a9c <__ieee754_pow+0x79c>
 8018a2e:	bf00      	nop
 8018a30:	4a454eef 	.word	0x4a454eef
 8018a34:	3fca7e28 	.word	0x3fca7e28
 8018a38:	93c9db65 	.word	0x93c9db65
 8018a3c:	3fcd864a 	.word	0x3fcd864a
 8018a40:	a91d4101 	.word	0xa91d4101
 8018a44:	3fd17460 	.word	0x3fd17460
 8018a48:	518f264d 	.word	0x518f264d
 8018a4c:	3fd55555 	.word	0x3fd55555
 8018a50:	db6fabff 	.word	0xdb6fabff
 8018a54:	3fdb6db6 	.word	0x3fdb6db6
 8018a58:	33333303 	.word	0x33333303
 8018a5c:	3fe33333 	.word	0x3fe33333
 8018a60:	e0000000 	.word	0xe0000000
 8018a64:	3feec709 	.word	0x3feec709
 8018a68:	dc3a03fd 	.word	0xdc3a03fd
 8018a6c:	3feec709 	.word	0x3feec709
 8018a70:	145b01f5 	.word	0x145b01f5
 8018a74:	be3e2fe0 	.word	0xbe3e2fe0
 8018a78:	7ff00000 	.word	0x7ff00000
 8018a7c:	43400000 	.word	0x43400000
 8018a80:	0003988e 	.word	0x0003988e
 8018a84:	000bb679 	.word	0x000bb679
 8018a88:	0801a3a0 	.word	0x0801a3a0
 8018a8c:	3ff00000 	.word	0x3ff00000
 8018a90:	40080000 	.word	0x40080000
 8018a94:	0801a380 	.word	0x0801a380
 8018a98:	0801a390 	.word	0x0801a390
 8018a9c:	460b      	mov	r3, r1
 8018a9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018aa2:	e5d7      	b.n	8018654 <__ieee754_pow+0x354>
 8018aa4:	f04f 0a01 	mov.w	sl, #1
 8018aa8:	e65e      	b.n	8018768 <__ieee754_pow+0x468>
 8018aaa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8018d7c <__ieee754_pow+0xa7c>)
 8018aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ab0:	4630      	mov	r0, r6
 8018ab2:	4639      	mov	r1, r7
 8018ab4:	f7e7 fc0a 	bl	80002cc <__adddf3>
 8018ab8:	4642      	mov	r2, r8
 8018aba:	e9cd 0100 	strd	r0, r1, [sp]
 8018abe:	464b      	mov	r3, r9
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	4629      	mov	r1, r5
 8018ac4:	f7e7 fc00 	bl	80002c8 <__aeabi_dsub>
 8018ac8:	4602      	mov	r2, r0
 8018aca:	460b      	mov	r3, r1
 8018acc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018ad0:	f7e8 f842 	bl	8000b58 <__aeabi_dcmpgt>
 8018ad4:	2800      	cmp	r0, #0
 8018ad6:	f47f ae00 	bne.w	80186da <__ieee754_pow+0x3da>
 8018ada:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8018ade:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8018ae2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8018ae6:	fa43 fa0a 	asr.w	sl, r3, sl
 8018aea:	44da      	add	sl, fp
 8018aec:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8018af0:	489d      	ldr	r0, [pc, #628]	@ (8018d68 <__ieee754_pow+0xa68>)
 8018af2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8018af6:	4108      	asrs	r0, r1
 8018af8:	ea00 030a 	and.w	r3, r0, sl
 8018afc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8018b00:	f1c1 0114 	rsb	r1, r1, #20
 8018b04:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8018b08:	fa4a fa01 	asr.w	sl, sl, r1
 8018b0c:	f1bb 0f00 	cmp.w	fp, #0
 8018b10:	4640      	mov	r0, r8
 8018b12:	4649      	mov	r1, r9
 8018b14:	f04f 0200 	mov.w	r2, #0
 8018b18:	bfb8      	it	lt
 8018b1a:	f1ca 0a00 	rsblt	sl, sl, #0
 8018b1e:	f7e7 fbd3 	bl	80002c8 <__aeabi_dsub>
 8018b22:	4680      	mov	r8, r0
 8018b24:	4689      	mov	r9, r1
 8018b26:	4632      	mov	r2, r6
 8018b28:	463b      	mov	r3, r7
 8018b2a:	4640      	mov	r0, r8
 8018b2c:	4649      	mov	r1, r9
 8018b2e:	f7e7 fbcd 	bl	80002cc <__adddf3>
 8018b32:	2400      	movs	r4, #0
 8018b34:	a37c      	add	r3, pc, #496	@ (adr r3, 8018d28 <__ieee754_pow+0xa28>)
 8018b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b3a:	4620      	mov	r0, r4
 8018b3c:	460d      	mov	r5, r1
 8018b3e:	f7e7 fd7b 	bl	8000638 <__aeabi_dmul>
 8018b42:	4642      	mov	r2, r8
 8018b44:	e9cd 0100 	strd	r0, r1, [sp]
 8018b48:	464b      	mov	r3, r9
 8018b4a:	4620      	mov	r0, r4
 8018b4c:	4629      	mov	r1, r5
 8018b4e:	f7e7 fbbb 	bl	80002c8 <__aeabi_dsub>
 8018b52:	4602      	mov	r2, r0
 8018b54:	460b      	mov	r3, r1
 8018b56:	4630      	mov	r0, r6
 8018b58:	4639      	mov	r1, r7
 8018b5a:	f7e7 fbb5 	bl	80002c8 <__aeabi_dsub>
 8018b5e:	a374      	add	r3, pc, #464	@ (adr r3, 8018d30 <__ieee754_pow+0xa30>)
 8018b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b64:	f7e7 fd68 	bl	8000638 <__aeabi_dmul>
 8018b68:	a373      	add	r3, pc, #460	@ (adr r3, 8018d38 <__ieee754_pow+0xa38>)
 8018b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b6e:	4680      	mov	r8, r0
 8018b70:	4689      	mov	r9, r1
 8018b72:	4620      	mov	r0, r4
 8018b74:	4629      	mov	r1, r5
 8018b76:	f7e7 fd5f 	bl	8000638 <__aeabi_dmul>
 8018b7a:	4602      	mov	r2, r0
 8018b7c:	460b      	mov	r3, r1
 8018b7e:	4640      	mov	r0, r8
 8018b80:	4649      	mov	r1, r9
 8018b82:	f7e7 fba3 	bl	80002cc <__adddf3>
 8018b86:	4604      	mov	r4, r0
 8018b88:	460d      	mov	r5, r1
 8018b8a:	4602      	mov	r2, r0
 8018b8c:	460b      	mov	r3, r1
 8018b8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018b92:	f7e7 fb9b 	bl	80002cc <__adddf3>
 8018b96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018b9a:	4680      	mov	r8, r0
 8018b9c:	4689      	mov	r9, r1
 8018b9e:	f7e7 fb93 	bl	80002c8 <__aeabi_dsub>
 8018ba2:	4602      	mov	r2, r0
 8018ba4:	460b      	mov	r3, r1
 8018ba6:	4620      	mov	r0, r4
 8018ba8:	4629      	mov	r1, r5
 8018baa:	f7e7 fb8d 	bl	80002c8 <__aeabi_dsub>
 8018bae:	4642      	mov	r2, r8
 8018bb0:	4606      	mov	r6, r0
 8018bb2:	460f      	mov	r7, r1
 8018bb4:	464b      	mov	r3, r9
 8018bb6:	4640      	mov	r0, r8
 8018bb8:	4649      	mov	r1, r9
 8018bba:	f7e7 fd3d 	bl	8000638 <__aeabi_dmul>
 8018bbe:	a360      	add	r3, pc, #384	@ (adr r3, 8018d40 <__ieee754_pow+0xa40>)
 8018bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bc4:	4604      	mov	r4, r0
 8018bc6:	460d      	mov	r5, r1
 8018bc8:	f7e7 fd36 	bl	8000638 <__aeabi_dmul>
 8018bcc:	a35e      	add	r3, pc, #376	@ (adr r3, 8018d48 <__ieee754_pow+0xa48>)
 8018bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bd2:	f7e7 fb79 	bl	80002c8 <__aeabi_dsub>
 8018bd6:	4622      	mov	r2, r4
 8018bd8:	462b      	mov	r3, r5
 8018bda:	f7e7 fd2d 	bl	8000638 <__aeabi_dmul>
 8018bde:	a35c      	add	r3, pc, #368	@ (adr r3, 8018d50 <__ieee754_pow+0xa50>)
 8018be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018be4:	f7e7 fb72 	bl	80002cc <__adddf3>
 8018be8:	4622      	mov	r2, r4
 8018bea:	462b      	mov	r3, r5
 8018bec:	f7e7 fd24 	bl	8000638 <__aeabi_dmul>
 8018bf0:	a359      	add	r3, pc, #356	@ (adr r3, 8018d58 <__ieee754_pow+0xa58>)
 8018bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf6:	f7e7 fb67 	bl	80002c8 <__aeabi_dsub>
 8018bfa:	4622      	mov	r2, r4
 8018bfc:	462b      	mov	r3, r5
 8018bfe:	f7e7 fd1b 	bl	8000638 <__aeabi_dmul>
 8018c02:	a357      	add	r3, pc, #348	@ (adr r3, 8018d60 <__ieee754_pow+0xa60>)
 8018c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c08:	f7e7 fb60 	bl	80002cc <__adddf3>
 8018c0c:	4622      	mov	r2, r4
 8018c0e:	462b      	mov	r3, r5
 8018c10:	f7e7 fd12 	bl	8000638 <__aeabi_dmul>
 8018c14:	4602      	mov	r2, r0
 8018c16:	460b      	mov	r3, r1
 8018c18:	4640      	mov	r0, r8
 8018c1a:	4649      	mov	r1, r9
 8018c1c:	f7e7 fb54 	bl	80002c8 <__aeabi_dsub>
 8018c20:	4604      	mov	r4, r0
 8018c22:	460d      	mov	r5, r1
 8018c24:	4602      	mov	r2, r0
 8018c26:	460b      	mov	r3, r1
 8018c28:	4640      	mov	r0, r8
 8018c2a:	4649      	mov	r1, r9
 8018c2c:	f7e7 fd04 	bl	8000638 <__aeabi_dmul>
 8018c30:	2200      	movs	r2, #0
 8018c32:	e9cd 0100 	strd	r0, r1, [sp]
 8018c36:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	4629      	mov	r1, r5
 8018c3e:	f7e7 fb43 	bl	80002c8 <__aeabi_dsub>
 8018c42:	4602      	mov	r2, r0
 8018c44:	460b      	mov	r3, r1
 8018c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018c4a:	f7e7 fe1f 	bl	800088c <__aeabi_ddiv>
 8018c4e:	4632      	mov	r2, r6
 8018c50:	4604      	mov	r4, r0
 8018c52:	460d      	mov	r5, r1
 8018c54:	463b      	mov	r3, r7
 8018c56:	4640      	mov	r0, r8
 8018c58:	4649      	mov	r1, r9
 8018c5a:	f7e7 fced 	bl	8000638 <__aeabi_dmul>
 8018c5e:	4632      	mov	r2, r6
 8018c60:	463b      	mov	r3, r7
 8018c62:	f7e7 fb33 	bl	80002cc <__adddf3>
 8018c66:	4602      	mov	r2, r0
 8018c68:	460b      	mov	r3, r1
 8018c6a:	4620      	mov	r0, r4
 8018c6c:	4629      	mov	r1, r5
 8018c6e:	f7e7 fb2b 	bl	80002c8 <__aeabi_dsub>
 8018c72:	4642      	mov	r2, r8
 8018c74:	464b      	mov	r3, r9
 8018c76:	f7e7 fb27 	bl	80002c8 <__aeabi_dsub>
 8018c7a:	460b      	mov	r3, r1
 8018c7c:	4602      	mov	r2, r0
 8018c7e:	493b      	ldr	r1, [pc, #236]	@ (8018d6c <__ieee754_pow+0xa6c>)
 8018c80:	2000      	movs	r0, #0
 8018c82:	f7e7 fb21 	bl	80002c8 <__aeabi_dsub>
 8018c86:	ec41 0b10 	vmov	d0, r0, r1
 8018c8a:	ee10 3a90 	vmov	r3, s1
 8018c8e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8018c92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8018c96:	da30      	bge.n	8018cfa <__ieee754_pow+0x9fa>
 8018c98:	4650      	mov	r0, sl
 8018c9a:	f000 fb71 	bl	8019380 <scalbn>
 8018c9e:	ec51 0b10 	vmov	r0, r1, d0
 8018ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018ca6:	f7ff bbd2 	b.w	801844e <__ieee754_pow+0x14e>
 8018caa:	4c31      	ldr	r4, [pc, #196]	@ (8018d70 <__ieee754_pow+0xa70>)
 8018cac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8018cb0:	42a3      	cmp	r3, r4
 8018cb2:	d91a      	bls.n	8018cea <__ieee754_pow+0x9ea>
 8018cb4:	4b2f      	ldr	r3, [pc, #188]	@ (8018d74 <__ieee754_pow+0xa74>)
 8018cb6:	440b      	add	r3, r1
 8018cb8:	4303      	orrs	r3, r0
 8018cba:	d009      	beq.n	8018cd0 <__ieee754_pow+0x9d0>
 8018cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018cc0:	2200      	movs	r2, #0
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	f7e7 ff2a 	bl	8000b1c <__aeabi_dcmplt>
 8018cc8:	3800      	subs	r0, #0
 8018cca:	bf18      	it	ne
 8018ccc:	2001      	movne	r0, #1
 8018cce:	e42b      	b.n	8018528 <__ieee754_pow+0x228>
 8018cd0:	4642      	mov	r2, r8
 8018cd2:	464b      	mov	r3, r9
 8018cd4:	f7e7 faf8 	bl	80002c8 <__aeabi_dsub>
 8018cd8:	4632      	mov	r2, r6
 8018cda:	463b      	mov	r3, r7
 8018cdc:	f7e7 ff32 	bl	8000b44 <__aeabi_dcmpge>
 8018ce0:	2800      	cmp	r0, #0
 8018ce2:	d1eb      	bne.n	8018cbc <__ieee754_pow+0x9bc>
 8018ce4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8018d84 <__ieee754_pow+0xa84>
 8018ce8:	e6f7      	b.n	8018ada <__ieee754_pow+0x7da>
 8018cea:	469a      	mov	sl, r3
 8018cec:	4b22      	ldr	r3, [pc, #136]	@ (8018d78 <__ieee754_pow+0xa78>)
 8018cee:	459a      	cmp	sl, r3
 8018cf0:	f63f aef3 	bhi.w	8018ada <__ieee754_pow+0x7da>
 8018cf4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8018cf8:	e715      	b.n	8018b26 <__ieee754_pow+0x826>
 8018cfa:	ec51 0b10 	vmov	r0, r1, d0
 8018cfe:	4619      	mov	r1, r3
 8018d00:	e7cf      	b.n	8018ca2 <__ieee754_pow+0x9a2>
 8018d02:	491a      	ldr	r1, [pc, #104]	@ (8018d6c <__ieee754_pow+0xa6c>)
 8018d04:	2000      	movs	r0, #0
 8018d06:	f7ff bb18 	b.w	801833a <__ieee754_pow+0x3a>
 8018d0a:	2000      	movs	r0, #0
 8018d0c:	2100      	movs	r1, #0
 8018d0e:	f7ff bb14 	b.w	801833a <__ieee754_pow+0x3a>
 8018d12:	4630      	mov	r0, r6
 8018d14:	4639      	mov	r1, r7
 8018d16:	f7ff bb10 	b.w	801833a <__ieee754_pow+0x3a>
 8018d1a:	460c      	mov	r4, r1
 8018d1c:	f7ff bb5e 	b.w	80183dc <__ieee754_pow+0xdc>
 8018d20:	2400      	movs	r4, #0
 8018d22:	f7ff bb49 	b.w	80183b8 <__ieee754_pow+0xb8>
 8018d26:	bf00      	nop
 8018d28:	00000000 	.word	0x00000000
 8018d2c:	3fe62e43 	.word	0x3fe62e43
 8018d30:	fefa39ef 	.word	0xfefa39ef
 8018d34:	3fe62e42 	.word	0x3fe62e42
 8018d38:	0ca86c39 	.word	0x0ca86c39
 8018d3c:	be205c61 	.word	0xbe205c61
 8018d40:	72bea4d0 	.word	0x72bea4d0
 8018d44:	3e663769 	.word	0x3e663769
 8018d48:	c5d26bf1 	.word	0xc5d26bf1
 8018d4c:	3ebbbd41 	.word	0x3ebbbd41
 8018d50:	af25de2c 	.word	0xaf25de2c
 8018d54:	3f11566a 	.word	0x3f11566a
 8018d58:	16bebd93 	.word	0x16bebd93
 8018d5c:	3f66c16c 	.word	0x3f66c16c
 8018d60:	5555553e 	.word	0x5555553e
 8018d64:	3fc55555 	.word	0x3fc55555
 8018d68:	fff00000 	.word	0xfff00000
 8018d6c:	3ff00000 	.word	0x3ff00000
 8018d70:	4090cbff 	.word	0x4090cbff
 8018d74:	3f6f3400 	.word	0x3f6f3400
 8018d78:	3fe00000 	.word	0x3fe00000
 8018d7c:	652b82fe 	.word	0x652b82fe
 8018d80:	3c971547 	.word	0x3c971547
 8018d84:	4090cc00 	.word	0x4090cc00

08018d88 <__ieee754_rem_pio2>:
 8018d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d8c:	ec57 6b10 	vmov	r6, r7, d0
 8018d90:	4bc5      	ldr	r3, [pc, #788]	@ (80190a8 <__ieee754_rem_pio2+0x320>)
 8018d92:	b08d      	sub	sp, #52	@ 0x34
 8018d94:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8018d98:	4598      	cmp	r8, r3
 8018d9a:	4604      	mov	r4, r0
 8018d9c:	9704      	str	r7, [sp, #16]
 8018d9e:	d807      	bhi.n	8018db0 <__ieee754_rem_pio2+0x28>
 8018da0:	2200      	movs	r2, #0
 8018da2:	2300      	movs	r3, #0
 8018da4:	ed80 0b00 	vstr	d0, [r0]
 8018da8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8018dac:	2500      	movs	r5, #0
 8018dae:	e028      	b.n	8018e02 <__ieee754_rem_pio2+0x7a>
 8018db0:	4bbe      	ldr	r3, [pc, #760]	@ (80190ac <__ieee754_rem_pio2+0x324>)
 8018db2:	4598      	cmp	r8, r3
 8018db4:	d878      	bhi.n	8018ea8 <__ieee754_rem_pio2+0x120>
 8018db6:	9b04      	ldr	r3, [sp, #16]
 8018db8:	4dbd      	ldr	r5, [pc, #756]	@ (80190b0 <__ieee754_rem_pio2+0x328>)
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	4630      	mov	r0, r6
 8018dbe:	a3ac      	add	r3, pc, #688	@ (adr r3, 8019070 <__ieee754_rem_pio2+0x2e8>)
 8018dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc4:	4639      	mov	r1, r7
 8018dc6:	dd38      	ble.n	8018e3a <__ieee754_rem_pio2+0xb2>
 8018dc8:	f7e7 fa7e 	bl	80002c8 <__aeabi_dsub>
 8018dcc:	45a8      	cmp	r8, r5
 8018dce:	4606      	mov	r6, r0
 8018dd0:	460f      	mov	r7, r1
 8018dd2:	d01a      	beq.n	8018e0a <__ieee754_rem_pio2+0x82>
 8018dd4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8019078 <__ieee754_rem_pio2+0x2f0>)
 8018dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dda:	f7e7 fa75 	bl	80002c8 <__aeabi_dsub>
 8018dde:	4602      	mov	r2, r0
 8018de0:	460b      	mov	r3, r1
 8018de2:	4680      	mov	r8, r0
 8018de4:	4689      	mov	r9, r1
 8018de6:	4630      	mov	r0, r6
 8018de8:	4639      	mov	r1, r7
 8018dea:	f7e7 fa6d 	bl	80002c8 <__aeabi_dsub>
 8018dee:	a3a2      	add	r3, pc, #648	@ (adr r3, 8019078 <__ieee754_rem_pio2+0x2f0>)
 8018df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018df4:	f7e7 fa68 	bl	80002c8 <__aeabi_dsub>
 8018df8:	e9c4 8900 	strd	r8, r9, [r4]
 8018dfc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018e00:	2501      	movs	r5, #1
 8018e02:	4628      	mov	r0, r5
 8018e04:	b00d      	add	sp, #52	@ 0x34
 8018e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e0a:	a39d      	add	r3, pc, #628	@ (adr r3, 8019080 <__ieee754_rem_pio2+0x2f8>)
 8018e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e10:	f7e7 fa5a 	bl	80002c8 <__aeabi_dsub>
 8018e14:	a39c      	add	r3, pc, #624	@ (adr r3, 8019088 <__ieee754_rem_pio2+0x300>)
 8018e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e1a:	4606      	mov	r6, r0
 8018e1c:	460f      	mov	r7, r1
 8018e1e:	f7e7 fa53 	bl	80002c8 <__aeabi_dsub>
 8018e22:	4602      	mov	r2, r0
 8018e24:	460b      	mov	r3, r1
 8018e26:	4680      	mov	r8, r0
 8018e28:	4689      	mov	r9, r1
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	4639      	mov	r1, r7
 8018e2e:	f7e7 fa4b 	bl	80002c8 <__aeabi_dsub>
 8018e32:	a395      	add	r3, pc, #596	@ (adr r3, 8019088 <__ieee754_rem_pio2+0x300>)
 8018e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e38:	e7dc      	b.n	8018df4 <__ieee754_rem_pio2+0x6c>
 8018e3a:	f7e7 fa47 	bl	80002cc <__adddf3>
 8018e3e:	45a8      	cmp	r8, r5
 8018e40:	4606      	mov	r6, r0
 8018e42:	460f      	mov	r7, r1
 8018e44:	d018      	beq.n	8018e78 <__ieee754_rem_pio2+0xf0>
 8018e46:	a38c      	add	r3, pc, #560	@ (adr r3, 8019078 <__ieee754_rem_pio2+0x2f0>)
 8018e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e4c:	f7e7 fa3e 	bl	80002cc <__adddf3>
 8018e50:	4602      	mov	r2, r0
 8018e52:	460b      	mov	r3, r1
 8018e54:	4680      	mov	r8, r0
 8018e56:	4689      	mov	r9, r1
 8018e58:	4630      	mov	r0, r6
 8018e5a:	4639      	mov	r1, r7
 8018e5c:	f7e7 fa34 	bl	80002c8 <__aeabi_dsub>
 8018e60:	a385      	add	r3, pc, #532	@ (adr r3, 8019078 <__ieee754_rem_pio2+0x2f0>)
 8018e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e66:	f7e7 fa31 	bl	80002cc <__adddf3>
 8018e6a:	f04f 35ff 	mov.w	r5, #4294967295
 8018e6e:	e9c4 8900 	strd	r8, r9, [r4]
 8018e72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018e76:	e7c4      	b.n	8018e02 <__ieee754_rem_pio2+0x7a>
 8018e78:	a381      	add	r3, pc, #516	@ (adr r3, 8019080 <__ieee754_rem_pio2+0x2f8>)
 8018e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e7e:	f7e7 fa25 	bl	80002cc <__adddf3>
 8018e82:	a381      	add	r3, pc, #516	@ (adr r3, 8019088 <__ieee754_rem_pio2+0x300>)
 8018e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e88:	4606      	mov	r6, r0
 8018e8a:	460f      	mov	r7, r1
 8018e8c:	f7e7 fa1e 	bl	80002cc <__adddf3>
 8018e90:	4602      	mov	r2, r0
 8018e92:	460b      	mov	r3, r1
 8018e94:	4680      	mov	r8, r0
 8018e96:	4689      	mov	r9, r1
 8018e98:	4630      	mov	r0, r6
 8018e9a:	4639      	mov	r1, r7
 8018e9c:	f7e7 fa14 	bl	80002c8 <__aeabi_dsub>
 8018ea0:	a379      	add	r3, pc, #484	@ (adr r3, 8019088 <__ieee754_rem_pio2+0x300>)
 8018ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ea6:	e7de      	b.n	8018e66 <__ieee754_rem_pio2+0xde>
 8018ea8:	4b82      	ldr	r3, [pc, #520]	@ (80190b4 <__ieee754_rem_pio2+0x32c>)
 8018eaa:	4598      	cmp	r8, r3
 8018eac:	f200 80d1 	bhi.w	8019052 <__ieee754_rem_pio2+0x2ca>
 8018eb0:	f000 f966 	bl	8019180 <fabs>
 8018eb4:	ec57 6b10 	vmov	r6, r7, d0
 8018eb8:	a375      	add	r3, pc, #468	@ (adr r3, 8019090 <__ieee754_rem_pio2+0x308>)
 8018eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ebe:	4630      	mov	r0, r6
 8018ec0:	4639      	mov	r1, r7
 8018ec2:	f7e7 fbb9 	bl	8000638 <__aeabi_dmul>
 8018ec6:	4b7c      	ldr	r3, [pc, #496]	@ (80190b8 <__ieee754_rem_pio2+0x330>)
 8018ec8:	2200      	movs	r2, #0
 8018eca:	f7e7 f9ff 	bl	80002cc <__adddf3>
 8018ece:	f7e7 fe63 	bl	8000b98 <__aeabi_d2iz>
 8018ed2:	4605      	mov	r5, r0
 8018ed4:	f7e7 fb46 	bl	8000564 <__aeabi_i2d>
 8018ed8:	4602      	mov	r2, r0
 8018eda:	460b      	mov	r3, r1
 8018edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018ee0:	a363      	add	r3, pc, #396	@ (adr r3, 8019070 <__ieee754_rem_pio2+0x2e8>)
 8018ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee6:	f7e7 fba7 	bl	8000638 <__aeabi_dmul>
 8018eea:	4602      	mov	r2, r0
 8018eec:	460b      	mov	r3, r1
 8018eee:	4630      	mov	r0, r6
 8018ef0:	4639      	mov	r1, r7
 8018ef2:	f7e7 f9e9 	bl	80002c8 <__aeabi_dsub>
 8018ef6:	a360      	add	r3, pc, #384	@ (adr r3, 8019078 <__ieee754_rem_pio2+0x2f0>)
 8018ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018efc:	4682      	mov	sl, r0
 8018efe:	468b      	mov	fp, r1
 8018f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018f04:	f7e7 fb98 	bl	8000638 <__aeabi_dmul>
 8018f08:	2d1f      	cmp	r5, #31
 8018f0a:	4606      	mov	r6, r0
 8018f0c:	460f      	mov	r7, r1
 8018f0e:	dc0c      	bgt.n	8018f2a <__ieee754_rem_pio2+0x1a2>
 8018f10:	4b6a      	ldr	r3, [pc, #424]	@ (80190bc <__ieee754_rem_pio2+0x334>)
 8018f12:	1e6a      	subs	r2, r5, #1
 8018f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018f18:	4543      	cmp	r3, r8
 8018f1a:	d006      	beq.n	8018f2a <__ieee754_rem_pio2+0x1a2>
 8018f1c:	4632      	mov	r2, r6
 8018f1e:	463b      	mov	r3, r7
 8018f20:	4650      	mov	r0, sl
 8018f22:	4659      	mov	r1, fp
 8018f24:	f7e7 f9d0 	bl	80002c8 <__aeabi_dsub>
 8018f28:	e00e      	b.n	8018f48 <__ieee754_rem_pio2+0x1c0>
 8018f2a:	463b      	mov	r3, r7
 8018f2c:	4632      	mov	r2, r6
 8018f2e:	4650      	mov	r0, sl
 8018f30:	4659      	mov	r1, fp
 8018f32:	f7e7 f9c9 	bl	80002c8 <__aeabi_dsub>
 8018f36:	ea4f 5328 	mov.w	r3, r8, asr #20
 8018f3a:	9305      	str	r3, [sp, #20]
 8018f3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018f40:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8018f44:	2b10      	cmp	r3, #16
 8018f46:	dc02      	bgt.n	8018f4e <__ieee754_rem_pio2+0x1c6>
 8018f48:	e9c4 0100 	strd	r0, r1, [r4]
 8018f4c:	e039      	b.n	8018fc2 <__ieee754_rem_pio2+0x23a>
 8018f4e:	a34c      	add	r3, pc, #304	@ (adr r3, 8019080 <__ieee754_rem_pio2+0x2f8>)
 8018f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018f58:	f7e7 fb6e 	bl	8000638 <__aeabi_dmul>
 8018f5c:	4606      	mov	r6, r0
 8018f5e:	460f      	mov	r7, r1
 8018f60:	4602      	mov	r2, r0
 8018f62:	460b      	mov	r3, r1
 8018f64:	4650      	mov	r0, sl
 8018f66:	4659      	mov	r1, fp
 8018f68:	f7e7 f9ae 	bl	80002c8 <__aeabi_dsub>
 8018f6c:	4602      	mov	r2, r0
 8018f6e:	460b      	mov	r3, r1
 8018f70:	4680      	mov	r8, r0
 8018f72:	4689      	mov	r9, r1
 8018f74:	4650      	mov	r0, sl
 8018f76:	4659      	mov	r1, fp
 8018f78:	f7e7 f9a6 	bl	80002c8 <__aeabi_dsub>
 8018f7c:	4632      	mov	r2, r6
 8018f7e:	463b      	mov	r3, r7
 8018f80:	f7e7 f9a2 	bl	80002c8 <__aeabi_dsub>
 8018f84:	a340      	add	r3, pc, #256	@ (adr r3, 8019088 <__ieee754_rem_pio2+0x300>)
 8018f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f8a:	4606      	mov	r6, r0
 8018f8c:	460f      	mov	r7, r1
 8018f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018f92:	f7e7 fb51 	bl	8000638 <__aeabi_dmul>
 8018f96:	4632      	mov	r2, r6
 8018f98:	463b      	mov	r3, r7
 8018f9a:	f7e7 f995 	bl	80002c8 <__aeabi_dsub>
 8018f9e:	4602      	mov	r2, r0
 8018fa0:	460b      	mov	r3, r1
 8018fa2:	4606      	mov	r6, r0
 8018fa4:	460f      	mov	r7, r1
 8018fa6:	4640      	mov	r0, r8
 8018fa8:	4649      	mov	r1, r9
 8018faa:	f7e7 f98d 	bl	80002c8 <__aeabi_dsub>
 8018fae:	9a05      	ldr	r2, [sp, #20]
 8018fb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018fb4:	1ad3      	subs	r3, r2, r3
 8018fb6:	2b31      	cmp	r3, #49	@ 0x31
 8018fb8:	dc20      	bgt.n	8018ffc <__ieee754_rem_pio2+0x274>
 8018fba:	e9c4 0100 	strd	r0, r1, [r4]
 8018fbe:	46c2      	mov	sl, r8
 8018fc0:	46cb      	mov	fp, r9
 8018fc2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8018fc6:	4650      	mov	r0, sl
 8018fc8:	4642      	mov	r2, r8
 8018fca:	464b      	mov	r3, r9
 8018fcc:	4659      	mov	r1, fp
 8018fce:	f7e7 f97b 	bl	80002c8 <__aeabi_dsub>
 8018fd2:	463b      	mov	r3, r7
 8018fd4:	4632      	mov	r2, r6
 8018fd6:	f7e7 f977 	bl	80002c8 <__aeabi_dsub>
 8018fda:	9b04      	ldr	r3, [sp, #16]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8018fe2:	f6bf af0e 	bge.w	8018e02 <__ieee754_rem_pio2+0x7a>
 8018fe6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8018fea:	6063      	str	r3, [r4, #4]
 8018fec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018ff0:	f8c4 8000 	str.w	r8, [r4]
 8018ff4:	60a0      	str	r0, [r4, #8]
 8018ff6:	60e3      	str	r3, [r4, #12]
 8018ff8:	426d      	negs	r5, r5
 8018ffa:	e702      	b.n	8018e02 <__ieee754_rem_pio2+0x7a>
 8018ffc:	a326      	add	r3, pc, #152	@ (adr r3, 8019098 <__ieee754_rem_pio2+0x310>)
 8018ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019006:	f7e7 fb17 	bl	8000638 <__aeabi_dmul>
 801900a:	4606      	mov	r6, r0
 801900c:	460f      	mov	r7, r1
 801900e:	4602      	mov	r2, r0
 8019010:	460b      	mov	r3, r1
 8019012:	4640      	mov	r0, r8
 8019014:	4649      	mov	r1, r9
 8019016:	f7e7 f957 	bl	80002c8 <__aeabi_dsub>
 801901a:	4602      	mov	r2, r0
 801901c:	460b      	mov	r3, r1
 801901e:	4682      	mov	sl, r0
 8019020:	468b      	mov	fp, r1
 8019022:	4640      	mov	r0, r8
 8019024:	4649      	mov	r1, r9
 8019026:	f7e7 f94f 	bl	80002c8 <__aeabi_dsub>
 801902a:	4632      	mov	r2, r6
 801902c:	463b      	mov	r3, r7
 801902e:	f7e7 f94b 	bl	80002c8 <__aeabi_dsub>
 8019032:	a31b      	add	r3, pc, #108	@ (adr r3, 80190a0 <__ieee754_rem_pio2+0x318>)
 8019034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019038:	4606      	mov	r6, r0
 801903a:	460f      	mov	r7, r1
 801903c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019040:	f7e7 fafa 	bl	8000638 <__aeabi_dmul>
 8019044:	4632      	mov	r2, r6
 8019046:	463b      	mov	r3, r7
 8019048:	f7e7 f93e 	bl	80002c8 <__aeabi_dsub>
 801904c:	4606      	mov	r6, r0
 801904e:	460f      	mov	r7, r1
 8019050:	e764      	b.n	8018f1c <__ieee754_rem_pio2+0x194>
 8019052:	4b1b      	ldr	r3, [pc, #108]	@ (80190c0 <__ieee754_rem_pio2+0x338>)
 8019054:	4598      	cmp	r8, r3
 8019056:	d935      	bls.n	80190c4 <__ieee754_rem_pio2+0x33c>
 8019058:	4632      	mov	r2, r6
 801905a:	463b      	mov	r3, r7
 801905c:	4630      	mov	r0, r6
 801905e:	4639      	mov	r1, r7
 8019060:	f7e7 f932 	bl	80002c8 <__aeabi_dsub>
 8019064:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019068:	e9c4 0100 	strd	r0, r1, [r4]
 801906c:	e69e      	b.n	8018dac <__ieee754_rem_pio2+0x24>
 801906e:	bf00      	nop
 8019070:	54400000 	.word	0x54400000
 8019074:	3ff921fb 	.word	0x3ff921fb
 8019078:	1a626331 	.word	0x1a626331
 801907c:	3dd0b461 	.word	0x3dd0b461
 8019080:	1a600000 	.word	0x1a600000
 8019084:	3dd0b461 	.word	0x3dd0b461
 8019088:	2e037073 	.word	0x2e037073
 801908c:	3ba3198a 	.word	0x3ba3198a
 8019090:	6dc9c883 	.word	0x6dc9c883
 8019094:	3fe45f30 	.word	0x3fe45f30
 8019098:	2e000000 	.word	0x2e000000
 801909c:	3ba3198a 	.word	0x3ba3198a
 80190a0:	252049c1 	.word	0x252049c1
 80190a4:	397b839a 	.word	0x397b839a
 80190a8:	3fe921fb 	.word	0x3fe921fb
 80190ac:	4002d97b 	.word	0x4002d97b
 80190b0:	3ff921fb 	.word	0x3ff921fb
 80190b4:	413921fb 	.word	0x413921fb
 80190b8:	3fe00000 	.word	0x3fe00000
 80190bc:	0801a3b0 	.word	0x0801a3b0
 80190c0:	7fefffff 	.word	0x7fefffff
 80190c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80190c8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80190cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80190d0:	4630      	mov	r0, r6
 80190d2:	460f      	mov	r7, r1
 80190d4:	f7e7 fd60 	bl	8000b98 <__aeabi_d2iz>
 80190d8:	f7e7 fa44 	bl	8000564 <__aeabi_i2d>
 80190dc:	4602      	mov	r2, r0
 80190de:	460b      	mov	r3, r1
 80190e0:	4630      	mov	r0, r6
 80190e2:	4639      	mov	r1, r7
 80190e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80190e8:	f7e7 f8ee 	bl	80002c8 <__aeabi_dsub>
 80190ec:	4b22      	ldr	r3, [pc, #136]	@ (8019178 <__ieee754_rem_pio2+0x3f0>)
 80190ee:	2200      	movs	r2, #0
 80190f0:	f7e7 faa2 	bl	8000638 <__aeabi_dmul>
 80190f4:	460f      	mov	r7, r1
 80190f6:	4606      	mov	r6, r0
 80190f8:	f7e7 fd4e 	bl	8000b98 <__aeabi_d2iz>
 80190fc:	f7e7 fa32 	bl	8000564 <__aeabi_i2d>
 8019100:	4602      	mov	r2, r0
 8019102:	460b      	mov	r3, r1
 8019104:	4630      	mov	r0, r6
 8019106:	4639      	mov	r1, r7
 8019108:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801910c:	f7e7 f8dc 	bl	80002c8 <__aeabi_dsub>
 8019110:	4b19      	ldr	r3, [pc, #100]	@ (8019178 <__ieee754_rem_pio2+0x3f0>)
 8019112:	2200      	movs	r2, #0
 8019114:	f7e7 fa90 	bl	8000638 <__aeabi_dmul>
 8019118:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 801911c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8019120:	f04f 0803 	mov.w	r8, #3
 8019124:	2600      	movs	r6, #0
 8019126:	2700      	movs	r7, #0
 8019128:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 801912c:	4632      	mov	r2, r6
 801912e:	463b      	mov	r3, r7
 8019130:	46c2      	mov	sl, r8
 8019132:	f108 38ff 	add.w	r8, r8, #4294967295
 8019136:	f7e7 fce7 	bl	8000b08 <__aeabi_dcmpeq>
 801913a:	2800      	cmp	r0, #0
 801913c:	d1f4      	bne.n	8019128 <__ieee754_rem_pio2+0x3a0>
 801913e:	4b0f      	ldr	r3, [pc, #60]	@ (801917c <__ieee754_rem_pio2+0x3f4>)
 8019140:	9301      	str	r3, [sp, #4]
 8019142:	2302      	movs	r3, #2
 8019144:	9300      	str	r3, [sp, #0]
 8019146:	462a      	mov	r2, r5
 8019148:	4653      	mov	r3, sl
 801914a:	4621      	mov	r1, r4
 801914c:	a806      	add	r0, sp, #24
 801914e:	f000 f9d3 	bl	80194f8 <__kernel_rem_pio2>
 8019152:	9b04      	ldr	r3, [sp, #16]
 8019154:	2b00      	cmp	r3, #0
 8019156:	4605      	mov	r5, r0
 8019158:	f6bf ae53 	bge.w	8018e02 <__ieee754_rem_pio2+0x7a>
 801915c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8019160:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019164:	e9c4 2300 	strd	r2, r3, [r4]
 8019168:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 801916c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019170:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8019174:	e740      	b.n	8018ff8 <__ieee754_rem_pio2+0x270>
 8019176:	bf00      	nop
 8019178:	41700000 	.word	0x41700000
 801917c:	0801a430 	.word	0x0801a430

08019180 <fabs>:
 8019180:	ec51 0b10 	vmov	r0, r1, d0
 8019184:	4602      	mov	r2, r0
 8019186:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801918a:	ec43 2b10 	vmov	d0, r2, r3
 801918e:	4770      	bx	lr

08019190 <__ieee754_acosf>:
 8019190:	b508      	push	{r3, lr}
 8019192:	ee10 3a10 	vmov	r3, s0
 8019196:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801919a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801919e:	ed2d 8b0c 	vpush	{d8-d13}
 80191a2:	d10a      	bne.n	80191ba <__ieee754_acosf+0x2a>
 80191a4:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 801933c <__ieee754_acosf+0x1ac>
 80191a8:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8019340 <__ieee754_acosf+0x1b0>
 80191ac:	2b00      	cmp	r3, #0
 80191ae:	bfc8      	it	gt
 80191b0:	eeb0 0a67 	vmovgt.f32	s0, s15
 80191b4:	ecbd 8b0c 	vpop	{d8-d13}
 80191b8:	bd08      	pop	{r3, pc}
 80191ba:	d904      	bls.n	80191c6 <__ieee754_acosf+0x36>
 80191bc:	ee30 8a40 	vsub.f32	s16, s0, s0
 80191c0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80191c4:	e7f6      	b.n	80191b4 <__ieee754_acosf+0x24>
 80191c6:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 80191ca:	d23c      	bcs.n	8019246 <__ieee754_acosf+0xb6>
 80191cc:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 80191d0:	f240 80b1 	bls.w	8019336 <__ieee754_acosf+0x1a6>
 80191d4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80191d8:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8019344 <__ieee754_acosf+0x1b4>
 80191dc:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8019348 <__ieee754_acosf+0x1b8>
 80191e0:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801934c <__ieee754_acosf+0x1bc>
 80191e4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80191e8:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8019350 <__ieee754_acosf+0x1c0>
 80191ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80191f0:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8019354 <__ieee754_acosf+0x1c4>
 80191f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80191f8:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8019358 <__ieee754_acosf+0x1c8>
 80191fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019200:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801935c <__ieee754_acosf+0x1cc>
 8019204:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019208:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8019360 <__ieee754_acosf+0x1d0>
 801920c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019210:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8019364 <__ieee754_acosf+0x1d4>
 8019214:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019218:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8019368 <__ieee754_acosf+0x1d8>
 801921c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019220:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019224:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019228:	ee27 7a27 	vmul.f32	s14, s14, s15
 801922c:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801936c <__ieee754_acosf+0x1dc>
 8019230:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8019234:	eee0 7a46 	vfms.f32	s15, s0, s12
 8019238:	ee70 7a67 	vsub.f32	s15, s0, s15
 801923c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8019370 <__ieee754_acosf+0x1e0>
 8019240:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019244:	e7b6      	b.n	80191b4 <__ieee754_acosf+0x24>
 8019246:	2b00      	cmp	r3, #0
 8019248:	eddf da3e 	vldr	s27, [pc, #248]	@ 8019344 <__ieee754_acosf+0x1b4>
 801924c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8019348 <__ieee754_acosf+0x1b8>
 8019250:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8019350 <__ieee754_acosf+0x1c0>
 8019254:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8019354 <__ieee754_acosf+0x1c4>
 8019258:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8019358 <__ieee754_acosf+0x1c8>
 801925c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801935c <__ieee754_acosf+0x1cc>
 8019260:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8019360 <__ieee754_acosf+0x1d0>
 8019264:	eddf aa39 	vldr	s21, [pc, #228]	@ 801934c <__ieee754_acosf+0x1bc>
 8019268:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8019364 <__ieee754_acosf+0x1d4>
 801926c:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8019368 <__ieee754_acosf+0x1d8>
 8019270:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8019274:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019278:	da28      	bge.n	80192cc <__ieee754_acosf+0x13c>
 801927a:	ee30 8a09 	vadd.f32	s16, s0, s18
 801927e:	ee28 0a27 	vmul.f32	s0, s16, s15
 8019282:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8019286:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801928a:	eeac ca80 	vfma.f32	s24, s25, s0
 801928e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8019292:	eeec ba00 	vfma.f32	s23, s24, s0
 8019296:	eeea 9a00 	vfma.f32	s19, s20, s0
 801929a:	eeab ba80 	vfma.f32	s22, s23, s0
 801929e:	eea9 9a80 	vfma.f32	s18, s19, s0
 80192a2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80192a6:	ee68 8a80 	vmul.f32	s17, s17, s0
 80192aa:	f7fe fe25 	bl	8017ef8 <__ieee754_sqrtf>
 80192ae:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80192b2:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8019374 <__ieee754_acosf+0x1e4>
 80192b6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80192ba:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80192be:	ee77 7a80 	vadd.f32	s15, s15, s0
 80192c2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8019378 <__ieee754_acosf+0x1e8>
 80192c6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80192ca:	e773      	b.n	80191b4 <__ieee754_acosf+0x24>
 80192cc:	ee39 8a40 	vsub.f32	s16, s18, s0
 80192d0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80192d4:	eeb0 0a48 	vmov.f32	s0, s16
 80192d8:	f7fe fe0e 	bl	8017ef8 <__ieee754_sqrtf>
 80192dc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80192e0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80192e4:	eeac ca88 	vfma.f32	s24, s25, s16
 80192e8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80192ec:	eeec ba08 	vfma.f32	s23, s24, s16
 80192f0:	ee10 3a10 	vmov	r3, s0
 80192f4:	eeab ba88 	vfma.f32	s22, s23, s16
 80192f8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80192fc:	f023 030f 	bic.w	r3, r3, #15
 8019300:	eeea 9a08 	vfma.f32	s19, s20, s16
 8019304:	ee07 3a90 	vmov	s15, r3
 8019308:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801930c:	eeb0 6a48 	vmov.f32	s12, s16
 8019310:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8019314:	eea9 9a88 	vfma.f32	s18, s19, s16
 8019318:	ee70 6a27 	vadd.f32	s13, s0, s15
 801931c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8019320:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019324:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8019328:	eea0 7a26 	vfma.f32	s14, s0, s13
 801932c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019330:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019334:	e73e      	b.n	80191b4 <__ieee754_acosf+0x24>
 8019336:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801937c <__ieee754_acosf+0x1ec>
 801933a:	e73b      	b.n	80191b4 <__ieee754_acosf+0x24>
 801933c:	40490fdb 	.word	0x40490fdb
 8019340:	00000000 	.word	0x00000000
 8019344:	3811ef08 	.word	0x3811ef08
 8019348:	3a4f7f04 	.word	0x3a4f7f04
 801934c:	bf303361 	.word	0xbf303361
 8019350:	bd241146 	.word	0xbd241146
 8019354:	3e4e0aa8 	.word	0x3e4e0aa8
 8019358:	bea6b090 	.word	0xbea6b090
 801935c:	3e2aaaab 	.word	0x3e2aaaab
 8019360:	3d9dc62e 	.word	0x3d9dc62e
 8019364:	4001572d 	.word	0x4001572d
 8019368:	c019d139 	.word	0xc019d139
 801936c:	33a22168 	.word	0x33a22168
 8019370:	3fc90fda 	.word	0x3fc90fda
 8019374:	b3a22168 	.word	0xb3a22168
 8019378:	40490fda 	.word	0x40490fda
 801937c:	3fc90fdb 	.word	0x3fc90fdb

08019380 <scalbn>:
 8019380:	b570      	push	{r4, r5, r6, lr}
 8019382:	ec55 4b10 	vmov	r4, r5, d0
 8019386:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801938a:	4606      	mov	r6, r0
 801938c:	462b      	mov	r3, r5
 801938e:	b991      	cbnz	r1, 80193b6 <scalbn+0x36>
 8019390:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8019394:	4323      	orrs	r3, r4
 8019396:	d03d      	beq.n	8019414 <scalbn+0x94>
 8019398:	4b35      	ldr	r3, [pc, #212]	@ (8019470 <scalbn+0xf0>)
 801939a:	4620      	mov	r0, r4
 801939c:	4629      	mov	r1, r5
 801939e:	2200      	movs	r2, #0
 80193a0:	f7e7 f94a 	bl	8000638 <__aeabi_dmul>
 80193a4:	4b33      	ldr	r3, [pc, #204]	@ (8019474 <scalbn+0xf4>)
 80193a6:	429e      	cmp	r6, r3
 80193a8:	4604      	mov	r4, r0
 80193aa:	460d      	mov	r5, r1
 80193ac:	da0f      	bge.n	80193ce <scalbn+0x4e>
 80193ae:	a328      	add	r3, pc, #160	@ (adr r3, 8019450 <scalbn+0xd0>)
 80193b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b4:	e01e      	b.n	80193f4 <scalbn+0x74>
 80193b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80193ba:	4291      	cmp	r1, r2
 80193bc:	d10b      	bne.n	80193d6 <scalbn+0x56>
 80193be:	4622      	mov	r2, r4
 80193c0:	4620      	mov	r0, r4
 80193c2:	4629      	mov	r1, r5
 80193c4:	f7e6 ff82 	bl	80002cc <__adddf3>
 80193c8:	4604      	mov	r4, r0
 80193ca:	460d      	mov	r5, r1
 80193cc:	e022      	b.n	8019414 <scalbn+0x94>
 80193ce:	460b      	mov	r3, r1
 80193d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80193d4:	3936      	subs	r1, #54	@ 0x36
 80193d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80193da:	4296      	cmp	r6, r2
 80193dc:	dd0d      	ble.n	80193fa <scalbn+0x7a>
 80193de:	2d00      	cmp	r5, #0
 80193e0:	a11d      	add	r1, pc, #116	@ (adr r1, 8019458 <scalbn+0xd8>)
 80193e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193e6:	da02      	bge.n	80193ee <scalbn+0x6e>
 80193e8:	a11d      	add	r1, pc, #116	@ (adr r1, 8019460 <scalbn+0xe0>)
 80193ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80193ee:	a31a      	add	r3, pc, #104	@ (adr r3, 8019458 <scalbn+0xd8>)
 80193f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f4:	f7e7 f920 	bl	8000638 <__aeabi_dmul>
 80193f8:	e7e6      	b.n	80193c8 <scalbn+0x48>
 80193fa:	1872      	adds	r2, r6, r1
 80193fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8019400:	428a      	cmp	r2, r1
 8019402:	dcec      	bgt.n	80193de <scalbn+0x5e>
 8019404:	2a00      	cmp	r2, #0
 8019406:	dd08      	ble.n	801941a <scalbn+0x9a>
 8019408:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801940c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8019410:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019414:	ec45 4b10 	vmov	d0, r4, r5
 8019418:	bd70      	pop	{r4, r5, r6, pc}
 801941a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 801941e:	da08      	bge.n	8019432 <scalbn+0xb2>
 8019420:	2d00      	cmp	r5, #0
 8019422:	a10b      	add	r1, pc, #44	@ (adr r1, 8019450 <scalbn+0xd0>)
 8019424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019428:	dac1      	bge.n	80193ae <scalbn+0x2e>
 801942a:	a10f      	add	r1, pc, #60	@ (adr r1, 8019468 <scalbn+0xe8>)
 801942c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019430:	e7bd      	b.n	80193ae <scalbn+0x2e>
 8019432:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019436:	3236      	adds	r2, #54	@ 0x36
 8019438:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801943c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019440:	4620      	mov	r0, r4
 8019442:	4b0d      	ldr	r3, [pc, #52]	@ (8019478 <scalbn+0xf8>)
 8019444:	4629      	mov	r1, r5
 8019446:	2200      	movs	r2, #0
 8019448:	e7d4      	b.n	80193f4 <scalbn+0x74>
 801944a:	bf00      	nop
 801944c:	f3af 8000 	nop.w
 8019450:	c2f8f359 	.word	0xc2f8f359
 8019454:	01a56e1f 	.word	0x01a56e1f
 8019458:	8800759c 	.word	0x8800759c
 801945c:	7e37e43c 	.word	0x7e37e43c
 8019460:	8800759c 	.word	0x8800759c
 8019464:	fe37e43c 	.word	0xfe37e43c
 8019468:	c2f8f359 	.word	0xc2f8f359
 801946c:	81a56e1f 	.word	0x81a56e1f
 8019470:	43500000 	.word	0x43500000
 8019474:	ffff3cb0 	.word	0xffff3cb0
 8019478:	3c900000 	.word	0x3c900000

0801947c <with_errno>:
 801947c:	b510      	push	{r4, lr}
 801947e:	ed2d 8b02 	vpush	{d8}
 8019482:	eeb0 8a40 	vmov.f32	s16, s0
 8019486:	eef0 8a60 	vmov.f32	s17, s1
 801948a:	4604      	mov	r4, r0
 801948c:	f7fa fc04 	bl	8013c98 <__errno>
 8019490:	eeb0 0a48 	vmov.f32	s0, s16
 8019494:	eef0 0a68 	vmov.f32	s1, s17
 8019498:	ecbd 8b02 	vpop	{d8}
 801949c:	6004      	str	r4, [r0, #0]
 801949e:	bd10      	pop	{r4, pc}

080194a0 <xflow>:
 80194a0:	4603      	mov	r3, r0
 80194a2:	b507      	push	{r0, r1, r2, lr}
 80194a4:	ec51 0b10 	vmov	r0, r1, d0
 80194a8:	b183      	cbz	r3, 80194cc <xflow+0x2c>
 80194aa:	4602      	mov	r2, r0
 80194ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80194b0:	e9cd 2300 	strd	r2, r3, [sp]
 80194b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80194b8:	f7e7 f8be 	bl	8000638 <__aeabi_dmul>
 80194bc:	ec41 0b10 	vmov	d0, r0, r1
 80194c0:	2022      	movs	r0, #34	@ 0x22
 80194c2:	b003      	add	sp, #12
 80194c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80194c8:	f7ff bfd8 	b.w	801947c <with_errno>
 80194cc:	4602      	mov	r2, r0
 80194ce:	460b      	mov	r3, r1
 80194d0:	e7ee      	b.n	80194b0 <xflow+0x10>
 80194d2:	0000      	movs	r0, r0
 80194d4:	0000      	movs	r0, r0
	...

080194d8 <__math_uflow>:
 80194d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80194e0 <__math_uflow+0x8>
 80194dc:	f7ff bfe0 	b.w	80194a0 <xflow>
 80194e0:	00000000 	.word	0x00000000
 80194e4:	10000000 	.word	0x10000000

080194e8 <__math_oflow>:
 80194e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80194f0 <__math_oflow+0x8>
 80194ec:	f7ff bfd8 	b.w	80194a0 <xflow>
 80194f0:	00000000 	.word	0x00000000
 80194f4:	70000000 	.word	0x70000000

080194f8 <__kernel_rem_pio2>:
 80194f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194fc:	ed2d 8b02 	vpush	{d8}
 8019500:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8019504:	f112 0f14 	cmn.w	r2, #20
 8019508:	9306      	str	r3, [sp, #24]
 801950a:	9104      	str	r1, [sp, #16]
 801950c:	4bbe      	ldr	r3, [pc, #760]	@ (8019808 <__kernel_rem_pio2+0x310>)
 801950e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8019510:	9008      	str	r0, [sp, #32]
 8019512:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019516:	9300      	str	r3, [sp, #0]
 8019518:	9b06      	ldr	r3, [sp, #24]
 801951a:	f103 33ff 	add.w	r3, r3, #4294967295
 801951e:	bfa8      	it	ge
 8019520:	1ed4      	subge	r4, r2, #3
 8019522:	9305      	str	r3, [sp, #20]
 8019524:	bfb2      	itee	lt
 8019526:	2400      	movlt	r4, #0
 8019528:	2318      	movge	r3, #24
 801952a:	fb94 f4f3 	sdivge	r4, r4, r3
 801952e:	f06f 0317 	mvn.w	r3, #23
 8019532:	fb04 3303 	mla	r3, r4, r3, r3
 8019536:	eb03 0b02 	add.w	fp, r3, r2
 801953a:	9b00      	ldr	r3, [sp, #0]
 801953c:	9a05      	ldr	r2, [sp, #20]
 801953e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80197f8 <__kernel_rem_pio2+0x300>
 8019542:	eb03 0802 	add.w	r8, r3, r2
 8019546:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8019548:	1aa7      	subs	r7, r4, r2
 801954a:	ae20      	add	r6, sp, #128	@ 0x80
 801954c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019550:	2500      	movs	r5, #0
 8019552:	4545      	cmp	r5, r8
 8019554:	dd13      	ble.n	801957e <__kernel_rem_pio2+0x86>
 8019556:	9b06      	ldr	r3, [sp, #24]
 8019558:	aa20      	add	r2, sp, #128	@ 0x80
 801955a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801955e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8019562:	f04f 0800 	mov.w	r8, #0
 8019566:	9b00      	ldr	r3, [sp, #0]
 8019568:	4598      	cmp	r8, r3
 801956a:	dc31      	bgt.n	80195d0 <__kernel_rem_pio2+0xd8>
 801956c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80197f8 <__kernel_rem_pio2+0x300>
 8019570:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019574:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019578:	462f      	mov	r7, r5
 801957a:	2600      	movs	r6, #0
 801957c:	e01b      	b.n	80195b6 <__kernel_rem_pio2+0xbe>
 801957e:	42ef      	cmn	r7, r5
 8019580:	d407      	bmi.n	8019592 <__kernel_rem_pio2+0x9a>
 8019582:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019586:	f7e6 ffed 	bl	8000564 <__aeabi_i2d>
 801958a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801958e:	3501      	adds	r5, #1
 8019590:	e7df      	b.n	8019552 <__kernel_rem_pio2+0x5a>
 8019592:	ec51 0b18 	vmov	r0, r1, d8
 8019596:	e7f8      	b.n	801958a <__kernel_rem_pio2+0x92>
 8019598:	e9d7 2300 	ldrd	r2, r3, [r7]
 801959c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80195a0:	f7e7 f84a 	bl	8000638 <__aeabi_dmul>
 80195a4:	4602      	mov	r2, r0
 80195a6:	460b      	mov	r3, r1
 80195a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80195ac:	f7e6 fe8e 	bl	80002cc <__adddf3>
 80195b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80195b4:	3601      	adds	r6, #1
 80195b6:	9b05      	ldr	r3, [sp, #20]
 80195b8:	429e      	cmp	r6, r3
 80195ba:	f1a7 0708 	sub.w	r7, r7, #8
 80195be:	ddeb      	ble.n	8019598 <__kernel_rem_pio2+0xa0>
 80195c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80195c4:	f108 0801 	add.w	r8, r8, #1
 80195c8:	ecaa 7b02 	vstmia	sl!, {d7}
 80195cc:	3508      	adds	r5, #8
 80195ce:	e7ca      	b.n	8019566 <__kernel_rem_pio2+0x6e>
 80195d0:	9b00      	ldr	r3, [sp, #0]
 80195d2:	f8dd 8000 	ldr.w	r8, [sp]
 80195d6:	aa0c      	add	r2, sp, #48	@ 0x30
 80195d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80195dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80195de:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80195e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80195e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80195e6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80195ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80195ec:	ab98      	add	r3, sp, #608	@ 0x260
 80195ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80195f2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80195f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80195fa:	ac0c      	add	r4, sp, #48	@ 0x30
 80195fc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80195fe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8019602:	46a1      	mov	r9, r4
 8019604:	46c2      	mov	sl, r8
 8019606:	f1ba 0f00 	cmp.w	sl, #0
 801960a:	f1a5 0508 	sub.w	r5, r5, #8
 801960e:	dc77      	bgt.n	8019700 <__kernel_rem_pio2+0x208>
 8019610:	4658      	mov	r0, fp
 8019612:	ed9d 0b02 	vldr	d0, [sp, #8]
 8019616:	f7ff feb3 	bl	8019380 <scalbn>
 801961a:	ec57 6b10 	vmov	r6, r7, d0
 801961e:	2200      	movs	r2, #0
 8019620:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8019624:	4630      	mov	r0, r6
 8019626:	4639      	mov	r1, r7
 8019628:	f7e7 f806 	bl	8000638 <__aeabi_dmul>
 801962c:	ec41 0b10 	vmov	d0, r0, r1
 8019630:	f7fe fc66 	bl	8017f00 <floor>
 8019634:	4b75      	ldr	r3, [pc, #468]	@ (801980c <__kernel_rem_pio2+0x314>)
 8019636:	ec51 0b10 	vmov	r0, r1, d0
 801963a:	2200      	movs	r2, #0
 801963c:	f7e6 fffc 	bl	8000638 <__aeabi_dmul>
 8019640:	4602      	mov	r2, r0
 8019642:	460b      	mov	r3, r1
 8019644:	4630      	mov	r0, r6
 8019646:	4639      	mov	r1, r7
 8019648:	f7e6 fe3e 	bl	80002c8 <__aeabi_dsub>
 801964c:	460f      	mov	r7, r1
 801964e:	4606      	mov	r6, r0
 8019650:	f7e7 faa2 	bl	8000b98 <__aeabi_d2iz>
 8019654:	9002      	str	r0, [sp, #8]
 8019656:	f7e6 ff85 	bl	8000564 <__aeabi_i2d>
 801965a:	4602      	mov	r2, r0
 801965c:	460b      	mov	r3, r1
 801965e:	4630      	mov	r0, r6
 8019660:	4639      	mov	r1, r7
 8019662:	f7e6 fe31 	bl	80002c8 <__aeabi_dsub>
 8019666:	f1bb 0f00 	cmp.w	fp, #0
 801966a:	4606      	mov	r6, r0
 801966c:	460f      	mov	r7, r1
 801966e:	dd6c      	ble.n	801974a <__kernel_rem_pio2+0x252>
 8019670:	f108 31ff 	add.w	r1, r8, #4294967295
 8019674:	ab0c      	add	r3, sp, #48	@ 0x30
 8019676:	9d02      	ldr	r5, [sp, #8]
 8019678:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801967c:	f1cb 0018 	rsb	r0, fp, #24
 8019680:	fa43 f200 	asr.w	r2, r3, r0
 8019684:	4415      	add	r5, r2
 8019686:	4082      	lsls	r2, r0
 8019688:	1a9b      	subs	r3, r3, r2
 801968a:	aa0c      	add	r2, sp, #48	@ 0x30
 801968c:	9502      	str	r5, [sp, #8]
 801968e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019692:	f1cb 0217 	rsb	r2, fp, #23
 8019696:	fa43 f902 	asr.w	r9, r3, r2
 801969a:	f1b9 0f00 	cmp.w	r9, #0
 801969e:	dd64      	ble.n	801976a <__kernel_rem_pio2+0x272>
 80196a0:	9b02      	ldr	r3, [sp, #8]
 80196a2:	2200      	movs	r2, #0
 80196a4:	3301      	adds	r3, #1
 80196a6:	9302      	str	r3, [sp, #8]
 80196a8:	4615      	mov	r5, r2
 80196aa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80196ae:	4590      	cmp	r8, r2
 80196b0:	f300 80b8 	bgt.w	8019824 <__kernel_rem_pio2+0x32c>
 80196b4:	f1bb 0f00 	cmp.w	fp, #0
 80196b8:	dd07      	ble.n	80196ca <__kernel_rem_pio2+0x1d2>
 80196ba:	f1bb 0f01 	cmp.w	fp, #1
 80196be:	f000 80bf 	beq.w	8019840 <__kernel_rem_pio2+0x348>
 80196c2:	f1bb 0f02 	cmp.w	fp, #2
 80196c6:	f000 80c6 	beq.w	8019856 <__kernel_rem_pio2+0x35e>
 80196ca:	f1b9 0f02 	cmp.w	r9, #2
 80196ce:	d14c      	bne.n	801976a <__kernel_rem_pio2+0x272>
 80196d0:	4632      	mov	r2, r6
 80196d2:	463b      	mov	r3, r7
 80196d4:	494e      	ldr	r1, [pc, #312]	@ (8019810 <__kernel_rem_pio2+0x318>)
 80196d6:	2000      	movs	r0, #0
 80196d8:	f7e6 fdf6 	bl	80002c8 <__aeabi_dsub>
 80196dc:	4606      	mov	r6, r0
 80196de:	460f      	mov	r7, r1
 80196e0:	2d00      	cmp	r5, #0
 80196e2:	d042      	beq.n	801976a <__kernel_rem_pio2+0x272>
 80196e4:	4658      	mov	r0, fp
 80196e6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8019800 <__kernel_rem_pio2+0x308>
 80196ea:	f7ff fe49 	bl	8019380 <scalbn>
 80196ee:	4630      	mov	r0, r6
 80196f0:	4639      	mov	r1, r7
 80196f2:	ec53 2b10 	vmov	r2, r3, d0
 80196f6:	f7e6 fde7 	bl	80002c8 <__aeabi_dsub>
 80196fa:	4606      	mov	r6, r0
 80196fc:	460f      	mov	r7, r1
 80196fe:	e034      	b.n	801976a <__kernel_rem_pio2+0x272>
 8019700:	4b44      	ldr	r3, [pc, #272]	@ (8019814 <__kernel_rem_pio2+0x31c>)
 8019702:	2200      	movs	r2, #0
 8019704:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019708:	f7e6 ff96 	bl	8000638 <__aeabi_dmul>
 801970c:	f7e7 fa44 	bl	8000b98 <__aeabi_d2iz>
 8019710:	f7e6 ff28 	bl	8000564 <__aeabi_i2d>
 8019714:	4b40      	ldr	r3, [pc, #256]	@ (8019818 <__kernel_rem_pio2+0x320>)
 8019716:	2200      	movs	r2, #0
 8019718:	4606      	mov	r6, r0
 801971a:	460f      	mov	r7, r1
 801971c:	f7e6 ff8c 	bl	8000638 <__aeabi_dmul>
 8019720:	4602      	mov	r2, r0
 8019722:	460b      	mov	r3, r1
 8019724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019728:	f7e6 fdce 	bl	80002c8 <__aeabi_dsub>
 801972c:	f7e7 fa34 	bl	8000b98 <__aeabi_d2iz>
 8019730:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019734:	f849 0b04 	str.w	r0, [r9], #4
 8019738:	4639      	mov	r1, r7
 801973a:	4630      	mov	r0, r6
 801973c:	f7e6 fdc6 	bl	80002cc <__adddf3>
 8019740:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019748:	e75d      	b.n	8019606 <__kernel_rem_pio2+0x10e>
 801974a:	d107      	bne.n	801975c <__kernel_rem_pio2+0x264>
 801974c:	f108 33ff 	add.w	r3, r8, #4294967295
 8019750:	aa0c      	add	r2, sp, #48	@ 0x30
 8019752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019756:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801975a:	e79e      	b.n	801969a <__kernel_rem_pio2+0x1a2>
 801975c:	4b2f      	ldr	r3, [pc, #188]	@ (801981c <__kernel_rem_pio2+0x324>)
 801975e:	2200      	movs	r2, #0
 8019760:	f7e7 f9f0 	bl	8000b44 <__aeabi_dcmpge>
 8019764:	2800      	cmp	r0, #0
 8019766:	d143      	bne.n	80197f0 <__kernel_rem_pio2+0x2f8>
 8019768:	4681      	mov	r9, r0
 801976a:	2200      	movs	r2, #0
 801976c:	2300      	movs	r3, #0
 801976e:	4630      	mov	r0, r6
 8019770:	4639      	mov	r1, r7
 8019772:	f7e7 f9c9 	bl	8000b08 <__aeabi_dcmpeq>
 8019776:	2800      	cmp	r0, #0
 8019778:	f000 80bf 	beq.w	80198fa <__kernel_rem_pio2+0x402>
 801977c:	f108 33ff 	add.w	r3, r8, #4294967295
 8019780:	2200      	movs	r2, #0
 8019782:	9900      	ldr	r1, [sp, #0]
 8019784:	428b      	cmp	r3, r1
 8019786:	da6e      	bge.n	8019866 <__kernel_rem_pio2+0x36e>
 8019788:	2a00      	cmp	r2, #0
 801978a:	f000 8089 	beq.w	80198a0 <__kernel_rem_pio2+0x3a8>
 801978e:	f108 38ff 	add.w	r8, r8, #4294967295
 8019792:	ab0c      	add	r3, sp, #48	@ 0x30
 8019794:	f1ab 0b18 	sub.w	fp, fp, #24
 8019798:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 801979c:	2b00      	cmp	r3, #0
 801979e:	d0f6      	beq.n	801978e <__kernel_rem_pio2+0x296>
 80197a0:	4658      	mov	r0, fp
 80197a2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8019800 <__kernel_rem_pio2+0x308>
 80197a6:	f7ff fdeb 	bl	8019380 <scalbn>
 80197aa:	f108 0301 	add.w	r3, r8, #1
 80197ae:	00da      	lsls	r2, r3, #3
 80197b0:	9205      	str	r2, [sp, #20]
 80197b2:	ec55 4b10 	vmov	r4, r5, d0
 80197b6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80197b8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8019814 <__kernel_rem_pio2+0x31c>
 80197bc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80197c0:	4646      	mov	r6, r8
 80197c2:	f04f 0a00 	mov.w	sl, #0
 80197c6:	2e00      	cmp	r6, #0
 80197c8:	f280 80cf 	bge.w	801996a <__kernel_rem_pio2+0x472>
 80197cc:	4644      	mov	r4, r8
 80197ce:	2c00      	cmp	r4, #0
 80197d0:	f2c0 80fd 	blt.w	80199ce <__kernel_rem_pio2+0x4d6>
 80197d4:	4b12      	ldr	r3, [pc, #72]	@ (8019820 <__kernel_rem_pio2+0x328>)
 80197d6:	461f      	mov	r7, r3
 80197d8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80197da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80197de:	9306      	str	r3, [sp, #24]
 80197e0:	f04f 0a00 	mov.w	sl, #0
 80197e4:	f04f 0b00 	mov.w	fp, #0
 80197e8:	2600      	movs	r6, #0
 80197ea:	eba8 0504 	sub.w	r5, r8, r4
 80197ee:	e0e2      	b.n	80199b6 <__kernel_rem_pio2+0x4be>
 80197f0:	f04f 0902 	mov.w	r9, #2
 80197f4:	e754      	b.n	80196a0 <__kernel_rem_pio2+0x1a8>
 80197f6:	bf00      	nop
	...
 8019804:	3ff00000 	.word	0x3ff00000
 8019808:	0801a578 	.word	0x0801a578
 801980c:	40200000 	.word	0x40200000
 8019810:	3ff00000 	.word	0x3ff00000
 8019814:	3e700000 	.word	0x3e700000
 8019818:	41700000 	.word	0x41700000
 801981c:	3fe00000 	.word	0x3fe00000
 8019820:	0801a538 	.word	0x0801a538
 8019824:	f854 3b04 	ldr.w	r3, [r4], #4
 8019828:	b945      	cbnz	r5, 801983c <__kernel_rem_pio2+0x344>
 801982a:	b123      	cbz	r3, 8019836 <__kernel_rem_pio2+0x33e>
 801982c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8019830:	f844 3c04 	str.w	r3, [r4, #-4]
 8019834:	2301      	movs	r3, #1
 8019836:	3201      	adds	r2, #1
 8019838:	461d      	mov	r5, r3
 801983a:	e738      	b.n	80196ae <__kernel_rem_pio2+0x1b6>
 801983c:	1acb      	subs	r3, r1, r3
 801983e:	e7f7      	b.n	8019830 <__kernel_rem_pio2+0x338>
 8019840:	f108 32ff 	add.w	r2, r8, #4294967295
 8019844:	ab0c      	add	r3, sp, #48	@ 0x30
 8019846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801984a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801984e:	a90c      	add	r1, sp, #48	@ 0x30
 8019850:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8019854:	e739      	b.n	80196ca <__kernel_rem_pio2+0x1d2>
 8019856:	f108 32ff 	add.w	r2, r8, #4294967295
 801985a:	ab0c      	add	r3, sp, #48	@ 0x30
 801985c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019860:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8019864:	e7f3      	b.n	801984e <__kernel_rem_pio2+0x356>
 8019866:	a90c      	add	r1, sp, #48	@ 0x30
 8019868:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801986c:	3b01      	subs	r3, #1
 801986e:	430a      	orrs	r2, r1
 8019870:	e787      	b.n	8019782 <__kernel_rem_pio2+0x28a>
 8019872:	3401      	adds	r4, #1
 8019874:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019878:	2a00      	cmp	r2, #0
 801987a:	d0fa      	beq.n	8019872 <__kernel_rem_pio2+0x37a>
 801987c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801987e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8019882:	eb0d 0503 	add.w	r5, sp, r3
 8019886:	9b06      	ldr	r3, [sp, #24]
 8019888:	aa20      	add	r2, sp, #128	@ 0x80
 801988a:	4443      	add	r3, r8
 801988c:	f108 0701 	add.w	r7, r8, #1
 8019890:	3d98      	subs	r5, #152	@ 0x98
 8019892:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8019896:	4444      	add	r4, r8
 8019898:	42bc      	cmp	r4, r7
 801989a:	da04      	bge.n	80198a6 <__kernel_rem_pio2+0x3ae>
 801989c:	46a0      	mov	r8, r4
 801989e:	e6a2      	b.n	80195e6 <__kernel_rem_pio2+0xee>
 80198a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80198a2:	2401      	movs	r4, #1
 80198a4:	e7e6      	b.n	8019874 <__kernel_rem_pio2+0x37c>
 80198a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198a8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80198ac:	f7e6 fe5a 	bl	8000564 <__aeabi_i2d>
 80198b0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8019b78 <__kernel_rem_pio2+0x680>
 80198b4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80198b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80198bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80198c0:	46b2      	mov	sl, r6
 80198c2:	f04f 0800 	mov.w	r8, #0
 80198c6:	9b05      	ldr	r3, [sp, #20]
 80198c8:	4598      	cmp	r8, r3
 80198ca:	dd05      	ble.n	80198d8 <__kernel_rem_pio2+0x3e0>
 80198cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198d0:	3701      	adds	r7, #1
 80198d2:	eca5 7b02 	vstmia	r5!, {d7}
 80198d6:	e7df      	b.n	8019898 <__kernel_rem_pio2+0x3a0>
 80198d8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80198dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80198e0:	f7e6 feaa 	bl	8000638 <__aeabi_dmul>
 80198e4:	4602      	mov	r2, r0
 80198e6:	460b      	mov	r3, r1
 80198e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80198ec:	f7e6 fcee 	bl	80002cc <__adddf3>
 80198f0:	f108 0801 	add.w	r8, r8, #1
 80198f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198f8:	e7e5      	b.n	80198c6 <__kernel_rem_pio2+0x3ce>
 80198fa:	f1cb 0000 	rsb	r0, fp, #0
 80198fe:	ec47 6b10 	vmov	d0, r6, r7
 8019902:	f7ff fd3d 	bl	8019380 <scalbn>
 8019906:	ec55 4b10 	vmov	r4, r5, d0
 801990a:	4b9d      	ldr	r3, [pc, #628]	@ (8019b80 <__kernel_rem_pio2+0x688>)
 801990c:	2200      	movs	r2, #0
 801990e:	4620      	mov	r0, r4
 8019910:	4629      	mov	r1, r5
 8019912:	f7e7 f917 	bl	8000b44 <__aeabi_dcmpge>
 8019916:	b300      	cbz	r0, 801995a <__kernel_rem_pio2+0x462>
 8019918:	4b9a      	ldr	r3, [pc, #616]	@ (8019b84 <__kernel_rem_pio2+0x68c>)
 801991a:	2200      	movs	r2, #0
 801991c:	4620      	mov	r0, r4
 801991e:	4629      	mov	r1, r5
 8019920:	f7e6 fe8a 	bl	8000638 <__aeabi_dmul>
 8019924:	f7e7 f938 	bl	8000b98 <__aeabi_d2iz>
 8019928:	4606      	mov	r6, r0
 801992a:	f7e6 fe1b 	bl	8000564 <__aeabi_i2d>
 801992e:	4b94      	ldr	r3, [pc, #592]	@ (8019b80 <__kernel_rem_pio2+0x688>)
 8019930:	2200      	movs	r2, #0
 8019932:	f7e6 fe81 	bl	8000638 <__aeabi_dmul>
 8019936:	460b      	mov	r3, r1
 8019938:	4602      	mov	r2, r0
 801993a:	4629      	mov	r1, r5
 801993c:	4620      	mov	r0, r4
 801993e:	f7e6 fcc3 	bl	80002c8 <__aeabi_dsub>
 8019942:	f7e7 f929 	bl	8000b98 <__aeabi_d2iz>
 8019946:	ab0c      	add	r3, sp, #48	@ 0x30
 8019948:	f10b 0b18 	add.w	fp, fp, #24
 801994c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8019950:	f108 0801 	add.w	r8, r8, #1
 8019954:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8019958:	e722      	b.n	80197a0 <__kernel_rem_pio2+0x2a8>
 801995a:	4620      	mov	r0, r4
 801995c:	4629      	mov	r1, r5
 801995e:	f7e7 f91b 	bl	8000b98 <__aeabi_d2iz>
 8019962:	ab0c      	add	r3, sp, #48	@ 0x30
 8019964:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8019968:	e71a      	b.n	80197a0 <__kernel_rem_pio2+0x2a8>
 801996a:	ab0c      	add	r3, sp, #48	@ 0x30
 801996c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8019970:	f7e6 fdf8 	bl	8000564 <__aeabi_i2d>
 8019974:	4622      	mov	r2, r4
 8019976:	462b      	mov	r3, r5
 8019978:	f7e6 fe5e 	bl	8000638 <__aeabi_dmul>
 801997c:	4652      	mov	r2, sl
 801997e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8019982:	465b      	mov	r3, fp
 8019984:	4620      	mov	r0, r4
 8019986:	4629      	mov	r1, r5
 8019988:	f7e6 fe56 	bl	8000638 <__aeabi_dmul>
 801998c:	3e01      	subs	r6, #1
 801998e:	4604      	mov	r4, r0
 8019990:	460d      	mov	r5, r1
 8019992:	e718      	b.n	80197c6 <__kernel_rem_pio2+0x2ce>
 8019994:	9906      	ldr	r1, [sp, #24]
 8019996:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 801999a:	9106      	str	r1, [sp, #24]
 801999c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80199a0:	f7e6 fe4a 	bl	8000638 <__aeabi_dmul>
 80199a4:	4602      	mov	r2, r0
 80199a6:	460b      	mov	r3, r1
 80199a8:	4650      	mov	r0, sl
 80199aa:	4659      	mov	r1, fp
 80199ac:	f7e6 fc8e 	bl	80002cc <__adddf3>
 80199b0:	3601      	adds	r6, #1
 80199b2:	4682      	mov	sl, r0
 80199b4:	468b      	mov	fp, r1
 80199b6:	9b00      	ldr	r3, [sp, #0]
 80199b8:	429e      	cmp	r6, r3
 80199ba:	dc01      	bgt.n	80199c0 <__kernel_rem_pio2+0x4c8>
 80199bc:	42b5      	cmp	r5, r6
 80199be:	dae9      	bge.n	8019994 <__kernel_rem_pio2+0x49c>
 80199c0:	ab48      	add	r3, sp, #288	@ 0x120
 80199c2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80199c6:	e9c5 ab00 	strd	sl, fp, [r5]
 80199ca:	3c01      	subs	r4, #1
 80199cc:	e6ff      	b.n	80197ce <__kernel_rem_pio2+0x2d6>
 80199ce:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80199d0:	2b02      	cmp	r3, #2
 80199d2:	dc0b      	bgt.n	80199ec <__kernel_rem_pio2+0x4f4>
 80199d4:	2b00      	cmp	r3, #0
 80199d6:	dc39      	bgt.n	8019a4c <__kernel_rem_pio2+0x554>
 80199d8:	d05d      	beq.n	8019a96 <__kernel_rem_pio2+0x59e>
 80199da:	9b02      	ldr	r3, [sp, #8]
 80199dc:	f003 0007 	and.w	r0, r3, #7
 80199e0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80199e4:	ecbd 8b02 	vpop	{d8}
 80199e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ec:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80199ee:	2b03      	cmp	r3, #3
 80199f0:	d1f3      	bne.n	80199da <__kernel_rem_pio2+0x4e2>
 80199f2:	9b05      	ldr	r3, [sp, #20]
 80199f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80199f8:	eb0d 0403 	add.w	r4, sp, r3
 80199fc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8019a00:	4625      	mov	r5, r4
 8019a02:	46c2      	mov	sl, r8
 8019a04:	f1ba 0f00 	cmp.w	sl, #0
 8019a08:	f1a5 0508 	sub.w	r5, r5, #8
 8019a0c:	dc6b      	bgt.n	8019ae6 <__kernel_rem_pio2+0x5ee>
 8019a0e:	4645      	mov	r5, r8
 8019a10:	2d01      	cmp	r5, #1
 8019a12:	f1a4 0408 	sub.w	r4, r4, #8
 8019a16:	f300 8087 	bgt.w	8019b28 <__kernel_rem_pio2+0x630>
 8019a1a:	9c05      	ldr	r4, [sp, #20]
 8019a1c:	ab48      	add	r3, sp, #288	@ 0x120
 8019a1e:	441c      	add	r4, r3
 8019a20:	2000      	movs	r0, #0
 8019a22:	2100      	movs	r1, #0
 8019a24:	f1b8 0f01 	cmp.w	r8, #1
 8019a28:	f300 809c 	bgt.w	8019b64 <__kernel_rem_pio2+0x66c>
 8019a2c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8019a30:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8019a34:	f1b9 0f00 	cmp.w	r9, #0
 8019a38:	f040 80a6 	bne.w	8019b88 <__kernel_rem_pio2+0x690>
 8019a3c:	9b04      	ldr	r3, [sp, #16]
 8019a3e:	e9c3 7800 	strd	r7, r8, [r3]
 8019a42:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8019a46:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8019a4a:	e7c6      	b.n	80199da <__kernel_rem_pio2+0x4e2>
 8019a4c:	9d05      	ldr	r5, [sp, #20]
 8019a4e:	ab48      	add	r3, sp, #288	@ 0x120
 8019a50:	441d      	add	r5, r3
 8019a52:	4644      	mov	r4, r8
 8019a54:	2000      	movs	r0, #0
 8019a56:	2100      	movs	r1, #0
 8019a58:	2c00      	cmp	r4, #0
 8019a5a:	da35      	bge.n	8019ac8 <__kernel_rem_pio2+0x5d0>
 8019a5c:	f1b9 0f00 	cmp.w	r9, #0
 8019a60:	d038      	beq.n	8019ad4 <__kernel_rem_pio2+0x5dc>
 8019a62:	4602      	mov	r2, r0
 8019a64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019a68:	9c04      	ldr	r4, [sp, #16]
 8019a6a:	e9c4 2300 	strd	r2, r3, [r4]
 8019a6e:	4602      	mov	r2, r0
 8019a70:	460b      	mov	r3, r1
 8019a72:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8019a76:	f7e6 fc27 	bl	80002c8 <__aeabi_dsub>
 8019a7a:	ad4a      	add	r5, sp, #296	@ 0x128
 8019a7c:	2401      	movs	r4, #1
 8019a7e:	45a0      	cmp	r8, r4
 8019a80:	da2b      	bge.n	8019ada <__kernel_rem_pio2+0x5e2>
 8019a82:	f1b9 0f00 	cmp.w	r9, #0
 8019a86:	d002      	beq.n	8019a8e <__kernel_rem_pio2+0x596>
 8019a88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019a8c:	4619      	mov	r1, r3
 8019a8e:	9b04      	ldr	r3, [sp, #16]
 8019a90:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019a94:	e7a1      	b.n	80199da <__kernel_rem_pio2+0x4e2>
 8019a96:	9c05      	ldr	r4, [sp, #20]
 8019a98:	ab48      	add	r3, sp, #288	@ 0x120
 8019a9a:	441c      	add	r4, r3
 8019a9c:	2000      	movs	r0, #0
 8019a9e:	2100      	movs	r1, #0
 8019aa0:	f1b8 0f00 	cmp.w	r8, #0
 8019aa4:	da09      	bge.n	8019aba <__kernel_rem_pio2+0x5c2>
 8019aa6:	f1b9 0f00 	cmp.w	r9, #0
 8019aaa:	d002      	beq.n	8019ab2 <__kernel_rem_pio2+0x5ba>
 8019aac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	9b04      	ldr	r3, [sp, #16]
 8019ab4:	e9c3 0100 	strd	r0, r1, [r3]
 8019ab8:	e78f      	b.n	80199da <__kernel_rem_pio2+0x4e2>
 8019aba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019abe:	f7e6 fc05 	bl	80002cc <__adddf3>
 8019ac2:	f108 38ff 	add.w	r8, r8, #4294967295
 8019ac6:	e7eb      	b.n	8019aa0 <__kernel_rem_pio2+0x5a8>
 8019ac8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8019acc:	f7e6 fbfe 	bl	80002cc <__adddf3>
 8019ad0:	3c01      	subs	r4, #1
 8019ad2:	e7c1      	b.n	8019a58 <__kernel_rem_pio2+0x560>
 8019ad4:	4602      	mov	r2, r0
 8019ad6:	460b      	mov	r3, r1
 8019ad8:	e7c6      	b.n	8019a68 <__kernel_rem_pio2+0x570>
 8019ada:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8019ade:	f7e6 fbf5 	bl	80002cc <__adddf3>
 8019ae2:	3401      	adds	r4, #1
 8019ae4:	e7cb      	b.n	8019a7e <__kernel_rem_pio2+0x586>
 8019ae6:	ed95 7b00 	vldr	d7, [r5]
 8019aea:	ed8d 7b00 	vstr	d7, [sp]
 8019aee:	ed95 7b02 	vldr	d7, [r5, #8]
 8019af2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019af6:	ec53 2b17 	vmov	r2, r3, d7
 8019afa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019afe:	f7e6 fbe5 	bl	80002cc <__adddf3>
 8019b02:	4602      	mov	r2, r0
 8019b04:	460b      	mov	r3, r1
 8019b06:	4606      	mov	r6, r0
 8019b08:	460f      	mov	r7, r1
 8019b0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b0e:	f7e6 fbdb 	bl	80002c8 <__aeabi_dsub>
 8019b12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019b16:	f7e6 fbd9 	bl	80002cc <__adddf3>
 8019b1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019b1e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8019b22:	e9c5 6700 	strd	r6, r7, [r5]
 8019b26:	e76d      	b.n	8019a04 <__kernel_rem_pio2+0x50c>
 8019b28:	ed94 7b00 	vldr	d7, [r4]
 8019b2c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8019b30:	ec51 0b17 	vmov	r0, r1, d7
 8019b34:	4652      	mov	r2, sl
 8019b36:	465b      	mov	r3, fp
 8019b38:	ed8d 7b00 	vstr	d7, [sp]
 8019b3c:	f7e6 fbc6 	bl	80002cc <__adddf3>
 8019b40:	4602      	mov	r2, r0
 8019b42:	460b      	mov	r3, r1
 8019b44:	4606      	mov	r6, r0
 8019b46:	460f      	mov	r7, r1
 8019b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019b4c:	f7e6 fbbc 	bl	80002c8 <__aeabi_dsub>
 8019b50:	4652      	mov	r2, sl
 8019b52:	465b      	mov	r3, fp
 8019b54:	f7e6 fbba 	bl	80002cc <__adddf3>
 8019b58:	3d01      	subs	r5, #1
 8019b5a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8019b5e:	e9c4 6700 	strd	r6, r7, [r4]
 8019b62:	e755      	b.n	8019a10 <__kernel_rem_pio2+0x518>
 8019b64:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019b68:	f7e6 fbb0 	bl	80002cc <__adddf3>
 8019b6c:	f108 38ff 	add.w	r8, r8, #4294967295
 8019b70:	e758      	b.n	8019a24 <__kernel_rem_pio2+0x52c>
 8019b72:	bf00      	nop
 8019b74:	f3af 8000 	nop.w
	...
 8019b80:	41700000 	.word	0x41700000
 8019b84:	3e700000 	.word	0x3e700000
 8019b88:	9b04      	ldr	r3, [sp, #16]
 8019b8a:	9a04      	ldr	r2, [sp, #16]
 8019b8c:	601f      	str	r7, [r3, #0]
 8019b8e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8019b92:	605c      	str	r4, [r3, #4]
 8019b94:	609d      	str	r5, [r3, #8]
 8019b96:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8019b9a:	60d3      	str	r3, [r2, #12]
 8019b9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8019ba0:	6110      	str	r0, [r2, #16]
 8019ba2:	6153      	str	r3, [r2, #20]
 8019ba4:	e719      	b.n	80199da <__kernel_rem_pio2+0x4e2>
 8019ba6:	bf00      	nop

08019ba8 <_init>:
 8019ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019baa:	bf00      	nop
 8019bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bae:	bc08      	pop	{r3}
 8019bb0:	469e      	mov	lr, r3
 8019bb2:	4770      	bx	lr

08019bb4 <_fini>:
 8019bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019bb6:	bf00      	nop
 8019bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019bba:	bc08      	pop	{r3}
 8019bbc:	469e      	mov	lr, r3
 8019bbe:	4770      	bx	lr
