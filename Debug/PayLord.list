
PayLord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  08011f48  08011f48  00012f48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125b8  080125b8  00014210  2**0
                  CONTENTS
  4 .ARM          00000008  080125b8  080125b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125c0  080125c0  00014210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125c0  080125c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080125c4  080125c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000210  20000000  080125c8  00014000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d0  20000210  080127d8  00014210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017e0  080127d8  000147e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b48d  00000000  00000000  00014240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ceb  00000000  00000000  0002f6cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  000333b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010b6  00000000  00000000  000348f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026d04  00000000  00000000  000359ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e4a7  00000000  00000000  0005c6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e552e  00000000  00000000  0007ab59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00160087  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007720  00000000  00000000  001600cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001677ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011f30 	.word	0x08011f30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08011f30 	.word	0x08011f30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_frsub>:
 8000cc8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000ccc:	e002      	b.n	8000cd4 <__addsf3>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_fsub>:
 8000cd0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000cd4 <__addsf3>:
 8000cd4:	0042      	lsls	r2, r0, #1
 8000cd6:	bf1f      	itttt	ne
 8000cd8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cdc:	ea92 0f03 	teqne	r2, r3
 8000ce0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ce4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce8:	d06a      	beq.n	8000dc0 <__addsf3+0xec>
 8000cea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cf2:	bfc1      	itttt	gt
 8000cf4:	18d2      	addgt	r2, r2, r3
 8000cf6:	4041      	eorgt	r1, r0
 8000cf8:	4048      	eorgt	r0, r1
 8000cfa:	4041      	eorgt	r1, r0
 8000cfc:	bfb8      	it	lt
 8000cfe:	425b      	neglt	r3, r3
 8000d00:	2b19      	cmp	r3, #25
 8000d02:	bf88      	it	hi
 8000d04:	4770      	bxhi	lr
 8000d06:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d12:	bf18      	it	ne
 8000d14:	4240      	negne	r0, r0
 8000d16:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d1a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d1e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4249      	negne	r1, r1
 8000d26:	ea92 0f03 	teq	r2, r3
 8000d2a:	d03f      	beq.n	8000dac <__addsf3+0xd8>
 8000d2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d30:	fa41 fc03 	asr.w	ip, r1, r3
 8000d34:	eb10 000c 	adds.w	r0, r0, ip
 8000d38:	f1c3 0320 	rsb	r3, r3, #32
 8000d3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d40:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__addsf3+0x78>
 8000d46:	4249      	negs	r1, r1
 8000d48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d4c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d50:	d313      	bcc.n	8000d7a <__addsf3+0xa6>
 8000d52:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d56:	d306      	bcc.n	8000d66 <__addsf3+0x92>
 8000d58:	0840      	lsrs	r0, r0, #1
 8000d5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d5e:	f102 0201 	add.w	r2, r2, #1
 8000d62:	2afe      	cmp	r2, #254	@ 0xfe
 8000d64:	d251      	bcs.n	8000e0a <__addsf3+0x136>
 8000d66:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d6e:	bf08      	it	eq
 8000d70:	f020 0001 	biceq.w	r0, r0, #1
 8000d74:	ea40 0003 	orr.w	r0, r0, r3
 8000d78:	4770      	bx	lr
 8000d7a:	0049      	lsls	r1, r1, #1
 8000d7c:	eb40 0000 	adc.w	r0, r0, r0
 8000d80:	3a01      	subs	r2, #1
 8000d82:	bf28      	it	cs
 8000d84:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d88:	d2ed      	bcs.n	8000d66 <__addsf3+0x92>
 8000d8a:	fab0 fc80 	clz	ip, r0
 8000d8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d92:	ebb2 020c 	subs.w	r2, r2, ip
 8000d96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d9a:	bfaa      	itet	ge
 8000d9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da0:	4252      	neglt	r2, r2
 8000da2:	4318      	orrge	r0, r3
 8000da4:	bfbc      	itt	lt
 8000da6:	40d0      	lsrlt	r0, r2
 8000da8:	4318      	orrlt	r0, r3
 8000daa:	4770      	bx	lr
 8000dac:	f092 0f00 	teq	r2, #0
 8000db0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000db4:	bf06      	itte	eq
 8000db6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dba:	3201      	addeq	r2, #1
 8000dbc:	3b01      	subne	r3, #1
 8000dbe:	e7b5      	b.n	8000d2c <__addsf3+0x58>
 8000dc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dc8:	bf18      	it	ne
 8000dca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dce:	d021      	beq.n	8000e14 <__addsf3+0x140>
 8000dd0:	ea92 0f03 	teq	r2, r3
 8000dd4:	d004      	beq.n	8000de0 <__addsf3+0x10c>
 8000dd6:	f092 0f00 	teq	r2, #0
 8000dda:	bf08      	it	eq
 8000ddc:	4608      	moveq	r0, r1
 8000dde:	4770      	bx	lr
 8000de0:	ea90 0f01 	teq	r0, r1
 8000de4:	bf1c      	itt	ne
 8000de6:	2000      	movne	r0, #0
 8000de8:	4770      	bxne	lr
 8000dea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dee:	d104      	bne.n	8000dfa <__addsf3+0x126>
 8000df0:	0040      	lsls	r0, r0, #1
 8000df2:	bf28      	it	cs
 8000df4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	4770      	bx	lr
 8000dfa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000dfe:	bf3c      	itt	cc
 8000e00:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e04:	4770      	bxcc	lr
 8000e06:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e0a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e0e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e12:	4770      	bx	lr
 8000e14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e18:	bf16      	itet	ne
 8000e1a:	4608      	movne	r0, r1
 8000e1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e20:	4601      	movne	r1, r0
 8000e22:	0242      	lsls	r2, r0, #9
 8000e24:	bf06      	itte	eq
 8000e26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e2a:	ea90 0f01 	teqeq	r0, r1
 8000e2e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e32:	4770      	bx	lr

08000e34 <__aeabi_ui2f>:
 8000e34:	f04f 0300 	mov.w	r3, #0
 8000e38:	e004      	b.n	8000e44 <__aeabi_i2f+0x8>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_i2f>:
 8000e3c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e40:	bf48      	it	mi
 8000e42:	4240      	negmi	r0, r0
 8000e44:	ea5f 0c00 	movs.w	ip, r0
 8000e48:	bf08      	it	eq
 8000e4a:	4770      	bxeq	lr
 8000e4c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e50:	4601      	mov	r1, r0
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	e01c      	b.n	8000e92 <__aeabi_l2f+0x2a>

08000e58 <__aeabi_ul2f>:
 8000e58:	ea50 0201 	orrs.w	r2, r0, r1
 8000e5c:	bf08      	it	eq
 8000e5e:	4770      	bxeq	lr
 8000e60:	f04f 0300 	mov.w	r3, #0
 8000e64:	e00a      	b.n	8000e7c <__aeabi_l2f+0x14>
 8000e66:	bf00      	nop

08000e68 <__aeabi_l2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e74:	d502      	bpl.n	8000e7c <__aeabi_l2f+0x14>
 8000e76:	4240      	negs	r0, r0
 8000e78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e7c:	ea5f 0c01 	movs.w	ip, r1
 8000e80:	bf02      	ittt	eq
 8000e82:	4684      	moveq	ip, r0
 8000e84:	4601      	moveq	r1, r0
 8000e86:	2000      	moveq	r0, #0
 8000e88:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e8c:	bf08      	it	eq
 8000e8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e92:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e96:	fabc f28c 	clz	r2, ip
 8000e9a:	3a08      	subs	r2, #8
 8000e9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea0:	db10      	blt.n	8000ec4 <__aeabi_l2f+0x5c>
 8000ea2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eac:	f1c2 0220 	rsb	r2, r2, #32
 8000eb0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000eb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000eb8:	eb43 0002 	adc.w	r0, r3, r2
 8000ebc:	bf08      	it	eq
 8000ebe:	f020 0001 	biceq.w	r0, r0, #1
 8000ec2:	4770      	bx	lr
 8000ec4:	f102 0220 	add.w	r2, r2, #32
 8000ec8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ecc:	f1c2 0220 	rsb	r2, r2, #32
 8000ed0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ed4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ed8:	eb43 0002 	adc.w	r0, r3, r2
 8000edc:	bf08      	it	eq
 8000ede:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_ldivmod>:
 8000ee4:	b97b      	cbnz	r3, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee6:	b972      	cbnz	r2, 8000f06 <__aeabi_ldivmod+0x22>
 8000ee8:	2900      	cmp	r1, #0
 8000eea:	bfbe      	ittt	lt
 8000eec:	2000      	movlt	r0, #0
 8000eee:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ef2:	e006      	blt.n	8000f02 <__aeabi_ldivmod+0x1e>
 8000ef4:	bf08      	it	eq
 8000ef6:	2800      	cmpeq	r0, #0
 8000ef8:	bf1c      	itt	ne
 8000efa:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000efe:	f04f 30ff 	movne.w	r0, #4294967295
 8000f02:	f000 b9eb 	b.w	80012dc <__aeabi_idiv0>
 8000f06:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f0a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f0e:	2900      	cmp	r1, #0
 8000f10:	db09      	blt.n	8000f26 <__aeabi_ldivmod+0x42>
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db1a      	blt.n	8000f4c <__aeabi_ldivmod+0x68>
 8000f16:	f000 f883 	bl	8001020 <__udivmoddi4>
 8000f1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f22:	b004      	add	sp, #16
 8000f24:	4770      	bx	lr
 8000f26:	4240      	negs	r0, r0
 8000f28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1b      	blt.n	8000f68 <__aeabi_ldivmod+0x84>
 8000f30:	f000 f876 	bl	8001020 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4240      	negs	r0, r0
 8000f40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f44:	4252      	negs	r2, r2
 8000f46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f4a:	4770      	bx	lr
 8000f4c:	4252      	negs	r2, r2
 8000f4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f52:	f000 f865 	bl	8001020 <__udivmoddi4>
 8000f56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f5e:	b004      	add	sp, #16
 8000f60:	4240      	negs	r0, r0
 8000f62:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f66:	4770      	bx	lr
 8000f68:	4252      	negs	r2, r2
 8000f6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f6e:	f000 f857 	bl	8001020 <__udivmoddi4>
 8000f72:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f7a:	b004      	add	sp, #16
 8000f7c:	4252      	negs	r2, r2
 8000f7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f82:	4770      	bx	lr

08000f84 <__aeabi_uldivmod>:
 8000f84:	b953      	cbnz	r3, 8000f9c <__aeabi_uldivmod+0x18>
 8000f86:	b94a      	cbnz	r2, 8000f9c <__aeabi_uldivmod+0x18>
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	bf08      	it	eq
 8000f8c:	2800      	cmpeq	r0, #0
 8000f8e:	bf1c      	itt	ne
 8000f90:	f04f 31ff 	movne.w	r1, #4294967295
 8000f94:	f04f 30ff 	movne.w	r0, #4294967295
 8000f98:	f000 b9a0 	b.w	80012dc <__aeabi_idiv0>
 8000f9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fa4:	f000 f83c 	bl	8001020 <__udivmoddi4>
 8000fa8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr

08000fb4 <__aeabi_d2lz>:
 8000fb4:	b538      	push	{r3, r4, r5, lr}
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2300      	movs	r3, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f7ff fdad 	bl	8000b1c <__aeabi_dcmplt>
 8000fc2:	b928      	cbnz	r0, 8000fd0 <__aeabi_d2lz+0x1c>
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fcc:	f000 b80a 	b.w	8000fe4 <__aeabi_d2ulz>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000fd6:	f000 f805 	bl	8000fe4 <__aeabi_d2ulz>
 8000fda:	4240      	negs	r0, r0
 8000fdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fe0:	bd38      	pop	{r3, r4, r5, pc}
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_d2ulz>:
 8000fe4:	b5d0      	push	{r4, r6, r7, lr}
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__aeabi_d2ulz+0x34>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4606      	mov	r6, r0
 8000fec:	460f      	mov	r7, r1
 8000fee:	f7ff fb23 	bl	8000638 <__aeabi_dmul>
 8000ff2:	f7ff fdf9 	bl	8000be8 <__aeabi_d2uiz>
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	f7ff faa4 	bl	8000544 <__aeabi_ui2d>
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <__aeabi_d2ulz+0x38>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	f7ff fb1a 	bl	8000638 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4630      	mov	r0, r6
 800100a:	4639      	mov	r1, r7
 800100c:	f7ff f95c 	bl	80002c8 <__aeabi_dsub>
 8001010:	f7ff fdea 	bl	8000be8 <__aeabi_d2uiz>
 8001014:	4621      	mov	r1, r4
 8001016:	bdd0      	pop	{r4, r6, r7, pc}
 8001018:	3df00000 	.word	0x3df00000
 800101c:	41f00000 	.word	0x41f00000

08001020 <__udivmoddi4>:
 8001020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001024:	9d08      	ldr	r5, [sp, #32]
 8001026:	460c      	mov	r4, r1
 8001028:	2b00      	cmp	r3, #0
 800102a:	d14e      	bne.n	80010ca <__udivmoddi4+0xaa>
 800102c:	4694      	mov	ip, r2
 800102e:	458c      	cmp	ip, r1
 8001030:	4686      	mov	lr, r0
 8001032:	fab2 f282 	clz	r2, r2
 8001036:	d962      	bls.n	80010fe <__udivmoddi4+0xde>
 8001038:	b14a      	cbz	r2, 800104e <__udivmoddi4+0x2e>
 800103a:	f1c2 0320 	rsb	r3, r2, #32
 800103e:	4091      	lsls	r1, r2
 8001040:	fa20 f303 	lsr.w	r3, r0, r3
 8001044:	fa0c fc02 	lsl.w	ip, ip, r2
 8001048:	4319      	orrs	r1, r3
 800104a:	fa00 fe02 	lsl.w	lr, r0, r2
 800104e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001052:	fa1f f68c 	uxth.w	r6, ip
 8001056:	fbb1 f4f7 	udiv	r4, r1, r7
 800105a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800105e:	fb07 1114 	mls	r1, r7, r4, r1
 8001062:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001066:	fb04 f106 	mul.w	r1, r4, r6
 800106a:	4299      	cmp	r1, r3
 800106c:	d90a      	bls.n	8001084 <__udivmoddi4+0x64>
 800106e:	eb1c 0303 	adds.w	r3, ip, r3
 8001072:	f104 30ff 	add.w	r0, r4, #4294967295
 8001076:	f080 8112 	bcs.w	800129e <__udivmoddi4+0x27e>
 800107a:	4299      	cmp	r1, r3
 800107c:	f240 810f 	bls.w	800129e <__udivmoddi4+0x27e>
 8001080:	3c02      	subs	r4, #2
 8001082:	4463      	add	r3, ip
 8001084:	1a59      	subs	r1, r3, r1
 8001086:	fa1f f38e 	uxth.w	r3, lr
 800108a:	fbb1 f0f7 	udiv	r0, r1, r7
 800108e:	fb07 1110 	mls	r1, r7, r0, r1
 8001092:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001096:	fb00 f606 	mul.w	r6, r0, r6
 800109a:	429e      	cmp	r6, r3
 800109c:	d90a      	bls.n	80010b4 <__udivmoddi4+0x94>
 800109e:	eb1c 0303 	adds.w	r3, ip, r3
 80010a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80010a6:	f080 80fc 	bcs.w	80012a2 <__udivmoddi4+0x282>
 80010aa:	429e      	cmp	r6, r3
 80010ac:	f240 80f9 	bls.w	80012a2 <__udivmoddi4+0x282>
 80010b0:	4463      	add	r3, ip
 80010b2:	3802      	subs	r0, #2
 80010b4:	1b9b      	subs	r3, r3, r6
 80010b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80010ba:	2100      	movs	r1, #0
 80010bc:	b11d      	cbz	r5, 80010c6 <__udivmoddi4+0xa6>
 80010be:	40d3      	lsrs	r3, r2
 80010c0:	2200      	movs	r2, #0
 80010c2:	e9c5 3200 	strd	r3, r2, [r5]
 80010c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010ca:	428b      	cmp	r3, r1
 80010cc:	d905      	bls.n	80010da <__udivmoddi4+0xba>
 80010ce:	b10d      	cbz	r5, 80010d4 <__udivmoddi4+0xb4>
 80010d0:	e9c5 0100 	strd	r0, r1, [r5]
 80010d4:	2100      	movs	r1, #0
 80010d6:	4608      	mov	r0, r1
 80010d8:	e7f5      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010da:	fab3 f183 	clz	r1, r3
 80010de:	2900      	cmp	r1, #0
 80010e0:	d146      	bne.n	8001170 <__udivmoddi4+0x150>
 80010e2:	42a3      	cmp	r3, r4
 80010e4:	d302      	bcc.n	80010ec <__udivmoddi4+0xcc>
 80010e6:	4290      	cmp	r0, r2
 80010e8:	f0c0 80f0 	bcc.w	80012cc <__udivmoddi4+0x2ac>
 80010ec:	1a86      	subs	r6, r0, r2
 80010ee:	eb64 0303 	sbc.w	r3, r4, r3
 80010f2:	2001      	movs	r0, #1
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d0e6      	beq.n	80010c6 <__udivmoddi4+0xa6>
 80010f8:	e9c5 6300 	strd	r6, r3, [r5]
 80010fc:	e7e3      	b.n	80010c6 <__udivmoddi4+0xa6>
 80010fe:	2a00      	cmp	r2, #0
 8001100:	f040 8090 	bne.w	8001224 <__udivmoddi4+0x204>
 8001104:	eba1 040c 	sub.w	r4, r1, ip
 8001108:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800110c:	fa1f f78c 	uxth.w	r7, ip
 8001110:	2101      	movs	r1, #1
 8001112:	fbb4 f6f8 	udiv	r6, r4, r8
 8001116:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800111a:	fb08 4416 	mls	r4, r8, r6, r4
 800111e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001122:	fb07 f006 	mul.w	r0, r7, r6
 8001126:	4298      	cmp	r0, r3
 8001128:	d908      	bls.n	800113c <__udivmoddi4+0x11c>
 800112a:	eb1c 0303 	adds.w	r3, ip, r3
 800112e:	f106 34ff 	add.w	r4, r6, #4294967295
 8001132:	d202      	bcs.n	800113a <__udivmoddi4+0x11a>
 8001134:	4298      	cmp	r0, r3
 8001136:	f200 80cd 	bhi.w	80012d4 <__udivmoddi4+0x2b4>
 800113a:	4626      	mov	r6, r4
 800113c:	1a1c      	subs	r4, r3, r0
 800113e:	fa1f f38e 	uxth.w	r3, lr
 8001142:	fbb4 f0f8 	udiv	r0, r4, r8
 8001146:	fb08 4410 	mls	r4, r8, r0, r4
 800114a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800114e:	fb00 f707 	mul.w	r7, r0, r7
 8001152:	429f      	cmp	r7, r3
 8001154:	d908      	bls.n	8001168 <__udivmoddi4+0x148>
 8001156:	eb1c 0303 	adds.w	r3, ip, r3
 800115a:	f100 34ff 	add.w	r4, r0, #4294967295
 800115e:	d202      	bcs.n	8001166 <__udivmoddi4+0x146>
 8001160:	429f      	cmp	r7, r3
 8001162:	f200 80b0 	bhi.w	80012c6 <__udivmoddi4+0x2a6>
 8001166:	4620      	mov	r0, r4
 8001168:	1bdb      	subs	r3, r3, r7
 800116a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800116e:	e7a5      	b.n	80010bc <__udivmoddi4+0x9c>
 8001170:	f1c1 0620 	rsb	r6, r1, #32
 8001174:	408b      	lsls	r3, r1
 8001176:	fa22 f706 	lsr.w	r7, r2, r6
 800117a:	431f      	orrs	r7, r3
 800117c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001180:	fa04 f301 	lsl.w	r3, r4, r1
 8001184:	ea43 030c 	orr.w	r3, r3, ip
 8001188:	40f4      	lsrs	r4, r6
 800118a:	fa00 f801 	lsl.w	r8, r0, r1
 800118e:	0c38      	lsrs	r0, r7, #16
 8001190:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001194:	fbb4 fef0 	udiv	lr, r4, r0
 8001198:	fa1f fc87 	uxth.w	ip, r7
 800119c:	fb00 441e 	mls	r4, r0, lr, r4
 80011a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011a4:	fb0e f90c 	mul.w	r9, lr, ip
 80011a8:	45a1      	cmp	r9, r4
 80011aa:	fa02 f201 	lsl.w	r2, r2, r1
 80011ae:	d90a      	bls.n	80011c6 <__udivmoddi4+0x1a6>
 80011b0:	193c      	adds	r4, r7, r4
 80011b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80011b6:	f080 8084 	bcs.w	80012c2 <__udivmoddi4+0x2a2>
 80011ba:	45a1      	cmp	r9, r4
 80011bc:	f240 8081 	bls.w	80012c2 <__udivmoddi4+0x2a2>
 80011c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80011c4:	443c      	add	r4, r7
 80011c6:	eba4 0409 	sub.w	r4, r4, r9
 80011ca:	fa1f f983 	uxth.w	r9, r3
 80011ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80011d2:	fb00 4413 	mls	r4, r0, r3, r4
 80011d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80011da:	fb03 fc0c 	mul.w	ip, r3, ip
 80011de:	45a4      	cmp	ip, r4
 80011e0:	d907      	bls.n	80011f2 <__udivmoddi4+0x1d2>
 80011e2:	193c      	adds	r4, r7, r4
 80011e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80011e8:	d267      	bcs.n	80012ba <__udivmoddi4+0x29a>
 80011ea:	45a4      	cmp	ip, r4
 80011ec:	d965      	bls.n	80012ba <__udivmoddi4+0x29a>
 80011ee:	3b02      	subs	r3, #2
 80011f0:	443c      	add	r4, r7
 80011f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80011f6:	fba0 9302 	umull	r9, r3, r0, r2
 80011fa:	eba4 040c 	sub.w	r4, r4, ip
 80011fe:	429c      	cmp	r4, r3
 8001200:	46ce      	mov	lr, r9
 8001202:	469c      	mov	ip, r3
 8001204:	d351      	bcc.n	80012aa <__udivmoddi4+0x28a>
 8001206:	d04e      	beq.n	80012a6 <__udivmoddi4+0x286>
 8001208:	b155      	cbz	r5, 8001220 <__udivmoddi4+0x200>
 800120a:	ebb8 030e 	subs.w	r3, r8, lr
 800120e:	eb64 040c 	sbc.w	r4, r4, ip
 8001212:	fa04 f606 	lsl.w	r6, r4, r6
 8001216:	40cb      	lsrs	r3, r1
 8001218:	431e      	orrs	r6, r3
 800121a:	40cc      	lsrs	r4, r1
 800121c:	e9c5 6400 	strd	r6, r4, [r5]
 8001220:	2100      	movs	r1, #0
 8001222:	e750      	b.n	80010c6 <__udivmoddi4+0xa6>
 8001224:	f1c2 0320 	rsb	r3, r2, #32
 8001228:	fa20 f103 	lsr.w	r1, r0, r3
 800122c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001230:	fa24 f303 	lsr.w	r3, r4, r3
 8001234:	4094      	lsls	r4, r2
 8001236:	430c      	orrs	r4, r1
 8001238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800123c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001240:	fa1f f78c 	uxth.w	r7, ip
 8001244:	fbb3 f0f8 	udiv	r0, r3, r8
 8001248:	fb08 3110 	mls	r1, r8, r0, r3
 800124c:	0c23      	lsrs	r3, r4, #16
 800124e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001252:	fb00 f107 	mul.w	r1, r0, r7
 8001256:	4299      	cmp	r1, r3
 8001258:	d908      	bls.n	800126c <__udivmoddi4+0x24c>
 800125a:	eb1c 0303 	adds.w	r3, ip, r3
 800125e:	f100 36ff 	add.w	r6, r0, #4294967295
 8001262:	d22c      	bcs.n	80012be <__udivmoddi4+0x29e>
 8001264:	4299      	cmp	r1, r3
 8001266:	d92a      	bls.n	80012be <__udivmoddi4+0x29e>
 8001268:	3802      	subs	r0, #2
 800126a:	4463      	add	r3, ip
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	b2a4      	uxth	r4, r4
 8001270:	fbb3 f1f8 	udiv	r1, r3, r8
 8001274:	fb08 3311 	mls	r3, r8, r1, r3
 8001278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800127c:	fb01 f307 	mul.w	r3, r1, r7
 8001280:	42a3      	cmp	r3, r4
 8001282:	d908      	bls.n	8001296 <__udivmoddi4+0x276>
 8001284:	eb1c 0404 	adds.w	r4, ip, r4
 8001288:	f101 36ff 	add.w	r6, r1, #4294967295
 800128c:	d213      	bcs.n	80012b6 <__udivmoddi4+0x296>
 800128e:	42a3      	cmp	r3, r4
 8001290:	d911      	bls.n	80012b6 <__udivmoddi4+0x296>
 8001292:	3902      	subs	r1, #2
 8001294:	4464      	add	r4, ip
 8001296:	1ae4      	subs	r4, r4, r3
 8001298:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800129c:	e739      	b.n	8001112 <__udivmoddi4+0xf2>
 800129e:	4604      	mov	r4, r0
 80012a0:	e6f0      	b.n	8001084 <__udivmoddi4+0x64>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e706      	b.n	80010b4 <__udivmoddi4+0x94>
 80012a6:	45c8      	cmp	r8, r9
 80012a8:	d2ae      	bcs.n	8001208 <__udivmoddi4+0x1e8>
 80012aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80012ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80012b2:	3801      	subs	r0, #1
 80012b4:	e7a8      	b.n	8001208 <__udivmoddi4+0x1e8>
 80012b6:	4631      	mov	r1, r6
 80012b8:	e7ed      	b.n	8001296 <__udivmoddi4+0x276>
 80012ba:	4603      	mov	r3, r0
 80012bc:	e799      	b.n	80011f2 <__udivmoddi4+0x1d2>
 80012be:	4630      	mov	r0, r6
 80012c0:	e7d4      	b.n	800126c <__udivmoddi4+0x24c>
 80012c2:	46d6      	mov	lr, sl
 80012c4:	e77f      	b.n	80011c6 <__udivmoddi4+0x1a6>
 80012c6:	4463      	add	r3, ip
 80012c8:	3802      	subs	r0, #2
 80012ca:	e74d      	b.n	8001168 <__udivmoddi4+0x148>
 80012cc:	4606      	mov	r6, r0
 80012ce:	4623      	mov	r3, r4
 80012d0:	4608      	mov	r0, r1
 80012d2:	e70f      	b.n	80010f4 <__udivmoddi4+0xd4>
 80012d4:	3e02      	subs	r6, #2
 80012d6:	4463      	add	r3, ip
 80012d8:	e730      	b.n	800113c <__udivmoddi4+0x11c>
 80012da:	bf00      	nop

080012dc <__aeabi_idiv0>:
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop

080012e0 <bme280_getVals>:
static uint8_t bme_started_flag = 0;
static uint8_t last_measuring = 1;


void bme280_getVals()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af04      	add	r7, sp, #16
	uint8_t status;
    HAL_StatusTypeDef retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_STATUS, I2C_MEMADD_SIZE_8BIT, &status, 1, 100);
 80012e6:	4b3c      	ldr	r3, [pc, #240]	@ (80013d8 <bme280_getVals+0xf8>)
 80012e8:	6818      	ldr	r0, [r3, #0]
 80012ea:	2364      	movs	r3, #100	@ 0x64
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	2301      	movs	r3, #1
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	f107 030d 	add.w	r3, r7, #13
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2301      	movs	r3, #1
 80012fa:	22f3      	movs	r2, #243	@ 0xf3
 80012fc:	21ec      	movs	r1, #236	@ 0xec
 80012fe:	f006 ff65 	bl	80081cc <HAL_I2C_Mem_Read>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
    BME->isUpdated = 0;
 8001306:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <bme280_getVals+0xfc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    uint8_t current_measuring = ((status & (0x01 << 3)) == 0);
 8001310:	7b7b      	ldrb	r3, [r7, #13]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	bf0c      	ite	eq
 800131a:	2301      	moveq	r3, #1
 800131c:	2300      	movne	r3, #0
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73bb      	strb	r3, [r7, #14]

    if ((last_measuring == 1) && (current_measuring == 0)) {
 8001322:	4b2f      	ldr	r3, [pc, #188]	@ (80013e0 <bme280_getVals+0x100>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d14f      	bne.n	80013ca <bme280_getVals+0xea>
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d14c      	bne.n	80013ca <bme280_getVals+0xea>
        uint8_t data[8];
        retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_P_MSB_ADD, I2C_MEMADD_SIZE_8BIT, data, 8, 20);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <bme280_getVals+0xf8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	2314      	movs	r3, #20
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2308      	movs	r3, #8
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	22f7      	movs	r2, #247	@ 0xf7
 8001344:	21ec      	movs	r1, #236	@ 0xec
 8001346:	f006 ff41 	bl	80081cc <HAL_I2C_Mem_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
        if (retVal == HAL_OK && memcmp(data, BME->lastReadings, 8) != 0) {
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d13a      	bne.n	80013ca <bme280_getVals+0xea>
 8001354:	4b21      	ldr	r3, [pc, #132]	@ (80013dc <bme280_getVals+0xfc>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2208      	movs	r2, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f00b fa76 	bl	800c852 <memcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d02e      	beq.n	80013ca <bme280_getVals+0xea>
            memcpy(BME->lastReadings, data, 8);
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <bme280_getVals+0xfc>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	3334      	adds	r3, #52	@ 0x34
 8001372:	461a      	mov	r2, r3
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	cb03      	ldmia	r3!, {r0, r1}
 8001378:	6010      	str	r0, [r2, #0]
 800137a:	6051      	str	r1, [r2, #4]
            BME->isUpdated = 1;
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <bme280_getVals+0xfc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            BME->adcVals.ut = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | ((int32_t)data[5] >> 4);
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	031a      	lsls	r2, r3, #12
 800138a:	7a3b      	ldrb	r3, [r7, #8]
 800138c:	011b      	lsls	r3, r3, #4
 800138e:	431a      	orrs	r2, r3
 8001390:	7a7b      	ldrb	r3, [r7, #9]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	4b10      	ldr	r3, [pc, #64]	@ (80013dc <bme280_getVals+0xfc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	430a      	orrs	r2, r1
 800139e:	609a      	str	r2, [r3, #8]
            BME->adcVals.up = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | ((int32_t)data[2] >> 4);
 80013a0:	793b      	ldrb	r3, [r7, #4]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	431a      	orrs	r2, r3
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	091b      	lsrs	r3, r3, #4
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	4619      	mov	r1, r3
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <bme280_getVals+0xfc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	60da      	str	r2, [r3, #12]
            BME->adcVals.uh = ((int32_t)data[6] << 8) | ((int32_t)data[7]);
 80013ba:	7abb      	ldrb	r3, [r7, #10]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	7afb      	ldrb	r3, [r7, #11]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <bme280_getVals+0xfc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	611a      	str	r2, [r3, #16]
        }
    }
    last_measuring = current_measuring;
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <bme280_getVals+0x100>)
 80013cc:	7bbb      	ldrb	r3, [r7, #14]
 80013ce:	7013      	strb	r3, [r2, #0]
    UNUSED(retVal);
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000022c 	.word	0x2000022c
 80013dc:	20000230 	.word	0x20000230
 80013e0:	20000000 	.word	0x20000000
 80013e4:	00000000 	.word	0x00000000

080013e8 <bme280_calculate_altitude>:



void bme280_calculate_altitude() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    // Standard sea level pressure in hPa
    float p_seaLevel = 1013.25;
 80013ee:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <bme280_calculate_altitude+0x98>)
 80013f0:	607b      	str	r3, [r7, #4]

    // Calculate altitude from pressure using barometric formula
    float rawAltitude = 44330.0 * (1.0 - pow((BME->pressure / p_seaLevel), (1.0 / 5.255)));
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80013fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001402:	ee16 0a90 	vmov	r0, s13
 8001406:	f7ff f8bf 	bl	8000588 <__aeabi_f2d>
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	ed9f 1b18 	vldr	d1, [pc, #96]	@ 8001470 <bme280_calculate_altitude+0x88>
 8001412:	ec43 2b10 	vmov	d0, r2, r3
 8001416:	f00f f957 	bl	80106c8 <pow>
 800141a:	ec53 2b10 	vmov	r2, r3, d0
 800141e:	f04f 0000 	mov.w	r0, #0
 8001422:	4919      	ldr	r1, [pc, #100]	@ (8001488 <bme280_calculate_altitude+0xa0>)
 8001424:	f7fe ff50 	bl	80002c8 <__aeabi_dsub>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	a311      	add	r3, pc, #68	@ (adr r3, 8001478 <bme280_calculate_altitude+0x90>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fbf1 	bl	8000c28 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	603b      	str	r3, [r7, #0]

    // Apply base altitude correction
    BME->altitude = rawAltitude - BME->base_altitude;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001452:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <bme280_calculate_altitude+0x9c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	ed97 7a00 	vldr	s14, [r7]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	f3af 8000 	nop.w
 8001470:	ccd9456c 	.word	0xccd9456c
 8001474:	3fc85b95 	.word	0x3fc85b95
 8001478:	00000000 	.word	0x00000000
 800147c:	40e5a540 	.word	0x40e5a540
 8001480:	447d5000 	.word	0x447d5000
 8001484:	20000230 	.word	0x20000230
 8001488:	3ff00000 	.word	0x3ff00000

0800148c <bme280_config>:

void bme280_config()
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08e      	sub	sp, #56	@ 0x38
 8001490:	af04      	add	r7, sp, #16
    uint8_t params[25];
    HAL_StatusTypeDef retVal;

    BME->base_altitude = 0.0;
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <bme280_config+0x26c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Reset and initialize I2C
    HAL_I2C_DeInit(I2C_);
 800149c:	4b97      	ldr	r3, [pc, #604]	@ (80016fc <bme280_config+0x270>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 fd69 	bl	8007f78 <HAL_I2C_DeInit>
    HAL_Delay(5);
 80014a6:	2005      	movs	r0, #5
 80014a8:	f004 febe 	bl	8006228 <HAL_Delay>
    HAL_I2C_Init(I2C_);
 80014ac:	4b93      	ldr	r3, [pc, #588]	@ (80016fc <bme280_config+0x270>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f006 fc1d 	bl	8007cf0 <HAL_I2C_Init>
    HAL_Delay(5);
 80014b6:	2005      	movs	r0, #5
 80014b8:	f004 feb6 	bl	8006228 <HAL_Delay>

    // Read calibration parameters
    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM1_START, I2C_MEMADD_SIZE_8BIT, params, 25, 200);
 80014bc:	4b8f      	ldr	r3, [pc, #572]	@ (80016fc <bme280_config+0x270>)
 80014be:	6818      	ldr	r0, [r3, #0]
 80014c0:	23c8      	movs	r3, #200	@ 0xc8
 80014c2:	9302      	str	r3, [sp, #8]
 80014c4:	2319      	movs	r3, #25
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2301      	movs	r3, #1
 80014ce:	2288      	movs	r2, #136	@ 0x88
 80014d0:	21ec      	movs	r1, #236	@ 0xec
 80014d2:	f006 fe7b 	bl	80081cc <HAL_I2C_Mem_Read>
 80014d6:	4603      	mov	r3, r0
 80014d8:	77fb      	strb	r3, [r7, #31]

    BME->parameters->dig_T1 = params[0] | (uint16_t)(params[1] << 8);
 80014da:	793b      	ldrb	r3, [r7, #4]
 80014dc:	4619      	mov	r1, r3
 80014de:	797b      	ldrb	r3, [r7, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b84      	ldr	r3, [pc, #528]	@ (80016f8 <bme280_config+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	b292      	uxth	r2, r2
 80014ee:	801a      	strh	r2, [r3, #0]
    BME->parameters->dig_T2 = params[2] | ((int16_t)params[3] << 8);
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	b219      	sxth	r1, r3
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b21a      	sxth	r2, r3
 80014fa:	4b7f      	ldr	r3, [pc, #508]	@ (80016f8 <bme280_config+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	b212      	sxth	r2, r2
 8001504:	805a      	strh	r2, [r3, #2]
    BME->parameters->dig_T3 = params[4] | ((int16_t)params[5] << 8);
 8001506:	7a3b      	ldrb	r3, [r7, #8]
 8001508:	b219      	sxth	r1, r3
 800150a:	7a7b      	ldrb	r3, [r7, #9]
 800150c:	021b      	lsls	r3, r3, #8
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b79      	ldr	r3, [pc, #484]	@ (80016f8 <bme280_config+0x26c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	b212      	sxth	r2, r2
 800151a:	809a      	strh	r2, [r3, #4]
    BME->parameters->dig_P1 = params[6] | ((uint16_t)params[7] << 8);
 800151c:	7abb      	ldrb	r3, [r7, #10]
 800151e:	b21a      	sxth	r2, r3
 8001520:	7afb      	ldrb	r3, [r7, #11]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21b      	sxth	r3, r3
 8001526:	4313      	orrs	r3, r2
 8001528:	b21a      	sxth	r2, r3
 800152a:	4b73      	ldr	r3, [pc, #460]	@ (80016f8 <bme280_config+0x26c>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	80da      	strh	r2, [r3, #6]
    BME->parameters->dig_P2 = params[8] | ((int16_t)params[9] << 8);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b219      	sxth	r1, r3
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <bme280_config+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	b212      	sxth	r2, r2
 8001548:	811a      	strh	r2, [r3, #8]
    BME->parameters->dig_P3 = params[10] | ((int16_t)params[11] << 8);
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	b219      	sxth	r1, r3
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b68      	ldr	r3, [pc, #416]	@ (80016f8 <bme280_config+0x26c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	b212      	sxth	r2, r2
 800155e:	815a      	strh	r2, [r3, #10]
    BME->parameters->dig_P4 = params[12] | ((int16_t)params[13] << 8);
 8001560:	7c3b      	ldrb	r3, [r7, #16]
 8001562:	b219      	sxth	r1, r3
 8001564:	7c7b      	ldrb	r3, [r7, #17]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <bme280_config+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	430a      	orrs	r2, r1
 8001572:	b212      	sxth	r2, r2
 8001574:	819a      	strh	r2, [r3, #12]
    BME->parameters->dig_P5 = params[14] | ((int16_t)params[15] << 8);
 8001576:	7cbb      	ldrb	r3, [r7, #18]
 8001578:	b219      	sxth	r1, r3
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b21a      	sxth	r2, r3
 8001580:	4b5d      	ldr	r3, [pc, #372]	@ (80016f8 <bme280_config+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	b212      	sxth	r2, r2
 800158a:	81da      	strh	r2, [r3, #14]
    BME->parameters->dig_P6 = params[16] | ((int16_t)params[17] << 8);
 800158c:	7d3b      	ldrb	r3, [r7, #20]
 800158e:	b219      	sxth	r1, r3
 8001590:	7d7b      	ldrb	r3, [r7, #21]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	b21a      	sxth	r2, r3
 8001596:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <bme280_config+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	b212      	sxth	r2, r2
 80015a0:	821a      	strh	r2, [r3, #16]
    BME->parameters->dig_P7 = params[18] | ((int16_t)params[19] << 8);
 80015a2:	7dbb      	ldrb	r3, [r7, #22]
 80015a4:	b219      	sxth	r1, r3
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	b21a      	sxth	r2, r3
 80015ac:	4b52      	ldr	r3, [pc, #328]	@ (80016f8 <bme280_config+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	b212      	sxth	r2, r2
 80015b6:	825a      	strh	r2, [r3, #18]
    BME->parameters->dig_P8 = params[20] | ((int16_t)params[21] << 8);
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b219      	sxth	r1, r3
 80015bc:	7e7b      	ldrb	r3, [r7, #25]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <bme280_config+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	b212      	sxth	r2, r2
 80015cc:	829a      	strh	r2, [r3, #20]
    BME->parameters->dig_P9 = params[22] | ((int16_t)params[23] << 8);
 80015ce:	7ebb      	ldrb	r3, [r7, #26]
 80015d0:	b219      	sxth	r1, r3
 80015d2:	7efb      	ldrb	r3, [r7, #27]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21a      	sxth	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	@ (80016f8 <bme280_config+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	b212      	sxth	r2, r2
 80015e2:	82da      	strh	r2, [r3, #22]
    BME->parameters->dig_H1 = params[24];
 80015e4:	4b44      	ldr	r3, [pc, #272]	@ (80016f8 <bme280_config+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	7f3a      	ldrb	r2, [r7, #28]
 80015ec:	761a      	strb	r2, [r3, #24]

    retVal = HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_PARAM2_START, I2C_MEMADD_SIZE_8BIT, params, 7, 50);
 80015ee:	4b43      	ldr	r3, [pc, #268]	@ (80016fc <bme280_config+0x270>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2332      	movs	r3, #50	@ 0x32
 80015f4:	9302      	str	r3, [sp, #8]
 80015f6:	2307      	movs	r3, #7
 80015f8:	9301      	str	r3, [sp, #4]
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	9300      	str	r3, [sp, #0]
 80015fe:	2301      	movs	r3, #1
 8001600:	22e1      	movs	r2, #225	@ 0xe1
 8001602:	21ec      	movs	r1, #236	@ 0xec
 8001604:	f006 fde2 	bl	80081cc <HAL_I2C_Mem_Read>
 8001608:	4603      	mov	r3, r0
 800160a:	77fb      	strb	r3, [r7, #31]
    BME->parameters->dig_H2 = params[0] | ((int16_t)params[1] << 8);
 800160c:	793b      	ldrb	r3, [r7, #4]
 800160e:	b219      	sxth	r1, r3
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <bme280_config+0x26c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	b212      	sxth	r2, r2
 8001620:	835a      	strh	r2, [r3, #26]
    BME->parameters->dig_H3 = params[2];
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <bme280_config+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	79ba      	ldrb	r2, [r7, #6]
 800162a:	771a      	strb	r2, [r3, #28]
    BME->parameters->dig_H4 = (params[4] & 0xF) | ((int16_t)params[3] << 4);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21b      	sxth	r3, r3
 8001630:	f003 030f 	and.w	r3, r3, #15
 8001634:	b219      	sxth	r1, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	b21a      	sxth	r2, r3
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <bme280_config+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	b212      	sxth	r2, r2
 8001646:	83da      	strh	r2, [r3, #30]
    BME->parameters->dig_H5 = ((params[4] & 0xF0) >> 4) | ((int16_t)params[5] << 4);
 8001648:	7a3b      	ldrb	r3, [r7, #8]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	b2db      	uxtb	r3, r3
 800164e:	b219      	sxth	r1, r3
 8001650:	7a7b      	ldrb	r3, [r7, #9]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	b21a      	sxth	r2, r3
 8001656:	4b28      	ldr	r3, [pc, #160]	@ (80016f8 <bme280_config+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	b212      	sxth	r2, r2
 8001660:	841a      	strh	r2, [r3, #32]
    BME->parameters->dig_H6 = params[6];
 8001662:	7aba      	ldrb	r2, [r7, #10]
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <bme280_config+0x26c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b252      	sxtb	r2, r2
 800166c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    uint8_t data_ctrl = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_output_speed;
 8001674:	4b20      	ldr	r3, [pc, #128]	@ (80016f8 <bme280_config+0x26c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	799b      	ldrb	r3, [r3, #6]
 800167a:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_HUM, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <bme280_config+0x270>)
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	2332      	movs	r3, #50	@ 0x32
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2301      	movs	r3, #1
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1cfb      	adds	r3, r7, #3
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f2      	movs	r2, #242	@ 0xf2
 8001690:	21ec      	movs	r1, #236	@ 0xec
 8001692:	f006 fca1 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8001696:	4603      	mov	r3, r0
 8001698:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	70fb      	strb	r3, [r7, #3]
    data_ctrl = BME->device_config.bme280_mode | (BME->device_config.bme280_output_speed << 2) | (BME->device_config.bme280_output_speed << 5);
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <bme280_config+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	795b      	ldrb	r3, [r3, #5]
 80016a4:	b25a      	sxtb	r2, r3
 80016a6:	4b14      	ldr	r3, [pc, #80]	@ (80016f8 <bme280_config+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	799b      	ldrb	r3, [r3, #6]
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25a      	sxtb	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <bme280_config+0x26c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	799b      	ldrb	r3, [r3, #6]
 80016ba:	015b      	lsls	r3, r3, #5
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b25b      	sxtb	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CTRL_MEAS, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <bme280_config+0x270>)
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	2332      	movs	r3, #50	@ 0x32
 80016cc:	9302      	str	r3, [sp, #8]
 80016ce:	2301      	movs	r3, #1
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2301      	movs	r3, #1
 80016d8:	22f4      	movs	r2, #244	@ 0xf4
 80016da:	21ec      	movs	r1, #236	@ 0xec
 80016dc:	f006 fc7c 	bl	8007fd8 <HAL_I2C_Mem_Write>
 80016e0:	4603      	mov	r3, r0
 80016e2:	77fb      	strb	r3, [r7, #31]
    data_ctrl = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	70fb      	strb	r3, [r7, #3]
    data_ctrl = (BME->device_config.bme280_standby_time << 5) | (BME->device_config.bme280_filter << 2);
 80016e8:	4b03      	ldr	r3, [pc, #12]	@ (80016f8 <bme280_config+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	79db      	ldrb	r3, [r3, #7]
 80016ee:	015b      	lsls	r3, r3, #5
 80016f0:	b25a      	sxtb	r2, r3
 80016f2:	4b01      	ldr	r3, [pc, #4]	@ (80016f8 <bme280_config+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e003      	b.n	8001700 <bme280_config+0x274>
 80016f8:	20000230 	.word	0x20000230
 80016fc:	2000022c 	.word	0x2000022c
 8001700:	791b      	ldrb	r3, [r3, #4]
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	b25b      	sxtb	r3, r3
 8001706:	4313      	orrs	r3, r2
 8001708:	b25b      	sxtb	r3, r3
 800170a:	b2db      	uxtb	r3, r3
 800170c:	70fb      	strb	r3, [r7, #3]
    retVal = HAL_I2C_Mem_Write(I2C_, BME280_ADD, BME280_CONFIG, I2C_MEMADD_SIZE_8BIT, &data_ctrl, 1, 50);
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <bme280_config+0x2fc>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	2332      	movs	r3, #50	@ 0x32
 8001714:	9302      	str	r3, [sp, #8]
 8001716:	2301      	movs	r3, #1
 8001718:	9301      	str	r3, [sp, #4]
 800171a:	1cfb      	adds	r3, r7, #3
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2301      	movs	r3, #1
 8001720:	22f5      	movs	r2, #245	@ 0xf5
 8001722:	21ec      	movs	r1, #236	@ 0xec
 8001724:	f006 fc58 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8001728:	4603      	mov	r3, r0
 800172a:	77fb      	strb	r3, [r7, #31]

    // Take base altitude readings
    float base = 0.0;
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_Delay(100);
 8001732:	2064      	movs	r0, #100	@ 0x64
 8001734:	f004 fd78 	bl	8006228 <HAL_Delay>

    for(int i = 0; i < 50; i++) {
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	e011      	b.n	8001762 <bme280_config+0x2d6>
        bme280_update();
 800173e:	f000 f861 	bl	8001804 <bme280_update>
        base += BME->altitude;
 8001742:	4b12      	ldr	r3, [pc, #72]	@ (800178c <bme280_config+0x300>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001752:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        HAL_Delay(30);
 8001756:	201e      	movs	r0, #30
 8001758:	f004 fd66 	bl	8006228 <HAL_Delay>
    for(int i = 0; i < 50; i++) {
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	3301      	adds	r3, #1
 8001760:	623b      	str	r3, [r7, #32]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b31      	cmp	r3, #49	@ 0x31
 8001766:	ddea      	ble.n	800173e <bme280_config+0x2b2>
    }
    BME->base_altitude = (base / 50.0);
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <bme280_config+0x300>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001770:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001790 <bme280_config+0x304>
 8001774:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001778:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    bme280_update();
 800177c:	f000 f842 	bl	8001804 <bme280_update>

    UNUSED(retVal);
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000022c 	.word	0x2000022c
 800178c:	20000230 	.word	0x20000230
 8001790:	42480000 	.word	0x42480000

08001794 <bme280_init>:

void bme280_init(BME_280_t* BME_sensor, I2C_HandleTypeDef* I2C_bme)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b088      	sub	sp, #32
 8001798:	af04      	add	r7, sp, #16
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    BME = BME_sensor;
 800179e:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <bme280_init+0x5c>)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6013      	str	r3, [r2, #0]
    I2C_ = I2C_bme;
 80017a4:	4a13      	ldr	r2, [pc, #76]	@ (80017f4 <bme280_init+0x60>)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6013      	str	r3, [r2, #0]
    BME->parameters = &bme_params;
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <bme280_init+0x5c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <bme280_init+0x64>)
 80017b0:	601a      	str	r2, [r3, #0]
    bme_started_flag = 0;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <bme280_init+0x68>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

    // Check BME280 ID
    uint8_t buf[1];
    HAL_I2C_Mem_Read(I2C_, BME280_ADD, BME280_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <bme280_init+0x60>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	2332      	movs	r3, #50	@ 0x32
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2301      	movs	r3, #1
 80017cc:	22d0      	movs	r2, #208	@ 0xd0
 80017ce:	21ec      	movs	r1, #236	@ 0xec
 80017d0:	f006 fcfc 	bl	80081cc <HAL_I2C_Mem_Read>
    if(*buf == 0x60)
 80017d4:	7b3b      	ldrb	r3, [r7, #12]
 80017d6:	2b60      	cmp	r3, #96	@ 0x60
 80017d8:	d103      	bne.n	80017e2 <bme280_init+0x4e>
        is_BME_ok = 1;
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <bme280_init+0x6c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]
    else
        is_BME_ok = 0;
}
 80017e0:	e002      	b.n	80017e8 <bme280_init+0x54>
        is_BME_ok = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <bme280_init+0x6c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000230 	.word	0x20000230
 80017f4:	2000022c 	.word	0x2000022c
 80017f8:	20001400 	.word	0x20001400
 80017fc:	20000234 	.word	0x20000234
 8001800:	20001584 	.word	0x20001584

08001804 <bme280_update>:

void bme280_update() {
 8001804:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001808:	b0d2      	sub	sp, #328	@ 0x148
 800180a:	af00      	add	r7, sp, #0
    int32_t var1_t, var2_t, T, adc_T;
    bme280_getVals();
 800180c:	f7ff fd68 	bl	80012e0 <bme280_getVals>

    if(BME->isUpdated == 1){
 8001810:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <bme280_update+0x88>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001818:	2b01      	cmp	r3, #1
 800181a:	f040 840d 	bne.w	8002038 <bme280_update+0x834>

    	if (!bme_started_flag) {
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <bme280_update+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <bme280_update+0x48>
    	    bme_started_flag = 1;
 8001826:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <bme280_update+0x8c>)
 8001828:	2301      	movs	r3, #1
 800182a:	7013      	strb	r3, [r2, #0]
    	    BME->lastTime = HAL_GetTick();
 800182c:	f004 fcf0 	bl	8006210 <HAL_GetTick>
 8001830:	ee07 0a90 	vmov	s15, r0
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <bme280_update+0x88>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800183c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	    BME->deltaTime1 = 0.0f;
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <bme280_update+0x88>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	e041      	b.n	80018d0 <bme280_update+0xcc>
    	} else {
    	    uint32_t now = HAL_GetTick();
 800184c:	f004 fce0 	bl	8006210 <HAL_GetTick>
 8001850:	f8c7 013c 	str.w	r0, [r7, #316]	@ 0x13c
    	    BME->deltaTime1 = (now > BME->lastTime) ? (now - BME->lastTime) : 0.0f;
 8001854:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001858:	ee07 3a90 	vmov	s15, r3
 800185c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001860:	4b0a      	ldr	r3, [pc, #40]	@ (800188c <bme280_update+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001868:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800186c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001870:	dd12      	ble.n	8001898 <bme280_update+0x94>
 8001872:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800187e:	4b03      	ldr	r3, [pc, #12]	@ (800188c <bme280_update+0x88>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800188a:	e007      	b.n	800189c <bme280_update+0x98>
 800188c:	20000230 	.word	0x20000230
 8001890:	20000234 	.word	0x20000234
 8001894:	00000000 	.word	0x00000000
 8001898:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 8001894 <bme280_update+0x90>
 800189c:	4bda      	ldr	r3, [pc, #872]	@ (8001c08 <bme280_update+0x404>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->deltaTime1 = BME->deltaTime1 / 1000.0f;
 80018a4:	4bd8      	ldr	r3, [pc, #864]	@ (8001c08 <bme280_update+0x404>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80018ac:	4bd6      	ldr	r3, [pc, #856]	@ (8001c08 <bme280_update+0x404>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	eddf 6ad6 	vldr	s13, [pc, #856]	@ 8001c0c <bme280_update+0x408>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
    	    BME->lastTime = now;
 80018bc:	4bd2      	ldr	r3, [pc, #840]	@ (8001c08 <bme280_update+0x404>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80018c4:	ee07 2a90 	vmov	s15, r2
 80018c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018cc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    	}

        //For temperature
        adc_T = BME->adcVals.ut;
 80018d0:	4bcd      	ldr	r3, [pc, #820]	@ (8001c08 <bme280_update+0x404>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
        var1_t = ((((adc_T >> 3 ) - ((int32_t)BME->parameters->dig_T1 << 1))) * ((int32_t)BME->parameters->dig_T2)) >> 11;
 80018da:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80018de:	10da      	asrs	r2, r3, #3
 80018e0:	4bc9      	ldr	r3, [pc, #804]	@ (8001c08 <bme280_update+0x404>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	1ad2      	subs	r2, r2, r3
 80018ec:	4bc6      	ldr	r3, [pc, #792]	@ (8001c08 <bme280_update+0x404>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	12db      	asrs	r3, r3, #11
 80018fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
        var2_t = (((((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1)) * ((adc_T >> 4) - ((int32_t)BME->parameters->dig_T1))) >> 12) * ((int32_t)BME->parameters->dig_T3)) >> 14;
 8001900:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001904:	111a      	asrs	r2, r3, #4
 8001906:	4bc0      	ldr	r3, [pc, #768]	@ (8001c08 <bme280_update+0x404>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	1ad1      	subs	r1, r2, r3
 8001910:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001914:	111a      	asrs	r2, r3, #4
 8001916:	4bbc      	ldr	r3, [pc, #752]	@ (8001c08 <bme280_update+0x404>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	fb01 f303 	mul.w	r3, r1, r3
 8001924:	131a      	asrs	r2, r3, #12
 8001926:	4bb8      	ldr	r3, [pc, #736]	@ (8001c08 <bme280_update+0x404>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	139b      	asrs	r3, r3, #14
 8001936:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
        int32_t t_fine = var1_t + var2_t;
 800193a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800193e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001942:	4413      	add	r3, r2
 8001944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
        T = (t_fine * 5 + 128) >> 8;
 8001948:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3380      	adds	r3, #128	@ 0x80
 8001954:	121b      	asrs	r3, r3, #8
 8001956:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        BME->temperature = (float)T / 100.0;
 800195a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800195e:	ee07 3a90 	vmov	s15, r3
 8001962:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001966:	4ba8      	ldr	r3, [pc, #672]	@ (8001c08 <bme280_update+0x404>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8001c10 <bme280_update+0x40c>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	edc3 7a05 	vstr	s15, [r3, #20]

        //For pressure
        int64_t var1_p, var2_p, P, adc_P;
        adc_P = (int64_t)BME->adcVals.up;
 8001976:	4ba4      	ldr	r3, [pc, #656]	@ (8001c08 <bme280_update+0x404>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	17da      	asrs	r2, r3, #31
 800197e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001980:	657a      	str	r2, [r7, #84]	@ 0x54
 8001982:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001986:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
        var1_p = ((int64_t)t_fine) - 128000;
 800198a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001994:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001998:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800199c:	460b      	mov	r3, r1
 800199e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 80019a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019a4:	4613      	mov	r3, r2
 80019a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80019aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80019ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019b0:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        var2_p = var1_p * var1_p * (int64_t)BME->parameters->dig_P6;
 80019b4:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019bc:	fb03 f102 	mul.w	r1, r3, r2
 80019c0:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80019c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	18ca      	adds	r2, r1, r3
 80019ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019d2:	fba3 4503 	umull	r4, r5, r3, r3
 80019d6:	1953      	adds	r3, r2, r5
 80019d8:	461d      	mov	r5, r3
 80019da:	4b8b      	ldr	r3, [pc, #556]	@ (8001c08 <bme280_update+0x404>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80019e4:	b21b      	sxth	r3, r3
 80019e6:	17da      	asrs	r2, r3, #31
 80019e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019f0:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 80019f4:	4603      	mov	r3, r0
 80019f6:	fb03 f205 	mul.w	r2, r3, r5
 80019fa:	460b      	mov	r3, r1
 80019fc:	fb04 f303 	mul.w	r3, r4, r3
 8001a00:	4413      	add	r3, r2
 8001a02:	4602      	mov	r2, r0
 8001a04:	fba4 1202 	umull	r1, r2, r4, r2
 8001a08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a12:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a16:	4413      	add	r3, r2
 8001a18:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a1c:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	@ 0xd0
 8001a20:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
 8001a24:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + ((var1_p *(int64_t)BME->parameters->dig_P5) <<17);
 8001a28:	4b77      	ldr	r3, [pc, #476]	@ (8001c08 <bme280_update+0x404>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a3a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a42:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8001a46:	462a      	mov	r2, r5
 8001a48:	fb02 f203 	mul.w	r2, r2, r3
 8001a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001a50:	4621      	mov	r1, r4
 8001a52:	fb01 f303 	mul.w	r3, r1, r3
 8001a56:	441a      	add	r2, r3
 8001a58:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	fba3 ab01 	umull	sl, fp, r3, r1
 8001a62:	eb02 030b 	add.w	r3, r2, fp
 8001a66:	469b      	mov	fp, r3
 8001a68:	f04f 0000 	mov.w	r0, #0
 8001a6c:	f04f 0100 	mov.w	r1, #0
 8001a70:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8001a74:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8001a78:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8001a7c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001a80:	1814      	adds	r4, r2, r0
 8001a82:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a84:	414b      	adcs	r3, r1
 8001a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a88:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a8c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var2_p = var2_p + (((int64_t)BME->parameters->dig_P4) << 35);
 8001a90:	4b5d      	ldr	r3, [pc, #372]	@ (8001c08 <bme280_update+0x404>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	17da      	asrs	r2, r3, #31
 8001a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001aa6:	f04f 0000 	mov.w	r0, #0
 8001aaa:	f04f 0100 	mov.w	r1, #0
 8001aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001ab2:	00d9      	lsls	r1, r3, #3
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001aba:	1814      	adds	r4, r2, r0
 8001abc:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001abe:	414b      	adcs	r3, r1
 8001ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ac2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001ac6:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
        var1_p = ((var1_p * var1_p * (int64_t)BME->parameters->dig_P3) >> 8) + ((var1_p * (int64_t)BME->parameters->dig_P2) << 12);
 8001aca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	fb03 f102 	mul.w	r1, r3, r2
 8001ad6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001ada:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	18ca      	adds	r2, r1, r3
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ae8:	fba3 8903 	umull	r8, r9, r3, r3
 8001aec:	eb02 0309 	add.w	r3, r2, r9
 8001af0:	4699      	mov	r9, r3
 8001af2:	4b45      	ldr	r3, [pc, #276]	@ (8001c08 <bme280_update+0x404>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b08:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	fb03 f209 	mul.w	r2, r3, r9
 8001b12:	460b      	mov	r3, r1
 8001b14:	fb08 f303 	mul.w	r3, r8, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	fba8 1202 	umull	r1, r2, r8, r2
 8001b20:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8001b24:	460a      	mov	r2, r1
 8001b26:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
 8001b2a:	f8d7 2104 	ldr.w	r2, [r7, #260]	@ 0x104
 8001b2e:	4413      	add	r3, r2
 8001b30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b34:	f04f 0000 	mov.w	r0, #0
 8001b38:	f04f 0100 	mov.w	r1, #0
 8001b3c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001b40:	4623      	mov	r3, r4
 8001b42:	0a18      	lsrs	r0, r3, #8
 8001b44:	462b      	mov	r3, r5
 8001b46:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b4a:	462b      	mov	r3, r5
 8001b4c:	1219      	asrs	r1, r3, #8
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <bme280_update+0x404>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	17da      	asrs	r2, r3, #31
 8001b5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001b60:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001b64:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b68:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001b6c:	464a      	mov	r2, r9
 8001b6e:	fb02 f203 	mul.w	r2, r2, r3
 8001b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b76:	4644      	mov	r4, r8
 8001b78:	fb04 f303 	mul.w	r3, r4, r3
 8001b7c:	441a      	add	r2, r3
 8001b7e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b82:	4644      	mov	r4, r8
 8001b84:	fba3 4304 	umull	r4, r3, r3, r4
 8001b88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8001ba8:	464c      	mov	r4, r9
 8001baa:	0323      	lsls	r3, r4, #12
 8001bac:	4644      	mov	r4, r8
 8001bae:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001bb2:	4644      	mov	r4, r8
 8001bb4:	0322      	lsls	r2, r4, #12
 8001bb6:	1884      	adds	r4, r0, r2
 8001bb8:	633c      	str	r4, [r7, #48]	@ 0x30
 8001bba:	eb41 0303 	adc.w	r3, r1, r3
 8001bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001bc4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
        var1_p = (((((int64_t)1) <<47 ) + var1_p)) * ((int64_t) BME->parameters->dig_P1) >> 33;
 8001bc8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001bcc:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001bd0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8001bd4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c08 <bme280_update+0x404>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	88db      	ldrh	r3, [r3, #6]
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2200      	movs	r2, #0
 8001be4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001be8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001bec:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	464b      	mov	r3, r9
 8001bfe:	4621      	mov	r1, r4
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	4413      	add	r3, r2
 8001c06:	e005      	b.n	8001c14 <bme280_update+0x410>
 8001c08:	20000230 	.word	0x20000230
 8001c0c:	447a0000 	.word	0x447a0000
 8001c10:	42c80000 	.word	0x42c80000
 8001c14:	4622      	mov	r2, r4
 8001c16:	4641      	mov	r1, r8
 8001c18:	fba2 1201 	umull	r1, r2, r2, r1
 8001c1c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001c20:	460a      	mov	r2, r1
 8001c22:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001c26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001c2a:	4413      	add	r3, r2
 8001c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	104a      	asrs	r2, r1, #1
 8001c40:	4629      	mov	r1, r5
 8001c42:	17cb      	asrs	r3, r1, #31
 8001c44:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
        if(var1_p == 0)
 8001c48:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	d106      	bne.n	8001c5e <bme280_update+0x45a>
        {
            P = 0;
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
 8001c5c:	e14b      	b.n	8001ef6 <bme280_update+0x6f2>
        }
        else
        {
            P = 1048576 - adc_P;
 8001c5e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c62:	2100      	movs	r1, #0
 8001c64:	f5d2 1080 	rsbs	r0, r2, #1048576	@ 0x100000
 8001c68:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001c6a:	eb61 0303 	sbc.w	r3, r1, r3
 8001c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c70:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c74:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
            P = (((P << 31) - var2_p) * 3125) / var1_p;
 8001c78:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001c7c:	f04f 0000 	mov.w	r0, #0
 8001c80:	f04f 0100 	mov.w	r1, #0
 8001c84:	07d9      	lsls	r1, r3, #31
 8001c86:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8001c8a:	07d0      	lsls	r0, r2, #31
 8001c8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001c90:	1a84      	subs	r4, r0, r2
 8001c92:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8001c96:	eb61 0303 	sbc.w	r3, r1, r3
 8001c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001c9e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001ca2:	4622      	mov	r2, r4
 8001ca4:	462b      	mov	r3, r5
 8001ca6:	1891      	adds	r1, r2, r2
 8001ca8:	6239      	str	r1, [r7, #32]
 8001caa:	415b      	adcs	r3, r3
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001cb2:	4621      	mov	r1, r4
 8001cb4:	1851      	adds	r1, r2, r1
 8001cb6:	61b9      	str	r1, [r7, #24]
 8001cb8:	4629      	mov	r1, r5
 8001cba:	414b      	adcs	r3, r1
 8001cbc:	61fb      	str	r3, [r7, #28]
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001cca:	4649      	mov	r1, r9
 8001ccc:	018b      	lsls	r3, r1, #6
 8001cce:	4641      	mov	r1, r8
 8001cd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	018a      	lsls	r2, r1, #6
 8001cd8:	4641      	mov	r1, r8
 8001cda:	1889      	adds	r1, r1, r2
 8001cdc:	6139      	str	r1, [r7, #16]
 8001cde:	4649      	mov	r1, r9
 8001ce0:	eb43 0101 	adc.w	r1, r3, r1
 8001ce4:	6179      	str	r1, [r7, #20]
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001cf2:	4649      	mov	r1, r9
 8001cf4:	008b      	lsls	r3, r1, #2
 8001cf6:	4641      	mov	r1, r8
 8001cf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001cfc:	4641      	mov	r1, r8
 8001cfe:	008a      	lsls	r2, r1, #2
 8001d00:	4610      	mov	r0, r2
 8001d02:	4619      	mov	r1, r3
 8001d04:	4603      	mov	r3, r0
 8001d06:	4622      	mov	r2, r4
 8001d08:	189b      	adds	r3, r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	462a      	mov	r2, r5
 8001d10:	eb42 0303 	adc.w	r3, r2, r3
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001d22:	4649      	mov	r1, r9
 8001d24:	008b      	lsls	r3, r1, #2
 8001d26:	4641      	mov	r1, r8
 8001d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d2c:	4641      	mov	r1, r8
 8001d2e:	008a      	lsls	r2, r1, #2
 8001d30:	4610      	mov	r0, r2
 8001d32:	4619      	mov	r1, r3
 8001d34:	4603      	mov	r3, r0
 8001d36:	4622      	mov	r2, r4
 8001d38:	189b      	adds	r3, r3, r2
 8001d3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d3e:	462b      	mov	r3, r5
 8001d40:	460a      	mov	r2, r1
 8001d42:	eb42 0303 	adc.w	r3, r2, r3
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001d4a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d52:	f7ff f8c7 	bl	8000ee4 <__aeabi_ldivmod>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
            var1_p = (((int64_t) BME->parameters->dig_P9) * (P >> 13) * (P >> 13)) >> 25;
 8001d5e:	4bb9      	ldr	r3, [pc, #740]	@ (8002044 <bme280_update+0x840>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	17da      	asrs	r2, r3, #31
 8001d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001d70:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	0b50      	lsrs	r0, r2, #13
 8001d7e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d82:	1359      	asrs	r1, r3, #13
 8001d84:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d88:	462b      	mov	r3, r5
 8001d8a:	fb00 f203 	mul.w	r2, r0, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	fb03 f301 	mul.w	r3, r3, r1
 8001d94:	4413      	add	r3, r2
 8001d96:	4622      	mov	r2, r4
 8001d98:	fba2 1200 	umull	r1, r2, r2, r0
 8001d9c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001da0:	460a      	mov	r2, r1
 8001da2:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8001da6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001db0:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8001db4:	f04f 0000 	mov.w	r0, #0
 8001db8:	f04f 0100 	mov.w	r1, #0
 8001dbc:	0b50      	lsrs	r0, r2, #13
 8001dbe:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001dc2:	1359      	asrs	r1, r3, #13
 8001dc4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001dc8:	462b      	mov	r3, r5
 8001dca:	fb00 f203 	mul.w	r2, r0, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	fb03 f301 	mul.w	r3, r3, r1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	fba2 1200 	umull	r1, r2, r2, r0
 8001ddc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001de0:	460a      	mov	r2, r1
 8001de2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001de6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001dea:	4413      	add	r3, r2
 8001dec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	0e4a      	lsrs	r2, r1, #25
 8001e00:	4629      	mov	r1, r5
 8001e02:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001e06:	4629      	mov	r1, r5
 8001e08:	164b      	asrs	r3, r1, #25
 8001e0a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            var2_p = (((int64_t) BME->parameters->dig_P8) * P) >> 19;
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002044 <bme280_update+0x840>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	17da      	asrs	r2, r3, #31
 8001e1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8001e1e:	677a      	str	r2, [r7, #116]	@ 0x74
 8001e20:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8001e24:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001e28:	462a      	mov	r2, r5
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001e32:	4621      	mov	r1, r4
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	4413      	add	r3, r2
 8001e3a:	f8d7 2140 	ldr.w	r2, [r7, #320]	@ 0x140
 8001e3e:	4621      	mov	r1, r4
 8001e40:	fba2 1201 	umull	r1, r2, r2, r1
 8001e44:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e48:	460a      	mov	r2, r1
 8001e4a:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001e4e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001e52:	4413      	add	r3, r2
 8001e54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001e64:	4621      	mov	r1, r4
 8001e66:	0cca      	lsrs	r2, r1, #19
 8001e68:	4629      	mov	r1, r5
 8001e6a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001e6e:	4629      	mov	r1, r5
 8001e70:	14cb      	asrs	r3, r1, #19
 8001e72:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
            P = (( P + var1_p + var2_p) >> 8) + (((int64_t)BME->parameters->dig_P7) << 4);
 8001e76:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001e7a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e7e:	1884      	adds	r4, r0, r2
 8001e80:	66bc      	str	r4, [r7, #104]	@ 0x68
 8001e82:	eb41 0303 	adc.w	r3, r1, r3
 8001e86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001e88:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001e8c:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001e90:	4621      	mov	r1, r4
 8001e92:	1889      	adds	r1, r1, r2
 8001e94:	6639      	str	r1, [r7, #96]	@ 0x60
 8001e96:	4629      	mov	r1, r5
 8001e98:	eb43 0101 	adc.w	r1, r3, r1
 8001e9c:	6679      	str	r1, [r7, #100]	@ 0x64
 8001e9e:	f04f 0000 	mov.w	r0, #0
 8001ea2:	f04f 0100 	mov.w	r1, #0
 8001ea6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001eaa:	4623      	mov	r3, r4
 8001eac:	0a18      	lsrs	r0, r3, #8
 8001eae:	462b      	mov	r3, r5
 8001eb0:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001eb4:	462b      	mov	r3, r5
 8001eb6:	1219      	asrs	r1, r3, #8
 8001eb8:	4b62      	ldr	r3, [pc, #392]	@ (8002044 <bme280_update+0x840>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	17da      	asrs	r2, r3, #31
 8001ec6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ec8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	@ 0x58
 8001ed6:	464c      	mov	r4, r9
 8001ed8:	0123      	lsls	r3, r4, #4
 8001eda:	4644      	mov	r4, r8
 8001edc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001ee0:	4644      	mov	r4, r8
 8001ee2:	0122      	lsls	r2, r4, #4
 8001ee4:	1884      	adds	r4, r0, r2
 8001ee6:	603c      	str	r4, [r7, #0]
 8001ee8:	eb41 0303 	adc.w	r3, r1, r3
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef2:	e9c7 3450 	strd	r3, r4, [r7, #320]	@ 0x140
        }

        BME->pressure = ((float)P / 256.0 / 100.0);
 8001ef6:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	@ 0x140
 8001efa:	f7fe ffb5 	bl	8000e68 <__aeabi_l2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7fe fb41 	bl	8000588 <__aeabi_f2d>
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002048 <bme280_update+0x844>)
 8001f0c:	f7fe fcbe 	bl	800088c <__aeabi_ddiv>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <bme280_update+0x848>)
 8001f1e:	f7fe fcb5 	bl	800088c <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4947      	ldr	r1, [pc, #284]	@ (8002044 <bme280_update+0x840>)
 8001f28:	680c      	ldr	r4, [r1, #0]
 8001f2a:	4610      	mov	r0, r2
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f7fe fe7b 	bl	8000c28 <__aeabi_d2f>
 8001f32:	4603      	mov	r3, r0
 8001f34:	61a3      	str	r3, [r4, #24]

        //for humidity
        uint32_t var_h, adc_H;
        adc_H = BME->adcVals.uh;
 8001f36:	4b43      	ldr	r3, [pc, #268]	@ (8002044 <bme280_update+0x840>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

        var_h = (t_fine - ((int32_t)76800));
 8001f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001f44:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001f48:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (((((adc_H << 14) - (((int32_t)BME->parameters->dig_H4) << 20) - (((int32_t)BME->parameters->dig_H5) * var_h)) + ((int32_t)16384)) >> 15) * (((((((var_h *((int32_t)BME->parameters->dig_H6)) >> 10) * (((var_h * ((int32_t)BME->parameters->dig_H3)) >> 11) + ((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)BME->parameters->dig_H2) + 8192) >> 14));
 8001f4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001f50:	039a      	lsls	r2, r3, #14
 8001f52:	4b3c      	ldr	r3, [pc, #240]	@ (8002044 <bme280_update+0x840>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001f5c:	051b      	lsls	r3, r3, #20
 8001f5e:	1ad2      	subs	r2, r2, r3
 8001f60:	4b38      	ldr	r3, [pc, #224]	@ (8002044 <bme280_update+0x840>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001f7a:	0bdb      	lsrs	r3, r3, #15
 8001f7c:	4a31      	ldr	r2, [pc, #196]	@ (8002044 <bme280_update+0x840>)
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001f86:	4611      	mov	r1, r2
 8001f88:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001f8c:	fb01 f202 	mul.w	r2, r1, r2
 8001f90:	0a92      	lsrs	r2, r2, #10
 8001f92:	492c      	ldr	r1, [pc, #176]	@ (8002044 <bme280_update+0x840>)
 8001f94:	6809      	ldr	r1, [r1, #0]
 8001f96:	6809      	ldr	r1, [r1, #0]
 8001f98:	7f09      	ldrb	r1, [r1, #28]
 8001f9a:	4608      	mov	r0, r1
 8001f9c:	f8d7 1108 	ldr.w	r1, [r7, #264]	@ 0x108
 8001fa0:	fb00 f101 	mul.w	r1, r0, r1
 8001fa4:	0ac9      	lsrs	r1, r1, #11
 8001fa6:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001faa:	fb01 f202 	mul.w	r2, r1, r2
 8001fae:	0a92      	lsrs	r2, r2, #10
 8001fb0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001fb4:	4923      	ldr	r1, [pc, #140]	@ (8002044 <bme280_update+0x840>)
 8001fb6:	6809      	ldr	r1, [r1, #0]
 8001fb8:	6809      	ldr	r1, [r1, #0]
 8001fba:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001fbe:	fb01 f202 	mul.w	r2, r1, r2
 8001fc2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001fc6:	0b92      	lsrs	r2, r2, #14
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h - (((((var_h >> 15) * (var_h >> 15)) >> 7) * ((int32_t)BME->parameters->dig_H1)) >> 4));
 8001fd0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001fd4:	0bdb      	lsrs	r3, r3, #15
 8001fd6:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001fda:	0bd2      	lsrs	r2, r2, #15
 8001fdc:	fb02 f303 	mul.w	r3, r2, r3
 8001fe0:	09db      	lsrs	r3, r3, #7
 8001fe2:	4a18      	ldr	r2, [pc, #96]	@ (8002044 <bme280_update+0x840>)
 8001fe4:	6812      	ldr	r2, [r2, #0]
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	7e12      	ldrb	r2, [r2, #24]
 8001fea:	fb02 f303 	mul.w	r3, r2, r3
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f8d7 2108 	ldr.w	r2, [r7, #264]	@ 0x108
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        var_h = (var_h < 0 ? 0 : var_h);
        var_h = (var_h > 419430400 ? 419430400 : var_h);
 8001ffa:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ffe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8002002:	bf28      	it	cs
 8002004:	f04f 53c8 	movcs.w	r3, #419430400	@ 0x19000000
 8002008:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
        BME->humidity = ((float)(var_h >> 12)) / 1024.0;
 800200c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002010:	0b1b      	lsrs	r3, r3, #12
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201a:	4b0a      	ldr	r3, [pc, #40]	@ (8002044 <bme280_update+0x840>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002050 <bme280_update+0x84c>
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	edc3 7a07 	vstr	s15, [r3, #28]

        // Calculate raw altitude (no filtering)
        bme280_calculate_altitude();
 800202a:	f7ff f9dd 	bl	80013e8 <bme280_calculate_altitude>
        BME->isUpdated = 0;
 800202e:	4b05      	ldr	r3, [pc, #20]	@ (8002044 <bme280_update+0x840>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
}
 8002038:	bf00      	nop
 800203a:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800203e:	46bd      	mov	sp, r7
 8002040:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002044:	20000230 	.word	0x20000230
 8002048:	40700000 	.word	0x40700000
 800204c:	40590000 	.word	0x40590000
 8002050:	44800000 	.word	0x44800000

08002054 <bmi088_init>:
	HAL_I2C_Init(BMI_I2c);

}
*/
uint8_t bmi088_init(bmi088_struct_t* BMI)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af04      	add	r7, sp, #16
 800205a:	6078      	str	r0, [r7, #4]
	//quaternionSet_zero();
	uint8_t ret_val = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
	BMI->flags.isGyroUpdated = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
	BMI->flags.isAccelUpdated = 0;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	705a      	strb	r2, [r3, #1]
	is_time_updated = 0;
 800206c:	4b23      	ldr	r3, [pc, #140]	@ (80020fc <bmi088_init+0xa8>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
	is_starded = 0;
 8002072:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <bmi088_init+0xac>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	733b      	strb	r3, [r7, #12]

	if(BMI->device_config.offsets == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <bmi088_init+0x40>
	{
		BMI->device_config.offsets = calloc(sizeof(*BMI->device_config.offsets), 1);
 8002084:	2101      	movs	r1, #1
 8002086:	2018      	movs	r0, #24
 8002088:	f009 fb5c 	bl	800b744 <calloc>
 800208c:	4603      	mov	r3, r0
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	615a      	str	r2, [r3, #20]

	}

	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CHIP_ID, I2C_MEMADD_SIZE_8BIT, buf, 1, 50);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	68d8      	ldr	r0, [r3, #12]
 8002098:	2332      	movs	r3, #50	@ 0x32
 800209a:	9302      	str	r3, [sp, #8]
 800209c:	2301      	movs	r3, #1
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	2200      	movs	r2, #0
 80020aa:	2130      	movs	r1, #48	@ 0x30
 80020ac:	f006 f88e 	bl	80081cc <HAL_I2C_Mem_Read>
 80020b0:	4603      	mov	r3, r0
 80020b2:	73bb      	strb	r3, [r7, #14]
	ret = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &buf[1], 1, 50);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68d8      	ldr	r0, [r3, #12]
 80020b8:	2332      	movs	r3, #50	@ 0x32
 80020ba:	9302      	str	r3, [sp, #8]
 80020bc:	2301      	movs	r3, #1
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	f107 030c 	add.w	r3, r7, #12
 80020c4:	3301      	adds	r3, #1
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2301      	movs	r3, #1
 80020ca:	2200      	movs	r2, #0
 80020cc:	21d0      	movs	r1, #208	@ 0xd0
 80020ce:	f006 f87d 	bl	80081cc <HAL_I2C_Mem_Read>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73bb      	strb	r3, [r7, #14]
	UNUSED(ret);
	if(!(buf[0] == 0x1E))
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	2b1e      	cmp	r3, #30
 80020da:	d003      	beq.n	80020e4 <bmi088_init+0x90>
	{
		ret_val = ret_val | 0x01;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
	}
	if(!(buf[1] == 0x0F))
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
 80020e6:	2b0f      	cmp	r3, #15
 80020e8:	d003      	beq.n	80020f2 <bmi088_init+0x9e>
	{
		ret_val = ret_val | 0x02;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	73fb      	strb	r3, [r7, #15]
	}

	return ret_val;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000235 	.word	0x20000235
 8002100:	20000236 	.word	0x20000236

08002104 <bmi088_config>:

void bmi088_config(bmi088_struct_t* BMI)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b088      	sub	sp, #32
 8002108:	af04      	add	r7, sp, #16
 800210a:	6078      	str	r0, [r7, #4]
	HAL_NVIC_DisableIRQ(BMI->device_config.acc_IRQ);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8002112:	4618      	mov	r0, r3
 8002114:	f004 ff15 	bl	8006f42 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(BMI->device_config.gyro_IRQ);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800211e:	4618      	mov	r0, r3
 8002120:	f004 ff0f 	bl	8006f42 <HAL_NVIC_DisableIRQ>

	HAL_StatusTypeDef retVal = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1];

	buf[0] = ACC_PWR_SAVE_ULTRA;
 8002128:	2301      	movs	r3, #1
 800212a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // power save ultra
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68d8      	ldr	r0, [r3, #12]
 8002130:	2364      	movs	r3, #100	@ 0x64
 8002132:	9302      	str	r3, [sp, #8]
 8002134:	2301      	movs	r3, #1
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	f107 030c 	add.w	r3, r7, #12
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2301      	movs	r3, #1
 8002140:	227c      	movs	r2, #124	@ 0x7c
 8002142:	2130      	movs	r1, #48	@ 0x30
 8002144:	f005 ff48 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	4313      	orrs	r3, r2
 8002150:	73fb      	strb	r3, [r7, #15]

	buf[0] = ACC_DISABLE;
 8002152:	2300      	movs	r3, #0
 8002154:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // accel disable
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68d8      	ldr	r0, [r3, #12]
 800215a:	2364      	movs	r3, #100	@ 0x64
 800215c:	9302      	str	r3, [sp, #8]
 800215e:	2301      	movs	r3, #1
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	f107 030c 	add.w	r3, r7, #12
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2301      	movs	r3, #1
 800216a:	227d      	movs	r2, #125	@ 0x7d
 800216c:	2130      	movs	r1, #48	@ 0x30
 800216e:	f005 ff33 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	4313      	orrs	r3, r2
 800217a:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(20);
 800217c:	2014      	movs	r0, #20
 800217e:	f004 f853 	bl	8006228 <HAL_Delay>

	buf[0] = ACC_RESET;
 8002182:	23b6      	movs	r3, #182	@ 0xb6
 8002184:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // Accel reset
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68d8      	ldr	r0, [r3, #12]
 800218a:	2364      	movs	r3, #100	@ 0x64
 800218c:	9302      	str	r3, [sp, #8]
 800218e:	2301      	movs	r3, #1
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	f107 030c 	add.w	r3, r7, #12
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2301      	movs	r3, #1
 800219a:	227e      	movs	r2, #126	@ 0x7e
 800219c:	2130      	movs	r1, #48	@ 0x30
 800219e:	f005 ff1b 	bl	8007fd8 <HAL_I2C_Mem_Write>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <bmi088_config+0xb4>
 80021b2:	4bb4      	ldr	r3, [pc, #720]	@ (8002484 <bmi088_config+0x380>)
 80021b4:	22a1      	movs	r2, #161	@ 0xa1
 80021b6:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021b8:	200a      	movs	r0, #10
 80021ba:	f004 f835 	bl	8006228 <HAL_Delay>

	buf[0] = FIFO_RESET;
 80021be:	23b0      	movs	r3, #176	@ 0xb0
 80021c0:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_SOFTRESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); // FIFO reset
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68d8      	ldr	r0, [r3, #12]
 80021c6:	2364      	movs	r3, #100	@ 0x64
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	2301      	movs	r3, #1
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2301      	movs	r3, #1
 80021d6:	227e      	movs	r2, #126	@ 0x7e
 80021d8:	2130      	movs	r1, #48	@ 0x30
 80021da:	f005 fefd 	bl	8007fd8 <HAL_I2C_Mem_Write>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <bmi088_config+0xf0>
 80021ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002484 <bmi088_config+0x380>)
 80021f0:	22a6      	movs	r2, #166	@ 0xa6
 80021f2:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 80021f4:	200a      	movs	r0, #10
 80021f6:	f004 f817 	bl	8006228 <HAL_Delay>

	buf[0] = GYRO_RESET;
 80021fa:	23b6      	movs	r3, #182	@ 0xb6
 80021fc:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_SOFT_RESET, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro reset
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68d8      	ldr	r0, [r3, #12]
 8002202:	2364      	movs	r3, #100	@ 0x64
 8002204:	9302      	str	r3, [sp, #8]
 8002206:	2301      	movs	r3, #1
 8002208:	9301      	str	r3, [sp, #4]
 800220a:	f107 030c 	add.w	r3, r7, #12
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2301      	movs	r3, #1
 8002212:	2214      	movs	r2, #20
 8002214:	21d0      	movs	r1, #208	@ 0xd0
 8002216:	f005 fedf 	bl	8007fd8 <HAL_I2C_Mem_Write>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	4313      	orrs	r3, r2
 8002222:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <bmi088_config+0x12c>
 800222a:	4b96      	ldr	r3, [pc, #600]	@ (8002484 <bmi088_config+0x380>)
 800222c:	22ab      	movs	r2, #171	@ 0xab
 800222e:	601a      	str	r2, [r3, #0]
	HAL_Delay(10);
 8002230:	200a      	movs	r0, #10
 8002232:	f003 fff9 	bl	8006228 <HAL_Delay>

	//Gyroscope configuration.
	buf[0] = BMI->device_config.gyro_range;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	7a9b      	ldrb	r3, [r3, #10]
 800223a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 100); //Gyro range config
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68d8      	ldr	r0, [r3, #12]
 8002240:	2364      	movs	r3, #100	@ 0x64
 8002242:	9302      	str	r3, [sp, #8]
 8002244:	2301      	movs	r3, #1
 8002246:	9301      	str	r3, [sp, #4]
 8002248:	f107 030c 	add.w	r3, r7, #12
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	2301      	movs	r3, #1
 8002250:	220f      	movs	r2, #15
 8002252:	21d0      	movs	r1, #208	@ 0xd0
 8002254:	f005 fec0 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8002258:	4603      	mov	r3, r0
 800225a:	461a      	mov	r2, r3
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	4313      	orrs	r3, r2
 8002260:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <bmi088_config+0x16a>
 8002268:	4b86      	ldr	r3, [pc, #536]	@ (8002484 <bmi088_config+0x380>)
 800226a:	22b1      	movs	r2, #177	@ 0xb1
 800226c:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_bandWidth;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7a5b      	ldrb	r3, [r3, #9]
 8002272:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_BANDWITH, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro bandwidth config
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68d8      	ldr	r0, [r3, #12]
 8002278:	2314      	movs	r3, #20
 800227a:	9302      	str	r3, [sp, #8]
 800227c:	2301      	movs	r3, #1
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2301      	movs	r3, #1
 8002288:	2210      	movs	r2, #16
 800228a:	21d0      	movs	r1, #208	@ 0xd0
 800228c:	f005 fea4 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8002290:	4603      	mov	r3, r0
 8002292:	461a      	mov	r2, r3
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	4313      	orrs	r3, r2
 8002298:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <bmi088_config+0x1a2>
 80022a0:	4b78      	ldr	r3, [pc, #480]	@ (8002484 <bmi088_config+0x380>)
 80022a2:	22b5      	movs	r2, #181	@ 0xb5
 80022a4:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.gyro_powerMode;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	7a1b      	ldrb	r3, [r3, #8]
 80022aa:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_LPM1, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro power mode config.
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68d8      	ldr	r0, [r3, #12]
 80022b0:	2314      	movs	r3, #20
 80022b2:	9302      	str	r3, [sp, #8]
 80022b4:	2301      	movs	r3, #1
 80022b6:	9301      	str	r3, [sp, #4]
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	2211      	movs	r2, #17
 80022c2:	21d0      	movs	r1, #208	@ 0xd0
 80022c4:	f005 fe88 	bl	8007fd8 <HAL_I2C_Mem_Write>
 80022c8:	4603      	mov	r3, r0
 80022ca:	461a      	mov	r2, r3
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80022d2:	7bfb      	ldrb	r3, [r7, #15]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <bmi088_config+0x1da>
 80022d8:	4b6a      	ldr	r3, [pc, #424]	@ (8002484 <bmi088_config+0x380>)
 80022da:	22b9      	movs	r2, #185	@ 0xb9
 80022dc:	601a      	str	r2, [r3, #0]
	HAL_Delay(20);
 80022de:	2014      	movs	r0, #20
 80022e0:	f003 ffa2 	bl	8006228 <HAL_Delay>

	//gyro interrupt
	buf[0] = GYRO_INT_ENABLE;
 80022e4:	2380      	movs	r3, #128	@ 0x80
 80022e6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt enabled.
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68d8      	ldr	r0, [r3, #12]
 80022ec:	2314      	movs	r3, #20
 80022ee:	9302      	str	r3, [sp, #8]
 80022f0:	2301      	movs	r3, #1
 80022f2:	9301      	str	r3, [sp, #4]
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	2301      	movs	r3, #1
 80022fc:	2215      	movs	r2, #21
 80022fe:	21d0      	movs	r1, #208	@ 0xd0
 8002300:	f005 fe6a 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8002304:	4603      	mov	r3, r0
 8002306:	461a      	mov	r2, r3
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	4313      	orrs	r3, r2
 800230c:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d002      	beq.n	800231a <bmi088_config+0x216>
 8002314:	4b5b      	ldr	r3, [pc, #364]	@ (8002484 <bmi088_config+0x380>)
 8002316:	22bf      	movs	r2, #191	@ 0xbf
 8002318:	601a      	str	r2, [r3, #0]

	buf[0] = (GYRO_INT_IO_PP << 1) | (GYRO_INT_ACT_HIGH << 0) | (GYRO_INT_ACT_HIGH << 2);
 800231a:	2305      	movs	r3, #5
 800231c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt 3 config
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68d8      	ldr	r0, [r3, #12]
 8002322:	2314      	movs	r3, #20
 8002324:	9302      	str	r3, [sp, #8]
 8002326:	2301      	movs	r3, #1
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	f107 030c 	add.w	r3, r7, #12
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	2216      	movs	r2, #22
 8002334:	21d0      	movs	r1, #208	@ 0xd0
 8002336:	f005 fe4f 	bl	8007fd8 <HAL_I2C_Mem_Write>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	7bfb      	ldrb	r3, [r7, #15]
 8002340:	4313      	orrs	r3, r2
 8002342:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002344:	7bfb      	ldrb	r3, [r7, #15]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <bmi088_config+0x24c>
 800234a:	4b4e      	ldr	r3, [pc, #312]	@ (8002484 <bmi088_config+0x380>)
 800234c:	22c3      	movs	r2, #195	@ 0xc3
 800234e:	601a      	str	r2, [r3, #0]

	buf[0] = GYRO_INT_MAP_BOTH;
 8002350:	2381      	movs	r3, #129	@ 0x81
 8002352:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_INT_3_4_IO_MAP, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //Gyro interrupt pin 3 mapped.
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68d8      	ldr	r0, [r3, #12]
 8002358:	2314      	movs	r3, #20
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	2301      	movs	r3, #1
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2301      	movs	r3, #1
 8002368:	2218      	movs	r2, #24
 800236a:	21d0      	movs	r1, #208	@ 0xd0
 800236c:	f005 fe34 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	4313      	orrs	r3, r2
 8002378:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d002      	beq.n	8002386 <bmi088_config+0x282>
 8002380:	4b40      	ldr	r3, [pc, #256]	@ (8002484 <bmi088_config+0x380>)
 8002382:	22c7      	movs	r2, #199	@ 0xc7
 8002384:	601a      	str	r2, [r3, #0]

	//Accelerometer configuration.
	buf[0] = ACC_ENABLE;
 8002386:	2304      	movs	r3, #4
 8002388:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); // Accel on
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68d8      	ldr	r0, [r3, #12]
 800238e:	2314      	movs	r3, #20
 8002390:	9302      	str	r3, [sp, #8]
 8002392:	2301      	movs	r3, #1
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2301      	movs	r3, #1
 800239e:	227d      	movs	r2, #125	@ 0x7d
 80023a0:	2130      	movs	r1, #48	@ 0x30
 80023a2:	f005 fe19 	bl	8007fd8 <HAL_I2C_Mem_Write>
 80023a6:	4603      	mov	r3, r0
 80023a8:	461a      	mov	r2, r3
 80023aa:	7bfb      	ldrb	r3, [r7, #15]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <bmi088_config+0x2b8>
 80023b6:	4b33      	ldr	r3, [pc, #204]	@ (8002484 <bmi088_config+0x380>)
 80023b8:	22cc      	movs	r2, #204	@ 0xcc
 80023ba:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023bc:	2008      	movs	r0, #8
 80023be:	f003 ff33 	bl	8006228 <HAL_Delay>

	buf[0] = BMI->device_config.acc_powerMode;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	791b      	ldrb	r3, [r3, #4]
 80023c6:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_PWR_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel mode active
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68d8      	ldr	r0, [r3, #12]
 80023cc:	2314      	movs	r3, #20
 80023ce:	9302      	str	r3, [sp, #8]
 80023d0:	2301      	movs	r3, #1
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2301      	movs	r3, #1
 80023dc:	227c      	movs	r2, #124	@ 0x7c
 80023de:	2130      	movs	r1, #48	@ 0x30
 80023e0:	f005 fdfa 	bl	8007fd8 <HAL_I2C_Mem_Write>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d002      	beq.n	80023fa <bmi088_config+0x2f6>
 80023f4:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <bmi088_config+0x380>)
 80023f6:	22d1      	movs	r2, #209	@ 0xd1
 80023f8:	601a      	str	r2, [r3, #0]
	HAL_Delay(8);
 80023fa:	2008      	movs	r0, #8
 80023fc:	f003 ff14 	bl	8006228 <HAL_Delay>

	buf[0] = (BMI->device_config.acc_bandwith << 4) | BMI->device_config.acc_outputDateRate;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	799b      	ldrb	r3, [r3, #6]
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	b25a      	sxtb	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	79db      	ldrb	r3, [r3, #7]
 800240c:	b25b      	sxtb	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b25b      	sxtb	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_CONF, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel bandwith and odr selection
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68d8      	ldr	r0, [r3, #12]
 800241a:	2314      	movs	r3, #20
 800241c:	9302      	str	r3, [sp, #8]
 800241e:	2301      	movs	r3, #1
 8002420:	9301      	str	r3, [sp, #4]
 8002422:	f107 030c 	add.w	r3, r7, #12
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2301      	movs	r3, #1
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	2130      	movs	r1, #48	@ 0x30
 800242e:	f005 fdd3 	bl	8007fd8 <HAL_I2C_Mem_Write>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	4313      	orrs	r3, r2
 800243a:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <bmi088_config+0x344>
 8002442:	4b10      	ldr	r3, [pc, #64]	@ (8002484 <bmi088_config+0x380>)
 8002444:	22d6      	movs	r2, #214	@ 0xd6
 8002446:	601a      	str	r2, [r3, #0]

	buf[0] = BMI->device_config.acc_range;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	795b      	ldrb	r3, [r3, #5]
 800244c:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_RANGE, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel range config.
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68d8      	ldr	r0, [r3, #12]
 8002452:	2314      	movs	r3, #20
 8002454:	9302      	str	r3, [sp, #8]
 8002456:	2301      	movs	r3, #1
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	2241      	movs	r2, #65	@ 0x41
 8002464:	2130      	movs	r1, #48	@ 0x30
 8002466:	f005 fdb7 	bl	8007fd8 <HAL_I2C_Mem_Write>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	7bfb      	ldrb	r3, [r7, #15]
 8002470:	4313      	orrs	r3, r2
 8002472:	73fb      	strb	r3, [r7, #15]
	retVal != HAL_OK ? errorLine =__LINE__ : 0;
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <bmi088_config+0x384>
 800247a:	4b02      	ldr	r3, [pc, #8]	@ (8002484 <bmi088_config+0x380>)
 800247c:	22da      	movs	r2, #218	@ 0xda
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e002      	b.n	8002488 <bmi088_config+0x384>
 8002482:	bf00      	nop
 8002484:	20000238 	.word	0x20000238

	//accel interrupt
	buf[0] = (0x01 << 3) | (ACC_INT1_OD_PP << 2) | (ACC_INT1_LVL_ACT_HIGH << 1);
 8002488:	230a      	movs	r3, #10
 800248a:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT1_IO_CTRL, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt config.
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68d8      	ldr	r0, [r3, #12]
 8002490:	2314      	movs	r3, #20
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2301      	movs	r3, #1
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f107 030c 	add.w	r3, r7, #12
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2301      	movs	r3, #1
 80024a0:	2253      	movs	r2, #83	@ 0x53
 80024a2:	2130      	movs	r1, #48	@ 0x30
 80024a4:	f005 fd98 	bl	8007fd8 <HAL_I2C_Mem_Write>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	buf[0] = (0x01 << 2);
 80024b2:	2304      	movs	r3, #4
 80024b4:	733b      	strb	r3, [r7, #12]
	retVal |= HAL_I2C_Mem_Write(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_INT_MAP_DATA, I2C_MEMADD_SIZE_8BIT, buf, 1, 20); //accel interrupt DRDY map to pin1.
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68d8      	ldr	r0, [r3, #12]
 80024ba:	2314      	movs	r3, #20
 80024bc:	9302      	str	r3, [sp, #8]
 80024be:	2301      	movs	r3, #1
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	2301      	movs	r3, #1
 80024ca:	2258      	movs	r2, #88	@ 0x58
 80024cc:	2130      	movs	r1, #48	@ 0x30
 80024ce:	f005 fd83 	bl	8007fd8 <HAL_I2C_Mem_Write>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	4313      	orrs	r3, r2
 80024da:	73fb      	strb	r3, [r7, #15]
	//retVal != HAL_OK ? errorLine =__LINE__ : 0;

	HAL_NVIC_EnableIRQ(BMI->device_config.acc_IRQ);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 fd1f 	bl	8006f26 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(BMI->device_config.gyro_IRQ);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f004 fd19 	bl	8006f26 <HAL_NVIC_EnableIRQ>
	HAL_Delay(70);
 80024f4:	2046      	movs	r0, #70	@ 0x46
 80024f6:	f003 fe97 	bl	8006228 <HAL_Delay>
}
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	0000      	movs	r0, r0
	...

08002508 <bmi088_update>:


void bmi088_update(bmi088_struct_t* BMI)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b092      	sub	sp, #72	@ 0x48
 800250c:	af04      	add	r7, sp, #16
 800250e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret_val = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		if(BMI->flags.isAccelUpdated)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	785b      	ldrb	r3, [r3, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	f000 820d 	beq.w	800293a <bmi088_update+0x432>
		{
			uint8_t raw_accel[9];
			uint8_t	raw_temp[2];

			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_accel, 9, 20);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68d8      	ldr	r0, [r3, #12]
 8002524:	2314      	movs	r3, #20
 8002526:	9302      	str	r3, [sp, #8]
 8002528:	2309      	movs	r3, #9
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	f107 0314 	add.w	r3, r7, #20
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	2301      	movs	r3, #1
 8002534:	2212      	movs	r2, #18
 8002536:	2130      	movs	r1, #48	@ 0x30
 8002538:	f005 fe48 	bl	80081cc <HAL_I2C_Mem_Read>
 800253c:	4603      	mov	r3, r0
 800253e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, ACC_I2C_ADD, ACC_TEMP_MSB, I2C_MEMADD_SIZE_8BIT, raw_temp, 2, 20);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68d8      	ldr	r0, [r3, #12]
 8002546:	2314      	movs	r3, #20
 8002548:	9302      	str	r3, [sp, #8]
 800254a:	2302      	movs	r3, #2
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	2222      	movs	r2, #34	@ 0x22
 8002558:	2130      	movs	r1, #48	@ 0x30
 800255a:	f005 fe37 	bl	80081cc <HAL_I2C_Mem_Read>
 800255e:	4603      	mov	r3, r0
 8002560:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			uint16_t Temp_uint11 = (raw_temp[0] << 3) | (raw_temp[1] >> 5);
 8002564:	7c3b      	ldrb	r3, [r7, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	b21a      	sxth	r2, r3
 800256a:	7c7b      	ldrb	r3, [r7, #17]
 800256c:	095b      	lsrs	r3, r3, #5
 800256e:	b2db      	uxtb	r3, r3
 8002570:	b21b      	sxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	b21b      	sxth	r3, r3
 8002576:	86bb      	strh	r3, [r7, #52]	@ 0x34
			int16_t Temp_int11 = 0;
 8002578:	2300      	movs	r3, #0
 800257a:	867b      	strh	r3, [r7, #50]	@ 0x32
			if (Temp_uint11 > 1023){
 800257c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800257e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002582:	d305      	bcc.n	8002590 <bmi088_update+0x88>
				Temp_int11 = Temp_uint11 - 2048;
 8002584:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002586:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800258a:	b29b      	uxth	r3, r3
 800258c:	867b      	strh	r3, [r7, #50]	@ 0x32
 800258e:	e023      	b.n	80025d8 <bmi088_update+0xd0>
			}
			else{
				Temp_int11 = Temp_uint11;
 8002590:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002592:	867b      	strh	r3, [r7, #50]	@ 0x32
				BMI->datas.temp = (float)Temp_int11 * 0.125 + 23.0;
 8002594:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002598:	ee07 3a90 	vmov	s15, r3
 800259c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a0:	ee17 0a90 	vmov	r0, s15
 80025a4:	f7fd fff0 	bl	8000588 <__aeabi_f2d>
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80025b0:	f7fe f842 	bl	8000638 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	4bcf      	ldr	r3, [pc, #828]	@ (8002900 <bmi088_update+0x3f8>)
 80025c2:	f7fd fe83 	bl	80002cc <__adddf3>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe fb2b 	bl	8000c28 <__aeabi_d2f>
 80025d2:	4602      	mov	r2, r0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			uint32_t sensorTime = (raw_accel[8] << 16) | (raw_accel[7] << 8) | raw_accel[6];
 80025d8:	7f3b      	ldrb	r3, [r7, #28]
 80025da:	041a      	lsls	r2, r3, #16
 80025dc:	7efb      	ldrb	r3, [r7, #27]
 80025de:	021b      	lsls	r3, r3, #8
 80025e0:	4313      	orrs	r3, r2
 80025e2:	7eba      	ldrb	r2, [r7, #26]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

			BMI->datas.current_time= (float)sensorTime * 39.0625 / 1000000.0;
 80025e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	ee17 0a90 	vmov	r0, s15
 80025f6:	f7fd ffc7 	bl	8000588 <__aeabi_f2d>
 80025fa:	a3b9      	add	r3, pc, #740	@ (adr r3, 80028e0 <bmi088_update+0x3d8>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f81a 	bl	8000638 <__aeabi_dmul>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4610      	mov	r0, r2
 800260a:	4619      	mov	r1, r3
 800260c:	a3b6      	add	r3, pc, #728	@ (adr r3, 80028e8 <bmi088_update+0x3e0>)
 800260e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002612:	f7fe f93b 	bl	800088c <__aeabi_ddiv>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4610      	mov	r0, r2
 800261c:	4619      	mov	r1, r3
 800261e:	f7fe fb03 	bl	8000c28 <__aeabi_d2f>
 8002622:	4602      	mov	r2, r0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	669a      	str	r2, [r3, #104]	@ 0x68

			int16_t acc_z_16 = (raw_accel[5] << 8) | raw_accel[4];
 8002628:	7e7b      	ldrb	r3, [r7, #25]
 800262a:	021b      	lsls	r3, r3, #8
 800262c:	b21a      	sxth	r2, r3
 800262e:	7e3b      	ldrb	r3, [r7, #24]
 8002630:	b21b      	sxth	r3, r3
 8002632:	4313      	orrs	r3, r2
 8002634:	857b      	strh	r3, [r7, #42]	@ 0x2a
			int16_t acc_y_16 = (raw_accel[3] << 8) | raw_accel[2];
 8002636:	7dfb      	ldrb	r3, [r7, #23]
 8002638:	021b      	lsls	r3, r3, #8
 800263a:	b21a      	sxth	r2, r3
 800263c:	7dbb      	ldrb	r3, [r7, #22]
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	853b      	strh	r3, [r7, #40]	@ 0x28
			int16_t acc_x_16 = (raw_accel[1] << 8) | raw_accel[0];
 8002644:	7d7b      	ldrb	r3, [r7, #21]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21a      	sxth	r2, r3
 800264a:	7d3b      	ldrb	r3, [r7, #20]
 800264c:	b21b      	sxth	r3, r3
 800264e:	4313      	orrs	r3, r2
 8002650:	84fb      	strh	r3, [r7, #38]	@ 0x26

			BMI->datas.acc_z = ((float)acc_z_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Z_OFFSET)*9.81/1000;
 8002652:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800265e:	ee17 0a90 	vmov	r0, s15
 8002662:	f7fd ff91 	bl	8000588 <__aeabi_f2d>
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	4ba6      	ldr	r3, [pc, #664]	@ (8002904 <bmi088_update+0x3fc>)
 800266c:	f7fe f90e 	bl	800088c <__aeabi_ddiv>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	4ba2      	ldr	r3, [pc, #648]	@ (8002908 <bmi088_update+0x400>)
 800267e:	f7fd ffdb 	bl	8000638 <__aeabi_dmul>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4610      	mov	r0, r2
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b9f      	ldr	r3, [pc, #636]	@ (800290c <bmi088_update+0x404>)
 8002690:	f7fd ffd2 	bl	8000638 <__aeabi_dmul>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	795b      	ldrb	r3, [r3, #5]
 80026a0:	3301      	adds	r3, #1
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026aa:	ee17 0a90 	vmov	r0, s15
 80026ae:	f7fd ff6b 	bl	8000588 <__aeabi_f2d>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	ec43 2b11 	vmov	d1, r2, r3
 80026ba:	ed9f 0b8d 	vldr	d0, [pc, #564]	@ 80028f0 <bmi088_update+0x3e8>
 80026be:	f00e f803 	bl	80106c8 <pow>
 80026c2:	ec53 2b10 	vmov	r2, r3, d0
 80026c6:	4620      	mov	r0, r4
 80026c8:	4629      	mov	r1, r5
 80026ca:	f7fd ffb5 	bl	8000638 <__aeabi_dmul>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	4b8d      	ldr	r3, [pc, #564]	@ (8002910 <bmi088_update+0x408>)
 80026dc:	f7fd fdf4 	bl	80002c8 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	a383      	add	r3, pc, #524	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ffa3 	bl	8000638 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <bmi088_update+0x400>)
 8002700:	f7fe f8c4 	bl	800088c <__aeabi_ddiv>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	f7fe fa8c 	bl	8000c28 <__aeabi_d2f>
 8002710:	4602      	mov	r2, r0
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	661a      	str	r2, [r3, #96]	@ 0x60
			BMI->datas.acc_y = ((float)acc_y_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_Y_OFFSET)*9.81/1000;
 8002716:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002722:	ee17 0a90 	vmov	r0, s15
 8002726:	f7fd ff2f 	bl	8000588 <__aeabi_f2d>
 800272a:	f04f 0200 	mov.w	r2, #0
 800272e:	4b75      	ldr	r3, [pc, #468]	@ (8002904 <bmi088_update+0x3fc>)
 8002730:	f7fe f8ac 	bl	800088c <__aeabi_ddiv>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	4b71      	ldr	r3, [pc, #452]	@ (8002908 <bmi088_update+0x400>)
 8002742:	f7fd ff79 	bl	8000638 <__aeabi_dmul>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	4b6e      	ldr	r3, [pc, #440]	@ (800290c <bmi088_update+0x404>)
 8002754:	f7fd ff70 	bl	8000638 <__aeabi_dmul>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4614      	mov	r4, r2
 800275e:	461d      	mov	r5, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	795b      	ldrb	r3, [r3, #5]
 8002764:	3301      	adds	r3, #1
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800276e:	ee17 0a90 	vmov	r0, s15
 8002772:	f7fd ff09 	bl	8000588 <__aeabi_f2d>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ec43 2b11 	vmov	d1, r2, r3
 800277e:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 80028f0 <bmi088_update+0x3e8>
 8002782:	f00d ffa1 	bl	80106c8 <pow>
 8002786:	ec53 2b10 	vmov	r2, r3, d0
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd ff53 	bl	8000638 <__aeabi_dmul>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4610      	mov	r0, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	4b5d      	ldr	r3, [pc, #372]	@ (8002914 <bmi088_update+0x40c>)
 80027a0:	f7fd fd94 	bl	80002cc <__adddf3>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	a352      	add	r3, pc, #328	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 80027ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b2:	f7fd ff41 	bl	8000638 <__aeabi_dmul>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	4b51      	ldr	r3, [pc, #324]	@ (8002908 <bmi088_update+0x400>)
 80027c4:	f7fe f862 	bl	800088c <__aeabi_ddiv>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4610      	mov	r0, r2
 80027ce:	4619      	mov	r1, r3
 80027d0:	f7fe fa2a 	bl	8000c28 <__aeabi_d2f>
 80027d4:	4602      	mov	r2, r0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	65da      	str	r2, [r3, #92]	@ 0x5c
			BMI->datas.acc_x = ((float)acc_x_16 / 32768.0 * 1000.0 * 1.5 * pow(2.0, (float)(BMI->device_config.acc_range + 1)) - ACCEL_X_OFFSET)*9.81/1000;
 80027da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027e6:	ee17 0a90 	vmov	r0, s15
 80027ea:	f7fd fecd 	bl	8000588 <__aeabi_f2d>
 80027ee:	f04f 0200 	mov.w	r2, #0
 80027f2:	4b44      	ldr	r3, [pc, #272]	@ (8002904 <bmi088_update+0x3fc>)
 80027f4:	f7fe f84a 	bl	800088c <__aeabi_ddiv>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4610      	mov	r0, r2
 80027fe:	4619      	mov	r1, r3
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	4b40      	ldr	r3, [pc, #256]	@ (8002908 <bmi088_update+0x400>)
 8002806:	f7fd ff17 	bl	8000638 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b3d      	ldr	r3, [pc, #244]	@ (800290c <bmi088_update+0x404>)
 8002818:	f7fd ff0e 	bl	8000638 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4614      	mov	r4, r2
 8002822:	461d      	mov	r5, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	795b      	ldrb	r3, [r3, #5]
 8002828:	3301      	adds	r3, #1
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd fea7 	bl	8000588 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ec43 2b11 	vmov	d1, r2, r3
 8002842:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 80028f0 <bmi088_update+0x3e8>
 8002846:	f00d ff3f 	bl	80106c8 <pow>
 800284a:	ec53 2b10 	vmov	r2, r3, d0
 800284e:	4620      	mov	r0, r4
 8002850:	4629      	mov	r1, r5
 8002852:	f7fd fef1 	bl	8000638 <__aeabi_dmul>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	4b2b      	ldr	r3, [pc, #172]	@ (8002910 <bmi088_update+0x408>)
 8002864:	f7fd fd32 	bl	80002cc <__adddf3>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	a321      	add	r3, pc, #132	@ (adr r3, 80028f8 <bmi088_update+0x3f0>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fedf 	bl	8000638 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	4b20      	ldr	r3, [pc, #128]	@ (8002908 <bmi088_update+0x400>)
 8002888:	f7fe f800 	bl	800088c <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f7fe f9c8 	bl	8000c28 <__aeabi_d2f>
 8002898:	4602      	mov	r2, r0
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58

			if(is_starded)
 800289e:	4b1e      	ldr	r3, [pc, #120]	@ (8002918 <bmi088_update+0x410>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d03c      	beq.n	8002920 <bmi088_update+0x418>
			{
				BMI->datas.delta_time = BMI->datas.current_time - BMI->datas.last_time < 0 ? 0.0 : BMI->datas.current_time - BMI->datas.last_time;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80028b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	d502      	bpl.n	80028c6 <bmi088_update+0x3be>
 80028c0:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800291c <bmi088_update+0x414>
 80028c4:	e007      	b.n	80028d6 <bmi088_update+0x3ce>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	ed93 7a1a 	vldr	s14, [r3, #104]	@ 0x68
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edd3 7a1b 	vldr	s15, [r3, #108]	@ 0x6c
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	edc3 7a1c 	vstr	s15, [r3, #112]	@ 0x70
 80028dc:	e023      	b.n	8002926 <bmi088_update+0x41e>
 80028de:	bf00      	nop
 80028e0:	00000000 	.word	0x00000000
 80028e4:	40438800 	.word	0x40438800
 80028e8:	00000000 	.word	0x00000000
 80028ec:	412e8480 	.word	0x412e8480
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40000000 	.word	0x40000000
 80028f8:	51eb851f 	.word	0x51eb851f
 80028fc:	40239eb8 	.word	0x40239eb8
 8002900:	40370000 	.word	0x40370000
 8002904:	40e00000 	.word	0x40e00000
 8002908:	408f4000 	.word	0x408f4000
 800290c:	3ff80000 	.word	0x3ff80000
 8002910:	40100000 	.word	0x40100000
 8002914:	402e0000 	.word	0x402e0000
 8002918:	20000236 	.word	0x20000236
 800291c:	00000000 	.word	0x00000000
			}
			else
			{
				is_starded = 1;
 8002920:	4bd1      	ldr	r3, [pc, #836]	@ (8002c68 <bmi088_update+0x760>)
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
			}

			BMI->datas.last_time = BMI->datas.current_time;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	66da      	str	r2, [r3, #108]	@ 0x6c
			BMI->flags.isAccelUpdated = 0;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	705a      	strb	r2, [r3, #1]
			is_time_updated = 1;
 8002934:	4bcd      	ldr	r3, [pc, #820]	@ (8002c6c <bmi088_update+0x764>)
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
		}

		if(BMI->flags.isGyroUpdated && is_time_updated)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 81b1 	beq.w	8002ca6 <bmi088_update+0x79e>
 8002944:	4bc9      	ldr	r3, [pc, #804]	@ (8002c6c <bmi088_update+0x764>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 81ac 	beq.w	8002ca6 <bmi088_update+0x79e>
		{
			if(is_starded){
 800294e:	4bc6      	ldr	r3, [pc, #792]	@ (8002c68 <bmi088_update+0x760>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 819f 	beq.w	8002c96 <bmi088_update+0x78e>
				uint8_t	raw_gyro[6];
				ret_val = HAL_I2C_Mem_Read(BMI->device_config.BMI_I2c, GYRO_I2C_ADD, GYRO_RATE_X_LSB, I2C_MEMADD_SIZE_8BIT, raw_gyro, 6, 10);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68d8      	ldr	r0, [r3, #12]
 800295c:	230a      	movs	r3, #10
 800295e:	9302      	str	r3, [sp, #8]
 8002960:	2306      	movs	r3, #6
 8002962:	9301      	str	r3, [sp, #4]
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2301      	movs	r3, #1
 800296c:	2202      	movs	r2, #2
 800296e:	21d0      	movs	r1, #208	@ 0xd0
 8002970:	f005 fc2c 	bl	80081cc <HAL_I2C_Mem_Read>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

				if(ret_val)
 800297a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800297e:	2b00      	cmp	r3, #0
 8002980:	f040 8190 	bne.w	8002ca4 <bmi088_update+0x79c>
					return;

				int16_t gyro_x_16 = (raw_gyro[1] << 8) | raw_gyro[0];
 8002984:	7a7b      	ldrb	r3, [r7, #9]
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	b21a      	sxth	r2, r3
 800298a:	7a3b      	ldrb	r3, [r7, #8]
 800298c:	b21b      	sxth	r3, r3
 800298e:	4313      	orrs	r3, r2
 8002990:	84bb      	strh	r3, [r7, #36]	@ 0x24
				int16_t gyro_y_16 = (raw_gyro[3] << 8) | raw_gyro[2];
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	b21a      	sxth	r2, r3
 8002998:	7abb      	ldrb	r3, [r7, #10]
 800299a:	b21b      	sxth	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	847b      	strh	r3, [r7, #34]	@ 0x22
				int16_t gyro_z_16 = (raw_gyro[5] << 8) | raw_gyro[4];
 80029a0:	7b7b      	ldrb	r3, [r7, #13]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	b21a      	sxth	r2, r3
 80029a6:	7b3b      	ldrb	r3, [r7, #12]
 80029a8:	b21b      	sxth	r3, r3
 80029aa:	4313      	orrs	r3, r2
 80029ac:	843b      	strh	r3, [r7, #32]

				BMI->datas.gyro_x = (((float)gyro_x_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[0]) * DEG_TO_RAD;
 80029ae:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80029b2:	ee07 3a90 	vmov	s15, r3
 80029b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029ba:	ee17 0a90 	vmov	r0, s15
 80029be:	f7fd fde3 	bl	8000588 <__aeabi_f2d>
 80029c2:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd ff60 	bl	800088c <__aeabi_ddiv>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	461d      	mov	r5, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	7a9b      	ldrb	r3, [r3, #10]
 80029d8:	461a      	mov	r2, r3
 80029da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80029de:	4113      	asrs	r3, r2
 80029e0:	ee07 3a90 	vmov	s15, r3
 80029e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029e8:	ee17 0a90 	vmov	r0, s15
 80029ec:	f7fd fdcc 	bl	8000588 <__aeabi_f2d>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fe1e 	bl	8000638 <__aeabi_dmul>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fdbc 	bl	8000588 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4620      	mov	r0, r4
 8002a16:	4629      	mov	r1, r5
 8002a18:	f7fd fc56 	bl	80002c8 <__aeabi_dsub>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	a38e      	add	r3, pc, #568	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2a:	f7fd fe05 	bl	8000638 <__aeabi_dmul>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4610      	mov	r0, r2
 8002a34:	4619      	mov	r1, r3
 8002a36:	f7fe f8f7 	bl	8000c28 <__aeabi_d2f>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
				BMI->datas.gyro_y = (((float)gyro_y_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[1]) * DEG_TO_RAD;
 8002a40:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	ee17 0a90 	vmov	r0, s15
 8002a50:	f7fd fd9a 	bl	8000588 <__aeabi_f2d>
 8002a54:	a380      	add	r3, pc, #512	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd ff17 	bl	800088c <__aeabi_ddiv>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4614      	mov	r4, r2
 8002a64:	461d      	mov	r5, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	7a9b      	ldrb	r3, [r3, #10]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002a70:	4113      	asrs	r3, r2
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd83 	bl	8000588 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd fdd5 	bl	8000638 <__aeabi_dmul>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4614      	mov	r4, r2
 8002a94:	461d      	mov	r5, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd73 	bl	8000588 <__aeabi_f2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	4629      	mov	r1, r5
 8002aaa:	f7fd fc0d 	bl	80002c8 <__aeabi_dsub>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	a36a      	add	r3, pc, #424	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fdbc 	bl	8000638 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f8ae 	bl	8000c28 <__aeabi_d2f>
 8002acc:	4602      	mov	r2, r0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	61da      	str	r2, [r3, #28]
				BMI->datas.gyro_z = (((float)gyro_z_16 / 32767.0) * (float)(2000 >> BMI->device_config.gyro_range) - BMI->device_config.offsets->gyro_offset[2]) * DEG_TO_RAD;
 8002ad2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ade:	ee17 0a90 	vmov	r0, s15
 8002ae2:	f7fd fd51 	bl	8000588 <__aeabi_f2d>
 8002ae6:	a35c      	add	r3, pc, #368	@ (adr r3, 8002c58 <bmi088_update+0x750>)
 8002ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aec:	f7fd fece 	bl	800088c <__aeabi_ddiv>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4614      	mov	r4, r2
 8002af6:	461d      	mov	r5, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7a9b      	ldrb	r3, [r3, #10]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002b02:	4113      	asrs	r3, r2
 8002b04:	ee07 3a90 	vmov	s15, r3
 8002b08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0c:	ee17 0a90 	vmov	r0, s15
 8002b10:	f7fd fd3a 	bl	8000588 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd fd8c 	bl	8000638 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4614      	mov	r4, r2
 8002b26:	461d      	mov	r5, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fd fd2a 	bl	8000588 <__aeabi_f2d>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4620      	mov	r0, r4
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	f7fd fbc4 	bl	80002c8 <__aeabi_dsub>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	a345      	add	r3, pc, #276	@ (adr r3, 8002c60 <bmi088_update+0x758>)
 8002b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4e:	f7fd fd73 	bl	8000638 <__aeabi_dmul>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f865 	bl	8000c28 <__aeabi_d2f>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	621a      	str	r2, [r3, #32]

				Orientation_Update(BMI->datas.gyro_y, -BMI->datas.gyro_x, BMI->datas.gyro_z,BMI->datas.acc_y,-BMI->datas.acc_x,BMI->datas.acc_z, BMI->datas.delta_time);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	ed93 7a07 	vldr	s14, [r3, #28]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002b70:	eef1 6a67 	vneg.f32	s13, s15
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ed93 6a08 	vldr	s12, [r3, #32]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	edd3 5a17 	vldr	s11, [r3, #92]	@ 0x5c
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8002b86:	eef1 7a67 	vneg.f32	s15, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	ed93 5a18 	vldr	s10, [r3, #96]	@ 0x60
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 4a1c 	vldr	s9, [r3, #112]	@ 0x70
 8002b96:	eeb0 3a64 	vmov.f32	s6, s9
 8002b9a:	eef0 2a45 	vmov.f32	s5, s10
 8002b9e:	eeb0 2a67 	vmov.f32	s4, s15
 8002ba2:	eef0 1a65 	vmov.f32	s3, s11
 8002ba6:	eeb0 1a46 	vmov.f32	s2, s12
 8002baa:	eef0 0a66 	vmov.f32	s1, s13
 8002bae:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb2:	f001 fe5f 	bl	8004874 <Orientation_Update>
				BMI->datas.yaw = quaternionToYaw();
 8002bb6:	f002 fbf9 	bl	80053ac <quaternionToYaw>
 8002bba:	eef0 7a40 	vmov.f32	s15, s0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				BMI->datas.pitch = quaternionToPitch();
 8002bc4:	f002 fc50 	bl	8005468 <quaternionToPitch>
 8002bc8:	eef0 7a40 	vmov.f32	s15, s0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
				BMI->datas.roll = quaternionToRoll();
 8002bd2:	f002 fc81 	bl	80054d8 <quaternionToRoll>
 8002bd6:	eef0 7a40 	vmov.f32	s15, s0
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
				BMI->datas.theta = quaternionToThetaZ();
 8002be0:	f002 fabc 	bl	800515c <quaternionToThetaZ>
 8002be4:	eef0 7a40 	vmov.f32	s15, s0
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				BMI->datas.angle_x = quaternionToYawDegree1();
 8002bee:	f001 fc2d 	bl	800444c <quaternionToYawDegree1>
 8002bf2:	eef0 7a40 	vmov.f32	s15, s0
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
				BMI->datas.angle_y = quaternionToPitchDegree();
 8002bfc:	f002 fb3e 	bl	800527c <quaternionToPitchDegree>
 8002c00:	eef0 7a40 	vmov.f32	s15, s0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
				BMI->datas.angle_z = quaternionToRollDegree();
 8002c0a:	f002 fb87 	bl	800531c <quaternionToRollDegree>
 8002c0e:	eef0 7a40 	vmov.f32	s15, s0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

				ekf_predict(BMI->datas.gyro_y,-BMI->datas.gyro_x,BMI->datas.gyro_z,BMI->datas.delta_time);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	edd3 7a06 	vldr	s15, [r3, #24]
 8002c24:	eef1 7a67 	vneg.f32	s15, s15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	edd3 6a08 	vldr	s13, [r3, #32]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	ed93 6a1c 	vldr	s12, [r3, #112]	@ 0x70
 8002c34:	eef0 1a46 	vmov.f32	s3, s12
 8002c38:	eeb0 1a66 	vmov.f32	s2, s13
 8002c3c:	eef0 0a67 	vmov.f32	s1, s15
 8002c40:	eeb0 0a47 	vmov.f32	s0, s14
 8002c44:	f001 f9e8 	bl	8004018 <ekf_predict>
				BMI->datas.yaw1 = quaternionToYaw1();
 8002c48:	f001 fb0c 	bl	8004264 <quaternionToYaw1>
 8002c4c:	eef0 7a40 	vmov.f32	s15, s0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	e00d      	b.n	8002c70 <bmi088_update+0x768>
 8002c54:	f3af 8000 	nop.w
 8002c58:	00000000 	.word	0x00000000
 8002c5c:	40dfffc0 	.word	0x40dfffc0
 8002c60:	a0000000 	.word	0xa0000000
 8002c64:	3f91df46 	.word	0x3f91df46
 8002c68:	20000236 	.word	0x20000236
 8002c6c:	20000235 	.word	0x20000235
 8002c70:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
				BMI->datas.pitch1 = quaternionToPitch1();
 8002c74:	f001 fb54 	bl	8004320 <quaternionToPitch1>
 8002c78:	eef0 7a40 	vmov.f32	s15, s0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
				BMI->datas.roll1 = quaternionToRoll1();
 8002c82:	f001 fb85 	bl	8004390 <quaternionToRoll1>
 8002c86:	eef0 7a40 	vmov.f32	s15, s0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54
				is_gyro_renewed = 1;
 8002c90:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <bmi088_update+0x7a4>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	701a      	strb	r2, [r3, #0]
			}
			BMI->flags.isGyroUpdated = 0;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
			is_time_updated = 0;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	@ (8002cb0 <bmi088_update+0x7a8>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e000      	b.n	8002ca6 <bmi088_update+0x79e>
					return;
 8002ca4:	bf00      	nop
		}
}
 8002ca6:	3738      	adds	r7, #56	@ 0x38
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bdb0      	pop	{r4, r5, r7, pc}
 8002cac:	20000237 	.word	0x20000237
 8002cb0:	20000235 	.word	0x20000235

08002cb4 <bmi088_set_accel_INT>:


void bmi088_set_accel_INT(bmi088_struct_t* BMI)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
	BMI->flags.isAccelUpdated = 1;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	705a      	strb	r2, [r3, #1]
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <bmi088_set_gyro_INT>:

void bmi088_set_gyro_INT(bmi088_struct_t* BMI)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	BMI->flags.isGyroUpdated = 1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <KalmanFilter_Init>:

/**
 * @brief Initialize the Kalman filter
 * @param kf Pointer to Kalman filter structure
 */
void KalmanFilter_Init(KalmanFilter_t *kf) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    // Initialize state vector
    kf->x[0] = 0.0f;  // Altitude
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
    kf->x[1] = 0.0f;  // Velocity
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	605a      	str	r2, [r3, #4]
    kf->x[2] = 0.0f;  // Acceleration
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f04f 0200 	mov.w	r2, #0
 8002d06:	609a      	str	r2, [r3, #8]

    // Initialize covariance matrix with initial uncertainty
    for (int i = 0; i < 3; i++) {
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e01f      	b.n	8002d4e <KalmanFilter_Init+0x66>
        for (int j = 0; j < 3; j++) {
 8002d0e:	2300      	movs	r3, #0
 8002d10:	60bb      	str	r3, [r7, #8]
 8002d12:	e016      	b.n	8002d42 <KalmanFilter_Init+0x5a>
            kf->P[i][j] = (i == j) ? 100.0f : 0.0f;
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d101      	bne.n	8002d20 <KalmanFilter_Init+0x38>
 8002d1c:	491b      	ldr	r1, [pc, #108]	@ (8002d8c <KalmanFilter_Init+0xa4>)
 8002d1e:	e001      	b.n	8002d24 <KalmanFilter_Init+0x3c>
 8002d20:	f04f 0100 	mov.w	r1, #0
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4413      	add	r3, r2
 8002d32:	3302      	adds	r3, #2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4403      	add	r3, r0
 8002d38:	3304      	adds	r3, #4
 8002d3a:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	dde5      	ble.n	8002d14 <KalmanFilter_Init+0x2c>
    for (int i = 0; i < 3; i++) {
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	dddc      	ble.n	8002d0e <KalmanFilter_Init+0x26>
        }
    }

    // Set noise parameters - these can be tuned
    kf->process_noise = 0.01f;         // Process noise
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a0e      	ldr	r2, [pc, #56]	@ (8002d90 <KalmanFilter_Init+0xa8>)
 8002d58:	631a      	str	r2, [r3, #48]	@ 0x30
    kf->measurement_noise_alt = 0.005f;  // Altitude measurement noise
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d94 <KalmanFilter_Init+0xac>)
 8002d5e:	635a      	str	r2, [r3, #52]	@ 0x34
    kf->measurement_noise_acc = 5.0f;  // Acceleration measurement noise
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a0d      	ldr	r2, [pc, #52]	@ (8002d98 <KalmanFilter_Init+0xb0>)
 8002d64:	639a      	str	r2, [r3, #56]	@ 0x38

    // Initialize apogee detection variables
    kf->apogee_detected = 0;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
    kf->apogee_counter = 0;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	641a      	str	r2, [r3, #64]	@ 0x40
    kf->prev_velocity = 0.0f;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	645a      	str	r2, [r3, #68]	@ 0x44

    // Mach transition control
    kf->in_mach_transition = 0;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8002d80:	bf00      	nop
 8002d82:	3714      	adds	r7, #20
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	42c80000 	.word	0x42c80000
 8002d90:	3c23d70a 	.word	0x3c23d70a
 8002d94:	3ba3d70a 	.word	0x3ba3d70a
 8002d98:	40a00000 	.word	0x40a00000

08002d9c <L86_GNSS_Init>:
static void get_GNRMC_data(gps_data_t *gps_data_);
static void get_GPGGA_data(gps_data_t *gps_data_);
static void format_data(gps_data_t *gps_data_);

void L86_GNSS_Init(UART_HandleTypeDef *huart_gnss_, L86_GNSS_BAUD_RATE baud_rate)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
	// Global UART handle'ı ayarla
	huart_gnss = huart_gnss_;
 8002da6:	4a19      	ldr	r2, [pc, #100]	@ (8002e0c <L86_GNSS_Init+0x70>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6013      	str	r3, [r2, #0]
	
	// Baud rate ayarlarını şimdilik atla (varsayılan 9600 kullan)
	//set_baud_rate(baud_rate);
	
	// Buffer'ları temizle
	memset(gnss_rx_buffer, 0, BUFFER_SIZE * 2);
 8002dac:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002db0:	2100      	movs	r1, #0
 8002db2:	4817      	ldr	r0, [pc, #92]	@ (8002e10 <L86_GNSS_Init+0x74>)
 8002db4:	f009 fd5d 	bl	800c872 <memset>
	memset(gps_buffer, 0, BUFFER_SIZE);
 8002db8:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4815      	ldr	r0, [pc, #84]	@ (8002e14 <L86_GNSS_Init+0x78>)
 8002dc0:	f009 fd57 	bl	800c872 <memset>
	
	// Eğer daha önce bir DMA işlemi varsa durdur
	HAL_UART_DMAStop(huart_gnss);
 8002dc4:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <L86_GNSS_Init+0x70>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f007 fb3d 	bl	800a448 <HAL_UART_DMAStop>
	HAL_Delay(50);
 8002dce:	2032      	movs	r0, #50	@ 0x32
 8002dd0:	f003 fa2a 	bl	8006228 <HAL_Delay>
	
	// DMA ile UART receive'i başlat (circular mode)
	HAL_StatusTypeDef status = HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 8002dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <L86_GNSS_Init+0x70>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002ddc:	490c      	ldr	r1, [pc, #48]	@ (8002e10 <L86_GNSS_Init+0x74>)
 8002dde:	4618      	mov	r0, r3
 8002de0:	f007 fb0d 	bl	800a3fe <HAL_UART_Receive_DMA>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]
	
	// Eğer başlatma başarısızsa, tekrar dene
	if(status != HAL_OK)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <L86_GNSS_Init+0x68>
	{
		HAL_Delay(100);
 8002dee:	2064      	movs	r0, #100	@ 0x64
 8002df0:	f003 fa1a 	bl	8006228 <HAL_Delay>
		HAL_UART_Receive_DMA(huart_gnss, (uint8_t *)gnss_rx_buffer, BUFFER_SIZE * 2);
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <L86_GNSS_Init+0x70>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f44f 6216 	mov.w	r2, #2400	@ 0x960
 8002dfc:	4904      	ldr	r1, [pc, #16]	@ (8002e10 <L86_GNSS_Init+0x74>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f007 fafd 	bl	800a3fe <HAL_UART_Receive_DMA>
	}
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	2000023c 	.word	0x2000023c
 8002e10:	20000240 	.word	0x20000240
 8002e14:	20000ba0 	.word	0x20000ba0

08002e18 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_UART_RxHalfCpltCallback+0x24>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d104      	bne.n	8002e34 <HAL_UART_RxHalfCpltCallback+0x1c>
	{
		process_data(gnss_rx_buffer, BUFFER_SIZE);
 8002e2a:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002e2e:	4804      	ldr	r0, [pc, #16]	@ (8002e40 <HAL_UART_RxHalfCpltCallback+0x28>)
 8002e30:	f000 f830 	bl	8002e94 <process_data>
	}
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	2000023c 	.word	0x2000023c
 8002e40:	20000240 	.word	0x20000240

08002e44 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	if(huart == huart_gnss)
 8002e4c:	4b06      	ldr	r3, [pc, #24]	@ (8002e68 <HAL_UART_RxCpltCallback+0x24>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d104      	bne.n	8002e60 <HAL_UART_RxCpltCallback+0x1c>
	{
		process_data(&gnss_rx_buffer[BUFFER_SIZE], BUFFER_SIZE);
 8002e56:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8002e5a:	4804      	ldr	r0, [pc, #16]	@ (8002e6c <HAL_UART_RxCpltCallback+0x28>)
 8002e5c:	f000 f81a 	bl	8002e94 <process_data>
		// DMA circular mode'da çalışıyor, yeniden başlatmaya gerek yok
	}
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	2000023c 	.word	0x2000023c
 8002e6c:	200006f0 	.word	0x200006f0

08002e70 <L86_GNSS_Update>:

void L86_GNSS_Update(gps_data_t *gps_data_)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
	get_GNRMC_data(gps_data_);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 f81d 	bl	8002eb8 <get_GNRMC_data>
	get_GPGGA_data(gps_data_);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f89e 	bl	8002fc0 <get_GPGGA_data>
	format_data(gps_data_);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f90d 	bl	80030a4 <format_data>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
	...

08002e94 <process_data>:
	}
	return check_sum;
}

static void process_data(char *rx_buffer, uint16_t buffer_size)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	460b      	mov	r3, r1
 8002e9e:	807b      	strh	r3, [r7, #2]
	memcpy(gps_buffer, rx_buffer, buffer_size);
 8002ea0:	887b      	ldrh	r3, [r7, #2]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4803      	ldr	r0, [pc, #12]	@ (8002eb4 <process_data+0x20>)
 8002ea8:	f009 fd89 	bl	800c9be <memcpy>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	20000ba0 	.word	0x20000ba0

08002eb8 <get_GNRMC_data>:

static void get_GNRMC_data(gps_data_t *gps_data_)
{
 8002eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eba:	b08d      	sub	sp, #52	@ 0x34
 8002ebc:	af08      	add	r7, sp, #32
 8002ebe:	60f8      	str	r0, [r7, #12]
	gps_GNRMC_start_point = strstr(gps_buffer, "GNRMC");
 8002ec0:	4937      	ldr	r1, [pc, #220]	@ (8002fa0 <get_GNRMC_data+0xe8>)
 8002ec2:	4838      	ldr	r0, [pc, #224]	@ (8002fa4 <get_GNRMC_data+0xec>)
 8002ec4:	f009 fcdd 	bl	800c882 <strstr>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4a37      	ldr	r2, [pc, #220]	@ (8002fa8 <get_GNRMC_data+0xf0>)
 8002ecc:	6013      	str	r3, [r2, #0]

	if(gps_GNRMC_start_point != NULL && *(gps_GNRMC_start_point + 17) == VALID)
 8002ece:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <get_GNRMC_data+0xf0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <get_GNRMC_data+0x32>
 8002ed6:	4b34      	ldr	r3, [pc, #208]	@ (8002fa8 <get_GNRMC_data+0xf0>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3311      	adds	r3, #17
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b41      	cmp	r3, #65	@ 0x41
 8002ee0:	d103      	bne.n	8002eea <get_GNRMC_data+0x32>
	{
		is_data_valid = 1;
 8002ee2:	4b32      	ldr	r3, [pc, #200]	@ (8002fac <get_GNRMC_data+0xf4>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e005      	b.n	8002ef6 <get_GNRMC_data+0x3e>
	}
	else
	{
		is_data_valid = 0;
 8002eea:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <get_GNRMC_data+0xf4>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
		gps_data_->is_valid = INVALID;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2256      	movs	r2, #86	@ 0x56
 8002ef4:	711a      	strb	r2, [r3, #4]
	}

	if(is_data_valid == 1)
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8002fac <get_GNRMC_data+0xf4>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d148      	bne.n	8002f90 <get_GNRMC_data+0xd8>
	{
		memset(current_data, 0, DATA_SIZE);
 8002efe:	2278      	movs	r2, #120	@ 0x78
 8002f00:	2100      	movs	r1, #0
 8002f02:	482b      	ldr	r0, [pc, #172]	@ (8002fb0 <get_GNRMC_data+0xf8>)
 8002f04:	f009 fcb5 	bl	800c872 <memset>
		counter = 0;
 8002f08:	4b2a      	ldr	r3, [pc, #168]	@ (8002fb4 <get_GNRMC_data+0xfc>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
		current_char = gps_GNRMC_start_point;
 8002f0e:	4b26      	ldr	r3, [pc, #152]	@ (8002fa8 <get_GNRMC_data+0xf0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a29      	ldr	r2, [pc, #164]	@ (8002fb8 <get_GNRMC_data+0x100>)
 8002f14:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8002f16:	e011      	b.n	8002f3c <get_GNRMC_data+0x84>
		{
			current_data[counter] = *current_char;
 8002f18:	4b27      	ldr	r3, [pc, #156]	@ (8002fb8 <get_GNRMC_data+0x100>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a25      	ldr	r2, [pc, #148]	@ (8002fb4 <get_GNRMC_data+0xfc>)
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	7819      	ldrb	r1, [r3, #0]
 8002f22:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <get_GNRMC_data+0xf8>)
 8002f24:	5499      	strb	r1, [r3, r2]
			counter++;
 8002f26:	4b23      	ldr	r3, [pc, #140]	@ (8002fb4 <get_GNRMC_data+0xfc>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b21      	ldr	r3, [pc, #132]	@ (8002fb4 <get_GNRMC_data+0xfc>)
 8002f30:	701a      	strb	r2, [r3, #0]
			current_char++;
 8002f32:	4b21      	ldr	r3, [pc, #132]	@ (8002fb8 <get_GNRMC_data+0x100>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3301      	adds	r3, #1
 8002f38:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb8 <get_GNRMC_data+0x100>)
 8002f3a:	6013      	str	r3, [r2, #0]
		while(*current_char != '*')
 8002f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb8 <get_GNRMC_data+0x100>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f44:	d1e8      	bne.n	8002f18 <get_GNRMC_data+0x60>
		}

		sscanf(current_data, "GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%lu,,,%c",
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f103 0c04 	add.w	ip, r3, #4
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3308      	adds	r3, #8
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	320c      	adds	r2, #12
 8002f58:	68f9      	ldr	r1, [r7, #12]
 8002f5a:	3110      	adds	r1, #16
 8002f5c:	6079      	str	r1, [r7, #4]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	3014      	adds	r0, #20
 8002f62:	68fc      	ldr	r4, [r7, #12]
 8002f64:	3418      	adds	r4, #24
 8002f66:	68fd      	ldr	r5, [r7, #12]
 8002f68:	351c      	adds	r5, #28
 8002f6a:	68fe      	ldr	r6, [r7, #12]
 8002f6c:	3620      	adds	r6, #32
 8002f6e:	68f9      	ldr	r1, [r7, #12]
 8002f70:	3124      	adds	r1, #36	@ 0x24
 8002f72:	9107      	str	r1, [sp, #28]
 8002f74:	9606      	str	r6, [sp, #24]
 8002f76:	9505      	str	r5, [sp, #20]
 8002f78:	9404      	str	r4, [sp, #16]
 8002f7a:	9003      	str	r0, [sp, #12]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	9102      	str	r1, [sp, #8]
 8002f80:	9201      	str	r2, [sp, #4]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4663      	mov	r3, ip
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	490c      	ldr	r1, [pc, #48]	@ (8002fbc <get_GNRMC_data+0x104>)
 8002f8a:	4809      	ldr	r0, [pc, #36]	@ (8002fb0 <get_GNRMC_data+0xf8>)
 8002f8c:	f009 fbf2 	bl	800c774 <siscanf>
				&gps_data_->non_fixed_time, &gps_data_->is_valid, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
				&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->speed_over_ground, &gps_data_->course_over_ground,
				&gps_data_->non_fixed_date ,&gps_data_->positioning_mode);
	}

	gps_GNRMC_start_point = NULL;
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <get_GNRMC_data+0xf0>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3714      	adds	r7, #20
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	0801202c 	.word	0x0801202c
 8002fa4:	20000ba0 	.word	0x20000ba0
 8002fa8:	20001050 	.word	0x20001050
 8002fac:	20001058 	.word	0x20001058
 8002fb0:	20001060 	.word	0x20001060
 8002fb4:	200010d8 	.word	0x200010d8
 8002fb8:	2000105c 	.word	0x2000105c
 8002fbc:	08012034 	.word	0x08012034

08002fc0 <get_GPGGA_data>:

static void get_GPGGA_data(gps_data_t *gps_data_)
{
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc2:	b08d      	sub	sp, #52	@ 0x34
 8002fc4:	af08      	add	r7, sp, #32
 8002fc6:	60f8      	str	r0, [r7, #12]
	gps_GPGGA_start_point = strstr(gps_buffer, "GPGGA");
 8002fc8:	492f      	ldr	r1, [pc, #188]	@ (8003088 <get_GPGGA_data+0xc8>)
 8002fca:	4830      	ldr	r0, [pc, #192]	@ (800308c <get_GPGGA_data+0xcc>)
 8002fcc:	f009 fc59 	bl	800c882 <strstr>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8003090 <get_GPGGA_data+0xd0>)
 8002fd4:	6013      	str	r3, [r2, #0]

	if(gps_GPGGA_start_point != NULL)
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8003090 <get_GPGGA_data+0xd0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d04f      	beq.n	800307e <get_GPGGA_data+0xbe>
	{
		if(gps_data_->is_valid == VALID)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	791b      	ldrb	r3, [r3, #4]
 8002fe2:	2b41      	cmp	r3, #65	@ 0x41
 8002fe4:	d148      	bne.n	8003078 <get_GPGGA_data+0xb8>
		{
			memset(current_data, 0, DATA_SIZE);
 8002fe6:	2278      	movs	r2, #120	@ 0x78
 8002fe8:	2100      	movs	r1, #0
 8002fea:	482a      	ldr	r0, [pc, #168]	@ (8003094 <get_GPGGA_data+0xd4>)
 8002fec:	f009 fc41 	bl	800c872 <memset>
			counter = 0;
 8002ff0:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <get_GPGGA_data+0xd8>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
			current_char = gps_GPGGA_start_point;
 8002ff6:	4b26      	ldr	r3, [pc, #152]	@ (8003090 <get_GPGGA_data+0xd0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a28      	ldr	r2, [pc, #160]	@ (800309c <get_GPGGA_data+0xdc>)
 8002ffc:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8002ffe:	e011      	b.n	8003024 <get_GPGGA_data+0x64>
			{
				current_data[counter] = *current_char;
 8003000:	4b26      	ldr	r3, [pc, #152]	@ (800309c <get_GPGGA_data+0xdc>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a24      	ldr	r2, [pc, #144]	@ (8003098 <get_GPGGA_data+0xd8>)
 8003006:	7812      	ldrb	r2, [r2, #0]
 8003008:	7819      	ldrb	r1, [r3, #0]
 800300a:	4b22      	ldr	r3, [pc, #136]	@ (8003094 <get_GPGGA_data+0xd4>)
 800300c:	5499      	strb	r1, [r3, r2]
				counter++;
 800300e:	4b22      	ldr	r3, [pc, #136]	@ (8003098 <get_GPGGA_data+0xd8>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	b2da      	uxtb	r2, r3
 8003016:	4b20      	ldr	r3, [pc, #128]	@ (8003098 <get_GPGGA_data+0xd8>)
 8003018:	701a      	strb	r2, [r3, #0]
				current_char++;
 800301a:	4b20      	ldr	r3, [pc, #128]	@ (800309c <get_GPGGA_data+0xdc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3301      	adds	r3, #1
 8003020:	4a1e      	ldr	r2, [pc, #120]	@ (800309c <get_GPGGA_data+0xdc>)
 8003022:	6013      	str	r3, [r2, #0]
			while(*(current_char) != '*')
 8003024:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <get_GPGGA_data+0xdc>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b2a      	cmp	r3, #42	@ 0x2a
 800302c:	d1e8      	bne.n	8003000 <get_GPGGA_data+0x40>
			}

			sscanf(current_data, "GPGGA,%f,%f,%c,%f,%c,%u,%u,%f,%f,M,%f,M,,",
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f103 0c08 	add.w	ip, r3, #8
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	330c      	adds	r3, #12
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	3210      	adds	r2, #16
 8003040:	68f9      	ldr	r1, [r7, #12]
 8003042:	3114      	adds	r1, #20
 8003044:	6079      	str	r1, [r7, #4]
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	3025      	adds	r0, #37	@ 0x25
 800304a:	68fc      	ldr	r4, [r7, #12]
 800304c:	3426      	adds	r4, #38	@ 0x26
 800304e:	68fd      	ldr	r5, [r7, #12]
 8003050:	3528      	adds	r5, #40	@ 0x28
 8003052:	68fe      	ldr	r6, [r7, #12]
 8003054:	362c      	adds	r6, #44	@ 0x2c
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	3130      	adds	r1, #48	@ 0x30
 800305a:	9107      	str	r1, [sp, #28]
 800305c:	9606      	str	r6, [sp, #24]
 800305e:	9505      	str	r5, [sp, #20]
 8003060:	9404      	str	r4, [sp, #16]
 8003062:	9003      	str	r0, [sp, #12]
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	9102      	str	r1, [sp, #8]
 8003068:	9201      	str	r2, [sp, #4]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	4663      	mov	r3, ip
 800306e:	68ba      	ldr	r2, [r7, #8]
 8003070:	490b      	ldr	r1, [pc, #44]	@ (80030a0 <get_GPGGA_data+0xe0>)
 8003072:	4808      	ldr	r0, [pc, #32]	@ (8003094 <get_GPGGA_data+0xd4>)
 8003074:	f009 fb7e 	bl	800c774 <siscanf>
					&gps_data_->non_fixed_time, &gps_data_->non_fixed_latitude, &gps_data_->N_S,
					&gps_data_->non_fixed_longitude, &gps_data_->E_W, &gps_data_->fix_status, &gps_data_->satellites_in_use,
					&gps_data_->HDOP, &gps_data_->altitude, &gps_data_->geoid_height);
		}

		gps_GPGGA_start_point = NULL;
 8003078:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <get_GPGGA_data+0xd0>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
	}
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003086:	bf00      	nop
 8003088:	0801205c 	.word	0x0801205c
 800308c:	20000ba0 	.word	0x20000ba0
 8003090:	20001054 	.word	0x20001054
 8003094:	20001060 	.word	0x20001060
 8003098:	200010d8 	.word	0x200010d8
 800309c:	2000105c 	.word	0x2000105c
 80030a0:	08012064 	.word	0x08012064

080030a4 <format_data>:

static void format_data(gps_data_t *gps_data_)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	if(gps_data_->is_valid == VALID)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	791b      	ldrb	r3, [r3, #4]
 80030b0:	2b41      	cmp	r3, #65	@ 0x41
 80030b2:	f040 8154 	bne.w	800335e <format_data+0x2ba>
	{
		// format latitude
		non_formatted_latitude = gps_data_->non_fixed_latitude;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4aab      	ldr	r2, [pc, #684]	@ (8003368 <format_data+0x2c4>)
 80030bc:	6013      	str	r3, [r2, #0]
		gps_data_->latitude = (float)floor(non_formatted_latitude / 100);
 80030be:	4baa      	ldr	r3, [pc, #680]	@ (8003368 <format_data+0x2c4>)
 80030c0:	edd3 7a00 	vldr	s15, [r3]
 80030c4:	ed9f 7aa9 	vldr	s14, [pc, #676]	@ 800336c <format_data+0x2c8>
 80030c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80030cc:	ee16 0a90 	vmov	r0, s13
 80030d0:	f7fd fa5a 	bl	8000588 <__aeabi_f2d>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	ec43 2b10 	vmov	d0, r2, r3
 80030dc:	f00d fd50 	bl	8010b80 <floor>
 80030e0:	ec53 2b10 	vmov	r2, r3, d0
 80030e4:	4610      	mov	r0, r2
 80030e6:	4619      	mov	r1, r3
 80030e8:	f7fd fd9e 	bl	8000c28 <__aeabi_d2f>
 80030ec:	4602      	mov	r2, r0
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	635a      	str	r2, [r3, #52]	@ 0x34
		non_formatted_latitude -= gps_data_->latitude * 100;
 80030f2:	4b9d      	ldr	r3, [pc, #628]	@ (8003368 <format_data+0x2c4>)
 80030f4:	ed93 7a00 	vldr	s14, [r3]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80030fe:	eddf 6a9b 	vldr	s13, [pc, #620]	@ 800336c <format_data+0x2c8>
 8003102:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	4b97      	ldr	r3, [pc, #604]	@ (8003368 <format_data+0x2c4>)
 800310c:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_latitude /= 60;
 8003110:	4b95      	ldr	r3, [pc, #596]	@ (8003368 <format_data+0x2c4>)
 8003112:	ed93 7a00 	vldr	s14, [r3]
 8003116:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8003370 <format_data+0x2cc>
 800311a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800311e:	4b92      	ldr	r3, [pc, #584]	@ (8003368 <format_data+0x2c4>)
 8003120:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->latitude += non_formatted_latitude;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800312a:	4b8f      	ldr	r3, [pc, #572]	@ (8003368 <format_data+0x2c4>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

		// format langitude
		non_formatted_longitude = gps_data_->non_fixed_longitude;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	4a8d      	ldr	r2, [pc, #564]	@ (8003374 <format_data+0x2d0>)
 8003140:	6013      	str	r3, [r2, #0]
		gps_data_->longitude = (float)floor(non_formatted_longitude / 100);
 8003142:	4b8c      	ldr	r3, [pc, #560]	@ (8003374 <format_data+0x2d0>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800336c <format_data+0x2c8>
 800314c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003150:	ee16 0a90 	vmov	r0, s13
 8003154:	f7fd fa18 	bl	8000588 <__aeabi_f2d>
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	ec43 2b10 	vmov	d0, r2, r3
 8003160:	f00d fd0e 	bl	8010b80 <floor>
 8003164:	ec53 2b10 	vmov	r2, r3, d0
 8003168:	4610      	mov	r0, r2
 800316a:	4619      	mov	r1, r3
 800316c:	f7fd fd5c 	bl	8000c28 <__aeabi_d2f>
 8003170:	4602      	mov	r2, r0
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	639a      	str	r2, [r3, #56]	@ 0x38
		non_formatted_longitude -= gps_data_->longitude * 100;
 8003176:	4b7f      	ldr	r3, [pc, #508]	@ (8003374 <format_data+0x2d0>)
 8003178:	ed93 7a00 	vldr	s14, [r3]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8003182:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800336c <format_data+0x2c8>
 8003186:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800318a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800318e:	4b79      	ldr	r3, [pc, #484]	@ (8003374 <format_data+0x2d0>)
 8003190:	edc3 7a00 	vstr	s15, [r3]
		non_formatted_longitude /= 60;
 8003194:	4b77      	ldr	r3, [pc, #476]	@ (8003374 <format_data+0x2d0>)
 8003196:	ed93 7a00 	vldr	s14, [r3]
 800319a:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8003370 <format_data+0x2cc>
 800319e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031a2:	4b74      	ldr	r3, [pc, #464]	@ (8003374 <format_data+0x2d0>)
 80031a4:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->longitude += non_formatted_longitude;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80031ae:	4b71      	ldr	r3, [pc, #452]	@ (8003374 <format_data+0x2d0>)
 80031b0:	edd3 7a00 	vldr	s15, [r3]
 80031b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

		// format time
		non_formatted_time = gps_data_->non_fixed_time;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6d      	ldr	r2, [pc, #436]	@ (8003378 <format_data+0x2d4>)
 80031c4:	6013      	str	r3, [r2, #0]
		gps_data_->time[0] = (uint8_t)floor(non_formatted_time / 10000);
 80031c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003378 <format_data+0x2d4>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
 80031cc:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800337c <format_data+0x2d8>
 80031d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80031d4:	ee16 0a90 	vmov	r0, s13
 80031d8:	f7fd f9d6 	bl	8000588 <__aeabi_f2d>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	ec43 2b10 	vmov	d0, r2, r3
 80031e4:	f00d fccc 	bl	8010b80 <floor>
 80031e8:	ec53 2b10 	vmov	r2, r3, d0
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fcfa 	bl	8000be8 <__aeabi_d2uiz>
 80031f4:	4603      	mov	r3, r0
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		non_formatted_time -= gps_data_->time[0] * 10000;
 80031fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003378 <format_data+0x2d4>)
 8003200:	ed93 7a00 	vldr	s14, [r3]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800320a:	461a      	mov	r2, r3
 800320c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8003210:	fb02 f303 	mul.w	r3, r2, r3
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800321c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003220:	4b55      	ldr	r3, [pc, #340]	@ (8003378 <format_data+0x2d4>)
 8003222:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[0] += 3;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800322c:	3303      	adds	r3, #3
 800322e:	b2da      	uxtb	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		if(gps_data_->time[0] >= 24)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800323c:	2b17      	cmp	r3, #23
 800323e:	d907      	bls.n	8003250 <format_data+0x1ac>
		{
			gps_data_->time[0] -= 24;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003246:	3b18      	subs	r3, #24
 8003248:	b2da      	uxtb	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
		}
		gps_data_->time[1] = (uint8_t)floor(non_formatted_time / 100);
 8003250:	4b49      	ldr	r3, [pc, #292]	@ (8003378 <format_data+0x2d4>)
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800336c <format_data+0x2c8>
 800325a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800325e:	ee16 0a90 	vmov	r0, s13
 8003262:	f7fd f991 	bl	8000588 <__aeabi_f2d>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	ec43 2b10 	vmov	d0, r2, r3
 800326e:	f00d fc87 	bl	8010b80 <floor>
 8003272:	ec53 2b10 	vmov	r2, r3, d0
 8003276:	4610      	mov	r0, r2
 8003278:	4619      	mov	r1, r3
 800327a:	f7fd fcb5 	bl	8000be8 <__aeabi_d2uiz>
 800327e:	4603      	mov	r3, r0
 8003280:	b2da      	uxtb	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
		non_formatted_time-= gps_data_->time[1] * 100;
 8003288:	4b3b      	ldr	r3, [pc, #236]	@ (8003378 <format_data+0x2d4>)
 800328a:	ed93 7a00 	vldr	s14, [r3]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003294:	461a      	mov	r2, r3
 8003296:	2364      	movs	r3, #100	@ 0x64
 8003298:	fb02 f303 	mul.w	r3, r2, r3
 800329c:	ee07 3a90 	vmov	s15, r3
 80032a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a8:	4b33      	ldr	r3, [pc, #204]	@ (8003378 <format_data+0x2d4>)
 80032aa:	edc3 7a00 	vstr	s15, [r3]
		gps_data_->time[2] = (uint8_t)floor(non_formatted_time);
 80032ae:	4b32      	ldr	r3, [pc, #200]	@ (8003378 <format_data+0x2d4>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd f968 	bl	8000588 <__aeabi_f2d>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	ec43 2b10 	vmov	d0, r2, r3
 80032c0:	f00d fc5e 	bl	8010b80 <floor>
 80032c4:	ec53 2b10 	vmov	r2, r3, d0
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f7fd fc8c 	bl	8000be8 <__aeabi_d2uiz>
 80032d0:	4603      	mov	r3, r0
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

		// format date
		non_formatted_date = gps_data_->non_fixed_date;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	4a28      	ldr	r2, [pc, #160]	@ (8003380 <format_data+0x2dc>)
 80032e0:	6013      	str	r3, [r2, #0]
		gps_data_->date[0] = (uint8_t)(non_formatted_date / 10000);
 80032e2:	4b27      	ldr	r3, [pc, #156]	@ (8003380 <format_data+0x2dc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a27      	ldr	r2, [pc, #156]	@ (8003384 <format_data+0x2e0>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	0b5b      	lsrs	r3, r3, #13
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
		non_formatted_date -= gps_data_->date[0] * 10000;
 80032f6:	4b22      	ldr	r3, [pc, #136]	@ (8003380 <format_data+0x2dc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	f892 203f 	ldrb.w	r2, [r2, #63]	@ 0x3f
 8003300:	4611      	mov	r1, r2
 8003302:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003306:	fb01 f202 	mul.w	r2, r1, r2
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	4a1c      	ldr	r2, [pc, #112]	@ (8003380 <format_data+0x2dc>)
 800330e:	6013      	str	r3, [r2, #0]
		gps_data_->date[1] = (uint8_t)(non_formatted_date / 100);
 8003310:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <format_data+0x2dc>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <format_data+0x2e4>)
 8003316:	fba2 2303 	umull	r2, r3, r2, r3
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	b2da      	uxtb	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		non_formatted_date -= gps_data_->date[1] * 100;
 8003324:	4b16      	ldr	r3, [pc, #88]	@ (8003380 <format_data+0x2dc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800332e:	4611      	mov	r1, r2
 8003330:	2264      	movs	r2, #100	@ 0x64
 8003332:	fb01 f202 	mul.w	r2, r1, r2
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	4a11      	ldr	r2, [pc, #68]	@ (8003380 <format_data+0x2dc>)
 800333a:	6013      	str	r3, [r2, #0]
		gps_data_->date[2] = (uint8_t)(non_formatted_date);
 800333c:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <format_data+0x2dc>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	b2da      	uxtb	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

		// format height
		gps_data_->orthometric_height = gps_data_->altitude - gps_data_->geoid_height;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	}
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	200010dc 	.word	0x200010dc
 800336c:	42c80000 	.word	0x42c80000
 8003370:	42700000 	.word	0x42700000
 8003374:	200010e0 	.word	0x200010e0
 8003378:	200010e4 	.word	0x200010e4
 800337c:	461c4000 	.word	0x461c4000
 8003380:	200010e8 	.word	0x200010e8
 8003384:	d1b71759 	.word	0xd1b71759
 8003388:	51eb851f 	.word	0x51eb851f

0800338c <send_command>:
#include "lora.h"
#include "main.h"



static void send_command(uint8_t header, uint8_t addresses, uint8_t dataLength, uint8_t *data) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4603      	mov	r3, r0
 8003396:	71fb      	strb	r3, [r7, #7]
 8003398:	460b      	mov	r3, r1
 800339a:	71bb      	strb	r3, [r7, #6]
 800339c:	4613      	mov	r3, r2
 800339e:	717b      	strb	r3, [r7, #5]
    uint8_t command[12];
    command[0] = header;
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	723b      	strb	r3, [r7, #8]
    command[1] = addresses;
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	727b      	strb	r3, [r7, #9]
    command[2] = dataLength;
 80033a8:	797b      	ldrb	r3, [r7, #5]
 80033aa:	72bb      	strb	r3, [r7, #10]
    for (int i = 0; i < 9; i++) {
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	e00c      	b.n	80033cc <send_command+0x40>
        command[3 + i] = data[i];
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	441a      	add	r2, r3
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	3303      	adds	r3, #3
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	3318      	adds	r3, #24
 80033c0:	443b      	add	r3, r7
 80033c2:	f803 2c10 	strb.w	r2, [r3, #-16]
    for (int i = 0; i < 9; i++) {
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	3301      	adds	r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b08      	cmp	r3, #8
 80033d0:	ddef      	ble.n	80033b2 <send_command+0x26>
    }

    HAL_UART_Transmit(&huart2, command, 12, 100);
 80033d2:	f107 0108 	add.w	r1, r7, #8
 80033d6:	2364      	movs	r3, #100	@ 0x64
 80033d8:	220c      	movs	r2, #12
 80033da:	4803      	ldr	r0, [pc, #12]	@ (80033e8 <send_command+0x5c>)
 80033dc:	f006 ff84 	bl	800a2e8 <HAL_UART_Transmit>
}
 80033e0:	bf00      	nop
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200012cc 	.word	0x200012cc

080033ec <lora_activate>:

void lora_activate()
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 80033f0:	2200      	movs	r2, #0
 80033f2:	2104      	movs	r1, #4
 80033f4:	4804      	ldr	r0, [pc, #16]	@ (8003408 <lora_activate+0x1c>)
 80033f6:	f004 fc49 	bl	8007c8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, RESET);
 80033fa:	2200      	movs	r2, #0
 80033fc:	2108      	movs	r1, #8
 80033fe:	4802      	ldr	r0, [pc, #8]	@ (8003408 <lora_activate+0x1c>)
 8003400:	f004 fc44 	bl	8007c8c <HAL_GPIO_WritePin>
}
 8003404:	bf00      	nop
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40020800 	.word	0x40020800

0800340c <lora_deactivate>:

void lora_deactivate()
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, SET);
 8003410:	2201      	movs	r2, #1
 8003412:	2104      	movs	r1, #4
 8003414:	4804      	ldr	r0, [pc, #16]	@ (8003428 <lora_deactivate+0x1c>)
 8003416:	f004 fc39 	bl	8007c8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 800341a:	2201      	movs	r2, #1
 800341c:	2108      	movs	r1, #8
 800341e:	4802      	ldr	r0, [pc, #8]	@ (8003428 <lora_deactivate+0x1c>)
 8003420:	f004 fc34 	bl	8007c8c <HAL_GPIO_WritePin>
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40020800 	.word	0x40020800

0800342c <lora_configure>:

void lora_configure(lorastruct *config)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
	uint8_t data[9];

    //default values of lora
    config->netId = (uint8_t) 0x00;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	725a      	strb	r2, [r3, #9]
    config->serialParity = LORA_PARITY_8N1;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	745a      	strb	r2, [r3, #17]
    config->ambientNoise = LORA_RSSI_AMBIENT_NOISE_DISABLE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	729a      	strb	r2, [r3, #10]
    config->RSSI = LORA_RSSI_DISABLE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	72da      	strb	r2, [r3, #11]
    config->transmissonMode = LORA_TRANSMISSION_TRANSPARENT;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	731a      	strb	r2, [r3, #12]
    config->repeater = LORA_REPEATER_DISABLE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	735a      	strb	r2, [r3, #13]
    config->LBT = LORA_LBT_DISABLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	739a      	strb	r2, [r3, #14]
    config->worMode = LORA_WOR_TRANSMITTER;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2208      	movs	r2, #8
 8003462:	73da      	strb	r2, [r3, #15]
    config->worCycle = LORA_WOR_4000;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2207      	movs	r2, #7
 8003468:	741a      	strb	r2, [r3, #16]

    // Lora address
    data[0] = config->loraAddress.address8[1];
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	79db      	ldrb	r3, [r3, #7]
 800346e:	733b      	strb	r3, [r7, #12]
    data[1] = config->loraAddress.address8[0];
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	799b      	ldrb	r3, [r3, #6]
 8003474:	737b      	strb	r3, [r7, #13]

    // Lora netid
    data[2] = config->netId;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	7a5b      	ldrb	r3, [r3, #9]
 800347a:	73bb      	strb	r3, [r7, #14]

    // Lora baud rate, parite, air rate
    data[3] = config->baudRate | config->serialParity | config->airRate;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	781a      	ldrb	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	7c5b      	ldrb	r3, [r3, #17]
 8003484:	4313      	orrs	r3, r2
 8003486:	b2da      	uxtb	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	785b      	ldrb	r3, [r3, #1]
 800348c:	4313      	orrs	r3, r2
 800348e:	b2db      	uxtb	r3, r3
 8003490:	73fb      	strb	r3, [r7, #15]

    // packet size, ambient noise, reserve ve power
    data[4] = config->packetSize | config->ambientNoise | LORA_STATUS_LOG_DISABLE | config->power;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	789a      	ldrb	r2, [r3, #2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7a9b      	ldrb	r3, [r3, #10]
 800349a:	4313      	orrs	r3, r2
 800349c:	b2da      	uxtb	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	78db      	ldrb	r3, [r3, #3]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	743b      	strb	r3, [r7, #16]

    // channel
    //frequency range restriction
    if(config->channel > 83)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7a1b      	ldrb	r3, [r3, #8]
 80034ac:	2b53      	cmp	r3, #83	@ 0x53
 80034ae:	d902      	bls.n	80034b6 <lora_configure+0x8a>
    	config->channel = 83;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2253      	movs	r2, #83	@ 0x53
 80034b4:	721a      	strb	r2, [r3, #8]
    else if(config->channel < 0)
    	config->channel = 0;

    data[5] = config->channel;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	7a1b      	ldrb	r3, [r3, #8]
 80034ba:	747b      	strb	r3, [r7, #17]

    // RSSI, transmission mode, repeater, LBT, worTransceiver ve worCycle
    data[6] = config->RSSI | config->transmissonMode | config->repeater | config->LBT | config->worMode | config->worCycle;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7ada      	ldrb	r2, [r3, #11]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	7b1b      	ldrb	r3, [r3, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	7b5b      	ldrb	r3, [r3, #13]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	7b9b      	ldrb	r3, [r3, #14]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	7bdb      	ldrb	r3, [r3, #15]
 80034dc:	4313      	orrs	r3, r2
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	7c1b      	ldrb	r3, [r3, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	74bb      	strb	r3, [r7, #18]

    // key
    data[7] = config->loraKey.key8[1];
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	795b      	ldrb	r3, [r3, #5]
 80034ee:	74fb      	strb	r3, [r7, #19]
    data[8] = config->loraKey.key8[0];
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	791b      	ldrb	r3, [r3, #4]
 80034f4:	753b      	strb	r3, [r7, #20]


    send_command(0xC0, 0x00, 0x09, data);
 80034f6:	f107 030c 	add.w	r3, r7, #12
 80034fa:	2209      	movs	r2, #9
 80034fc:	2100      	movs	r1, #0
 80034fe:	20c0      	movs	r0, #192	@ 0xc0
 8003500:	f7ff ff44 	bl	800338c <send_command>
		}
	}
	else {
		int x =10;
	}*/
}
 8003504:	bf00      	nop
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003510:	f002 fe18 	bl	8006144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003514:	f000 f89c 	bl	8003650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003518:	f000 faa8 	bl	8003a6c <MX_GPIO_Init>
  MX_DMA_Init();
 800351c:	f000 fa7e 	bl	8003a1c <MX_DMA_Init>
  MX_I2C1_Init();
 8003520:	f000 f954 	bl	80037cc <MX_I2C1_Init>
  MX_I2C3_Init();
 8003524:	f000 f980 	bl	8003828 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003528:	f000 f9ac 	bl	8003884 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800352c:	f000 fa22 	bl	8003974 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003530:	f000 f8fa 	bl	8003728 <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8003534:	f000 fa48 	bl	80039c8 <MX_USART6_UART_Init>
  MX_UART4_Init();
 8003538:	f000 f9f2 	bl	8003920 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

	/*==================== TIMER AND INTERRUPT CONFIGURATION ====================*/
	// Initialize and start timer for periodic operations (100ms intervals)
	MX_TIM2_Init();
 800353c:	f000 f9a2 	bl	8003884 <MX_TIM2_Init>
	HAL_TIM_Base_Start_IT(&htim2);
 8003540:	4837      	ldr	r0, [pc, #220]	@ (8003620 <main+0x114>)
 8003542:	f006 fa61 	bl	8009a08 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2101      	movs	r1, #1
 800354a:	201c      	movs	r0, #28
 800354c:	f003 fccf 	bl	8006eee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003550:	201c      	movs	r0, #28
 8003552:	f003 fce8 	bl	8006f26 <HAL_NVIC_EnableIRQ>

	// Configure external interrupt priorities for sensor data ready signals
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 1);
 8003556:	2201      	movs	r2, #1
 8003558:	2100      	movs	r1, #0
 800355a:	2009      	movs	r0, #9
 800355c:	f003 fcc7 	bl	8006eee <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 1);
 8003560:	2201      	movs	r2, #1
 8003562:	2100      	movs	r1, #0
 8003564:	200a      	movs	r0, #10
 8003566:	f003 fcc2 	bl	8006eee <HAL_NVIC_SetPriority>

	// Enable external interrupts for sensor data ready signals
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800356a:	200a      	movs	r0, #10
 800356c:	f003 fcdb 	bl	8006f26 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003570:	2009      	movs	r0, #9
 8003572:	f003 fcd8 	bl	8006f26 <HAL_NVIC_EnableIRQ>


	/* ==== SENSOR INITIALIZATION ==== */
	// Initialize BME280 sensor (temperature, humidity, pressure)
	bme280_begin();
 8003576:	f000 fb0b 	bl	8003b90 <bme280_begin>
	HAL_Delay(1000);
 800357a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800357e:	f002 fe53 	bl	8006228 <HAL_Delay>
	bme280_config();
 8003582:	f7fd ff83 	bl	800148c <bme280_config>
	bme280_update();
 8003586:	f7fe f93d 	bl	8001804 <bme280_update>

	// Initialize BMI088 IMU (accelerometer and gyroscope)
	bmi_imu_init();
 800358a:	f000 fb19 	bl	8003bc0 <bmi_imu_init>
	bmi088_config(&BMI_sensor);
 800358e:	4825      	ldr	r0, [pc, #148]	@ (8003624 <main+0x118>)
 8003590:	f7fe fdb8 	bl	8002104 <bmi088_config>
	//get_offset(&BMI_sensor);

	// Initialize HMC1021 ADC DMA for single-axis magnetometer readings
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)hmc1021_adc_buffer, 1);
 8003594:	2201      	movs	r2, #1
 8003596:	4924      	ldr	r1, [pc, #144]	@ (8003628 <main+0x11c>)
 8003598:	4824      	ldr	r0, [pc, #144]	@ (800362c <main+0x120>)
 800359a:	f002 ffbd 	bl	8006518 <HAL_ADC_Start_DMA>


	/*==================== SENSOR FUSION INITIALIZATION ====================*/
	// Initialize quaternion-based sensor fusion
	getInitialQuaternion();
 800359e:	f001 fff9 	bl	8005594 <getInitialQuaternion>
	sensor_fusion_init(&BME280_sensor);
 80035a2:	4823      	ldr	r0, [pc, #140]	@ (8003630 <main+0x124>)
 80035a4:	f002 f96e 	bl	8005884 <sensor_fusion_init>

	/* ==== LORA COMMUNICATION SETUP ==== */
	lora_deactivate();
 80035a8:	f7ff ff30 	bl	800340c <lora_deactivate>
	loraBegin();
 80035ac:	f000 fb36 	bl	8003c1c <loraBegin>
	lora_activate();
 80035b0:	f7ff ff1c 	bl	80033ec <lora_activate>

	/* ==== GPS/GNSS INITIALIZATION ==== */
	// Initialize L86 GPS/GNSS module
	L86_GPIO_Init();
 80035b4:	f000 fb66 	bl	8003c84 <L86_GPIO_Init>
	HAL_Delay(100);  // GPS modülün boot olması için daha fazla bekle
 80035b8:	2064      	movs	r0, #100	@ 0x64
 80035ba:	f002 fe35 	bl	8006228 <HAL_Delay>
	L86_GNSS_Init(&huart6, BAUD_RATE_9600);
 80035be:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 80035c2:	481c      	ldr	r0, [pc, #112]	@ (8003634 <main+0x128>)
 80035c4:	f7ff fbea 	bl	8002d9c <L86_GNSS_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/*CONTINUOUS SENSOR UPDATES*/
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 80035c8:	4816      	ldr	r0, [pc, #88]	@ (8003624 <main+0x118>)
 80035ca:	f7fe ff9d 	bl	8002508 <bmi088_update>
		bme280_update(); 		// Update barometric pressure sensor data for altitude estimation
 80035ce:	f7fe f919 	bl	8001804 <bme280_update>
		//read_value();	// Transmit current sensor readings


		/*PERIODIC OPERATIONS (100ms)*/
		// Execute operations every 100ms
		if (tx_timer_flag_100ms >= 1) {
 80035d2:	4b19      	ldr	r3, [pc, #100]	@ (8003638 <main+0x12c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d017      	beq.n	800360c <main+0x100>
		  tx_timer_flag_100ms = 0;
 80035dc:	4b16      	ldr	r3, [pc, #88]	@ (8003638 <main+0x12c>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]

		  // Read magnetometer ADC values
		  read_ADC();
 80035e2:	f000 fb77 	bl	8003cd4 <read_ADC>

		  // Update GPS/GNSS data
		  L86_GNSS_Update(&gnss_data);
 80035e6:	4815      	ldr	r0, [pc, #84]	@ (800363c <main+0x130>)
 80035e8:	f7ff fc42 	bl	8002e70 <L86_GNSS_Update>
		  //L86_GNSS_Print_Info(&gnss_data,&huart2);

		  // Package all sensor data into telemetry packet for ground station transmission
		  addDataPacketNormal(&BME280_sensor, &BMI_sensor, &gnss_data, hmc1021_gauss);
 80035ec:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <main+0x134>)
 80035ee:	edd3 7a00 	vldr	s15, [r3]
 80035f2:	eeb0 0a67 	vmov.f32	s0, s15
 80035f6:	4a11      	ldr	r2, [pc, #68]	@ (800363c <main+0x130>)
 80035f8:	490a      	ldr	r1, [pc, #40]	@ (8003624 <main+0x118>)
 80035fa:	480d      	ldr	r0, [pc, #52]	@ (8003630 <main+0x124>)
 80035fc:	f000 fc4e 	bl	8003e9c <addDataPacketNormal>
		  HAL_UART_Transmit(&huart2, (uint8_t*)normal_paket, 59, 100);
 8003600:	2364      	movs	r3, #100	@ 0x64
 8003602:	223b      	movs	r2, #59	@ 0x3b
 8003604:	490f      	ldr	r1, [pc, #60]	@ (8003644 <main+0x138>)
 8003606:	4810      	ldr	r0, [pc, #64]	@ (8003648 <main+0x13c>)
 8003608:	f006 fe6e 	bl	800a2e8 <HAL_UART_Transmit>
		  //read_value();
		}

		/*PERIODIC OPERATIONS (1 SECOND)*/
		// Execute operations every 1 second (10 * 100ms)
		if (tx_timer_flag_1s >= 10) {
 800360c:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <main+0x140>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b09      	cmp	r3, #9
 8003614:	d9d8      	bls.n	80035c8 <main+0xbc>
		  tx_timer_flag_1s = 0;
 8003616:	4b0d      	ldr	r3, [pc, #52]	@ (800364c <main+0x140>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
		bmi088_update(&BMI_sensor);		// Update IMU sensor data (accelerometer + gyroscope) - High frequency sampling
 800361c:	e7d4      	b.n	80035c8 <main+0xbc>
 800361e:	bf00      	nop
 8003620:	2000123c 	.word	0x2000123c
 8003624:	20001424 	.word	0x20001424
 8003628:	20001588 	.word	0x20001588
 800362c:	200010ec 	.word	0x200010ec
 8003630:	200013bc 	.word	0x200013bc
 8003634:	20001314 	.word	0x20001314
 8003638:	20001580 	.word	0x20001580
 800363c:	200014a4 	.word	0x200014a4
 8003640:	20001590 	.word	0x20001590
 8003644:	20001594 	.word	0x20001594
 8003648:	200012cc 	.word	0x200012cc
 800364c:	20001581 	.word	0x20001581

08003650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b094      	sub	sp, #80	@ 0x50
 8003654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003656:	f107 031c 	add.w	r3, r7, #28
 800365a:	2234      	movs	r2, #52	@ 0x34
 800365c:	2100      	movs	r1, #0
 800365e:	4618      	mov	r0, r3
 8003660:	f009 f907 	bl	800c872 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	4b29      	ldr	r3, [pc, #164]	@ (8003720 <SystemClock_Config+0xd0>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	4a28      	ldr	r2, [pc, #160]	@ (8003720 <SystemClock_Config+0xd0>)
 800367e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003682:	6413      	str	r3, [r2, #64]	@ 0x40
 8003684:	4b26      	ldr	r3, [pc, #152]	@ (8003720 <SystemClock_Config+0xd0>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003690:	2300      	movs	r3, #0
 8003692:	603b      	str	r3, [r7, #0]
 8003694:	4b23      	ldr	r3, [pc, #140]	@ (8003724 <SystemClock_Config+0xd4>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <SystemClock_Config+0xd4>)
 800369a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b20      	ldr	r3, [pc, #128]	@ (8003724 <SystemClock_Config+0xd4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036b6:	2302      	movs	r3, #2
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80036be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036c0:	2308      	movs	r3, #8
 80036c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80036c4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80036c8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036ca:	2302      	movs	r3, #2
 80036cc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80036ce:	2302      	movs	r3, #2
 80036d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80036d2:	2302      	movs	r3, #2
 80036d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036d6:	f107 031c 	add.w	r3, r7, #28
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 fea6 	bl	800942c <HAL_RCC_OscConfig>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80036e6:	f000 fbab 	bl	8003e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036ea:	230f      	movs	r3, #15
 80036ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036ee:	2302      	movs	r3, #2
 80036f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80036fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003700:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003702:	f107 0308 	add.w	r3, r7, #8
 8003706:	2105      	movs	r1, #5
 8003708:	4618      	mov	r0, r3
 800370a:	f005 fb45 	bl	8008d98 <HAL_RCC_ClockConfig>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003714:	f000 fb94 	bl	8003e40 <Error_Handler>
  }
}
 8003718:	bf00      	nop
 800371a:	3750      	adds	r7, #80	@ 0x50
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	40007000 	.word	0x40007000

08003728 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800372e:	463b      	mov	r3, r7
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	605a      	str	r2, [r3, #4]
 8003736:	609a      	str	r2, [r3, #8]
 8003738:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800373a:	4b21      	ldr	r3, [pc, #132]	@ (80037c0 <MX_ADC1_Init+0x98>)
 800373c:	4a21      	ldr	r2, [pc, #132]	@ (80037c4 <MX_ADC1_Init+0x9c>)
 800373e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003740:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <MX_ADC1_Init+0x98>)
 8003742:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003746:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003748:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <MX_ADC1_Init+0x98>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800374e:	4b1c      	ldr	r3, [pc, #112]	@ (80037c0 <MX_ADC1_Init+0x98>)
 8003750:	2200      	movs	r2, #0
 8003752:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <MX_ADC1_Init+0x98>)
 8003756:	2201      	movs	r2, #1
 8003758:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800375a:	4b19      	ldr	r3, [pc, #100]	@ (80037c0 <MX_ADC1_Init+0x98>)
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003762:	4b17      	ldr	r3, [pc, #92]	@ (80037c0 <MX_ADC1_Init+0x98>)
 8003764:	2200      	movs	r2, #0
 8003766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <MX_ADC1_Init+0x98>)
 800376a:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <MX_ADC1_Init+0xa0>)
 800376c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800376e:	4b14      	ldr	r3, [pc, #80]	@ (80037c0 <MX_ADC1_Init+0x98>)
 8003770:	2200      	movs	r2, #0
 8003772:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003774:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <MX_ADC1_Init+0x98>)
 8003776:	2201      	movs	r2, #1
 8003778:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800377a:	4b11      	ldr	r3, [pc, #68]	@ (80037c0 <MX_ADC1_Init+0x98>)
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <MX_ADC1_Init+0x98>)
 8003784:	2201      	movs	r2, #1
 8003786:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003788:	480d      	ldr	r0, [pc, #52]	@ (80037c0 <MX_ADC1_Init+0x98>)
 800378a:	f002 fd71 	bl	8006270 <HAL_ADC_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003794:	f000 fb54 	bl	8003e40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003798:	2309      	movs	r3, #9
 800379a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800379c:	2301      	movs	r3, #1
 800379e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80037a0:	2301      	movs	r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037a4:	463b      	mov	r3, r7
 80037a6:	4619      	mov	r1, r3
 80037a8:	4805      	ldr	r0, [pc, #20]	@ (80037c0 <MX_ADC1_Init+0x98>)
 80037aa:	f002 ffe7 	bl	800677c <HAL_ADC_ConfigChannel>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80037b4:	f000 fb44 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	200010ec 	.word	0x200010ec
 80037c4:	40012000 	.word	0x40012000
 80037c8:	0f000001 	.word	0x0f000001

080037cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037d0:	4b12      	ldr	r3, [pc, #72]	@ (800381c <MX_I2C1_Init+0x50>)
 80037d2:	4a13      	ldr	r2, [pc, #76]	@ (8003820 <MX_I2C1_Init+0x54>)
 80037d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80037d6:	4b11      	ldr	r3, [pc, #68]	@ (800381c <MX_I2C1_Init+0x50>)
 80037d8:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <MX_I2C1_Init+0x58>)
 80037da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037dc:	4b0f      	ldr	r3, [pc, #60]	@ (800381c <MX_I2C1_Init+0x50>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80037e2:	4b0e      	ldr	r3, [pc, #56]	@ (800381c <MX_I2C1_Init+0x50>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037e8:	4b0c      	ldr	r3, [pc, #48]	@ (800381c <MX_I2C1_Init+0x50>)
 80037ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037f0:	4b0a      	ldr	r3, [pc, #40]	@ (800381c <MX_I2C1_Init+0x50>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80037f6:	4b09      	ldr	r3, [pc, #36]	@ (800381c <MX_I2C1_Init+0x50>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037fc:	4b07      	ldr	r3, [pc, #28]	@ (800381c <MX_I2C1_Init+0x50>)
 80037fe:	2200      	movs	r2, #0
 8003800:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <MX_I2C1_Init+0x50>)
 8003804:	2200      	movs	r2, #0
 8003806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003808:	4804      	ldr	r0, [pc, #16]	@ (800381c <MX_I2C1_Init+0x50>)
 800380a:	f004 fa71 	bl	8007cf0 <HAL_I2C_Init>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003814:	f000 fb14 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20001194 	.word	0x20001194
 8003820:	40005400 	.word	0x40005400
 8003824:	000186a0 	.word	0x000186a0

08003828 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <MX_I2C3_Init+0x50>)
 800382e:	4a13      	ldr	r2, [pc, #76]	@ (800387c <MX_I2C3_Init+0x54>)
 8003830:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003832:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <MX_I2C3_Init+0x50>)
 8003834:	4a12      	ldr	r2, [pc, #72]	@ (8003880 <MX_I2C3_Init+0x58>)
 8003836:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003838:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <MX_I2C3_Init+0x50>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800383e:	4b0e      	ldr	r3, [pc, #56]	@ (8003878 <MX_I2C3_Init+0x50>)
 8003840:	2200      	movs	r2, #0
 8003842:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003844:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <MX_I2C3_Init+0x50>)
 8003846:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800384a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800384c:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <MX_I2C3_Init+0x50>)
 800384e:	2200      	movs	r2, #0
 8003850:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003852:	4b09      	ldr	r3, [pc, #36]	@ (8003878 <MX_I2C3_Init+0x50>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003858:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <MX_I2C3_Init+0x50>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <MX_I2C3_Init+0x50>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003864:	4804      	ldr	r0, [pc, #16]	@ (8003878 <MX_I2C3_Init+0x50>)
 8003866:	f004 fa43 	bl	8007cf0 <HAL_I2C_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003870:	f000 fae6 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	200011e8 	.word	0x200011e8
 800387c:	40005c00 	.word	0x40005c00
 8003880:	000186a0 	.word	0x000186a0

08003884 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]
 8003896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003898:	463b      	mov	r3, r7
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038a0:	4b1e      	ldr	r3, [pc, #120]	@ (800391c <MX_TIM2_Init+0x98>)
 80038a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8999;
 80038a8:	4b1c      	ldr	r3, [pc, #112]	@ (800391c <MX_TIM2_Init+0x98>)
 80038aa:	f242 3227 	movw	r2, #8999	@ 0x2327
 80038ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b0:	4b1a      	ldr	r3, [pc, #104]	@ (800391c <MX_TIM2_Init+0x98>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80038b6:	4b19      	ldr	r3, [pc, #100]	@ (800391c <MX_TIM2_Init+0x98>)
 80038b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80038bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038be:	4b17      	ldr	r3, [pc, #92]	@ (800391c <MX_TIM2_Init+0x98>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c4:	4b15      	ldr	r3, [pc, #84]	@ (800391c <MX_TIM2_Init+0x98>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038ca:	4814      	ldr	r0, [pc, #80]	@ (800391c <MX_TIM2_Init+0x98>)
 80038cc:	f006 f84c 	bl	8009968 <HAL_TIM_Base_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80038d6:	f000 fab3 	bl	8003e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038e0:	f107 0308 	add.w	r3, r7, #8
 80038e4:	4619      	mov	r1, r3
 80038e6:	480d      	ldr	r0, [pc, #52]	@ (800391c <MX_TIM2_Init+0x98>)
 80038e8:	f006 f9ee 	bl	8009cc8 <HAL_TIM_ConfigClockSource>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80038f2:	f000 faa5 	bl	8003e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038fe:	463b      	mov	r3, r7
 8003900:	4619      	mov	r1, r3
 8003902:	4806      	ldr	r0, [pc, #24]	@ (800391c <MX_TIM2_Init+0x98>)
 8003904:	f006 fc10 	bl	800a128 <HAL_TIMEx_MasterConfigSynchronization>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800390e:	f000 fa97 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	2000123c 	.word	0x2000123c

08003920 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <MX_UART4_Init+0x4c>)
 8003926:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <MX_UART4_Init+0x50>)
 8003928:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800392a:	4b10      	ldr	r3, [pc, #64]	@ (800396c <MX_UART4_Init+0x4c>)
 800392c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003930:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003932:	4b0e      	ldr	r3, [pc, #56]	@ (800396c <MX_UART4_Init+0x4c>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003938:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <MX_UART4_Init+0x4c>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <MX_UART4_Init+0x4c>)
 8003940:	2200      	movs	r2, #0
 8003942:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003944:	4b09      	ldr	r3, [pc, #36]	@ (800396c <MX_UART4_Init+0x4c>)
 8003946:	220c      	movs	r2, #12
 8003948:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800394a:	4b08      	ldr	r3, [pc, #32]	@ (800396c <MX_UART4_Init+0x4c>)
 800394c:	2200      	movs	r2, #0
 800394e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003950:	4b06      	ldr	r3, [pc, #24]	@ (800396c <MX_UART4_Init+0x4c>)
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003956:	4805      	ldr	r0, [pc, #20]	@ (800396c <MX_UART4_Init+0x4c>)
 8003958:	f006 fc76 	bl	800a248 <HAL_UART_Init>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003962:	f000 fa6d 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003966:	bf00      	nop
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20001284 	.word	0x20001284
 8003970:	40004c00 	.word	0x40004c00

08003974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003978:	4b11      	ldr	r3, [pc, #68]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <MX_USART2_UART_Init+0x50>)
 800397c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800397e:	4b10      	ldr	r3, [pc, #64]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 8003980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003986:	4b0e      	ldr	r3, [pc, #56]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 8003988:	2200      	movs	r2, #0
 800398a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800398c:	4b0c      	ldr	r3, [pc, #48]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 800398e:	2200      	movs	r2, #0
 8003990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003992:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 8003994:	2200      	movs	r2, #0
 8003996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003998:	4b09      	ldr	r3, [pc, #36]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 800399a:	220c      	movs	r2, #12
 800399c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800399e:	4b08      	ldr	r3, [pc, #32]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a4:	4b06      	ldr	r3, [pc, #24]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039aa:	4805      	ldr	r0, [pc, #20]	@ (80039c0 <MX_USART2_UART_Init+0x4c>)
 80039ac:	f006 fc4c 	bl	800a248 <HAL_UART_Init>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80039b6:	f000 fa43 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200012cc 	.word	0x200012cc
 80039c4:	40004400 	.word	0x40004400

080039c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80039cc:	4b11      	ldr	r3, [pc, #68]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 80039ce:	4a12      	ldr	r2, [pc, #72]	@ (8003a18 <MX_USART6_UART_Init+0x50>)
 80039d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80039d2:	4b10      	ldr	r3, [pc, #64]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 80039d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80039d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80039da:	4b0e      	ldr	r3, [pc, #56]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80039ec:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 80039ee:	220c      	movs	r2, #12
 80039f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039f2:	4b08      	ldr	r3, [pc, #32]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80039f8:	4b06      	ldr	r3, [pc, #24]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80039fe:	4805      	ldr	r0, [pc, #20]	@ (8003a14 <MX_USART6_UART_Init+0x4c>)
 8003a00:	f006 fc22 	bl	800a248 <HAL_UART_Init>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003a0a:	f000 fa19 	bl	8003e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20001314 	.word	0x20001314
 8003a18:	40011400 	.word	0x40011400

08003a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003a22:	2300      	movs	r3, #0
 8003a24:	607b      	str	r3, [r7, #4]
 8003a26:	4b10      	ldr	r3, [pc, #64]	@ (8003a68 <MX_DMA_Init+0x4c>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003a68 <MX_DMA_Init+0x4c>)
 8003a2c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a32:	4b0d      	ldr	r3, [pc, #52]	@ (8003a68 <MX_DMA_Init+0x4c>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	2038      	movs	r0, #56	@ 0x38
 8003a44:	f003 fa53 	bl	8006eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003a48:	2038      	movs	r0, #56	@ 0x38
 8003a4a:	f003 fa6c 	bl	8006f26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	203a      	movs	r0, #58	@ 0x3a
 8003a54:	f003 fa4b 	bl	8006eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003a58:	203a      	movs	r0, #58	@ 0x3a
 8003a5a:	f003 fa64 	bl	8006f26 <HAL_NVIC_EnableIRQ>

}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800

08003a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08a      	sub	sp, #40	@ 0x28
 8003a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a72:	f107 0314 	add.w	r3, r7, #20
 8003a76:	2200      	movs	r2, #0
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	605a      	str	r2, [r3, #4]
 8003a7c:	609a      	str	r2, [r3, #8]
 8003a7e:	60da      	str	r2, [r3, #12]
 8003a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	4b3f      	ldr	r3, [pc, #252]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	4a3e      	ldr	r2, [pc, #248]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a92:	4b3c      	ldr	r3, [pc, #240]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	613b      	str	r3, [r7, #16]
 8003a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	4a37      	ldr	r2, [pc, #220]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aae:	4b35      	ldr	r3, [pc, #212]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	4b31      	ldr	r3, [pc, #196]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac2:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aca:	4b2e      	ldr	r3, [pc, #184]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	60bb      	str	r3, [r7, #8]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	607b      	str	r3, [r7, #4]
 8003ada:	4b2a      	ldr	r3, [pc, #168]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ade:	4a29      	ldr	r2, [pc, #164]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003ae0:	f043 0302 	orr.w	r3, r3, #2
 8003ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ae6:	4b27      	ldr	r3, [pc, #156]	@ (8003b84 <MX_GPIO_Init+0x118>)
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	607b      	str	r3, [r7, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_M0_Pin|RF_M1_Pin, GPIO_PIN_RESET);
 8003af2:	2200      	movs	r2, #0
 8003af4:	210c      	movs	r1, #12
 8003af6:	4824      	ldr	r0, [pc, #144]	@ (8003b88 <MX_GPIO_Init+0x11c>)
 8003af8:	f004 f8c8 	bl	8007c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8003afc:	2200      	movs	r2, #0
 8003afe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b02:	4822      	ldr	r0, [pc, #136]	@ (8003b8c <MX_GPIO_Init+0x120>)
 8003b04:	f004 f8c2 	bl	8007c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RF_M0_Pin RF_M1_Pin */
  GPIO_InitStruct.Pin = RF_M0_Pin|RF_M1_Pin;
 8003b08:	230c      	movs	r3, #12
 8003b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	2300      	movs	r3, #0
 8003b16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b18:	f107 0314 	add.w	r3, r7, #20
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	481a      	ldr	r0, [pc, #104]	@ (8003b88 <MX_GPIO_Init+0x11c>)
 8003b20:	f003 fe2c 	bl	800777c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b32:	2303      	movs	r3, #3
 8003b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4813      	ldr	r0, [pc, #76]	@ (8003b8c <MX_GPIO_Init+0x120>)
 8003b3e:	f003 fe1d 	bl	800777c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003b42:	2318      	movs	r3, #24
 8003b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b46:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	4619      	mov	r1, r3
 8003b56:	480d      	ldr	r0, [pc, #52]	@ (8003b8c <MX_GPIO_Init+0x120>)
 8003b58:	f003 fe10 	bl	800777c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2100      	movs	r1, #0
 8003b60:	2009      	movs	r0, #9
 8003b62:	f003 f9c4 	bl	8006eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003b66:	2009      	movs	r0, #9
 8003b68:	f003 f9dd 	bl	8006f26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	2100      	movs	r1, #0
 8003b70:	200a      	movs	r0, #10
 8003b72:	f003 f9bc 	bl	8006eee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003b76:	200a      	movs	r0, #10
 8003b78:	f003 f9d5 	bl	8006f26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003b7c:	bf00      	nop
 8003b7e:	3728      	adds	r7, #40	@ 0x28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	40020800 	.word	0x40020800
 8003b8c:	40020400 	.word	0x40020400

08003b90 <bme280_begin>:
/**
 * @brief Initialize BME280 environmental sensor
 * @note Configures BME280 with predefined settings for normal operation
 */
void bme280_begin()
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  BME280_sensor.device_config.bme280_filter = BME280_FILTER_8;
 8003b94:	4b08      	ldr	r3, [pc, #32]	@ (8003bb8 <bme280_begin+0x28>)
 8003b96:	2203      	movs	r2, #3
 8003b98:	711a      	strb	r2, [r3, #4]
  BME280_sensor.device_config.bme280_mode = BME280_MODE_NORMAL;
 8003b9a:	4b07      	ldr	r3, [pc, #28]	@ (8003bb8 <bme280_begin+0x28>)
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	715a      	strb	r2, [r3, #5]
  BME280_sensor.device_config.bme280_output_speed = BME280_OS_8;
 8003ba0:	4b05      	ldr	r3, [pc, #20]	@ (8003bb8 <bme280_begin+0x28>)
 8003ba2:	2204      	movs	r2, #4
 8003ba4:	719a      	strb	r2, [r3, #6]
  BME280_sensor.device_config.bme280_standby_time = BME280_STBY_20;
 8003ba6:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <bme280_begin+0x28>)
 8003ba8:	2207      	movs	r2, #7
 8003baa:	71da      	strb	r2, [r3, #7]
  bme280_init(&BME280_sensor, &hi2c3);
 8003bac:	4903      	ldr	r1, [pc, #12]	@ (8003bbc <bme280_begin+0x2c>)
 8003bae:	4802      	ldr	r0, [pc, #8]	@ (8003bb8 <bme280_begin+0x28>)
 8003bb0:	f7fd fdf0 	bl	8001794 <bme280_init>
}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200013bc 	.word	0x200013bc
 8003bbc:	200011e8 	.word	0x200011e8

08003bc0 <bmi_imu_init>:
 * @brief Initialize BMI088 IMU sensor
 * @return Initialization status
 * @note Configures both accelerometer and gyroscope with optimal settings
 */
uint8_t bmi_imu_init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  // Accelerometer configuration
  BMI_sensor.device_config.acc_bandwith = ACC_BWP_OSR4;
 8003bc4:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bc6:	2208      	movs	r2, #8
 8003bc8:	719a      	strb	r2, [r3, #6]
  BMI_sensor.device_config.acc_outputDateRate = ACC_ODR_200;
 8003bca:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bcc:	2209      	movs	r2, #9
 8003bce:	71da      	strb	r2, [r3, #7]
  BMI_sensor.device_config.acc_powerMode = ACC_PWR_SAVE_ACTIVE;
 8003bd0:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	711a      	strb	r2, [r3, #4]
  BMI_sensor.device_config.acc_range = ACC_RANGE_24G;
 8003bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bd8:	2203      	movs	r2, #3
 8003bda:	715a      	strb	r2, [r3, #5]

  // Gyroscope configuration
  BMI_sensor.device_config.gyro_bandWidth = GYRO_BW_116;
 8003bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bde:	2202      	movs	r2, #2
 8003be0:	725a      	strb	r2, [r3, #9]
  BMI_sensor.device_config.gyro_range = GYRO_RANGE_2000;
 8003be2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c14 <bmi_imu_init+0x54>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	729a      	strb	r2, [r3, #10]
  BMI_sensor.device_config.gyro_powerMode = GYRO_LPM_NORMAL;
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	721a      	strb	r2, [r3, #8]

  // Interrupt and I2C configuration
  BMI_sensor.device_config.acc_IRQ = EXTI3_IRQn;
 8003bee:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bf0:	2209      	movs	r2, #9
 8003bf2:	741a      	strb	r2, [r3, #16]
  BMI_sensor.device_config.gyro_IRQ = EXTI4_IRQn;
 8003bf4:	4b07      	ldr	r3, [pc, #28]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bf6:	220a      	movs	r2, #10
 8003bf8:	745a      	strb	r2, [r3, #17]
  BMI_sensor.device_config.BMI_I2c = &IMU_I2C_HNDLR;
 8003bfa:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <bmi_imu_init+0x54>)
 8003bfc:	4a06      	ldr	r2, [pc, #24]	@ (8003c18 <bmi_imu_init+0x58>)
 8003bfe:	60da      	str	r2, [r3, #12]
  BMI_sensor.device_config.offsets = NULL; // Offset data stored in backup SRAM
 8003c00:	4b04      	ldr	r3, [pc, #16]	@ (8003c14 <bmi_imu_init+0x54>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	615a      	str	r2, [r3, #20]

  return bmi088_init(&BMI_sensor);
 8003c06:	4803      	ldr	r0, [pc, #12]	@ (8003c14 <bmi_imu_init+0x54>)
 8003c08:	f7fe fa24 	bl	8002054 <bmi088_init>
 8003c0c:	4603      	mov	r3, r0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20001424 	.word	0x20001424
 8003c18:	20001194 	.word	0x20001194

08003c1c <loraBegin>:
/**
 * @brief Initialize LoRa communication module
 * @note Configures E22 LoRa module with communication parameters
 */
void loraBegin()
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	af00      	add	r7, sp, #0
  HAL_Delay(100);
 8003c20:	2064      	movs	r0, #100	@ 0x64
 8003c22:	f002 fb01 	bl	8006228 <HAL_Delay>

  // Set LoRa module to configuration mode
  HAL_GPIO_WritePin(RF_M0_GPIO_Port, RF_M0_Pin, RESET);
 8003c26:	2200      	movs	r2, #0
 8003c28:	2104      	movs	r1, #4
 8003c2a:	4814      	ldr	r0, [pc, #80]	@ (8003c7c <loraBegin+0x60>)
 8003c2c:	f004 f82e 	bl	8007c8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_M1_GPIO_Port, RF_M1_Pin, SET);
 8003c30:	2201      	movs	r2, #1
 8003c32:	2108      	movs	r1, #8
 8003c34:	4811      	ldr	r0, [pc, #68]	@ (8003c7c <loraBegin+0x60>)
 8003c36:	f004 f829 	bl	8007c8c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003c3a:	2064      	movs	r0, #100	@ 0x64
 8003c3c:	f002 faf4 	bl	8006228 <HAL_Delay>

  // Configure LoRa parameters
  e22_lora.baudRate = LORA_BAUD_9600;
 8003c40:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <loraBegin+0x64>)
 8003c42:	2260      	movs	r2, #96	@ 0x60
 8003c44:	701a      	strb	r2, [r3, #0]
  e22_lora.airRate = LORA_AIR_RATE_2_4k;
 8003c46:	4b0e      	ldr	r3, [pc, #56]	@ (8003c80 <loraBegin+0x64>)
 8003c48:	2202      	movs	r2, #2
 8003c4a:	705a      	strb	r2, [r3, #1]
  e22_lora.packetSize = LORA_SUB_PACKET_64_BYTES;
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <loraBegin+0x64>)
 8003c4e:	2280      	movs	r2, #128	@ 0x80
 8003c50:	709a      	strb	r2, [r3, #2]
  e22_lora.power = LORA_POWER_37dbm;
 8003c52:	4b0b      	ldr	r3, [pc, #44]	@ (8003c80 <loraBegin+0x64>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	70da      	strb	r2, [r3, #3]
  e22_lora.loraAddress.address16 = 0x0000;
 8003c58:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <loraBegin+0x64>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	80da      	strh	r2, [r3, #6]
  e22_lora.loraKey.key16 = 0x0000;
 8003c5e:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <loraBegin+0x64>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	809a      	strh	r2, [r3, #4]
  e22_lora.channel = ROCKET_TELEM_FREQ;
 8003c64:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <loraBegin+0x64>)
 8003c66:	2219      	movs	r2, #25
 8003c68:	721a      	strb	r2, [r3, #8]

  lora_configure(&e22_lora);
 8003c6a:	4805      	ldr	r0, [pc, #20]	@ (8003c80 <loraBegin+0x64>)
 8003c6c:	f7ff fbde 	bl	800342c <lora_configure>
  HAL_Delay(1000);
 8003c70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003c74:	f002 fad8 	bl	8006228 <HAL_Delay>
}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	40020800 	.word	0x40020800
 8003c80:	200014ec 	.word	0x200014ec

08003c84 <L86_GPIO_Init>:
/**
 * @brief Initialize L86 GPS/GNSS GPIO pins
 * @note Configures UART5 pins for GPS communication
 */
static void L86_GPIO_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08a      	sub	sp, #40	@ 0x28
 8003c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct_UART6_TX;
  GPIO_InitTypeDef GPIO_InitStruct_UART6_RX;

  // Configure UART5 TX pin
  GPIO_InitStruct_UART6_TX.Pin = L86_TX_Pin;
 8003c8a:	2340      	movs	r3, #64	@ 0x40
 8003c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct_UART6_TX.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct_UART6_TX.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct_UART6_TX.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct_UART6_TX.Alternate = GPIO_AF8_USART6;
 8003c9a:	2308      	movs	r3, #8
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(L86_TX_GPIO_Port, &GPIO_InitStruct_UART6_TX);
 8003c9e:	f107 0314 	add.w	r3, r7, #20
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	480a      	ldr	r0, [pc, #40]	@ (8003cd0 <L86_GPIO_Init+0x4c>)
 8003ca6:	f003 fd69 	bl	800777c <HAL_GPIO_Init>

  // Configure UART5 RX pin
  GPIO_InitStruct_UART6_RX.Pin = L86_RX_Pin;
 8003caa:	2380      	movs	r3, #128	@ 0x80
 8003cac:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct_UART6_RX.Mode = GPIO_MODE_AF_PP;
 8003cae:	2302      	movs	r3, #2
 8003cb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct_UART6_RX.Pull = GPIO_NOPULL;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct_UART6_RX.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct_UART6_RX.Alternate = GPIO_AF8_USART6;
 8003cba:	2308      	movs	r3, #8
 8003cbc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(L86_RX_GPIO_Port, &GPIO_InitStruct_UART6_RX);
 8003cbe:	463b      	mov	r3, r7
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4803      	ldr	r0, [pc, #12]	@ (8003cd0 <L86_GPIO_Init+0x4c>)
 8003cc4:	f003 fd5a 	bl	800777c <HAL_GPIO_Init>
}
 8003cc8:	bf00      	nop
 8003cca:	3728      	adds	r7, #40	@ 0x28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40020800 	.word	0x40020800

08003cd4 <read_ADC>:
/**
 * @brief Read HMC1021 magnetometer ADC values
 * @note Converts ADC readings to magnetic field strength and transmits data
 */
void read_ADC(void)
{
 8003cd4:	b5b0      	push	{r4, r5, r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af02      	add	r7, sp, #8
  if(adc_conversion_complete)
 8003cda:	4b26      	ldr	r3, [pc, #152]	@ (8003d74 <read_ADC+0xa0>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d043      	beq.n	8003d6c <read_ADC+0x98>
  {
    adc_conversion_complete = 0;
 8003ce4:	4b23      	ldr	r3, [pc, #140]	@ (8003d74 <read_ADC+0xa0>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
    
    // Convert ADC value to voltage (3.3V reference, 12-bit ADC)
    hmc1021_voltage = (float)hmc1021_adc_buffer[0] * 3.3f / 4095.0f;
 8003cea:	4b23      	ldr	r3, [pc, #140]	@ (8003d78 <read_ADC+0xa4>)
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	ee07 3a90 	vmov	s15, r3
 8003cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cf8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003d7c <read_ADC+0xa8>
 8003cfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d00:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8003d80 <read_ADC+0xac>
 8003d04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d08:	4b1e      	ldr	r3, [pc, #120]	@ (8003d84 <read_ADC+0xb0>)
 8003d0a:	edc3 7a00 	vstr	s15, [r3]
    
    // Convert voltage to magnetic field (±1 Gauss range with 1V/Gauss sensitivity)
    // Assuming 1.65V is zero field (VCC/2)
    hmc1021_gauss = (hmc1021_voltage - 1.65f) / 1.0f;  // 1V/Gauss sensitivity
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <read_ADC+0xb0>)
 8003d10:	edd3 7a00 	vldr	s15, [r3]
 8003d14:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8003d88 <read_ADC+0xb4>
 8003d18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003d8c <read_ADC+0xb8>)
 8003d1e:	edc3 7a00 	vstr	s15, [r3]
    
    // Send magnetometer data via UART (single axis)
    sprintf(uart_buffer, "MAG %.3f %.3f\r\n", hmc1021_gauss, hmc1021_voltage);
 8003d22:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <read_ADC+0xb8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fc2e 	bl	8000588 <__aeabi_f2d>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	460d      	mov	r5, r1
 8003d30:	4b14      	ldr	r3, [pc, #80]	@ (8003d84 <read_ADC+0xb0>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc fc27 	bl	8000588 <__aeabi_f2d>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	e9cd 2300 	strd	r2, r3, [sp]
 8003d42:	4622      	mov	r2, r4
 8003d44:	462b      	mov	r3, r5
 8003d46:	4912      	ldr	r1, [pc, #72]	@ (8003d90 <read_ADC+0xbc>)
 8003d48:	4812      	ldr	r0, [pc, #72]	@ (8003d94 <read_ADC+0xc0>)
 8003d4a:	f008 fcf3 	bl	800c734 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)uart_buffer, strlen(uart_buffer), 100);
 8003d4e:	4811      	ldr	r0, [pc, #68]	@ (8003d94 <read_ADC+0xc0>)
 8003d50:	f7fc faae 	bl	80002b0 <strlen>
 8003d54:	4603      	mov	r3, r0
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	2364      	movs	r3, #100	@ 0x64
 8003d5a:	490e      	ldr	r1, [pc, #56]	@ (8003d94 <read_ADC+0xc0>)
 8003d5c:	480e      	ldr	r0, [pc, #56]	@ (8003d98 <read_ADC+0xc4>)
 8003d5e:	f006 fac3 	bl	800a2e8 <HAL_UART_Transmit>
    
    // Restart ADC DMA for next conversion
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)hmc1021_adc_buffer, 1);
 8003d62:	2201      	movs	r2, #1
 8003d64:	4904      	ldr	r1, [pc, #16]	@ (8003d78 <read_ADC+0xa4>)
 8003d66:	480d      	ldr	r0, [pc, #52]	@ (8003d9c <read_ADC+0xc8>)
 8003d68:	f002 fbd6 	bl	8006518 <HAL_ADC_Start_DMA>
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bdb0      	pop	{r4, r5, r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20001582 	.word	0x20001582
 8003d78:	20001588 	.word	0x20001588
 8003d7c:	40533333 	.word	0x40533333
 8003d80:	457ff000 	.word	0x457ff000
 8003d84:	2000158c 	.word	0x2000158c
 8003d88:	3fd33333 	.word	0x3fd33333
 8003d8c:	20001590 	.word	0x20001590
 8003d90:	080120c8 	.word	0x080120c8
 8003d94:	20001500 	.word	0x20001500
 8003d98:	200012cc 	.word	0x200012cc
 8003d9c:	200010ec 	.word	0x200010ec

08003da0 <HAL_GPIO_EXTI_Callback>:
 * @brief GPIO external interrupt callback
 * @param GPIO_Pin The pin that triggered the interrupt
 * @note Handles BMI088 accelerometer and gyroscope data ready interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	4603      	mov	r3, r0
 8003da8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_4)
 8003daa:	88fb      	ldrh	r3, [r7, #6]
 8003dac:	2b10      	cmp	r3, #16
 8003dae:	d102      	bne.n	8003db6 <HAL_GPIO_EXTI_Callback+0x16>
  {
    // Accelerometer data ready interrupt
    bmi088_set_accel_INT(&BMI_sensor);
 8003db0:	4806      	ldr	r0, [pc, #24]	@ (8003dcc <HAL_GPIO_EXTI_Callback+0x2c>)
 8003db2:	f7fe ff7f 	bl	8002cb4 <bmi088_set_accel_INT>
  }
  if(GPIO_Pin == GPIO_PIN_3)
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d102      	bne.n	8003dc2 <HAL_GPIO_EXTI_Callback+0x22>
  {
    // Gyroscope data ready interrupt
    bmi088_set_gyro_INT(&BMI_sensor);
 8003dbc:	4803      	ldr	r0, [pc, #12]	@ (8003dcc <HAL_GPIO_EXTI_Callback+0x2c>)
 8003dbe:	f7fe ff86 	bl	8002cce <bmi088_set_gyro_INT>
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20001424 	.word	0x20001424

08003dd0 <HAL_TIM_PeriodElapsedCallback>:
 * @brief Timer period elapsed callback
 * @param htim Timer handle
 * @note Increments timing flags for periodic operations
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de0:	d10d      	bne.n	8003dfe <HAL_TIM_PeriodElapsedCallback+0x2e>
    tx_timer_flag_100ms++;   // 100ms flag
 8003de2:	4b0a      	ldr	r3, [pc, #40]	@ (8003e0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	3301      	adds	r3, #1
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	4b07      	ldr	r3, [pc, #28]	@ (8003e0c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003dee:	701a      	strb	r2, [r3, #0]
    tx_timer_flag_1s++;      // 1s flag (counts to 10)
 8003df0:	4b07      	ldr	r3, [pc, #28]	@ (8003e10 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	3301      	adds	r3, #1
 8003df8:	b2da      	uxtb	r2, r3
 8003dfa:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003dfc:	701a      	strb	r2, [r3, #0]
  }
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	20001580 	.word	0x20001580
 8003e10:	20001581 	.word	0x20001581

08003e14 <HAL_ADC_ConvCpltCallback>:
 * @brief ADC DMA conversion complete callback
 * @param hadc ADC handle
 * @note Sets flag when magnetometer ADC conversion is complete
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a05      	ldr	r2, [pc, #20]	@ (8003e38 <HAL_ADC_ConvCpltCallback+0x24>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d102      	bne.n	8003e2c <HAL_ADC_ConvCpltCallback+0x18>
  {
    adc_conversion_complete = 1;
 8003e26:	4b05      	ldr	r3, [pc, #20]	@ (8003e3c <HAL_ADC_ConvCpltCallback+0x28>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	40012000 	.word	0x40012000
 8003e3c:	20001582 	.word	0x20001582

08003e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e44:	b672      	cpsid	i
}
 8003e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <Error_Handler+0x8>

08003e4c <check_sum_hesapla_normal>:
#include "packet.h"
#include <math.h>

unsigned char normal_paket[38];

unsigned char check_sum_hesapla_normal(int a){
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
    int check_sum = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
    for(int i = 4; i < a; i++){
 8003e58:	2304      	movs	r3, #4
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	e00a      	b.n	8003e74 <check_sum_hesapla_normal+0x28>
        check_sum += normal_paket[i];
 8003e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8003e98 <check_sum_hesapla_normal+0x4c>)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4413      	add	r3, r2
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
    for(int i = 4; i < a; i++){
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	3301      	adds	r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	dbf0      	blt.n	8003e5e <check_sum_hesapla_normal+0x12>
    }
    return (unsigned char) (check_sum % 256);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	425a      	negs	r2, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	bf58      	it	pl
 8003e86:	4253      	negpl	r3, r2
 8003e88:	b2db      	uxtb	r3, r3
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3714      	adds	r7, #20
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20001594 	.word	0x20001594

08003e9c <addDataPacketNormal>:
  normal_paket[48] = check_sum_hesapla_normal(48); // Check_sum = check_sum_hesapla();
  normal_paket[49] = 0x0D; // Sabit
  normal_paket[50] = 0x0A;
}*/

void addDataPacketNormal(BME_280_t* BME, bmi088_struct_t* BMI, gps_data_t* GPS, float hmc1021_gauss){
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08e      	sub	sp, #56	@ 0x38
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6178      	str	r0, [r7, #20]
 8003ea4:	6139      	str	r1, [r7, #16]
 8003ea6:	60fa      	str	r2, [r7, #12]
 8003ea8:	ed87 0a02 	vstr	s0, [r7, #8]
  normal_paket[0] = 0xFF; // Sabit
 8003eac:	4b59      	ldr	r3, [pc, #356]	@ (8004014 <addDataPacketNormal+0x178>)
 8003eae:	22ff      	movs	r2, #255	@ 0xff
 8003eb0:	701a      	strb	r2, [r3, #0]
  normal_paket[1] = 0xFF; // Sabit
 8003eb2:	4b58      	ldr	r3, [pc, #352]	@ (8004014 <addDataPacketNormal+0x178>)
 8003eb4:	22ff      	movs	r2, #255	@ 0xff
 8003eb6:	705a      	strb	r2, [r3, #1]
  normal_paket[2] = 0x54; // Sabit
 8003eb8:	4b56      	ldr	r3, [pc, #344]	@ (8004014 <addDataPacketNormal+0x178>)
 8003eba:	2254      	movs	r2, #84	@ 0x54
 8003ebc:	709a      	strb	r2, [r3, #2]
  normal_paket[3] = 0x52; // Sabit
 8003ebe:	4b55      	ldr	r3, [pc, #340]	@ (8004014 <addDataPacketNormal+0x178>)
 8003ec0:	2252      	movs	r2, #82	@ 0x52
 8003ec2:	70da      	strb	r2, [r3, #3]

  normal_paket[4] = 0;   // Takim ID = 0
 8003ec4:	4b53      	ldr	r3, [pc, #332]	@ (8004014 <addDataPacketNormal+0x178>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	711a      	strb	r2, [r3, #4]
  normal_paket[5] = 0; // Sayac degeri = 0
 8003eca:	4b52      	ldr	r3, [pc, #328]	@ (8004014 <addDataPacketNormal+0x178>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	715a      	strb	r2, [r3, #5]

  FLOAT32_UINT8_DONUSTURUCU irtifa_float32_uint8_donusturucu;
  irtifa_float32_uint8_donusturucu.sayi = BME->altitude; // Irtifa degerinin atamasini yapiyoruz.
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	637b      	str	r3, [r7, #52]	@ 0x34
  normal_paket[6] = irtifa_float32_uint8_donusturucu.array[0];
 8003ed6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8003eda:	4b4e      	ldr	r3, [pc, #312]	@ (8004014 <addDataPacketNormal+0x178>)
 8003edc:	719a      	strb	r2, [r3, #6]
  normal_paket[7] = irtifa_float32_uint8_donusturucu.array[1];
 8003ede:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8003ee2:	4b4c      	ldr	r3, [pc, #304]	@ (8004014 <addDataPacketNormal+0x178>)
 8003ee4:	71da      	strb	r2, [r3, #7]
  normal_paket[8] = irtifa_float32_uint8_donusturucu.array[2];
 8003ee6:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8003eea:	4b4a      	ldr	r3, [pc, #296]	@ (8004014 <addDataPacketNormal+0x178>)
 8003eec:	721a      	strb	r2, [r3, #8]
  normal_paket[9] = irtifa_float32_uint8_donusturucu.array[3];
 8003eee:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8003ef2:	4b48      	ldr	r3, [pc, #288]	@ (8004014 <addDataPacketNormal+0x178>)
 8003ef4:	725a      	strb	r2, [r3, #9]


  FLOAT32_UINT8_DONUSTURUCU roket_gps_irtifa_float32_uint8_donusturucu;
  roket_gps_irtifa_float32_uint8_donusturucu.sayi = GPS->altitude; // Roket GPS Irtifa degerinin atamasini yapiyoruz.
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efa:	633b      	str	r3, [r7, #48]	@ 0x30
  normal_paket[10] = roket_gps_irtifa_float32_uint8_donusturucu.array[0];
 8003efc:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8003f00:	4b44      	ldr	r3, [pc, #272]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f02:	729a      	strb	r2, [r3, #10]
  normal_paket[11] = roket_gps_irtifa_float32_uint8_donusturucu.array[1];
 8003f04:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8003f08:	4b42      	ldr	r3, [pc, #264]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f0a:	72da      	strb	r2, [r3, #11]
  normal_paket[12] = roket_gps_irtifa_float32_uint8_donusturucu.array[2];
 8003f0c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8003f10:	4b40      	ldr	r3, [pc, #256]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f12:	731a      	strb	r2, [r3, #12]
  normal_paket[13] = roket_gps_irtifa_float32_uint8_donusturucu.array[3];
 8003f14:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003f18:	4b3e      	ldr	r3, [pc, #248]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f1a:	735a      	strb	r2, [r3, #13]

   // Roket Enlem
  FLOAT32_UINT8_DONUSTURUCU roket_enlem_float32_uint8_donusturucu;
  roket_enlem_float32_uint8_donusturucu.sayi = GPS->latitude; // Roket enlem degerinin atamasini yapiyoruz.
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  normal_paket[14] = roket_enlem_float32_uint8_donusturucu.array[0];
 8003f22:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003f26:	4b3b      	ldr	r3, [pc, #236]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f28:	739a      	strb	r2, [r3, #14]
  normal_paket[15] = roket_enlem_float32_uint8_donusturucu.array[1];
 8003f2a:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8003f2e:	4b39      	ldr	r3, [pc, #228]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f30:	73da      	strb	r2, [r3, #15]
  normal_paket[16] = roket_enlem_float32_uint8_donusturucu.array[2];
 8003f32:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8003f36:	4b37      	ldr	r3, [pc, #220]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f38:	741a      	strb	r2, [r3, #16]
  normal_paket[17] = roket_enlem_float32_uint8_donusturucu.array[3];
 8003f3a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8003f3e:	4b35      	ldr	r3, [pc, #212]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f40:	745a      	strb	r2, [r3, #17]

  // Roket Boylam
  FLOAT32_UINT8_DONUSTURUCU roket_boylam_irtifa_float32_uint8_donusturucu;
  roket_boylam_irtifa_float32_uint8_donusturucu.sayi = GPS->longitude; // Roket boylam degerinin atamasini yapiyoruz.
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f46:	62bb      	str	r3, [r7, #40]	@ 0x28
  normal_paket[18] = roket_boylam_irtifa_float32_uint8_donusturucu.array[0];
 8003f48:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003f4c:	4b31      	ldr	r3, [pc, #196]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f4e:	749a      	strb	r2, [r3, #18]
  normal_paket[19] = roket_boylam_irtifa_float32_uint8_donusturucu.array[1];
 8003f50:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8003f54:	4b2f      	ldr	r3, [pc, #188]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f56:	74da      	strb	r2, [r3, #19]
  normal_paket[20] = roket_boylam_irtifa_float32_uint8_donusturucu.array[2];
 8003f58:	f897 202a 	ldrb.w	r2, [r7, #42]	@ 0x2a
 8003f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f5e:	751a      	strb	r2, [r3, #20]
  normal_paket[21] = roket_boylam_irtifa_float32_uint8_donusturucu.array[3];
 8003f60:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8003f64:	4b2b      	ldr	r3, [pc, #172]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f66:	755a      	strb	r2, [r3, #21]


  FLOAT32_UINT8_DONUSTURUCU sicaklik_float32_uint8_donusturucu;
  sicaklik_float32_uint8_donusturucu.sayi = BME->temperature; // Sicaklik degerinin atamasini yapiyoruz.
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  normal_paket[22] = sicaklik_float32_uint8_donusturucu.array[0];
 8003f6e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8003f72:	4b28      	ldr	r3, [pc, #160]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f74:	759a      	strb	r2, [r3, #22]
  normal_paket[23] = sicaklik_float32_uint8_donusturucu.array[1];
 8003f76:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8003f7a:	4b26      	ldr	r3, [pc, #152]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f7c:	75da      	strb	r2, [r3, #23]
  normal_paket[24] = sicaklik_float32_uint8_donusturucu.array[2];
 8003f7e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003f82:	4b24      	ldr	r3, [pc, #144]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f84:	761a      	strb	r2, [r3, #24]
  normal_paket[25] = sicaklik_float32_uint8_donusturucu.array[3];
 8003f86:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8003f8a:	4b22      	ldr	r3, [pc, #136]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f8c:	765a      	strb	r2, [r3, #25]

  FLOAT32_UINT8_DONUSTURUCU basinc_float32_uint8_donusturucu;
  basinc_float32_uint8_donusturucu.sayi = BME->pressure; // Basinc degerinin atamasini yapiyoruz.
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	699b      	ldr	r3, [r3, #24]
 8003f92:	623b      	str	r3, [r7, #32]
  normal_paket[26] = basinc_float32_uint8_donusturucu.array[0];
 8003f94:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003f98:	4b1e      	ldr	r3, [pc, #120]	@ (8004014 <addDataPacketNormal+0x178>)
 8003f9a:	769a      	strb	r2, [r3, #26]
  normal_paket[27] = basinc_float32_uint8_donusturucu.array[1];
 8003f9c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8004014 <addDataPacketNormal+0x178>)
 8003fa2:	76da      	strb	r2, [r3, #27]
  normal_paket[28] = basinc_float32_uint8_donusturucu.array[2];
 8003fa4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <addDataPacketNormal+0x178>)
 8003faa:	771a      	strb	r2, [r3, #28]
  normal_paket[29] = basinc_float32_uint8_donusturucu.array[3];
 8003fac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003fb0:	4b18      	ldr	r3, [pc, #96]	@ (8004014 <addDataPacketNormal+0x178>)
 8003fb2:	775a      	strb	r2, [r3, #29]

  FLOAT32_UINT8_DONUSTURUCU gorevVeri_float32_uint8_donusturucu;
  gorevVeri_float32_uint8_donusturucu.sayi = (hmc1021_gauss); // Basinc degerinin atamasini yapiyoruz.
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	61fb      	str	r3, [r7, #28]
  normal_paket[30] = gorevVeri_float32_uint8_donusturucu.array[0];
 8003fb8:	7f3a      	ldrb	r2, [r7, #28]
 8003fba:	4b16      	ldr	r3, [pc, #88]	@ (8004014 <addDataPacketNormal+0x178>)
 8003fbc:	779a      	strb	r2, [r3, #30]
  normal_paket[31] = gorevVeri_float32_uint8_donusturucu.array[1];
 8003fbe:	7f7a      	ldrb	r2, [r7, #29]
 8003fc0:	4b14      	ldr	r3, [pc, #80]	@ (8004014 <addDataPacketNormal+0x178>)
 8003fc2:	77da      	strb	r2, [r3, #31]
  normal_paket[32] = gorevVeri_float32_uint8_donusturucu.array[2];
 8003fc4:	7fba      	ldrb	r2, [r7, #30]
 8003fc6:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <addDataPacketNormal+0x178>)
 8003fc8:	f883 2020 	strb.w	r2, [r3, #32]
  normal_paket[33] = gorevVeri_float32_uint8_donusturucu.array[3];
 8003fcc:	7ffa      	ldrb	r2, [r7, #31]
 8003fce:	4b11      	ldr	r3, [pc, #68]	@ (8004014 <addDataPacketNormal+0x178>)
 8003fd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  normal_paket[34] = BME->humidity; // Nem degerinin atamasini yapiyoruz
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	edd3 7a07 	vldr	s15, [r3, #28]
 8003fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fde:	edc7 7a01 	vstr	s15, [r7, #4]
 8003fe2:	793b      	ldrb	r3, [r7, #4]
 8003fe4:	b2da      	uxtb	r2, r3
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <addDataPacketNormal+0x178>)
 8003fe8:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  normal_paket[35] = check_sum_hesapla_normal(35); // Check_sum = check_sum_hesapla();
 8003fec:	2023      	movs	r0, #35	@ 0x23
 8003fee:	f7ff ff2d 	bl	8003e4c <check_sum_hesapla_normal>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b07      	ldr	r3, [pc, #28]	@ (8004014 <addDataPacketNormal+0x178>)
 8003ff8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  normal_paket[36] = 0x0D; // Sabit
 8003ffc:	4b05      	ldr	r3, [pc, #20]	@ (8004014 <addDataPacketNormal+0x178>)
 8003ffe:	220d      	movs	r2, #13
 8004000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  normal_paket[37] = 0x0A;
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <addDataPacketNormal+0x178>)
 8004006:	220a      	movs	r2, #10
 8004008:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800400c:	bf00      	nop
 800400e:	3738      	adds	r7, #56	@ 0x38
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20001594 	.word	0x20001594

08004018 <ekf_predict>:
    for (int i = 0; i < 4; i++)
        for (int j = 0; j < 4; j++)
            P[i][j] = (i == j) ? 1e-3f : 0.0f;
}

void ekf_predict(float gx, float gy, float gz, float dt) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b09e      	sub	sp, #120	@ 0x78
 800401c:	af00      	add	r7, sp, #0
 800401e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004022:	edc7 0a02 	vstr	s1, [r7, #8]
 8004026:	ed87 1a01 	vstr	s2, [r7, #4]
 800402a:	edc7 1a00 	vstr	s3, [r7]

    // Gyro'dan omega matrisi
    float Omega[4][4] = {
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	623b      	str	r3, [r7, #32]
        {0, -gx, -gy, -gz},
 8004034:	edd7 7a03 	vldr	s15, [r7, #12]
 8004038:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800403c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        {0, -gx, -gy, -gz},
 8004040:	edd7 7a02 	vldr	s15, [r7, #8]
 8004044:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004048:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        {0, -gx, -gy, -gz},
 800404c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004050:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 8004054:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30
 800405c:	f04f 0300 	mov.w	r3, #0
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	63bb      	str	r3, [r7, #56]	@ 0x38
        {gx,  0,  gz, -gy},
 8004066:	edd7 7a02 	vldr	s15, [r7, #8]
 800406a:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800406e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	643b      	str	r3, [r7, #64]	@ 0x40
        {gy, -gz,  0,  gx},
 8004076:	edd7 7a01 	vldr	s15, [r7, #4]
 800407a:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800407e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	657b      	str	r3, [r7, #84]	@ 0x54
        {gz,  gy, -gx,  0}
 8004094:	edd7 7a03 	vldr	s15, [r7, #12]
 8004098:	eef1 7a67 	vneg.f32	s15, s15
    float Omega[4][4] = {
 800409c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    };

    // dq = 0.5 * Omega * q
    float dq[4] = {0};
 80040a6:	f107 0310 	add.w	r3, r7, #16
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	605a      	str	r2, [r3, #4]
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < 4; i++) {
 80040b4:	2300      	movs	r3, #0
 80040b6:	677b      	str	r3, [r7, #116]	@ 0x74
 80040b8:	e043      	b.n	8004142 <ekf_predict+0x12a>
        for (int j = 0; j < 4; j++) {
 80040ba:	2300      	movs	r3, #0
 80040bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80040be:	e024      	b.n	800410a <ekf_predict+0xf2>
            dq[i] += Omega[i][j] * q[j];
 80040c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	3378      	adds	r3, #120	@ 0x78
 80040c6:	443b      	add	r3, r7
 80040c8:	3b68      	subs	r3, #104	@ 0x68
 80040ca:	ed93 7a00 	vldr	s14, [r3]
 80040ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040d0:	009a      	lsls	r2, r3, #2
 80040d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	3378      	adds	r3, #120	@ 0x78
 80040da:	443b      	add	r3, r7
 80040dc:	3b58      	subs	r3, #88	@ 0x58
 80040de:	edd3 6a00 	vldr	s13, [r3]
 80040e2:	4a5d      	ldr	r2, [pc, #372]	@ (8004258 <ekf_predict+0x240>)
 80040e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	edd3 7a00 	vldr	s15, [r3]
 80040ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80040f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	3378      	adds	r3, #120	@ 0x78
 80040fc:	443b      	add	r3, r7
 80040fe:	3b68      	subs	r3, #104	@ 0x68
 8004100:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 4; j++) {
 8004104:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004106:	3301      	adds	r3, #1
 8004108:	673b      	str	r3, [r7, #112]	@ 0x70
 800410a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800410c:	2b03      	cmp	r3, #3
 800410e:	ddd7      	ble.n	80040c0 <ekf_predict+0xa8>
        }
        dq[i] *= 0.5f * dt;
 8004110:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	3378      	adds	r3, #120	@ 0x78
 8004116:	443b      	add	r3, r7
 8004118:	3b68      	subs	r3, #104	@ 0x68
 800411a:	ed93 7a00 	vldr	s14, [r3]
 800411e:	edd7 7a00 	vldr	s15, [r7]
 8004122:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004126:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800412a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	3378      	adds	r3, #120	@ 0x78
 8004134:	443b      	add	r3, r7
 8004136:	3b68      	subs	r3, #104	@ 0x68
 8004138:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++) {
 800413c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800413e:	3301      	adds	r3, #1
 8004140:	677b      	str	r3, [r7, #116]	@ 0x74
 8004142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004144:	2b03      	cmp	r3, #3
 8004146:	ddb8      	ble.n	80040ba <ekf_predict+0xa2>
    }

    // q = q + dq
    for (int i = 0; i < 4; i++)
 8004148:	2300      	movs	r3, #0
 800414a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800414c:	e017      	b.n	800417e <ekf_predict+0x166>
        q[i] += dq[i];
 800414e:	4a42      	ldr	r2, [pc, #264]	@ (8004258 <ekf_predict+0x240>)
 8004150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4413      	add	r3, r2
 8004156:	ed93 7a00 	vldr	s14, [r3]
 800415a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	3378      	adds	r3, #120	@ 0x78
 8004160:	443b      	add	r3, r7
 8004162:	3b68      	subs	r3, #104	@ 0x68
 8004164:	edd3 7a00 	vldr	s15, [r3]
 8004168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800416c:	4a3a      	ldr	r2, [pc, #232]	@ (8004258 <ekf_predict+0x240>)
 800416e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8004178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417a:	3301      	adds	r3, #1
 800417c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800417e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004180:	2b03      	cmp	r3, #3
 8004182:	dde4      	ble.n	800414e <ekf_predict+0x136>

    // Normalize
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004184:	4b34      	ldr	r3, [pc, #208]	@ (8004258 <ekf_predict+0x240>)
 8004186:	ed93 7a00 	vldr	s14, [r3]
 800418a:	4b33      	ldr	r3, [pc, #204]	@ (8004258 <ekf_predict+0x240>)
 800418c:	edd3 7a00 	vldr	s15, [r3]
 8004190:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004194:	4b30      	ldr	r3, [pc, #192]	@ (8004258 <ekf_predict+0x240>)
 8004196:	edd3 6a01 	vldr	s13, [r3, #4]
 800419a:	4b2f      	ldr	r3, [pc, #188]	@ (8004258 <ekf_predict+0x240>)
 800419c:	edd3 7a01 	vldr	s15, [r3, #4]
 80041a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004258 <ekf_predict+0x240>)
 80041aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80041ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004258 <ekf_predict+0x240>)
 80041b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80041b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041bc:	4b26      	ldr	r3, [pc, #152]	@ (8004258 <ekf_predict+0x240>)
 80041be:	edd3 6a03 	vldr	s13, [r3, #12]
 80041c2:	4b25      	ldr	r3, [pc, #148]	@ (8004258 <ekf_predict+0x240>)
 80041c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80041c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80041cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d0:	eeb0 0a67 	vmov.f32	s0, s15
 80041d4:	f00c fb6e 	bl	80108b4 <sqrtf>
 80041d8:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
    for (int i = 0; i < 4; i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041e0:	e012      	b.n	8004208 <ekf_predict+0x1f0>
        q[i] /= norm;
 80041e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <ekf_predict+0x240>)
 80041e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	edd3 6a00 	vldr	s13, [r3]
 80041ee:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80041f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041f6:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <ekf_predict+0x240>)
 80041f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8004202:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004204:	3301      	adds	r3, #1
 8004206:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800420a:	2b03      	cmp	r3, #3
 800420c:	dde9      	ble.n	80041e2 <ekf_predict+0x1ca>

    // P = P + Q
    for (int i = 0; i < 4; i++)
 800420e:	2300      	movs	r3, #0
 8004210:	667b      	str	r3, [r7, #100]	@ 0x64
 8004212:	e018      	b.n	8004246 <ekf_predict+0x22e>
        P[i][i] += Q_val;
 8004214:	4911      	ldr	r1, [pc, #68]	@ (800425c <ekf_predict+0x244>)
 8004216:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	edd3 7a00 	vldr	s15, [r3]
 8004226:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004260 <ekf_predict+0x248>
 800422a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800422e:	490b      	ldr	r1, [pc, #44]	@ (800425c <ekf_predict+0x244>)
 8004230:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004232:	4613      	mov	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 4; i++)
 8004240:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004242:	3301      	adds	r3, #1
 8004244:	667b      	str	r3, [r7, #100]	@ 0x64
 8004246:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004248:	2b03      	cmp	r3, #3
 800424a:	dde3      	ble.n	8004214 <ekf_predict+0x1fc>
}
 800424c:	bf00      	nop
 800424e:	bf00      	nop
 8004250:	3778      	adds	r7, #120	@ 0x78
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20000004 	.word	0x20000004
 800425c:	200015bc 	.word	0x200015bc
 8004260:	3727c5ac 	.word	0x3727c5ac

08004264 <quaternionToYaw1>:

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
    return acosf(safeValue) * (180.0f / 3.14f);
}

float quaternionToYaw1(){
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 800426a:	4b2a      	ldr	r3, [pc, #168]	@ (8004314 <quaternionToYaw1+0xb0>)
 800426c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004270:	4b28      	ldr	r3, [pc, #160]	@ (8004314 <quaternionToYaw1+0xb0>)
 8004272:	edd3 7a02 	vldr	s15, [r3, #8]
 8004276:	ee27 7a27 	vmul.f32	s14, s14, s15
 800427a:	4b26      	ldr	r3, [pc, #152]	@ (8004314 <quaternionToYaw1+0xb0>)
 800427c:	edd3 6a00 	vldr	s13, [r3]
 8004280:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <quaternionToYaw1+0xb0>)
 8004282:	edd3 7a03 	vldr	s15, [r3, #12]
 8004286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800428a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800428e:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8004292:	4b20      	ldr	r3, [pc, #128]	@ (8004314 <quaternionToYaw1+0xb0>)
 8004294:	ed93 7a00 	vldr	s14, [r3]
 8004298:	4b1e      	ldr	r3, [pc, #120]	@ (8004314 <quaternionToYaw1+0xb0>)
 800429a:	edd3 7a00 	vldr	s15, [r3]
 800429e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80042a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004314 <quaternionToYaw1+0xb0>)
 80042a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80042a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004314 <quaternionToYaw1+0xb0>)
 80042aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80042ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042b6:	4b17      	ldr	r3, [pc, #92]	@ (8004314 <quaternionToYaw1+0xb0>)
 80042b8:	edd3 6a02 	vldr	s13, [r3, #8]
 80042bc:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <quaternionToYaw1+0xb0>)
 80042be:	edd3 7a02 	vldr	s15, [r3, #8]
 80042c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80042ca:	4b12      	ldr	r3, [pc, #72]	@ (8004314 <quaternionToYaw1+0xb0>)
 80042cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80042d0:	4b10      	ldr	r3, [pc, #64]	@ (8004314 <quaternionToYaw1+0xb0>)
 80042d2:	edd3 7a03 	vldr	s15, [r3, #12]
 80042d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042de:	eef0 0a67 	vmov.f32	s1, s15
 80042e2:	eeb0 0a46 	vmov.f32	s0, s12
 80042e6:	f00c fae3 	bl	80108b0 <atan2f>
 80042ea:	eef0 7a40 	vmov.f32	s15, s0
 80042ee:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004318 <quaternionToYaw1+0xb4>
 80042f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042f6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800431c <quaternionToYaw1+0xb8>
 80042fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042fe:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	ee07 3a90 	vmov	s15, r3
}
 8004308:	eeb0 0a67 	vmov.f32	s0, s15
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000004 	.word	0x20000004
 8004318:	43340000 	.word	0x43340000
 800431c:	40490fd0 	.word	0x40490fd0

08004320 <quaternionToPitch1>:

float quaternionToPitch1(){
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 8004326:	4b17      	ldr	r3, [pc, #92]	@ (8004384 <quaternionToPitch1+0x64>)
 8004328:	ed93 7a01 	vldr	s14, [r3, #4]
 800432c:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <quaternionToPitch1+0x64>)
 800432e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004332:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004336:	4b13      	ldr	r3, [pc, #76]	@ (8004384 <quaternionToPitch1+0x64>)
 8004338:	edd3 6a00 	vldr	s13, [r3]
 800433c:	4b11      	ldr	r3, [pc, #68]	@ (8004384 <quaternionToPitch1+0x64>)
 800433e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004342:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004346:	ee77 7a67 	vsub.f32	s15, s14, s15
 800434a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800434e:	eeb0 0a67 	vmov.f32	s0, s15
 8004352:	f00c fa81 	bl	8010858 <asinf>
 8004356:	eef0 7a40 	vmov.f32	s15, s0
 800435a:	eef1 7a67 	vneg.f32	s15, s15
 800435e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004388 <quaternionToPitch1+0x68>
 8004362:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004366:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800438c <quaternionToPitch1+0x6c>
 800436a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800436e:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	ee07 3a90 	vmov	s15, r3
}
 8004378:	eeb0 0a67 	vmov.f32	s0, s15
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000004 	.word	0x20000004
 8004388:	43340000 	.word	0x43340000
 800438c:	40490fd0 	.word	0x40490fd0

08004390 <quaternionToRoll1>:

float quaternionToRoll1(){
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 8004396:	4b2a      	ldr	r3, [pc, #168]	@ (8004440 <quaternionToRoll1+0xb0>)
 8004398:	ed93 7a00 	vldr	s14, [r3]
 800439c:	4b28      	ldr	r3, [pc, #160]	@ (8004440 <quaternionToRoll1+0xb0>)
 800439e:	edd3 7a01 	vldr	s15, [r3, #4]
 80043a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043a6:	4b26      	ldr	r3, [pc, #152]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80043ac:	4b24      	ldr	r3, [pc, #144]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80043b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ba:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80043be:	4b20      	ldr	r3, [pc, #128]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043c0:	ed93 7a00 	vldr	s14, [r3]
 80043c4:	4b1e      	ldr	r3, [pc, #120]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043c6:	edd3 7a00 	vldr	s15, [r3]
 80043ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043ce:	4b1c      	ldr	r3, [pc, #112]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043d0:	edd3 6a01 	vldr	s13, [r3, #4]
 80043d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80043da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043e2:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80043e8:	4b15      	ldr	r3, [pc, #84]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80043ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80043f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043f6:	4b12      	ldr	r3, [pc, #72]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043f8:	edd3 6a03 	vldr	s13, [r3, #12]
 80043fc:	4b10      	ldr	r3, [pc, #64]	@ (8004440 <quaternionToRoll1+0xb0>)
 80043fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8004402:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800440a:	eef0 0a67 	vmov.f32	s1, s15
 800440e:	eeb0 0a46 	vmov.f32	s0, s12
 8004412:	f00c fa4d 	bl	80108b0 <atan2f>
 8004416:	eef0 7a40 	vmov.f32	s15, s0
 800441a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004444 <quaternionToRoll1+0xb4>
 800441e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004422:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8004448 <quaternionToRoll1+0xb8>
 8004426:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800442a:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	ee07 3a90 	vmov	s15, r3
}
 8004434:	eeb0 0a67 	vmov.f32	s0, s15
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	20000004 	.word	0x20000004
 8004444:	43340000 	.word	0x43340000
 8004448:	40490fd0 	.word	0x40490fd0

0800444c <quaternionToYawDegree1>:

float quaternionToYawDegree1(){
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8004452:	4b20      	ldr	r3, [pc, #128]	@ (80044d4 <quaternionToYawDegree1+0x88>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	4b1e      	ldr	r3, [pc, #120]	@ (80044d4 <quaternionToYawDegree1+0x88>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]
 800445e:	4b1d      	ldr	r3, [pc, #116]	@ (80044d4 <quaternionToYawDegree1+0x88>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	4b1b      	ldr	r3, [pc, #108]	@ (80044d4 <quaternionToYawDegree1+0x88>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	60bb      	str	r3, [r7, #8]
    float siny_cosp = 2.0f * (w * z + x * y);
 800446a:	ed97 7a05 	vldr	s14, [r7, #20]
 800446e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004476:	edd7 6a04 	vldr	s13, [r7, #16]
 800447a:	edd7 7a03 	vldr	s15, [r7, #12]
 800447e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004482:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004486:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800448a:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
 800448e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004492:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004496:	edd7 7a02 	vldr	s15, [r7, #8]
 800449a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800449e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80044a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80044aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044ae:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
 80044b2:	edd7 0a00 	vldr	s1, [r7]
 80044b6:	ed97 0a01 	vldr	s0, [r7, #4]
 80044ba:	f00c f9f9 	bl	80108b0 <atan2f>
 80044be:	eef0 7a40 	vmov.f32	s15, s0
 80044c2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80044d8 <quaternionToYawDegree1+0x8c>
 80044c6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80044ca:	eeb0 0a67 	vmov.f32	s0, s15
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000004 	.word	0x20000004
 80044d8:	42652ee0 	.word	0x42652ee0

080044dc <UpdateMahonyGains>:

uint8_t Gain = 0;
uint8_t gyroOnlyMode = 0;


void UpdateMahonyGains(float ax, float ay, float az) {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	@ 0x30
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	ed87 0a03 	vstr	s0, [r7, #12]
 80044e6:	edc7 0a02 	vstr	s1, [r7, #8]
 80044ea:	ed87 1a01 	vstr	s2, [r7, #4]
    // Quaternion normalize edilmemişse gravity yön tahmini hatalı olur
    float norm_q = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 80044ee:	4bd5      	ldr	r3, [pc, #852]	@ (8004844 <UpdateMahonyGains+0x368>)
 80044f0:	ed93 7a00 	vldr	s14, [r3]
 80044f4:	4bd3      	ldr	r3, [pc, #844]	@ (8004844 <UpdateMahonyGains+0x368>)
 80044f6:	edd3 7a00 	vldr	s15, [r3]
 80044fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044fe:	4bd1      	ldr	r3, [pc, #836]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004500:	edd3 6a01 	vldr	s13, [r3, #4]
 8004504:	4bcf      	ldr	r3, [pc, #828]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004506:	edd3 7a01 	vldr	s15, [r3, #4]
 800450a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800450e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004512:	4bcc      	ldr	r3, [pc, #816]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004514:	edd3 6a02 	vldr	s13, [r3, #8]
 8004518:	4bca      	ldr	r3, [pc, #808]	@ (8004844 <UpdateMahonyGains+0x368>)
 800451a:	edd3 7a02 	vldr	s15, [r3, #8]
 800451e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004522:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004526:	4bc7      	ldr	r3, [pc, #796]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004528:	edd3 6a03 	vldr	s13, [r3, #12]
 800452c:	4bc5      	ldr	r3, [pc, #788]	@ (8004844 <UpdateMahonyGains+0x368>)
 800452e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004532:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800453a:	eeb0 0a67 	vmov.f32	s0, s15
 800453e:	f00c f9b9 	bl	80108b4 <sqrtf>
 8004542:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    if (norm_q == 0.0f) return; // Koruma
 8004546:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800454a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	f000 8172 	beq.w	800483a <UpdateMahonyGains+0x35e>
    q[0] /= norm_q;
 8004556:	4bbb      	ldr	r3, [pc, #748]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004558:	edd3 6a00 	vldr	s13, [r3]
 800455c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004564:	4bb7      	ldr	r3, [pc, #732]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004566:	edc3 7a00 	vstr	s15, [r3]
    q[1] /= norm_q;
 800456a:	4bb6      	ldr	r3, [pc, #728]	@ (8004844 <UpdateMahonyGains+0x368>)
 800456c:	edd3 6a01 	vldr	s13, [r3, #4]
 8004570:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004578:	4bb2      	ldr	r3, [pc, #712]	@ (8004844 <UpdateMahonyGains+0x368>)
 800457a:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] /= norm_q;
 800457e:	4bb1      	ldr	r3, [pc, #708]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004580:	edd3 6a02 	vldr	s13, [r3, #8]
 8004584:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004588:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458c:	4bad      	ldr	r3, [pc, #692]	@ (8004844 <UpdateMahonyGains+0x368>)
 800458e:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] /= norm_q;
 8004592:	4bac      	ldr	r3, [pc, #688]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004594:	edd3 6a03 	vldr	s13, [r3, #12]
 8004598:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800459c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a0:	4ba8      	ldr	r3, [pc, #672]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045a2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Gravity yön vektörü (tam vektör formu)
    float gx = 2.0f * (q[1] * q[3] - q[0] * q[2]);
 80045a6:	4ba7      	ldr	r3, [pc, #668]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045a8:	ed93 7a01 	vldr	s14, [r3, #4]
 80045ac:	4ba5      	ldr	r3, [pc, #660]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045ae:	edd3 7a03 	vldr	s15, [r3, #12]
 80045b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045b6:	4ba3      	ldr	r3, [pc, #652]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045b8:	edd3 6a00 	vldr	s13, [r3]
 80045bc:	4ba1      	ldr	r3, [pc, #644]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045be:	edd3 7a02 	vldr	s15, [r3, #8]
 80045c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float gy = 2.0f * (q[0] * q[1] + q[2] * q[3]);
 80045d2:	4b9c      	ldr	r3, [pc, #624]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045d4:	ed93 7a00 	vldr	s14, [r3]
 80045d8:	4b9a      	ldr	r3, [pc, #616]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045da:	edd3 7a01 	vldr	s15, [r3, #4]
 80045de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045e2:	4b98      	ldr	r3, [pc, #608]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80045e8:	4b96      	ldr	r3, [pc, #600]	@ (8004844 <UpdateMahonyGains+0x368>)
 80045ea:	edd3 7a03 	vldr	s15, [r3, #12]
 80045ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80045f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80045fa:	edc7 7a08 	vstr	s15, [r7, #32]
    float gz = q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3];
 80045fe:	4b91      	ldr	r3, [pc, #580]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004600:	ed93 7a00 	vldr	s14, [r3]
 8004604:	4b8f      	ldr	r3, [pc, #572]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004606:	edd3 7a00 	vldr	s15, [r3]
 800460a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800460e:	4b8d      	ldr	r3, [pc, #564]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004610:	edd3 6a01 	vldr	s13, [r3, #4]
 8004614:	4b8b      	ldr	r3, [pc, #556]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004616:	edd3 7a01 	vldr	s15, [r3, #4]
 800461a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800461e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004622:	4b88      	ldr	r3, [pc, #544]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004624:	edd3 6a02 	vldr	s13, [r3, #8]
 8004628:	4b86      	ldr	r3, [pc, #536]	@ (8004844 <UpdateMahonyGains+0x368>)
 800462a:	edd3 7a02 	vldr	s15, [r3, #8]
 800462e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004636:	4b83      	ldr	r3, [pc, #524]	@ (8004844 <UpdateMahonyGains+0x368>)
 8004638:	edd3 6a03 	vldr	s13, [r3, #12]
 800463c:	4b81      	ldr	r3, [pc, #516]	@ (8004844 <UpdateMahonyGains+0x368>)
 800463e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004642:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Normalize gravity tahmini
    float recipNormG = invSqrt(gx * gx + gy * gy + gz * gz);
 800464e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004652:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004656:	edd7 7a08 	vldr	s15, [r7, #32]
 800465a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800465e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004662:	edd7 7a07 	vldr	s15, [r7, #28]
 8004666:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800466a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800466e:	eeb0 0a67 	vmov.f32	s0, s15
 8004672:	f001 f8cb 	bl	800580c <invSqrt>
 8004676:	ed87 0a06 	vstr	s0, [r7, #24]
    gx *= recipNormG;
 800467a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800467e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004686:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy *= recipNormG;
 800468a:	ed97 7a08 	vldr	s14, [r7, #32]
 800468e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004696:	edc7 7a08 	vstr	s15, [r7, #32]
    gz *= recipNormG;
 800469a:	ed97 7a07 	vldr	s14, [r7, #28]
 800469e:	edd7 7a06 	vldr	s15, [r7, #24]
 80046a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046a6:	edc7 7a07 	vstr	s15, [r7, #28]

    // İvmeölçer zaten normalize edilmiş olarak gelmeli (gelmiyorsa normalize et!)
    float recipNormA = invSqrt(ax * ax + ay * ay + az * az);
 80046aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80046ae:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80046b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80046b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046be:	edd7 7a01 	vldr	s15, [r7, #4]
 80046c2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80046c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046ca:	eeb0 0a67 	vmov.f32	s0, s15
 80046ce:	f001 f89d 	bl	800580c <invSqrt>
 80046d2:	ed87 0a05 	vstr	s0, [r7, #20]
    ax *= recipNormA;
 80046d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80046da:	edd7 7a05 	vldr	s15, [r7, #20]
 80046de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e2:	edc7 7a03 	vstr	s15, [r7, #12]
    ay *= recipNormA;
 80046e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80046ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a02 	vstr	s15, [r7, #8]
    az *= recipNormA;
 80046f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80046fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80046fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004702:	edc7 7a01 	vstr	s15, [r7, #4]

    // Dot product
    float dot = ax * gx + ay * gy + az * gz;
 8004706:	ed97 7a03 	vldr	s14, [r7, #12]
 800470a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800470e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004712:	edd7 6a02 	vldr	s13, [r7, #8]
 8004716:	edd7 7a08 	vldr	s15, [r7, #32]
 800471a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800471e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004722:	edd7 6a01 	vldr	s13, [r7, #4]
 8004726:	edd7 7a07 	vldr	s15, [r7, #28]
 800472a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800472e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004732:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    if (dot > 1.0f) dot = 1.0f;
 8004736:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800473a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800473e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	dd02      	ble.n	800474e <UpdateMahonyGains+0x272>
 8004748:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800474c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (dot < -1.0f) dot = -1.0f;
 800474e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004752:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800475a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800475e:	d501      	bpl.n	8004764 <UpdateMahonyGains+0x288>
 8004760:	4b39      	ldr	r3, [pc, #228]	@ (8004848 <UpdateMahonyGains+0x36c>)
 8004762:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Açı farkı (derece)
    float accErrorAngle = acosf(dot) * (180.0f / 3.1415926f);
 8004764:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004768:	f00c f84a 	bl	8010800 <acosf>
 800476c:	eef0 7a40 	vmov.f32	s15, s0
 8004770:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800484c <UpdateMahonyGains+0x370>
 8004774:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004778:	edc7 7a04 	vstr	s15, [r7, #16]

    // Duruma göre kazanç ayarla
    if (accErrorAngle > 30.0f) {
 800477c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004780:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8004784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800478c:	dd0a      	ble.n	80047a4 <UpdateMahonyGains+0x2c8>
        Gain = 1;
 800478e:	4b30      	ldr	r3, [pc, #192]	@ (8004850 <UpdateMahonyGains+0x374>)
 8004790:	2201      	movs	r2, #1
 8004792:	701a      	strb	r2, [r3, #0]
        twoKp = 0.2f;
 8004794:	4b2f      	ldr	r3, [pc, #188]	@ (8004854 <UpdateMahonyGains+0x378>)
 8004796:	4a30      	ldr	r2, [pc, #192]	@ (8004858 <UpdateMahonyGains+0x37c>)
 8004798:	601a      	str	r2, [r3, #0]
        twoKi = 0.0f;
 800479a:	4b30      	ldr	r3, [pc, #192]	@ (800485c <UpdateMahonyGains+0x380>)
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	e01d      	b.n	80047e0 <UpdateMahonyGains+0x304>
    } else if (accErrorAngle > 10.0f) {
 80047a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80047a8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80047ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b4:	dd0a      	ble.n	80047cc <UpdateMahonyGains+0x2f0>
        Gain = 2;
 80047b6:	4b26      	ldr	r3, [pc, #152]	@ (8004850 <UpdateMahonyGains+0x374>)
 80047b8:	2202      	movs	r2, #2
 80047ba:	701a      	strb	r2, [r3, #0]
        twoKp = 2.0f;
 80047bc:	4b25      	ldr	r3, [pc, #148]	@ (8004854 <UpdateMahonyGains+0x378>)
 80047be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80047c2:	601a      	str	r2, [r3, #0]
        twoKi = 0.01f;
 80047c4:	4b25      	ldr	r3, [pc, #148]	@ (800485c <UpdateMahonyGains+0x380>)
 80047c6:	4a26      	ldr	r2, [pc, #152]	@ (8004860 <UpdateMahonyGains+0x384>)
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	e009      	b.n	80047e0 <UpdateMahonyGains+0x304>
    } else {
        Gain = 3;
 80047cc:	4b20      	ldr	r3, [pc, #128]	@ (8004850 <UpdateMahonyGains+0x374>)
 80047ce:	2203      	movs	r2, #3
 80047d0:	701a      	strb	r2, [r3, #0]
        twoKp = 8.0f;
 80047d2:	4b20      	ldr	r3, [pc, #128]	@ (8004854 <UpdateMahonyGains+0x378>)
 80047d4:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80047d8:	601a      	str	r2, [r3, #0]
        twoKi = 0.05f;
 80047da:	4b20      	ldr	r3, [pc, #128]	@ (800485c <UpdateMahonyGains+0x380>)
 80047dc:	4a21      	ldr	r2, [pc, #132]	@ (8004864 <UpdateMahonyGains+0x388>)
 80047de:	601a      	str	r2, [r3, #0]
    }

    // Güvenlik: kazanç sınırla (opsiyonel ama önerilir)
    twoKp = fmaxf(TWO_KP_MIN, fminf(twoKp, TWO_KP_MAX));
 80047e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004854 <UpdateMahonyGains+0x378>)
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	eef1 0a00 	vmov.f32	s1, #16	@ 0x40800000  4.0
 80047ea:	eeb0 0a67 	vmov.f32	s0, s15
 80047ee:	f00c f8ae 	bl	801094e <fminf>
 80047f2:	eef0 7a40 	vmov.f32	s15, s0
 80047f6:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8004868 <UpdateMahonyGains+0x38c>
 80047fa:	eeb0 0a67 	vmov.f32	s0, s15
 80047fe:	f00c f889 	bl	8010914 <fmaxf>
 8004802:	eef0 7a40 	vmov.f32	s15, s0
 8004806:	4b13      	ldr	r3, [pc, #76]	@ (8004854 <UpdateMahonyGains+0x378>)
 8004808:	edc3 7a00 	vstr	s15, [r3]
    twoKi = fmaxf(TWO_KI_MIN, fminf(twoKi, TWO_KI_MAX));
 800480c:	4b13      	ldr	r3, [pc, #76]	@ (800485c <UpdateMahonyGains+0x380>)
 800480e:	edd3 7a00 	vldr	s15, [r3]
 8004812:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800486c <UpdateMahonyGains+0x390>
 8004816:	eeb0 0a67 	vmov.f32	s0, s15
 800481a:	f00c f898 	bl	801094e <fminf>
 800481e:	eef0 7a40 	vmov.f32	s15, s0
 8004822:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8004870 <UpdateMahonyGains+0x394>
 8004826:	eeb0 0a67 	vmov.f32	s0, s15
 800482a:	f00c f873 	bl	8010914 <fmaxf>
 800482e:	eef0 7a40 	vmov.f32	s15, s0
 8004832:	4b0a      	ldr	r3, [pc, #40]	@ (800485c <UpdateMahonyGains+0x380>)
 8004834:	edc3 7a00 	vstr	s15, [r3]
 8004838:	e000      	b.n	800483c <UpdateMahonyGains+0x360>
    if (norm_q == 0.0f) return; // Koruma
 800483a:	bf00      	nop
}
 800483c:	3730      	adds	r7, #48	@ 0x30
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000014 	.word	0x20000014
 8004848:	bf800000 	.word	0xbf800000
 800484c:	42652ee2 	.word	0x42652ee2
 8004850:	20001608 	.word	0x20001608
 8004854:	20000024 	.word	0x20000024
 8004858:	3e4ccccd 	.word	0x3e4ccccd
 800485c:	20000028 	.word	0x20000028
 8004860:	3c23d70a 	.word	0x3c23d70a
 8004864:	3d4ccccd 	.word	0x3d4ccccd
 8004868:	3dcccccd 	.word	0x3dcccccd
 800486c:	3d4ccccd 	.word	0x3d4ccccd
 8004870:	00000000 	.word	0x00000000

08004874 <Orientation_Update>:





void Orientation_Update(float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b08a      	sub	sp, #40	@ 0x28
 8004878:	af00      	add	r7, sp, #0
 800487a:	ed87 0a07 	vstr	s0, [r7, #28]
 800487e:	edc7 0a06 	vstr	s1, [r7, #24]
 8004882:	ed87 1a05 	vstr	s2, [r7, #20]
 8004886:	edc7 1a04 	vstr	s3, [r7, #16]
 800488a:	ed87 2a03 	vstr	s4, [r7, #12]
 800488e:	edc7 2a02 	vstr	s5, [r7, #8]
 8004892:	ed87 3a01 	vstr	s6, [r7, #4]
	static float ax_f = 0, ay_f = 0, az_f = 0;
    const float alpha = 0.3f;
 8004896:	4b60      	ldr	r3, [pc, #384]	@ (8004a18 <Orientation_Update+0x1a4>)
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24

    // LPF filtre
    ax_f = alpha * ax + (1.0f - alpha) * ax_f;
 800489a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800489e:	edd7 7a04 	vldr	s15, [r7, #16]
 80048a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80048ae:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80048b2:	4b5a      	ldr	r3, [pc, #360]	@ (8004a1c <Orientation_Update+0x1a8>)
 80048b4:	edd3 7a00 	vldr	s15, [r3]
 80048b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c0:	4b56      	ldr	r3, [pc, #344]	@ (8004a1c <Orientation_Update+0x1a8>)
 80048c2:	edc3 7a00 	vstr	s15, [r3]
    ay_f = alpha * ay + (1.0f - alpha) * ay_f;
 80048c6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80048ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80048da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80048de:	4b50      	ldr	r3, [pc, #320]	@ (8004a20 <Orientation_Update+0x1ac>)
 80048e0:	edd3 7a00 	vldr	s15, [r3]
 80048e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004a20 <Orientation_Update+0x1ac>)
 80048ee:	edc3 7a00 	vstr	s15, [r3]
    az_f = alpha * az + (1.0f - alpha) * az_f;
 80048f2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80048f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80048fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004902:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004906:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800490a:	4b46      	ldr	r3, [pc, #280]	@ (8004a24 <Orientation_Update+0x1b0>)
 800490c:	edd3 7a00 	vldr	s15, [r3]
 8004910:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004914:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004918:	4b42      	ldr	r3, [pc, #264]	@ (8004a24 <Orientation_Update+0x1b0>)
 800491a:	edc3 7a00 	vstr	s15, [r3]

    // Kazançları güncelle
    UpdateMahonyGains(ax_f, ay_f, az_f);
 800491e:	4b3f      	ldr	r3, [pc, #252]	@ (8004a1c <Orientation_Update+0x1a8>)
 8004920:	edd3 7a00 	vldr	s15, [r3]
 8004924:	4b3e      	ldr	r3, [pc, #248]	@ (8004a20 <Orientation_Update+0x1ac>)
 8004926:	ed93 7a00 	vldr	s14, [r3]
 800492a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a24 <Orientation_Update+0x1b0>)
 800492c:	edd3 6a00 	vldr	s13, [r3]
 8004930:	eeb0 1a66 	vmov.f32	s2, s13
 8004934:	eef0 0a47 	vmov.f32	s1, s14
 8004938:	eeb0 0a67 	vmov.f32	s0, s15
 800493c:	f7ff fdce 	bl	80044dc <UpdateMahonyGains>

    // Acc magnitude
    float accMag = sqrtf(ax_f*ax_f + ay_f*ay_f + az_f*az_f);
 8004940:	4b36      	ldr	r3, [pc, #216]	@ (8004a1c <Orientation_Update+0x1a8>)
 8004942:	ed93 7a00 	vldr	s14, [r3]
 8004946:	4b35      	ldr	r3, [pc, #212]	@ (8004a1c <Orientation_Update+0x1a8>)
 8004948:	edd3 7a00 	vldr	s15, [r3]
 800494c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004950:	4b33      	ldr	r3, [pc, #204]	@ (8004a20 <Orientation_Update+0x1ac>)
 8004952:	edd3 6a00 	vldr	s13, [r3]
 8004956:	4b32      	ldr	r3, [pc, #200]	@ (8004a20 <Orientation_Update+0x1ac>)
 8004958:	edd3 7a00 	vldr	s15, [r3]
 800495c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004960:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004964:	4b2f      	ldr	r3, [pc, #188]	@ (8004a24 <Orientation_Update+0x1b0>)
 8004966:	edd3 6a00 	vldr	s13, [r3]
 800496a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a24 <Orientation_Update+0x1b0>)
 800496c:	edd3 7a00 	vldr	s15, [r3]
 8004970:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004978:	eeb0 0a67 	vmov.f32	s0, s15
 800497c:	f00b ff9a 	bl	80108b4 <sqrtf>
 8004980:	ed87 0a08 	vstr	s0, [r7, #32]

    if (gyroOnlyMode) {
 8004984:	4b28      	ldr	r3, [pc, #160]	@ (8004a28 <Orientation_Update+0x1b4>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00c      	beq.n	80049a6 <Orientation_Update+0x132>
            if (accMag < ACC_THRESHOLD_LOW)
 800498c:	edd7 7a08 	vldr	s15, [r7, #32]
 8004990:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004a2c <Orientation_Update+0x1b8>
 8004994:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499c:	d50f      	bpl.n	80049be <Orientation_Update+0x14a>
                gyroOnlyMode = 0;
 800499e:	4b22      	ldr	r3, [pc, #136]	@ (8004a28 <Orientation_Update+0x1b4>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e00b      	b.n	80049be <Orientation_Update+0x14a>
	} else {
		if (accMag > ACC_THRESHOLD_HIGH)
 80049a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80049aa:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004a30 <Orientation_Update+0x1bc>
 80049ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b6:	dd02      	ble.n	80049be <Orientation_Update+0x14a>
			gyroOnlyMode = 1;
 80049b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a28 <Orientation_Update+0x1b4>)
 80049ba:	2201      	movs	r2, #1
 80049bc:	701a      	strb	r2, [r3, #0]
	}



    // Filtre çağrısı
    if (gyroOnlyMode)
 80049be:	4b1a      	ldr	r3, [pc, #104]	@ (8004a28 <Orientation_Update+0x1b4>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <Orientation_Update+0x168>
        updateQuaternion(gx, gy, gz, dt);
 80049c6:	edd7 1a01 	vldr	s3, [r7, #4]
 80049ca:	ed97 1a05 	vldr	s2, [r7, #20]
 80049ce:	edd7 0a06 	vldr	s1, [r7, #24]
 80049d2:	ed97 0a07 	vldr	s0, [r7, #28]
 80049d6:	f000 f82d 	bl	8004a34 <updateQuaternion>
    else
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
}
 80049da:	e018      	b.n	8004a0e <Orientation_Update+0x19a>
        MahonyAHRSupdateIMU(gx, gy, gz, ax_f, ay_f, az_f, dt);
 80049dc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a1c <Orientation_Update+0x1a8>)
 80049de:	edd3 7a00 	vldr	s15, [r3]
 80049e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004a20 <Orientation_Update+0x1ac>)
 80049e4:	ed93 7a00 	vldr	s14, [r3]
 80049e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a24 <Orientation_Update+0x1b0>)
 80049ea:	edd3 6a00 	vldr	s13, [r3]
 80049ee:	ed97 3a01 	vldr	s6, [r7, #4]
 80049f2:	eef0 2a66 	vmov.f32	s5, s13
 80049f6:	eeb0 2a47 	vmov.f32	s4, s14
 80049fa:	eef0 1a67 	vmov.f32	s3, s15
 80049fe:	ed97 1a05 	vldr	s2, [r7, #20]
 8004a02:	edd7 0a06 	vldr	s1, [r7, #24]
 8004a06:	ed97 0a07 	vldr	s0, [r7, #28]
 8004a0a:	f000 f93b 	bl	8004c84 <MahonyAHRSupdateIMU>
}
 8004a0e:	bf00      	nop
 8004a10:	3728      	adds	r7, #40	@ 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	3e99999a 	.word	0x3e99999a
 8004a1c:	2000160c 	.word	0x2000160c
 8004a20:	20001610 	.word	0x20001610
 8004a24:	20001614 	.word	0x20001614
 8004a28:	20001609 	.word	0x20001609
 8004a2c:	41d3d2db 	.word	0x41d3d2db
 8004a30:	420172a2 	.word	0x420172a2

08004a34 <updateQuaternion>:


void updateQuaternion(float gx, float gy, float gz, float dt) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08a      	sub	sp, #40	@ 0x28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8004a3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004a42:	ed87 1a01 	vstr	s2, [r7, #4]
 8004a46:	edc7 1a00 	vstr	s3, [r7]

    // Quaternion türevleri
    float qDot1 = 0.5f * (-q[1] * gx - q[2] * gy - q[3] * gz);
 8004a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8004c7c <updateQuaternion+0x248>)
 8004a4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a50:	eeb1 7a67 	vneg.f32	s14, s15
 8004a54:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a5c:	4b87      	ldr	r3, [pc, #540]	@ (8004c7c <updateQuaternion+0x248>)
 8004a5e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a62:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a6e:	4b83      	ldr	r3, [pc, #524]	@ (8004c7c <updateQuaternion+0x248>)
 8004a70:	edd3 6a03 	vldr	s13, [r3, #12]
 8004a74:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a80:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float qDot2 = 0.5f * ( q[0] * gx + q[2] * gz - q[3] * gy);
 8004a8c:	4b7b      	ldr	r3, [pc, #492]	@ (8004c7c <updateQuaternion+0x248>)
 8004a8e:	ed93 7a00 	vldr	s14, [r3]
 8004a92:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a9a:	4b78      	ldr	r3, [pc, #480]	@ (8004c7c <updateQuaternion+0x248>)
 8004a9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004aac:	4b73      	ldr	r3, [pc, #460]	@ (8004c7c <updateQuaternion+0x248>)
 8004aae:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ab2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ab6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004abe:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ac6:	edc7 7a08 	vstr	s15, [r7, #32]
    float qDot3 = 0.5f * ( q[0] * gy - q[1] * gz + q[3] * gx);
 8004aca:	4b6c      	ldr	r3, [pc, #432]	@ (8004c7c <updateQuaternion+0x248>)
 8004acc:	ed93 7a00 	vldr	s14, [r3]
 8004ad0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ad4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ad8:	4b68      	ldr	r3, [pc, #416]	@ (8004c7c <updateQuaternion+0x248>)
 8004ada:	edd3 6a01 	vldr	s13, [r3, #4]
 8004ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ae2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004ae6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004aea:	4b64      	ldr	r3, [pc, #400]	@ (8004c7c <updateQuaternion+0x248>)
 8004aec:	edd3 6a03 	vldr	s13, [r3, #12]
 8004af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004afc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b04:	edc7 7a07 	vstr	s15, [r7, #28]
    float qDot4 = 0.5f * ( q[0] * gz + q[1] * gy - q[2] * gx);
 8004b08:	4b5c      	ldr	r3, [pc, #368]	@ (8004c7c <updateQuaternion+0x248>)
 8004b0a:	ed93 7a00 	vldr	s14, [r3]
 8004b0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b16:	4b59      	ldr	r3, [pc, #356]	@ (8004c7c <updateQuaternion+0x248>)
 8004b18:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b28:	4b54      	ldr	r3, [pc, #336]	@ (8004c7c <updateQuaternion+0x248>)
 8004b2a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004b32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b42:	edc7 7a06 	vstr	s15, [r7, #24]

    // Entegrasyon
    q[0] += qDot1 * dt;
 8004b46:	4b4d      	ldr	r3, [pc, #308]	@ (8004c7c <updateQuaternion+0x248>)
 8004b48:	ed93 7a00 	vldr	s14, [r3]
 8004b4c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8004b50:	edd7 7a00 	vldr	s15, [r7]
 8004b54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b5c:	4b47      	ldr	r3, [pc, #284]	@ (8004c7c <updateQuaternion+0x248>)
 8004b5e:	edc3 7a00 	vstr	s15, [r3]
    q[1] += qDot2 * dt;
 8004b62:	4b46      	ldr	r3, [pc, #280]	@ (8004c7c <updateQuaternion+0x248>)
 8004b64:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b68:	edd7 6a08 	vldr	s13, [r7, #32]
 8004b6c:	edd7 7a00 	vldr	s15, [r7]
 8004b70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b78:	4b40      	ldr	r3, [pc, #256]	@ (8004c7c <updateQuaternion+0x248>)
 8004b7a:	edc3 7a01 	vstr	s15, [r3, #4]
    q[2] += qDot3 * dt;
 8004b7e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c7c <updateQuaternion+0x248>)
 8004b80:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b88:	edd7 7a00 	vldr	s15, [r7]
 8004b8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b94:	4b39      	ldr	r3, [pc, #228]	@ (8004c7c <updateQuaternion+0x248>)
 8004b96:	edc3 7a02 	vstr	s15, [r3, #8]
    q[3] += qDot4 * dt;
 8004b9a:	4b38      	ldr	r3, [pc, #224]	@ (8004c7c <updateQuaternion+0x248>)
 8004b9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004ba0:	edd7 6a06 	vldr	s13, [r7, #24]
 8004ba4:	edd7 7a00 	vldr	s15, [r7]
 8004ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb0:	4b32      	ldr	r3, [pc, #200]	@ (8004c7c <updateQuaternion+0x248>)
 8004bb2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Normalize et
    float norm = sqrtf(q[0]*q[0] + q[1]*q[1] + q[2]*q[2] + q[3]*q[3]);
 8004bb6:	4b31      	ldr	r3, [pc, #196]	@ (8004c7c <updateQuaternion+0x248>)
 8004bb8:	ed93 7a00 	vldr	s14, [r3]
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c7c <updateQuaternion+0x248>)
 8004bbe:	edd3 7a00 	vldr	s15, [r3]
 8004bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c7c <updateQuaternion+0x248>)
 8004bc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8004bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8004c7c <updateQuaternion+0x248>)
 8004bce:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bda:	4b28      	ldr	r3, [pc, #160]	@ (8004c7c <updateQuaternion+0x248>)
 8004bdc:	edd3 6a02 	vldr	s13, [r3, #8]
 8004be0:	4b26      	ldr	r3, [pc, #152]	@ (8004c7c <updateQuaternion+0x248>)
 8004be2:	edd3 7a02 	vldr	s15, [r3, #8]
 8004be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bee:	4b23      	ldr	r3, [pc, #140]	@ (8004c7c <updateQuaternion+0x248>)
 8004bf0:	edd3 6a03 	vldr	s13, [r3, #12]
 8004bf4:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <updateQuaternion+0x248>)
 8004bf6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004bfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c02:	eeb0 0a67 	vmov.f32	s0, s15
 8004c06:	f00b fe55 	bl	80108b4 <sqrtf>
 8004c0a:	ed87 0a05 	vstr	s0, [r7, #20]
    if (norm > 1e-6f) {
 8004c0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c12:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8004c80 <updateQuaternion+0x24c>
 8004c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c1e:	dc00      	bgt.n	8004c22 <updateQuaternion+0x1ee>
        q[0] /= norm;
        q[1] /= norm;
        q[2] /= norm;
        q[3] /= norm;
    }
}
 8004c20:	e027      	b.n	8004c72 <updateQuaternion+0x23e>
        q[0] /= norm;
 8004c22:	4b16      	ldr	r3, [pc, #88]	@ (8004c7c <updateQuaternion+0x248>)
 8004c24:	edd3 6a00 	vldr	s13, [r3]
 8004c28:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c30:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <updateQuaternion+0x248>)
 8004c32:	edc3 7a00 	vstr	s15, [r3]
        q[1] /= norm;
 8004c36:	4b11      	ldr	r3, [pc, #68]	@ (8004c7c <updateQuaternion+0x248>)
 8004c38:	edd3 6a01 	vldr	s13, [r3, #4]
 8004c3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c44:	4b0d      	ldr	r3, [pc, #52]	@ (8004c7c <updateQuaternion+0x248>)
 8004c46:	edc3 7a01 	vstr	s15, [r3, #4]
        q[2] /= norm;
 8004c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c7c <updateQuaternion+0x248>)
 8004c4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c50:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c58:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <updateQuaternion+0x248>)
 8004c5a:	edc3 7a02 	vstr	s15, [r3, #8]
        q[3] /= norm;
 8004c5e:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <updateQuaternion+0x248>)
 8004c60:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c64:	ed97 7a05 	vldr	s14, [r7, #20]
 8004c68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c6c:	4b03      	ldr	r3, [pc, #12]	@ (8004c7c <updateQuaternion+0x248>)
 8004c6e:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8004c72:	bf00      	nop
 8004c74:	3728      	adds	r7, #40	@ 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	20000014 	.word	0x20000014
 8004c80:	358637bd 	.word	0x358637bd

08004c84 <MahonyAHRSupdateIMU>:
        q[2] /= norm_q;
        q[3] /= norm_q;
    }
}

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax_f, float ay_f, float az_f, float dt) {
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b092      	sub	sp, #72	@ 0x48
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	ed87 0a07 	vstr	s0, [r7, #28]
 8004c8e:	edc7 0a06 	vstr	s1, [r7, #24]
 8004c92:	ed87 1a05 	vstr	s2, [r7, #20]
 8004c96:	edc7 1a04 	vstr	s3, [r7, #16]
 8004c9a:	ed87 2a03 	vstr	s4, [r7, #12]
 8004c9e:	edc7 2a02 	vstr	s5, [r7, #8]
 8004ca2:	ed87 3a01 	vstr	s6, [r7, #4]
	float halfvx, halfvy, halfvz;
	float halfex, halfey, halfez;
	float qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
		if(!((ax_f == 0.0f) && (ay_f == 0.0f) && (az_f == 0.0f))) {
 8004ca6:	edd7 7a04 	vldr	s15, [r7, #16]
 8004caa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb2:	d10e      	bne.n	8004cd2 <MahonyAHRSupdateIMU+0x4e>
 8004cb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc0:	d107      	bne.n	8004cd2 <MahonyAHRSupdateIMU+0x4e>
 8004cc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cce:	f000 8138 	beq.w	8004f42 <MahonyAHRSupdateIMU+0x2be>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax_f * ax_f + ay_f * ay_f + az_f * az_f);
 8004cd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cd6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8004cda:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cde:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004ce2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf6:	f000 fd89 	bl	800580c <invSqrt>
 8004cfa:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		ax_f *= recipNorm;
 8004cfe:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d02:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0a:	edc7 7a04 	vstr	s15, [r7, #16]
		ay_f *= recipNorm;
 8004d0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004d12:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1a:	edc7 7a03 	vstr	s15, [r7, #12]
		az_f *= recipNorm;
 8004d1e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d22:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	edc7 7a02 	vstr	s15, [r7, #8]

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q[1] * q[3] - q[0] * q[2];
 8004d2e:	4b66      	ldr	r3, [pc, #408]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d30:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d34:	4b64      	ldr	r3, [pc, #400]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d36:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d3e:	4b62      	ldr	r3, [pc, #392]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d40:	edd3 6a00 	vldr	s13, [r3]
 8004d44:	4b60      	ldr	r3, [pc, #384]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d46:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d52:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		halfvy = q[0] * q[1] + q[2] * q[3];
 8004d56:	4b5c      	ldr	r3, [pc, #368]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d58:	ed93 7a00 	vldr	s14, [r3]
 8004d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d66:	4b58      	ldr	r3, [pc, #352]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d68:	edd3 6a02 	vldr	s13, [r3, #8]
 8004d6c:	4b56      	ldr	r3, [pc, #344]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004d72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d7a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		halfvz = q[0] * q[0] - 0.5f + q[3] * q[3];
 8004d7e:	4b52      	ldr	r3, [pc, #328]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d80:	ed93 7a00 	vldr	s14, [r3]
 8004d84:	4b50      	ldr	r3, [pc, #320]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d86:	edd3 7a00 	vldr	s15, [r3]
 8004d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d8e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004d92:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004d96:	4b4c      	ldr	r3, [pc, #304]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d98:	edd3 6a03 	vldr	s13, [r3, #12]
 8004d9c:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec8 <MahonyAHRSupdateIMU+0x244>)
 8004d9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004daa:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay_f * halfvz - az_f * halfvy);
 8004dae:	ed97 7a03 	vldr	s14, [r7, #12]
 8004db2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004db6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dba:	edd7 6a02 	vldr	s13, [r7, #8]
 8004dbe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004dc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004dc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dca:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		halfey = (az_f * halfvx - ax_f * halfvz);
 8004dce:	ed97 7a02 	vldr	s14, [r7, #8]
 8004dd2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dda:	edd7 6a04 	vldr	s13, [r7, #16]
 8004dde:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dea:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		halfez = (ax_f * halfvy - ay_f * halfvx);
 8004dee:	ed97 7a04 	vldr	s14, [r7, #16]
 8004df2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8004df6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004dfa:	edd7 6a03 	vldr	s13, [r7, #12]
 8004dfe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004e06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0f) {
 8004e0e:	4b2f      	ldr	r3, [pc, #188]	@ (8004ecc <MahonyAHRSupdateIMU+0x248>)
 8004e10:	edd3 7a00 	vldr	s15, [r3]
 8004e14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e1c:	dd5e      	ble.n	8004edc <MahonyAHRSupdateIMU+0x258>
			integralFBx += twoKi * halfex * dt;	// integral error scaled by Ki
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <MahonyAHRSupdateIMU+0x248>)
 8004e20:	ed93 7a00 	vldr	s14, [r3]
 8004e24:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004e28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e34:	4b26      	ldr	r3, [pc, #152]	@ (8004ed0 <MahonyAHRSupdateIMU+0x24c>)
 8004e36:	edd3 7a00 	vldr	s15, [r3]
 8004e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e3e:	4b24      	ldr	r3, [pc, #144]	@ (8004ed0 <MahonyAHRSupdateIMU+0x24c>)
 8004e40:	edc3 7a00 	vstr	s15, [r3]
			integralFBy += twoKi * halfey * dt;
 8004e44:	4b21      	ldr	r3, [pc, #132]	@ (8004ecc <MahonyAHRSupdateIMU+0x248>)
 8004e46:	ed93 7a00 	vldr	s14, [r3]
 8004e4a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004e4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004ed4 <MahonyAHRSupdateIMU+0x250>)
 8004e5c:	edd3 7a00 	vldr	s15, [r3]
 8004e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e64:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed4 <MahonyAHRSupdateIMU+0x250>)
 8004e66:	edc3 7a00 	vstr	s15, [r3]
			integralFBz += twoKi * halfez * dt;
 8004e6a:	4b18      	ldr	r3, [pc, #96]	@ (8004ecc <MahonyAHRSupdateIMU+0x248>)
 8004e6c:	ed93 7a00 	vldr	s14, [r3]
 8004e70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004e74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e78:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e80:	4b15      	ldr	r3, [pc, #84]	@ (8004ed8 <MahonyAHRSupdateIMU+0x254>)
 8004e82:	edd3 7a00 	vldr	s15, [r3]
 8004e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e8a:	4b13      	ldr	r3, [pc, #76]	@ (8004ed8 <MahonyAHRSupdateIMU+0x254>)
 8004e8c:	edc3 7a00 	vstr	s15, [r3]
			gx += integralFBx;	// apply integral feedback
 8004e90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ed0 <MahonyAHRSupdateIMU+0x24c>)
 8004e92:	edd3 7a00 	vldr	s15, [r3]
 8004e96:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
			gy += integralFBy;
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed4 <MahonyAHRSupdateIMU+0x250>)
 8004ea4:	edd3 7a00 	vldr	s15, [r3]
 8004ea8:	ed97 7a06 	vldr	s14, [r7, #24]
 8004eac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004eb0:	edc7 7a06 	vstr	s15, [r7, #24]
			gz += integralFBz;
 8004eb4:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <MahonyAHRSupdateIMU+0x254>)
 8004eb6:	edd3 7a00 	vldr	s15, [r3]
 8004eba:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ec2:	edc7 7a05 	vstr	s15, [r7, #20]
 8004ec6:	e015      	b.n	8004ef4 <MahonyAHRSupdateIMU+0x270>
 8004ec8:	20000014 	.word	0x20000014
 8004ecc:	20000028 	.word	0x20000028
 8004ed0:	200015fc 	.word	0x200015fc
 8004ed4:	20001600 	.word	0x20001600
 8004ed8:	20001604 	.word	0x20001604
		}
		else {
			integralFBx = 0.0f;	// prevent integral windup
 8004edc:	4b9a      	ldr	r3, [pc, #616]	@ (8005148 <MahonyAHRSupdateIMU+0x4c4>)
 8004ede:	f04f 0200 	mov.w	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
			integralFBy = 0.0f;
 8004ee4:	4b99      	ldr	r3, [pc, #612]	@ (800514c <MahonyAHRSupdateIMU+0x4c8>)
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]
			integralFBz = 0.0f;
 8004eec:	4b98      	ldr	r3, [pc, #608]	@ (8005150 <MahonyAHRSupdateIMU+0x4cc>)
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
 8004ef4:	4b97      	ldr	r3, [pc, #604]	@ (8005154 <MahonyAHRSupdateIMU+0x4d0>)
 8004ef6:	ed93 7a00 	vldr	s14, [r3]
 8004efa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f02:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
		gy += twoKp * halfey;
 8004f0e:	4b91      	ldr	r3, [pc, #580]	@ (8005154 <MahonyAHRSupdateIMU+0x4d0>)
 8004f10:	ed93 7a00 	vldr	s14, [r3]
 8004f14:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004f18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004f20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f24:	edc7 7a06 	vstr	s15, [r7, #24]
		gz += twoKp * halfez;
 8004f28:	4b8a      	ldr	r3, [pc, #552]	@ (8005154 <MahonyAHRSupdateIMU+0x4d0>)
 8004f2a:	ed93 7a00 	vldr	s14, [r3]
 8004f2e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f36:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f3e:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	// Integrate rate of change of quaternion
	gx *= (0.5f * dt);		// pre-multiply common factors
 8004f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
	gy *= (0.5f * dt);
 8004f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f5e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f66:	ed97 7a06 	vldr	s14, [r7, #24]
 8004f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f6e:	edc7 7a06 	vstr	s15, [r7, #24]
	gz *= (0.5f * dt);
 8004f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f76:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f7e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f86:	edc7 7a05 	vstr	s15, [r7, #20]
	qa = q[0];
 8004f8a:	4b73      	ldr	r3, [pc, #460]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	qb = q[1];
 8004f90:	4b71      	ldr	r3, [pc, #452]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
	qc = q[2];
 8004f96:	4b70      	ldr	r3, [pc, #448]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	623b      	str	r3, [r7, #32]
	q[0] += (-qb * gx - qc * gy - q[3] * gz);
 8004f9c:	4b6e      	ldr	r3, [pc, #440]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8004f9e:	ed93 7a00 	vldr	s14, [r3]
 8004fa2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004fa6:	eef1 6a67 	vneg.f32	s13, s15
 8004faa:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004fb2:	ed97 6a08 	vldr	s12, [r7, #32]
 8004fb6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004fba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004fbe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004fc2:	4b65      	ldr	r3, [pc, #404]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8004fc4:	ed93 6a03 	vldr	s12, [r3, #12]
 8004fc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8004fcc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004fd0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fd8:	4b5f      	ldr	r3, [pc, #380]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8004fda:	edc3 7a00 	vstr	s15, [r3]
	q[1] += (qa * gx + qc * gz - q[3] * gy);
 8004fde:	4b5e      	ldr	r3, [pc, #376]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8004fe0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fe4:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8004fe8:	edd7 7a07 	vldr	s15, [r7, #28]
 8004fec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004ff0:	ed97 6a08 	vldr	s12, [r7, #32]
 8004ff4:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ff8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8004ffc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005000:	4b55      	ldr	r3, [pc, #340]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005002:	ed93 6a03 	vldr	s12, [r3, #12]
 8005006:	edd7 7a06 	vldr	s15, [r7, #24]
 800500a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800500e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005016:	4b50      	ldr	r3, [pc, #320]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005018:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] += (qa * gy - qb * gz + q[3] * gx);
 800501c:	4b4e      	ldr	r3, [pc, #312]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 800501e:	ed93 7a02 	vldr	s14, [r3, #8]
 8005022:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005026:	edd7 7a06 	vldr	s15, [r7, #24]
 800502a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800502e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8005032:	edd7 7a05 	vldr	s15, [r7, #20]
 8005036:	ee66 7a27 	vmul.f32	s15, s12, s15
 800503a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800503e:	4b46      	ldr	r3, [pc, #280]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005040:	ed93 6a03 	vldr	s12, [r3, #12]
 8005044:	edd7 7a07 	vldr	s15, [r7, #28]
 8005048:	ee66 7a27 	vmul.f32	s15, s12, s15
 800504c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005054:	4b40      	ldr	r3, [pc, #256]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005056:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] += (qa * gz + qb * gy - qc * gx);
 800505a:	4b3f      	ldr	r3, [pc, #252]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 800505c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005060:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005064:	edd7 7a05 	vldr	s15, [r7, #20]
 8005068:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800506c:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8005070:	edd7 7a06 	vldr	s15, [r7, #24]
 8005074:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005078:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800507c:	ed97 6a08 	vldr	s12, [r7, #32]
 8005080:	edd7 7a07 	vldr	s15, [r7, #28]
 8005084:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005088:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800508c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005090:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005092:	edc3 7a03 	vstr	s15, [r3, #12]

	// Normalise quaternion
	recipNorm = invSqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3]);
 8005096:	4b30      	ldr	r3, [pc, #192]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005098:	ed93 7a00 	vldr	s14, [r3]
 800509c:	4b2e      	ldr	r3, [pc, #184]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 800509e:	edd3 7a00 	vldr	s15, [r3]
 80050a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80050a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 80050a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80050ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 80050ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80050b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ba:	4b27      	ldr	r3, [pc, #156]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 80050bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80050c0:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 80050c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80050c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ce:	4b22      	ldr	r3, [pc, #136]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 80050d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80050d4:	4b20      	ldr	r3, [pc, #128]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 80050d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80050da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80050de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050e2:	eeb0 0a67 	vmov.f32	s0, s15
 80050e6:	f000 fb91 	bl	800580c <invSqrt>
 80050ea:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	q[0] *= recipNorm;
 80050ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 80050f0:	ed93 7a00 	vldr	s14, [r3]
 80050f4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80050f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fc:	4b16      	ldr	r3, [pc, #88]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 80050fe:	edc3 7a00 	vstr	s15, [r3]
	q[1] *= recipNorm;
 8005102:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005104:	ed93 7a01 	vldr	s14, [r3, #4]
 8005108:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800510c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005110:	4b11      	ldr	r3, [pc, #68]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005112:	edc3 7a01 	vstr	s15, [r3, #4]
	q[2] *= recipNorm;
 8005116:	4b10      	ldr	r3, [pc, #64]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005118:	ed93 7a02 	vldr	s14, [r3, #8]
 800511c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005124:	4b0c      	ldr	r3, [pc, #48]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 8005126:	edc3 7a02 	vstr	s15, [r3, #8]
	q[3] *= recipNorm;
 800512a:	4b0b      	ldr	r3, [pc, #44]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 800512c:	ed93 7a03 	vldr	s14, [r3, #12]
 8005130:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005138:	4b07      	ldr	r3, [pc, #28]	@ (8005158 <MahonyAHRSupdateIMU+0x4d4>)
 800513a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800513e:	bf00      	nop
 8005140:	3748      	adds	r7, #72	@ 0x48
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	200015fc 	.word	0x200015fc
 800514c:	20001600 	.word	0x20001600
 8005150:	20001604 	.word	0x20001604
 8005154:	20000024 	.word	0x20000024
 8005158:	20000014 	.word	0x20000014

0800515c <quaternionToThetaZ>:


float quaternionToThetaZ() {
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
    float r13 = 2 * q[1] * q[3] + 2 * q[2] * q[0];
 8005162:	4b44      	ldr	r3, [pc, #272]	@ (8005274 <quaternionToThetaZ+0x118>)
 8005164:	edd3 7a01 	vldr	s15, [r3, #4]
 8005168:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800516c:	4b41      	ldr	r3, [pc, #260]	@ (8005274 <quaternionToThetaZ+0x118>)
 800516e:	edd3 7a03 	vldr	s15, [r3, #12]
 8005172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005176:	4b3f      	ldr	r3, [pc, #252]	@ (8005274 <quaternionToThetaZ+0x118>)
 8005178:	edd3 7a02 	vldr	s15, [r3, #8]
 800517c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8005180:	4b3c      	ldr	r3, [pc, #240]	@ (8005274 <quaternionToThetaZ+0x118>)
 8005182:	edd3 7a00 	vldr	s15, [r3]
 8005186:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800518a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800518e:	edc7 7a05 	vstr	s15, [r7, #20]
    float r23 = 2 * q[2] * q[3] - 2 * q[1] * q[0];
 8005192:	4b38      	ldr	r3, [pc, #224]	@ (8005274 <quaternionToThetaZ+0x118>)
 8005194:	edd3 7a02 	vldr	s15, [r3, #8]
 8005198:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800519c:	4b35      	ldr	r3, [pc, #212]	@ (8005274 <quaternionToThetaZ+0x118>)
 800519e:	edd3 7a03 	vldr	s15, [r3, #12]
 80051a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051a6:	4b33      	ldr	r3, [pc, #204]	@ (8005274 <quaternionToThetaZ+0x118>)
 80051a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80051ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80051b0:	4b30      	ldr	r3, [pc, #192]	@ (8005274 <quaternionToThetaZ+0x118>)
 80051b2:	edd3 7a00 	vldr	s15, [r3]
 80051b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051be:	edc7 7a04 	vstr	s15, [r7, #16]
    float r33 = 1 - 2 * q[1] * q[1] - 2 * q[2] * q[2];
 80051c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005274 <quaternionToThetaZ+0x118>)
 80051c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80051c8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80051cc:	4b29      	ldr	r3, [pc, #164]	@ (8005274 <quaternionToThetaZ+0x118>)
 80051ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80051d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80051de:	4b25      	ldr	r3, [pc, #148]	@ (8005274 <quaternionToThetaZ+0x118>)
 80051e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80051e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80051e8:	4b22      	ldr	r3, [pc, #136]	@ (8005274 <quaternionToThetaZ+0x118>)
 80051ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80051ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80051f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051f6:	edc7 7a03 	vstr	s15, [r7, #12]

    float dotProduct = r33;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	60bb      	str	r3, [r7, #8]
    float magnitude = sqrtf(r13 * r13 + r23 * r23 + r33 * r33);
 80051fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8005202:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005206:	edd7 7a04 	vldr	s15, [r7, #16]
 800520a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800520e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005212:	edd7 7a03 	vldr	s15, [r7, #12]
 8005216:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800521a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800521e:	eeb0 0a67 	vmov.f32	s0, s15
 8005222:	f00b fb47 	bl	80108b4 <sqrtf>
 8005226:	ed87 0a01 	vstr	s0, [r7, #4]

    float safeValue = fmaxf(-1.0f, fminf(1.0f, dotProduct / magnitude));
 800522a:	ed97 7a02 	vldr	s14, [r7, #8]
 800522e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005232:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005236:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800523a:	eeb0 0a66 	vmov.f32	s0, s13
 800523e:	f00b fb86 	bl	801094e <fminf>
 8005242:	eef0 7a40 	vmov.f32	s15, s0
 8005246:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 800524a:	eeb0 0a67 	vmov.f32	s0, s15
 800524e:	f00b fb61 	bl	8010914 <fmaxf>
 8005252:	ed87 0a00 	vstr	s0, [r7]
    return acosf(safeValue) * (180.0f / 3.14f);
 8005256:	ed97 0a00 	vldr	s0, [r7]
 800525a:	f00b fad1 	bl	8010800 <acosf>
 800525e:	eef0 7a40 	vmov.f32	s15, s0
 8005262:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8005278 <quaternionToThetaZ+0x11c>
 8005266:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800526a:	eeb0 0a67 	vmov.f32	s0, s15
 800526e:	3718      	adds	r7, #24
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000014 	.word	0x20000014
 8005278:	42654ca3 	.word	0x42654ca3

0800527c <quaternionToPitchDegree>:
    float siny_cosp = 2.0f * (w * z + x * y);
    float cosy_cosp = 1.0f - 2.0f * (y * y + z * z);
    return atan2f(siny_cosp, cosy_cosp) * (180.0f / 3.14159265f);
}

float quaternionToPitchDegree() {
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8005282:	4b22      	ldr	r3, [pc, #136]	@ (800530c <quaternionToPitchDegree+0x90>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	4b20      	ldr	r3, [pc, #128]	@ (800530c <quaternionToPitchDegree+0x90>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	4b1f      	ldr	r3, [pc, #124]	@ (800530c <quaternionToPitchDegree+0x90>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	4b1d      	ldr	r3, [pc, #116]	@ (800530c <quaternionToPitchDegree+0x90>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	60bb      	str	r3, [r7, #8]
    float sinp = 2.0f * (w * y - z * x);
 800529a:	ed97 7a05 	vldr	s14, [r7, #20]
 800529e:	edd7 7a03 	vldr	s15, [r7, #12]
 80052a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052a6:	edd7 6a02 	vldr	s13, [r7, #8]
 80052aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80052ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80052ba:	edc7 7a01 	vstr	s15, [r7, #4]
    if (fabsf(sinp) >= 1.0f)
 80052be:	edd7 7a01 	vldr	s15, [r7, #4]
 80052c2:	eef0 7ae7 	vabs.f32	s15, s15
 80052c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d2:	db0c      	blt.n	80052ee <quaternionToPitchDegree+0x72>
        return (sinp > 0 ? 90.0f : -90.0f); // clamp
 80052d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80052d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052e0:	dd02      	ble.n	80052e8 <quaternionToPitchDegree+0x6c>
 80052e2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8005310 <quaternionToPitchDegree+0x94>
 80052e6:	e00c      	b.n	8005302 <quaternionToPitchDegree+0x86>
 80052e8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8005314 <quaternionToPitchDegree+0x98>
 80052ec:	e009      	b.n	8005302 <quaternionToPitchDegree+0x86>
    else
        return asinf(sinp) * (180.0f / 3.14159265f);
 80052ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80052f2:	f00b fab1 	bl	8010858 <asinf>
 80052f6:	eef0 7a40 	vmov.f32	s15, s0
 80052fa:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8005318 <quaternionToPitchDegree+0x9c>
 80052fe:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8005302:	eeb0 0a67 	vmov.f32	s0, s15
 8005306:	3718      	adds	r7, #24
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	20000014 	.word	0x20000014
 8005310:	42b40000 	.word	0x42b40000
 8005314:	c2b40000 	.word	0xc2b40000
 8005318:	42652ee0 	.word	0x42652ee0

0800531c <quaternionToRollDegree>:

float quaternionToRollDegree(){
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
    float w = q[0], x = q[1], y = q[2], z = q[3];
 8005322:	4b20      	ldr	r3, [pc, #128]	@ (80053a4 <quaternionToRollDegree+0x88>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	4b1e      	ldr	r3, [pc, #120]	@ (80053a4 <quaternionToRollDegree+0x88>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <quaternionToRollDegree+0x88>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <quaternionToRollDegree+0x88>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	60bb      	str	r3, [r7, #8]
    float sinr_cosp = 2.0f * (w * x + y * z);
 800533a:	ed97 7a05 	vldr	s14, [r7, #20]
 800533e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005346:	edd7 6a03 	vldr	s13, [r7, #12]
 800534a:	edd7 7a02 	vldr	s15, [r7, #8]
 800534e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005352:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005356:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800535a:	edc7 7a01 	vstr	s15, [r7, #4]
    float cosr_cosp = 1.0f - 2.0f * (x * x + y * y);
 800535e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005362:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8005366:	edd7 7a03 	vldr	s15, [r7, #12]
 800536a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800536e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005372:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800537a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800537e:	edc7 7a00 	vstr	s15, [r7]
    return atan2f(sinr_cosp, cosr_cosp) * (180.0f / 3.14159265f);
 8005382:	edd7 0a00 	vldr	s1, [r7]
 8005386:	ed97 0a01 	vldr	s0, [r7, #4]
 800538a:	f00b fa91 	bl	80108b0 <atan2f>
 800538e:	eef0 7a40 	vmov.f32	s15, s0
 8005392:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80053a8 <quaternionToRollDegree+0x8c>
 8005396:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800539a:	eeb0 0a67 	vmov.f32	s0, s15
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	20000014 	.word	0x20000014
 80053a8:	42652ee0 	.word	0x42652ee0

080053ac <quaternionToYaw>:


float quaternionToYaw(){
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
float yaw = atan2f(2.0f*(q[1]*q[2] + q[0]*q[3]), q[0]*q[0] + q[1]*q[1] - q[2]*q[2] - q[3]*q[3]) * 180.0f / 3.14159f;
 80053b2:	4b2a      	ldr	r3, [pc, #168]	@ (800545c <quaternionToYaw+0xb0>)
 80053b4:	ed93 7a01 	vldr	s14, [r3, #4]
 80053b8:	4b28      	ldr	r3, [pc, #160]	@ (800545c <quaternionToYaw+0xb0>)
 80053ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80053be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053c2:	4b26      	ldr	r3, [pc, #152]	@ (800545c <quaternionToYaw+0xb0>)
 80053c4:	edd3 6a00 	vldr	s13, [r3]
 80053c8:	4b24      	ldr	r3, [pc, #144]	@ (800545c <quaternionToYaw+0xb0>)
 80053ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80053ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d6:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80053da:	4b20      	ldr	r3, [pc, #128]	@ (800545c <quaternionToYaw+0xb0>)
 80053dc:	ed93 7a00 	vldr	s14, [r3]
 80053e0:	4b1e      	ldr	r3, [pc, #120]	@ (800545c <quaternionToYaw+0xb0>)
 80053e2:	edd3 7a00 	vldr	s15, [r3]
 80053e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053ea:	4b1c      	ldr	r3, [pc, #112]	@ (800545c <quaternionToYaw+0xb0>)
 80053ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80053f0:	4b1a      	ldr	r3, [pc, #104]	@ (800545c <quaternionToYaw+0xb0>)
 80053f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80053f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80053fe:	4b17      	ldr	r3, [pc, #92]	@ (800545c <quaternionToYaw+0xb0>)
 8005400:	edd3 6a02 	vldr	s13, [r3, #8]
 8005404:	4b15      	ldr	r3, [pc, #84]	@ (800545c <quaternionToYaw+0xb0>)
 8005406:	edd3 7a02 	vldr	s15, [r3, #8]
 800540a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800540e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005412:	4b12      	ldr	r3, [pc, #72]	@ (800545c <quaternionToYaw+0xb0>)
 8005414:	edd3 6a03 	vldr	s13, [r3, #12]
 8005418:	4b10      	ldr	r3, [pc, #64]	@ (800545c <quaternionToYaw+0xb0>)
 800541a:	edd3 7a03 	vldr	s15, [r3, #12]
 800541e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005422:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005426:	eef0 0a67 	vmov.f32	s1, s15
 800542a:	eeb0 0a46 	vmov.f32	s0, s12
 800542e:	f00b fa3f 	bl	80108b0 <atan2f>
 8005432:	eef0 7a40 	vmov.f32	s15, s0
 8005436:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8005460 <quaternionToYaw+0xb4>
 800543a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800543e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005464 <quaternionToYaw+0xb8>
 8005442:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005446:	edc7 7a01 	vstr	s15, [r7, #4]
return yaw;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	ee07 3a90 	vmov	s15, r3
}
 8005450:	eeb0 0a67 	vmov.f32	s0, s15
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000014 	.word	0x20000014
 8005460:	43340000 	.word	0x43340000
 8005464:	40490fd0 	.word	0x40490fd0

08005468 <quaternionToPitch>:

float quaternionToPitch(){
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
float pitch = -asinf(2.0f*(q[1]*q[3] - q[0]*q[2])) * 180.0f / 3.14159f;
 800546e:	4b17      	ldr	r3, [pc, #92]	@ (80054cc <quaternionToPitch+0x64>)
 8005470:	ed93 7a01 	vldr	s14, [r3, #4]
 8005474:	4b15      	ldr	r3, [pc, #84]	@ (80054cc <quaternionToPitch+0x64>)
 8005476:	edd3 7a03 	vldr	s15, [r3, #12]
 800547a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800547e:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <quaternionToPitch+0x64>)
 8005480:	edd3 6a00 	vldr	s13, [r3]
 8005484:	4b11      	ldr	r3, [pc, #68]	@ (80054cc <quaternionToPitch+0x64>)
 8005486:	edd3 7a02 	vldr	s15, [r3, #8]
 800548a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800548e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005492:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005496:	eeb0 0a67 	vmov.f32	s0, s15
 800549a:	f00b f9dd 	bl	8010858 <asinf>
 800549e:	eef0 7a40 	vmov.f32	s15, s0
 80054a2:	eef1 7a67 	vneg.f32	s15, s15
 80054a6:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80054d0 <quaternionToPitch+0x68>
 80054aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054ae:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80054d4 <quaternionToPitch+0x6c>
 80054b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054b6:	edc7 7a01 	vstr	s15, [r7, #4]
return pitch;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	ee07 3a90 	vmov	s15, r3
}
 80054c0:	eeb0 0a67 	vmov.f32	s0, s15
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000014 	.word	0x20000014
 80054d0:	43340000 	.word	0x43340000
 80054d4:	40490fd0 	.word	0x40490fd0

080054d8 <quaternionToRoll>:

float quaternionToRoll(){
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
float roll = atan2f(2.0f*(q[0]*q[1] + q[2]*q[3]), q[0]*q[0] - q[1]*q[1] - q[2]*q[2] + q[3]*q[3]) * 180.0f / 3.14159f;
 80054de:	4b2a      	ldr	r3, [pc, #168]	@ (8005588 <quaternionToRoll+0xb0>)
 80054e0:	ed93 7a00 	vldr	s14, [r3]
 80054e4:	4b28      	ldr	r3, [pc, #160]	@ (8005588 <quaternionToRoll+0xb0>)
 80054e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80054ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80054ee:	4b26      	ldr	r3, [pc, #152]	@ (8005588 <quaternionToRoll+0xb0>)
 80054f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80054f4:	4b24      	ldr	r3, [pc, #144]	@ (8005588 <quaternionToRoll+0xb0>)
 80054f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80054fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005502:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8005506:	4b20      	ldr	r3, [pc, #128]	@ (8005588 <quaternionToRoll+0xb0>)
 8005508:	ed93 7a00 	vldr	s14, [r3]
 800550c:	4b1e      	ldr	r3, [pc, #120]	@ (8005588 <quaternionToRoll+0xb0>)
 800550e:	edd3 7a00 	vldr	s15, [r3]
 8005512:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005516:	4b1c      	ldr	r3, [pc, #112]	@ (8005588 <quaternionToRoll+0xb0>)
 8005518:	edd3 6a01 	vldr	s13, [r3, #4]
 800551c:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <quaternionToRoll+0xb0>)
 800551e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005526:	ee37 7a67 	vsub.f32	s14, s14, s15
 800552a:	4b17      	ldr	r3, [pc, #92]	@ (8005588 <quaternionToRoll+0xb0>)
 800552c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005530:	4b15      	ldr	r3, [pc, #84]	@ (8005588 <quaternionToRoll+0xb0>)
 8005532:	edd3 7a02 	vldr	s15, [r3, #8]
 8005536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800553a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800553e:	4b12      	ldr	r3, [pc, #72]	@ (8005588 <quaternionToRoll+0xb0>)
 8005540:	edd3 6a03 	vldr	s13, [r3, #12]
 8005544:	4b10      	ldr	r3, [pc, #64]	@ (8005588 <quaternionToRoll+0xb0>)
 8005546:	edd3 7a03 	vldr	s15, [r3, #12]
 800554a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800554e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005552:	eef0 0a67 	vmov.f32	s1, s15
 8005556:	eeb0 0a46 	vmov.f32	s0, s12
 800555a:	f00b f9a9 	bl	80108b0 <atan2f>
 800555e:	eef0 7a40 	vmov.f32	s15, s0
 8005562:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800558c <quaternionToRoll+0xb4>
 8005566:	ee27 7a87 	vmul.f32	s14, s15, s14
 800556a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005590 <quaternionToRoll+0xb8>
 800556e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005572:	edc7 7a01 	vstr	s15, [r7, #4]
return roll;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	ee07 3a90 	vmov	s15, r3
}
 800557c:	eeb0 0a67 	vmov.f32	s0, s15
 8005580:	3708      	adds	r7, #8
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000014 	.word	0x20000014
 800558c:	43340000 	.word	0x43340000
 8005590:	40490fd0 	.word	0x40490fd0

08005594 <getInitialQuaternion>:

void getInitialQuaternion() {
 8005594:	b5b0      	push	{r4, r5, r7, lr}
 8005596:	b092      	sub	sp, #72	@ 0x48
 8005598:	af00      	add	r7, sp, #0

    double norm = sqrt(BMI_sensor.datas.acc_z * BMI_sensor.datas.acc_z + BMI_sensor.datas.acc_x * BMI_sensor.datas.acc_x + BMI_sensor.datas.acc_y * BMI_sensor.datas.acc_y);
 800559a:	4b98      	ldr	r3, [pc, #608]	@ (80057fc <getInitialQuaternion+0x268>)
 800559c:	ed93 7a18 	vldr	s14, [r3, #96]	@ 0x60
 80055a0:	4b96      	ldr	r3, [pc, #600]	@ (80057fc <getInitialQuaternion+0x268>)
 80055a2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 80055a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80055aa:	4b94      	ldr	r3, [pc, #592]	@ (80057fc <getInitialQuaternion+0x268>)
 80055ac:	edd3 6a16 	vldr	s13, [r3, #88]	@ 0x58
 80055b0:	4b92      	ldr	r3, [pc, #584]	@ (80057fc <getInitialQuaternion+0x268>)
 80055b2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80055b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055be:	4b8f      	ldr	r3, [pc, #572]	@ (80057fc <getInitialQuaternion+0x268>)
 80055c0:	edd3 6a17 	vldr	s13, [r3, #92]	@ 0x5c
 80055c4:	4b8d      	ldr	r3, [pc, #564]	@ (80057fc <getInitialQuaternion+0x268>)
 80055c6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 80055ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80055ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055d2:	ee17 0a90 	vmov	r0, s15
 80055d6:	f7fa ffd7 	bl	8000588 <__aeabi_f2d>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	ec43 2b10 	vmov	d0, r2, r3
 80055e2:	f00b f8e1 	bl	80107a8 <sqrt>
 80055e6:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40
    double accel_temp[3];

    accel_temp[0] = (double)BMI_sensor.datas.acc_y;
 80055ea:	4b84      	ldr	r3, [pc, #528]	@ (80057fc <getInitialQuaternion+0x268>)
 80055ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fa ffca 	bl	8000588 <__aeabi_f2d>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] = (double)-BMI_sensor.datas.acc_z;
 80055fc:	4b7f      	ldr	r3, [pc, #508]	@ (80057fc <getInitialQuaternion+0x268>)
 80055fe:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8005602:	eef1 7a67 	vneg.f32	s15, s15
 8005606:	ee17 3a90 	vmov	r3, s15
 800560a:	4618      	mov	r0, r3
 800560c:	f7fa ffbc 	bl	8000588 <__aeabi_f2d>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] = (double)BMI_sensor.datas.acc_x;
 8005618:	4b78      	ldr	r3, [pc, #480]	@ (80057fc <getInitialQuaternion+0x268>)
 800561a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800561c:	4618      	mov	r0, r3
 800561e:	f7fa ffb3 	bl	8000588 <__aeabi_f2d>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    accel_temp[0] /= norm;
 800562a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800562e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005632:	f7fb f92b 	bl	800088c <__aeabi_ddiv>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    accel_temp[1] /= norm;
 800563e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005642:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005646:	f7fb f921 	bl	800088c <__aeabi_ddiv>
 800564a:	4602      	mov	r2, r0
 800564c:	460b      	mov	r3, r1
 800564e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    accel_temp[2] /= norm;
 8005652:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8005656:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800565a:	f7fb f917 	bl	800088c <__aeabi_ddiv>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    double q_temp[4];

    q_temp[0] = sqrt(1.0 -accel_temp[1]) * 0.5;
 8005666:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800566a:	f04f 0000 	mov.w	r0, #0
 800566e:	4964      	ldr	r1, [pc, #400]	@ (8005800 <getInitialQuaternion+0x26c>)
 8005670:	f7fa fe2a 	bl	80002c8 <__aeabi_dsub>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	ec43 2b17 	vmov	d7, r2, r3
 800567c:	eeb0 0a47 	vmov.f32	s0, s14
 8005680:	eef0 0a67 	vmov.f32	s1, s15
 8005684:	f00b f890 	bl	80107a8 <sqrt>
 8005688:	ec51 0b10 	vmov	r0, r1, d0
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	4b5c      	ldr	r3, [pc, #368]	@ (8005804 <getInitialQuaternion+0x270>)
 8005692:	f7fa ffd1 	bl	8000638 <__aeabi_dmul>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	e9c7 2300 	strd	r2, r3, [r7]
    double k = 0.5 / q_temp[0];
 800569e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	4957      	ldr	r1, [pc, #348]	@ (8005804 <getInitialQuaternion+0x270>)
 80056a8:	f7fb f8f0 	bl	800088c <__aeabi_ddiv>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    q_temp[1] = accel_temp[0] * k * 0.5;
 80056b4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80056b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056bc:	f7fa ffbc 	bl	8000638 <__aeabi_dmul>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4610      	mov	r0, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	4b4d      	ldr	r3, [pc, #308]	@ (8005804 <getInitialQuaternion+0x270>)
 80056ce:	f7fa ffb3 	bl	8000638 <__aeabi_dmul>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	e9c7 2302 	strd	r2, r3, [r7, #8]
    q_temp[2] = accel_temp[2] * k * 0.5;
 80056da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80056de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80056e2:	f7fa ffa9 	bl	8000638 <__aeabi_dmul>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	4b44      	ldr	r3, [pc, #272]	@ (8005804 <getInitialQuaternion+0x270>)
 80056f4:	f7fa ffa0 	bl	8000638 <__aeabi_dmul>
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    q_temp[3] = 0.0;
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9c7 2306 	strd	r2, r3, [r7, #24]

    norm = sqrt(q_temp[0] * q_temp[0] + q_temp[1] * q_temp[1] + q_temp[2] * q_temp[2] + q_temp[3] * q_temp[3]);
 800570c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005714:	f7fa ff90 	bl	8000638 <__aeabi_dmul>
 8005718:	4602      	mov	r2, r0
 800571a:	460b      	mov	r3, r1
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005728:	f7fa ff86 	bl	8000638 <__aeabi_dmul>
 800572c:	4602      	mov	r2, r0
 800572e:	460b      	mov	r3, r1
 8005730:	4620      	mov	r0, r4
 8005732:	4629      	mov	r1, r5
 8005734:	f7fa fdca 	bl	80002cc <__adddf3>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4614      	mov	r4, r2
 800573e:	461d      	mov	r5, r3
 8005740:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005744:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005748:	f7fa ff76 	bl	8000638 <__aeabi_dmul>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4620      	mov	r0, r4
 8005752:	4629      	mov	r1, r5
 8005754:	f7fa fdba 	bl	80002cc <__adddf3>
 8005758:	4602      	mov	r2, r0
 800575a:	460b      	mov	r3, r1
 800575c:	4614      	mov	r4, r2
 800575e:	461d      	mov	r5, r3
 8005760:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005768:	f7fa ff66 	bl	8000638 <__aeabi_dmul>
 800576c:	4602      	mov	r2, r0
 800576e:	460b      	mov	r3, r1
 8005770:	4620      	mov	r0, r4
 8005772:	4629      	mov	r1, r5
 8005774:	f7fa fdaa 	bl	80002cc <__adddf3>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	ec43 2b17 	vmov	d7, r2, r3
 8005780:	eeb0 0a47 	vmov.f32	s0, s14
 8005784:	eef0 0a67 	vmov.f32	s1, s15
 8005788:	f00b f80e 	bl	80107a8 <sqrt>
 800578c:	ed87 0b10 	vstr	d0, [r7, #64]	@ 0x40

    q[0] = q_temp[0] / norm;
 8005790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005794:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005798:	f7fb f878 	bl	800088c <__aeabi_ddiv>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	f7fb fa40 	bl	8000c28 <__aeabi_d2f>
 80057a8:	4603      	mov	r3, r0
 80057aa:	4a17      	ldr	r2, [pc, #92]	@ (8005808 <getInitialQuaternion+0x274>)
 80057ac:	6013      	str	r3, [r2, #0]
    q[1] = q_temp[1] / norm;
 80057ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057b6:	f7fb f869 	bl	800088c <__aeabi_ddiv>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4610      	mov	r0, r2
 80057c0:	4619      	mov	r1, r3
 80057c2:	f7fb fa31 	bl	8000c28 <__aeabi_d2f>
 80057c6:	4603      	mov	r3, r0
 80057c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005808 <getInitialQuaternion+0x274>)
 80057ca:	6053      	str	r3, [r2, #4]
    q[2] = q_temp[2] / norm;
 80057cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057d4:	f7fb f85a 	bl	800088c <__aeabi_ddiv>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4610      	mov	r0, r2
 80057de:	4619      	mov	r1, r3
 80057e0:	f7fb fa22 	bl	8000c28 <__aeabi_d2f>
 80057e4:	4603      	mov	r3, r0
 80057e6:	4a08      	ldr	r2, [pc, #32]	@ (8005808 <getInitialQuaternion+0x274>)
 80057e8:	6093      	str	r3, [r2, #8]
    q[3] = 0.0f;
 80057ea:	4b07      	ldr	r3, [pc, #28]	@ (8005808 <getInitialQuaternion+0x274>)
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	60da      	str	r2, [r3, #12]
}
 80057f2:	bf00      	nop
 80057f4:	3748      	adds	r7, #72	@ 0x48
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bdb0      	pop	{r4, r5, r7, pc}
 80057fa:	bf00      	nop
 80057fc:	20001424 	.word	0x20001424
 8005800:	3ff00000 	.word	0x3ff00000
 8005804:	3fe00000 	.word	0x3fe00000
 8005808:	20000014 	.word	0x20000014

0800580c <invSqrt>:

float invSqrt(float x) {
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 8005816:	edd7 7a01 	vldr	s15, [r7, #4]
 800581a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800581e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005822:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800582a:	f107 0310 	add.w	r3, r7, #16
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	105a      	asrs	r2, r3, #1
 8005836:	4b12      	ldr	r3, [pc, #72]	@ (8005880 <invSqrt+0x74>)
 8005838:	1a9b      	subs	r3, r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800583c:	f107 030c 	add.w	r3, r7, #12
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8005844:	ed97 7a04 	vldr	s14, [r7, #16]
 8005848:	edd7 7a05 	vldr	s15, [r7, #20]
 800584c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005850:	edd7 7a04 	vldr	s15, [r7, #16]
 8005854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005858:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800585c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005860:	edd7 7a04 	vldr	s15, [r7, #16]
 8005864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005868:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	ee07 3a90 	vmov	s15, r3
}
 8005872:	eeb0 0a67 	vmov.f32	s0, s15
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr
 8005880:	5f3759df 	.word	0x5f3759df

08005884 <sensor_fusion_init>:

/**
 * @brief Initialize the sensor fusion module
 */
void sensor_fusion_init(BME_280_t* BME)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
    KalmanFilter_Init(&kalman);
 800588c:	481b      	ldr	r0, [pc, #108]	@ (80058fc <sensor_fusion_init+0x78>)
 800588e:	f7fd fa2b 	bl	8002ce8 <KalmanFilter_Init>

    // Sensörlerinize göre gürültü değerlerini ayarlayın
    kalman.process_noise = 0.1f;         // Model gürültüsü
 8005892:	4b1a      	ldr	r3, [pc, #104]	@ (80058fc <sensor_fusion_init+0x78>)
 8005894:	4a1a      	ldr	r2, [pc, #104]	@ (8005900 <sensor_fusion_init+0x7c>)
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30
    kalman.measurement_noise_alt = 0.005f;  // BME280 yükseklik gürültüsü
 8005898:	4b18      	ldr	r3, [pc, #96]	@ (80058fc <sensor_fusion_init+0x78>)
 800589a:	4a1a      	ldr	r2, [pc, #104]	@ (8005904 <sensor_fusion_init+0x80>)
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34
    kalman.measurement_noise_acc = 5.0f;  // BMI088 ivme gürültüsü
 800589e:	4b17      	ldr	r3, [pc, #92]	@ (80058fc <sensor_fusion_init+0x78>)
 80058a0:	4a19      	ldr	r2, [pc, #100]	@ (8005908 <sensor_fusion_init+0x84>)
 80058a2:	639a      	str	r2, [r3, #56]	@ 0x38


    // İvme arıza tespit değişkenlerini sıfırla
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e009      	b.n	80058be <sensor_fusion_init+0x3a>
        accel_buffer[i] = 0.0f;
 80058aa:	4a18      	ldr	r2, [pc, #96]	@ (800590c <sensor_fusion_init+0x88>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < ACCEL_BUFFER_SIZE; i++) {
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3301      	adds	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b04      	cmp	r3, #4
 80058c2:	ddf2      	ble.n	80058aa <sensor_fusion_init+0x26>
    }
    accel_buffer_index = 0;
 80058c4:	4b12      	ldr	r3, [pc, #72]	@ (8005910 <sensor_fusion_init+0x8c>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
    accel_buffer_full = 0;
 80058ca:	4b12      	ldr	r3, [pc, #72]	@ (8005914 <sensor_fusion_init+0x90>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	701a      	strb	r2, [r3, #0]
    accel_failure_detected = 0;
 80058d0:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <sensor_fusion_init+0x94>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	701a      	strb	r2, [r3, #0]

    initialized = 1;
 80058d6:	4b11      	ldr	r3, [pc, #68]	@ (800591c <sensor_fusion_init+0x98>)
 80058d8:	2201      	movs	r2, #1
 80058da:	701a      	strb	r2, [r3, #0]
    reference_altitude = BME->base_altitude;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005920 <sensor_fusion_init+0x9c>)
 80058e2:	6013      	str	r3, [r2, #0]
    last_kalman_update_time = HAL_GetTick();
 80058e4:	f000 fc94 	bl	8006210 <HAL_GetTick>
 80058e8:	4603      	mov	r3, r0
 80058ea:	4a0e      	ldr	r2, [pc, #56]	@ (8005924 <sensor_fusion_init+0xa0>)
 80058ec:	6013      	str	r3, [r2, #0]
    flight_start_time = 0;
 80058ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005928 <sensor_fusion_init+0xa4>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	601a      	str	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	20001618 	.word	0x20001618
 8005900:	3dcccccd 	.word	0x3dcccccd
 8005904:	3ba3d70a 	.word	0x3ba3d70a
 8005908:	40a00000 	.word	0x40a00000
 800590c:	20001674 	.word	0x20001674
 8005910:	20001688 	.word	0x20001688
 8005914:	20001689 	.word	0x20001689
 8005918:	2000168a 	.word	0x2000168a
 800591c:	20001664 	.word	0x20001664
 8005920:	20001668 	.word	0x20001668
 8005924:	2000166c 	.word	0x2000166c
 8005928:	20001670 	.word	0x20001670

0800592c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
 8005936:	4b10      	ldr	r3, [pc, #64]	@ (8005978 <HAL_MspInit+0x4c>)
 8005938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800593a:	4a0f      	ldr	r2, [pc, #60]	@ (8005978 <HAL_MspInit+0x4c>)
 800593c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005940:	6453      	str	r3, [r2, #68]	@ 0x44
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <HAL_MspInit+0x4c>)
 8005944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800594a:	607b      	str	r3, [r7, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4b09      	ldr	r3, [pc, #36]	@ (8005978 <HAL_MspInit+0x4c>)
 8005954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005956:	4a08      	ldr	r2, [pc, #32]	@ (8005978 <HAL_MspInit+0x4c>)
 8005958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800595c:	6413      	str	r3, [r2, #64]	@ 0x40
 800595e:	4b06      	ldr	r3, [pc, #24]	@ (8005978 <HAL_MspInit+0x4c>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40023800 	.word	0x40023800

0800597c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08a      	sub	sp, #40	@ 0x28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005984:	f107 0314 	add.w	r3, r7, #20
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
 800598c:	605a      	str	r2, [r3, #4]
 800598e:	609a      	str	r2, [r3, #8]
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a33      	ldr	r2, [pc, #204]	@ (8005a68 <HAL_ADC_MspInit+0xec>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d15f      	bne.n	8005a5e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800599e:	2300      	movs	r3, #0
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	4b32      	ldr	r3, [pc, #200]	@ (8005a6c <HAL_ADC_MspInit+0xf0>)
 80059a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a6:	4a31      	ldr	r2, [pc, #196]	@ (8005a6c <HAL_ADC_MspInit+0xf0>)
 80059a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80059ae:	4b2f      	ldr	r3, [pc, #188]	@ (8005a6c <HAL_ADC_MspInit+0xf0>)
 80059b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059ba:	2300      	movs	r3, #0
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	4b2b      	ldr	r3, [pc, #172]	@ (8005a6c <HAL_ADC_MspInit+0xf0>)
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c2:	4a2a      	ldr	r2, [pc, #168]	@ (8005a6c <HAL_ADC_MspInit+0xf0>)
 80059c4:	f043 0302 	orr.w	r3, r3, #2
 80059c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80059ca:	4b28      	ldr	r3, [pc, #160]	@ (8005a6c <HAL_ADC_MspInit+0xf0>)
 80059cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ce:	f003 0302 	and.w	r3, r3, #2
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80059d6:	2302      	movs	r3, #2
 80059d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059da:	2303      	movs	r3, #3
 80059dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e2:	f107 0314 	add.w	r3, r7, #20
 80059e6:	4619      	mov	r1, r3
 80059e8:	4821      	ldr	r0, [pc, #132]	@ (8005a70 <HAL_ADC_MspInit+0xf4>)
 80059ea:	f001 fec7 	bl	800777c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80059ee:	4b21      	ldr	r3, [pc, #132]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 80059f0:	4a21      	ldr	r2, [pc, #132]	@ (8005a78 <HAL_ADC_MspInit+0xfc>)
 80059f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80059f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80059fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a00:	4b1c      	ldr	r3, [pc, #112]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005a06:	4b1b      	ldr	r3, [pc, #108]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005a0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005a0e:	4b19      	ldr	r3, [pc, #100]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a10:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005a16:	4b17      	ldr	r3, [pc, #92]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005a1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005a1e:	4b15      	ldr	r3, [pc, #84]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005a26:	4b13      	ldr	r3, [pc, #76]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a2c:	4b11      	ldr	r3, [pc, #68]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005a32:	4810      	ldr	r0, [pc, #64]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a34:	f001 faa0 	bl	8006f78 <HAL_DMA_Init>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8005a3e:	f7fe f9ff 	bl	8003e40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a0b      	ldr	r2, [pc, #44]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a46:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a48:	4a0a      	ldr	r2, [pc, #40]	@ (8005a74 <HAL_ADC_MspInit+0xf8>)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8005a4e:	2200      	movs	r2, #0
 8005a50:	2100      	movs	r1, #0
 8005a52:	2012      	movs	r0, #18
 8005a54:	f001 fa4b 	bl	8006eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8005a58:	2012      	movs	r0, #18
 8005a5a:	f001 fa64 	bl	8006f26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005a5e:	bf00      	nop
 8005a60:	3728      	adds	r7, #40	@ 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40012000 	.word	0x40012000
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	40020400 	.word	0x40020400
 8005a74:	20001134 	.word	0x20001134
 8005a78:	40026410 	.word	0x40026410

08005a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08c      	sub	sp, #48	@ 0x30
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a84:	f107 031c 	add.w	r3, r7, #28
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	605a      	str	r2, [r3, #4]
 8005a8e:	609a      	str	r2, [r3, #8]
 8005a90:	60da      	str	r2, [r3, #12]
 8005a92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a42      	ldr	r2, [pc, #264]	@ (8005ba4 <HAL_I2C_MspInit+0x128>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d12d      	bne.n	8005afa <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	4b41      	ldr	r3, [pc, #260]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa6:	4a40      	ldr	r2, [pc, #256]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005aa8:	f043 0302 	orr.w	r3, r3, #2
 8005aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8005aae:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005aba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005abe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ac0:	2312      	movs	r3, #18
 8005ac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005acc:	2304      	movs	r3, #4
 8005ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ad0:	f107 031c 	add.w	r3, r7, #28
 8005ad4:	4619      	mov	r1, r3
 8005ad6:	4835      	ldr	r0, [pc, #212]	@ (8005bac <HAL_I2C_MspInit+0x130>)
 8005ad8:	f001 fe50 	bl	800777c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005adc:	2300      	movs	r3, #0
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	4b31      	ldr	r3, [pc, #196]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae4:	4a30      	ldr	r2, [pc, #192]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005ae6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8005aec:	4b2e      	ldr	r3, [pc, #184]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005af0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005af8:	e050      	b.n	8005b9c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb0 <HAL_I2C_MspInit+0x134>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d14b      	bne.n	8005b9c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b04:	2300      	movs	r3, #0
 8005b06:	613b      	str	r3, [r7, #16]
 8005b08:	4b27      	ldr	r3, [pc, #156]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0c:	4a26      	ldr	r2, [pc, #152]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b0e:	f043 0304 	orr.w	r3, r3, #4
 8005b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b14:	4b24      	ldr	r3, [pc, #144]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	613b      	str	r3, [r7, #16]
 8005b1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b20:	2300      	movs	r3, #0
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	4b20      	ldr	r3, [pc, #128]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b30:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005b3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b42:	2312      	movs	r3, #18
 8005b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005b4e:	2304      	movs	r3, #4
 8005b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b52:	f107 031c 	add.w	r3, r7, #28
 8005b56:	4619      	mov	r1, r3
 8005b58:	4816      	ldr	r0, [pc, #88]	@ (8005bb4 <HAL_I2C_MspInit+0x138>)
 8005b5a:	f001 fe0f 	bl	800777c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b64:	2312      	movs	r3, #18
 8005b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005b70:	2304      	movs	r3, #4
 8005b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b74:	f107 031c 	add.w	r3, r7, #28
 8005b78:	4619      	mov	r1, r3
 8005b7a:	480f      	ldr	r0, [pc, #60]	@ (8005bb8 <HAL_I2C_MspInit+0x13c>)
 8005b7c:	f001 fdfe 	bl	800777c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005b80:	2300      	movs	r3, #0
 8005b82:	60bb      	str	r3, [r7, #8]
 8005b84:	4b08      	ldr	r3, [pc, #32]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b88:	4a07      	ldr	r2, [pc, #28]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005b8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <HAL_I2C_MspInit+0x12c>)
 8005b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
}
 8005b9c:	bf00      	nop
 8005b9e:	3730      	adds	r7, #48	@ 0x30
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	40005400 	.word	0x40005400
 8005ba8:	40023800 	.word	0x40023800
 8005bac:	40020400 	.word	0x40020400
 8005bb0:	40005c00 	.word	0x40005c00
 8005bb4:	40020800 	.word	0x40020800
 8005bb8:	40020000 	.word	0x40020000

08005bbc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a16      	ldr	r2, [pc, #88]	@ (8005c24 <HAL_I2C_MspDeInit+0x68>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d110      	bne.n	8005bf0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8005bce:	4b16      	ldr	r3, [pc, #88]	@ (8005c28 <HAL_I2C_MspDeInit+0x6c>)
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	4a15      	ldr	r2, [pc, #84]	@ (8005c28 <HAL_I2C_MspDeInit+0x6c>)
 8005bd4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bd8:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8005bda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005bde:	4813      	ldr	r0, [pc, #76]	@ (8005c2c <HAL_I2C_MspDeInit+0x70>)
 8005be0:	f001 ff60 	bl	8007aa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8005be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005be8:	4810      	ldr	r0, [pc, #64]	@ (8005c2c <HAL_I2C_MspDeInit+0x70>)
 8005bea:	f001 ff5b 	bl	8007aa4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8005bee:	e014      	b.n	8005c1a <HAL_I2C_MspDeInit+0x5e>
  else if(hi2c->Instance==I2C3)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8005c30 <HAL_I2C_MspDeInit+0x74>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d10f      	bne.n	8005c1a <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005c28 <HAL_I2C_MspDeInit+0x6c>)
 8005bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8005c28 <HAL_I2C_MspDeInit+0x6c>)
 8005c00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005c04:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8005c06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c0a:	480a      	ldr	r0, [pc, #40]	@ (8005c34 <HAL_I2C_MspDeInit+0x78>)
 8005c0c:	f001 ff4a 	bl	8007aa4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8005c10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c14:	4808      	ldr	r0, [pc, #32]	@ (8005c38 <HAL_I2C_MspDeInit+0x7c>)
 8005c16:	f001 ff45 	bl	8007aa4 <HAL_GPIO_DeInit>
}
 8005c1a:	bf00      	nop
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	40005400 	.word	0x40005400
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	40020400 	.word	0x40020400
 8005c30:	40005c00 	.word	0x40005c00
 8005c34:	40020800 	.word	0x40020800
 8005c38:	40020000 	.word	0x40020000

08005c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4c:	d115      	bne.n	8005c7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	4b0c      	ldr	r3, [pc, #48]	@ (8005c84 <HAL_TIM_Base_MspInit+0x48>)
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	4a0b      	ldr	r2, [pc, #44]	@ (8005c84 <HAL_TIM_Base_MspInit+0x48>)
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005c5e:	4b09      	ldr	r3, [pc, #36]	@ (8005c84 <HAL_TIM_Base_MspInit+0x48>)
 8005c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	60fb      	str	r3, [r7, #12]
 8005c68:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	201c      	movs	r0, #28
 8005c70:	f001 f93d 	bl	8006eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c74:	201c      	movs	r0, #28
 8005c76:	f001 f956 	bl	8006f26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8005c7a:	bf00      	nop
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	40023800 	.word	0x40023800

08005c88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08e      	sub	sp, #56	@ 0x38
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
 8005c98:	605a      	str	r2, [r3, #4]
 8005c9a:	609a      	str	r2, [r3, #8]
 8005c9c:	60da      	str	r2, [r3, #12]
 8005c9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a66      	ldr	r2, [pc, #408]	@ (8005e40 <HAL_UART_MspInit+0x1b8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d12c      	bne.n	8005d04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005caa:	2300      	movs	r3, #0
 8005cac:	623b      	str	r3, [r7, #32]
 8005cae:	4b65      	ldr	r3, [pc, #404]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb2:	4a64      	ldr	r2, [pc, #400]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005cb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cba:	4b62      	ldr	r3, [pc, #392]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cc2:	623b      	str	r3, [r7, #32]
 8005cc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61fb      	str	r3, [r7, #28]
 8005cca:	4b5e      	ldr	r3, [pc, #376]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cce:	4a5d      	ldr	r2, [pc, #372]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8005cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4852      	ldr	r0, [pc, #328]	@ (8005e48 <HAL_UART_MspInit+0x1c0>)
 8005cfe:	f001 fd3d 	bl	800777c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005d02:	e099      	b.n	8005e38 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a50      	ldr	r2, [pc, #320]	@ (8005e4c <HAL_UART_MspInit+0x1c4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d12c      	bne.n	8005d68 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	4b4c      	ldr	r3, [pc, #304]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	4a4b      	ldr	r2, [pc, #300]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d1e:	4b49      	ldr	r3, [pc, #292]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]
 8005d2e:	4b45      	ldr	r3, [pc, #276]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d32:	4a44      	ldr	r2, [pc, #272]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d3a:	4b42      	ldr	r3, [pc, #264]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005d46:	230c      	movs	r3, #12
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4a:	2302      	movs	r3, #2
 8005d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d52:	2303      	movs	r3, #3
 8005d54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d56:	2307      	movs	r3, #7
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d5e:	4619      	mov	r1, r3
 8005d60:	4839      	ldr	r0, [pc, #228]	@ (8005e48 <HAL_UART_MspInit+0x1c0>)
 8005d62:	f001 fd0b 	bl	800777c <HAL_GPIO_Init>
}
 8005d66:	e067      	b.n	8005e38 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART6)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a38      	ldr	r2, [pc, #224]	@ (8005e50 <HAL_UART_MspInit+0x1c8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d162      	bne.n	8005e38 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
 8005d76:	4b33      	ldr	r3, [pc, #204]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7a:	4a32      	ldr	r2, [pc, #200]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d7c:	f043 0320 	orr.w	r3, r3, #32
 8005d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8005d82:	4b30      	ldr	r3, [pc, #192]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d86:	f003 0320 	and.w	r3, r3, #32
 8005d8a:	613b      	str	r3, [r7, #16]
 8005d8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	4b2c      	ldr	r3, [pc, #176]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d96:	4a2b      	ldr	r2, [pc, #172]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005d98:	f043 0304 	orr.w	r3, r3, #4
 8005d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8005d9e:	4b29      	ldr	r3, [pc, #164]	@ (8005e44 <HAL_UART_MspInit+0x1bc>)
 8005da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005daa:	23c0      	movs	r3, #192	@ 0xc0
 8005dac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dae:	2302      	movs	r3, #2
 8005db0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db6:	2303      	movs	r3, #3
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005dba:	2308      	movs	r3, #8
 8005dbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4823      	ldr	r0, [pc, #140]	@ (8005e54 <HAL_UART_MspInit+0x1cc>)
 8005dc6:	f001 fcd9 	bl	800777c <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8005dca:	4b23      	ldr	r3, [pc, #140]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005dcc:	4a23      	ldr	r2, [pc, #140]	@ (8005e5c <HAL_UART_MspInit+0x1d4>)
 8005dce:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005dd0:	4b21      	ldr	r3, [pc, #132]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005dd2:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005dd6:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dde:	4b1e      	ldr	r3, [pc, #120]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005de4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005de6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005dea:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dec:	4b1a      	ldr	r3, [pc, #104]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005df2:	4b19      	ldr	r3, [pc, #100]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005df8:	4b17      	ldr	r3, [pc, #92]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005dfa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005dfe:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005e00:	4b15      	ldr	r3, [pc, #84]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005e06:	4b14      	ldr	r3, [pc, #80]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005e0c:	4812      	ldr	r0, [pc, #72]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005e0e:	f001 f8b3 	bl	8006f78 <HAL_DMA_Init>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <HAL_UART_MspInit+0x194>
      Error_Handler();
 8005e18:	f7fe f812 	bl	8003e40 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a0e      	ldr	r2, [pc, #56]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005e20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005e22:	4a0d      	ldr	r2, [pc, #52]	@ (8005e58 <HAL_UART_MspInit+0x1d0>)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	2047      	movs	r0, #71	@ 0x47
 8005e2e:	f001 f85e 	bl	8006eee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005e32:	2047      	movs	r0, #71	@ 0x47
 8005e34:	f001 f877 	bl	8006f26 <HAL_NVIC_EnableIRQ>
}
 8005e38:	bf00      	nop
 8005e3a:	3738      	adds	r7, #56	@ 0x38
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	40004c00 	.word	0x40004c00
 8005e44:	40023800 	.word	0x40023800
 8005e48:	40020000 	.word	0x40020000
 8005e4c:	40004400 	.word	0x40004400
 8005e50:	40011400 	.word	0x40011400
 8005e54:	40020800 	.word	0x40020800
 8005e58:	2000135c 	.word	0x2000135c
 8005e5c:	40026440 	.word	0x40026440

08005e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e60:	b480      	push	{r7}
 8005e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <NMI_Handler+0x4>

08005e68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e6c:	bf00      	nop
 8005e6e:	e7fd      	b.n	8005e6c <HardFault_Handler+0x4>

08005e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e74:	bf00      	nop
 8005e76:	e7fd      	b.n	8005e74 <MemManage_Handler+0x4>

08005e78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <BusFault_Handler+0x4>

08005e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e84:	bf00      	nop
 8005e86:	e7fd      	b.n	8005e84 <UsageFault_Handler+0x4>

08005e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e8c:	bf00      	nop
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr

08005e96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e96:	b480      	push	{r7}
 8005e98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e9a:	bf00      	nop
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005ea8:	bf00      	nop
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005eb6:	f000 f997 	bl	80061e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005eba:	bf00      	nop
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005ec2:	2008      	movs	r0, #8
 8005ec4:	f001 fefc 	bl	8007cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005ec8:	bf00      	nop
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8005ed0:	2010      	movs	r0, #16
 8005ed2:	f001 fef5 	bl	8007cc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005ed6:	bf00      	nop
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005ee0:	4802      	ldr	r0, [pc, #8]	@ (8005eec <ADC_IRQHandler+0x10>)
 8005ee2:	f000 fa08 	bl	80062f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005ee6:	bf00      	nop
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	200010ec 	.word	0x200010ec

08005ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005ef4:	4802      	ldr	r0, [pc, #8]	@ (8005f00 <TIM2_IRQHandler+0x10>)
 8005ef6:	f003 fdf7 	bl	8009ae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005efa:	bf00      	nop
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	2000123c 	.word	0x2000123c

08005f04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005f08:	4802      	ldr	r0, [pc, #8]	@ (8005f14 <DMA2_Stream0_IRQHandler+0x10>)
 8005f0a:	f001 f9cd 	bl	80072a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005f0e:	bf00      	nop
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20001134 	.word	0x20001134

08005f18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005f1c:	4802      	ldr	r0, [pc, #8]	@ (8005f28 <DMA2_Stream2_IRQHandler+0x10>)
 8005f1e:	f001 f9c3 	bl	80072a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005f22:	bf00      	nop
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	2000135c 	.word	0x2000135c

08005f2c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005f30:	4802      	ldr	r0, [pc, #8]	@ (8005f3c <USART6_IRQHandler+0x10>)
 8005f32:	f004 fb09 	bl	800a548 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005f36:	bf00      	nop
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20001314 	.word	0x20001314

08005f40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  return 1;
 8005f44:	2301      	movs	r3, #1
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <_kill>:

int _kill(int pid, int sig)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005f5a:	f006 fd03 	bl	800c964 <__errno>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2216      	movs	r2, #22
 8005f62:	601a      	str	r2, [r3, #0]
  return -1;
 8005f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <_exit>:

void _exit (int status)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005f78:	f04f 31ff 	mov.w	r1, #4294967295
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ffe7 	bl	8005f50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005f82:	bf00      	nop
 8005f84:	e7fd      	b.n	8005f82 <_exit+0x12>

08005f86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b086      	sub	sp, #24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	60b9      	str	r1, [r7, #8]
 8005f90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
 8005f96:	e00a      	b.n	8005fae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005f98:	f3af 8000 	nop.w
 8005f9c:	4601      	mov	r1, r0
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	60ba      	str	r2, [r7, #8]
 8005fa4:	b2ca      	uxtb	r2, r1
 8005fa6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	3301      	adds	r3, #1
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	dbf0      	blt.n	8005f98 <_read+0x12>
  }

  return len;
 8005fb6:	687b      	ldr	r3, [r7, #4]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3718      	adds	r7, #24
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fcc:	2300      	movs	r3, #0
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e009      	b.n	8005fe6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	60ba      	str	r2, [r7, #8]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	dbf1      	blt.n	8005fd2 <_write+0x12>
  }
  return len;
 8005fee:	687b      	ldr	r3, [r7, #4]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <_close>:

int _close(int file)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006020:	605a      	str	r2, [r3, #4]
  return 0;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	370c      	adds	r7, #12
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <_isatty>:

int _isatty(int file)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006038:	2301      	movs	r3, #1
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006068:	4a14      	ldr	r2, [pc, #80]	@ (80060bc <_sbrk+0x5c>)
 800606a:	4b15      	ldr	r3, [pc, #84]	@ (80060c0 <_sbrk+0x60>)
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006074:	4b13      	ldr	r3, [pc, #76]	@ (80060c4 <_sbrk+0x64>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800607c:	4b11      	ldr	r3, [pc, #68]	@ (80060c4 <_sbrk+0x64>)
 800607e:	4a12      	ldr	r2, [pc, #72]	@ (80060c8 <_sbrk+0x68>)
 8006080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006082:	4b10      	ldr	r3, [pc, #64]	@ (80060c4 <_sbrk+0x64>)
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4413      	add	r3, r2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	429a      	cmp	r2, r3
 800608e:	d207      	bcs.n	80060a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006090:	f006 fc68 	bl	800c964 <__errno>
 8006094:	4603      	mov	r3, r0
 8006096:	220c      	movs	r2, #12
 8006098:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800609a:	f04f 33ff 	mov.w	r3, #4294967295
 800609e:	e009      	b.n	80060b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80060a0:	4b08      	ldr	r3, [pc, #32]	@ (80060c4 <_sbrk+0x64>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80060a6:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <_sbrk+0x64>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4413      	add	r3, r2
 80060ae:	4a05      	ldr	r2, [pc, #20]	@ (80060c4 <_sbrk+0x64>)
 80060b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80060b2:	68fb      	ldr	r3, [r7, #12]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	20020000 	.word	0x20020000
 80060c0:	00000400 	.word	0x00000400
 80060c4:	2000168c 	.word	0x2000168c
 80060c8:	200017e0 	.word	0x200017e0

080060cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80060d0:	4b06      	ldr	r3, [pc, #24]	@ (80060ec <SystemInit+0x20>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d6:	4a05      	ldr	r2, [pc, #20]	@ (80060ec <SystemInit+0x20>)
 80060d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80060dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80060e0:	bf00      	nop
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	e000ed00 	.word	0xe000ed00

080060f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80060f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8006128 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80060f4:	f7ff ffea 	bl	80060cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80060f8:	480c      	ldr	r0, [pc, #48]	@ (800612c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80060fa:	490d      	ldr	r1, [pc, #52]	@ (8006130 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80060fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006134 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80060fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006100:	e002      	b.n	8006108 <LoopCopyDataInit>

08006102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006106:	3304      	adds	r3, #4

08006108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800610a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800610c:	d3f9      	bcc.n	8006102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800610e:	4a0a      	ldr	r2, [pc, #40]	@ (8006138 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006110:	4c0a      	ldr	r4, [pc, #40]	@ (800613c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006114:	e001      	b.n	800611a <LoopFillZerobss>

08006116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006118:	3204      	adds	r2, #4

0800611a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800611a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800611c:	d3fb      	bcc.n	8006116 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800611e:	f006 fc27 	bl	800c970 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006122:	f7fd f9f3 	bl	800350c <main>
  bx  lr    
 8006126:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006128:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800612c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006130:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8006134:	080125c8 	.word	0x080125c8
  ldr r2, =_sbss
 8006138:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800613c:	200017e0 	.word	0x200017e0

08006140 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006140:	e7fe      	b.n	8006140 <CAN1_RX0_IRQHandler>
	...

08006144 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006148:	4b0e      	ldr	r3, [pc, #56]	@ (8006184 <HAL_Init+0x40>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a0d      	ldr	r2, [pc, #52]	@ (8006184 <HAL_Init+0x40>)
 800614e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006152:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006154:	4b0b      	ldr	r3, [pc, #44]	@ (8006184 <HAL_Init+0x40>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a0a      	ldr	r2, [pc, #40]	@ (8006184 <HAL_Init+0x40>)
 800615a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800615e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006160:	4b08      	ldr	r3, [pc, #32]	@ (8006184 <HAL_Init+0x40>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a07      	ldr	r2, [pc, #28]	@ (8006184 <HAL_Init+0x40>)
 8006166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800616a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800616c:	2003      	movs	r0, #3
 800616e:	f000 feb3 	bl	8006ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006172:	200f      	movs	r0, #15
 8006174:	f000 f808 	bl	8006188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006178:	f7ff fbd8 	bl	800592c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40023c00 	.word	0x40023c00

08006188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006190:	4b12      	ldr	r3, [pc, #72]	@ (80061dc <HAL_InitTick+0x54>)
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	4b12      	ldr	r3, [pc, #72]	@ (80061e0 <HAL_InitTick+0x58>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	4619      	mov	r1, r3
 800619a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800619e:	fbb3 f3f1 	udiv	r3, r3, r1
 80061a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fed9 	bl	8006f5e <HAL_SYSTICK_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e00e      	b.n	80061d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b0f      	cmp	r3, #15
 80061ba:	d80a      	bhi.n	80061d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80061bc:	2200      	movs	r2, #0
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	f04f 30ff 	mov.w	r0, #4294967295
 80061c4:	f000 fe93 	bl	8006eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80061c8:	4a06      	ldr	r2, [pc, #24]	@ (80061e4 <HAL_InitTick+0x5c>)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	e000      	b.n	80061d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	2000002c 	.word	0x2000002c
 80061e0:	20000034 	.word	0x20000034
 80061e4:	20000030 	.word	0x20000030

080061e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061ec:	4b06      	ldr	r3, [pc, #24]	@ (8006208 <HAL_IncTick+0x20>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b06      	ldr	r3, [pc, #24]	@ (800620c <HAL_IncTick+0x24>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4413      	add	r3, r2
 80061f8:	4a04      	ldr	r2, [pc, #16]	@ (800620c <HAL_IncTick+0x24>)
 80061fa:	6013      	str	r3, [r2, #0]
}
 80061fc:	bf00      	nop
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	20000034 	.word	0x20000034
 800620c:	20001690 	.word	0x20001690

08006210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
  return uwTick;
 8006214:	4b03      	ldr	r3, [pc, #12]	@ (8006224 <HAL_GetTick+0x14>)
 8006216:	681b      	ldr	r3, [r3, #0]
}
 8006218:	4618      	mov	r0, r3
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr
 8006222:	bf00      	nop
 8006224:	20001690 	.word	0x20001690

08006228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006230:	f7ff ffee 	bl	8006210 <HAL_GetTick>
 8006234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d005      	beq.n	800624e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006242:	4b0a      	ldr	r3, [pc, #40]	@ (800626c <HAL_Delay+0x44>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	461a      	mov	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800624e:	bf00      	nop
 8006250:	f7ff ffde 	bl	8006210 <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	429a      	cmp	r2, r3
 800625e:	d8f7      	bhi.n	8006250 <HAL_Delay+0x28>
  {
  }
}
 8006260:	bf00      	nop
 8006262:	bf00      	nop
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	20000034 	.word	0x20000034

08006270 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006278:	2300      	movs	r3, #0
 800627a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e033      	b.n	80062ee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	2b00      	cmp	r3, #0
 800628c:	d109      	bne.n	80062a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f7ff fb74 	bl	800597c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d118      	bne.n	80062e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80062b6:	f023 0302 	bic.w	r3, r3, #2
 80062ba:	f043 0202 	orr.w	r2, r3, #2
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fb8c 	bl	80069e0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	f023 0303 	bic.w	r3, r3, #3
 80062d6:	f043 0201 	orr.w	r2, r3, #1
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80062de:	e001      	b.n	80062e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	617b      	str	r3, [r7, #20]
 8006302:	2300      	movs	r3, #0
 8006304:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	f003 0320 	and.w	r3, r3, #32
 8006324:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d049      	beq.n	80063c0 <HAL_ADC_IRQHandler+0xca>
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d046      	beq.n	80063c0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b00      	cmp	r3, #0
 800633c:	d105      	bne.n	800634a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006342:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d12b      	bne.n	80063b0 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800635c:	2b00      	cmp	r3, #0
 800635e:	d127      	bne.n	80063b0 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006366:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800636a:	2b00      	cmp	r3, #0
 800636c:	d006      	beq.n	800637c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006378:	2b00      	cmp	r3, #0
 800637a:	d119      	bne.n	80063b0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685a      	ldr	r2, [r3, #4]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0220 	bic.w	r2, r2, #32
 800638a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006390:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a8:	f043 0201 	orr.w	r2, r3, #1
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fd fd2f 	bl	8003e14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f06f 0212 	mvn.w	r2, #18
 80063be:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ce:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d057      	beq.n	8006486 <HAL_ADC_IRQHandler+0x190>
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d054      	beq.n	8006486 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d105      	bne.n	80063f4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d139      	bne.n	8006476 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006408:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800641a:	2b00      	cmp	r3, #0
 800641c:	d12b      	bne.n	8006476 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8006428:	2b00      	cmp	r3, #0
 800642a:	d124      	bne.n	8006476 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8006436:	2b00      	cmp	r3, #0
 8006438:	d11d      	bne.n	8006476 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800643e:	2b00      	cmp	r3, #0
 8006440:	d119      	bne.n	8006476 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006450:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006456:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006466:	2b00      	cmp	r3, #0
 8006468:	d105      	bne.n	8006476 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646e:	f043 0201 	orr.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f000 fc30 	bl	8006cdc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 020c 	mvn.w	r2, #12
 8006484:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006494:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d017      	beq.n	80064cc <HAL_ADC_IRQHandler+0x1d6>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d014      	beq.n	80064cc <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d10d      	bne.n	80064cc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f949 	bl	8006754 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f06f 0201 	mvn.w	r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80064da:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d015      	beq.n	800650e <HAL_ADC_IRQHandler+0x218>
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d012      	beq.n	800650e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ec:	f043 0202 	orr.w	r2, r3, #2
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0220 	mvn.w	r2, #32
 80064fc:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f932 	bl	8006768 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0220 	mvn.w	r2, #32
 800650c:	601a      	str	r2, [r3, #0]
  }
}
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	60f8      	str	r0, [r7, #12]
 8006520:	60b9      	str	r1, [r7, #8]
 8006522:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006532:	2b01      	cmp	r3, #1
 8006534:	d101      	bne.n	800653a <HAL_ADC_Start_DMA+0x22>
 8006536:	2302      	movs	r3, #2
 8006538:	e0eb      	b.n	8006712 <HAL_ADC_Start_DMA+0x1fa>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2201      	movs	r2, #1
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d018      	beq.n	8006582 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006560:	4b6e      	ldr	r3, [pc, #440]	@ (800671c <HAL_ADC_Start_DMA+0x204>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a6e      	ldr	r2, [pc, #440]	@ (8006720 <HAL_ADC_Start_DMA+0x208>)
 8006566:	fba2 2303 	umull	r2, r3, r2, r3
 800656a:	0c9a      	lsrs	r2, r3, #18
 800656c:	4613      	mov	r3, r2
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	4413      	add	r3, r2
 8006572:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8006574:	e002      	b.n	800657c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	3b01      	subs	r3, #1
 800657a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f9      	bne.n	8006576 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800658c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006590:	d107      	bne.n	80065a2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689a      	ldr	r2, [r3, #8]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80065a0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	f040 80a3 	bne.w	80066f8 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80065ba:	f023 0301 	bic.w	r3, r3, #1
 80065be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d007      	beq.n	80065e4 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80065dc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065f0:	d106      	bne.n	8006600 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f6:	f023 0206 	bic.w	r2, r3, #6
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80065fe:	e002      	b.n	8006606 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800660e:	4b45      	ldr	r3, [pc, #276]	@ (8006724 <HAL_ADC_Start_DMA+0x20c>)
 8006610:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006616:	4a44      	ldr	r2, [pc, #272]	@ (8006728 <HAL_ADC_Start_DMA+0x210>)
 8006618:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	4a43      	ldr	r2, [pc, #268]	@ (800672c <HAL_ADC_Start_DMA+0x214>)
 8006620:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	4a42      	ldr	r2, [pc, #264]	@ (8006730 <HAL_ADC_Start_DMA+0x218>)
 8006628:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8006632:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8006642:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689a      	ldr	r2, [r3, #8]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006652:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	334c      	adds	r3, #76	@ 0x4c
 800665e:	4619      	mov	r1, r3
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f000 fd36 	bl	80070d4 <HAL_DMA_Start_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 031f 	and.w	r3, r3, #31
 8006674:	2b00      	cmp	r3, #0
 8006676:	d12a      	bne.n	80066ce <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a2d      	ldr	r2, [pc, #180]	@ (8006734 <HAL_ADC_Start_DMA+0x21c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d015      	beq.n	80066ae <HAL_ADC_Start_DMA+0x196>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a2c      	ldr	r2, [pc, #176]	@ (8006738 <HAL_ADC_Start_DMA+0x220>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d105      	bne.n	8006698 <HAL_ADC_Start_DMA+0x180>
 800668c:	4b25      	ldr	r3, [pc, #148]	@ (8006724 <HAL_ADC_Start_DMA+0x20c>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a27      	ldr	r2, [pc, #156]	@ (800673c <HAL_ADC_Start_DMA+0x224>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d136      	bne.n	8006710 <HAL_ADC_Start_DMA+0x1f8>
 80066a2:	4b20      	ldr	r3, [pc, #128]	@ (8006724 <HAL_ADC_Start_DMA+0x20c>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f003 0310 	and.w	r3, r3, #16
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d130      	bne.n	8006710 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d129      	bne.n	8006710 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689a      	ldr	r2, [r3, #8]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80066ca:	609a      	str	r2, [r3, #8]
 80066cc:	e020      	b.n	8006710 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a18      	ldr	r2, [pc, #96]	@ (8006734 <HAL_ADC_Start_DMA+0x21c>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d11b      	bne.n	8006710 <HAL_ADC_Start_DMA+0x1f8>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d114      	bne.n	8006710 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	689a      	ldr	r2, [r3, #8]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80066f4:	609a      	str	r2, [r3, #8]
 80066f6:	e00b      	b.n	8006710 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066fc:	f043 0210 	orr.w	r2, r3, #16
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006708:	f043 0201 	orr.w	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8006710:	7ffb      	ldrb	r3, [r7, #31]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	2000002c 	.word	0x2000002c
 8006720:	431bde83 	.word	0x431bde83
 8006724:	40012300 	.word	0x40012300
 8006728:	08006bd9 	.word	0x08006bd9
 800672c:	08006c93 	.word	0x08006c93
 8006730:	08006caf 	.word	0x08006caf
 8006734:	40012000 	.word	0x40012000
 8006738:	40012100 	.word	0x40012100
 800673c:	40012200 	.word	0x40012200

08006740 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_ADC_ConfigChannel+0x1c>
 8006794:	2302      	movs	r3, #2
 8006796:	e113      	b.n	80069c0 <HAL_ADC_ConfigChannel+0x244>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	2b09      	cmp	r3, #9
 80067a6:	d925      	bls.n	80067f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68d9      	ldr	r1, [r3, #12]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	461a      	mov	r2, r3
 80067b6:	4613      	mov	r3, r2
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	4413      	add	r3, r2
 80067bc:	3b1e      	subs	r3, #30
 80067be:	2207      	movs	r2, #7
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	43da      	mvns	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	400a      	ands	r2, r1
 80067cc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	68d9      	ldr	r1, [r3, #12]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	689a      	ldr	r2, [r3, #8]
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	4618      	mov	r0, r3
 80067e0:	4603      	mov	r3, r0
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	4403      	add	r3, r0
 80067e6:	3b1e      	subs	r3, #30
 80067e8:	409a      	lsls	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	e022      	b.n	800683a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6919      	ldr	r1, [r3, #16]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	461a      	mov	r2, r3
 8006802:	4613      	mov	r3, r2
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	4413      	add	r3, r2
 8006808:	2207      	movs	r2, #7
 800680a:	fa02 f303 	lsl.w	r3, r2, r3
 800680e:	43da      	mvns	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	400a      	ands	r2, r1
 8006816:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6919      	ldr	r1, [r3, #16]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689a      	ldr	r2, [r3, #8]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	b29b      	uxth	r3, r3
 8006828:	4618      	mov	r0, r3
 800682a:	4603      	mov	r3, r0
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	4403      	add	r3, r0
 8006830:	409a      	lsls	r2, r3
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b06      	cmp	r3, #6
 8006840:	d824      	bhi.n	800688c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	3b05      	subs	r3, #5
 8006854:	221f      	movs	r2, #31
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	43da      	mvns	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	400a      	ands	r2, r1
 8006862:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	b29b      	uxth	r3, r3
 8006870:	4618      	mov	r0, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	3b05      	subs	r3, #5
 800687e:	fa00 f203 	lsl.w	r2, r0, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	430a      	orrs	r2, r1
 8006888:	635a      	str	r2, [r3, #52]	@ 0x34
 800688a:	e04c      	b.n	8006926 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	2b0c      	cmp	r3, #12
 8006892:	d824      	bhi.n	80068de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	4613      	mov	r3, r2
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	4413      	add	r3, r2
 80068a4:	3b23      	subs	r3, #35	@ 0x23
 80068a6:	221f      	movs	r2, #31
 80068a8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ac:	43da      	mvns	r2, r3
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	400a      	ands	r2, r1
 80068b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	4618      	mov	r0, r3
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	3b23      	subs	r3, #35	@ 0x23
 80068d0:	fa00 f203 	lsl.w	r2, r0, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	631a      	str	r2, [r3, #48]	@ 0x30
 80068dc:	e023      	b.n	8006926 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	4613      	mov	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	4413      	add	r3, r2
 80068ee:	3b41      	subs	r3, #65	@ 0x41
 80068f0:	221f      	movs	r2, #31
 80068f2:	fa02 f303 	lsl.w	r3, r2, r3
 80068f6:	43da      	mvns	r2, r3
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	400a      	ands	r2, r1
 80068fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	b29b      	uxth	r3, r3
 800690c:	4618      	mov	r0, r3
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	685a      	ldr	r2, [r3, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	3b41      	subs	r3, #65	@ 0x41
 800691a:	fa00 f203 	lsl.w	r2, r0, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006926:	4b29      	ldr	r3, [pc, #164]	@ (80069cc <HAL_ADC_ConfigChannel+0x250>)
 8006928:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a28      	ldr	r2, [pc, #160]	@ (80069d0 <HAL_ADC_ConfigChannel+0x254>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d10f      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x1d8>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b12      	cmp	r3, #18
 800693a:	d10b      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a1d      	ldr	r2, [pc, #116]	@ (80069d0 <HAL_ADC_ConfigChannel+0x254>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d12b      	bne.n	80069b6 <HAL_ADC_ConfigChannel+0x23a>
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a1c      	ldr	r2, [pc, #112]	@ (80069d4 <HAL_ADC_ConfigChannel+0x258>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d003      	beq.n	8006970 <HAL_ADC_ConfigChannel+0x1f4>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b11      	cmp	r3, #17
 800696e:	d122      	bne.n	80069b6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a11      	ldr	r2, [pc, #68]	@ (80069d4 <HAL_ADC_ConfigChannel+0x258>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d111      	bne.n	80069b6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006992:	4b11      	ldr	r3, [pc, #68]	@ (80069d8 <HAL_ADC_ConfigChannel+0x25c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a11      	ldr	r2, [pc, #68]	@ (80069dc <HAL_ADC_ConfigChannel+0x260>)
 8006998:	fba2 2303 	umull	r2, r3, r2, r3
 800699c:	0c9a      	lsrs	r2, r3, #18
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80069a8:	e002      	b.n	80069b0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f9      	bne.n	80069aa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40012300 	.word	0x40012300
 80069d0:	40012000 	.word	0x40012000
 80069d4:	10000012 	.word	0x10000012
 80069d8:	2000002c 	.word	0x2000002c
 80069dc:	431bde83 	.word	0x431bde83

080069e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069e8:	4b79      	ldr	r3, [pc, #484]	@ (8006bd0 <ADC_Init+0x1f0>)
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	431a      	orrs	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6859      	ldr	r1, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	021a      	lsls	r2, r3, #8
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8006a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	6859      	ldr	r1, [r3, #4]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	689a      	ldr	r2, [r3, #8]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6899      	ldr	r1, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68da      	ldr	r2, [r3, #12]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	4a58      	ldr	r2, [pc, #352]	@ (8006bd4 <ADC_Init+0x1f4>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d022      	beq.n	8006abe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689a      	ldr	r2, [r3, #8]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006a86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6899      	ldr	r1, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	430a      	orrs	r2, r1
 8006a98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	689a      	ldr	r2, [r3, #8]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6899      	ldr	r1, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	609a      	str	r2, [r3, #8]
 8006abc:	e00f      	b.n	8006ade <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689a      	ldr	r2, [r3, #8]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689a      	ldr	r2, [r3, #8]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8006adc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0202 	bic.w	r2, r2, #2
 8006aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6899      	ldr	r1, [r3, #8]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	7e1b      	ldrb	r3, [r3, #24]
 8006af8:	005a      	lsls	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d01b      	beq.n	8006b44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8006b2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6859      	ldr	r1, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b36:	3b01      	subs	r3, #1
 8006b38:	035a      	lsls	r2, r3, #13
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	605a      	str	r2, [r3, #4]
 8006b42:	e007      	b.n	8006b54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8006b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	051a      	lsls	r2, r3, #20
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6899      	ldr	r1, [r3, #8]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006b96:	025a      	lsls	r2, r3, #9
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	430a      	orrs	r2, r1
 8006b9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6899      	ldr	r1, [r3, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	029a      	lsls	r2, r3, #10
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	430a      	orrs	r2, r1
 8006bc2:	609a      	str	r2, [r3, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr
 8006bd0:	40012300 	.word	0x40012300
 8006bd4:	0f000001 	.word	0x0f000001

08006bd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d13c      	bne.n	8006c6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d12b      	bne.n	8006c64 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d127      	bne.n	8006c64 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d119      	bne.n	8006c64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f022 0220 	bic.w	r2, r2, #32
 8006c3e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d105      	bne.n	8006c64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c5c:	f043 0201 	orr.w	r2, r3, #1
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c64:	68f8      	ldr	r0, [r7, #12]
 8006c66:	f7fd f8d5 	bl	8003e14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006c6a:	e00e      	b.n	8006c8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff fd75 	bl	8006768 <HAL_ADC_ErrorCallback>
}
 8006c7e:	e004      	b.n	8006c8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	4798      	blx	r3
}
 8006c8a:	bf00      	nop
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b084      	sub	sp, #16
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ca0:	68f8      	ldr	r0, [r7, #12]
 8006ca2:	f7ff fd4d 	bl	8006740 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ca6:	bf00      	nop
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cba:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2240      	movs	r2, #64	@ 0x40
 8006cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc6:	f043 0204 	orr.w	r2, r3, #4
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006cce:	68f8      	ldr	r0, [r7, #12]
 8006cd0:	f7ff fd4a 	bl	8006768 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006cd4:	bf00      	nop
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8006ce4:	bf00      	nop
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006d00:	4b0c      	ldr	r3, [pc, #48]	@ (8006d34 <__NVIC_SetPriorityGrouping+0x44>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006d22:	4a04      	ldr	r2, [pc, #16]	@ (8006d34 <__NVIC_SetPriorityGrouping+0x44>)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	60d3      	str	r3, [r2, #12]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	e000ed00 	.word	0xe000ed00

08006d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d3c:	4b04      	ldr	r3, [pc, #16]	@ (8006d50 <__NVIC_GetPriorityGrouping+0x18>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	0a1b      	lsrs	r3, r3, #8
 8006d42:	f003 0307 	and.w	r3, r3, #7
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	e000ed00 	.word	0xe000ed00

08006d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	db0b      	blt.n	8006d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	f003 021f 	and.w	r2, r3, #31
 8006d6c:	4907      	ldr	r1, [pc, #28]	@ (8006d8c <__NVIC_EnableIRQ+0x38>)
 8006d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	2001      	movs	r0, #1
 8006d76:	fa00 f202 	lsl.w	r2, r0, r2
 8006d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	e000e100 	.word	0xe000e100

08006d90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	4603      	mov	r3, r0
 8006d98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	db12      	blt.n	8006dc8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006da2:	79fb      	ldrb	r3, [r7, #7]
 8006da4:	f003 021f 	and.w	r2, r3, #31
 8006da8:	490a      	ldr	r1, [pc, #40]	@ (8006dd4 <__NVIC_DisableIRQ+0x44>)
 8006daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	2001      	movs	r0, #1
 8006db2:	fa00 f202 	lsl.w	r2, r0, r2
 8006db6:	3320      	adds	r3, #32
 8006db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006dbc:	f3bf 8f4f 	dsb	sy
}
 8006dc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006dc2:	f3bf 8f6f 	isb	sy
}
 8006dc6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006dc8:	bf00      	nop
 8006dca:	370c      	adds	r7, #12
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	e000e100 	.word	0xe000e100

08006dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	4603      	mov	r3, r0
 8006de0:	6039      	str	r1, [r7, #0]
 8006de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	db0a      	blt.n	8006e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	490c      	ldr	r1, [pc, #48]	@ (8006e24 <__NVIC_SetPriority+0x4c>)
 8006df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006df6:	0112      	lsls	r2, r2, #4
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	440b      	add	r3, r1
 8006dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006e00:	e00a      	b.n	8006e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	4908      	ldr	r1, [pc, #32]	@ (8006e28 <__NVIC_SetPriority+0x50>)
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	3b04      	subs	r3, #4
 8006e10:	0112      	lsls	r2, r2, #4
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	440b      	add	r3, r1
 8006e16:	761a      	strb	r2, [r3, #24]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	e000e100 	.word	0xe000e100
 8006e28:	e000ed00 	.word	0xe000ed00

08006e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b089      	sub	sp, #36	@ 0x24
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f1c3 0307 	rsb	r3, r3, #7
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	bf28      	it	cs
 8006e4a:	2304      	movcs	r3, #4
 8006e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	3304      	adds	r3, #4
 8006e52:	2b06      	cmp	r3, #6
 8006e54:	d902      	bls.n	8006e5c <NVIC_EncodePriority+0x30>
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	3b03      	subs	r3, #3
 8006e5a:	e000      	b.n	8006e5e <NVIC_EncodePriority+0x32>
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e60:	f04f 32ff 	mov.w	r2, #4294967295
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	43da      	mvns	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	401a      	ands	r2, r3
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006e74:	f04f 31ff 	mov.w	r1, #4294967295
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e7e:	43d9      	mvns	r1, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e84:	4313      	orrs	r3, r2
         );
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3724      	adds	r7, #36	@ 0x24
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ea4:	d301      	bcc.n	8006eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e00f      	b.n	8006eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed4 <SysTick_Config+0x40>)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006eb2:	210f      	movs	r1, #15
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb8:	f7ff ff8e 	bl	8006dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ebc:	4b05      	ldr	r3, [pc, #20]	@ (8006ed4 <SysTick_Config+0x40>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ec2:	4b04      	ldr	r3, [pc, #16]	@ (8006ed4 <SysTick_Config+0x40>)
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3708      	adds	r7, #8
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	e000e010 	.word	0xe000e010

08006ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f7ff ff05 	bl	8006cf0 <__NVIC_SetPriorityGrouping>
}
 8006ee6:	bf00      	nop
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b086      	sub	sp, #24
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006efc:	2300      	movs	r3, #0
 8006efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006f00:	f7ff ff1a 	bl	8006d38 <__NVIC_GetPriorityGrouping>
 8006f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	6978      	ldr	r0, [r7, #20]
 8006f0c:	f7ff ff8e 	bl	8006e2c <NVIC_EncodePriority>
 8006f10:	4602      	mov	r2, r0
 8006f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f16:	4611      	mov	r1, r2
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff ff5d 	bl	8006dd8 <__NVIC_SetPriority>
}
 8006f1e:	bf00      	nop
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f26:	b580      	push	{r7, lr}
 8006f28:	b082      	sub	sp, #8
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff ff0d 	bl	8006d54 <__NVIC_EnableIRQ>
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	4603      	mov	r3, r0
 8006f4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff ff1d 	bl	8006d90 <__NVIC_DisableIRQ>
}
 8006f56:	bf00      	nop
 8006f58:	3708      	adds	r7, #8
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}

08006f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b082      	sub	sp, #8
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff ff94 	bl	8006e94 <SysTick_Config>
 8006f6c:	4603      	mov	r3, r0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
	...

08006f78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006f84:	f7ff f944 	bl	8006210 <HAL_GetTick>
 8006f88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e099      	b.n	80070c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2202      	movs	r2, #2
 8006f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 0201 	bic.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fb4:	e00f      	b.n	8006fd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006fb6:	f7ff f92b 	bl	8006210 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b05      	cmp	r3, #5
 8006fc2:	d908      	bls.n	8006fd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2203      	movs	r2, #3
 8006fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e078      	b.n	80070c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e8      	bne.n	8006fb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4b38      	ldr	r3, [pc, #224]	@ (80070d0 <HAL_DMA_Init+0x158>)
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007002:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800700e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	699b      	ldr	r3, [r3, #24]
 8007014:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800701a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a1b      	ldr	r3, [r3, #32]
 8007020:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007022:	697a      	ldr	r2, [r7, #20]
 8007024:	4313      	orrs	r3, r2
 8007026:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702c:	2b04      	cmp	r3, #4
 800702e:	d107      	bne.n	8007040 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007038:	4313      	orrs	r3, r2
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4313      	orrs	r3, r2
 800703e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f023 0307 	bic.w	r3, r3, #7
 8007056:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007066:	2b04      	cmp	r3, #4
 8007068:	d117      	bne.n	800709a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00e      	beq.n	800709a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fb01 	bl	8007684 <DMA_CheckFifoParam>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2240      	movs	r2, #64	@ 0x40
 800708c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8007096:	2301      	movs	r3, #1
 8007098:	e016      	b.n	80070c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fab8 	bl	8007618 <DMA_CalcBaseAndBitshift>
 80070a8:	4603      	mov	r3, r0
 80070aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b0:	223f      	movs	r2, #63	@ 0x3f
 80070b2:	409a      	lsls	r2, r3
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	f010803f 	.word	0xf010803f

080070d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af00      	add	r7, sp, #0
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
 80070e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_DMA_Start_IT+0x26>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e040      	b.n	800717c <HAL_DMA_Start_IT+0xa8>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b01      	cmp	r3, #1
 800710c:	d12f      	bne.n	800716e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2202      	movs	r2, #2
 8007112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	68b9      	ldr	r1, [r7, #8]
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f000 fa4a 	bl	80075bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712c:	223f      	movs	r2, #63	@ 0x3f
 800712e:	409a      	lsls	r2, r3
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f042 0216 	orr.w	r2, r2, #22
 8007142:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d007      	beq.n	800715c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0208 	orr.w	r2, r2, #8
 800715a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f042 0201 	orr.w	r2, r2, #1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e005      	b.n	800717a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007176:	2302      	movs	r3, #2
 8007178:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800717a:	7dfb      	ldrb	r3, [r7, #23]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3718      	adds	r7, #24
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007190:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007192:	f7ff f83d 	bl	8006210 <HAL_GetTick>
 8007196:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d008      	beq.n	80071b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2280      	movs	r2, #128	@ 0x80
 80071a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e052      	b.n	800725c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0216 	bic.w	r2, r2, #22
 80071c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	695a      	ldr	r2, [r3, #20]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80071d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d103      	bne.n	80071e6 <HAL_DMA_Abort+0x62>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f022 0208 	bic.w	r2, r2, #8
 80071f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0201 	bic.w	r2, r2, #1
 8007204:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007206:	e013      	b.n	8007230 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007208:	f7ff f802 	bl	8006210 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b05      	cmp	r3, #5
 8007214:	d90c      	bls.n	8007230 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2220      	movs	r2, #32
 800721a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2203      	movs	r2, #3
 8007220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e015      	b.n	800725c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1e4      	bne.n	8007208 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007242:	223f      	movs	r2, #63	@ 0x3f
 8007244:	409a      	lsls	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800725a:	2300      	movs	r3, #0
}
 800725c:	4618      	mov	r0, r3
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b02      	cmp	r3, #2
 8007276:	d004      	beq.n	8007282 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2280      	movs	r2, #128	@ 0x80
 800727c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e00c      	b.n	800729c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2205      	movs	r2, #5
 8007286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0201 	bic.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072b4:	4b8e      	ldr	r3, [pc, #568]	@ (80074f0 <HAL_DMA_IRQHandler+0x248>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a8e      	ldr	r2, [pc, #568]	@ (80074f4 <HAL_DMA_IRQHandler+0x24c>)
 80072ba:	fba2 2303 	umull	r2, r3, r2, r3
 80072be:	0a9b      	lsrs	r3, r3, #10
 80072c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80072c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072d2:	2208      	movs	r2, #8
 80072d4:	409a      	lsls	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4013      	ands	r3, r2
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d01a      	beq.n	8007314 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d013      	beq.n	8007314 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0204 	bic.w	r2, r2, #4
 80072fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007300:	2208      	movs	r2, #8
 8007302:	409a      	lsls	r2, r3
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800730c:	f043 0201 	orr.w	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007318:	2201      	movs	r2, #1
 800731a:	409a      	lsls	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4013      	ands	r3, r2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d012      	beq.n	800734a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00b      	beq.n	800734a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007336:	2201      	movs	r2, #1
 8007338:	409a      	lsls	r2, r3
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007342:	f043 0202 	orr.w	r2, r3, #2
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800734e:	2204      	movs	r2, #4
 8007350:	409a      	lsls	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	4013      	ands	r3, r2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d012      	beq.n	8007380 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800736c:	2204      	movs	r2, #4
 800736e:	409a      	lsls	r2, r3
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007378:	f043 0204 	orr.w	r2, r3, #4
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007384:	2210      	movs	r2, #16
 8007386:	409a      	lsls	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4013      	ands	r3, r2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d043      	beq.n	8007418 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 0308 	and.w	r3, r3, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	d03c      	beq.n	8007418 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a2:	2210      	movs	r2, #16
 80073a4:	409a      	lsls	r2, r3
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d018      	beq.n	80073ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d108      	bne.n	80073d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d024      	beq.n	8007418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
 80073d6:	e01f      	b.n	8007418 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d01b      	beq.n	8007418 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
 80073e8:	e016      	b.n	8007418 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d107      	bne.n	8007408 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f022 0208 	bic.w	r2, r2, #8
 8007406:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800741c:	2220      	movs	r2, #32
 800741e:	409a      	lsls	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4013      	ands	r3, r2
 8007424:	2b00      	cmp	r3, #0
 8007426:	f000 808f 	beq.w	8007548 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b00      	cmp	r3, #0
 8007436:	f000 8087 	beq.w	8007548 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800743e:	2220      	movs	r2, #32
 8007440:	409a      	lsls	r2, r3
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b05      	cmp	r3, #5
 8007450:	d136      	bne.n	80074c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0216 	bic.w	r2, r2, #22
 8007460:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	695a      	ldr	r2, [r3, #20]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007470:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d103      	bne.n	8007482 <HAL_DMA_IRQHandler+0x1da>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0208 	bic.w	r2, r2, #8
 8007490:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007496:	223f      	movs	r2, #63	@ 0x3f
 8007498:	409a      	lsls	r2, r3
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d07e      	beq.n	80075b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
        }
        return;
 80074be:	e079      	b.n	80075b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d01d      	beq.n	800750a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10d      	bne.n	80074f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d031      	beq.n	8007548 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	4798      	blx	r3
 80074ec:	e02c      	b.n	8007548 <HAL_DMA_IRQHandler+0x2a0>
 80074ee:	bf00      	nop
 80074f0:	2000002c 	.word	0x2000002c
 80074f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d023      	beq.n	8007548 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	4798      	blx	r3
 8007508:	e01e      	b.n	8007548 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10f      	bne.n	8007538 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f022 0210 	bic.w	r2, r2, #16
 8007526:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754c:	2b00      	cmp	r3, #0
 800754e:	d032      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d022      	beq.n	80075a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2205      	movs	r2, #5
 8007560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0201 	bic.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	3301      	adds	r3, #1
 8007578:	60bb      	str	r3, [r7, #8]
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	429a      	cmp	r2, r3
 800757e:	d307      	bcc.n	8007590 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0301 	and.w	r3, r3, #1
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1f2      	bne.n	8007574 <HAL_DMA_IRQHandler+0x2cc>
 800758e:	e000      	b.n	8007592 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007590:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2201      	movs	r2, #1
 8007596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d005      	beq.n	80075b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
 80075b2:	e000      	b.n	80075b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80075b4:	bf00      	nop
    }
  }
}
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
 80075c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80075d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	683a      	ldr	r2, [r7, #0]
 80075e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	2b40      	cmp	r3, #64	@ 0x40
 80075e8:	d108      	bne.n	80075fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80075fa:	e007      	b.n	800760c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	60da      	str	r2, [r3, #12]
}
 800760c:	bf00      	nop
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	3b10      	subs	r3, #16
 8007628:	4a14      	ldr	r2, [pc, #80]	@ (800767c <DMA_CalcBaseAndBitshift+0x64>)
 800762a:	fba2 2303 	umull	r2, r3, r2, r3
 800762e:	091b      	lsrs	r3, r3, #4
 8007630:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007632:	4a13      	ldr	r2, [pc, #76]	@ (8007680 <DMA_CalcBaseAndBitshift+0x68>)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	4413      	add	r3, r2
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b03      	cmp	r3, #3
 8007644:	d909      	bls.n	800765a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	1d1a      	adds	r2, r3, #4
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	659a      	str	r2, [r3, #88]	@ 0x58
 8007658:	e007      	b.n	800766a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8007662:	f023 0303 	bic.w	r3, r3, #3
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	aaaaaaab 	.word	0xaaaaaaab
 8007680:	080120fc 	.word	0x080120fc

08007684 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007694:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d11f      	bne.n	80076de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d856      	bhi.n	8007752 <DMA_CheckFifoParam+0xce>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <DMA_CheckFifoParam+0x28>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	080076cf 	.word	0x080076cf
 80076b4:	080076bd 	.word	0x080076bd
 80076b8:	08007753 	.word	0x08007753
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d046      	beq.n	8007756 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076cc:	e043      	b.n	8007756 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80076d6:	d140      	bne.n	800775a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076dc:	e03d      	b.n	800775a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	699b      	ldr	r3, [r3, #24]
 80076e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076e6:	d121      	bne.n	800772c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	2b03      	cmp	r3, #3
 80076ec:	d837      	bhi.n	800775e <DMA_CheckFifoParam+0xda>
 80076ee:	a201      	add	r2, pc, #4	@ (adr r2, 80076f4 <DMA_CheckFifoParam+0x70>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007705 	.word	0x08007705
 80076f8:	0800770b 	.word	0x0800770b
 80076fc:	08007705 	.word	0x08007705
 8007700:	0800771d 	.word	0x0800771d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	73fb      	strb	r3, [r7, #15]
      break;
 8007708:	e030      	b.n	800776c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d025      	beq.n	8007762 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800771a:	e022      	b.n	8007762 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007724:	d11f      	bne.n	8007766 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800772a:	e01c      	b.n	8007766 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b02      	cmp	r3, #2
 8007730:	d903      	bls.n	800773a <DMA_CheckFifoParam+0xb6>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b03      	cmp	r3, #3
 8007736:	d003      	beq.n	8007740 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007738:	e018      	b.n	800776c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
      break;
 800773e:	e015      	b.n	800776c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00e      	beq.n	800776a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	73fb      	strb	r3, [r7, #15]
      break;
 8007750:	e00b      	b.n	800776a <DMA_CheckFifoParam+0xe6>
      break;
 8007752:	bf00      	nop
 8007754:	e00a      	b.n	800776c <DMA_CheckFifoParam+0xe8>
      break;
 8007756:	bf00      	nop
 8007758:	e008      	b.n	800776c <DMA_CheckFifoParam+0xe8>
      break;
 800775a:	bf00      	nop
 800775c:	e006      	b.n	800776c <DMA_CheckFifoParam+0xe8>
      break;
 800775e:	bf00      	nop
 8007760:	e004      	b.n	800776c <DMA_CheckFifoParam+0xe8>
      break;
 8007762:	bf00      	nop
 8007764:	e002      	b.n	800776c <DMA_CheckFifoParam+0xe8>
      break;   
 8007766:	bf00      	nop
 8007768:	e000      	b.n	800776c <DMA_CheckFifoParam+0xe8>
      break;
 800776a:	bf00      	nop
    }
  } 
  
  return status; 
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop

0800777c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800777c:	b480      	push	{r7}
 800777e:	b089      	sub	sp, #36	@ 0x24
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800778e:	2300      	movs	r3, #0
 8007790:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]
 8007796:	e165      	b.n	8007a64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007798:	2201      	movs	r2, #1
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	fa02 f303 	lsl.w	r3, r2, r3
 80077a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4013      	ands	r3, r2
 80077aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	f040 8154 	bne.w	8007a5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d005      	beq.n	80077ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d130      	bne.n	8007830 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	005b      	lsls	r3, r3, #1
 80077d8:	2203      	movs	r2, #3
 80077da:	fa02 f303 	lsl.w	r3, r2, r3
 80077de:	43db      	mvns	r3, r3
 80077e0:	69ba      	ldr	r2, [r7, #24]
 80077e2:	4013      	ands	r3, r2
 80077e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	005b      	lsls	r3, r3, #1
 80077ee:	fa02 f303 	lsl.w	r3, r2, r3
 80077f2:	69ba      	ldr	r2, [r7, #24]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	69ba      	ldr	r2, [r7, #24]
 80077fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007804:	2201      	movs	r2, #1
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	fa02 f303 	lsl.w	r3, r2, r3
 800780c:	43db      	mvns	r3, r3
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	4013      	ands	r3, r2
 8007812:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	091b      	lsrs	r3, r3, #4
 800781a:	f003 0201 	and.w	r2, r3, #1
 800781e:	69fb      	ldr	r3, [r7, #28]
 8007820:	fa02 f303 	lsl.w	r3, r2, r3
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	4313      	orrs	r3, r2
 8007828:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	69ba      	ldr	r2, [r7, #24]
 800782e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f003 0303 	and.w	r3, r3, #3
 8007838:	2b03      	cmp	r3, #3
 800783a:	d017      	beq.n	800786c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	2203      	movs	r2, #3
 8007848:	fa02 f303 	lsl.w	r3, r2, r3
 800784c:	43db      	mvns	r3, r3
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	4013      	ands	r3, r2
 8007852:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	005b      	lsls	r3, r3, #1
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	69ba      	ldr	r2, [r7, #24]
 8007862:	4313      	orrs	r3, r2
 8007864:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	f003 0303 	and.w	r3, r3, #3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d123      	bne.n	80078c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	08da      	lsrs	r2, r3, #3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3208      	adds	r2, #8
 8007880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007884:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	220f      	movs	r2, #15
 8007890:	fa02 f303 	lsl.w	r3, r2, r3
 8007894:	43db      	mvns	r3, r3
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	4013      	ands	r3, r2
 800789a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	691a      	ldr	r2, [r3, #16]
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ac:	69ba      	ldr	r2, [r7, #24]
 80078ae:	4313      	orrs	r3, r2
 80078b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	08da      	lsrs	r2, r3, #3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3208      	adds	r2, #8
 80078ba:	69b9      	ldr	r1, [r7, #24]
 80078bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	2203      	movs	r2, #3
 80078cc:	fa02 f303 	lsl.w	r3, r2, r3
 80078d0:	43db      	mvns	r3, r3
 80078d2:	69ba      	ldr	r2, [r7, #24]
 80078d4:	4013      	ands	r3, r2
 80078d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f003 0203 	and.w	r2, r3, #3
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	fa02 f303 	lsl.w	r3, r2, r3
 80078e8:	69ba      	ldr	r2, [r7, #24]
 80078ea:	4313      	orrs	r3, r2
 80078ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f000 80ae 	beq.w	8007a5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
 8007906:	4b5d      	ldr	r3, [pc, #372]	@ (8007a7c <HAL_GPIO_Init+0x300>)
 8007908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790a:	4a5c      	ldr	r2, [pc, #368]	@ (8007a7c <HAL_GPIO_Init+0x300>)
 800790c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007910:	6453      	str	r3, [r2, #68]	@ 0x44
 8007912:	4b5a      	ldr	r3, [pc, #360]	@ (8007a7c <HAL_GPIO_Init+0x300>)
 8007914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007916:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800791a:	60fb      	str	r3, [r7, #12]
 800791c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800791e:	4a58      	ldr	r2, [pc, #352]	@ (8007a80 <HAL_GPIO_Init+0x304>)
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	089b      	lsrs	r3, r3, #2
 8007924:	3302      	adds	r3, #2
 8007926:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	f003 0303 	and.w	r3, r3, #3
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	220f      	movs	r2, #15
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	43db      	mvns	r3, r3
 800793c:	69ba      	ldr	r2, [r7, #24]
 800793e:	4013      	ands	r3, r2
 8007940:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	4a4f      	ldr	r2, [pc, #316]	@ (8007a84 <HAL_GPIO_Init+0x308>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d025      	beq.n	8007996 <HAL_GPIO_Init+0x21a>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a4e      	ldr	r2, [pc, #312]	@ (8007a88 <HAL_GPIO_Init+0x30c>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d01f      	beq.n	8007992 <HAL_GPIO_Init+0x216>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a4d      	ldr	r2, [pc, #308]	@ (8007a8c <HAL_GPIO_Init+0x310>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d019      	beq.n	800798e <HAL_GPIO_Init+0x212>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a4c      	ldr	r2, [pc, #304]	@ (8007a90 <HAL_GPIO_Init+0x314>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d013      	beq.n	800798a <HAL_GPIO_Init+0x20e>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a4b      	ldr	r2, [pc, #300]	@ (8007a94 <HAL_GPIO_Init+0x318>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d00d      	beq.n	8007986 <HAL_GPIO_Init+0x20a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a4a      	ldr	r2, [pc, #296]	@ (8007a98 <HAL_GPIO_Init+0x31c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d007      	beq.n	8007982 <HAL_GPIO_Init+0x206>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a49      	ldr	r2, [pc, #292]	@ (8007a9c <HAL_GPIO_Init+0x320>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d101      	bne.n	800797e <HAL_GPIO_Init+0x202>
 800797a:	2306      	movs	r3, #6
 800797c:	e00c      	b.n	8007998 <HAL_GPIO_Init+0x21c>
 800797e:	2307      	movs	r3, #7
 8007980:	e00a      	b.n	8007998 <HAL_GPIO_Init+0x21c>
 8007982:	2305      	movs	r3, #5
 8007984:	e008      	b.n	8007998 <HAL_GPIO_Init+0x21c>
 8007986:	2304      	movs	r3, #4
 8007988:	e006      	b.n	8007998 <HAL_GPIO_Init+0x21c>
 800798a:	2303      	movs	r3, #3
 800798c:	e004      	b.n	8007998 <HAL_GPIO_Init+0x21c>
 800798e:	2302      	movs	r3, #2
 8007990:	e002      	b.n	8007998 <HAL_GPIO_Init+0x21c>
 8007992:	2301      	movs	r3, #1
 8007994:	e000      	b.n	8007998 <HAL_GPIO_Init+0x21c>
 8007996:	2300      	movs	r3, #0
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	f002 0203 	and.w	r2, r2, #3
 800799e:	0092      	lsls	r2, r2, #2
 80079a0:	4093      	lsls	r3, r2
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079a8:	4935      	ldr	r1, [pc, #212]	@ (8007a80 <HAL_GPIO_Init+0x304>)
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	089b      	lsrs	r3, r3, #2
 80079ae:	3302      	adds	r3, #2
 80079b0:	69ba      	ldr	r2, [r7, #24]
 80079b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80079b6:	4b3a      	ldr	r3, [pc, #232]	@ (8007aa0 <HAL_GPIO_Init+0x324>)
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	43db      	mvns	r3, r3
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	4013      	ands	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80079d2:	69ba      	ldr	r2, [r7, #24]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80079da:	4a31      	ldr	r2, [pc, #196]	@ (8007aa0 <HAL_GPIO_Init+0x324>)
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80079e0:	4b2f      	ldr	r3, [pc, #188]	@ (8007aa0 <HAL_GPIO_Init+0x324>)
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	43db      	mvns	r3, r3
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	4013      	ands	r3, r2
 80079ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d003      	beq.n	8007a04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007a04:	4a26      	ldr	r2, [pc, #152]	@ (8007aa0 <HAL_GPIO_Init+0x324>)
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007a0a:	4b25      	ldr	r3, [pc, #148]	@ (8007aa0 <HAL_GPIO_Init+0x324>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	43db      	mvns	r3, r3
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	4013      	ands	r3, r2
 8007a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007a2e:	4a1c      	ldr	r2, [pc, #112]	@ (8007aa0 <HAL_GPIO_Init+0x324>)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007a34:	4b1a      	ldr	r3, [pc, #104]	@ (8007aa0 <HAL_GPIO_Init+0x324>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	43db      	mvns	r3, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4013      	ands	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d003      	beq.n	8007a58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a50:	69ba      	ldr	r2, [r7, #24]
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	4313      	orrs	r3, r2
 8007a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007a58:	4a11      	ldr	r2, [pc, #68]	@ (8007aa0 <HAL_GPIO_Init+0x324>)
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	3301      	adds	r3, #1
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	2b0f      	cmp	r3, #15
 8007a68:	f67f ae96 	bls.w	8007798 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	bf00      	nop
 8007a70:	3724      	adds	r7, #36	@ 0x24
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	40023800 	.word	0x40023800
 8007a80:	40013800 	.word	0x40013800
 8007a84:	40020000 	.word	0x40020000
 8007a88:	40020400 	.word	0x40020400
 8007a8c:	40020800 	.word	0x40020800
 8007a90:	40020c00 	.word	0x40020c00
 8007a94:	40021000 	.word	0x40021000
 8007a98:	40021400 	.word	0x40021400
 8007a9c:	40021800 	.word	0x40021800
 8007aa0:	40013c00 	.word	0x40013c00

08007aa4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
 8007abe:	e0c7      	b.n	8007c50 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	f040 80b7 	bne.w	8007c4a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007adc:	4a62      	ldr	r2, [pc, #392]	@ (8007c68 <HAL_GPIO_DeInit+0x1c4>)
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	089b      	lsrs	r3, r3, #2
 8007ae2:	3302      	adds	r3, #2
 8007ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f003 0303 	and.w	r3, r3, #3
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	220f      	movs	r2, #15
 8007af4:	fa02 f303 	lsl.w	r3, r2, r3
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	4013      	ands	r3, r2
 8007afc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a5a      	ldr	r2, [pc, #360]	@ (8007c6c <HAL_GPIO_DeInit+0x1c8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d025      	beq.n	8007b52 <HAL_GPIO_DeInit+0xae>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a59      	ldr	r2, [pc, #356]	@ (8007c70 <HAL_GPIO_DeInit+0x1cc>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d01f      	beq.n	8007b4e <HAL_GPIO_DeInit+0xaa>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a58      	ldr	r2, [pc, #352]	@ (8007c74 <HAL_GPIO_DeInit+0x1d0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d019      	beq.n	8007b4a <HAL_GPIO_DeInit+0xa6>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a57      	ldr	r2, [pc, #348]	@ (8007c78 <HAL_GPIO_DeInit+0x1d4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d013      	beq.n	8007b46 <HAL_GPIO_DeInit+0xa2>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a56      	ldr	r2, [pc, #344]	@ (8007c7c <HAL_GPIO_DeInit+0x1d8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d00d      	beq.n	8007b42 <HAL_GPIO_DeInit+0x9e>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	4a55      	ldr	r2, [pc, #340]	@ (8007c80 <HAL_GPIO_DeInit+0x1dc>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d007      	beq.n	8007b3e <HAL_GPIO_DeInit+0x9a>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a54      	ldr	r2, [pc, #336]	@ (8007c84 <HAL_GPIO_DeInit+0x1e0>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d101      	bne.n	8007b3a <HAL_GPIO_DeInit+0x96>
 8007b36:	2306      	movs	r3, #6
 8007b38:	e00c      	b.n	8007b54 <HAL_GPIO_DeInit+0xb0>
 8007b3a:	2307      	movs	r3, #7
 8007b3c:	e00a      	b.n	8007b54 <HAL_GPIO_DeInit+0xb0>
 8007b3e:	2305      	movs	r3, #5
 8007b40:	e008      	b.n	8007b54 <HAL_GPIO_DeInit+0xb0>
 8007b42:	2304      	movs	r3, #4
 8007b44:	e006      	b.n	8007b54 <HAL_GPIO_DeInit+0xb0>
 8007b46:	2303      	movs	r3, #3
 8007b48:	e004      	b.n	8007b54 <HAL_GPIO_DeInit+0xb0>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e002      	b.n	8007b54 <HAL_GPIO_DeInit+0xb0>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <HAL_GPIO_DeInit+0xb0>
 8007b52:	2300      	movs	r3, #0
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	f002 0203 	and.w	r2, r2, #3
 8007b5a:	0092      	lsls	r2, r2, #2
 8007b5c:	4093      	lsls	r3, r2
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d132      	bne.n	8007bca <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007b64:	4b48      	ldr	r3, [pc, #288]	@ (8007c88 <HAL_GPIO_DeInit+0x1e4>)
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	4946      	ldr	r1, [pc, #280]	@ (8007c88 <HAL_GPIO_DeInit+0x1e4>)
 8007b6e:	4013      	ands	r3, r2
 8007b70:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007b72:	4b45      	ldr	r3, [pc, #276]	@ (8007c88 <HAL_GPIO_DeInit+0x1e4>)
 8007b74:	685a      	ldr	r2, [r3, #4]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	43db      	mvns	r3, r3
 8007b7a:	4943      	ldr	r1, [pc, #268]	@ (8007c88 <HAL_GPIO_DeInit+0x1e4>)
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007b80:	4b41      	ldr	r3, [pc, #260]	@ (8007c88 <HAL_GPIO_DeInit+0x1e4>)
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	43db      	mvns	r3, r3
 8007b88:	493f      	ldr	r1, [pc, #252]	@ (8007c88 <HAL_GPIO_DeInit+0x1e4>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8007c88 <HAL_GPIO_DeInit+0x1e4>)
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	43db      	mvns	r3, r3
 8007b96:	493c      	ldr	r1, [pc, #240]	@ (8007c88 <HAL_GPIO_DeInit+0x1e4>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	220f      	movs	r2, #15
 8007ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8007baa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007bac:	4a2e      	ldr	r2, [pc, #184]	@ (8007c68 <HAL_GPIO_DeInit+0x1c4>)
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	089b      	lsrs	r3, r3, #2
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	43da      	mvns	r2, r3
 8007bbc:	482a      	ldr	r0, [pc, #168]	@ (8007c68 <HAL_GPIO_DeInit+0x1c4>)
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	089b      	lsrs	r3, r3, #2
 8007bc2:	400a      	ands	r2, r1
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	2103      	movs	r1, #3
 8007bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	401a      	ands	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	08da      	lsrs	r2, r3, #3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	3208      	adds	r2, #8
 8007be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f003 0307 	and.w	r3, r3, #7
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	220f      	movs	r2, #15
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	43db      	mvns	r3, r3
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	08d2      	lsrs	r2, r2, #3
 8007c00:	4019      	ands	r1, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3208      	adds	r2, #8
 8007c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	2103      	movs	r1, #3
 8007c14:	fa01 f303 	lsl.w	r3, r1, r3
 8007c18:	43db      	mvns	r3, r3
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	2101      	movs	r1, #1
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2c:	43db      	mvns	r3, r3
 8007c2e:	401a      	ands	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	2103      	movs	r1, #3
 8007c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007c42:	43db      	mvns	r3, r3
 8007c44:	401a      	ands	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	2b0f      	cmp	r3, #15
 8007c54:	f67f af34 	bls.w	8007ac0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007c58:	bf00      	nop
 8007c5a:	bf00      	nop
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop
 8007c68:	40013800 	.word	0x40013800
 8007c6c:	40020000 	.word	0x40020000
 8007c70:	40020400 	.word	0x40020400
 8007c74:	40020800 	.word	0x40020800
 8007c78:	40020c00 	.word	0x40020c00
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	40021400 	.word	0x40021400
 8007c84:	40021800 	.word	0x40021800
 8007c88:	40013c00 	.word	0x40013c00

08007c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	460b      	mov	r3, r1
 8007c96:	807b      	strh	r3, [r7, #2]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007c9c:	787b      	ldrb	r3, [r7, #1]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007ca2:	887a      	ldrh	r2, [r7, #2]
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007ca8:	e003      	b.n	8007cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007caa:	887b      	ldrh	r3, [r7, #2]
 8007cac:	041a      	lsls	r2, r3, #16
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	619a      	str	r2, [r3, #24]
}
 8007cb2:	bf00      	nop
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
	...

08007cc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007cca:	4b08      	ldr	r3, [pc, #32]	@ (8007cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007ccc:	695a      	ldr	r2, [r3, #20]
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d006      	beq.n	8007ce4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cd6:	4a05      	ldr	r2, [pc, #20]	@ (8007cec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007cd8:	88fb      	ldrh	r3, [r7, #6]
 8007cda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cdc:	88fb      	ldrh	r3, [r7, #6]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fc f85e 	bl	8003da0 <HAL_GPIO_EXTI_Callback>
  }
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	40013c00 	.word	0x40013c00

08007cf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e12b      	b.n	8007f5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d106      	bne.n	8007d1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7fd feb0 	bl	8005a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2224      	movs	r2, #36	@ 0x24
 8007d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f022 0201 	bic.w	r2, r2, #1
 8007d32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007d42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007d54:	f001 f912 	bl	8008f7c <HAL_RCC_GetPCLK1Freq>
 8007d58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	4a81      	ldr	r2, [pc, #516]	@ (8007f64 <HAL_I2C_Init+0x274>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d807      	bhi.n	8007d74 <HAL_I2C_Init+0x84>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	4a80      	ldr	r2, [pc, #512]	@ (8007f68 <HAL_I2C_Init+0x278>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	bf94      	ite	ls
 8007d6c:	2301      	movls	r3, #1
 8007d6e:	2300      	movhi	r3, #0
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	e006      	b.n	8007d82 <HAL_I2C_Init+0x92>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	4a7d      	ldr	r2, [pc, #500]	@ (8007f6c <HAL_I2C_Init+0x27c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	bf94      	ite	ls
 8007d7c:	2301      	movls	r3, #1
 8007d7e:	2300      	movhi	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e0e7      	b.n	8007f5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4a78      	ldr	r2, [pc, #480]	@ (8007f70 <HAL_I2C_Init+0x280>)
 8007d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d92:	0c9b      	lsrs	r3, r3, #18
 8007d94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6a1b      	ldr	r3, [r3, #32]
 8007db0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	4a6a      	ldr	r2, [pc, #424]	@ (8007f64 <HAL_I2C_Init+0x274>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d802      	bhi.n	8007dc4 <HAL_I2C_Init+0xd4>
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	e009      	b.n	8007dd8 <HAL_I2C_Init+0xe8>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007dca:	fb02 f303 	mul.w	r3, r2, r3
 8007dce:	4a69      	ldr	r2, [pc, #420]	@ (8007f74 <HAL_I2C_Init+0x284>)
 8007dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd4:	099b      	lsrs	r3, r3, #6
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007dea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	495c      	ldr	r1, [pc, #368]	@ (8007f64 <HAL_I2C_Init+0x274>)
 8007df4:	428b      	cmp	r3, r1
 8007df6:	d819      	bhi.n	8007e2c <HAL_I2C_Init+0x13c>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	1e59      	subs	r1, r3, #1
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	005b      	lsls	r3, r3, #1
 8007e02:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e06:	1c59      	adds	r1, r3, #1
 8007e08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007e0c:	400b      	ands	r3, r1
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d00a      	beq.n	8007e28 <HAL_I2C_Init+0x138>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	1e59      	subs	r1, r3, #1
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007e20:	3301      	adds	r3, #1
 8007e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e26:	e051      	b.n	8007ecc <HAL_I2C_Init+0x1dc>
 8007e28:	2304      	movs	r3, #4
 8007e2a:	e04f      	b.n	8007ecc <HAL_I2C_Init+0x1dc>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d111      	bne.n	8007e58 <HAL_I2C_Init+0x168>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	1e58      	subs	r0, r3, #1
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	440b      	add	r3, r1
 8007e42:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e46:	3301      	adds	r3, #1
 8007e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	bf0c      	ite	eq
 8007e50:	2301      	moveq	r3, #1
 8007e52:	2300      	movne	r3, #0
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	e012      	b.n	8007e7e <HAL_I2C_Init+0x18e>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1e58      	subs	r0, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6859      	ldr	r1, [r3, #4]
 8007e60:	460b      	mov	r3, r1
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	0099      	lsls	r1, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007e6e:	3301      	adds	r3, #1
 8007e70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bf0c      	ite	eq
 8007e78:	2301      	moveq	r3, #1
 8007e7a:	2300      	movne	r3, #0
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <HAL_I2C_Init+0x196>
 8007e82:	2301      	movs	r3, #1
 8007e84:	e022      	b.n	8007ecc <HAL_I2C_Init+0x1dc>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10e      	bne.n	8007eac <HAL_I2C_Init+0x1bc>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1e58      	subs	r0, r3, #1
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6859      	ldr	r1, [r3, #4]
 8007e96:	460b      	mov	r3, r1
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	440b      	add	r3, r1
 8007e9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eaa:	e00f      	b.n	8007ecc <HAL_I2C_Init+0x1dc>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	1e58      	subs	r0, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6859      	ldr	r1, [r3, #4]
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	440b      	add	r3, r1
 8007eba:	0099      	lsls	r1, r3, #2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	fbb0 f3f3 	udiv	r3, r0, r3
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ec8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ecc:	6879      	ldr	r1, [r7, #4]
 8007ece:	6809      	ldr	r1, [r1, #0]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	69da      	ldr	r2, [r3, #28]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007efa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6911      	ldr	r1, [r2, #16]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	68d2      	ldr	r2, [r2, #12]
 8007f06:	4311      	orrs	r1, r2
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6812      	ldr	r2, [r2, #0]
 8007f0c:	430b      	orrs	r3, r1
 8007f0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695a      	ldr	r2, [r3, #20]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f042 0201 	orr.w	r2, r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007f58:	2300      	movs	r3, #0
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3710      	adds	r7, #16
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	000186a0 	.word	0x000186a0
 8007f68:	001e847f 	.word	0x001e847f
 8007f6c:	003d08ff 	.word	0x003d08ff
 8007f70:	431bde83 	.word	0x431bde83
 8007f74:	10624dd3 	.word	0x10624dd3

08007f78 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e021      	b.n	8007fce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2224      	movs	r2, #36	@ 0x24
 8007f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f022 0201 	bic.w	r2, r2, #1
 8007fa0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7fd fe0a 	bl	8005bbc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af02      	add	r7, sp, #8
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	817b      	strh	r3, [r7, #10]
 8007fea:	460b      	mov	r3, r1
 8007fec:	813b      	strh	r3, [r7, #8]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007ff2:	f7fe f90d 	bl	8006210 <HAL_GetTick>
 8007ff6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b20      	cmp	r3, #32
 8008002:	f040 80d9 	bne.w	80081b8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	2319      	movs	r3, #25
 800800c:	2201      	movs	r2, #1
 800800e:	496d      	ldr	r1, [pc, #436]	@ (80081c4 <HAL_I2C_Mem_Write+0x1ec>)
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 fc8b 	bl	800892c <I2C_WaitOnFlagUntilTimeout>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	d001      	beq.n	8008020 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800801c:	2302      	movs	r3, #2
 800801e:	e0cc      	b.n	80081ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <HAL_I2C_Mem_Write+0x56>
 800802a:	2302      	movs	r3, #2
 800802c:	e0c5      	b.n	80081ba <HAL_I2C_Mem_Write+0x1e2>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2201      	movs	r2, #1
 8008032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 0301 	and.w	r3, r3, #1
 8008040:	2b01      	cmp	r3, #1
 8008042:	d007      	beq.n	8008054 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0201 	orr.w	r2, r2, #1
 8008052:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008062:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2221      	movs	r2, #33	@ 0x21
 8008068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2240      	movs	r2, #64	@ 0x40
 8008070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a3a      	ldr	r2, [r7, #32]
 800807e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008084:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800808a:	b29a      	uxth	r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4a4d      	ldr	r2, [pc, #308]	@ (80081c8 <HAL_I2C_Mem_Write+0x1f0>)
 8008094:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008096:	88f8      	ldrh	r0, [r7, #6]
 8008098:	893a      	ldrh	r2, [r7, #8]
 800809a:	8979      	ldrh	r1, [r7, #10]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	9301      	str	r3, [sp, #4]
 80080a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a2:	9300      	str	r3, [sp, #0]
 80080a4:	4603      	mov	r3, r0
 80080a6:	68f8      	ldr	r0, [r7, #12]
 80080a8:	f000 fac2 	bl	8008630 <I2C_RequestMemoryWrite>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d052      	beq.n	8008158 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e081      	b.n	80081ba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fd50 	bl	8008b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00d      	beq.n	80080e2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d107      	bne.n	80080de <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80080dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e06b      	b.n	80081ba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080fc:	3b01      	subs	r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008108:	b29b      	uxth	r3, r3
 800810a:	3b01      	subs	r3, #1
 800810c:	b29a      	uxth	r2, r3
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	f003 0304 	and.w	r3, r3, #4
 800811c:	2b04      	cmp	r3, #4
 800811e:	d11b      	bne.n	8008158 <HAL_I2C_Mem_Write+0x180>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008124:	2b00      	cmp	r3, #0
 8008126:	d017      	beq.n	8008158 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800812c:	781a      	ldrb	r2, [r3, #0]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008138:	1c5a      	adds	r2, r3, #1
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800814e:	b29b      	uxth	r3, r3
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800815c:	2b00      	cmp	r3, #0
 800815e:	d1aa      	bne.n	80080b6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 fd43 	bl	8008bf0 <I2C_WaitOnBTFFlagUntilTimeout>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00d      	beq.n	800818c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008174:	2b04      	cmp	r3, #4
 8008176:	d107      	bne.n	8008188 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008186:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e016      	b.n	80081ba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800819a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	e000      	b.n	80081ba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80081b8:	2302      	movs	r3, #2
  }
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	00100002 	.word	0x00100002
 80081c8:	ffff0000 	.word	0xffff0000

080081cc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08c      	sub	sp, #48	@ 0x30
 80081d0:	af02      	add	r7, sp, #8
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	4608      	mov	r0, r1
 80081d6:	4611      	mov	r1, r2
 80081d8:	461a      	mov	r2, r3
 80081da:	4603      	mov	r3, r0
 80081dc:	817b      	strh	r3, [r7, #10]
 80081de:	460b      	mov	r3, r1
 80081e0:	813b      	strh	r3, [r7, #8]
 80081e2:	4613      	mov	r3, r2
 80081e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80081e6:	f7fe f813 	bl	8006210 <HAL_GetTick>
 80081ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b20      	cmp	r3, #32
 80081f6:	f040 8214 	bne.w	8008622 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	9300      	str	r3, [sp, #0]
 80081fe:	2319      	movs	r3, #25
 8008200:	2201      	movs	r2, #1
 8008202:	497b      	ldr	r1, [pc, #492]	@ (80083f0 <HAL_I2C_Mem_Read+0x224>)
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f000 fb91 	bl	800892c <I2C_WaitOnFlagUntilTimeout>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008210:	2302      	movs	r3, #2
 8008212:	e207      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800821a:	2b01      	cmp	r3, #1
 800821c:	d101      	bne.n	8008222 <HAL_I2C_Mem_Read+0x56>
 800821e:	2302      	movs	r3, #2
 8008220:	e200      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b01      	cmp	r3, #1
 8008236:	d007      	beq.n	8008248 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	2222      	movs	r2, #34	@ 0x22
 800825c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2240      	movs	r2, #64	@ 0x40
 8008264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800827e:	b29a      	uxth	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	4a5b      	ldr	r2, [pc, #364]	@ (80083f4 <HAL_I2C_Mem_Read+0x228>)
 8008288:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800828a:	88f8      	ldrh	r0, [r7, #6]
 800828c:	893a      	ldrh	r2, [r7, #8]
 800828e:	8979      	ldrh	r1, [r7, #10]
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	4603      	mov	r3, r0
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f000 fa5e 	bl	800875c <I2C_RequestMemoryRead>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e1bc      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d113      	bne.n	80082da <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082b2:	2300      	movs	r3, #0
 80082b4:	623b      	str	r3, [r7, #32]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	695b      	ldr	r3, [r3, #20]
 80082bc:	623b      	str	r3, [r7, #32]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	623b      	str	r3, [r7, #32]
 80082c6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	e190      	b.n	80085fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d11b      	bne.n	800831a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082f2:	2300      	movs	r3, #0
 80082f4:	61fb      	str	r3, [r7, #28]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	61fb      	str	r3, [r7, #28]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008316:	601a      	str	r2, [r3, #0]
 8008318:	e170      	b.n	80085fc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800831e:	2b02      	cmp	r3, #2
 8008320:	d11b      	bne.n	800835a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008330:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008340:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008342:	2300      	movs	r3, #0
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	61bb      	str	r3, [r7, #24]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	e150      	b.n	80085fc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800835a:	2300      	movs	r3, #0
 800835c:	617b      	str	r3, [r7, #20]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	695b      	ldr	r3, [r3, #20]
 8008364:	617b      	str	r3, [r7, #20]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	617b      	str	r3, [r7, #20]
 800836e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008370:	e144      	b.n	80085fc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008376:	2b03      	cmp	r3, #3
 8008378:	f200 80f1 	bhi.w	800855e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008380:	2b01      	cmp	r3, #1
 8008382:	d123      	bne.n	80083cc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008386:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fc79 	bl	8008c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e145      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	691a      	ldr	r2, [r3, #16]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083b4:	3b01      	subs	r3, #1
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	3b01      	subs	r3, #1
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80083ca:	e117      	b.n	80085fc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d14e      	bne.n	8008472 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80083d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083da:	2200      	movs	r2, #0
 80083dc:	4906      	ldr	r1, [pc, #24]	@ (80083f8 <HAL_I2C_Mem_Read+0x22c>)
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 faa4 	bl	800892c <I2C_WaitOnFlagUntilTimeout>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d008      	beq.n	80083fc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e11a      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
 80083ee:	bf00      	nop
 80083f0:	00100002 	.word	0x00100002
 80083f4:	ffff0000 	.word	0xffff0000
 80083f8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800840a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691a      	ldr	r2, [r3, #16]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008416:	b2d2      	uxtb	r2, r2
 8008418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841e:	1c5a      	adds	r2, r3, #1
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008428:	3b01      	subs	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800845a:	3b01      	subs	r3, #1
 800845c:	b29a      	uxth	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008466:	b29b      	uxth	r3, r3
 8008468:	3b01      	subs	r3, #1
 800846a:	b29a      	uxth	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008470:	e0c4      	b.n	80085fc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008478:	2200      	movs	r2, #0
 800847a:	496c      	ldr	r1, [pc, #432]	@ (800862c <HAL_I2C_Mem_Read+0x460>)
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f000 fa55 	bl	800892c <I2C_WaitOnFlagUntilTimeout>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e0cb      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800849a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691a      	ldr	r2, [r3, #16]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	b2d2      	uxtb	r2, r2
 80084a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084b8:	3b01      	subs	r3, #1
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	3b01      	subs	r3, #1
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80084ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d4:	2200      	movs	r2, #0
 80084d6:	4955      	ldr	r1, [pc, #340]	@ (800862c <HAL_I2C_Mem_Read+0x460>)
 80084d8:	68f8      	ldr	r0, [r7, #12]
 80084da:	f000 fa27 	bl	800892c <I2C_WaitOnFlagUntilTimeout>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e09d      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	691a      	ldr	r2, [r3, #16]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008502:	b2d2      	uxtb	r2, r2
 8008504:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800850a:	1c5a      	adds	r2, r3, #1
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008514:	3b01      	subs	r3, #1
 8008516:	b29a      	uxth	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008520:	b29b      	uxth	r3, r3
 8008522:	3b01      	subs	r3, #1
 8008524:	b29a      	uxth	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	691a      	ldr	r2, [r3, #16]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008534:	b2d2      	uxtb	r2, r2
 8008536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008546:	3b01      	subs	r3, #1
 8008548:	b29a      	uxth	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008552:	b29b      	uxth	r3, r3
 8008554:	3b01      	subs	r3, #1
 8008556:	b29a      	uxth	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800855c:	e04e      	b.n	80085fc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800855e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008560:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 fb8c 	bl	8008c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e058      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691a      	ldr	r2, [r3, #16]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800858e:	3b01      	subs	r3, #1
 8008590:	b29a      	uxth	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800859a:	b29b      	uxth	r3, r3
 800859c:	3b01      	subs	r3, #1
 800859e:	b29a      	uxth	r2, r3
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	f003 0304 	and.w	r3, r3, #4
 80085ae:	2b04      	cmp	r3, #4
 80085b0:	d124      	bne.n	80085fc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d107      	bne.n	80085ca <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085c8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085dc:	1c5a      	adds	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29a      	uxth	r2, r3
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	3b01      	subs	r3, #1
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008600:	2b00      	cmp	r3, #0
 8008602:	f47f aeb6 	bne.w	8008372 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2220      	movs	r2, #32
 800860a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	e000      	b.n	8008624 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008622:	2302      	movs	r3, #2
  }
}
 8008624:	4618      	mov	r0, r3
 8008626:	3728      	adds	r7, #40	@ 0x28
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	00010004 	.word	0x00010004

08008630 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	4608      	mov	r0, r1
 800863a:	4611      	mov	r1, r2
 800863c:	461a      	mov	r2, r3
 800863e:	4603      	mov	r3, r0
 8008640:	817b      	strh	r3, [r7, #10]
 8008642:	460b      	mov	r3, r1
 8008644:	813b      	strh	r3, [r7, #8]
 8008646:	4613      	mov	r3, r2
 8008648:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	9300      	str	r3, [sp, #0]
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	2200      	movs	r2, #0
 8008662:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f000 f960 	bl	800892c <I2C_WaitOnFlagUntilTimeout>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00d      	beq.n	800868e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800867c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008680:	d103      	bne.n	800868a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008688:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e05f      	b.n	800874e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800868e:	897b      	ldrh	r3, [r7, #10]
 8008690:	b2db      	uxtb	r3, r3
 8008692:	461a      	mov	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800869c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800869e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	492d      	ldr	r1, [pc, #180]	@ (8008758 <I2C_RequestMemoryWrite+0x128>)
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f9bb 	bl	8008a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e04c      	b.n	800874e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086b4:	2300      	movs	r3, #0
 80086b6:	617b      	str	r3, [r7, #20]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	695b      	ldr	r3, [r3, #20]
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	699b      	ldr	r3, [r3, #24]
 80086c6:	617b      	str	r3, [r7, #20]
 80086c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80086ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086cc:	6a39      	ldr	r1, [r7, #32]
 80086ce:	68f8      	ldr	r0, [r7, #12]
 80086d0:	f000 fa46 	bl	8008b60 <I2C_WaitOnTXEFlagUntilTimeout>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00d      	beq.n	80086f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d107      	bne.n	80086f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e02b      	b.n	800874e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80086f6:	88fb      	ldrh	r3, [r7, #6]
 80086f8:	2b01      	cmp	r3, #1
 80086fa:	d105      	bne.n	8008708 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80086fc:	893b      	ldrh	r3, [r7, #8]
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	611a      	str	r2, [r3, #16]
 8008706:	e021      	b.n	800874c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008708:	893b      	ldrh	r3, [r7, #8]
 800870a:	0a1b      	lsrs	r3, r3, #8
 800870c:	b29b      	uxth	r3, r3
 800870e:	b2da      	uxtb	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008718:	6a39      	ldr	r1, [r7, #32]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 fa20 	bl	8008b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00d      	beq.n	8008742 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800872a:	2b04      	cmp	r3, #4
 800872c:	d107      	bne.n	800873e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800873c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e005      	b.n	800874e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008742:	893b      	ldrh	r3, [r7, #8]
 8008744:	b2da      	uxtb	r2, r3
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3718      	adds	r7, #24
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	00010002 	.word	0x00010002

0800875c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af02      	add	r7, sp, #8
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	4608      	mov	r0, r1
 8008766:	4611      	mov	r1, r2
 8008768:	461a      	mov	r2, r3
 800876a:	4603      	mov	r3, r0
 800876c:	817b      	strh	r3, [r7, #10]
 800876e:	460b      	mov	r3, r1
 8008770:	813b      	strh	r3, [r7, #8]
 8008772:	4613      	mov	r3, r2
 8008774:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008784:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008794:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	2200      	movs	r2, #0
 800879e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 f8c2 	bl	800892c <I2C_WaitOnFlagUntilTimeout>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00d      	beq.n	80087ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087bc:	d103      	bne.n	80087c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e0aa      	b.n	8008920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80087ca:	897b      	ldrh	r3, [r7, #10]
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	461a      	mov	r2, r3
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80087d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	6a3a      	ldr	r2, [r7, #32]
 80087de:	4952      	ldr	r1, [pc, #328]	@ (8008928 <I2C_RequestMemoryRead+0x1cc>)
 80087e0:	68f8      	ldr	r0, [r7, #12]
 80087e2:	f000 f91d 	bl	8008a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d001      	beq.n	80087f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e097      	b.n	8008920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008808:	6a39      	ldr	r1, [r7, #32]
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 f9a8 	bl	8008b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00d      	beq.n	8008832 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881a:	2b04      	cmp	r3, #4
 800881c:	d107      	bne.n	800882e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800882c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e076      	b.n	8008920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008832:	88fb      	ldrh	r3, [r7, #6]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d105      	bne.n	8008844 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008838:	893b      	ldrh	r3, [r7, #8]
 800883a:	b2da      	uxtb	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	611a      	str	r2, [r3, #16]
 8008842:	e021      	b.n	8008888 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008844:	893b      	ldrh	r3, [r7, #8]
 8008846:	0a1b      	lsrs	r3, r3, #8
 8008848:	b29b      	uxth	r3, r3
 800884a:	b2da      	uxtb	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008854:	6a39      	ldr	r1, [r7, #32]
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 f982 	bl	8008b60 <I2C_WaitOnTXEFlagUntilTimeout>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00d      	beq.n	800887e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008866:	2b04      	cmp	r3, #4
 8008868:	d107      	bne.n	800887a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008878:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e050      	b.n	8008920 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800887e:	893b      	ldrh	r3, [r7, #8]
 8008880:	b2da      	uxtb	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800888a:	6a39      	ldr	r1, [r7, #32]
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f000 f967 	bl	8008b60 <I2C_WaitOnTXEFlagUntilTimeout>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d00d      	beq.n	80088b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889c:	2b04      	cmp	r3, #4
 800889e:	d107      	bne.n	80088b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80088ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e035      	b.n	8008920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f000 f82b 	bl	800892c <I2C_WaitOnFlagUntilTimeout>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00d      	beq.n	80088f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80088ea:	d103      	bne.n	80088f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	e013      	b.n	8008920 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80088f8:	897b      	ldrh	r3, [r7, #10]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	f043 0301 	orr.w	r3, r3, #1
 8008900:	b2da      	uxtb	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800890a:	6a3a      	ldr	r2, [r7, #32]
 800890c:	4906      	ldr	r1, [pc, #24]	@ (8008928 <I2C_RequestMemoryRead+0x1cc>)
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 f886 	bl	8008a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008914:	4603      	mov	r3, r0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800891e:	2300      	movs	r3, #0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3718      	adds	r7, #24
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}
 8008928:	00010002 	.word	0x00010002

0800892c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	4613      	mov	r3, r2
 800893a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800893c:	e048      	b.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d044      	beq.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008946:	f7fd fc63 	bl	8006210 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	683a      	ldr	r2, [r7, #0]
 8008952:	429a      	cmp	r2, r3
 8008954:	d302      	bcc.n	800895c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d139      	bne.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	0c1b      	lsrs	r3, r3, #16
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b01      	cmp	r3, #1
 8008964:	d10d      	bne.n	8008982 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	695b      	ldr	r3, [r3, #20]
 800896c:	43da      	mvns	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	4013      	ands	r3, r2
 8008972:	b29b      	uxth	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	bf0c      	ite	eq
 8008978:	2301      	moveq	r3, #1
 800897a:	2300      	movne	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	461a      	mov	r2, r3
 8008980:	e00c      	b.n	800899c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	43da      	mvns	r2, r3
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	4013      	ands	r3, r2
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	bf0c      	ite	eq
 8008994:	2301      	moveq	r3, #1
 8008996:	2300      	movne	r3, #0
 8008998:	b2db      	uxtb	r3, r3
 800899a:	461a      	mov	r2, r3
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d116      	bne.n	80089d0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2220      	movs	r2, #32
 80089ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089bc:	f043 0220 	orr.w	r2, r3, #32
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e023      	b.n	8008a18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	0c1b      	lsrs	r3, r3, #16
 80089d4:	b2db      	uxtb	r3, r3
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d10d      	bne.n	80089f6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	43da      	mvns	r2, r3
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	4013      	ands	r3, r2
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bf0c      	ite	eq
 80089ec:	2301      	moveq	r3, #1
 80089ee:	2300      	movne	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	e00c      	b.n	8008a10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	43da      	mvns	r2, r3
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	4013      	ands	r3, r2
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	bf0c      	ite	eq
 8008a08:	2301      	moveq	r3, #1
 8008a0a:	2300      	movne	r3, #0
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	461a      	mov	r2, r3
 8008a10:	79fb      	ldrb	r3, [r7, #7]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d093      	beq.n	800893e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	607a      	str	r2, [r7, #4]
 8008a2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008a2e:	e071      	b.n	8008b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a3e:	d123      	bne.n	8008a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008a58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2220      	movs	r2, #32
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a74:	f043 0204 	orr.w	r2, r3, #4
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	e067      	b.n	8008b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8e:	d041      	beq.n	8008b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a90:	f7fd fbbe 	bl	8006210 <HAL_GetTick>
 8008a94:	4602      	mov	r2, r0
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	1ad3      	subs	r3, r2, r3
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d302      	bcc.n	8008aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d136      	bne.n	8008b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d10c      	bne.n	8008aca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	43da      	mvns	r2, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	4013      	ands	r3, r2
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	bf14      	ite	ne
 8008ac2:	2301      	movne	r3, #1
 8008ac4:	2300      	moveq	r3, #0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	e00b      	b.n	8008ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	43da      	mvns	r2, r3
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bf14      	ite	ne
 8008adc:	2301      	movne	r3, #1
 8008ade:	2300      	moveq	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b00:	f043 0220 	orr.w	r2, r3, #32
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e021      	b.n	8008b58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	0c1b      	lsrs	r3, r3, #16
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b01      	cmp	r3, #1
 8008b1c:	d10c      	bne.n	8008b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	43da      	mvns	r2, r3
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	4013      	ands	r3, r2
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	bf14      	ite	ne
 8008b30:	2301      	movne	r3, #1
 8008b32:	2300      	moveq	r3, #0
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	e00b      	b.n	8008b50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	43da      	mvns	r2, r3
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4013      	ands	r3, r2
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	bf14      	ite	ne
 8008b4a:	2301      	movne	r3, #1
 8008b4c:	2300      	moveq	r3, #0
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f47f af6d 	bne.w	8008a30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b6c:	e034      	b.n	8008bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 f8e3 	bl	8008d3a <I2C_IsAcknowledgeFailed>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e034      	b.n	8008be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d028      	beq.n	8008bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b86:	f7fd fb43 	bl	8006210 <HAL_GetTick>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d302      	bcc.n	8008b9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11d      	bne.n	8008bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ba6:	2b80      	cmp	r3, #128	@ 0x80
 8008ba8:	d016      	beq.n	8008bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc4:	f043 0220 	orr.w	r2, r3, #32
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e007      	b.n	8008be8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008be2:	2b80      	cmp	r3, #128	@ 0x80
 8008be4:	d1c3      	bne.n	8008b6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008bfc:	e034      	b.n	8008c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 f89b 	bl	8008d3a <I2C_IsAcknowledgeFailed>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e034      	b.n	8008c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c14:	d028      	beq.n	8008c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c16:	f7fd fafb 	bl	8006210 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d302      	bcc.n	8008c2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d11d      	bne.n	8008c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	695b      	ldr	r3, [r3, #20]
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d016      	beq.n	8008c68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2220      	movs	r2, #32
 8008c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c54:	f043 0220 	orr.w	r2, r3, #32
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	e007      	b.n	8008c78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	f003 0304 	and.w	r3, r3, #4
 8008c72:	2b04      	cmp	r3, #4
 8008c74:	d1c3      	bne.n	8008bfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008c8c:	e049      	b.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	f003 0310 	and.w	r3, r3, #16
 8008c98:	2b10      	cmp	r3, #16
 8008c9a:	d119      	bne.n	8008cd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f06f 0210 	mvn.w	r2, #16
 8008ca4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	2220      	movs	r2, #32
 8008cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e030      	b.n	8008d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cd0:	f7fd fa9e 	bl	8006210 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	68ba      	ldr	r2, [r7, #8]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d302      	bcc.n	8008ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d11d      	bne.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	695b      	ldr	r3, [r3, #20]
 8008cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cf0:	2b40      	cmp	r3, #64	@ 0x40
 8008cf2:	d016      	beq.n	8008d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0e:	f043 0220 	orr.w	r2, r3, #32
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e007      	b.n	8008d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	695b      	ldr	r3, [r3, #20]
 8008d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d2c:	2b40      	cmp	r3, #64	@ 0x40
 8008d2e:	d1ae      	bne.n	8008c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b083      	sub	sp, #12
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d50:	d11b      	bne.n	8008d8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008d5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d76:	f043 0204 	orr.w	r2, r3, #4
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e000      	b.n	8008d8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e0cc      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008dac:	4b68      	ldr	r3, [pc, #416]	@ (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	683a      	ldr	r2, [r7, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d90c      	bls.n	8008dd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dba:	4b65      	ldr	r3, [pc, #404]	@ (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dbc:	683a      	ldr	r2, [r7, #0]
 8008dbe:	b2d2      	uxtb	r2, r2
 8008dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dc2:	4b63      	ldr	r3, [pc, #396]	@ (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 030f 	and.w	r3, r3, #15
 8008dca:	683a      	ldr	r2, [r7, #0]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d001      	beq.n	8008dd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e0b8      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d020      	beq.n	8008e22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008dec:	4b59      	ldr	r3, [pc, #356]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	4a58      	ldr	r2, [pc, #352]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008df2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008df6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0308 	and.w	r3, r3, #8
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e04:	4b53      	ldr	r3, [pc, #332]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	4a52      	ldr	r2, [pc, #328]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008e0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e10:	4b50      	ldr	r3, [pc, #320]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	494d      	ldr	r1, [pc, #308]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d044      	beq.n	8008eb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d107      	bne.n	8008e46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e36:	4b47      	ldr	r3, [pc, #284]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d119      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e07f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d003      	beq.n	8008e56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d107      	bne.n	8008e66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e56:	4b3f      	ldr	r3, [pc, #252]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e06f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e66:	4b3b      	ldr	r3, [pc, #236]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0302 	and.w	r3, r3, #2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d101      	bne.n	8008e76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e067      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008e76:	4b37      	ldr	r3, [pc, #220]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f023 0203 	bic.w	r2, r3, #3
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	4934      	ldr	r1, [pc, #208]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008e84:	4313      	orrs	r3, r2
 8008e86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008e88:	f7fd f9c2 	bl	8006210 <HAL_GetTick>
 8008e8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e8e:	e00a      	b.n	8008ea6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e90:	f7fd f9be 	bl	8006210 <HAL_GetTick>
 8008e94:	4602      	mov	r2, r0
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d901      	bls.n	8008ea6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	e04f      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ea6:	4b2b      	ldr	r3, [pc, #172]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	f003 020c 	and.w	r2, r3, #12
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d1eb      	bne.n	8008e90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008eb8:	4b25      	ldr	r3, [pc, #148]	@ (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 030f 	and.w	r3, r3, #15
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d20c      	bcs.n	8008ee0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ec6:	4b22      	ldr	r3, [pc, #136]	@ (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008ec8:	683a      	ldr	r2, [r7, #0]
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ece:	4b20      	ldr	r3, [pc, #128]	@ (8008f50 <HAL_RCC_ClockConfig+0x1b8>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 030f 	and.w	r3, r3, #15
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d001      	beq.n	8008ee0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e032      	b.n	8008f46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d008      	beq.n	8008efe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008eec:	4b19      	ldr	r3, [pc, #100]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	4916      	ldr	r1, [pc, #88]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008efa:	4313      	orrs	r3, r2
 8008efc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f0a:	4b12      	ldr	r3, [pc, #72]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	00db      	lsls	r3, r3, #3
 8008f18:	490e      	ldr	r1, [pc, #56]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f1e:	f000 f855 	bl	8008fcc <HAL_RCC_GetSysClockFreq>
 8008f22:	4602      	mov	r2, r0
 8008f24:	4b0b      	ldr	r3, [pc, #44]	@ (8008f54 <HAL_RCC_ClockConfig+0x1bc>)
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	091b      	lsrs	r3, r3, #4
 8008f2a:	f003 030f 	and.w	r3, r3, #15
 8008f2e:	490a      	ldr	r1, [pc, #40]	@ (8008f58 <HAL_RCC_ClockConfig+0x1c0>)
 8008f30:	5ccb      	ldrb	r3, [r1, r3]
 8008f32:	fa22 f303 	lsr.w	r3, r2, r3
 8008f36:	4a09      	ldr	r2, [pc, #36]	@ (8008f5c <HAL_RCC_ClockConfig+0x1c4>)
 8008f38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008f3a:	4b09      	ldr	r3, [pc, #36]	@ (8008f60 <HAL_RCC_ClockConfig+0x1c8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fd f922 	bl	8006188 <HAL_InitTick>

  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3710      	adds	r7, #16
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	40023c00 	.word	0x40023c00
 8008f54:	40023800 	.word	0x40023800
 8008f58:	080120e4 	.word	0x080120e4
 8008f5c:	2000002c 	.word	0x2000002c
 8008f60:	20000030 	.word	0x20000030

08008f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f64:	b480      	push	{r7}
 8008f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f68:	4b03      	ldr	r3, [pc, #12]	@ (8008f78 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	2000002c 	.word	0x2000002c

08008f7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f80:	f7ff fff0 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8008f84:	4602      	mov	r2, r0
 8008f86:	4b05      	ldr	r3, [pc, #20]	@ (8008f9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	0a9b      	lsrs	r3, r3, #10
 8008f8c:	f003 0307 	and.w	r3, r3, #7
 8008f90:	4903      	ldr	r1, [pc, #12]	@ (8008fa0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f92:	5ccb      	ldrb	r3, [r1, r3]
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	40023800 	.word	0x40023800
 8008fa0:	080120f4 	.word	0x080120f4

08008fa4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008fa8:	f7ff ffdc 	bl	8008f64 <HAL_RCC_GetHCLKFreq>
 8008fac:	4602      	mov	r2, r0
 8008fae:	4b05      	ldr	r3, [pc, #20]	@ (8008fc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	0b5b      	lsrs	r3, r3, #13
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	4903      	ldr	r1, [pc, #12]	@ (8008fc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fba:	5ccb      	ldrb	r3, [r1, r3]
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	40023800 	.word	0x40023800
 8008fc8:	080120f4 	.word	0x080120f4

08008fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fd0:	b0ae      	sub	sp, #184	@ 0xb8
 8008fd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ff2:	4bcb      	ldr	r3, [pc, #812]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f003 030c 	and.w	r3, r3, #12
 8008ffa:	2b0c      	cmp	r3, #12
 8008ffc:	f200 8206 	bhi.w	800940c <HAL_RCC_GetSysClockFreq+0x440>
 8009000:	a201      	add	r2, pc, #4	@ (adr r2, 8009008 <HAL_RCC_GetSysClockFreq+0x3c>)
 8009002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009006:	bf00      	nop
 8009008:	0800903d 	.word	0x0800903d
 800900c:	0800940d 	.word	0x0800940d
 8009010:	0800940d 	.word	0x0800940d
 8009014:	0800940d 	.word	0x0800940d
 8009018:	08009045 	.word	0x08009045
 800901c:	0800940d 	.word	0x0800940d
 8009020:	0800940d 	.word	0x0800940d
 8009024:	0800940d 	.word	0x0800940d
 8009028:	0800904d 	.word	0x0800904d
 800902c:	0800940d 	.word	0x0800940d
 8009030:	0800940d 	.word	0x0800940d
 8009034:	0800940d 	.word	0x0800940d
 8009038:	0800923d 	.word	0x0800923d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800903c:	4bb9      	ldr	r3, [pc, #740]	@ (8009324 <HAL_RCC_GetSysClockFreq+0x358>)
 800903e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009042:	e1e7      	b.n	8009414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009044:	4bb8      	ldr	r3, [pc, #736]	@ (8009328 <HAL_RCC_GetSysClockFreq+0x35c>)
 8009046:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800904a:	e1e3      	b.n	8009414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800904c:	4bb4      	ldr	r3, [pc, #720]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009054:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009058:	4bb1      	ldr	r3, [pc, #708]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d071      	beq.n	8009148 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009064:	4bae      	ldr	r3, [pc, #696]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	099b      	lsrs	r3, r3, #6
 800906a:	2200      	movs	r2, #0
 800906c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009070:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8009074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800907c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009080:	2300      	movs	r3, #0
 8009082:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800908a:	4622      	mov	r2, r4
 800908c:	462b      	mov	r3, r5
 800908e:	f04f 0000 	mov.w	r0, #0
 8009092:	f04f 0100 	mov.w	r1, #0
 8009096:	0159      	lsls	r1, r3, #5
 8009098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800909c:	0150      	lsls	r0, r2, #5
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4621      	mov	r1, r4
 80090a4:	1a51      	subs	r1, r2, r1
 80090a6:	6439      	str	r1, [r7, #64]	@ 0x40
 80090a8:	4629      	mov	r1, r5
 80090aa:	eb63 0301 	sbc.w	r3, r3, r1
 80090ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80090b0:	f04f 0200 	mov.w	r2, #0
 80090b4:	f04f 0300 	mov.w	r3, #0
 80090b8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80090bc:	4649      	mov	r1, r9
 80090be:	018b      	lsls	r3, r1, #6
 80090c0:	4641      	mov	r1, r8
 80090c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090c6:	4641      	mov	r1, r8
 80090c8:	018a      	lsls	r2, r1, #6
 80090ca:	4641      	mov	r1, r8
 80090cc:	1a51      	subs	r1, r2, r1
 80090ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80090d0:	4649      	mov	r1, r9
 80090d2:	eb63 0301 	sbc.w	r3, r3, r1
 80090d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090d8:	f04f 0200 	mov.w	r2, #0
 80090dc:	f04f 0300 	mov.w	r3, #0
 80090e0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80090e4:	4649      	mov	r1, r9
 80090e6:	00cb      	lsls	r3, r1, #3
 80090e8:	4641      	mov	r1, r8
 80090ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090ee:	4641      	mov	r1, r8
 80090f0:	00ca      	lsls	r2, r1, #3
 80090f2:	4610      	mov	r0, r2
 80090f4:	4619      	mov	r1, r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	4622      	mov	r2, r4
 80090fa:	189b      	adds	r3, r3, r2
 80090fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80090fe:	462b      	mov	r3, r5
 8009100:	460a      	mov	r2, r1
 8009102:	eb42 0303 	adc.w	r3, r2, r3
 8009106:	637b      	str	r3, [r7, #52]	@ 0x34
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	f04f 0300 	mov.w	r3, #0
 8009110:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009114:	4629      	mov	r1, r5
 8009116:	024b      	lsls	r3, r1, #9
 8009118:	4621      	mov	r1, r4
 800911a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800911e:	4621      	mov	r1, r4
 8009120:	024a      	lsls	r2, r1, #9
 8009122:	4610      	mov	r0, r2
 8009124:	4619      	mov	r1, r3
 8009126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800912a:	2200      	movs	r2, #0
 800912c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009130:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009134:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009138:	f7f7 ff24 	bl	8000f84 <__aeabi_uldivmod>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	4613      	mov	r3, r2
 8009142:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009146:	e067      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009148:	4b75      	ldr	r3, [pc, #468]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	099b      	lsrs	r3, r3, #6
 800914e:	2200      	movs	r2, #0
 8009150:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009154:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8009158:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800915c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009160:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009162:	2300      	movs	r3, #0
 8009164:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009166:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800916a:	4622      	mov	r2, r4
 800916c:	462b      	mov	r3, r5
 800916e:	f04f 0000 	mov.w	r0, #0
 8009172:	f04f 0100 	mov.w	r1, #0
 8009176:	0159      	lsls	r1, r3, #5
 8009178:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800917c:	0150      	lsls	r0, r2, #5
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4621      	mov	r1, r4
 8009184:	1a51      	subs	r1, r2, r1
 8009186:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009188:	4629      	mov	r1, r5
 800918a:	eb63 0301 	sbc.w	r3, r3, r1
 800918e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	f04f 0300 	mov.w	r3, #0
 8009198:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800919c:	4649      	mov	r1, r9
 800919e:	018b      	lsls	r3, r1, #6
 80091a0:	4641      	mov	r1, r8
 80091a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80091a6:	4641      	mov	r1, r8
 80091a8:	018a      	lsls	r2, r1, #6
 80091aa:	4641      	mov	r1, r8
 80091ac:	ebb2 0a01 	subs.w	sl, r2, r1
 80091b0:	4649      	mov	r1, r9
 80091b2:	eb63 0b01 	sbc.w	fp, r3, r1
 80091b6:	f04f 0200 	mov.w	r2, #0
 80091ba:	f04f 0300 	mov.w	r3, #0
 80091be:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091c2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091ca:	4692      	mov	sl, r2
 80091cc:	469b      	mov	fp, r3
 80091ce:	4623      	mov	r3, r4
 80091d0:	eb1a 0303 	adds.w	r3, sl, r3
 80091d4:	623b      	str	r3, [r7, #32]
 80091d6:	462b      	mov	r3, r5
 80091d8:	eb4b 0303 	adc.w	r3, fp, r3
 80091dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80091de:	f04f 0200 	mov.w	r2, #0
 80091e2:	f04f 0300 	mov.w	r3, #0
 80091e6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80091ea:	4629      	mov	r1, r5
 80091ec:	028b      	lsls	r3, r1, #10
 80091ee:	4621      	mov	r1, r4
 80091f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091f4:	4621      	mov	r1, r4
 80091f6:	028a      	lsls	r2, r1, #10
 80091f8:	4610      	mov	r0, r2
 80091fa:	4619      	mov	r1, r3
 80091fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009200:	2200      	movs	r2, #0
 8009202:	673b      	str	r3, [r7, #112]	@ 0x70
 8009204:	677a      	str	r2, [r7, #116]	@ 0x74
 8009206:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800920a:	f7f7 febb 	bl	8000f84 <__aeabi_uldivmod>
 800920e:	4602      	mov	r2, r0
 8009210:	460b      	mov	r3, r1
 8009212:	4613      	mov	r3, r2
 8009214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009218:	4b41      	ldr	r3, [pc, #260]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	0c1b      	lsrs	r3, r3, #16
 800921e:	f003 0303 	and.w	r3, r3, #3
 8009222:	3301      	adds	r3, #1
 8009224:	005b      	lsls	r3, r3, #1
 8009226:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800922a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800922e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009232:	fbb2 f3f3 	udiv	r3, r2, r3
 8009236:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800923a:	e0eb      	b.n	8009414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800923c:	4b38      	ldr	r3, [pc, #224]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009248:	4b35      	ldr	r3, [pc, #212]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d06b      	beq.n	800932c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009254:	4b32      	ldr	r3, [pc, #200]	@ (8009320 <HAL_RCC_GetSysClockFreq+0x354>)
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	099b      	lsrs	r3, r3, #6
 800925a:	2200      	movs	r2, #0
 800925c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800925e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009260:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009266:	663b      	str	r3, [r7, #96]	@ 0x60
 8009268:	2300      	movs	r3, #0
 800926a:	667b      	str	r3, [r7, #100]	@ 0x64
 800926c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009270:	4622      	mov	r2, r4
 8009272:	462b      	mov	r3, r5
 8009274:	f04f 0000 	mov.w	r0, #0
 8009278:	f04f 0100 	mov.w	r1, #0
 800927c:	0159      	lsls	r1, r3, #5
 800927e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009282:	0150      	lsls	r0, r2, #5
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4621      	mov	r1, r4
 800928a:	1a51      	subs	r1, r2, r1
 800928c:	61b9      	str	r1, [r7, #24]
 800928e:	4629      	mov	r1, r5
 8009290:	eb63 0301 	sbc.w	r3, r3, r1
 8009294:	61fb      	str	r3, [r7, #28]
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80092a2:	4659      	mov	r1, fp
 80092a4:	018b      	lsls	r3, r1, #6
 80092a6:	4651      	mov	r1, sl
 80092a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092ac:	4651      	mov	r1, sl
 80092ae:	018a      	lsls	r2, r1, #6
 80092b0:	4651      	mov	r1, sl
 80092b2:	ebb2 0801 	subs.w	r8, r2, r1
 80092b6:	4659      	mov	r1, fp
 80092b8:	eb63 0901 	sbc.w	r9, r3, r1
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092d0:	4690      	mov	r8, r2
 80092d2:	4699      	mov	r9, r3
 80092d4:	4623      	mov	r3, r4
 80092d6:	eb18 0303 	adds.w	r3, r8, r3
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	462b      	mov	r3, r5
 80092de:	eb49 0303 	adc.w	r3, r9, r3
 80092e2:	617b      	str	r3, [r7, #20]
 80092e4:	f04f 0200 	mov.w	r2, #0
 80092e8:	f04f 0300 	mov.w	r3, #0
 80092ec:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80092f0:	4629      	mov	r1, r5
 80092f2:	024b      	lsls	r3, r1, #9
 80092f4:	4621      	mov	r1, r4
 80092f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80092fa:	4621      	mov	r1, r4
 80092fc:	024a      	lsls	r2, r1, #9
 80092fe:	4610      	mov	r0, r2
 8009300:	4619      	mov	r1, r3
 8009302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009306:	2200      	movs	r2, #0
 8009308:	65bb      	str	r3, [r7, #88]	@ 0x58
 800930a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800930c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009310:	f7f7 fe38 	bl	8000f84 <__aeabi_uldivmod>
 8009314:	4602      	mov	r2, r0
 8009316:	460b      	mov	r3, r1
 8009318:	4613      	mov	r3, r2
 800931a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800931e:	e065      	b.n	80093ec <HAL_RCC_GetSysClockFreq+0x420>
 8009320:	40023800 	.word	0x40023800
 8009324:	00f42400 	.word	0x00f42400
 8009328:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800932c:	4b3d      	ldr	r3, [pc, #244]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x458>)
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	099b      	lsrs	r3, r3, #6
 8009332:	2200      	movs	r2, #0
 8009334:	4618      	mov	r0, r3
 8009336:	4611      	mov	r1, r2
 8009338:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800933c:	653b      	str	r3, [r7, #80]	@ 0x50
 800933e:	2300      	movs	r3, #0
 8009340:	657b      	str	r3, [r7, #84]	@ 0x54
 8009342:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009346:	4642      	mov	r2, r8
 8009348:	464b      	mov	r3, r9
 800934a:	f04f 0000 	mov.w	r0, #0
 800934e:	f04f 0100 	mov.w	r1, #0
 8009352:	0159      	lsls	r1, r3, #5
 8009354:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009358:	0150      	lsls	r0, r2, #5
 800935a:	4602      	mov	r2, r0
 800935c:	460b      	mov	r3, r1
 800935e:	4641      	mov	r1, r8
 8009360:	1a51      	subs	r1, r2, r1
 8009362:	60b9      	str	r1, [r7, #8]
 8009364:	4649      	mov	r1, r9
 8009366:	eb63 0301 	sbc.w	r3, r3, r1
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	f04f 0200 	mov.w	r2, #0
 8009370:	f04f 0300 	mov.w	r3, #0
 8009374:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8009378:	4659      	mov	r1, fp
 800937a:	018b      	lsls	r3, r1, #6
 800937c:	4651      	mov	r1, sl
 800937e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009382:	4651      	mov	r1, sl
 8009384:	018a      	lsls	r2, r1, #6
 8009386:	4651      	mov	r1, sl
 8009388:	1a54      	subs	r4, r2, r1
 800938a:	4659      	mov	r1, fp
 800938c:	eb63 0501 	sbc.w	r5, r3, r1
 8009390:	f04f 0200 	mov.w	r2, #0
 8009394:	f04f 0300 	mov.w	r3, #0
 8009398:	00eb      	lsls	r3, r5, #3
 800939a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800939e:	00e2      	lsls	r2, r4, #3
 80093a0:	4614      	mov	r4, r2
 80093a2:	461d      	mov	r5, r3
 80093a4:	4643      	mov	r3, r8
 80093a6:	18e3      	adds	r3, r4, r3
 80093a8:	603b      	str	r3, [r7, #0]
 80093aa:	464b      	mov	r3, r9
 80093ac:	eb45 0303 	adc.w	r3, r5, r3
 80093b0:	607b      	str	r3, [r7, #4]
 80093b2:	f04f 0200 	mov.w	r2, #0
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093be:	4629      	mov	r1, r5
 80093c0:	028b      	lsls	r3, r1, #10
 80093c2:	4621      	mov	r1, r4
 80093c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093c8:	4621      	mov	r1, r4
 80093ca:	028a      	lsls	r2, r1, #10
 80093cc:	4610      	mov	r0, r2
 80093ce:	4619      	mov	r1, r3
 80093d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093d4:	2200      	movs	r2, #0
 80093d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80093d8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80093da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80093de:	f7f7 fdd1 	bl	8000f84 <__aeabi_uldivmod>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4613      	mov	r3, r2
 80093e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80093ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009424 <HAL_RCC_GetSysClockFreq+0x458>)
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	0f1b      	lsrs	r3, r3, #28
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80093fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80093fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009402:	fbb2 f3f3 	udiv	r3, r2, r3
 8009406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800940a:	e003      	b.n	8009414 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800940c:	4b06      	ldr	r3, [pc, #24]	@ (8009428 <HAL_RCC_GetSysClockFreq+0x45c>)
 800940e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8009412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8009418:	4618      	mov	r0, r3
 800941a:	37b8      	adds	r7, #184	@ 0xb8
 800941c:	46bd      	mov	sp, r7
 800941e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009422:	bf00      	nop
 8009424:	40023800 	.word	0x40023800
 8009428:	00f42400 	.word	0x00f42400

0800942c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800943a:	2301      	movs	r3, #1
 800943c:	e28d      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	f000 8083 	beq.w	8009552 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800944c:	4b94      	ldr	r3, [pc, #592]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 800944e:	689b      	ldr	r3, [r3, #8]
 8009450:	f003 030c 	and.w	r3, r3, #12
 8009454:	2b04      	cmp	r3, #4
 8009456:	d019      	beq.n	800948c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009458:	4b91      	ldr	r3, [pc, #580]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	f003 030c 	and.w	r3, r3, #12
        || \
 8009460:	2b08      	cmp	r3, #8
 8009462:	d106      	bne.n	8009472 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8009464:	4b8e      	ldr	r3, [pc, #568]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800946c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009470:	d00c      	beq.n	800948c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009472:	4b8b      	ldr	r3, [pc, #556]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800947a:	2b0c      	cmp	r3, #12
 800947c:	d112      	bne.n	80094a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800947e:	4b88      	ldr	r3, [pc, #544]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800948a:	d10b      	bne.n	80094a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800948c:	4b84      	ldr	r3, [pc, #528]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d05b      	beq.n	8009550 <HAL_RCC_OscConfig+0x124>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d157      	bne.n	8009550 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e25a      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094ac:	d106      	bne.n	80094bc <HAL_RCC_OscConfig+0x90>
 80094ae:	4b7c      	ldr	r3, [pc, #496]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a7b      	ldr	r2, [pc, #492]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094b8:	6013      	str	r3, [r2, #0]
 80094ba:	e01d      	b.n	80094f8 <HAL_RCC_OscConfig+0xcc>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80094c4:	d10c      	bne.n	80094e0 <HAL_RCC_OscConfig+0xb4>
 80094c6:	4b76      	ldr	r3, [pc, #472]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a75      	ldr	r2, [pc, #468]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80094d0:	6013      	str	r3, [r2, #0]
 80094d2:	4b73      	ldr	r3, [pc, #460]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a72      	ldr	r2, [pc, #456]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094dc:	6013      	str	r3, [r2, #0]
 80094de:	e00b      	b.n	80094f8 <HAL_RCC_OscConfig+0xcc>
 80094e0:	4b6f      	ldr	r3, [pc, #444]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a6e      	ldr	r2, [pc, #440]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	4b6c      	ldr	r3, [pc, #432]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a6b      	ldr	r2, [pc, #428]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80094f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80094f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	685b      	ldr	r3, [r3, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d013      	beq.n	8009528 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009500:	f7fc fe86 	bl	8006210 <HAL_GetTick>
 8009504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009506:	e008      	b.n	800951a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009508:	f7fc fe82 	bl	8006210 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b64      	cmp	r3, #100	@ 0x64
 8009514:	d901      	bls.n	800951a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e21f      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800951a:	4b61      	ldr	r3, [pc, #388]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0f0      	beq.n	8009508 <HAL_RCC_OscConfig+0xdc>
 8009526:	e014      	b.n	8009552 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009528:	f7fc fe72 	bl	8006210 <HAL_GetTick>
 800952c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800952e:	e008      	b.n	8009542 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009530:	f7fc fe6e 	bl	8006210 <HAL_GetTick>
 8009534:	4602      	mov	r2, r0
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	2b64      	cmp	r3, #100	@ 0x64
 800953c:	d901      	bls.n	8009542 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e20b      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009542:	4b57      	ldr	r3, [pc, #348]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1f0      	bne.n	8009530 <HAL_RCC_OscConfig+0x104>
 800954e:	e000      	b.n	8009552 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d06f      	beq.n	800963e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800955e:	4b50      	ldr	r3, [pc, #320]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	f003 030c 	and.w	r3, r3, #12
 8009566:	2b00      	cmp	r3, #0
 8009568:	d017      	beq.n	800959a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800956a:	4b4d      	ldr	r3, [pc, #308]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f003 030c 	and.w	r3, r3, #12
        || \
 8009572:	2b08      	cmp	r3, #8
 8009574:	d105      	bne.n	8009582 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8009576:	4b4a      	ldr	r3, [pc, #296]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009582:	4b47      	ldr	r3, [pc, #284]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800958a:	2b0c      	cmp	r3, #12
 800958c:	d11c      	bne.n	80095c8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800958e:	4b44      	ldr	r3, [pc, #272]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d116      	bne.n	80095c8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800959a:	4b41      	ldr	r3, [pc, #260]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0302 	and.w	r3, r3, #2
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d005      	beq.n	80095b2 <HAL_RCC_OscConfig+0x186>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d001      	beq.n	80095b2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e1d3      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095b2:	4b3b      	ldr	r3, [pc, #236]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	00db      	lsls	r3, r3, #3
 80095c0:	4937      	ldr	r1, [pc, #220]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80095c2:	4313      	orrs	r3, r2
 80095c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80095c6:	e03a      	b.n	800963e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d020      	beq.n	8009612 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80095d0:	4b34      	ldr	r3, [pc, #208]	@ (80096a4 <HAL_RCC_OscConfig+0x278>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095d6:	f7fc fe1b 	bl	8006210 <HAL_GetTick>
 80095da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095dc:	e008      	b.n	80095f0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80095de:	f7fc fe17 	bl	8006210 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	693b      	ldr	r3, [r7, #16]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d901      	bls.n	80095f0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80095ec:	2303      	movs	r3, #3
 80095ee:	e1b4      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095f0:	4b2b      	ldr	r3, [pc, #172]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0f0      	beq.n	80095de <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80095fc:	4b28      	ldr	r3, [pc, #160]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	4925      	ldr	r1, [pc, #148]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 800960c:	4313      	orrs	r3, r2
 800960e:	600b      	str	r3, [r1, #0]
 8009610:	e015      	b.n	800963e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009612:	4b24      	ldr	r3, [pc, #144]	@ (80096a4 <HAL_RCC_OscConfig+0x278>)
 8009614:	2200      	movs	r2, #0
 8009616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009618:	f7fc fdfa 	bl	8006210 <HAL_GetTick>
 800961c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800961e:	e008      	b.n	8009632 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009620:	f7fc fdf6 	bl	8006210 <HAL_GetTick>
 8009624:	4602      	mov	r2, r0
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	2b02      	cmp	r3, #2
 800962c:	d901      	bls.n	8009632 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800962e:	2303      	movs	r3, #3
 8009630:	e193      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009632:	4b1b      	ldr	r3, [pc, #108]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0302 	and.w	r3, r3, #2
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1f0      	bne.n	8009620 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0308 	and.w	r3, r3, #8
 8009646:	2b00      	cmp	r3, #0
 8009648:	d036      	beq.n	80096b8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d016      	beq.n	8009680 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009652:	4b15      	ldr	r3, [pc, #84]	@ (80096a8 <HAL_RCC_OscConfig+0x27c>)
 8009654:	2201      	movs	r2, #1
 8009656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009658:	f7fc fdda 	bl	8006210 <HAL_GetTick>
 800965c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800965e:	e008      	b.n	8009672 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009660:	f7fc fdd6 	bl	8006210 <HAL_GetTick>
 8009664:	4602      	mov	r2, r0
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	1ad3      	subs	r3, r2, r3
 800966a:	2b02      	cmp	r3, #2
 800966c:	d901      	bls.n	8009672 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800966e:	2303      	movs	r3, #3
 8009670:	e173      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009672:	4b0b      	ldr	r3, [pc, #44]	@ (80096a0 <HAL_RCC_OscConfig+0x274>)
 8009674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009676:	f003 0302 	and.w	r3, r3, #2
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0f0      	beq.n	8009660 <HAL_RCC_OscConfig+0x234>
 800967e:	e01b      	b.n	80096b8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009680:	4b09      	ldr	r3, [pc, #36]	@ (80096a8 <HAL_RCC_OscConfig+0x27c>)
 8009682:	2200      	movs	r2, #0
 8009684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009686:	f7fc fdc3 	bl	8006210 <HAL_GetTick>
 800968a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800968c:	e00e      	b.n	80096ac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800968e:	f7fc fdbf 	bl	8006210 <HAL_GetTick>
 8009692:	4602      	mov	r2, r0
 8009694:	693b      	ldr	r3, [r7, #16]
 8009696:	1ad3      	subs	r3, r2, r3
 8009698:	2b02      	cmp	r3, #2
 800969a:	d907      	bls.n	80096ac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800969c:	2303      	movs	r3, #3
 800969e:	e15c      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
 80096a0:	40023800 	.word	0x40023800
 80096a4:	42470000 	.word	0x42470000
 80096a8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80096ac:	4b8a      	ldr	r3, [pc, #552]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80096ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80096b0:	f003 0302 	and.w	r3, r3, #2
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1ea      	bne.n	800968e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f000 8097 	beq.w	80097f4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096c6:	2300      	movs	r3, #0
 80096c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096ca:	4b83      	ldr	r3, [pc, #524]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80096cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10f      	bne.n	80096f6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096d6:	2300      	movs	r3, #0
 80096d8:	60bb      	str	r3, [r7, #8]
 80096da:	4b7f      	ldr	r3, [pc, #508]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80096dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096de:	4a7e      	ldr	r2, [pc, #504]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80096e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80096e6:	4b7c      	ldr	r3, [pc, #496]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80096e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80096ee:	60bb      	str	r3, [r7, #8]
 80096f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80096f2:	2301      	movs	r3, #1
 80096f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096f6:	4b79      	ldr	r3, [pc, #484]	@ (80098dc <HAL_RCC_OscConfig+0x4b0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d118      	bne.n	8009734 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009702:	4b76      	ldr	r3, [pc, #472]	@ (80098dc <HAL_RCC_OscConfig+0x4b0>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a75      	ldr	r2, [pc, #468]	@ (80098dc <HAL_RCC_OscConfig+0x4b0>)
 8009708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800970c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800970e:	f7fc fd7f 	bl	8006210 <HAL_GetTick>
 8009712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009714:	e008      	b.n	8009728 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009716:	f7fc fd7b 	bl	8006210 <HAL_GetTick>
 800971a:	4602      	mov	r2, r0
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	1ad3      	subs	r3, r2, r3
 8009720:	2b02      	cmp	r3, #2
 8009722:	d901      	bls.n	8009728 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8009724:	2303      	movs	r3, #3
 8009726:	e118      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009728:	4b6c      	ldr	r3, [pc, #432]	@ (80098dc <HAL_RCC_OscConfig+0x4b0>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0f0      	beq.n	8009716 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d106      	bne.n	800974a <HAL_RCC_OscConfig+0x31e>
 800973c:	4b66      	ldr	r3, [pc, #408]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 800973e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009740:	4a65      	ldr	r2, [pc, #404]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009742:	f043 0301 	orr.w	r3, r3, #1
 8009746:	6713      	str	r3, [r2, #112]	@ 0x70
 8009748:	e01c      	b.n	8009784 <HAL_RCC_OscConfig+0x358>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	2b05      	cmp	r3, #5
 8009750:	d10c      	bne.n	800976c <HAL_RCC_OscConfig+0x340>
 8009752:	4b61      	ldr	r3, [pc, #388]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009754:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009756:	4a60      	ldr	r2, [pc, #384]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009758:	f043 0304 	orr.w	r3, r3, #4
 800975c:	6713      	str	r3, [r2, #112]	@ 0x70
 800975e:	4b5e      	ldr	r3, [pc, #376]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009762:	4a5d      	ldr	r2, [pc, #372]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009764:	f043 0301 	orr.w	r3, r3, #1
 8009768:	6713      	str	r3, [r2, #112]	@ 0x70
 800976a:	e00b      	b.n	8009784 <HAL_RCC_OscConfig+0x358>
 800976c:	4b5a      	ldr	r3, [pc, #360]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 800976e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009770:	4a59      	ldr	r2, [pc, #356]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009772:	f023 0301 	bic.w	r3, r3, #1
 8009776:	6713      	str	r3, [r2, #112]	@ 0x70
 8009778:	4b57      	ldr	r3, [pc, #348]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 800977a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800977c:	4a56      	ldr	r2, [pc, #344]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 800977e:	f023 0304 	bic.w	r3, r3, #4
 8009782:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d015      	beq.n	80097b8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800978c:	f7fc fd40 	bl	8006210 <HAL_GetTick>
 8009790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009792:	e00a      	b.n	80097aa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009794:	f7fc fd3c 	bl	8006210 <HAL_GetTick>
 8009798:	4602      	mov	r2, r0
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	1ad3      	subs	r3, r2, r3
 800979e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e0d7      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80097aa:	4b4b      	ldr	r3, [pc, #300]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80097ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ae:	f003 0302 	and.w	r3, r3, #2
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0ee      	beq.n	8009794 <HAL_RCC_OscConfig+0x368>
 80097b6:	e014      	b.n	80097e2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097b8:	f7fc fd2a 	bl	8006210 <HAL_GetTick>
 80097bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097be:	e00a      	b.n	80097d6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097c0:	f7fc fd26 	bl	8006210 <HAL_GetTick>
 80097c4:	4602      	mov	r2, r0
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d901      	bls.n	80097d6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80097d2:	2303      	movs	r3, #3
 80097d4:	e0c1      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80097d6:	4b40      	ldr	r3, [pc, #256]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80097d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1ee      	bne.n	80097c0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d105      	bne.n	80097f4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80097e8:	4b3b      	ldr	r3, [pc, #236]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80097ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097ec:	4a3a      	ldr	r2, [pc, #232]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80097ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	699b      	ldr	r3, [r3, #24]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f000 80ad 	beq.w	8009958 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80097fe:	4b36      	ldr	r3, [pc, #216]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	f003 030c 	and.w	r3, r3, #12
 8009806:	2b08      	cmp	r3, #8
 8009808:	d060      	beq.n	80098cc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	699b      	ldr	r3, [r3, #24]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d145      	bne.n	800989e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009812:	4b33      	ldr	r3, [pc, #204]	@ (80098e0 <HAL_RCC_OscConfig+0x4b4>)
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009818:	f7fc fcfa 	bl	8006210 <HAL_GetTick>
 800981c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800981e:	e008      	b.n	8009832 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009820:	f7fc fcf6 	bl	8006210 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	2b02      	cmp	r3, #2
 800982c:	d901      	bls.n	8009832 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e093      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009832:	4b29      	ldr	r3, [pc, #164]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1f0      	bne.n	8009820 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	69da      	ldr	r2, [r3, #28]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	431a      	orrs	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800984c:	019b      	lsls	r3, r3, #6
 800984e:	431a      	orrs	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	3b01      	subs	r3, #1
 8009858:	041b      	lsls	r3, r3, #16
 800985a:	431a      	orrs	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009860:	061b      	lsls	r3, r3, #24
 8009862:	431a      	orrs	r2, r3
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009868:	071b      	lsls	r3, r3, #28
 800986a:	491b      	ldr	r1, [pc, #108]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 800986c:	4313      	orrs	r3, r2
 800986e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009870:	4b1b      	ldr	r3, [pc, #108]	@ (80098e0 <HAL_RCC_OscConfig+0x4b4>)
 8009872:	2201      	movs	r2, #1
 8009874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009876:	f7fc fccb 	bl	8006210 <HAL_GetTick>
 800987a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800987c:	e008      	b.n	8009890 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800987e:	f7fc fcc7 	bl	8006210 <HAL_GetTick>
 8009882:	4602      	mov	r2, r0
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	2b02      	cmp	r3, #2
 800988a:	d901      	bls.n	8009890 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e064      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009890:	4b11      	ldr	r3, [pc, #68]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d0f0      	beq.n	800987e <HAL_RCC_OscConfig+0x452>
 800989c:	e05c      	b.n	8009958 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800989e:	4b10      	ldr	r3, [pc, #64]	@ (80098e0 <HAL_RCC_OscConfig+0x4b4>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a4:	f7fc fcb4 	bl	8006210 <HAL_GetTick>
 80098a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098aa:	e008      	b.n	80098be <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80098ac:	f7fc fcb0 	bl	8006210 <HAL_GetTick>
 80098b0:	4602      	mov	r2, r0
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	1ad3      	subs	r3, r2, r3
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d901      	bls.n	80098be <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e04d      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098be:	4b06      	ldr	r3, [pc, #24]	@ (80098d8 <HAL_RCC_OscConfig+0x4ac>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1f0      	bne.n	80098ac <HAL_RCC_OscConfig+0x480>
 80098ca:	e045      	b.n	8009958 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d107      	bne.n	80098e4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	e040      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
 80098d8:	40023800 	.word	0x40023800
 80098dc:	40007000 	.word	0x40007000
 80098e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80098e4:	4b1f      	ldr	r3, [pc, #124]	@ (8009964 <HAL_RCC_OscConfig+0x538>)
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d030      	beq.n	8009954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098fc:	429a      	cmp	r2, r3
 80098fe:	d129      	bne.n	8009954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800990a:	429a      	cmp	r2, r3
 800990c:	d122      	bne.n	8009954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009914:	4013      	ands	r3, r2
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800991a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800991c:	4293      	cmp	r3, r2
 800991e:	d119      	bne.n	8009954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992a:	085b      	lsrs	r3, r3, #1
 800992c:	3b01      	subs	r3, #1
 800992e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009930:	429a      	cmp	r2, r3
 8009932:	d10f      	bne.n	8009954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009940:	429a      	cmp	r2, r3
 8009942:	d107      	bne.n	8009954 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800994e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009950:	429a      	cmp	r2, r3
 8009952:	d001      	beq.n	8009958 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e000      	b.n	800995a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	3718      	adds	r7, #24
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	40023800 	.word	0x40023800

08009968 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e041      	b.n	80099fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7fc f954 	bl	8005c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2202      	movs	r2, #2
 8009998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3304      	adds	r3, #4
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f000 fa7e 	bl	8009ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
	...

08009a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d001      	beq.n	8009a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e04e      	b.n	8009abe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2202      	movs	r2, #2
 8009a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68da      	ldr	r2, [r3, #12]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f042 0201 	orr.w	r2, r2, #1
 8009a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a23      	ldr	r2, [pc, #140]	@ (8009acc <HAL_TIM_Base_Start_IT+0xc4>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d022      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a4a:	d01d      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a1f      	ldr	r2, [pc, #124]	@ (8009ad0 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d018      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad4 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d013      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a1c      	ldr	r2, [pc, #112]	@ (8009ad8 <HAL_TIM_Base_Start_IT+0xd0>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d00e      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a1b      	ldr	r2, [pc, #108]	@ (8009adc <HAL_TIM_Base_Start_IT+0xd4>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d009      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a19      	ldr	r2, [pc, #100]	@ (8009ae0 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d004      	beq.n	8009a88 <HAL_TIM_Base_Start_IT+0x80>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a18      	ldr	r2, [pc, #96]	@ (8009ae4 <HAL_TIM_Base_Start_IT+0xdc>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d111      	bne.n	8009aac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f003 0307 	and.w	r3, r3, #7
 8009a92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b06      	cmp	r3, #6
 8009a98:	d010      	beq.n	8009abc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 0201 	orr.w	r2, r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aaa:	e007      	b.n	8009abc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f042 0201 	orr.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009abc:	2300      	movs	r3, #0
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3714      	adds	r7, #20
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40010000 	.word	0x40010000
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	40010400 	.word	0x40010400
 8009ae0:	40014000 	.word	0x40014000
 8009ae4:	40001800 	.word	0x40001800

08009ae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d020      	beq.n	8009b4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d01b      	beq.n	8009b4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f06f 0202 	mvn.w	r2, #2
 8009b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2201      	movs	r2, #1
 8009b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	699b      	ldr	r3, [r3, #24]
 8009b2a:	f003 0303 	and.w	r3, r3, #3
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d003      	beq.n	8009b3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f999 	bl	8009e6a <HAL_TIM_IC_CaptureCallback>
 8009b38:	e005      	b.n	8009b46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f98b 	bl	8009e56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f000 f99c 	bl	8009e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d020      	beq.n	8009b98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d01b      	beq.n	8009b98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f06f 0204 	mvn.w	r2, #4
 8009b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 f973 	bl	8009e6a <HAL_TIM_IC_CaptureCallback>
 8009b84:	e005      	b.n	8009b92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f965 	bl	8009e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f976 	bl	8009e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2200      	movs	r2, #0
 8009b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f003 0308 	and.w	r3, r3, #8
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d020      	beq.n	8009be4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f003 0308 	and.w	r3, r3, #8
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01b      	beq.n	8009be4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f06f 0208 	mvn.w	r2, #8
 8009bb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2204      	movs	r2, #4
 8009bba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	69db      	ldr	r3, [r3, #28]
 8009bc2:	f003 0303 	and.w	r3, r3, #3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f94d 	bl	8009e6a <HAL_TIM_IC_CaptureCallback>
 8009bd0:	e005      	b.n	8009bde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f93f 	bl	8009e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f950 	bl	8009e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	f003 0310 	and.w	r3, r3, #16
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d020      	beq.n	8009c30 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d01b      	beq.n	8009c30 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f06f 0210 	mvn.w	r2, #16
 8009c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2208      	movs	r2, #8
 8009c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	69db      	ldr	r3, [r3, #28]
 8009c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f927 	bl	8009e6a <HAL_TIM_IC_CaptureCallback>
 8009c1c:	e005      	b.n	8009c2a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f919 	bl	8009e56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f92a 	bl	8009e7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	f003 0301 	and.w	r3, r3, #1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00c      	beq.n	8009c54 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d007      	beq.n	8009c54 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f06f 0201 	mvn.w	r2, #1
 8009c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7fa f8be 	bl	8003dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00c      	beq.n	8009c78 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d007      	beq.n	8009c78 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 fade 	bl	800a234 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d00c      	beq.n	8009c9c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d007      	beq.n	8009c9c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009c94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f000 f8fb 	bl	8009e92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	f003 0320 	and.w	r3, r3, #32
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00c      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d007      	beq.n	8009cc0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0220 	mvn.w	r2, #32
 8009cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 fab0 	bl	800a220 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cc0:	bf00      	nop
 8009cc2:	3710      	adds	r7, #16
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d101      	bne.n	8009ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	e0b4      	b.n	8009e4e <HAL_TIM_ConfigClockSource+0x186>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2202      	movs	r2, #2
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009d02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68ba      	ldr	r2, [r7, #8]
 8009d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d1c:	d03e      	beq.n	8009d9c <HAL_TIM_ConfigClockSource+0xd4>
 8009d1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d22:	f200 8087 	bhi.w	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d2a:	f000 8086 	beq.w	8009e3a <HAL_TIM_ConfigClockSource+0x172>
 8009d2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d32:	d87f      	bhi.n	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d34:	2b70      	cmp	r3, #112	@ 0x70
 8009d36:	d01a      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0xa6>
 8009d38:	2b70      	cmp	r3, #112	@ 0x70
 8009d3a:	d87b      	bhi.n	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d3c:	2b60      	cmp	r3, #96	@ 0x60
 8009d3e:	d050      	beq.n	8009de2 <HAL_TIM_ConfigClockSource+0x11a>
 8009d40:	2b60      	cmp	r3, #96	@ 0x60
 8009d42:	d877      	bhi.n	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d44:	2b50      	cmp	r3, #80	@ 0x50
 8009d46:	d03c      	beq.n	8009dc2 <HAL_TIM_ConfigClockSource+0xfa>
 8009d48:	2b50      	cmp	r3, #80	@ 0x50
 8009d4a:	d873      	bhi.n	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d4c:	2b40      	cmp	r3, #64	@ 0x40
 8009d4e:	d058      	beq.n	8009e02 <HAL_TIM_ConfigClockSource+0x13a>
 8009d50:	2b40      	cmp	r3, #64	@ 0x40
 8009d52:	d86f      	bhi.n	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d54:	2b30      	cmp	r3, #48	@ 0x30
 8009d56:	d064      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x15a>
 8009d58:	2b30      	cmp	r3, #48	@ 0x30
 8009d5a:	d86b      	bhi.n	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d5c:	2b20      	cmp	r3, #32
 8009d5e:	d060      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x15a>
 8009d60:	2b20      	cmp	r3, #32
 8009d62:	d867      	bhi.n	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d05c      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x15a>
 8009d68:	2b10      	cmp	r3, #16
 8009d6a:	d05a      	beq.n	8009e22 <HAL_TIM_ConfigClockSource+0x15a>
 8009d6c:	e062      	b.n	8009e34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009d7e:	f000 f9b3 	bl	800a0e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689b      	ldr	r3, [r3, #8]
 8009d88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009d90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	609a      	str	r2, [r3, #8]
      break;
 8009d9a:	e04f      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009dac:	f000 f99c 	bl	800a0e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	689a      	ldr	r2, [r3, #8]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009dbe:	609a      	str	r2, [r3, #8]
      break;
 8009dc0:	e03c      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f000 f910 	bl	8009ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2150      	movs	r1, #80	@ 0x50
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f969 	bl	800a0b2 <TIM_ITRx_SetConfig>
      break;
 8009de0:	e02c      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009dee:	461a      	mov	r2, r3
 8009df0:	f000 f92f 	bl	800a052 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2160      	movs	r1, #96	@ 0x60
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f000 f959 	bl	800a0b2 <TIM_ITRx_SetConfig>
      break;
 8009e00:	e01c      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e0e:	461a      	mov	r2, r3
 8009e10:	f000 f8f0 	bl	8009ff4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2140      	movs	r1, #64	@ 0x40
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 f949 	bl	800a0b2 <TIM_ITRx_SetConfig>
      break;
 8009e20:	e00c      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	4610      	mov	r0, r2
 8009e2e:	f000 f940 	bl	800a0b2 <TIM_ITRx_SetConfig>
      break;
 8009e32:	e003      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	73fb      	strb	r3, [r7, #15]
      break;
 8009e38:	e000      	b.n	8009e3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009e3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e56:	b480      	push	{r7}
 8009e58:	b083      	sub	sp, #12
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e5e:	bf00      	nop
 8009e60:	370c      	adds	r7, #12
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr

08009e6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr
	...

08009ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4a43      	ldr	r2, [pc, #268]	@ (8009fc8 <TIM_Base_SetConfig+0x120>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d013      	beq.n	8009ee8 <TIM_Base_SetConfig+0x40>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ec6:	d00f      	beq.n	8009ee8 <TIM_Base_SetConfig+0x40>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	4a40      	ldr	r2, [pc, #256]	@ (8009fcc <TIM_Base_SetConfig+0x124>)
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d00b      	beq.n	8009ee8 <TIM_Base_SetConfig+0x40>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8009fd0 <TIM_Base_SetConfig+0x128>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d007      	beq.n	8009ee8 <TIM_Base_SetConfig+0x40>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a3e      	ldr	r2, [pc, #248]	@ (8009fd4 <TIM_Base_SetConfig+0x12c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d003      	beq.n	8009ee8 <TIM_Base_SetConfig+0x40>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a3d      	ldr	r2, [pc, #244]	@ (8009fd8 <TIM_Base_SetConfig+0x130>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d108      	bne.n	8009efa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009eee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	685b      	ldr	r3, [r3, #4]
 8009ef4:	68fa      	ldr	r2, [r7, #12]
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4a32      	ldr	r2, [pc, #200]	@ (8009fc8 <TIM_Base_SetConfig+0x120>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d02b      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f08:	d027      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4a2f      	ldr	r2, [pc, #188]	@ (8009fcc <TIM_Base_SetConfig+0x124>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d023      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a2e      	ldr	r2, [pc, #184]	@ (8009fd0 <TIM_Base_SetConfig+0x128>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d01f      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	4a2d      	ldr	r2, [pc, #180]	@ (8009fd4 <TIM_Base_SetConfig+0x12c>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d01b      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	4a2c      	ldr	r2, [pc, #176]	@ (8009fd8 <TIM_Base_SetConfig+0x130>)
 8009f26:	4293      	cmp	r3, r2
 8009f28:	d017      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	4a2b      	ldr	r2, [pc, #172]	@ (8009fdc <TIM_Base_SetConfig+0x134>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	d013      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a2a      	ldr	r2, [pc, #168]	@ (8009fe0 <TIM_Base_SetConfig+0x138>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d00f      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	4a29      	ldr	r2, [pc, #164]	@ (8009fe4 <TIM_Base_SetConfig+0x13c>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d00b      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	4a28      	ldr	r2, [pc, #160]	@ (8009fe8 <TIM_Base_SetConfig+0x140>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d007      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4a27      	ldr	r2, [pc, #156]	@ (8009fec <TIM_Base_SetConfig+0x144>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d003      	beq.n	8009f5a <TIM_Base_SetConfig+0xb2>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a26      	ldr	r2, [pc, #152]	@ (8009ff0 <TIM_Base_SetConfig+0x148>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d108      	bne.n	8009f6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	4313      	orrs	r3, r2
 8009f78:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a0e      	ldr	r2, [pc, #56]	@ (8009fc8 <TIM_Base_SetConfig+0x120>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d003      	beq.n	8009f9a <TIM_Base_SetConfig+0xf2>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	4a10      	ldr	r2, [pc, #64]	@ (8009fd8 <TIM_Base_SetConfig+0x130>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d103      	bne.n	8009fa2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f043 0204 	orr.w	r2, r3, #4
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	68fa      	ldr	r2, [r7, #12]
 8009fb8:	601a      	str	r2, [r3, #0]
}
 8009fba:	bf00      	nop
 8009fbc:	3714      	adds	r7, #20
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	40010000 	.word	0x40010000
 8009fcc:	40000400 	.word	0x40000400
 8009fd0:	40000800 	.word	0x40000800
 8009fd4:	40000c00 	.word	0x40000c00
 8009fd8:	40010400 	.word	0x40010400
 8009fdc:	40014000 	.word	0x40014000
 8009fe0:	40014400 	.word	0x40014400
 8009fe4:	40014800 	.word	0x40014800
 8009fe8:	40001800 	.word	0x40001800
 8009fec:	40001c00 	.word	0x40001c00
 8009ff0:	40002000 	.word	0x40002000

08009ff4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b087      	sub	sp, #28
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6a1b      	ldr	r3, [r3, #32]
 800a00a:	f023 0201 	bic.w	r2, r3, #1
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a01e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	011b      	lsls	r3, r3, #4
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	4313      	orrs	r3, r2
 800a028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f023 030a 	bic.w	r3, r3, #10
 800a030:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	4313      	orrs	r3, r2
 800a038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	697a      	ldr	r2, [r7, #20]
 800a044:	621a      	str	r2, [r3, #32]
}
 800a046:	bf00      	nop
 800a048:	371c      	adds	r7, #28
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr

0800a052 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a052:	b480      	push	{r7}
 800a054:	b087      	sub	sp, #28
 800a056:	af00      	add	r7, sp, #0
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6a1b      	ldr	r3, [r3, #32]
 800a062:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	6a1b      	ldr	r3, [r3, #32]
 800a068:	f023 0210 	bic.w	r2, r3, #16
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a07c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	031b      	lsls	r3, r3, #12
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	4313      	orrs	r3, r2
 800a086:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a08e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	011b      	lsls	r3, r3, #4
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	4313      	orrs	r3, r2
 800a098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	621a      	str	r2, [r3, #32]
}
 800a0a6:	bf00      	nop
 800a0a8:	371c      	adds	r7, #28
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr

0800a0b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0b2:	b480      	push	{r7}
 800a0b4:	b085      	sub	sp, #20
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	6078      	str	r0, [r7, #4]
 800a0ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0ca:	683a      	ldr	r2, [r7, #0]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	f043 0307 	orr.w	r3, r3, #7
 800a0d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	609a      	str	r2, [r3, #8]
}
 800a0dc:	bf00      	nop
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b087      	sub	sp, #28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a102:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	021a      	lsls	r2, r3, #8
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	431a      	orrs	r2, r3
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	4313      	orrs	r3, r2
 800a110:	697a      	ldr	r2, [r7, #20]
 800a112:	4313      	orrs	r3, r2
 800a114:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	609a      	str	r2, [r3, #8]
}
 800a11c:	bf00      	nop
 800a11e:	371c      	adds	r7, #28
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d101      	bne.n	800a140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a13c:	2302      	movs	r3, #2
 800a13e:	e05a      	b.n	800a1f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2202      	movs	r2, #2
 800a14c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	689b      	ldr	r3, [r3, #8]
 800a15e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68fa      	ldr	r2, [r7, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a21      	ldr	r2, [pc, #132]	@ (800a204 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d022      	beq.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a18c:	d01d      	beq.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a1d      	ldr	r2, [pc, #116]	@ (800a208 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d018      	beq.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a1b      	ldr	r2, [pc, #108]	@ (800a20c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d013      	beq.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a1a      	ldr	r2, [pc, #104]	@ (800a210 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d00e      	beq.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a18      	ldr	r2, [pc, #96]	@ (800a214 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d009      	beq.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a17      	ldr	r2, [pc, #92]	@ (800a218 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d004      	beq.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a15      	ldr	r2, [pc, #84]	@ (800a21c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d10c      	bne.n	800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a1d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68ba      	ldr	r2, [r7, #8]
 800a1e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3714      	adds	r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr
 800a202:	bf00      	nop
 800a204:	40010000 	.word	0x40010000
 800a208:	40000400 	.word	0x40000400
 800a20c:	40000800 	.word	0x40000800
 800a210:	40000c00 	.word	0x40000c00
 800a214:	40010400 	.word	0x40010400
 800a218:	40014000 	.word	0x40014000
 800a21c:	40001800 	.word	0x40001800

0800a220 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a228:	bf00      	nop
 800a22a:	370c      	adds	r7, #12
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a234:	b480      	push	{r7}
 800a236:	b083      	sub	sp, #12
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr

0800a248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d101      	bne.n	800a25a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	e042      	b.n	800a2e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a260:	b2db      	uxtb	r3, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d106      	bne.n	800a274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7fb fd0a 	bl	8005c88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2224      	movs	r2, #36	@ 0x24
 800a278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	68da      	ldr	r2, [r3, #12]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a28a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 ffe5 	bl	800b25c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	691a      	ldr	r2, [r3, #16]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	695a      	ldr	r2, [r3, #20]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68da      	ldr	r2, [r3, #12]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a2c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2220      	movs	r2, #32
 800a2d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3708      	adds	r7, #8
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b08a      	sub	sp, #40	@ 0x28
 800a2ec:	af02      	add	r7, sp, #8
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	603b      	str	r3, [r7, #0]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a302:	b2db      	uxtb	r3, r3
 800a304:	2b20      	cmp	r3, #32
 800a306:	d175      	bne.n	800a3f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <HAL_UART_Transmit+0x2c>
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e06e      	b.n	800a3f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2221      	movs	r2, #33	@ 0x21
 800a322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a326:	f7fb ff73 	bl	8006210 <HAL_GetTick>
 800a32a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	88fa      	ldrh	r2, [r7, #6]
 800a330:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	88fa      	ldrh	r2, [r7, #6]
 800a336:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a340:	d108      	bne.n	800a354 <HAL_UART_Transmit+0x6c>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	e003      	b.n	800a35c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a358:	2300      	movs	r3, #0
 800a35a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a35c:	e02e      	b.n	800a3bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	9300      	str	r3, [sp, #0]
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	2200      	movs	r2, #0
 800a366:	2180      	movs	r1, #128	@ 0x80
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fcb5 	bl	800acd8 <UART_WaitOnFlagUntilTimeout>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d005      	beq.n	800a380 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2220      	movs	r2, #32
 800a378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e03a      	b.n	800a3f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800a380:	69fb      	ldr	r3, [r7, #28]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10b      	bne.n	800a39e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	881b      	ldrh	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	3302      	adds	r3, #2
 800a39a:	61bb      	str	r3, [r7, #24]
 800a39c:	e007      	b.n	800a3ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	781a      	ldrb	r2, [r3, #0]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	3b01      	subs	r3, #1
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d1cb      	bne.n	800a35e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2140      	movs	r1, #64	@ 0x40
 800a3d0:	68f8      	ldr	r0, [r7, #12]
 800a3d2:	f000 fc81 	bl	800acd8 <UART_WaitOnFlagUntilTimeout>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d005      	beq.n	800a3e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2220      	movs	r2, #32
 800a3e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e006      	b.n	800a3f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2220      	movs	r2, #32
 800a3ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e000      	b.n	800a3f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800a3f4:	2302      	movs	r3, #2
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3720      	adds	r7, #32
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b084      	sub	sp, #16
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	60b9      	str	r1, [r7, #8]
 800a408:	4613      	mov	r3, r2
 800a40a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b20      	cmp	r3, #32
 800a416:	d112      	bne.n	800a43e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d002      	beq.n	800a424 <HAL_UART_Receive_DMA+0x26>
 800a41e:	88fb      	ldrh	r3, [r7, #6]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	e00b      	b.n	800a440 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a42e:	88fb      	ldrh	r3, [r7, #6]
 800a430:	461a      	mov	r2, r3
 800a432:	68b9      	ldr	r1, [r7, #8]
 800a434:	68f8      	ldr	r0, [r7, #12]
 800a436:	f000 fca9 	bl	800ad8c <UART_Start_Receive_DMA>
 800a43a:	4603      	mov	r3, r0
 800a43c:	e000      	b.n	800a440 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800a43e:	2302      	movs	r3, #2
  }
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b090      	sub	sp, #64	@ 0x40
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800a450:	2300      	movs	r3, #0
 800a452:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	695b      	ldr	r3, [r3, #20]
 800a45a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a45e:	2b80      	cmp	r3, #128	@ 0x80
 800a460:	bf0c      	ite	eq
 800a462:	2301      	moveq	r3, #1
 800a464:	2300      	movne	r3, #0
 800a466:	b2db      	uxtb	r3, r3
 800a468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b21      	cmp	r3, #33	@ 0x21
 800a474:	d128      	bne.n	800a4c8 <HAL_UART_DMAStop+0x80>
 800a476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d025      	beq.n	800a4c8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	3314      	adds	r3, #20
 800a482:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a486:	e853 3f00 	ldrex	r3, [r3]
 800a48a:	623b      	str	r3, [r7, #32]
   return(result);
 800a48c:	6a3b      	ldr	r3, [r7, #32]
 800a48e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a492:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	3314      	adds	r3, #20
 800a49a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a49c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a49e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a4a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4a4:	e841 2300 	strex	r3, r2, [r1]
 800a4a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d1e5      	bne.n	800a47c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d004      	beq.n	800a4c2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7fc fe61 	bl	8007184 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f000 fd08 	bl	800aed8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	695b      	ldr	r3, [r3, #20]
 800a4ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4d2:	2b40      	cmp	r3, #64	@ 0x40
 800a4d4:	bf0c      	ite	eq
 800a4d6:	2301      	moveq	r3, #1
 800a4d8:	2300      	movne	r3, #0
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b22      	cmp	r3, #34	@ 0x22
 800a4e8:	d128      	bne.n	800a53c <HAL_UART_DMAStop+0xf4>
 800a4ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d025      	beq.n	800a53c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3314      	adds	r3, #20
 800a4f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	e853 3f00 	ldrex	r3, [r3]
 800a4fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a506:	637b      	str	r3, [r7, #52]	@ 0x34
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3314      	adds	r3, #20
 800a50e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a510:	61fa      	str	r2, [r7, #28]
 800a512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a514:	69b9      	ldr	r1, [r7, #24]
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	e841 2300 	strex	r3, r2, [r1]
 800a51c:	617b      	str	r3, [r7, #20]
   return(result);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e5      	bne.n	800a4f0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d004      	beq.n	800a536 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a530:	4618      	mov	r0, r3
 800a532:	f7fc fe27 	bl	8007184 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f000 fcf6 	bl	800af28 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3740      	adds	r7, #64	@ 0x40
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
	...

0800a548 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b0ba      	sub	sp, #232	@ 0xe8
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800a56e:	2300      	movs	r3, #0
 800a570:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800a574:	2300      	movs	r3, #0
 800a576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a57e:	f003 030f 	and.w	r3, r3, #15
 800a582:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800a586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10f      	bne.n	800a5ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a592:	f003 0320 	and.w	r3, r3, #32
 800a596:	2b00      	cmp	r3, #0
 800a598:	d009      	beq.n	800a5ae <HAL_UART_IRQHandler+0x66>
 800a59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a59e:	f003 0320 	and.w	r3, r3, #32
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d003      	beq.n	800a5ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fd9a 	bl	800b0e0 <UART_Receive_IT>
      return;
 800a5ac:	e273      	b.n	800aa96 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 80de 	beq.w	800a774 <HAL_UART_IRQHandler+0x22c>
 800a5b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5bc:	f003 0301 	and.w	r3, r3, #1
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d106      	bne.n	800a5d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a5c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5c8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f000 80d1 	beq.w	800a774 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a5d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5d6:	f003 0301 	and.w	r3, r3, #1
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d00b      	beq.n	800a5f6 <HAL_UART_IRQHandler+0xae>
 800a5de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d005      	beq.n	800a5f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a5ee:	f043 0201 	orr.w	r2, r3, #1
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a5f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5fa:	f003 0304 	and.w	r3, r3, #4
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d00b      	beq.n	800a61a <HAL_UART_IRQHandler+0xd2>
 800a602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d005      	beq.n	800a61a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a612:	f043 0202 	orr.w	r2, r3, #2
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a61a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00b      	beq.n	800a63e <HAL_UART_IRQHandler+0xf6>
 800a626:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a62a:	f003 0301 	and.w	r3, r3, #1
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d005      	beq.n	800a63e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a636:	f043 0204 	orr.w	r2, r3, #4
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a642:	f003 0308 	and.w	r3, r3, #8
 800a646:	2b00      	cmp	r3, #0
 800a648:	d011      	beq.n	800a66e <HAL_UART_IRQHandler+0x126>
 800a64a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b00      	cmp	r3, #0
 800a654:	d105      	bne.n	800a662 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d005      	beq.n	800a66e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a666:	f043 0208 	orr.w	r2, r3, #8
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a672:	2b00      	cmp	r3, #0
 800a674:	f000 820a 	beq.w	800aa8c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b00      	cmp	r3, #0
 800a682:	d008      	beq.n	800a696 <HAL_UART_IRQHandler+0x14e>
 800a684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a688:	f003 0320 	and.w	r3, r3, #32
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a690:	6878      	ldr	r0, [r7, #4]
 800a692:	f000 fd25 	bl	800b0e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	695b      	ldr	r3, [r3, #20]
 800a69c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6a0:	2b40      	cmp	r3, #64	@ 0x40
 800a6a2:	bf0c      	ite	eq
 800a6a4:	2301      	moveq	r3, #1
 800a6a6:	2300      	movne	r3, #0
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6b2:	f003 0308 	and.w	r3, r3, #8
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d103      	bne.n	800a6c2 <HAL_UART_IRQHandler+0x17a>
 800a6ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d04f      	beq.n	800a762 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f000 fc30 	bl	800af28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	695b      	ldr	r3, [r3, #20]
 800a6ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6d2:	2b40      	cmp	r3, #64	@ 0x40
 800a6d4:	d141      	bne.n	800a75a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	3314      	adds	r3, #20
 800a6dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a6e4:	e853 3f00 	ldrex	r3, [r3]
 800a6e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a6ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a6f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	3314      	adds	r3, #20
 800a6fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a702:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a70e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a71a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1d9      	bne.n	800a6d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a726:	2b00      	cmp	r3, #0
 800a728:	d013      	beq.n	800a752 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a72e:	4a8a      	ldr	r2, [pc, #552]	@ (800a958 <HAL_UART_IRQHandler+0x410>)
 800a730:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a736:	4618      	mov	r0, r3
 800a738:	f7fc fd94 	bl	8007264 <HAL_DMA_Abort_IT>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d016      	beq.n	800a770 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a748:	687a      	ldr	r2, [r7, #4]
 800a74a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800a74c:	4610      	mov	r0, r2
 800a74e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a750:	e00e      	b.n	800a770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f9ac 	bl	800aab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a758:	e00a      	b.n	800a770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f000 f9a8 	bl	800aab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a760:	e006      	b.n	800a770 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f9a4 	bl	800aab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800a76e:	e18d      	b.n	800aa8c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a770:	bf00      	nop
    return;
 800a772:	e18b      	b.n	800aa8c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a778:	2b01      	cmp	r3, #1
 800a77a:	f040 8167 	bne.w	800aa4c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800a77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a782:	f003 0310 	and.w	r3, r3, #16
 800a786:	2b00      	cmp	r3, #0
 800a788:	f000 8160 	beq.w	800aa4c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800a78c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a790:	f003 0310 	and.w	r3, r3, #16
 800a794:	2b00      	cmp	r3, #0
 800a796:	f000 8159 	beq.w	800aa4c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a79a:	2300      	movs	r3, #0
 800a79c:	60bb      	str	r3, [r7, #8]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	60bb      	str	r3, [r7, #8]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	60bb      	str	r3, [r7, #8]
 800a7ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7ba:	2b40      	cmp	r3, #64	@ 0x40
 800a7bc:	f040 80ce 	bne.w	800a95c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a7cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 80a9 	beq.w	800a928 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a7da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	f080 80a2 	bcs.w	800a928 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a7ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7f0:	69db      	ldr	r3, [r3, #28]
 800a7f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7f6:	f000 8088 	beq.w	800a90a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	330c      	adds	r3, #12
 800a800:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a804:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a810:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a814:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a818:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	330c      	adds	r3, #12
 800a822:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800a826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a82a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a832:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a836:	e841 2300 	strex	r3, r2, [r1]
 800a83a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a83e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d1d9      	bne.n	800a7fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	3314      	adds	r3, #20
 800a84c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a856:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a858:	f023 0301 	bic.w	r3, r3, #1
 800a85c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3314      	adds	r3, #20
 800a866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a86a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a86e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a872:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a876:	e841 2300 	strex	r3, r2, [r1]
 800a87a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a87c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1e1      	bne.n	800a846 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3314      	adds	r3, #20
 800a888:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a892:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a894:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a898:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3314      	adds	r3, #20
 800a8a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a8a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8ae:	e841 2300 	strex	r3, r2, [r1]
 800a8b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a8b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1e3      	bne.n	800a882 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	330c      	adds	r3, #12
 800a8ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8d2:	e853 3f00 	ldrex	r3, [r3]
 800a8d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a8d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a8da:	f023 0310 	bic.w	r3, r3, #16
 800a8de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	330c      	adds	r3, #12
 800a8e8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800a8ec:	65ba      	str	r2, [r7, #88]	@ 0x58
 800a8ee:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a8f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a8f4:	e841 2300 	strex	r3, r2, [r1]
 800a8f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a8fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d1e3      	bne.n	800a8c8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a904:	4618      	mov	r0, r3
 800a906:	f7fc fc3d 	bl	8007184 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2202      	movs	r2, #2
 800a90e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a918:	b29b      	uxth	r3, r3
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	4619      	mov	r1, r3
 800a920:	6878      	ldr	r0, [r7, #4]
 800a922:	f000 f8cf 	bl	800aac4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a926:	e0b3      	b.n	800aa90 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a92c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a930:	429a      	cmp	r2, r3
 800a932:	f040 80ad 	bne.w	800aa90 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a93a:	69db      	ldr	r3, [r3, #28]
 800a93c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a940:	f040 80a6 	bne.w	800aa90 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f8b7 	bl	800aac4 <HAL_UARTEx_RxEventCallback>
      return;
 800a956:	e09b      	b.n	800aa90 <HAL_UART_IRQHandler+0x548>
 800a958:	0800afef 	.word	0x0800afef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a964:	b29b      	uxth	r3, r3
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a970:	b29b      	uxth	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	f000 808e 	beq.w	800aa94 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800a978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8089 	beq.w	800aa94 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	330c      	adds	r3, #12
 800a988:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a98c:	e853 3f00 	ldrex	r3, [r3]
 800a990:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	330c      	adds	r3, #12
 800a9a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800a9a6:	647a      	str	r2, [r7, #68]	@ 0x44
 800a9a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a9ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a9ae:	e841 2300 	strex	r3, r2, [r1]
 800a9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d1e3      	bne.n	800a982 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	3314      	adds	r3, #20
 800a9c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c4:	e853 3f00 	ldrex	r3, [r3]
 800a9c8:	623b      	str	r3, [r7, #32]
   return(result);
 800a9ca:	6a3b      	ldr	r3, [r7, #32]
 800a9cc:	f023 0301 	bic.w	r3, r3, #1
 800a9d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	3314      	adds	r3, #20
 800a9da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a9de:	633a      	str	r2, [r7, #48]	@ 0x30
 800a9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a9e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a9e6:	e841 2300 	strex	r3, r2, [r1]
 800a9ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a9ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d1e3      	bne.n	800a9ba <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	330c      	adds	r3, #12
 800aa06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	e853 3f00 	ldrex	r3, [r3]
 800aa0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0310 	bic.w	r3, r3, #16
 800aa16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	330c      	adds	r3, #12
 800aa20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800aa24:	61fa      	str	r2, [r7, #28]
 800aa26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa28:	69b9      	ldr	r1, [r7, #24]
 800aa2a:	69fa      	ldr	r2, [r7, #28]
 800aa2c:	e841 2300 	strex	r3, r2, [r1]
 800aa30:	617b      	str	r3, [r7, #20]
   return(result);
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d1e3      	bne.n	800aa00 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2202      	movs	r2, #2
 800aa3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aa42:	4619      	mov	r1, r3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 f83d 	bl	800aac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800aa4a:	e023      	b.n	800aa94 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800aa4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <HAL_UART_IRQHandler+0x524>
 800aa58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d003      	beq.n	800aa6c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fad3 	bl	800b010 <UART_Transmit_IT>
    return;
 800aa6a:	e014      	b.n	800aa96 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800aa6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d00e      	beq.n	800aa96 <HAL_UART_IRQHandler+0x54e>
 800aa78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d008      	beq.n	800aa96 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fb13 	bl	800b0b0 <UART_EndTransmit_IT>
    return;
 800aa8a:	e004      	b.n	800aa96 <HAL_UART_IRQHandler+0x54e>
    return;
 800aa8c:	bf00      	nop
 800aa8e:	e002      	b.n	800aa96 <HAL_UART_IRQHandler+0x54e>
      return;
 800aa90:	bf00      	nop
 800aa92:	e000      	b.n	800aa96 <HAL_UART_IRQHandler+0x54e>
      return;
 800aa94:	bf00      	nop
  }
}
 800aa96:	37e8      	adds	r7, #232	@ 0xe8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
 800aacc:	460b      	mov	r3, r1
 800aace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b09c      	sub	sp, #112	@ 0x70
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d172      	bne.n	800abde <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aaf8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aafa:	2200      	movs	r2, #0
 800aafc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aafe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	330c      	adds	r3, #12
 800ab04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab08:	e853 3f00 	ldrex	r3, [r3]
 800ab0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ab0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab14:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	330c      	adds	r3, #12
 800ab1c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ab1e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ab20:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ab24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ab26:	e841 2300 	strex	r3, r2, [r1]
 800ab2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ab2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d1e5      	bne.n	800aafe <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	3314      	adds	r3, #20
 800ab38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab3c:	e853 3f00 	ldrex	r3, [r3]
 800ab40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab44:	f023 0301 	bic.w	r3, r3, #1
 800ab48:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	3314      	adds	r3, #20
 800ab50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab52:	647a      	str	r2, [r7, #68]	@ 0x44
 800ab54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab5a:	e841 2300 	strex	r3, r2, [r1]
 800ab5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1e5      	bne.n	800ab32 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	3314      	adds	r3, #20
 800ab6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	623b      	str	r3, [r7, #32]
   return(result);
 800ab76:	6a3b      	ldr	r3, [r7, #32]
 800ab78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab7c:	663b      	str	r3, [r7, #96]	@ 0x60
 800ab7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3314      	adds	r3, #20
 800ab84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab86:	633a      	str	r2, [r7, #48]	@ 0x30
 800ab88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e5      	bne.n	800ab66 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ab9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab9c:	2220      	movs	r2, #32
 800ab9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d119      	bne.n	800abde <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	330c      	adds	r3, #12
 800abb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	e853 3f00 	ldrex	r3, [r3]
 800abb8:	60fb      	str	r3, [r7, #12]
   return(result);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	f023 0310 	bic.w	r3, r3, #16
 800abc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	330c      	adds	r3, #12
 800abc8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800abca:	61fa      	str	r2, [r7, #28]
 800abcc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abce:	69b9      	ldr	r1, [r7, #24]
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	617b      	str	r3, [r7, #20]
   return(result);
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d1e5      	bne.n	800abaa <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abe0:	2200      	movs	r2, #0
 800abe2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d106      	bne.n	800abfa <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800abee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800abf0:	4619      	mov	r1, r3
 800abf2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800abf4:	f7ff ff66 	bl	800aac4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800abf8:	e002      	b.n	800ac00 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800abfa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800abfc:	f7f8 f922 	bl	8002e44 <HAL_UART_RxCpltCallback>
}
 800ac00:	bf00      	nop
 800ac02:	3770      	adds	r7, #112	@ 0x70
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac14:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d108      	bne.n	800ac36 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ac28:	085b      	lsrs	r3, r3, #1
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7ff ff48 	bl	800aac4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ac34:	e002      	b.n	800ac3c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f7f8 f8ee 	bl	8002e18 <HAL_UART_RxHalfCpltCallback>
}
 800ac3c:	bf00      	nop
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac54:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac60:	2b80      	cmp	r3, #128	@ 0x80
 800ac62:	bf0c      	ite	eq
 800ac64:	2301      	moveq	r3, #1
 800ac66:	2300      	movne	r3, #0
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b21      	cmp	r3, #33	@ 0x21
 800ac76:	d108      	bne.n	800ac8a <UART_DMAError+0x46>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	2200      	movs	r2, #0
 800ac82:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800ac84:	68b8      	ldr	r0, [r7, #8]
 800ac86:	f000 f927 	bl	800aed8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac94:	2b40      	cmp	r3, #64	@ 0x40
 800ac96:	bf0c      	ite	eq
 800ac98:	2301      	moveq	r3, #1
 800ac9a:	2300      	movne	r3, #0
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	2b22      	cmp	r3, #34	@ 0x22
 800acaa:	d108      	bne.n	800acbe <UART_DMAError+0x7a>
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d005      	beq.n	800acbe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2200      	movs	r2, #0
 800acb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800acb8:	68b8      	ldr	r0, [r7, #8]
 800acba:	f000 f935 	bl	800af28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acc2:	f043 0210 	orr.w	r2, r3, #16
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800acca:	68b8      	ldr	r0, [r7, #8]
 800accc:	f7ff fef0 	bl	800aab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800acd0:	bf00      	nop
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	603b      	str	r3, [r7, #0]
 800ace4:	4613      	mov	r3, r2
 800ace6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ace8:	e03b      	b.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf0:	d037      	beq.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acf2:	f7fb fa8d 	bl	8006210 <HAL_GetTick>
 800acf6:	4602      	mov	r2, r0
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	6a3a      	ldr	r2, [r7, #32]
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d302      	bcc.n	800ad08 <UART_WaitOnFlagUntilTimeout+0x30>
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad08:	2303      	movs	r3, #3
 800ad0a:	e03a      	b.n	800ad82 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	f003 0304 	and.w	r3, r3, #4
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d023      	beq.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	2b80      	cmp	r3, #128	@ 0x80
 800ad1e:	d020      	beq.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b40      	cmp	r3, #64	@ 0x40
 800ad24:	d01d      	beq.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b08      	cmp	r3, #8
 800ad32:	d116      	bne.n	800ad62 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800ad34:	2300      	movs	r3, #0
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	617b      	str	r3, [r7, #20]
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	617b      	str	r3, [r7, #20]
 800ad48:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 f8ec 	bl	800af28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2208      	movs	r2, #8
 800ad54:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e00f      	b.n	800ad82 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	bf0c      	ite	eq
 800ad72:	2301      	moveq	r3, #1
 800ad74:	2300      	movne	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	461a      	mov	r2, r3
 800ad7a:	79fb      	ldrb	r3, [r7, #7]
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	d0b4      	beq.n	800acea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad80:	2300      	movs	r3, #0
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
	...

0800ad8c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b098      	sub	sp, #96	@ 0x60
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	4613      	mov	r3, r2
 800ad98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800ad9a:	68ba      	ldr	r2, [r7, #8]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	88fa      	ldrh	r2, [r7, #6]
 800ada4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	2222      	movs	r2, #34	@ 0x22
 800adb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adb8:	4a44      	ldr	r2, [pc, #272]	@ (800aecc <UART_Start_Receive_DMA+0x140>)
 800adba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adc0:	4a43      	ldr	r2, [pc, #268]	@ (800aed0 <UART_Start_Receive_DMA+0x144>)
 800adc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adc8:	4a42      	ldr	r2, [pc, #264]	@ (800aed4 <UART_Start_Receive_DMA+0x148>)
 800adca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800add0:	2200      	movs	r2, #0
 800add2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800add4:	f107 0308 	add.w	r3, r7, #8
 800add8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	3304      	adds	r3, #4
 800ade4:	4619      	mov	r1, r3
 800ade6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	88fb      	ldrh	r3, [r7, #6]
 800adec:	f7fc f972 	bl	80070d4 <HAL_DMA_Start_IT>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d008      	beq.n	800ae08 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2210      	movs	r2, #16
 800adfa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2220      	movs	r2, #32
 800ae00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e05d      	b.n	800aec4 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800ae08:	2300      	movs	r3, #0
 800ae0a:	613b      	str	r3, [r7, #16]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	613b      	str	r3, [r7, #16]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	613b      	str	r3, [r7, #16]
 800ae1c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d019      	beq.n	800ae5a <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	330c      	adds	r3, #12
 800ae2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	330c      	adds	r3, #12
 800ae44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae46:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ae48:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ae4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ae54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e5      	bne.n	800ae26 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3314      	adds	r3, #20
 800ae60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6c:	f043 0301 	orr.w	r3, r3, #1
 800ae70:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3314      	adds	r3, #20
 800ae78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae7a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ae7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ae80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ae82:	e841 2300 	strex	r3, r2, [r1]
 800ae86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1e5      	bne.n	800ae5a <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3314      	adds	r3, #20
 800ae94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	e853 3f00 	ldrex	r3, [r3]
 800ae9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aea4:	653b      	str	r3, [r7, #80]	@ 0x50
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	3314      	adds	r3, #20
 800aeac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aeae:	627a      	str	r2, [r7, #36]	@ 0x24
 800aeb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeb2:	6a39      	ldr	r1, [r7, #32]
 800aeb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aeb6:	e841 2300 	strex	r3, r2, [r1]
 800aeba:	61fb      	str	r3, [r7, #28]
   return(result);
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d1e5      	bne.n	800ae8e <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800aec2:	2300      	movs	r3, #0
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3760      	adds	r7, #96	@ 0x60
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	0800aadd 	.word	0x0800aadd
 800aed0:	0800ac09 	.word	0x0800ac09
 800aed4:	0800ac45 	.word	0x0800ac45

0800aed8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b089      	sub	sp, #36	@ 0x24
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	330c      	adds	r3, #12
 800aee6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	e853 3f00 	ldrex	r3, [r3]
 800aeee:	60bb      	str	r3, [r7, #8]
   return(result);
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aef6:	61fb      	str	r3, [r7, #28]
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	330c      	adds	r3, #12
 800aefe:	69fa      	ldr	r2, [r7, #28]
 800af00:	61ba      	str	r2, [r7, #24]
 800af02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af04:	6979      	ldr	r1, [r7, #20]
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	e841 2300 	strex	r3, r2, [r1]
 800af0c:	613b      	str	r3, [r7, #16]
   return(result);
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d1e5      	bne.n	800aee0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2220      	movs	r2, #32
 800af18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800af1c:	bf00      	nop
 800af1e:	3724      	adds	r7, #36	@ 0x24
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af28:	b480      	push	{r7}
 800af2a:	b095      	sub	sp, #84	@ 0x54
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	330c      	adds	r3, #12
 800af36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af3a:	e853 3f00 	ldrex	r3, [r3]
 800af3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	330c      	adds	r3, #12
 800af4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af50:	643a      	str	r2, [r7, #64]	@ 0x40
 800af52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af58:	e841 2300 	strex	r3, r2, [r1]
 800af5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e5      	bne.n	800af30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3314      	adds	r3, #20
 800af6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af6c:	6a3b      	ldr	r3, [r7, #32]
 800af6e:	e853 3f00 	ldrex	r3, [r3]
 800af72:	61fb      	str	r3, [r7, #28]
   return(result);
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	f023 0301 	bic.w	r3, r3, #1
 800af7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3314      	adds	r3, #20
 800af82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e5      	bne.n	800af64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d119      	bne.n	800afd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	330c      	adds	r3, #12
 800afa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	e853 3f00 	ldrex	r3, [r3]
 800afae:	60bb      	str	r3, [r7, #8]
   return(result);
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	f023 0310 	bic.w	r3, r3, #16
 800afb6:	647b      	str	r3, [r7, #68]	@ 0x44
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	330c      	adds	r3, #12
 800afbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afc0:	61ba      	str	r2, [r7, #24]
 800afc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc4:	6979      	ldr	r1, [r7, #20]
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	e841 2300 	strex	r3, r2, [r1]
 800afcc:	613b      	str	r3, [r7, #16]
   return(result);
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1e5      	bne.n	800afa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2220      	movs	r2, #32
 800afd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800afe2:	bf00      	nop
 800afe4:	3754      	adds	r7, #84	@ 0x54
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr

0800afee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b084      	sub	sp, #16
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f7ff fd54 	bl	800aab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b008:	bf00      	nop
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b010:	b480      	push	{r7}
 800b012:	b085      	sub	sp, #20
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b21      	cmp	r3, #33	@ 0x21
 800b022:	d13e      	bne.n	800b0a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b02c:	d114      	bne.n	800b058 <UART_Transmit_IT+0x48>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	691b      	ldr	r3, [r3, #16]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d110      	bne.n	800b058 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	881b      	ldrh	r3, [r3, #0]
 800b040:	461a      	mov	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b04a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6a1b      	ldr	r3, [r3, #32]
 800b050:	1c9a      	adds	r2, r3, #2
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	621a      	str	r2, [r3, #32]
 800b056:	e008      	b.n	800b06a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6a1b      	ldr	r3, [r3, #32]
 800b05c:	1c59      	adds	r1, r3, #1
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	6211      	str	r1, [r2, #32]
 800b062:	781a      	ldrb	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b06e:	b29b      	uxth	r3, r3
 800b070:	3b01      	subs	r3, #1
 800b072:	b29b      	uxth	r3, r3
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	4619      	mov	r1, r3
 800b078:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d10f      	bne.n	800b09e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68da      	ldr	r2, [r3, #12]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b08c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	68da      	ldr	r2, [r3, #12]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b09c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	e000      	b.n	800b0a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b0a2:	2302      	movs	r3, #2
  }
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3714      	adds	r7, #20
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ae:	4770      	bx	lr

0800b0b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b0c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2220      	movs	r2, #32
 800b0cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff fce3 	bl	800aa9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b08c      	sub	sp, #48	@ 0x30
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b0f6:	b2db      	uxtb	r3, r3
 800b0f8:	2b22      	cmp	r3, #34	@ 0x22
 800b0fa:	f040 80aa 	bne.w	800b252 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	689b      	ldr	r3, [r3, #8]
 800b102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b106:	d115      	bne.n	800b134 <UART_Receive_IT+0x54>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d111      	bne.n	800b134 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b114:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	b29b      	uxth	r3, r3
 800b11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b122:	b29a      	uxth	r2, r3
 800b124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b126:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b12c:	1c9a      	adds	r2, r3, #2
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	629a      	str	r2, [r3, #40]	@ 0x28
 800b132:	e024      	b.n	800b17e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b138:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	689b      	ldr	r3, [r3, #8]
 800b13e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b142:	d007      	beq.n	800b154 <UART_Receive_IT+0x74>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d10a      	bne.n	800b162 <UART_Receive_IT+0x82>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d106      	bne.n	800b162 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	b2da      	uxtb	r2, r3
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	701a      	strb	r2, [r3, #0]
 800b160:	e008      	b.n	800b174 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	685b      	ldr	r3, [r3, #4]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b16e:	b2da      	uxtb	r2, r3
 800b170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b172:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b182:	b29b      	uxth	r3, r3
 800b184:	3b01      	subs	r3, #1
 800b186:	b29b      	uxth	r3, r3
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	4619      	mov	r1, r3
 800b18c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d15d      	bne.n	800b24e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68da      	ldr	r2, [r3, #12]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f022 0220 	bic.w	r2, r2, #32
 800b1a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68da      	ldr	r2, [r3, #12]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b1b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695a      	ldr	r2, [r3, #20]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 0201 	bic.w	r2, r2, #1
 800b1c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2220      	movs	r2, #32
 800b1c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d135      	bne.n	800b244 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	330c      	adds	r3, #12
 800b1e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	e853 3f00 	ldrex	r3, [r3]
 800b1ec:	613b      	str	r3, [r7, #16]
   return(result);
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	f023 0310 	bic.w	r3, r3, #16
 800b1f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	330c      	adds	r3, #12
 800b1fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1fe:	623a      	str	r2, [r7, #32]
 800b200:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b202:	69f9      	ldr	r1, [r7, #28]
 800b204:	6a3a      	ldr	r2, [r7, #32]
 800b206:	e841 2300 	strex	r3, r2, [r1]
 800b20a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1e5      	bne.n	800b1de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0310 	and.w	r3, r3, #16
 800b21c:	2b10      	cmp	r3, #16
 800b21e:	d10a      	bne.n	800b236 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b220:	2300      	movs	r3, #0
 800b222:	60fb      	str	r3, [r7, #12]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	60fb      	str	r3, [r7, #12]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	60fb      	str	r3, [r7, #12]
 800b234:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b23a:	4619      	mov	r1, r3
 800b23c:	6878      	ldr	r0, [r7, #4]
 800b23e:	f7ff fc41 	bl	800aac4 <HAL_UARTEx_RxEventCallback>
 800b242:	e002      	b.n	800b24a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7f7 fdfd 	bl	8002e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	e002      	b.n	800b254 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	e000      	b.n	800b254 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b252:	2302      	movs	r3, #2
  }
}
 800b254:	4618      	mov	r0, r3
 800b256:	3730      	adds	r7, #48	@ 0x30
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b25c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b260:	b0c0      	sub	sp, #256	@ 0x100
 800b262:	af00      	add	r7, sp, #0
 800b264:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b278:	68d9      	ldr	r1, [r3, #12]
 800b27a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b27e:	681a      	ldr	r2, [r3, #0]
 800b280:	ea40 0301 	orr.w	r3, r0, r1
 800b284:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b28a:	689a      	ldr	r2, [r3, #8]
 800b28c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	431a      	orrs	r2, r3
 800b294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	431a      	orrs	r2, r3
 800b29c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2a0:	69db      	ldr	r3, [r3, #28]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b2a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b2b4:	f021 010c 	bic.w	r1, r1, #12
 800b2b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b2c2:	430b      	orrs	r3, r1
 800b2c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b2c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2d6:	6999      	ldr	r1, [r3, #24]
 800b2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2dc:	681a      	ldr	r2, [r3, #0]
 800b2de:	ea40 0301 	orr.w	r3, r0, r1
 800b2e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b2e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	4b8f      	ldr	r3, [pc, #572]	@ (800b528 <UART_SetConfig+0x2cc>)
 800b2ec:	429a      	cmp	r2, r3
 800b2ee:	d005      	beq.n	800b2fc <UART_SetConfig+0xa0>
 800b2f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	4b8d      	ldr	r3, [pc, #564]	@ (800b52c <UART_SetConfig+0x2d0>)
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d104      	bne.n	800b306 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b2fc:	f7fd fe52 	bl	8008fa4 <HAL_RCC_GetPCLK2Freq>
 800b300:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b304:	e003      	b.n	800b30e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b306:	f7fd fe39 	bl	8008f7c <HAL_RCC_GetPCLK1Freq>
 800b30a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b30e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b312:	69db      	ldr	r3, [r3, #28]
 800b314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b318:	f040 810c 	bne.w	800b534 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b31c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b320:	2200      	movs	r2, #0
 800b322:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b326:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b32a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b32e:	4622      	mov	r2, r4
 800b330:	462b      	mov	r3, r5
 800b332:	1891      	adds	r1, r2, r2
 800b334:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b336:	415b      	adcs	r3, r3
 800b338:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b33a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b33e:	4621      	mov	r1, r4
 800b340:	eb12 0801 	adds.w	r8, r2, r1
 800b344:	4629      	mov	r1, r5
 800b346:	eb43 0901 	adc.w	r9, r3, r1
 800b34a:	f04f 0200 	mov.w	r2, #0
 800b34e:	f04f 0300 	mov.w	r3, #0
 800b352:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b356:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b35a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b35e:	4690      	mov	r8, r2
 800b360:	4699      	mov	r9, r3
 800b362:	4623      	mov	r3, r4
 800b364:	eb18 0303 	adds.w	r3, r8, r3
 800b368:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b36c:	462b      	mov	r3, r5
 800b36e:	eb49 0303 	adc.w	r3, r9, r3
 800b372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b382:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b386:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b38a:	460b      	mov	r3, r1
 800b38c:	18db      	adds	r3, r3, r3
 800b38e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b390:	4613      	mov	r3, r2
 800b392:	eb42 0303 	adc.w	r3, r2, r3
 800b396:	657b      	str	r3, [r7, #84]	@ 0x54
 800b398:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800b39c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800b3a0:	f7f5 fdf0 	bl	8000f84 <__aeabi_uldivmod>
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	4b61      	ldr	r3, [pc, #388]	@ (800b530 <UART_SetConfig+0x2d4>)
 800b3aa:	fba3 2302 	umull	r2, r3, r3, r2
 800b3ae:	095b      	lsrs	r3, r3, #5
 800b3b0:	011c      	lsls	r4, r3, #4
 800b3b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b3bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b3c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800b3c4:	4642      	mov	r2, r8
 800b3c6:	464b      	mov	r3, r9
 800b3c8:	1891      	adds	r1, r2, r2
 800b3ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 800b3cc:	415b      	adcs	r3, r3
 800b3ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b3d4:	4641      	mov	r1, r8
 800b3d6:	eb12 0a01 	adds.w	sl, r2, r1
 800b3da:	4649      	mov	r1, r9
 800b3dc:	eb43 0b01 	adc.w	fp, r3, r1
 800b3e0:	f04f 0200 	mov.w	r2, #0
 800b3e4:	f04f 0300 	mov.w	r3, #0
 800b3e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b3ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b3f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b3f4:	4692      	mov	sl, r2
 800b3f6:	469b      	mov	fp, r3
 800b3f8:	4643      	mov	r3, r8
 800b3fa:	eb1a 0303 	adds.w	r3, sl, r3
 800b3fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b402:	464b      	mov	r3, r9
 800b404:	eb4b 0303 	adc.w	r3, fp, r3
 800b408:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b40c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b418:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b41c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800b420:	460b      	mov	r3, r1
 800b422:	18db      	adds	r3, r3, r3
 800b424:	643b      	str	r3, [r7, #64]	@ 0x40
 800b426:	4613      	mov	r3, r2
 800b428:	eb42 0303 	adc.w	r3, r2, r3
 800b42c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b42e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b432:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800b436:	f7f5 fda5 	bl	8000f84 <__aeabi_uldivmod>
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	4611      	mov	r1, r2
 800b440:	4b3b      	ldr	r3, [pc, #236]	@ (800b530 <UART_SetConfig+0x2d4>)
 800b442:	fba3 2301 	umull	r2, r3, r3, r1
 800b446:	095b      	lsrs	r3, r3, #5
 800b448:	2264      	movs	r2, #100	@ 0x64
 800b44a:	fb02 f303 	mul.w	r3, r2, r3
 800b44e:	1acb      	subs	r3, r1, r3
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800b456:	4b36      	ldr	r3, [pc, #216]	@ (800b530 <UART_SetConfig+0x2d4>)
 800b458:	fba3 2302 	umull	r2, r3, r3, r2
 800b45c:	095b      	lsrs	r3, r3, #5
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800b464:	441c      	add	r4, r3
 800b466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b470:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b474:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800b478:	4642      	mov	r2, r8
 800b47a:	464b      	mov	r3, r9
 800b47c:	1891      	adds	r1, r2, r2
 800b47e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800b480:	415b      	adcs	r3, r3
 800b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b484:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800b488:	4641      	mov	r1, r8
 800b48a:	1851      	adds	r1, r2, r1
 800b48c:	6339      	str	r1, [r7, #48]	@ 0x30
 800b48e:	4649      	mov	r1, r9
 800b490:	414b      	adcs	r3, r1
 800b492:	637b      	str	r3, [r7, #52]	@ 0x34
 800b494:	f04f 0200 	mov.w	r2, #0
 800b498:	f04f 0300 	mov.w	r3, #0
 800b49c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	00cb      	lsls	r3, r1, #3
 800b4a4:	4651      	mov	r1, sl
 800b4a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b4aa:	4651      	mov	r1, sl
 800b4ac:	00ca      	lsls	r2, r1, #3
 800b4ae:	4610      	mov	r0, r2
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	4642      	mov	r2, r8
 800b4b6:	189b      	adds	r3, r3, r2
 800b4b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b4bc:	464b      	mov	r3, r9
 800b4be:	460a      	mov	r2, r1
 800b4c0:	eb42 0303 	adc.w	r3, r2, r3
 800b4c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b4c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b4d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b4d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800b4dc:	460b      	mov	r3, r1
 800b4de:	18db      	adds	r3, r3, r3
 800b4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4e2:	4613      	mov	r3, r2
 800b4e4:	eb42 0303 	adc.w	r3, r2, r3
 800b4e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b4ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b4ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800b4f2:	f7f5 fd47 	bl	8000f84 <__aeabi_uldivmod>
 800b4f6:	4602      	mov	r2, r0
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b530 <UART_SetConfig+0x2d4>)
 800b4fc:	fba3 1302 	umull	r1, r3, r3, r2
 800b500:	095b      	lsrs	r3, r3, #5
 800b502:	2164      	movs	r1, #100	@ 0x64
 800b504:	fb01 f303 	mul.w	r3, r1, r3
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	3332      	adds	r3, #50	@ 0x32
 800b50e:	4a08      	ldr	r2, [pc, #32]	@ (800b530 <UART_SetConfig+0x2d4>)
 800b510:	fba2 2303 	umull	r2, r3, r2, r3
 800b514:	095b      	lsrs	r3, r3, #5
 800b516:	f003 0207 	and.w	r2, r3, #7
 800b51a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4422      	add	r2, r4
 800b522:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b524:	e106      	b.n	800b734 <UART_SetConfig+0x4d8>
 800b526:	bf00      	nop
 800b528:	40011000 	.word	0x40011000
 800b52c:	40011400 	.word	0x40011400
 800b530:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b538:	2200      	movs	r2, #0
 800b53a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b53e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b542:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b546:	4642      	mov	r2, r8
 800b548:	464b      	mov	r3, r9
 800b54a:	1891      	adds	r1, r2, r2
 800b54c:	6239      	str	r1, [r7, #32]
 800b54e:	415b      	adcs	r3, r3
 800b550:	627b      	str	r3, [r7, #36]	@ 0x24
 800b552:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b556:	4641      	mov	r1, r8
 800b558:	1854      	adds	r4, r2, r1
 800b55a:	4649      	mov	r1, r9
 800b55c:	eb43 0501 	adc.w	r5, r3, r1
 800b560:	f04f 0200 	mov.w	r2, #0
 800b564:	f04f 0300 	mov.w	r3, #0
 800b568:	00eb      	lsls	r3, r5, #3
 800b56a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b56e:	00e2      	lsls	r2, r4, #3
 800b570:	4614      	mov	r4, r2
 800b572:	461d      	mov	r5, r3
 800b574:	4643      	mov	r3, r8
 800b576:	18e3      	adds	r3, r4, r3
 800b578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b57c:	464b      	mov	r3, r9
 800b57e:	eb45 0303 	adc.w	r3, r5, r3
 800b582:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b586:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b592:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b596:	f04f 0200 	mov.w	r2, #0
 800b59a:	f04f 0300 	mov.w	r3, #0
 800b59e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800b5a2:	4629      	mov	r1, r5
 800b5a4:	008b      	lsls	r3, r1, #2
 800b5a6:	4621      	mov	r1, r4
 800b5a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	008a      	lsls	r2, r1, #2
 800b5b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800b5b4:	f7f5 fce6 	bl	8000f84 <__aeabi_uldivmod>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4b60      	ldr	r3, [pc, #384]	@ (800b740 <UART_SetConfig+0x4e4>)
 800b5be:	fba3 2302 	umull	r2, r3, r3, r2
 800b5c2:	095b      	lsrs	r3, r3, #5
 800b5c4:	011c      	lsls	r4, r3, #4
 800b5c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b5d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800b5d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800b5d8:	4642      	mov	r2, r8
 800b5da:	464b      	mov	r3, r9
 800b5dc:	1891      	adds	r1, r2, r2
 800b5de:	61b9      	str	r1, [r7, #24]
 800b5e0:	415b      	adcs	r3, r3
 800b5e2:	61fb      	str	r3, [r7, #28]
 800b5e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5e8:	4641      	mov	r1, r8
 800b5ea:	1851      	adds	r1, r2, r1
 800b5ec:	6139      	str	r1, [r7, #16]
 800b5ee:	4649      	mov	r1, r9
 800b5f0:	414b      	adcs	r3, r1
 800b5f2:	617b      	str	r3, [r7, #20]
 800b5f4:	f04f 0200 	mov.w	r2, #0
 800b5f8:	f04f 0300 	mov.w	r3, #0
 800b5fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b600:	4659      	mov	r1, fp
 800b602:	00cb      	lsls	r3, r1, #3
 800b604:	4651      	mov	r1, sl
 800b606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b60a:	4651      	mov	r1, sl
 800b60c:	00ca      	lsls	r2, r1, #3
 800b60e:	4610      	mov	r0, r2
 800b610:	4619      	mov	r1, r3
 800b612:	4603      	mov	r3, r0
 800b614:	4642      	mov	r2, r8
 800b616:	189b      	adds	r3, r3, r2
 800b618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800b61c:	464b      	mov	r3, r9
 800b61e:	460a      	mov	r2, r1
 800b620:	eb42 0303 	adc.w	r3, r2, r3
 800b624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b632:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b634:	f04f 0200 	mov.w	r2, #0
 800b638:	f04f 0300 	mov.w	r3, #0
 800b63c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800b640:	4649      	mov	r1, r9
 800b642:	008b      	lsls	r3, r1, #2
 800b644:	4641      	mov	r1, r8
 800b646:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b64a:	4641      	mov	r1, r8
 800b64c:	008a      	lsls	r2, r1, #2
 800b64e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800b652:	f7f5 fc97 	bl	8000f84 <__aeabi_uldivmod>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	4611      	mov	r1, r2
 800b65c:	4b38      	ldr	r3, [pc, #224]	@ (800b740 <UART_SetConfig+0x4e4>)
 800b65e:	fba3 2301 	umull	r2, r3, r3, r1
 800b662:	095b      	lsrs	r3, r3, #5
 800b664:	2264      	movs	r2, #100	@ 0x64
 800b666:	fb02 f303 	mul.w	r3, r2, r3
 800b66a:	1acb      	subs	r3, r1, r3
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	3332      	adds	r3, #50	@ 0x32
 800b670:	4a33      	ldr	r2, [pc, #204]	@ (800b740 <UART_SetConfig+0x4e4>)
 800b672:	fba2 2303 	umull	r2, r3, r2, r3
 800b676:	095b      	lsrs	r3, r3, #5
 800b678:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b67c:	441c      	add	r4, r3
 800b67e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b682:	2200      	movs	r2, #0
 800b684:	673b      	str	r3, [r7, #112]	@ 0x70
 800b686:	677a      	str	r2, [r7, #116]	@ 0x74
 800b688:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800b68c:	4642      	mov	r2, r8
 800b68e:	464b      	mov	r3, r9
 800b690:	1891      	adds	r1, r2, r2
 800b692:	60b9      	str	r1, [r7, #8]
 800b694:	415b      	adcs	r3, r3
 800b696:	60fb      	str	r3, [r7, #12]
 800b698:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b69c:	4641      	mov	r1, r8
 800b69e:	1851      	adds	r1, r2, r1
 800b6a0:	6039      	str	r1, [r7, #0]
 800b6a2:	4649      	mov	r1, r9
 800b6a4:	414b      	adcs	r3, r1
 800b6a6:	607b      	str	r3, [r7, #4]
 800b6a8:	f04f 0200 	mov.w	r2, #0
 800b6ac:	f04f 0300 	mov.w	r3, #0
 800b6b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b6b4:	4659      	mov	r1, fp
 800b6b6:	00cb      	lsls	r3, r1, #3
 800b6b8:	4651      	mov	r1, sl
 800b6ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b6be:	4651      	mov	r1, sl
 800b6c0:	00ca      	lsls	r2, r1, #3
 800b6c2:	4610      	mov	r0, r2
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	4642      	mov	r2, r8
 800b6ca:	189b      	adds	r3, r3, r2
 800b6cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6ce:	464b      	mov	r3, r9
 800b6d0:	460a      	mov	r2, r1
 800b6d2:	eb42 0303 	adc.w	r3, r2, r3
 800b6d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b6d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	663b      	str	r3, [r7, #96]	@ 0x60
 800b6e2:	667a      	str	r2, [r7, #100]	@ 0x64
 800b6e4:	f04f 0200 	mov.w	r2, #0
 800b6e8:	f04f 0300 	mov.w	r3, #0
 800b6ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800b6f0:	4649      	mov	r1, r9
 800b6f2:	008b      	lsls	r3, r1, #2
 800b6f4:	4641      	mov	r1, r8
 800b6f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b6fa:	4641      	mov	r1, r8
 800b6fc:	008a      	lsls	r2, r1, #2
 800b6fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800b702:	f7f5 fc3f 	bl	8000f84 <__aeabi_uldivmod>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	4b0d      	ldr	r3, [pc, #52]	@ (800b740 <UART_SetConfig+0x4e4>)
 800b70c:	fba3 1302 	umull	r1, r3, r3, r2
 800b710:	095b      	lsrs	r3, r3, #5
 800b712:	2164      	movs	r1, #100	@ 0x64
 800b714:	fb01 f303 	mul.w	r3, r1, r3
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	011b      	lsls	r3, r3, #4
 800b71c:	3332      	adds	r3, #50	@ 0x32
 800b71e:	4a08      	ldr	r2, [pc, #32]	@ (800b740 <UART_SetConfig+0x4e4>)
 800b720:	fba2 2303 	umull	r2, r3, r2, r3
 800b724:	095b      	lsrs	r3, r3, #5
 800b726:	f003 020f 	and.w	r2, r3, #15
 800b72a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4422      	add	r2, r4
 800b732:	609a      	str	r2, [r3, #8]
}
 800b734:	bf00      	nop
 800b736:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800b73a:	46bd      	mov	sp, r7
 800b73c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b740:	51eb851f 	.word	0x51eb851f

0800b744 <calloc>:
 800b744:	4b02      	ldr	r3, [pc, #8]	@ (800b750 <calloc+0xc>)
 800b746:	460a      	mov	r2, r1
 800b748:	4601      	mov	r1, r0
 800b74a:	6818      	ldr	r0, [r3, #0]
 800b74c:	f000 b802 	b.w	800b754 <_calloc_r>
 800b750:	20000044 	.word	0x20000044

0800b754 <_calloc_r>:
 800b754:	b570      	push	{r4, r5, r6, lr}
 800b756:	fba1 5402 	umull	r5, r4, r1, r2
 800b75a:	b93c      	cbnz	r4, 800b76c <_calloc_r+0x18>
 800b75c:	4629      	mov	r1, r5
 800b75e:	f000 f82f 	bl	800b7c0 <_malloc_r>
 800b762:	4606      	mov	r6, r0
 800b764:	b928      	cbnz	r0, 800b772 <_calloc_r+0x1e>
 800b766:	2600      	movs	r6, #0
 800b768:	4630      	mov	r0, r6
 800b76a:	bd70      	pop	{r4, r5, r6, pc}
 800b76c:	220c      	movs	r2, #12
 800b76e:	6002      	str	r2, [r0, #0]
 800b770:	e7f9      	b.n	800b766 <_calloc_r+0x12>
 800b772:	462a      	mov	r2, r5
 800b774:	4621      	mov	r1, r4
 800b776:	f001 f87c 	bl	800c872 <memset>
 800b77a:	e7f5      	b.n	800b768 <_calloc_r+0x14>

0800b77c <sbrk_aligned>:
 800b77c:	b570      	push	{r4, r5, r6, lr}
 800b77e:	4e0f      	ldr	r6, [pc, #60]	@ (800b7bc <sbrk_aligned+0x40>)
 800b780:	460c      	mov	r4, r1
 800b782:	6831      	ldr	r1, [r6, #0]
 800b784:	4605      	mov	r5, r0
 800b786:	b911      	cbnz	r1, 800b78e <sbrk_aligned+0x12>
 800b788:	f001 f8ca 	bl	800c920 <_sbrk_r>
 800b78c:	6030      	str	r0, [r6, #0]
 800b78e:	4621      	mov	r1, r4
 800b790:	4628      	mov	r0, r5
 800b792:	f001 f8c5 	bl	800c920 <_sbrk_r>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	d103      	bne.n	800b7a2 <sbrk_aligned+0x26>
 800b79a:	f04f 34ff 	mov.w	r4, #4294967295
 800b79e:	4620      	mov	r0, r4
 800b7a0:	bd70      	pop	{r4, r5, r6, pc}
 800b7a2:	1cc4      	adds	r4, r0, #3
 800b7a4:	f024 0403 	bic.w	r4, r4, #3
 800b7a8:	42a0      	cmp	r0, r4
 800b7aa:	d0f8      	beq.n	800b79e <sbrk_aligned+0x22>
 800b7ac:	1a21      	subs	r1, r4, r0
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f001 f8b6 	bl	800c920 <_sbrk_r>
 800b7b4:	3001      	adds	r0, #1
 800b7b6:	d1f2      	bne.n	800b79e <sbrk_aligned+0x22>
 800b7b8:	e7ef      	b.n	800b79a <sbrk_aligned+0x1e>
 800b7ba:	bf00      	nop
 800b7bc:	20001694 	.word	0x20001694

0800b7c0 <_malloc_r>:
 800b7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7c4:	1ccd      	adds	r5, r1, #3
 800b7c6:	f025 0503 	bic.w	r5, r5, #3
 800b7ca:	3508      	adds	r5, #8
 800b7cc:	2d0c      	cmp	r5, #12
 800b7ce:	bf38      	it	cc
 800b7d0:	250c      	movcc	r5, #12
 800b7d2:	2d00      	cmp	r5, #0
 800b7d4:	4606      	mov	r6, r0
 800b7d6:	db01      	blt.n	800b7dc <_malloc_r+0x1c>
 800b7d8:	42a9      	cmp	r1, r5
 800b7da:	d904      	bls.n	800b7e6 <_malloc_r+0x26>
 800b7dc:	230c      	movs	r3, #12
 800b7de:	6033      	str	r3, [r6, #0]
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b8bc <_malloc_r+0xfc>
 800b7ea:	f000 f869 	bl	800b8c0 <__malloc_lock>
 800b7ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b7f2:	461c      	mov	r4, r3
 800b7f4:	bb44      	cbnz	r4, 800b848 <_malloc_r+0x88>
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7ff ffbf 	bl	800b77c <sbrk_aligned>
 800b7fe:	1c43      	adds	r3, r0, #1
 800b800:	4604      	mov	r4, r0
 800b802:	d158      	bne.n	800b8b6 <_malloc_r+0xf6>
 800b804:	f8d8 4000 	ldr.w	r4, [r8]
 800b808:	4627      	mov	r7, r4
 800b80a:	2f00      	cmp	r7, #0
 800b80c:	d143      	bne.n	800b896 <_malloc_r+0xd6>
 800b80e:	2c00      	cmp	r4, #0
 800b810:	d04b      	beq.n	800b8aa <_malloc_r+0xea>
 800b812:	6823      	ldr	r3, [r4, #0]
 800b814:	4639      	mov	r1, r7
 800b816:	4630      	mov	r0, r6
 800b818:	eb04 0903 	add.w	r9, r4, r3
 800b81c:	f001 f880 	bl	800c920 <_sbrk_r>
 800b820:	4581      	cmp	r9, r0
 800b822:	d142      	bne.n	800b8aa <_malloc_r+0xea>
 800b824:	6821      	ldr	r1, [r4, #0]
 800b826:	1a6d      	subs	r5, r5, r1
 800b828:	4629      	mov	r1, r5
 800b82a:	4630      	mov	r0, r6
 800b82c:	f7ff ffa6 	bl	800b77c <sbrk_aligned>
 800b830:	3001      	adds	r0, #1
 800b832:	d03a      	beq.n	800b8aa <_malloc_r+0xea>
 800b834:	6823      	ldr	r3, [r4, #0]
 800b836:	442b      	add	r3, r5
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	f8d8 3000 	ldr.w	r3, [r8]
 800b83e:	685a      	ldr	r2, [r3, #4]
 800b840:	bb62      	cbnz	r2, 800b89c <_malloc_r+0xdc>
 800b842:	f8c8 7000 	str.w	r7, [r8]
 800b846:	e00f      	b.n	800b868 <_malloc_r+0xa8>
 800b848:	6822      	ldr	r2, [r4, #0]
 800b84a:	1b52      	subs	r2, r2, r5
 800b84c:	d420      	bmi.n	800b890 <_malloc_r+0xd0>
 800b84e:	2a0b      	cmp	r2, #11
 800b850:	d917      	bls.n	800b882 <_malloc_r+0xc2>
 800b852:	1961      	adds	r1, r4, r5
 800b854:	42a3      	cmp	r3, r4
 800b856:	6025      	str	r5, [r4, #0]
 800b858:	bf18      	it	ne
 800b85a:	6059      	strne	r1, [r3, #4]
 800b85c:	6863      	ldr	r3, [r4, #4]
 800b85e:	bf08      	it	eq
 800b860:	f8c8 1000 	streq.w	r1, [r8]
 800b864:	5162      	str	r2, [r4, r5]
 800b866:	604b      	str	r3, [r1, #4]
 800b868:	4630      	mov	r0, r6
 800b86a:	f000 f82f 	bl	800b8cc <__malloc_unlock>
 800b86e:	f104 000b 	add.w	r0, r4, #11
 800b872:	1d23      	adds	r3, r4, #4
 800b874:	f020 0007 	bic.w	r0, r0, #7
 800b878:	1ac2      	subs	r2, r0, r3
 800b87a:	bf1c      	itt	ne
 800b87c:	1a1b      	subne	r3, r3, r0
 800b87e:	50a3      	strne	r3, [r4, r2]
 800b880:	e7af      	b.n	800b7e2 <_malloc_r+0x22>
 800b882:	6862      	ldr	r2, [r4, #4]
 800b884:	42a3      	cmp	r3, r4
 800b886:	bf0c      	ite	eq
 800b888:	f8c8 2000 	streq.w	r2, [r8]
 800b88c:	605a      	strne	r2, [r3, #4]
 800b88e:	e7eb      	b.n	800b868 <_malloc_r+0xa8>
 800b890:	4623      	mov	r3, r4
 800b892:	6864      	ldr	r4, [r4, #4]
 800b894:	e7ae      	b.n	800b7f4 <_malloc_r+0x34>
 800b896:	463c      	mov	r4, r7
 800b898:	687f      	ldr	r7, [r7, #4]
 800b89a:	e7b6      	b.n	800b80a <_malloc_r+0x4a>
 800b89c:	461a      	mov	r2, r3
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	42a3      	cmp	r3, r4
 800b8a2:	d1fb      	bne.n	800b89c <_malloc_r+0xdc>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	6053      	str	r3, [r2, #4]
 800b8a8:	e7de      	b.n	800b868 <_malloc_r+0xa8>
 800b8aa:	230c      	movs	r3, #12
 800b8ac:	6033      	str	r3, [r6, #0]
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f000 f80c 	bl	800b8cc <__malloc_unlock>
 800b8b4:	e794      	b.n	800b7e0 <_malloc_r+0x20>
 800b8b6:	6005      	str	r5, [r0, #0]
 800b8b8:	e7d6      	b.n	800b868 <_malloc_r+0xa8>
 800b8ba:	bf00      	nop
 800b8bc:	20001698 	.word	0x20001698

0800b8c0 <__malloc_lock>:
 800b8c0:	4801      	ldr	r0, [pc, #4]	@ (800b8c8 <__malloc_lock+0x8>)
 800b8c2:	f001 b87a 	b.w	800c9ba <__retarget_lock_acquire_recursive>
 800b8c6:	bf00      	nop
 800b8c8:	200017dc 	.word	0x200017dc

0800b8cc <__malloc_unlock>:
 800b8cc:	4801      	ldr	r0, [pc, #4]	@ (800b8d4 <__malloc_unlock+0x8>)
 800b8ce:	f001 b875 	b.w	800c9bc <__retarget_lock_release_recursive>
 800b8d2:	bf00      	nop
 800b8d4:	200017dc 	.word	0x200017dc

0800b8d8 <__cvt>:
 800b8d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8dc:	ec57 6b10 	vmov	r6, r7, d0
 800b8e0:	2f00      	cmp	r7, #0
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	463b      	mov	r3, r7
 800b8e8:	bfbb      	ittet	lt
 800b8ea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b8ee:	461f      	movlt	r7, r3
 800b8f0:	2300      	movge	r3, #0
 800b8f2:	232d      	movlt	r3, #45	@ 0x2d
 800b8f4:	700b      	strb	r3, [r1, #0]
 800b8f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b8f8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b8fc:	4691      	mov	r9, r2
 800b8fe:	f023 0820 	bic.w	r8, r3, #32
 800b902:	bfbc      	itt	lt
 800b904:	4632      	movlt	r2, r6
 800b906:	4616      	movlt	r6, r2
 800b908:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b90c:	d005      	beq.n	800b91a <__cvt+0x42>
 800b90e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b912:	d100      	bne.n	800b916 <__cvt+0x3e>
 800b914:	3401      	adds	r4, #1
 800b916:	2102      	movs	r1, #2
 800b918:	e000      	b.n	800b91c <__cvt+0x44>
 800b91a:	2103      	movs	r1, #3
 800b91c:	ab03      	add	r3, sp, #12
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	ab02      	add	r3, sp, #8
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	ec47 6b10 	vmov	d0, r6, r7
 800b928:	4653      	mov	r3, sl
 800b92a:	4622      	mov	r2, r4
 800b92c:	f001 f8e4 	bl	800caf8 <_dtoa_r>
 800b930:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b934:	4605      	mov	r5, r0
 800b936:	d119      	bne.n	800b96c <__cvt+0x94>
 800b938:	f019 0f01 	tst.w	r9, #1
 800b93c:	d00e      	beq.n	800b95c <__cvt+0x84>
 800b93e:	eb00 0904 	add.w	r9, r0, r4
 800b942:	2200      	movs	r2, #0
 800b944:	2300      	movs	r3, #0
 800b946:	4630      	mov	r0, r6
 800b948:	4639      	mov	r1, r7
 800b94a:	f7f5 f8dd 	bl	8000b08 <__aeabi_dcmpeq>
 800b94e:	b108      	cbz	r0, 800b954 <__cvt+0x7c>
 800b950:	f8cd 900c 	str.w	r9, [sp, #12]
 800b954:	2230      	movs	r2, #48	@ 0x30
 800b956:	9b03      	ldr	r3, [sp, #12]
 800b958:	454b      	cmp	r3, r9
 800b95a:	d31e      	bcc.n	800b99a <__cvt+0xc2>
 800b95c:	9b03      	ldr	r3, [sp, #12]
 800b95e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b960:	1b5b      	subs	r3, r3, r5
 800b962:	4628      	mov	r0, r5
 800b964:	6013      	str	r3, [r2, #0]
 800b966:	b004      	add	sp, #16
 800b968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b970:	eb00 0904 	add.w	r9, r0, r4
 800b974:	d1e5      	bne.n	800b942 <__cvt+0x6a>
 800b976:	7803      	ldrb	r3, [r0, #0]
 800b978:	2b30      	cmp	r3, #48	@ 0x30
 800b97a:	d10a      	bne.n	800b992 <__cvt+0xba>
 800b97c:	2200      	movs	r2, #0
 800b97e:	2300      	movs	r3, #0
 800b980:	4630      	mov	r0, r6
 800b982:	4639      	mov	r1, r7
 800b984:	f7f5 f8c0 	bl	8000b08 <__aeabi_dcmpeq>
 800b988:	b918      	cbnz	r0, 800b992 <__cvt+0xba>
 800b98a:	f1c4 0401 	rsb	r4, r4, #1
 800b98e:	f8ca 4000 	str.w	r4, [sl]
 800b992:	f8da 3000 	ldr.w	r3, [sl]
 800b996:	4499      	add	r9, r3
 800b998:	e7d3      	b.n	800b942 <__cvt+0x6a>
 800b99a:	1c59      	adds	r1, r3, #1
 800b99c:	9103      	str	r1, [sp, #12]
 800b99e:	701a      	strb	r2, [r3, #0]
 800b9a0:	e7d9      	b.n	800b956 <__cvt+0x7e>

0800b9a2 <__exponent>:
 800b9a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b9a4:	2900      	cmp	r1, #0
 800b9a6:	bfba      	itte	lt
 800b9a8:	4249      	neglt	r1, r1
 800b9aa:	232d      	movlt	r3, #45	@ 0x2d
 800b9ac:	232b      	movge	r3, #43	@ 0x2b
 800b9ae:	2909      	cmp	r1, #9
 800b9b0:	7002      	strb	r2, [r0, #0]
 800b9b2:	7043      	strb	r3, [r0, #1]
 800b9b4:	dd29      	ble.n	800ba0a <__exponent+0x68>
 800b9b6:	f10d 0307 	add.w	r3, sp, #7
 800b9ba:	461d      	mov	r5, r3
 800b9bc:	270a      	movs	r7, #10
 800b9be:	461a      	mov	r2, r3
 800b9c0:	fbb1 f6f7 	udiv	r6, r1, r7
 800b9c4:	fb07 1416 	mls	r4, r7, r6, r1
 800b9c8:	3430      	adds	r4, #48	@ 0x30
 800b9ca:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	2c63      	cmp	r4, #99	@ 0x63
 800b9d2:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	dcf1      	bgt.n	800b9be <__exponent+0x1c>
 800b9da:	3130      	adds	r1, #48	@ 0x30
 800b9dc:	1e94      	subs	r4, r2, #2
 800b9de:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b9e2:	1c41      	adds	r1, r0, #1
 800b9e4:	4623      	mov	r3, r4
 800b9e6:	42ab      	cmp	r3, r5
 800b9e8:	d30a      	bcc.n	800ba00 <__exponent+0x5e>
 800b9ea:	f10d 0309 	add.w	r3, sp, #9
 800b9ee:	1a9b      	subs	r3, r3, r2
 800b9f0:	42ac      	cmp	r4, r5
 800b9f2:	bf88      	it	hi
 800b9f4:	2300      	movhi	r3, #0
 800b9f6:	3302      	adds	r3, #2
 800b9f8:	4403      	add	r3, r0
 800b9fa:	1a18      	subs	r0, r3, r0
 800b9fc:	b003      	add	sp, #12
 800b9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba00:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ba04:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ba08:	e7ed      	b.n	800b9e6 <__exponent+0x44>
 800ba0a:	2330      	movs	r3, #48	@ 0x30
 800ba0c:	3130      	adds	r1, #48	@ 0x30
 800ba0e:	7083      	strb	r3, [r0, #2]
 800ba10:	70c1      	strb	r1, [r0, #3]
 800ba12:	1d03      	adds	r3, r0, #4
 800ba14:	e7f1      	b.n	800b9fa <__exponent+0x58>
	...

0800ba18 <_printf_float>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	b08d      	sub	sp, #52	@ 0x34
 800ba1e:	460c      	mov	r4, r1
 800ba20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ba24:	4616      	mov	r6, r2
 800ba26:	461f      	mov	r7, r3
 800ba28:	4605      	mov	r5, r0
 800ba2a:	f000 ff41 	bl	800c8b0 <_localeconv_r>
 800ba2e:	6803      	ldr	r3, [r0, #0]
 800ba30:	9304      	str	r3, [sp, #16]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7f4 fc3c 	bl	80002b0 <strlen>
 800ba38:	2300      	movs	r3, #0
 800ba3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba3c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba40:	9005      	str	r0, [sp, #20]
 800ba42:	3307      	adds	r3, #7
 800ba44:	f023 0307 	bic.w	r3, r3, #7
 800ba48:	f103 0208 	add.w	r2, r3, #8
 800ba4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ba50:	f8d4 b000 	ldr.w	fp, [r4]
 800ba54:	f8c8 2000 	str.w	r2, [r8]
 800ba58:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ba60:	9307      	str	r3, [sp, #28]
 800ba62:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ba6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba6e:	4b9c      	ldr	r3, [pc, #624]	@ (800bce0 <_printf_float+0x2c8>)
 800ba70:	f04f 32ff 	mov.w	r2, #4294967295
 800ba74:	f7f5 f87a 	bl	8000b6c <__aeabi_dcmpun>
 800ba78:	bb70      	cbnz	r0, 800bad8 <_printf_float+0xc0>
 800ba7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba7e:	4b98      	ldr	r3, [pc, #608]	@ (800bce0 <_printf_float+0x2c8>)
 800ba80:	f04f 32ff 	mov.w	r2, #4294967295
 800ba84:	f7f5 f854 	bl	8000b30 <__aeabi_dcmple>
 800ba88:	bb30      	cbnz	r0, 800bad8 <_printf_float+0xc0>
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	4640      	mov	r0, r8
 800ba90:	4649      	mov	r1, r9
 800ba92:	f7f5 f843 	bl	8000b1c <__aeabi_dcmplt>
 800ba96:	b110      	cbz	r0, 800ba9e <_printf_float+0x86>
 800ba98:	232d      	movs	r3, #45	@ 0x2d
 800ba9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba9e:	4a91      	ldr	r2, [pc, #580]	@ (800bce4 <_printf_float+0x2cc>)
 800baa0:	4b91      	ldr	r3, [pc, #580]	@ (800bce8 <_printf_float+0x2d0>)
 800baa2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800baa6:	bf94      	ite	ls
 800baa8:	4690      	movls	r8, r2
 800baaa:	4698      	movhi	r8, r3
 800baac:	2303      	movs	r3, #3
 800baae:	6123      	str	r3, [r4, #16]
 800bab0:	f02b 0304 	bic.w	r3, fp, #4
 800bab4:	6023      	str	r3, [r4, #0]
 800bab6:	f04f 0900 	mov.w	r9, #0
 800baba:	9700      	str	r7, [sp, #0]
 800babc:	4633      	mov	r3, r6
 800babe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800bac0:	4621      	mov	r1, r4
 800bac2:	4628      	mov	r0, r5
 800bac4:	f000 f9d2 	bl	800be6c <_printf_common>
 800bac8:	3001      	adds	r0, #1
 800baca:	f040 808d 	bne.w	800bbe8 <_printf_float+0x1d0>
 800bace:	f04f 30ff 	mov.w	r0, #4294967295
 800bad2:	b00d      	add	sp, #52	@ 0x34
 800bad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad8:	4642      	mov	r2, r8
 800bada:	464b      	mov	r3, r9
 800badc:	4640      	mov	r0, r8
 800bade:	4649      	mov	r1, r9
 800bae0:	f7f5 f844 	bl	8000b6c <__aeabi_dcmpun>
 800bae4:	b140      	cbz	r0, 800baf8 <_printf_float+0xe0>
 800bae6:	464b      	mov	r3, r9
 800bae8:	2b00      	cmp	r3, #0
 800baea:	bfbc      	itt	lt
 800baec:	232d      	movlt	r3, #45	@ 0x2d
 800baee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800baf2:	4a7e      	ldr	r2, [pc, #504]	@ (800bcec <_printf_float+0x2d4>)
 800baf4:	4b7e      	ldr	r3, [pc, #504]	@ (800bcf0 <_printf_float+0x2d8>)
 800baf6:	e7d4      	b.n	800baa2 <_printf_float+0x8a>
 800baf8:	6863      	ldr	r3, [r4, #4]
 800bafa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800bafe:	9206      	str	r2, [sp, #24]
 800bb00:	1c5a      	adds	r2, r3, #1
 800bb02:	d13b      	bne.n	800bb7c <_printf_float+0x164>
 800bb04:	2306      	movs	r3, #6
 800bb06:	6063      	str	r3, [r4, #4]
 800bb08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	6022      	str	r2, [r4, #0]
 800bb10:	9303      	str	r3, [sp, #12]
 800bb12:	ab0a      	add	r3, sp, #40	@ 0x28
 800bb14:	e9cd a301 	strd	sl, r3, [sp, #4]
 800bb18:	ab09      	add	r3, sp, #36	@ 0x24
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	6861      	ldr	r1, [r4, #4]
 800bb1e:	ec49 8b10 	vmov	d0, r8, r9
 800bb22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800bb26:	4628      	mov	r0, r5
 800bb28:	f7ff fed6 	bl	800b8d8 <__cvt>
 800bb2c:	9b06      	ldr	r3, [sp, #24]
 800bb2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bb30:	2b47      	cmp	r3, #71	@ 0x47
 800bb32:	4680      	mov	r8, r0
 800bb34:	d129      	bne.n	800bb8a <_printf_float+0x172>
 800bb36:	1cc8      	adds	r0, r1, #3
 800bb38:	db02      	blt.n	800bb40 <_printf_float+0x128>
 800bb3a:	6863      	ldr	r3, [r4, #4]
 800bb3c:	4299      	cmp	r1, r3
 800bb3e:	dd41      	ble.n	800bbc4 <_printf_float+0x1ac>
 800bb40:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb44:	fa5f fa8a 	uxtb.w	sl, sl
 800bb48:	3901      	subs	r1, #1
 800bb4a:	4652      	mov	r2, sl
 800bb4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bb50:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb52:	f7ff ff26 	bl	800b9a2 <__exponent>
 800bb56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bb58:	1813      	adds	r3, r2, r0
 800bb5a:	2a01      	cmp	r2, #1
 800bb5c:	4681      	mov	r9, r0
 800bb5e:	6123      	str	r3, [r4, #16]
 800bb60:	dc02      	bgt.n	800bb68 <_printf_float+0x150>
 800bb62:	6822      	ldr	r2, [r4, #0]
 800bb64:	07d2      	lsls	r2, r2, #31
 800bb66:	d501      	bpl.n	800bb6c <_printf_float+0x154>
 800bb68:	3301      	adds	r3, #1
 800bb6a:	6123      	str	r3, [r4, #16]
 800bb6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d0a2      	beq.n	800baba <_printf_float+0xa2>
 800bb74:	232d      	movs	r3, #45	@ 0x2d
 800bb76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb7a:	e79e      	b.n	800baba <_printf_float+0xa2>
 800bb7c:	9a06      	ldr	r2, [sp, #24]
 800bb7e:	2a47      	cmp	r2, #71	@ 0x47
 800bb80:	d1c2      	bne.n	800bb08 <_printf_float+0xf0>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1c0      	bne.n	800bb08 <_printf_float+0xf0>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e7bd      	b.n	800bb06 <_printf_float+0xee>
 800bb8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb8e:	d9db      	bls.n	800bb48 <_printf_float+0x130>
 800bb90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb94:	d118      	bne.n	800bbc8 <_printf_float+0x1b0>
 800bb96:	2900      	cmp	r1, #0
 800bb98:	6863      	ldr	r3, [r4, #4]
 800bb9a:	dd0b      	ble.n	800bbb4 <_printf_float+0x19c>
 800bb9c:	6121      	str	r1, [r4, #16]
 800bb9e:	b913      	cbnz	r3, 800bba6 <_printf_float+0x18e>
 800bba0:	6822      	ldr	r2, [r4, #0]
 800bba2:	07d0      	lsls	r0, r2, #31
 800bba4:	d502      	bpl.n	800bbac <_printf_float+0x194>
 800bba6:	3301      	adds	r3, #1
 800bba8:	440b      	add	r3, r1
 800bbaa:	6123      	str	r3, [r4, #16]
 800bbac:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bbae:	f04f 0900 	mov.w	r9, #0
 800bbb2:	e7db      	b.n	800bb6c <_printf_float+0x154>
 800bbb4:	b913      	cbnz	r3, 800bbbc <_printf_float+0x1a4>
 800bbb6:	6822      	ldr	r2, [r4, #0]
 800bbb8:	07d2      	lsls	r2, r2, #31
 800bbba:	d501      	bpl.n	800bbc0 <_printf_float+0x1a8>
 800bbbc:	3302      	adds	r3, #2
 800bbbe:	e7f4      	b.n	800bbaa <_printf_float+0x192>
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	e7f2      	b.n	800bbaa <_printf_float+0x192>
 800bbc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bbc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bbca:	4299      	cmp	r1, r3
 800bbcc:	db05      	blt.n	800bbda <_printf_float+0x1c2>
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	6121      	str	r1, [r4, #16]
 800bbd2:	07d8      	lsls	r0, r3, #31
 800bbd4:	d5ea      	bpl.n	800bbac <_printf_float+0x194>
 800bbd6:	1c4b      	adds	r3, r1, #1
 800bbd8:	e7e7      	b.n	800bbaa <_printf_float+0x192>
 800bbda:	2900      	cmp	r1, #0
 800bbdc:	bfd4      	ite	le
 800bbde:	f1c1 0202 	rsble	r2, r1, #2
 800bbe2:	2201      	movgt	r2, #1
 800bbe4:	4413      	add	r3, r2
 800bbe6:	e7e0      	b.n	800bbaa <_printf_float+0x192>
 800bbe8:	6823      	ldr	r3, [r4, #0]
 800bbea:	055a      	lsls	r2, r3, #21
 800bbec:	d407      	bmi.n	800bbfe <_printf_float+0x1e6>
 800bbee:	6923      	ldr	r3, [r4, #16]
 800bbf0:	4642      	mov	r2, r8
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4628      	mov	r0, r5
 800bbf6:	47b8      	blx	r7
 800bbf8:	3001      	adds	r0, #1
 800bbfa:	d12b      	bne.n	800bc54 <_printf_float+0x23c>
 800bbfc:	e767      	b.n	800bace <_printf_float+0xb6>
 800bbfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bc02:	f240 80dd 	bls.w	800bdc0 <_printf_float+0x3a8>
 800bc06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	f7f4 ff7b 	bl	8000b08 <__aeabi_dcmpeq>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d033      	beq.n	800bc7e <_printf_float+0x266>
 800bc16:	4a37      	ldr	r2, [pc, #220]	@ (800bcf4 <_printf_float+0x2dc>)
 800bc18:	2301      	movs	r3, #1
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	47b8      	blx	r7
 800bc20:	3001      	adds	r0, #1
 800bc22:	f43f af54 	beq.w	800bace <_printf_float+0xb6>
 800bc26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bc2a:	4543      	cmp	r3, r8
 800bc2c:	db02      	blt.n	800bc34 <_printf_float+0x21c>
 800bc2e:	6823      	ldr	r3, [r4, #0]
 800bc30:	07d8      	lsls	r0, r3, #31
 800bc32:	d50f      	bpl.n	800bc54 <_printf_float+0x23c>
 800bc34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc38:	4631      	mov	r1, r6
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	47b8      	blx	r7
 800bc3e:	3001      	adds	r0, #1
 800bc40:	f43f af45 	beq.w	800bace <_printf_float+0xb6>
 800bc44:	f04f 0900 	mov.w	r9, #0
 800bc48:	f108 38ff 	add.w	r8, r8, #4294967295
 800bc4c:	f104 0a1a 	add.w	sl, r4, #26
 800bc50:	45c8      	cmp	r8, r9
 800bc52:	dc09      	bgt.n	800bc68 <_printf_float+0x250>
 800bc54:	6823      	ldr	r3, [r4, #0]
 800bc56:	079b      	lsls	r3, r3, #30
 800bc58:	f100 8103 	bmi.w	800be62 <_printf_float+0x44a>
 800bc5c:	68e0      	ldr	r0, [r4, #12]
 800bc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bc60:	4298      	cmp	r0, r3
 800bc62:	bfb8      	it	lt
 800bc64:	4618      	movlt	r0, r3
 800bc66:	e734      	b.n	800bad2 <_printf_float+0xba>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	4652      	mov	r2, sl
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	f43f af2b 	beq.w	800bace <_printf_float+0xb6>
 800bc78:	f109 0901 	add.w	r9, r9, #1
 800bc7c:	e7e8      	b.n	800bc50 <_printf_float+0x238>
 800bc7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dc39      	bgt.n	800bcf8 <_printf_float+0x2e0>
 800bc84:	4a1b      	ldr	r2, [pc, #108]	@ (800bcf4 <_printf_float+0x2dc>)
 800bc86:	2301      	movs	r3, #1
 800bc88:	4631      	mov	r1, r6
 800bc8a:	4628      	mov	r0, r5
 800bc8c:	47b8      	blx	r7
 800bc8e:	3001      	adds	r0, #1
 800bc90:	f43f af1d 	beq.w	800bace <_printf_float+0xb6>
 800bc94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800bc98:	ea59 0303 	orrs.w	r3, r9, r3
 800bc9c:	d102      	bne.n	800bca4 <_printf_float+0x28c>
 800bc9e:	6823      	ldr	r3, [r4, #0]
 800bca0:	07d9      	lsls	r1, r3, #31
 800bca2:	d5d7      	bpl.n	800bc54 <_printf_float+0x23c>
 800bca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bca8:	4631      	mov	r1, r6
 800bcaa:	4628      	mov	r0, r5
 800bcac:	47b8      	blx	r7
 800bcae:	3001      	adds	r0, #1
 800bcb0:	f43f af0d 	beq.w	800bace <_printf_float+0xb6>
 800bcb4:	f04f 0a00 	mov.w	sl, #0
 800bcb8:	f104 0b1a 	add.w	fp, r4, #26
 800bcbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcbe:	425b      	negs	r3, r3
 800bcc0:	4553      	cmp	r3, sl
 800bcc2:	dc01      	bgt.n	800bcc8 <_printf_float+0x2b0>
 800bcc4:	464b      	mov	r3, r9
 800bcc6:	e793      	b.n	800bbf0 <_printf_float+0x1d8>
 800bcc8:	2301      	movs	r3, #1
 800bcca:	465a      	mov	r2, fp
 800bccc:	4631      	mov	r1, r6
 800bcce:	4628      	mov	r0, r5
 800bcd0:	47b8      	blx	r7
 800bcd2:	3001      	adds	r0, #1
 800bcd4:	f43f aefb 	beq.w	800bace <_printf_float+0xb6>
 800bcd8:	f10a 0a01 	add.w	sl, sl, #1
 800bcdc:	e7ee      	b.n	800bcbc <_printf_float+0x2a4>
 800bcde:	bf00      	nop
 800bce0:	7fefffff 	.word	0x7fefffff
 800bce4:	08012104 	.word	0x08012104
 800bce8:	08012108 	.word	0x08012108
 800bcec:	0801210c 	.word	0x0801210c
 800bcf0:	08012110 	.word	0x08012110
 800bcf4:	080124a0 	.word	0x080124a0
 800bcf8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bcfa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bcfe:	4553      	cmp	r3, sl
 800bd00:	bfa8      	it	ge
 800bd02:	4653      	movge	r3, sl
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	4699      	mov	r9, r3
 800bd08:	dc36      	bgt.n	800bd78 <_printf_float+0x360>
 800bd0a:	f04f 0b00 	mov.w	fp, #0
 800bd0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd12:	f104 021a 	add.w	r2, r4, #26
 800bd16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bd18:	9306      	str	r3, [sp, #24]
 800bd1a:	eba3 0309 	sub.w	r3, r3, r9
 800bd1e:	455b      	cmp	r3, fp
 800bd20:	dc31      	bgt.n	800bd86 <_printf_float+0x36e>
 800bd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd24:	459a      	cmp	sl, r3
 800bd26:	dc3a      	bgt.n	800bd9e <_printf_float+0x386>
 800bd28:	6823      	ldr	r3, [r4, #0]
 800bd2a:	07da      	lsls	r2, r3, #31
 800bd2c:	d437      	bmi.n	800bd9e <_printf_float+0x386>
 800bd2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd30:	ebaa 0903 	sub.w	r9, sl, r3
 800bd34:	9b06      	ldr	r3, [sp, #24]
 800bd36:	ebaa 0303 	sub.w	r3, sl, r3
 800bd3a:	4599      	cmp	r9, r3
 800bd3c:	bfa8      	it	ge
 800bd3e:	4699      	movge	r9, r3
 800bd40:	f1b9 0f00 	cmp.w	r9, #0
 800bd44:	dc33      	bgt.n	800bdae <_printf_float+0x396>
 800bd46:	f04f 0800 	mov.w	r8, #0
 800bd4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd4e:	f104 0b1a 	add.w	fp, r4, #26
 800bd52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd54:	ebaa 0303 	sub.w	r3, sl, r3
 800bd58:	eba3 0309 	sub.w	r3, r3, r9
 800bd5c:	4543      	cmp	r3, r8
 800bd5e:	f77f af79 	ble.w	800bc54 <_printf_float+0x23c>
 800bd62:	2301      	movs	r3, #1
 800bd64:	465a      	mov	r2, fp
 800bd66:	4631      	mov	r1, r6
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b8      	blx	r7
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	f43f aeae 	beq.w	800bace <_printf_float+0xb6>
 800bd72:	f108 0801 	add.w	r8, r8, #1
 800bd76:	e7ec      	b.n	800bd52 <_printf_float+0x33a>
 800bd78:	4642      	mov	r2, r8
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b8      	blx	r7
 800bd80:	3001      	adds	r0, #1
 800bd82:	d1c2      	bne.n	800bd0a <_printf_float+0x2f2>
 800bd84:	e6a3      	b.n	800bace <_printf_float+0xb6>
 800bd86:	2301      	movs	r3, #1
 800bd88:	4631      	mov	r1, r6
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	9206      	str	r2, [sp, #24]
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	f43f ae9c 	beq.w	800bace <_printf_float+0xb6>
 800bd96:	9a06      	ldr	r2, [sp, #24]
 800bd98:	f10b 0b01 	add.w	fp, fp, #1
 800bd9c:	e7bb      	b.n	800bd16 <_printf_float+0x2fe>
 800bd9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bda2:	4631      	mov	r1, r6
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b8      	blx	r7
 800bda8:	3001      	adds	r0, #1
 800bdaa:	d1c0      	bne.n	800bd2e <_printf_float+0x316>
 800bdac:	e68f      	b.n	800bace <_printf_float+0xb6>
 800bdae:	9a06      	ldr	r2, [sp, #24]
 800bdb0:	464b      	mov	r3, r9
 800bdb2:	4442      	add	r2, r8
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	47b8      	blx	r7
 800bdba:	3001      	adds	r0, #1
 800bdbc:	d1c3      	bne.n	800bd46 <_printf_float+0x32e>
 800bdbe:	e686      	b.n	800bace <_printf_float+0xb6>
 800bdc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800bdc4:	f1ba 0f01 	cmp.w	sl, #1
 800bdc8:	dc01      	bgt.n	800bdce <_printf_float+0x3b6>
 800bdca:	07db      	lsls	r3, r3, #31
 800bdcc:	d536      	bpl.n	800be3c <_printf_float+0x424>
 800bdce:	2301      	movs	r3, #1
 800bdd0:	4642      	mov	r2, r8
 800bdd2:	4631      	mov	r1, r6
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	47b8      	blx	r7
 800bdd8:	3001      	adds	r0, #1
 800bdda:	f43f ae78 	beq.w	800bace <_printf_float+0xb6>
 800bdde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bde2:	4631      	mov	r1, r6
 800bde4:	4628      	mov	r0, r5
 800bde6:	47b8      	blx	r7
 800bde8:	3001      	adds	r0, #1
 800bdea:	f43f ae70 	beq.w	800bace <_printf_float+0xb6>
 800bdee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bdfa:	f7f4 fe85 	bl	8000b08 <__aeabi_dcmpeq>
 800bdfe:	b9c0      	cbnz	r0, 800be32 <_printf_float+0x41a>
 800be00:	4653      	mov	r3, sl
 800be02:	f108 0201 	add.w	r2, r8, #1
 800be06:	4631      	mov	r1, r6
 800be08:	4628      	mov	r0, r5
 800be0a:	47b8      	blx	r7
 800be0c:	3001      	adds	r0, #1
 800be0e:	d10c      	bne.n	800be2a <_printf_float+0x412>
 800be10:	e65d      	b.n	800bace <_printf_float+0xb6>
 800be12:	2301      	movs	r3, #1
 800be14:	465a      	mov	r2, fp
 800be16:	4631      	mov	r1, r6
 800be18:	4628      	mov	r0, r5
 800be1a:	47b8      	blx	r7
 800be1c:	3001      	adds	r0, #1
 800be1e:	f43f ae56 	beq.w	800bace <_printf_float+0xb6>
 800be22:	f108 0801 	add.w	r8, r8, #1
 800be26:	45d0      	cmp	r8, sl
 800be28:	dbf3      	blt.n	800be12 <_printf_float+0x3fa>
 800be2a:	464b      	mov	r3, r9
 800be2c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800be30:	e6df      	b.n	800bbf2 <_printf_float+0x1da>
 800be32:	f04f 0800 	mov.w	r8, #0
 800be36:	f104 0b1a 	add.w	fp, r4, #26
 800be3a:	e7f4      	b.n	800be26 <_printf_float+0x40e>
 800be3c:	2301      	movs	r3, #1
 800be3e:	4642      	mov	r2, r8
 800be40:	e7e1      	b.n	800be06 <_printf_float+0x3ee>
 800be42:	2301      	movs	r3, #1
 800be44:	464a      	mov	r2, r9
 800be46:	4631      	mov	r1, r6
 800be48:	4628      	mov	r0, r5
 800be4a:	47b8      	blx	r7
 800be4c:	3001      	adds	r0, #1
 800be4e:	f43f ae3e 	beq.w	800bace <_printf_float+0xb6>
 800be52:	f108 0801 	add.w	r8, r8, #1
 800be56:	68e3      	ldr	r3, [r4, #12]
 800be58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800be5a:	1a5b      	subs	r3, r3, r1
 800be5c:	4543      	cmp	r3, r8
 800be5e:	dcf0      	bgt.n	800be42 <_printf_float+0x42a>
 800be60:	e6fc      	b.n	800bc5c <_printf_float+0x244>
 800be62:	f04f 0800 	mov.w	r8, #0
 800be66:	f104 0919 	add.w	r9, r4, #25
 800be6a:	e7f4      	b.n	800be56 <_printf_float+0x43e>

0800be6c <_printf_common>:
 800be6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	4616      	mov	r6, r2
 800be72:	4698      	mov	r8, r3
 800be74:	688a      	ldr	r2, [r1, #8]
 800be76:	690b      	ldr	r3, [r1, #16]
 800be78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be7c:	4293      	cmp	r3, r2
 800be7e:	bfb8      	it	lt
 800be80:	4613      	movlt	r3, r2
 800be82:	6033      	str	r3, [r6, #0]
 800be84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be88:	4607      	mov	r7, r0
 800be8a:	460c      	mov	r4, r1
 800be8c:	b10a      	cbz	r2, 800be92 <_printf_common+0x26>
 800be8e:	3301      	adds	r3, #1
 800be90:	6033      	str	r3, [r6, #0]
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	0699      	lsls	r1, r3, #26
 800be96:	bf42      	ittt	mi
 800be98:	6833      	ldrmi	r3, [r6, #0]
 800be9a:	3302      	addmi	r3, #2
 800be9c:	6033      	strmi	r3, [r6, #0]
 800be9e:	6825      	ldr	r5, [r4, #0]
 800bea0:	f015 0506 	ands.w	r5, r5, #6
 800bea4:	d106      	bne.n	800beb4 <_printf_common+0x48>
 800bea6:	f104 0a19 	add.w	sl, r4, #25
 800beaa:	68e3      	ldr	r3, [r4, #12]
 800beac:	6832      	ldr	r2, [r6, #0]
 800beae:	1a9b      	subs	r3, r3, r2
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	dc26      	bgt.n	800bf02 <_printf_common+0x96>
 800beb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800beb8:	6822      	ldr	r2, [r4, #0]
 800beba:	3b00      	subs	r3, #0
 800bebc:	bf18      	it	ne
 800bebe:	2301      	movne	r3, #1
 800bec0:	0692      	lsls	r2, r2, #26
 800bec2:	d42b      	bmi.n	800bf1c <_printf_common+0xb0>
 800bec4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bec8:	4641      	mov	r1, r8
 800beca:	4638      	mov	r0, r7
 800becc:	47c8      	blx	r9
 800bece:	3001      	adds	r0, #1
 800bed0:	d01e      	beq.n	800bf10 <_printf_common+0xa4>
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	6922      	ldr	r2, [r4, #16]
 800bed6:	f003 0306 	and.w	r3, r3, #6
 800beda:	2b04      	cmp	r3, #4
 800bedc:	bf02      	ittt	eq
 800bede:	68e5      	ldreq	r5, [r4, #12]
 800bee0:	6833      	ldreq	r3, [r6, #0]
 800bee2:	1aed      	subeq	r5, r5, r3
 800bee4:	68a3      	ldr	r3, [r4, #8]
 800bee6:	bf0c      	ite	eq
 800bee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800beec:	2500      	movne	r5, #0
 800beee:	4293      	cmp	r3, r2
 800bef0:	bfc4      	itt	gt
 800bef2:	1a9b      	subgt	r3, r3, r2
 800bef4:	18ed      	addgt	r5, r5, r3
 800bef6:	2600      	movs	r6, #0
 800bef8:	341a      	adds	r4, #26
 800befa:	42b5      	cmp	r5, r6
 800befc:	d11a      	bne.n	800bf34 <_printf_common+0xc8>
 800befe:	2000      	movs	r0, #0
 800bf00:	e008      	b.n	800bf14 <_printf_common+0xa8>
 800bf02:	2301      	movs	r3, #1
 800bf04:	4652      	mov	r2, sl
 800bf06:	4641      	mov	r1, r8
 800bf08:	4638      	mov	r0, r7
 800bf0a:	47c8      	blx	r9
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	d103      	bne.n	800bf18 <_printf_common+0xac>
 800bf10:	f04f 30ff 	mov.w	r0, #4294967295
 800bf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf18:	3501      	adds	r5, #1
 800bf1a:	e7c6      	b.n	800beaa <_printf_common+0x3e>
 800bf1c:	18e1      	adds	r1, r4, r3
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	2030      	movs	r0, #48	@ 0x30
 800bf22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bf26:	4422      	add	r2, r4
 800bf28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bf2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bf30:	3302      	adds	r3, #2
 800bf32:	e7c7      	b.n	800bec4 <_printf_common+0x58>
 800bf34:	2301      	movs	r3, #1
 800bf36:	4622      	mov	r2, r4
 800bf38:	4641      	mov	r1, r8
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	47c8      	blx	r9
 800bf3e:	3001      	adds	r0, #1
 800bf40:	d0e6      	beq.n	800bf10 <_printf_common+0xa4>
 800bf42:	3601      	adds	r6, #1
 800bf44:	e7d9      	b.n	800befa <_printf_common+0x8e>
	...

0800bf48 <_printf_i>:
 800bf48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf4c:	7e0f      	ldrb	r7, [r1, #24]
 800bf4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bf50:	2f78      	cmp	r7, #120	@ 0x78
 800bf52:	4691      	mov	r9, r2
 800bf54:	4680      	mov	r8, r0
 800bf56:	460c      	mov	r4, r1
 800bf58:	469a      	mov	sl, r3
 800bf5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bf5e:	d807      	bhi.n	800bf70 <_printf_i+0x28>
 800bf60:	2f62      	cmp	r7, #98	@ 0x62
 800bf62:	d80a      	bhi.n	800bf7a <_printf_i+0x32>
 800bf64:	2f00      	cmp	r7, #0
 800bf66:	f000 80d2 	beq.w	800c10e <_printf_i+0x1c6>
 800bf6a:	2f58      	cmp	r7, #88	@ 0x58
 800bf6c:	f000 80b9 	beq.w	800c0e2 <_printf_i+0x19a>
 800bf70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bf78:	e03a      	b.n	800bff0 <_printf_i+0xa8>
 800bf7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf7e:	2b15      	cmp	r3, #21
 800bf80:	d8f6      	bhi.n	800bf70 <_printf_i+0x28>
 800bf82:	a101      	add	r1, pc, #4	@ (adr r1, 800bf88 <_printf_i+0x40>)
 800bf84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf88:	0800bfe1 	.word	0x0800bfe1
 800bf8c:	0800bff5 	.word	0x0800bff5
 800bf90:	0800bf71 	.word	0x0800bf71
 800bf94:	0800bf71 	.word	0x0800bf71
 800bf98:	0800bf71 	.word	0x0800bf71
 800bf9c:	0800bf71 	.word	0x0800bf71
 800bfa0:	0800bff5 	.word	0x0800bff5
 800bfa4:	0800bf71 	.word	0x0800bf71
 800bfa8:	0800bf71 	.word	0x0800bf71
 800bfac:	0800bf71 	.word	0x0800bf71
 800bfb0:	0800bf71 	.word	0x0800bf71
 800bfb4:	0800c0f5 	.word	0x0800c0f5
 800bfb8:	0800c01f 	.word	0x0800c01f
 800bfbc:	0800c0af 	.word	0x0800c0af
 800bfc0:	0800bf71 	.word	0x0800bf71
 800bfc4:	0800bf71 	.word	0x0800bf71
 800bfc8:	0800c117 	.word	0x0800c117
 800bfcc:	0800bf71 	.word	0x0800bf71
 800bfd0:	0800c01f 	.word	0x0800c01f
 800bfd4:	0800bf71 	.word	0x0800bf71
 800bfd8:	0800bf71 	.word	0x0800bf71
 800bfdc:	0800c0b7 	.word	0x0800c0b7
 800bfe0:	6833      	ldr	r3, [r6, #0]
 800bfe2:	1d1a      	adds	r2, r3, #4
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6032      	str	r2, [r6, #0]
 800bfe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bfec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bff0:	2301      	movs	r3, #1
 800bff2:	e09d      	b.n	800c130 <_printf_i+0x1e8>
 800bff4:	6833      	ldr	r3, [r6, #0]
 800bff6:	6820      	ldr	r0, [r4, #0]
 800bff8:	1d19      	adds	r1, r3, #4
 800bffa:	6031      	str	r1, [r6, #0]
 800bffc:	0606      	lsls	r6, r0, #24
 800bffe:	d501      	bpl.n	800c004 <_printf_i+0xbc>
 800c000:	681d      	ldr	r5, [r3, #0]
 800c002:	e003      	b.n	800c00c <_printf_i+0xc4>
 800c004:	0645      	lsls	r5, r0, #25
 800c006:	d5fb      	bpl.n	800c000 <_printf_i+0xb8>
 800c008:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c00c:	2d00      	cmp	r5, #0
 800c00e:	da03      	bge.n	800c018 <_printf_i+0xd0>
 800c010:	232d      	movs	r3, #45	@ 0x2d
 800c012:	426d      	negs	r5, r5
 800c014:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c018:	4859      	ldr	r0, [pc, #356]	@ (800c180 <_printf_i+0x238>)
 800c01a:	230a      	movs	r3, #10
 800c01c:	e011      	b.n	800c042 <_printf_i+0xfa>
 800c01e:	6821      	ldr	r1, [r4, #0]
 800c020:	6833      	ldr	r3, [r6, #0]
 800c022:	0608      	lsls	r0, r1, #24
 800c024:	f853 5b04 	ldr.w	r5, [r3], #4
 800c028:	d402      	bmi.n	800c030 <_printf_i+0xe8>
 800c02a:	0649      	lsls	r1, r1, #25
 800c02c:	bf48      	it	mi
 800c02e:	b2ad      	uxthmi	r5, r5
 800c030:	2f6f      	cmp	r7, #111	@ 0x6f
 800c032:	4853      	ldr	r0, [pc, #332]	@ (800c180 <_printf_i+0x238>)
 800c034:	6033      	str	r3, [r6, #0]
 800c036:	bf14      	ite	ne
 800c038:	230a      	movne	r3, #10
 800c03a:	2308      	moveq	r3, #8
 800c03c:	2100      	movs	r1, #0
 800c03e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c042:	6866      	ldr	r6, [r4, #4]
 800c044:	60a6      	str	r6, [r4, #8]
 800c046:	2e00      	cmp	r6, #0
 800c048:	bfa2      	ittt	ge
 800c04a:	6821      	ldrge	r1, [r4, #0]
 800c04c:	f021 0104 	bicge.w	r1, r1, #4
 800c050:	6021      	strge	r1, [r4, #0]
 800c052:	b90d      	cbnz	r5, 800c058 <_printf_i+0x110>
 800c054:	2e00      	cmp	r6, #0
 800c056:	d04b      	beq.n	800c0f0 <_printf_i+0x1a8>
 800c058:	4616      	mov	r6, r2
 800c05a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c05e:	fb03 5711 	mls	r7, r3, r1, r5
 800c062:	5dc7      	ldrb	r7, [r0, r7]
 800c064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c068:	462f      	mov	r7, r5
 800c06a:	42bb      	cmp	r3, r7
 800c06c:	460d      	mov	r5, r1
 800c06e:	d9f4      	bls.n	800c05a <_printf_i+0x112>
 800c070:	2b08      	cmp	r3, #8
 800c072:	d10b      	bne.n	800c08c <_printf_i+0x144>
 800c074:	6823      	ldr	r3, [r4, #0]
 800c076:	07df      	lsls	r7, r3, #31
 800c078:	d508      	bpl.n	800c08c <_printf_i+0x144>
 800c07a:	6923      	ldr	r3, [r4, #16]
 800c07c:	6861      	ldr	r1, [r4, #4]
 800c07e:	4299      	cmp	r1, r3
 800c080:	bfde      	ittt	le
 800c082:	2330      	movle	r3, #48	@ 0x30
 800c084:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c08c:	1b92      	subs	r2, r2, r6
 800c08e:	6122      	str	r2, [r4, #16]
 800c090:	f8cd a000 	str.w	sl, [sp]
 800c094:	464b      	mov	r3, r9
 800c096:	aa03      	add	r2, sp, #12
 800c098:	4621      	mov	r1, r4
 800c09a:	4640      	mov	r0, r8
 800c09c:	f7ff fee6 	bl	800be6c <_printf_common>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	d14a      	bne.n	800c13a <_printf_i+0x1f2>
 800c0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a8:	b004      	add	sp, #16
 800c0aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	f043 0320 	orr.w	r3, r3, #32
 800c0b4:	6023      	str	r3, [r4, #0]
 800c0b6:	4833      	ldr	r0, [pc, #204]	@ (800c184 <_printf_i+0x23c>)
 800c0b8:	2778      	movs	r7, #120	@ 0x78
 800c0ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	6831      	ldr	r1, [r6, #0]
 800c0c2:	061f      	lsls	r7, r3, #24
 800c0c4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c0c8:	d402      	bmi.n	800c0d0 <_printf_i+0x188>
 800c0ca:	065f      	lsls	r7, r3, #25
 800c0cc:	bf48      	it	mi
 800c0ce:	b2ad      	uxthmi	r5, r5
 800c0d0:	6031      	str	r1, [r6, #0]
 800c0d2:	07d9      	lsls	r1, r3, #31
 800c0d4:	bf44      	itt	mi
 800c0d6:	f043 0320 	orrmi.w	r3, r3, #32
 800c0da:	6023      	strmi	r3, [r4, #0]
 800c0dc:	b11d      	cbz	r5, 800c0e6 <_printf_i+0x19e>
 800c0de:	2310      	movs	r3, #16
 800c0e0:	e7ac      	b.n	800c03c <_printf_i+0xf4>
 800c0e2:	4827      	ldr	r0, [pc, #156]	@ (800c180 <_printf_i+0x238>)
 800c0e4:	e7e9      	b.n	800c0ba <_printf_i+0x172>
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	f023 0320 	bic.w	r3, r3, #32
 800c0ec:	6023      	str	r3, [r4, #0]
 800c0ee:	e7f6      	b.n	800c0de <_printf_i+0x196>
 800c0f0:	4616      	mov	r6, r2
 800c0f2:	e7bd      	b.n	800c070 <_printf_i+0x128>
 800c0f4:	6833      	ldr	r3, [r6, #0]
 800c0f6:	6825      	ldr	r5, [r4, #0]
 800c0f8:	6961      	ldr	r1, [r4, #20]
 800c0fa:	1d18      	adds	r0, r3, #4
 800c0fc:	6030      	str	r0, [r6, #0]
 800c0fe:	062e      	lsls	r6, r5, #24
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	d501      	bpl.n	800c108 <_printf_i+0x1c0>
 800c104:	6019      	str	r1, [r3, #0]
 800c106:	e002      	b.n	800c10e <_printf_i+0x1c6>
 800c108:	0668      	lsls	r0, r5, #25
 800c10a:	d5fb      	bpl.n	800c104 <_printf_i+0x1bc>
 800c10c:	8019      	strh	r1, [r3, #0]
 800c10e:	2300      	movs	r3, #0
 800c110:	6123      	str	r3, [r4, #16]
 800c112:	4616      	mov	r6, r2
 800c114:	e7bc      	b.n	800c090 <_printf_i+0x148>
 800c116:	6833      	ldr	r3, [r6, #0]
 800c118:	1d1a      	adds	r2, r3, #4
 800c11a:	6032      	str	r2, [r6, #0]
 800c11c:	681e      	ldr	r6, [r3, #0]
 800c11e:	6862      	ldr	r2, [r4, #4]
 800c120:	2100      	movs	r1, #0
 800c122:	4630      	mov	r0, r6
 800c124:	f7f4 f874 	bl	8000210 <memchr>
 800c128:	b108      	cbz	r0, 800c12e <_printf_i+0x1e6>
 800c12a:	1b80      	subs	r0, r0, r6
 800c12c:	6060      	str	r0, [r4, #4]
 800c12e:	6863      	ldr	r3, [r4, #4]
 800c130:	6123      	str	r3, [r4, #16]
 800c132:	2300      	movs	r3, #0
 800c134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c138:	e7aa      	b.n	800c090 <_printf_i+0x148>
 800c13a:	6923      	ldr	r3, [r4, #16]
 800c13c:	4632      	mov	r2, r6
 800c13e:	4649      	mov	r1, r9
 800c140:	4640      	mov	r0, r8
 800c142:	47d0      	blx	sl
 800c144:	3001      	adds	r0, #1
 800c146:	d0ad      	beq.n	800c0a4 <_printf_i+0x15c>
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	079b      	lsls	r3, r3, #30
 800c14c:	d413      	bmi.n	800c176 <_printf_i+0x22e>
 800c14e:	68e0      	ldr	r0, [r4, #12]
 800c150:	9b03      	ldr	r3, [sp, #12]
 800c152:	4298      	cmp	r0, r3
 800c154:	bfb8      	it	lt
 800c156:	4618      	movlt	r0, r3
 800c158:	e7a6      	b.n	800c0a8 <_printf_i+0x160>
 800c15a:	2301      	movs	r3, #1
 800c15c:	4632      	mov	r2, r6
 800c15e:	4649      	mov	r1, r9
 800c160:	4640      	mov	r0, r8
 800c162:	47d0      	blx	sl
 800c164:	3001      	adds	r0, #1
 800c166:	d09d      	beq.n	800c0a4 <_printf_i+0x15c>
 800c168:	3501      	adds	r5, #1
 800c16a:	68e3      	ldr	r3, [r4, #12]
 800c16c:	9903      	ldr	r1, [sp, #12]
 800c16e:	1a5b      	subs	r3, r3, r1
 800c170:	42ab      	cmp	r3, r5
 800c172:	dcf2      	bgt.n	800c15a <_printf_i+0x212>
 800c174:	e7eb      	b.n	800c14e <_printf_i+0x206>
 800c176:	2500      	movs	r5, #0
 800c178:	f104 0619 	add.w	r6, r4, #25
 800c17c:	e7f5      	b.n	800c16a <_printf_i+0x222>
 800c17e:	bf00      	nop
 800c180:	08012114 	.word	0x08012114
 800c184:	08012125 	.word	0x08012125

0800c188 <_scanf_float>:
 800c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c18c:	b087      	sub	sp, #28
 800c18e:	4617      	mov	r7, r2
 800c190:	9303      	str	r3, [sp, #12]
 800c192:	688b      	ldr	r3, [r1, #8]
 800c194:	1e5a      	subs	r2, r3, #1
 800c196:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c19a:	bf81      	itttt	hi
 800c19c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c1a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800c1a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c1a8:	608b      	strhi	r3, [r1, #8]
 800c1aa:	680b      	ldr	r3, [r1, #0]
 800c1ac:	460a      	mov	r2, r1
 800c1ae:	f04f 0500 	mov.w	r5, #0
 800c1b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c1b6:	f842 3b1c 	str.w	r3, [r2], #28
 800c1ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c1be:	4680      	mov	r8, r0
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	bf98      	it	ls
 800c1c4:	f04f 0b00 	movls.w	fp, #0
 800c1c8:	9201      	str	r2, [sp, #4]
 800c1ca:	4616      	mov	r6, r2
 800c1cc:	46aa      	mov	sl, r5
 800c1ce:	46a9      	mov	r9, r5
 800c1d0:	9502      	str	r5, [sp, #8]
 800c1d2:	68a2      	ldr	r2, [r4, #8]
 800c1d4:	b152      	cbz	r2, 800c1ec <_scanf_float+0x64>
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b4e      	cmp	r3, #78	@ 0x4e
 800c1dc:	d864      	bhi.n	800c2a8 <_scanf_float+0x120>
 800c1de:	2b40      	cmp	r3, #64	@ 0x40
 800c1e0:	d83c      	bhi.n	800c25c <_scanf_float+0xd4>
 800c1e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c1e6:	b2c8      	uxtb	r0, r1
 800c1e8:	280e      	cmp	r0, #14
 800c1ea:	d93a      	bls.n	800c262 <_scanf_float+0xda>
 800c1ec:	f1b9 0f00 	cmp.w	r9, #0
 800c1f0:	d003      	beq.n	800c1fa <_scanf_float+0x72>
 800c1f2:	6823      	ldr	r3, [r4, #0]
 800c1f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1fe:	f1ba 0f01 	cmp.w	sl, #1
 800c202:	f200 8117 	bhi.w	800c434 <_scanf_float+0x2ac>
 800c206:	9b01      	ldr	r3, [sp, #4]
 800c208:	429e      	cmp	r6, r3
 800c20a:	f200 8108 	bhi.w	800c41e <_scanf_float+0x296>
 800c20e:	2001      	movs	r0, #1
 800c210:	b007      	add	sp, #28
 800c212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c216:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c21a:	2a0d      	cmp	r2, #13
 800c21c:	d8e6      	bhi.n	800c1ec <_scanf_float+0x64>
 800c21e:	a101      	add	r1, pc, #4	@ (adr r1, 800c224 <_scanf_float+0x9c>)
 800c220:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c224:	0800c36b 	.word	0x0800c36b
 800c228:	0800c1ed 	.word	0x0800c1ed
 800c22c:	0800c1ed 	.word	0x0800c1ed
 800c230:	0800c1ed 	.word	0x0800c1ed
 800c234:	0800c3cb 	.word	0x0800c3cb
 800c238:	0800c3a3 	.word	0x0800c3a3
 800c23c:	0800c1ed 	.word	0x0800c1ed
 800c240:	0800c1ed 	.word	0x0800c1ed
 800c244:	0800c379 	.word	0x0800c379
 800c248:	0800c1ed 	.word	0x0800c1ed
 800c24c:	0800c1ed 	.word	0x0800c1ed
 800c250:	0800c1ed 	.word	0x0800c1ed
 800c254:	0800c1ed 	.word	0x0800c1ed
 800c258:	0800c331 	.word	0x0800c331
 800c25c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c260:	e7db      	b.n	800c21a <_scanf_float+0x92>
 800c262:	290e      	cmp	r1, #14
 800c264:	d8c2      	bhi.n	800c1ec <_scanf_float+0x64>
 800c266:	a001      	add	r0, pc, #4	@ (adr r0, 800c26c <_scanf_float+0xe4>)
 800c268:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c26c:	0800c321 	.word	0x0800c321
 800c270:	0800c1ed 	.word	0x0800c1ed
 800c274:	0800c321 	.word	0x0800c321
 800c278:	0800c3b7 	.word	0x0800c3b7
 800c27c:	0800c1ed 	.word	0x0800c1ed
 800c280:	0800c2c9 	.word	0x0800c2c9
 800c284:	0800c307 	.word	0x0800c307
 800c288:	0800c307 	.word	0x0800c307
 800c28c:	0800c307 	.word	0x0800c307
 800c290:	0800c307 	.word	0x0800c307
 800c294:	0800c307 	.word	0x0800c307
 800c298:	0800c307 	.word	0x0800c307
 800c29c:	0800c307 	.word	0x0800c307
 800c2a0:	0800c307 	.word	0x0800c307
 800c2a4:	0800c307 	.word	0x0800c307
 800c2a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800c2aa:	d809      	bhi.n	800c2c0 <_scanf_float+0x138>
 800c2ac:	2b60      	cmp	r3, #96	@ 0x60
 800c2ae:	d8b2      	bhi.n	800c216 <_scanf_float+0x8e>
 800c2b0:	2b54      	cmp	r3, #84	@ 0x54
 800c2b2:	d07b      	beq.n	800c3ac <_scanf_float+0x224>
 800c2b4:	2b59      	cmp	r3, #89	@ 0x59
 800c2b6:	d199      	bne.n	800c1ec <_scanf_float+0x64>
 800c2b8:	2d07      	cmp	r5, #7
 800c2ba:	d197      	bne.n	800c1ec <_scanf_float+0x64>
 800c2bc:	2508      	movs	r5, #8
 800c2be:	e02c      	b.n	800c31a <_scanf_float+0x192>
 800c2c0:	2b74      	cmp	r3, #116	@ 0x74
 800c2c2:	d073      	beq.n	800c3ac <_scanf_float+0x224>
 800c2c4:	2b79      	cmp	r3, #121	@ 0x79
 800c2c6:	e7f6      	b.n	800c2b6 <_scanf_float+0x12e>
 800c2c8:	6821      	ldr	r1, [r4, #0]
 800c2ca:	05c8      	lsls	r0, r1, #23
 800c2cc:	d51b      	bpl.n	800c306 <_scanf_float+0x17e>
 800c2ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c2d2:	6021      	str	r1, [r4, #0]
 800c2d4:	f109 0901 	add.w	r9, r9, #1
 800c2d8:	f1bb 0f00 	cmp.w	fp, #0
 800c2dc:	d003      	beq.n	800c2e6 <_scanf_float+0x15e>
 800c2de:	3201      	adds	r2, #1
 800c2e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2e4:	60a2      	str	r2, [r4, #8]
 800c2e6:	68a3      	ldr	r3, [r4, #8]
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	60a3      	str	r3, [r4, #8]
 800c2ec:	6923      	ldr	r3, [r4, #16]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	6123      	str	r3, [r4, #16]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	607b      	str	r3, [r7, #4]
 800c2fa:	f340 8087 	ble.w	800c40c <_scanf_float+0x284>
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	3301      	adds	r3, #1
 800c302:	603b      	str	r3, [r7, #0]
 800c304:	e765      	b.n	800c1d2 <_scanf_float+0x4a>
 800c306:	eb1a 0105 	adds.w	r1, sl, r5
 800c30a:	f47f af6f 	bne.w	800c1ec <_scanf_float+0x64>
 800c30e:	6822      	ldr	r2, [r4, #0]
 800c310:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800c314:	6022      	str	r2, [r4, #0]
 800c316:	460d      	mov	r5, r1
 800c318:	468a      	mov	sl, r1
 800c31a:	f806 3b01 	strb.w	r3, [r6], #1
 800c31e:	e7e2      	b.n	800c2e6 <_scanf_float+0x15e>
 800c320:	6822      	ldr	r2, [r4, #0]
 800c322:	0610      	lsls	r0, r2, #24
 800c324:	f57f af62 	bpl.w	800c1ec <_scanf_float+0x64>
 800c328:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c32c:	6022      	str	r2, [r4, #0]
 800c32e:	e7f4      	b.n	800c31a <_scanf_float+0x192>
 800c330:	f1ba 0f00 	cmp.w	sl, #0
 800c334:	d10e      	bne.n	800c354 <_scanf_float+0x1cc>
 800c336:	f1b9 0f00 	cmp.w	r9, #0
 800c33a:	d10e      	bne.n	800c35a <_scanf_float+0x1d2>
 800c33c:	6822      	ldr	r2, [r4, #0]
 800c33e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c342:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c346:	d108      	bne.n	800c35a <_scanf_float+0x1d2>
 800c348:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c34c:	6022      	str	r2, [r4, #0]
 800c34e:	f04f 0a01 	mov.w	sl, #1
 800c352:	e7e2      	b.n	800c31a <_scanf_float+0x192>
 800c354:	f1ba 0f02 	cmp.w	sl, #2
 800c358:	d055      	beq.n	800c406 <_scanf_float+0x27e>
 800c35a:	2d01      	cmp	r5, #1
 800c35c:	d002      	beq.n	800c364 <_scanf_float+0x1dc>
 800c35e:	2d04      	cmp	r5, #4
 800c360:	f47f af44 	bne.w	800c1ec <_scanf_float+0x64>
 800c364:	3501      	adds	r5, #1
 800c366:	b2ed      	uxtb	r5, r5
 800c368:	e7d7      	b.n	800c31a <_scanf_float+0x192>
 800c36a:	f1ba 0f01 	cmp.w	sl, #1
 800c36e:	f47f af3d 	bne.w	800c1ec <_scanf_float+0x64>
 800c372:	f04f 0a02 	mov.w	sl, #2
 800c376:	e7d0      	b.n	800c31a <_scanf_float+0x192>
 800c378:	b97d      	cbnz	r5, 800c39a <_scanf_float+0x212>
 800c37a:	f1b9 0f00 	cmp.w	r9, #0
 800c37e:	f47f af38 	bne.w	800c1f2 <_scanf_float+0x6a>
 800c382:	6822      	ldr	r2, [r4, #0]
 800c384:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c388:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c38c:	f040 8108 	bne.w	800c5a0 <_scanf_float+0x418>
 800c390:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c394:	6022      	str	r2, [r4, #0]
 800c396:	2501      	movs	r5, #1
 800c398:	e7bf      	b.n	800c31a <_scanf_float+0x192>
 800c39a:	2d03      	cmp	r5, #3
 800c39c:	d0e2      	beq.n	800c364 <_scanf_float+0x1dc>
 800c39e:	2d05      	cmp	r5, #5
 800c3a0:	e7de      	b.n	800c360 <_scanf_float+0x1d8>
 800c3a2:	2d02      	cmp	r5, #2
 800c3a4:	f47f af22 	bne.w	800c1ec <_scanf_float+0x64>
 800c3a8:	2503      	movs	r5, #3
 800c3aa:	e7b6      	b.n	800c31a <_scanf_float+0x192>
 800c3ac:	2d06      	cmp	r5, #6
 800c3ae:	f47f af1d 	bne.w	800c1ec <_scanf_float+0x64>
 800c3b2:	2507      	movs	r5, #7
 800c3b4:	e7b1      	b.n	800c31a <_scanf_float+0x192>
 800c3b6:	6822      	ldr	r2, [r4, #0]
 800c3b8:	0591      	lsls	r1, r2, #22
 800c3ba:	f57f af17 	bpl.w	800c1ec <_scanf_float+0x64>
 800c3be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c3c2:	6022      	str	r2, [r4, #0]
 800c3c4:	f8cd 9008 	str.w	r9, [sp, #8]
 800c3c8:	e7a7      	b.n	800c31a <_scanf_float+0x192>
 800c3ca:	6822      	ldr	r2, [r4, #0]
 800c3cc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c3d0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c3d4:	d006      	beq.n	800c3e4 <_scanf_float+0x25c>
 800c3d6:	0550      	lsls	r0, r2, #21
 800c3d8:	f57f af08 	bpl.w	800c1ec <_scanf_float+0x64>
 800c3dc:	f1b9 0f00 	cmp.w	r9, #0
 800c3e0:	f000 80de 	beq.w	800c5a0 <_scanf_float+0x418>
 800c3e4:	0591      	lsls	r1, r2, #22
 800c3e6:	bf58      	it	pl
 800c3e8:	9902      	ldrpl	r1, [sp, #8]
 800c3ea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c3ee:	bf58      	it	pl
 800c3f0:	eba9 0101 	subpl.w	r1, r9, r1
 800c3f4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c3f8:	bf58      	it	pl
 800c3fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c3fe:	6022      	str	r2, [r4, #0]
 800c400:	f04f 0900 	mov.w	r9, #0
 800c404:	e789      	b.n	800c31a <_scanf_float+0x192>
 800c406:	f04f 0a03 	mov.w	sl, #3
 800c40a:	e786      	b.n	800c31a <_scanf_float+0x192>
 800c40c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c410:	4639      	mov	r1, r7
 800c412:	4640      	mov	r0, r8
 800c414:	4798      	blx	r3
 800c416:	2800      	cmp	r0, #0
 800c418:	f43f aedb 	beq.w	800c1d2 <_scanf_float+0x4a>
 800c41c:	e6e6      	b.n	800c1ec <_scanf_float+0x64>
 800c41e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c422:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c426:	463a      	mov	r2, r7
 800c428:	4640      	mov	r0, r8
 800c42a:	4798      	blx	r3
 800c42c:	6923      	ldr	r3, [r4, #16]
 800c42e:	3b01      	subs	r3, #1
 800c430:	6123      	str	r3, [r4, #16]
 800c432:	e6e8      	b.n	800c206 <_scanf_float+0x7e>
 800c434:	1e6b      	subs	r3, r5, #1
 800c436:	2b06      	cmp	r3, #6
 800c438:	d824      	bhi.n	800c484 <_scanf_float+0x2fc>
 800c43a:	2d02      	cmp	r5, #2
 800c43c:	d836      	bhi.n	800c4ac <_scanf_float+0x324>
 800c43e:	9b01      	ldr	r3, [sp, #4]
 800c440:	429e      	cmp	r6, r3
 800c442:	f67f aee4 	bls.w	800c20e <_scanf_float+0x86>
 800c446:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c44a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c44e:	463a      	mov	r2, r7
 800c450:	4640      	mov	r0, r8
 800c452:	4798      	blx	r3
 800c454:	6923      	ldr	r3, [r4, #16]
 800c456:	3b01      	subs	r3, #1
 800c458:	6123      	str	r3, [r4, #16]
 800c45a:	e7f0      	b.n	800c43e <_scanf_float+0x2b6>
 800c45c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c460:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c464:	463a      	mov	r2, r7
 800c466:	4640      	mov	r0, r8
 800c468:	4798      	blx	r3
 800c46a:	6923      	ldr	r3, [r4, #16]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	6123      	str	r3, [r4, #16]
 800c470:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c474:	fa5f fa8a 	uxtb.w	sl, sl
 800c478:	f1ba 0f02 	cmp.w	sl, #2
 800c47c:	d1ee      	bne.n	800c45c <_scanf_float+0x2d4>
 800c47e:	3d03      	subs	r5, #3
 800c480:	b2ed      	uxtb	r5, r5
 800c482:	1b76      	subs	r6, r6, r5
 800c484:	6823      	ldr	r3, [r4, #0]
 800c486:	05da      	lsls	r2, r3, #23
 800c488:	d530      	bpl.n	800c4ec <_scanf_float+0x364>
 800c48a:	055b      	lsls	r3, r3, #21
 800c48c:	d511      	bpl.n	800c4b2 <_scanf_float+0x32a>
 800c48e:	9b01      	ldr	r3, [sp, #4]
 800c490:	429e      	cmp	r6, r3
 800c492:	f67f aebc 	bls.w	800c20e <_scanf_float+0x86>
 800c496:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c49a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c49e:	463a      	mov	r2, r7
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	4798      	blx	r3
 800c4a4:	6923      	ldr	r3, [r4, #16]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	6123      	str	r3, [r4, #16]
 800c4aa:	e7f0      	b.n	800c48e <_scanf_float+0x306>
 800c4ac:	46aa      	mov	sl, r5
 800c4ae:	46b3      	mov	fp, r6
 800c4b0:	e7de      	b.n	800c470 <_scanf_float+0x2e8>
 800c4b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c4b6:	6923      	ldr	r3, [r4, #16]
 800c4b8:	2965      	cmp	r1, #101	@ 0x65
 800c4ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4be:	f106 35ff 	add.w	r5, r6, #4294967295
 800c4c2:	6123      	str	r3, [r4, #16]
 800c4c4:	d00c      	beq.n	800c4e0 <_scanf_float+0x358>
 800c4c6:	2945      	cmp	r1, #69	@ 0x45
 800c4c8:	d00a      	beq.n	800c4e0 <_scanf_float+0x358>
 800c4ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4ce:	463a      	mov	r2, r7
 800c4d0:	4640      	mov	r0, r8
 800c4d2:	4798      	blx	r3
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	1eb5      	subs	r5, r6, #2
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c4e4:	463a      	mov	r2, r7
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	4798      	blx	r3
 800c4ea:	462e      	mov	r6, r5
 800c4ec:	6822      	ldr	r2, [r4, #0]
 800c4ee:	f012 0210 	ands.w	r2, r2, #16
 800c4f2:	d001      	beq.n	800c4f8 <_scanf_float+0x370>
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	e68b      	b.n	800c210 <_scanf_float+0x88>
 800c4f8:	7032      	strb	r2, [r6, #0]
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c504:	d11c      	bne.n	800c540 <_scanf_float+0x3b8>
 800c506:	9b02      	ldr	r3, [sp, #8]
 800c508:	454b      	cmp	r3, r9
 800c50a:	eba3 0209 	sub.w	r2, r3, r9
 800c50e:	d123      	bne.n	800c558 <_scanf_float+0x3d0>
 800c510:	9901      	ldr	r1, [sp, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	4640      	mov	r0, r8
 800c516:	f002 fbbb 	bl	800ec90 <_strtod_r>
 800c51a:	9b03      	ldr	r3, [sp, #12]
 800c51c:	6821      	ldr	r1, [r4, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f011 0f02 	tst.w	r1, #2
 800c524:	ec57 6b10 	vmov	r6, r7, d0
 800c528:	f103 0204 	add.w	r2, r3, #4
 800c52c:	d01f      	beq.n	800c56e <_scanf_float+0x3e6>
 800c52e:	9903      	ldr	r1, [sp, #12]
 800c530:	600a      	str	r2, [r1, #0]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	e9c3 6700 	strd	r6, r7, [r3]
 800c538:	68e3      	ldr	r3, [r4, #12]
 800c53a:	3301      	adds	r3, #1
 800c53c:	60e3      	str	r3, [r4, #12]
 800c53e:	e7d9      	b.n	800c4f4 <_scanf_float+0x36c>
 800c540:	9b04      	ldr	r3, [sp, #16]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d0e4      	beq.n	800c510 <_scanf_float+0x388>
 800c546:	9905      	ldr	r1, [sp, #20]
 800c548:	230a      	movs	r3, #10
 800c54a:	3101      	adds	r1, #1
 800c54c:	4640      	mov	r0, r8
 800c54e:	f002 fc1f 	bl	800ed90 <_strtol_r>
 800c552:	9b04      	ldr	r3, [sp, #16]
 800c554:	9e05      	ldr	r6, [sp, #20]
 800c556:	1ac2      	subs	r2, r0, r3
 800c558:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c55c:	429e      	cmp	r6, r3
 800c55e:	bf28      	it	cs
 800c560:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c564:	4910      	ldr	r1, [pc, #64]	@ (800c5a8 <_scanf_float+0x420>)
 800c566:	4630      	mov	r0, r6
 800c568:	f000 f8e4 	bl	800c734 <siprintf>
 800c56c:	e7d0      	b.n	800c510 <_scanf_float+0x388>
 800c56e:	f011 0f04 	tst.w	r1, #4
 800c572:	9903      	ldr	r1, [sp, #12]
 800c574:	600a      	str	r2, [r1, #0]
 800c576:	d1dc      	bne.n	800c532 <_scanf_float+0x3aa>
 800c578:	681d      	ldr	r5, [r3, #0]
 800c57a:	4632      	mov	r2, r6
 800c57c:	463b      	mov	r3, r7
 800c57e:	4630      	mov	r0, r6
 800c580:	4639      	mov	r1, r7
 800c582:	f7f4 faf3 	bl	8000b6c <__aeabi_dcmpun>
 800c586:	b128      	cbz	r0, 800c594 <_scanf_float+0x40c>
 800c588:	4808      	ldr	r0, [pc, #32]	@ (800c5ac <_scanf_float+0x424>)
 800c58a:	f000 fa27 	bl	800c9dc <nanf>
 800c58e:	ed85 0a00 	vstr	s0, [r5]
 800c592:	e7d1      	b.n	800c538 <_scanf_float+0x3b0>
 800c594:	4630      	mov	r0, r6
 800c596:	4639      	mov	r1, r7
 800c598:	f7f4 fb46 	bl	8000c28 <__aeabi_d2f>
 800c59c:	6028      	str	r0, [r5, #0]
 800c59e:	e7cb      	b.n	800c538 <_scanf_float+0x3b0>
 800c5a0:	f04f 0900 	mov.w	r9, #0
 800c5a4:	e629      	b.n	800c1fa <_scanf_float+0x72>
 800c5a6:	bf00      	nop
 800c5a8:	08012136 	.word	0x08012136
 800c5ac:	080124e8 	.word	0x080124e8

0800c5b0 <std>:
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	b510      	push	{r4, lr}
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	e9c0 3300 	strd	r3, r3, [r0]
 800c5ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c5be:	6083      	str	r3, [r0, #8]
 800c5c0:	8181      	strh	r1, [r0, #12]
 800c5c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800c5c4:	81c2      	strh	r2, [r0, #14]
 800c5c6:	6183      	str	r3, [r0, #24]
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	2208      	movs	r2, #8
 800c5cc:	305c      	adds	r0, #92	@ 0x5c
 800c5ce:	f000 f950 	bl	800c872 <memset>
 800c5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c608 <std+0x58>)
 800c5d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800c5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c60c <std+0x5c>)
 800c5d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c5da:	4b0d      	ldr	r3, [pc, #52]	@ (800c610 <std+0x60>)
 800c5dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c5de:	4b0d      	ldr	r3, [pc, #52]	@ (800c614 <std+0x64>)
 800c5e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800c5e2:	4b0d      	ldr	r3, [pc, #52]	@ (800c618 <std+0x68>)
 800c5e4:	6224      	str	r4, [r4, #32]
 800c5e6:	429c      	cmp	r4, r3
 800c5e8:	d006      	beq.n	800c5f8 <std+0x48>
 800c5ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c5ee:	4294      	cmp	r4, r2
 800c5f0:	d002      	beq.n	800c5f8 <std+0x48>
 800c5f2:	33d0      	adds	r3, #208	@ 0xd0
 800c5f4:	429c      	cmp	r4, r3
 800c5f6:	d105      	bne.n	800c604 <std+0x54>
 800c5f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c600:	f000 b9da 	b.w	800c9b8 <__retarget_lock_init_recursive>
 800c604:	bd10      	pop	{r4, pc}
 800c606:	bf00      	nop
 800c608:	0800c7c9 	.word	0x0800c7c9
 800c60c:	0800c7ef 	.word	0x0800c7ef
 800c610:	0800c827 	.word	0x0800c827
 800c614:	0800c84b 	.word	0x0800c84b
 800c618:	2000169c 	.word	0x2000169c

0800c61c <stdio_exit_handler>:
 800c61c:	4a02      	ldr	r2, [pc, #8]	@ (800c628 <stdio_exit_handler+0xc>)
 800c61e:	4903      	ldr	r1, [pc, #12]	@ (800c62c <stdio_exit_handler+0x10>)
 800c620:	4803      	ldr	r0, [pc, #12]	@ (800c630 <stdio_exit_handler+0x14>)
 800c622:	f000 b869 	b.w	800c6f8 <_fwalk_sglue>
 800c626:	bf00      	nop
 800c628:	20000038 	.word	0x20000038
 800c62c:	0800f781 	.word	0x0800f781
 800c630:	20000048 	.word	0x20000048

0800c634 <cleanup_stdio>:
 800c634:	6841      	ldr	r1, [r0, #4]
 800c636:	4b0c      	ldr	r3, [pc, #48]	@ (800c668 <cleanup_stdio+0x34>)
 800c638:	4299      	cmp	r1, r3
 800c63a:	b510      	push	{r4, lr}
 800c63c:	4604      	mov	r4, r0
 800c63e:	d001      	beq.n	800c644 <cleanup_stdio+0x10>
 800c640:	f003 f89e 	bl	800f780 <_fflush_r>
 800c644:	68a1      	ldr	r1, [r4, #8]
 800c646:	4b09      	ldr	r3, [pc, #36]	@ (800c66c <cleanup_stdio+0x38>)
 800c648:	4299      	cmp	r1, r3
 800c64a:	d002      	beq.n	800c652 <cleanup_stdio+0x1e>
 800c64c:	4620      	mov	r0, r4
 800c64e:	f003 f897 	bl	800f780 <_fflush_r>
 800c652:	68e1      	ldr	r1, [r4, #12]
 800c654:	4b06      	ldr	r3, [pc, #24]	@ (800c670 <cleanup_stdio+0x3c>)
 800c656:	4299      	cmp	r1, r3
 800c658:	d004      	beq.n	800c664 <cleanup_stdio+0x30>
 800c65a:	4620      	mov	r0, r4
 800c65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c660:	f003 b88e 	b.w	800f780 <_fflush_r>
 800c664:	bd10      	pop	{r4, pc}
 800c666:	bf00      	nop
 800c668:	2000169c 	.word	0x2000169c
 800c66c:	20001704 	.word	0x20001704
 800c670:	2000176c 	.word	0x2000176c

0800c674 <global_stdio_init.part.0>:
 800c674:	b510      	push	{r4, lr}
 800c676:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a4 <global_stdio_init.part.0+0x30>)
 800c678:	4c0b      	ldr	r4, [pc, #44]	@ (800c6a8 <global_stdio_init.part.0+0x34>)
 800c67a:	4a0c      	ldr	r2, [pc, #48]	@ (800c6ac <global_stdio_init.part.0+0x38>)
 800c67c:	601a      	str	r2, [r3, #0]
 800c67e:	4620      	mov	r0, r4
 800c680:	2200      	movs	r2, #0
 800c682:	2104      	movs	r1, #4
 800c684:	f7ff ff94 	bl	800c5b0 <std>
 800c688:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c68c:	2201      	movs	r2, #1
 800c68e:	2109      	movs	r1, #9
 800c690:	f7ff ff8e 	bl	800c5b0 <std>
 800c694:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c698:	2202      	movs	r2, #2
 800c69a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c69e:	2112      	movs	r1, #18
 800c6a0:	f7ff bf86 	b.w	800c5b0 <std>
 800c6a4:	200017d4 	.word	0x200017d4
 800c6a8:	2000169c 	.word	0x2000169c
 800c6ac:	0800c61d 	.word	0x0800c61d

0800c6b0 <__sfp_lock_acquire>:
 800c6b0:	4801      	ldr	r0, [pc, #4]	@ (800c6b8 <__sfp_lock_acquire+0x8>)
 800c6b2:	f000 b982 	b.w	800c9ba <__retarget_lock_acquire_recursive>
 800c6b6:	bf00      	nop
 800c6b8:	200017dd 	.word	0x200017dd

0800c6bc <__sfp_lock_release>:
 800c6bc:	4801      	ldr	r0, [pc, #4]	@ (800c6c4 <__sfp_lock_release+0x8>)
 800c6be:	f000 b97d 	b.w	800c9bc <__retarget_lock_release_recursive>
 800c6c2:	bf00      	nop
 800c6c4:	200017dd 	.word	0x200017dd

0800c6c8 <__sinit>:
 800c6c8:	b510      	push	{r4, lr}
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	f7ff fff0 	bl	800c6b0 <__sfp_lock_acquire>
 800c6d0:	6a23      	ldr	r3, [r4, #32]
 800c6d2:	b11b      	cbz	r3, 800c6dc <__sinit+0x14>
 800c6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6d8:	f7ff bff0 	b.w	800c6bc <__sfp_lock_release>
 800c6dc:	4b04      	ldr	r3, [pc, #16]	@ (800c6f0 <__sinit+0x28>)
 800c6de:	6223      	str	r3, [r4, #32]
 800c6e0:	4b04      	ldr	r3, [pc, #16]	@ (800c6f4 <__sinit+0x2c>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d1f5      	bne.n	800c6d4 <__sinit+0xc>
 800c6e8:	f7ff ffc4 	bl	800c674 <global_stdio_init.part.0>
 800c6ec:	e7f2      	b.n	800c6d4 <__sinit+0xc>
 800c6ee:	bf00      	nop
 800c6f0:	0800c635 	.word	0x0800c635
 800c6f4:	200017d4 	.word	0x200017d4

0800c6f8 <_fwalk_sglue>:
 800c6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6fc:	4607      	mov	r7, r0
 800c6fe:	4688      	mov	r8, r1
 800c700:	4614      	mov	r4, r2
 800c702:	2600      	movs	r6, #0
 800c704:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c708:	f1b9 0901 	subs.w	r9, r9, #1
 800c70c:	d505      	bpl.n	800c71a <_fwalk_sglue+0x22>
 800c70e:	6824      	ldr	r4, [r4, #0]
 800c710:	2c00      	cmp	r4, #0
 800c712:	d1f7      	bne.n	800c704 <_fwalk_sglue+0xc>
 800c714:	4630      	mov	r0, r6
 800c716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c71a:	89ab      	ldrh	r3, [r5, #12]
 800c71c:	2b01      	cmp	r3, #1
 800c71e:	d907      	bls.n	800c730 <_fwalk_sglue+0x38>
 800c720:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c724:	3301      	adds	r3, #1
 800c726:	d003      	beq.n	800c730 <_fwalk_sglue+0x38>
 800c728:	4629      	mov	r1, r5
 800c72a:	4638      	mov	r0, r7
 800c72c:	47c0      	blx	r8
 800c72e:	4306      	orrs	r6, r0
 800c730:	3568      	adds	r5, #104	@ 0x68
 800c732:	e7e9      	b.n	800c708 <_fwalk_sglue+0x10>

0800c734 <siprintf>:
 800c734:	b40e      	push	{r1, r2, r3}
 800c736:	b500      	push	{lr}
 800c738:	b09c      	sub	sp, #112	@ 0x70
 800c73a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c73c:	9002      	str	r0, [sp, #8]
 800c73e:	9006      	str	r0, [sp, #24]
 800c740:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c744:	4809      	ldr	r0, [pc, #36]	@ (800c76c <siprintf+0x38>)
 800c746:	9107      	str	r1, [sp, #28]
 800c748:	9104      	str	r1, [sp, #16]
 800c74a:	4909      	ldr	r1, [pc, #36]	@ (800c770 <siprintf+0x3c>)
 800c74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c750:	9105      	str	r1, [sp, #20]
 800c752:	6800      	ldr	r0, [r0, #0]
 800c754:	9301      	str	r3, [sp, #4]
 800c756:	a902      	add	r1, sp, #8
 800c758:	f002 fb78 	bl	800ee4c <_svfiprintf_r>
 800c75c:	9b02      	ldr	r3, [sp, #8]
 800c75e:	2200      	movs	r2, #0
 800c760:	701a      	strb	r2, [r3, #0]
 800c762:	b01c      	add	sp, #112	@ 0x70
 800c764:	f85d eb04 	ldr.w	lr, [sp], #4
 800c768:	b003      	add	sp, #12
 800c76a:	4770      	bx	lr
 800c76c:	20000044 	.word	0x20000044
 800c770:	ffff0208 	.word	0xffff0208

0800c774 <siscanf>:
 800c774:	b40e      	push	{r1, r2, r3}
 800c776:	b530      	push	{r4, r5, lr}
 800c778:	b09c      	sub	sp, #112	@ 0x70
 800c77a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800c77c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c780:	f854 5b04 	ldr.w	r5, [r4], #4
 800c784:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c788:	9002      	str	r0, [sp, #8]
 800c78a:	9006      	str	r0, [sp, #24]
 800c78c:	f7f3 fd90 	bl	80002b0 <strlen>
 800c790:	4b0b      	ldr	r3, [pc, #44]	@ (800c7c0 <siscanf+0x4c>)
 800c792:	9003      	str	r0, [sp, #12]
 800c794:	9007      	str	r0, [sp, #28]
 800c796:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c798:	480a      	ldr	r0, [pc, #40]	@ (800c7c4 <siscanf+0x50>)
 800c79a:	9401      	str	r4, [sp, #4]
 800c79c:	2300      	movs	r3, #0
 800c79e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7a0:	9314      	str	r3, [sp, #80]	@ 0x50
 800c7a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c7a6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c7aa:	462a      	mov	r2, r5
 800c7ac:	4623      	mov	r3, r4
 800c7ae:	a902      	add	r1, sp, #8
 800c7b0:	6800      	ldr	r0, [r0, #0]
 800c7b2:	f002 fc9f 	bl	800f0f4 <__ssvfiscanf_r>
 800c7b6:	b01c      	add	sp, #112	@ 0x70
 800c7b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7bc:	b003      	add	sp, #12
 800c7be:	4770      	bx	lr
 800c7c0:	0800c7eb 	.word	0x0800c7eb
 800c7c4:	20000044 	.word	0x20000044

0800c7c8 <__sread>:
 800c7c8:	b510      	push	{r4, lr}
 800c7ca:	460c      	mov	r4, r1
 800c7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7d0:	f000 f894 	bl	800c8fc <_read_r>
 800c7d4:	2800      	cmp	r0, #0
 800c7d6:	bfab      	itete	ge
 800c7d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c7da:	89a3      	ldrhlt	r3, [r4, #12]
 800c7dc:	181b      	addge	r3, r3, r0
 800c7de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c7e2:	bfac      	ite	ge
 800c7e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c7e6:	81a3      	strhlt	r3, [r4, #12]
 800c7e8:	bd10      	pop	{r4, pc}

0800c7ea <__seofread>:
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	4770      	bx	lr

0800c7ee <__swrite>:
 800c7ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f2:	461f      	mov	r7, r3
 800c7f4:	898b      	ldrh	r3, [r1, #12]
 800c7f6:	05db      	lsls	r3, r3, #23
 800c7f8:	4605      	mov	r5, r0
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	4616      	mov	r6, r2
 800c7fe:	d505      	bpl.n	800c80c <__swrite+0x1e>
 800c800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c804:	2302      	movs	r3, #2
 800c806:	2200      	movs	r2, #0
 800c808:	f000 f866 	bl	800c8d8 <_lseek_r>
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c816:	81a3      	strh	r3, [r4, #12]
 800c818:	4632      	mov	r2, r6
 800c81a:	463b      	mov	r3, r7
 800c81c:	4628      	mov	r0, r5
 800c81e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c822:	f000 b88d 	b.w	800c940 <_write_r>

0800c826 <__sseek>:
 800c826:	b510      	push	{r4, lr}
 800c828:	460c      	mov	r4, r1
 800c82a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c82e:	f000 f853 	bl	800c8d8 <_lseek_r>
 800c832:	1c43      	adds	r3, r0, #1
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	bf15      	itete	ne
 800c838:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c83a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c83e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c842:	81a3      	strheq	r3, [r4, #12]
 800c844:	bf18      	it	ne
 800c846:	81a3      	strhne	r3, [r4, #12]
 800c848:	bd10      	pop	{r4, pc}

0800c84a <__sclose>:
 800c84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84e:	f000 b833 	b.w	800c8b8 <_close_r>

0800c852 <memcmp>:
 800c852:	b510      	push	{r4, lr}
 800c854:	3901      	subs	r1, #1
 800c856:	4402      	add	r2, r0
 800c858:	4290      	cmp	r0, r2
 800c85a:	d101      	bne.n	800c860 <memcmp+0xe>
 800c85c:	2000      	movs	r0, #0
 800c85e:	e005      	b.n	800c86c <memcmp+0x1a>
 800c860:	7803      	ldrb	r3, [r0, #0]
 800c862:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c866:	42a3      	cmp	r3, r4
 800c868:	d001      	beq.n	800c86e <memcmp+0x1c>
 800c86a:	1b18      	subs	r0, r3, r4
 800c86c:	bd10      	pop	{r4, pc}
 800c86e:	3001      	adds	r0, #1
 800c870:	e7f2      	b.n	800c858 <memcmp+0x6>

0800c872 <memset>:
 800c872:	4402      	add	r2, r0
 800c874:	4603      	mov	r3, r0
 800c876:	4293      	cmp	r3, r2
 800c878:	d100      	bne.n	800c87c <memset+0xa>
 800c87a:	4770      	bx	lr
 800c87c:	f803 1b01 	strb.w	r1, [r3], #1
 800c880:	e7f9      	b.n	800c876 <memset+0x4>

0800c882 <strstr>:
 800c882:	780a      	ldrb	r2, [r1, #0]
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	b96a      	cbnz	r2, 800c8a4 <strstr+0x22>
 800c888:	bd70      	pop	{r4, r5, r6, pc}
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d109      	bne.n	800c8a2 <strstr+0x20>
 800c88e:	460c      	mov	r4, r1
 800c890:	4605      	mov	r5, r0
 800c892:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c896:	2b00      	cmp	r3, #0
 800c898:	d0f6      	beq.n	800c888 <strstr+0x6>
 800c89a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c89e:	429e      	cmp	r6, r3
 800c8a0:	d0f7      	beq.n	800c892 <strstr+0x10>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	7803      	ldrb	r3, [r0, #0]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d1ef      	bne.n	800c88a <strstr+0x8>
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	e7ec      	b.n	800c888 <strstr+0x6>
	...

0800c8b0 <_localeconv_r>:
 800c8b0:	4800      	ldr	r0, [pc, #0]	@ (800c8b4 <_localeconv_r+0x4>)
 800c8b2:	4770      	bx	lr
 800c8b4:	20000184 	.word	0x20000184

0800c8b8 <_close_r>:
 800c8b8:	b538      	push	{r3, r4, r5, lr}
 800c8ba:	4d06      	ldr	r5, [pc, #24]	@ (800c8d4 <_close_r+0x1c>)
 800c8bc:	2300      	movs	r3, #0
 800c8be:	4604      	mov	r4, r0
 800c8c0:	4608      	mov	r0, r1
 800c8c2:	602b      	str	r3, [r5, #0]
 800c8c4:	f7f9 fb98 	bl	8005ff8 <_close>
 800c8c8:	1c43      	adds	r3, r0, #1
 800c8ca:	d102      	bne.n	800c8d2 <_close_r+0x1a>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	b103      	cbz	r3, 800c8d2 <_close_r+0x1a>
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	bd38      	pop	{r3, r4, r5, pc}
 800c8d4:	200017d8 	.word	0x200017d8

0800c8d8 <_lseek_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d07      	ldr	r5, [pc, #28]	@ (800c8f8 <_lseek_r+0x20>)
 800c8dc:	4604      	mov	r4, r0
 800c8de:	4608      	mov	r0, r1
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	602a      	str	r2, [r5, #0]
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	f7f9 fbad 	bl	8006046 <_lseek>
 800c8ec:	1c43      	adds	r3, r0, #1
 800c8ee:	d102      	bne.n	800c8f6 <_lseek_r+0x1e>
 800c8f0:	682b      	ldr	r3, [r5, #0]
 800c8f2:	b103      	cbz	r3, 800c8f6 <_lseek_r+0x1e>
 800c8f4:	6023      	str	r3, [r4, #0]
 800c8f6:	bd38      	pop	{r3, r4, r5, pc}
 800c8f8:	200017d8 	.word	0x200017d8

0800c8fc <_read_r>:
 800c8fc:	b538      	push	{r3, r4, r5, lr}
 800c8fe:	4d07      	ldr	r5, [pc, #28]	@ (800c91c <_read_r+0x20>)
 800c900:	4604      	mov	r4, r0
 800c902:	4608      	mov	r0, r1
 800c904:	4611      	mov	r1, r2
 800c906:	2200      	movs	r2, #0
 800c908:	602a      	str	r2, [r5, #0]
 800c90a:	461a      	mov	r2, r3
 800c90c:	f7f9 fb3b 	bl	8005f86 <_read>
 800c910:	1c43      	adds	r3, r0, #1
 800c912:	d102      	bne.n	800c91a <_read_r+0x1e>
 800c914:	682b      	ldr	r3, [r5, #0]
 800c916:	b103      	cbz	r3, 800c91a <_read_r+0x1e>
 800c918:	6023      	str	r3, [r4, #0]
 800c91a:	bd38      	pop	{r3, r4, r5, pc}
 800c91c:	200017d8 	.word	0x200017d8

0800c920 <_sbrk_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4d06      	ldr	r5, [pc, #24]	@ (800c93c <_sbrk_r+0x1c>)
 800c924:	2300      	movs	r3, #0
 800c926:	4604      	mov	r4, r0
 800c928:	4608      	mov	r0, r1
 800c92a:	602b      	str	r3, [r5, #0]
 800c92c:	f7f9 fb98 	bl	8006060 <_sbrk>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d102      	bne.n	800c93a <_sbrk_r+0x1a>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	b103      	cbz	r3, 800c93a <_sbrk_r+0x1a>
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	200017d8 	.word	0x200017d8

0800c940 <_write_r>:
 800c940:	b538      	push	{r3, r4, r5, lr}
 800c942:	4d07      	ldr	r5, [pc, #28]	@ (800c960 <_write_r+0x20>)
 800c944:	4604      	mov	r4, r0
 800c946:	4608      	mov	r0, r1
 800c948:	4611      	mov	r1, r2
 800c94a:	2200      	movs	r2, #0
 800c94c:	602a      	str	r2, [r5, #0]
 800c94e:	461a      	mov	r2, r3
 800c950:	f7f9 fb36 	bl	8005fc0 <_write>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_write_r+0x1e>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_write_r+0x1e>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	200017d8 	.word	0x200017d8

0800c964 <__errno>:
 800c964:	4b01      	ldr	r3, [pc, #4]	@ (800c96c <__errno+0x8>)
 800c966:	6818      	ldr	r0, [r3, #0]
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	20000044 	.word	0x20000044

0800c970 <__libc_init_array>:
 800c970:	b570      	push	{r4, r5, r6, lr}
 800c972:	4d0d      	ldr	r5, [pc, #52]	@ (800c9a8 <__libc_init_array+0x38>)
 800c974:	4c0d      	ldr	r4, [pc, #52]	@ (800c9ac <__libc_init_array+0x3c>)
 800c976:	1b64      	subs	r4, r4, r5
 800c978:	10a4      	asrs	r4, r4, #2
 800c97a:	2600      	movs	r6, #0
 800c97c:	42a6      	cmp	r6, r4
 800c97e:	d109      	bne.n	800c994 <__libc_init_array+0x24>
 800c980:	4d0b      	ldr	r5, [pc, #44]	@ (800c9b0 <__libc_init_array+0x40>)
 800c982:	4c0c      	ldr	r4, [pc, #48]	@ (800c9b4 <__libc_init_array+0x44>)
 800c984:	f005 fad4 	bl	8011f30 <_init>
 800c988:	1b64      	subs	r4, r4, r5
 800c98a:	10a4      	asrs	r4, r4, #2
 800c98c:	2600      	movs	r6, #0
 800c98e:	42a6      	cmp	r6, r4
 800c990:	d105      	bne.n	800c99e <__libc_init_array+0x2e>
 800c992:	bd70      	pop	{r4, r5, r6, pc}
 800c994:	f855 3b04 	ldr.w	r3, [r5], #4
 800c998:	4798      	blx	r3
 800c99a:	3601      	adds	r6, #1
 800c99c:	e7ee      	b.n	800c97c <__libc_init_array+0xc>
 800c99e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9a2:	4798      	blx	r3
 800c9a4:	3601      	adds	r6, #1
 800c9a6:	e7f2      	b.n	800c98e <__libc_init_array+0x1e>
 800c9a8:	080125c0 	.word	0x080125c0
 800c9ac:	080125c0 	.word	0x080125c0
 800c9b0:	080125c0 	.word	0x080125c0
 800c9b4:	080125c4 	.word	0x080125c4

0800c9b8 <__retarget_lock_init_recursive>:
 800c9b8:	4770      	bx	lr

0800c9ba <__retarget_lock_acquire_recursive>:
 800c9ba:	4770      	bx	lr

0800c9bc <__retarget_lock_release_recursive>:
 800c9bc:	4770      	bx	lr

0800c9be <memcpy>:
 800c9be:	440a      	add	r2, r1
 800c9c0:	4291      	cmp	r1, r2
 800c9c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9c6:	d100      	bne.n	800c9ca <memcpy+0xc>
 800c9c8:	4770      	bx	lr
 800c9ca:	b510      	push	{r4, lr}
 800c9cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9d4:	4291      	cmp	r1, r2
 800c9d6:	d1f9      	bne.n	800c9cc <memcpy+0xe>
 800c9d8:	bd10      	pop	{r4, pc}
	...

0800c9dc <nanf>:
 800c9dc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c9e4 <nanf+0x8>
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	7fc00000 	.word	0x7fc00000

0800c9e8 <quorem>:
 800c9e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	6903      	ldr	r3, [r0, #16]
 800c9ee:	690c      	ldr	r4, [r1, #16]
 800c9f0:	42a3      	cmp	r3, r4
 800c9f2:	4607      	mov	r7, r0
 800c9f4:	db7e      	blt.n	800caf4 <quorem+0x10c>
 800c9f6:	3c01      	subs	r4, #1
 800c9f8:	f101 0814 	add.w	r8, r1, #20
 800c9fc:	00a3      	lsls	r3, r4, #2
 800c9fe:	f100 0514 	add.w	r5, r0, #20
 800ca02:	9300      	str	r3, [sp, #0]
 800ca04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca08:	9301      	str	r3, [sp, #4]
 800ca0a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca12:	3301      	adds	r3, #1
 800ca14:	429a      	cmp	r2, r3
 800ca16:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca1a:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca1e:	d32e      	bcc.n	800ca7e <quorem+0x96>
 800ca20:	f04f 0a00 	mov.w	sl, #0
 800ca24:	46c4      	mov	ip, r8
 800ca26:	46ae      	mov	lr, r5
 800ca28:	46d3      	mov	fp, sl
 800ca2a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca2e:	b298      	uxth	r0, r3
 800ca30:	fb06 a000 	mla	r0, r6, r0, sl
 800ca34:	0c02      	lsrs	r2, r0, #16
 800ca36:	0c1b      	lsrs	r3, r3, #16
 800ca38:	fb06 2303 	mla	r3, r6, r3, r2
 800ca3c:	f8de 2000 	ldr.w	r2, [lr]
 800ca40:	b280      	uxth	r0, r0
 800ca42:	b292      	uxth	r2, r2
 800ca44:	1a12      	subs	r2, r2, r0
 800ca46:	445a      	add	r2, fp
 800ca48:	f8de 0000 	ldr.w	r0, [lr]
 800ca4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ca56:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ca5a:	b292      	uxth	r2, r2
 800ca5c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ca60:	45e1      	cmp	r9, ip
 800ca62:	f84e 2b04 	str.w	r2, [lr], #4
 800ca66:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ca6a:	d2de      	bcs.n	800ca2a <quorem+0x42>
 800ca6c:	9b00      	ldr	r3, [sp, #0]
 800ca6e:	58eb      	ldr	r3, [r5, r3]
 800ca70:	b92b      	cbnz	r3, 800ca7e <quorem+0x96>
 800ca72:	9b01      	ldr	r3, [sp, #4]
 800ca74:	3b04      	subs	r3, #4
 800ca76:	429d      	cmp	r5, r3
 800ca78:	461a      	mov	r2, r3
 800ca7a:	d32f      	bcc.n	800cadc <quorem+0xf4>
 800ca7c:	613c      	str	r4, [r7, #16]
 800ca7e:	4638      	mov	r0, r7
 800ca80:	f001 f914 	bl	800dcac <__mcmp>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	db25      	blt.n	800cad4 <quorem+0xec>
 800ca88:	4629      	mov	r1, r5
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca90:	f8d1 c000 	ldr.w	ip, [r1]
 800ca94:	fa1f fe82 	uxth.w	lr, r2
 800ca98:	fa1f f38c 	uxth.w	r3, ip
 800ca9c:	eba3 030e 	sub.w	r3, r3, lr
 800caa0:	4403      	add	r3, r0
 800caa2:	0c12      	lsrs	r2, r2, #16
 800caa4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800caa8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800caac:	b29b      	uxth	r3, r3
 800caae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cab2:	45c1      	cmp	r9, r8
 800cab4:	f841 3b04 	str.w	r3, [r1], #4
 800cab8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cabc:	d2e6      	bcs.n	800ca8c <quorem+0xa4>
 800cabe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cac2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cac6:	b922      	cbnz	r2, 800cad2 <quorem+0xea>
 800cac8:	3b04      	subs	r3, #4
 800caca:	429d      	cmp	r5, r3
 800cacc:	461a      	mov	r2, r3
 800cace:	d30b      	bcc.n	800cae8 <quorem+0x100>
 800cad0:	613c      	str	r4, [r7, #16]
 800cad2:	3601      	adds	r6, #1
 800cad4:	4630      	mov	r0, r6
 800cad6:	b003      	add	sp, #12
 800cad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cadc:	6812      	ldr	r2, [r2, #0]
 800cade:	3b04      	subs	r3, #4
 800cae0:	2a00      	cmp	r2, #0
 800cae2:	d1cb      	bne.n	800ca7c <quorem+0x94>
 800cae4:	3c01      	subs	r4, #1
 800cae6:	e7c6      	b.n	800ca76 <quorem+0x8e>
 800cae8:	6812      	ldr	r2, [r2, #0]
 800caea:	3b04      	subs	r3, #4
 800caec:	2a00      	cmp	r2, #0
 800caee:	d1ef      	bne.n	800cad0 <quorem+0xe8>
 800caf0:	3c01      	subs	r4, #1
 800caf2:	e7ea      	b.n	800caca <quorem+0xe2>
 800caf4:	2000      	movs	r0, #0
 800caf6:	e7ee      	b.n	800cad6 <quorem+0xee>

0800caf8 <_dtoa_r>:
 800caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	69c7      	ldr	r7, [r0, #28]
 800cafe:	b099      	sub	sp, #100	@ 0x64
 800cb00:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cb04:	ec55 4b10 	vmov	r4, r5, d0
 800cb08:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cb0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800cb0c:	4683      	mov	fp, r0
 800cb0e:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cb12:	b97f      	cbnz	r7, 800cb34 <_dtoa_r+0x3c>
 800cb14:	2010      	movs	r0, #16
 800cb16:	f000 fdfd 	bl	800d714 <malloc>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	f8cb 001c 	str.w	r0, [fp, #28]
 800cb20:	b920      	cbnz	r0, 800cb2c <_dtoa_r+0x34>
 800cb22:	4ba7      	ldr	r3, [pc, #668]	@ (800cdc0 <_dtoa_r+0x2c8>)
 800cb24:	21ef      	movs	r1, #239	@ 0xef
 800cb26:	48a7      	ldr	r0, [pc, #668]	@ (800cdc4 <_dtoa_r+0x2cc>)
 800cb28:	f002 fefa 	bl	800f920 <__assert_func>
 800cb2c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cb30:	6007      	str	r7, [r0, #0]
 800cb32:	60c7      	str	r7, [r0, #12]
 800cb34:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb38:	6819      	ldr	r1, [r3, #0]
 800cb3a:	b159      	cbz	r1, 800cb54 <_dtoa_r+0x5c>
 800cb3c:	685a      	ldr	r2, [r3, #4]
 800cb3e:	604a      	str	r2, [r1, #4]
 800cb40:	2301      	movs	r3, #1
 800cb42:	4093      	lsls	r3, r2
 800cb44:	608b      	str	r3, [r1, #8]
 800cb46:	4658      	mov	r0, fp
 800cb48:	f000 fe2c 	bl	800d7a4 <_Bfree>
 800cb4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cb50:	2200      	movs	r2, #0
 800cb52:	601a      	str	r2, [r3, #0]
 800cb54:	1e2b      	subs	r3, r5, #0
 800cb56:	bfb9      	ittee	lt
 800cb58:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cb5c:	9303      	strlt	r3, [sp, #12]
 800cb5e:	2300      	movge	r3, #0
 800cb60:	6033      	strge	r3, [r6, #0]
 800cb62:	9f03      	ldr	r7, [sp, #12]
 800cb64:	4b98      	ldr	r3, [pc, #608]	@ (800cdc8 <_dtoa_r+0x2d0>)
 800cb66:	bfbc      	itt	lt
 800cb68:	2201      	movlt	r2, #1
 800cb6a:	6032      	strlt	r2, [r6, #0]
 800cb6c:	43bb      	bics	r3, r7
 800cb6e:	d112      	bne.n	800cb96 <_dtoa_r+0x9e>
 800cb70:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cb72:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cb76:	6013      	str	r3, [r2, #0]
 800cb78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb7c:	4323      	orrs	r3, r4
 800cb7e:	f000 854d 	beq.w	800d61c <_dtoa_r+0xb24>
 800cb82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cb84:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cddc <_dtoa_r+0x2e4>
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	f000 854f 	beq.w	800d62c <_dtoa_r+0xb34>
 800cb8e:	f10a 0303 	add.w	r3, sl, #3
 800cb92:	f000 bd49 	b.w	800d628 <_dtoa_r+0xb30>
 800cb96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	ec51 0b17 	vmov	r0, r1, d7
 800cba0:	2300      	movs	r3, #0
 800cba2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cba6:	f7f3 ffaf 	bl	8000b08 <__aeabi_dcmpeq>
 800cbaa:	4680      	mov	r8, r0
 800cbac:	b158      	cbz	r0, 800cbc6 <_dtoa_r+0xce>
 800cbae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cbb6:	b113      	cbz	r3, 800cbbe <_dtoa_r+0xc6>
 800cbb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cbba:	4b84      	ldr	r3, [pc, #528]	@ (800cdcc <_dtoa_r+0x2d4>)
 800cbbc:	6013      	str	r3, [r2, #0]
 800cbbe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cde0 <_dtoa_r+0x2e8>
 800cbc2:	f000 bd33 	b.w	800d62c <_dtoa_r+0xb34>
 800cbc6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cbca:	aa16      	add	r2, sp, #88	@ 0x58
 800cbcc:	a917      	add	r1, sp, #92	@ 0x5c
 800cbce:	4658      	mov	r0, fp
 800cbd0:	f001 f98c 	bl	800deec <__d2b>
 800cbd4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cbd8:	4681      	mov	r9, r0
 800cbda:	2e00      	cmp	r6, #0
 800cbdc:	d077      	beq.n	800ccce <_dtoa_r+0x1d6>
 800cbde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cbe0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cbe4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cbe8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cbec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cbf0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cbf4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	4b74      	ldr	r3, [pc, #464]	@ (800cdd0 <_dtoa_r+0x2d8>)
 800cbfe:	f7f3 fb63 	bl	80002c8 <__aeabi_dsub>
 800cc02:	a369      	add	r3, pc, #420	@ (adr r3, 800cda8 <_dtoa_r+0x2b0>)
 800cc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc08:	f7f3 fd16 	bl	8000638 <__aeabi_dmul>
 800cc0c:	a368      	add	r3, pc, #416	@ (adr r3, 800cdb0 <_dtoa_r+0x2b8>)
 800cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc12:	f7f3 fb5b 	bl	80002cc <__adddf3>
 800cc16:	4604      	mov	r4, r0
 800cc18:	4630      	mov	r0, r6
 800cc1a:	460d      	mov	r5, r1
 800cc1c:	f7f3 fca2 	bl	8000564 <__aeabi_i2d>
 800cc20:	a365      	add	r3, pc, #404	@ (adr r3, 800cdb8 <_dtoa_r+0x2c0>)
 800cc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc26:	f7f3 fd07 	bl	8000638 <__aeabi_dmul>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fb4b 	bl	80002cc <__adddf3>
 800cc36:	4604      	mov	r4, r0
 800cc38:	460d      	mov	r5, r1
 800cc3a:	f7f3 ffad 	bl	8000b98 <__aeabi_d2iz>
 800cc3e:	2200      	movs	r2, #0
 800cc40:	4607      	mov	r7, r0
 800cc42:	2300      	movs	r3, #0
 800cc44:	4620      	mov	r0, r4
 800cc46:	4629      	mov	r1, r5
 800cc48:	f7f3 ff68 	bl	8000b1c <__aeabi_dcmplt>
 800cc4c:	b140      	cbz	r0, 800cc60 <_dtoa_r+0x168>
 800cc4e:	4638      	mov	r0, r7
 800cc50:	f7f3 fc88 	bl	8000564 <__aeabi_i2d>
 800cc54:	4622      	mov	r2, r4
 800cc56:	462b      	mov	r3, r5
 800cc58:	f7f3 ff56 	bl	8000b08 <__aeabi_dcmpeq>
 800cc5c:	b900      	cbnz	r0, 800cc60 <_dtoa_r+0x168>
 800cc5e:	3f01      	subs	r7, #1
 800cc60:	2f16      	cmp	r7, #22
 800cc62:	d851      	bhi.n	800cd08 <_dtoa_r+0x210>
 800cc64:	4b5b      	ldr	r3, [pc, #364]	@ (800cdd4 <_dtoa_r+0x2dc>)
 800cc66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc72:	f7f3 ff53 	bl	8000b1c <__aeabi_dcmplt>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	d048      	beq.n	800cd0c <_dtoa_r+0x214>
 800cc7a:	3f01      	subs	r7, #1
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	9312      	str	r3, [sp, #72]	@ 0x48
 800cc80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cc82:	1b9b      	subs	r3, r3, r6
 800cc84:	1e5a      	subs	r2, r3, #1
 800cc86:	bf44      	itt	mi
 800cc88:	f1c3 0801 	rsbmi	r8, r3, #1
 800cc8c:	2300      	movmi	r3, #0
 800cc8e:	9208      	str	r2, [sp, #32]
 800cc90:	bf54      	ite	pl
 800cc92:	f04f 0800 	movpl.w	r8, #0
 800cc96:	9308      	strmi	r3, [sp, #32]
 800cc98:	2f00      	cmp	r7, #0
 800cc9a:	db39      	blt.n	800cd10 <_dtoa_r+0x218>
 800cc9c:	9b08      	ldr	r3, [sp, #32]
 800cc9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cca0:	443b      	add	r3, r7
 800cca2:	9308      	str	r3, [sp, #32]
 800cca4:	2300      	movs	r3, #0
 800cca6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccaa:	2b09      	cmp	r3, #9
 800ccac:	d864      	bhi.n	800cd78 <_dtoa_r+0x280>
 800ccae:	2b05      	cmp	r3, #5
 800ccb0:	bfc4      	itt	gt
 800ccb2:	3b04      	subgt	r3, #4
 800ccb4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ccb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccb8:	f1a3 0302 	sub.w	r3, r3, #2
 800ccbc:	bfcc      	ite	gt
 800ccbe:	2400      	movgt	r4, #0
 800ccc0:	2401      	movle	r4, #1
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d863      	bhi.n	800cd8e <_dtoa_r+0x296>
 800ccc6:	e8df f003 	tbb	[pc, r3]
 800ccca:	372a      	.short	0x372a
 800cccc:	5535      	.short	0x5535
 800ccce:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ccd2:	441e      	add	r6, r3
 800ccd4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ccd8:	2b20      	cmp	r3, #32
 800ccda:	bfc1      	itttt	gt
 800ccdc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cce0:	409f      	lslgt	r7, r3
 800cce2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cce6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ccea:	bfd6      	itet	le
 800ccec:	f1c3 0320 	rsble	r3, r3, #32
 800ccf0:	ea47 0003 	orrgt.w	r0, r7, r3
 800ccf4:	fa04 f003 	lslle.w	r0, r4, r3
 800ccf8:	f7f3 fc24 	bl	8000544 <__aeabi_ui2d>
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cd02:	3e01      	subs	r6, #1
 800cd04:	9214      	str	r2, [sp, #80]	@ 0x50
 800cd06:	e777      	b.n	800cbf8 <_dtoa_r+0x100>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e7b8      	b.n	800cc7e <_dtoa_r+0x186>
 800cd0c:	9012      	str	r0, [sp, #72]	@ 0x48
 800cd0e:	e7b7      	b.n	800cc80 <_dtoa_r+0x188>
 800cd10:	427b      	negs	r3, r7
 800cd12:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd14:	2300      	movs	r3, #0
 800cd16:	eba8 0807 	sub.w	r8, r8, r7
 800cd1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cd1c:	e7c4      	b.n	800cca8 <_dtoa_r+0x1b0>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	dc35      	bgt.n	800cd94 <_dtoa_r+0x29c>
 800cd28:	2301      	movs	r3, #1
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	9307      	str	r3, [sp, #28]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd32:	e00b      	b.n	800cd4c <_dtoa_r+0x254>
 800cd34:	2301      	movs	r3, #1
 800cd36:	e7f3      	b.n	800cd20 <_dtoa_r+0x228>
 800cd38:	2300      	movs	r3, #0
 800cd3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd3e:	18fb      	adds	r3, r7, r3
 800cd40:	9300      	str	r3, [sp, #0]
 800cd42:	3301      	adds	r3, #1
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	9307      	str	r3, [sp, #28]
 800cd48:	bfb8      	it	lt
 800cd4a:	2301      	movlt	r3, #1
 800cd4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cd50:	2100      	movs	r1, #0
 800cd52:	2204      	movs	r2, #4
 800cd54:	f102 0514 	add.w	r5, r2, #20
 800cd58:	429d      	cmp	r5, r3
 800cd5a:	d91f      	bls.n	800cd9c <_dtoa_r+0x2a4>
 800cd5c:	6041      	str	r1, [r0, #4]
 800cd5e:	4658      	mov	r0, fp
 800cd60:	f000 fce0 	bl	800d724 <_Balloc>
 800cd64:	4682      	mov	sl, r0
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d13c      	bne.n	800cde4 <_dtoa_r+0x2ec>
 800cd6a:	4b1b      	ldr	r3, [pc, #108]	@ (800cdd8 <_dtoa_r+0x2e0>)
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	f240 11af 	movw	r1, #431	@ 0x1af
 800cd72:	e6d8      	b.n	800cb26 <_dtoa_r+0x2e>
 800cd74:	2301      	movs	r3, #1
 800cd76:	e7e0      	b.n	800cd3a <_dtoa_r+0x242>
 800cd78:	2401      	movs	r4, #1
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cd80:	f04f 33ff 	mov.w	r3, #4294967295
 800cd84:	9300      	str	r3, [sp, #0]
 800cd86:	9307      	str	r3, [sp, #28]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	2312      	movs	r3, #18
 800cd8c:	e7d0      	b.n	800cd30 <_dtoa_r+0x238>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd92:	e7f5      	b.n	800cd80 <_dtoa_r+0x288>
 800cd94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	9307      	str	r3, [sp, #28]
 800cd9a:	e7d7      	b.n	800cd4c <_dtoa_r+0x254>
 800cd9c:	3101      	adds	r1, #1
 800cd9e:	0052      	lsls	r2, r2, #1
 800cda0:	e7d8      	b.n	800cd54 <_dtoa_r+0x25c>
 800cda2:	bf00      	nop
 800cda4:	f3af 8000 	nop.w
 800cda8:	636f4361 	.word	0x636f4361
 800cdac:	3fd287a7 	.word	0x3fd287a7
 800cdb0:	8b60c8b3 	.word	0x8b60c8b3
 800cdb4:	3fc68a28 	.word	0x3fc68a28
 800cdb8:	509f79fb 	.word	0x509f79fb
 800cdbc:	3fd34413 	.word	0x3fd34413
 800cdc0:	08012148 	.word	0x08012148
 800cdc4:	0801215f 	.word	0x0801215f
 800cdc8:	7ff00000 	.word	0x7ff00000
 800cdcc:	080124a1 	.word	0x080124a1
 800cdd0:	3ff80000 	.word	0x3ff80000
 800cdd4:	08012258 	.word	0x08012258
 800cdd8:	080121b7 	.word	0x080121b7
 800cddc:	08012144 	.word	0x08012144
 800cde0:	080124a0 	.word	0x080124a0
 800cde4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cde8:	6018      	str	r0, [r3, #0]
 800cdea:	9b07      	ldr	r3, [sp, #28]
 800cdec:	2b0e      	cmp	r3, #14
 800cdee:	f200 80a4 	bhi.w	800cf3a <_dtoa_r+0x442>
 800cdf2:	2c00      	cmp	r4, #0
 800cdf4:	f000 80a1 	beq.w	800cf3a <_dtoa_r+0x442>
 800cdf8:	2f00      	cmp	r7, #0
 800cdfa:	dd33      	ble.n	800ce64 <_dtoa_r+0x36c>
 800cdfc:	4bad      	ldr	r3, [pc, #692]	@ (800d0b4 <_dtoa_r+0x5bc>)
 800cdfe:	f007 020f 	and.w	r2, r7, #15
 800ce02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce06:	ed93 7b00 	vldr	d7, [r3]
 800ce0a:	05f8      	lsls	r0, r7, #23
 800ce0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ce10:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ce14:	d516      	bpl.n	800ce44 <_dtoa_r+0x34c>
 800ce16:	4ba8      	ldr	r3, [pc, #672]	@ (800d0b8 <_dtoa_r+0x5c0>)
 800ce18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ce20:	f7f3 fd34 	bl	800088c <__aeabi_ddiv>
 800ce24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce28:	f004 040f 	and.w	r4, r4, #15
 800ce2c:	2603      	movs	r6, #3
 800ce2e:	4da2      	ldr	r5, [pc, #648]	@ (800d0b8 <_dtoa_r+0x5c0>)
 800ce30:	b954      	cbnz	r4, 800ce48 <_dtoa_r+0x350>
 800ce32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ce3a:	f7f3 fd27 	bl	800088c <__aeabi_ddiv>
 800ce3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce42:	e028      	b.n	800ce96 <_dtoa_r+0x39e>
 800ce44:	2602      	movs	r6, #2
 800ce46:	e7f2      	b.n	800ce2e <_dtoa_r+0x336>
 800ce48:	07e1      	lsls	r1, r4, #31
 800ce4a:	d508      	bpl.n	800ce5e <_dtoa_r+0x366>
 800ce4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ce50:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce54:	f7f3 fbf0 	bl	8000638 <__aeabi_dmul>
 800ce58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ce5c:	3601      	adds	r6, #1
 800ce5e:	1064      	asrs	r4, r4, #1
 800ce60:	3508      	adds	r5, #8
 800ce62:	e7e5      	b.n	800ce30 <_dtoa_r+0x338>
 800ce64:	f000 80d2 	beq.w	800d00c <_dtoa_r+0x514>
 800ce68:	427c      	negs	r4, r7
 800ce6a:	4b92      	ldr	r3, [pc, #584]	@ (800d0b4 <_dtoa_r+0x5bc>)
 800ce6c:	4d92      	ldr	r5, [pc, #584]	@ (800d0b8 <_dtoa_r+0x5c0>)
 800ce6e:	f004 020f 	and.w	r2, r4, #15
 800ce72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ce7e:	f7f3 fbdb 	bl	8000638 <__aeabi_dmul>
 800ce82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ce86:	1124      	asrs	r4, r4, #4
 800ce88:	2300      	movs	r3, #0
 800ce8a:	2602      	movs	r6, #2
 800ce8c:	2c00      	cmp	r4, #0
 800ce8e:	f040 80b2 	bne.w	800cff6 <_dtoa_r+0x4fe>
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1d3      	bne.n	800ce3e <_dtoa_r+0x346>
 800ce96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ce98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 80b7 	beq.w	800d010 <_dtoa_r+0x518>
 800cea2:	4b86      	ldr	r3, [pc, #536]	@ (800d0bc <_dtoa_r+0x5c4>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	4620      	mov	r0, r4
 800cea8:	4629      	mov	r1, r5
 800ceaa:	f7f3 fe37 	bl	8000b1c <__aeabi_dcmplt>
 800ceae:	2800      	cmp	r0, #0
 800ceb0:	f000 80ae 	beq.w	800d010 <_dtoa_r+0x518>
 800ceb4:	9b07      	ldr	r3, [sp, #28]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	f000 80aa 	beq.w	800d010 <_dtoa_r+0x518>
 800cebc:	9b00      	ldr	r3, [sp, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dd37      	ble.n	800cf32 <_dtoa_r+0x43a>
 800cec2:	1e7b      	subs	r3, r7, #1
 800cec4:	9304      	str	r3, [sp, #16]
 800cec6:	4620      	mov	r0, r4
 800cec8:	4b7d      	ldr	r3, [pc, #500]	@ (800d0c0 <_dtoa_r+0x5c8>)
 800ceca:	2200      	movs	r2, #0
 800cecc:	4629      	mov	r1, r5
 800cece:	f7f3 fbb3 	bl	8000638 <__aeabi_dmul>
 800ced2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ced6:	9c00      	ldr	r4, [sp, #0]
 800ced8:	3601      	adds	r6, #1
 800ceda:	4630      	mov	r0, r6
 800cedc:	f7f3 fb42 	bl	8000564 <__aeabi_i2d>
 800cee0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cee4:	f7f3 fba8 	bl	8000638 <__aeabi_dmul>
 800cee8:	4b76      	ldr	r3, [pc, #472]	@ (800d0c4 <_dtoa_r+0x5cc>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	f7f3 f9ee 	bl	80002cc <__adddf3>
 800cef0:	4605      	mov	r5, r0
 800cef2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cef6:	2c00      	cmp	r4, #0
 800cef8:	f040 808d 	bne.w	800d016 <_dtoa_r+0x51e>
 800cefc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf00:	4b71      	ldr	r3, [pc, #452]	@ (800d0c8 <_dtoa_r+0x5d0>)
 800cf02:	2200      	movs	r2, #0
 800cf04:	f7f3 f9e0 	bl	80002c8 <__aeabi_dsub>
 800cf08:	4602      	mov	r2, r0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf10:	462a      	mov	r2, r5
 800cf12:	4633      	mov	r3, r6
 800cf14:	f7f3 fe20 	bl	8000b58 <__aeabi_dcmpgt>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	f040 828b 	bne.w	800d434 <_dtoa_r+0x93c>
 800cf1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf22:	462a      	mov	r2, r5
 800cf24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cf28:	f7f3 fdf8 	bl	8000b1c <__aeabi_dcmplt>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	f040 8128 	bne.w	800d182 <_dtoa_r+0x68a>
 800cf32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cf36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cf3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f2c0 815a 	blt.w	800d1f6 <_dtoa_r+0x6fe>
 800cf42:	2f0e      	cmp	r7, #14
 800cf44:	f300 8157 	bgt.w	800d1f6 <_dtoa_r+0x6fe>
 800cf48:	4b5a      	ldr	r3, [pc, #360]	@ (800d0b4 <_dtoa_r+0x5bc>)
 800cf4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cf4e:	ed93 7b00 	vldr	d7, [r3]
 800cf52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	ed8d 7b00 	vstr	d7, [sp]
 800cf5a:	da03      	bge.n	800cf64 <_dtoa_r+0x46c>
 800cf5c:	9b07      	ldr	r3, [sp, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f340 8101 	ble.w	800d166 <_dtoa_r+0x66e>
 800cf64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf68:	4656      	mov	r6, sl
 800cf6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf6e:	4620      	mov	r0, r4
 800cf70:	4629      	mov	r1, r5
 800cf72:	f7f3 fc8b 	bl	800088c <__aeabi_ddiv>
 800cf76:	f7f3 fe0f 	bl	8000b98 <__aeabi_d2iz>
 800cf7a:	4680      	mov	r8, r0
 800cf7c:	f7f3 faf2 	bl	8000564 <__aeabi_i2d>
 800cf80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf84:	f7f3 fb58 	bl	8000638 <__aeabi_dmul>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	4629      	mov	r1, r5
 800cf90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800cf94:	f7f3 f998 	bl	80002c8 <__aeabi_dsub>
 800cf98:	f806 4b01 	strb.w	r4, [r6], #1
 800cf9c:	9d07      	ldr	r5, [sp, #28]
 800cf9e:	eba6 040a 	sub.w	r4, r6, sl
 800cfa2:	42a5      	cmp	r5, r4
 800cfa4:	4602      	mov	r2, r0
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	f040 8117 	bne.w	800d1da <_dtoa_r+0x6e2>
 800cfac:	f7f3 f98e 	bl	80002cc <__adddf3>
 800cfb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfb4:	4604      	mov	r4, r0
 800cfb6:	460d      	mov	r5, r1
 800cfb8:	f7f3 fdce 	bl	8000b58 <__aeabi_dcmpgt>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	f040 80f9 	bne.w	800d1b4 <_dtoa_r+0x6bc>
 800cfc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	4629      	mov	r1, r5
 800cfca:	f7f3 fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 800cfce:	b118      	cbz	r0, 800cfd8 <_dtoa_r+0x4e0>
 800cfd0:	f018 0f01 	tst.w	r8, #1
 800cfd4:	f040 80ee 	bne.w	800d1b4 <_dtoa_r+0x6bc>
 800cfd8:	4649      	mov	r1, r9
 800cfda:	4658      	mov	r0, fp
 800cfdc:	f000 fbe2 	bl	800d7a4 <_Bfree>
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	7033      	strb	r3, [r6, #0]
 800cfe4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800cfe6:	3701      	adds	r7, #1
 800cfe8:	601f      	str	r7, [r3, #0]
 800cfea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f000 831d 	beq.w	800d62c <_dtoa_r+0xb34>
 800cff2:	601e      	str	r6, [r3, #0]
 800cff4:	e31a      	b.n	800d62c <_dtoa_r+0xb34>
 800cff6:	07e2      	lsls	r2, r4, #31
 800cff8:	d505      	bpl.n	800d006 <_dtoa_r+0x50e>
 800cffa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cffe:	f7f3 fb1b 	bl	8000638 <__aeabi_dmul>
 800d002:	3601      	adds	r6, #1
 800d004:	2301      	movs	r3, #1
 800d006:	1064      	asrs	r4, r4, #1
 800d008:	3508      	adds	r5, #8
 800d00a:	e73f      	b.n	800ce8c <_dtoa_r+0x394>
 800d00c:	2602      	movs	r6, #2
 800d00e:	e742      	b.n	800ce96 <_dtoa_r+0x39e>
 800d010:	9c07      	ldr	r4, [sp, #28]
 800d012:	9704      	str	r7, [sp, #16]
 800d014:	e761      	b.n	800ceda <_dtoa_r+0x3e2>
 800d016:	4b27      	ldr	r3, [pc, #156]	@ (800d0b4 <_dtoa_r+0x5bc>)
 800d018:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d01a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d01e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d022:	4454      	add	r4, sl
 800d024:	2900      	cmp	r1, #0
 800d026:	d053      	beq.n	800d0d0 <_dtoa_r+0x5d8>
 800d028:	4928      	ldr	r1, [pc, #160]	@ (800d0cc <_dtoa_r+0x5d4>)
 800d02a:	2000      	movs	r0, #0
 800d02c:	f7f3 fc2e 	bl	800088c <__aeabi_ddiv>
 800d030:	4633      	mov	r3, r6
 800d032:	462a      	mov	r2, r5
 800d034:	f7f3 f948 	bl	80002c8 <__aeabi_dsub>
 800d038:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d03c:	4656      	mov	r6, sl
 800d03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d042:	f7f3 fda9 	bl	8000b98 <__aeabi_d2iz>
 800d046:	4605      	mov	r5, r0
 800d048:	f7f3 fa8c 	bl	8000564 <__aeabi_i2d>
 800d04c:	4602      	mov	r2, r0
 800d04e:	460b      	mov	r3, r1
 800d050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d054:	f7f3 f938 	bl	80002c8 <__aeabi_dsub>
 800d058:	3530      	adds	r5, #48	@ 0x30
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d062:	f806 5b01 	strb.w	r5, [r6], #1
 800d066:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d06a:	f7f3 fd57 	bl	8000b1c <__aeabi_dcmplt>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d171      	bne.n	800d156 <_dtoa_r+0x65e>
 800d072:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d076:	4911      	ldr	r1, [pc, #68]	@ (800d0bc <_dtoa_r+0x5c4>)
 800d078:	2000      	movs	r0, #0
 800d07a:	f7f3 f925 	bl	80002c8 <__aeabi_dsub>
 800d07e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d082:	f7f3 fd4b 	bl	8000b1c <__aeabi_dcmplt>
 800d086:	2800      	cmp	r0, #0
 800d088:	f040 8095 	bne.w	800d1b6 <_dtoa_r+0x6be>
 800d08c:	42a6      	cmp	r6, r4
 800d08e:	f43f af50 	beq.w	800cf32 <_dtoa_r+0x43a>
 800d092:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d096:	4b0a      	ldr	r3, [pc, #40]	@ (800d0c0 <_dtoa_r+0x5c8>)
 800d098:	2200      	movs	r2, #0
 800d09a:	f7f3 facd 	bl	8000638 <__aeabi_dmul>
 800d09e:	4b08      	ldr	r3, [pc, #32]	@ (800d0c0 <_dtoa_r+0x5c8>)
 800d0a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0aa:	f7f3 fac5 	bl	8000638 <__aeabi_dmul>
 800d0ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0b2:	e7c4      	b.n	800d03e <_dtoa_r+0x546>
 800d0b4:	08012258 	.word	0x08012258
 800d0b8:	08012230 	.word	0x08012230
 800d0bc:	3ff00000 	.word	0x3ff00000
 800d0c0:	40240000 	.word	0x40240000
 800d0c4:	401c0000 	.word	0x401c0000
 800d0c8:	40140000 	.word	0x40140000
 800d0cc:	3fe00000 	.word	0x3fe00000
 800d0d0:	4631      	mov	r1, r6
 800d0d2:	4628      	mov	r0, r5
 800d0d4:	f7f3 fab0 	bl	8000638 <__aeabi_dmul>
 800d0d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0dc:	9415      	str	r4, [sp, #84]	@ 0x54
 800d0de:	4656      	mov	r6, sl
 800d0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0e4:	f7f3 fd58 	bl	8000b98 <__aeabi_d2iz>
 800d0e8:	4605      	mov	r5, r0
 800d0ea:	f7f3 fa3b 	bl	8000564 <__aeabi_i2d>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0f6:	f7f3 f8e7 	bl	80002c8 <__aeabi_dsub>
 800d0fa:	3530      	adds	r5, #48	@ 0x30
 800d0fc:	f806 5b01 	strb.w	r5, [r6], #1
 800d100:	4602      	mov	r2, r0
 800d102:	460b      	mov	r3, r1
 800d104:	42a6      	cmp	r6, r4
 800d106:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d10a:	f04f 0200 	mov.w	r2, #0
 800d10e:	d124      	bne.n	800d15a <_dtoa_r+0x662>
 800d110:	4bac      	ldr	r3, [pc, #688]	@ (800d3c4 <_dtoa_r+0x8cc>)
 800d112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d116:	f7f3 f8d9 	bl	80002cc <__adddf3>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d122:	f7f3 fd19 	bl	8000b58 <__aeabi_dcmpgt>
 800d126:	2800      	cmp	r0, #0
 800d128:	d145      	bne.n	800d1b6 <_dtoa_r+0x6be>
 800d12a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d12e:	49a5      	ldr	r1, [pc, #660]	@ (800d3c4 <_dtoa_r+0x8cc>)
 800d130:	2000      	movs	r0, #0
 800d132:	f7f3 f8c9 	bl	80002c8 <__aeabi_dsub>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d13e:	f7f3 fced 	bl	8000b1c <__aeabi_dcmplt>
 800d142:	2800      	cmp	r0, #0
 800d144:	f43f aef5 	beq.w	800cf32 <_dtoa_r+0x43a>
 800d148:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d14a:	1e73      	subs	r3, r6, #1
 800d14c:	9315      	str	r3, [sp, #84]	@ 0x54
 800d14e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d152:	2b30      	cmp	r3, #48	@ 0x30
 800d154:	d0f8      	beq.n	800d148 <_dtoa_r+0x650>
 800d156:	9f04      	ldr	r7, [sp, #16]
 800d158:	e73e      	b.n	800cfd8 <_dtoa_r+0x4e0>
 800d15a:	4b9b      	ldr	r3, [pc, #620]	@ (800d3c8 <_dtoa_r+0x8d0>)
 800d15c:	f7f3 fa6c 	bl	8000638 <__aeabi_dmul>
 800d160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d164:	e7bc      	b.n	800d0e0 <_dtoa_r+0x5e8>
 800d166:	d10c      	bne.n	800d182 <_dtoa_r+0x68a>
 800d168:	4b98      	ldr	r3, [pc, #608]	@ (800d3cc <_dtoa_r+0x8d4>)
 800d16a:	2200      	movs	r2, #0
 800d16c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d170:	f7f3 fa62 	bl	8000638 <__aeabi_dmul>
 800d174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d178:	f7f3 fce4 	bl	8000b44 <__aeabi_dcmpge>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	f000 8157 	beq.w	800d430 <_dtoa_r+0x938>
 800d182:	2400      	movs	r4, #0
 800d184:	4625      	mov	r5, r4
 800d186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d188:	43db      	mvns	r3, r3
 800d18a:	9304      	str	r3, [sp, #16]
 800d18c:	4656      	mov	r6, sl
 800d18e:	2700      	movs	r7, #0
 800d190:	4621      	mov	r1, r4
 800d192:	4658      	mov	r0, fp
 800d194:	f000 fb06 	bl	800d7a4 <_Bfree>
 800d198:	2d00      	cmp	r5, #0
 800d19a:	d0dc      	beq.n	800d156 <_dtoa_r+0x65e>
 800d19c:	b12f      	cbz	r7, 800d1aa <_dtoa_r+0x6b2>
 800d19e:	42af      	cmp	r7, r5
 800d1a0:	d003      	beq.n	800d1aa <_dtoa_r+0x6b2>
 800d1a2:	4639      	mov	r1, r7
 800d1a4:	4658      	mov	r0, fp
 800d1a6:	f000 fafd 	bl	800d7a4 <_Bfree>
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	4658      	mov	r0, fp
 800d1ae:	f000 faf9 	bl	800d7a4 <_Bfree>
 800d1b2:	e7d0      	b.n	800d156 <_dtoa_r+0x65e>
 800d1b4:	9704      	str	r7, [sp, #16]
 800d1b6:	4633      	mov	r3, r6
 800d1b8:	461e      	mov	r6, r3
 800d1ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1be:	2a39      	cmp	r2, #57	@ 0x39
 800d1c0:	d107      	bne.n	800d1d2 <_dtoa_r+0x6da>
 800d1c2:	459a      	cmp	sl, r3
 800d1c4:	d1f8      	bne.n	800d1b8 <_dtoa_r+0x6c0>
 800d1c6:	9a04      	ldr	r2, [sp, #16]
 800d1c8:	3201      	adds	r2, #1
 800d1ca:	9204      	str	r2, [sp, #16]
 800d1cc:	2230      	movs	r2, #48	@ 0x30
 800d1ce:	f88a 2000 	strb.w	r2, [sl]
 800d1d2:	781a      	ldrb	r2, [r3, #0]
 800d1d4:	3201      	adds	r2, #1
 800d1d6:	701a      	strb	r2, [r3, #0]
 800d1d8:	e7bd      	b.n	800d156 <_dtoa_r+0x65e>
 800d1da:	4b7b      	ldr	r3, [pc, #492]	@ (800d3c8 <_dtoa_r+0x8d0>)
 800d1dc:	2200      	movs	r2, #0
 800d1de:	f7f3 fa2b 	bl	8000638 <__aeabi_dmul>
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	460d      	mov	r5, r1
 800d1ea:	f7f3 fc8d 	bl	8000b08 <__aeabi_dcmpeq>
 800d1ee:	2800      	cmp	r0, #0
 800d1f0:	f43f aebb 	beq.w	800cf6a <_dtoa_r+0x472>
 800d1f4:	e6f0      	b.n	800cfd8 <_dtoa_r+0x4e0>
 800d1f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d1f8:	2a00      	cmp	r2, #0
 800d1fa:	f000 80db 	beq.w	800d3b4 <_dtoa_r+0x8bc>
 800d1fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d200:	2a01      	cmp	r2, #1
 800d202:	f300 80bf 	bgt.w	800d384 <_dtoa_r+0x88c>
 800d206:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d208:	2a00      	cmp	r2, #0
 800d20a:	f000 80b7 	beq.w	800d37c <_dtoa_r+0x884>
 800d20e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d212:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d214:	4646      	mov	r6, r8
 800d216:	9a08      	ldr	r2, [sp, #32]
 800d218:	2101      	movs	r1, #1
 800d21a:	441a      	add	r2, r3
 800d21c:	4658      	mov	r0, fp
 800d21e:	4498      	add	r8, r3
 800d220:	9208      	str	r2, [sp, #32]
 800d222:	f000 fbbd 	bl	800d9a0 <__i2b>
 800d226:	4605      	mov	r5, r0
 800d228:	b15e      	cbz	r6, 800d242 <_dtoa_r+0x74a>
 800d22a:	9b08      	ldr	r3, [sp, #32]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	dd08      	ble.n	800d242 <_dtoa_r+0x74a>
 800d230:	42b3      	cmp	r3, r6
 800d232:	9a08      	ldr	r2, [sp, #32]
 800d234:	bfa8      	it	ge
 800d236:	4633      	movge	r3, r6
 800d238:	eba8 0803 	sub.w	r8, r8, r3
 800d23c:	1af6      	subs	r6, r6, r3
 800d23e:	1ad3      	subs	r3, r2, r3
 800d240:	9308      	str	r3, [sp, #32]
 800d242:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d244:	b1f3      	cbz	r3, 800d284 <_dtoa_r+0x78c>
 800d246:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 80b7 	beq.w	800d3bc <_dtoa_r+0x8c4>
 800d24e:	b18c      	cbz	r4, 800d274 <_dtoa_r+0x77c>
 800d250:	4629      	mov	r1, r5
 800d252:	4622      	mov	r2, r4
 800d254:	4658      	mov	r0, fp
 800d256:	f000 fc63 	bl	800db20 <__pow5mult>
 800d25a:	464a      	mov	r2, r9
 800d25c:	4601      	mov	r1, r0
 800d25e:	4605      	mov	r5, r0
 800d260:	4658      	mov	r0, fp
 800d262:	f000 fbb3 	bl	800d9cc <__multiply>
 800d266:	4649      	mov	r1, r9
 800d268:	9004      	str	r0, [sp, #16]
 800d26a:	4658      	mov	r0, fp
 800d26c:	f000 fa9a 	bl	800d7a4 <_Bfree>
 800d270:	9b04      	ldr	r3, [sp, #16]
 800d272:	4699      	mov	r9, r3
 800d274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d276:	1b1a      	subs	r2, r3, r4
 800d278:	d004      	beq.n	800d284 <_dtoa_r+0x78c>
 800d27a:	4649      	mov	r1, r9
 800d27c:	4658      	mov	r0, fp
 800d27e:	f000 fc4f 	bl	800db20 <__pow5mult>
 800d282:	4681      	mov	r9, r0
 800d284:	2101      	movs	r1, #1
 800d286:	4658      	mov	r0, fp
 800d288:	f000 fb8a 	bl	800d9a0 <__i2b>
 800d28c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d28e:	4604      	mov	r4, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 81cf 	beq.w	800d634 <_dtoa_r+0xb3c>
 800d296:	461a      	mov	r2, r3
 800d298:	4601      	mov	r1, r0
 800d29a:	4658      	mov	r0, fp
 800d29c:	f000 fc40 	bl	800db20 <__pow5mult>
 800d2a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	f300 8095 	bgt.w	800d3d4 <_dtoa_r+0x8dc>
 800d2aa:	9b02      	ldr	r3, [sp, #8]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f040 8087 	bne.w	800d3c0 <_dtoa_r+0x8c8>
 800d2b2:	9b03      	ldr	r3, [sp, #12]
 800d2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f040 8089 	bne.w	800d3d0 <_dtoa_r+0x8d8>
 800d2be:	9b03      	ldr	r3, [sp, #12]
 800d2c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2c4:	0d1b      	lsrs	r3, r3, #20
 800d2c6:	051b      	lsls	r3, r3, #20
 800d2c8:	b12b      	cbz	r3, 800d2d6 <_dtoa_r+0x7de>
 800d2ca:	9b08      	ldr	r3, [sp, #32]
 800d2cc:	3301      	adds	r3, #1
 800d2ce:	9308      	str	r3, [sp, #32]
 800d2d0:	f108 0801 	add.w	r8, r8, #1
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d2d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 81b0 	beq.w	800d640 <_dtoa_r+0xb48>
 800d2e0:	6923      	ldr	r3, [r4, #16]
 800d2e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d2e6:	6918      	ldr	r0, [r3, #16]
 800d2e8:	f000 fb0e 	bl	800d908 <__hi0bits>
 800d2ec:	f1c0 0020 	rsb	r0, r0, #32
 800d2f0:	9b08      	ldr	r3, [sp, #32]
 800d2f2:	4418      	add	r0, r3
 800d2f4:	f010 001f 	ands.w	r0, r0, #31
 800d2f8:	d077      	beq.n	800d3ea <_dtoa_r+0x8f2>
 800d2fa:	f1c0 0320 	rsb	r3, r0, #32
 800d2fe:	2b04      	cmp	r3, #4
 800d300:	dd6b      	ble.n	800d3da <_dtoa_r+0x8e2>
 800d302:	9b08      	ldr	r3, [sp, #32]
 800d304:	f1c0 001c 	rsb	r0, r0, #28
 800d308:	4403      	add	r3, r0
 800d30a:	4480      	add	r8, r0
 800d30c:	4406      	add	r6, r0
 800d30e:	9308      	str	r3, [sp, #32]
 800d310:	f1b8 0f00 	cmp.w	r8, #0
 800d314:	dd05      	ble.n	800d322 <_dtoa_r+0x82a>
 800d316:	4649      	mov	r1, r9
 800d318:	4642      	mov	r2, r8
 800d31a:	4658      	mov	r0, fp
 800d31c:	f000 fc5a 	bl	800dbd4 <__lshift>
 800d320:	4681      	mov	r9, r0
 800d322:	9b08      	ldr	r3, [sp, #32]
 800d324:	2b00      	cmp	r3, #0
 800d326:	dd05      	ble.n	800d334 <_dtoa_r+0x83c>
 800d328:	4621      	mov	r1, r4
 800d32a:	461a      	mov	r2, r3
 800d32c:	4658      	mov	r0, fp
 800d32e:	f000 fc51 	bl	800dbd4 <__lshift>
 800d332:	4604      	mov	r4, r0
 800d334:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d336:	2b00      	cmp	r3, #0
 800d338:	d059      	beq.n	800d3ee <_dtoa_r+0x8f6>
 800d33a:	4621      	mov	r1, r4
 800d33c:	4648      	mov	r0, r9
 800d33e:	f000 fcb5 	bl	800dcac <__mcmp>
 800d342:	2800      	cmp	r0, #0
 800d344:	da53      	bge.n	800d3ee <_dtoa_r+0x8f6>
 800d346:	1e7b      	subs	r3, r7, #1
 800d348:	9304      	str	r3, [sp, #16]
 800d34a:	4649      	mov	r1, r9
 800d34c:	2300      	movs	r3, #0
 800d34e:	220a      	movs	r2, #10
 800d350:	4658      	mov	r0, fp
 800d352:	f000 fa49 	bl	800d7e8 <__multadd>
 800d356:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d358:	4681      	mov	r9, r0
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f000 8172 	beq.w	800d644 <_dtoa_r+0xb4c>
 800d360:	2300      	movs	r3, #0
 800d362:	4629      	mov	r1, r5
 800d364:	220a      	movs	r2, #10
 800d366:	4658      	mov	r0, fp
 800d368:	f000 fa3e 	bl	800d7e8 <__multadd>
 800d36c:	9b00      	ldr	r3, [sp, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	4605      	mov	r5, r0
 800d372:	dc67      	bgt.n	800d444 <_dtoa_r+0x94c>
 800d374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d376:	2b02      	cmp	r3, #2
 800d378:	dc41      	bgt.n	800d3fe <_dtoa_r+0x906>
 800d37a:	e063      	b.n	800d444 <_dtoa_r+0x94c>
 800d37c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d37e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d382:	e746      	b.n	800d212 <_dtoa_r+0x71a>
 800d384:	9b07      	ldr	r3, [sp, #28]
 800d386:	1e5c      	subs	r4, r3, #1
 800d388:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d38a:	42a3      	cmp	r3, r4
 800d38c:	bfbf      	itttt	lt
 800d38e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d390:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d392:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d394:	1ae3      	sublt	r3, r4, r3
 800d396:	bfb4      	ite	lt
 800d398:	18d2      	addlt	r2, r2, r3
 800d39a:	1b1c      	subge	r4, r3, r4
 800d39c:	9b07      	ldr	r3, [sp, #28]
 800d39e:	bfbc      	itt	lt
 800d3a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d3a2:	2400      	movlt	r4, #0
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	bfb5      	itete	lt
 800d3a8:	eba8 0603 	sublt.w	r6, r8, r3
 800d3ac:	9b07      	ldrge	r3, [sp, #28]
 800d3ae:	2300      	movlt	r3, #0
 800d3b0:	4646      	movge	r6, r8
 800d3b2:	e730      	b.n	800d216 <_dtoa_r+0x71e>
 800d3b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d3b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d3b8:	4646      	mov	r6, r8
 800d3ba:	e735      	b.n	800d228 <_dtoa_r+0x730>
 800d3bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3be:	e75c      	b.n	800d27a <_dtoa_r+0x782>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	e788      	b.n	800d2d6 <_dtoa_r+0x7de>
 800d3c4:	3fe00000 	.word	0x3fe00000
 800d3c8:	40240000 	.word	0x40240000
 800d3cc:	40140000 	.word	0x40140000
 800d3d0:	9b02      	ldr	r3, [sp, #8]
 800d3d2:	e780      	b.n	800d2d6 <_dtoa_r+0x7de>
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3d8:	e782      	b.n	800d2e0 <_dtoa_r+0x7e8>
 800d3da:	d099      	beq.n	800d310 <_dtoa_r+0x818>
 800d3dc:	9a08      	ldr	r2, [sp, #32]
 800d3de:	331c      	adds	r3, #28
 800d3e0:	441a      	add	r2, r3
 800d3e2:	4498      	add	r8, r3
 800d3e4:	441e      	add	r6, r3
 800d3e6:	9208      	str	r2, [sp, #32]
 800d3e8:	e792      	b.n	800d310 <_dtoa_r+0x818>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	e7f6      	b.n	800d3dc <_dtoa_r+0x8e4>
 800d3ee:	9b07      	ldr	r3, [sp, #28]
 800d3f0:	9704      	str	r7, [sp, #16]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	dc20      	bgt.n	800d438 <_dtoa_r+0x940>
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3fa:	2b02      	cmp	r3, #2
 800d3fc:	dd1e      	ble.n	800d43c <_dtoa_r+0x944>
 800d3fe:	9b00      	ldr	r3, [sp, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	f47f aec0 	bne.w	800d186 <_dtoa_r+0x68e>
 800d406:	4621      	mov	r1, r4
 800d408:	2205      	movs	r2, #5
 800d40a:	4658      	mov	r0, fp
 800d40c:	f000 f9ec 	bl	800d7e8 <__multadd>
 800d410:	4601      	mov	r1, r0
 800d412:	4604      	mov	r4, r0
 800d414:	4648      	mov	r0, r9
 800d416:	f000 fc49 	bl	800dcac <__mcmp>
 800d41a:	2800      	cmp	r0, #0
 800d41c:	f77f aeb3 	ble.w	800d186 <_dtoa_r+0x68e>
 800d420:	4656      	mov	r6, sl
 800d422:	2331      	movs	r3, #49	@ 0x31
 800d424:	f806 3b01 	strb.w	r3, [r6], #1
 800d428:	9b04      	ldr	r3, [sp, #16]
 800d42a:	3301      	adds	r3, #1
 800d42c:	9304      	str	r3, [sp, #16]
 800d42e:	e6ae      	b.n	800d18e <_dtoa_r+0x696>
 800d430:	9c07      	ldr	r4, [sp, #28]
 800d432:	9704      	str	r7, [sp, #16]
 800d434:	4625      	mov	r5, r4
 800d436:	e7f3      	b.n	800d420 <_dtoa_r+0x928>
 800d438:	9b07      	ldr	r3, [sp, #28]
 800d43a:	9300      	str	r3, [sp, #0]
 800d43c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d43e:	2b00      	cmp	r3, #0
 800d440:	f000 8104 	beq.w	800d64c <_dtoa_r+0xb54>
 800d444:	2e00      	cmp	r6, #0
 800d446:	dd05      	ble.n	800d454 <_dtoa_r+0x95c>
 800d448:	4629      	mov	r1, r5
 800d44a:	4632      	mov	r2, r6
 800d44c:	4658      	mov	r0, fp
 800d44e:	f000 fbc1 	bl	800dbd4 <__lshift>
 800d452:	4605      	mov	r5, r0
 800d454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d456:	2b00      	cmp	r3, #0
 800d458:	d05a      	beq.n	800d510 <_dtoa_r+0xa18>
 800d45a:	6869      	ldr	r1, [r5, #4]
 800d45c:	4658      	mov	r0, fp
 800d45e:	f000 f961 	bl	800d724 <_Balloc>
 800d462:	4606      	mov	r6, r0
 800d464:	b928      	cbnz	r0, 800d472 <_dtoa_r+0x97a>
 800d466:	4b84      	ldr	r3, [pc, #528]	@ (800d678 <_dtoa_r+0xb80>)
 800d468:	4602      	mov	r2, r0
 800d46a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d46e:	f7ff bb5a 	b.w	800cb26 <_dtoa_r+0x2e>
 800d472:	692a      	ldr	r2, [r5, #16]
 800d474:	3202      	adds	r2, #2
 800d476:	0092      	lsls	r2, r2, #2
 800d478:	f105 010c 	add.w	r1, r5, #12
 800d47c:	300c      	adds	r0, #12
 800d47e:	f7ff fa9e 	bl	800c9be <memcpy>
 800d482:	2201      	movs	r2, #1
 800d484:	4631      	mov	r1, r6
 800d486:	4658      	mov	r0, fp
 800d488:	f000 fba4 	bl	800dbd4 <__lshift>
 800d48c:	f10a 0301 	add.w	r3, sl, #1
 800d490:	9307      	str	r3, [sp, #28]
 800d492:	9b00      	ldr	r3, [sp, #0]
 800d494:	4453      	add	r3, sl
 800d496:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d498:	9b02      	ldr	r3, [sp, #8]
 800d49a:	f003 0301 	and.w	r3, r3, #1
 800d49e:	462f      	mov	r7, r5
 800d4a0:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4a2:	4605      	mov	r5, r0
 800d4a4:	9b07      	ldr	r3, [sp, #28]
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	4648      	mov	r0, r9
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	f7ff fa9b 	bl	800c9e8 <quorem>
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	9002      	str	r0, [sp, #8]
 800d4b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4ba:	4648      	mov	r0, r9
 800d4bc:	f000 fbf6 	bl	800dcac <__mcmp>
 800d4c0:	462a      	mov	r2, r5
 800d4c2:	9008      	str	r0, [sp, #32]
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	4658      	mov	r0, fp
 800d4c8:	f000 fc0c 	bl	800dce4 <__mdiff>
 800d4cc:	68c2      	ldr	r2, [r0, #12]
 800d4ce:	4606      	mov	r6, r0
 800d4d0:	bb02      	cbnz	r2, 800d514 <_dtoa_r+0xa1c>
 800d4d2:	4601      	mov	r1, r0
 800d4d4:	4648      	mov	r0, r9
 800d4d6:	f000 fbe9 	bl	800dcac <__mcmp>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	4631      	mov	r1, r6
 800d4de:	4658      	mov	r0, fp
 800d4e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4e2:	f000 f95f 	bl	800d7a4 <_Bfree>
 800d4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4ea:	9e07      	ldr	r6, [sp, #28]
 800d4ec:	ea43 0102 	orr.w	r1, r3, r2
 800d4f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4f2:	4319      	orrs	r1, r3
 800d4f4:	d110      	bne.n	800d518 <_dtoa_r+0xa20>
 800d4f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d4fa:	d029      	beq.n	800d550 <_dtoa_r+0xa58>
 800d4fc:	9b08      	ldr	r3, [sp, #32]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	dd02      	ble.n	800d508 <_dtoa_r+0xa10>
 800d502:	9b02      	ldr	r3, [sp, #8]
 800d504:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d508:	9b00      	ldr	r3, [sp, #0]
 800d50a:	f883 8000 	strb.w	r8, [r3]
 800d50e:	e63f      	b.n	800d190 <_dtoa_r+0x698>
 800d510:	4628      	mov	r0, r5
 800d512:	e7bb      	b.n	800d48c <_dtoa_r+0x994>
 800d514:	2201      	movs	r2, #1
 800d516:	e7e1      	b.n	800d4dc <_dtoa_r+0x9e4>
 800d518:	9b08      	ldr	r3, [sp, #32]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	db04      	blt.n	800d528 <_dtoa_r+0xa30>
 800d51e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d520:	430b      	orrs	r3, r1
 800d522:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d524:	430b      	orrs	r3, r1
 800d526:	d120      	bne.n	800d56a <_dtoa_r+0xa72>
 800d528:	2a00      	cmp	r2, #0
 800d52a:	dded      	ble.n	800d508 <_dtoa_r+0xa10>
 800d52c:	4649      	mov	r1, r9
 800d52e:	2201      	movs	r2, #1
 800d530:	4658      	mov	r0, fp
 800d532:	f000 fb4f 	bl	800dbd4 <__lshift>
 800d536:	4621      	mov	r1, r4
 800d538:	4681      	mov	r9, r0
 800d53a:	f000 fbb7 	bl	800dcac <__mcmp>
 800d53e:	2800      	cmp	r0, #0
 800d540:	dc03      	bgt.n	800d54a <_dtoa_r+0xa52>
 800d542:	d1e1      	bne.n	800d508 <_dtoa_r+0xa10>
 800d544:	f018 0f01 	tst.w	r8, #1
 800d548:	d0de      	beq.n	800d508 <_dtoa_r+0xa10>
 800d54a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d54e:	d1d8      	bne.n	800d502 <_dtoa_r+0xa0a>
 800d550:	9a00      	ldr	r2, [sp, #0]
 800d552:	2339      	movs	r3, #57	@ 0x39
 800d554:	7013      	strb	r3, [r2, #0]
 800d556:	4633      	mov	r3, r6
 800d558:	461e      	mov	r6, r3
 800d55a:	3b01      	subs	r3, #1
 800d55c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d560:	2a39      	cmp	r2, #57	@ 0x39
 800d562:	d052      	beq.n	800d60a <_dtoa_r+0xb12>
 800d564:	3201      	adds	r2, #1
 800d566:	701a      	strb	r2, [r3, #0]
 800d568:	e612      	b.n	800d190 <_dtoa_r+0x698>
 800d56a:	2a00      	cmp	r2, #0
 800d56c:	dd07      	ble.n	800d57e <_dtoa_r+0xa86>
 800d56e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d572:	d0ed      	beq.n	800d550 <_dtoa_r+0xa58>
 800d574:	9a00      	ldr	r2, [sp, #0]
 800d576:	f108 0301 	add.w	r3, r8, #1
 800d57a:	7013      	strb	r3, [r2, #0]
 800d57c:	e608      	b.n	800d190 <_dtoa_r+0x698>
 800d57e:	9b07      	ldr	r3, [sp, #28]
 800d580:	9a07      	ldr	r2, [sp, #28]
 800d582:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d586:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d588:	4293      	cmp	r3, r2
 800d58a:	d028      	beq.n	800d5de <_dtoa_r+0xae6>
 800d58c:	4649      	mov	r1, r9
 800d58e:	2300      	movs	r3, #0
 800d590:	220a      	movs	r2, #10
 800d592:	4658      	mov	r0, fp
 800d594:	f000 f928 	bl	800d7e8 <__multadd>
 800d598:	42af      	cmp	r7, r5
 800d59a:	4681      	mov	r9, r0
 800d59c:	f04f 0300 	mov.w	r3, #0
 800d5a0:	f04f 020a 	mov.w	r2, #10
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	4658      	mov	r0, fp
 800d5a8:	d107      	bne.n	800d5ba <_dtoa_r+0xac2>
 800d5aa:	f000 f91d 	bl	800d7e8 <__multadd>
 800d5ae:	4607      	mov	r7, r0
 800d5b0:	4605      	mov	r5, r0
 800d5b2:	9b07      	ldr	r3, [sp, #28]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	9307      	str	r3, [sp, #28]
 800d5b8:	e774      	b.n	800d4a4 <_dtoa_r+0x9ac>
 800d5ba:	f000 f915 	bl	800d7e8 <__multadd>
 800d5be:	4629      	mov	r1, r5
 800d5c0:	4607      	mov	r7, r0
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	220a      	movs	r2, #10
 800d5c6:	4658      	mov	r0, fp
 800d5c8:	f000 f90e 	bl	800d7e8 <__multadd>
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	e7f0      	b.n	800d5b2 <_dtoa_r+0xaba>
 800d5d0:	9b00      	ldr	r3, [sp, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	bfcc      	ite	gt
 800d5d6:	461e      	movgt	r6, r3
 800d5d8:	2601      	movle	r6, #1
 800d5da:	4456      	add	r6, sl
 800d5dc:	2700      	movs	r7, #0
 800d5de:	4649      	mov	r1, r9
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	4658      	mov	r0, fp
 800d5e4:	f000 faf6 	bl	800dbd4 <__lshift>
 800d5e8:	4621      	mov	r1, r4
 800d5ea:	4681      	mov	r9, r0
 800d5ec:	f000 fb5e 	bl	800dcac <__mcmp>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	dcb0      	bgt.n	800d556 <_dtoa_r+0xa5e>
 800d5f4:	d102      	bne.n	800d5fc <_dtoa_r+0xb04>
 800d5f6:	f018 0f01 	tst.w	r8, #1
 800d5fa:	d1ac      	bne.n	800d556 <_dtoa_r+0xa5e>
 800d5fc:	4633      	mov	r3, r6
 800d5fe:	461e      	mov	r6, r3
 800d600:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d604:	2a30      	cmp	r2, #48	@ 0x30
 800d606:	d0fa      	beq.n	800d5fe <_dtoa_r+0xb06>
 800d608:	e5c2      	b.n	800d190 <_dtoa_r+0x698>
 800d60a:	459a      	cmp	sl, r3
 800d60c:	d1a4      	bne.n	800d558 <_dtoa_r+0xa60>
 800d60e:	9b04      	ldr	r3, [sp, #16]
 800d610:	3301      	adds	r3, #1
 800d612:	9304      	str	r3, [sp, #16]
 800d614:	2331      	movs	r3, #49	@ 0x31
 800d616:	f88a 3000 	strb.w	r3, [sl]
 800d61a:	e5b9      	b.n	800d190 <_dtoa_r+0x698>
 800d61c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d61e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d67c <_dtoa_r+0xb84>
 800d622:	b11b      	cbz	r3, 800d62c <_dtoa_r+0xb34>
 800d624:	f10a 0308 	add.w	r3, sl, #8
 800d628:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d62a:	6013      	str	r3, [r2, #0]
 800d62c:	4650      	mov	r0, sl
 800d62e:	b019      	add	sp, #100	@ 0x64
 800d630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d636:	2b01      	cmp	r3, #1
 800d638:	f77f ae37 	ble.w	800d2aa <_dtoa_r+0x7b2>
 800d63c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d640:	2001      	movs	r0, #1
 800d642:	e655      	b.n	800d2f0 <_dtoa_r+0x7f8>
 800d644:	9b00      	ldr	r3, [sp, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	f77f aed6 	ble.w	800d3f8 <_dtoa_r+0x900>
 800d64c:	4656      	mov	r6, sl
 800d64e:	4621      	mov	r1, r4
 800d650:	4648      	mov	r0, r9
 800d652:	f7ff f9c9 	bl	800c9e8 <quorem>
 800d656:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d65a:	f806 8b01 	strb.w	r8, [r6], #1
 800d65e:	9b00      	ldr	r3, [sp, #0]
 800d660:	eba6 020a 	sub.w	r2, r6, sl
 800d664:	4293      	cmp	r3, r2
 800d666:	ddb3      	ble.n	800d5d0 <_dtoa_r+0xad8>
 800d668:	4649      	mov	r1, r9
 800d66a:	2300      	movs	r3, #0
 800d66c:	220a      	movs	r2, #10
 800d66e:	4658      	mov	r0, fp
 800d670:	f000 f8ba 	bl	800d7e8 <__multadd>
 800d674:	4681      	mov	r9, r0
 800d676:	e7ea      	b.n	800d64e <_dtoa_r+0xb56>
 800d678:	080121b7 	.word	0x080121b7
 800d67c:	0801213b 	.word	0x0801213b

0800d680 <_free_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	4605      	mov	r5, r0
 800d684:	2900      	cmp	r1, #0
 800d686:	d041      	beq.n	800d70c <_free_r+0x8c>
 800d688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d68c:	1f0c      	subs	r4, r1, #4
 800d68e:	2b00      	cmp	r3, #0
 800d690:	bfb8      	it	lt
 800d692:	18e4      	addlt	r4, r4, r3
 800d694:	f7fe f914 	bl	800b8c0 <__malloc_lock>
 800d698:	4a1d      	ldr	r2, [pc, #116]	@ (800d710 <_free_r+0x90>)
 800d69a:	6813      	ldr	r3, [r2, #0]
 800d69c:	b933      	cbnz	r3, 800d6ac <_free_r+0x2c>
 800d69e:	6063      	str	r3, [r4, #4]
 800d6a0:	6014      	str	r4, [r2, #0]
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6a8:	f7fe b910 	b.w	800b8cc <__malloc_unlock>
 800d6ac:	42a3      	cmp	r3, r4
 800d6ae:	d908      	bls.n	800d6c2 <_free_r+0x42>
 800d6b0:	6820      	ldr	r0, [r4, #0]
 800d6b2:	1821      	adds	r1, r4, r0
 800d6b4:	428b      	cmp	r3, r1
 800d6b6:	bf01      	itttt	eq
 800d6b8:	6819      	ldreq	r1, [r3, #0]
 800d6ba:	685b      	ldreq	r3, [r3, #4]
 800d6bc:	1809      	addeq	r1, r1, r0
 800d6be:	6021      	streq	r1, [r4, #0]
 800d6c0:	e7ed      	b.n	800d69e <_free_r+0x1e>
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	b10b      	cbz	r3, 800d6cc <_free_r+0x4c>
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	d9fa      	bls.n	800d6c2 <_free_r+0x42>
 800d6cc:	6811      	ldr	r1, [r2, #0]
 800d6ce:	1850      	adds	r0, r2, r1
 800d6d0:	42a0      	cmp	r0, r4
 800d6d2:	d10b      	bne.n	800d6ec <_free_r+0x6c>
 800d6d4:	6820      	ldr	r0, [r4, #0]
 800d6d6:	4401      	add	r1, r0
 800d6d8:	1850      	adds	r0, r2, r1
 800d6da:	4283      	cmp	r3, r0
 800d6dc:	6011      	str	r1, [r2, #0]
 800d6de:	d1e0      	bne.n	800d6a2 <_free_r+0x22>
 800d6e0:	6818      	ldr	r0, [r3, #0]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	6053      	str	r3, [r2, #4]
 800d6e6:	4408      	add	r0, r1
 800d6e8:	6010      	str	r0, [r2, #0]
 800d6ea:	e7da      	b.n	800d6a2 <_free_r+0x22>
 800d6ec:	d902      	bls.n	800d6f4 <_free_r+0x74>
 800d6ee:	230c      	movs	r3, #12
 800d6f0:	602b      	str	r3, [r5, #0]
 800d6f2:	e7d6      	b.n	800d6a2 <_free_r+0x22>
 800d6f4:	6820      	ldr	r0, [r4, #0]
 800d6f6:	1821      	adds	r1, r4, r0
 800d6f8:	428b      	cmp	r3, r1
 800d6fa:	bf04      	itt	eq
 800d6fc:	6819      	ldreq	r1, [r3, #0]
 800d6fe:	685b      	ldreq	r3, [r3, #4]
 800d700:	6063      	str	r3, [r4, #4]
 800d702:	bf04      	itt	eq
 800d704:	1809      	addeq	r1, r1, r0
 800d706:	6021      	streq	r1, [r4, #0]
 800d708:	6054      	str	r4, [r2, #4]
 800d70a:	e7ca      	b.n	800d6a2 <_free_r+0x22>
 800d70c:	bd38      	pop	{r3, r4, r5, pc}
 800d70e:	bf00      	nop
 800d710:	20001698 	.word	0x20001698

0800d714 <malloc>:
 800d714:	4b02      	ldr	r3, [pc, #8]	@ (800d720 <malloc+0xc>)
 800d716:	4601      	mov	r1, r0
 800d718:	6818      	ldr	r0, [r3, #0]
 800d71a:	f7fe b851 	b.w	800b7c0 <_malloc_r>
 800d71e:	bf00      	nop
 800d720:	20000044 	.word	0x20000044

0800d724 <_Balloc>:
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	69c6      	ldr	r6, [r0, #28]
 800d728:	4604      	mov	r4, r0
 800d72a:	460d      	mov	r5, r1
 800d72c:	b976      	cbnz	r6, 800d74c <_Balloc+0x28>
 800d72e:	2010      	movs	r0, #16
 800d730:	f7ff fff0 	bl	800d714 <malloc>
 800d734:	4602      	mov	r2, r0
 800d736:	61e0      	str	r0, [r4, #28]
 800d738:	b920      	cbnz	r0, 800d744 <_Balloc+0x20>
 800d73a:	4b18      	ldr	r3, [pc, #96]	@ (800d79c <_Balloc+0x78>)
 800d73c:	4818      	ldr	r0, [pc, #96]	@ (800d7a0 <_Balloc+0x7c>)
 800d73e:	216b      	movs	r1, #107	@ 0x6b
 800d740:	f002 f8ee 	bl	800f920 <__assert_func>
 800d744:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d748:	6006      	str	r6, [r0, #0]
 800d74a:	60c6      	str	r6, [r0, #12]
 800d74c:	69e6      	ldr	r6, [r4, #28]
 800d74e:	68f3      	ldr	r3, [r6, #12]
 800d750:	b183      	cbz	r3, 800d774 <_Balloc+0x50>
 800d752:	69e3      	ldr	r3, [r4, #28]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d75a:	b9b8      	cbnz	r0, 800d78c <_Balloc+0x68>
 800d75c:	2101      	movs	r1, #1
 800d75e:	fa01 f605 	lsl.w	r6, r1, r5
 800d762:	1d72      	adds	r2, r6, #5
 800d764:	0092      	lsls	r2, r2, #2
 800d766:	4620      	mov	r0, r4
 800d768:	f7fd fff4 	bl	800b754 <_calloc_r>
 800d76c:	b160      	cbz	r0, 800d788 <_Balloc+0x64>
 800d76e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d772:	e00e      	b.n	800d792 <_Balloc+0x6e>
 800d774:	2221      	movs	r2, #33	@ 0x21
 800d776:	2104      	movs	r1, #4
 800d778:	4620      	mov	r0, r4
 800d77a:	f7fd ffeb 	bl	800b754 <_calloc_r>
 800d77e:	69e3      	ldr	r3, [r4, #28]
 800d780:	60f0      	str	r0, [r6, #12]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d1e4      	bne.n	800d752 <_Balloc+0x2e>
 800d788:	2000      	movs	r0, #0
 800d78a:	bd70      	pop	{r4, r5, r6, pc}
 800d78c:	6802      	ldr	r2, [r0, #0]
 800d78e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d792:	2300      	movs	r3, #0
 800d794:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d798:	e7f7      	b.n	800d78a <_Balloc+0x66>
 800d79a:	bf00      	nop
 800d79c:	08012148 	.word	0x08012148
 800d7a0:	080121c8 	.word	0x080121c8

0800d7a4 <_Bfree>:
 800d7a4:	b570      	push	{r4, r5, r6, lr}
 800d7a6:	69c6      	ldr	r6, [r0, #28]
 800d7a8:	4605      	mov	r5, r0
 800d7aa:	460c      	mov	r4, r1
 800d7ac:	b976      	cbnz	r6, 800d7cc <_Bfree+0x28>
 800d7ae:	2010      	movs	r0, #16
 800d7b0:	f7ff ffb0 	bl	800d714 <malloc>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	61e8      	str	r0, [r5, #28]
 800d7b8:	b920      	cbnz	r0, 800d7c4 <_Bfree+0x20>
 800d7ba:	4b09      	ldr	r3, [pc, #36]	@ (800d7e0 <_Bfree+0x3c>)
 800d7bc:	4809      	ldr	r0, [pc, #36]	@ (800d7e4 <_Bfree+0x40>)
 800d7be:	218f      	movs	r1, #143	@ 0x8f
 800d7c0:	f002 f8ae 	bl	800f920 <__assert_func>
 800d7c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7c8:	6006      	str	r6, [r0, #0]
 800d7ca:	60c6      	str	r6, [r0, #12]
 800d7cc:	b13c      	cbz	r4, 800d7de <_Bfree+0x3a>
 800d7ce:	69eb      	ldr	r3, [r5, #28]
 800d7d0:	6862      	ldr	r2, [r4, #4]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7d8:	6021      	str	r1, [r4, #0]
 800d7da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7de:	bd70      	pop	{r4, r5, r6, pc}
 800d7e0:	08012148 	.word	0x08012148
 800d7e4:	080121c8 	.word	0x080121c8

0800d7e8 <__multadd>:
 800d7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ec:	690d      	ldr	r5, [r1, #16]
 800d7ee:	4607      	mov	r7, r0
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	461e      	mov	r6, r3
 800d7f4:	f101 0c14 	add.w	ip, r1, #20
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	f8dc 3000 	ldr.w	r3, [ip]
 800d7fe:	b299      	uxth	r1, r3
 800d800:	fb02 6101 	mla	r1, r2, r1, r6
 800d804:	0c1e      	lsrs	r6, r3, #16
 800d806:	0c0b      	lsrs	r3, r1, #16
 800d808:	fb02 3306 	mla	r3, r2, r6, r3
 800d80c:	b289      	uxth	r1, r1
 800d80e:	3001      	adds	r0, #1
 800d810:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d814:	4285      	cmp	r5, r0
 800d816:	f84c 1b04 	str.w	r1, [ip], #4
 800d81a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d81e:	dcec      	bgt.n	800d7fa <__multadd+0x12>
 800d820:	b30e      	cbz	r6, 800d866 <__multadd+0x7e>
 800d822:	68a3      	ldr	r3, [r4, #8]
 800d824:	42ab      	cmp	r3, r5
 800d826:	dc19      	bgt.n	800d85c <__multadd+0x74>
 800d828:	6861      	ldr	r1, [r4, #4]
 800d82a:	4638      	mov	r0, r7
 800d82c:	3101      	adds	r1, #1
 800d82e:	f7ff ff79 	bl	800d724 <_Balloc>
 800d832:	4680      	mov	r8, r0
 800d834:	b928      	cbnz	r0, 800d842 <__multadd+0x5a>
 800d836:	4602      	mov	r2, r0
 800d838:	4b0c      	ldr	r3, [pc, #48]	@ (800d86c <__multadd+0x84>)
 800d83a:	480d      	ldr	r0, [pc, #52]	@ (800d870 <__multadd+0x88>)
 800d83c:	21ba      	movs	r1, #186	@ 0xba
 800d83e:	f002 f86f 	bl	800f920 <__assert_func>
 800d842:	6922      	ldr	r2, [r4, #16]
 800d844:	3202      	adds	r2, #2
 800d846:	f104 010c 	add.w	r1, r4, #12
 800d84a:	0092      	lsls	r2, r2, #2
 800d84c:	300c      	adds	r0, #12
 800d84e:	f7ff f8b6 	bl	800c9be <memcpy>
 800d852:	4621      	mov	r1, r4
 800d854:	4638      	mov	r0, r7
 800d856:	f7ff ffa5 	bl	800d7a4 <_Bfree>
 800d85a:	4644      	mov	r4, r8
 800d85c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d860:	3501      	adds	r5, #1
 800d862:	615e      	str	r6, [r3, #20]
 800d864:	6125      	str	r5, [r4, #16]
 800d866:	4620      	mov	r0, r4
 800d868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d86c:	080121b7 	.word	0x080121b7
 800d870:	080121c8 	.word	0x080121c8

0800d874 <__s2b>:
 800d874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d878:	460c      	mov	r4, r1
 800d87a:	4615      	mov	r5, r2
 800d87c:	461f      	mov	r7, r3
 800d87e:	2209      	movs	r2, #9
 800d880:	3308      	adds	r3, #8
 800d882:	4606      	mov	r6, r0
 800d884:	fb93 f3f2 	sdiv	r3, r3, r2
 800d888:	2100      	movs	r1, #0
 800d88a:	2201      	movs	r2, #1
 800d88c:	429a      	cmp	r2, r3
 800d88e:	db09      	blt.n	800d8a4 <__s2b+0x30>
 800d890:	4630      	mov	r0, r6
 800d892:	f7ff ff47 	bl	800d724 <_Balloc>
 800d896:	b940      	cbnz	r0, 800d8aa <__s2b+0x36>
 800d898:	4602      	mov	r2, r0
 800d89a:	4b19      	ldr	r3, [pc, #100]	@ (800d900 <__s2b+0x8c>)
 800d89c:	4819      	ldr	r0, [pc, #100]	@ (800d904 <__s2b+0x90>)
 800d89e:	21d3      	movs	r1, #211	@ 0xd3
 800d8a0:	f002 f83e 	bl	800f920 <__assert_func>
 800d8a4:	0052      	lsls	r2, r2, #1
 800d8a6:	3101      	adds	r1, #1
 800d8a8:	e7f0      	b.n	800d88c <__s2b+0x18>
 800d8aa:	9b08      	ldr	r3, [sp, #32]
 800d8ac:	6143      	str	r3, [r0, #20]
 800d8ae:	2d09      	cmp	r5, #9
 800d8b0:	f04f 0301 	mov.w	r3, #1
 800d8b4:	6103      	str	r3, [r0, #16]
 800d8b6:	dd16      	ble.n	800d8e6 <__s2b+0x72>
 800d8b8:	f104 0909 	add.w	r9, r4, #9
 800d8bc:	46c8      	mov	r8, r9
 800d8be:	442c      	add	r4, r5
 800d8c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d8c4:	4601      	mov	r1, r0
 800d8c6:	3b30      	subs	r3, #48	@ 0x30
 800d8c8:	220a      	movs	r2, #10
 800d8ca:	4630      	mov	r0, r6
 800d8cc:	f7ff ff8c 	bl	800d7e8 <__multadd>
 800d8d0:	45a0      	cmp	r8, r4
 800d8d2:	d1f5      	bne.n	800d8c0 <__s2b+0x4c>
 800d8d4:	f1a5 0408 	sub.w	r4, r5, #8
 800d8d8:	444c      	add	r4, r9
 800d8da:	1b2d      	subs	r5, r5, r4
 800d8dc:	1963      	adds	r3, r4, r5
 800d8de:	42bb      	cmp	r3, r7
 800d8e0:	db04      	blt.n	800d8ec <__s2b+0x78>
 800d8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8e6:	340a      	adds	r4, #10
 800d8e8:	2509      	movs	r5, #9
 800d8ea:	e7f6      	b.n	800d8da <__s2b+0x66>
 800d8ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d8f0:	4601      	mov	r1, r0
 800d8f2:	3b30      	subs	r3, #48	@ 0x30
 800d8f4:	220a      	movs	r2, #10
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f7ff ff76 	bl	800d7e8 <__multadd>
 800d8fc:	e7ee      	b.n	800d8dc <__s2b+0x68>
 800d8fe:	bf00      	nop
 800d900:	080121b7 	.word	0x080121b7
 800d904:	080121c8 	.word	0x080121c8

0800d908 <__hi0bits>:
 800d908:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d90c:	4603      	mov	r3, r0
 800d90e:	bf36      	itet	cc
 800d910:	0403      	lslcc	r3, r0, #16
 800d912:	2000      	movcs	r0, #0
 800d914:	2010      	movcc	r0, #16
 800d916:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d91a:	bf3c      	itt	cc
 800d91c:	021b      	lslcc	r3, r3, #8
 800d91e:	3008      	addcc	r0, #8
 800d920:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d924:	bf3c      	itt	cc
 800d926:	011b      	lslcc	r3, r3, #4
 800d928:	3004      	addcc	r0, #4
 800d92a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d92e:	bf3c      	itt	cc
 800d930:	009b      	lslcc	r3, r3, #2
 800d932:	3002      	addcc	r0, #2
 800d934:	2b00      	cmp	r3, #0
 800d936:	db05      	blt.n	800d944 <__hi0bits+0x3c>
 800d938:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d93c:	f100 0001 	add.w	r0, r0, #1
 800d940:	bf08      	it	eq
 800d942:	2020      	moveq	r0, #32
 800d944:	4770      	bx	lr

0800d946 <__lo0bits>:
 800d946:	6803      	ldr	r3, [r0, #0]
 800d948:	4602      	mov	r2, r0
 800d94a:	f013 0007 	ands.w	r0, r3, #7
 800d94e:	d00b      	beq.n	800d968 <__lo0bits+0x22>
 800d950:	07d9      	lsls	r1, r3, #31
 800d952:	d421      	bmi.n	800d998 <__lo0bits+0x52>
 800d954:	0798      	lsls	r0, r3, #30
 800d956:	bf49      	itett	mi
 800d958:	085b      	lsrmi	r3, r3, #1
 800d95a:	089b      	lsrpl	r3, r3, #2
 800d95c:	2001      	movmi	r0, #1
 800d95e:	6013      	strmi	r3, [r2, #0]
 800d960:	bf5c      	itt	pl
 800d962:	6013      	strpl	r3, [r2, #0]
 800d964:	2002      	movpl	r0, #2
 800d966:	4770      	bx	lr
 800d968:	b299      	uxth	r1, r3
 800d96a:	b909      	cbnz	r1, 800d970 <__lo0bits+0x2a>
 800d96c:	0c1b      	lsrs	r3, r3, #16
 800d96e:	2010      	movs	r0, #16
 800d970:	b2d9      	uxtb	r1, r3
 800d972:	b909      	cbnz	r1, 800d978 <__lo0bits+0x32>
 800d974:	3008      	adds	r0, #8
 800d976:	0a1b      	lsrs	r3, r3, #8
 800d978:	0719      	lsls	r1, r3, #28
 800d97a:	bf04      	itt	eq
 800d97c:	091b      	lsreq	r3, r3, #4
 800d97e:	3004      	addeq	r0, #4
 800d980:	0799      	lsls	r1, r3, #30
 800d982:	bf04      	itt	eq
 800d984:	089b      	lsreq	r3, r3, #2
 800d986:	3002      	addeq	r0, #2
 800d988:	07d9      	lsls	r1, r3, #31
 800d98a:	d403      	bmi.n	800d994 <__lo0bits+0x4e>
 800d98c:	085b      	lsrs	r3, r3, #1
 800d98e:	f100 0001 	add.w	r0, r0, #1
 800d992:	d003      	beq.n	800d99c <__lo0bits+0x56>
 800d994:	6013      	str	r3, [r2, #0]
 800d996:	4770      	bx	lr
 800d998:	2000      	movs	r0, #0
 800d99a:	4770      	bx	lr
 800d99c:	2020      	movs	r0, #32
 800d99e:	4770      	bx	lr

0800d9a0 <__i2b>:
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	460c      	mov	r4, r1
 800d9a4:	2101      	movs	r1, #1
 800d9a6:	f7ff febd 	bl	800d724 <_Balloc>
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	b928      	cbnz	r0, 800d9ba <__i2b+0x1a>
 800d9ae:	4b05      	ldr	r3, [pc, #20]	@ (800d9c4 <__i2b+0x24>)
 800d9b0:	4805      	ldr	r0, [pc, #20]	@ (800d9c8 <__i2b+0x28>)
 800d9b2:	f240 1145 	movw	r1, #325	@ 0x145
 800d9b6:	f001 ffb3 	bl	800f920 <__assert_func>
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	6144      	str	r4, [r0, #20]
 800d9be:	6103      	str	r3, [r0, #16]
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	bf00      	nop
 800d9c4:	080121b7 	.word	0x080121b7
 800d9c8:	080121c8 	.word	0x080121c8

0800d9cc <__multiply>:
 800d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9d0:	4614      	mov	r4, r2
 800d9d2:	690a      	ldr	r2, [r1, #16]
 800d9d4:	6923      	ldr	r3, [r4, #16]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	bfa8      	it	ge
 800d9da:	4623      	movge	r3, r4
 800d9dc:	460f      	mov	r7, r1
 800d9de:	bfa4      	itt	ge
 800d9e0:	460c      	movge	r4, r1
 800d9e2:	461f      	movge	r7, r3
 800d9e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d9e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d9ec:	68a3      	ldr	r3, [r4, #8]
 800d9ee:	6861      	ldr	r1, [r4, #4]
 800d9f0:	eb0a 0609 	add.w	r6, sl, r9
 800d9f4:	42b3      	cmp	r3, r6
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	bfb8      	it	lt
 800d9fa:	3101      	addlt	r1, #1
 800d9fc:	f7ff fe92 	bl	800d724 <_Balloc>
 800da00:	b930      	cbnz	r0, 800da10 <__multiply+0x44>
 800da02:	4602      	mov	r2, r0
 800da04:	4b44      	ldr	r3, [pc, #272]	@ (800db18 <__multiply+0x14c>)
 800da06:	4845      	ldr	r0, [pc, #276]	@ (800db1c <__multiply+0x150>)
 800da08:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800da0c:	f001 ff88 	bl	800f920 <__assert_func>
 800da10:	f100 0514 	add.w	r5, r0, #20
 800da14:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da18:	462b      	mov	r3, r5
 800da1a:	2200      	movs	r2, #0
 800da1c:	4543      	cmp	r3, r8
 800da1e:	d321      	bcc.n	800da64 <__multiply+0x98>
 800da20:	f107 0114 	add.w	r1, r7, #20
 800da24:	f104 0214 	add.w	r2, r4, #20
 800da28:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800da2c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800da30:	9302      	str	r3, [sp, #8]
 800da32:	1b13      	subs	r3, r2, r4
 800da34:	3b15      	subs	r3, #21
 800da36:	f023 0303 	bic.w	r3, r3, #3
 800da3a:	3304      	adds	r3, #4
 800da3c:	f104 0715 	add.w	r7, r4, #21
 800da40:	42ba      	cmp	r2, r7
 800da42:	bf38      	it	cc
 800da44:	2304      	movcc	r3, #4
 800da46:	9301      	str	r3, [sp, #4]
 800da48:	9b02      	ldr	r3, [sp, #8]
 800da4a:	9103      	str	r1, [sp, #12]
 800da4c:	428b      	cmp	r3, r1
 800da4e:	d80c      	bhi.n	800da6a <__multiply+0x9e>
 800da50:	2e00      	cmp	r6, #0
 800da52:	dd03      	ble.n	800da5c <__multiply+0x90>
 800da54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d05b      	beq.n	800db14 <__multiply+0x148>
 800da5c:	6106      	str	r6, [r0, #16]
 800da5e:	b005      	add	sp, #20
 800da60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da64:	f843 2b04 	str.w	r2, [r3], #4
 800da68:	e7d8      	b.n	800da1c <__multiply+0x50>
 800da6a:	f8b1 a000 	ldrh.w	sl, [r1]
 800da6e:	f1ba 0f00 	cmp.w	sl, #0
 800da72:	d024      	beq.n	800dabe <__multiply+0xf2>
 800da74:	f104 0e14 	add.w	lr, r4, #20
 800da78:	46a9      	mov	r9, r5
 800da7a:	f04f 0c00 	mov.w	ip, #0
 800da7e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800da82:	f8d9 3000 	ldr.w	r3, [r9]
 800da86:	fa1f fb87 	uxth.w	fp, r7
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	fb0a 330b 	mla	r3, sl, fp, r3
 800da90:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800da94:	f8d9 7000 	ldr.w	r7, [r9]
 800da98:	4463      	add	r3, ip
 800da9a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800da9e:	fb0a c70b 	mla	r7, sl, fp, ip
 800daa2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800daac:	4572      	cmp	r2, lr
 800daae:	f849 3b04 	str.w	r3, [r9], #4
 800dab2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dab6:	d8e2      	bhi.n	800da7e <__multiply+0xb2>
 800dab8:	9b01      	ldr	r3, [sp, #4]
 800daba:	f845 c003 	str.w	ip, [r5, r3]
 800dabe:	9b03      	ldr	r3, [sp, #12]
 800dac0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dac4:	3104      	adds	r1, #4
 800dac6:	f1b9 0f00 	cmp.w	r9, #0
 800daca:	d021      	beq.n	800db10 <__multiply+0x144>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	f104 0c14 	add.w	ip, r4, #20
 800dad2:	46ae      	mov	lr, r5
 800dad4:	f04f 0a00 	mov.w	sl, #0
 800dad8:	f8bc b000 	ldrh.w	fp, [ip]
 800dadc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dae0:	fb09 770b 	mla	r7, r9, fp, r7
 800dae4:	4457      	add	r7, sl
 800dae6:	b29b      	uxth	r3, r3
 800dae8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800daec:	f84e 3b04 	str.w	r3, [lr], #4
 800daf0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800daf4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800daf8:	f8be 3000 	ldrh.w	r3, [lr]
 800dafc:	fb09 330a 	mla	r3, r9, sl, r3
 800db00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800db04:	4562      	cmp	r2, ip
 800db06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db0a:	d8e5      	bhi.n	800dad8 <__multiply+0x10c>
 800db0c:	9f01      	ldr	r7, [sp, #4]
 800db0e:	51eb      	str	r3, [r5, r7]
 800db10:	3504      	adds	r5, #4
 800db12:	e799      	b.n	800da48 <__multiply+0x7c>
 800db14:	3e01      	subs	r6, #1
 800db16:	e79b      	b.n	800da50 <__multiply+0x84>
 800db18:	080121b7 	.word	0x080121b7
 800db1c:	080121c8 	.word	0x080121c8

0800db20 <__pow5mult>:
 800db20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db24:	4615      	mov	r5, r2
 800db26:	f012 0203 	ands.w	r2, r2, #3
 800db2a:	4607      	mov	r7, r0
 800db2c:	460e      	mov	r6, r1
 800db2e:	d007      	beq.n	800db40 <__pow5mult+0x20>
 800db30:	4c25      	ldr	r4, [pc, #148]	@ (800dbc8 <__pow5mult+0xa8>)
 800db32:	3a01      	subs	r2, #1
 800db34:	2300      	movs	r3, #0
 800db36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db3a:	f7ff fe55 	bl	800d7e8 <__multadd>
 800db3e:	4606      	mov	r6, r0
 800db40:	10ad      	asrs	r5, r5, #2
 800db42:	d03d      	beq.n	800dbc0 <__pow5mult+0xa0>
 800db44:	69fc      	ldr	r4, [r7, #28]
 800db46:	b97c      	cbnz	r4, 800db68 <__pow5mult+0x48>
 800db48:	2010      	movs	r0, #16
 800db4a:	f7ff fde3 	bl	800d714 <malloc>
 800db4e:	4602      	mov	r2, r0
 800db50:	61f8      	str	r0, [r7, #28]
 800db52:	b928      	cbnz	r0, 800db60 <__pow5mult+0x40>
 800db54:	4b1d      	ldr	r3, [pc, #116]	@ (800dbcc <__pow5mult+0xac>)
 800db56:	481e      	ldr	r0, [pc, #120]	@ (800dbd0 <__pow5mult+0xb0>)
 800db58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800db5c:	f001 fee0 	bl	800f920 <__assert_func>
 800db60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db64:	6004      	str	r4, [r0, #0]
 800db66:	60c4      	str	r4, [r0, #12]
 800db68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800db6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db70:	b94c      	cbnz	r4, 800db86 <__pow5mult+0x66>
 800db72:	f240 2171 	movw	r1, #625	@ 0x271
 800db76:	4638      	mov	r0, r7
 800db78:	f7ff ff12 	bl	800d9a0 <__i2b>
 800db7c:	2300      	movs	r3, #0
 800db7e:	f8c8 0008 	str.w	r0, [r8, #8]
 800db82:	4604      	mov	r4, r0
 800db84:	6003      	str	r3, [r0, #0]
 800db86:	f04f 0900 	mov.w	r9, #0
 800db8a:	07eb      	lsls	r3, r5, #31
 800db8c:	d50a      	bpl.n	800dba4 <__pow5mult+0x84>
 800db8e:	4631      	mov	r1, r6
 800db90:	4622      	mov	r2, r4
 800db92:	4638      	mov	r0, r7
 800db94:	f7ff ff1a 	bl	800d9cc <__multiply>
 800db98:	4631      	mov	r1, r6
 800db9a:	4680      	mov	r8, r0
 800db9c:	4638      	mov	r0, r7
 800db9e:	f7ff fe01 	bl	800d7a4 <_Bfree>
 800dba2:	4646      	mov	r6, r8
 800dba4:	106d      	asrs	r5, r5, #1
 800dba6:	d00b      	beq.n	800dbc0 <__pow5mult+0xa0>
 800dba8:	6820      	ldr	r0, [r4, #0]
 800dbaa:	b938      	cbnz	r0, 800dbbc <__pow5mult+0x9c>
 800dbac:	4622      	mov	r2, r4
 800dbae:	4621      	mov	r1, r4
 800dbb0:	4638      	mov	r0, r7
 800dbb2:	f7ff ff0b 	bl	800d9cc <__multiply>
 800dbb6:	6020      	str	r0, [r4, #0]
 800dbb8:	f8c0 9000 	str.w	r9, [r0]
 800dbbc:	4604      	mov	r4, r0
 800dbbe:	e7e4      	b.n	800db8a <__pow5mult+0x6a>
 800dbc0:	4630      	mov	r0, r6
 800dbc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbc6:	bf00      	nop
 800dbc8:	08012224 	.word	0x08012224
 800dbcc:	08012148 	.word	0x08012148
 800dbd0:	080121c8 	.word	0x080121c8

0800dbd4 <__lshift>:
 800dbd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd8:	460c      	mov	r4, r1
 800dbda:	6849      	ldr	r1, [r1, #4]
 800dbdc:	6923      	ldr	r3, [r4, #16]
 800dbde:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbe2:	68a3      	ldr	r3, [r4, #8]
 800dbe4:	4607      	mov	r7, r0
 800dbe6:	4691      	mov	r9, r2
 800dbe8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbec:	f108 0601 	add.w	r6, r8, #1
 800dbf0:	42b3      	cmp	r3, r6
 800dbf2:	db0b      	blt.n	800dc0c <__lshift+0x38>
 800dbf4:	4638      	mov	r0, r7
 800dbf6:	f7ff fd95 	bl	800d724 <_Balloc>
 800dbfa:	4605      	mov	r5, r0
 800dbfc:	b948      	cbnz	r0, 800dc12 <__lshift+0x3e>
 800dbfe:	4602      	mov	r2, r0
 800dc00:	4b28      	ldr	r3, [pc, #160]	@ (800dca4 <__lshift+0xd0>)
 800dc02:	4829      	ldr	r0, [pc, #164]	@ (800dca8 <__lshift+0xd4>)
 800dc04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dc08:	f001 fe8a 	bl	800f920 <__assert_func>
 800dc0c:	3101      	adds	r1, #1
 800dc0e:	005b      	lsls	r3, r3, #1
 800dc10:	e7ee      	b.n	800dbf0 <__lshift+0x1c>
 800dc12:	2300      	movs	r3, #0
 800dc14:	f100 0114 	add.w	r1, r0, #20
 800dc18:	f100 0210 	add.w	r2, r0, #16
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	4553      	cmp	r3, sl
 800dc20:	db33      	blt.n	800dc8a <__lshift+0xb6>
 800dc22:	6920      	ldr	r0, [r4, #16]
 800dc24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc28:	f104 0314 	add.w	r3, r4, #20
 800dc2c:	f019 091f 	ands.w	r9, r9, #31
 800dc30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dc38:	d02b      	beq.n	800dc92 <__lshift+0xbe>
 800dc3a:	f1c9 0e20 	rsb	lr, r9, #32
 800dc3e:	468a      	mov	sl, r1
 800dc40:	2200      	movs	r2, #0
 800dc42:	6818      	ldr	r0, [r3, #0]
 800dc44:	fa00 f009 	lsl.w	r0, r0, r9
 800dc48:	4310      	orrs	r0, r2
 800dc4a:	f84a 0b04 	str.w	r0, [sl], #4
 800dc4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc52:	459c      	cmp	ip, r3
 800dc54:	fa22 f20e 	lsr.w	r2, r2, lr
 800dc58:	d8f3      	bhi.n	800dc42 <__lshift+0x6e>
 800dc5a:	ebac 0304 	sub.w	r3, ip, r4
 800dc5e:	3b15      	subs	r3, #21
 800dc60:	f023 0303 	bic.w	r3, r3, #3
 800dc64:	3304      	adds	r3, #4
 800dc66:	f104 0015 	add.w	r0, r4, #21
 800dc6a:	4584      	cmp	ip, r0
 800dc6c:	bf38      	it	cc
 800dc6e:	2304      	movcc	r3, #4
 800dc70:	50ca      	str	r2, [r1, r3]
 800dc72:	b10a      	cbz	r2, 800dc78 <__lshift+0xa4>
 800dc74:	f108 0602 	add.w	r6, r8, #2
 800dc78:	3e01      	subs	r6, #1
 800dc7a:	4638      	mov	r0, r7
 800dc7c:	612e      	str	r6, [r5, #16]
 800dc7e:	4621      	mov	r1, r4
 800dc80:	f7ff fd90 	bl	800d7a4 <_Bfree>
 800dc84:	4628      	mov	r0, r5
 800dc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc8e:	3301      	adds	r3, #1
 800dc90:	e7c5      	b.n	800dc1e <__lshift+0x4a>
 800dc92:	3904      	subs	r1, #4
 800dc94:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc98:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc9c:	459c      	cmp	ip, r3
 800dc9e:	d8f9      	bhi.n	800dc94 <__lshift+0xc0>
 800dca0:	e7ea      	b.n	800dc78 <__lshift+0xa4>
 800dca2:	bf00      	nop
 800dca4:	080121b7 	.word	0x080121b7
 800dca8:	080121c8 	.word	0x080121c8

0800dcac <__mcmp>:
 800dcac:	690a      	ldr	r2, [r1, #16]
 800dcae:	4603      	mov	r3, r0
 800dcb0:	6900      	ldr	r0, [r0, #16]
 800dcb2:	1a80      	subs	r0, r0, r2
 800dcb4:	b530      	push	{r4, r5, lr}
 800dcb6:	d10e      	bne.n	800dcd6 <__mcmp+0x2a>
 800dcb8:	3314      	adds	r3, #20
 800dcba:	3114      	adds	r1, #20
 800dcbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dcc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dcc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dcc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dccc:	4295      	cmp	r5, r2
 800dcce:	d003      	beq.n	800dcd8 <__mcmp+0x2c>
 800dcd0:	d205      	bcs.n	800dcde <__mcmp+0x32>
 800dcd2:	f04f 30ff 	mov.w	r0, #4294967295
 800dcd6:	bd30      	pop	{r4, r5, pc}
 800dcd8:	42a3      	cmp	r3, r4
 800dcda:	d3f3      	bcc.n	800dcc4 <__mcmp+0x18>
 800dcdc:	e7fb      	b.n	800dcd6 <__mcmp+0x2a>
 800dcde:	2001      	movs	r0, #1
 800dce0:	e7f9      	b.n	800dcd6 <__mcmp+0x2a>
	...

0800dce4 <__mdiff>:
 800dce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce8:	4689      	mov	r9, r1
 800dcea:	4606      	mov	r6, r0
 800dcec:	4611      	mov	r1, r2
 800dcee:	4648      	mov	r0, r9
 800dcf0:	4614      	mov	r4, r2
 800dcf2:	f7ff ffdb 	bl	800dcac <__mcmp>
 800dcf6:	1e05      	subs	r5, r0, #0
 800dcf8:	d112      	bne.n	800dd20 <__mdiff+0x3c>
 800dcfa:	4629      	mov	r1, r5
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f7ff fd11 	bl	800d724 <_Balloc>
 800dd02:	4602      	mov	r2, r0
 800dd04:	b928      	cbnz	r0, 800dd12 <__mdiff+0x2e>
 800dd06:	4b3f      	ldr	r3, [pc, #252]	@ (800de04 <__mdiff+0x120>)
 800dd08:	f240 2137 	movw	r1, #567	@ 0x237
 800dd0c:	483e      	ldr	r0, [pc, #248]	@ (800de08 <__mdiff+0x124>)
 800dd0e:	f001 fe07 	bl	800f920 <__assert_func>
 800dd12:	2301      	movs	r3, #1
 800dd14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd18:	4610      	mov	r0, r2
 800dd1a:	b003      	add	sp, #12
 800dd1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd20:	bfbc      	itt	lt
 800dd22:	464b      	movlt	r3, r9
 800dd24:	46a1      	movlt	r9, r4
 800dd26:	4630      	mov	r0, r6
 800dd28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dd2c:	bfba      	itte	lt
 800dd2e:	461c      	movlt	r4, r3
 800dd30:	2501      	movlt	r5, #1
 800dd32:	2500      	movge	r5, #0
 800dd34:	f7ff fcf6 	bl	800d724 <_Balloc>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	b918      	cbnz	r0, 800dd44 <__mdiff+0x60>
 800dd3c:	4b31      	ldr	r3, [pc, #196]	@ (800de04 <__mdiff+0x120>)
 800dd3e:	f240 2145 	movw	r1, #581	@ 0x245
 800dd42:	e7e3      	b.n	800dd0c <__mdiff+0x28>
 800dd44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dd48:	6926      	ldr	r6, [r4, #16]
 800dd4a:	60c5      	str	r5, [r0, #12]
 800dd4c:	f109 0310 	add.w	r3, r9, #16
 800dd50:	f109 0514 	add.w	r5, r9, #20
 800dd54:	f104 0e14 	add.w	lr, r4, #20
 800dd58:	f100 0b14 	add.w	fp, r0, #20
 800dd5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dd60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dd64:	9301      	str	r3, [sp, #4]
 800dd66:	46d9      	mov	r9, fp
 800dd68:	f04f 0c00 	mov.w	ip, #0
 800dd6c:	9b01      	ldr	r3, [sp, #4]
 800dd6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dd72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dd76:	9301      	str	r3, [sp, #4]
 800dd78:	fa1f f38a 	uxth.w	r3, sl
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	b283      	uxth	r3, r0
 800dd80:	1acb      	subs	r3, r1, r3
 800dd82:	0c00      	lsrs	r0, r0, #16
 800dd84:	4463      	add	r3, ip
 800dd86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dd8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dd8e:	b29b      	uxth	r3, r3
 800dd90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd94:	4576      	cmp	r6, lr
 800dd96:	f849 3b04 	str.w	r3, [r9], #4
 800dd9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd9e:	d8e5      	bhi.n	800dd6c <__mdiff+0x88>
 800dda0:	1b33      	subs	r3, r6, r4
 800dda2:	3b15      	subs	r3, #21
 800dda4:	f023 0303 	bic.w	r3, r3, #3
 800dda8:	3415      	adds	r4, #21
 800ddaa:	3304      	adds	r3, #4
 800ddac:	42a6      	cmp	r6, r4
 800ddae:	bf38      	it	cc
 800ddb0:	2304      	movcc	r3, #4
 800ddb2:	441d      	add	r5, r3
 800ddb4:	445b      	add	r3, fp
 800ddb6:	461e      	mov	r6, r3
 800ddb8:	462c      	mov	r4, r5
 800ddba:	4544      	cmp	r4, r8
 800ddbc:	d30e      	bcc.n	800dddc <__mdiff+0xf8>
 800ddbe:	f108 0103 	add.w	r1, r8, #3
 800ddc2:	1b49      	subs	r1, r1, r5
 800ddc4:	f021 0103 	bic.w	r1, r1, #3
 800ddc8:	3d03      	subs	r5, #3
 800ddca:	45a8      	cmp	r8, r5
 800ddcc:	bf38      	it	cc
 800ddce:	2100      	movcc	r1, #0
 800ddd0:	440b      	add	r3, r1
 800ddd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ddd6:	b191      	cbz	r1, 800ddfe <__mdiff+0x11a>
 800ddd8:	6117      	str	r7, [r2, #16]
 800ddda:	e79d      	b.n	800dd18 <__mdiff+0x34>
 800dddc:	f854 1b04 	ldr.w	r1, [r4], #4
 800dde0:	46e6      	mov	lr, ip
 800dde2:	0c08      	lsrs	r0, r1, #16
 800dde4:	fa1c fc81 	uxtah	ip, ip, r1
 800dde8:	4471      	add	r1, lr
 800ddea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ddee:	b289      	uxth	r1, r1
 800ddf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ddf4:	f846 1b04 	str.w	r1, [r6], #4
 800ddf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ddfc:	e7dd      	b.n	800ddba <__mdiff+0xd6>
 800ddfe:	3f01      	subs	r7, #1
 800de00:	e7e7      	b.n	800ddd2 <__mdiff+0xee>
 800de02:	bf00      	nop
 800de04:	080121b7 	.word	0x080121b7
 800de08:	080121c8 	.word	0x080121c8

0800de0c <__ulp>:
 800de0c:	b082      	sub	sp, #8
 800de0e:	ed8d 0b00 	vstr	d0, [sp]
 800de12:	9a01      	ldr	r2, [sp, #4]
 800de14:	4b0f      	ldr	r3, [pc, #60]	@ (800de54 <__ulp+0x48>)
 800de16:	4013      	ands	r3, r2
 800de18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	dc08      	bgt.n	800de32 <__ulp+0x26>
 800de20:	425b      	negs	r3, r3
 800de22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800de26:	ea4f 5223 	mov.w	r2, r3, asr #20
 800de2a:	da04      	bge.n	800de36 <__ulp+0x2a>
 800de2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800de30:	4113      	asrs	r3, r2
 800de32:	2200      	movs	r2, #0
 800de34:	e008      	b.n	800de48 <__ulp+0x3c>
 800de36:	f1a2 0314 	sub.w	r3, r2, #20
 800de3a:	2b1e      	cmp	r3, #30
 800de3c:	bfda      	itte	le
 800de3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800de42:	40da      	lsrle	r2, r3
 800de44:	2201      	movgt	r2, #1
 800de46:	2300      	movs	r3, #0
 800de48:	4619      	mov	r1, r3
 800de4a:	4610      	mov	r0, r2
 800de4c:	ec41 0b10 	vmov	d0, r0, r1
 800de50:	b002      	add	sp, #8
 800de52:	4770      	bx	lr
 800de54:	7ff00000 	.word	0x7ff00000

0800de58 <__b2d>:
 800de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5c:	6906      	ldr	r6, [r0, #16]
 800de5e:	f100 0814 	add.w	r8, r0, #20
 800de62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800de66:	1f37      	subs	r7, r6, #4
 800de68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800de6c:	4610      	mov	r0, r2
 800de6e:	f7ff fd4b 	bl	800d908 <__hi0bits>
 800de72:	f1c0 0320 	rsb	r3, r0, #32
 800de76:	280a      	cmp	r0, #10
 800de78:	600b      	str	r3, [r1, #0]
 800de7a:	491b      	ldr	r1, [pc, #108]	@ (800dee8 <__b2d+0x90>)
 800de7c:	dc15      	bgt.n	800deaa <__b2d+0x52>
 800de7e:	f1c0 0c0b 	rsb	ip, r0, #11
 800de82:	fa22 f30c 	lsr.w	r3, r2, ip
 800de86:	45b8      	cmp	r8, r7
 800de88:	ea43 0501 	orr.w	r5, r3, r1
 800de8c:	bf34      	ite	cc
 800de8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800de92:	2300      	movcs	r3, #0
 800de94:	3015      	adds	r0, #21
 800de96:	fa02 f000 	lsl.w	r0, r2, r0
 800de9a:	fa23 f30c 	lsr.w	r3, r3, ip
 800de9e:	4303      	orrs	r3, r0
 800dea0:	461c      	mov	r4, r3
 800dea2:	ec45 4b10 	vmov	d0, r4, r5
 800dea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deaa:	45b8      	cmp	r8, r7
 800deac:	bf3a      	itte	cc
 800deae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800deb2:	f1a6 0708 	subcc.w	r7, r6, #8
 800deb6:	2300      	movcs	r3, #0
 800deb8:	380b      	subs	r0, #11
 800deba:	d012      	beq.n	800dee2 <__b2d+0x8a>
 800debc:	f1c0 0120 	rsb	r1, r0, #32
 800dec0:	fa23 f401 	lsr.w	r4, r3, r1
 800dec4:	4082      	lsls	r2, r0
 800dec6:	4322      	orrs	r2, r4
 800dec8:	4547      	cmp	r7, r8
 800deca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800dece:	bf8c      	ite	hi
 800ded0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ded4:	2200      	movls	r2, #0
 800ded6:	4083      	lsls	r3, r0
 800ded8:	40ca      	lsrs	r2, r1
 800deda:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dede:	4313      	orrs	r3, r2
 800dee0:	e7de      	b.n	800dea0 <__b2d+0x48>
 800dee2:	ea42 0501 	orr.w	r5, r2, r1
 800dee6:	e7db      	b.n	800dea0 <__b2d+0x48>
 800dee8:	3ff00000 	.word	0x3ff00000

0800deec <__d2b>:
 800deec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800def0:	460f      	mov	r7, r1
 800def2:	2101      	movs	r1, #1
 800def4:	ec59 8b10 	vmov	r8, r9, d0
 800def8:	4616      	mov	r6, r2
 800defa:	f7ff fc13 	bl	800d724 <_Balloc>
 800defe:	4604      	mov	r4, r0
 800df00:	b930      	cbnz	r0, 800df10 <__d2b+0x24>
 800df02:	4602      	mov	r2, r0
 800df04:	4b23      	ldr	r3, [pc, #140]	@ (800df94 <__d2b+0xa8>)
 800df06:	4824      	ldr	r0, [pc, #144]	@ (800df98 <__d2b+0xac>)
 800df08:	f240 310f 	movw	r1, #783	@ 0x30f
 800df0c:	f001 fd08 	bl	800f920 <__assert_func>
 800df10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800df14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df18:	b10d      	cbz	r5, 800df1e <__d2b+0x32>
 800df1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df1e:	9301      	str	r3, [sp, #4]
 800df20:	f1b8 0300 	subs.w	r3, r8, #0
 800df24:	d023      	beq.n	800df6e <__d2b+0x82>
 800df26:	4668      	mov	r0, sp
 800df28:	9300      	str	r3, [sp, #0]
 800df2a:	f7ff fd0c 	bl	800d946 <__lo0bits>
 800df2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800df32:	b1d0      	cbz	r0, 800df6a <__d2b+0x7e>
 800df34:	f1c0 0320 	rsb	r3, r0, #32
 800df38:	fa02 f303 	lsl.w	r3, r2, r3
 800df3c:	430b      	orrs	r3, r1
 800df3e:	40c2      	lsrs	r2, r0
 800df40:	6163      	str	r3, [r4, #20]
 800df42:	9201      	str	r2, [sp, #4]
 800df44:	9b01      	ldr	r3, [sp, #4]
 800df46:	61a3      	str	r3, [r4, #24]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	bf0c      	ite	eq
 800df4c:	2201      	moveq	r2, #1
 800df4e:	2202      	movne	r2, #2
 800df50:	6122      	str	r2, [r4, #16]
 800df52:	b1a5      	cbz	r5, 800df7e <__d2b+0x92>
 800df54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800df58:	4405      	add	r5, r0
 800df5a:	603d      	str	r5, [r7, #0]
 800df5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800df60:	6030      	str	r0, [r6, #0]
 800df62:	4620      	mov	r0, r4
 800df64:	b003      	add	sp, #12
 800df66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df6a:	6161      	str	r1, [r4, #20]
 800df6c:	e7ea      	b.n	800df44 <__d2b+0x58>
 800df6e:	a801      	add	r0, sp, #4
 800df70:	f7ff fce9 	bl	800d946 <__lo0bits>
 800df74:	9b01      	ldr	r3, [sp, #4]
 800df76:	6163      	str	r3, [r4, #20]
 800df78:	3020      	adds	r0, #32
 800df7a:	2201      	movs	r2, #1
 800df7c:	e7e8      	b.n	800df50 <__d2b+0x64>
 800df7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800df86:	6038      	str	r0, [r7, #0]
 800df88:	6918      	ldr	r0, [r3, #16]
 800df8a:	f7ff fcbd 	bl	800d908 <__hi0bits>
 800df8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df92:	e7e5      	b.n	800df60 <__d2b+0x74>
 800df94:	080121b7 	.word	0x080121b7
 800df98:	080121c8 	.word	0x080121c8

0800df9c <__ratio>:
 800df9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa0:	b085      	sub	sp, #20
 800dfa2:	e9cd 1000 	strd	r1, r0, [sp]
 800dfa6:	a902      	add	r1, sp, #8
 800dfa8:	f7ff ff56 	bl	800de58 <__b2d>
 800dfac:	9800      	ldr	r0, [sp, #0]
 800dfae:	a903      	add	r1, sp, #12
 800dfb0:	ec55 4b10 	vmov	r4, r5, d0
 800dfb4:	f7ff ff50 	bl	800de58 <__b2d>
 800dfb8:	9b01      	ldr	r3, [sp, #4]
 800dfba:	6919      	ldr	r1, [r3, #16]
 800dfbc:	9b00      	ldr	r3, [sp, #0]
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	1ac9      	subs	r1, r1, r3
 800dfc2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800dfc6:	1a9b      	subs	r3, r3, r2
 800dfc8:	ec5b ab10 	vmov	sl, fp, d0
 800dfcc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	bfce      	itee	gt
 800dfd4:	462a      	movgt	r2, r5
 800dfd6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dfda:	465a      	movle	r2, fp
 800dfdc:	462f      	mov	r7, r5
 800dfde:	46d9      	mov	r9, fp
 800dfe0:	bfcc      	ite	gt
 800dfe2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800dfe6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800dfea:	464b      	mov	r3, r9
 800dfec:	4652      	mov	r2, sl
 800dfee:	4620      	mov	r0, r4
 800dff0:	4639      	mov	r1, r7
 800dff2:	f7f2 fc4b 	bl	800088c <__aeabi_ddiv>
 800dff6:	ec41 0b10 	vmov	d0, r0, r1
 800dffa:	b005      	add	sp, #20
 800dffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e000 <__copybits>:
 800e000:	3901      	subs	r1, #1
 800e002:	b570      	push	{r4, r5, r6, lr}
 800e004:	1149      	asrs	r1, r1, #5
 800e006:	6914      	ldr	r4, [r2, #16]
 800e008:	3101      	adds	r1, #1
 800e00a:	f102 0314 	add.w	r3, r2, #20
 800e00e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e012:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e016:	1f05      	subs	r5, r0, #4
 800e018:	42a3      	cmp	r3, r4
 800e01a:	d30c      	bcc.n	800e036 <__copybits+0x36>
 800e01c:	1aa3      	subs	r3, r4, r2
 800e01e:	3b11      	subs	r3, #17
 800e020:	f023 0303 	bic.w	r3, r3, #3
 800e024:	3211      	adds	r2, #17
 800e026:	42a2      	cmp	r2, r4
 800e028:	bf88      	it	hi
 800e02a:	2300      	movhi	r3, #0
 800e02c:	4418      	add	r0, r3
 800e02e:	2300      	movs	r3, #0
 800e030:	4288      	cmp	r0, r1
 800e032:	d305      	bcc.n	800e040 <__copybits+0x40>
 800e034:	bd70      	pop	{r4, r5, r6, pc}
 800e036:	f853 6b04 	ldr.w	r6, [r3], #4
 800e03a:	f845 6f04 	str.w	r6, [r5, #4]!
 800e03e:	e7eb      	b.n	800e018 <__copybits+0x18>
 800e040:	f840 3b04 	str.w	r3, [r0], #4
 800e044:	e7f4      	b.n	800e030 <__copybits+0x30>

0800e046 <__any_on>:
 800e046:	f100 0214 	add.w	r2, r0, #20
 800e04a:	6900      	ldr	r0, [r0, #16]
 800e04c:	114b      	asrs	r3, r1, #5
 800e04e:	4298      	cmp	r0, r3
 800e050:	b510      	push	{r4, lr}
 800e052:	db11      	blt.n	800e078 <__any_on+0x32>
 800e054:	dd0a      	ble.n	800e06c <__any_on+0x26>
 800e056:	f011 011f 	ands.w	r1, r1, #31
 800e05a:	d007      	beq.n	800e06c <__any_on+0x26>
 800e05c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e060:	fa24 f001 	lsr.w	r0, r4, r1
 800e064:	fa00 f101 	lsl.w	r1, r0, r1
 800e068:	428c      	cmp	r4, r1
 800e06a:	d10b      	bne.n	800e084 <__any_on+0x3e>
 800e06c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e070:	4293      	cmp	r3, r2
 800e072:	d803      	bhi.n	800e07c <__any_on+0x36>
 800e074:	2000      	movs	r0, #0
 800e076:	bd10      	pop	{r4, pc}
 800e078:	4603      	mov	r3, r0
 800e07a:	e7f7      	b.n	800e06c <__any_on+0x26>
 800e07c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e080:	2900      	cmp	r1, #0
 800e082:	d0f5      	beq.n	800e070 <__any_on+0x2a>
 800e084:	2001      	movs	r0, #1
 800e086:	e7f6      	b.n	800e076 <__any_on+0x30>

0800e088 <sulp>:
 800e088:	b570      	push	{r4, r5, r6, lr}
 800e08a:	4604      	mov	r4, r0
 800e08c:	460d      	mov	r5, r1
 800e08e:	ec45 4b10 	vmov	d0, r4, r5
 800e092:	4616      	mov	r6, r2
 800e094:	f7ff feba 	bl	800de0c <__ulp>
 800e098:	ec51 0b10 	vmov	r0, r1, d0
 800e09c:	b17e      	cbz	r6, 800e0be <sulp+0x36>
 800e09e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e0a2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	dd09      	ble.n	800e0be <sulp+0x36>
 800e0aa:	051b      	lsls	r3, r3, #20
 800e0ac:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e0b0:	2400      	movs	r4, #0
 800e0b2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e0b6:	4622      	mov	r2, r4
 800e0b8:	462b      	mov	r3, r5
 800e0ba:	f7f2 fabd 	bl	8000638 <__aeabi_dmul>
 800e0be:	ec41 0b10 	vmov	d0, r0, r1
 800e0c2:	bd70      	pop	{r4, r5, r6, pc}
 800e0c4:	0000      	movs	r0, r0
	...

0800e0c8 <_strtod_l>:
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	b09f      	sub	sp, #124	@ 0x7c
 800e0ce:	460c      	mov	r4, r1
 800e0d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e0d2:	2200      	movs	r2, #0
 800e0d4:	921a      	str	r2, [sp, #104]	@ 0x68
 800e0d6:	9005      	str	r0, [sp, #20]
 800e0d8:	f04f 0a00 	mov.w	sl, #0
 800e0dc:	f04f 0b00 	mov.w	fp, #0
 800e0e0:	460a      	mov	r2, r1
 800e0e2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e0e4:	7811      	ldrb	r1, [r2, #0]
 800e0e6:	292b      	cmp	r1, #43	@ 0x2b
 800e0e8:	d04a      	beq.n	800e180 <_strtod_l+0xb8>
 800e0ea:	d838      	bhi.n	800e15e <_strtod_l+0x96>
 800e0ec:	290d      	cmp	r1, #13
 800e0ee:	d832      	bhi.n	800e156 <_strtod_l+0x8e>
 800e0f0:	2908      	cmp	r1, #8
 800e0f2:	d832      	bhi.n	800e15a <_strtod_l+0x92>
 800e0f4:	2900      	cmp	r1, #0
 800e0f6:	d03b      	beq.n	800e170 <_strtod_l+0xa8>
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e0fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e0fe:	782a      	ldrb	r2, [r5, #0]
 800e100:	2a30      	cmp	r2, #48	@ 0x30
 800e102:	f040 80b3 	bne.w	800e26c <_strtod_l+0x1a4>
 800e106:	786a      	ldrb	r2, [r5, #1]
 800e108:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e10c:	2a58      	cmp	r2, #88	@ 0x58
 800e10e:	d16e      	bne.n	800e1ee <_strtod_l+0x126>
 800e110:	9302      	str	r3, [sp, #8]
 800e112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e114:	9301      	str	r3, [sp, #4]
 800e116:	ab1a      	add	r3, sp, #104	@ 0x68
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	4a8e      	ldr	r2, [pc, #568]	@ (800e354 <_strtod_l+0x28c>)
 800e11c:	9805      	ldr	r0, [sp, #20]
 800e11e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e120:	a919      	add	r1, sp, #100	@ 0x64
 800e122:	f001 fc83 	bl	800fa2c <__gethex>
 800e126:	f010 060f 	ands.w	r6, r0, #15
 800e12a:	4604      	mov	r4, r0
 800e12c:	d005      	beq.n	800e13a <_strtod_l+0x72>
 800e12e:	2e06      	cmp	r6, #6
 800e130:	d128      	bne.n	800e184 <_strtod_l+0xbc>
 800e132:	3501      	adds	r5, #1
 800e134:	2300      	movs	r3, #0
 800e136:	9519      	str	r5, [sp, #100]	@ 0x64
 800e138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e13a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 858e 	bne.w	800ec5e <_strtod_l+0xb96>
 800e142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e144:	b1cb      	cbz	r3, 800e17a <_strtod_l+0xb2>
 800e146:	4652      	mov	r2, sl
 800e148:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e14c:	ec43 2b10 	vmov	d0, r2, r3
 800e150:	b01f      	add	sp, #124	@ 0x7c
 800e152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e156:	2920      	cmp	r1, #32
 800e158:	d1ce      	bne.n	800e0f8 <_strtod_l+0x30>
 800e15a:	3201      	adds	r2, #1
 800e15c:	e7c1      	b.n	800e0e2 <_strtod_l+0x1a>
 800e15e:	292d      	cmp	r1, #45	@ 0x2d
 800e160:	d1ca      	bne.n	800e0f8 <_strtod_l+0x30>
 800e162:	2101      	movs	r1, #1
 800e164:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e166:	1c51      	adds	r1, r2, #1
 800e168:	9119      	str	r1, [sp, #100]	@ 0x64
 800e16a:	7852      	ldrb	r2, [r2, #1]
 800e16c:	2a00      	cmp	r2, #0
 800e16e:	d1c5      	bne.n	800e0fc <_strtod_l+0x34>
 800e170:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e172:	9419      	str	r4, [sp, #100]	@ 0x64
 800e174:	2b00      	cmp	r3, #0
 800e176:	f040 8570 	bne.w	800ec5a <_strtod_l+0xb92>
 800e17a:	4652      	mov	r2, sl
 800e17c:	465b      	mov	r3, fp
 800e17e:	e7e5      	b.n	800e14c <_strtod_l+0x84>
 800e180:	2100      	movs	r1, #0
 800e182:	e7ef      	b.n	800e164 <_strtod_l+0x9c>
 800e184:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e186:	b13a      	cbz	r2, 800e198 <_strtod_l+0xd0>
 800e188:	2135      	movs	r1, #53	@ 0x35
 800e18a:	a81c      	add	r0, sp, #112	@ 0x70
 800e18c:	f7ff ff38 	bl	800e000 <__copybits>
 800e190:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e192:	9805      	ldr	r0, [sp, #20]
 800e194:	f7ff fb06 	bl	800d7a4 <_Bfree>
 800e198:	3e01      	subs	r6, #1
 800e19a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e19c:	2e04      	cmp	r6, #4
 800e19e:	d806      	bhi.n	800e1ae <_strtod_l+0xe6>
 800e1a0:	e8df f006 	tbb	[pc, r6]
 800e1a4:	201d0314 	.word	0x201d0314
 800e1a8:	14          	.byte	0x14
 800e1a9:	00          	.byte	0x00
 800e1aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e1ae:	05e1      	lsls	r1, r4, #23
 800e1b0:	bf48      	it	mi
 800e1b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e1b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e1ba:	0d1b      	lsrs	r3, r3, #20
 800e1bc:	051b      	lsls	r3, r3, #20
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d1bb      	bne.n	800e13a <_strtod_l+0x72>
 800e1c2:	f7fe fbcf 	bl	800c964 <__errno>
 800e1c6:	2322      	movs	r3, #34	@ 0x22
 800e1c8:	6003      	str	r3, [r0, #0]
 800e1ca:	e7b6      	b.n	800e13a <_strtod_l+0x72>
 800e1cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e1d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e1d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e1d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e1dc:	e7e7      	b.n	800e1ae <_strtod_l+0xe6>
 800e1de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e35c <_strtod_l+0x294>
 800e1e2:	e7e4      	b.n	800e1ae <_strtod_l+0xe6>
 800e1e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e1e8:	f04f 3aff 	mov.w	sl, #4294967295
 800e1ec:	e7df      	b.n	800e1ae <_strtod_l+0xe6>
 800e1ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e1f0:	1c5a      	adds	r2, r3, #1
 800e1f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800e1f4:	785b      	ldrb	r3, [r3, #1]
 800e1f6:	2b30      	cmp	r3, #48	@ 0x30
 800e1f8:	d0f9      	beq.n	800e1ee <_strtod_l+0x126>
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d09d      	beq.n	800e13a <_strtod_l+0x72>
 800e1fe:	2301      	movs	r3, #1
 800e200:	9309      	str	r3, [sp, #36]	@ 0x24
 800e202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e204:	930c      	str	r3, [sp, #48]	@ 0x30
 800e206:	2300      	movs	r3, #0
 800e208:	9308      	str	r3, [sp, #32]
 800e20a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e20c:	461f      	mov	r7, r3
 800e20e:	220a      	movs	r2, #10
 800e210:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e212:	7805      	ldrb	r5, [r0, #0]
 800e214:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e218:	b2d9      	uxtb	r1, r3
 800e21a:	2909      	cmp	r1, #9
 800e21c:	d928      	bls.n	800e270 <_strtod_l+0x1a8>
 800e21e:	494e      	ldr	r1, [pc, #312]	@ (800e358 <_strtod_l+0x290>)
 800e220:	2201      	movs	r2, #1
 800e222:	f001 fb62 	bl	800f8ea <strncmp>
 800e226:	2800      	cmp	r0, #0
 800e228:	d032      	beq.n	800e290 <_strtod_l+0x1c8>
 800e22a:	2000      	movs	r0, #0
 800e22c:	462a      	mov	r2, r5
 800e22e:	4681      	mov	r9, r0
 800e230:	463d      	mov	r5, r7
 800e232:	4603      	mov	r3, r0
 800e234:	2a65      	cmp	r2, #101	@ 0x65
 800e236:	d001      	beq.n	800e23c <_strtod_l+0x174>
 800e238:	2a45      	cmp	r2, #69	@ 0x45
 800e23a:	d114      	bne.n	800e266 <_strtod_l+0x19e>
 800e23c:	b91d      	cbnz	r5, 800e246 <_strtod_l+0x17e>
 800e23e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e240:	4302      	orrs	r2, r0
 800e242:	d095      	beq.n	800e170 <_strtod_l+0xa8>
 800e244:	2500      	movs	r5, #0
 800e246:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e248:	1c62      	adds	r2, r4, #1
 800e24a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e24c:	7862      	ldrb	r2, [r4, #1]
 800e24e:	2a2b      	cmp	r2, #43	@ 0x2b
 800e250:	d077      	beq.n	800e342 <_strtod_l+0x27a>
 800e252:	2a2d      	cmp	r2, #45	@ 0x2d
 800e254:	d07b      	beq.n	800e34e <_strtod_l+0x286>
 800e256:	f04f 0c00 	mov.w	ip, #0
 800e25a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e25e:	2909      	cmp	r1, #9
 800e260:	f240 8082 	bls.w	800e368 <_strtod_l+0x2a0>
 800e264:	9419      	str	r4, [sp, #100]	@ 0x64
 800e266:	f04f 0800 	mov.w	r8, #0
 800e26a:	e0a2      	b.n	800e3b2 <_strtod_l+0x2ea>
 800e26c:	2300      	movs	r3, #0
 800e26e:	e7c7      	b.n	800e200 <_strtod_l+0x138>
 800e270:	2f08      	cmp	r7, #8
 800e272:	bfd5      	itete	le
 800e274:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e276:	9908      	ldrgt	r1, [sp, #32]
 800e278:	fb02 3301 	mlale	r3, r2, r1, r3
 800e27c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e280:	f100 0001 	add.w	r0, r0, #1
 800e284:	bfd4      	ite	le
 800e286:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e288:	9308      	strgt	r3, [sp, #32]
 800e28a:	3701      	adds	r7, #1
 800e28c:	9019      	str	r0, [sp, #100]	@ 0x64
 800e28e:	e7bf      	b.n	800e210 <_strtod_l+0x148>
 800e290:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	9219      	str	r2, [sp, #100]	@ 0x64
 800e296:	785a      	ldrb	r2, [r3, #1]
 800e298:	b37f      	cbz	r7, 800e2fa <_strtod_l+0x232>
 800e29a:	4681      	mov	r9, r0
 800e29c:	463d      	mov	r5, r7
 800e29e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e2a2:	2b09      	cmp	r3, #9
 800e2a4:	d912      	bls.n	800e2cc <_strtod_l+0x204>
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	e7c4      	b.n	800e234 <_strtod_l+0x16c>
 800e2aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2ac:	1c5a      	adds	r2, r3, #1
 800e2ae:	9219      	str	r2, [sp, #100]	@ 0x64
 800e2b0:	785a      	ldrb	r2, [r3, #1]
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	2a30      	cmp	r2, #48	@ 0x30
 800e2b6:	d0f8      	beq.n	800e2aa <_strtod_l+0x1e2>
 800e2b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e2bc:	2b08      	cmp	r3, #8
 800e2be:	f200 84d3 	bhi.w	800ec68 <_strtod_l+0xba0>
 800e2c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e2c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800e2c6:	4681      	mov	r9, r0
 800e2c8:	2000      	movs	r0, #0
 800e2ca:	4605      	mov	r5, r0
 800e2cc:	3a30      	subs	r2, #48	@ 0x30
 800e2ce:	f100 0301 	add.w	r3, r0, #1
 800e2d2:	d02a      	beq.n	800e32a <_strtod_l+0x262>
 800e2d4:	4499      	add	r9, r3
 800e2d6:	eb00 0c05 	add.w	ip, r0, r5
 800e2da:	462b      	mov	r3, r5
 800e2dc:	210a      	movs	r1, #10
 800e2de:	4563      	cmp	r3, ip
 800e2e0:	d10d      	bne.n	800e2fe <_strtod_l+0x236>
 800e2e2:	1c69      	adds	r1, r5, #1
 800e2e4:	4401      	add	r1, r0
 800e2e6:	4428      	add	r0, r5
 800e2e8:	2808      	cmp	r0, #8
 800e2ea:	dc16      	bgt.n	800e31a <_strtod_l+0x252>
 800e2ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e2ee:	230a      	movs	r3, #10
 800e2f0:	fb03 2300 	mla	r3, r3, r0, r2
 800e2f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e018      	b.n	800e32c <_strtod_l+0x264>
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	e7da      	b.n	800e2b4 <_strtod_l+0x1ec>
 800e2fe:	2b08      	cmp	r3, #8
 800e300:	f103 0301 	add.w	r3, r3, #1
 800e304:	dc03      	bgt.n	800e30e <_strtod_l+0x246>
 800e306:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e308:	434e      	muls	r6, r1
 800e30a:	960a      	str	r6, [sp, #40]	@ 0x28
 800e30c:	e7e7      	b.n	800e2de <_strtod_l+0x216>
 800e30e:	2b10      	cmp	r3, #16
 800e310:	bfde      	ittt	le
 800e312:	9e08      	ldrle	r6, [sp, #32]
 800e314:	434e      	mulle	r6, r1
 800e316:	9608      	strle	r6, [sp, #32]
 800e318:	e7e1      	b.n	800e2de <_strtod_l+0x216>
 800e31a:	280f      	cmp	r0, #15
 800e31c:	dceb      	bgt.n	800e2f6 <_strtod_l+0x22e>
 800e31e:	9808      	ldr	r0, [sp, #32]
 800e320:	230a      	movs	r3, #10
 800e322:	fb03 2300 	mla	r3, r3, r0, r2
 800e326:	9308      	str	r3, [sp, #32]
 800e328:	e7e5      	b.n	800e2f6 <_strtod_l+0x22e>
 800e32a:	4629      	mov	r1, r5
 800e32c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e32e:	1c50      	adds	r0, r2, #1
 800e330:	9019      	str	r0, [sp, #100]	@ 0x64
 800e332:	7852      	ldrb	r2, [r2, #1]
 800e334:	4618      	mov	r0, r3
 800e336:	460d      	mov	r5, r1
 800e338:	e7b1      	b.n	800e29e <_strtod_l+0x1d6>
 800e33a:	f04f 0900 	mov.w	r9, #0
 800e33e:	2301      	movs	r3, #1
 800e340:	e77d      	b.n	800e23e <_strtod_l+0x176>
 800e342:	f04f 0c00 	mov.w	ip, #0
 800e346:	1ca2      	adds	r2, r4, #2
 800e348:	9219      	str	r2, [sp, #100]	@ 0x64
 800e34a:	78a2      	ldrb	r2, [r4, #2]
 800e34c:	e785      	b.n	800e25a <_strtod_l+0x192>
 800e34e:	f04f 0c01 	mov.w	ip, #1
 800e352:	e7f8      	b.n	800e346 <_strtod_l+0x27e>
 800e354:	08012338 	.word	0x08012338
 800e358:	08012320 	.word	0x08012320
 800e35c:	7ff00000 	.word	0x7ff00000
 800e360:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e362:	1c51      	adds	r1, r2, #1
 800e364:	9119      	str	r1, [sp, #100]	@ 0x64
 800e366:	7852      	ldrb	r2, [r2, #1]
 800e368:	2a30      	cmp	r2, #48	@ 0x30
 800e36a:	d0f9      	beq.n	800e360 <_strtod_l+0x298>
 800e36c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e370:	2908      	cmp	r1, #8
 800e372:	f63f af78 	bhi.w	800e266 <_strtod_l+0x19e>
 800e376:	3a30      	subs	r2, #48	@ 0x30
 800e378:	920e      	str	r2, [sp, #56]	@ 0x38
 800e37a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e37c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e37e:	f04f 080a 	mov.w	r8, #10
 800e382:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e384:	1c56      	adds	r6, r2, #1
 800e386:	9619      	str	r6, [sp, #100]	@ 0x64
 800e388:	7852      	ldrb	r2, [r2, #1]
 800e38a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e38e:	f1be 0f09 	cmp.w	lr, #9
 800e392:	d939      	bls.n	800e408 <_strtod_l+0x340>
 800e394:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e396:	1a76      	subs	r6, r6, r1
 800e398:	2e08      	cmp	r6, #8
 800e39a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e39e:	dc03      	bgt.n	800e3a8 <_strtod_l+0x2e0>
 800e3a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e3a2:	4588      	cmp	r8, r1
 800e3a4:	bfa8      	it	ge
 800e3a6:	4688      	movge	r8, r1
 800e3a8:	f1bc 0f00 	cmp.w	ip, #0
 800e3ac:	d001      	beq.n	800e3b2 <_strtod_l+0x2ea>
 800e3ae:	f1c8 0800 	rsb	r8, r8, #0
 800e3b2:	2d00      	cmp	r5, #0
 800e3b4:	d14e      	bne.n	800e454 <_strtod_l+0x38c>
 800e3b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3b8:	4308      	orrs	r0, r1
 800e3ba:	f47f aebe 	bne.w	800e13a <_strtod_l+0x72>
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	f47f aed6 	bne.w	800e170 <_strtod_l+0xa8>
 800e3c4:	2a69      	cmp	r2, #105	@ 0x69
 800e3c6:	d028      	beq.n	800e41a <_strtod_l+0x352>
 800e3c8:	dc25      	bgt.n	800e416 <_strtod_l+0x34e>
 800e3ca:	2a49      	cmp	r2, #73	@ 0x49
 800e3cc:	d025      	beq.n	800e41a <_strtod_l+0x352>
 800e3ce:	2a4e      	cmp	r2, #78	@ 0x4e
 800e3d0:	f47f aece 	bne.w	800e170 <_strtod_l+0xa8>
 800e3d4:	499b      	ldr	r1, [pc, #620]	@ (800e644 <_strtod_l+0x57c>)
 800e3d6:	a819      	add	r0, sp, #100	@ 0x64
 800e3d8:	f001 fd4a 	bl	800fe70 <__match>
 800e3dc:	2800      	cmp	r0, #0
 800e3de:	f43f aec7 	beq.w	800e170 <_strtod_l+0xa8>
 800e3e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e3e4:	781b      	ldrb	r3, [r3, #0]
 800e3e6:	2b28      	cmp	r3, #40	@ 0x28
 800e3e8:	d12e      	bne.n	800e448 <_strtod_l+0x380>
 800e3ea:	4997      	ldr	r1, [pc, #604]	@ (800e648 <_strtod_l+0x580>)
 800e3ec:	aa1c      	add	r2, sp, #112	@ 0x70
 800e3ee:	a819      	add	r0, sp, #100	@ 0x64
 800e3f0:	f001 fd52 	bl	800fe98 <__hexnan>
 800e3f4:	2805      	cmp	r0, #5
 800e3f6:	d127      	bne.n	800e448 <_strtod_l+0x380>
 800e3f8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e3fa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800e3fe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e402:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e406:	e698      	b.n	800e13a <_strtod_l+0x72>
 800e408:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e40a:	fb08 2101 	mla	r1, r8, r1, r2
 800e40e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800e412:	920e      	str	r2, [sp, #56]	@ 0x38
 800e414:	e7b5      	b.n	800e382 <_strtod_l+0x2ba>
 800e416:	2a6e      	cmp	r2, #110	@ 0x6e
 800e418:	e7da      	b.n	800e3d0 <_strtod_l+0x308>
 800e41a:	498c      	ldr	r1, [pc, #560]	@ (800e64c <_strtod_l+0x584>)
 800e41c:	a819      	add	r0, sp, #100	@ 0x64
 800e41e:	f001 fd27 	bl	800fe70 <__match>
 800e422:	2800      	cmp	r0, #0
 800e424:	f43f aea4 	beq.w	800e170 <_strtod_l+0xa8>
 800e428:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e42a:	4989      	ldr	r1, [pc, #548]	@ (800e650 <_strtod_l+0x588>)
 800e42c:	3b01      	subs	r3, #1
 800e42e:	a819      	add	r0, sp, #100	@ 0x64
 800e430:	9319      	str	r3, [sp, #100]	@ 0x64
 800e432:	f001 fd1d 	bl	800fe70 <__match>
 800e436:	b910      	cbnz	r0, 800e43e <_strtod_l+0x376>
 800e438:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e43a:	3301      	adds	r3, #1
 800e43c:	9319      	str	r3, [sp, #100]	@ 0x64
 800e43e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800e660 <_strtod_l+0x598>
 800e442:	f04f 0a00 	mov.w	sl, #0
 800e446:	e678      	b.n	800e13a <_strtod_l+0x72>
 800e448:	4882      	ldr	r0, [pc, #520]	@ (800e654 <_strtod_l+0x58c>)
 800e44a:	f001 fa61 	bl	800f910 <nan>
 800e44e:	ec5b ab10 	vmov	sl, fp, d0
 800e452:	e672      	b.n	800e13a <_strtod_l+0x72>
 800e454:	eba8 0309 	sub.w	r3, r8, r9
 800e458:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e45a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e45c:	2f00      	cmp	r7, #0
 800e45e:	bf08      	it	eq
 800e460:	462f      	moveq	r7, r5
 800e462:	2d10      	cmp	r5, #16
 800e464:	462c      	mov	r4, r5
 800e466:	bfa8      	it	ge
 800e468:	2410      	movge	r4, #16
 800e46a:	f7f2 f86b 	bl	8000544 <__aeabi_ui2d>
 800e46e:	2d09      	cmp	r5, #9
 800e470:	4682      	mov	sl, r0
 800e472:	468b      	mov	fp, r1
 800e474:	dc13      	bgt.n	800e49e <_strtod_l+0x3d6>
 800e476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f43f ae5e 	beq.w	800e13a <_strtod_l+0x72>
 800e47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e480:	dd78      	ble.n	800e574 <_strtod_l+0x4ac>
 800e482:	2b16      	cmp	r3, #22
 800e484:	dc5f      	bgt.n	800e546 <_strtod_l+0x47e>
 800e486:	4974      	ldr	r1, [pc, #464]	@ (800e658 <_strtod_l+0x590>)
 800e488:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e48c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e490:	4652      	mov	r2, sl
 800e492:	465b      	mov	r3, fp
 800e494:	f7f2 f8d0 	bl	8000638 <__aeabi_dmul>
 800e498:	4682      	mov	sl, r0
 800e49a:	468b      	mov	fp, r1
 800e49c:	e64d      	b.n	800e13a <_strtod_l+0x72>
 800e49e:	4b6e      	ldr	r3, [pc, #440]	@ (800e658 <_strtod_l+0x590>)
 800e4a0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e4a4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800e4a8:	f7f2 f8c6 	bl	8000638 <__aeabi_dmul>
 800e4ac:	4682      	mov	sl, r0
 800e4ae:	9808      	ldr	r0, [sp, #32]
 800e4b0:	468b      	mov	fp, r1
 800e4b2:	f7f2 f847 	bl	8000544 <__aeabi_ui2d>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	460b      	mov	r3, r1
 800e4ba:	4650      	mov	r0, sl
 800e4bc:	4659      	mov	r1, fp
 800e4be:	f7f1 ff05 	bl	80002cc <__adddf3>
 800e4c2:	2d0f      	cmp	r5, #15
 800e4c4:	4682      	mov	sl, r0
 800e4c6:	468b      	mov	fp, r1
 800e4c8:	ddd5      	ble.n	800e476 <_strtod_l+0x3ae>
 800e4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4cc:	1b2c      	subs	r4, r5, r4
 800e4ce:	441c      	add	r4, r3
 800e4d0:	2c00      	cmp	r4, #0
 800e4d2:	f340 8096 	ble.w	800e602 <_strtod_l+0x53a>
 800e4d6:	f014 030f 	ands.w	r3, r4, #15
 800e4da:	d00a      	beq.n	800e4f2 <_strtod_l+0x42a>
 800e4dc:	495e      	ldr	r1, [pc, #376]	@ (800e658 <_strtod_l+0x590>)
 800e4de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e4e2:	4652      	mov	r2, sl
 800e4e4:	465b      	mov	r3, fp
 800e4e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4ea:	f7f2 f8a5 	bl	8000638 <__aeabi_dmul>
 800e4ee:	4682      	mov	sl, r0
 800e4f0:	468b      	mov	fp, r1
 800e4f2:	f034 040f 	bics.w	r4, r4, #15
 800e4f6:	d073      	beq.n	800e5e0 <_strtod_l+0x518>
 800e4f8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800e4fc:	dd48      	ble.n	800e590 <_strtod_l+0x4c8>
 800e4fe:	2400      	movs	r4, #0
 800e500:	46a0      	mov	r8, r4
 800e502:	940a      	str	r4, [sp, #40]	@ 0x28
 800e504:	46a1      	mov	r9, r4
 800e506:	9a05      	ldr	r2, [sp, #20]
 800e508:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e660 <_strtod_l+0x598>
 800e50c:	2322      	movs	r3, #34	@ 0x22
 800e50e:	6013      	str	r3, [r2, #0]
 800e510:	f04f 0a00 	mov.w	sl, #0
 800e514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e516:	2b00      	cmp	r3, #0
 800e518:	f43f ae0f 	beq.w	800e13a <_strtod_l+0x72>
 800e51c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e51e:	9805      	ldr	r0, [sp, #20]
 800e520:	f7ff f940 	bl	800d7a4 <_Bfree>
 800e524:	9805      	ldr	r0, [sp, #20]
 800e526:	4649      	mov	r1, r9
 800e528:	f7ff f93c 	bl	800d7a4 <_Bfree>
 800e52c:	9805      	ldr	r0, [sp, #20]
 800e52e:	4641      	mov	r1, r8
 800e530:	f7ff f938 	bl	800d7a4 <_Bfree>
 800e534:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e536:	9805      	ldr	r0, [sp, #20]
 800e538:	f7ff f934 	bl	800d7a4 <_Bfree>
 800e53c:	9805      	ldr	r0, [sp, #20]
 800e53e:	4621      	mov	r1, r4
 800e540:	f7ff f930 	bl	800d7a4 <_Bfree>
 800e544:	e5f9      	b.n	800e13a <_strtod_l+0x72>
 800e546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e548:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800e54c:	4293      	cmp	r3, r2
 800e54e:	dbbc      	blt.n	800e4ca <_strtod_l+0x402>
 800e550:	4c41      	ldr	r4, [pc, #260]	@ (800e658 <_strtod_l+0x590>)
 800e552:	f1c5 050f 	rsb	r5, r5, #15
 800e556:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800e55a:	4652      	mov	r2, sl
 800e55c:	465b      	mov	r3, fp
 800e55e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e562:	f7f2 f869 	bl	8000638 <__aeabi_dmul>
 800e566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e568:	1b5d      	subs	r5, r3, r5
 800e56a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800e56e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800e572:	e78f      	b.n	800e494 <_strtod_l+0x3cc>
 800e574:	3316      	adds	r3, #22
 800e576:	dba8      	blt.n	800e4ca <_strtod_l+0x402>
 800e578:	4b37      	ldr	r3, [pc, #220]	@ (800e658 <_strtod_l+0x590>)
 800e57a:	eba9 0808 	sub.w	r8, r9, r8
 800e57e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800e582:	e9d8 2300 	ldrd	r2, r3, [r8]
 800e586:	4650      	mov	r0, sl
 800e588:	4659      	mov	r1, fp
 800e58a:	f7f2 f97f 	bl	800088c <__aeabi_ddiv>
 800e58e:	e783      	b.n	800e498 <_strtod_l+0x3d0>
 800e590:	4b32      	ldr	r3, [pc, #200]	@ (800e65c <_strtod_l+0x594>)
 800e592:	9308      	str	r3, [sp, #32]
 800e594:	2300      	movs	r3, #0
 800e596:	1124      	asrs	r4, r4, #4
 800e598:	4650      	mov	r0, sl
 800e59a:	4659      	mov	r1, fp
 800e59c:	461e      	mov	r6, r3
 800e59e:	2c01      	cmp	r4, #1
 800e5a0:	dc21      	bgt.n	800e5e6 <_strtod_l+0x51e>
 800e5a2:	b10b      	cbz	r3, 800e5a8 <_strtod_l+0x4e0>
 800e5a4:	4682      	mov	sl, r0
 800e5a6:	468b      	mov	fp, r1
 800e5a8:	492c      	ldr	r1, [pc, #176]	@ (800e65c <_strtod_l+0x594>)
 800e5aa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e5ae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800e5b2:	4652      	mov	r2, sl
 800e5b4:	465b      	mov	r3, fp
 800e5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e5ba:	f7f2 f83d 	bl	8000638 <__aeabi_dmul>
 800e5be:	4b28      	ldr	r3, [pc, #160]	@ (800e660 <_strtod_l+0x598>)
 800e5c0:	460a      	mov	r2, r1
 800e5c2:	400b      	ands	r3, r1
 800e5c4:	4927      	ldr	r1, [pc, #156]	@ (800e664 <_strtod_l+0x59c>)
 800e5c6:	428b      	cmp	r3, r1
 800e5c8:	4682      	mov	sl, r0
 800e5ca:	d898      	bhi.n	800e4fe <_strtod_l+0x436>
 800e5cc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800e5d0:	428b      	cmp	r3, r1
 800e5d2:	bf86      	itte	hi
 800e5d4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800e668 <_strtod_l+0x5a0>
 800e5d8:	f04f 3aff 	movhi.w	sl, #4294967295
 800e5dc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	9308      	str	r3, [sp, #32]
 800e5e4:	e07a      	b.n	800e6dc <_strtod_l+0x614>
 800e5e6:	07e2      	lsls	r2, r4, #31
 800e5e8:	d505      	bpl.n	800e5f6 <_strtod_l+0x52e>
 800e5ea:	9b08      	ldr	r3, [sp, #32]
 800e5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f0:	f7f2 f822 	bl	8000638 <__aeabi_dmul>
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	9a08      	ldr	r2, [sp, #32]
 800e5f8:	3208      	adds	r2, #8
 800e5fa:	3601      	adds	r6, #1
 800e5fc:	1064      	asrs	r4, r4, #1
 800e5fe:	9208      	str	r2, [sp, #32]
 800e600:	e7cd      	b.n	800e59e <_strtod_l+0x4d6>
 800e602:	d0ed      	beq.n	800e5e0 <_strtod_l+0x518>
 800e604:	4264      	negs	r4, r4
 800e606:	f014 020f 	ands.w	r2, r4, #15
 800e60a:	d00a      	beq.n	800e622 <_strtod_l+0x55a>
 800e60c:	4b12      	ldr	r3, [pc, #72]	@ (800e658 <_strtod_l+0x590>)
 800e60e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e612:	4650      	mov	r0, sl
 800e614:	4659      	mov	r1, fp
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	f7f2 f937 	bl	800088c <__aeabi_ddiv>
 800e61e:	4682      	mov	sl, r0
 800e620:	468b      	mov	fp, r1
 800e622:	1124      	asrs	r4, r4, #4
 800e624:	d0dc      	beq.n	800e5e0 <_strtod_l+0x518>
 800e626:	2c1f      	cmp	r4, #31
 800e628:	dd20      	ble.n	800e66c <_strtod_l+0x5a4>
 800e62a:	2400      	movs	r4, #0
 800e62c:	46a0      	mov	r8, r4
 800e62e:	940a      	str	r4, [sp, #40]	@ 0x28
 800e630:	46a1      	mov	r9, r4
 800e632:	9a05      	ldr	r2, [sp, #20]
 800e634:	2322      	movs	r3, #34	@ 0x22
 800e636:	f04f 0a00 	mov.w	sl, #0
 800e63a:	f04f 0b00 	mov.w	fp, #0
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	e768      	b.n	800e514 <_strtod_l+0x44c>
 800e642:	bf00      	nop
 800e644:	08012111 	.word	0x08012111
 800e648:	08012324 	.word	0x08012324
 800e64c:	08012109 	.word	0x08012109
 800e650:	0801213e 	.word	0x0801213e
 800e654:	080124e8 	.word	0x080124e8
 800e658:	08012258 	.word	0x08012258
 800e65c:	08012230 	.word	0x08012230
 800e660:	7ff00000 	.word	0x7ff00000
 800e664:	7ca00000 	.word	0x7ca00000
 800e668:	7fefffff 	.word	0x7fefffff
 800e66c:	f014 0310 	ands.w	r3, r4, #16
 800e670:	bf18      	it	ne
 800e672:	236a      	movne	r3, #106	@ 0x6a
 800e674:	4ea9      	ldr	r6, [pc, #676]	@ (800e91c <_strtod_l+0x854>)
 800e676:	9308      	str	r3, [sp, #32]
 800e678:	4650      	mov	r0, sl
 800e67a:	4659      	mov	r1, fp
 800e67c:	2300      	movs	r3, #0
 800e67e:	07e2      	lsls	r2, r4, #31
 800e680:	d504      	bpl.n	800e68c <_strtod_l+0x5c4>
 800e682:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e686:	f7f1 ffd7 	bl	8000638 <__aeabi_dmul>
 800e68a:	2301      	movs	r3, #1
 800e68c:	1064      	asrs	r4, r4, #1
 800e68e:	f106 0608 	add.w	r6, r6, #8
 800e692:	d1f4      	bne.n	800e67e <_strtod_l+0x5b6>
 800e694:	b10b      	cbz	r3, 800e69a <_strtod_l+0x5d2>
 800e696:	4682      	mov	sl, r0
 800e698:	468b      	mov	fp, r1
 800e69a:	9b08      	ldr	r3, [sp, #32]
 800e69c:	b1b3      	cbz	r3, 800e6cc <_strtod_l+0x604>
 800e69e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800e6a2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	4659      	mov	r1, fp
 800e6aa:	dd0f      	ble.n	800e6cc <_strtod_l+0x604>
 800e6ac:	2b1f      	cmp	r3, #31
 800e6ae:	dd55      	ble.n	800e75c <_strtod_l+0x694>
 800e6b0:	2b34      	cmp	r3, #52	@ 0x34
 800e6b2:	bfde      	ittt	le
 800e6b4:	f04f 33ff 	movle.w	r3, #4294967295
 800e6b8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800e6bc:	4093      	lslle	r3, r2
 800e6be:	f04f 0a00 	mov.w	sl, #0
 800e6c2:	bfcc      	ite	gt
 800e6c4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e6c8:	ea03 0b01 	andle.w	fp, r3, r1
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	4650      	mov	r0, sl
 800e6d2:	4659      	mov	r1, fp
 800e6d4:	f7f2 fa18 	bl	8000b08 <__aeabi_dcmpeq>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	d1a6      	bne.n	800e62a <_strtod_l+0x562>
 800e6dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6de:	9300      	str	r3, [sp, #0]
 800e6e0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800e6e2:	9805      	ldr	r0, [sp, #20]
 800e6e4:	462b      	mov	r3, r5
 800e6e6:	463a      	mov	r2, r7
 800e6e8:	f7ff f8c4 	bl	800d874 <__s2b>
 800e6ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800e6ee:	2800      	cmp	r0, #0
 800e6f0:	f43f af05 	beq.w	800e4fe <_strtod_l+0x436>
 800e6f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6f6:	2a00      	cmp	r2, #0
 800e6f8:	eba9 0308 	sub.w	r3, r9, r8
 800e6fc:	bfa8      	it	ge
 800e6fe:	2300      	movge	r3, #0
 800e700:	9312      	str	r3, [sp, #72]	@ 0x48
 800e702:	2400      	movs	r4, #0
 800e704:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e708:	9316      	str	r3, [sp, #88]	@ 0x58
 800e70a:	46a0      	mov	r8, r4
 800e70c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e70e:	9805      	ldr	r0, [sp, #20]
 800e710:	6859      	ldr	r1, [r3, #4]
 800e712:	f7ff f807 	bl	800d724 <_Balloc>
 800e716:	4681      	mov	r9, r0
 800e718:	2800      	cmp	r0, #0
 800e71a:	f43f aef4 	beq.w	800e506 <_strtod_l+0x43e>
 800e71e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e720:	691a      	ldr	r2, [r3, #16]
 800e722:	3202      	adds	r2, #2
 800e724:	f103 010c 	add.w	r1, r3, #12
 800e728:	0092      	lsls	r2, r2, #2
 800e72a:	300c      	adds	r0, #12
 800e72c:	f7fe f947 	bl	800c9be <memcpy>
 800e730:	ec4b ab10 	vmov	d0, sl, fp
 800e734:	9805      	ldr	r0, [sp, #20]
 800e736:	aa1c      	add	r2, sp, #112	@ 0x70
 800e738:	a91b      	add	r1, sp, #108	@ 0x6c
 800e73a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800e73e:	f7ff fbd5 	bl	800deec <__d2b>
 800e742:	901a      	str	r0, [sp, #104]	@ 0x68
 800e744:	2800      	cmp	r0, #0
 800e746:	f43f aede 	beq.w	800e506 <_strtod_l+0x43e>
 800e74a:	9805      	ldr	r0, [sp, #20]
 800e74c:	2101      	movs	r1, #1
 800e74e:	f7ff f927 	bl	800d9a0 <__i2b>
 800e752:	4680      	mov	r8, r0
 800e754:	b948      	cbnz	r0, 800e76a <_strtod_l+0x6a2>
 800e756:	f04f 0800 	mov.w	r8, #0
 800e75a:	e6d4      	b.n	800e506 <_strtod_l+0x43e>
 800e75c:	f04f 32ff 	mov.w	r2, #4294967295
 800e760:	fa02 f303 	lsl.w	r3, r2, r3
 800e764:	ea03 0a0a 	and.w	sl, r3, sl
 800e768:	e7b0      	b.n	800e6cc <_strtod_l+0x604>
 800e76a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800e76c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800e76e:	2d00      	cmp	r5, #0
 800e770:	bfab      	itete	ge
 800e772:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800e774:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800e776:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800e778:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800e77a:	bfac      	ite	ge
 800e77c:	18ef      	addge	r7, r5, r3
 800e77e:	1b5e      	sublt	r6, r3, r5
 800e780:	9b08      	ldr	r3, [sp, #32]
 800e782:	1aed      	subs	r5, r5, r3
 800e784:	4415      	add	r5, r2
 800e786:	4b66      	ldr	r3, [pc, #408]	@ (800e920 <_strtod_l+0x858>)
 800e788:	3d01      	subs	r5, #1
 800e78a:	429d      	cmp	r5, r3
 800e78c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800e790:	da50      	bge.n	800e834 <_strtod_l+0x76c>
 800e792:	1b5b      	subs	r3, r3, r5
 800e794:	2b1f      	cmp	r3, #31
 800e796:	eba2 0203 	sub.w	r2, r2, r3
 800e79a:	f04f 0101 	mov.w	r1, #1
 800e79e:	dc3d      	bgt.n	800e81c <_strtod_l+0x754>
 800e7a0:	fa01 f303 	lsl.w	r3, r1, r3
 800e7a4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e7aa:	18bd      	adds	r5, r7, r2
 800e7ac:	9b08      	ldr	r3, [sp, #32]
 800e7ae:	42af      	cmp	r7, r5
 800e7b0:	4416      	add	r6, r2
 800e7b2:	441e      	add	r6, r3
 800e7b4:	463b      	mov	r3, r7
 800e7b6:	bfa8      	it	ge
 800e7b8:	462b      	movge	r3, r5
 800e7ba:	42b3      	cmp	r3, r6
 800e7bc:	bfa8      	it	ge
 800e7be:	4633      	movge	r3, r6
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	bfc2      	ittt	gt
 800e7c4:	1aed      	subgt	r5, r5, r3
 800e7c6:	1af6      	subgt	r6, r6, r3
 800e7c8:	1aff      	subgt	r7, r7, r3
 800e7ca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	dd16      	ble.n	800e7fe <_strtod_l+0x736>
 800e7d0:	4641      	mov	r1, r8
 800e7d2:	9805      	ldr	r0, [sp, #20]
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	f7ff f9a3 	bl	800db20 <__pow5mult>
 800e7da:	4680      	mov	r8, r0
 800e7dc:	2800      	cmp	r0, #0
 800e7de:	d0ba      	beq.n	800e756 <_strtod_l+0x68e>
 800e7e0:	4601      	mov	r1, r0
 800e7e2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e7e4:	9805      	ldr	r0, [sp, #20]
 800e7e6:	f7ff f8f1 	bl	800d9cc <__multiply>
 800e7ea:	900e      	str	r0, [sp, #56]	@ 0x38
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	f43f ae8a 	beq.w	800e506 <_strtod_l+0x43e>
 800e7f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7f4:	9805      	ldr	r0, [sp, #20]
 800e7f6:	f7fe ffd5 	bl	800d7a4 <_Bfree>
 800e7fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800e7fe:	2d00      	cmp	r5, #0
 800e800:	dc1d      	bgt.n	800e83e <_strtod_l+0x776>
 800e802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e804:	2b00      	cmp	r3, #0
 800e806:	dd23      	ble.n	800e850 <_strtod_l+0x788>
 800e808:	4649      	mov	r1, r9
 800e80a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800e80c:	9805      	ldr	r0, [sp, #20]
 800e80e:	f7ff f987 	bl	800db20 <__pow5mult>
 800e812:	4681      	mov	r9, r0
 800e814:	b9e0      	cbnz	r0, 800e850 <_strtod_l+0x788>
 800e816:	f04f 0900 	mov.w	r9, #0
 800e81a:	e674      	b.n	800e506 <_strtod_l+0x43e>
 800e81c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800e820:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800e824:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800e828:	35e2      	adds	r5, #226	@ 0xe2
 800e82a:	fa01 f305 	lsl.w	r3, r1, r5
 800e82e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e830:	9113      	str	r1, [sp, #76]	@ 0x4c
 800e832:	e7ba      	b.n	800e7aa <_strtod_l+0x6e2>
 800e834:	2300      	movs	r3, #0
 800e836:	9310      	str	r3, [sp, #64]	@ 0x40
 800e838:	2301      	movs	r3, #1
 800e83a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e83c:	e7b5      	b.n	800e7aa <_strtod_l+0x6e2>
 800e83e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e840:	9805      	ldr	r0, [sp, #20]
 800e842:	462a      	mov	r2, r5
 800e844:	f7ff f9c6 	bl	800dbd4 <__lshift>
 800e848:	901a      	str	r0, [sp, #104]	@ 0x68
 800e84a:	2800      	cmp	r0, #0
 800e84c:	d1d9      	bne.n	800e802 <_strtod_l+0x73a>
 800e84e:	e65a      	b.n	800e506 <_strtod_l+0x43e>
 800e850:	2e00      	cmp	r6, #0
 800e852:	dd07      	ble.n	800e864 <_strtod_l+0x79c>
 800e854:	4649      	mov	r1, r9
 800e856:	9805      	ldr	r0, [sp, #20]
 800e858:	4632      	mov	r2, r6
 800e85a:	f7ff f9bb 	bl	800dbd4 <__lshift>
 800e85e:	4681      	mov	r9, r0
 800e860:	2800      	cmp	r0, #0
 800e862:	d0d8      	beq.n	800e816 <_strtod_l+0x74e>
 800e864:	2f00      	cmp	r7, #0
 800e866:	dd08      	ble.n	800e87a <_strtod_l+0x7b2>
 800e868:	4641      	mov	r1, r8
 800e86a:	9805      	ldr	r0, [sp, #20]
 800e86c:	463a      	mov	r2, r7
 800e86e:	f7ff f9b1 	bl	800dbd4 <__lshift>
 800e872:	4680      	mov	r8, r0
 800e874:	2800      	cmp	r0, #0
 800e876:	f43f ae46 	beq.w	800e506 <_strtod_l+0x43e>
 800e87a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e87c:	9805      	ldr	r0, [sp, #20]
 800e87e:	464a      	mov	r2, r9
 800e880:	f7ff fa30 	bl	800dce4 <__mdiff>
 800e884:	4604      	mov	r4, r0
 800e886:	2800      	cmp	r0, #0
 800e888:	f43f ae3d 	beq.w	800e506 <_strtod_l+0x43e>
 800e88c:	68c3      	ldr	r3, [r0, #12]
 800e88e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e890:	2300      	movs	r3, #0
 800e892:	60c3      	str	r3, [r0, #12]
 800e894:	4641      	mov	r1, r8
 800e896:	f7ff fa09 	bl	800dcac <__mcmp>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	da46      	bge.n	800e92c <_strtod_l+0x864>
 800e89e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8a0:	ea53 030a 	orrs.w	r3, r3, sl
 800e8a4:	d16c      	bne.n	800e980 <_strtod_l+0x8b8>
 800e8a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d168      	bne.n	800e980 <_strtod_l+0x8b8>
 800e8ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e8b2:	0d1b      	lsrs	r3, r3, #20
 800e8b4:	051b      	lsls	r3, r3, #20
 800e8b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e8ba:	d961      	bls.n	800e980 <_strtod_l+0x8b8>
 800e8bc:	6963      	ldr	r3, [r4, #20]
 800e8be:	b913      	cbnz	r3, 800e8c6 <_strtod_l+0x7fe>
 800e8c0:	6923      	ldr	r3, [r4, #16]
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	dd5c      	ble.n	800e980 <_strtod_l+0x8b8>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	2201      	movs	r2, #1
 800e8ca:	9805      	ldr	r0, [sp, #20]
 800e8cc:	f7ff f982 	bl	800dbd4 <__lshift>
 800e8d0:	4641      	mov	r1, r8
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	f7ff f9ea 	bl	800dcac <__mcmp>
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	dd51      	ble.n	800e980 <_strtod_l+0x8b8>
 800e8dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e8e0:	9a08      	ldr	r2, [sp, #32]
 800e8e2:	0d1b      	lsrs	r3, r3, #20
 800e8e4:	051b      	lsls	r3, r3, #20
 800e8e6:	2a00      	cmp	r2, #0
 800e8e8:	d06b      	beq.n	800e9c2 <_strtod_l+0x8fa>
 800e8ea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e8ee:	d868      	bhi.n	800e9c2 <_strtod_l+0x8fa>
 800e8f0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e8f4:	f67f ae9d 	bls.w	800e632 <_strtod_l+0x56a>
 800e8f8:	4b0a      	ldr	r3, [pc, #40]	@ (800e924 <_strtod_l+0x85c>)
 800e8fa:	4650      	mov	r0, sl
 800e8fc:	4659      	mov	r1, fp
 800e8fe:	2200      	movs	r2, #0
 800e900:	f7f1 fe9a 	bl	8000638 <__aeabi_dmul>
 800e904:	4b08      	ldr	r3, [pc, #32]	@ (800e928 <_strtod_l+0x860>)
 800e906:	400b      	ands	r3, r1
 800e908:	4682      	mov	sl, r0
 800e90a:	468b      	mov	fp, r1
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	f47f ae05 	bne.w	800e51c <_strtod_l+0x454>
 800e912:	9a05      	ldr	r2, [sp, #20]
 800e914:	2322      	movs	r3, #34	@ 0x22
 800e916:	6013      	str	r3, [r2, #0]
 800e918:	e600      	b.n	800e51c <_strtod_l+0x454>
 800e91a:	bf00      	nop
 800e91c:	08012350 	.word	0x08012350
 800e920:	fffffc02 	.word	0xfffffc02
 800e924:	39500000 	.word	0x39500000
 800e928:	7ff00000 	.word	0x7ff00000
 800e92c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800e930:	d165      	bne.n	800e9fe <_strtod_l+0x936>
 800e932:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e934:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e938:	b35a      	cbz	r2, 800e992 <_strtod_l+0x8ca>
 800e93a:	4a9f      	ldr	r2, [pc, #636]	@ (800ebb8 <_strtod_l+0xaf0>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d12b      	bne.n	800e998 <_strtod_l+0x8d0>
 800e940:	9b08      	ldr	r3, [sp, #32]
 800e942:	4651      	mov	r1, sl
 800e944:	b303      	cbz	r3, 800e988 <_strtod_l+0x8c0>
 800e946:	4b9d      	ldr	r3, [pc, #628]	@ (800ebbc <_strtod_l+0xaf4>)
 800e948:	465a      	mov	r2, fp
 800e94a:	4013      	ands	r3, r2
 800e94c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e950:	f04f 32ff 	mov.w	r2, #4294967295
 800e954:	d81b      	bhi.n	800e98e <_strtod_l+0x8c6>
 800e956:	0d1b      	lsrs	r3, r3, #20
 800e958:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e95c:	fa02 f303 	lsl.w	r3, r2, r3
 800e960:	4299      	cmp	r1, r3
 800e962:	d119      	bne.n	800e998 <_strtod_l+0x8d0>
 800e964:	4b96      	ldr	r3, [pc, #600]	@ (800ebc0 <_strtod_l+0xaf8>)
 800e966:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e968:	429a      	cmp	r2, r3
 800e96a:	d102      	bne.n	800e972 <_strtod_l+0x8aa>
 800e96c:	3101      	adds	r1, #1
 800e96e:	f43f adca 	beq.w	800e506 <_strtod_l+0x43e>
 800e972:	4b92      	ldr	r3, [pc, #584]	@ (800ebbc <_strtod_l+0xaf4>)
 800e974:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e976:	401a      	ands	r2, r3
 800e978:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800e97c:	f04f 0a00 	mov.w	sl, #0
 800e980:	9b08      	ldr	r3, [sp, #32]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1b8      	bne.n	800e8f8 <_strtod_l+0x830>
 800e986:	e5c9      	b.n	800e51c <_strtod_l+0x454>
 800e988:	f04f 33ff 	mov.w	r3, #4294967295
 800e98c:	e7e8      	b.n	800e960 <_strtod_l+0x898>
 800e98e:	4613      	mov	r3, r2
 800e990:	e7e6      	b.n	800e960 <_strtod_l+0x898>
 800e992:	ea53 030a 	orrs.w	r3, r3, sl
 800e996:	d0a1      	beq.n	800e8dc <_strtod_l+0x814>
 800e998:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e99a:	b1db      	cbz	r3, 800e9d4 <_strtod_l+0x90c>
 800e99c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e99e:	4213      	tst	r3, r2
 800e9a0:	d0ee      	beq.n	800e980 <_strtod_l+0x8b8>
 800e9a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9a4:	9a08      	ldr	r2, [sp, #32]
 800e9a6:	4650      	mov	r0, sl
 800e9a8:	4659      	mov	r1, fp
 800e9aa:	b1bb      	cbz	r3, 800e9dc <_strtod_l+0x914>
 800e9ac:	f7ff fb6c 	bl	800e088 <sulp>
 800e9b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9b4:	ec53 2b10 	vmov	r2, r3, d0
 800e9b8:	f7f1 fc88 	bl	80002cc <__adddf3>
 800e9bc:	4682      	mov	sl, r0
 800e9be:	468b      	mov	fp, r1
 800e9c0:	e7de      	b.n	800e980 <_strtod_l+0x8b8>
 800e9c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e9c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e9ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e9ce:	f04f 3aff 	mov.w	sl, #4294967295
 800e9d2:	e7d5      	b.n	800e980 <_strtod_l+0x8b8>
 800e9d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e9d6:	ea13 0f0a 	tst.w	r3, sl
 800e9da:	e7e1      	b.n	800e9a0 <_strtod_l+0x8d8>
 800e9dc:	f7ff fb54 	bl	800e088 <sulp>
 800e9e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9e4:	ec53 2b10 	vmov	r2, r3, d0
 800e9e8:	f7f1 fc6e 	bl	80002c8 <__aeabi_dsub>
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	4682      	mov	sl, r0
 800e9f2:	468b      	mov	fp, r1
 800e9f4:	f7f2 f888 	bl	8000b08 <__aeabi_dcmpeq>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d0c1      	beq.n	800e980 <_strtod_l+0x8b8>
 800e9fc:	e619      	b.n	800e632 <_strtod_l+0x56a>
 800e9fe:	4641      	mov	r1, r8
 800ea00:	4620      	mov	r0, r4
 800ea02:	f7ff facb 	bl	800df9c <__ratio>
 800ea06:	ec57 6b10 	vmov	r6, r7, d0
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ea10:	4630      	mov	r0, r6
 800ea12:	4639      	mov	r1, r7
 800ea14:	f7f2 f88c 	bl	8000b30 <__aeabi_dcmple>
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	d06f      	beq.n	800eafc <_strtod_l+0xa34>
 800ea1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d17a      	bne.n	800eb18 <_strtod_l+0xa50>
 800ea22:	f1ba 0f00 	cmp.w	sl, #0
 800ea26:	d158      	bne.n	800eada <_strtod_l+0xa12>
 800ea28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d15a      	bne.n	800eae8 <_strtod_l+0xa20>
 800ea32:	4b64      	ldr	r3, [pc, #400]	@ (800ebc4 <_strtod_l+0xafc>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	4630      	mov	r0, r6
 800ea38:	4639      	mov	r1, r7
 800ea3a:	f7f2 f86f 	bl	8000b1c <__aeabi_dcmplt>
 800ea3e:	2800      	cmp	r0, #0
 800ea40:	d159      	bne.n	800eaf6 <_strtod_l+0xa2e>
 800ea42:	4630      	mov	r0, r6
 800ea44:	4639      	mov	r1, r7
 800ea46:	4b60      	ldr	r3, [pc, #384]	@ (800ebc8 <_strtod_l+0xb00>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	f7f1 fdf5 	bl	8000638 <__aeabi_dmul>
 800ea4e:	4606      	mov	r6, r0
 800ea50:	460f      	mov	r7, r1
 800ea52:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ea56:	9606      	str	r6, [sp, #24]
 800ea58:	9307      	str	r3, [sp, #28]
 800ea5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea5e:	4d57      	ldr	r5, [pc, #348]	@ (800ebbc <_strtod_l+0xaf4>)
 800ea60:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ea64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea66:	401d      	ands	r5, r3
 800ea68:	4b58      	ldr	r3, [pc, #352]	@ (800ebcc <_strtod_l+0xb04>)
 800ea6a:	429d      	cmp	r5, r3
 800ea6c:	f040 80b2 	bne.w	800ebd4 <_strtod_l+0xb0c>
 800ea70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ea72:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ea76:	ec4b ab10 	vmov	d0, sl, fp
 800ea7a:	f7ff f9c7 	bl	800de0c <__ulp>
 800ea7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ea82:	ec51 0b10 	vmov	r0, r1, d0
 800ea86:	f7f1 fdd7 	bl	8000638 <__aeabi_dmul>
 800ea8a:	4652      	mov	r2, sl
 800ea8c:	465b      	mov	r3, fp
 800ea8e:	f7f1 fc1d 	bl	80002cc <__adddf3>
 800ea92:	460b      	mov	r3, r1
 800ea94:	4949      	ldr	r1, [pc, #292]	@ (800ebbc <_strtod_l+0xaf4>)
 800ea96:	4a4e      	ldr	r2, [pc, #312]	@ (800ebd0 <_strtod_l+0xb08>)
 800ea98:	4019      	ands	r1, r3
 800ea9a:	4291      	cmp	r1, r2
 800ea9c:	4682      	mov	sl, r0
 800ea9e:	d942      	bls.n	800eb26 <_strtod_l+0xa5e>
 800eaa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800eaa2:	4b47      	ldr	r3, [pc, #284]	@ (800ebc0 <_strtod_l+0xaf8>)
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d103      	bne.n	800eab0 <_strtod_l+0x9e8>
 800eaa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eaaa:	3301      	adds	r3, #1
 800eaac:	f43f ad2b 	beq.w	800e506 <_strtod_l+0x43e>
 800eab0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ebc0 <_strtod_l+0xaf8>
 800eab4:	f04f 3aff 	mov.w	sl, #4294967295
 800eab8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eaba:	9805      	ldr	r0, [sp, #20]
 800eabc:	f7fe fe72 	bl	800d7a4 <_Bfree>
 800eac0:	9805      	ldr	r0, [sp, #20]
 800eac2:	4649      	mov	r1, r9
 800eac4:	f7fe fe6e 	bl	800d7a4 <_Bfree>
 800eac8:	9805      	ldr	r0, [sp, #20]
 800eaca:	4641      	mov	r1, r8
 800eacc:	f7fe fe6a 	bl	800d7a4 <_Bfree>
 800ead0:	9805      	ldr	r0, [sp, #20]
 800ead2:	4621      	mov	r1, r4
 800ead4:	f7fe fe66 	bl	800d7a4 <_Bfree>
 800ead8:	e618      	b.n	800e70c <_strtod_l+0x644>
 800eada:	f1ba 0f01 	cmp.w	sl, #1
 800eade:	d103      	bne.n	800eae8 <_strtod_l+0xa20>
 800eae0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f43f ada5 	beq.w	800e632 <_strtod_l+0x56a>
 800eae8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800eb98 <_strtod_l+0xad0>
 800eaec:	4f35      	ldr	r7, [pc, #212]	@ (800ebc4 <_strtod_l+0xafc>)
 800eaee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eaf2:	2600      	movs	r6, #0
 800eaf4:	e7b1      	b.n	800ea5a <_strtod_l+0x992>
 800eaf6:	4f34      	ldr	r7, [pc, #208]	@ (800ebc8 <_strtod_l+0xb00>)
 800eaf8:	2600      	movs	r6, #0
 800eafa:	e7aa      	b.n	800ea52 <_strtod_l+0x98a>
 800eafc:	4b32      	ldr	r3, [pc, #200]	@ (800ebc8 <_strtod_l+0xb00>)
 800eafe:	4630      	mov	r0, r6
 800eb00:	4639      	mov	r1, r7
 800eb02:	2200      	movs	r2, #0
 800eb04:	f7f1 fd98 	bl	8000638 <__aeabi_dmul>
 800eb08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb0a:	4606      	mov	r6, r0
 800eb0c:	460f      	mov	r7, r1
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d09f      	beq.n	800ea52 <_strtod_l+0x98a>
 800eb12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800eb16:	e7a0      	b.n	800ea5a <_strtod_l+0x992>
 800eb18:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eba0 <_strtod_l+0xad8>
 800eb1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb20:	ec57 6b17 	vmov	r6, r7, d7
 800eb24:	e799      	b.n	800ea5a <_strtod_l+0x992>
 800eb26:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800eb2a:	9b08      	ldr	r3, [sp, #32]
 800eb2c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1c1      	bne.n	800eab8 <_strtod_l+0x9f0>
 800eb34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb38:	0d1b      	lsrs	r3, r3, #20
 800eb3a:	051b      	lsls	r3, r3, #20
 800eb3c:	429d      	cmp	r5, r3
 800eb3e:	d1bb      	bne.n	800eab8 <_strtod_l+0x9f0>
 800eb40:	4630      	mov	r0, r6
 800eb42:	4639      	mov	r1, r7
 800eb44:	f7f2 fa36 	bl	8000fb4 <__aeabi_d2lz>
 800eb48:	f7f1 fd48 	bl	80005dc <__aeabi_l2d>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	460b      	mov	r3, r1
 800eb50:	4630      	mov	r0, r6
 800eb52:	4639      	mov	r1, r7
 800eb54:	f7f1 fbb8 	bl	80002c8 <__aeabi_dsub>
 800eb58:	460b      	mov	r3, r1
 800eb5a:	4602      	mov	r2, r0
 800eb5c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800eb60:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800eb64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb66:	ea46 060a 	orr.w	r6, r6, sl
 800eb6a:	431e      	orrs	r6, r3
 800eb6c:	d06f      	beq.n	800ec4e <_strtod_l+0xb86>
 800eb6e:	a30e      	add	r3, pc, #56	@ (adr r3, 800eba8 <_strtod_l+0xae0>)
 800eb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb74:	f7f1 ffd2 	bl	8000b1c <__aeabi_dcmplt>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	f47f accf 	bne.w	800e51c <_strtod_l+0x454>
 800eb7e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ebb0 <_strtod_l+0xae8>)
 800eb80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb88:	f7f1 ffe6 	bl	8000b58 <__aeabi_dcmpgt>
 800eb8c:	2800      	cmp	r0, #0
 800eb8e:	d093      	beq.n	800eab8 <_strtod_l+0x9f0>
 800eb90:	e4c4      	b.n	800e51c <_strtod_l+0x454>
 800eb92:	bf00      	nop
 800eb94:	f3af 8000 	nop.w
 800eb98:	00000000 	.word	0x00000000
 800eb9c:	bff00000 	.word	0xbff00000
 800eba0:	00000000 	.word	0x00000000
 800eba4:	3ff00000 	.word	0x3ff00000
 800eba8:	94a03595 	.word	0x94a03595
 800ebac:	3fdfffff 	.word	0x3fdfffff
 800ebb0:	35afe535 	.word	0x35afe535
 800ebb4:	3fe00000 	.word	0x3fe00000
 800ebb8:	000fffff 	.word	0x000fffff
 800ebbc:	7ff00000 	.word	0x7ff00000
 800ebc0:	7fefffff 	.word	0x7fefffff
 800ebc4:	3ff00000 	.word	0x3ff00000
 800ebc8:	3fe00000 	.word	0x3fe00000
 800ebcc:	7fe00000 	.word	0x7fe00000
 800ebd0:	7c9fffff 	.word	0x7c9fffff
 800ebd4:	9b08      	ldr	r3, [sp, #32]
 800ebd6:	b323      	cbz	r3, 800ec22 <_strtod_l+0xb5a>
 800ebd8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ebdc:	d821      	bhi.n	800ec22 <_strtod_l+0xb5a>
 800ebde:	a328      	add	r3, pc, #160	@ (adr r3, 800ec80 <_strtod_l+0xbb8>)
 800ebe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebe4:	4630      	mov	r0, r6
 800ebe6:	4639      	mov	r1, r7
 800ebe8:	f7f1 ffa2 	bl	8000b30 <__aeabi_dcmple>
 800ebec:	b1a0      	cbz	r0, 800ec18 <_strtod_l+0xb50>
 800ebee:	4639      	mov	r1, r7
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	f7f1 fff9 	bl	8000be8 <__aeabi_d2uiz>
 800ebf6:	2801      	cmp	r0, #1
 800ebf8:	bf38      	it	cc
 800ebfa:	2001      	movcc	r0, #1
 800ebfc:	f7f1 fca2 	bl	8000544 <__aeabi_ui2d>
 800ec00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec02:	4606      	mov	r6, r0
 800ec04:	460f      	mov	r7, r1
 800ec06:	b9fb      	cbnz	r3, 800ec48 <_strtod_l+0xb80>
 800ec08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec0c:	9014      	str	r0, [sp, #80]	@ 0x50
 800ec0e:	9315      	str	r3, [sp, #84]	@ 0x54
 800ec10:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ec14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ec18:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ec1a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ec1e:	1b5b      	subs	r3, r3, r5
 800ec20:	9311      	str	r3, [sp, #68]	@ 0x44
 800ec22:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ec26:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ec2a:	f7ff f8ef 	bl	800de0c <__ulp>
 800ec2e:	4650      	mov	r0, sl
 800ec30:	ec53 2b10 	vmov	r2, r3, d0
 800ec34:	4659      	mov	r1, fp
 800ec36:	f7f1 fcff 	bl	8000638 <__aeabi_dmul>
 800ec3a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ec3e:	f7f1 fb45 	bl	80002cc <__adddf3>
 800ec42:	4682      	mov	sl, r0
 800ec44:	468b      	mov	fp, r1
 800ec46:	e770      	b.n	800eb2a <_strtod_l+0xa62>
 800ec48:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ec4c:	e7e0      	b.n	800ec10 <_strtod_l+0xb48>
 800ec4e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ec88 <_strtod_l+0xbc0>)
 800ec50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec54:	f7f1 ff62 	bl	8000b1c <__aeabi_dcmplt>
 800ec58:	e798      	b.n	800eb8c <_strtod_l+0xac4>
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec5e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ec60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec62:	6013      	str	r3, [r2, #0]
 800ec64:	f7ff ba6d 	b.w	800e142 <_strtod_l+0x7a>
 800ec68:	2a65      	cmp	r2, #101	@ 0x65
 800ec6a:	f43f ab66 	beq.w	800e33a <_strtod_l+0x272>
 800ec6e:	2a45      	cmp	r2, #69	@ 0x45
 800ec70:	f43f ab63 	beq.w	800e33a <_strtod_l+0x272>
 800ec74:	2301      	movs	r3, #1
 800ec76:	f7ff bb9e 	b.w	800e3b6 <_strtod_l+0x2ee>
 800ec7a:	bf00      	nop
 800ec7c:	f3af 8000 	nop.w
 800ec80:	ffc00000 	.word	0xffc00000
 800ec84:	41dfffff 	.word	0x41dfffff
 800ec88:	94a03595 	.word	0x94a03595
 800ec8c:	3fcfffff 	.word	0x3fcfffff

0800ec90 <_strtod_r>:
 800ec90:	4b01      	ldr	r3, [pc, #4]	@ (800ec98 <_strtod_r+0x8>)
 800ec92:	f7ff ba19 	b.w	800e0c8 <_strtod_l>
 800ec96:	bf00      	nop
 800ec98:	20000094 	.word	0x20000094

0800ec9c <_strtol_l.constprop.0>:
 800ec9c:	2b24      	cmp	r3, #36	@ 0x24
 800ec9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eca2:	4686      	mov	lr, r0
 800eca4:	4690      	mov	r8, r2
 800eca6:	d801      	bhi.n	800ecac <_strtol_l.constprop.0+0x10>
 800eca8:	2b01      	cmp	r3, #1
 800ecaa:	d106      	bne.n	800ecba <_strtol_l.constprop.0+0x1e>
 800ecac:	f7fd fe5a 	bl	800c964 <__errno>
 800ecb0:	2316      	movs	r3, #22
 800ecb2:	6003      	str	r3, [r0, #0]
 800ecb4:	2000      	movs	r0, #0
 800ecb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecba:	4834      	ldr	r0, [pc, #208]	@ (800ed8c <_strtol_l.constprop.0+0xf0>)
 800ecbc:	460d      	mov	r5, r1
 800ecbe:	462a      	mov	r2, r5
 800ecc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ecc4:	5d06      	ldrb	r6, [r0, r4]
 800ecc6:	f016 0608 	ands.w	r6, r6, #8
 800ecca:	d1f8      	bne.n	800ecbe <_strtol_l.constprop.0+0x22>
 800eccc:	2c2d      	cmp	r4, #45	@ 0x2d
 800ecce:	d12d      	bne.n	800ed2c <_strtol_l.constprop.0+0x90>
 800ecd0:	782c      	ldrb	r4, [r5, #0]
 800ecd2:	2601      	movs	r6, #1
 800ecd4:	1c95      	adds	r5, r2, #2
 800ecd6:	f033 0210 	bics.w	r2, r3, #16
 800ecda:	d109      	bne.n	800ecf0 <_strtol_l.constprop.0+0x54>
 800ecdc:	2c30      	cmp	r4, #48	@ 0x30
 800ecde:	d12a      	bne.n	800ed36 <_strtol_l.constprop.0+0x9a>
 800ece0:	782a      	ldrb	r2, [r5, #0]
 800ece2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ece6:	2a58      	cmp	r2, #88	@ 0x58
 800ece8:	d125      	bne.n	800ed36 <_strtol_l.constprop.0+0x9a>
 800ecea:	786c      	ldrb	r4, [r5, #1]
 800ecec:	2310      	movs	r3, #16
 800ecee:	3502      	adds	r5, #2
 800ecf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ecf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	fbbc f9f3 	udiv	r9, ip, r3
 800ecfe:	4610      	mov	r0, r2
 800ed00:	fb03 ca19 	mls	sl, r3, r9, ip
 800ed04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ed08:	2f09      	cmp	r7, #9
 800ed0a:	d81b      	bhi.n	800ed44 <_strtol_l.constprop.0+0xa8>
 800ed0c:	463c      	mov	r4, r7
 800ed0e:	42a3      	cmp	r3, r4
 800ed10:	dd27      	ble.n	800ed62 <_strtol_l.constprop.0+0xc6>
 800ed12:	1c57      	adds	r7, r2, #1
 800ed14:	d007      	beq.n	800ed26 <_strtol_l.constprop.0+0x8a>
 800ed16:	4581      	cmp	r9, r0
 800ed18:	d320      	bcc.n	800ed5c <_strtol_l.constprop.0+0xc0>
 800ed1a:	d101      	bne.n	800ed20 <_strtol_l.constprop.0+0x84>
 800ed1c:	45a2      	cmp	sl, r4
 800ed1e:	db1d      	blt.n	800ed5c <_strtol_l.constprop.0+0xc0>
 800ed20:	fb00 4003 	mla	r0, r0, r3, r4
 800ed24:	2201      	movs	r2, #1
 800ed26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed2a:	e7eb      	b.n	800ed04 <_strtol_l.constprop.0+0x68>
 800ed2c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ed2e:	bf04      	itt	eq
 800ed30:	782c      	ldrbeq	r4, [r5, #0]
 800ed32:	1c95      	addeq	r5, r2, #2
 800ed34:	e7cf      	b.n	800ecd6 <_strtol_l.constprop.0+0x3a>
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d1da      	bne.n	800ecf0 <_strtol_l.constprop.0+0x54>
 800ed3a:	2c30      	cmp	r4, #48	@ 0x30
 800ed3c:	bf0c      	ite	eq
 800ed3e:	2308      	moveq	r3, #8
 800ed40:	230a      	movne	r3, #10
 800ed42:	e7d5      	b.n	800ecf0 <_strtol_l.constprop.0+0x54>
 800ed44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ed48:	2f19      	cmp	r7, #25
 800ed4a:	d801      	bhi.n	800ed50 <_strtol_l.constprop.0+0xb4>
 800ed4c:	3c37      	subs	r4, #55	@ 0x37
 800ed4e:	e7de      	b.n	800ed0e <_strtol_l.constprop.0+0x72>
 800ed50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ed54:	2f19      	cmp	r7, #25
 800ed56:	d804      	bhi.n	800ed62 <_strtol_l.constprop.0+0xc6>
 800ed58:	3c57      	subs	r4, #87	@ 0x57
 800ed5a:	e7d8      	b.n	800ed0e <_strtol_l.constprop.0+0x72>
 800ed5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed60:	e7e1      	b.n	800ed26 <_strtol_l.constprop.0+0x8a>
 800ed62:	1c53      	adds	r3, r2, #1
 800ed64:	d108      	bne.n	800ed78 <_strtol_l.constprop.0+0xdc>
 800ed66:	2322      	movs	r3, #34	@ 0x22
 800ed68:	f8ce 3000 	str.w	r3, [lr]
 800ed6c:	4660      	mov	r0, ip
 800ed6e:	f1b8 0f00 	cmp.w	r8, #0
 800ed72:	d0a0      	beq.n	800ecb6 <_strtol_l.constprop.0+0x1a>
 800ed74:	1e69      	subs	r1, r5, #1
 800ed76:	e006      	b.n	800ed86 <_strtol_l.constprop.0+0xea>
 800ed78:	b106      	cbz	r6, 800ed7c <_strtol_l.constprop.0+0xe0>
 800ed7a:	4240      	negs	r0, r0
 800ed7c:	f1b8 0f00 	cmp.w	r8, #0
 800ed80:	d099      	beq.n	800ecb6 <_strtol_l.constprop.0+0x1a>
 800ed82:	2a00      	cmp	r2, #0
 800ed84:	d1f6      	bne.n	800ed74 <_strtol_l.constprop.0+0xd8>
 800ed86:	f8c8 1000 	str.w	r1, [r8]
 800ed8a:	e794      	b.n	800ecb6 <_strtol_l.constprop.0+0x1a>
 800ed8c:	08012379 	.word	0x08012379

0800ed90 <_strtol_r>:
 800ed90:	f7ff bf84 	b.w	800ec9c <_strtol_l.constprop.0>

0800ed94 <__ssputs_r>:
 800ed94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed98:	688e      	ldr	r6, [r1, #8]
 800ed9a:	461f      	mov	r7, r3
 800ed9c:	42be      	cmp	r6, r7
 800ed9e:	680b      	ldr	r3, [r1, #0]
 800eda0:	4682      	mov	sl, r0
 800eda2:	460c      	mov	r4, r1
 800eda4:	4690      	mov	r8, r2
 800eda6:	d82d      	bhi.n	800ee04 <__ssputs_r+0x70>
 800eda8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800edac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800edb0:	d026      	beq.n	800ee00 <__ssputs_r+0x6c>
 800edb2:	6965      	ldr	r5, [r4, #20]
 800edb4:	6909      	ldr	r1, [r1, #16]
 800edb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800edba:	eba3 0901 	sub.w	r9, r3, r1
 800edbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800edc2:	1c7b      	adds	r3, r7, #1
 800edc4:	444b      	add	r3, r9
 800edc6:	106d      	asrs	r5, r5, #1
 800edc8:	429d      	cmp	r5, r3
 800edca:	bf38      	it	cc
 800edcc:	461d      	movcc	r5, r3
 800edce:	0553      	lsls	r3, r2, #21
 800edd0:	d527      	bpl.n	800ee22 <__ssputs_r+0x8e>
 800edd2:	4629      	mov	r1, r5
 800edd4:	f7fc fcf4 	bl	800b7c0 <_malloc_r>
 800edd8:	4606      	mov	r6, r0
 800edda:	b360      	cbz	r0, 800ee36 <__ssputs_r+0xa2>
 800eddc:	6921      	ldr	r1, [r4, #16]
 800edde:	464a      	mov	r2, r9
 800ede0:	f7fd fded 	bl	800c9be <memcpy>
 800ede4:	89a3      	ldrh	r3, [r4, #12]
 800ede6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800edea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800edee:	81a3      	strh	r3, [r4, #12]
 800edf0:	6126      	str	r6, [r4, #16]
 800edf2:	6165      	str	r5, [r4, #20]
 800edf4:	444e      	add	r6, r9
 800edf6:	eba5 0509 	sub.w	r5, r5, r9
 800edfa:	6026      	str	r6, [r4, #0]
 800edfc:	60a5      	str	r5, [r4, #8]
 800edfe:	463e      	mov	r6, r7
 800ee00:	42be      	cmp	r6, r7
 800ee02:	d900      	bls.n	800ee06 <__ssputs_r+0x72>
 800ee04:	463e      	mov	r6, r7
 800ee06:	6820      	ldr	r0, [r4, #0]
 800ee08:	4632      	mov	r2, r6
 800ee0a:	4641      	mov	r1, r8
 800ee0c:	f000 fd53 	bl	800f8b6 <memmove>
 800ee10:	68a3      	ldr	r3, [r4, #8]
 800ee12:	1b9b      	subs	r3, r3, r6
 800ee14:	60a3      	str	r3, [r4, #8]
 800ee16:	6823      	ldr	r3, [r4, #0]
 800ee18:	4433      	add	r3, r6
 800ee1a:	6023      	str	r3, [r4, #0]
 800ee1c:	2000      	movs	r0, #0
 800ee1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee22:	462a      	mov	r2, r5
 800ee24:	f001 f8e5 	bl	800fff2 <_realloc_r>
 800ee28:	4606      	mov	r6, r0
 800ee2a:	2800      	cmp	r0, #0
 800ee2c:	d1e0      	bne.n	800edf0 <__ssputs_r+0x5c>
 800ee2e:	6921      	ldr	r1, [r4, #16]
 800ee30:	4650      	mov	r0, sl
 800ee32:	f7fe fc25 	bl	800d680 <_free_r>
 800ee36:	230c      	movs	r3, #12
 800ee38:	f8ca 3000 	str.w	r3, [sl]
 800ee3c:	89a3      	ldrh	r3, [r4, #12]
 800ee3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee42:	81a3      	strh	r3, [r4, #12]
 800ee44:	f04f 30ff 	mov.w	r0, #4294967295
 800ee48:	e7e9      	b.n	800ee1e <__ssputs_r+0x8a>
	...

0800ee4c <_svfiprintf_r>:
 800ee4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee50:	4698      	mov	r8, r3
 800ee52:	898b      	ldrh	r3, [r1, #12]
 800ee54:	061b      	lsls	r3, r3, #24
 800ee56:	b09d      	sub	sp, #116	@ 0x74
 800ee58:	4607      	mov	r7, r0
 800ee5a:	460d      	mov	r5, r1
 800ee5c:	4614      	mov	r4, r2
 800ee5e:	d510      	bpl.n	800ee82 <_svfiprintf_r+0x36>
 800ee60:	690b      	ldr	r3, [r1, #16]
 800ee62:	b973      	cbnz	r3, 800ee82 <_svfiprintf_r+0x36>
 800ee64:	2140      	movs	r1, #64	@ 0x40
 800ee66:	f7fc fcab 	bl	800b7c0 <_malloc_r>
 800ee6a:	6028      	str	r0, [r5, #0]
 800ee6c:	6128      	str	r0, [r5, #16]
 800ee6e:	b930      	cbnz	r0, 800ee7e <_svfiprintf_r+0x32>
 800ee70:	230c      	movs	r3, #12
 800ee72:	603b      	str	r3, [r7, #0]
 800ee74:	f04f 30ff 	mov.w	r0, #4294967295
 800ee78:	b01d      	add	sp, #116	@ 0x74
 800ee7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee7e:	2340      	movs	r3, #64	@ 0x40
 800ee80:	616b      	str	r3, [r5, #20]
 800ee82:	2300      	movs	r3, #0
 800ee84:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee86:	2320      	movs	r3, #32
 800ee88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee8c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee90:	2330      	movs	r3, #48	@ 0x30
 800ee92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f030 <_svfiprintf_r+0x1e4>
 800ee96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee9a:	f04f 0901 	mov.w	r9, #1
 800ee9e:	4623      	mov	r3, r4
 800eea0:	469a      	mov	sl, r3
 800eea2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eea6:	b10a      	cbz	r2, 800eeac <_svfiprintf_r+0x60>
 800eea8:	2a25      	cmp	r2, #37	@ 0x25
 800eeaa:	d1f9      	bne.n	800eea0 <_svfiprintf_r+0x54>
 800eeac:	ebba 0b04 	subs.w	fp, sl, r4
 800eeb0:	d00b      	beq.n	800eeca <_svfiprintf_r+0x7e>
 800eeb2:	465b      	mov	r3, fp
 800eeb4:	4622      	mov	r2, r4
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	4638      	mov	r0, r7
 800eeba:	f7ff ff6b 	bl	800ed94 <__ssputs_r>
 800eebe:	3001      	adds	r0, #1
 800eec0:	f000 80a7 	beq.w	800f012 <_svfiprintf_r+0x1c6>
 800eec4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eec6:	445a      	add	r2, fp
 800eec8:	9209      	str	r2, [sp, #36]	@ 0x24
 800eeca:	f89a 3000 	ldrb.w	r3, [sl]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	f000 809f 	beq.w	800f012 <_svfiprintf_r+0x1c6>
 800eed4:	2300      	movs	r3, #0
 800eed6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eede:	f10a 0a01 	add.w	sl, sl, #1
 800eee2:	9304      	str	r3, [sp, #16]
 800eee4:	9307      	str	r3, [sp, #28]
 800eee6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eeea:	931a      	str	r3, [sp, #104]	@ 0x68
 800eeec:	4654      	mov	r4, sl
 800eeee:	2205      	movs	r2, #5
 800eef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eef4:	484e      	ldr	r0, [pc, #312]	@ (800f030 <_svfiprintf_r+0x1e4>)
 800eef6:	f7f1 f98b 	bl	8000210 <memchr>
 800eefa:	9a04      	ldr	r2, [sp, #16]
 800eefc:	b9d8      	cbnz	r0, 800ef36 <_svfiprintf_r+0xea>
 800eefe:	06d0      	lsls	r0, r2, #27
 800ef00:	bf44      	itt	mi
 800ef02:	2320      	movmi	r3, #32
 800ef04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef08:	0711      	lsls	r1, r2, #28
 800ef0a:	bf44      	itt	mi
 800ef0c:	232b      	movmi	r3, #43	@ 0x2b
 800ef0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ef12:	f89a 3000 	ldrb.w	r3, [sl]
 800ef16:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef18:	d015      	beq.n	800ef46 <_svfiprintf_r+0xfa>
 800ef1a:	9a07      	ldr	r2, [sp, #28]
 800ef1c:	4654      	mov	r4, sl
 800ef1e:	2000      	movs	r0, #0
 800ef20:	f04f 0c0a 	mov.w	ip, #10
 800ef24:	4621      	mov	r1, r4
 800ef26:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef2a:	3b30      	subs	r3, #48	@ 0x30
 800ef2c:	2b09      	cmp	r3, #9
 800ef2e:	d94b      	bls.n	800efc8 <_svfiprintf_r+0x17c>
 800ef30:	b1b0      	cbz	r0, 800ef60 <_svfiprintf_r+0x114>
 800ef32:	9207      	str	r2, [sp, #28]
 800ef34:	e014      	b.n	800ef60 <_svfiprintf_r+0x114>
 800ef36:	eba0 0308 	sub.w	r3, r0, r8
 800ef3a:	fa09 f303 	lsl.w	r3, r9, r3
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	9304      	str	r3, [sp, #16]
 800ef42:	46a2      	mov	sl, r4
 800ef44:	e7d2      	b.n	800eeec <_svfiprintf_r+0xa0>
 800ef46:	9b03      	ldr	r3, [sp, #12]
 800ef48:	1d19      	adds	r1, r3, #4
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	9103      	str	r1, [sp, #12]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	bfbb      	ittet	lt
 800ef52:	425b      	neglt	r3, r3
 800ef54:	f042 0202 	orrlt.w	r2, r2, #2
 800ef58:	9307      	strge	r3, [sp, #28]
 800ef5a:	9307      	strlt	r3, [sp, #28]
 800ef5c:	bfb8      	it	lt
 800ef5e:	9204      	strlt	r2, [sp, #16]
 800ef60:	7823      	ldrb	r3, [r4, #0]
 800ef62:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef64:	d10a      	bne.n	800ef7c <_svfiprintf_r+0x130>
 800ef66:	7863      	ldrb	r3, [r4, #1]
 800ef68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef6a:	d132      	bne.n	800efd2 <_svfiprintf_r+0x186>
 800ef6c:	9b03      	ldr	r3, [sp, #12]
 800ef6e:	1d1a      	adds	r2, r3, #4
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	9203      	str	r2, [sp, #12]
 800ef74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef78:	3402      	adds	r4, #2
 800ef7a:	9305      	str	r3, [sp, #20]
 800ef7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f040 <_svfiprintf_r+0x1f4>
 800ef80:	7821      	ldrb	r1, [r4, #0]
 800ef82:	2203      	movs	r2, #3
 800ef84:	4650      	mov	r0, sl
 800ef86:	f7f1 f943 	bl	8000210 <memchr>
 800ef8a:	b138      	cbz	r0, 800ef9c <_svfiprintf_r+0x150>
 800ef8c:	9b04      	ldr	r3, [sp, #16]
 800ef8e:	eba0 000a 	sub.w	r0, r0, sl
 800ef92:	2240      	movs	r2, #64	@ 0x40
 800ef94:	4082      	lsls	r2, r0
 800ef96:	4313      	orrs	r3, r2
 800ef98:	3401      	adds	r4, #1
 800ef9a:	9304      	str	r3, [sp, #16]
 800ef9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efa0:	4824      	ldr	r0, [pc, #144]	@ (800f034 <_svfiprintf_r+0x1e8>)
 800efa2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800efa6:	2206      	movs	r2, #6
 800efa8:	f7f1 f932 	bl	8000210 <memchr>
 800efac:	2800      	cmp	r0, #0
 800efae:	d036      	beq.n	800f01e <_svfiprintf_r+0x1d2>
 800efb0:	4b21      	ldr	r3, [pc, #132]	@ (800f038 <_svfiprintf_r+0x1ec>)
 800efb2:	bb1b      	cbnz	r3, 800effc <_svfiprintf_r+0x1b0>
 800efb4:	9b03      	ldr	r3, [sp, #12]
 800efb6:	3307      	adds	r3, #7
 800efb8:	f023 0307 	bic.w	r3, r3, #7
 800efbc:	3308      	adds	r3, #8
 800efbe:	9303      	str	r3, [sp, #12]
 800efc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efc2:	4433      	add	r3, r6
 800efc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800efc6:	e76a      	b.n	800ee9e <_svfiprintf_r+0x52>
 800efc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800efcc:	460c      	mov	r4, r1
 800efce:	2001      	movs	r0, #1
 800efd0:	e7a8      	b.n	800ef24 <_svfiprintf_r+0xd8>
 800efd2:	2300      	movs	r3, #0
 800efd4:	3401      	adds	r4, #1
 800efd6:	9305      	str	r3, [sp, #20]
 800efd8:	4619      	mov	r1, r3
 800efda:	f04f 0c0a 	mov.w	ip, #10
 800efde:	4620      	mov	r0, r4
 800efe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800efe4:	3a30      	subs	r2, #48	@ 0x30
 800efe6:	2a09      	cmp	r2, #9
 800efe8:	d903      	bls.n	800eff2 <_svfiprintf_r+0x1a6>
 800efea:	2b00      	cmp	r3, #0
 800efec:	d0c6      	beq.n	800ef7c <_svfiprintf_r+0x130>
 800efee:	9105      	str	r1, [sp, #20]
 800eff0:	e7c4      	b.n	800ef7c <_svfiprintf_r+0x130>
 800eff2:	fb0c 2101 	mla	r1, ip, r1, r2
 800eff6:	4604      	mov	r4, r0
 800eff8:	2301      	movs	r3, #1
 800effa:	e7f0      	b.n	800efde <_svfiprintf_r+0x192>
 800effc:	ab03      	add	r3, sp, #12
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	462a      	mov	r2, r5
 800f002:	4b0e      	ldr	r3, [pc, #56]	@ (800f03c <_svfiprintf_r+0x1f0>)
 800f004:	a904      	add	r1, sp, #16
 800f006:	4638      	mov	r0, r7
 800f008:	f7fc fd06 	bl	800ba18 <_printf_float>
 800f00c:	1c42      	adds	r2, r0, #1
 800f00e:	4606      	mov	r6, r0
 800f010:	d1d6      	bne.n	800efc0 <_svfiprintf_r+0x174>
 800f012:	89ab      	ldrh	r3, [r5, #12]
 800f014:	065b      	lsls	r3, r3, #25
 800f016:	f53f af2d 	bmi.w	800ee74 <_svfiprintf_r+0x28>
 800f01a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f01c:	e72c      	b.n	800ee78 <_svfiprintf_r+0x2c>
 800f01e:	ab03      	add	r3, sp, #12
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	462a      	mov	r2, r5
 800f024:	4b05      	ldr	r3, [pc, #20]	@ (800f03c <_svfiprintf_r+0x1f0>)
 800f026:	a904      	add	r1, sp, #16
 800f028:	4638      	mov	r0, r7
 800f02a:	f7fc ff8d 	bl	800bf48 <_printf_i>
 800f02e:	e7ed      	b.n	800f00c <_svfiprintf_r+0x1c0>
 800f030:	08012479 	.word	0x08012479
 800f034:	08012483 	.word	0x08012483
 800f038:	0800ba19 	.word	0x0800ba19
 800f03c:	0800ed95 	.word	0x0800ed95
 800f040:	0801247f 	.word	0x0801247f

0800f044 <_sungetc_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	1c4b      	adds	r3, r1, #1
 800f048:	4614      	mov	r4, r2
 800f04a:	d103      	bne.n	800f054 <_sungetc_r+0x10>
 800f04c:	f04f 35ff 	mov.w	r5, #4294967295
 800f050:	4628      	mov	r0, r5
 800f052:	bd38      	pop	{r3, r4, r5, pc}
 800f054:	8993      	ldrh	r3, [r2, #12]
 800f056:	f023 0320 	bic.w	r3, r3, #32
 800f05a:	8193      	strh	r3, [r2, #12]
 800f05c:	6853      	ldr	r3, [r2, #4]
 800f05e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f060:	b2cd      	uxtb	r5, r1
 800f062:	b18a      	cbz	r2, 800f088 <_sungetc_r+0x44>
 800f064:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f066:	429a      	cmp	r2, r3
 800f068:	dd08      	ble.n	800f07c <_sungetc_r+0x38>
 800f06a:	6823      	ldr	r3, [r4, #0]
 800f06c:	1e5a      	subs	r2, r3, #1
 800f06e:	6022      	str	r2, [r4, #0]
 800f070:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f074:	6863      	ldr	r3, [r4, #4]
 800f076:	3301      	adds	r3, #1
 800f078:	6063      	str	r3, [r4, #4]
 800f07a:	e7e9      	b.n	800f050 <_sungetc_r+0xc>
 800f07c:	4621      	mov	r1, r4
 800f07e:	f000 fbe0 	bl	800f842 <__submore>
 800f082:	2800      	cmp	r0, #0
 800f084:	d0f1      	beq.n	800f06a <_sungetc_r+0x26>
 800f086:	e7e1      	b.n	800f04c <_sungetc_r+0x8>
 800f088:	6921      	ldr	r1, [r4, #16]
 800f08a:	6822      	ldr	r2, [r4, #0]
 800f08c:	b141      	cbz	r1, 800f0a0 <_sungetc_r+0x5c>
 800f08e:	4291      	cmp	r1, r2
 800f090:	d206      	bcs.n	800f0a0 <_sungetc_r+0x5c>
 800f092:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800f096:	42a9      	cmp	r1, r5
 800f098:	d102      	bne.n	800f0a0 <_sungetc_r+0x5c>
 800f09a:	3a01      	subs	r2, #1
 800f09c:	6022      	str	r2, [r4, #0]
 800f09e:	e7ea      	b.n	800f076 <_sungetc_r+0x32>
 800f0a0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800f0a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f0aa:	2303      	movs	r3, #3
 800f0ac:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f0ae:	4623      	mov	r3, r4
 800f0b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800f0b4:	6023      	str	r3, [r4, #0]
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	e7de      	b.n	800f078 <_sungetc_r+0x34>

0800f0ba <__ssrefill_r>:
 800f0ba:	b510      	push	{r4, lr}
 800f0bc:	460c      	mov	r4, r1
 800f0be:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f0c0:	b169      	cbz	r1, 800f0de <__ssrefill_r+0x24>
 800f0c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f0c6:	4299      	cmp	r1, r3
 800f0c8:	d001      	beq.n	800f0ce <__ssrefill_r+0x14>
 800f0ca:	f7fe fad9 	bl	800d680 <_free_r>
 800f0ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0d0:	6063      	str	r3, [r4, #4]
 800f0d2:	2000      	movs	r0, #0
 800f0d4:	6360      	str	r0, [r4, #52]	@ 0x34
 800f0d6:	b113      	cbz	r3, 800f0de <__ssrefill_r+0x24>
 800f0d8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f0da:	6023      	str	r3, [r4, #0]
 800f0dc:	bd10      	pop	{r4, pc}
 800f0de:	6923      	ldr	r3, [r4, #16]
 800f0e0:	6023      	str	r3, [r4, #0]
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	6063      	str	r3, [r4, #4]
 800f0e6:	89a3      	ldrh	r3, [r4, #12]
 800f0e8:	f043 0320 	orr.w	r3, r3, #32
 800f0ec:	81a3      	strh	r3, [r4, #12]
 800f0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f2:	e7f3      	b.n	800f0dc <__ssrefill_r+0x22>

0800f0f4 <__ssvfiscanf_r>:
 800f0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0f8:	460c      	mov	r4, r1
 800f0fa:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800f0fe:	2100      	movs	r1, #0
 800f100:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800f104:	49a5      	ldr	r1, [pc, #660]	@ (800f39c <__ssvfiscanf_r+0x2a8>)
 800f106:	91a0      	str	r1, [sp, #640]	@ 0x280
 800f108:	f10d 0804 	add.w	r8, sp, #4
 800f10c:	49a4      	ldr	r1, [pc, #656]	@ (800f3a0 <__ssvfiscanf_r+0x2ac>)
 800f10e:	4fa5      	ldr	r7, [pc, #660]	@ (800f3a4 <__ssvfiscanf_r+0x2b0>)
 800f110:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800f114:	4606      	mov	r6, r0
 800f116:	91a1      	str	r1, [sp, #644]	@ 0x284
 800f118:	9300      	str	r3, [sp, #0]
 800f11a:	7813      	ldrb	r3, [r2, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	f000 8158 	beq.w	800f3d2 <__ssvfiscanf_r+0x2de>
 800f122:	5cf9      	ldrb	r1, [r7, r3]
 800f124:	f011 0108 	ands.w	r1, r1, #8
 800f128:	f102 0501 	add.w	r5, r2, #1
 800f12c:	d019      	beq.n	800f162 <__ssvfiscanf_r+0x6e>
 800f12e:	6863      	ldr	r3, [r4, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	dd0f      	ble.n	800f154 <__ssvfiscanf_r+0x60>
 800f134:	6823      	ldr	r3, [r4, #0]
 800f136:	781a      	ldrb	r2, [r3, #0]
 800f138:	5cba      	ldrb	r2, [r7, r2]
 800f13a:	0712      	lsls	r2, r2, #28
 800f13c:	d401      	bmi.n	800f142 <__ssvfiscanf_r+0x4e>
 800f13e:	462a      	mov	r2, r5
 800f140:	e7eb      	b.n	800f11a <__ssvfiscanf_r+0x26>
 800f142:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f144:	3201      	adds	r2, #1
 800f146:	9245      	str	r2, [sp, #276]	@ 0x114
 800f148:	6862      	ldr	r2, [r4, #4]
 800f14a:	3301      	adds	r3, #1
 800f14c:	3a01      	subs	r2, #1
 800f14e:	6062      	str	r2, [r4, #4]
 800f150:	6023      	str	r3, [r4, #0]
 800f152:	e7ec      	b.n	800f12e <__ssvfiscanf_r+0x3a>
 800f154:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f156:	4621      	mov	r1, r4
 800f158:	4630      	mov	r0, r6
 800f15a:	4798      	blx	r3
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d0e9      	beq.n	800f134 <__ssvfiscanf_r+0x40>
 800f160:	e7ed      	b.n	800f13e <__ssvfiscanf_r+0x4a>
 800f162:	2b25      	cmp	r3, #37	@ 0x25
 800f164:	d012      	beq.n	800f18c <__ssvfiscanf_r+0x98>
 800f166:	4699      	mov	r9, r3
 800f168:	6863      	ldr	r3, [r4, #4]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	f340 8093 	ble.w	800f296 <__ssvfiscanf_r+0x1a2>
 800f170:	6822      	ldr	r2, [r4, #0]
 800f172:	7813      	ldrb	r3, [r2, #0]
 800f174:	454b      	cmp	r3, r9
 800f176:	f040 812c 	bne.w	800f3d2 <__ssvfiscanf_r+0x2de>
 800f17a:	6863      	ldr	r3, [r4, #4]
 800f17c:	3b01      	subs	r3, #1
 800f17e:	6063      	str	r3, [r4, #4]
 800f180:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800f182:	3201      	adds	r2, #1
 800f184:	3301      	adds	r3, #1
 800f186:	6022      	str	r2, [r4, #0]
 800f188:	9345      	str	r3, [sp, #276]	@ 0x114
 800f18a:	e7d8      	b.n	800f13e <__ssvfiscanf_r+0x4a>
 800f18c:	9141      	str	r1, [sp, #260]	@ 0x104
 800f18e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f190:	7853      	ldrb	r3, [r2, #1]
 800f192:	2b2a      	cmp	r3, #42	@ 0x2a
 800f194:	bf02      	ittt	eq
 800f196:	2310      	moveq	r3, #16
 800f198:	1c95      	addeq	r5, r2, #2
 800f19a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800f19c:	220a      	movs	r2, #10
 800f19e:	46a9      	mov	r9, r5
 800f1a0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800f1a4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800f1a8:	2b09      	cmp	r3, #9
 800f1aa:	d91e      	bls.n	800f1ea <__ssvfiscanf_r+0xf6>
 800f1ac:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800f3a8 <__ssvfiscanf_r+0x2b4>
 800f1b0:	2203      	movs	r2, #3
 800f1b2:	4650      	mov	r0, sl
 800f1b4:	f7f1 f82c 	bl	8000210 <memchr>
 800f1b8:	b138      	cbz	r0, 800f1ca <__ssvfiscanf_r+0xd6>
 800f1ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f1bc:	eba0 000a 	sub.w	r0, r0, sl
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	4083      	lsls	r3, r0
 800f1c4:	4313      	orrs	r3, r2
 800f1c6:	9341      	str	r3, [sp, #260]	@ 0x104
 800f1c8:	464d      	mov	r5, r9
 800f1ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f1ce:	2b78      	cmp	r3, #120	@ 0x78
 800f1d0:	d806      	bhi.n	800f1e0 <__ssvfiscanf_r+0xec>
 800f1d2:	2b57      	cmp	r3, #87	@ 0x57
 800f1d4:	d810      	bhi.n	800f1f8 <__ssvfiscanf_r+0x104>
 800f1d6:	2b25      	cmp	r3, #37	@ 0x25
 800f1d8:	d0c5      	beq.n	800f166 <__ssvfiscanf_r+0x72>
 800f1da:	d857      	bhi.n	800f28c <__ssvfiscanf_r+0x198>
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d065      	beq.n	800f2ac <__ssvfiscanf_r+0x1b8>
 800f1e0:	2303      	movs	r3, #3
 800f1e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f1e4:	230a      	movs	r3, #10
 800f1e6:	9342      	str	r3, [sp, #264]	@ 0x108
 800f1e8:	e078      	b.n	800f2dc <__ssvfiscanf_r+0x1e8>
 800f1ea:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f1ec:	fb02 1103 	mla	r1, r2, r3, r1
 800f1f0:	3930      	subs	r1, #48	@ 0x30
 800f1f2:	9143      	str	r1, [sp, #268]	@ 0x10c
 800f1f4:	464d      	mov	r5, r9
 800f1f6:	e7d2      	b.n	800f19e <__ssvfiscanf_r+0xaa>
 800f1f8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800f1fc:	2a20      	cmp	r2, #32
 800f1fe:	d8ef      	bhi.n	800f1e0 <__ssvfiscanf_r+0xec>
 800f200:	a101      	add	r1, pc, #4	@ (adr r1, 800f208 <__ssvfiscanf_r+0x114>)
 800f202:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800f206:	bf00      	nop
 800f208:	0800f2bb 	.word	0x0800f2bb
 800f20c:	0800f1e1 	.word	0x0800f1e1
 800f210:	0800f1e1 	.word	0x0800f1e1
 800f214:	0800f315 	.word	0x0800f315
 800f218:	0800f1e1 	.word	0x0800f1e1
 800f21c:	0800f1e1 	.word	0x0800f1e1
 800f220:	0800f1e1 	.word	0x0800f1e1
 800f224:	0800f1e1 	.word	0x0800f1e1
 800f228:	0800f1e1 	.word	0x0800f1e1
 800f22c:	0800f1e1 	.word	0x0800f1e1
 800f230:	0800f1e1 	.word	0x0800f1e1
 800f234:	0800f32b 	.word	0x0800f32b
 800f238:	0800f311 	.word	0x0800f311
 800f23c:	0800f293 	.word	0x0800f293
 800f240:	0800f293 	.word	0x0800f293
 800f244:	0800f293 	.word	0x0800f293
 800f248:	0800f1e1 	.word	0x0800f1e1
 800f24c:	0800f2cd 	.word	0x0800f2cd
 800f250:	0800f1e1 	.word	0x0800f1e1
 800f254:	0800f1e1 	.word	0x0800f1e1
 800f258:	0800f1e1 	.word	0x0800f1e1
 800f25c:	0800f1e1 	.word	0x0800f1e1
 800f260:	0800f33b 	.word	0x0800f33b
 800f264:	0800f2d5 	.word	0x0800f2d5
 800f268:	0800f2b3 	.word	0x0800f2b3
 800f26c:	0800f1e1 	.word	0x0800f1e1
 800f270:	0800f1e1 	.word	0x0800f1e1
 800f274:	0800f337 	.word	0x0800f337
 800f278:	0800f1e1 	.word	0x0800f1e1
 800f27c:	0800f311 	.word	0x0800f311
 800f280:	0800f1e1 	.word	0x0800f1e1
 800f284:	0800f1e1 	.word	0x0800f1e1
 800f288:	0800f2bb 	.word	0x0800f2bb
 800f28c:	3b45      	subs	r3, #69	@ 0x45
 800f28e:	2b02      	cmp	r3, #2
 800f290:	d8a6      	bhi.n	800f1e0 <__ssvfiscanf_r+0xec>
 800f292:	2305      	movs	r3, #5
 800f294:	e021      	b.n	800f2da <__ssvfiscanf_r+0x1e6>
 800f296:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f298:	4621      	mov	r1, r4
 800f29a:	4630      	mov	r0, r6
 800f29c:	4798      	blx	r3
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	f43f af66 	beq.w	800f170 <__ssvfiscanf_r+0x7c>
 800f2a4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f2a6:	2800      	cmp	r0, #0
 800f2a8:	f040 808b 	bne.w	800f3c2 <__ssvfiscanf_r+0x2ce>
 800f2ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b0:	e08b      	b.n	800f3ca <__ssvfiscanf_r+0x2d6>
 800f2b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f2b4:	f042 0220 	orr.w	r2, r2, #32
 800f2b8:	9241      	str	r2, [sp, #260]	@ 0x104
 800f2ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800f2bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f2c0:	9241      	str	r2, [sp, #260]	@ 0x104
 800f2c2:	2210      	movs	r2, #16
 800f2c4:	2b6e      	cmp	r3, #110	@ 0x6e
 800f2c6:	9242      	str	r2, [sp, #264]	@ 0x108
 800f2c8:	d902      	bls.n	800f2d0 <__ssvfiscanf_r+0x1dc>
 800f2ca:	e005      	b.n	800f2d8 <__ssvfiscanf_r+0x1e4>
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	9342      	str	r3, [sp, #264]	@ 0x108
 800f2d0:	2303      	movs	r3, #3
 800f2d2:	e002      	b.n	800f2da <__ssvfiscanf_r+0x1e6>
 800f2d4:	2308      	movs	r3, #8
 800f2d6:	9342      	str	r3, [sp, #264]	@ 0x108
 800f2d8:	2304      	movs	r3, #4
 800f2da:	9347      	str	r3, [sp, #284]	@ 0x11c
 800f2dc:	6863      	ldr	r3, [r4, #4]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	dd39      	ble.n	800f356 <__ssvfiscanf_r+0x262>
 800f2e2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f2e4:	0659      	lsls	r1, r3, #25
 800f2e6:	d404      	bmi.n	800f2f2 <__ssvfiscanf_r+0x1fe>
 800f2e8:	6823      	ldr	r3, [r4, #0]
 800f2ea:	781a      	ldrb	r2, [r3, #0]
 800f2ec:	5cba      	ldrb	r2, [r7, r2]
 800f2ee:	0712      	lsls	r2, r2, #28
 800f2f0:	d438      	bmi.n	800f364 <__ssvfiscanf_r+0x270>
 800f2f2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	dc47      	bgt.n	800f388 <__ssvfiscanf_r+0x294>
 800f2f8:	466b      	mov	r3, sp
 800f2fa:	4622      	mov	r2, r4
 800f2fc:	a941      	add	r1, sp, #260	@ 0x104
 800f2fe:	4630      	mov	r0, r6
 800f300:	f000 f86c 	bl	800f3dc <_scanf_chars>
 800f304:	2801      	cmp	r0, #1
 800f306:	d064      	beq.n	800f3d2 <__ssvfiscanf_r+0x2de>
 800f308:	2802      	cmp	r0, #2
 800f30a:	f47f af18 	bne.w	800f13e <__ssvfiscanf_r+0x4a>
 800f30e:	e7c9      	b.n	800f2a4 <__ssvfiscanf_r+0x1b0>
 800f310:	220a      	movs	r2, #10
 800f312:	e7d7      	b.n	800f2c4 <__ssvfiscanf_r+0x1d0>
 800f314:	4629      	mov	r1, r5
 800f316:	4640      	mov	r0, r8
 800f318:	f000 fa5a 	bl	800f7d0 <__sccl>
 800f31c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f31e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f322:	9341      	str	r3, [sp, #260]	@ 0x104
 800f324:	4605      	mov	r5, r0
 800f326:	2301      	movs	r3, #1
 800f328:	e7d7      	b.n	800f2da <__ssvfiscanf_r+0x1e6>
 800f32a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800f32c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f330:	9341      	str	r3, [sp, #260]	@ 0x104
 800f332:	2300      	movs	r3, #0
 800f334:	e7d1      	b.n	800f2da <__ssvfiscanf_r+0x1e6>
 800f336:	2302      	movs	r3, #2
 800f338:	e7cf      	b.n	800f2da <__ssvfiscanf_r+0x1e6>
 800f33a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800f33c:	06c3      	lsls	r3, r0, #27
 800f33e:	f53f aefe 	bmi.w	800f13e <__ssvfiscanf_r+0x4a>
 800f342:	9b00      	ldr	r3, [sp, #0]
 800f344:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f346:	1d19      	adds	r1, r3, #4
 800f348:	9100      	str	r1, [sp, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	07c0      	lsls	r0, r0, #31
 800f34e:	bf4c      	ite	mi
 800f350:	801a      	strhmi	r2, [r3, #0]
 800f352:	601a      	strpl	r2, [r3, #0]
 800f354:	e6f3      	b.n	800f13e <__ssvfiscanf_r+0x4a>
 800f356:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f358:	4621      	mov	r1, r4
 800f35a:	4630      	mov	r0, r6
 800f35c:	4798      	blx	r3
 800f35e:	2800      	cmp	r0, #0
 800f360:	d0bf      	beq.n	800f2e2 <__ssvfiscanf_r+0x1ee>
 800f362:	e79f      	b.n	800f2a4 <__ssvfiscanf_r+0x1b0>
 800f364:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800f366:	3201      	adds	r2, #1
 800f368:	9245      	str	r2, [sp, #276]	@ 0x114
 800f36a:	6862      	ldr	r2, [r4, #4]
 800f36c:	3a01      	subs	r2, #1
 800f36e:	2a00      	cmp	r2, #0
 800f370:	6062      	str	r2, [r4, #4]
 800f372:	dd02      	ble.n	800f37a <__ssvfiscanf_r+0x286>
 800f374:	3301      	adds	r3, #1
 800f376:	6023      	str	r3, [r4, #0]
 800f378:	e7b6      	b.n	800f2e8 <__ssvfiscanf_r+0x1f4>
 800f37a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800f37c:	4621      	mov	r1, r4
 800f37e:	4630      	mov	r0, r6
 800f380:	4798      	blx	r3
 800f382:	2800      	cmp	r0, #0
 800f384:	d0b0      	beq.n	800f2e8 <__ssvfiscanf_r+0x1f4>
 800f386:	e78d      	b.n	800f2a4 <__ssvfiscanf_r+0x1b0>
 800f388:	2b04      	cmp	r3, #4
 800f38a:	dc0f      	bgt.n	800f3ac <__ssvfiscanf_r+0x2b8>
 800f38c:	466b      	mov	r3, sp
 800f38e:	4622      	mov	r2, r4
 800f390:	a941      	add	r1, sp, #260	@ 0x104
 800f392:	4630      	mov	r0, r6
 800f394:	f000 f87c 	bl	800f490 <_scanf_i>
 800f398:	e7b4      	b.n	800f304 <__ssvfiscanf_r+0x210>
 800f39a:	bf00      	nop
 800f39c:	0800f045 	.word	0x0800f045
 800f3a0:	0800f0bb 	.word	0x0800f0bb
 800f3a4:	08012379 	.word	0x08012379
 800f3a8:	0801247f 	.word	0x0801247f
 800f3ac:	4b0a      	ldr	r3, [pc, #40]	@ (800f3d8 <__ssvfiscanf_r+0x2e4>)
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	f43f aec5 	beq.w	800f13e <__ssvfiscanf_r+0x4a>
 800f3b4:	466b      	mov	r3, sp
 800f3b6:	4622      	mov	r2, r4
 800f3b8:	a941      	add	r1, sp, #260	@ 0x104
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	f7fc fee4 	bl	800c188 <_scanf_float>
 800f3c0:	e7a0      	b.n	800f304 <__ssvfiscanf_r+0x210>
 800f3c2:	89a3      	ldrh	r3, [r4, #12]
 800f3c4:	065b      	lsls	r3, r3, #25
 800f3c6:	f53f af71 	bmi.w	800f2ac <__ssvfiscanf_r+0x1b8>
 800f3ca:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800f3ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800f3d4:	e7f9      	b.n	800f3ca <__ssvfiscanf_r+0x2d6>
 800f3d6:	bf00      	nop
 800f3d8:	0800c189 	.word	0x0800c189

0800f3dc <_scanf_chars>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	4615      	mov	r5, r2
 800f3e2:	688a      	ldr	r2, [r1, #8]
 800f3e4:	4680      	mov	r8, r0
 800f3e6:	460c      	mov	r4, r1
 800f3e8:	b932      	cbnz	r2, 800f3f8 <_scanf_chars+0x1c>
 800f3ea:	698a      	ldr	r2, [r1, #24]
 800f3ec:	2a00      	cmp	r2, #0
 800f3ee:	bf14      	ite	ne
 800f3f0:	f04f 32ff 	movne.w	r2, #4294967295
 800f3f4:	2201      	moveq	r2, #1
 800f3f6:	608a      	str	r2, [r1, #8]
 800f3f8:	6822      	ldr	r2, [r4, #0]
 800f3fa:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800f48c <_scanf_chars+0xb0>
 800f3fe:	06d1      	lsls	r1, r2, #27
 800f400:	bf5f      	itttt	pl
 800f402:	681a      	ldrpl	r2, [r3, #0]
 800f404:	1d11      	addpl	r1, r2, #4
 800f406:	6019      	strpl	r1, [r3, #0]
 800f408:	6816      	ldrpl	r6, [r2, #0]
 800f40a:	2700      	movs	r7, #0
 800f40c:	69a0      	ldr	r0, [r4, #24]
 800f40e:	b188      	cbz	r0, 800f434 <_scanf_chars+0x58>
 800f410:	2801      	cmp	r0, #1
 800f412:	d107      	bne.n	800f424 <_scanf_chars+0x48>
 800f414:	682b      	ldr	r3, [r5, #0]
 800f416:	781a      	ldrb	r2, [r3, #0]
 800f418:	6963      	ldr	r3, [r4, #20]
 800f41a:	5c9b      	ldrb	r3, [r3, r2]
 800f41c:	b953      	cbnz	r3, 800f434 <_scanf_chars+0x58>
 800f41e:	2f00      	cmp	r7, #0
 800f420:	d031      	beq.n	800f486 <_scanf_chars+0xaa>
 800f422:	e022      	b.n	800f46a <_scanf_chars+0x8e>
 800f424:	2802      	cmp	r0, #2
 800f426:	d120      	bne.n	800f46a <_scanf_chars+0x8e>
 800f428:	682b      	ldr	r3, [r5, #0]
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800f430:	071b      	lsls	r3, r3, #28
 800f432:	d41a      	bmi.n	800f46a <_scanf_chars+0x8e>
 800f434:	6823      	ldr	r3, [r4, #0]
 800f436:	06da      	lsls	r2, r3, #27
 800f438:	bf5e      	ittt	pl
 800f43a:	682b      	ldrpl	r3, [r5, #0]
 800f43c:	781b      	ldrbpl	r3, [r3, #0]
 800f43e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800f442:	682a      	ldr	r2, [r5, #0]
 800f444:	686b      	ldr	r3, [r5, #4]
 800f446:	3201      	adds	r2, #1
 800f448:	602a      	str	r2, [r5, #0]
 800f44a:	68a2      	ldr	r2, [r4, #8]
 800f44c:	3b01      	subs	r3, #1
 800f44e:	3a01      	subs	r2, #1
 800f450:	606b      	str	r3, [r5, #4]
 800f452:	3701      	adds	r7, #1
 800f454:	60a2      	str	r2, [r4, #8]
 800f456:	b142      	cbz	r2, 800f46a <_scanf_chars+0x8e>
 800f458:	2b00      	cmp	r3, #0
 800f45a:	dcd7      	bgt.n	800f40c <_scanf_chars+0x30>
 800f45c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f460:	4629      	mov	r1, r5
 800f462:	4640      	mov	r0, r8
 800f464:	4798      	blx	r3
 800f466:	2800      	cmp	r0, #0
 800f468:	d0d0      	beq.n	800f40c <_scanf_chars+0x30>
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	f013 0310 	ands.w	r3, r3, #16
 800f470:	d105      	bne.n	800f47e <_scanf_chars+0xa2>
 800f472:	68e2      	ldr	r2, [r4, #12]
 800f474:	3201      	adds	r2, #1
 800f476:	60e2      	str	r2, [r4, #12]
 800f478:	69a2      	ldr	r2, [r4, #24]
 800f47a:	b102      	cbz	r2, 800f47e <_scanf_chars+0xa2>
 800f47c:	7033      	strb	r3, [r6, #0]
 800f47e:	6923      	ldr	r3, [r4, #16]
 800f480:	443b      	add	r3, r7
 800f482:	6123      	str	r3, [r4, #16]
 800f484:	2000      	movs	r0, #0
 800f486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f48a:	bf00      	nop
 800f48c:	08012379 	.word	0x08012379

0800f490 <_scanf_i>:
 800f490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f494:	4698      	mov	r8, r3
 800f496:	4b74      	ldr	r3, [pc, #464]	@ (800f668 <_scanf_i+0x1d8>)
 800f498:	460c      	mov	r4, r1
 800f49a:	4682      	mov	sl, r0
 800f49c:	4616      	mov	r6, r2
 800f49e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f4a2:	b087      	sub	sp, #28
 800f4a4:	ab03      	add	r3, sp, #12
 800f4a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f4aa:	4b70      	ldr	r3, [pc, #448]	@ (800f66c <_scanf_i+0x1dc>)
 800f4ac:	69a1      	ldr	r1, [r4, #24]
 800f4ae:	4a70      	ldr	r2, [pc, #448]	@ (800f670 <_scanf_i+0x1e0>)
 800f4b0:	2903      	cmp	r1, #3
 800f4b2:	bf08      	it	eq
 800f4b4:	461a      	moveq	r2, r3
 800f4b6:	68a3      	ldr	r3, [r4, #8]
 800f4b8:	9201      	str	r2, [sp, #4]
 800f4ba:	1e5a      	subs	r2, r3, #1
 800f4bc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800f4c0:	bf88      	it	hi
 800f4c2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800f4c6:	4627      	mov	r7, r4
 800f4c8:	bf82      	ittt	hi
 800f4ca:	eb03 0905 	addhi.w	r9, r3, r5
 800f4ce:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800f4d2:	60a3      	strhi	r3, [r4, #8]
 800f4d4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800f4d8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800f4dc:	bf98      	it	ls
 800f4de:	f04f 0900 	movls.w	r9, #0
 800f4e2:	6023      	str	r3, [r4, #0]
 800f4e4:	463d      	mov	r5, r7
 800f4e6:	f04f 0b00 	mov.w	fp, #0
 800f4ea:	6831      	ldr	r1, [r6, #0]
 800f4ec:	ab03      	add	r3, sp, #12
 800f4ee:	7809      	ldrb	r1, [r1, #0]
 800f4f0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800f4f4:	2202      	movs	r2, #2
 800f4f6:	f7f0 fe8b 	bl	8000210 <memchr>
 800f4fa:	b328      	cbz	r0, 800f548 <_scanf_i+0xb8>
 800f4fc:	f1bb 0f01 	cmp.w	fp, #1
 800f500:	d159      	bne.n	800f5b6 <_scanf_i+0x126>
 800f502:	6862      	ldr	r2, [r4, #4]
 800f504:	b92a      	cbnz	r2, 800f512 <_scanf_i+0x82>
 800f506:	6822      	ldr	r2, [r4, #0]
 800f508:	2108      	movs	r1, #8
 800f50a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f50e:	6061      	str	r1, [r4, #4]
 800f510:	6022      	str	r2, [r4, #0]
 800f512:	6822      	ldr	r2, [r4, #0]
 800f514:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800f518:	6022      	str	r2, [r4, #0]
 800f51a:	68a2      	ldr	r2, [r4, #8]
 800f51c:	1e51      	subs	r1, r2, #1
 800f51e:	60a1      	str	r1, [r4, #8]
 800f520:	b192      	cbz	r2, 800f548 <_scanf_i+0xb8>
 800f522:	6832      	ldr	r2, [r6, #0]
 800f524:	1c51      	adds	r1, r2, #1
 800f526:	6031      	str	r1, [r6, #0]
 800f528:	7812      	ldrb	r2, [r2, #0]
 800f52a:	f805 2b01 	strb.w	r2, [r5], #1
 800f52e:	6872      	ldr	r2, [r6, #4]
 800f530:	3a01      	subs	r2, #1
 800f532:	2a00      	cmp	r2, #0
 800f534:	6072      	str	r2, [r6, #4]
 800f536:	dc07      	bgt.n	800f548 <_scanf_i+0xb8>
 800f538:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800f53c:	4631      	mov	r1, r6
 800f53e:	4650      	mov	r0, sl
 800f540:	4790      	blx	r2
 800f542:	2800      	cmp	r0, #0
 800f544:	f040 8085 	bne.w	800f652 <_scanf_i+0x1c2>
 800f548:	f10b 0b01 	add.w	fp, fp, #1
 800f54c:	f1bb 0f03 	cmp.w	fp, #3
 800f550:	d1cb      	bne.n	800f4ea <_scanf_i+0x5a>
 800f552:	6863      	ldr	r3, [r4, #4]
 800f554:	b90b      	cbnz	r3, 800f55a <_scanf_i+0xca>
 800f556:	230a      	movs	r3, #10
 800f558:	6063      	str	r3, [r4, #4]
 800f55a:	6863      	ldr	r3, [r4, #4]
 800f55c:	4945      	ldr	r1, [pc, #276]	@ (800f674 <_scanf_i+0x1e4>)
 800f55e:	6960      	ldr	r0, [r4, #20]
 800f560:	1ac9      	subs	r1, r1, r3
 800f562:	f000 f935 	bl	800f7d0 <__sccl>
 800f566:	f04f 0b00 	mov.w	fp, #0
 800f56a:	68a3      	ldr	r3, [r4, #8]
 800f56c:	6822      	ldr	r2, [r4, #0]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d03d      	beq.n	800f5ee <_scanf_i+0x15e>
 800f572:	6831      	ldr	r1, [r6, #0]
 800f574:	6960      	ldr	r0, [r4, #20]
 800f576:	f891 c000 	ldrb.w	ip, [r1]
 800f57a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800f57e:	2800      	cmp	r0, #0
 800f580:	d035      	beq.n	800f5ee <_scanf_i+0x15e>
 800f582:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800f586:	d124      	bne.n	800f5d2 <_scanf_i+0x142>
 800f588:	0510      	lsls	r0, r2, #20
 800f58a:	d522      	bpl.n	800f5d2 <_scanf_i+0x142>
 800f58c:	f10b 0b01 	add.w	fp, fp, #1
 800f590:	f1b9 0f00 	cmp.w	r9, #0
 800f594:	d003      	beq.n	800f59e <_scanf_i+0x10e>
 800f596:	3301      	adds	r3, #1
 800f598:	f109 39ff 	add.w	r9, r9, #4294967295
 800f59c:	60a3      	str	r3, [r4, #8]
 800f59e:	6873      	ldr	r3, [r6, #4]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	6073      	str	r3, [r6, #4]
 800f5a6:	dd1b      	ble.n	800f5e0 <_scanf_i+0x150>
 800f5a8:	6833      	ldr	r3, [r6, #0]
 800f5aa:	3301      	adds	r3, #1
 800f5ac:	6033      	str	r3, [r6, #0]
 800f5ae:	68a3      	ldr	r3, [r4, #8]
 800f5b0:	3b01      	subs	r3, #1
 800f5b2:	60a3      	str	r3, [r4, #8]
 800f5b4:	e7d9      	b.n	800f56a <_scanf_i+0xda>
 800f5b6:	f1bb 0f02 	cmp.w	fp, #2
 800f5ba:	d1ae      	bne.n	800f51a <_scanf_i+0x8a>
 800f5bc:	6822      	ldr	r2, [r4, #0]
 800f5be:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800f5c2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800f5c6:	d1bf      	bne.n	800f548 <_scanf_i+0xb8>
 800f5c8:	2110      	movs	r1, #16
 800f5ca:	6061      	str	r1, [r4, #4]
 800f5cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f5d0:	e7a2      	b.n	800f518 <_scanf_i+0x88>
 800f5d2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800f5d6:	6022      	str	r2, [r4, #0]
 800f5d8:	780b      	ldrb	r3, [r1, #0]
 800f5da:	f805 3b01 	strb.w	r3, [r5], #1
 800f5de:	e7de      	b.n	800f59e <_scanf_i+0x10e>
 800f5e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f5e4:	4631      	mov	r1, r6
 800f5e6:	4650      	mov	r0, sl
 800f5e8:	4798      	blx	r3
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d0df      	beq.n	800f5ae <_scanf_i+0x11e>
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	05d9      	lsls	r1, r3, #23
 800f5f2:	d50d      	bpl.n	800f610 <_scanf_i+0x180>
 800f5f4:	42bd      	cmp	r5, r7
 800f5f6:	d909      	bls.n	800f60c <_scanf_i+0x17c>
 800f5f8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f5fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f600:	4632      	mov	r2, r6
 800f602:	4650      	mov	r0, sl
 800f604:	4798      	blx	r3
 800f606:	f105 39ff 	add.w	r9, r5, #4294967295
 800f60a:	464d      	mov	r5, r9
 800f60c:	42bd      	cmp	r5, r7
 800f60e:	d028      	beq.n	800f662 <_scanf_i+0x1d2>
 800f610:	6822      	ldr	r2, [r4, #0]
 800f612:	f012 0210 	ands.w	r2, r2, #16
 800f616:	d113      	bne.n	800f640 <_scanf_i+0x1b0>
 800f618:	702a      	strb	r2, [r5, #0]
 800f61a:	6863      	ldr	r3, [r4, #4]
 800f61c:	9e01      	ldr	r6, [sp, #4]
 800f61e:	4639      	mov	r1, r7
 800f620:	4650      	mov	r0, sl
 800f622:	47b0      	blx	r6
 800f624:	f8d8 3000 	ldr.w	r3, [r8]
 800f628:	6821      	ldr	r1, [r4, #0]
 800f62a:	1d1a      	adds	r2, r3, #4
 800f62c:	f8c8 2000 	str.w	r2, [r8]
 800f630:	f011 0f20 	tst.w	r1, #32
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	d00f      	beq.n	800f658 <_scanf_i+0x1c8>
 800f638:	6018      	str	r0, [r3, #0]
 800f63a:	68e3      	ldr	r3, [r4, #12]
 800f63c:	3301      	adds	r3, #1
 800f63e:	60e3      	str	r3, [r4, #12]
 800f640:	6923      	ldr	r3, [r4, #16]
 800f642:	1bed      	subs	r5, r5, r7
 800f644:	445d      	add	r5, fp
 800f646:	442b      	add	r3, r5
 800f648:	6123      	str	r3, [r4, #16]
 800f64a:	2000      	movs	r0, #0
 800f64c:	b007      	add	sp, #28
 800f64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f652:	f04f 0b00 	mov.w	fp, #0
 800f656:	e7ca      	b.n	800f5ee <_scanf_i+0x15e>
 800f658:	07ca      	lsls	r2, r1, #31
 800f65a:	bf4c      	ite	mi
 800f65c:	8018      	strhmi	r0, [r3, #0]
 800f65e:	6018      	strpl	r0, [r3, #0]
 800f660:	e7eb      	b.n	800f63a <_scanf_i+0x1aa>
 800f662:	2001      	movs	r0, #1
 800f664:	e7f2      	b.n	800f64c <_scanf_i+0x1bc>
 800f666:	bf00      	nop
 800f668:	080120d8 	.word	0x080120d8
 800f66c:	0800ed91 	.word	0x0800ed91
 800f670:	0801012d 	.word	0x0801012d
 800f674:	0801249a 	.word	0x0801249a

0800f678 <__sflush_r>:
 800f678:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f680:	0716      	lsls	r6, r2, #28
 800f682:	4605      	mov	r5, r0
 800f684:	460c      	mov	r4, r1
 800f686:	d454      	bmi.n	800f732 <__sflush_r+0xba>
 800f688:	684b      	ldr	r3, [r1, #4]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	dc02      	bgt.n	800f694 <__sflush_r+0x1c>
 800f68e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f690:	2b00      	cmp	r3, #0
 800f692:	dd48      	ble.n	800f726 <__sflush_r+0xae>
 800f694:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f696:	2e00      	cmp	r6, #0
 800f698:	d045      	beq.n	800f726 <__sflush_r+0xae>
 800f69a:	2300      	movs	r3, #0
 800f69c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f6a0:	682f      	ldr	r7, [r5, #0]
 800f6a2:	6a21      	ldr	r1, [r4, #32]
 800f6a4:	602b      	str	r3, [r5, #0]
 800f6a6:	d030      	beq.n	800f70a <__sflush_r+0x92>
 800f6a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f6aa:	89a3      	ldrh	r3, [r4, #12]
 800f6ac:	0759      	lsls	r1, r3, #29
 800f6ae:	d505      	bpl.n	800f6bc <__sflush_r+0x44>
 800f6b0:	6863      	ldr	r3, [r4, #4]
 800f6b2:	1ad2      	subs	r2, r2, r3
 800f6b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f6b6:	b10b      	cbz	r3, 800f6bc <__sflush_r+0x44>
 800f6b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f6ba:	1ad2      	subs	r2, r2, r3
 800f6bc:	2300      	movs	r3, #0
 800f6be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6c0:	6a21      	ldr	r1, [r4, #32]
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	47b0      	blx	r6
 800f6c6:	1c43      	adds	r3, r0, #1
 800f6c8:	89a3      	ldrh	r3, [r4, #12]
 800f6ca:	d106      	bne.n	800f6da <__sflush_r+0x62>
 800f6cc:	6829      	ldr	r1, [r5, #0]
 800f6ce:	291d      	cmp	r1, #29
 800f6d0:	d82b      	bhi.n	800f72a <__sflush_r+0xb2>
 800f6d2:	4a2a      	ldr	r2, [pc, #168]	@ (800f77c <__sflush_r+0x104>)
 800f6d4:	410a      	asrs	r2, r1
 800f6d6:	07d6      	lsls	r6, r2, #31
 800f6d8:	d427      	bmi.n	800f72a <__sflush_r+0xb2>
 800f6da:	2200      	movs	r2, #0
 800f6dc:	6062      	str	r2, [r4, #4]
 800f6de:	04d9      	lsls	r1, r3, #19
 800f6e0:	6922      	ldr	r2, [r4, #16]
 800f6e2:	6022      	str	r2, [r4, #0]
 800f6e4:	d504      	bpl.n	800f6f0 <__sflush_r+0x78>
 800f6e6:	1c42      	adds	r2, r0, #1
 800f6e8:	d101      	bne.n	800f6ee <__sflush_r+0x76>
 800f6ea:	682b      	ldr	r3, [r5, #0]
 800f6ec:	b903      	cbnz	r3, 800f6f0 <__sflush_r+0x78>
 800f6ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6f2:	602f      	str	r7, [r5, #0]
 800f6f4:	b1b9      	cbz	r1, 800f726 <__sflush_r+0xae>
 800f6f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6fa:	4299      	cmp	r1, r3
 800f6fc:	d002      	beq.n	800f704 <__sflush_r+0x8c>
 800f6fe:	4628      	mov	r0, r5
 800f700:	f7fd ffbe 	bl	800d680 <_free_r>
 800f704:	2300      	movs	r3, #0
 800f706:	6363      	str	r3, [r4, #52]	@ 0x34
 800f708:	e00d      	b.n	800f726 <__sflush_r+0xae>
 800f70a:	2301      	movs	r3, #1
 800f70c:	4628      	mov	r0, r5
 800f70e:	47b0      	blx	r6
 800f710:	4602      	mov	r2, r0
 800f712:	1c50      	adds	r0, r2, #1
 800f714:	d1c9      	bne.n	800f6aa <__sflush_r+0x32>
 800f716:	682b      	ldr	r3, [r5, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d0c6      	beq.n	800f6aa <__sflush_r+0x32>
 800f71c:	2b1d      	cmp	r3, #29
 800f71e:	d001      	beq.n	800f724 <__sflush_r+0xac>
 800f720:	2b16      	cmp	r3, #22
 800f722:	d11e      	bne.n	800f762 <__sflush_r+0xea>
 800f724:	602f      	str	r7, [r5, #0]
 800f726:	2000      	movs	r0, #0
 800f728:	e022      	b.n	800f770 <__sflush_r+0xf8>
 800f72a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f72e:	b21b      	sxth	r3, r3
 800f730:	e01b      	b.n	800f76a <__sflush_r+0xf2>
 800f732:	690f      	ldr	r7, [r1, #16]
 800f734:	2f00      	cmp	r7, #0
 800f736:	d0f6      	beq.n	800f726 <__sflush_r+0xae>
 800f738:	0793      	lsls	r3, r2, #30
 800f73a:	680e      	ldr	r6, [r1, #0]
 800f73c:	bf08      	it	eq
 800f73e:	694b      	ldreq	r3, [r1, #20]
 800f740:	600f      	str	r7, [r1, #0]
 800f742:	bf18      	it	ne
 800f744:	2300      	movne	r3, #0
 800f746:	eba6 0807 	sub.w	r8, r6, r7
 800f74a:	608b      	str	r3, [r1, #8]
 800f74c:	f1b8 0f00 	cmp.w	r8, #0
 800f750:	dde9      	ble.n	800f726 <__sflush_r+0xae>
 800f752:	6a21      	ldr	r1, [r4, #32]
 800f754:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f756:	4643      	mov	r3, r8
 800f758:	463a      	mov	r2, r7
 800f75a:	4628      	mov	r0, r5
 800f75c:	47b0      	blx	r6
 800f75e:	2800      	cmp	r0, #0
 800f760:	dc08      	bgt.n	800f774 <__sflush_r+0xfc>
 800f762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f766:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f76a:	81a3      	strh	r3, [r4, #12]
 800f76c:	f04f 30ff 	mov.w	r0, #4294967295
 800f770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f774:	4407      	add	r7, r0
 800f776:	eba8 0800 	sub.w	r8, r8, r0
 800f77a:	e7e7      	b.n	800f74c <__sflush_r+0xd4>
 800f77c:	dfbffffe 	.word	0xdfbffffe

0800f780 <_fflush_r>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	690b      	ldr	r3, [r1, #16]
 800f784:	4605      	mov	r5, r0
 800f786:	460c      	mov	r4, r1
 800f788:	b913      	cbnz	r3, 800f790 <_fflush_r+0x10>
 800f78a:	2500      	movs	r5, #0
 800f78c:	4628      	mov	r0, r5
 800f78e:	bd38      	pop	{r3, r4, r5, pc}
 800f790:	b118      	cbz	r0, 800f79a <_fflush_r+0x1a>
 800f792:	6a03      	ldr	r3, [r0, #32]
 800f794:	b90b      	cbnz	r3, 800f79a <_fflush_r+0x1a>
 800f796:	f7fc ff97 	bl	800c6c8 <__sinit>
 800f79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d0f3      	beq.n	800f78a <_fflush_r+0xa>
 800f7a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f7a4:	07d0      	lsls	r0, r2, #31
 800f7a6:	d404      	bmi.n	800f7b2 <_fflush_r+0x32>
 800f7a8:	0599      	lsls	r1, r3, #22
 800f7aa:	d402      	bmi.n	800f7b2 <_fflush_r+0x32>
 800f7ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7ae:	f7fd f904 	bl	800c9ba <__retarget_lock_acquire_recursive>
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	4621      	mov	r1, r4
 800f7b6:	f7ff ff5f 	bl	800f678 <__sflush_r>
 800f7ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7bc:	07da      	lsls	r2, r3, #31
 800f7be:	4605      	mov	r5, r0
 800f7c0:	d4e4      	bmi.n	800f78c <_fflush_r+0xc>
 800f7c2:	89a3      	ldrh	r3, [r4, #12]
 800f7c4:	059b      	lsls	r3, r3, #22
 800f7c6:	d4e1      	bmi.n	800f78c <_fflush_r+0xc>
 800f7c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7ca:	f7fd f8f7 	bl	800c9bc <__retarget_lock_release_recursive>
 800f7ce:	e7dd      	b.n	800f78c <_fflush_r+0xc>

0800f7d0 <__sccl>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	780b      	ldrb	r3, [r1, #0]
 800f7d4:	4604      	mov	r4, r0
 800f7d6:	2b5e      	cmp	r3, #94	@ 0x5e
 800f7d8:	bf0b      	itete	eq
 800f7da:	784b      	ldrbeq	r3, [r1, #1]
 800f7dc:	1c4a      	addne	r2, r1, #1
 800f7de:	1c8a      	addeq	r2, r1, #2
 800f7e0:	2100      	movne	r1, #0
 800f7e2:	bf08      	it	eq
 800f7e4:	2101      	moveq	r1, #1
 800f7e6:	3801      	subs	r0, #1
 800f7e8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800f7ec:	f800 1f01 	strb.w	r1, [r0, #1]!
 800f7f0:	42a8      	cmp	r0, r5
 800f7f2:	d1fb      	bne.n	800f7ec <__sccl+0x1c>
 800f7f4:	b90b      	cbnz	r3, 800f7fa <__sccl+0x2a>
 800f7f6:	1e50      	subs	r0, r2, #1
 800f7f8:	bd70      	pop	{r4, r5, r6, pc}
 800f7fa:	f081 0101 	eor.w	r1, r1, #1
 800f7fe:	54e1      	strb	r1, [r4, r3]
 800f800:	4610      	mov	r0, r2
 800f802:	4602      	mov	r2, r0
 800f804:	f812 5b01 	ldrb.w	r5, [r2], #1
 800f808:	2d2d      	cmp	r5, #45	@ 0x2d
 800f80a:	d005      	beq.n	800f818 <__sccl+0x48>
 800f80c:	2d5d      	cmp	r5, #93	@ 0x5d
 800f80e:	d016      	beq.n	800f83e <__sccl+0x6e>
 800f810:	2d00      	cmp	r5, #0
 800f812:	d0f1      	beq.n	800f7f8 <__sccl+0x28>
 800f814:	462b      	mov	r3, r5
 800f816:	e7f2      	b.n	800f7fe <__sccl+0x2e>
 800f818:	7846      	ldrb	r6, [r0, #1]
 800f81a:	2e5d      	cmp	r6, #93	@ 0x5d
 800f81c:	d0fa      	beq.n	800f814 <__sccl+0x44>
 800f81e:	42b3      	cmp	r3, r6
 800f820:	dcf8      	bgt.n	800f814 <__sccl+0x44>
 800f822:	3002      	adds	r0, #2
 800f824:	461a      	mov	r2, r3
 800f826:	3201      	adds	r2, #1
 800f828:	4296      	cmp	r6, r2
 800f82a:	54a1      	strb	r1, [r4, r2]
 800f82c:	dcfb      	bgt.n	800f826 <__sccl+0x56>
 800f82e:	1af2      	subs	r2, r6, r3
 800f830:	3a01      	subs	r2, #1
 800f832:	1c5d      	adds	r5, r3, #1
 800f834:	42b3      	cmp	r3, r6
 800f836:	bfa8      	it	ge
 800f838:	2200      	movge	r2, #0
 800f83a:	18ab      	adds	r3, r5, r2
 800f83c:	e7e1      	b.n	800f802 <__sccl+0x32>
 800f83e:	4610      	mov	r0, r2
 800f840:	e7da      	b.n	800f7f8 <__sccl+0x28>

0800f842 <__submore>:
 800f842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f846:	460c      	mov	r4, r1
 800f848:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800f84a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f84e:	4299      	cmp	r1, r3
 800f850:	d11d      	bne.n	800f88e <__submore+0x4c>
 800f852:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800f856:	f7fb ffb3 	bl	800b7c0 <_malloc_r>
 800f85a:	b918      	cbnz	r0, 800f864 <__submore+0x22>
 800f85c:	f04f 30ff 	mov.w	r0, #4294967295
 800f860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f868:	63a3      	str	r3, [r4, #56]	@ 0x38
 800f86a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800f86e:	6360      	str	r0, [r4, #52]	@ 0x34
 800f870:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800f874:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f878:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800f87c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800f880:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800f884:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800f888:	6020      	str	r0, [r4, #0]
 800f88a:	2000      	movs	r0, #0
 800f88c:	e7e8      	b.n	800f860 <__submore+0x1e>
 800f88e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800f890:	0077      	lsls	r7, r6, #1
 800f892:	463a      	mov	r2, r7
 800f894:	f000 fbad 	bl	800fff2 <_realloc_r>
 800f898:	4605      	mov	r5, r0
 800f89a:	2800      	cmp	r0, #0
 800f89c:	d0de      	beq.n	800f85c <__submore+0x1a>
 800f89e:	eb00 0806 	add.w	r8, r0, r6
 800f8a2:	4601      	mov	r1, r0
 800f8a4:	4632      	mov	r2, r6
 800f8a6:	4640      	mov	r0, r8
 800f8a8:	f7fd f889 	bl	800c9be <memcpy>
 800f8ac:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800f8b0:	f8c4 8000 	str.w	r8, [r4]
 800f8b4:	e7e9      	b.n	800f88a <__submore+0x48>

0800f8b6 <memmove>:
 800f8b6:	4288      	cmp	r0, r1
 800f8b8:	b510      	push	{r4, lr}
 800f8ba:	eb01 0402 	add.w	r4, r1, r2
 800f8be:	d902      	bls.n	800f8c6 <memmove+0x10>
 800f8c0:	4284      	cmp	r4, r0
 800f8c2:	4623      	mov	r3, r4
 800f8c4:	d807      	bhi.n	800f8d6 <memmove+0x20>
 800f8c6:	1e43      	subs	r3, r0, #1
 800f8c8:	42a1      	cmp	r1, r4
 800f8ca:	d008      	beq.n	800f8de <memmove+0x28>
 800f8cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f8d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f8d4:	e7f8      	b.n	800f8c8 <memmove+0x12>
 800f8d6:	4402      	add	r2, r0
 800f8d8:	4601      	mov	r1, r0
 800f8da:	428a      	cmp	r2, r1
 800f8dc:	d100      	bne.n	800f8e0 <memmove+0x2a>
 800f8de:	bd10      	pop	{r4, pc}
 800f8e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f8e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f8e8:	e7f7      	b.n	800f8da <memmove+0x24>

0800f8ea <strncmp>:
 800f8ea:	b510      	push	{r4, lr}
 800f8ec:	b16a      	cbz	r2, 800f90a <strncmp+0x20>
 800f8ee:	3901      	subs	r1, #1
 800f8f0:	1884      	adds	r4, r0, r2
 800f8f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f8f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	d103      	bne.n	800f906 <strncmp+0x1c>
 800f8fe:	42a0      	cmp	r0, r4
 800f900:	d001      	beq.n	800f906 <strncmp+0x1c>
 800f902:	2a00      	cmp	r2, #0
 800f904:	d1f5      	bne.n	800f8f2 <strncmp+0x8>
 800f906:	1ad0      	subs	r0, r2, r3
 800f908:	bd10      	pop	{r4, pc}
 800f90a:	4610      	mov	r0, r2
 800f90c:	e7fc      	b.n	800f908 <strncmp+0x1e>
	...

0800f910 <nan>:
 800f910:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f918 <nan+0x8>
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	00000000 	.word	0x00000000
 800f91c:	7ff80000 	.word	0x7ff80000

0800f920 <__assert_func>:
 800f920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f922:	4614      	mov	r4, r2
 800f924:	461a      	mov	r2, r3
 800f926:	4b09      	ldr	r3, [pc, #36]	@ (800f94c <__assert_func+0x2c>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	4605      	mov	r5, r0
 800f92c:	68d8      	ldr	r0, [r3, #12]
 800f92e:	b954      	cbnz	r4, 800f946 <__assert_func+0x26>
 800f930:	4b07      	ldr	r3, [pc, #28]	@ (800f950 <__assert_func+0x30>)
 800f932:	461c      	mov	r4, r3
 800f934:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f938:	9100      	str	r1, [sp, #0]
 800f93a:	462b      	mov	r3, r5
 800f93c:	4905      	ldr	r1, [pc, #20]	@ (800f954 <__assert_func+0x34>)
 800f93e:	f000 fc05 	bl	801014c <fiprintf>
 800f942:	f000 fc15 	bl	8010170 <abort>
 800f946:	4b04      	ldr	r3, [pc, #16]	@ (800f958 <__assert_func+0x38>)
 800f948:	e7f4      	b.n	800f934 <__assert_func+0x14>
 800f94a:	bf00      	nop
 800f94c:	20000044 	.word	0x20000044
 800f950:	080124e8 	.word	0x080124e8
 800f954:	080124ba 	.word	0x080124ba
 800f958:	080124ad 	.word	0x080124ad

0800f95c <rshift>:
 800f95c:	6903      	ldr	r3, [r0, #16]
 800f95e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f962:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f966:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f96a:	f100 0414 	add.w	r4, r0, #20
 800f96e:	dd45      	ble.n	800f9fc <rshift+0xa0>
 800f970:	f011 011f 	ands.w	r1, r1, #31
 800f974:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f978:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f97c:	d10c      	bne.n	800f998 <rshift+0x3c>
 800f97e:	f100 0710 	add.w	r7, r0, #16
 800f982:	4629      	mov	r1, r5
 800f984:	42b1      	cmp	r1, r6
 800f986:	d334      	bcc.n	800f9f2 <rshift+0x96>
 800f988:	1a9b      	subs	r3, r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	1eea      	subs	r2, r5, #3
 800f98e:	4296      	cmp	r6, r2
 800f990:	bf38      	it	cc
 800f992:	2300      	movcc	r3, #0
 800f994:	4423      	add	r3, r4
 800f996:	e015      	b.n	800f9c4 <rshift+0x68>
 800f998:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f99c:	f1c1 0820 	rsb	r8, r1, #32
 800f9a0:	40cf      	lsrs	r7, r1
 800f9a2:	f105 0e04 	add.w	lr, r5, #4
 800f9a6:	46a1      	mov	r9, r4
 800f9a8:	4576      	cmp	r6, lr
 800f9aa:	46f4      	mov	ip, lr
 800f9ac:	d815      	bhi.n	800f9da <rshift+0x7e>
 800f9ae:	1a9a      	subs	r2, r3, r2
 800f9b0:	0092      	lsls	r2, r2, #2
 800f9b2:	3a04      	subs	r2, #4
 800f9b4:	3501      	adds	r5, #1
 800f9b6:	42ae      	cmp	r6, r5
 800f9b8:	bf38      	it	cc
 800f9ba:	2200      	movcc	r2, #0
 800f9bc:	18a3      	adds	r3, r4, r2
 800f9be:	50a7      	str	r7, [r4, r2]
 800f9c0:	b107      	cbz	r7, 800f9c4 <rshift+0x68>
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	1b1a      	subs	r2, r3, r4
 800f9c6:	42a3      	cmp	r3, r4
 800f9c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f9cc:	bf08      	it	eq
 800f9ce:	2300      	moveq	r3, #0
 800f9d0:	6102      	str	r2, [r0, #16]
 800f9d2:	bf08      	it	eq
 800f9d4:	6143      	streq	r3, [r0, #20]
 800f9d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f9da:	f8dc c000 	ldr.w	ip, [ip]
 800f9de:	fa0c fc08 	lsl.w	ip, ip, r8
 800f9e2:	ea4c 0707 	orr.w	r7, ip, r7
 800f9e6:	f849 7b04 	str.w	r7, [r9], #4
 800f9ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f9ee:	40cf      	lsrs	r7, r1
 800f9f0:	e7da      	b.n	800f9a8 <rshift+0x4c>
 800f9f2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f9f6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f9fa:	e7c3      	b.n	800f984 <rshift+0x28>
 800f9fc:	4623      	mov	r3, r4
 800f9fe:	e7e1      	b.n	800f9c4 <rshift+0x68>

0800fa00 <__hexdig_fun>:
 800fa00:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800fa04:	2b09      	cmp	r3, #9
 800fa06:	d802      	bhi.n	800fa0e <__hexdig_fun+0xe>
 800fa08:	3820      	subs	r0, #32
 800fa0a:	b2c0      	uxtb	r0, r0
 800fa0c:	4770      	bx	lr
 800fa0e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800fa12:	2b05      	cmp	r3, #5
 800fa14:	d801      	bhi.n	800fa1a <__hexdig_fun+0x1a>
 800fa16:	3847      	subs	r0, #71	@ 0x47
 800fa18:	e7f7      	b.n	800fa0a <__hexdig_fun+0xa>
 800fa1a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800fa1e:	2b05      	cmp	r3, #5
 800fa20:	d801      	bhi.n	800fa26 <__hexdig_fun+0x26>
 800fa22:	3827      	subs	r0, #39	@ 0x27
 800fa24:	e7f1      	b.n	800fa0a <__hexdig_fun+0xa>
 800fa26:	2000      	movs	r0, #0
 800fa28:	4770      	bx	lr
	...

0800fa2c <__gethex>:
 800fa2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa30:	b085      	sub	sp, #20
 800fa32:	468a      	mov	sl, r1
 800fa34:	9302      	str	r3, [sp, #8]
 800fa36:	680b      	ldr	r3, [r1, #0]
 800fa38:	9001      	str	r0, [sp, #4]
 800fa3a:	4690      	mov	r8, r2
 800fa3c:	1c9c      	adds	r4, r3, #2
 800fa3e:	46a1      	mov	r9, r4
 800fa40:	f814 0b01 	ldrb.w	r0, [r4], #1
 800fa44:	2830      	cmp	r0, #48	@ 0x30
 800fa46:	d0fa      	beq.n	800fa3e <__gethex+0x12>
 800fa48:	eba9 0303 	sub.w	r3, r9, r3
 800fa4c:	f1a3 0b02 	sub.w	fp, r3, #2
 800fa50:	f7ff ffd6 	bl	800fa00 <__hexdig_fun>
 800fa54:	4605      	mov	r5, r0
 800fa56:	2800      	cmp	r0, #0
 800fa58:	d168      	bne.n	800fb2c <__gethex+0x100>
 800fa5a:	49a0      	ldr	r1, [pc, #640]	@ (800fcdc <__gethex+0x2b0>)
 800fa5c:	2201      	movs	r2, #1
 800fa5e:	4648      	mov	r0, r9
 800fa60:	f7ff ff43 	bl	800f8ea <strncmp>
 800fa64:	4607      	mov	r7, r0
 800fa66:	2800      	cmp	r0, #0
 800fa68:	d167      	bne.n	800fb3a <__gethex+0x10e>
 800fa6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa6e:	4626      	mov	r6, r4
 800fa70:	f7ff ffc6 	bl	800fa00 <__hexdig_fun>
 800fa74:	2800      	cmp	r0, #0
 800fa76:	d062      	beq.n	800fb3e <__gethex+0x112>
 800fa78:	4623      	mov	r3, r4
 800fa7a:	7818      	ldrb	r0, [r3, #0]
 800fa7c:	2830      	cmp	r0, #48	@ 0x30
 800fa7e:	4699      	mov	r9, r3
 800fa80:	f103 0301 	add.w	r3, r3, #1
 800fa84:	d0f9      	beq.n	800fa7a <__gethex+0x4e>
 800fa86:	f7ff ffbb 	bl	800fa00 <__hexdig_fun>
 800fa8a:	fab0 f580 	clz	r5, r0
 800fa8e:	096d      	lsrs	r5, r5, #5
 800fa90:	f04f 0b01 	mov.w	fp, #1
 800fa94:	464a      	mov	r2, r9
 800fa96:	4616      	mov	r6, r2
 800fa98:	3201      	adds	r2, #1
 800fa9a:	7830      	ldrb	r0, [r6, #0]
 800fa9c:	f7ff ffb0 	bl	800fa00 <__hexdig_fun>
 800faa0:	2800      	cmp	r0, #0
 800faa2:	d1f8      	bne.n	800fa96 <__gethex+0x6a>
 800faa4:	498d      	ldr	r1, [pc, #564]	@ (800fcdc <__gethex+0x2b0>)
 800faa6:	2201      	movs	r2, #1
 800faa8:	4630      	mov	r0, r6
 800faaa:	f7ff ff1e 	bl	800f8ea <strncmp>
 800faae:	2800      	cmp	r0, #0
 800fab0:	d13f      	bne.n	800fb32 <__gethex+0x106>
 800fab2:	b944      	cbnz	r4, 800fac6 <__gethex+0x9a>
 800fab4:	1c74      	adds	r4, r6, #1
 800fab6:	4622      	mov	r2, r4
 800fab8:	4616      	mov	r6, r2
 800faba:	3201      	adds	r2, #1
 800fabc:	7830      	ldrb	r0, [r6, #0]
 800fabe:	f7ff ff9f 	bl	800fa00 <__hexdig_fun>
 800fac2:	2800      	cmp	r0, #0
 800fac4:	d1f8      	bne.n	800fab8 <__gethex+0x8c>
 800fac6:	1ba4      	subs	r4, r4, r6
 800fac8:	00a7      	lsls	r7, r4, #2
 800faca:	7833      	ldrb	r3, [r6, #0]
 800facc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800fad0:	2b50      	cmp	r3, #80	@ 0x50
 800fad2:	d13e      	bne.n	800fb52 <__gethex+0x126>
 800fad4:	7873      	ldrb	r3, [r6, #1]
 800fad6:	2b2b      	cmp	r3, #43	@ 0x2b
 800fad8:	d033      	beq.n	800fb42 <__gethex+0x116>
 800fada:	2b2d      	cmp	r3, #45	@ 0x2d
 800fadc:	d034      	beq.n	800fb48 <__gethex+0x11c>
 800fade:	1c71      	adds	r1, r6, #1
 800fae0:	2400      	movs	r4, #0
 800fae2:	7808      	ldrb	r0, [r1, #0]
 800fae4:	f7ff ff8c 	bl	800fa00 <__hexdig_fun>
 800fae8:	1e43      	subs	r3, r0, #1
 800faea:	b2db      	uxtb	r3, r3
 800faec:	2b18      	cmp	r3, #24
 800faee:	d830      	bhi.n	800fb52 <__gethex+0x126>
 800faf0:	f1a0 0210 	sub.w	r2, r0, #16
 800faf4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800faf8:	f7ff ff82 	bl	800fa00 <__hexdig_fun>
 800fafc:	f100 3cff 	add.w	ip, r0, #4294967295
 800fb00:	fa5f fc8c 	uxtb.w	ip, ip
 800fb04:	f1bc 0f18 	cmp.w	ip, #24
 800fb08:	f04f 030a 	mov.w	r3, #10
 800fb0c:	d91e      	bls.n	800fb4c <__gethex+0x120>
 800fb0e:	b104      	cbz	r4, 800fb12 <__gethex+0xe6>
 800fb10:	4252      	negs	r2, r2
 800fb12:	4417      	add	r7, r2
 800fb14:	f8ca 1000 	str.w	r1, [sl]
 800fb18:	b1ed      	cbz	r5, 800fb56 <__gethex+0x12a>
 800fb1a:	f1bb 0f00 	cmp.w	fp, #0
 800fb1e:	bf0c      	ite	eq
 800fb20:	2506      	moveq	r5, #6
 800fb22:	2500      	movne	r5, #0
 800fb24:	4628      	mov	r0, r5
 800fb26:	b005      	add	sp, #20
 800fb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb2c:	2500      	movs	r5, #0
 800fb2e:	462c      	mov	r4, r5
 800fb30:	e7b0      	b.n	800fa94 <__gethex+0x68>
 800fb32:	2c00      	cmp	r4, #0
 800fb34:	d1c7      	bne.n	800fac6 <__gethex+0x9a>
 800fb36:	4627      	mov	r7, r4
 800fb38:	e7c7      	b.n	800faca <__gethex+0x9e>
 800fb3a:	464e      	mov	r6, r9
 800fb3c:	462f      	mov	r7, r5
 800fb3e:	2501      	movs	r5, #1
 800fb40:	e7c3      	b.n	800faca <__gethex+0x9e>
 800fb42:	2400      	movs	r4, #0
 800fb44:	1cb1      	adds	r1, r6, #2
 800fb46:	e7cc      	b.n	800fae2 <__gethex+0xb6>
 800fb48:	2401      	movs	r4, #1
 800fb4a:	e7fb      	b.n	800fb44 <__gethex+0x118>
 800fb4c:	fb03 0002 	mla	r0, r3, r2, r0
 800fb50:	e7ce      	b.n	800faf0 <__gethex+0xc4>
 800fb52:	4631      	mov	r1, r6
 800fb54:	e7de      	b.n	800fb14 <__gethex+0xe8>
 800fb56:	eba6 0309 	sub.w	r3, r6, r9
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	4629      	mov	r1, r5
 800fb5e:	2b07      	cmp	r3, #7
 800fb60:	dc0a      	bgt.n	800fb78 <__gethex+0x14c>
 800fb62:	9801      	ldr	r0, [sp, #4]
 800fb64:	f7fd fdde 	bl	800d724 <_Balloc>
 800fb68:	4604      	mov	r4, r0
 800fb6a:	b940      	cbnz	r0, 800fb7e <__gethex+0x152>
 800fb6c:	4b5c      	ldr	r3, [pc, #368]	@ (800fce0 <__gethex+0x2b4>)
 800fb6e:	4602      	mov	r2, r0
 800fb70:	21e4      	movs	r1, #228	@ 0xe4
 800fb72:	485c      	ldr	r0, [pc, #368]	@ (800fce4 <__gethex+0x2b8>)
 800fb74:	f7ff fed4 	bl	800f920 <__assert_func>
 800fb78:	3101      	adds	r1, #1
 800fb7a:	105b      	asrs	r3, r3, #1
 800fb7c:	e7ef      	b.n	800fb5e <__gethex+0x132>
 800fb7e:	f100 0a14 	add.w	sl, r0, #20
 800fb82:	2300      	movs	r3, #0
 800fb84:	4655      	mov	r5, sl
 800fb86:	469b      	mov	fp, r3
 800fb88:	45b1      	cmp	r9, r6
 800fb8a:	d337      	bcc.n	800fbfc <__gethex+0x1d0>
 800fb8c:	f845 bb04 	str.w	fp, [r5], #4
 800fb90:	eba5 050a 	sub.w	r5, r5, sl
 800fb94:	10ad      	asrs	r5, r5, #2
 800fb96:	6125      	str	r5, [r4, #16]
 800fb98:	4658      	mov	r0, fp
 800fb9a:	f7fd feb5 	bl	800d908 <__hi0bits>
 800fb9e:	016d      	lsls	r5, r5, #5
 800fba0:	f8d8 6000 	ldr.w	r6, [r8]
 800fba4:	1a2d      	subs	r5, r5, r0
 800fba6:	42b5      	cmp	r5, r6
 800fba8:	dd54      	ble.n	800fc54 <__gethex+0x228>
 800fbaa:	1bad      	subs	r5, r5, r6
 800fbac:	4629      	mov	r1, r5
 800fbae:	4620      	mov	r0, r4
 800fbb0:	f7fe fa49 	bl	800e046 <__any_on>
 800fbb4:	4681      	mov	r9, r0
 800fbb6:	b178      	cbz	r0, 800fbd8 <__gethex+0x1ac>
 800fbb8:	1e6b      	subs	r3, r5, #1
 800fbba:	1159      	asrs	r1, r3, #5
 800fbbc:	f003 021f 	and.w	r2, r3, #31
 800fbc0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800fbc4:	f04f 0901 	mov.w	r9, #1
 800fbc8:	fa09 f202 	lsl.w	r2, r9, r2
 800fbcc:	420a      	tst	r2, r1
 800fbce:	d003      	beq.n	800fbd8 <__gethex+0x1ac>
 800fbd0:	454b      	cmp	r3, r9
 800fbd2:	dc36      	bgt.n	800fc42 <__gethex+0x216>
 800fbd4:	f04f 0902 	mov.w	r9, #2
 800fbd8:	4629      	mov	r1, r5
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f7ff febe 	bl	800f95c <rshift>
 800fbe0:	442f      	add	r7, r5
 800fbe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fbe6:	42bb      	cmp	r3, r7
 800fbe8:	da42      	bge.n	800fc70 <__gethex+0x244>
 800fbea:	9801      	ldr	r0, [sp, #4]
 800fbec:	4621      	mov	r1, r4
 800fbee:	f7fd fdd9 	bl	800d7a4 <_Bfree>
 800fbf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	6013      	str	r3, [r2, #0]
 800fbf8:	25a3      	movs	r5, #163	@ 0xa3
 800fbfa:	e793      	b.n	800fb24 <__gethex+0xf8>
 800fbfc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800fc00:	2a2e      	cmp	r2, #46	@ 0x2e
 800fc02:	d012      	beq.n	800fc2a <__gethex+0x1fe>
 800fc04:	2b20      	cmp	r3, #32
 800fc06:	d104      	bne.n	800fc12 <__gethex+0x1e6>
 800fc08:	f845 bb04 	str.w	fp, [r5], #4
 800fc0c:	f04f 0b00 	mov.w	fp, #0
 800fc10:	465b      	mov	r3, fp
 800fc12:	7830      	ldrb	r0, [r6, #0]
 800fc14:	9303      	str	r3, [sp, #12]
 800fc16:	f7ff fef3 	bl	800fa00 <__hexdig_fun>
 800fc1a:	9b03      	ldr	r3, [sp, #12]
 800fc1c:	f000 000f 	and.w	r0, r0, #15
 800fc20:	4098      	lsls	r0, r3
 800fc22:	ea4b 0b00 	orr.w	fp, fp, r0
 800fc26:	3304      	adds	r3, #4
 800fc28:	e7ae      	b.n	800fb88 <__gethex+0x15c>
 800fc2a:	45b1      	cmp	r9, r6
 800fc2c:	d8ea      	bhi.n	800fc04 <__gethex+0x1d8>
 800fc2e:	492b      	ldr	r1, [pc, #172]	@ (800fcdc <__gethex+0x2b0>)
 800fc30:	9303      	str	r3, [sp, #12]
 800fc32:	2201      	movs	r2, #1
 800fc34:	4630      	mov	r0, r6
 800fc36:	f7ff fe58 	bl	800f8ea <strncmp>
 800fc3a:	9b03      	ldr	r3, [sp, #12]
 800fc3c:	2800      	cmp	r0, #0
 800fc3e:	d1e1      	bne.n	800fc04 <__gethex+0x1d8>
 800fc40:	e7a2      	b.n	800fb88 <__gethex+0x15c>
 800fc42:	1ea9      	subs	r1, r5, #2
 800fc44:	4620      	mov	r0, r4
 800fc46:	f7fe f9fe 	bl	800e046 <__any_on>
 800fc4a:	2800      	cmp	r0, #0
 800fc4c:	d0c2      	beq.n	800fbd4 <__gethex+0x1a8>
 800fc4e:	f04f 0903 	mov.w	r9, #3
 800fc52:	e7c1      	b.n	800fbd8 <__gethex+0x1ac>
 800fc54:	da09      	bge.n	800fc6a <__gethex+0x23e>
 800fc56:	1b75      	subs	r5, r6, r5
 800fc58:	4621      	mov	r1, r4
 800fc5a:	9801      	ldr	r0, [sp, #4]
 800fc5c:	462a      	mov	r2, r5
 800fc5e:	f7fd ffb9 	bl	800dbd4 <__lshift>
 800fc62:	1b7f      	subs	r7, r7, r5
 800fc64:	4604      	mov	r4, r0
 800fc66:	f100 0a14 	add.w	sl, r0, #20
 800fc6a:	f04f 0900 	mov.w	r9, #0
 800fc6e:	e7b8      	b.n	800fbe2 <__gethex+0x1b6>
 800fc70:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fc74:	42bd      	cmp	r5, r7
 800fc76:	dd6f      	ble.n	800fd58 <__gethex+0x32c>
 800fc78:	1bed      	subs	r5, r5, r7
 800fc7a:	42ae      	cmp	r6, r5
 800fc7c:	dc34      	bgt.n	800fce8 <__gethex+0x2bc>
 800fc7e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fc82:	2b02      	cmp	r3, #2
 800fc84:	d022      	beq.n	800fccc <__gethex+0x2a0>
 800fc86:	2b03      	cmp	r3, #3
 800fc88:	d024      	beq.n	800fcd4 <__gethex+0x2a8>
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	d115      	bne.n	800fcba <__gethex+0x28e>
 800fc8e:	42ae      	cmp	r6, r5
 800fc90:	d113      	bne.n	800fcba <__gethex+0x28e>
 800fc92:	2e01      	cmp	r6, #1
 800fc94:	d10b      	bne.n	800fcae <__gethex+0x282>
 800fc96:	9a02      	ldr	r2, [sp, #8]
 800fc98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc9c:	6013      	str	r3, [r2, #0]
 800fc9e:	2301      	movs	r3, #1
 800fca0:	6123      	str	r3, [r4, #16]
 800fca2:	f8ca 3000 	str.w	r3, [sl]
 800fca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fca8:	2562      	movs	r5, #98	@ 0x62
 800fcaa:	601c      	str	r4, [r3, #0]
 800fcac:	e73a      	b.n	800fb24 <__gethex+0xf8>
 800fcae:	1e71      	subs	r1, r6, #1
 800fcb0:	4620      	mov	r0, r4
 800fcb2:	f7fe f9c8 	bl	800e046 <__any_on>
 800fcb6:	2800      	cmp	r0, #0
 800fcb8:	d1ed      	bne.n	800fc96 <__gethex+0x26a>
 800fcba:	9801      	ldr	r0, [sp, #4]
 800fcbc:	4621      	mov	r1, r4
 800fcbe:	f7fd fd71 	bl	800d7a4 <_Bfree>
 800fcc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	6013      	str	r3, [r2, #0]
 800fcc8:	2550      	movs	r5, #80	@ 0x50
 800fcca:	e72b      	b.n	800fb24 <__gethex+0xf8>
 800fccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d1f3      	bne.n	800fcba <__gethex+0x28e>
 800fcd2:	e7e0      	b.n	800fc96 <__gethex+0x26a>
 800fcd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1dd      	bne.n	800fc96 <__gethex+0x26a>
 800fcda:	e7ee      	b.n	800fcba <__gethex+0x28e>
 800fcdc:	08012320 	.word	0x08012320
 800fce0:	080121b7 	.word	0x080121b7
 800fce4:	080124e9 	.word	0x080124e9
 800fce8:	1e6f      	subs	r7, r5, #1
 800fcea:	f1b9 0f00 	cmp.w	r9, #0
 800fcee:	d130      	bne.n	800fd52 <__gethex+0x326>
 800fcf0:	b127      	cbz	r7, 800fcfc <__gethex+0x2d0>
 800fcf2:	4639      	mov	r1, r7
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	f7fe f9a6 	bl	800e046 <__any_on>
 800fcfa:	4681      	mov	r9, r0
 800fcfc:	117a      	asrs	r2, r7, #5
 800fcfe:	2301      	movs	r3, #1
 800fd00:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800fd04:	f007 071f 	and.w	r7, r7, #31
 800fd08:	40bb      	lsls	r3, r7
 800fd0a:	4213      	tst	r3, r2
 800fd0c:	4629      	mov	r1, r5
 800fd0e:	4620      	mov	r0, r4
 800fd10:	bf18      	it	ne
 800fd12:	f049 0902 	orrne.w	r9, r9, #2
 800fd16:	f7ff fe21 	bl	800f95c <rshift>
 800fd1a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800fd1e:	1b76      	subs	r6, r6, r5
 800fd20:	2502      	movs	r5, #2
 800fd22:	f1b9 0f00 	cmp.w	r9, #0
 800fd26:	d047      	beq.n	800fdb8 <__gethex+0x38c>
 800fd28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fd2c:	2b02      	cmp	r3, #2
 800fd2e:	d015      	beq.n	800fd5c <__gethex+0x330>
 800fd30:	2b03      	cmp	r3, #3
 800fd32:	d017      	beq.n	800fd64 <__gethex+0x338>
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d109      	bne.n	800fd4c <__gethex+0x320>
 800fd38:	f019 0f02 	tst.w	r9, #2
 800fd3c:	d006      	beq.n	800fd4c <__gethex+0x320>
 800fd3e:	f8da 3000 	ldr.w	r3, [sl]
 800fd42:	ea49 0903 	orr.w	r9, r9, r3
 800fd46:	f019 0f01 	tst.w	r9, #1
 800fd4a:	d10e      	bne.n	800fd6a <__gethex+0x33e>
 800fd4c:	f045 0510 	orr.w	r5, r5, #16
 800fd50:	e032      	b.n	800fdb8 <__gethex+0x38c>
 800fd52:	f04f 0901 	mov.w	r9, #1
 800fd56:	e7d1      	b.n	800fcfc <__gethex+0x2d0>
 800fd58:	2501      	movs	r5, #1
 800fd5a:	e7e2      	b.n	800fd22 <__gethex+0x2f6>
 800fd5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd5e:	f1c3 0301 	rsb	r3, r3, #1
 800fd62:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fd64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d0f0      	beq.n	800fd4c <__gethex+0x320>
 800fd6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fd6e:	f104 0314 	add.w	r3, r4, #20
 800fd72:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fd76:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fd7a:	f04f 0c00 	mov.w	ip, #0
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd84:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fd88:	d01b      	beq.n	800fdc2 <__gethex+0x396>
 800fd8a:	3201      	adds	r2, #1
 800fd8c:	6002      	str	r2, [r0, #0]
 800fd8e:	2d02      	cmp	r5, #2
 800fd90:	f104 0314 	add.w	r3, r4, #20
 800fd94:	d13c      	bne.n	800fe10 <__gethex+0x3e4>
 800fd96:	f8d8 2000 	ldr.w	r2, [r8]
 800fd9a:	3a01      	subs	r2, #1
 800fd9c:	42b2      	cmp	r2, r6
 800fd9e:	d109      	bne.n	800fdb4 <__gethex+0x388>
 800fda0:	1171      	asrs	r1, r6, #5
 800fda2:	2201      	movs	r2, #1
 800fda4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fda8:	f006 061f 	and.w	r6, r6, #31
 800fdac:	fa02 f606 	lsl.w	r6, r2, r6
 800fdb0:	421e      	tst	r6, r3
 800fdb2:	d13a      	bne.n	800fe2a <__gethex+0x3fe>
 800fdb4:	f045 0520 	orr.w	r5, r5, #32
 800fdb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fdba:	601c      	str	r4, [r3, #0]
 800fdbc:	9b02      	ldr	r3, [sp, #8]
 800fdbe:	601f      	str	r7, [r3, #0]
 800fdc0:	e6b0      	b.n	800fb24 <__gethex+0xf8>
 800fdc2:	4299      	cmp	r1, r3
 800fdc4:	f843 cc04 	str.w	ip, [r3, #-4]
 800fdc8:	d8d9      	bhi.n	800fd7e <__gethex+0x352>
 800fdca:	68a3      	ldr	r3, [r4, #8]
 800fdcc:	459b      	cmp	fp, r3
 800fdce:	db17      	blt.n	800fe00 <__gethex+0x3d4>
 800fdd0:	6861      	ldr	r1, [r4, #4]
 800fdd2:	9801      	ldr	r0, [sp, #4]
 800fdd4:	3101      	adds	r1, #1
 800fdd6:	f7fd fca5 	bl	800d724 <_Balloc>
 800fdda:	4681      	mov	r9, r0
 800fddc:	b918      	cbnz	r0, 800fde6 <__gethex+0x3ba>
 800fdde:	4b1a      	ldr	r3, [pc, #104]	@ (800fe48 <__gethex+0x41c>)
 800fde0:	4602      	mov	r2, r0
 800fde2:	2184      	movs	r1, #132	@ 0x84
 800fde4:	e6c5      	b.n	800fb72 <__gethex+0x146>
 800fde6:	6922      	ldr	r2, [r4, #16]
 800fde8:	3202      	adds	r2, #2
 800fdea:	f104 010c 	add.w	r1, r4, #12
 800fdee:	0092      	lsls	r2, r2, #2
 800fdf0:	300c      	adds	r0, #12
 800fdf2:	f7fc fde4 	bl	800c9be <memcpy>
 800fdf6:	4621      	mov	r1, r4
 800fdf8:	9801      	ldr	r0, [sp, #4]
 800fdfa:	f7fd fcd3 	bl	800d7a4 <_Bfree>
 800fdfe:	464c      	mov	r4, r9
 800fe00:	6923      	ldr	r3, [r4, #16]
 800fe02:	1c5a      	adds	r2, r3, #1
 800fe04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fe08:	6122      	str	r2, [r4, #16]
 800fe0a:	2201      	movs	r2, #1
 800fe0c:	615a      	str	r2, [r3, #20]
 800fe0e:	e7be      	b.n	800fd8e <__gethex+0x362>
 800fe10:	6922      	ldr	r2, [r4, #16]
 800fe12:	455a      	cmp	r2, fp
 800fe14:	dd0b      	ble.n	800fe2e <__gethex+0x402>
 800fe16:	2101      	movs	r1, #1
 800fe18:	4620      	mov	r0, r4
 800fe1a:	f7ff fd9f 	bl	800f95c <rshift>
 800fe1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fe22:	3701      	adds	r7, #1
 800fe24:	42bb      	cmp	r3, r7
 800fe26:	f6ff aee0 	blt.w	800fbea <__gethex+0x1be>
 800fe2a:	2501      	movs	r5, #1
 800fe2c:	e7c2      	b.n	800fdb4 <__gethex+0x388>
 800fe2e:	f016 061f 	ands.w	r6, r6, #31
 800fe32:	d0fa      	beq.n	800fe2a <__gethex+0x3fe>
 800fe34:	4453      	add	r3, sl
 800fe36:	f1c6 0620 	rsb	r6, r6, #32
 800fe3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fe3e:	f7fd fd63 	bl	800d908 <__hi0bits>
 800fe42:	42b0      	cmp	r0, r6
 800fe44:	dbe7      	blt.n	800fe16 <__gethex+0x3ea>
 800fe46:	e7f0      	b.n	800fe2a <__gethex+0x3fe>
 800fe48:	080121b7 	.word	0x080121b7

0800fe4c <L_shift>:
 800fe4c:	f1c2 0208 	rsb	r2, r2, #8
 800fe50:	0092      	lsls	r2, r2, #2
 800fe52:	b570      	push	{r4, r5, r6, lr}
 800fe54:	f1c2 0620 	rsb	r6, r2, #32
 800fe58:	6843      	ldr	r3, [r0, #4]
 800fe5a:	6804      	ldr	r4, [r0, #0]
 800fe5c:	fa03 f506 	lsl.w	r5, r3, r6
 800fe60:	432c      	orrs	r4, r5
 800fe62:	40d3      	lsrs	r3, r2
 800fe64:	6004      	str	r4, [r0, #0]
 800fe66:	f840 3f04 	str.w	r3, [r0, #4]!
 800fe6a:	4288      	cmp	r0, r1
 800fe6c:	d3f4      	bcc.n	800fe58 <L_shift+0xc>
 800fe6e:	bd70      	pop	{r4, r5, r6, pc}

0800fe70 <__match>:
 800fe70:	b530      	push	{r4, r5, lr}
 800fe72:	6803      	ldr	r3, [r0, #0]
 800fe74:	3301      	adds	r3, #1
 800fe76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fe7a:	b914      	cbnz	r4, 800fe82 <__match+0x12>
 800fe7c:	6003      	str	r3, [r0, #0]
 800fe7e:	2001      	movs	r0, #1
 800fe80:	bd30      	pop	{r4, r5, pc}
 800fe82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe86:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fe8a:	2d19      	cmp	r5, #25
 800fe8c:	bf98      	it	ls
 800fe8e:	3220      	addls	r2, #32
 800fe90:	42a2      	cmp	r2, r4
 800fe92:	d0f0      	beq.n	800fe76 <__match+0x6>
 800fe94:	2000      	movs	r0, #0
 800fe96:	e7f3      	b.n	800fe80 <__match+0x10>

0800fe98 <__hexnan>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	680b      	ldr	r3, [r1, #0]
 800fe9e:	6801      	ldr	r1, [r0, #0]
 800fea0:	115e      	asrs	r6, r3, #5
 800fea2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fea6:	f013 031f 	ands.w	r3, r3, #31
 800feaa:	b087      	sub	sp, #28
 800feac:	bf18      	it	ne
 800feae:	3604      	addne	r6, #4
 800feb0:	2500      	movs	r5, #0
 800feb2:	1f37      	subs	r7, r6, #4
 800feb4:	4682      	mov	sl, r0
 800feb6:	4690      	mov	r8, r2
 800feb8:	9301      	str	r3, [sp, #4]
 800feba:	f846 5c04 	str.w	r5, [r6, #-4]
 800febe:	46b9      	mov	r9, r7
 800fec0:	463c      	mov	r4, r7
 800fec2:	9502      	str	r5, [sp, #8]
 800fec4:	46ab      	mov	fp, r5
 800fec6:	784a      	ldrb	r2, [r1, #1]
 800fec8:	1c4b      	adds	r3, r1, #1
 800feca:	9303      	str	r3, [sp, #12]
 800fecc:	b342      	cbz	r2, 800ff20 <__hexnan+0x88>
 800fece:	4610      	mov	r0, r2
 800fed0:	9105      	str	r1, [sp, #20]
 800fed2:	9204      	str	r2, [sp, #16]
 800fed4:	f7ff fd94 	bl	800fa00 <__hexdig_fun>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d151      	bne.n	800ff80 <__hexnan+0xe8>
 800fedc:	9a04      	ldr	r2, [sp, #16]
 800fede:	9905      	ldr	r1, [sp, #20]
 800fee0:	2a20      	cmp	r2, #32
 800fee2:	d818      	bhi.n	800ff16 <__hexnan+0x7e>
 800fee4:	9b02      	ldr	r3, [sp, #8]
 800fee6:	459b      	cmp	fp, r3
 800fee8:	dd13      	ble.n	800ff12 <__hexnan+0x7a>
 800feea:	454c      	cmp	r4, r9
 800feec:	d206      	bcs.n	800fefc <__hexnan+0x64>
 800feee:	2d07      	cmp	r5, #7
 800fef0:	dc04      	bgt.n	800fefc <__hexnan+0x64>
 800fef2:	462a      	mov	r2, r5
 800fef4:	4649      	mov	r1, r9
 800fef6:	4620      	mov	r0, r4
 800fef8:	f7ff ffa8 	bl	800fe4c <L_shift>
 800fefc:	4544      	cmp	r4, r8
 800fefe:	d952      	bls.n	800ffa6 <__hexnan+0x10e>
 800ff00:	2300      	movs	r3, #0
 800ff02:	f1a4 0904 	sub.w	r9, r4, #4
 800ff06:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff0a:	f8cd b008 	str.w	fp, [sp, #8]
 800ff0e:	464c      	mov	r4, r9
 800ff10:	461d      	mov	r5, r3
 800ff12:	9903      	ldr	r1, [sp, #12]
 800ff14:	e7d7      	b.n	800fec6 <__hexnan+0x2e>
 800ff16:	2a29      	cmp	r2, #41	@ 0x29
 800ff18:	d157      	bne.n	800ffca <__hexnan+0x132>
 800ff1a:	3102      	adds	r1, #2
 800ff1c:	f8ca 1000 	str.w	r1, [sl]
 800ff20:	f1bb 0f00 	cmp.w	fp, #0
 800ff24:	d051      	beq.n	800ffca <__hexnan+0x132>
 800ff26:	454c      	cmp	r4, r9
 800ff28:	d206      	bcs.n	800ff38 <__hexnan+0xa0>
 800ff2a:	2d07      	cmp	r5, #7
 800ff2c:	dc04      	bgt.n	800ff38 <__hexnan+0xa0>
 800ff2e:	462a      	mov	r2, r5
 800ff30:	4649      	mov	r1, r9
 800ff32:	4620      	mov	r0, r4
 800ff34:	f7ff ff8a 	bl	800fe4c <L_shift>
 800ff38:	4544      	cmp	r4, r8
 800ff3a:	d936      	bls.n	800ffaa <__hexnan+0x112>
 800ff3c:	f1a8 0204 	sub.w	r2, r8, #4
 800ff40:	4623      	mov	r3, r4
 800ff42:	f853 1b04 	ldr.w	r1, [r3], #4
 800ff46:	f842 1f04 	str.w	r1, [r2, #4]!
 800ff4a:	429f      	cmp	r7, r3
 800ff4c:	d2f9      	bcs.n	800ff42 <__hexnan+0xaa>
 800ff4e:	1b3b      	subs	r3, r7, r4
 800ff50:	f023 0303 	bic.w	r3, r3, #3
 800ff54:	3304      	adds	r3, #4
 800ff56:	3401      	adds	r4, #1
 800ff58:	3e03      	subs	r6, #3
 800ff5a:	42b4      	cmp	r4, r6
 800ff5c:	bf88      	it	hi
 800ff5e:	2304      	movhi	r3, #4
 800ff60:	4443      	add	r3, r8
 800ff62:	2200      	movs	r2, #0
 800ff64:	f843 2b04 	str.w	r2, [r3], #4
 800ff68:	429f      	cmp	r7, r3
 800ff6a:	d2fb      	bcs.n	800ff64 <__hexnan+0xcc>
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	b91b      	cbnz	r3, 800ff78 <__hexnan+0xe0>
 800ff70:	4547      	cmp	r7, r8
 800ff72:	d128      	bne.n	800ffc6 <__hexnan+0x12e>
 800ff74:	2301      	movs	r3, #1
 800ff76:	603b      	str	r3, [r7, #0]
 800ff78:	2005      	movs	r0, #5
 800ff7a:	b007      	add	sp, #28
 800ff7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff80:	3501      	adds	r5, #1
 800ff82:	2d08      	cmp	r5, #8
 800ff84:	f10b 0b01 	add.w	fp, fp, #1
 800ff88:	dd06      	ble.n	800ff98 <__hexnan+0x100>
 800ff8a:	4544      	cmp	r4, r8
 800ff8c:	d9c1      	bls.n	800ff12 <__hexnan+0x7a>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f844 3c04 	str.w	r3, [r4, #-4]
 800ff94:	2501      	movs	r5, #1
 800ff96:	3c04      	subs	r4, #4
 800ff98:	6822      	ldr	r2, [r4, #0]
 800ff9a:	f000 000f 	and.w	r0, r0, #15
 800ff9e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ffa2:	6020      	str	r0, [r4, #0]
 800ffa4:	e7b5      	b.n	800ff12 <__hexnan+0x7a>
 800ffa6:	2508      	movs	r5, #8
 800ffa8:	e7b3      	b.n	800ff12 <__hexnan+0x7a>
 800ffaa:	9b01      	ldr	r3, [sp, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d0dd      	beq.n	800ff6c <__hexnan+0xd4>
 800ffb0:	f1c3 0320 	rsb	r3, r3, #32
 800ffb4:	f04f 32ff 	mov.w	r2, #4294967295
 800ffb8:	40da      	lsrs	r2, r3
 800ffba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ffbe:	4013      	ands	r3, r2
 800ffc0:	f846 3c04 	str.w	r3, [r6, #-4]
 800ffc4:	e7d2      	b.n	800ff6c <__hexnan+0xd4>
 800ffc6:	3f04      	subs	r7, #4
 800ffc8:	e7d0      	b.n	800ff6c <__hexnan+0xd4>
 800ffca:	2004      	movs	r0, #4
 800ffcc:	e7d5      	b.n	800ff7a <__hexnan+0xe2>

0800ffce <__ascii_mbtowc>:
 800ffce:	b082      	sub	sp, #8
 800ffd0:	b901      	cbnz	r1, 800ffd4 <__ascii_mbtowc+0x6>
 800ffd2:	a901      	add	r1, sp, #4
 800ffd4:	b142      	cbz	r2, 800ffe8 <__ascii_mbtowc+0x1a>
 800ffd6:	b14b      	cbz	r3, 800ffec <__ascii_mbtowc+0x1e>
 800ffd8:	7813      	ldrb	r3, [r2, #0]
 800ffda:	600b      	str	r3, [r1, #0]
 800ffdc:	7812      	ldrb	r2, [r2, #0]
 800ffde:	1e10      	subs	r0, r2, #0
 800ffe0:	bf18      	it	ne
 800ffe2:	2001      	movne	r0, #1
 800ffe4:	b002      	add	sp, #8
 800ffe6:	4770      	bx	lr
 800ffe8:	4610      	mov	r0, r2
 800ffea:	e7fb      	b.n	800ffe4 <__ascii_mbtowc+0x16>
 800ffec:	f06f 0001 	mvn.w	r0, #1
 800fff0:	e7f8      	b.n	800ffe4 <__ascii_mbtowc+0x16>

0800fff2 <_realloc_r>:
 800fff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fff6:	4680      	mov	r8, r0
 800fff8:	4615      	mov	r5, r2
 800fffa:	460c      	mov	r4, r1
 800fffc:	b921      	cbnz	r1, 8010008 <_realloc_r+0x16>
 800fffe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010002:	4611      	mov	r1, r2
 8010004:	f7fb bbdc 	b.w	800b7c0 <_malloc_r>
 8010008:	b92a      	cbnz	r2, 8010016 <_realloc_r+0x24>
 801000a:	f7fd fb39 	bl	800d680 <_free_r>
 801000e:	2400      	movs	r4, #0
 8010010:	4620      	mov	r0, r4
 8010012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010016:	f000 f8b2 	bl	801017e <_malloc_usable_size_r>
 801001a:	4285      	cmp	r5, r0
 801001c:	4606      	mov	r6, r0
 801001e:	d802      	bhi.n	8010026 <_realloc_r+0x34>
 8010020:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010024:	d8f4      	bhi.n	8010010 <_realloc_r+0x1e>
 8010026:	4629      	mov	r1, r5
 8010028:	4640      	mov	r0, r8
 801002a:	f7fb fbc9 	bl	800b7c0 <_malloc_r>
 801002e:	4607      	mov	r7, r0
 8010030:	2800      	cmp	r0, #0
 8010032:	d0ec      	beq.n	801000e <_realloc_r+0x1c>
 8010034:	42b5      	cmp	r5, r6
 8010036:	462a      	mov	r2, r5
 8010038:	4621      	mov	r1, r4
 801003a:	bf28      	it	cs
 801003c:	4632      	movcs	r2, r6
 801003e:	f7fc fcbe 	bl	800c9be <memcpy>
 8010042:	4621      	mov	r1, r4
 8010044:	4640      	mov	r0, r8
 8010046:	f7fd fb1b 	bl	800d680 <_free_r>
 801004a:	463c      	mov	r4, r7
 801004c:	e7e0      	b.n	8010010 <_realloc_r+0x1e>
	...

08010050 <_strtoul_l.constprop.0>:
 8010050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010054:	4e34      	ldr	r6, [pc, #208]	@ (8010128 <_strtoul_l.constprop.0+0xd8>)
 8010056:	4686      	mov	lr, r0
 8010058:	460d      	mov	r5, r1
 801005a:	4628      	mov	r0, r5
 801005c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010060:	5d37      	ldrb	r7, [r6, r4]
 8010062:	f017 0708 	ands.w	r7, r7, #8
 8010066:	d1f8      	bne.n	801005a <_strtoul_l.constprop.0+0xa>
 8010068:	2c2d      	cmp	r4, #45	@ 0x2d
 801006a:	d12f      	bne.n	80100cc <_strtoul_l.constprop.0+0x7c>
 801006c:	782c      	ldrb	r4, [r5, #0]
 801006e:	2701      	movs	r7, #1
 8010070:	1c85      	adds	r5, r0, #2
 8010072:	f033 0010 	bics.w	r0, r3, #16
 8010076:	d109      	bne.n	801008c <_strtoul_l.constprop.0+0x3c>
 8010078:	2c30      	cmp	r4, #48	@ 0x30
 801007a:	d12c      	bne.n	80100d6 <_strtoul_l.constprop.0+0x86>
 801007c:	7828      	ldrb	r0, [r5, #0]
 801007e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010082:	2858      	cmp	r0, #88	@ 0x58
 8010084:	d127      	bne.n	80100d6 <_strtoul_l.constprop.0+0x86>
 8010086:	786c      	ldrb	r4, [r5, #1]
 8010088:	2310      	movs	r3, #16
 801008a:	3502      	adds	r5, #2
 801008c:	f04f 38ff 	mov.w	r8, #4294967295
 8010090:	2600      	movs	r6, #0
 8010092:	fbb8 f8f3 	udiv	r8, r8, r3
 8010096:	fb03 f908 	mul.w	r9, r3, r8
 801009a:	ea6f 0909 	mvn.w	r9, r9
 801009e:	4630      	mov	r0, r6
 80100a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80100a4:	f1bc 0f09 	cmp.w	ip, #9
 80100a8:	d81c      	bhi.n	80100e4 <_strtoul_l.constprop.0+0x94>
 80100aa:	4664      	mov	r4, ip
 80100ac:	42a3      	cmp	r3, r4
 80100ae:	dd2a      	ble.n	8010106 <_strtoul_l.constprop.0+0xb6>
 80100b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80100b4:	d007      	beq.n	80100c6 <_strtoul_l.constprop.0+0x76>
 80100b6:	4580      	cmp	r8, r0
 80100b8:	d322      	bcc.n	8010100 <_strtoul_l.constprop.0+0xb0>
 80100ba:	d101      	bne.n	80100c0 <_strtoul_l.constprop.0+0x70>
 80100bc:	45a1      	cmp	r9, r4
 80100be:	db1f      	blt.n	8010100 <_strtoul_l.constprop.0+0xb0>
 80100c0:	fb00 4003 	mla	r0, r0, r3, r4
 80100c4:	2601      	movs	r6, #1
 80100c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80100ca:	e7e9      	b.n	80100a0 <_strtoul_l.constprop.0+0x50>
 80100cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80100ce:	bf04      	itt	eq
 80100d0:	782c      	ldrbeq	r4, [r5, #0]
 80100d2:	1c85      	addeq	r5, r0, #2
 80100d4:	e7cd      	b.n	8010072 <_strtoul_l.constprop.0+0x22>
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1d8      	bne.n	801008c <_strtoul_l.constprop.0+0x3c>
 80100da:	2c30      	cmp	r4, #48	@ 0x30
 80100dc:	bf0c      	ite	eq
 80100de:	2308      	moveq	r3, #8
 80100e0:	230a      	movne	r3, #10
 80100e2:	e7d3      	b.n	801008c <_strtoul_l.constprop.0+0x3c>
 80100e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80100e8:	f1bc 0f19 	cmp.w	ip, #25
 80100ec:	d801      	bhi.n	80100f2 <_strtoul_l.constprop.0+0xa2>
 80100ee:	3c37      	subs	r4, #55	@ 0x37
 80100f0:	e7dc      	b.n	80100ac <_strtoul_l.constprop.0+0x5c>
 80100f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80100f6:	f1bc 0f19 	cmp.w	ip, #25
 80100fa:	d804      	bhi.n	8010106 <_strtoul_l.constprop.0+0xb6>
 80100fc:	3c57      	subs	r4, #87	@ 0x57
 80100fe:	e7d5      	b.n	80100ac <_strtoul_l.constprop.0+0x5c>
 8010100:	f04f 36ff 	mov.w	r6, #4294967295
 8010104:	e7df      	b.n	80100c6 <_strtoul_l.constprop.0+0x76>
 8010106:	1c73      	adds	r3, r6, #1
 8010108:	d106      	bne.n	8010118 <_strtoul_l.constprop.0+0xc8>
 801010a:	2322      	movs	r3, #34	@ 0x22
 801010c:	f8ce 3000 	str.w	r3, [lr]
 8010110:	4630      	mov	r0, r6
 8010112:	b932      	cbnz	r2, 8010122 <_strtoul_l.constprop.0+0xd2>
 8010114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010118:	b107      	cbz	r7, 801011c <_strtoul_l.constprop.0+0xcc>
 801011a:	4240      	negs	r0, r0
 801011c:	2a00      	cmp	r2, #0
 801011e:	d0f9      	beq.n	8010114 <_strtoul_l.constprop.0+0xc4>
 8010120:	b106      	cbz	r6, 8010124 <_strtoul_l.constprop.0+0xd4>
 8010122:	1e69      	subs	r1, r5, #1
 8010124:	6011      	str	r1, [r2, #0]
 8010126:	e7f5      	b.n	8010114 <_strtoul_l.constprop.0+0xc4>
 8010128:	08012379 	.word	0x08012379

0801012c <_strtoul_r>:
 801012c:	f7ff bf90 	b.w	8010050 <_strtoul_l.constprop.0>

08010130 <__ascii_wctomb>:
 8010130:	4603      	mov	r3, r0
 8010132:	4608      	mov	r0, r1
 8010134:	b141      	cbz	r1, 8010148 <__ascii_wctomb+0x18>
 8010136:	2aff      	cmp	r2, #255	@ 0xff
 8010138:	d904      	bls.n	8010144 <__ascii_wctomb+0x14>
 801013a:	228a      	movs	r2, #138	@ 0x8a
 801013c:	601a      	str	r2, [r3, #0]
 801013e:	f04f 30ff 	mov.w	r0, #4294967295
 8010142:	4770      	bx	lr
 8010144:	700a      	strb	r2, [r1, #0]
 8010146:	2001      	movs	r0, #1
 8010148:	4770      	bx	lr
	...

0801014c <fiprintf>:
 801014c:	b40e      	push	{r1, r2, r3}
 801014e:	b503      	push	{r0, r1, lr}
 8010150:	4601      	mov	r1, r0
 8010152:	ab03      	add	r3, sp, #12
 8010154:	4805      	ldr	r0, [pc, #20]	@ (801016c <fiprintf+0x20>)
 8010156:	f853 2b04 	ldr.w	r2, [r3], #4
 801015a:	6800      	ldr	r0, [r0, #0]
 801015c:	9301      	str	r3, [sp, #4]
 801015e:	f000 f83f 	bl	80101e0 <_vfiprintf_r>
 8010162:	b002      	add	sp, #8
 8010164:	f85d eb04 	ldr.w	lr, [sp], #4
 8010168:	b003      	add	sp, #12
 801016a:	4770      	bx	lr
 801016c:	20000044 	.word	0x20000044

08010170 <abort>:
 8010170:	b508      	push	{r3, lr}
 8010172:	2006      	movs	r0, #6
 8010174:	f000 fa08 	bl	8010588 <raise>
 8010178:	2001      	movs	r0, #1
 801017a:	f7f5 fef9 	bl	8005f70 <_exit>

0801017e <_malloc_usable_size_r>:
 801017e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010182:	1f18      	subs	r0, r3, #4
 8010184:	2b00      	cmp	r3, #0
 8010186:	bfbc      	itt	lt
 8010188:	580b      	ldrlt	r3, [r1, r0]
 801018a:	18c0      	addlt	r0, r0, r3
 801018c:	4770      	bx	lr

0801018e <__sfputc_r>:
 801018e:	6893      	ldr	r3, [r2, #8]
 8010190:	3b01      	subs	r3, #1
 8010192:	2b00      	cmp	r3, #0
 8010194:	b410      	push	{r4}
 8010196:	6093      	str	r3, [r2, #8]
 8010198:	da08      	bge.n	80101ac <__sfputc_r+0x1e>
 801019a:	6994      	ldr	r4, [r2, #24]
 801019c:	42a3      	cmp	r3, r4
 801019e:	db01      	blt.n	80101a4 <__sfputc_r+0x16>
 80101a0:	290a      	cmp	r1, #10
 80101a2:	d103      	bne.n	80101ac <__sfputc_r+0x1e>
 80101a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101a8:	f000 b932 	b.w	8010410 <__swbuf_r>
 80101ac:	6813      	ldr	r3, [r2, #0]
 80101ae:	1c58      	adds	r0, r3, #1
 80101b0:	6010      	str	r0, [r2, #0]
 80101b2:	7019      	strb	r1, [r3, #0]
 80101b4:	4608      	mov	r0, r1
 80101b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101ba:	4770      	bx	lr

080101bc <__sfputs_r>:
 80101bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101be:	4606      	mov	r6, r0
 80101c0:	460f      	mov	r7, r1
 80101c2:	4614      	mov	r4, r2
 80101c4:	18d5      	adds	r5, r2, r3
 80101c6:	42ac      	cmp	r4, r5
 80101c8:	d101      	bne.n	80101ce <__sfputs_r+0x12>
 80101ca:	2000      	movs	r0, #0
 80101cc:	e007      	b.n	80101de <__sfputs_r+0x22>
 80101ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101d2:	463a      	mov	r2, r7
 80101d4:	4630      	mov	r0, r6
 80101d6:	f7ff ffda 	bl	801018e <__sfputc_r>
 80101da:	1c43      	adds	r3, r0, #1
 80101dc:	d1f3      	bne.n	80101c6 <__sfputs_r+0xa>
 80101de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101e0 <_vfiprintf_r>:
 80101e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101e4:	460d      	mov	r5, r1
 80101e6:	b09d      	sub	sp, #116	@ 0x74
 80101e8:	4614      	mov	r4, r2
 80101ea:	4698      	mov	r8, r3
 80101ec:	4606      	mov	r6, r0
 80101ee:	b118      	cbz	r0, 80101f8 <_vfiprintf_r+0x18>
 80101f0:	6a03      	ldr	r3, [r0, #32]
 80101f2:	b90b      	cbnz	r3, 80101f8 <_vfiprintf_r+0x18>
 80101f4:	f7fc fa68 	bl	800c6c8 <__sinit>
 80101f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101fa:	07d9      	lsls	r1, r3, #31
 80101fc:	d405      	bmi.n	801020a <_vfiprintf_r+0x2a>
 80101fe:	89ab      	ldrh	r3, [r5, #12]
 8010200:	059a      	lsls	r2, r3, #22
 8010202:	d402      	bmi.n	801020a <_vfiprintf_r+0x2a>
 8010204:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010206:	f7fc fbd8 	bl	800c9ba <__retarget_lock_acquire_recursive>
 801020a:	89ab      	ldrh	r3, [r5, #12]
 801020c:	071b      	lsls	r3, r3, #28
 801020e:	d501      	bpl.n	8010214 <_vfiprintf_r+0x34>
 8010210:	692b      	ldr	r3, [r5, #16]
 8010212:	b99b      	cbnz	r3, 801023c <_vfiprintf_r+0x5c>
 8010214:	4629      	mov	r1, r5
 8010216:	4630      	mov	r0, r6
 8010218:	f000 f938 	bl	801048c <__swsetup_r>
 801021c:	b170      	cbz	r0, 801023c <_vfiprintf_r+0x5c>
 801021e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010220:	07dc      	lsls	r4, r3, #31
 8010222:	d504      	bpl.n	801022e <_vfiprintf_r+0x4e>
 8010224:	f04f 30ff 	mov.w	r0, #4294967295
 8010228:	b01d      	add	sp, #116	@ 0x74
 801022a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801022e:	89ab      	ldrh	r3, [r5, #12]
 8010230:	0598      	lsls	r0, r3, #22
 8010232:	d4f7      	bmi.n	8010224 <_vfiprintf_r+0x44>
 8010234:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010236:	f7fc fbc1 	bl	800c9bc <__retarget_lock_release_recursive>
 801023a:	e7f3      	b.n	8010224 <_vfiprintf_r+0x44>
 801023c:	2300      	movs	r3, #0
 801023e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010240:	2320      	movs	r3, #32
 8010242:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010246:	f8cd 800c 	str.w	r8, [sp, #12]
 801024a:	2330      	movs	r3, #48	@ 0x30
 801024c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103fc <_vfiprintf_r+0x21c>
 8010250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010254:	f04f 0901 	mov.w	r9, #1
 8010258:	4623      	mov	r3, r4
 801025a:	469a      	mov	sl, r3
 801025c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010260:	b10a      	cbz	r2, 8010266 <_vfiprintf_r+0x86>
 8010262:	2a25      	cmp	r2, #37	@ 0x25
 8010264:	d1f9      	bne.n	801025a <_vfiprintf_r+0x7a>
 8010266:	ebba 0b04 	subs.w	fp, sl, r4
 801026a:	d00b      	beq.n	8010284 <_vfiprintf_r+0xa4>
 801026c:	465b      	mov	r3, fp
 801026e:	4622      	mov	r2, r4
 8010270:	4629      	mov	r1, r5
 8010272:	4630      	mov	r0, r6
 8010274:	f7ff ffa2 	bl	80101bc <__sfputs_r>
 8010278:	3001      	adds	r0, #1
 801027a:	f000 80a7 	beq.w	80103cc <_vfiprintf_r+0x1ec>
 801027e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010280:	445a      	add	r2, fp
 8010282:	9209      	str	r2, [sp, #36]	@ 0x24
 8010284:	f89a 3000 	ldrb.w	r3, [sl]
 8010288:	2b00      	cmp	r3, #0
 801028a:	f000 809f 	beq.w	80103cc <_vfiprintf_r+0x1ec>
 801028e:	2300      	movs	r3, #0
 8010290:	f04f 32ff 	mov.w	r2, #4294967295
 8010294:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010298:	f10a 0a01 	add.w	sl, sl, #1
 801029c:	9304      	str	r3, [sp, #16]
 801029e:	9307      	str	r3, [sp, #28]
 80102a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80102a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80102a6:	4654      	mov	r4, sl
 80102a8:	2205      	movs	r2, #5
 80102aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ae:	4853      	ldr	r0, [pc, #332]	@ (80103fc <_vfiprintf_r+0x21c>)
 80102b0:	f7ef ffae 	bl	8000210 <memchr>
 80102b4:	9a04      	ldr	r2, [sp, #16]
 80102b6:	b9d8      	cbnz	r0, 80102f0 <_vfiprintf_r+0x110>
 80102b8:	06d1      	lsls	r1, r2, #27
 80102ba:	bf44      	itt	mi
 80102bc:	2320      	movmi	r3, #32
 80102be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102c2:	0713      	lsls	r3, r2, #28
 80102c4:	bf44      	itt	mi
 80102c6:	232b      	movmi	r3, #43	@ 0x2b
 80102c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102cc:	f89a 3000 	ldrb.w	r3, [sl]
 80102d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80102d2:	d015      	beq.n	8010300 <_vfiprintf_r+0x120>
 80102d4:	9a07      	ldr	r2, [sp, #28]
 80102d6:	4654      	mov	r4, sl
 80102d8:	2000      	movs	r0, #0
 80102da:	f04f 0c0a 	mov.w	ip, #10
 80102de:	4621      	mov	r1, r4
 80102e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102e4:	3b30      	subs	r3, #48	@ 0x30
 80102e6:	2b09      	cmp	r3, #9
 80102e8:	d94b      	bls.n	8010382 <_vfiprintf_r+0x1a2>
 80102ea:	b1b0      	cbz	r0, 801031a <_vfiprintf_r+0x13a>
 80102ec:	9207      	str	r2, [sp, #28]
 80102ee:	e014      	b.n	801031a <_vfiprintf_r+0x13a>
 80102f0:	eba0 0308 	sub.w	r3, r0, r8
 80102f4:	fa09 f303 	lsl.w	r3, r9, r3
 80102f8:	4313      	orrs	r3, r2
 80102fa:	9304      	str	r3, [sp, #16]
 80102fc:	46a2      	mov	sl, r4
 80102fe:	e7d2      	b.n	80102a6 <_vfiprintf_r+0xc6>
 8010300:	9b03      	ldr	r3, [sp, #12]
 8010302:	1d19      	adds	r1, r3, #4
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	9103      	str	r1, [sp, #12]
 8010308:	2b00      	cmp	r3, #0
 801030a:	bfbb      	ittet	lt
 801030c:	425b      	neglt	r3, r3
 801030e:	f042 0202 	orrlt.w	r2, r2, #2
 8010312:	9307      	strge	r3, [sp, #28]
 8010314:	9307      	strlt	r3, [sp, #28]
 8010316:	bfb8      	it	lt
 8010318:	9204      	strlt	r2, [sp, #16]
 801031a:	7823      	ldrb	r3, [r4, #0]
 801031c:	2b2e      	cmp	r3, #46	@ 0x2e
 801031e:	d10a      	bne.n	8010336 <_vfiprintf_r+0x156>
 8010320:	7863      	ldrb	r3, [r4, #1]
 8010322:	2b2a      	cmp	r3, #42	@ 0x2a
 8010324:	d132      	bne.n	801038c <_vfiprintf_r+0x1ac>
 8010326:	9b03      	ldr	r3, [sp, #12]
 8010328:	1d1a      	adds	r2, r3, #4
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	9203      	str	r2, [sp, #12]
 801032e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010332:	3402      	adds	r4, #2
 8010334:	9305      	str	r3, [sp, #20]
 8010336:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801040c <_vfiprintf_r+0x22c>
 801033a:	7821      	ldrb	r1, [r4, #0]
 801033c:	2203      	movs	r2, #3
 801033e:	4650      	mov	r0, sl
 8010340:	f7ef ff66 	bl	8000210 <memchr>
 8010344:	b138      	cbz	r0, 8010356 <_vfiprintf_r+0x176>
 8010346:	9b04      	ldr	r3, [sp, #16]
 8010348:	eba0 000a 	sub.w	r0, r0, sl
 801034c:	2240      	movs	r2, #64	@ 0x40
 801034e:	4082      	lsls	r2, r0
 8010350:	4313      	orrs	r3, r2
 8010352:	3401      	adds	r4, #1
 8010354:	9304      	str	r3, [sp, #16]
 8010356:	f814 1b01 	ldrb.w	r1, [r4], #1
 801035a:	4829      	ldr	r0, [pc, #164]	@ (8010400 <_vfiprintf_r+0x220>)
 801035c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010360:	2206      	movs	r2, #6
 8010362:	f7ef ff55 	bl	8000210 <memchr>
 8010366:	2800      	cmp	r0, #0
 8010368:	d03f      	beq.n	80103ea <_vfiprintf_r+0x20a>
 801036a:	4b26      	ldr	r3, [pc, #152]	@ (8010404 <_vfiprintf_r+0x224>)
 801036c:	bb1b      	cbnz	r3, 80103b6 <_vfiprintf_r+0x1d6>
 801036e:	9b03      	ldr	r3, [sp, #12]
 8010370:	3307      	adds	r3, #7
 8010372:	f023 0307 	bic.w	r3, r3, #7
 8010376:	3308      	adds	r3, #8
 8010378:	9303      	str	r3, [sp, #12]
 801037a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801037c:	443b      	add	r3, r7
 801037e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010380:	e76a      	b.n	8010258 <_vfiprintf_r+0x78>
 8010382:	fb0c 3202 	mla	r2, ip, r2, r3
 8010386:	460c      	mov	r4, r1
 8010388:	2001      	movs	r0, #1
 801038a:	e7a8      	b.n	80102de <_vfiprintf_r+0xfe>
 801038c:	2300      	movs	r3, #0
 801038e:	3401      	adds	r4, #1
 8010390:	9305      	str	r3, [sp, #20]
 8010392:	4619      	mov	r1, r3
 8010394:	f04f 0c0a 	mov.w	ip, #10
 8010398:	4620      	mov	r0, r4
 801039a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801039e:	3a30      	subs	r2, #48	@ 0x30
 80103a0:	2a09      	cmp	r2, #9
 80103a2:	d903      	bls.n	80103ac <_vfiprintf_r+0x1cc>
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d0c6      	beq.n	8010336 <_vfiprintf_r+0x156>
 80103a8:	9105      	str	r1, [sp, #20]
 80103aa:	e7c4      	b.n	8010336 <_vfiprintf_r+0x156>
 80103ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80103b0:	4604      	mov	r4, r0
 80103b2:	2301      	movs	r3, #1
 80103b4:	e7f0      	b.n	8010398 <_vfiprintf_r+0x1b8>
 80103b6:	ab03      	add	r3, sp, #12
 80103b8:	9300      	str	r3, [sp, #0]
 80103ba:	462a      	mov	r2, r5
 80103bc:	4b12      	ldr	r3, [pc, #72]	@ (8010408 <_vfiprintf_r+0x228>)
 80103be:	a904      	add	r1, sp, #16
 80103c0:	4630      	mov	r0, r6
 80103c2:	f7fb fb29 	bl	800ba18 <_printf_float>
 80103c6:	4607      	mov	r7, r0
 80103c8:	1c78      	adds	r0, r7, #1
 80103ca:	d1d6      	bne.n	801037a <_vfiprintf_r+0x19a>
 80103cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103ce:	07d9      	lsls	r1, r3, #31
 80103d0:	d405      	bmi.n	80103de <_vfiprintf_r+0x1fe>
 80103d2:	89ab      	ldrh	r3, [r5, #12]
 80103d4:	059a      	lsls	r2, r3, #22
 80103d6:	d402      	bmi.n	80103de <_vfiprintf_r+0x1fe>
 80103d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103da:	f7fc faef 	bl	800c9bc <__retarget_lock_release_recursive>
 80103de:	89ab      	ldrh	r3, [r5, #12]
 80103e0:	065b      	lsls	r3, r3, #25
 80103e2:	f53f af1f 	bmi.w	8010224 <_vfiprintf_r+0x44>
 80103e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103e8:	e71e      	b.n	8010228 <_vfiprintf_r+0x48>
 80103ea:	ab03      	add	r3, sp, #12
 80103ec:	9300      	str	r3, [sp, #0]
 80103ee:	462a      	mov	r2, r5
 80103f0:	4b05      	ldr	r3, [pc, #20]	@ (8010408 <_vfiprintf_r+0x228>)
 80103f2:	a904      	add	r1, sp, #16
 80103f4:	4630      	mov	r0, r6
 80103f6:	f7fb fda7 	bl	800bf48 <_printf_i>
 80103fa:	e7e4      	b.n	80103c6 <_vfiprintf_r+0x1e6>
 80103fc:	08012479 	.word	0x08012479
 8010400:	08012483 	.word	0x08012483
 8010404:	0800ba19 	.word	0x0800ba19
 8010408:	080101bd 	.word	0x080101bd
 801040c:	0801247f 	.word	0x0801247f

08010410 <__swbuf_r>:
 8010410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010412:	460e      	mov	r6, r1
 8010414:	4614      	mov	r4, r2
 8010416:	4605      	mov	r5, r0
 8010418:	b118      	cbz	r0, 8010422 <__swbuf_r+0x12>
 801041a:	6a03      	ldr	r3, [r0, #32]
 801041c:	b90b      	cbnz	r3, 8010422 <__swbuf_r+0x12>
 801041e:	f7fc f953 	bl	800c6c8 <__sinit>
 8010422:	69a3      	ldr	r3, [r4, #24]
 8010424:	60a3      	str	r3, [r4, #8]
 8010426:	89a3      	ldrh	r3, [r4, #12]
 8010428:	071a      	lsls	r2, r3, #28
 801042a:	d501      	bpl.n	8010430 <__swbuf_r+0x20>
 801042c:	6923      	ldr	r3, [r4, #16]
 801042e:	b943      	cbnz	r3, 8010442 <__swbuf_r+0x32>
 8010430:	4621      	mov	r1, r4
 8010432:	4628      	mov	r0, r5
 8010434:	f000 f82a 	bl	801048c <__swsetup_r>
 8010438:	b118      	cbz	r0, 8010442 <__swbuf_r+0x32>
 801043a:	f04f 37ff 	mov.w	r7, #4294967295
 801043e:	4638      	mov	r0, r7
 8010440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010442:	6823      	ldr	r3, [r4, #0]
 8010444:	6922      	ldr	r2, [r4, #16]
 8010446:	1a98      	subs	r0, r3, r2
 8010448:	6963      	ldr	r3, [r4, #20]
 801044a:	b2f6      	uxtb	r6, r6
 801044c:	4283      	cmp	r3, r0
 801044e:	4637      	mov	r7, r6
 8010450:	dc05      	bgt.n	801045e <__swbuf_r+0x4e>
 8010452:	4621      	mov	r1, r4
 8010454:	4628      	mov	r0, r5
 8010456:	f7ff f993 	bl	800f780 <_fflush_r>
 801045a:	2800      	cmp	r0, #0
 801045c:	d1ed      	bne.n	801043a <__swbuf_r+0x2a>
 801045e:	68a3      	ldr	r3, [r4, #8]
 8010460:	3b01      	subs	r3, #1
 8010462:	60a3      	str	r3, [r4, #8]
 8010464:	6823      	ldr	r3, [r4, #0]
 8010466:	1c5a      	adds	r2, r3, #1
 8010468:	6022      	str	r2, [r4, #0]
 801046a:	701e      	strb	r6, [r3, #0]
 801046c:	6962      	ldr	r2, [r4, #20]
 801046e:	1c43      	adds	r3, r0, #1
 8010470:	429a      	cmp	r2, r3
 8010472:	d004      	beq.n	801047e <__swbuf_r+0x6e>
 8010474:	89a3      	ldrh	r3, [r4, #12]
 8010476:	07db      	lsls	r3, r3, #31
 8010478:	d5e1      	bpl.n	801043e <__swbuf_r+0x2e>
 801047a:	2e0a      	cmp	r6, #10
 801047c:	d1df      	bne.n	801043e <__swbuf_r+0x2e>
 801047e:	4621      	mov	r1, r4
 8010480:	4628      	mov	r0, r5
 8010482:	f7ff f97d 	bl	800f780 <_fflush_r>
 8010486:	2800      	cmp	r0, #0
 8010488:	d0d9      	beq.n	801043e <__swbuf_r+0x2e>
 801048a:	e7d6      	b.n	801043a <__swbuf_r+0x2a>

0801048c <__swsetup_r>:
 801048c:	b538      	push	{r3, r4, r5, lr}
 801048e:	4b29      	ldr	r3, [pc, #164]	@ (8010534 <__swsetup_r+0xa8>)
 8010490:	4605      	mov	r5, r0
 8010492:	6818      	ldr	r0, [r3, #0]
 8010494:	460c      	mov	r4, r1
 8010496:	b118      	cbz	r0, 80104a0 <__swsetup_r+0x14>
 8010498:	6a03      	ldr	r3, [r0, #32]
 801049a:	b90b      	cbnz	r3, 80104a0 <__swsetup_r+0x14>
 801049c:	f7fc f914 	bl	800c6c8 <__sinit>
 80104a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104a4:	0719      	lsls	r1, r3, #28
 80104a6:	d422      	bmi.n	80104ee <__swsetup_r+0x62>
 80104a8:	06da      	lsls	r2, r3, #27
 80104aa:	d407      	bmi.n	80104bc <__swsetup_r+0x30>
 80104ac:	2209      	movs	r2, #9
 80104ae:	602a      	str	r2, [r5, #0]
 80104b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104b4:	81a3      	strh	r3, [r4, #12]
 80104b6:	f04f 30ff 	mov.w	r0, #4294967295
 80104ba:	e033      	b.n	8010524 <__swsetup_r+0x98>
 80104bc:	0758      	lsls	r0, r3, #29
 80104be:	d512      	bpl.n	80104e6 <__swsetup_r+0x5a>
 80104c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80104c2:	b141      	cbz	r1, 80104d6 <__swsetup_r+0x4a>
 80104c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80104c8:	4299      	cmp	r1, r3
 80104ca:	d002      	beq.n	80104d2 <__swsetup_r+0x46>
 80104cc:	4628      	mov	r0, r5
 80104ce:	f7fd f8d7 	bl	800d680 <_free_r>
 80104d2:	2300      	movs	r3, #0
 80104d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80104d6:	89a3      	ldrh	r3, [r4, #12]
 80104d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80104dc:	81a3      	strh	r3, [r4, #12]
 80104de:	2300      	movs	r3, #0
 80104e0:	6063      	str	r3, [r4, #4]
 80104e2:	6923      	ldr	r3, [r4, #16]
 80104e4:	6023      	str	r3, [r4, #0]
 80104e6:	89a3      	ldrh	r3, [r4, #12]
 80104e8:	f043 0308 	orr.w	r3, r3, #8
 80104ec:	81a3      	strh	r3, [r4, #12]
 80104ee:	6923      	ldr	r3, [r4, #16]
 80104f0:	b94b      	cbnz	r3, 8010506 <__swsetup_r+0x7a>
 80104f2:	89a3      	ldrh	r3, [r4, #12]
 80104f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80104f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104fc:	d003      	beq.n	8010506 <__swsetup_r+0x7a>
 80104fe:	4621      	mov	r1, r4
 8010500:	4628      	mov	r0, r5
 8010502:	f000 f883 	bl	801060c <__smakebuf_r>
 8010506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801050a:	f013 0201 	ands.w	r2, r3, #1
 801050e:	d00a      	beq.n	8010526 <__swsetup_r+0x9a>
 8010510:	2200      	movs	r2, #0
 8010512:	60a2      	str	r2, [r4, #8]
 8010514:	6962      	ldr	r2, [r4, #20]
 8010516:	4252      	negs	r2, r2
 8010518:	61a2      	str	r2, [r4, #24]
 801051a:	6922      	ldr	r2, [r4, #16]
 801051c:	b942      	cbnz	r2, 8010530 <__swsetup_r+0xa4>
 801051e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010522:	d1c5      	bne.n	80104b0 <__swsetup_r+0x24>
 8010524:	bd38      	pop	{r3, r4, r5, pc}
 8010526:	0799      	lsls	r1, r3, #30
 8010528:	bf58      	it	pl
 801052a:	6962      	ldrpl	r2, [r4, #20]
 801052c:	60a2      	str	r2, [r4, #8]
 801052e:	e7f4      	b.n	801051a <__swsetup_r+0x8e>
 8010530:	2000      	movs	r0, #0
 8010532:	e7f7      	b.n	8010524 <__swsetup_r+0x98>
 8010534:	20000044 	.word	0x20000044

08010538 <_raise_r>:
 8010538:	291f      	cmp	r1, #31
 801053a:	b538      	push	{r3, r4, r5, lr}
 801053c:	4605      	mov	r5, r0
 801053e:	460c      	mov	r4, r1
 8010540:	d904      	bls.n	801054c <_raise_r+0x14>
 8010542:	2316      	movs	r3, #22
 8010544:	6003      	str	r3, [r0, #0]
 8010546:	f04f 30ff 	mov.w	r0, #4294967295
 801054a:	bd38      	pop	{r3, r4, r5, pc}
 801054c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801054e:	b112      	cbz	r2, 8010556 <_raise_r+0x1e>
 8010550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010554:	b94b      	cbnz	r3, 801056a <_raise_r+0x32>
 8010556:	4628      	mov	r0, r5
 8010558:	f000 f830 	bl	80105bc <_getpid_r>
 801055c:	4622      	mov	r2, r4
 801055e:	4601      	mov	r1, r0
 8010560:	4628      	mov	r0, r5
 8010562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010566:	f000 b817 	b.w	8010598 <_kill_r>
 801056a:	2b01      	cmp	r3, #1
 801056c:	d00a      	beq.n	8010584 <_raise_r+0x4c>
 801056e:	1c59      	adds	r1, r3, #1
 8010570:	d103      	bne.n	801057a <_raise_r+0x42>
 8010572:	2316      	movs	r3, #22
 8010574:	6003      	str	r3, [r0, #0]
 8010576:	2001      	movs	r0, #1
 8010578:	e7e7      	b.n	801054a <_raise_r+0x12>
 801057a:	2100      	movs	r1, #0
 801057c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010580:	4620      	mov	r0, r4
 8010582:	4798      	blx	r3
 8010584:	2000      	movs	r0, #0
 8010586:	e7e0      	b.n	801054a <_raise_r+0x12>

08010588 <raise>:
 8010588:	4b02      	ldr	r3, [pc, #8]	@ (8010594 <raise+0xc>)
 801058a:	4601      	mov	r1, r0
 801058c:	6818      	ldr	r0, [r3, #0]
 801058e:	f7ff bfd3 	b.w	8010538 <_raise_r>
 8010592:	bf00      	nop
 8010594:	20000044 	.word	0x20000044

08010598 <_kill_r>:
 8010598:	b538      	push	{r3, r4, r5, lr}
 801059a:	4d07      	ldr	r5, [pc, #28]	@ (80105b8 <_kill_r+0x20>)
 801059c:	2300      	movs	r3, #0
 801059e:	4604      	mov	r4, r0
 80105a0:	4608      	mov	r0, r1
 80105a2:	4611      	mov	r1, r2
 80105a4:	602b      	str	r3, [r5, #0]
 80105a6:	f7f5 fcd3 	bl	8005f50 <_kill>
 80105aa:	1c43      	adds	r3, r0, #1
 80105ac:	d102      	bne.n	80105b4 <_kill_r+0x1c>
 80105ae:	682b      	ldr	r3, [r5, #0]
 80105b0:	b103      	cbz	r3, 80105b4 <_kill_r+0x1c>
 80105b2:	6023      	str	r3, [r4, #0]
 80105b4:	bd38      	pop	{r3, r4, r5, pc}
 80105b6:	bf00      	nop
 80105b8:	200017d8 	.word	0x200017d8

080105bc <_getpid_r>:
 80105bc:	f7f5 bcc0 	b.w	8005f40 <_getpid>

080105c0 <__swhatbuf_r>:
 80105c0:	b570      	push	{r4, r5, r6, lr}
 80105c2:	460c      	mov	r4, r1
 80105c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105c8:	2900      	cmp	r1, #0
 80105ca:	b096      	sub	sp, #88	@ 0x58
 80105cc:	4615      	mov	r5, r2
 80105ce:	461e      	mov	r6, r3
 80105d0:	da0d      	bge.n	80105ee <__swhatbuf_r+0x2e>
 80105d2:	89a3      	ldrh	r3, [r4, #12]
 80105d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80105d8:	f04f 0100 	mov.w	r1, #0
 80105dc:	bf14      	ite	ne
 80105de:	2340      	movne	r3, #64	@ 0x40
 80105e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80105e4:	2000      	movs	r0, #0
 80105e6:	6031      	str	r1, [r6, #0]
 80105e8:	602b      	str	r3, [r5, #0]
 80105ea:	b016      	add	sp, #88	@ 0x58
 80105ec:	bd70      	pop	{r4, r5, r6, pc}
 80105ee:	466a      	mov	r2, sp
 80105f0:	f000 f848 	bl	8010684 <_fstat_r>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	dbec      	blt.n	80105d2 <__swhatbuf_r+0x12>
 80105f8:	9901      	ldr	r1, [sp, #4]
 80105fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80105fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010602:	4259      	negs	r1, r3
 8010604:	4159      	adcs	r1, r3
 8010606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801060a:	e7eb      	b.n	80105e4 <__swhatbuf_r+0x24>

0801060c <__smakebuf_r>:
 801060c:	898b      	ldrh	r3, [r1, #12]
 801060e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010610:	079d      	lsls	r5, r3, #30
 8010612:	4606      	mov	r6, r0
 8010614:	460c      	mov	r4, r1
 8010616:	d507      	bpl.n	8010628 <__smakebuf_r+0x1c>
 8010618:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801061c:	6023      	str	r3, [r4, #0]
 801061e:	6123      	str	r3, [r4, #16]
 8010620:	2301      	movs	r3, #1
 8010622:	6163      	str	r3, [r4, #20]
 8010624:	b003      	add	sp, #12
 8010626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010628:	ab01      	add	r3, sp, #4
 801062a:	466a      	mov	r2, sp
 801062c:	f7ff ffc8 	bl	80105c0 <__swhatbuf_r>
 8010630:	9f00      	ldr	r7, [sp, #0]
 8010632:	4605      	mov	r5, r0
 8010634:	4639      	mov	r1, r7
 8010636:	4630      	mov	r0, r6
 8010638:	f7fb f8c2 	bl	800b7c0 <_malloc_r>
 801063c:	b948      	cbnz	r0, 8010652 <__smakebuf_r+0x46>
 801063e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010642:	059a      	lsls	r2, r3, #22
 8010644:	d4ee      	bmi.n	8010624 <__smakebuf_r+0x18>
 8010646:	f023 0303 	bic.w	r3, r3, #3
 801064a:	f043 0302 	orr.w	r3, r3, #2
 801064e:	81a3      	strh	r3, [r4, #12]
 8010650:	e7e2      	b.n	8010618 <__smakebuf_r+0xc>
 8010652:	89a3      	ldrh	r3, [r4, #12]
 8010654:	6020      	str	r0, [r4, #0]
 8010656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801065a:	81a3      	strh	r3, [r4, #12]
 801065c:	9b01      	ldr	r3, [sp, #4]
 801065e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010662:	b15b      	cbz	r3, 801067c <__smakebuf_r+0x70>
 8010664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010668:	4630      	mov	r0, r6
 801066a:	f000 f81d 	bl	80106a8 <_isatty_r>
 801066e:	b128      	cbz	r0, 801067c <__smakebuf_r+0x70>
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	f023 0303 	bic.w	r3, r3, #3
 8010676:	f043 0301 	orr.w	r3, r3, #1
 801067a:	81a3      	strh	r3, [r4, #12]
 801067c:	89a3      	ldrh	r3, [r4, #12]
 801067e:	431d      	orrs	r5, r3
 8010680:	81a5      	strh	r5, [r4, #12]
 8010682:	e7cf      	b.n	8010624 <__smakebuf_r+0x18>

08010684 <_fstat_r>:
 8010684:	b538      	push	{r3, r4, r5, lr}
 8010686:	4d07      	ldr	r5, [pc, #28]	@ (80106a4 <_fstat_r+0x20>)
 8010688:	2300      	movs	r3, #0
 801068a:	4604      	mov	r4, r0
 801068c:	4608      	mov	r0, r1
 801068e:	4611      	mov	r1, r2
 8010690:	602b      	str	r3, [r5, #0]
 8010692:	f7f5 fcbd 	bl	8006010 <_fstat>
 8010696:	1c43      	adds	r3, r0, #1
 8010698:	d102      	bne.n	80106a0 <_fstat_r+0x1c>
 801069a:	682b      	ldr	r3, [r5, #0]
 801069c:	b103      	cbz	r3, 80106a0 <_fstat_r+0x1c>
 801069e:	6023      	str	r3, [r4, #0]
 80106a0:	bd38      	pop	{r3, r4, r5, pc}
 80106a2:	bf00      	nop
 80106a4:	200017d8 	.word	0x200017d8

080106a8 <_isatty_r>:
 80106a8:	b538      	push	{r3, r4, r5, lr}
 80106aa:	4d06      	ldr	r5, [pc, #24]	@ (80106c4 <_isatty_r+0x1c>)
 80106ac:	2300      	movs	r3, #0
 80106ae:	4604      	mov	r4, r0
 80106b0:	4608      	mov	r0, r1
 80106b2:	602b      	str	r3, [r5, #0]
 80106b4:	f7f5 fcbc 	bl	8006030 <_isatty>
 80106b8:	1c43      	adds	r3, r0, #1
 80106ba:	d102      	bne.n	80106c2 <_isatty_r+0x1a>
 80106bc:	682b      	ldr	r3, [r5, #0]
 80106be:	b103      	cbz	r3, 80106c2 <_isatty_r+0x1a>
 80106c0:	6023      	str	r3, [r4, #0]
 80106c2:	bd38      	pop	{r3, r4, r5, pc}
 80106c4:	200017d8 	.word	0x200017d8

080106c8 <pow>:
 80106c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ca:	ed2d 8b02 	vpush	{d8}
 80106ce:	eeb0 8a40 	vmov.f32	s16, s0
 80106d2:	eef0 8a60 	vmov.f32	s17, s1
 80106d6:	ec55 4b11 	vmov	r4, r5, d1
 80106da:	f000 facd 	bl	8010c78 <__ieee754_pow>
 80106de:	4622      	mov	r2, r4
 80106e0:	462b      	mov	r3, r5
 80106e2:	4620      	mov	r0, r4
 80106e4:	4629      	mov	r1, r5
 80106e6:	ec57 6b10 	vmov	r6, r7, d0
 80106ea:	f7f0 fa3f 	bl	8000b6c <__aeabi_dcmpun>
 80106ee:	2800      	cmp	r0, #0
 80106f0:	d13b      	bne.n	801076a <pow+0xa2>
 80106f2:	ec51 0b18 	vmov	r0, r1, d8
 80106f6:	2200      	movs	r2, #0
 80106f8:	2300      	movs	r3, #0
 80106fa:	f7f0 fa05 	bl	8000b08 <__aeabi_dcmpeq>
 80106fe:	b1b8      	cbz	r0, 8010730 <pow+0x68>
 8010700:	2200      	movs	r2, #0
 8010702:	2300      	movs	r3, #0
 8010704:	4620      	mov	r0, r4
 8010706:	4629      	mov	r1, r5
 8010708:	f7f0 f9fe 	bl	8000b08 <__aeabi_dcmpeq>
 801070c:	2800      	cmp	r0, #0
 801070e:	d146      	bne.n	801079e <pow+0xd6>
 8010710:	ec45 4b10 	vmov	d0, r4, r5
 8010714:	f000 f8f3 	bl	80108fe <finite>
 8010718:	b338      	cbz	r0, 801076a <pow+0xa2>
 801071a:	2200      	movs	r2, #0
 801071c:	2300      	movs	r3, #0
 801071e:	4620      	mov	r0, r4
 8010720:	4629      	mov	r1, r5
 8010722:	f7f0 f9fb 	bl	8000b1c <__aeabi_dcmplt>
 8010726:	b300      	cbz	r0, 801076a <pow+0xa2>
 8010728:	f7fc f91c 	bl	800c964 <__errno>
 801072c:	2322      	movs	r3, #34	@ 0x22
 801072e:	e01b      	b.n	8010768 <pow+0xa0>
 8010730:	ec47 6b10 	vmov	d0, r6, r7
 8010734:	f000 f8e3 	bl	80108fe <finite>
 8010738:	b9e0      	cbnz	r0, 8010774 <pow+0xac>
 801073a:	eeb0 0a48 	vmov.f32	s0, s16
 801073e:	eef0 0a68 	vmov.f32	s1, s17
 8010742:	f000 f8dc 	bl	80108fe <finite>
 8010746:	b1a8      	cbz	r0, 8010774 <pow+0xac>
 8010748:	ec45 4b10 	vmov	d0, r4, r5
 801074c:	f000 f8d7 	bl	80108fe <finite>
 8010750:	b180      	cbz	r0, 8010774 <pow+0xac>
 8010752:	4632      	mov	r2, r6
 8010754:	463b      	mov	r3, r7
 8010756:	4630      	mov	r0, r6
 8010758:	4639      	mov	r1, r7
 801075a:	f7f0 fa07 	bl	8000b6c <__aeabi_dcmpun>
 801075e:	2800      	cmp	r0, #0
 8010760:	d0e2      	beq.n	8010728 <pow+0x60>
 8010762:	f7fc f8ff 	bl	800c964 <__errno>
 8010766:	2321      	movs	r3, #33	@ 0x21
 8010768:	6003      	str	r3, [r0, #0]
 801076a:	ecbd 8b02 	vpop	{d8}
 801076e:	ec47 6b10 	vmov	d0, r6, r7
 8010772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010774:	2200      	movs	r2, #0
 8010776:	2300      	movs	r3, #0
 8010778:	4630      	mov	r0, r6
 801077a:	4639      	mov	r1, r7
 801077c:	f7f0 f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 8010780:	2800      	cmp	r0, #0
 8010782:	d0f2      	beq.n	801076a <pow+0xa2>
 8010784:	eeb0 0a48 	vmov.f32	s0, s16
 8010788:	eef0 0a68 	vmov.f32	s1, s17
 801078c:	f000 f8b7 	bl	80108fe <finite>
 8010790:	2800      	cmp	r0, #0
 8010792:	d0ea      	beq.n	801076a <pow+0xa2>
 8010794:	ec45 4b10 	vmov	d0, r4, r5
 8010798:	f000 f8b1 	bl	80108fe <finite>
 801079c:	e7c3      	b.n	8010726 <pow+0x5e>
 801079e:	4f01      	ldr	r7, [pc, #4]	@ (80107a4 <pow+0xdc>)
 80107a0:	2600      	movs	r6, #0
 80107a2:	e7e2      	b.n	801076a <pow+0xa2>
 80107a4:	3ff00000 	.word	0x3ff00000

080107a8 <sqrt>:
 80107a8:	b538      	push	{r3, r4, r5, lr}
 80107aa:	ed2d 8b02 	vpush	{d8}
 80107ae:	ec55 4b10 	vmov	r4, r5, d0
 80107b2:	f000 f905 	bl	80109c0 <__ieee754_sqrt>
 80107b6:	4622      	mov	r2, r4
 80107b8:	462b      	mov	r3, r5
 80107ba:	4620      	mov	r0, r4
 80107bc:	4629      	mov	r1, r5
 80107be:	eeb0 8a40 	vmov.f32	s16, s0
 80107c2:	eef0 8a60 	vmov.f32	s17, s1
 80107c6:	f7f0 f9d1 	bl	8000b6c <__aeabi_dcmpun>
 80107ca:	b990      	cbnz	r0, 80107f2 <sqrt+0x4a>
 80107cc:	2200      	movs	r2, #0
 80107ce:	2300      	movs	r3, #0
 80107d0:	4620      	mov	r0, r4
 80107d2:	4629      	mov	r1, r5
 80107d4:	f7f0 f9a2 	bl	8000b1c <__aeabi_dcmplt>
 80107d8:	b158      	cbz	r0, 80107f2 <sqrt+0x4a>
 80107da:	f7fc f8c3 	bl	800c964 <__errno>
 80107de:	2321      	movs	r3, #33	@ 0x21
 80107e0:	6003      	str	r3, [r0, #0]
 80107e2:	2200      	movs	r2, #0
 80107e4:	2300      	movs	r3, #0
 80107e6:	4610      	mov	r0, r2
 80107e8:	4619      	mov	r1, r3
 80107ea:	f7f0 f84f 	bl	800088c <__aeabi_ddiv>
 80107ee:	ec41 0b18 	vmov	d8, r0, r1
 80107f2:	eeb0 0a48 	vmov.f32	s0, s16
 80107f6:	eef0 0a68 	vmov.f32	s1, s17
 80107fa:	ecbd 8b02 	vpop	{d8}
 80107fe:	bd38      	pop	{r3, r4, r5, pc}

08010800 <acosf>:
 8010800:	b508      	push	{r3, lr}
 8010802:	ed2d 8b02 	vpush	{d8}
 8010806:	eeb0 8a40 	vmov.f32	s16, s0
 801080a:	f000 ff81 	bl	8011710 <__ieee754_acosf>
 801080e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010816:	eef0 8a40 	vmov.f32	s17, s0
 801081a:	d615      	bvs.n	8010848 <acosf+0x48>
 801081c:	eeb0 0a48 	vmov.f32	s0, s16
 8010820:	f000 f866 	bl	80108f0 <fabsf>
 8010824:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010828:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801082c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010830:	dd0a      	ble.n	8010848 <acosf+0x48>
 8010832:	f7fc f897 	bl	800c964 <__errno>
 8010836:	ecbd 8b02 	vpop	{d8}
 801083a:	2321      	movs	r3, #33	@ 0x21
 801083c:	6003      	str	r3, [r0, #0]
 801083e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010842:	4804      	ldr	r0, [pc, #16]	@ (8010854 <acosf+0x54>)
 8010844:	f7fc b8ca 	b.w	800c9dc <nanf>
 8010848:	eeb0 0a68 	vmov.f32	s0, s17
 801084c:	ecbd 8b02 	vpop	{d8}
 8010850:	bd08      	pop	{r3, pc}
 8010852:	bf00      	nop
 8010854:	080124e8 	.word	0x080124e8

08010858 <asinf>:
 8010858:	b508      	push	{r3, lr}
 801085a:	ed2d 8b02 	vpush	{d8}
 801085e:	eeb0 8a40 	vmov.f32	s16, s0
 8010862:	f001 f84d 	bl	8011900 <__ieee754_asinf>
 8010866:	eeb4 8a48 	vcmp.f32	s16, s16
 801086a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086e:	eef0 8a40 	vmov.f32	s17, s0
 8010872:	d615      	bvs.n	80108a0 <asinf+0x48>
 8010874:	eeb0 0a48 	vmov.f32	s0, s16
 8010878:	f000 f83a 	bl	80108f0 <fabsf>
 801087c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010880:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010888:	dd0a      	ble.n	80108a0 <asinf+0x48>
 801088a:	f7fc f86b 	bl	800c964 <__errno>
 801088e:	ecbd 8b02 	vpop	{d8}
 8010892:	2321      	movs	r3, #33	@ 0x21
 8010894:	6003      	str	r3, [r0, #0]
 8010896:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801089a:	4804      	ldr	r0, [pc, #16]	@ (80108ac <asinf+0x54>)
 801089c:	f7fc b89e 	b.w	800c9dc <nanf>
 80108a0:	eeb0 0a68 	vmov.f32	s0, s17
 80108a4:	ecbd 8b02 	vpop	{d8}
 80108a8:	bd08      	pop	{r3, pc}
 80108aa:	bf00      	nop
 80108ac:	080124e8 	.word	0x080124e8

080108b0 <atan2f>:
 80108b0:	f001 b90c 	b.w	8011acc <__ieee754_atan2f>

080108b4 <sqrtf>:
 80108b4:	b508      	push	{r3, lr}
 80108b6:	ed2d 8b02 	vpush	{d8}
 80108ba:	eeb0 8a40 	vmov.f32	s16, s0
 80108be:	f000 f959 	bl	8010b74 <__ieee754_sqrtf>
 80108c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80108c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108ca:	d60c      	bvs.n	80108e6 <sqrtf+0x32>
 80108cc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80108ec <sqrtf+0x38>
 80108d0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80108d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108d8:	d505      	bpl.n	80108e6 <sqrtf+0x32>
 80108da:	f7fc f843 	bl	800c964 <__errno>
 80108de:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80108e2:	2321      	movs	r3, #33	@ 0x21
 80108e4:	6003      	str	r3, [r0, #0]
 80108e6:	ecbd 8b02 	vpop	{d8}
 80108ea:	bd08      	pop	{r3, pc}
 80108ec:	00000000 	.word	0x00000000

080108f0 <fabsf>:
 80108f0:	ee10 3a10 	vmov	r3, s0
 80108f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80108f8:	ee00 3a10 	vmov	s0, r3
 80108fc:	4770      	bx	lr

080108fe <finite>:
 80108fe:	b082      	sub	sp, #8
 8010900:	ed8d 0b00 	vstr	d0, [sp]
 8010904:	9801      	ldr	r0, [sp, #4]
 8010906:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801090a:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801090e:	0fc0      	lsrs	r0, r0, #31
 8010910:	b002      	add	sp, #8
 8010912:	4770      	bx	lr

08010914 <fmaxf>:
 8010914:	b508      	push	{r3, lr}
 8010916:	ed2d 8b02 	vpush	{d8}
 801091a:	eeb0 8a40 	vmov.f32	s16, s0
 801091e:	eef0 8a60 	vmov.f32	s17, s1
 8010922:	f000 f831 	bl	8010988 <__fpclassifyf>
 8010926:	b930      	cbnz	r0, 8010936 <fmaxf+0x22>
 8010928:	eeb0 8a68 	vmov.f32	s16, s17
 801092c:	eeb0 0a48 	vmov.f32	s0, s16
 8010930:	ecbd 8b02 	vpop	{d8}
 8010934:	bd08      	pop	{r3, pc}
 8010936:	eeb0 0a68 	vmov.f32	s0, s17
 801093a:	f000 f825 	bl	8010988 <__fpclassifyf>
 801093e:	2800      	cmp	r0, #0
 8010940:	d0f4      	beq.n	801092c <fmaxf+0x18>
 8010942:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801094a:	dded      	ble.n	8010928 <fmaxf+0x14>
 801094c:	e7ee      	b.n	801092c <fmaxf+0x18>

0801094e <fminf>:
 801094e:	b508      	push	{r3, lr}
 8010950:	ed2d 8b02 	vpush	{d8}
 8010954:	eeb0 8a40 	vmov.f32	s16, s0
 8010958:	eef0 8a60 	vmov.f32	s17, s1
 801095c:	f000 f814 	bl	8010988 <__fpclassifyf>
 8010960:	b930      	cbnz	r0, 8010970 <fminf+0x22>
 8010962:	eeb0 8a68 	vmov.f32	s16, s17
 8010966:	eeb0 0a48 	vmov.f32	s0, s16
 801096a:	ecbd 8b02 	vpop	{d8}
 801096e:	bd08      	pop	{r3, pc}
 8010970:	eeb0 0a68 	vmov.f32	s0, s17
 8010974:	f000 f808 	bl	8010988 <__fpclassifyf>
 8010978:	2800      	cmp	r0, #0
 801097a:	d0f4      	beq.n	8010966 <fminf+0x18>
 801097c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010984:	d5ed      	bpl.n	8010962 <fminf+0x14>
 8010986:	e7ee      	b.n	8010966 <fminf+0x18>

08010988 <__fpclassifyf>:
 8010988:	ee10 3a10 	vmov	r3, s0
 801098c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010990:	d00d      	beq.n	80109ae <__fpclassifyf+0x26>
 8010992:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010996:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 801099a:	d30a      	bcc.n	80109b2 <__fpclassifyf+0x2a>
 801099c:	4b07      	ldr	r3, [pc, #28]	@ (80109bc <__fpclassifyf+0x34>)
 801099e:	1e42      	subs	r2, r0, #1
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d908      	bls.n	80109b6 <__fpclassifyf+0x2e>
 80109a4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80109a8:	4258      	negs	r0, r3
 80109aa:	4158      	adcs	r0, r3
 80109ac:	4770      	bx	lr
 80109ae:	2002      	movs	r0, #2
 80109b0:	4770      	bx	lr
 80109b2:	2004      	movs	r0, #4
 80109b4:	4770      	bx	lr
 80109b6:	2003      	movs	r0, #3
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop
 80109bc:	007ffffe 	.word	0x007ffffe

080109c0 <__ieee754_sqrt>:
 80109c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c4:	4a68      	ldr	r2, [pc, #416]	@ (8010b68 <__ieee754_sqrt+0x1a8>)
 80109c6:	ec55 4b10 	vmov	r4, r5, d0
 80109ca:	43aa      	bics	r2, r5
 80109cc:	462b      	mov	r3, r5
 80109ce:	4621      	mov	r1, r4
 80109d0:	d110      	bne.n	80109f4 <__ieee754_sqrt+0x34>
 80109d2:	4622      	mov	r2, r4
 80109d4:	4620      	mov	r0, r4
 80109d6:	4629      	mov	r1, r5
 80109d8:	f7ef fe2e 	bl	8000638 <__aeabi_dmul>
 80109dc:	4602      	mov	r2, r0
 80109de:	460b      	mov	r3, r1
 80109e0:	4620      	mov	r0, r4
 80109e2:	4629      	mov	r1, r5
 80109e4:	f7ef fc72 	bl	80002cc <__adddf3>
 80109e8:	4604      	mov	r4, r0
 80109ea:	460d      	mov	r5, r1
 80109ec:	ec45 4b10 	vmov	d0, r4, r5
 80109f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f4:	2d00      	cmp	r5, #0
 80109f6:	dc0e      	bgt.n	8010a16 <__ieee754_sqrt+0x56>
 80109f8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80109fc:	4322      	orrs	r2, r4
 80109fe:	d0f5      	beq.n	80109ec <__ieee754_sqrt+0x2c>
 8010a00:	b19d      	cbz	r5, 8010a2a <__ieee754_sqrt+0x6a>
 8010a02:	4622      	mov	r2, r4
 8010a04:	4620      	mov	r0, r4
 8010a06:	4629      	mov	r1, r5
 8010a08:	f7ef fc5e 	bl	80002c8 <__aeabi_dsub>
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	460b      	mov	r3, r1
 8010a10:	f7ef ff3c 	bl	800088c <__aeabi_ddiv>
 8010a14:	e7e8      	b.n	80109e8 <__ieee754_sqrt+0x28>
 8010a16:	152a      	asrs	r2, r5, #20
 8010a18:	d115      	bne.n	8010a46 <__ieee754_sqrt+0x86>
 8010a1a:	2000      	movs	r0, #0
 8010a1c:	e009      	b.n	8010a32 <__ieee754_sqrt+0x72>
 8010a1e:	0acb      	lsrs	r3, r1, #11
 8010a20:	3a15      	subs	r2, #21
 8010a22:	0549      	lsls	r1, r1, #21
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d0fa      	beq.n	8010a1e <__ieee754_sqrt+0x5e>
 8010a28:	e7f7      	b.n	8010a1a <__ieee754_sqrt+0x5a>
 8010a2a:	462a      	mov	r2, r5
 8010a2c:	e7fa      	b.n	8010a24 <__ieee754_sqrt+0x64>
 8010a2e:	005b      	lsls	r3, r3, #1
 8010a30:	3001      	adds	r0, #1
 8010a32:	02dc      	lsls	r4, r3, #11
 8010a34:	d5fb      	bpl.n	8010a2e <__ieee754_sqrt+0x6e>
 8010a36:	1e44      	subs	r4, r0, #1
 8010a38:	1b12      	subs	r2, r2, r4
 8010a3a:	f1c0 0420 	rsb	r4, r0, #32
 8010a3e:	fa21 f404 	lsr.w	r4, r1, r4
 8010a42:	4323      	orrs	r3, r4
 8010a44:	4081      	lsls	r1, r0
 8010a46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010a4a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8010a4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010a52:	07d2      	lsls	r2, r2, #31
 8010a54:	bf5c      	itt	pl
 8010a56:	005b      	lslpl	r3, r3, #1
 8010a58:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8010a5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010a60:	bf58      	it	pl
 8010a62:	0049      	lslpl	r1, r1, #1
 8010a64:	2600      	movs	r6, #0
 8010a66:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8010a6a:	106d      	asrs	r5, r5, #1
 8010a6c:	0049      	lsls	r1, r1, #1
 8010a6e:	2016      	movs	r0, #22
 8010a70:	4632      	mov	r2, r6
 8010a72:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8010a76:	1917      	adds	r7, r2, r4
 8010a78:	429f      	cmp	r7, r3
 8010a7a:	bfde      	ittt	le
 8010a7c:	193a      	addle	r2, r7, r4
 8010a7e:	1bdb      	suble	r3, r3, r7
 8010a80:	1936      	addle	r6, r6, r4
 8010a82:	0fcf      	lsrs	r7, r1, #31
 8010a84:	3801      	subs	r0, #1
 8010a86:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8010a8a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010a8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8010a92:	d1f0      	bne.n	8010a76 <__ieee754_sqrt+0xb6>
 8010a94:	4604      	mov	r4, r0
 8010a96:	2720      	movs	r7, #32
 8010a98:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	eb00 0e0c 	add.w	lr, r0, ip
 8010aa2:	db02      	blt.n	8010aaa <__ieee754_sqrt+0xea>
 8010aa4:	d113      	bne.n	8010ace <__ieee754_sqrt+0x10e>
 8010aa6:	458e      	cmp	lr, r1
 8010aa8:	d811      	bhi.n	8010ace <__ieee754_sqrt+0x10e>
 8010aaa:	f1be 0f00 	cmp.w	lr, #0
 8010aae:	eb0e 000c 	add.w	r0, lr, ip
 8010ab2:	da42      	bge.n	8010b3a <__ieee754_sqrt+0x17a>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	db40      	blt.n	8010b3a <__ieee754_sqrt+0x17a>
 8010ab8:	f102 0801 	add.w	r8, r2, #1
 8010abc:	1a9b      	subs	r3, r3, r2
 8010abe:	458e      	cmp	lr, r1
 8010ac0:	bf88      	it	hi
 8010ac2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8010ac6:	eba1 010e 	sub.w	r1, r1, lr
 8010aca:	4464      	add	r4, ip
 8010acc:	4642      	mov	r2, r8
 8010ace:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8010ad2:	3f01      	subs	r7, #1
 8010ad4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8010ad8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010adc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8010ae0:	d1dc      	bne.n	8010a9c <__ieee754_sqrt+0xdc>
 8010ae2:	4319      	orrs	r1, r3
 8010ae4:	d01b      	beq.n	8010b1e <__ieee754_sqrt+0x15e>
 8010ae6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8010b6c <__ieee754_sqrt+0x1ac>
 8010aea:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8010b70 <__ieee754_sqrt+0x1b0>
 8010aee:	e9da 0100 	ldrd	r0, r1, [sl]
 8010af2:	e9db 2300 	ldrd	r2, r3, [fp]
 8010af6:	f7ef fbe7 	bl	80002c8 <__aeabi_dsub>
 8010afa:	e9da 8900 	ldrd	r8, r9, [sl]
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	4640      	mov	r0, r8
 8010b04:	4649      	mov	r1, r9
 8010b06:	f7f0 f813 	bl	8000b30 <__aeabi_dcmple>
 8010b0a:	b140      	cbz	r0, 8010b1e <__ieee754_sqrt+0x15e>
 8010b0c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8010b10:	e9da 0100 	ldrd	r0, r1, [sl]
 8010b14:	e9db 2300 	ldrd	r2, r3, [fp]
 8010b18:	d111      	bne.n	8010b3e <__ieee754_sqrt+0x17e>
 8010b1a:	3601      	adds	r6, #1
 8010b1c:	463c      	mov	r4, r7
 8010b1e:	1072      	asrs	r2, r6, #1
 8010b20:	0863      	lsrs	r3, r4, #1
 8010b22:	07f1      	lsls	r1, r6, #31
 8010b24:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8010b28:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8010b2c:	bf48      	it	mi
 8010b2e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8010b32:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8010b36:	4618      	mov	r0, r3
 8010b38:	e756      	b.n	80109e8 <__ieee754_sqrt+0x28>
 8010b3a:	4690      	mov	r8, r2
 8010b3c:	e7be      	b.n	8010abc <__ieee754_sqrt+0xfc>
 8010b3e:	f7ef fbc5 	bl	80002cc <__adddf3>
 8010b42:	e9da 8900 	ldrd	r8, r9, [sl]
 8010b46:	4602      	mov	r2, r0
 8010b48:	460b      	mov	r3, r1
 8010b4a:	4640      	mov	r0, r8
 8010b4c:	4649      	mov	r1, r9
 8010b4e:	f7ef ffe5 	bl	8000b1c <__aeabi_dcmplt>
 8010b52:	b120      	cbz	r0, 8010b5e <__ieee754_sqrt+0x19e>
 8010b54:	1ca0      	adds	r0, r4, #2
 8010b56:	bf08      	it	eq
 8010b58:	3601      	addeq	r6, #1
 8010b5a:	3402      	adds	r4, #2
 8010b5c:	e7df      	b.n	8010b1e <__ieee754_sqrt+0x15e>
 8010b5e:	1c63      	adds	r3, r4, #1
 8010b60:	f023 0401 	bic.w	r4, r3, #1
 8010b64:	e7db      	b.n	8010b1e <__ieee754_sqrt+0x15e>
 8010b66:	bf00      	nop
 8010b68:	7ff00000 	.word	0x7ff00000
 8010b6c:	20000208 	.word	0x20000208
 8010b70:	20000200 	.word	0x20000200

08010b74 <__ieee754_sqrtf>:
 8010b74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010b78:	4770      	bx	lr
 8010b7a:	0000      	movs	r0, r0
 8010b7c:	0000      	movs	r0, r0
	...

08010b80 <floor>:
 8010b80:	ec51 0b10 	vmov	r0, r1, d0
 8010b84:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010b90:	2e13      	cmp	r6, #19
 8010b92:	460c      	mov	r4, r1
 8010b94:	4605      	mov	r5, r0
 8010b96:	4680      	mov	r8, r0
 8010b98:	dc34      	bgt.n	8010c04 <floor+0x84>
 8010b9a:	2e00      	cmp	r6, #0
 8010b9c:	da17      	bge.n	8010bce <floor+0x4e>
 8010b9e:	a332      	add	r3, pc, #200	@ (adr r3, 8010c68 <floor+0xe8>)
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	f7ef fb92 	bl	80002cc <__adddf3>
 8010ba8:	2200      	movs	r2, #0
 8010baa:	2300      	movs	r3, #0
 8010bac:	f7ef ffd4 	bl	8000b58 <__aeabi_dcmpgt>
 8010bb0:	b150      	cbz	r0, 8010bc8 <floor+0x48>
 8010bb2:	2c00      	cmp	r4, #0
 8010bb4:	da55      	bge.n	8010c62 <floor+0xe2>
 8010bb6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010bba:	432c      	orrs	r4, r5
 8010bbc:	2500      	movs	r5, #0
 8010bbe:	42ac      	cmp	r4, r5
 8010bc0:	4c2b      	ldr	r4, [pc, #172]	@ (8010c70 <floor+0xf0>)
 8010bc2:	bf08      	it	eq
 8010bc4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010bc8:	4621      	mov	r1, r4
 8010bca:	4628      	mov	r0, r5
 8010bcc:	e023      	b.n	8010c16 <floor+0x96>
 8010bce:	4f29      	ldr	r7, [pc, #164]	@ (8010c74 <floor+0xf4>)
 8010bd0:	4137      	asrs	r7, r6
 8010bd2:	ea01 0307 	and.w	r3, r1, r7
 8010bd6:	4303      	orrs	r3, r0
 8010bd8:	d01d      	beq.n	8010c16 <floor+0x96>
 8010bda:	a323      	add	r3, pc, #140	@ (adr r3, 8010c68 <floor+0xe8>)
 8010bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be0:	f7ef fb74 	bl	80002cc <__adddf3>
 8010be4:	2200      	movs	r2, #0
 8010be6:	2300      	movs	r3, #0
 8010be8:	f7ef ffb6 	bl	8000b58 <__aeabi_dcmpgt>
 8010bec:	2800      	cmp	r0, #0
 8010bee:	d0eb      	beq.n	8010bc8 <floor+0x48>
 8010bf0:	2c00      	cmp	r4, #0
 8010bf2:	bfbe      	ittt	lt
 8010bf4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010bf8:	4133      	asrlt	r3, r6
 8010bfa:	18e4      	addlt	r4, r4, r3
 8010bfc:	ea24 0407 	bic.w	r4, r4, r7
 8010c00:	2500      	movs	r5, #0
 8010c02:	e7e1      	b.n	8010bc8 <floor+0x48>
 8010c04:	2e33      	cmp	r6, #51	@ 0x33
 8010c06:	dd0a      	ble.n	8010c1e <floor+0x9e>
 8010c08:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010c0c:	d103      	bne.n	8010c16 <floor+0x96>
 8010c0e:	4602      	mov	r2, r0
 8010c10:	460b      	mov	r3, r1
 8010c12:	f7ef fb5b 	bl	80002cc <__adddf3>
 8010c16:	ec41 0b10 	vmov	d0, r0, r1
 8010c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c1e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010c22:	f04f 37ff 	mov.w	r7, #4294967295
 8010c26:	40df      	lsrs	r7, r3
 8010c28:	4207      	tst	r7, r0
 8010c2a:	d0f4      	beq.n	8010c16 <floor+0x96>
 8010c2c:	a30e      	add	r3, pc, #56	@ (adr r3, 8010c68 <floor+0xe8>)
 8010c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c32:	f7ef fb4b 	bl	80002cc <__adddf3>
 8010c36:	2200      	movs	r2, #0
 8010c38:	2300      	movs	r3, #0
 8010c3a:	f7ef ff8d 	bl	8000b58 <__aeabi_dcmpgt>
 8010c3e:	2800      	cmp	r0, #0
 8010c40:	d0c2      	beq.n	8010bc8 <floor+0x48>
 8010c42:	2c00      	cmp	r4, #0
 8010c44:	da0a      	bge.n	8010c5c <floor+0xdc>
 8010c46:	2e14      	cmp	r6, #20
 8010c48:	d101      	bne.n	8010c4e <floor+0xce>
 8010c4a:	3401      	adds	r4, #1
 8010c4c:	e006      	b.n	8010c5c <floor+0xdc>
 8010c4e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010c52:	2301      	movs	r3, #1
 8010c54:	40b3      	lsls	r3, r6
 8010c56:	441d      	add	r5, r3
 8010c58:	4545      	cmp	r5, r8
 8010c5a:	d3f6      	bcc.n	8010c4a <floor+0xca>
 8010c5c:	ea25 0507 	bic.w	r5, r5, r7
 8010c60:	e7b2      	b.n	8010bc8 <floor+0x48>
 8010c62:	2500      	movs	r5, #0
 8010c64:	462c      	mov	r4, r5
 8010c66:	e7af      	b.n	8010bc8 <floor+0x48>
 8010c68:	8800759c 	.word	0x8800759c
 8010c6c:	7e37e43c 	.word	0x7e37e43c
 8010c70:	bff00000 	.word	0xbff00000
 8010c74:	000fffff 	.word	0x000fffff

08010c78 <__ieee754_pow>:
 8010c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c7c:	b091      	sub	sp, #68	@ 0x44
 8010c7e:	ed8d 1b00 	vstr	d1, [sp]
 8010c82:	e9dd 1900 	ldrd	r1, r9, [sp]
 8010c86:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8010c8a:	ea5a 0001 	orrs.w	r0, sl, r1
 8010c8e:	ec57 6b10 	vmov	r6, r7, d0
 8010c92:	d113      	bne.n	8010cbc <__ieee754_pow+0x44>
 8010c94:	19b3      	adds	r3, r6, r6
 8010c96:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8010c9a:	4152      	adcs	r2, r2
 8010c9c:	4298      	cmp	r0, r3
 8010c9e:	4b98      	ldr	r3, [pc, #608]	@ (8010f00 <__ieee754_pow+0x288>)
 8010ca0:	4193      	sbcs	r3, r2
 8010ca2:	f080 84ea 	bcs.w	801167a <__ieee754_pow+0xa02>
 8010ca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010caa:	4630      	mov	r0, r6
 8010cac:	4639      	mov	r1, r7
 8010cae:	f7ef fb0d 	bl	80002cc <__adddf3>
 8010cb2:	ec41 0b10 	vmov	d0, r0, r1
 8010cb6:	b011      	add	sp, #68	@ 0x44
 8010cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cbc:	4a91      	ldr	r2, [pc, #580]	@ (8010f04 <__ieee754_pow+0x28c>)
 8010cbe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010cc2:	4590      	cmp	r8, r2
 8010cc4:	463d      	mov	r5, r7
 8010cc6:	4633      	mov	r3, r6
 8010cc8:	d806      	bhi.n	8010cd8 <__ieee754_pow+0x60>
 8010cca:	d101      	bne.n	8010cd0 <__ieee754_pow+0x58>
 8010ccc:	2e00      	cmp	r6, #0
 8010cce:	d1ea      	bne.n	8010ca6 <__ieee754_pow+0x2e>
 8010cd0:	4592      	cmp	sl, r2
 8010cd2:	d801      	bhi.n	8010cd8 <__ieee754_pow+0x60>
 8010cd4:	d10e      	bne.n	8010cf4 <__ieee754_pow+0x7c>
 8010cd6:	b169      	cbz	r1, 8010cf4 <__ieee754_pow+0x7c>
 8010cd8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8010cdc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8010ce0:	431d      	orrs	r5, r3
 8010ce2:	d1e0      	bne.n	8010ca6 <__ieee754_pow+0x2e>
 8010ce4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010ce8:	18db      	adds	r3, r3, r3
 8010cea:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8010cee:	4152      	adcs	r2, r2
 8010cf0:	429d      	cmp	r5, r3
 8010cf2:	e7d4      	b.n	8010c9e <__ieee754_pow+0x26>
 8010cf4:	2d00      	cmp	r5, #0
 8010cf6:	46c3      	mov	fp, r8
 8010cf8:	da3a      	bge.n	8010d70 <__ieee754_pow+0xf8>
 8010cfa:	4a83      	ldr	r2, [pc, #524]	@ (8010f08 <__ieee754_pow+0x290>)
 8010cfc:	4592      	cmp	sl, r2
 8010cfe:	d84d      	bhi.n	8010d9c <__ieee754_pow+0x124>
 8010d00:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8010d04:	4592      	cmp	sl, r2
 8010d06:	f240 84c7 	bls.w	8011698 <__ieee754_pow+0xa20>
 8010d0a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8010d0e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8010d12:	2a14      	cmp	r2, #20
 8010d14:	dd0f      	ble.n	8010d36 <__ieee754_pow+0xbe>
 8010d16:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8010d1a:	fa21 f402 	lsr.w	r4, r1, r2
 8010d1e:	fa04 f202 	lsl.w	r2, r4, r2
 8010d22:	428a      	cmp	r2, r1
 8010d24:	f040 84b8 	bne.w	8011698 <__ieee754_pow+0xa20>
 8010d28:	f004 0401 	and.w	r4, r4, #1
 8010d2c:	f1c4 0402 	rsb	r4, r4, #2
 8010d30:	2900      	cmp	r1, #0
 8010d32:	d158      	bne.n	8010de6 <__ieee754_pow+0x16e>
 8010d34:	e00e      	b.n	8010d54 <__ieee754_pow+0xdc>
 8010d36:	2900      	cmp	r1, #0
 8010d38:	d154      	bne.n	8010de4 <__ieee754_pow+0x16c>
 8010d3a:	f1c2 0214 	rsb	r2, r2, #20
 8010d3e:	fa4a f402 	asr.w	r4, sl, r2
 8010d42:	fa04 f202 	lsl.w	r2, r4, r2
 8010d46:	4552      	cmp	r2, sl
 8010d48:	f040 84a3 	bne.w	8011692 <__ieee754_pow+0xa1a>
 8010d4c:	f004 0401 	and.w	r4, r4, #1
 8010d50:	f1c4 0402 	rsb	r4, r4, #2
 8010d54:	4a6d      	ldr	r2, [pc, #436]	@ (8010f0c <__ieee754_pow+0x294>)
 8010d56:	4592      	cmp	sl, r2
 8010d58:	d12e      	bne.n	8010db8 <__ieee754_pow+0x140>
 8010d5a:	f1b9 0f00 	cmp.w	r9, #0
 8010d5e:	f280 8494 	bge.w	801168a <__ieee754_pow+0xa12>
 8010d62:	496a      	ldr	r1, [pc, #424]	@ (8010f0c <__ieee754_pow+0x294>)
 8010d64:	4632      	mov	r2, r6
 8010d66:	463b      	mov	r3, r7
 8010d68:	2000      	movs	r0, #0
 8010d6a:	f7ef fd8f 	bl	800088c <__aeabi_ddiv>
 8010d6e:	e7a0      	b.n	8010cb2 <__ieee754_pow+0x3a>
 8010d70:	2400      	movs	r4, #0
 8010d72:	bbc1      	cbnz	r1, 8010de6 <__ieee754_pow+0x16e>
 8010d74:	4a63      	ldr	r2, [pc, #396]	@ (8010f04 <__ieee754_pow+0x28c>)
 8010d76:	4592      	cmp	sl, r2
 8010d78:	d1ec      	bne.n	8010d54 <__ieee754_pow+0xdc>
 8010d7a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8010d7e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8010d82:	431a      	orrs	r2, r3
 8010d84:	f000 8479 	beq.w	801167a <__ieee754_pow+0xa02>
 8010d88:	4b61      	ldr	r3, [pc, #388]	@ (8010f10 <__ieee754_pow+0x298>)
 8010d8a:	4598      	cmp	r8, r3
 8010d8c:	d908      	bls.n	8010da0 <__ieee754_pow+0x128>
 8010d8e:	f1b9 0f00 	cmp.w	r9, #0
 8010d92:	f2c0 8476 	blt.w	8011682 <__ieee754_pow+0xa0a>
 8010d96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010d9a:	e78a      	b.n	8010cb2 <__ieee754_pow+0x3a>
 8010d9c:	2402      	movs	r4, #2
 8010d9e:	e7e8      	b.n	8010d72 <__ieee754_pow+0xfa>
 8010da0:	f1b9 0f00 	cmp.w	r9, #0
 8010da4:	f04f 0000 	mov.w	r0, #0
 8010da8:	f04f 0100 	mov.w	r1, #0
 8010dac:	da81      	bge.n	8010cb2 <__ieee754_pow+0x3a>
 8010dae:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010db2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010db6:	e77c      	b.n	8010cb2 <__ieee754_pow+0x3a>
 8010db8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8010dbc:	d106      	bne.n	8010dcc <__ieee754_pow+0x154>
 8010dbe:	4632      	mov	r2, r6
 8010dc0:	463b      	mov	r3, r7
 8010dc2:	4630      	mov	r0, r6
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	f7ef fc37 	bl	8000638 <__aeabi_dmul>
 8010dca:	e772      	b.n	8010cb2 <__ieee754_pow+0x3a>
 8010dcc:	4a51      	ldr	r2, [pc, #324]	@ (8010f14 <__ieee754_pow+0x29c>)
 8010dce:	4591      	cmp	r9, r2
 8010dd0:	d109      	bne.n	8010de6 <__ieee754_pow+0x16e>
 8010dd2:	2d00      	cmp	r5, #0
 8010dd4:	db07      	blt.n	8010de6 <__ieee754_pow+0x16e>
 8010dd6:	ec47 6b10 	vmov	d0, r6, r7
 8010dda:	b011      	add	sp, #68	@ 0x44
 8010ddc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de0:	f7ff bdee 	b.w	80109c0 <__ieee754_sqrt>
 8010de4:	2400      	movs	r4, #0
 8010de6:	ec47 6b10 	vmov	d0, r6, r7
 8010dea:	9302      	str	r3, [sp, #8]
 8010dec:	f000 fc88 	bl	8011700 <fabs>
 8010df0:	9b02      	ldr	r3, [sp, #8]
 8010df2:	ec51 0b10 	vmov	r0, r1, d0
 8010df6:	bb53      	cbnz	r3, 8010e4e <__ieee754_pow+0x1d6>
 8010df8:	4b44      	ldr	r3, [pc, #272]	@ (8010f0c <__ieee754_pow+0x294>)
 8010dfa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d002      	beq.n	8010e08 <__ieee754_pow+0x190>
 8010e02:	f1b8 0f00 	cmp.w	r8, #0
 8010e06:	d122      	bne.n	8010e4e <__ieee754_pow+0x1d6>
 8010e08:	f1b9 0f00 	cmp.w	r9, #0
 8010e0c:	da05      	bge.n	8010e1a <__ieee754_pow+0x1a2>
 8010e0e:	4602      	mov	r2, r0
 8010e10:	460b      	mov	r3, r1
 8010e12:	2000      	movs	r0, #0
 8010e14:	493d      	ldr	r1, [pc, #244]	@ (8010f0c <__ieee754_pow+0x294>)
 8010e16:	f7ef fd39 	bl	800088c <__aeabi_ddiv>
 8010e1a:	2d00      	cmp	r5, #0
 8010e1c:	f6bf af49 	bge.w	8010cb2 <__ieee754_pow+0x3a>
 8010e20:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8010e24:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8010e28:	ea58 0804 	orrs.w	r8, r8, r4
 8010e2c:	d108      	bne.n	8010e40 <__ieee754_pow+0x1c8>
 8010e2e:	4602      	mov	r2, r0
 8010e30:	460b      	mov	r3, r1
 8010e32:	4610      	mov	r0, r2
 8010e34:	4619      	mov	r1, r3
 8010e36:	f7ef fa47 	bl	80002c8 <__aeabi_dsub>
 8010e3a:	4602      	mov	r2, r0
 8010e3c:	460b      	mov	r3, r1
 8010e3e:	e794      	b.n	8010d6a <__ieee754_pow+0xf2>
 8010e40:	2c01      	cmp	r4, #1
 8010e42:	f47f af36 	bne.w	8010cb2 <__ieee754_pow+0x3a>
 8010e46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010e4a:	4619      	mov	r1, r3
 8010e4c:	e731      	b.n	8010cb2 <__ieee754_pow+0x3a>
 8010e4e:	0feb      	lsrs	r3, r5, #31
 8010e50:	3b01      	subs	r3, #1
 8010e52:	ea53 0204 	orrs.w	r2, r3, r4
 8010e56:	d102      	bne.n	8010e5e <__ieee754_pow+0x1e6>
 8010e58:	4632      	mov	r2, r6
 8010e5a:	463b      	mov	r3, r7
 8010e5c:	e7e9      	b.n	8010e32 <__ieee754_pow+0x1ba>
 8010e5e:	3c01      	subs	r4, #1
 8010e60:	431c      	orrs	r4, r3
 8010e62:	d016      	beq.n	8010e92 <__ieee754_pow+0x21a>
 8010e64:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8010ef0 <__ieee754_pow+0x278>
 8010e68:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8010e6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e70:	f240 8112 	bls.w	8011098 <__ieee754_pow+0x420>
 8010e74:	4b28      	ldr	r3, [pc, #160]	@ (8010f18 <__ieee754_pow+0x2a0>)
 8010e76:	459a      	cmp	sl, r3
 8010e78:	4b25      	ldr	r3, [pc, #148]	@ (8010f10 <__ieee754_pow+0x298>)
 8010e7a:	d916      	bls.n	8010eaa <__ieee754_pow+0x232>
 8010e7c:	4598      	cmp	r8, r3
 8010e7e:	d80b      	bhi.n	8010e98 <__ieee754_pow+0x220>
 8010e80:	f1b9 0f00 	cmp.w	r9, #0
 8010e84:	da0b      	bge.n	8010e9e <__ieee754_pow+0x226>
 8010e86:	2000      	movs	r0, #0
 8010e88:	b011      	add	sp, #68	@ 0x44
 8010e8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e8e:	f001 b847 	b.w	8011f20 <__math_oflow>
 8010e92:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8010ef8 <__ieee754_pow+0x280>
 8010e96:	e7e7      	b.n	8010e68 <__ieee754_pow+0x1f0>
 8010e98:	f1b9 0f00 	cmp.w	r9, #0
 8010e9c:	dcf3      	bgt.n	8010e86 <__ieee754_pow+0x20e>
 8010e9e:	2000      	movs	r0, #0
 8010ea0:	b011      	add	sp, #68	@ 0x44
 8010ea2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ea6:	f001 b833 	b.w	8011f10 <__math_uflow>
 8010eaa:	4598      	cmp	r8, r3
 8010eac:	d20c      	bcs.n	8010ec8 <__ieee754_pow+0x250>
 8010eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	f7ef fe31 	bl	8000b1c <__aeabi_dcmplt>
 8010eba:	3800      	subs	r0, #0
 8010ebc:	bf18      	it	ne
 8010ebe:	2001      	movne	r0, #1
 8010ec0:	f1b9 0f00 	cmp.w	r9, #0
 8010ec4:	daec      	bge.n	8010ea0 <__ieee754_pow+0x228>
 8010ec6:	e7df      	b.n	8010e88 <__ieee754_pow+0x210>
 8010ec8:	4b10      	ldr	r3, [pc, #64]	@ (8010f0c <__ieee754_pow+0x294>)
 8010eca:	4598      	cmp	r8, r3
 8010ecc:	f04f 0200 	mov.w	r2, #0
 8010ed0:	d924      	bls.n	8010f1c <__ieee754_pow+0x2a4>
 8010ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	f7ef fe20 	bl	8000b1c <__aeabi_dcmplt>
 8010edc:	3800      	subs	r0, #0
 8010ede:	bf18      	it	ne
 8010ee0:	2001      	movne	r0, #1
 8010ee2:	f1b9 0f00 	cmp.w	r9, #0
 8010ee6:	dccf      	bgt.n	8010e88 <__ieee754_pow+0x210>
 8010ee8:	e7da      	b.n	8010ea0 <__ieee754_pow+0x228>
 8010eea:	bf00      	nop
 8010eec:	f3af 8000 	nop.w
 8010ef0:	00000000 	.word	0x00000000
 8010ef4:	3ff00000 	.word	0x3ff00000
 8010ef8:	00000000 	.word	0x00000000
 8010efc:	bff00000 	.word	0xbff00000
 8010f00:	fff00000 	.word	0xfff00000
 8010f04:	7ff00000 	.word	0x7ff00000
 8010f08:	433fffff 	.word	0x433fffff
 8010f0c:	3ff00000 	.word	0x3ff00000
 8010f10:	3fefffff 	.word	0x3fefffff
 8010f14:	3fe00000 	.word	0x3fe00000
 8010f18:	43f00000 	.word	0x43f00000
 8010f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8011088 <__ieee754_pow+0x410>)
 8010f1e:	f7ef f9d3 	bl	80002c8 <__aeabi_dsub>
 8010f22:	a351      	add	r3, pc, #324	@ (adr r3, 8011068 <__ieee754_pow+0x3f0>)
 8010f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f28:	4604      	mov	r4, r0
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	f7ef fb84 	bl	8000638 <__aeabi_dmul>
 8010f30:	a34f      	add	r3, pc, #316	@ (adr r3, 8011070 <__ieee754_pow+0x3f8>)
 8010f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f36:	4606      	mov	r6, r0
 8010f38:	460f      	mov	r7, r1
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	4629      	mov	r1, r5
 8010f3e:	f7ef fb7b 	bl	8000638 <__aeabi_dmul>
 8010f42:	4b52      	ldr	r3, [pc, #328]	@ (801108c <__ieee754_pow+0x414>)
 8010f44:	4682      	mov	sl, r0
 8010f46:	468b      	mov	fp, r1
 8010f48:	2200      	movs	r2, #0
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	4629      	mov	r1, r5
 8010f4e:	f7ef fb73 	bl	8000638 <__aeabi_dmul>
 8010f52:	4602      	mov	r2, r0
 8010f54:	460b      	mov	r3, r1
 8010f56:	a148      	add	r1, pc, #288	@ (adr r1, 8011078 <__ieee754_pow+0x400>)
 8010f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010f5c:	f7ef f9b4 	bl	80002c8 <__aeabi_dsub>
 8010f60:	4622      	mov	r2, r4
 8010f62:	462b      	mov	r3, r5
 8010f64:	f7ef fb68 	bl	8000638 <__aeabi_dmul>
 8010f68:	4602      	mov	r2, r0
 8010f6a:	460b      	mov	r3, r1
 8010f6c:	2000      	movs	r0, #0
 8010f6e:	4948      	ldr	r1, [pc, #288]	@ (8011090 <__ieee754_pow+0x418>)
 8010f70:	f7ef f9aa 	bl	80002c8 <__aeabi_dsub>
 8010f74:	4622      	mov	r2, r4
 8010f76:	4680      	mov	r8, r0
 8010f78:	4689      	mov	r9, r1
 8010f7a:	462b      	mov	r3, r5
 8010f7c:	4620      	mov	r0, r4
 8010f7e:	4629      	mov	r1, r5
 8010f80:	f7ef fb5a 	bl	8000638 <__aeabi_dmul>
 8010f84:	4602      	mov	r2, r0
 8010f86:	460b      	mov	r3, r1
 8010f88:	4640      	mov	r0, r8
 8010f8a:	4649      	mov	r1, r9
 8010f8c:	f7ef fb54 	bl	8000638 <__aeabi_dmul>
 8010f90:	a33b      	add	r3, pc, #236	@ (adr r3, 8011080 <__ieee754_pow+0x408>)
 8010f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f96:	f7ef fb4f 	bl	8000638 <__aeabi_dmul>
 8010f9a:	4602      	mov	r2, r0
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	4650      	mov	r0, sl
 8010fa0:	4659      	mov	r1, fp
 8010fa2:	f7ef f991 	bl	80002c8 <__aeabi_dsub>
 8010fa6:	4602      	mov	r2, r0
 8010fa8:	460b      	mov	r3, r1
 8010faa:	4680      	mov	r8, r0
 8010fac:	4689      	mov	r9, r1
 8010fae:	4630      	mov	r0, r6
 8010fb0:	4639      	mov	r1, r7
 8010fb2:	f7ef f98b 	bl	80002cc <__adddf3>
 8010fb6:	2400      	movs	r4, #0
 8010fb8:	4632      	mov	r2, r6
 8010fba:	463b      	mov	r3, r7
 8010fbc:	4620      	mov	r0, r4
 8010fbe:	460d      	mov	r5, r1
 8010fc0:	f7ef f982 	bl	80002c8 <__aeabi_dsub>
 8010fc4:	4602      	mov	r2, r0
 8010fc6:	460b      	mov	r3, r1
 8010fc8:	4640      	mov	r0, r8
 8010fca:	4649      	mov	r1, r9
 8010fcc:	f7ef f97c 	bl	80002c8 <__aeabi_dsub>
 8010fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010fd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010fd8:	2300      	movs	r3, #0
 8010fda:	9304      	str	r3, [sp, #16]
 8010fdc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8010fe0:	4606      	mov	r6, r0
 8010fe2:	460f      	mov	r7, r1
 8010fe4:	4652      	mov	r2, sl
 8010fe6:	465b      	mov	r3, fp
 8010fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010fec:	f7ef f96c 	bl	80002c8 <__aeabi_dsub>
 8010ff0:	4622      	mov	r2, r4
 8010ff2:	462b      	mov	r3, r5
 8010ff4:	f7ef fb20 	bl	8000638 <__aeabi_dmul>
 8010ff8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ffc:	4680      	mov	r8, r0
 8010ffe:	4689      	mov	r9, r1
 8011000:	4630      	mov	r0, r6
 8011002:	4639      	mov	r1, r7
 8011004:	f7ef fb18 	bl	8000638 <__aeabi_dmul>
 8011008:	4602      	mov	r2, r0
 801100a:	460b      	mov	r3, r1
 801100c:	4640      	mov	r0, r8
 801100e:	4649      	mov	r1, r9
 8011010:	f7ef f95c 	bl	80002cc <__adddf3>
 8011014:	4652      	mov	r2, sl
 8011016:	465b      	mov	r3, fp
 8011018:	4606      	mov	r6, r0
 801101a:	460f      	mov	r7, r1
 801101c:	4620      	mov	r0, r4
 801101e:	4629      	mov	r1, r5
 8011020:	f7ef fb0a 	bl	8000638 <__aeabi_dmul>
 8011024:	460b      	mov	r3, r1
 8011026:	4602      	mov	r2, r0
 8011028:	4680      	mov	r8, r0
 801102a:	4689      	mov	r9, r1
 801102c:	4630      	mov	r0, r6
 801102e:	4639      	mov	r1, r7
 8011030:	f7ef f94c 	bl	80002cc <__adddf3>
 8011034:	4b17      	ldr	r3, [pc, #92]	@ (8011094 <__ieee754_pow+0x41c>)
 8011036:	4299      	cmp	r1, r3
 8011038:	4604      	mov	r4, r0
 801103a:	460d      	mov	r5, r1
 801103c:	468a      	mov	sl, r1
 801103e:	468b      	mov	fp, r1
 8011040:	f340 82ef 	ble.w	8011622 <__ieee754_pow+0x9aa>
 8011044:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8011048:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801104c:	4303      	orrs	r3, r0
 801104e:	f000 81e8 	beq.w	8011422 <__ieee754_pow+0x7aa>
 8011052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011056:	2200      	movs	r2, #0
 8011058:	2300      	movs	r3, #0
 801105a:	f7ef fd5f 	bl	8000b1c <__aeabi_dcmplt>
 801105e:	3800      	subs	r0, #0
 8011060:	bf18      	it	ne
 8011062:	2001      	movne	r0, #1
 8011064:	e710      	b.n	8010e88 <__ieee754_pow+0x210>
 8011066:	bf00      	nop
 8011068:	60000000 	.word	0x60000000
 801106c:	3ff71547 	.word	0x3ff71547
 8011070:	f85ddf44 	.word	0xf85ddf44
 8011074:	3e54ae0b 	.word	0x3e54ae0b
 8011078:	55555555 	.word	0x55555555
 801107c:	3fd55555 	.word	0x3fd55555
 8011080:	652b82fe 	.word	0x652b82fe
 8011084:	3ff71547 	.word	0x3ff71547
 8011088:	3ff00000 	.word	0x3ff00000
 801108c:	3fd00000 	.word	0x3fd00000
 8011090:	3fe00000 	.word	0x3fe00000
 8011094:	408fffff 	.word	0x408fffff
 8011098:	4bd5      	ldr	r3, [pc, #852]	@ (80113f0 <__ieee754_pow+0x778>)
 801109a:	402b      	ands	r3, r5
 801109c:	2200      	movs	r2, #0
 801109e:	b92b      	cbnz	r3, 80110ac <__ieee754_pow+0x434>
 80110a0:	4bd4      	ldr	r3, [pc, #848]	@ (80113f4 <__ieee754_pow+0x77c>)
 80110a2:	f7ef fac9 	bl	8000638 <__aeabi_dmul>
 80110a6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80110aa:	468b      	mov	fp, r1
 80110ac:	ea4f 532b 	mov.w	r3, fp, asr #20
 80110b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80110b4:	4413      	add	r3, r2
 80110b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80110b8:	4bcf      	ldr	r3, [pc, #828]	@ (80113f8 <__ieee754_pow+0x780>)
 80110ba:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80110be:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80110c2:	459b      	cmp	fp, r3
 80110c4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80110c8:	dd08      	ble.n	80110dc <__ieee754_pow+0x464>
 80110ca:	4bcc      	ldr	r3, [pc, #816]	@ (80113fc <__ieee754_pow+0x784>)
 80110cc:	459b      	cmp	fp, r3
 80110ce:	f340 81a5 	ble.w	801141c <__ieee754_pow+0x7a4>
 80110d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80110d4:	3301      	adds	r3, #1
 80110d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80110d8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80110dc:	f04f 0a00 	mov.w	sl, #0
 80110e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80110e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80110e6:	4bc6      	ldr	r3, [pc, #792]	@ (8011400 <__ieee754_pow+0x788>)
 80110e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80110ec:	ed93 7b00 	vldr	d7, [r3]
 80110f0:	4629      	mov	r1, r5
 80110f2:	ec53 2b17 	vmov	r2, r3, d7
 80110f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80110fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80110fe:	f7ef f8e3 	bl	80002c8 <__aeabi_dsub>
 8011102:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011106:	4606      	mov	r6, r0
 8011108:	460f      	mov	r7, r1
 801110a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801110e:	f7ef f8dd 	bl	80002cc <__adddf3>
 8011112:	4602      	mov	r2, r0
 8011114:	460b      	mov	r3, r1
 8011116:	2000      	movs	r0, #0
 8011118:	49ba      	ldr	r1, [pc, #744]	@ (8011404 <__ieee754_pow+0x78c>)
 801111a:	f7ef fbb7 	bl	800088c <__aeabi_ddiv>
 801111e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8011122:	4602      	mov	r2, r0
 8011124:	460b      	mov	r3, r1
 8011126:	4630      	mov	r0, r6
 8011128:	4639      	mov	r1, r7
 801112a:	f7ef fa85 	bl	8000638 <__aeabi_dmul>
 801112e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011132:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8011136:	106d      	asrs	r5, r5, #1
 8011138:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801113c:	f04f 0b00 	mov.w	fp, #0
 8011140:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8011144:	4661      	mov	r1, ip
 8011146:	2200      	movs	r2, #0
 8011148:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801114c:	4658      	mov	r0, fp
 801114e:	46e1      	mov	r9, ip
 8011150:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8011154:	4614      	mov	r4, r2
 8011156:	461d      	mov	r5, r3
 8011158:	f7ef fa6e 	bl	8000638 <__aeabi_dmul>
 801115c:	4602      	mov	r2, r0
 801115e:	460b      	mov	r3, r1
 8011160:	4630      	mov	r0, r6
 8011162:	4639      	mov	r1, r7
 8011164:	f7ef f8b0 	bl	80002c8 <__aeabi_dsub>
 8011168:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801116c:	4606      	mov	r6, r0
 801116e:	460f      	mov	r7, r1
 8011170:	4620      	mov	r0, r4
 8011172:	4629      	mov	r1, r5
 8011174:	f7ef f8a8 	bl	80002c8 <__aeabi_dsub>
 8011178:	4602      	mov	r2, r0
 801117a:	460b      	mov	r3, r1
 801117c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011180:	f7ef f8a2 	bl	80002c8 <__aeabi_dsub>
 8011184:	465a      	mov	r2, fp
 8011186:	464b      	mov	r3, r9
 8011188:	f7ef fa56 	bl	8000638 <__aeabi_dmul>
 801118c:	4602      	mov	r2, r0
 801118e:	460b      	mov	r3, r1
 8011190:	4630      	mov	r0, r6
 8011192:	4639      	mov	r1, r7
 8011194:	f7ef f898 	bl	80002c8 <__aeabi_dsub>
 8011198:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801119c:	f7ef fa4c 	bl	8000638 <__aeabi_dmul>
 80111a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80111a8:	4610      	mov	r0, r2
 80111aa:	4619      	mov	r1, r3
 80111ac:	f7ef fa44 	bl	8000638 <__aeabi_dmul>
 80111b0:	a37d      	add	r3, pc, #500	@ (adr r3, 80113a8 <__ieee754_pow+0x730>)
 80111b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b6:	4604      	mov	r4, r0
 80111b8:	460d      	mov	r5, r1
 80111ba:	f7ef fa3d 	bl	8000638 <__aeabi_dmul>
 80111be:	a37c      	add	r3, pc, #496	@ (adr r3, 80113b0 <__ieee754_pow+0x738>)
 80111c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111c4:	f7ef f882 	bl	80002cc <__adddf3>
 80111c8:	4622      	mov	r2, r4
 80111ca:	462b      	mov	r3, r5
 80111cc:	f7ef fa34 	bl	8000638 <__aeabi_dmul>
 80111d0:	a379      	add	r3, pc, #484	@ (adr r3, 80113b8 <__ieee754_pow+0x740>)
 80111d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d6:	f7ef f879 	bl	80002cc <__adddf3>
 80111da:	4622      	mov	r2, r4
 80111dc:	462b      	mov	r3, r5
 80111de:	f7ef fa2b 	bl	8000638 <__aeabi_dmul>
 80111e2:	a377      	add	r3, pc, #476	@ (adr r3, 80113c0 <__ieee754_pow+0x748>)
 80111e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e8:	f7ef f870 	bl	80002cc <__adddf3>
 80111ec:	4622      	mov	r2, r4
 80111ee:	462b      	mov	r3, r5
 80111f0:	f7ef fa22 	bl	8000638 <__aeabi_dmul>
 80111f4:	a374      	add	r3, pc, #464	@ (adr r3, 80113c8 <__ieee754_pow+0x750>)
 80111f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fa:	f7ef f867 	bl	80002cc <__adddf3>
 80111fe:	4622      	mov	r2, r4
 8011200:	462b      	mov	r3, r5
 8011202:	f7ef fa19 	bl	8000638 <__aeabi_dmul>
 8011206:	a372      	add	r3, pc, #456	@ (adr r3, 80113d0 <__ieee754_pow+0x758>)
 8011208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120c:	f7ef f85e 	bl	80002cc <__adddf3>
 8011210:	4622      	mov	r2, r4
 8011212:	4606      	mov	r6, r0
 8011214:	460f      	mov	r7, r1
 8011216:	462b      	mov	r3, r5
 8011218:	4620      	mov	r0, r4
 801121a:	4629      	mov	r1, r5
 801121c:	f7ef fa0c 	bl	8000638 <__aeabi_dmul>
 8011220:	4602      	mov	r2, r0
 8011222:	460b      	mov	r3, r1
 8011224:	4630      	mov	r0, r6
 8011226:	4639      	mov	r1, r7
 8011228:	f7ef fa06 	bl	8000638 <__aeabi_dmul>
 801122c:	465a      	mov	r2, fp
 801122e:	4604      	mov	r4, r0
 8011230:	460d      	mov	r5, r1
 8011232:	464b      	mov	r3, r9
 8011234:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011238:	f7ef f848 	bl	80002cc <__adddf3>
 801123c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011240:	f7ef f9fa 	bl	8000638 <__aeabi_dmul>
 8011244:	4622      	mov	r2, r4
 8011246:	462b      	mov	r3, r5
 8011248:	f7ef f840 	bl	80002cc <__adddf3>
 801124c:	465a      	mov	r2, fp
 801124e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011252:	464b      	mov	r3, r9
 8011254:	4658      	mov	r0, fp
 8011256:	4649      	mov	r1, r9
 8011258:	f7ef f9ee 	bl	8000638 <__aeabi_dmul>
 801125c:	4b6a      	ldr	r3, [pc, #424]	@ (8011408 <__ieee754_pow+0x790>)
 801125e:	2200      	movs	r2, #0
 8011260:	4606      	mov	r6, r0
 8011262:	460f      	mov	r7, r1
 8011264:	f7ef f832 	bl	80002cc <__adddf3>
 8011268:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801126c:	f7ef f82e 	bl	80002cc <__adddf3>
 8011270:	46d8      	mov	r8, fp
 8011272:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8011276:	460d      	mov	r5, r1
 8011278:	465a      	mov	r2, fp
 801127a:	460b      	mov	r3, r1
 801127c:	4640      	mov	r0, r8
 801127e:	4649      	mov	r1, r9
 8011280:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8011284:	f7ef f9d8 	bl	8000638 <__aeabi_dmul>
 8011288:	465c      	mov	r4, fp
 801128a:	4680      	mov	r8, r0
 801128c:	4689      	mov	r9, r1
 801128e:	4b5e      	ldr	r3, [pc, #376]	@ (8011408 <__ieee754_pow+0x790>)
 8011290:	2200      	movs	r2, #0
 8011292:	4620      	mov	r0, r4
 8011294:	4629      	mov	r1, r5
 8011296:	f7ef f817 	bl	80002c8 <__aeabi_dsub>
 801129a:	4632      	mov	r2, r6
 801129c:	463b      	mov	r3, r7
 801129e:	f7ef f813 	bl	80002c8 <__aeabi_dsub>
 80112a2:	4602      	mov	r2, r0
 80112a4:	460b      	mov	r3, r1
 80112a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80112aa:	f7ef f80d 	bl	80002c8 <__aeabi_dsub>
 80112ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112b2:	f7ef f9c1 	bl	8000638 <__aeabi_dmul>
 80112b6:	4622      	mov	r2, r4
 80112b8:	4606      	mov	r6, r0
 80112ba:	460f      	mov	r7, r1
 80112bc:	462b      	mov	r3, r5
 80112be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80112c2:	f7ef f9b9 	bl	8000638 <__aeabi_dmul>
 80112c6:	4602      	mov	r2, r0
 80112c8:	460b      	mov	r3, r1
 80112ca:	4630      	mov	r0, r6
 80112cc:	4639      	mov	r1, r7
 80112ce:	f7ee fffd 	bl	80002cc <__adddf3>
 80112d2:	4606      	mov	r6, r0
 80112d4:	460f      	mov	r7, r1
 80112d6:	4602      	mov	r2, r0
 80112d8:	460b      	mov	r3, r1
 80112da:	4640      	mov	r0, r8
 80112dc:	4649      	mov	r1, r9
 80112de:	f7ee fff5 	bl	80002cc <__adddf3>
 80112e2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80112e6:	a33c      	add	r3, pc, #240	@ (adr r3, 80113d8 <__ieee754_pow+0x760>)
 80112e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ec:	4658      	mov	r0, fp
 80112ee:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80112f2:	460d      	mov	r5, r1
 80112f4:	f7ef f9a0 	bl	8000638 <__aeabi_dmul>
 80112f8:	465c      	mov	r4, fp
 80112fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80112fe:	4642      	mov	r2, r8
 8011300:	464b      	mov	r3, r9
 8011302:	4620      	mov	r0, r4
 8011304:	4629      	mov	r1, r5
 8011306:	f7ee ffdf 	bl	80002c8 <__aeabi_dsub>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4630      	mov	r0, r6
 8011310:	4639      	mov	r1, r7
 8011312:	f7ee ffd9 	bl	80002c8 <__aeabi_dsub>
 8011316:	a332      	add	r3, pc, #200	@ (adr r3, 80113e0 <__ieee754_pow+0x768>)
 8011318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131c:	f7ef f98c 	bl	8000638 <__aeabi_dmul>
 8011320:	a331      	add	r3, pc, #196	@ (adr r3, 80113e8 <__ieee754_pow+0x770>)
 8011322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011326:	4606      	mov	r6, r0
 8011328:	460f      	mov	r7, r1
 801132a:	4620      	mov	r0, r4
 801132c:	4629      	mov	r1, r5
 801132e:	f7ef f983 	bl	8000638 <__aeabi_dmul>
 8011332:	4602      	mov	r2, r0
 8011334:	460b      	mov	r3, r1
 8011336:	4630      	mov	r0, r6
 8011338:	4639      	mov	r1, r7
 801133a:	f7ee ffc7 	bl	80002cc <__adddf3>
 801133e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011340:	4b32      	ldr	r3, [pc, #200]	@ (801140c <__ieee754_pow+0x794>)
 8011342:	4413      	add	r3, r2
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f7ee ffc0 	bl	80002cc <__adddf3>
 801134c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011350:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8011352:	f7ef f907 	bl	8000564 <__aeabi_i2d>
 8011356:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011358:	4b2d      	ldr	r3, [pc, #180]	@ (8011410 <__ieee754_pow+0x798>)
 801135a:	4413      	add	r3, r2
 801135c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011360:	4606      	mov	r6, r0
 8011362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011366:	460f      	mov	r7, r1
 8011368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801136c:	f7ee ffae 	bl	80002cc <__adddf3>
 8011370:	4642      	mov	r2, r8
 8011372:	464b      	mov	r3, r9
 8011374:	f7ee ffaa 	bl	80002cc <__adddf3>
 8011378:	4632      	mov	r2, r6
 801137a:	463b      	mov	r3, r7
 801137c:	f7ee ffa6 	bl	80002cc <__adddf3>
 8011380:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8011384:	4632      	mov	r2, r6
 8011386:	463b      	mov	r3, r7
 8011388:	4658      	mov	r0, fp
 801138a:	460d      	mov	r5, r1
 801138c:	f7ee ff9c 	bl	80002c8 <__aeabi_dsub>
 8011390:	4642      	mov	r2, r8
 8011392:	464b      	mov	r3, r9
 8011394:	f7ee ff98 	bl	80002c8 <__aeabi_dsub>
 8011398:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801139c:	f7ee ff94 	bl	80002c8 <__aeabi_dsub>
 80113a0:	465c      	mov	r4, fp
 80113a2:	4602      	mov	r2, r0
 80113a4:	e036      	b.n	8011414 <__ieee754_pow+0x79c>
 80113a6:	bf00      	nop
 80113a8:	4a454eef 	.word	0x4a454eef
 80113ac:	3fca7e28 	.word	0x3fca7e28
 80113b0:	93c9db65 	.word	0x93c9db65
 80113b4:	3fcd864a 	.word	0x3fcd864a
 80113b8:	a91d4101 	.word	0xa91d4101
 80113bc:	3fd17460 	.word	0x3fd17460
 80113c0:	518f264d 	.word	0x518f264d
 80113c4:	3fd55555 	.word	0x3fd55555
 80113c8:	db6fabff 	.word	0xdb6fabff
 80113cc:	3fdb6db6 	.word	0x3fdb6db6
 80113d0:	33333303 	.word	0x33333303
 80113d4:	3fe33333 	.word	0x3fe33333
 80113d8:	e0000000 	.word	0xe0000000
 80113dc:	3feec709 	.word	0x3feec709
 80113e0:	dc3a03fd 	.word	0xdc3a03fd
 80113e4:	3feec709 	.word	0x3feec709
 80113e8:	145b01f5 	.word	0x145b01f5
 80113ec:	be3e2fe0 	.word	0xbe3e2fe0
 80113f0:	7ff00000 	.word	0x7ff00000
 80113f4:	43400000 	.word	0x43400000
 80113f8:	0003988e 	.word	0x0003988e
 80113fc:	000bb679 	.word	0x000bb679
 8011400:	08012570 	.word	0x08012570
 8011404:	3ff00000 	.word	0x3ff00000
 8011408:	40080000 	.word	0x40080000
 801140c:	08012550 	.word	0x08012550
 8011410:	08012560 	.word	0x08012560
 8011414:	460b      	mov	r3, r1
 8011416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801141a:	e5d7      	b.n	8010fcc <__ieee754_pow+0x354>
 801141c:	f04f 0a01 	mov.w	sl, #1
 8011420:	e65e      	b.n	80110e0 <__ieee754_pow+0x468>
 8011422:	a3b4      	add	r3, pc, #720	@ (adr r3, 80116f4 <__ieee754_pow+0xa7c>)
 8011424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011428:	4630      	mov	r0, r6
 801142a:	4639      	mov	r1, r7
 801142c:	f7ee ff4e 	bl	80002cc <__adddf3>
 8011430:	4642      	mov	r2, r8
 8011432:	e9cd 0100 	strd	r0, r1, [sp]
 8011436:	464b      	mov	r3, r9
 8011438:	4620      	mov	r0, r4
 801143a:	4629      	mov	r1, r5
 801143c:	f7ee ff44 	bl	80002c8 <__aeabi_dsub>
 8011440:	4602      	mov	r2, r0
 8011442:	460b      	mov	r3, r1
 8011444:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011448:	f7ef fb86 	bl	8000b58 <__aeabi_dcmpgt>
 801144c:	2800      	cmp	r0, #0
 801144e:	f47f ae00 	bne.w	8011052 <__ieee754_pow+0x3da>
 8011452:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8011456:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801145a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801145e:	fa43 fa0a 	asr.w	sl, r3, sl
 8011462:	44da      	add	sl, fp
 8011464:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8011468:	489d      	ldr	r0, [pc, #628]	@ (80116e0 <__ieee754_pow+0xa68>)
 801146a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801146e:	4108      	asrs	r0, r1
 8011470:	ea00 030a 	and.w	r3, r0, sl
 8011474:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8011478:	f1c1 0114 	rsb	r1, r1, #20
 801147c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8011480:	fa4a fa01 	asr.w	sl, sl, r1
 8011484:	f1bb 0f00 	cmp.w	fp, #0
 8011488:	4640      	mov	r0, r8
 801148a:	4649      	mov	r1, r9
 801148c:	f04f 0200 	mov.w	r2, #0
 8011490:	bfb8      	it	lt
 8011492:	f1ca 0a00 	rsblt	sl, sl, #0
 8011496:	f7ee ff17 	bl	80002c8 <__aeabi_dsub>
 801149a:	4680      	mov	r8, r0
 801149c:	4689      	mov	r9, r1
 801149e:	4632      	mov	r2, r6
 80114a0:	463b      	mov	r3, r7
 80114a2:	4640      	mov	r0, r8
 80114a4:	4649      	mov	r1, r9
 80114a6:	f7ee ff11 	bl	80002cc <__adddf3>
 80114aa:	2400      	movs	r4, #0
 80114ac:	a37c      	add	r3, pc, #496	@ (adr r3, 80116a0 <__ieee754_pow+0xa28>)
 80114ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b2:	4620      	mov	r0, r4
 80114b4:	460d      	mov	r5, r1
 80114b6:	f7ef f8bf 	bl	8000638 <__aeabi_dmul>
 80114ba:	4642      	mov	r2, r8
 80114bc:	e9cd 0100 	strd	r0, r1, [sp]
 80114c0:	464b      	mov	r3, r9
 80114c2:	4620      	mov	r0, r4
 80114c4:	4629      	mov	r1, r5
 80114c6:	f7ee feff 	bl	80002c8 <__aeabi_dsub>
 80114ca:	4602      	mov	r2, r0
 80114cc:	460b      	mov	r3, r1
 80114ce:	4630      	mov	r0, r6
 80114d0:	4639      	mov	r1, r7
 80114d2:	f7ee fef9 	bl	80002c8 <__aeabi_dsub>
 80114d6:	a374      	add	r3, pc, #464	@ (adr r3, 80116a8 <__ieee754_pow+0xa30>)
 80114d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114dc:	f7ef f8ac 	bl	8000638 <__aeabi_dmul>
 80114e0:	a373      	add	r3, pc, #460	@ (adr r3, 80116b0 <__ieee754_pow+0xa38>)
 80114e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e6:	4680      	mov	r8, r0
 80114e8:	4689      	mov	r9, r1
 80114ea:	4620      	mov	r0, r4
 80114ec:	4629      	mov	r1, r5
 80114ee:	f7ef f8a3 	bl	8000638 <__aeabi_dmul>
 80114f2:	4602      	mov	r2, r0
 80114f4:	460b      	mov	r3, r1
 80114f6:	4640      	mov	r0, r8
 80114f8:	4649      	mov	r1, r9
 80114fa:	f7ee fee7 	bl	80002cc <__adddf3>
 80114fe:	4604      	mov	r4, r0
 8011500:	460d      	mov	r5, r1
 8011502:	4602      	mov	r2, r0
 8011504:	460b      	mov	r3, r1
 8011506:	e9dd 0100 	ldrd	r0, r1, [sp]
 801150a:	f7ee fedf 	bl	80002cc <__adddf3>
 801150e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011512:	4680      	mov	r8, r0
 8011514:	4689      	mov	r9, r1
 8011516:	f7ee fed7 	bl	80002c8 <__aeabi_dsub>
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	4620      	mov	r0, r4
 8011520:	4629      	mov	r1, r5
 8011522:	f7ee fed1 	bl	80002c8 <__aeabi_dsub>
 8011526:	4642      	mov	r2, r8
 8011528:	4606      	mov	r6, r0
 801152a:	460f      	mov	r7, r1
 801152c:	464b      	mov	r3, r9
 801152e:	4640      	mov	r0, r8
 8011530:	4649      	mov	r1, r9
 8011532:	f7ef f881 	bl	8000638 <__aeabi_dmul>
 8011536:	a360      	add	r3, pc, #384	@ (adr r3, 80116b8 <__ieee754_pow+0xa40>)
 8011538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153c:	4604      	mov	r4, r0
 801153e:	460d      	mov	r5, r1
 8011540:	f7ef f87a 	bl	8000638 <__aeabi_dmul>
 8011544:	a35e      	add	r3, pc, #376	@ (adr r3, 80116c0 <__ieee754_pow+0xa48>)
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	f7ee febd 	bl	80002c8 <__aeabi_dsub>
 801154e:	4622      	mov	r2, r4
 8011550:	462b      	mov	r3, r5
 8011552:	f7ef f871 	bl	8000638 <__aeabi_dmul>
 8011556:	a35c      	add	r3, pc, #368	@ (adr r3, 80116c8 <__ieee754_pow+0xa50>)
 8011558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155c:	f7ee feb6 	bl	80002cc <__adddf3>
 8011560:	4622      	mov	r2, r4
 8011562:	462b      	mov	r3, r5
 8011564:	f7ef f868 	bl	8000638 <__aeabi_dmul>
 8011568:	a359      	add	r3, pc, #356	@ (adr r3, 80116d0 <__ieee754_pow+0xa58>)
 801156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156e:	f7ee feab 	bl	80002c8 <__aeabi_dsub>
 8011572:	4622      	mov	r2, r4
 8011574:	462b      	mov	r3, r5
 8011576:	f7ef f85f 	bl	8000638 <__aeabi_dmul>
 801157a:	a357      	add	r3, pc, #348	@ (adr r3, 80116d8 <__ieee754_pow+0xa60>)
 801157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011580:	f7ee fea4 	bl	80002cc <__adddf3>
 8011584:	4622      	mov	r2, r4
 8011586:	462b      	mov	r3, r5
 8011588:	f7ef f856 	bl	8000638 <__aeabi_dmul>
 801158c:	4602      	mov	r2, r0
 801158e:	460b      	mov	r3, r1
 8011590:	4640      	mov	r0, r8
 8011592:	4649      	mov	r1, r9
 8011594:	f7ee fe98 	bl	80002c8 <__aeabi_dsub>
 8011598:	4604      	mov	r4, r0
 801159a:	460d      	mov	r5, r1
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	4640      	mov	r0, r8
 80115a2:	4649      	mov	r1, r9
 80115a4:	f7ef f848 	bl	8000638 <__aeabi_dmul>
 80115a8:	2200      	movs	r2, #0
 80115aa:	e9cd 0100 	strd	r0, r1, [sp]
 80115ae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80115b2:	4620      	mov	r0, r4
 80115b4:	4629      	mov	r1, r5
 80115b6:	f7ee fe87 	bl	80002c8 <__aeabi_dsub>
 80115ba:	4602      	mov	r2, r0
 80115bc:	460b      	mov	r3, r1
 80115be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115c2:	f7ef f963 	bl	800088c <__aeabi_ddiv>
 80115c6:	4632      	mov	r2, r6
 80115c8:	4604      	mov	r4, r0
 80115ca:	460d      	mov	r5, r1
 80115cc:	463b      	mov	r3, r7
 80115ce:	4640      	mov	r0, r8
 80115d0:	4649      	mov	r1, r9
 80115d2:	f7ef f831 	bl	8000638 <__aeabi_dmul>
 80115d6:	4632      	mov	r2, r6
 80115d8:	463b      	mov	r3, r7
 80115da:	f7ee fe77 	bl	80002cc <__adddf3>
 80115de:	4602      	mov	r2, r0
 80115e0:	460b      	mov	r3, r1
 80115e2:	4620      	mov	r0, r4
 80115e4:	4629      	mov	r1, r5
 80115e6:	f7ee fe6f 	bl	80002c8 <__aeabi_dsub>
 80115ea:	4642      	mov	r2, r8
 80115ec:	464b      	mov	r3, r9
 80115ee:	f7ee fe6b 	bl	80002c8 <__aeabi_dsub>
 80115f2:	460b      	mov	r3, r1
 80115f4:	4602      	mov	r2, r0
 80115f6:	493b      	ldr	r1, [pc, #236]	@ (80116e4 <__ieee754_pow+0xa6c>)
 80115f8:	2000      	movs	r0, #0
 80115fa:	f7ee fe65 	bl	80002c8 <__aeabi_dsub>
 80115fe:	ec41 0b10 	vmov	d0, r0, r1
 8011602:	ee10 3a90 	vmov	r3, s1
 8011606:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801160a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801160e:	da30      	bge.n	8011672 <__ieee754_pow+0x9fa>
 8011610:	4650      	mov	r0, sl
 8011612:	f000 fbd1 	bl	8011db8 <scalbn>
 8011616:	ec51 0b10 	vmov	r0, r1, d0
 801161a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801161e:	f7ff bbd2 	b.w	8010dc6 <__ieee754_pow+0x14e>
 8011622:	4c31      	ldr	r4, [pc, #196]	@ (80116e8 <__ieee754_pow+0xa70>)
 8011624:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8011628:	42a3      	cmp	r3, r4
 801162a:	d91a      	bls.n	8011662 <__ieee754_pow+0x9ea>
 801162c:	4b2f      	ldr	r3, [pc, #188]	@ (80116ec <__ieee754_pow+0xa74>)
 801162e:	440b      	add	r3, r1
 8011630:	4303      	orrs	r3, r0
 8011632:	d009      	beq.n	8011648 <__ieee754_pow+0x9d0>
 8011634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011638:	2200      	movs	r2, #0
 801163a:	2300      	movs	r3, #0
 801163c:	f7ef fa6e 	bl	8000b1c <__aeabi_dcmplt>
 8011640:	3800      	subs	r0, #0
 8011642:	bf18      	it	ne
 8011644:	2001      	movne	r0, #1
 8011646:	e42b      	b.n	8010ea0 <__ieee754_pow+0x228>
 8011648:	4642      	mov	r2, r8
 801164a:	464b      	mov	r3, r9
 801164c:	f7ee fe3c 	bl	80002c8 <__aeabi_dsub>
 8011650:	4632      	mov	r2, r6
 8011652:	463b      	mov	r3, r7
 8011654:	f7ef fa76 	bl	8000b44 <__aeabi_dcmpge>
 8011658:	2800      	cmp	r0, #0
 801165a:	d1eb      	bne.n	8011634 <__ieee754_pow+0x9bc>
 801165c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80116fc <__ieee754_pow+0xa84>
 8011660:	e6f7      	b.n	8011452 <__ieee754_pow+0x7da>
 8011662:	469a      	mov	sl, r3
 8011664:	4b22      	ldr	r3, [pc, #136]	@ (80116f0 <__ieee754_pow+0xa78>)
 8011666:	459a      	cmp	sl, r3
 8011668:	f63f aef3 	bhi.w	8011452 <__ieee754_pow+0x7da>
 801166c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8011670:	e715      	b.n	801149e <__ieee754_pow+0x826>
 8011672:	ec51 0b10 	vmov	r0, r1, d0
 8011676:	4619      	mov	r1, r3
 8011678:	e7cf      	b.n	801161a <__ieee754_pow+0x9a2>
 801167a:	491a      	ldr	r1, [pc, #104]	@ (80116e4 <__ieee754_pow+0xa6c>)
 801167c:	2000      	movs	r0, #0
 801167e:	f7ff bb18 	b.w	8010cb2 <__ieee754_pow+0x3a>
 8011682:	2000      	movs	r0, #0
 8011684:	2100      	movs	r1, #0
 8011686:	f7ff bb14 	b.w	8010cb2 <__ieee754_pow+0x3a>
 801168a:	4630      	mov	r0, r6
 801168c:	4639      	mov	r1, r7
 801168e:	f7ff bb10 	b.w	8010cb2 <__ieee754_pow+0x3a>
 8011692:	460c      	mov	r4, r1
 8011694:	f7ff bb5e 	b.w	8010d54 <__ieee754_pow+0xdc>
 8011698:	2400      	movs	r4, #0
 801169a:	f7ff bb49 	b.w	8010d30 <__ieee754_pow+0xb8>
 801169e:	bf00      	nop
 80116a0:	00000000 	.word	0x00000000
 80116a4:	3fe62e43 	.word	0x3fe62e43
 80116a8:	fefa39ef 	.word	0xfefa39ef
 80116ac:	3fe62e42 	.word	0x3fe62e42
 80116b0:	0ca86c39 	.word	0x0ca86c39
 80116b4:	be205c61 	.word	0xbe205c61
 80116b8:	72bea4d0 	.word	0x72bea4d0
 80116bc:	3e663769 	.word	0x3e663769
 80116c0:	c5d26bf1 	.word	0xc5d26bf1
 80116c4:	3ebbbd41 	.word	0x3ebbbd41
 80116c8:	af25de2c 	.word	0xaf25de2c
 80116cc:	3f11566a 	.word	0x3f11566a
 80116d0:	16bebd93 	.word	0x16bebd93
 80116d4:	3f66c16c 	.word	0x3f66c16c
 80116d8:	5555553e 	.word	0x5555553e
 80116dc:	3fc55555 	.word	0x3fc55555
 80116e0:	fff00000 	.word	0xfff00000
 80116e4:	3ff00000 	.word	0x3ff00000
 80116e8:	4090cbff 	.word	0x4090cbff
 80116ec:	3f6f3400 	.word	0x3f6f3400
 80116f0:	3fe00000 	.word	0x3fe00000
 80116f4:	652b82fe 	.word	0x652b82fe
 80116f8:	3c971547 	.word	0x3c971547
 80116fc:	4090cc00 	.word	0x4090cc00

08011700 <fabs>:
 8011700:	ec51 0b10 	vmov	r0, r1, d0
 8011704:	4602      	mov	r2, r0
 8011706:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801170a:	ec43 2b10 	vmov	d0, r2, r3
 801170e:	4770      	bx	lr

08011710 <__ieee754_acosf>:
 8011710:	b508      	push	{r3, lr}
 8011712:	ee10 3a10 	vmov	r3, s0
 8011716:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801171a:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801171e:	ed2d 8b0c 	vpush	{d8-d13}
 8011722:	d10a      	bne.n	801173a <__ieee754_acosf+0x2a>
 8011724:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80118bc <__ieee754_acosf+0x1ac>
 8011728:	eddf 7a65 	vldr	s15, [pc, #404]	@ 80118c0 <__ieee754_acosf+0x1b0>
 801172c:	2b00      	cmp	r3, #0
 801172e:	bfc8      	it	gt
 8011730:	eeb0 0a67 	vmovgt.f32	s0, s15
 8011734:	ecbd 8b0c 	vpop	{d8-d13}
 8011738:	bd08      	pop	{r3, pc}
 801173a:	d904      	bls.n	8011746 <__ieee754_acosf+0x36>
 801173c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8011740:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8011744:	e7f6      	b.n	8011734 <__ieee754_acosf+0x24>
 8011746:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801174a:	d23c      	bcs.n	80117c6 <__ieee754_acosf+0xb6>
 801174c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8011750:	f240 80b1 	bls.w	80118b6 <__ieee754_acosf+0x1a6>
 8011754:	ee60 7a00 	vmul.f32	s15, s0, s0
 8011758:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80118c4 <__ieee754_acosf+0x1b4>
 801175c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80118c8 <__ieee754_acosf+0x1b8>
 8011760:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 80118cc <__ieee754_acosf+0x1bc>
 8011764:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011768:	eddf 6a59 	vldr	s13, [pc, #356]	@ 80118d0 <__ieee754_acosf+0x1c0>
 801176c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011770:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80118d4 <__ieee754_acosf+0x1c4>
 8011774:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011778:	eddf 6a57 	vldr	s13, [pc, #348]	@ 80118d8 <__ieee754_acosf+0x1c8>
 801177c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011780:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 80118dc <__ieee754_acosf+0x1cc>
 8011784:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011788:	eddf 6a55 	vldr	s13, [pc, #340]	@ 80118e0 <__ieee754_acosf+0x1d0>
 801178c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8011790:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80118e4 <__ieee754_acosf+0x1d4>
 8011794:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011798:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 80118e8 <__ieee754_acosf+0x1d8>
 801179c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80117a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80117a4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80117a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80117ac:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 80118ec <__ieee754_acosf+0x1dc>
 80117b0:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80117b4:	eee0 7a46 	vfms.f32	s15, s0, s12
 80117b8:	ee70 7a67 	vsub.f32	s15, s0, s15
 80117bc:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 80118f0 <__ieee754_acosf+0x1e0>
 80117c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80117c4:	e7b6      	b.n	8011734 <__ieee754_acosf+0x24>
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	eddf da3e 	vldr	s27, [pc, #248]	@ 80118c4 <__ieee754_acosf+0x1b4>
 80117cc:	eddf ca3e 	vldr	s25, [pc, #248]	@ 80118c8 <__ieee754_acosf+0x1b8>
 80117d0:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 80118d0 <__ieee754_acosf+0x1c0>
 80117d4:	eddf ba3f 	vldr	s23, [pc, #252]	@ 80118d4 <__ieee754_acosf+0x1c4>
 80117d8:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 80118d8 <__ieee754_acosf+0x1c8>
 80117dc:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 80118dc <__ieee754_acosf+0x1cc>
 80117e0:	ed9f da3f 	vldr	s26, [pc, #252]	@ 80118e0 <__ieee754_acosf+0x1d0>
 80117e4:	eddf aa39 	vldr	s21, [pc, #228]	@ 80118cc <__ieee754_acosf+0x1bc>
 80117e8:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 80118e4 <__ieee754_acosf+0x1d4>
 80117ec:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 80118e8 <__ieee754_acosf+0x1d8>
 80117f0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 80117f4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80117f8:	da28      	bge.n	801184c <__ieee754_acosf+0x13c>
 80117fa:	ee30 8a09 	vadd.f32	s16, s0, s18
 80117fe:	ee28 0a27 	vmul.f32	s0, s16, s15
 8011802:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8011806:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801180a:	eeac ca80 	vfma.f32	s24, s25, s0
 801180e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8011812:	eeec ba00 	vfma.f32	s23, s24, s0
 8011816:	eeea 9a00 	vfma.f32	s19, s20, s0
 801181a:	eeab ba80 	vfma.f32	s22, s23, s0
 801181e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8011822:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8011826:	ee68 8a80 	vmul.f32	s17, s17, s0
 801182a:	f7ff f9a3 	bl	8010b74 <__ieee754_sqrtf>
 801182e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8011832:	eddf 7a30 	vldr	s15, [pc, #192]	@ 80118f4 <__ieee754_acosf+0x1e4>
 8011836:	eee0 7a07 	vfma.f32	s15, s0, s14
 801183a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801183e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8011842:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 80118f8 <__ieee754_acosf+0x1e8>
 8011846:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801184a:	e773      	b.n	8011734 <__ieee754_acosf+0x24>
 801184c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8011850:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011854:	eeb0 0a48 	vmov.f32	s0, s16
 8011858:	f7ff f98c 	bl	8010b74 <__ieee754_sqrtf>
 801185c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8011860:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8011864:	eeac ca88 	vfma.f32	s24, s25, s16
 8011868:	eeaa aa88 	vfma.f32	s20, s21, s16
 801186c:	eeec ba08 	vfma.f32	s23, s24, s16
 8011870:	ee10 3a10 	vmov	r3, s0
 8011874:	eeab ba88 	vfma.f32	s22, s23, s16
 8011878:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801187c:	f023 030f 	bic.w	r3, r3, #15
 8011880:	eeea 9a08 	vfma.f32	s19, s20, s16
 8011884:	ee07 3a90 	vmov	s15, r3
 8011888:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801188c:	eeb0 6a48 	vmov.f32	s12, s16
 8011890:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8011894:	eea9 9a88 	vfma.f32	s18, s19, s16
 8011898:	ee70 6a27 	vadd.f32	s13, s0, s15
 801189c:	ee68 8a88 	vmul.f32	s17, s17, s16
 80118a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80118a4:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80118a8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80118ac:	ee37 0a87 	vadd.f32	s0, s15, s14
 80118b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80118b4:	e73e      	b.n	8011734 <__ieee754_acosf+0x24>
 80118b6:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80118fc <__ieee754_acosf+0x1ec>
 80118ba:	e73b      	b.n	8011734 <__ieee754_acosf+0x24>
 80118bc:	40490fdb 	.word	0x40490fdb
 80118c0:	00000000 	.word	0x00000000
 80118c4:	3811ef08 	.word	0x3811ef08
 80118c8:	3a4f7f04 	.word	0x3a4f7f04
 80118cc:	bf303361 	.word	0xbf303361
 80118d0:	bd241146 	.word	0xbd241146
 80118d4:	3e4e0aa8 	.word	0x3e4e0aa8
 80118d8:	bea6b090 	.word	0xbea6b090
 80118dc:	3e2aaaab 	.word	0x3e2aaaab
 80118e0:	3d9dc62e 	.word	0x3d9dc62e
 80118e4:	4001572d 	.word	0x4001572d
 80118e8:	c019d139 	.word	0xc019d139
 80118ec:	33a22168 	.word	0x33a22168
 80118f0:	3fc90fda 	.word	0x3fc90fda
 80118f4:	b3a22168 	.word	0xb3a22168
 80118f8:	40490fda 	.word	0x40490fda
 80118fc:	3fc90fdb 	.word	0x3fc90fdb

08011900 <__ieee754_asinf>:
 8011900:	b538      	push	{r3, r4, r5, lr}
 8011902:	ee10 5a10 	vmov	r5, s0
 8011906:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801190a:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801190e:	ed2d 8b04 	vpush	{d8-d9}
 8011912:	d10c      	bne.n	801192e <__ieee754_asinf+0x2e>
 8011914:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8011a8c <__ieee754_asinf+0x18c>
 8011918:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8011a90 <__ieee754_asinf+0x190>
 801191c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011920:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011924:	eeb0 0a67 	vmov.f32	s0, s15
 8011928:	ecbd 8b04 	vpop	{d8-d9}
 801192c:	bd38      	pop	{r3, r4, r5, pc}
 801192e:	d904      	bls.n	801193a <__ieee754_asinf+0x3a>
 8011930:	ee70 7a40 	vsub.f32	s15, s0, s0
 8011934:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8011938:	e7f6      	b.n	8011928 <__ieee754_asinf+0x28>
 801193a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801193e:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8011942:	d20b      	bcs.n	801195c <__ieee754_asinf+0x5c>
 8011944:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8011948:	d252      	bcs.n	80119f0 <__ieee754_asinf+0xf0>
 801194a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8011a94 <__ieee754_asinf+0x194>
 801194e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011952:	eef4 7ae8 	vcmpe.f32	s15, s17
 8011956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195a:	dce5      	bgt.n	8011928 <__ieee754_asinf+0x28>
 801195c:	f7fe ffc8 	bl	80108f0 <fabsf>
 8011960:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8011964:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011968:	ee28 8a27 	vmul.f32	s16, s16, s15
 801196c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8011a98 <__ieee754_asinf+0x198>
 8011970:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8011a9c <__ieee754_asinf+0x19c>
 8011974:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8011aa0 <__ieee754_asinf+0x1a0>
 8011978:	eea8 7a27 	vfma.f32	s14, s16, s15
 801197c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8011aa4 <__ieee754_asinf+0x1a4>
 8011980:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011984:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8011aa8 <__ieee754_asinf+0x1a8>
 8011988:	eea7 7a88 	vfma.f32	s14, s15, s16
 801198c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8011aac <__ieee754_asinf+0x1ac>
 8011990:	eee7 7a08 	vfma.f32	s15, s14, s16
 8011994:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8011ab0 <__ieee754_asinf+0x1b0>
 8011998:	eea7 9a88 	vfma.f32	s18, s15, s16
 801199c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8011ab4 <__ieee754_asinf+0x1b4>
 80119a0:	eee8 7a07 	vfma.f32	s15, s16, s14
 80119a4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8011ab8 <__ieee754_asinf+0x1b8>
 80119a8:	eea7 7a88 	vfma.f32	s14, s15, s16
 80119ac:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011abc <__ieee754_asinf+0x1bc>
 80119b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80119b4:	eeb0 0a48 	vmov.f32	s0, s16
 80119b8:	eee7 8a88 	vfma.f32	s17, s15, s16
 80119bc:	f7ff f8da 	bl	8010b74 <__ieee754_sqrtf>
 80119c0:	4b3f      	ldr	r3, [pc, #252]	@ (8011ac0 <__ieee754_asinf+0x1c0>)
 80119c2:	ee29 9a08 	vmul.f32	s18, s18, s16
 80119c6:	429c      	cmp	r4, r3
 80119c8:	ee89 6a28 	vdiv.f32	s12, s18, s17
 80119cc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80119d0:	d93d      	bls.n	8011a4e <__ieee754_asinf+0x14e>
 80119d2:	eea0 0a06 	vfma.f32	s0, s0, s12
 80119d6:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8011ac4 <__ieee754_asinf+0x1c4>
 80119da:	eee0 7a26 	vfma.f32	s15, s0, s13
 80119de:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8011a90 <__ieee754_asinf+0x190>
 80119e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80119e6:	2d00      	cmp	r5, #0
 80119e8:	bfd8      	it	le
 80119ea:	eeb1 0a40 	vnegle.f32	s0, s0
 80119ee:	e79b      	b.n	8011928 <__ieee754_asinf+0x28>
 80119f0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80119f4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8011a9c <__ieee754_asinf+0x19c>
 80119f8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8011a98 <__ieee754_asinf+0x198>
 80119fc:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8011ab0 <__ieee754_asinf+0x1b0>
 8011a00:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8011a04:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011aa4 <__ieee754_asinf+0x1a4>
 8011a08:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a0c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8011aa8 <__ieee754_asinf+0x1a8>
 8011a10:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a14:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8011aac <__ieee754_asinf+0x1ac>
 8011a18:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011a1c:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8011aa0 <__ieee754_asinf+0x1a0>
 8011a20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011a24:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8011ab4 <__ieee754_asinf+0x1b4>
 8011a28:	eee7 6a86 	vfma.f32	s13, s15, s12
 8011a2c:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8011ab8 <__ieee754_asinf+0x1b8>
 8011a30:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011a34:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8011abc <__ieee754_asinf+0x1bc>
 8011a38:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011a3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a40:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8011a44:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8011a48:	eea0 0a27 	vfma.f32	s0, s0, s15
 8011a4c:	e76c      	b.n	8011928 <__ieee754_asinf+0x28>
 8011a4e:	ee10 3a10 	vmov	r3, s0
 8011a52:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8011a56:	f023 030f 	bic.w	r3, r3, #15
 8011a5a:	ee07 3a10 	vmov	s14, r3
 8011a5e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8011a62:	ee70 5a00 	vadd.f32	s11, s0, s0
 8011a66:	ee30 0a07 	vadd.f32	s0, s0, s14
 8011a6a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011a8c <__ieee754_asinf+0x18c>
 8011a6e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8011a72:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8011ac8 <__ieee754_asinf+0x1c8>
 8011a76:	eee5 7a66 	vfms.f32	s15, s10, s13
 8011a7a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8011a7e:	eeb0 6a40 	vmov.f32	s12, s0
 8011a82:	eea7 6a66 	vfms.f32	s12, s14, s13
 8011a86:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8011a8a:	e7aa      	b.n	80119e2 <__ieee754_asinf+0xe2>
 8011a8c:	b33bbd2e 	.word	0xb33bbd2e
 8011a90:	3fc90fdb 	.word	0x3fc90fdb
 8011a94:	7149f2ca 	.word	0x7149f2ca
 8011a98:	3a4f7f04 	.word	0x3a4f7f04
 8011a9c:	3811ef08 	.word	0x3811ef08
 8011aa0:	3e2aaaab 	.word	0x3e2aaaab
 8011aa4:	bd241146 	.word	0xbd241146
 8011aa8:	3e4e0aa8 	.word	0x3e4e0aa8
 8011aac:	bea6b090 	.word	0xbea6b090
 8011ab0:	3d9dc62e 	.word	0x3d9dc62e
 8011ab4:	bf303361 	.word	0xbf303361
 8011ab8:	4001572d 	.word	0x4001572d
 8011abc:	c019d139 	.word	0xc019d139
 8011ac0:	3f799999 	.word	0x3f799999
 8011ac4:	333bbd2e 	.word	0x333bbd2e
 8011ac8:	3f490fdb 	.word	0x3f490fdb

08011acc <__ieee754_atan2f>:
 8011acc:	ee10 2a90 	vmov	r2, s1
 8011ad0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8011ad4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011ad8:	b510      	push	{r4, lr}
 8011ada:	eef0 7a40 	vmov.f32	s15, s0
 8011ade:	d806      	bhi.n	8011aee <__ieee754_atan2f+0x22>
 8011ae0:	ee10 0a10 	vmov	r0, s0
 8011ae4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8011ae8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011aec:	d904      	bls.n	8011af8 <__ieee754_atan2f+0x2c>
 8011aee:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8011af2:	eeb0 0a67 	vmov.f32	s0, s15
 8011af6:	bd10      	pop	{r4, pc}
 8011af8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8011afc:	d103      	bne.n	8011b06 <__ieee754_atan2f+0x3a>
 8011afe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b02:	f000 b883 	b.w	8011c0c <atanf>
 8011b06:	1794      	asrs	r4, r2, #30
 8011b08:	f004 0402 	and.w	r4, r4, #2
 8011b0c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8011b10:	b943      	cbnz	r3, 8011b24 <__ieee754_atan2f+0x58>
 8011b12:	2c02      	cmp	r4, #2
 8011b14:	d05e      	beq.n	8011bd4 <__ieee754_atan2f+0x108>
 8011b16:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011be8 <__ieee754_atan2f+0x11c>
 8011b1a:	2c03      	cmp	r4, #3
 8011b1c:	bf08      	it	eq
 8011b1e:	eef0 7a47 	vmoveq.f32	s15, s14
 8011b22:	e7e6      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011b24:	b941      	cbnz	r1, 8011b38 <__ieee754_atan2f+0x6c>
 8011b26:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8011bec <__ieee754_atan2f+0x120>
 8011b2a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011bf0 <__ieee754_atan2f+0x124>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	bfb8      	it	lt
 8011b32:	eef0 7a47 	vmovlt.f32	s15, s14
 8011b36:	e7dc      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011b38:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8011b3c:	d110      	bne.n	8011b60 <__ieee754_atan2f+0x94>
 8011b3e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b42:	f104 34ff 	add.w	r4, r4, #4294967295
 8011b46:	d107      	bne.n	8011b58 <__ieee754_atan2f+0x8c>
 8011b48:	2c02      	cmp	r4, #2
 8011b4a:	d846      	bhi.n	8011bda <__ieee754_atan2f+0x10e>
 8011b4c:	4b29      	ldr	r3, [pc, #164]	@ (8011bf4 <__ieee754_atan2f+0x128>)
 8011b4e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011b52:	edd3 7a00 	vldr	s15, [r3]
 8011b56:	e7cc      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011b58:	2c02      	cmp	r4, #2
 8011b5a:	d841      	bhi.n	8011be0 <__ieee754_atan2f+0x114>
 8011b5c:	4b26      	ldr	r3, [pc, #152]	@ (8011bf8 <__ieee754_atan2f+0x12c>)
 8011b5e:	e7f6      	b.n	8011b4e <__ieee754_atan2f+0x82>
 8011b60:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011b64:	d0df      	beq.n	8011b26 <__ieee754_atan2f+0x5a>
 8011b66:	1a5b      	subs	r3, r3, r1
 8011b68:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8011b6c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8011b70:	da1a      	bge.n	8011ba8 <__ieee754_atan2f+0xdc>
 8011b72:	2a00      	cmp	r2, #0
 8011b74:	da01      	bge.n	8011b7a <__ieee754_atan2f+0xae>
 8011b76:	313c      	adds	r1, #60	@ 0x3c
 8011b78:	db19      	blt.n	8011bae <__ieee754_atan2f+0xe2>
 8011b7a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8011b7e:	f7fe feb7 	bl	80108f0 <fabsf>
 8011b82:	f000 f843 	bl	8011c0c <atanf>
 8011b86:	eef0 7a40 	vmov.f32	s15, s0
 8011b8a:	2c01      	cmp	r4, #1
 8011b8c:	d012      	beq.n	8011bb4 <__ieee754_atan2f+0xe8>
 8011b8e:	2c02      	cmp	r4, #2
 8011b90:	d017      	beq.n	8011bc2 <__ieee754_atan2f+0xf6>
 8011b92:	2c00      	cmp	r4, #0
 8011b94:	d0ad      	beq.n	8011af2 <__ieee754_atan2f+0x26>
 8011b96:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8011bfc <__ieee754_atan2f+0x130>
 8011b9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011b9e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8011c00 <__ieee754_atan2f+0x134>
 8011ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ba6:	e7a4      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011ba8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011bec <__ieee754_atan2f+0x120>
 8011bac:	e7ed      	b.n	8011b8a <__ieee754_atan2f+0xbe>
 8011bae:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8011c04 <__ieee754_atan2f+0x138>
 8011bb2:	e7ea      	b.n	8011b8a <__ieee754_atan2f+0xbe>
 8011bb4:	ee17 3a90 	vmov	r3, s15
 8011bb8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8011bbc:	ee07 3a90 	vmov	s15, r3
 8011bc0:	e797      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011bc2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8011bfc <__ieee754_atan2f+0x130>
 8011bc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011bca:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8011c00 <__ieee754_atan2f+0x134>
 8011bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bd2:	e78e      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011bd4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8011c00 <__ieee754_atan2f+0x134>
 8011bd8:	e78b      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011bda:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8011c08 <__ieee754_atan2f+0x13c>
 8011bde:	e788      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011be0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8011c04 <__ieee754_atan2f+0x138>
 8011be4:	e785      	b.n	8011af2 <__ieee754_atan2f+0x26>
 8011be6:	bf00      	nop
 8011be8:	c0490fdb 	.word	0xc0490fdb
 8011bec:	3fc90fdb 	.word	0x3fc90fdb
 8011bf0:	bfc90fdb 	.word	0xbfc90fdb
 8011bf4:	0801258c 	.word	0x0801258c
 8011bf8:	08012580 	.word	0x08012580
 8011bfc:	33bbbd2e 	.word	0x33bbbd2e
 8011c00:	40490fdb 	.word	0x40490fdb
 8011c04:	00000000 	.word	0x00000000
 8011c08:	3f490fdb 	.word	0x3f490fdb

08011c0c <atanf>:
 8011c0c:	b538      	push	{r3, r4, r5, lr}
 8011c0e:	ee10 5a10 	vmov	r5, s0
 8011c12:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011c16:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011c1a:	eef0 7a40 	vmov.f32	s15, s0
 8011c1e:	d310      	bcc.n	8011c42 <atanf+0x36>
 8011c20:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011c24:	d904      	bls.n	8011c30 <atanf+0x24>
 8011c26:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8011c2e:	bd38      	pop	{r3, r4, r5, pc}
 8011c30:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011d68 <atanf+0x15c>
 8011c34:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011d6c <atanf+0x160>
 8011c38:	2d00      	cmp	r5, #0
 8011c3a:	bfc8      	it	gt
 8011c3c:	eef0 7a47 	vmovgt.f32	s15, s14
 8011c40:	e7f3      	b.n	8011c2a <atanf+0x1e>
 8011c42:	4b4b      	ldr	r3, [pc, #300]	@ (8011d70 <atanf+0x164>)
 8011c44:	429c      	cmp	r4, r3
 8011c46:	d810      	bhi.n	8011c6a <atanf+0x5e>
 8011c48:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011c4c:	d20a      	bcs.n	8011c64 <atanf+0x58>
 8011c4e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011d74 <atanf+0x168>
 8011c52:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011c56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011c5a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c62:	dce2      	bgt.n	8011c2a <atanf+0x1e>
 8011c64:	f04f 33ff 	mov.w	r3, #4294967295
 8011c68:	e013      	b.n	8011c92 <atanf+0x86>
 8011c6a:	f7fe fe41 	bl	80108f0 <fabsf>
 8011c6e:	4b42      	ldr	r3, [pc, #264]	@ (8011d78 <atanf+0x16c>)
 8011c70:	429c      	cmp	r4, r3
 8011c72:	d84f      	bhi.n	8011d14 <atanf+0x108>
 8011c74:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011c78:	429c      	cmp	r4, r3
 8011c7a:	d841      	bhi.n	8011d00 <atanf+0xf4>
 8011c7c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8011c80:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011c84:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011c88:	2300      	movs	r3, #0
 8011c8a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011c92:	1c5a      	adds	r2, r3, #1
 8011c94:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011c98:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011d7c <atanf+0x170>
 8011c9c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8011d80 <atanf+0x174>
 8011ca0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011d84 <atanf+0x178>
 8011ca4:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011ca8:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011cac:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011d88 <atanf+0x17c>
 8011cb0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011cb4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011d8c <atanf+0x180>
 8011cb8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011cbc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8011d90 <atanf+0x184>
 8011cc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011cc4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011d94 <atanf+0x188>
 8011cc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011ccc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011d98 <atanf+0x18c>
 8011cd0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011cd4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011d9c <atanf+0x190>
 8011cd8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011cdc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8011da0 <atanf+0x194>
 8011ce0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011ce4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011da4 <atanf+0x198>
 8011ce8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011cec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011cf0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011cf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011cf8:	d121      	bne.n	8011d3e <atanf+0x132>
 8011cfa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011cfe:	e794      	b.n	8011c2a <atanf+0x1e>
 8011d00:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011d04:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011d08:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d12:	e7be      	b.n	8011c92 <atanf+0x86>
 8011d14:	4b24      	ldr	r3, [pc, #144]	@ (8011da8 <atanf+0x19c>)
 8011d16:	429c      	cmp	r4, r3
 8011d18:	d80b      	bhi.n	8011d32 <atanf+0x126>
 8011d1a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8011d1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011d22:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011d26:	2302      	movs	r3, #2
 8011d28:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011d30:	e7af      	b.n	8011c92 <atanf+0x86>
 8011d32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011d36:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d3a:	2303      	movs	r3, #3
 8011d3c:	e7a9      	b.n	8011c92 <atanf+0x86>
 8011d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8011dac <atanf+0x1a0>)
 8011d40:	491b      	ldr	r1, [pc, #108]	@ (8011db0 <atanf+0x1a4>)
 8011d42:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011d46:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011d4a:	edd3 6a00 	vldr	s13, [r3]
 8011d4e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011d52:	2d00      	cmp	r5, #0
 8011d54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011d58:	edd2 7a00 	vldr	s15, [r2]
 8011d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011d60:	bfb8      	it	lt
 8011d62:	eef1 7a67 	vneglt.f32	s15, s15
 8011d66:	e760      	b.n	8011c2a <atanf+0x1e>
 8011d68:	bfc90fdb 	.word	0xbfc90fdb
 8011d6c:	3fc90fdb 	.word	0x3fc90fdb
 8011d70:	3edfffff 	.word	0x3edfffff
 8011d74:	7149f2ca 	.word	0x7149f2ca
 8011d78:	3f97ffff 	.word	0x3f97ffff
 8011d7c:	3c8569d7 	.word	0x3c8569d7
 8011d80:	3d4bda59 	.word	0x3d4bda59
 8011d84:	bd6ef16b 	.word	0xbd6ef16b
 8011d88:	3d886b35 	.word	0x3d886b35
 8011d8c:	3dba2e6e 	.word	0x3dba2e6e
 8011d90:	3e124925 	.word	0x3e124925
 8011d94:	3eaaaaab 	.word	0x3eaaaaab
 8011d98:	bd15a221 	.word	0xbd15a221
 8011d9c:	bd9d8795 	.word	0xbd9d8795
 8011da0:	bde38e38 	.word	0xbde38e38
 8011da4:	be4ccccd 	.word	0xbe4ccccd
 8011da8:	401bffff 	.word	0x401bffff
 8011dac:	080125a8 	.word	0x080125a8
 8011db0:	08012598 	.word	0x08012598
 8011db4:	00000000 	.word	0x00000000

08011db8 <scalbn>:
 8011db8:	b570      	push	{r4, r5, r6, lr}
 8011dba:	ec55 4b10 	vmov	r4, r5, d0
 8011dbe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011dc2:	4606      	mov	r6, r0
 8011dc4:	462b      	mov	r3, r5
 8011dc6:	b991      	cbnz	r1, 8011dee <scalbn+0x36>
 8011dc8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8011dcc:	4323      	orrs	r3, r4
 8011dce:	d03d      	beq.n	8011e4c <scalbn+0x94>
 8011dd0:	4b35      	ldr	r3, [pc, #212]	@ (8011ea8 <scalbn+0xf0>)
 8011dd2:	4620      	mov	r0, r4
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	f7ee fc2e 	bl	8000638 <__aeabi_dmul>
 8011ddc:	4b33      	ldr	r3, [pc, #204]	@ (8011eac <scalbn+0xf4>)
 8011dde:	429e      	cmp	r6, r3
 8011de0:	4604      	mov	r4, r0
 8011de2:	460d      	mov	r5, r1
 8011de4:	da0f      	bge.n	8011e06 <scalbn+0x4e>
 8011de6:	a328      	add	r3, pc, #160	@ (adr r3, 8011e88 <scalbn+0xd0>)
 8011de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dec:	e01e      	b.n	8011e2c <scalbn+0x74>
 8011dee:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011df2:	4291      	cmp	r1, r2
 8011df4:	d10b      	bne.n	8011e0e <scalbn+0x56>
 8011df6:	4622      	mov	r2, r4
 8011df8:	4620      	mov	r0, r4
 8011dfa:	4629      	mov	r1, r5
 8011dfc:	f7ee fa66 	bl	80002cc <__adddf3>
 8011e00:	4604      	mov	r4, r0
 8011e02:	460d      	mov	r5, r1
 8011e04:	e022      	b.n	8011e4c <scalbn+0x94>
 8011e06:	460b      	mov	r3, r1
 8011e08:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011e0c:	3936      	subs	r1, #54	@ 0x36
 8011e0e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011e12:	4296      	cmp	r6, r2
 8011e14:	dd0d      	ble.n	8011e32 <scalbn+0x7a>
 8011e16:	2d00      	cmp	r5, #0
 8011e18:	a11d      	add	r1, pc, #116	@ (adr r1, 8011e90 <scalbn+0xd8>)
 8011e1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e1e:	da02      	bge.n	8011e26 <scalbn+0x6e>
 8011e20:	a11d      	add	r1, pc, #116	@ (adr r1, 8011e98 <scalbn+0xe0>)
 8011e22:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e26:	a31a      	add	r3, pc, #104	@ (adr r3, 8011e90 <scalbn+0xd8>)
 8011e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2c:	f7ee fc04 	bl	8000638 <__aeabi_dmul>
 8011e30:	e7e6      	b.n	8011e00 <scalbn+0x48>
 8011e32:	1872      	adds	r2, r6, r1
 8011e34:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011e38:	428a      	cmp	r2, r1
 8011e3a:	dcec      	bgt.n	8011e16 <scalbn+0x5e>
 8011e3c:	2a00      	cmp	r2, #0
 8011e3e:	dd08      	ble.n	8011e52 <scalbn+0x9a>
 8011e40:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e44:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011e48:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e4c:	ec45 4b10 	vmov	d0, r4, r5
 8011e50:	bd70      	pop	{r4, r5, r6, pc}
 8011e52:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011e56:	da08      	bge.n	8011e6a <scalbn+0xb2>
 8011e58:	2d00      	cmp	r5, #0
 8011e5a:	a10b      	add	r1, pc, #44	@ (adr r1, 8011e88 <scalbn+0xd0>)
 8011e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e60:	dac1      	bge.n	8011de6 <scalbn+0x2e>
 8011e62:	a10f      	add	r1, pc, #60	@ (adr r1, 8011ea0 <scalbn+0xe8>)
 8011e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e68:	e7bd      	b.n	8011de6 <scalbn+0x2e>
 8011e6a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011e6e:	3236      	adds	r2, #54	@ 0x36
 8011e70:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011e74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011e78:	4620      	mov	r0, r4
 8011e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8011eb0 <scalbn+0xf8>)
 8011e7c:	4629      	mov	r1, r5
 8011e7e:	2200      	movs	r2, #0
 8011e80:	e7d4      	b.n	8011e2c <scalbn+0x74>
 8011e82:	bf00      	nop
 8011e84:	f3af 8000 	nop.w
 8011e88:	c2f8f359 	.word	0xc2f8f359
 8011e8c:	01a56e1f 	.word	0x01a56e1f
 8011e90:	8800759c 	.word	0x8800759c
 8011e94:	7e37e43c 	.word	0x7e37e43c
 8011e98:	8800759c 	.word	0x8800759c
 8011e9c:	fe37e43c 	.word	0xfe37e43c
 8011ea0:	c2f8f359 	.word	0xc2f8f359
 8011ea4:	81a56e1f 	.word	0x81a56e1f
 8011ea8:	43500000 	.word	0x43500000
 8011eac:	ffff3cb0 	.word	0xffff3cb0
 8011eb0:	3c900000 	.word	0x3c900000

08011eb4 <with_errno>:
 8011eb4:	b510      	push	{r4, lr}
 8011eb6:	ed2d 8b02 	vpush	{d8}
 8011eba:	eeb0 8a40 	vmov.f32	s16, s0
 8011ebe:	eef0 8a60 	vmov.f32	s17, s1
 8011ec2:	4604      	mov	r4, r0
 8011ec4:	f7fa fd4e 	bl	800c964 <__errno>
 8011ec8:	eeb0 0a48 	vmov.f32	s0, s16
 8011ecc:	eef0 0a68 	vmov.f32	s1, s17
 8011ed0:	ecbd 8b02 	vpop	{d8}
 8011ed4:	6004      	str	r4, [r0, #0]
 8011ed6:	bd10      	pop	{r4, pc}

08011ed8 <xflow>:
 8011ed8:	4603      	mov	r3, r0
 8011eda:	b507      	push	{r0, r1, r2, lr}
 8011edc:	ec51 0b10 	vmov	r0, r1, d0
 8011ee0:	b183      	cbz	r3, 8011f04 <xflow+0x2c>
 8011ee2:	4602      	mov	r2, r0
 8011ee4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011ee8:	e9cd 2300 	strd	r2, r3, [sp]
 8011eec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011ef0:	f7ee fba2 	bl	8000638 <__aeabi_dmul>
 8011ef4:	ec41 0b10 	vmov	d0, r0, r1
 8011ef8:	2022      	movs	r0, #34	@ 0x22
 8011efa:	b003      	add	sp, #12
 8011efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f00:	f7ff bfd8 	b.w	8011eb4 <with_errno>
 8011f04:	4602      	mov	r2, r0
 8011f06:	460b      	mov	r3, r1
 8011f08:	e7ee      	b.n	8011ee8 <xflow+0x10>
 8011f0a:	0000      	movs	r0, r0
 8011f0c:	0000      	movs	r0, r0
	...

08011f10 <__math_uflow>:
 8011f10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011f18 <__math_uflow+0x8>
 8011f14:	f7ff bfe0 	b.w	8011ed8 <xflow>
 8011f18:	00000000 	.word	0x00000000
 8011f1c:	10000000 	.word	0x10000000

08011f20 <__math_oflow>:
 8011f20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8011f28 <__math_oflow+0x8>
 8011f24:	f7ff bfd8 	b.w	8011ed8 <xflow>
 8011f28:	00000000 	.word	0x00000000
 8011f2c:	70000000 	.word	0x70000000

08011f30 <_init>:
 8011f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f32:	bf00      	nop
 8011f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f36:	bc08      	pop	{r3}
 8011f38:	469e      	mov	lr, r3
 8011f3a:	4770      	bx	lr

08011f3c <_fini>:
 8011f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f3e:	bf00      	nop
 8011f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f42:	bc08      	pop	{r3}
 8011f44:	469e      	mov	lr, r3
 8011f46:	4770      	bx	lr
